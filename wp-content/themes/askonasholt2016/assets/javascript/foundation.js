window.whatInput = function () {

  'use strict';

  /*
    ---------------
    variables
    ---------------
  */

  // array of actively pressed keys

  var activeKeys = [];

  // cache document.body
  var body;

  // boolean: true if touch buffer timer is running
  var buffer = false;

  // the last used input type
  var currentInput = null;

  // `input` types that don't accept text
  var nonTypingInputs = ['button', 'checkbox', 'file', 'image', 'radio', 'reset', 'submit'];

  // detect version of mouse wheel event to use
  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
  var mouseWheel = detectWheel();

  // list of modifier keys commonly used with the mouse and
  // can be safely ignored to prevent false keyboard detection
  var ignoreMap = [16, // shift
  17, // control
  18, // alt
  91, // Windows key / left Apple cmd
  93 // Windows menu / right Apple cmd
  ];

  // mapping of events to input types
  var inputMap = {
    'keydown': 'keyboard',
    'keyup': 'keyboard',
    'mousedown': 'mouse',
    'mousemove': 'mouse',
    'MSPointerDown': 'pointer',
    'MSPointerMove': 'pointer',
    'pointerdown': 'pointer',
    'pointermove': 'pointer',
    'touchstart': 'touch'
  };

  // add correct mouse wheel event mapping to `inputMap`
  inputMap[detectWheel()] = 'mouse';

  // array of all used input types
  var inputTypes = [];

  // mapping of key codes to a common name
  var keyMap = {
    9: 'tab',
    13: 'enter',
    16: 'shift',
    27: 'esc',
    32: 'space',
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down'
  };

  // map of IE 10 pointer events
  var pointerMap = {
    2: 'touch',
    3: 'touch', // treat pen like touch
    4: 'mouse'
  };

  // touch buffer timer
  var timer;

  /*
    ---------------
    functions
    ---------------
  */

  // allows events that are also triggered to be filtered out for `touchstart`
  function eventBuffer() {
    clearTimer();
    setInput(event);

    buffer = true;
    timer = window.setTimeout(function () {
      buffer = false;
    }, 650);
  }

  function bufferedEvent(event) {
    if (!buffer) setInput(event);
  }

  function unBufferedEvent(event) {
    clearTimer();
    setInput(event);
  }

  function clearTimer() {
    window.clearTimeout(timer);
  }

  function setInput(event) {
    var eventKey = key(event);
    var value = inputMap[event.type];
    if (value === 'pointer') value = pointerType(event);

    // don't do anything if the value matches the input type already set
    if (currentInput !== value) {
      var eventTarget = target(event);
      var eventTargetNode = eventTarget.nodeName.toLowerCase();
      var eventTargetType = eventTargetNode === 'input' ? eventTarget.getAttribute('type') : null;

      if ( // only if the user flag to allow typing in form fields isn't set
      !body.hasAttribute('data-whatinput-formtyping') &&

      // only if currentInput has a value
      currentInput &&

      // only if the input is `keyboard`
      value === 'keyboard' &&

      // not if the key is `TAB`
      keyMap[eventKey] !== 'tab' && (

      // only if the target is a form input that accepts text
      eventTargetNode === 'textarea' || eventTargetNode === 'select' || eventTargetNode === 'input' && nonTypingInputs.indexOf(eventTargetType) < 0) ||
      // ignore modifier keys
      ignoreMap.indexOf(eventKey) > -1) {
        // ignore keyboard typing
      } else {
        switchInput(value);
      }
    }

    if (value === 'keyboard') logKeys(eventKey);
  }

  function switchInput(string) {
    currentInput = string;
    body.setAttribute('data-whatinput', currentInput);

    if (inputTypes.indexOf(currentInput) === -1) inputTypes.push(currentInput);
  }

  function key(event) {
    return event.keyCode ? event.keyCode : event.which;
  }

  function target(event) {
    return event.target || event.srcElement;
  }

  function pointerType(event) {
    if (typeof event.pointerType === 'number') {
      return pointerMap[event.pointerType];
    } else {
      return event.pointerType === 'pen' ? 'touch' : event.pointerType; // treat pen like touch
    }
  }

  // keyboard logging
  function logKeys(eventKey) {
    if (activeKeys.indexOf(keyMap[eventKey]) === -1 && keyMap[eventKey]) activeKeys.push(keyMap[eventKey]);
  }

  function unLogKeys(event) {
    var eventKey = key(event);
    var arrayPos = activeKeys.indexOf(keyMap[eventKey]);

    if (arrayPos !== -1) activeKeys.splice(arrayPos, 1);
  }

  function bindEvents() {
    body = document.body;

    // pointer events (mouse, pen, touch)
    if (window.PointerEvent) {
      body.addEventListener('pointerdown', bufferedEvent);
      body.addEventListener('pointermove', bufferedEvent);
    } else if (window.MSPointerEvent) {
      body.addEventListener('MSPointerDown', bufferedEvent);
      body.addEventListener('MSPointerMove', bufferedEvent);
    } else {

      // mouse events
      body.addEventListener('mousedown', bufferedEvent);
      body.addEventListener('mousemove', bufferedEvent);

      // touch events
      if ('ontouchstart' in window) {
        body.addEventListener('touchstart', eventBuffer);
      }
    }

    // mouse wheel
    body.addEventListener(mouseWheel, bufferedEvent);

    // keyboard events
    body.addEventListener('keydown', unBufferedEvent);
    body.addEventListener('keyup', unBufferedEvent);
    document.addEventListener('keyup', unLogKeys);
  }

  /*
    ---------------
    utilities
    ---------------
  */

  // detect version of mouse wheel event to use
  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
  function detectWheel() {
    return mouseWheel = 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support "wheel"

    document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least "mousewheel"
    'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox
  }

  /*
    ---------------
    init
     don't start script unless browser cuts the mustard,
    also passes if polyfills are used
    ---------------
  */

  if ('addEventListener' in window && Array.prototype.indexOf) {

    // if the dom is already ready already (script was placed at bottom of <body>)
    if (document.body) {
      bindEvents();

      // otherwise wait for the dom to load (script was placed in the <head>)
    } else {
      document.addEventListener('DOMContentLoaded', bindEvents);
    }
  }

  /*
    ---------------
    api
    ---------------
  */

  return {

    // returns string: the current input type
    ask: function () {
      return currentInput;
    },

    // returns array: currently pressed keys
    keys: function () {
      return activeKeys;
    },

    // returns array: all the detected input types
    types: function () {
      return inputTypes;
    },

    // accepts string: manually set the input type
    set: switchInput
  };
}();
;!function ($) {

  "use strict";

  var FOUNDATION_VERSION = '6.2.4';

  // Global Foundation object
  // This is attached to the window, or used as a module for AMD/Browserify
  var Foundation = {
    version: FOUNDATION_VERSION,

    /**
     * Stores initialized plugins.
     */
    _plugins: {},

    /**
     * Stores generated unique ids for plugin instances
     */
    _uuids: [],

    /**
     * Returns a boolean for RTL support
     */
    rtl: function () {
      return $('html').attr('dir') === 'rtl';
    },
    /**
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.
     */
    plugin: function (plugin, name) {
      // Object key to use when adding to global Foundation object
      // Examples: Foundation.Reveal, Foundation.OffCanvas
      var className = name || functionName(plugin);
      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
      // Examples: data-reveal, data-off-canvas
      var attrName = hyphenate(className);

      // Add to the Foundation object and the plugins list (for reflowing)
      this._plugins[attrName] = this[className] = plugin;
    },
    /**
     * @function
     * Populates the _uuids array with pointers to each individual plugin instance.
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @param {String} name - the name of the plugin, passed as a camelCased string.
     * @fires Plugin#init
     */
    registerPlugin: function (plugin, name) {
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
      plugin.uuid = this.GetYoDigits(6, pluginName);

      if (!plugin.$element.attr(`data-${ pluginName }`)) {
        plugin.$element.attr(`data-${ pluginName }`, plugin.uuid);
      }
      if (!plugin.$element.data('zfPlugin')) {
        plugin.$element.data('zfPlugin', plugin);
      }
      /**
       * Fires when the plugin has initialized.
       * @event Plugin#init
       */
      plugin.$element.trigger(`init.zf.${ pluginName }`);

      this._uuids.push(plugin.uuid);

      return;
    },
    /**
     * @function
     * Removes the plugins uuid from the _uuids array.
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
     * Also fires the destroyed event for the plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @fires Plugin#destroyed
     */
    unregisterPlugin: function (plugin) {
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
      plugin.$element.removeAttr(`data-${ pluginName }`).removeData('zfPlugin')
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      .trigger(`destroyed.zf.${ pluginName }`);
      for (var prop in plugin) {
        plugin[prop] = null; //clean up script to prep for garbage collection.
      }
      return;
    },

    /**
     * @function
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.
     */
    reInit: function (plugins) {
      var isJQ = plugins instanceof $;
      try {
        if (isJQ) {
          plugins.each(function () {
            $(this).data('zfPlugin')._init();
          });
        } else {
          var type = typeof plugins,
              _this = this,
              fns = {
            'object': function (plgs) {
              plgs.forEach(function (p) {
                p = hyphenate(p);
                $('[data-' + p + ']').foundation('_init');
              });
            },
            'string': function () {
              plugins = hyphenate(plugins);
              $('[data-' + plugins + ']').foundation('_init');
            },
            'undefined': function () {
              this['object'](Object.keys(_this._plugins));
            }
          };
          fns[type](plugins);
        }
      } catch (err) {
        console.error(err);
      } finally {
        return plugins;
      }
    },

    /**
     * returns a random base-36 uid with namespacing
     * @function
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
     * @returns {String} - unique id
     */
    GetYoDigits: function (length, namespace) {
      length = length || 6;
      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? `-${ namespace }` : '');
    },
    /**
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
     */
    reflow: function (elem, plugins) {

      // If plugins is undefined, just grab everything
      if (typeof plugins === 'undefined') {
        plugins = Object.keys(this._plugins);
      }
      // If plugins is a string, convert it to an array with one item
      else if (typeof plugins === 'string') {
          plugins = [plugins];
        }

      var _this = this;

      // Iterate through each plugin
      $.each(plugins, function (i, name) {
        // Get the current plugin
        var plugin = _this._plugins[name];

        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

        // For each plugin found, initialize it
        $elem.each(function () {
          var $el = $(this),
              opts = {};
          // Don't double-dip on plugins
          if ($el.data('zfPlugin')) {
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
            return;
          }

          if ($el.attr('data-options')) {
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
              var opt = e.split(':').map(function (el) {
                return el.trim();
              });
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
            });
          }
          try {
            $el.data('zfPlugin', new plugin($(this), opts));
          } catch (er) {
            console.error(er);
          } finally {
            return;
          }
        });
      });
    },
    getFnName: functionName,
    transitionend: function ($elem) {
      var transitions = {
        'transition': 'transitionend',
        'WebkitTransition': 'webkitTransitionEnd',
        'MozTransition': 'transitionend',
        'OTransition': 'otransitionend'
      };
      var elem = document.createElement('div'),
          end;

      for (var t in transitions) {
        if (typeof elem.style[t] !== 'undefined') {
          end = transitions[t];
        }
      }
      if (end) {
        return end;
      } else {
        end = setTimeout(function () {
          $elem.triggerHandler('transitionend', [$elem]);
        }, 1);
        return 'transitionend';
      }
    }
  };

  Foundation.util = {
    /**
     * Function for applying a debounce effect to a function call.
     * @function
     * @param {Function} func - Function to be called at end of timeout.
     * @param {Number} delay - Time in ms to delay the call of `func`.
     * @returns function
     */
    throttle: function (func, delay) {
      var timer = null;

      return function () {
        var context = this,
            args = arguments;

        if (timer === null) {
          timer = setTimeout(function () {
            func.apply(context, args);
            timer = null;
          }, delay);
        }
      };
    }
  };

  // TODO: consider not making this a jQuery function
  // TODO: need way to reflow vs. re-initialize
  /**
   * The Foundation jQuery method.
   * @param {String|Array} method - An action to perform on the current jQuery object.
   */
  var foundation = function (method) {
    var type = typeof method,
        $meta = $('meta.foundation-mq'),
        $noJS = $('.no-js');

    if (!$meta.length) {
      $('<meta class="foundation-mq">').appendTo(document.head);
    }
    if ($noJS.length) {
      $noJS.removeClass('no-js');
    }

    if (type === 'undefined') {
      //needs to initialize the Foundation object, or an individual plugin.
      Foundation.MediaQuery._init();
      Foundation.reflow(this);
    } else if (type === 'string') {
      //an individual method to invoke on a plugin or group of plugins
      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
      var plugClass = this.data('zfPlugin'); //determine the class of plugin

      if (plugClass !== undefined && plugClass[method] !== undefined) {
        //make sure both the class and method exist
        if (this.length === 1) {
          //if there's only one, call it directly.
          plugClass[method].apply(plugClass, args);
        } else {
          this.each(function (i, el) {
            //otherwise loop through the jQuery collection and invoke the method on each
            plugClass[method].apply($(el).data('zfPlugin'), args);
          });
        }
      } else {
        //error for no class or no method
        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
      }
    } else {
      //error for invalid argument type
      throw new TypeError(`We're sorry, ${ type } is not a valid parameter. You must use a string representing the method you wish to invoke.`);
    }
    return this;
  };

  window.Foundation = Foundation;
  $.fn.foundation = foundation;

  // Polyfill for requestAnimationFrame
  (function () {
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
      return new Date().getTime();
    };

    var vendors = ['webkit', 'moz'];
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
      var vp = vendors[i];
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;
      window.requestAnimationFrame = function (callback) {
        var now = Date.now();
        var nextTime = Math.max(lastTime + 16, now);
        return setTimeout(function () {
          callback(lastTime = nextTime);
        }, nextTime - now);
      };
      window.cancelAnimationFrame = clearTimeout;
    }
    /**
     * Polyfill for performance.now, required by rAF
     */
    if (!window.performance || !window.performance.now) {
      window.performance = {
        start: Date.now(),
        now: function () {
          return Date.now() - this.start;
        }
      };
    }
  })();
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // closest thing possible to the ECMAScript 5
        // internal IsCallable function
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };

      if (this.prototype) {
        // native functions don't have a prototype
        fNOP.prototype = this.prototype;
      }
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
  // Polyfill to get the name of a function in IE9
  function functionName(fn) {
    if (Function.prototype.name === undefined) {
      var funcNameRegex = /function\s([^(]{1,})\(/;
      var results = funcNameRegex.exec(fn.toString());
      return results && results.length > 1 ? results[1].trim() : "";
    } else if (fn.prototype === undefined) {
      return fn.constructor.name;
    } else {
      return fn.prototype.constructor.name;
    }
  }
  function parseValue(str) {
    if (/true/.test(str)) return true;else if (/false/.test(str)) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;
  }
  // Convert PascalCase to kebab-case
  // Thank you: http://stackoverflow.com/a/8955580
  function hyphenate(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  }
}(jQuery);
;'use strict';

!function ($) {

  Foundation.Box = {
    ImNotTouchingYou: ImNotTouchingYou,
    GetDimensions: GetDimensions,
    GetOffsets: GetOffsets
  };

  /**
   * Compares the dimensions of an element to a container and determines collision events with container.
   * @function
   * @param {jQuery} element - jQuery object to test for collisions.
   * @param {jQuery} parent - jQuery object to use as bounding container.
   * @param {Boolean} lrOnly - set to true to check left and right values only.
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.
   * @default if no parent object passed, detects collisions with `window`.
   * @returns {Boolean} - true if collision free, false if a collision in any direction.
   */
  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {
    var eleDims = GetDimensions(element),
        top,
        bottom,
        left,
        right;

    if (parent) {
      var parDims = GetDimensions(parent);

      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;
      top = eleDims.offset.top >= parDims.offset.top;
      left = eleDims.offset.left >= parDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;
    } else {
      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;
      top = eleDims.offset.top >= eleDims.windowDims.offset.top;
      left = eleDims.offset.left >= eleDims.windowDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;
    }

    var allDirs = [bottom, top, left, right];

    if (lrOnly) {
      return left === right === true;
    }

    if (tbOnly) {
      return top === bottom === true;
    }

    return allDirs.indexOf(false) === -1;
  };

  /**
   * Uses native methods to return an object of dimension values.
   * @function
   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
   * @returns {Object} - nested object of integer pixel values
   * TODO - if element is window, return only those values.
   */
  function GetDimensions(elem, test) {
    elem = elem.length ? elem[0] : elem;

    if (elem === window || elem === document) {
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
    }

    var rect = elem.getBoundingClientRect(),
        parRect = elem.parentNode.getBoundingClientRect(),
        winRect = document.body.getBoundingClientRect(),
        winY = window.pageYOffset,
        winX = window.pageXOffset;

    return {
      width: rect.width,
      height: rect.height,
      offset: {
        top: rect.top + winY,
        left: rect.left + winX
      },
      parentDims: {
        width: parRect.width,
        height: parRect.height,
        offset: {
          top: parRect.top + winY,
          left: parRect.left + winX
        }
      },
      windowDims: {
        width: winRect.width,
        height: winRect.height,
        offset: {
          top: winY,
          left: winX
        }
      }
    };
  }

  /**
   * Returns an object of top and left integer pixel values for dynamically rendered elements,
   * such as: Tooltip, Reveal, and Dropdown
   * @function
   * @param {jQuery} element - jQuery object for the element being positioned.
   * @param {jQuery} anchor - jQuery object for the element's anchor point.
   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
   * TODO alter/rewrite to work with `em` values as well/instead of pixels
   */
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
    var $eleDims = GetDimensions(element),
        $anchorDims = anchor ? GetDimensions(anchor) : null;

    switch (position) {
      case 'top':
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top
        };
        break;
      case 'right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset,
          top: $anchorDims.offset.top
        };
        break;
      case 'center top':
        return {
          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'center bottom':
        return {
          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'center left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center':
        return {
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'reveal':
        return {
          left: ($eleDims.windowDims.width - $eleDims.width) / 2,
          top: $eleDims.windowDims.offset.top + vOffset
        };
      case 'reveal full':
        return {
          left: $eleDims.windowDims.offset.left,
          top: $eleDims.windowDims.offset.top
        };
        break;
      case 'left bottom':
        return {
          left: $anchorDims.offset.left,
          top: $anchorDims.offset.top + $anchorDims.height
        };
        break;
      case 'right bottom':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,
          top: $anchorDims.offset.top + $anchorDims.height
        };
        break;
      default:
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
    }
  }
}(jQuery);
;/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/

'use strict';

!function ($) {

  const keyCodes = {
    9: 'TAB',
    13: 'ENTER',
    27: 'ESCAPE',
    32: 'SPACE',
    37: 'ARROW_LEFT',
    38: 'ARROW_UP',
    39: 'ARROW_RIGHT',
    40: 'ARROW_DOWN'
  };

  var commands = {};

  var Keyboard = {
    keys: getKeyCodes(keyCodes),

    /**
     * Parses the (keyboard) event and returns a String that represents its key
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
     * @param {Event} event - the event generated by the event handler
     * @return String key - String that represents the key pressed
     */
    parseKey(event) {
      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();
      if (event.shiftKey) key = `SHIFT_${ key }`;
      if (event.ctrlKey) key = `CTRL_${ key }`;
      if (event.altKey) key = `ALT_${ key }`;
      return key;
    },

    /**
     * Handles the given (keyboard) event
     * @param {Event} event - the event generated by the event handler
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal
     * @param {Objects} functions - collection of functions that are to be executed
     */
    handleKey(event, component, functions) {
      var commandList = commands[component],
          keyCode = this.parseKey(event),
          cmds,
          command,
          fn;

      if (!commandList) return console.warn('Component not defined!');

      if (typeof commandList.ltr === 'undefined') {
        // this component does not differentiate between ltr and rtl
        cmds = commandList; // use plain list
      } else {
        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
      }
      command = cmds[keyCode];

      fn = functions[command];
      if (fn && typeof fn === 'function') {
        // execute function  if exists
        var returnValue = fn.apply();
        if (functions.handled || typeof functions.handled === 'function') {
          // execute function when event was handled
          functions.handled(returnValue);
        }
      } else {
        if (functions.unhandled || typeof functions.unhandled === 'function') {
          // execute function when event was not handled
          functions.unhandled();
        }
      }
    },

    /**
     * Finds all focusable elements within the given `$element`
     * @param {jQuery} $element - jQuery object to search within
     * @return {jQuery} $focusable - all focusable elements within `$element`
     */
    findFocusable($element) {
      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {
          return false;
        } //only have visible elements and those that have a tabindex greater or equal 0
        return true;
      });
    },

    /**
     * Returns the component name name
     * @param {Object} component - Foundation component, e.g. Slider or Reveal
     * @return String componentName
     */

    register(componentName, cmds) {
      commands[componentName] = cmds;
    }
  };

  /*
   * Constants for easier comparing.
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   */
  function getKeyCodes(kcs) {
    var k = {};
    for (var kc in kcs) k[kcs[kc]] = kcs[kc];
    return k;
  }

  Foundation.Keyboard = Keyboard;
}(jQuery);
;'use strict';

!function ($) {

  // Default set of media queries
  const defaultQueries = {
    'default': 'only screen',
    landscape: 'only screen and (orientation: landscape)',
    portrait: 'only screen and (orientation: portrait)',
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };

  var MediaQuery = {
    queries: [],

    current: '',

    /**
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function
     * @private
     */
    _init() {
      var self = this;
      var extractedStyles = $('.foundation-mq').css('font-family');
      var namedQueries;

      namedQueries = parseStyleToObject(extractedStyles);

      for (var key in namedQueries) {
        if (namedQueries.hasOwnProperty(key)) {
          self.queries.push({
            name: key,
            value: `only screen and (min-width: ${ namedQueries[key] })`
          });
        }
      }

      this.current = this._getCurrentSize();

      this._watcher();
    },

    /**
     * Checks if the screen is at least as wide as a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
     */
    atLeast(size) {
      var query = this.get(size);

      if (query) {
        return window.matchMedia(query).matches;
      }

      return false;
    },

    /**
     * Gets the media query of a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to get.
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
     */
    get(size) {
      for (var i in this.queries) {
        if (this.queries.hasOwnProperty(i)) {
          var query = this.queries[i];
          if (size === query.name) return query.value;
        }
      }

      return null;
    },

    /**
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function
     * @private
     * @returns {String} Name of the current breakpoint.
     */
    _getCurrentSize() {
      var matched;

      for (var i = 0; i < this.queries.length; i++) {
        var query = this.queries[i];

        if (window.matchMedia(query.value).matches) {
          matched = query;
        }
      }

      if (typeof matched === 'object') {
        return matched.name;
      } else {
        return matched;
      }
    },

    /**
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
     * @function
     * @private
     */
    _watcher() {
      $(window).on('resize.zf.mediaquery', () => {
        var newSize = this._getCurrentSize(),
            currentSize = this.current;

        if (newSize !== currentSize) {
          // Change the current media query
          this.current = newSize;

          // Broadcast the media query change on the window
          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
        }
      });
    }
  };

  Foundation.MediaQuery = MediaQuery;

  // matchMedia() polyfill - Test a CSS media type/query in JS.
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
  window.matchMedia || (window.matchMedia = function () {
    'use strict';

    // For browsers that support matchMedium api such as IE 9 and webkit

    var styleMedia = window.styleMedia || window.media;

    // For those that don't support matchMedium
    if (!styleMedia) {
      var style = document.createElement('style'),
          script = document.getElementsByTagName('script')[0],
          info = null;

      style.type = 'text/css';
      style.id = 'matchmediajs-test';

      script && script.parentNode && script.parentNode.insertBefore(style, script);

      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

      styleMedia = {
        matchMedium(media) {
          var text = `@media ${ media }{ #matchmediajs-test { width: 1px; } }`;

          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
          if (style.styleSheet) {
            style.styleSheet.cssText = text;
          } else {
            style.textContent = text;
          }

          // Test if media query is true or false
          return info.width === '1px';
        }
      };
    }

    return function (media) {
      return {
        matches: styleMedia.matchMedium(media || 'all'),
        media: media || 'all'
      };
    };
  }());

  // Thank you: https://github.com/sindresorhus/query-string
  function parseStyleToObject(str) {
    var styleObject = {};

    if (typeof str !== 'string') {
      return styleObject;
    }

    str = str.trim().slice(1, -1); // browsers re-quote string style values

    if (!str) {
      return styleObject;
    }

    styleObject = str.split('&').reduce(function (ret, param) {
      var parts = param.replace(/\+/g, ' ').split('=');
      var key = parts[0];
      var val = parts[1];
      key = decodeURIComponent(key);

      // missing `=` should be `null`:
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
      val = val === undefined ? null : decodeURIComponent(val);

      if (!ret.hasOwnProperty(key)) {
        ret[key] = val;
      } else if (Array.isArray(ret[key])) {
        ret[key].push(val);
      } else {
        ret[key] = [ret[key], val];
      }
      return ret;
    }, {});

    return styleObject;
  }

  Foundation.MediaQuery = MediaQuery;
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Motion module.
   * @module foundation.motion
   */

  const initClasses = ['mui-enter', 'mui-leave'];
  const activeClasses = ['mui-enter-active', 'mui-leave-active'];

  const Motion = {
    animateIn: function (element, animation, cb) {
      animate(true, element, animation, cb);
    },

    animateOut: function (element, animation, cb) {
      animate(false, element, animation, cb);
    }
  };

  function Move(duration, elem, fn) {
    var anim,
        prog,
        start = null;
    // console.log('called');

    function move(ts) {
      if (!start) start = window.performance.now();
      // console.log(start, ts);
      prog = ts - start;
      fn.apply(elem);

      if (prog < duration) {
        anim = window.requestAnimationFrame(move, elem);
      } else {
        window.cancelAnimationFrame(anim);
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      }
    }
    anim = window.requestAnimationFrame(move);
  }

  /**
   * Animates an element in or out using a CSS transition class.
   * @function
   * @private
   * @param {Boolean} isIn - Defines if the animation is in or out.
   * @param {Object} element - jQuery or HTML object to animate.
   * @param {String} animation - CSS class to use.
   * @param {Function} cb - Callback to run when animation is finished.
   */
  function animate(isIn, element, animation, cb) {
    element = $(element).eq(0);

    if (!element.length) return;

    var initClass = isIn ? initClasses[0] : initClasses[1];
    var activeClass = isIn ? activeClasses[0] : activeClasses[1];

    // Set up the animation
    reset();

    element.addClass(animation).css('transition', 'none');

    requestAnimationFrame(() => {
      element.addClass(initClass);
      if (isIn) element.show();
    });

    // Start the animation
    requestAnimationFrame(() => {
      element[0].offsetWidth;
      element.css('transition', '').addClass(activeClass);
    });

    // Clean up the animation when it finishes
    element.one(Foundation.transitionend(element), finish);

    // Hides the element (for out animations), resets the element, and runs a callback
    function finish() {
      if (!isIn) element.hide();
      reset();
      if (cb) cb.apply(element);
    }

    // Resets transitions and removes motion-specific classes
    function reset() {
      element[0].style.transitionDuration = 0;
      element.removeClass(`${ initClass } ${ activeClass } ${ animation }`);
    }
  }

  Foundation.Move = Move;
  Foundation.Motion = Motion;
}(jQuery);
;'use strict';

!function ($) {

  const Nest = {
    Feather(menu, type = 'zf') {
      menu.attr('role', 'menubar');

      var items = menu.find('li').attr({ 'role': 'menuitem' }),
          subMenuClass = `is-${ type }-submenu`,
          subItemClass = `${ subMenuClass }-item`,
          hasSubClass = `is-${ type }-submenu-parent`;

      menu.find('a:first').attr('tabindex', 0);

      items.each(function () {
        var $item = $(this),
            $sub = $item.children('ul');

        if ($sub.length) {
          $item.addClass(hasSubClass).attr({
            'aria-haspopup': true,
            'aria-expanded': false,
            'aria-label': $item.children('a:first').text()
          });

          $sub.addClass(`submenu ${ subMenuClass }`).attr({
            'data-submenu': '',
            'aria-hidden': true,
            'role': 'menu'
          });
        }

        if ($item.parent('[data-submenu]').length) {
          $item.addClass(`is-submenu-item ${ subItemClass }`);
        }
      });

      return;
    },

    Burn(menu, type) {
      var items = menu.find('li').removeAttr('tabindex'),
          subMenuClass = `is-${ type }-submenu`,
          subItemClass = `${ subMenuClass }-item`,
          hasSubClass = `is-${ type }-submenu-parent`;

      menu.find('>li, .menu, .menu > li').removeClass(`${ subMenuClass } ${ subItemClass } ${ hasSubClass } is-submenu-item submenu is-active`).removeAttr('data-submenu').css('display', '');

      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')
      //           .removeAttr('data-submenu'));
      // items.each(function(){
      //   var $item = $(this),
      //       $sub = $item.children('ul');
      //   if($item.parent('[data-submenu]').length){
      //     $item.removeClass('is-submenu-item ' + subItemClass);
      //   }
      //   if($sub.length){
      //     $item.removeClass('has-submenu');
      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');
      //   }
      // });
    }
  };

  Foundation.Nest = Nest;
}(jQuery);
;'use strict';

!function ($) {

  function Timer(elem, options, cb) {
    var _this = this,
        duration = options.duration,
        //options is an object for easily adding features later.
    nameSpace = Object.keys(elem.data())[0] || 'timer',
        remain = -1,
        start,
        timer;

    this.isPaused = false;

    this.restart = function () {
      remain = -1;
      clearTimeout(timer);
      this.start();
    };

    this.start = function () {
      this.isPaused = false;
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      remain = remain <= 0 ? duration : remain;
      elem.data('paused', false);
      start = Date.now();
      timer = setTimeout(function () {
        if (options.infinite) {
          _this.restart(); //rerun the timer.
        }
        if (cb && typeof cb === 'function') {
          cb();
        }
      }, remain);
      elem.trigger(`timerstart.zf.${ nameSpace }`);
    };

    this.pause = function () {
      this.isPaused = true;
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      elem.data('paused', true);
      var end = Date.now();
      remain = remain - (end - start);
      elem.trigger(`timerpaused.zf.${ nameSpace }`);
    };
  }

  /**
   * Runs a callback function when images are fully loaded.
   * @param {Object} images - Image(s) to check if loaded.
   * @param {Func} callback - Function to execute when image is fully loaded.
   */
  function onImagesLoaded(images, callback) {
    var self = this,
        unloaded = images.length;

    if (unloaded === 0) {
      callback();
    }

    images.each(function () {
      if (this.complete) {
        singleImageLoaded();
      } else if (typeof this.naturalWidth !== 'undefined' && this.naturalWidth > 0) {
        singleImageLoaded();
      } else {
        $(this).one('load', function () {
          singleImageLoaded();
        });
      }
    });

    function singleImageLoaded() {
      unloaded--;
      if (unloaded === 0) {
        callback();
      }
    }
  }

  Foundation.Timer = Timer;
  Foundation.onImagesLoaded = onImagesLoaded;
}(jQuery);
;//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************
(function ($) {

	$.spotSwipe = {
		version: '1.0.0',
		enabled: 'ontouchstart' in document.documentElement,
		preventDefault: false,
		moveThreshold: 75,
		timeThreshold: 200
	};

	var startPosX,
	    startPosY,
	    startTime,
	    elapsedTime,
	    isMoving = false;

	function onTouchEnd() {
		//  alert(this);
		this.removeEventListener('touchmove', onTouchMove);
		this.removeEventListener('touchend', onTouchEnd);
		isMoving = false;
	}

	function onTouchMove(e) {
		if ($.spotSwipe.preventDefault) {
			e.preventDefault();
		}
		if (isMoving) {
			var x = e.touches[0].pageX;
			var y = e.touches[0].pageY;
			var dx = startPosX - x;
			var dy = startPosY - y;
			var dir;
			elapsedTime = new Date().getTime() - startTime;
			if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
				dir = dx > 0 ? 'left' : 'right';
			}
			// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
			//   dir = dy > 0 ? 'down' : 'up';
			// }
			if (dir) {
				e.preventDefault();
				onTouchEnd.call(this);
				$(this).trigger('swipe', dir).trigger(`swipe${ dir }`);
			}
		}
	}

	function onTouchStart(e) {
		if (e.touches.length == 1) {
			startPosX = e.touches[0].pageX;
			startPosY = e.touches[0].pageY;
			isMoving = true;
			startTime = new Date().getTime();
			this.addEventListener('touchmove', onTouchMove, false);
			this.addEventListener('touchend', onTouchEnd, false);
		}
	}

	function init() {
		this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
	}

	function teardown() {
		this.removeEventListener('touchstart', onTouchStart);
	}

	$.event.special.swipe = { setup: init };

	$.each(['left', 'up', 'down', 'right'], function () {
		$.event.special[`swipe${ this }`] = { setup: function () {
				$(this).on('swipe', $.noop);
			} };
	});
})(jQuery);
/****************************************************
 * Method for adding psuedo drag events to elements *
 ***************************************************/
!function ($) {
	$.fn.addTouch = function () {
		this.each(function (i, el) {
			$(el).bind('touchstart touchmove touchend touchcancel', function () {
				//we pass the original event object because the jQuery event
				//object is normalized to w3c specs and does not provide the TouchList
				handleTouch(event);
			});
		});

		var handleTouch = function (event) {
			var touches = event.changedTouches,
			    first = touches[0],
			    eventTypes = {
				touchstart: 'mousedown',
				touchmove: 'mousemove',
				touchend: 'mouseup'
			},
			    type = eventTypes[event.type],
			    simulatedEvent;

			if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
				simulatedEvent = new window.MouseEvent(type, {
					'bubbles': true,
					'cancelable': true,
					'screenX': first.screenX,
					'screenY': first.screenY,
					'clientX': first.clientX,
					'clientY': first.clientY
				});
			} else {
				simulatedEvent = document.createEvent('MouseEvent');
				simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
			}
			first.target.dispatchEvent(simulatedEvent);
		};
	};
}(jQuery);

//**********************************
//**From the jQuery Mobile Library**
//**need to recreate functionality**
//**and try to improve if possible**
//**********************************

/* Removing the jQuery function ****
************************************

(function( $, window, undefined ) {

	var $document = $( document ),
		// supportTouch = $.mobile.support.touch,
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";

	// setup new event shortcuts
	$.each( ( "touchstart touchmove touchend " +
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {

		$.fn[ name ] = function( fn ) {
			return fn ? this.bind( name, fn ) : this.trigger( name );
		};

		// jQuery < 1.8
		if ( $.attrFn ) {
			$.attrFn[ name ] = true;
		}
	});

	function triggerCustomEvent( obj, eventType, event, bubble ) {
		var originalType = event.type;
		event.type = eventType;
		if ( bubble ) {
			$.event.trigger( event, undefined, obj );
		} else {
			$.event.dispatch.call( obj, event );
		}
		event.type = originalType;
	}

	// also handles taphold

	// Also handles swipeleft, swiperight
	$.event.special.swipe = {

		// More than this horizontal displacement, and we will suppress scrolling.
		scrollSupressionThreshold: 30,

		// More time than this, and it isn't a swipe.
		durationThreshold: 1000,

		// Swipe horizontal displacement must be more than this.
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		// Swipe vertical displacement must be less than this.
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		getLocation: function ( event ) {
			var winPageX = window.pageXOffset,
				winPageY = window.pageYOffset,
				x = event.clientX,
				y = event.clientY;

			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {

				// iOS4 clientX/clientY have the value that should have been
				// in pageX/pageY. While pageX/page/ have the value 0
				x = x - winPageX;
				y = y - winPageY;
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {

				// Some Android browsers have totally bogus values for clientX/Y
				// when scrolling/zooming a page. Detectable since clientX/clientY
				// should never be smaller than pageX/pageY minus page scroll
				x = event.pageX - winPageX;
				y = event.pageY - winPageY;
			}

			return {
				x: x,
				y: y
			};
		},

		start: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ],
						origin: $( event.target )
					};
		},

		stop: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ]
					};
		},

		handleSwipe: function( start, stop, thisObject, origTarget ) {
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";

				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;
			}
			return false;

		},

		// This serves as a flag to ensure that at most one swipe event event is
		// in work at any given time
		eventInProgress: false,

		setup: function() {
			var events,
				thisObject = this,
				$this = $( thisObject ),
				context = {};

			// Retrieve the events data for this element and add the swipe context
			events = $.data( this, "mobile-events" );
			if ( !events ) {
				events = { length: 0 };
				$.data( this, "mobile-events", events );
			}
			events.length++;
			events.swipe = context;

			context.start = function( event ) {

				// Bail if we're already working on a swipe event
				if ( $.event.special.swipe.eventInProgress ) {
					return;
				}
				$.event.special.swipe.eventInProgress = true;

				var stop,
					start = $.event.special.swipe.start( event ),
					origTarget = event.target,
					emitted = false;

				context.move = function( event ) {
					if ( !start || event.isDefaultPrevented() ) {
						return;
					}

					stop = $.event.special.swipe.stop( event );
					if ( !emitted ) {
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );
						if ( emitted ) {

							// Reset the context to make way for the next swipe event
							$.event.special.swipe.eventInProgress = false;
						}
					}
					// prevent scrolling
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
						event.preventDefault();
					}
				};

				context.stop = function() {
						emitted = true;

						// Reset the context to make way for the next swipe event
						$.event.special.swipe.eventInProgress = false;
						$document.off( touchMoveEvent, context.move );
						context.move = null;
				};

				$document.on( touchMoveEvent, context.move )
					.one( touchStopEvent, context.stop );
			};
			$this.on( touchStartEvent, context.start );
		},

		teardown: function() {
			var events, context;

			events = $.data( this, "mobile-events" );
			if ( events ) {
				context = events.swipe;
				delete events.swipe;
				events.length--;
				if ( events.length === 0 ) {
					$.removeData( this, "mobile-events" );
				}
			}

			if ( context ) {
				if ( context.start ) {
					$( this ).off( touchStartEvent, context.start );
				}
				if ( context.move ) {
					$document.off( touchMoveEvent, context.move );
				}
				if ( context.stop ) {
					$document.off( touchStopEvent, context.stop );
				}
			}
		}
	};
	$.each({
		swipeleft: "swipe.left",
		swiperight: "swipe.right"
	}, function( event, sourceEvent ) {

		$.event.special[ event ] = {
			setup: function() {
				$( this ).bind( sourceEvent, $.noop );
			},
			teardown: function() {
				$( this ).unbind( sourceEvent );
			}
		};
	});
})( jQuery, this );
*/
;'use strict';

!function ($) {

  const MutationObserver = function () {
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
    for (var i = 0; i < prefixes.length; i++) {
      if (`${ prefixes[i] }MutationObserver` in window) {
        return window[`${ prefixes[i] }MutationObserver`];
      }
    }
    return false;
  }();

  const triggers = (el, type) => {
    el.data(type).split(' ').forEach(id => {
      $(`#${ id }`)[type === 'close' ? 'trigger' : 'triggerHandler'](`${ type }.zf.trigger`, [el]);
    });
  };
  // Elements with [data-open] will reveal a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-open]', function () {
    triggers($(this), 'open');
  });

  // Elements with [data-close] will close a plugin that supports it when clicked.
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
  $(document).on('click.zf.trigger', '[data-close]', function () {
    let id = $(this).data('close');
    if (id) {
      triggers($(this), 'close');
    } else {
      $(this).trigger('close.zf.trigger');
    }
  });

  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-toggle]', function () {
    triggers($(this), 'toggle');
  });

  // Elements with [data-closable] will respond to close.zf.trigger events.
  $(document).on('close.zf.trigger', '[data-closable]', function (e) {
    e.stopPropagation();
    let animation = $(this).data('closable');

    if (animation !== '') {
      Foundation.Motion.animateOut($(this), animation, function () {
        $(this).trigger('closed.zf');
      });
    } else {
      $(this).fadeOut().trigger('closed.zf');
    }
  });

  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {
    let id = $(this).data('toggle-focus');
    $(`#${ id }`).triggerHandler('toggle.zf.trigger', [$(this)]);
  });

  /**
  * Fires once after all other scripts have loaded
  * @function
  * @private
  */
  $(window).on('load', () => {
    checkListeners();
  });

  function checkListeners() {
    eventsListener();
    resizeListener();
    scrollListener();
    closemeListener();
  }

  //******** only fires this function once on load, if there's something to watch ********
  function closemeListener(pluginName) {
    var yetiBoxes = $('[data-yeti-box]'),
        plugNames = ['dropdown', 'tooltip', 'reveal'];

    if (pluginName) {
      if (typeof pluginName === 'string') {
        plugNames.push(pluginName);
      } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
        plugNames.concat(pluginName);
      } else {
        console.error('Plugin names must be strings');
      }
    }
    if (yetiBoxes.length) {
      let listeners = plugNames.map(name => {
        return `closeme.zf.${ name }`;
      }).join(' ');

      $(window).off(listeners).on(listeners, function (e, pluginId) {
        let plugin = e.namespace.split('.')[0];
        let plugins = $(`[data-${ plugin }]`).not(`[data-yeti-box="${ pluginId }"]`);

        plugins.each(function () {
          let _this = $(this);

          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      });
    }
  }

  function resizeListener(debounce) {
    let timer,
        $nodes = $('[data-resize]');
    if ($nodes.length) {
      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('resizeme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a resize event
          $nodes.attr('data-events', "resize");
        }, debounce || 10); //default time to emit resize event
      });
    }
  }

  function scrollListener(debounce) {
    let timer,
        $nodes = $('[data-scroll]');
    if ($nodes.length) {
      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('scrollme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a scroll event
          $nodes.attr('data-events', "scroll");
        }, debounce || 10); //default time to emit scroll event
      });
    }
  }

  function eventsListener() {
    if (!MutationObserver) {
      return false;
    }
    let nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');

    //element callback
    var listeningElementsMutation = function (mutationRecordsList) {
      var $target = $(mutationRecordsList[0].target);
      //trigger the event handler for the element depending on type
      switch ($target.attr("data-events")) {

        case "resize":
          $target.triggerHandler('resizeme.zf.trigger', [$target]);
          break;

        case "scroll":
          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
          break;

        // case "mutate" :
        // console.log('mutate', $target);
        // $target.triggerHandler('mutate.zf.trigger');
        //
        // //make sure we don't get stuck in an infinite loop from sloppy codeing
        // if ($target.index('[data-mutate]') == $("[data-mutate]").length-1) {
        //   domMutationObserver();
        // }
        // break;

        default:
          return false;
        //nothing
      }
    };

    if (nodes.length) {
      //for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer
      for (var i = 0; i <= nodes.length - 1; i++) {
        let elementObserver = new MutationObserver(listeningElementsMutation);
        elementObserver.observe(nodes[i], { attributes: true, childList: false, characterData: false, subtree: false, attributeFilter: ["data-events"] });
      }
    }
  }

  // ------------------------------------

  // [PH]
  // Foundation.CheckWatchers = checkWatchers;
  Foundation.IHearYou = checkListeners;
  // Foundation.ISeeYou = scrollListener;
  // Foundation.IFeelYou = closemeListener;
}(jQuery);

// function domMutationObserver(debounce) {
//   // !!! This is coming soon and needs more work; not active  !!! //
//   var timer,
//   nodes = document.querySelectorAll('[data-mutate]');
//   //
//   if (nodes.length) {
//     // var MutationObserver = (function () {
//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
//     //   for (var i=0; i < prefixes.length; i++) {
//     //     if (prefixes[i] + 'MutationObserver' in window) {
//     //       return window[prefixes[i] + 'MutationObserver'];
//     //     }
//     //   }
//     //   return false;
//     // }());
//
//
//     //for the body, we need to listen for all changes effecting the style and class attributes
//     var bodyObserver = new MutationObserver(bodyMutation);
//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:["style", "class"]});
//
//
//     //body callback
//     function bodyMutation(mutate) {
//       //trigger all listening elements and signal a mutation event
//       if (timer) { clearTimeout(timer); }
//
//       timer = setTimeout(function() {
//         bodyObserver.disconnect();
//         $('[data-mutate]').attr('data-events',"mutate");
//       }, debounce || 150);
//     }
//   }
// }
;'use strict';

!function ($) {

  /**
   * Abide module.
   * @module foundation.abide
   */

  class Abide {
    /**
     * Creates a new instance of Abide.
     * @class
     * @fires Abide#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options = {}) {
      this.$element = element;
      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Abide');
    }

    /**
     * Initializes the Abide plugin and calls functions to get Abide functioning on load.
     * @private
     */
    _init() {
      this.$inputs = this.$element.find('input, textarea, select');

      this._events();
    }

    /**
     * Initializes events for Abide.
     * @private
     */
    _events() {
      this.$element.off('.abide').on('reset.zf.abide', () => {
        this.resetForm();
      }).on('submit.zf.abide', () => {
        return this.validateForm();
      });

      if (this.options.validateOn === 'fieldChange') {
        this.$inputs.off('change.zf.abide').on('change.zf.abide', e => {
          this.validateInput($(e.target));
        });
      }

      if (this.options.liveValidate) {
        this.$inputs.off('input.zf.abide').on('input.zf.abide', e => {
          this.validateInput($(e.target));
        });
      }
    }

    /**
     * Calls necessary functions to update Abide upon DOM change
     * @private
     */
    _reflow() {
      this._init();
    }

    /**
     * Checks whether or not a form element has the required attribute and if it's checked or not
     * @param {Object} element - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */
    requiredCheck($el) {
      if (!$el.attr('required')) return true;

      var isGood = true;

      switch ($el[0].type) {
        case 'checkbox':
          isGood = $el[0].checked;
          break;

        case 'select':
        case 'select-one':
        case 'select-multiple':
          var opt = $el.find('option:selected');
          if (!opt.length || !opt.val()) isGood = false;
          break;

        default:
          if (!$el.val() || !$el.val().length) isGood = false;
      }

      return isGood;
    }

    /**
     * Based on $el, get the first element with selector in this order:
     * 1. The element's direct sibling('s).
     * 3. The element's parent's children.
     *
     * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
     *
     * @param {Object} $el - jQuery object to use as reference to find the form error selector.
     * @returns {Object} jQuery object with the selector.
     */
    findFormError($el) {
      var $error = $el.siblings(this.options.formErrorSelector);

      if (!$error.length) {
        $error = $el.parent().find(this.options.formErrorSelector);
      }

      return $error;
    }

    /**
     * Get the first element in this order:
     * 2. The <label> with the attribute `[for="someInputId"]`
     * 3. The `.closest()` <label>
     *
     * @param {Object} $el - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */
    findLabel($el) {
      var id = $el[0].id;
      var $label = this.$element.find(`label[for="${ id }"]`);

      if (!$label.length) {
        return $el.closest('label');
      }

      return $label;
    }

    /**
     * Get the set of labels associated with a set of radio els in this order
     * 2. The <label> with the attribute `[for="someInputId"]`
     * 3. The `.closest()` <label>
     *
     * @param {Object} $el - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */
    findRadioLabels($els) {
      var labels = $els.map((i, el) => {
        var id = el.id;
        var $label = this.$element.find(`label[for="${ id }"]`);

        if (!$label.length) {
          $label = $(el).closest('label');
        }
        return $label[0];
      });

      return $(labels);
    }

    /**
     * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
     * @param {Object} $el - jQuery object to add the class to
     */
    addErrorClasses($el) {
      var $label = this.findLabel($el);
      var $formError = this.findFormError($el);

      if ($label.length) {
        $label.addClass(this.options.labelErrorClass);
      }

      if ($formError.length) {
        $formError.addClass(this.options.formErrorClass);
      }

      $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');
    }

    /**
     * Remove CSS error classes etc from an entire radio button group
     * @param {String} groupName - A string that specifies the name of a radio button group
     *
     */

    removeRadioErrorClasses(groupName) {
      var $els = this.$element.find(`:radio[name="${ groupName }"]`);
      var $labels = this.findRadioLabels($els);
      var $formErrors = this.findFormError($els);

      if ($labels.length) {
        $labels.removeClass(this.options.labelErrorClass);
      }

      if ($formErrors.length) {
        $formErrors.removeClass(this.options.formErrorClass);
      }

      $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
    }

    /**
     * Removes CSS error class as specified by the Abide settings from the label, input, and the form
     * @param {Object} $el - jQuery object to remove the class from
     */
    removeErrorClasses($el) {
      // radios need to clear all of the els
      if ($el[0].type == 'radio') {
        return this.removeRadioErrorClasses($el.attr('name'));
      }

      var $label = this.findLabel($el);
      var $formError = this.findFormError($el);

      if ($label.length) {
        $label.removeClass(this.options.labelErrorClass);
      }

      if ($formError.length) {
        $formError.removeClass(this.options.formErrorClass);
      }

      $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
    }

    /**
     * Goes through a form to find inputs and proceeds to validate them in ways specific to their type
     * @fires Abide#invalid
     * @fires Abide#valid
     * @param {Object} element - jQuery object to validate, should be an HTML input
     * @returns {Boolean} goodToGo - If the input is valid or not.
     */
    validateInput($el) {
      var clearRequire = this.requiredCheck($el),
          validated = false,
          customValidator = true,
          validator = $el.attr('data-validator'),
          equalTo = true;

      // don't validate ignored inputs or hidden inputs
      if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]')) {
        return true;
      }

      switch ($el[0].type) {
        case 'radio':
          validated = this.validateRadio($el.attr('name'));
          break;

        case 'checkbox':
          validated = clearRequire;
          break;

        case 'select':
        case 'select-one':
        case 'select-multiple':
          validated = clearRequire;
          break;

        default:
          validated = this.validateText($el);
      }

      if (validator) {
        customValidator = this.matchValidation($el, validator, $el.attr('required'));
      }

      if ($el.attr('data-equalto')) {
        equalTo = this.options.validators.equalTo($el);
      }

      var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;
      var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';

      this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);

      /**
       * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
       * Trigger includes the DOM element of the input.
       * @event Abide#valid
       * @event Abide#invalid
       */
      $el.trigger(message, [$el]);

      return goodToGo;
    }

    /**
     * Goes through a form and if there are any invalid inputs, it will display the form error element
     * @returns {Boolean} noError - true if no errors were detected...
     * @fires Abide#formvalid
     * @fires Abide#forminvalid
     */
    validateForm() {
      var acc = [];
      var _this = this;

      this.$inputs.each(function () {
        acc.push(_this.validateInput($(this)));
      });

      var noError = acc.indexOf(false) === -1;

      this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');

      /**
       * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
       * Trigger includes the element of the form.
       * @event Abide#formvalid
       * @event Abide#forminvalid
       */
      this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);

      return noError;
    }

    /**
     * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
     * @param {Object} $el - jQuery object to validate, should be a text input HTML element
     * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
     * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
     */
    validateText($el, pattern) {
      // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
      pattern = pattern || $el.attr('pattern') || $el.attr('type');
      var inputText = $el.val();
      var valid = false;

      if (inputText.length) {
        // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
        if (this.options.patterns.hasOwnProperty(pattern)) {
          valid = this.options.patterns[pattern].test(inputText);
        }
        // If the pattern name isn't also the type attribute of the field, then test it as a regexp
        else if (pattern !== $el.attr('type')) {
            valid = new RegExp(pattern).test(inputText);
          } else {
            valid = true;
          }
      }
      // An empty field is valid if it's not required
      else if (!$el.prop('required')) {
          valid = true;
        }

      return valid;
    }

    /**
     * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
     * @param {String} groupName - A string that specifies the name of a radio button group
     * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
     */
    validateRadio(groupName) {
      // If at least one radio in the group has the `required` attribute, the group is considered required
      // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
      var $group = this.$element.find(`:radio[name="${ groupName }"]`);
      var valid = false,
          required = false;

      // For the group to be required, at least one radio needs to be required
      $group.each((i, e) => {
        if ($(e).attr('required')) {
          required = true;
        }
      });
      if (!required) valid = true;

      if (!valid) {
        // For the group to be valid, at least one radio needs to be checked
        $group.each((i, e) => {
          if ($(e).prop('checked')) {
            valid = true;
          }
        });
      };

      return valid;
    }

    /**
     * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
     * @param {Object} $el - jQuery input element.
     * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
     * @param {Boolean} required - self explanatory?
     * @returns {Boolean} - true if validations passed.
     */
    matchValidation($el, validators, required) {
      required = required ? true : false;

      var clear = validators.split(' ').map(v => {
        return this.options.validators[v]($el, required, $el.parent());
      });
      return clear.indexOf(false) === -1;
    }

    /**
     * Resets form inputs and styles
     * @fires Abide#formreset
     */
    resetForm() {
      var $form = this.$element,
          opts = this.options;

      $(`.${ opts.labelErrorClass }`, $form).not('small').removeClass(opts.labelErrorClass);
      $(`.${ opts.inputErrorClass }`, $form).not('small').removeClass(opts.inputErrorClass);
      $(`${ opts.formErrorSelector }.${ opts.formErrorClass }`).removeClass(opts.formErrorClass);
      $form.find('[data-abide-error]').css('display', 'none');
      $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
      $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
      $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
      /**
       * Fires when the form has been reset.
       * @event Abide#formreset
       */
      $form.trigger('formreset.zf.abide', [$form]);
    }

    /**
     * Destroys an instance of Abide.
     * Removes error styles and classes from elements, without resetting their values.
     */
    destroy() {
      var _this = this;
      this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');

      this.$inputs.off('.abide').each(function () {
        _this.removeErrorClasses($(this));
      });

      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  Abide.defaults = {
    /**
     * The default event to validate inputs. Checkboxes and radios validate immediately.
     * Remove or change this value for manual validation.
     * @option
     * @example 'fieldChange'
     */
    validateOn: 'fieldChange',

    /**
     * Class to be applied to input labels on failed validation.
     * @option
     * @example 'is-invalid-label'
     */
    labelErrorClass: 'is-invalid-label',

    /**
     * Class to be applied to inputs on failed validation.
     * @option
     * @example 'is-invalid-input'
     */
    inputErrorClass: 'is-invalid-input',

    /**
     * Class selector to use to target Form Errors for show/hide.
     * @option
     * @example '.form-error'
     */
    formErrorSelector: '.form-error',

    /**
     * Class added to Form Errors on failed validation.
     * @option
     * @example 'is-visible'
     */
    formErrorClass: 'is-visible',

    /**
     * Set to true to validate text inputs on any value change.
     * @option
     * @example false
     */
    liveValidate: false,

    patterns: {
      alpha: /^[a-zA-Z]+$/,
      alpha_numeric: /^[a-zA-Z0-9]+$/,
      integer: /^[-+]?\d+$/,
      number: /^[-+]?\d*(?:[\.\,]\d+)?$/,

      // amex, visa, diners
      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
      cvv: /^([0-9]){3,4}$/,

      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
      email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,

      url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
      // abc.de
      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,

      datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
      // YYYY-MM-DD
      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
      // HH:MM:SS
      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
      dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
      // MM/DD/YYYY
      month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
      // DD/MM/YYYY
      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,

      // #FFF or #FFFFFF
      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/
    },

    /**
     * Optional validation functions to be used. `equalTo` being the only default included function.
     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
     * el : The jQuery element to validate.
     * required : Boolean value of the required attribute be present or not.
     * parent : The direct parent of the input.
     * @option
     */
    validators: {
      equalTo: function (el, required, parent) {
        return $(`#${ el.attr('data-equalto') }`).val() === el.val();
      }
    }
  };

  // Window exports
  Foundation.plugin(Abide, 'Abide');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Accordion module.
   * @module foundation.accordion
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   */

  class Accordion {
    /**
     * Creates a new instance of an accordion.
     * @class
     * @fires Accordion#init
     * @param {jQuery} element - jQuery object to make into an accordion.
     * @param {Object} options - a plain object with settings to override the default options.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Accordion');
      Foundation.Keyboard.register('Accordion', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_DOWN': 'next',
        'ARROW_UP': 'previous'
      });
    }

    /**
     * Initializes the accordion by animating the preset active pane(s).
     * @private
     */
    _init() {
      this.$element.attr('role', 'tablist');
      this.$tabs = this.$element.children('li, [data-accordion-item]');

      this.$tabs.each(function (idx, el) {
        var $el = $(el),
            $content = $el.children('[data-tab-content]'),
            id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),
            linkId = el.id || `${ id }-label`;

        $el.find('a:first').attr({
          'aria-controls': id,
          'role': 'tab',
          'id': linkId,
          'aria-expanded': false,
          'aria-selected': false
        });

        $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });
      });
      var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
      if ($initActive.length) {
        this.down($initActive, true);
      }
      this._events();
    }

    /**
     * Adds event handlers for items within the accordion.
     * @private
     */
    _events() {
      var _this = this;

      this.$tabs.each(function () {
        var $elem = $(this);
        var $tabContent = $elem.children('[data-tab-content]');
        if ($tabContent.length) {
          $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
            e.preventDefault();
            _this.toggle($tabContent);
          }).on('keydown.zf.accordion', function (e) {
            Foundation.Keyboard.handleKey(e, 'Accordion', {
              toggle: function () {
                _this.toggle($tabContent);
              },
              next: function () {
                var $a = $elem.next().find('a').focus();
                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              previous: function () {
                var $a = $elem.prev().find('a').focus();
                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              handled: function () {
                e.preventDefault();
                e.stopPropagation();
              }
            });
          });
        }
      });
    }

    /**
     * Toggles the selected content pane's open/close state.
     * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
     * @function
     */
    toggle($target) {
      if ($target.parent().hasClass('is-active')) {
        this.up($target);
      } else {
        this.down($target);
      }
    }

    /**
     * Opens the accordion tab defined by `$target`.
     * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
     * @param {Boolean} firstTime - flag to determine if reflow should happen.
     * @fires Accordion#down
     * @function
     */
    down($target, firstTime) {
      $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

      if (!this.options.multiExpand && !firstTime) {
        var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');
        if ($currentActive.length) {
          this.up($currentActive.not($target));
        }
      }

      $target.slideDown(this.options.slideSpeed, () => {
        /**
         * Fires when the tab is done opening.
         * @event Accordion#down
         */
        this.$element.trigger('down.zf.accordion', [$target]);
      });

      $(`#${ $target.attr('aria-labelledby') }`).attr({
        'aria-expanded': true,
        'aria-selected': true
      });
    }

    /**
     * Closes the tab defined by `$target`.
     * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
     * @fires Accordion#up
     * @function
     */
    up($target) {
      var $aunts = $target.parent().siblings(),
          _this = this;

      if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
        return;
      }

      // Foundation.Move(this.options.slideSpeed, $target, function(){
      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the tab is done collapsing up.
         * @event Accordion#up
         */
        _this.$element.trigger('up.zf.accordion', [$target]);
      });
      // });

      $target.attr('aria-hidden', true).parent().removeClass('is-active');

      $(`#${ $target.attr('aria-labelledby') }`).attr({
        'aria-expanded': false,
        'aria-selected': false
      });
    }

    /**
     * Destroys an instance of an accordion.
     * @fires Accordion#destroyed
     * @function
     */
    destroy() {
      this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
      this.$element.find('a').off('.zf.accordion');

      Foundation.unregisterPlugin(this);
    }
  }

  Accordion.defaults = {
    /**
     * Amount of time to animate the opening of an accordion pane.
     * @option
     * @example 250
     */
    slideSpeed: 250,
    /**
     * Allow the accordion to have multiple open panes.
     * @option
     * @example false
     */
    multiExpand: false,
    /**
     * Allow the accordion to close all panes.
     * @option
     * @example false
     */
    allowAllClosed: false
  };

  // Window exports
  Foundation.plugin(Accordion, 'Accordion');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * AccordionMenu module.
   * @module foundation.accordionMenu
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  class AccordionMenu {
    /**
     * Creates a new instance of an accordion menu.
     * @class
     * @fires AccordionMenu#init
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'accordion');

      this._init();

      Foundation.registerPlugin(this, 'AccordionMenu');
      Foundation.Keyboard.register('AccordionMenu', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_RIGHT': 'open',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'close',
        'ESCAPE': 'closeAll'
      });
    }

    /**
     * Initializes the accordion menu by hiding all nested menus.
     * @private
     */
    _init() {
      this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
      this.$element.attr({
        'role': 'menu',
        'aria-multiselectable': this.options.multiOpen
      });

      this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
      this.$menuLinks.each(function () {
        var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),
            $elem = $(this),
            $sub = $elem.children('[data-submenu]'),
            subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),
            isActive = $sub.hasClass('is-active');
        $elem.attr({
          'aria-controls': subId,
          'aria-expanded': isActive,
          'role': 'menuitem',
          'id': linkId
        });
        $sub.attr({
          'aria-labelledby': linkId,
          'aria-hidden': !isActive,
          'role': 'menu',
          'id': subId
        });
      });
      var initPanes = this.$element.find('.is-active');
      if (initPanes.length) {
        var _this = this;
        initPanes.each(function () {
          _this.down($(this));
        });
      }
      this._events();
    }

    /**
     * Adds event handlers for items within the menu.
     * @private
     */
    _events() {
      var _this = this;

      this.$element.find('li').each(function () {
        var $submenu = $(this).children('[data-submenu]');

        if ($submenu.length) {
          $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
            e.preventDefault();

            _this.toggle($submenu);
          });
        }
      }).on('keydown.zf.accordionmenu', function (e) {
        var $element = $(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement,
            $target = $element.children('[data-submenu]');

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

            if ($(this).children('[data-submenu]:visible').length) {
              // has open sub menu
              $nextElement = $element.find('li:first-child').find('a').first();
            }
            if ($(this).is(':first-child')) {
              // is first element of sub menu
              $prevElement = $element.parents('li').first().find('a').first();
            } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
              // if previous element has open sub menu
              $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
            }
            if ($(this).is(':last-child')) {
              // is last element of sub menu
              $nextElement = $element.parents('li').first().next('li').find('a').first();
            }

            return;
          }
        });

        Foundation.Keyboard.handleKey(e, 'AccordionMenu', {
          open: function () {
            if ($target.is(':hidden')) {
              _this.down($target);
              $target.find('li').first().find('a').first().focus();
            }
          },
          close: function () {
            if ($target.length && !$target.is(':hidden')) {
              // close active sub of this item
              _this.up($target);
            } else if ($element.parent('[data-submenu]').length) {
              // close currently open sub
              _this.up($element.parent('[data-submenu]'));
              $element.parents('li').first().find('a').first().focus();
            }
          },
          up: function () {
            $prevElement.focus();
            return true;
          },
          down: function () {
            $nextElement.focus();
            return true;
          },
          toggle: function () {
            if ($element.children('[data-submenu]').length) {
              _this.toggle($element.children('[data-submenu]'));
            }
          },
          closeAll: function () {
            _this.hideAll();
          },
          handled: function (preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
            e.stopImmediatePropagation();
          }
        });
      }); //.attr('tabindex', 0);
    }

    /**
     * Closes all panes of the menu.
     * @function
     */
    hideAll() {
      this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);
    }

    /**
     * Toggles the open/close state of a submenu.
     * @function
     * @param {jQuery} $target - the submenu to toggle
     */
    toggle($target) {
      if (!$target.is(':animated')) {
        if (!$target.is(':hidden')) {
          this.up($target);
        } else {
          this.down($target);
        }
      }
    }

    /**
     * Opens the sub-menu defined by `$target`.
     * @param {jQuery} $target - Sub-menu to open.
     * @fires AccordionMenu#down
     */
    down($target) {
      var _this = this;

      if (!this.options.multiOpen) {
        this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
      }

      $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });

      //Foundation.Move(this.options.slideSpeed, $target, function() {
      $target.slideDown(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done opening.
         * @event AccordionMenu#down
         */
        _this.$element.trigger('down.zf.accordionMenu', [$target]);
      });
      //});
    }

    /**
     * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
     * @param {jQuery} $target - Sub-menu to close.
     * @fires AccordionMenu#up
     */
    up($target) {
      var _this = this;
      //Foundation.Move(this.options.slideSpeed, $target, function(){
      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done collapsing up.
         * @event AccordionMenu#up
         */
        _this.$element.trigger('up.zf.accordionMenu', [$target]);
      });
      //});

      var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);

      $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
    }

    /**
     * Destroys an instance of accordion menu.
     * @fires AccordionMenu#destroyed
     */
    destroy() {
      this.$element.find('[data-submenu]').slideDown(0).css('display', '');
      this.$element.find('a').off('click.zf.accordionMenu');

      Foundation.Nest.Burn(this.$element, 'accordion');
      Foundation.unregisterPlugin(this);
    }
  }

  AccordionMenu.defaults = {
    /**
     * Amount of time to animate the opening of a submenu in ms.
     * @option
     * @example 250
     */
    slideSpeed: 250,
    /**
     * Allow the menu to have multiple open panes.
     * @option
     * @example true
     */
    multiOpen: true
  };

  // Window exports
  Foundation.plugin(AccordionMenu, 'AccordionMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Drilldown module.
   * @module foundation.drilldown
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  class Drilldown {
    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'drilldown');

      this._init();

      Foundation.registerPlugin(this, 'Drilldown');
      Foundation.Keyboard.register('Drilldown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close',
        'TAB': 'down',
        'SHIFT_TAB': 'up'
      });
    }

    /**
     * Initializes the drilldown by creating jQuery collections of elements
     * @private
     */
    _init() {
      this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');
      this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]');
      this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'menuitem').find('a');

      this._prepareMenu();

      this._keyboardEvents();
    }

    /**
     * prepares drilldown menu by setting attributes to links and elements
     * sets a min height to prevent content jumping
     * wraps the element if not already wrapped
     * @private
     * @function
     */
    _prepareMenu() {
      var _this = this;
      // if(!this.options.holdOpen){
      //   this._menuLinkEvents();
      // }
      this.$submenuAnchors.each(function () {
        var $link = $(this);
        var $sub = $link.parent();
        if (_this.options.parentLink) {
          $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>');
        }
        $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);
        $link.children('[data-submenu]').attr({
          'aria-hidden': true,
          'tabindex': 0,
          'role': 'menu'
        });
        _this._events($link);
      });
      this.$submenus.each(function () {
        var $menu = $(this),
            $back = $menu.find('.js-drilldown-back');
        if (!$back.length) {
          $menu.prepend(_this.options.backButton);
        }
        _this._back($menu);
      });
      if (!this.$element.parent().hasClass('is-drilldown')) {
        this.$wrapper = $(this.options.wrapper).addClass('is-drilldown');
        this.$wrapper = this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());
      }
    }

    /**
     * Adds event handlers to elements in the menu.
     * @function
     * @private
     * @param {jQuery} $elem - the current menu item to add handlers to.
     */
    _events($elem) {
      var _this = this;

      $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
        if ($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {
          e.stopImmediatePropagation();
          e.preventDefault();
        }

        // if(e.target !== e.currentTarget.firstElementChild){
        //   return false;
        // }
        _this._show($elem.parent('li'));

        if (_this.options.closeOnClick) {
          var $body = $('body');
          $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {
            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {
              return;
            }
            e.preventDefault();
            _this._hideAll();
            $body.off('.zf.drilldown');
          });
        }
      });
    }

    /**
     * Adds keydown event listener to `li`'s in the menu.
     * @private
     */
    _keyboardEvents() {
      var _this = this;

      this.$menuItems.add(this.$element.find('.js-drilldown-back > a')).on('keydown.zf.drilldown', function (e) {

        var $element = $(this),
            $elements = $element.parent('li').parent('ul').children('li').children('a'),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1));
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
            return;
          }
        });

        Foundation.Keyboard.handleKey(e, 'Drilldown', {
          next: function () {
            if ($element.is(_this.$submenuAnchors)) {
              _this._show($element.parent('li'));
              $element.parent('li').one(Foundation.transitionend($element), function () {
                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
              });
              return true;
            }
          },
          previous: function () {
            _this._hide($element.parent('li').parent('ul'));
            $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {
              setTimeout(function () {
                $element.parent('li').parent('ul').parent('li').children('a').first().focus();
              }, 1);
            });
            return true;
          },
          up: function () {
            $prevElement.focus();
            return true;
          },
          down: function () {
            $nextElement.focus();
            return true;
          },
          close: function () {
            _this._back();
            //_this.$menuItems.first().focus(); // focus to first element
          },
          open: function () {
            if (!$element.is(_this.$menuItems)) {
              // not menu item means back button
              _this._hide($element.parent('li').parent('ul'));
              $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {
                setTimeout(function () {
                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                }, 1);
              });
              return true;
            } else if ($element.is(_this.$submenuAnchors)) {
              _this._show($element.parent('li'));
              $element.parent('li').one(Foundation.transitionend($element), function () {
                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
              });
              return true;
            }
          },
          handled: function (preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
            e.stopImmediatePropagation();
          }
        });
      }); // end keyboardAccess
    }

    /**
     * Closes all open elements, and returns to root menu.
     * @function
     * @fires Drilldown#closed
     */
    _hideAll() {
      var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');
      $elem.one(Foundation.transitionend($elem), function (e) {
        $elem.removeClass('is-active is-closing');
      });
      /**
       * Fires when the menu is fully closed.
       * @event Drilldown#closed
       */
      this.$element.trigger('closed.zf.drilldown');
    }

    /**
     * Adds event listener for each `back` button, and closes open menus.
     * @function
     * @fires Drilldown#back
     * @param {jQuery} $elem - the current sub-menu to add `back` event.
     */
    _back($elem) {
      var _this = this;
      $elem.off('click.zf.drilldown');
      $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {
        e.stopImmediatePropagation();
        // console.log('mouseup on back');
        _this._hide($elem);

        // If there is a parent submenu, call show
        let parentSubMenu = $elem.parent('li').parent('ul').parent('li');
        if (parentSubMenu.length) {
          _this._show(parentSubMenu);
        }
      });
    }

    /**
     * Adds event listener to menu items w/o submenus to close open menus on click.
     * @function
     * @private
     */
    _menuLinkEvents() {
      var _this = this;
      this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
        // e.stopImmediatePropagation();
        setTimeout(function () {
          _this._hideAll();
        }, 0);
      });
    }

    /**
     * Opens a submenu.
     * @function
     * @fires Drilldown#open
     * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
     */
    _show($elem) {
      $elem.attr('aria-expanded', true);
      $elem.children('[data-submenu]').addClass('is-active').attr('aria-hidden', false);
      /**
       * Fires when the submenu has opened.
       * @event Drilldown#open
       */
      this.$element.trigger('open.zf.drilldown', [$elem]);
    }

    /**
     * Hides a submenu
     * @function
     * @fires Drilldown#hide
     * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
     */
    _hide($elem) {
      var _this = this;
      $elem.parent('li').attr('aria-expanded', false);
      $elem.attr('aria-hidden', true).addClass('is-closing').one(Foundation.transitionend($elem), function () {
        $elem.removeClass('is-active is-closing');
        $elem.blur();
      });
      /**
       * Fires when the submenu has closed.
       * @event Drilldown#hide
       */
      $elem.trigger('hide.zf.drilldown', [$elem]);
    }

    /**
     * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
     * Prevents content jumping.
     * @function
     * @private
     */
    _getMaxDims() {
      var biggest = 0;
      var result = {};

      this.$submenus.add(this.$element).each((i, elem) => {
        var height = elem.getBoundingClientRect().height;
        if (height > biggest) biggest = height;
      });

      result['min-height'] = `${ biggest }px`;
      result['max-width'] = `${ this.$element[0].getBoundingClientRect().width }px`;

      return result;
    }

    /**
     * Destroys the Drilldown Menu
     * @function
     */
    destroy() {
      this._hideAll();
      Foundation.Nest.Burn(this.$element, 'drilldown');
      this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
      this.$submenuAnchors.each(function () {
        $(this).off('.zf.drilldown');
      });
      this.$element.find('a').each(function () {
        var $link = $(this);
        $link.removeAttr('tabindex');
        if ($link.data('savedHref')) {
          $link.attr('href', $link.data('savedHref')).removeData('savedHref');
        } else {
          return;
        }
      });
      Foundation.unregisterPlugin(this);
    }
  }

  Drilldown.defaults = {
    /**
     * Markup used for JS generated back button. Prepended to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
     * @option
     * @example '<\li><\a>Back<\/a><\/li>'
     */
    backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',
    /**
     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
     * @option
     * @example '<\div class="is-drilldown"><\/div>'
     */
    wrapper: '<div></div>',
    /**
     * Adds the parent link to the submenu.
     * @option
     * @example false
     */
    parentLink: false,
    /**
     * Allow the menu to return to root list on body click.
     * @option
     * @example false
     */
    closeOnClick: false
    // holdOpen: false
  };

  // Window exports
  Foundation.plugin(Drilldown, 'Drilldown');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Dropdown module.
   * @module foundation.dropdown
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   */

  class Dropdown {
    /**
     * Creates a new instance of a dropdown.
     * @class
     * @param {jQuery} element - jQuery object to make into a dropdown.
     *        Object should be of the dropdown panel, rather than its anchor.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Dropdown');
      Foundation.Keyboard.register('Dropdown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close',
        'TAB': 'tab_forward',
        'SHIFT_TAB': 'tab_backward'
      });
    }

    /**
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function
     * @private
     */
    _init() {
      var $id = this.$element.attr('id');

      this.$anchor = $(`[data-toggle="${ $id }"]`).length ? $(`[data-toggle="${ $id }"]`) : $(`[data-open="${ $id }"]`);
      this.$anchor.attr({
        'aria-controls': $id,
        'data-is-focus': false,
        'data-yeti-box': $id,
        'aria-haspopup': true,
        'aria-expanded': false

      });

      this.options.positionClass = this.getPositionClass();
      this.counter = 4;
      this.usedPositions = [];
      this.$element.attr({
        'aria-hidden': 'true',
        'data-yeti-box': $id,
        'data-resize': $id,
        'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')
      });
      this._events();
    }

    /**
     * Helper function to determine current orientation of dropdown pane.
     * @function
     * @returns {String} position - string value of a position class.
     */
    getPositionClass() {
      var verticalPosition = this.$element[0].className.match(/(top|left|right|bottom)/g);
      verticalPosition = verticalPosition ? verticalPosition[0] : '';
      var horizontalPosition = /float-(\S+)/.exec(this.$anchor[0].className);
      horizontalPosition = horizontalPosition ? horizontalPosition[1] : '';
      var position = horizontalPosition ? horizontalPosition + ' ' + verticalPosition : verticalPosition;

      return position;
    }

    /**
     * Adjusts the dropdown panes orientation by adding/removing positioning classes.
     * @function
     * @private
     * @param {String} position - position class to remove.
     */
    _reposition(position) {
      this.usedPositions.push(position ? position : 'bottom');
      //default, try switching to opposite side
      if (!position && this.usedPositions.indexOf('top') < 0) {
        this.$element.addClass('top');
      } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
        this.$element.removeClass(position);
      } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
        this.$element.removeClass(position).addClass('right');
      } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
        this.$element.removeClass(position).addClass('left');
      }

      //if default change didn't work, try bottom or left first
      else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.$element.addClass('left');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.$element.removeClass(position).addClass('left');
        } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.$element.removeClass(position);
        } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.$element.removeClass(position);
        }
        //if nothing cleared, set to bottom
        else {
            this.$element.removeClass(position);
          }
      this.classChanged = true;
      this.counter--;
    }

    /**
     * Sets the position and orientation of the dropdown pane, checks for collisions.
     * Recursively calls itself if a collision is detected, with a new position class.
     * @function
     * @private
     */
    _setPosition() {
      if (this.$anchor.attr('aria-expanded') === 'false') {
        return false;
      }
      var position = this.getPositionClass(),
          $eleDims = Foundation.Box.GetDimensions(this.$element),
          $anchorDims = Foundation.Box.GetDimensions(this.$anchor),
          _this = this,
          direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
          param = direction === 'top' ? 'height' : 'width',
          offset = param === 'height' ? this.options.vOffset : this.options.hOffset;

      if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element)) {
        this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
          'width': $eleDims.windowDims.width - this.options.hOffset * 2,
          'height': 'auto'
        });
        this.classChanged = true;
        return false;
      }

      this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));

      while (!Foundation.Box.ImNotTouchingYou(this.$element, false, true) && this.counter) {
        this._reposition(position);
        this._setPosition();
      }
    }

    /**
     * Adds event listeners to the element utilizing the triggers utility library.
     * @function
     * @private
     */
    _events() {
      var _this = this;
      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': this._setPosition.bind(this)
      });

      if (this.options.hover) {
        this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
          if ($('body[data-whatinput="mouse"]').is('*')) {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.open();
              _this.$anchor.data('hover', true);
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.dropdown', function () {
          clearTimeout(_this.timeout);
          _this.timeout = setTimeout(function () {
            _this.close();
            _this.$anchor.data('hover', false);
          }, _this.options.hoverDelay);
        });
        if (this.options.hoverPane) {
          this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
            clearTimeout(_this.timeout);
          }).on('mouseleave.zf.dropdown', function () {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.close();
              _this.$anchor.data('hover', false);
            }, _this.options.hoverDelay);
          });
        }
      }
      this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {

        var $target = $(this),
            visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);

        Foundation.Keyboard.handleKey(e, 'Dropdown', {
          tab_forward: function () {
            if (_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))) {
              // left modal downwards, setting focus to first element
              if (_this.options.trapFocus) {
                // if focus shall be trapped
                visibleFocusableElements.eq(0).focus();
                e.preventDefault();
              } else {
                // if focus is not trapped, close dropdown on focus out
                _this.close();
              }
            }
          },
          tab_backward: function () {
            if (_this.$element.find(':focus').is(visibleFocusableElements.eq(0)) || _this.$element.is(':focus')) {
              // left modal upwards, setting focus to last element
              if (_this.options.trapFocus) {
                // if focus shall be trapped
                visibleFocusableElements.eq(-1).focus();
                e.preventDefault();
              } else {
                // if focus is not trapped, close dropdown on focus out
                _this.close();
              }
            }
          },
          open: function () {
            if ($target.is(_this.$anchor)) {
              _this.open();
              _this.$element.attr('tabindex', -1).focus();
              e.preventDefault();
            }
          },
          close: function () {
            _this.close();
            _this.$anchor.focus();
          }
        });
      });
    }

    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */
    _addBodyHandler() {
      var $body = $(document.body).not(this.$element),
          _this = this;
      $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {
        if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {
          return;
        }
        if (_this.$element.find(e.target).length) {
          return;
        }
        _this.close();
        $body.off('click.zf.dropdown');
      });
    }

    /**
     * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
     * @function
     * @fires Dropdown#closeme
     * @fires Dropdown#show
     */
    open() {
      // var _this = this;
      /**
       * Fires to close other open dropdowns
       * @event Dropdown#closeme
       */
      this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));
      this.$anchor.addClass('hover').attr({ 'aria-expanded': true });
      // this.$element/*.show()*/;
      this._setPosition();
      this.$element.addClass('is-open').attr({ 'aria-hidden': false });

      if (this.options.autoFocus) {
        var $focusable = Foundation.Keyboard.findFocusable(this.$element);
        if ($focusable.length) {
          $focusable.eq(0).focus();
        }
      }

      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }

      /**
       * Fires once the dropdown is visible.
       * @event Dropdown#show
       */
      this.$element.trigger('show.zf.dropdown', [this.$element]);
    }

    /**
     * Closes the open dropdown pane.
     * @function
     * @fires Dropdown#hide
     */
    close() {
      if (!this.$element.hasClass('is-open')) {
        return false;
      }
      this.$element.removeClass('is-open').attr({ 'aria-hidden': true });

      this.$anchor.removeClass('hover').attr('aria-expanded', false);

      if (this.classChanged) {
        var curPositionClass = this.getPositionClass();
        if (curPositionClass) {
          this.$element.removeClass(curPositionClass);
        }
        this.$element.addClass(this.options.positionClass)
        /*.hide()*/.css({ height: '', width: '' });
        this.classChanged = false;
        this.counter = 4;
        this.usedPositions.length = 0;
      }
      this.$element.trigger('hide.zf.dropdown', [this.$element]);
    }

    /**
     * Toggles the dropdown pane's visibility.
     * @function
     */
    toggle() {
      if (this.$element.hasClass('is-open')) {
        if (this.$anchor.data('hover')) return;
        this.close();
      } else {
        this.open();
      }
    }

    /**
     * Destroys the dropdown.
     * @function
     */
    destroy() {
      this.$element.off('.zf.trigger').hide();
      this.$anchor.off('.zf.dropdown');

      Foundation.unregisterPlugin(this);
    }
  }

  Dropdown.defaults = {
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @example 250
     */
    hoverDelay: 250,
    /**
     * Allow submenus to open on hover events
     * @option
     * @example false
     */
    hover: false,
    /**
     * Don't close dropdown when hovering over dropdown pane
     * @option
     * @example true
     */
    hoverPane: false,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @example 1
     */
    vOffset: 1,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @example 1
     */
    hOffset: 1,
    /**
     * Class applied to adjust open position. JS will test and fill this in.
     * @option
     * @example 'top'
     */
    positionClass: '',
    /**
     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
     * @option
     * @example false
     */
    trapFocus: false,
    /**
     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
     * @option
     * @example true
     */
    autoFocus: false,
    /**
     * Allows a click on the body to close the dropdown.
     * @option
     * @example false
     */
    closeOnClick: false
  };

  // Window exports
  Foundation.plugin(Dropdown, 'Dropdown');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * DropdownMenu module.
   * @module foundation.dropdown-menu
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.nest
   */

  class DropdownMenu {
    /**
     * Creates a new instance of DropdownMenu.
     * @class
     * @fires DropdownMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'dropdown');
      this._init();

      Foundation.registerPlugin(this, 'DropdownMenu');
      Foundation.Keyboard.register('DropdownMenu', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the plugin, and calls _prepareMenu
     * @private
     * @function
     */
    _init() {
      var subs = this.$element.find('li.is-dropdown-submenu-parent');
      this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');

      this.$menuItems = this.$element.find('[role="menuitem"]');
      this.$tabs = this.$element.children('[role="menuitem"]');
      this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);

      if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl() || this.$element.parents('.top-bar-right').is('*')) {
        this.options.alignment = 'right';
        subs.addClass('opens-left');
      } else {
        subs.addClass('opens-right');
      }
      this.changed = false;
      this._events();
    }

    _isVertical() {
      return this.$tabs.css('display') === 'block';
    }

    /**
     * Adds event listeners to elements within the menu
     * @private
     * @function
     */
    _events() {
      var _this = this,
          hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',
          parClass = 'is-dropdown-submenu-parent';

      // used for onClick and in the keyboard handlers
      var handleClickFn = function (e) {
        var $elem = $(e.target).parentsUntil('ul', `.${ parClass }`),
            hasSub = $elem.hasClass(parClass),
            hasClicked = $elem.attr('data-is-click') === 'true',
            $sub = $elem.children('.is-dropdown-submenu');

        if (hasSub) {
          if (hasClicked) {
            if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
              return;
            } else {
              e.stopImmediatePropagation();
              e.preventDefault();
              _this._hide($elem);
            }
          } else {
            e.preventDefault();
            e.stopImmediatePropagation();
            _this._show($sub);
            $elem.add($elem.parentsUntil(_this.$element, `.${ parClass }`)).attr('data-is-click', true);
          }
        } else {
          if (_this.options.closeOnClickInside) {
            _this._hide($elem);
          }
          return;
        }
      };

      if (this.options.clickOpen || hasTouch) {
        this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);
      }

      if (!this.options.disableHover) {
        this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {
          var $elem = $(this),
              hasSub = $elem.hasClass(parClass);

          if (hasSub) {
            clearTimeout(_this.delay);
            _this.delay = setTimeout(function () {
              _this._show($elem.children('.is-dropdown-submenu'));
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.dropdownmenu', function (e) {
          var $elem = $(this),
              hasSub = $elem.hasClass(parClass);
          if (hasSub && _this.options.autoclose) {
            if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {
              return false;
            }

            clearTimeout(_this.delay);
            _this.delay = setTimeout(function () {
              _this._hide($elem);
            }, _this.options.closingTime);
          }
        });
      }
      this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {
        var $element = $(e.target).parentsUntil('ul', '[role="menuitem"]'),
            isTab = _this.$tabs.index($element) > -1,
            $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(i - 1);
            $nextElement = $elements.eq(i + 1);
            return;
          }
        });

        var nextSibling = function () {
          if (!$element.is(':last-child')) {
            $nextElement.children('a:first').focus();
            e.preventDefault();
          }
        },
            prevSibling = function () {
          $prevElement.children('a:first').focus();
          e.preventDefault();
        },
            openSub = function () {
          var $sub = $element.children('ul.is-dropdown-submenu');
          if ($sub.length) {
            _this._show($sub);
            $element.find('li > a:first').focus();
            e.preventDefault();
          } else {
            return;
          }
        },
            closeSub = function () {
          //if ($element.is(':first-child')) {
          var close = $element.parent('ul').parent('li');
          close.children('a:first').focus();
          _this._hide(close);
          e.preventDefault();
          //}
        };
        var functions = {
          open: openSub,
          close: function () {
            _this._hide(_this.$element);
            _this.$menuItems.find('a:first').focus(); // focus to first element
            e.preventDefault();
          },
          handled: function () {
            e.stopImmediatePropagation();
          }
        };

        if (isTab) {
          if (_this._isVertical()) {
            // vertical menu
            if (Foundation.rtl()) {
              // right aligned
              $.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: closeSub,
                previous: openSub
              });
            } else {
              // left aligned
              $.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: openSub,
                previous: closeSub
              });
            }
          } else {
            // horizontal menu
            if (Foundation.rtl()) {
              // right aligned
              $.extend(functions, {
                next: prevSibling,
                previous: nextSibling,
                down: openSub,
                up: closeSub
              });
            } else {
              // left aligned
              $.extend(functions, {
                next: nextSibling,
                previous: prevSibling,
                down: openSub,
                up: closeSub
              });
            }
          }
        } else {
          // not tabs -> one sub
          if (Foundation.rtl()) {
            // right aligned
            $.extend(functions, {
              next: closeSub,
              previous: openSub,
              down: nextSibling,
              up: prevSibling
            });
          } else {
            // left aligned
            $.extend(functions, {
              next: openSub,
              previous: closeSub,
              down: nextSibling,
              up: prevSibling
            });
          }
        }
        Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);
      });
    }

    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */
    _addBodyHandler() {
      var $body = $(document.body),
          _this = this;
      $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
        var $link = _this.$element.find(e.target);
        if ($link.length) {
          return;
        }

        _this._hide();
        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');
      });
    }

    /**
     * Opens a dropdown pane, and checks for collisions first.
     * @param {jQuery} $sub - ul element that is a submenu to show
     * @function
     * @private
     * @fires DropdownMenu#show
     */
    _show($sub) {
      var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {
        return $(el).find($sub).length > 0;
      }));
      var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');
      this._hide($sibs, idx);
      $sub.css('visibility', 'hidden').addClass('js-dropdown-active').attr({ 'aria-hidden': false }).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({ 'aria-expanded': true });
      var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
      if (!clear) {
        var oldClass = this.options.alignment === 'left' ? '-right' : '-left',
            $parentLi = $sub.parent('.is-dropdown-submenu-parent');
        $parentLi.removeClass(`opens${ oldClass }`).addClass(`opens-${ this.options.alignment }`);
        clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
        if (!clear) {
          $parentLi.removeClass(`opens-${ this.options.alignment }`).addClass('opens-inner');
        }
        this.changed = true;
      }
      $sub.css('visibility', '');
      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }
      /**
       * Fires when the new dropdown pane is visible.
       * @event DropdownMenu#show
       */
      this.$element.trigger('show.zf.dropdownmenu', [$sub]);
    }

    /**
     * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
     * @function
     * @param {jQuery} $elem - element with a submenu to hide
     * @param {Number} idx - index of the $tabs collection to hide
     * @private
     */
    _hide($elem, idx) {
      var $toClose;
      if ($elem && $elem.length) {
        $toClose = $elem;
      } else if (idx !== undefined) {
        $toClose = this.$tabs.not(function (i, el) {
          return i === idx;
        });
      } else {
        $toClose = this.$element;
      }
      var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;

      if (somethingToClose) {
        $toClose.find('li.is-active').add($toClose).attr({
          'aria-expanded': false,
          'data-is-click': false
        }).removeClass('is-active');

        $toClose.find('ul.js-dropdown-active').attr({
          'aria-hidden': true
        }).removeClass('js-dropdown-active');

        if (this.changed || $toClose.find('opens-inner').length) {
          var oldClass = this.options.alignment === 'left' ? 'right' : 'left';
          $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass(`opens-inner opens-${ this.options.alignment }`).addClass(`opens-${ oldClass }`);
          this.changed = false;
        }
        /**
         * Fires when the open menus are closed.
         * @event DropdownMenu#hide
         */
        this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);
      }
    }

    /**
     * Destroys the plugin.
     * @function
     */
    destroy() {
      this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
      $(document.body).off('.zf.dropdownmenu');
      Foundation.Nest.Burn(this.$element, 'dropdown');
      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  DropdownMenu.defaults = {
    /**
     * Disallows hover events from opening submenus
     * @option
     * @example false
     */
    disableHover: false,
    /**
     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
     * @option
     * @example true
     */
    autoclose: true,
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @example 50
     */
    hoverDelay: 50,
    /**
     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
     * @option
     * @example true
     */
    clickOpen: false,
    /**
     * Amount of time to delay closing a submenu on a mouseleave event.
     * @option
     * @example 500
     */

    closingTime: 500,
    /**
     * Position of the menu relative to what direction the submenus should open. Handled by JS.
     * @option
     * @example 'left'
     */
    alignment: 'left',
    /**
     * Allow clicks on the body to close any open submenus.
     * @option
     * @example true
     */
    closeOnClick: true,
    /**
     * Allow clicks on leaf anchor links to close any open submenus.
     * @option
     * @example true
     */
    closeOnClickInside: true,
    /**
     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
     * @option
     * @example 'vertical'
     */
    verticalClass: 'vertical',
    /**
     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
     * @option
     * @example 'align-right'
     */
    rightClass: 'align-right',
    /**
     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
     * @option
     * @example false
     */
    forceFollow: true
  };

  // Window exports
  Foundation.plugin(DropdownMenu, 'DropdownMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Equalizer module.
   * @module foundation.equalizer
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader if equalizer contains images
   */

  class Equalizer {
    /**
     * Creates a new instance of Equalizer.
     * @class
     * @fires Equalizer#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Equalizer');
    }

    /**
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
     * @private
     */
    _init() {
      var eqId = this.$element.attr('data-equalizer') || '';
      var $watched = this.$element.find(`[data-equalizer-watch="${ eqId }"]`);

      this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
      this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));

      this.hasNested = this.$element.find('[data-equalizer]').length > 0;
      this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
      this.isOn = false;
      this._bindHandler = {
        onResizeMeBound: this._onResizeMe.bind(this),
        onPostEqualizedBound: this._onPostEqualized.bind(this)
      };

      var imgs = this.$element.find('img');
      var tooSmall;
      if (this.options.equalizeOn) {
        tooSmall = this._checkMQ();
        $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
      } else {
        this._events();
      }
      if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {
        if (imgs.length) {
          Foundation.onImagesLoaded(imgs, this._reflow.bind(this));
        } else {
          this._reflow();
        }
      }
    }

    /**
     * Removes event listeners if the breakpoint is too small.
     * @private
     */
    _pauseEvents() {
      this.isOn = false;
      this.$element.off({
        '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
        'resizeme.zf.trigger': this._bindHandler.onResizeMeBound
      });
    }

    /**
     * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
     * @private
     */
    _onResizeMe(e) {
      this._reflow();
    }

    /**
     * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
     * @private
     */
    _onPostEqualized(e) {
      if (e.target !== this.$element[0]) {
        this._reflow();
      }
    }

    /**
     * Initializes events for Equalizer.
     * @private
     */
    _events() {
      var _this = this;
      this._pauseEvents();
      if (this.hasNested) {
        this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
      } else {
        this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
      }
      this.isOn = true;
    }

    /**
     * Checks the current breakpoint to the minimum required size.
     * @private
     */
    _checkMQ() {
      var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);
      if (tooSmall) {
        if (this.isOn) {
          this._pauseEvents();
          this.$watched.css('height', 'auto');
        }
      } else {
        if (!this.isOn) {
          this._events();
        }
      }
      return tooSmall;
    }

    /**
     * A noop version for the plugin
     * @private
     */
    _killswitch() {
      return;
    }

    /**
     * Calls necessary functions to update Equalizer upon DOM change
     * @private
     */
    _reflow() {
      if (!this.options.equalizeOnStack) {
        if (this._isStacked()) {
          this.$watched.css('height', 'auto');
          return false;
        }
      }
      if (this.options.equalizeByRow) {
        this.getHeightsByRow(this.applyHeightByRow.bind(this));
      } else {
        this.getHeights(this.applyHeight.bind(this));
      }
    }

    /**
     * Manually determines if the first 2 elements are *NOT* stacked.
     * @private
     */
    _isStacked() {
      return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
    }

    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} heights - An array of heights of children within Equalizer container
     */
    getHeights(cb) {
      var heights = [];
      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        heights.push(this.$watched[i].offsetHeight);
      }
      cb(heights);
    }

    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     */
    getHeightsByRow(cb) {
      var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
          groups = [],
          group = 0;
      //group by Row
      groups[group] = [];
      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        //maybe could use this.$watched[i].offsetTop
        var elOffsetTop = $(this.$watched[i]).offset().top;
        if (elOffsetTop != lastElTopOffset) {
          group++;
          groups[group] = [];
          lastElTopOffset = elOffsetTop;
        }
        groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
      }

      for (var j = 0, ln = groups.length; j < ln; j++) {
        var heights = $(groups[j]).map(function () {
          return this[1];
        }).get();
        var max = Math.max.apply(null, heights);
        groups[j].push(max);
      }
      cb(groups);
    }

    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest
     * @param {array} heights - An array of heights of children within Equalizer container
     * @fires Equalizer#preequalized
     * @fires Equalizer#postequalized
     */
    applyHeight(heights) {
      var max = Math.max.apply(null, heights);
      /**
       * Fires before the heights are applied
       * @event Equalizer#preequalized
       */
      this.$element.trigger('preequalized.zf.equalizer');

      this.$watched.css('height', max);

      /**
       * Fires when the heights have been applied
       * @event Equalizer#postequalized
       */
      this.$element.trigger('postequalized.zf.equalizer');
    }

    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
     * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     * @fires Equalizer#preequalized
     * @fires Equalizer#preequalizedRow
     * @fires Equalizer#postequalizedRow
     * @fires Equalizer#postequalized
     */
    applyHeightByRow(groups) {
      /**
       * Fires before the heights are applied
       */
      this.$element.trigger('preequalized.zf.equalizer');
      for (var i = 0, len = groups.length; i < len; i++) {
        var groupsILength = groups[i].length,
            max = groups[i][groupsILength - 1];
        if (groupsILength <= 2) {
          $(groups[i][0][0]).css({ 'height': 'auto' });
          continue;
        }
        /**
          * Fires before the heights per row are applied
          * @event Equalizer#preequalizedRow
          */
        this.$element.trigger('preequalizedrow.zf.equalizer');
        for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
          $(groups[i][j][0]).css({ 'height': max });
        }
        /**
          * Fires when the heights per row have been applied
          * @event Equalizer#postequalizedRow
          */
        this.$element.trigger('postequalizedrow.zf.equalizer');
      }
      /**
       * Fires when the heights have been applied
       */
      this.$element.trigger('postequalized.zf.equalizer');
    }

    /**
     * Destroys an instance of Equalizer.
     * @function
     */
    destroy() {
      this._pauseEvents();
      this.$watched.css('height', 'auto');

      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  Equalizer.defaults = {
    /**
     * Enable height equalization when stacked on smaller screens.
     * @option
     * @example true
     */
    equalizeOnStack: false,
    /**
     * Enable height equalization row by row.
     * @option
     * @example false
     */
    equalizeByRow: false,
    /**
     * String representing the minimum breakpoint size the plugin should equalize heights on.
     * @option
     * @example 'medium'
     */
    equalizeOn: ''
  };

  // Window exports
  Foundation.plugin(Equalizer, 'Equalizer');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Interchange module.
   * @module foundation.interchange
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader
   */

  class Interchange {
    /**
     * Creates a new instance of Interchange.
     * @class
     * @fires Interchange#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Interchange.defaults, options);
      this.rules = [];
      this.currentPath = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Interchange');
    }

    /**
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
     * @function
     * @private
     */
    _init() {
      this._addBreakpoints();
      this._generateRules();
      this._reflow();
    }

    /**
     * Initializes events for Interchange.
     * @function
     * @private
     */
    _events() {
      $(window).on('resize.zf.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));
    }

    /**
     * Calls necessary functions to update Interchange upon DOM change
     * @function
     * @private
     */
    _reflow() {
      var match;

      // Iterate through each rule, but only save the last match
      for (var i in this.rules) {
        if (this.rules.hasOwnProperty(i)) {
          var rule = this.rules[i];

          if (window.matchMedia(rule.query).matches) {
            match = rule;
          }
        }
      }

      if (match) {
        this.replace(match.path);
      }
    }

    /**
     * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
     * @function
     * @private
     */
    _addBreakpoints() {
      for (var i in Foundation.MediaQuery.queries) {
        if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {
          var query = Foundation.MediaQuery.queries[i];
          Interchange.SPECIAL_QUERIES[query.name] = query.value;
        }
      }
    }

    /**
     * Checks the Interchange element for the provided media query + content pairings
     * @function
     * @private
     * @param {Object} element - jQuery object that is an Interchange instance
     * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
     */
    _generateRules(element) {
      var rulesList = [];
      var rules;

      if (this.options.rules) {
        rules = this.options.rules;
      } else {
        rules = this.$element.data('interchange').match(/\[.*?\]/g);
      }

      for (var i in rules) {
        if (rules.hasOwnProperty(i)) {
          var rule = rules[i].slice(1, -1).split(', ');
          var path = rule.slice(0, -1).join('');
          var query = rule[rule.length - 1];

          if (Interchange.SPECIAL_QUERIES[query]) {
            query = Interchange.SPECIAL_QUERIES[query];
          }

          rulesList.push({
            path: path,
            query: query
          });
        }
      }

      this.rules = rulesList;
    }

    /**
     * Update the `src` property of an image, or change the HTML of a container, to the specified path.
     * @function
     * @param {String} path - Path to the image or HTML partial.
     * @fires Interchange#replaced
     */
    replace(path) {
      if (this.currentPath === path) return;

      var _this = this,
          trigger = 'replaced.zf.interchange';

      // Replacing images
      if (this.$element[0].nodeName === 'IMG') {
        this.$element.attr('src', path).on('load', function () {
          _this.currentPath = path;
        }).trigger(trigger);
      }
      // Replacing background images
      else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
          this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);
        }
        // Replacing HTML
        else {
            $.get(path, function (response) {
              _this.$element.html(response).trigger(trigger);
              $(response).foundation();
              _this.currentPath = path;
            });
          }

      /**
       * Fires when content in an Interchange element is done being loaded.
       * @event Interchange#replaced
       */
      // this.$element.trigger('replaced.zf.interchange');
    }

    /**
     * Destroys an instance of interchange.
     * @function
     */
    destroy() {
      //TODO this.
    }
  }

  /**
   * Default settings for plugin
   */
  Interchange.defaults = {
    /**
     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
     * @option
     */
    rules: null
  };

  Interchange.SPECIAL_QUERIES = {
    'landscape': 'screen and (orientation: landscape)',
    'portrait': 'screen and (orientation: portrait)',
    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
  };

  // Window exports
  Foundation.plugin(Interchange, 'Interchange');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Magellan module.
   * @module foundation.magellan
   */

  class Magellan {
    /**
     * Creates a new instance of Magellan.
     * @class
     * @fires Magellan#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Magellan');
    }

    /**
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
     * @private
     */
    _init() {
      var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');
      var _this = this;
      this.$targets = $('[data-magellan-target]');
      this.$links = this.$element.find('a');
      this.$element.attr({
        'data-resize': id,
        'data-scroll': id,
        'id': id
      });
      this.$active = $();
      this.scrollPos = parseInt(window.pageYOffset, 10);

      this._events();
    }

    /**
     * Calculates an array of pixel values that are the demarcation lines between locations on the page.
     * Can be invoked if new elements are added or the size of a location changes.
     * @function
     */
    calcPoints() {
      var _this = this,
          body = document.body,
          html = document.documentElement;

      this.points = [];
      this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
      this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));

      this.$targets.each(function () {
        var $tar = $(this),
            pt = Math.round($tar.offset().top - _this.options.threshold);
        $tar.targetPoint = pt;
        _this.points.push(pt);
      });
    }

    /**
     * Initializes events for Magellan.
     * @private
     */
    _events() {
      var _this = this,
          $body = $('html, body'),
          opts = {
        duration: _this.options.animationDuration,
        easing: _this.options.animationEasing
      };
      $(window).one('load', function () {
        if (_this.options.deepLinking) {
          if (location.hash) {
            _this.scrollToLoc(location.hash);
          }
        }
        _this.calcPoints();
        _this._updateActive();
      });

      this.$element.on({
        'resizeme.zf.trigger': this.reflow.bind(this),
        'scrollme.zf.trigger': this._updateActive.bind(this)
      }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
        e.preventDefault();
        var arrival = this.getAttribute('href');
        _this.scrollToLoc(arrival);
      });
    }

    /**
     * Function to scroll to a given location on the page.
     * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
     * @function
     */
    scrollToLoc(loc) {
      // Do nothing if target does not exist to prevent errors
      if (!$(loc).length) {
        return false;
      }
      var scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);

      $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing);
    }

    /**
     * Calls necessary functions to update Magellan upon DOM change
     * @function
     */
    reflow() {
      this.calcPoints();
      this._updateActive();
    }

    /**
     * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
     * @private
     * @function
     * @fires Magellan#update
     */
    _updateActive() /*evt, elem, scrollPos*/{
      var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),
          curIdx;

      if (winPos + this.winHeight === this.docHeight) {
        curIdx = this.points.length - 1;
      } else if (winPos < this.points[0]) {
        curIdx = 0;
      } else {
        var isDown = this.scrollPos < winPos,
            _this = this,
            curVisible = this.points.filter(function (p, i) {
          return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;
        });
        curIdx = curVisible.length ? curVisible.length - 1 : 0;
      }

      this.$active.removeClass(this.options.activeClass);
      this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);

      if (this.options.deepLinking) {
        var hash = this.$active[0].getAttribute('href');
        if (window.history.pushState) {
          window.history.pushState(null, null, hash);
        } else {
          window.location.hash = hash;
        }
      }

      this.scrollPos = winPos;
      /**
       * Fires when magellan is finished updating to the new active element.
       * @event Magellan#update
       */
      this.$element.trigger('update.zf.magellan', [this.$active]);
    }

    /**
     * Destroys an instance of Magellan and resets the url of the window.
     * @function
     */
    destroy() {
      this.$element.off('.zf.trigger .zf.magellan').find(`.${ this.options.activeClass }`).removeClass(this.options.activeClass);

      if (this.options.deepLinking) {
        var hash = this.$active[0].getAttribute('href');
        window.location.hash.replace(hash, '');
      }

      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  Magellan.defaults = {
    /**
     * Amount of time, in ms, the animated scrolling should take between locations.
     * @option
     * @example 500
     */
    animationDuration: 500,
    /**
     * Animation style to use when scrolling between locations.
     * @option
     * @example 'ease-in-out'
     */
    animationEasing: 'linear',
    /**
     * Number of pixels to use as a marker for location changes.
     * @option
     * @example 50
     */
    threshold: 50,
    /**
     * Class applied to the active locations link on the magellan container.
     * @option
     * @example 'active'
     */
    activeClass: 'active',
    /**
     * Allows the script to manipulate the url of the current page, and if supported, alter the history.
     * @option
     * @example true
     */
    deepLinking: false,
    /**
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
     * @option
     * @example 25
     */
    barOffset: 0
  };

  // Window exports
  Foundation.plugin(Magellan, 'Magellan');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * OffCanvas module.
   * @module foundation.offcanvas
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   * @requires foundation.util.motion
   */

  class OffCanvas {
    /**
     * Creates a new instance of an off-canvas wrapper.
     * @class
     * @fires OffCanvas#init
     * @param {Object} element - jQuery object to initialize.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);
      this.$lastTrigger = $();
      this.$triggers = $();

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'OffCanvas');
      Foundation.Keyboard.register('OffCanvas', {
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
     * @function
     * @private
     */
    _init() {
      var id = this.$element.attr('id');

      this.$element.attr('aria-hidden', 'true');

      // Find triggers that affect this element and add aria-expanded to them
      this.$triggers = $(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);

      // Add a close trigger over the body if necessary
      if (this.options.closeOnClick) {
        if ($('.js-off-canvas-exit').length) {
          this.$exiter = $('.js-off-canvas-exit');
        } else {
          var exiter = document.createElement('div');
          exiter.setAttribute('class', 'js-off-canvas-exit');
          $('[data-off-canvas-content]').append(exiter);

          this.$exiter = $(exiter);
        }
      }

      this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);

      if (this.options.isRevealed) {
        this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
        this._setMQChecker();
      }
      if (!this.options.transitionTime) {
        this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration) * 1000;
      }
    }

    /**
     * Adds event handlers to the off-canvas wrapper and the exit overlay.
     * @function
     * @private
     */
    _events() {
      this.$element.off('.zf.trigger .zf.offcanvas').on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
      });

      if (this.options.closeOnClick && this.$exiter.length) {
        this.$exiter.on({ 'click.zf.offcanvas': this.close.bind(this) });
      }
    }

    /**
     * Applies event listener for elements that will reveal at certain breakpoints.
     * @private
     */
    _setMQChecker() {
      var _this = this;

      $(window).on('changed.zf.mediaquery', function () {
        if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        } else {
          _this.reveal(false);
        }
      }).one('load.zf.offcanvas', function () {
        if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        }
      });
    }

    /**
     * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
     * @param {Boolean} isRevealed - true if element should be revealed.
     * @function
     */
    reveal(isRevealed) {
      var $closer = this.$element.find('[data-close]');
      if (isRevealed) {
        this.close();
        this.isRevealed = true;
        // if (!this.options.forceTop) {
        //   var scrollPos = parseInt(window.pageYOffset);
        //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
        // }
        // if (this.options.isSticky) { this._stick(); }
        this.$element.off('open.zf.trigger toggle.zf.trigger');
        if ($closer.length) {
          $closer.hide();
        }
      } else {
        this.isRevealed = false;
        // if (this.options.isSticky || !this.options.forceTop) {
        //   this.$element[0].style.transform = '';
        //   $(window).off('scroll.zf.offcanvas');
        // }
        this.$element.on({
          'open.zf.trigger': this.open.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this)
        });
        if ($closer.length) {
          $closer.show();
        }
      }
    }

    /**
     * Opens the off-canvas menu.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     * @fires OffCanvas#opened
     */
    open(event, trigger) {
      if (this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }
      var _this = this,
          $body = $(document.body);

      if (this.options.forceTop) {
        $('body').scrollTop(0);
      }
      // window.pageYOffset = 0;

      // if (!this.options.forceTop) {
      //   var scrollPos = parseInt(window.pageYOffset);
      //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
      //   if (this.$exiter.length) {
      //     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';
      //   }
      // }
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#opened
       */

      var $wrapper = $('[data-off-canvas-wrapper]');
      $wrapper.addClass('is-off-canvas-open is-open-' + _this.options.position);

      _this.$element.addClass('is-open');

      // if (_this.options.isSticky) {
      //   _this._stick();
      // }

      this.$triggers.attr('aria-expanded', 'true');
      this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');

      if (this.options.closeOnClick) {
        this.$exiter.addClass('is-visible');
      }

      if (trigger) {
        this.$lastTrigger = trigger;
      }

      if (this.options.autoFocus) {
        $wrapper.one(Foundation.transitionend($wrapper), function () {
          if (_this.$element.hasClass('is-open')) {
            // handle double clicks
            _this.$element.attr('tabindex', '-1');
            _this.$element.focus();
          }
        });
      }

      if (this.options.trapFocus) {
        $wrapper.one(Foundation.transitionend($wrapper), function () {
          if (_this.$element.hasClass('is-open')) {
            // handle double clicks
            _this.$element.attr('tabindex', '-1');
            _this.trapFocus();
          }
        });
      }
    }

    /**
     * Traps focus within the offcanvas on open.
     * @private
     */
    _trapFocus() {
      var focusable = Foundation.Keyboard.findFocusable(this.$element),
          first = focusable.eq(0),
          last = focusable.eq(-1);

      focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas', function (e) {
        var key = Foundation.Keyboard.parseKey(e);
        if (key === 'TAB' && e.target === last[0]) {
          e.preventDefault();
          first.focus();
        }
        if (key === 'SHIFT_TAB' && e.target === first[0]) {
          e.preventDefault();
          last.focus();
        }
      });
    }

    /**
     * Allows the offcanvas to appear sticky utilizing translate properties.
     * @private
     */
    // OffCanvas.prototype._stick = function() {
    //   var elStyle = this.$element[0].style;
    //
    //   if (this.options.closeOnClick) {
    //     var exitStyle = this.$exiter[0].style;
    //   }
    //
    //   $(window).on('scroll.zf.offcanvas', function(e) {
    //     console.log(e);
    //     var pageY = window.pageYOffset;
    //     elStyle.transform = 'translate(0,' + pageY + 'px)';
    //     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }
    //   });
    //   // this.$element.trigger('stuck.zf.offcanvas');
    // };
    /**
     * Closes the off-canvas menu.
     * @function
     * @param {Function} cb - optional cb to fire after closure.
     * @fires OffCanvas#closed
     */
    close(cb) {
      if (!this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }

      var _this = this;

      //  Foundation.Move(this.options.transitionTime, this.$element, function() {
      $('[data-off-canvas-wrapper]').removeClass(`is-off-canvas-open is-open-${ _this.options.position }`);
      _this.$element.removeClass('is-open');
      // Foundation._reflow();
      // });
      this.$element.attr('aria-hidden', 'true')
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#closed
       */
      .trigger('closed.zf.offcanvas');
      // if (_this.options.isSticky || !_this.options.forceTop) {
      //   setTimeout(function() {
      //     _this.$element[0].style.transform = '';
      //     $(window).off('scroll.zf.offcanvas');
      //   }, this.options.transitionTime);
      // }
      if (this.options.closeOnClick) {
        this.$exiter.removeClass('is-visible');
      }

      this.$triggers.attr('aria-expanded', 'false');
      if (this.options.trapFocus) {
        $('[data-off-canvas-content]').removeAttr('tabindex');
      }
    }

    /**
     * Toggles the off-canvas menu open or closed.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     */
    toggle(event, trigger) {
      if (this.$element.hasClass('is-open')) {
        this.close(event, trigger);
      } else {
        this.open(event, trigger);
      }
    }

    /**
     * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
     * @function
     * @private
     */
    _handleKeyboard(e) {
      Foundation.Keyboard.handleKey(e, 'OffCanvas', {
        close: () => {
          this.close();
          this.$lastTrigger.focus();
          return true;
        },
        handled: () => {
          e.stopPropagation();
          e.preventDefault();
        }
      });
    }

    /**
     * Destroys the offcanvas plugin.
     * @function
     */
    destroy() {
      this.close();
      this.$element.off('.zf.trigger .zf.offcanvas');
      this.$exiter.off('.zf.offcanvas');

      Foundation.unregisterPlugin(this);
    }
  }

  OffCanvas.defaults = {
    /**
     * Allow the user to click outside of the menu to close it.
     * @option
     * @example true
     */
    closeOnClick: true,

    /**
     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
     * @option
     * @example 500
     */
    transitionTime: 0,

    /**
     * Direction the offcanvas opens from. Determines class applied to body.
     * @option
     * @example left
     */
    position: 'left',

    /**
     * Force the page to scroll to top on open.
     * @option
     * @example true
     */
    forceTop: true,

    /**
     * Allow the offcanvas to remain open for certain breakpoints.
     * @option
     * @example false
     */
    isRevealed: false,

    /**
     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
     * @option
     * @example reveal-for-large
     */
    revealOn: null,

    /**
     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @example true
     */
    autoFocus: true,

    /**
     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
     * @option
     * TODO improve the regex testing for this.
     * @example reveal-for-large
     */
    revealClass: 'reveal-for-',

    /**
     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @example true
     */
    trapFocus: false
  };

  // Window exports
  Foundation.plugin(OffCanvas, 'OffCanvas');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Orbit module.
   * @module foundation.orbit
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.timerAndImageLoader
   * @requires foundation.util.touch
   */

  class Orbit {
    /**
    * Creates a new instance of an orbit carousel.
    * @class
    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.
    * @param {Object} options - Overrides to the default plugin settings.
    */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Orbit');
      Foundation.Keyboard.register('Orbit', {
        'ltr': {
          'ARROW_RIGHT': 'next',
          'ARROW_LEFT': 'previous'
        },
        'rtl': {
          'ARROW_LEFT': 'next',
          'ARROW_RIGHT': 'previous'
        }
      });
    }

    /**
    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.
    * @function
    * @private
    */
    _init() {
      this.$wrapper = this.$element.find(`.${ this.options.containerClass }`);
      this.$slides = this.$element.find(`.${ this.options.slideClass }`);
      var $images = this.$element.find('img'),
          initActive = this.$slides.filter('.is-active');

      if (!initActive.length) {
        this.$slides.eq(0).addClass('is-active');
      }

      if (!this.options.useMUI) {
        this.$slides.addClass('no-motionui');
      }

      if ($images.length) {
        Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));
      } else {
        this._prepareForOrbit(); //hehe
      }

      if (this.options.bullets) {
        this._loadBullets();
      }

      this._events();

      if (this.options.autoPlay && this.$slides.length > 1) {
        this.geoSync();
      }

      if (this.options.accessible) {
        // allow wrapper to be focusable to enable arrow navigation
        this.$wrapper.attr('tabindex', 0);
      }
    }

    /**
    * Creates a jQuery collection of bullets, if they are being used.
    * @function
    * @private
    */
    _loadBullets() {
      this.$bullets = this.$element.find(`.${ this.options.boxOfBullets }`).find('button');
    }

    /**
    * Sets a `timer` object on the orbit, and starts the counter for the next slide.
    * @function
    */
    geoSync() {
      var _this = this;
      this.timer = new Foundation.Timer(this.$element, {
        duration: this.options.timerDelay,
        infinite: false
      }, function () {
        _this.changeSlide(true);
      });
      this.timer.start();
    }

    /**
    * Sets wrapper and slide heights for the orbit.
    * @function
    * @private
    */
    _prepareForOrbit() {
      var _this = this;
      this._setWrapperHeight(function (max) {
        _this._setSlideHeight(max);
      });
    }

    /**
    * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.
    * @function
    * @private
    * @param {Function} cb - a callback function to fire when complete.
    */
    _setWrapperHeight(cb) {
      //rewrite this to `for` loop
      var max = 0,
          temp,
          counter = 0;

      this.$slides.each(function () {
        temp = this.getBoundingClientRect().height;
        $(this).attr('data-slide', counter);

        if (counter) {
          //if not the first slide, set css position and display property
          $(this).css({ 'position': 'relative', 'display': 'none' });
        }
        max = temp > max ? temp : max;
        counter++;
      });

      if (counter === this.$slides.length) {
        this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.
        cb(max); //fire callback with max height dimension.
      }
    }

    /**
    * Sets the max-height of each slide.
    * @function
    * @private
    */
    _setSlideHeight(height) {
      this.$slides.each(function () {
        $(this).css('max-height', height);
      });
    }

    /**
    * Adds event listeners to basically everything within the element.
    * @function
    * @private
    */
    _events() {
      var _this = this;

      //***************************************
      //**Now using custom event - thanks to:**
      //**      Yohai Ararat of Toronto      **
      //***************************************
      if (this.$slides.length > 1) {

        if (this.options.swipe) {
          this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide(true);
          }).on('swiperight.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide(false);
          });
        }
        //***************************************

        if (this.options.autoPlay) {
          this.$slides.on('click.zf.orbit', function () {
            _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);
            _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();
          });

          if (this.options.pauseOnHover) {
            this.$element.on('mouseenter.zf.orbit', function () {
              _this.timer.pause();
            }).on('mouseleave.zf.orbit', function () {
              if (!_this.$element.data('clickedOn')) {
                _this.timer.start();
              }
            });
          }
        }

        if (this.options.navButtons) {
          var $controls = this.$element.find(`.${ this.options.nextClass }, .${ this.options.prevClass }`);
          $controls.attr('tabindex', 0)
          //also need to handle enter/return and spacebar key presses
          .on('click.zf.orbit touchend.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide($(this).hasClass(_this.options.nextClass));
          });
        }

        if (this.options.bullets) {
          this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {
            if (/is-active/g.test(this.className)) {
              return false;
            } //if this is active, kick out of function.
            var idx = $(this).data('slide'),
                ltr = idx > _this.$slides.filter('.is-active').data('slide'),
                $slide = _this.$slides.eq(idx);

            _this.changeSlide(ltr, $slide, idx);
          });
        }

        if (this.options.accessible) {
          this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {
            // handle keyboard event with keyboard util
            Foundation.Keyboard.handleKey(e, 'Orbit', {
              next: function () {
                _this.changeSlide(true);
              },
              previous: function () {
                _this.changeSlide(false);
              },
              handled: function () {
                // if bullet is focused, make sure focus moves
                if ($(e.target).is(_this.$bullets)) {
                  _this.$bullets.filter('.is-active').focus();
                }
              }
            });
          });
        }
      }
    }

    /**
    * Changes the current slide to a new one.
    * @function
    * @param {Boolean} isLTR - flag if the slide should move left to right.
    * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.
    * @param {Number} idx - the index of the new slide in its collection, if one chosen.
    * @fires Orbit#slidechange
    */
    changeSlide(isLTR, chosenSlide, idx) {
      var $curSlide = this.$slides.filter('.is-active').eq(0);

      if (/mui/g.test($curSlide[0].className)) {
        return false;
      } //if the slide is currently animating, kick out of the function

      var $firstSlide = this.$slides.first(),
          $lastSlide = this.$slides.last(),
          dirIn = isLTR ? 'Right' : 'Left',
          dirOut = isLTR ? 'Left' : 'Right',
          _this = this,
          $newSlide;

      if (!chosenSlide) {
        //most of the time, this will be auto played or clicked from the navButtons.
        $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
        this.options.infiniteWrap ? $curSlide.next(`.${ this.options.slideClass }`).length ? $curSlide.next(`.${ this.options.slideClass }`) : $firstSlide : $curSlide.next(`.${ this.options.slideClass }`) : //pick next slide if moving left to right
        this.options.infiniteWrap ? $curSlide.prev(`.${ this.options.slideClass }`).length ? $curSlide.prev(`.${ this.options.slideClass }`) : $lastSlide : $curSlide.prev(`.${ this.options.slideClass }`); //pick prev slide if moving right to left
      } else {
        $newSlide = chosenSlide;
      }

      if ($newSlide.length) {
        /**
        * Triggers before the next slide starts animating in and only if a next slide has been found.
        * @event Orbit#beforeslidechange
        */
        this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);

        if (this.options.bullets) {
          idx = idx || this.$slides.index($newSlide); //grab index to update bullets
          this._updateBullets(idx);
        }

        if (this.options.useMUI) {
          Foundation.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options[`animInFrom${ dirIn }`], function () {
            $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');
          });

          Foundation.Motion.animateOut($curSlide.removeClass('is-active'), this.options[`animOutTo${ dirOut }`], function () {
            $curSlide.removeAttr('aria-live');
            if (_this.options.autoPlay && !_this.timer.isPaused) {
              _this.timer.restart();
            }
            //do stuff?
          });
        } else {
          $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();
          $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();
          if (this.options.autoPlay && !this.timer.isPaused) {
            this.timer.restart();
          }
        }
        /**
        * Triggers when the slide has finished animating in.
        * @event Orbit#slidechange
        */
        this.$element.trigger('slidechange.zf.orbit', [$newSlide]);
      }
    }

    /**
    * Updates the active state of the bullets, if displayed.
    * @function
    * @private
    * @param {Number} idx - the index of the current slide.
    */
    _updateBullets(idx) {
      var $oldBullet = this.$element.find(`.${ this.options.boxOfBullets }`).find('.is-active').removeClass('is-active').blur(),
          span = $oldBullet.find('span:last').detach(),
          $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);
    }

    /**
    * Destroys the carousel and hides the element.
    * @function
    */
    destroy() {
      this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();
      Foundation.unregisterPlugin(this);
    }
  }

  Orbit.defaults = {
    /**
    * Tells the JS to look for and loadBullets.
    * @option
    * @example true
    */
    bullets: true,
    /**
    * Tells the JS to apply event listeners to nav buttons
    * @option
    * @example true
    */
    navButtons: true,
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-in-right'
    */
    animInFromRight: 'slide-in-right',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-out-right'
    */
    animOutToRight: 'slide-out-right',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-in-left'
    *
    */
    animInFromLeft: 'slide-in-left',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-out-left'
    */
    animOutToLeft: 'slide-out-left',
    /**
    * Allows Orbit to automatically animate on page load.
    * @option
    * @example true
    */
    autoPlay: true,
    /**
    * Amount of time, in ms, between slide transitions
    * @option
    * @example 5000
    */
    timerDelay: 5000,
    /**
    * Allows Orbit to infinitely loop through the slides
    * @option
    * @example true
    */
    infiniteWrap: true,
    /**
    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library
    * @option
    * @example true
    */
    swipe: true,
    /**
    * Allows the timing function to pause animation on hover.
    * @option
    * @example true
    */
    pauseOnHover: true,
    /**
    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys
    * @option
    * @example true
    */
    accessible: true,
    /**
    * Class applied to the container of Orbit
    * @option
    * @example 'orbit-container'
    */
    containerClass: 'orbit-container',
    /**
    * Class applied to individual slides.
    * @option
    * @example 'orbit-slide'
    */
    slideClass: 'orbit-slide',
    /**
    * Class applied to the bullet container. You're welcome.
    * @option
    * @example 'orbit-bullets'
    */
    boxOfBullets: 'orbit-bullets',
    /**
    * Class applied to the `next` navigation button.
    * @option
    * @example 'orbit-next'
    */
    nextClass: 'orbit-next',
    /**
    * Class applied to the `previous` navigation button.
    * @option
    * @example 'orbit-previous'
    */
    prevClass: 'orbit-previous',
    /**
    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.
    * @option
    * @example true
    */
    useMUI: true
  };

  // Window exports
  Foundation.plugin(Orbit, 'Orbit');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * ResponsiveMenu module.
   * @module foundation.responsiveMenu
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.accordionMenu
   * @requires foundation.util.drilldown
   * @requires foundation.util.dropdown-menu
   */

  class ResponsiveMenu {
    /**
     * Creates a new instance of a responsive menu.
     * @class
     * @fires ResponsiveMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = $(element);
      this.rules = this.$element.data('responsive-menu');
      this.currentMq = null;
      this.currentPlugin = null;

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveMenu');
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
     * @function
     * @private
     */
    _init() {
      // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
      if (typeof this.rules === 'string') {
        let rulesTree = {};

        // Parse rules from "classes" pulled from data attribute
        let rules = this.rules.split(' ');

        // Iterate through every rule found
        for (let i = 0; i < rules.length; i++) {
          let rule = rules[i].split('-');
          let ruleSize = rule.length > 1 ? rule[0] : 'small';
          let rulePlugin = rule.length > 1 ? rule[1] : rule[0];

          if (MenuPlugins[rulePlugin] !== null) {
            rulesTree[ruleSize] = MenuPlugins[rulePlugin];
          }
        }

        this.rules = rulesTree;
      }

      if (!$.isEmptyObject(this.rules)) {
        this._checkMediaQueries();
      }
    }

    /**
     * Initializes events for the Menu.
     * @function
     * @private
     */
    _events() {
      var _this = this;

      $(window).on('changed.zf.mediaquery', function () {
        _this._checkMediaQueries();
      });
      // $(window).on('resize.zf.ResponsiveMenu', function() {
      //   _this._checkMediaQueries();
      // });
    }

    /**
     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
     * @function
     * @private
     */
    _checkMediaQueries() {
      var matchedMq,
          _this = this;
      // Iterate through each rule and find the last matching rule
      $.each(this.rules, function (key) {
        if (Foundation.MediaQuery.atLeast(key)) {
          matchedMq = key;
        }
      });

      // No match? No dice
      if (!matchedMq) return;

      // Plugin already initialized? We good
      if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

      // Remove existing plugin-specific CSS classes
      $.each(MenuPlugins, function (key, value) {
        _this.$element.removeClass(value.cssClass);
      });

      // Add the CSS class for the new plugin
      this.$element.addClass(this.rules[matchedMq].cssClass);

      // Create an instance of the new plugin
      if (this.currentPlugin) this.currentPlugin.destroy();
      this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
    }

    /**
     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
     * @function
     */
    destroy() {
      this.currentPlugin.destroy();
      $(window).off('.zf.ResponsiveMenu');
      Foundation.unregisterPlugin(this);
    }
  }

  ResponsiveMenu.defaults = {};

  // The plugin matches the plugin classes with these plugin instances.
  var MenuPlugins = {
    dropdown: {
      cssClass: 'dropdown',
      plugin: Foundation._plugins['dropdown-menu'] || null
    },
    drilldown: {
      cssClass: 'drilldown',
      plugin: Foundation._plugins['drilldown'] || null
    },
    accordion: {
      cssClass: 'accordion-menu',
      plugin: Foundation._plugins['accordion-menu'] || null
    }
  };

  // Window exports
  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * ResponsiveToggle module.
   * @module foundation.responsiveToggle
   * @requires foundation.util.mediaQuery
   */

  class ResponsiveToggle {
    /**
     * Creates a new instance of Tab Bar.
     * @class
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = $(element);
      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveToggle');
    }

    /**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */
    _init() {
      var targetID = this.$element.data('responsive-toggle');
      if (!targetID) {
        console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
      }

      this.$targetMenu = $(`#${ targetID }`);
      this.$toggler = this.$element.find('[data-toggle]');

      this._update();
    }

    /**
     * Adds necessary event handlers for the tab bar to work.
     * @function
     * @private
     */
    _events() {
      var _this = this;

      this._updateMqHandler = this._update.bind(this);

      $(window).on('changed.zf.mediaquery', this._updateMqHandler);

      this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
    }

    /**
     * Checks the current media query to determine if the tab bar should be visible or hidden.
     * @function
     * @private
     */
    _update() {
      // Mobile
      if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
        this.$element.show();
        this.$targetMenu.hide();
      }

      // Desktop
      else {
          this.$element.hide();
          this.$targetMenu.show();
        }
    }

    /**
     * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
     * @function
     * @fires ResponsiveToggle#toggled
     */
    toggleMenu() {
      if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
        this.$targetMenu.toggle(0);

        /**
         * Fires when the element attached to the tab bar toggles.
         * @event ResponsiveToggle#toggled
         */
        this.$element.trigger('toggled.zf.responsiveToggle');
      }
    }

    destroy() {
      this.$element.off('.zf.responsiveToggle');
      this.$toggler.off('.zf.responsiveToggle');

      $(window).off('changed.zf.mediaquery', this._updateMqHandler);

      Foundation.unregisterPlugin(this);
    }
  }

  ResponsiveToggle.defaults = {
    /**
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.
     * @option
     * @example 'medium'
     */
    hideFor: 'medium'
  };

  // Window exports
  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Reveal module.
   * @module foundation.reveal
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.motion if using animations
   */

  class Reveal {
    /**
     * Creates a new instance of Reveal.
     * @class
     * @param {jQuery} element - jQuery object to use for the modal.
     * @param {Object} options - optional parameters.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Reveal');
      Foundation.Keyboard.register('Reveal', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close',
        'TAB': 'tab_forward',
        'SHIFT_TAB': 'tab_backward'
      });
    }

    /**
     * Initializes the modal by adding the overlay and close buttons, (if selected).
     * @private
     */
    _init() {
      this.id = this.$element.attr('id');
      this.isActive = false;
      this.cached = { mq: Foundation.MediaQuery.current };
      this.isMobile = mobileSniff();

      this.$anchor = $(`[data-open="${ this.id }"]`).length ? $(`[data-open="${ this.id }"]`) : $(`[data-toggle="${ this.id }"]`);
      this.$anchor.attr({
        'aria-controls': this.id,
        'aria-haspopup': true,
        'tabindex': 0
      });

      if (this.options.fullScreen || this.$element.hasClass('full')) {
        this.options.fullScreen = true;
        this.options.overlay = false;
      }
      if (this.options.overlay && !this.$overlay) {
        this.$overlay = this._makeOverlay(this.id);
      }

      this.$element.attr({
        'role': 'dialog',
        'aria-hidden': true,
        'data-yeti-box': this.id,
        'data-resize': this.id
      });

      if (this.$overlay) {
        this.$element.detach().appendTo(this.$overlay);
      } else {
        this.$element.detach().appendTo($('body'));
        this.$element.addClass('without-overlay');
      }
      this._events();
      if (this.options.deepLink && window.location.hash === `#${ this.id }`) {
        $(window).one('load.zf.reveal', this.open.bind(this));
      }
    }

    /**
     * Creates an overlay div to display behind the modal.
     * @private
     */
    _makeOverlay(id) {
      var $overlay = $('<div></div>').addClass('reveal-overlay').appendTo('body');
      return $overlay;
    }

    /**
     * Updates position of modal
     * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
     * @private
     */
    _updatePosition() {
      var width = this.$element.outerWidth();
      var outerWidth = $(window).width();
      var height = this.$element.outerHeight();
      var outerHeight = $(window).height();
      var left, top;
      if (this.options.hOffset === 'auto') {
        left = parseInt((outerWidth - width) / 2, 10);
      } else {
        left = parseInt(this.options.hOffset, 10);
      }
      if (this.options.vOffset === 'auto') {
        if (height > outerHeight) {
          top = parseInt(Math.min(100, outerHeight / 10), 10);
        } else {
          top = parseInt((outerHeight - height) / 4, 10);
        }
      } else {
        top = parseInt(this.options.vOffset, 10);
      }
      this.$element.css({ top: top + 'px' });
      // only worry about left if we don't have an overlay or we havea  horizontal offset,
      // otherwise we're perfectly in the middle
      if (!this.$overlay || this.options.hOffset !== 'auto') {
        this.$element.css({ left: left + 'px' });
        this.$element.css({ margin: '0px' });
      }
    }

    /**
     * Adds event handlers for the modal.
     * @private
     */
    _events() {
      var _this = this;

      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': (event, $element) => {
          if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {
            // only close reveal when it's explicitly called
            return this.close.apply(this);
          }
        },
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': function () {
          _this._updatePosition();
        }
      });

      if (this.$anchor.length) {
        this.$anchor.on('keydown.zf.reveal', function (e) {
          if (e.which === 13 || e.which === 32) {
            e.stopPropagation();
            e.preventDefault();
            _this.open();
          }
        });
      }

      if (this.options.closeOnClick && this.options.overlay) {
        this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
          if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
            return;
          }
          _this.close();
        });
      }
      if (this.options.deepLink) {
        $(window).on(`popstate.zf.reveal:${ this.id }`, this._handleState.bind(this));
      }
    }

    /**
     * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
     * @private
     */
    _handleState(e) {
      if (window.location.hash === '#' + this.id && !this.isActive) {
        this.open();
      } else {
        this.close();
      }
    }

    /**
     * Opens the modal controlled by `this.$anchor`, and closes all others by default.
     * @function
     * @fires Reveal#closeme
     * @fires Reveal#open
     */
    open() {
      if (this.options.deepLink) {
        var hash = `#${ this.id }`;

        if (window.history.pushState) {
          window.history.pushState(null, null, hash);
        } else {
          window.location.hash = hash;
        }
      }

      this.isActive = true;

      // Make elements invisible, but remove display: none so we can get size and positioning
      this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);
      if (this.options.overlay) {
        this.$overlay.css({ 'visibility': 'hidden' }).show();
      }

      this._updatePosition();

      this.$element.hide().css({ 'visibility': '' });

      if (this.$overlay) {
        this.$overlay.css({ 'visibility': '' }).hide();
        if (this.$element.hasClass('fast')) {
          this.$overlay.addClass('fast');
        } else if (this.$element.hasClass('slow')) {
          this.$overlay.addClass('slow');
        }
      }

      if (!this.options.multipleOpened) {
        /**
         * Fires immediately before the modal opens.
         * Closes any other modals that are currently open
         * @event Reveal#closeme
         */
        this.$element.trigger('closeme.zf.reveal', this.id);
      }
      // Motion UI method of reveal
      if (this.options.animationIn) {
        var _this = this;
        function afterAnimationFocus() {
          _this.$element.attr({
            'aria-hidden': false,
            'tabindex': -1
          }).focus();
        }
        if (this.options.overlay) {
          Foundation.Motion.animateIn(this.$overlay, 'fade-in');
        }
        Foundation.Motion.animateIn(this.$element, this.options.animationIn, () => {
          this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);
          afterAnimationFocus();
        });
      }
      // jQuery method of reveal
      else {
          if (this.options.overlay) {
            this.$overlay.show(0);
          }
          this.$element.show(this.options.showDelay);
        }

      // handle accessibility
      this.$element.attr({
        'aria-hidden': false,
        'tabindex': -1
      }).focus();

      /**
       * Fires when the modal has successfully opened.
       * @event Reveal#open
       */
      this.$element.trigger('open.zf.reveal');

      if (this.isMobile) {
        this.originalScrollPos = window.pageYOffset;
        $('html, body').addClass('is-reveal-open');
      } else {
        $('body').addClass('is-reveal-open');
      }

      setTimeout(() => {
        this._extraHandlers();
      }, 0);
    }

    /**
     * Adds extra event handlers for the body and window if necessary.
     * @private
     */
    _extraHandlers() {
      var _this = this;
      this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);

      if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
        $('body').on('click.zf.reveal', function (e) {
          if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
            return;
          }
          _this.close();
        });
      }

      if (this.options.closeOnEsc) {
        $(window).on('keydown.zf.reveal', function (e) {
          Foundation.Keyboard.handleKey(e, 'Reveal', {
            close: function () {
              if (_this.options.closeOnEsc) {
                _this.close();
                _this.$anchor.focus();
              }
            }
          });
        });
      }

      // lock focus within modal while tabbing
      this.$element.on('keydown.zf.reveal', function (e) {
        var $target = $(this);
        // handle keyboard event with keyboard util
        Foundation.Keyboard.handleKey(e, 'Reveal', {
          tab_forward: function () {
            _this.focusableElements = Foundation.Keyboard.findFocusable(_this.$element);
            if (_this.$element.find(':focus').is(_this.focusableElements.eq(-1))) {
              // left modal downwards, setting focus to first element
              _this.focusableElements.eq(0).focus();
              return true;
            }
            if (_this.focusableElements.length === 0) {
              // no focusable elements inside the modal at all, prevent tabbing in general
              return true;
            }
          },
          tab_backward: function () {
            _this.focusableElements = Foundation.Keyboard.findFocusable(_this.$element);
            if (_this.$element.find(':focus').is(_this.focusableElements.eq(0)) || _this.$element.is(':focus')) {
              // left modal upwards, setting focus to last element
              _this.focusableElements.eq(-1).focus();
              return true;
            }
            if (_this.focusableElements.length === 0) {
              // no focusable elements inside the modal at all, prevent tabbing in general
              return true;
            }
          },
          open: function () {
            if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {
              setTimeout(function () {
                // set focus back to anchor if close button has been activated
                _this.$anchor.focus();
              }, 1);
            } else if ($target.is(_this.focusableElements)) {
              // dont't trigger if acual element has focus (i.e. inputs, links, ...)
              _this.open();
            }
          },
          close: function () {
            if (_this.options.closeOnEsc) {
              _this.close();
              _this.$anchor.focus();
            }
          },
          handled: function (preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
          }
        });
      });
    }

    /**
     * Closes the modal.
     * @function
     * @fires Reveal#closed
     */
    close() {
      if (!this.isActive || !this.$element.is(':visible')) {
        return false;
      }
      var _this = this;

      // Motion UI method of hiding
      if (this.options.animationOut) {
        if (this.options.overlay) {
          Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);
        } else {
          finishUp();
        }

        Foundation.Motion.animateOut(this.$element, this.options.animationOut);
      }
      // jQuery method of hiding
      else {
          if (this.options.overlay) {
            this.$overlay.hide(0, finishUp);
          } else {
            finishUp();
          }

          this.$element.hide(this.options.hideDelay);
        }

      // Conditionals to remove extra event listeners added on open
      if (this.options.closeOnEsc) {
        $(window).off('keydown.zf.reveal');
      }

      if (!this.options.overlay && this.options.closeOnClick) {
        $('body').off('click.zf.reveal');
      }

      this.$element.off('keydown.zf.reveal');

      function finishUp() {
        if (_this.isMobile) {
          $('html, body').removeClass('is-reveal-open');
          if (_this.originalScrollPos) {
            $('body').scrollTop(_this.originalScrollPos);
            _this.originalScrollPos = null;
          }
        } else {
          $('body').removeClass('is-reveal-open');
        }

        _this.$element.attr('aria-hidden', true);

        /**
        * Fires when the modal is done closing.
        * @event Reveal#closed
        */
        _this.$element.trigger('closed.zf.reveal');
      }

      /**
      * Resets the modal content
      * This prevents a running video to keep going in the background
      */
      if (this.options.resetOnClose) {
        this.$element.html(this.$element.html());
      }

      this.isActive = false;
      if (_this.options.deepLink) {
        if (window.history.replaceState) {
          window.history.replaceState("", document.title, window.location.pathname);
        } else {
          window.location.hash = '';
        }
      }
    }

    /**
     * Toggles the open/closed state of a modal.
     * @function
     */
    toggle() {
      if (this.isActive) {
        this.close();
      } else {
        this.open();
      }
    }

    /**
     * Destroys an instance of a modal.
     * @function
     */
    destroy() {
      if (this.options.overlay) {
        this.$element.appendTo($('body')); // move $element outside of $overlay to prevent error unregisterPlugin()
        this.$overlay.hide().off().remove();
      }
      this.$element.hide().off();
      this.$anchor.off('.zf');
      $(window).off(`.zf.reveal:${ this.id }`);

      Foundation.unregisterPlugin(this);
    }
  }

  Reveal.defaults = {
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @example 'slide-in-left'
     */
    animationIn: '',
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @example 'slide-out-right'
     */
    animationOut: '',
    /**
     * Time, in ms, to delay the opening of a modal after a click if no animation used.
     * @option
     * @example 10
     */
    showDelay: 0,
    /**
     * Time, in ms, to delay the closing of a modal after a click if no animation used.
     * @option
     * @example 10
     */
    hideDelay: 0,
    /**
     * Allows a click on the body/overlay to close the modal.
     * @option
     * @example true
     */
    closeOnClick: true,
    /**
     * Allows the modal to close if the user presses the `ESCAPE` key.
     * @option
     * @example true
     */
    closeOnEsc: true,
    /**
     * If true, allows multiple modals to be displayed at once.
     * @option
     * @example false
     */
    multipleOpened: false,
    /**
     * Distance, in pixels, the modal should push down from the top of the screen.
     * @option
     * @example auto
     */
    vOffset: 'auto',
    /**
     * Distance, in pixels, the modal should push in from the side of the screen.
     * @option
     * @example auto
     */
    hOffset: 'auto',
    /**
     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
     * @option
     * @example false
     */
    fullScreen: false,
    /**
     * Percentage of screen height the modal should push up from the bottom of the view.
     * @option
     * @example 10
     */
    btmOffsetPct: 10,
    /**
     * Allows the modal to generate an overlay div, which will cover the view when modal opens.
     * @option
     * @example true
     */
    overlay: true,
    /**
     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
     * @option
     * @example false
     */
    resetOnClose: false,
    /**
     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
     * @option
     * @example false
     */
    deepLink: false
  };

  // Window exports
  Foundation.plugin(Reveal, 'Reveal');

  function iPhoneSniff() {
    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)
    );
  }

  function androidSniff() {
    return (/Android/.test(window.navigator.userAgent)
    );
  }

  function mobileSniff() {
    return iPhoneSniff() || androidSniff();
  }
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Slider module.
   * @module foundation.slider
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   * @requires foundation.util.keyboard
   * @requires foundation.util.touch
   */

  class Slider {
    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Slider');
      Foundation.Keyboard.register('Slider', {
        'ltr': {
          'ARROW_RIGHT': 'increase',
          'ARROW_UP': 'increase',
          'ARROW_DOWN': 'decrease',
          'ARROW_LEFT': 'decrease',
          'SHIFT_ARROW_RIGHT': 'increase_fast',
          'SHIFT_ARROW_UP': 'increase_fast',
          'SHIFT_ARROW_DOWN': 'decrease_fast',
          'SHIFT_ARROW_LEFT': 'decrease_fast'
        },
        'rtl': {
          'ARROW_LEFT': 'increase',
          'ARROW_RIGHT': 'decrease',
          'SHIFT_ARROW_LEFT': 'increase_fast',
          'SHIFT_ARROW_RIGHT': 'decrease_fast'
        }
      });
    }

    /**
     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
     * @function
     * @private
     */
    _init() {
      this.inputs = this.$element.find('input');
      this.handles = this.$element.find('[data-slider-handle]');

      this.$handle = this.handles.eq(0);
      this.$input = this.inputs.length ? this.inputs.eq(0) : $(`#${ this.$handle.attr('aria-controls') }`);
      this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);

      var isDbl = false,
          _this = this;
      if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {
        this.options.disabled = true;
        this.$element.addClass(this.options.disabledClass);
      }
      if (!this.inputs.length) {
        this.inputs = $().add(this.$input);
        this.options.binding = true;
      }
      this._setInitAttr(0);
      this._events(this.$handle);

      if (this.handles[1]) {
        this.options.doubleSided = true;
        this.$handle2 = this.handles.eq(1);
        this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $(`#${ this.$handle2.attr('aria-controls') }`);

        if (!this.inputs[1]) {
          this.inputs = this.inputs.add(this.$input2);
        }
        isDbl = true;

        this._setHandlePos(this.$handle, this.options.initialStart, true, function () {

          _this._setHandlePos(_this.$handle2, _this.options.initialEnd, true);
        });
        // this.$handle.triggerHandler('click.zf.slider');
        this._setInitAttr(1);
        this._events(this.$handle2);
      }

      if (!isDbl) {
        this._setHandlePos(this.$handle, this.options.initialStart, true);
      }
    }

    /**
     * Sets the position of the selected handle and fill bar.
     * @function
     * @private
     * @param {jQuery} $hndl - the selected handle to move.
     * @param {Number} location - floating point between the start and end values of the slider bar.
     * @param {Function} cb - callback function to fire on completion.
     * @fires Slider#moved
     * @fires Slider#changed
     */
    _setHandlePos($hndl, location, noInvert, cb) {
      // don't move if the slider has been disabled since its initialization
      if (this.$element.hasClass(this.options.disabledClass)) {
        return;
      }
      //might need to alter that slightly for bars that will have odd number selections.
      location = parseFloat(location); //on input change events, convert string to number...grumble.

      // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
      if (location < this.options.start) {
        location = this.options.start;
      } else if (location > this.options.end) {
        location = this.options.end;
      }

      var isDbl = this.options.doubleSided;

      if (isDbl) {
        //this block is to prevent 2 handles from crossing eachother. Could/should be improved.
        if (this.handles.index($hndl) === 0) {
          var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));
          location = location >= h2Val ? h2Val - this.options.step : location;
        } else {
          var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));
          location = location <= h1Val ? h1Val + this.options.step : location;
        }
      }

      //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
      //for click and drag events, it's weird due to the scale(-1, 1) css property
      if (this.options.vertical && !noInvert) {
        location = this.options.end - location;
      }

      var _this = this,
          vert = this.options.vertical,
          hOrW = vert ? 'height' : 'width',
          lOrT = vert ? 'top' : 'left',
          handleDim = $hndl[0].getBoundingClientRect()[hOrW],
          elemDim = this.$element[0].getBoundingClientRect()[hOrW],

      //percentage of bar min/max value based on click or drag point
      pctOfBar = percent(location - this.options.start, this.options.end - this.options.start).toFixed(2),

      //number of actual pixels to shift the handle, based on the percentage obtained above
      pxToMove = (elemDim - handleDim) * pctOfBar,

      //percentage of bar to shift the handle
      movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);
      //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
      location = parseFloat(location.toFixed(this.options.decimal));
      // declare empty object for css adjustments, only used with 2 handled-sliders
      var css = {};

      this._setValues($hndl, location);

      // TODO update to calculate based on values set to respective inputs??
      if (isDbl) {
        var isLeftHndl = this.handles.index($hndl) === 0,

        //empty variable, will be used for min-height/width for fill bar
        dim,

        //percentage w/h of the handle compared to the slider bar
        handlePct = ~~(percent(handleDim, elemDim) * 100);
        //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
        if (isLeftHndl) {
          //left or top percentage value to apply to the fill bar.
          css[lOrT] = `${ movement }%`;
          //calculate the new min-height/width for the fill bar.
          dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;
          //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
          //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.
          if (cb && typeof cb === 'function') {
            cb();
          } //this is only needed for the initialization of 2 handled sliders
        } else {
          //just caching the value of the left/bottom handle's left/top property
          var handlePos = parseFloat(this.$handle[0].style[lOrT]);
          //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
          //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
          dim = movement - (isNaN(handlePos) ? this.options.initialStart / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
        }
        // assign the min-height/width to our css object
        css[`min-${ hOrW }`] = `${ dim }%`;
      }

      this.$element.one('finished.zf.animate', function () {
        /**
         * Fires when the handle is done moving.
         * @event Slider#moved
         */
        _this.$element.trigger('moved.zf.slider', [$hndl]);
      });

      //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
      var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;

      Foundation.Move(moveTime, $hndl, function () {
        //adjusting the left/top property of the handle, based on the percentage calculated above
        $hndl.css(lOrT, `${ movement }%`);

        if (!_this.options.doubleSided) {
          //if single-handled, a simple method to expand the fill bar
          _this.$fill.css(hOrW, `${ pctOfBar * 100 }%`);
        } else {
          //otherwise, use the css object we created above
          _this.$fill.css(css);
        }
      });

      /**
       * Fires when the value has not been change for a given time.
       * @event Slider#changed
       */
      clearTimeout(_this.timeout);
      _this.timeout = setTimeout(function () {
        _this.$element.trigger('changed.zf.slider', [$hndl]);
      }, _this.options.changedDelay);
    }

    /**
     * Sets the initial attribute for the slider element.
     * @function
     * @private
     * @param {Number} idx - index of the current handle/input to use.
     */
    _setInitAttr(idx) {
      var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');
      this.inputs.eq(idx).attr({
        'id': id,
        'max': this.options.end,
        'min': this.options.start,
        'step': this.options.step
      });
      this.handles.eq(idx).attr({
        'role': 'slider',
        'aria-controls': id,
        'aria-valuemax': this.options.end,
        'aria-valuemin': this.options.start,
        'aria-valuenow': idx === 0 ? this.options.initialStart : this.options.initialEnd,
        'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',
        'tabindex': 0
      });
    }

    /**
     * Sets the input and `aria-valuenow` values for the slider element.
     * @function
     * @private
     * @param {jQuery} $handle - the currently selected handle.
     * @param {Number} val - floating point of the new value.
     */
    _setValues($handle, val) {
      var idx = this.options.doubleSided ? this.handles.index($handle) : 0;
      this.inputs.eq(idx).val(val);
      $handle.attr('aria-valuenow', val);
    }

    /**
     * Handles events on the slider element.
     * Calculates the new location of the current handle.
     * If there are two handles and the bar was clicked, it determines which handle to move.
     * @function
     * @private
     * @param {Object} e - the `event` object passed from the listener.
     * @param {jQuery} $handle - the current handle to calculate for, if selected.
     * @param {Number} val - floating point number for the new value of the slider.
     * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.
     */
    _handleEvent(e, $handle, val) {
      var value, hasVal;
      if (!val) {
        //click or drag events
        e.preventDefault();
        var _this = this,
            vertical = this.options.vertical,
            param = vertical ? 'height' : 'width',
            direction = vertical ? 'top' : 'left',
            eventOffset = vertical ? e.pageY : e.pageX,
            halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,
            barDim = this.$element[0].getBoundingClientRect()[param],
            windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();

        var elemOffset = this.$element.offset()[direction];

        // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
        // best way to guess this is simulated is if clientY == pageY
        if (e.clientY === e.pageY) {
          eventOffset = eventOffset + windowScroll;
        }
        var eventFromBar = eventOffset - elemOffset;
        var barXY;
        if (eventFromBar < 0) {
          barXY = 0;
        } else if (eventFromBar > barDim) {
          barXY = barDim;
        } else {
          barXY = eventFromBar;
        }
        var offsetPct = percent(barXY, barDim);

        value = (this.options.end - this.options.start) * offsetPct + this.options.start;

        // turn everything around for RTL, yay math!
        if (Foundation.rtl() && !this.options.vertical) {
          value = this.options.end - value;
        }

        value = _this._adjustValue(null, value);
        //boolean flag for the setHandlePos fn, specifically for vertical sliders
        hasVal = false;

        if (!$handle) {
          //figure out which handle it is, pass it to the next function.
          var firstHndlPos = absPosition(this.$handle, direction, barXY, param),
              secndHndlPos = absPosition(this.$handle2, direction, barXY, param);
          $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;
        }
      } else {
        //change event on input
        value = this._adjustValue(null, val);
        hasVal = true;
      }

      this._setHandlePos($handle, value, hasVal);
    }

    /**
     * Adjustes value for handle in regard to step value. returns adjusted value
     * @function
     * @private
     * @param {jQuery} $handle - the selected handle.
     * @param {Number} value - value to adjust. used if $handle is falsy
     */
    _adjustValue($handle, value) {
      var val,
          step = this.options.step,
          div = parseFloat(step / 2),
          left,
          prev_val,
          next_val;
      if (!!$handle) {
        val = parseFloat($handle.attr('aria-valuenow'));
      } else {
        val = value;
      }
      left = val % step;
      prev_val = val - left;
      next_val = prev_val + step;
      if (left === 0) {
        return val;
      }
      val = val >= prev_val + div ? next_val : prev_val;
      return val;
    }

    /**
     * Adds event listeners to the slider elements.
     * @function
     * @private
     * @param {jQuery} $handle - the current handle to apply listeners to.
     */
    _events($handle) {
      var _this = this,
          curHandle,
          timer;

      this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {
        var idx = _this.inputs.index($(this));
        _this._handleEvent(e, _this.handles.eq(idx), $(this).val());
      });

      if (this.options.clickSelect) {
        this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {
          if (_this.$element.data('dragging')) {
            return false;
          }

          if (!$(e.target).is('[data-slider-handle]')) {
            if (_this.options.doubleSided) {
              _this._handleEvent(e);
            } else {
              _this._handleEvent(e, _this.$handle);
            }
          }
        });
      }

      if (this.options.draggable) {
        this.handles.addTouch();

        var $body = $('body');
        $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {
          $handle.addClass('is-dragging');
          _this.$fill.addClass('is-dragging'); //
          _this.$element.data('dragging', true);

          curHandle = $(e.currentTarget);

          $body.on('mousemove.zf.slider', function (e) {
            e.preventDefault();
            _this._handleEvent(e, curHandle);
          }).on('mouseup.zf.slider', function (e) {
            _this._handleEvent(e, curHandle);

            $handle.removeClass('is-dragging');
            _this.$fill.removeClass('is-dragging');
            _this.$element.data('dragging', false);

            $body.off('mousemove.zf.slider mouseup.zf.slider');
          });
        })
        // prevent events triggered by touch
        .on('selectstart.zf.slider touchmove.zf.slider', function (e) {
          e.preventDefault();
        });
      }

      $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {
        var _$handle = $(this),
            idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,
            oldValue = parseFloat(_this.inputs.eq(idx).val()),
            newValue;

        // handle keyboard event with keyboard util
        Foundation.Keyboard.handleKey(e, 'Slider', {
          decrease: function () {
            newValue = oldValue - _this.options.step;
          },
          increase: function () {
            newValue = oldValue + _this.options.step;
          },
          decrease_fast: function () {
            newValue = oldValue - _this.options.step * 10;
          },
          increase_fast: function () {
            newValue = oldValue + _this.options.step * 10;
          },
          handled: function () {
            // only set handle pos when event was handled specially
            e.preventDefault();
            _this._setHandlePos(_$handle, newValue, true);
          }
        });
        /*if (newValue) { // if pressed key has special function, update value
          e.preventDefault();
          _this._setHandlePos(_$handle, newValue);
        }*/
      });
    }

    /**
     * Destroys the slider plugin.
     */
    destroy() {
      this.handles.off('.zf.slider');
      this.inputs.off('.zf.slider');
      this.$element.off('.zf.slider');

      Foundation.unregisterPlugin(this);
    }
  }

  Slider.defaults = {
    /**
     * Minimum value for the slider scale.
     * @option
     * @example 0
     */
    start: 0,
    /**
     * Maximum value for the slider scale.
     * @option
     * @example 100
     */
    end: 100,
    /**
     * Minimum value change per change event.
     * @option
     * @example 1
     */
    step: 1,
    /**
     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.
     * @option
     * @example 0
     */
    initialStart: 0,
    /**
     * Value at which the right handle/second input should be set to on initialization.
     * @option
     * @example 100
     */
    initialEnd: 100,
    /**
     * Allows the input to be located outside the container and visible. Set to by the JS
     * @option
     * @example false
     */
    binding: false,
    /**
     * Allows the user to click/tap on the slider bar to select a value.
     * @option
     * @example true
     */
    clickSelect: true,
    /**
     * Set to true and use the `vertical` class to change alignment to vertical.
     * @option
     * @example false
     */
    vertical: false,
    /**
     * Allows the user to drag the slider handle(s) to select a value.
     * @option
     * @example true
     */
    draggable: true,
    /**
     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
     * @option
     * @example false
     */
    disabled: false,
    /**
     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.
     * @option
     * @example false
     */
    doubleSided: false,
    /**
     * Potential future feature.
     */
    // steps: 100,
    /**
     * Number of decimal places the plugin should go to for floating point precision.
     * @option
     * @example 2
     */
    decimal: 2,
    /**
     * Time delay for dragged elements.
     */
    // dragDelay: 0,
    /**
     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
     * @option
     * @example 200
     */
    moveTime: 200, //update this if changing the transition time in the sass
    /**
     * Class applied to disabled sliders.
     * @option
     * @example 'disabled'
     */
    disabledClass: 'disabled',
    /**
     * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.
     * @option
     * @example false
     */
    invertVertical: false,
    /**
     * Milliseconds before the `changed.zf-slider` event is triggered after value change.
     * @option
     * @example 500
     */
    changedDelay: 500
  };

  function percent(frac, num) {
    return frac / num;
  }
  function absPosition($handle, dir, clickPos, param) {
    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);
  }

  // Window exports
  Foundation.plugin(Slider, 'Slider');
}(jQuery);

//*********this is in case we go to static, absolute positions instead of dynamic positioning********
// this.setSteps(function() {
//   _this._events();
//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;
//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;
//   if (initStart || initEnd) {
//     _this._handleEvent(initStart, initEnd);
//   }
// });

//***********the other part of absolute positions*************
// Slider.prototype.setSteps = function(cb) {
//   var posChange = this.$element.outerWidth() / this.options.steps;
//   var counter = 0
//   while(counter < this.options.steps) {
//     if (counter) {
//       this.options.positions.push(this.options.positions[counter - 1] + posChange);
//     } else {
//       this.options.positions.push(posChange);
//     }
//     counter++;
//   }
//   cb();
// };
;'use strict';

!function ($) {

  /**
   * Sticky module.
   * @module foundation.sticky
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   */

  class Sticky {
    /**
     * Creates a new instance of a sticky thing.
     * @class
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Sticky');
    }

    /**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */
    _init() {
      var $parent = this.$element.parent('[data-sticky-container]'),
          id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),
          _this = this;

      if (!$parent.length) {
        this.wasWrapped = true;
      }
      this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);
      this.$container.addClass(this.options.containerClass);

      this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });

      this.scrollCount = this.options.checkEvery;
      this.isStuck = false;
      $(window).one('load.zf.sticky', function () {
        //We calculate the container height to have correct values for anchor points offset calculation.
        _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
        _this.$container.css('height', _this.containerHeight);
        _this.elemHeight = _this.containerHeight;
        if (_this.options.anchor !== '') {
          _this.$anchor = $('#' + _this.options.anchor);
        } else {
          _this._parsePoints();
        }

        _this._setSizes(function () {
          _this._calc(false);
        });
        _this._events(id.split('-').reverse().join('-'));
      });
    }

    /**
     * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
     * @function
     * @private
     */
    _parsePoints() {
      var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
          btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
          pts = [top, btm],
          breaks = {};
      for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
        var pt;
        if (typeof pts[i] === 'number') {
          pt = pts[i];
        } else {
          var place = pts[i].split(':'),
              anchor = $(`#${ place[0] }`);

          pt = anchor.offset().top;
          if (place[1] && place[1].toLowerCase() === 'bottom') {
            pt += anchor[0].getBoundingClientRect().height;
          }
        }
        breaks[i] = pt;
      }

      this.points = breaks;
      return;
    }

    /**
     * Adds event handlers for the scrolling element.
     * @private
     * @param {String} id - psuedo-random id for unique scroll event listener.
     */
    _events(id) {
      var _this = this,
          scrollListener = this.scrollListener = `scroll.zf.${ id }`;
      if (this.isOn) {
        return;
      }
      if (this.canStick) {
        this.isOn = true;
        $(window).off(scrollListener).on(scrollListener, function (e) {
          if (_this.scrollCount === 0) {
            _this.scrollCount = _this.options.checkEvery;
            _this._setSizes(function () {
              _this._calc(false, window.pageYOffset);
            });
          } else {
            _this.scrollCount--;
            _this._calc(false, window.pageYOffset);
          }
        });
      }

      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
        _this._setSizes(function () {
          _this._calc(false);
          if (_this.canStick) {
            if (!_this.isOn) {
              _this._events(id);
            }
          } else if (_this.isOn) {
            _this._pauseListeners(scrollListener);
          }
        });
      });
    }

    /**
     * Removes event handlers for scroll and change events on anchor.
     * @fires Sticky#pause
     * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
     */
    _pauseListeners(scrollListener) {
      this.isOn = false;
      $(window).off(scrollListener);

      /**
       * Fires when the plugin is paused due to resize event shrinking the view.
       * @event Sticky#pause
       * @private
       */
      this.$element.trigger('pause.zf.sticky');
    }

    /**
     * Called on every `scroll` event and on `_init`
     * fires functions based on booleans and cached values
     * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
     * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
     */
    _calc(checkSizes, scroll) {
      if (checkSizes) {
        this._setSizes();
      }

      if (!this.canStick) {
        if (this.isStuck) {
          this._removeSticky(true);
        }
        return false;
      }

      if (!scroll) {
        scroll = window.pageYOffset;
      }

      if (scroll >= this.topPoint) {
        if (scroll <= this.bottomPoint) {
          if (!this.isStuck) {
            this._setSticky();
          }
        } else {
          if (this.isStuck) {
            this._removeSticky(false);
          }
        }
      } else {
        if (this.isStuck) {
          this._removeSticky(true);
        }
      }
    }

    /**
     * Causes the $element to become stuck.
     * Adds `position: fixed;`, and helper classes.
     * @fires Sticky#stuckto
     * @function
     * @private
     */
    _setSticky() {
      var _this = this,
          stickTo = this.options.stickTo,
          mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
          notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
          css = {};

      css[mrgn] = `${ this.options[mrgn] }em`;
      css[stickTo] = 0;
      css[notStuckTo] = 'auto';
      css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])["padding-left"], 10);
      this.isStuck = true;
      this.$element.removeClass(`is-anchored is-at-${ notStuckTo }`).addClass(`is-stuck is-at-${ stickTo }`).css(css)
      /**
       * Fires when the $element has become `position: fixed;`
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
       * @event Sticky#stuckto
       */
      .trigger(`sticky.zf.stuckto:${ stickTo }`);
      this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
        _this._setSizes();
      });
    }

    /**
     * Causes the $element to become unstuck.
     * Removes `position: fixed;`, and helper classes.
     * Adds other helper classes.
     * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
     * @fires Sticky#unstuckfrom
     * @private
     */
    _removeSticky(isTop) {
      var stickTo = this.options.stickTo,
          stickToTop = stickTo === 'top',
          css = {},
          anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
          mrgn = stickToTop ? 'marginTop' : 'marginBottom',
          notStuckTo = stickToTop ? 'bottom' : 'top',
          topOrBottom = isTop ? 'top' : 'bottom';

      css[mrgn] = 0;

      css['bottom'] = 'auto';
      if (isTop) {
        css['top'] = 0;
      } else {
        css['top'] = anchorPt;
      }

      css['left'] = '';
      this.isStuck = false;
      this.$element.removeClass(`is-stuck is-at-${ stickTo }`).addClass(`is-anchored is-at-${ topOrBottom }`).css(css)
      /**
       * Fires when the $element has become anchored.
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
       * @event Sticky#unstuckfrom
       */
      .trigger(`sticky.zf.unstuckfrom:${ topOrBottom }`);
    }

    /**
     * Sets the $element and $container sizes for plugin.
     * Calls `_setBreakPoints`.
     * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
     * @private
     */
    _setSizes(cb) {
      this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        }
      }
      var _this = this,
          newElemWidth = this.$container[0].getBoundingClientRect().width,
          comp = window.getComputedStyle(this.$container[0]),
          pdng = parseInt(comp['padding-right'], 10);

      if (this.$anchor && this.$anchor.length) {
        this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
      } else {
        this._parsePoints();
      }

      this.$element.css({
        'max-width': `${ newElemWidth - pdng }px`
      });

      var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
      if (this.$element.css("display") == "none") {
        newContainerHeight = 0;
      }
      this.containerHeight = newContainerHeight;
      this.$container.css({
        height: newContainerHeight
      });
      this.elemHeight = newContainerHeight;

      if (this.isStuck) {
        this.$element.css({ "left": this.$container.offset().left + parseInt(comp['padding-left'], 10) });
      } else {
        if (this.$element.hasClass('is-at-bottom')) {
          var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
          this.$element.css('top', anchorPt);
        }
      }

      this._setBreakPoints(newContainerHeight, function () {
        if (cb && typeof cb === 'function') {
          cb();
        }
      });
    }

    /**
     * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
     * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
     * @param {Function} cb - optional callback function to be called on completion.
     * @private
     */
    _setBreakPoints(elemHeight, cb) {
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        } else {
          return false;
        }
      }
      var mTop = emCalc(this.options.marginTop),
          mBtm = emCalc(this.options.marginBottom),
          topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
          bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,

      // topPoint = this.$anchor.offset().top || this.points[0],
      // bottomPoint = topPoint + this.anchorHeight || this.points[1],
      winHeight = window.innerHeight;

      if (this.options.stickTo === 'top') {
        topPoint -= mTop;
        bottomPoint -= elemHeight + mTop;
      } else if (this.options.stickTo === 'bottom') {
        topPoint -= winHeight - (elemHeight + mBtm);
        bottomPoint -= winHeight - mBtm;
      } else {
        //this would be the stickTo: both option... tricky
      }

      this.topPoint = topPoint;
      this.bottomPoint = bottomPoint;

      if (cb && typeof cb === 'function') {
        cb();
      }
    }

    /**
     * Destroys the current sticky element.
     * Resets the element to the top position first.
     * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
     * @function
     */
    destroy() {
      this._removeSticky(true);

      this.$element.removeClass(`${ this.options.stickyClass } is-anchored is-at-top`).css({
        height: '',
        top: '',
        bottom: '',
        'max-width': ''
      }).off('resizeme.zf.trigger');
      if (this.$anchor && this.$anchor.length) {
        this.$anchor.off('change.zf.sticky');
      }
      $(window).off(this.scrollListener);

      if (this.wasWrapped) {
        this.$element.unwrap();
      } else {
        this.$container.removeClass(this.options.containerClass).css({
          height: ''
        });
      }
      Foundation.unregisterPlugin(this);
    }
  }

  Sticky.defaults = {
    /**
     * Customizable container template. Add your own classes for styling and sizing.
     * @option
     * @example '&lt;div data-sticky-container class="small-6 columns"&gt;&lt;/div&gt;'
     */
    container: '<div data-sticky-container></div>',
    /**
     * Location in the view the element sticks to.
     * @option
     * @example 'top'
     */
    stickTo: 'top',
    /**
     * If anchored to a single element, the id of that element.
     * @option
     * @example 'exampleId'
     */
    anchor: '',
    /**
     * If using more than one element as anchor points, the id of the top anchor.
     * @option
     * @example 'exampleId:top'
     */
    topAnchor: '',
    /**
     * If using more than one element as anchor points, the id of the bottom anchor.
     * @option
     * @example 'exampleId:bottom'
     */
    btmAnchor: '',
    /**
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
     * @option
     * @example 1
     */
    marginTop: 1,
    /**
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
     * @option
     * @example 1
     */
    marginBottom: 1,
    /**
     * Breakpoint string that is the minimum screen size an element should become sticky.
     * @option
     * @example 'medium'
     */
    stickyOn: 'medium',
    /**
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
     * @option
     * @example 'sticky'
     */
    stickyClass: 'sticky',
    /**
     * Class applied to sticky container. Foundation defaults to `sticky-container`.
     * @option
     * @example 'sticky-container'
     */
    containerClass: 'sticky-container',
    /**
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option
     * @example 50
     */
    checkEvery: -1
  };

  /**
   * Helper function to calculate em values
   * @param Number {em} - number of em's to calculate into pixels
   */
  function emCalc(em) {
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
  }

  // Window exports
  Foundation.plugin(Sticky, 'Sticky');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Tabs module.
   * @module foundation.tabs
   * @requires foundation.util.keyboard
   * @requires foundation.util.timerAndImageLoader if tabs contain images
   */

  class Tabs {
    /**
     * Creates a new instance of tabs.
     * @class
     * @fires Tabs#init
     * @param {jQuery} element - jQuery object to make into tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);

      this._init();
      Foundation.registerPlugin(this, 'Tabs');
      Foundation.Keyboard.register('Tabs', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'previous',
        'ARROW_DOWN': 'next',
        'ARROW_LEFT': 'previous'
        // 'TAB': 'next',
        // 'SHIFT_TAB': 'previous'
      });
    }

    /**
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
     * @private
     */
    _init() {
      var _this = this;

      this.$tabTitles = this.$element.find(`.${ this.options.linkClass }`);
      this.$tabContent = $(`[data-tabs-content="${ this.$element[0].id }"]`);

      this.$tabTitles.each(function () {
        var $elem = $(this),
            $link = $elem.find('a'),
            isActive = $elem.hasClass('is-active'),
            hash = $link[0].hash.slice(1),
            linkId = $link[0].id ? $link[0].id : `${ hash }-label`,
            $tabContent = $(`#${ hash }`);

        $elem.attr({ 'role': 'presentation' });

        $link.attr({
          'role': 'tab',
          'aria-controls': hash,
          'aria-selected': isActive,
          'id': linkId
        });

        $tabContent.attr({
          'role': 'tabpanel',
          'aria-hidden': !isActive,
          'aria-labelledby': linkId
        });

        if (isActive && _this.options.autoFocus) {
          $link.focus();
        }
      });

      if (this.options.matchHeight) {
        var $images = this.$tabContent.find('img');

        if ($images.length) {
          Foundation.onImagesLoaded($images, this._setHeight.bind(this));
        } else {
          this._setHeight();
        }
      }

      this._events();
    }

    /**
     * Adds event handlers for items within the tabs.
     * @private
     */
    _events() {
      this._addKeyHandler();
      this._addClickHandler();
      this._setHeightMqHandler = null;

      if (this.options.matchHeight) {
        this._setHeightMqHandler = this._setHeight.bind(this);

        $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
      }
    }

    /**
     * Adds click handlers for items within the tabs.
     * @private
     */
    _addClickHandler() {
      var _this = this;

      this.$element.off('click.zf.tabs').on('click.zf.tabs', `.${ this.options.linkClass }`, function (e) {
        e.preventDefault();
        e.stopPropagation();
        if ($(this).hasClass('is-active')) {
          return;
        }
        _this._handleTabChange($(this));
      });
    }

    /**
     * Adds keyboard event handlers for items within the tabs.
     * @private
     */
    _addKeyHandler() {
      var _this = this;
      var $firstTab = _this.$element.find('li:first-of-type');
      var $lastTab = _this.$element.find('li:last-of-type');

      this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {
        if (e.which === 9) return;

        var $element = $(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ($(this).is($element)) {
            if (_this.options.wrapOnKeys) {
              $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
              $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
            } else {
              $prevElement = $elements.eq(Math.max(0, i - 1));
              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
            }
            return;
          }
        });

        // handle keyboard event with keyboard util
        Foundation.Keyboard.handleKey(e, 'Tabs', {
          open: function () {
            $element.find('[role="tab"]').focus();
            _this._handleTabChange($element);
          },
          previous: function () {
            $prevElement.find('[role="tab"]').focus();
            _this._handleTabChange($prevElement);
          },
          next: function () {
            $nextElement.find('[role="tab"]').focus();
            _this._handleTabChange($nextElement);
          },
          handled: function () {
            e.stopPropagation();
            e.preventDefault();
          }
        });
      });
    }

    /**
     * Opens the tab `$targetContent` defined by `$target`.
     * @param {jQuery} $target - Tab to open.
     * @fires Tabs#change
     * @function
     */
    _handleTabChange($target) {
      var $tabLink = $target.find('[role="tab"]'),
          hash = $tabLink[0].hash,
          $targetContent = this.$tabContent.find(hash),
          $oldTab = this.$element.find(`.${ this.options.linkClass }.is-active`).removeClass('is-active').find('[role="tab"]').attr({ 'aria-selected': 'false' });

      $(`#${ $oldTab.attr('aria-controls') }`).removeClass('is-active').attr({ 'aria-hidden': 'true' });

      $target.addClass('is-active');

      $tabLink.attr({ 'aria-selected': 'true' });

      $targetContent.addClass('is-active').attr({ 'aria-hidden': 'false' });

      /**
       * Fires when the plugin has successfully changed tabs.
       * @event Tabs#change
       */
      this.$element.trigger('change.zf.tabs', [$target]);
    }

    /**
     * Public method for selecting a content pane to display.
     * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
     * @function
     */
    selectTab(elem) {
      var idStr;

      if (typeof elem === 'object') {
        idStr = elem[0].id;
      } else {
        idStr = elem;
      }

      if (idStr.indexOf('#') < 0) {
        idStr = `#${ idStr }`;
      }

      var $target = this.$tabTitles.find(`[href="${ idStr }"]`).parent(`.${ this.options.linkClass }`);

      this._handleTabChange($target);
    }
    /**
     * Sets the height of each panel to the height of the tallest panel.
     * If enabled in options, gets called on media query change.
     * If loading content via external source, can be called directly or with _reflow.
     * @function
     * @private
     */
    _setHeight() {
      var max = 0;
      this.$tabContent.find(`.${ this.options.panelClass }`).css('height', '').each(function () {
        var panel = $(this),
            isActive = panel.hasClass('is-active');

        if (!isActive) {
          panel.css({ 'visibility': 'hidden', 'display': 'block' });
        }

        var temp = this.getBoundingClientRect().height;

        if (!isActive) {
          panel.css({
            'visibility': '',
            'display': ''
          });
        }

        max = temp > max ? temp : max;
      }).css('height', `${ max }px`);
    }

    /**
     * Destroys an instance of an tabs.
     * @fires Tabs#destroyed
     */
    destroy() {
      this.$element.find(`.${ this.options.linkClass }`).off('.zf.tabs').hide().end().find(`.${ this.options.panelClass }`).hide();

      if (this.options.matchHeight) {
        if (this._setHeightMqHandler != null) {
          $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
        }
      }

      Foundation.unregisterPlugin(this);
    }
  }

  Tabs.defaults = {
    /**
     * Allows the window to scroll to content of active pane on load if set to true.
     * @option
     * @example false
     */
    autoFocus: false,

    /**
     * Allows keyboard input to 'wrap' around the tab links.
     * @option
     * @example true
     */
    wrapOnKeys: true,

    /**
     * Allows the tab content panes to match heights if set to true.
     * @option
     * @example false
     */
    matchHeight: false,

    /**
     * Class applied to `li`'s in tab link list.
     * @option
     * @example 'tabs-title'
     */
    linkClass: 'tabs-title',

    /**
     * Class applied to the content containers.
     * @option
     * @example 'tabs-panel'
     */
    panelClass: 'tabs-panel'
  };

  function checkClass($elem) {
    return $elem.hasClass('is-active');
  }

  // Window exports
  Foundation.plugin(Tabs, 'Tabs');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Toggler module.
   * @module foundation.toggler
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   */

  class Toggler {
    /**
     * Creates a new instance of Toggler.
     * @class
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Toggler.defaults, element.data(), options);
      this.className = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Toggler');
    }

    /**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */
    _init() {
      var input;
      // Parse animation classes if they were set
      if (this.options.animate) {
        input = this.options.animate.split(' ');

        this.animationIn = input[0];
        this.animationOut = input[1] || null;
      }
      // Otherwise, parse toggle class
      else {
          input = this.$element.data('toggler');
          // Allow for a . at the beginning of the string
          this.className = input[0] === '.' ? input.slice(1) : input;
        }

      // Add ARIA attributes to triggers
      var id = this.$element[0].id;
      $(`[data-open="${ id }"], [data-close="${ id }"], [data-toggle="${ id }"]`).attr('aria-controls', id);
      // If the target is hidden, add aria-hidden
      this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
    }

    /**
     * Initializes events for the toggle trigger.
     * @function
     * @private
     */
    _events() {
      this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
    }

    /**
     * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
     * @function
     * @fires Toggler#on
     * @fires Toggler#off
     */
    toggle() {
      this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
    }

    _toggleClass() {
      this.$element.toggleClass(this.className);

      var isOn = this.$element.hasClass(this.className);
      if (isOn) {
        /**
         * Fires if the target element has the class after a toggle.
         * @event Toggler#on
         */
        this.$element.trigger('on.zf.toggler');
      } else {
        /**
         * Fires if the target element does not have the class after a toggle.
         * @event Toggler#off
         */
        this.$element.trigger('off.zf.toggler');
      }

      this._updateARIA(isOn);
    }

    _toggleAnimate() {
      var _this = this;

      if (this.$element.is(':hidden')) {
        Foundation.Motion.animateIn(this.$element, this.animationIn, function () {
          _this._updateARIA(true);
          this.trigger('on.zf.toggler');
        });
      } else {
        Foundation.Motion.animateOut(this.$element, this.animationOut, function () {
          _this._updateARIA(false);
          this.trigger('off.zf.toggler');
        });
      }
    }

    _updateARIA(isOn) {
      this.$element.attr('aria-expanded', isOn ? true : false);
    }

    /**
     * Destroys the instance of Toggler on the element.
     * @function
     */
    destroy() {
      this.$element.off('.zf.toggler');
      Foundation.unregisterPlugin(this);
    }
  }

  Toggler.defaults = {
    /**
     * Tells the plugin if the element should animated when toggled.
     * @option
     * @example false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(Toggler, 'Toggler');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Tooltip module.
   * @module foundation.tooltip
   * @requires foundation.util.box
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   */

  class Tooltip {
    /**
     * Creates a new instance of a Tooltip.
     * @class
     * @fires Tooltip#init
     * @param {jQuery} element - jQuery object to attach a tooltip to.
     * @param {Object} options - object to extend the default configuration.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);

      this.isActive = false;
      this.isClick = false;
      this._init();

      Foundation.registerPlugin(this, 'Tooltip');
    }

    /**
     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
     * @private
     */
    _init() {
      var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');

      this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);
      this.options.tipText = this.options.tipText || this.$element.attr('title');
      this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);

      this.template.appendTo(document.body).text(this.options.tipText).hide();

      this.$element.attr({
        'title': '',
        'aria-describedby': elemId,
        'data-yeti-box': elemId,
        'data-toggle': elemId,
        'data-resize': elemId
      }).addClass(this.options.triggerClass);

      //helper variables to track movement on collisions
      this.usedPositions = [];
      this.counter = 4;
      this.classChanged = false;

      this._events();
    }

    /**
     * Grabs the current positioning class, if present, and returns the value or an empty string.
     * @private
     */
    _getPositionClass(element) {
      if (!element) {
        return '';
      }
      // var position = element.attr('class').match(/top|left|right/g);
      var position = element[0].className.match(/\b(top|left|right)\b/g);
      position = position ? position[0] : '';
      return position;
    }
    /**
     * builds the tooltip element, adds attributes, and returns the template.
     * @private
     */
    _buildTemplate(id) {
      var templateClasses = `${ this.options.tooltipClass } ${ this.options.positionClass } ${ this.options.templateClasses }`.trim();
      var $template = $('<div></div>').addClass(templateClasses).attr({
        'role': 'tooltip',
        'aria-hidden': true,
        'data-is-active': false,
        'data-is-focus': false,
        'id': id
      });
      return $template;
    }

    /**
     * Function that gets called if a collision event is detected.
     * @param {String} position - positioning class to try
     * @private
     */
    _reposition(position) {
      this.usedPositions.push(position ? position : 'bottom');

      //default, try switching to opposite side
      if (!position && this.usedPositions.indexOf('top') < 0) {
        this.template.addClass('top');
      } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
        this.template.removeClass(position);
      } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
        this.template.removeClass(position).addClass('right');
      } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
        this.template.removeClass(position).addClass('left');
      }

      //if default change didn't work, try bottom or left first
      else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.template.addClass('left');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.template.removeClass(position).addClass('left');
        } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.template.removeClass(position);
        } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.template.removeClass(position);
        }
        //if nothing cleared, set to bottom
        else {
            this.template.removeClass(position);
          }
      this.classChanged = true;
      this.counter--;
    }

    /**
     * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
     * if the tooltip is larger than the screen width, default to full width - any user selected margin
     * @private
     */
    _setPosition() {
      var position = this._getPositionClass(this.template),
          $tipDims = Foundation.Box.GetDimensions(this.template),
          $anchorDims = Foundation.Box.GetDimensions(this.$element),
          direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
          param = direction === 'top' ? 'height' : 'width',
          offset = param === 'height' ? this.options.vOffset : this.options.hOffset,
          _this = this;

      if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {
        this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
          // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
          'width': $anchorDims.windowDims.width - this.options.hOffset * 2,
          'height': 'auto'
        });
        return false;
      }

      this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));

      while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {
        this._reposition(position);
        this._setPosition();
      }
    }

    /**
     * reveals the tooltip, and fires an event to close any other open tooltips on the page
     * @fires Tooltip#closeme
     * @fires Tooltip#show
     * @function
     */
    show() {
      if (this.options.showOn !== 'all' && !Foundation.MediaQuery.atLeast(this.options.showOn)) {
        // console.error('The screen is too small to display this tooltip');
        return false;
      }

      var _this = this;
      this.template.css('visibility', 'hidden').show();
      this._setPosition();

      /**
       * Fires to close all other open tooltips on the page
       * @event Closeme#tooltip
       */
      this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));

      this.template.attr({
        'data-is-active': true,
        'aria-hidden': false
      });
      _this.isActive = true;
      // console.log(this.template);
      this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {
        //maybe do stuff?
      });
      /**
       * Fires when the tooltip is shown
       * @event Tooltip#show
       */
      this.$element.trigger('show.zf.tooltip');
    }

    /**
     * Hides the current tooltip, and resets the positioning class if it was changed due to collision
     * @fires Tooltip#hide
     * @function
     */
    hide() {
      // console.log('hiding', this.$element.data('yeti-box'));
      var _this = this;
      this.template.stop().attr({
        'aria-hidden': true,
        'data-is-active': false
      }).fadeOut(this.options.fadeOutDuration, function () {
        _this.isActive = false;
        _this.isClick = false;
        if (_this.classChanged) {
          _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);

          _this.usedPositions = [];
          _this.counter = 4;
          _this.classChanged = false;
        }
      });
      /**
       * fires when the tooltip is hidden
       * @event Tooltip#hide
       */
      this.$element.trigger('hide.zf.tooltip');
    }

    /**
     * adds event listeners for the tooltip and its anchor
     * TODO combine some of the listeners like focus and mouseenter, etc.
     * @private
     */
    _events() {
      var _this = this;
      var $template = this.template;
      var isFocus = false;

      if (!this.options.disableHover) {

        this.$element.on('mouseenter.zf.tooltip', function (e) {
          if (!_this.isActive) {
            _this.timeout = setTimeout(function () {
              _this.show();
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.tooltip', function (e) {
          clearTimeout(_this.timeout);
          if (!isFocus || _this.isClick && !_this.options.clickOpen) {
            _this.hide();
          }
        });
      }

      if (this.options.clickOpen) {
        this.$element.on('mousedown.zf.tooltip', function (e) {
          e.stopImmediatePropagation();
          if (_this.isClick) {
            //_this.hide();
            // _this.isClick = false;
          } else {
            _this.isClick = true;
            if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {
              _this.show();
            }
          }
        });
      } else {
        this.$element.on('mousedown.zf.tooltip', function (e) {
          e.stopImmediatePropagation();
          _this.isClick = true;
        });
      }

      if (!this.options.disableForTouch) {
        this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {
          _this.isActive ? _this.hide() : _this.show();
        });
      }

      this.$element.on({
        // 'toggle.zf.trigger': this.toggle.bind(this),
        // 'close.zf.trigger': this.hide.bind(this)
        'close.zf.trigger': this.hide.bind(this)
      });

      this.$element.on('focus.zf.tooltip', function (e) {
        isFocus = true;
        if (_this.isClick) {
          // If we're not showing open on clicks, we need to pretend a click-launched focus isn't
          // a real focus, otherwise on hover and come back we get bad behavior
          if (!_this.options.clickOpen) {
            isFocus = false;
          }
          return false;
        } else {
          _this.show();
        }
      }).on('focusout.zf.tooltip', function (e) {
        isFocus = false;
        _this.isClick = false;
        _this.hide();
      }).on('resizeme.zf.trigger', function () {
        if (_this.isActive) {
          _this._setPosition();
        }
      });
    }

    /**
     * adds a toggle method, in addition to the static show() & hide() functions
     * @function
     */
    toggle() {
      if (this.isActive) {
        this.hide();
      } else {
        this.show();
      }
    }

    /**
     * Destroys an instance of tooltip, removes template element from the view.
     * @function
     */
    destroy() {
      this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tootip')
      //  .removeClass('has-tip')
      .removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');

      this.template.remove();

      Foundation.unregisterPlugin(this);
    }
  }

  Tooltip.defaults = {
    disableForTouch: false,
    /**
     * Time, in ms, before a tooltip should open on hover.
     * @option
     * @example 200
     */
    hoverDelay: 200,
    /**
     * Time, in ms, a tooltip should take to fade into view.
     * @option
     * @example 150
     */
    fadeInDuration: 150,
    /**
     * Time, in ms, a tooltip should take to fade out of view.
     * @option
     * @example 150
     */
    fadeOutDuration: 150,
    /**
     * Disables hover events from opening the tooltip if set to true
     * @option
     * @example false
     */
    disableHover: false,
    /**
     * Optional addtional classes to apply to the tooltip template on init.
     * @option
     * @example 'my-cool-tip-class'
     */
    templateClasses: '',
    /**
     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
     * @option
     * @example 'tooltip'
     */
    tooltipClass: 'tooltip',
    /**
     * Class applied to the tooltip anchor element.
     * @option
     * @example 'has-tip'
     */
    triggerClass: 'has-tip',
    /**
     * Minimum breakpoint size at which to open the tooltip.
     * @option
     * @example 'small'
     */
    showOn: 'small',
    /**
     * Custom template to be used to generate markup for tooltip.
     * @option
     * @example '&lt;div class="tooltip"&gt;&lt;/div&gt;'
     */
    template: '',
    /**
     * Text displayed in the tooltip template on open.
     * @option
     * @example 'Some cool space fact here.'
     */
    tipText: '',
    touchCloseText: 'Tap to close.',
    /**
     * Allows the tooltip to remain open if triggered with a click or touch event.
     * @option
     * @example true
     */
    clickOpen: true,
    /**
     * Additional positioning classes, set by the JS
     * @option
     * @example 'top'
     */
    positionClass: '',
    /**
     * Distance, in pixels, the template should push away from the anchor on the Y axis.
     * @option
     * @example 10
     */
    vOffset: 10,
    /**
     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.
     * @option
     * @example 12
     */
    hOffset: 12
  };

  /**
   * TODO utilize resize event trigger
   */

  // Window exports
  Foundation.plugin(Tooltip, 'Tooltip');
}(jQuery);
;'use strict';

// Polyfill for requestAnimationFrame

(function () {
  if (!Date.now) Date.now = function () {
    return new Date().getTime();
  };

  var vendors = ['webkit', 'moz'];
  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
    var vp = vendors[i];
    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
  }
  if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
    var lastTime = 0;
    window.requestAnimationFrame = function (callback) {
      var now = Date.now();
      var nextTime = Math.max(lastTime + 16, now);
      return setTimeout(function () {
        callback(lastTime = nextTime);
      }, nextTime - now);
    };
    window.cancelAnimationFrame = clearTimeout;
  }
})();

var initClasses = ['mui-enter', 'mui-leave'];
var activeClasses = ['mui-enter-active', 'mui-leave-active'];

// Find the right "transitionend" event for this browser
var endEvent = function () {
  var transitions = {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'otransitionend'
  };
  var elem = window.document.createElement('div');

  for (var t in transitions) {
    if (typeof elem.style[t] !== 'undefined') {
      return transitions[t];
    }
  }

  return null;
}();

function animate(isIn, element, animation, cb) {
  element = $(element).eq(0);

  if (!element.length) return;

  if (endEvent === null) {
    isIn ? element.show() : element.hide();
    cb();
    return;
  }

  var initClass = isIn ? initClasses[0] : initClasses[1];
  var activeClass = isIn ? activeClasses[0] : activeClasses[1];

  // Set up the animation
  reset();
  element.addClass(animation);
  element.css('transition', 'none');
  requestAnimationFrame(function () {
    element.addClass(initClass);
    if (isIn) element.show();
  });

  // Start the animation
  requestAnimationFrame(function () {
    element[0].offsetWidth;
    element.css('transition', '');
    element.addClass(activeClass);
  });

  // Clean up the animation when it finishes
  element.one('transitionend', finish);

  // Hides the element (for out animations), resets the element, and runs a callback
  function finish() {
    if (!isIn) element.hide();
    reset();
    if (cb) cb.apply(element);
  }

  // Resets transitions and removes motion-specific classes
  function reset() {
    element[0].style.transitionDuration = 0;
    element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
  }
}

var MotionUI = {
  animateIn: function (element, animation, cb) {
    animate(true, element, animation, cb);
  },

  animateOut: function (element, animation, cb) {
    animate(false, element, animation, cb);
  }
};
;jQuery('iframe[src*="youtube.com"]').wrap("<div class='flex-video widescreen'/>");
jQuery('iframe[src*="vimeo.com"]').wrap("<div class='flex-video widescreen vimeo'/>");
;jQuery(document).foundation();
;// Joyride demo
$('#start-jr').on('click', function () {
  $(document).foundation('joyride', 'start');
});
;/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */
;(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module. 
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// Node/CommonJS 
		factory(require('jquery'));
	} else {
		// Browser globals 
		factory(window.jQuery || window.Zepto);
	}
})(function ($) {

	/*>>core*/
	/**
  * 
  * Magnific Popup Core JS file
  * 
  */

	/**
  * Private static constants
  */
	var CLOSE_EVENT = 'Close',
	    BEFORE_CLOSE_EVENT = 'BeforeClose',
	    AFTER_CLOSE_EVENT = 'AfterClose',
	    BEFORE_APPEND_EVENT = 'BeforeAppend',
	    MARKUP_PARSE_EVENT = 'MarkupParse',
	    OPEN_EVENT = 'Open',
	    CHANGE_EVENT = 'Change',
	    NS = 'mfp',
	    EVENT_NS = '.' + NS,
	    READY_CLASS = 'mfp-ready',
	    REMOVING_CLASS = 'mfp-removing',
	    PREVENT_CLOSE_CLASS = 'mfp-prevent-close';

	/**
  * Private vars 
  */
	/*jshint -W079 */
	var mfp,
	    // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
	MagnificPopup = function () {},
	    _isJQ = !!window.jQuery,
	    _prevStatus,
	    _window = $(window),
	    _document,
	    _prevContentType,
	    _wrapClasses,
	    _currPopupType;

	/**
  * Private functions
  */
	var _mfpOn = function (name, f) {
		mfp.ev.on(NS + name + EVENT_NS, f);
	},
	    _getEl = function (className, appendTo, html, raw) {
		var el = document.createElement('div');
		el.className = 'mfp-' + className;
		if (html) {
			el.innerHTML = html;
		}
		if (!raw) {
			el = $(el);
			if (appendTo) {
				el.appendTo(appendTo);
			}
		} else if (appendTo) {
			appendTo.appendChild(el);
		}
		return el;
	},
	    _mfpTrigger = function (e, data) {
		mfp.ev.triggerHandler(NS + e, data);

		if (mfp.st.callbacks) {
			// converts "mfpEventName" to "eventName" callback and triggers it if it's present
			e = e.charAt(0).toLowerCase() + e.slice(1);
			if (mfp.st.callbacks[e]) {
				mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
			}
		}
	},
	    _getCloseBtn = function (type) {
		if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
			mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace('%title%', mfp.st.tClose));
			_currPopupType = type;
		}
		return mfp.currTemplate.closeBtn;
	},

	// Initialize Magnific Popup only when called at least once
	_checkInstance = function () {
		if (!$.magnificPopup.instance) {
			/*jshint -W020 */
			mfp = new MagnificPopup();
			mfp.init();
			$.magnificPopup.instance = mfp;
		}
	},

	// CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
	supportsTransitions = function () {
		var s = document.createElement('p').style,
		    // 's' for style. better to create an element if body yet to exist
		v = ['ms', 'O', 'Moz', 'Webkit']; // 'v' for vendor

		if (s['transition'] !== undefined) {
			return true;
		}

		while (v.length) {
			if (v.pop() + 'Transition' in s) {
				return true;
			}
		}

		return false;
	};

	/**
  * Public functions
  */
	MagnificPopup.prototype = {

		constructor: MagnificPopup,

		/**
   * Initializes Magnific Popup plugin. 
   * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
   */
		init: function () {
			var appVersion = navigator.appVersion;
			mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;
			mfp.isAndroid = /android/gi.test(appVersion);
			mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion);
			mfp.supportsTransition = supportsTransitions();

			// We disable fixed positioned lightbox on devices that don't handle it nicely.
			// If you know a better way of detecting this - let me know.
			mfp.probablyMobile = mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent);
			_document = $(document);

			mfp.popupsCache = {};
		},

		/**
   * Opens popup
   * @param  data [description]
   */
		open: function (data) {

			var i;

			if (data.isObj === false) {
				// convert jQuery collection to array to avoid conflicts later
				mfp.items = data.items.toArray();

				mfp.index = 0;
				var items = data.items,
				    item;
				for (i = 0; i < items.length; i++) {
					item = items[i];
					if (item.parsed) {
						item = item.el[0];
					}
					if (item === data.el[0]) {
						mfp.index = i;
						break;
					}
				}
			} else {
				mfp.items = $.isArray(data.items) ? data.items : [data.items];
				mfp.index = data.index || 0;
			}

			// if popup is already opened - we just update the content
			if (mfp.isOpen) {
				mfp.updateItemHTML();
				return;
			}

			mfp.types = [];
			_wrapClasses = '';
			if (data.mainEl && data.mainEl.length) {
				mfp.ev = data.mainEl.eq(0);
			} else {
				mfp.ev = _document;
			}

			if (data.key) {
				if (!mfp.popupsCache[data.key]) {
					mfp.popupsCache[data.key] = {};
				}
				mfp.currTemplate = mfp.popupsCache[data.key];
			} else {
				mfp.currTemplate = {};
			}

			mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
			mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;

			if (mfp.st.modal) {
				mfp.st.closeOnContentClick = false;
				mfp.st.closeOnBgClick = false;
				mfp.st.showCloseBtn = false;
				mfp.st.enableEscapeKey = false;
			}

			// Building markup
			// main containers are created only once
			if (!mfp.bgOverlay) {

				// Dark overlay
				mfp.bgOverlay = _getEl('bg').on('click' + EVENT_NS, function () {
					mfp.close();
				});

				mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click' + EVENT_NS, function (e) {
					if (mfp._checkIfClose(e.target)) {
						mfp.close();
					}
				});

				mfp.container = _getEl('container', mfp.wrap);
			}

			mfp.contentContainer = _getEl('content');
			if (mfp.st.preloader) {
				mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);
			}

			// Initializing modules
			var modules = $.magnificPopup.modules;
			for (i = 0; i < modules.length; i++) {
				var n = modules[i];
				n = n.charAt(0).toUpperCase() + n.slice(1);
				mfp['init' + n].call(mfp);
			}
			_mfpTrigger('BeforeOpen');

			if (mfp.st.showCloseBtn) {
				// Close button
				if (!mfp.st.closeBtnInside) {
					mfp.wrap.append(_getCloseBtn());
				} else {
					_mfpOn(MARKUP_PARSE_EVENT, function (e, template, values, item) {
						values.close_replaceWith = _getCloseBtn(item.type);
					});
					_wrapClasses += ' mfp-close-btn-in';
				}
			}

			if (mfp.st.alignTop) {
				_wrapClasses += ' mfp-align-top';
			}

			if (mfp.fixedContentPos) {
				mfp.wrap.css({
					overflow: mfp.st.overflowY,
					overflowX: 'hidden',
					overflowY: mfp.st.overflowY
				});
			} else {
				mfp.wrap.css({
					top: _window.scrollTop(),
					position: 'absolute'
				});
			}
			if (mfp.st.fixedBgPos === false || mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos) {
				mfp.bgOverlay.css({
					height: _document.height(),
					position: 'absolute'
				});
			}

			if (mfp.st.enableEscapeKey) {
				// Close on ESC key
				_document.on('keyup' + EVENT_NS, function (e) {
					if (e.keyCode === 27) {
						mfp.close();
					}
				});
			}

			_window.on('resize' + EVENT_NS, function () {
				mfp.updateSize();
			});

			if (!mfp.st.closeOnContentClick) {
				_wrapClasses += ' mfp-auto-cursor';
			}

			if (_wrapClasses) mfp.wrap.addClass(_wrapClasses);

			// this triggers recalculation of layout, so we get it once to not to trigger twice
			var windowHeight = mfp.wH = _window.height();

			var windowStyles = {};

			if (mfp.fixedContentPos) {
				if (mfp._hasScrollBar(windowHeight)) {
					var s = mfp._getScrollbarSize();
					if (s) {
						windowStyles.marginRight = s;
					}
				}
			}

			if (mfp.fixedContentPos) {
				if (!mfp.isIE7) {
					windowStyles.overflow = 'hidden';
				} else {
					// ie7 double-scroll bug
					$('body, html').css('overflow', 'hidden');
				}
			}

			var classesToadd = mfp.st.mainClass;
			if (mfp.isIE7) {
				classesToadd += ' mfp-ie7';
			}
			if (classesToadd) {
				mfp._addClassToMFP(classesToadd);
			}

			// add content
			mfp.updateItemHTML();

			_mfpTrigger('BuildControls');

			// remove scrollbar, add margin e.t.c
			$('html').css(windowStyles);

			// add everything to DOM
			mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || $(document.body));

			// Save last focused element
			mfp._lastFocusedEl = document.activeElement;

			// Wait for next cycle to allow CSS transition
			setTimeout(function () {

				if (mfp.content) {
					mfp._addClassToMFP(READY_CLASS);
					mfp._setFocus();
				} else {
					// if content is not defined (not loaded e.t.c) we add class only for BG
					mfp.bgOverlay.addClass(READY_CLASS);
				}

				// Trap the focus in popup
				_document.on('focusin' + EVENT_NS, mfp._onFocusIn);
			}, 16);

			mfp.isOpen = true;
			mfp.updateSize(windowHeight);
			_mfpTrigger(OPEN_EVENT);

			return data;
		},

		/**
   * Closes the popup
   */
		close: function () {
			if (!mfp.isOpen) return;
			_mfpTrigger(BEFORE_CLOSE_EVENT);

			mfp.isOpen = false;
			// for CSS3 animation
			if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
				mfp._addClassToMFP(REMOVING_CLASS);
				setTimeout(function () {
					mfp._close();
				}, mfp.st.removalDelay);
			} else {
				mfp._close();
			}
		},

		/**
   * Helper for close() function
   */
		_close: function () {
			_mfpTrigger(CLOSE_EVENT);

			var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';

			mfp.bgOverlay.detach();
			mfp.wrap.detach();
			mfp.container.empty();

			if (mfp.st.mainClass) {
				classesToRemove += mfp.st.mainClass + ' ';
			}

			mfp._removeClassFromMFP(classesToRemove);

			if (mfp.fixedContentPos) {
				var windowStyles = { marginRight: '' };
				if (mfp.isIE7) {
					$('body, html').css('overflow', '');
				} else {
					windowStyles.overflow = '';
				}
				$('html').css(windowStyles);
			}

			_document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);
			mfp.ev.off(EVENT_NS);

			// clean up DOM elements that aren't removed
			mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');
			mfp.bgOverlay.attr('class', 'mfp-bg');
			mfp.container.attr('class', 'mfp-container');

			// remove close button from target element
			if (mfp.st.showCloseBtn && (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
				if (mfp.currTemplate.closeBtn) mfp.currTemplate.closeBtn.detach();
			}

			if (mfp.st.autoFocusLast && mfp._lastFocusedEl) {
				$(mfp._lastFocusedEl).focus(); // put tab focus back
			}
			mfp.currItem = null;
			mfp.content = null;
			mfp.currTemplate = null;
			mfp.prevHeight = 0;

			_mfpTrigger(AFTER_CLOSE_EVENT);
		},

		updateSize: function (winHeight) {

			if (mfp.isIOS) {
				// fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
				var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
				var height = window.innerHeight * zoomLevel;
				mfp.wrap.css('height', height);
				mfp.wH = height;
			} else {
				mfp.wH = winHeight || _window.height();
			}
			// Fixes #84: popup incorrectly positioned with position:relative on body
			if (!mfp.fixedContentPos) {
				mfp.wrap.css('height', mfp.wH);
			}

			_mfpTrigger('Resize');
		},

		/**
   * Set content of popup based on current index
   */
		updateItemHTML: function () {
			var item = mfp.items[mfp.index];

			// Detach and perform modifications
			mfp.contentContainer.detach();

			if (mfp.content) mfp.content.detach();

			if (!item.parsed) {
				item = mfp.parseEl(mfp.index);
			}

			var type = item.type;

			_mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]);
			// BeforeChange event works like so:
			// _mfpOn('BeforeChange', function(e, prevType, newType) { });

			mfp.currItem = item;

			if (!mfp.currTemplate[type]) {
				var markup = mfp.st[type] ? mfp.st[type].markup : false;

				// allows to modify markup
				_mfpTrigger('FirstMarkupParse', markup);

				if (markup) {
					mfp.currTemplate[type] = $(markup);
				} else {
					// if there is no markup found we just define that template is parsed
					mfp.currTemplate[type] = true;
				}
			}

			if (_prevContentType && _prevContentType !== item.type) {
				mfp.container.removeClass('mfp-' + _prevContentType + '-holder');
			}

			var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
			mfp.appendContent(newContent, type);

			item.preloaded = true;

			_mfpTrigger(CHANGE_EVENT, item);
			_prevContentType = item.type;

			// Append container back after its content changed
			mfp.container.prepend(mfp.contentContainer);

			_mfpTrigger('AfterChange');
		},

		/**
   * Set HTML content of popup
   */
		appendContent: function (newContent, type) {
			mfp.content = newContent;

			if (newContent) {
				if (mfp.st.showCloseBtn && mfp.st.closeBtnInside && mfp.currTemplate[type] === true) {
					// if there is no markup, we just append close button element inside
					if (!mfp.content.find('.mfp-close').length) {
						mfp.content.append(_getCloseBtn());
					}
				} else {
					mfp.content = newContent;
				}
			} else {
				mfp.content = '';
			}

			_mfpTrigger(BEFORE_APPEND_EVENT);
			mfp.container.addClass('mfp-' + type + '-holder');

			mfp.contentContainer.append(mfp.content);
		},

		/**
   * Creates Magnific Popup data object based on given data
   * @param  {int} index Index of item to parse
   */
		parseEl: function (index) {
			var item = mfp.items[index],
			    type;

			if (item.tagName) {
				item = { el: $(item) };
			} else {
				type = item.type;
				item = { data: item, src: item.src };
			}

			if (item.el) {
				var types = mfp.types;

				// check for 'mfp-TYPE' class
				for (var i = 0; i < types.length; i++) {
					if (item.el.hasClass('mfp-' + types[i])) {
						type = types[i];
						break;
					}
				}

				item.src = item.el.attr('data-mfp-src');
				if (!item.src) {
					item.src = item.el.attr('href');
				}
			}

			item.type = type || mfp.st.type || 'inline';
			item.index = index;
			item.parsed = true;
			mfp.items[index] = item;
			_mfpTrigger('ElementParse', item);

			return mfp.items[index];
		},

		/**
   * Initializes single popup or a group of popups
   */
		addGroup: function (el, options) {
			var eHandler = function (e) {
				e.mfpEl = this;
				mfp._openClick(e, el, options);
			};

			if (!options) {
				options = {};
			}

			var eName = 'click.magnificPopup';
			options.mainEl = el;

			if (options.items) {
				options.isObj = true;
				el.off(eName).on(eName, eHandler);
			} else {
				options.isObj = false;
				if (options.delegate) {
					el.off(eName).on(eName, options.delegate, eHandler);
				} else {
					options.items = el;
					el.off(eName).on(eName, eHandler);
				}
			}
		},
		_openClick: function (e, el, options) {
			var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;

			if (!midClick && (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)) {
				return;
			}

			var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;

			if (disableOn) {
				if ($.isFunction(disableOn)) {
					if (!disableOn.call(mfp)) {
						return true;
					}
				} else {
					// else it's number
					if (_window.width() < disableOn) {
						return true;
					}
				}
			}

			if (e.type) {
				e.preventDefault();

				// This will prevent popup from closing if element is inside and popup is already opened
				if (mfp.isOpen) {
					e.stopPropagation();
				}
			}

			options.el = $(e.mfpEl);
			if (options.delegate) {
				options.items = el.find(options.delegate);
			}
			mfp.open(options);
		},

		/**
   * Updates text on preloader
   */
		updateStatus: function (status, text) {

			if (mfp.preloader) {
				if (_prevStatus !== status) {
					mfp.container.removeClass('mfp-s-' + _prevStatus);
				}

				if (!text && status === 'loading') {
					text = mfp.st.tLoading;
				}

				var data = {
					status: status,
					text: text
				};
				// allows to modify status
				_mfpTrigger('UpdateStatus', data);

				status = data.status;
				text = data.text;

				mfp.preloader.html(text);

				mfp.preloader.find('a').on('click', function (e) {
					e.stopImmediatePropagation();
				});

				mfp.container.addClass('mfp-s-' + status);
				_prevStatus = status;
			}
		},

		/*
  	"Private" helpers that aren't private at all
   */
		// Check to close popup or not
		// "target" is an element that was clicked
		_checkIfClose: function (target) {

			if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
				return;
			}

			var closeOnContent = mfp.st.closeOnContentClick;
			var closeOnBg = mfp.st.closeOnBgClick;

			if (closeOnContent && closeOnBg) {
				return true;
			} else {

				// We close the popup if click is on close button or on preloader. Or if there is no content.
				if (!mfp.content || $(target).hasClass('mfp-close') || mfp.preloader && target === mfp.preloader[0]) {
					return true;
				}

				// if click is outside the content
				if (target !== mfp.content[0] && !$.contains(mfp.content[0], target)) {
					if (closeOnBg) {
						// last check, if the clicked element is in DOM, (in case it's removed onclick)
						if ($.contains(document, target)) {
							return true;
						}
					}
				} else if (closeOnContent) {
					return true;
				}
			}
			return false;
		},
		_addClassToMFP: function (cName) {
			mfp.bgOverlay.addClass(cName);
			mfp.wrap.addClass(cName);
		},
		_removeClassFromMFP: function (cName) {
			this.bgOverlay.removeClass(cName);
			mfp.wrap.removeClass(cName);
		},
		_hasScrollBar: function (winHeight) {
			return (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height());
		},
		_setFocus: function () {
			(mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
		},
		_onFocusIn: function (e) {
			if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
				mfp._setFocus();
				return false;
			}
		},
		_parseMarkup: function (template, values, item) {
			var arr;
			if (item.data) {
				values = $.extend(item.data, values);
			}
			_mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);

			$.each(values, function (key, value) {
				if (value === undefined || value === false) {
					return true;
				}
				arr = key.split('_');
				if (arr.length > 1) {
					var el = template.find(EVENT_NS + '-' + arr[0]);

					if (el.length > 0) {
						var attr = arr[1];
						if (attr === 'replaceWith') {
							if (el[0] !== value[0]) {
								el.replaceWith(value);
							}
						} else if (attr === 'img') {
							if (el.is('img')) {
								el.attr('src', value);
							} else {
								el.replaceWith($('<img>').attr('src', value).attr('class', el.attr('class')));
							}
						} else {
							el.attr(arr[1], value);
						}
					}
				} else {
					template.find(EVENT_NS + '-' + key).html(value);
				}
			});
		},

		_getScrollbarSize: function () {
			// thx David
			if (mfp.scrollbarSize === undefined) {
				var scrollDiv = document.createElement("div");
				scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
				document.body.appendChild(scrollDiv);
				mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
				document.body.removeChild(scrollDiv);
			}
			return mfp.scrollbarSize;
		}

	}; /* MagnificPopup core prototype end */

	/**
  * Public static functions
  */
	$.magnificPopup = {
		instance: null,
		proto: MagnificPopup.prototype,
		modules: [],

		open: function (options, index) {
			_checkInstance();

			if (!options) {
				options = {};
			} else {
				options = $.extend(true, {}, options);
			}

			options.isObj = true;
			options.index = index || 0;
			return this.instance.open(options);
		},

		close: function () {
			return $.magnificPopup.instance && $.magnificPopup.instance.close();
		},

		registerModule: function (name, module) {
			if (module.options) {
				$.magnificPopup.defaults[name] = module.options;
			}
			$.extend(this.proto, module.proto);
			this.modules.push(name);
		},

		defaults: {

			// Info about options is in docs:
			// http://dimsemenov.com/plugins/magnific-popup/documentation.html#options

			disableOn: 0,

			key: null,

			midClick: false,

			mainClass: '',

			preloader: true,

			focus: '', // CSS selector of input to focus after popup is opened

			closeOnContentClick: false,

			closeOnBgClick: true,

			closeBtnInside: true,

			showCloseBtn: true,

			enableEscapeKey: true,

			modal: false,

			alignTop: false,

			removalDelay: 0,

			prependTo: null,

			fixedContentPos: 'auto',

			fixedBgPos: 'auto',

			overflowY: 'auto',

			closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',

			tClose: 'Close (Esc)',

			tLoading: 'Loading...',

			autoFocusLast: true

		}
	};

	$.fn.magnificPopup = function (options) {
		_checkInstance();

		var jqEl = $(this);

		// We call some API method of first param is a string
		if (typeof options === "string") {

			if (options === 'open') {
				var items,
				    itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,
				    index = parseInt(arguments[1], 10) || 0;

				if (itemOpts.items) {
					items = itemOpts.items[index];
				} else {
					items = jqEl;
					if (itemOpts.delegate) {
						items = items.find(itemOpts.delegate);
					}
					items = items.eq(index);
				}
				mfp._openClick({ mfpEl: items }, jqEl, itemOpts);
			} else {
				if (mfp.isOpen) mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
			}
		} else {
			// clone options obj
			options = $.extend(true, {}, options);

			/*
    * As Zepto doesn't support .data() method for objects
    * and it works only in normal browsers
    * we assign "options" object directly to the DOM element. FTW!
    */
			if (_isJQ) {
				jqEl.data('magnificPopup', options);
			} else {
				jqEl[0].magnificPopup = options;
			}

			mfp.addGroup(jqEl, options);
		}
		return jqEl;
	};

	/*>>core*/

	/*>>inline*/

	var INLINE_NS = 'inline',
	    _hiddenClass,
	    _inlinePlaceholder,
	    _lastInlineElement,
	    _putInlineElementsBack = function () {
		if (_lastInlineElement) {
			_inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();
			_lastInlineElement = null;
		}
	};

	$.magnificPopup.registerModule(INLINE_NS, {
		options: {
			hiddenClass: 'hide', // will be appended with `mfp-` prefix
			markup: '',
			tNotFound: 'Content not found'
		},
		proto: {

			initInline: function () {
				mfp.types.push(INLINE_NS);

				_mfpOn(CLOSE_EVENT + '.' + INLINE_NS, function () {
					_putInlineElementsBack();
				});
			},

			getInline: function (item, template) {

				_putInlineElementsBack();

				if (item.src) {
					var inlineSt = mfp.st.inline,
					    el = $(item.src);

					if (el.length) {

						// If target element has parent - we replace it with placeholder and put it back after popup is closed
						var parent = el[0].parentNode;
						if (parent && parent.tagName) {
							if (!_inlinePlaceholder) {
								_hiddenClass = inlineSt.hiddenClass;
								_inlinePlaceholder = _getEl(_hiddenClass);
								_hiddenClass = 'mfp-' + _hiddenClass;
							}
							// replace target inline element with placeholder
							_lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
						}

						mfp.updateStatus('ready');
					} else {
						mfp.updateStatus('error', inlineSt.tNotFound);
						el = $('<div>');
					}

					item.inlineElement = el;
					return el;
				}

				mfp.updateStatus('ready');
				mfp._parseMarkup(template, {}, item);
				return template;
			}
		}
	});

	/*>>inline*/

	/*>>ajax*/
	var AJAX_NS = 'ajax',
	    _ajaxCur,
	    _removeAjaxCursor = function () {
		if (_ajaxCur) {
			$(document.body).removeClass(_ajaxCur);
		}
	},
	    _destroyAjaxRequest = function () {
		_removeAjaxCursor();
		if (mfp.req) {
			mfp.req.abort();
		}
	};

	$.magnificPopup.registerModule(AJAX_NS, {

		options: {
			settings: null,
			cursor: 'mfp-ajax-cur',
			tError: '<a href="%url%">The content</a> could not be loaded.'
		},

		proto: {
			initAjax: function () {
				mfp.types.push(AJAX_NS);
				_ajaxCur = mfp.st.ajax.cursor;

				_mfpOn(CLOSE_EVENT + '.' + AJAX_NS, _destroyAjaxRequest);
				_mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);
			},
			getAjax: function (item) {

				if (_ajaxCur) {
					$(document.body).addClass(_ajaxCur);
				}

				mfp.updateStatus('loading');

				var opts = $.extend({
					url: item.src,
					success: function (data, textStatus, jqXHR) {
						var temp = {
							data: data,
							xhr: jqXHR
						};

						_mfpTrigger('ParseAjax', temp);

						mfp.appendContent($(temp.data), AJAX_NS);

						item.finished = true;

						_removeAjaxCursor();

						mfp._setFocus();

						setTimeout(function () {
							mfp.wrap.addClass(READY_CLASS);
						}, 16);

						mfp.updateStatus('ready');

						_mfpTrigger('AjaxContentAdded');
					},
					error: function () {
						_removeAjaxCursor();
						item.finished = item.loadError = true;
						mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));
					}
				}, mfp.st.ajax.settings);

				mfp.req = $.ajax(opts);

				return '';
			}
		}
	});

	/*>>ajax*/

	/*>>image*/
	var _imgInterval,
	    _getTitle = function (item) {
		if (item.data && item.data.title !== undefined) return item.data.title;

		var src = mfp.st.image.titleSrc;

		if (src) {
			if ($.isFunction(src)) {
				return src.call(mfp, item);
			} else if (item.el) {
				return item.el.attr(src) || '';
			}
		}
		return '';
	};

	$.magnificPopup.registerModule('image', {

		options: {
			markup: '<div class="mfp-figure">' + '<div class="mfp-close"></div>' + '<figure>' + '<div class="mfp-img"></div>' + '<figcaption>' + '<div class="mfp-bottom-bar">' + '<div class="mfp-title"></div>' + '<div class="mfp-counter"></div>' + '</div>' + '</figcaption>' + '</figure>' + '</div>',
			cursor: 'mfp-zoom-out-cur',
			titleSrc: 'title',
			verticalFit: true,
			tError: '<a href="%url%">The image</a> could not be loaded.'
		},

		proto: {
			initImage: function () {
				var imgSt = mfp.st.image,
				    ns = '.image';

				mfp.types.push('image');

				_mfpOn(OPEN_EVENT + ns, function () {
					if (mfp.currItem.type === 'image' && imgSt.cursor) {
						$(document.body).addClass(imgSt.cursor);
					}
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					if (imgSt.cursor) {
						$(document.body).removeClass(imgSt.cursor);
					}
					_window.off('resize' + EVENT_NS);
				});

				_mfpOn('Resize' + ns, mfp.resizeImage);
				if (mfp.isLowIE) {
					_mfpOn('AfterChange', mfp.resizeImage);
				}
			},
			resizeImage: function () {
				var item = mfp.currItem;
				if (!item || !item.img) return;

				if (mfp.st.image.verticalFit) {
					var decr = 0;
					// fix box-sizing in ie7/8
					if (mfp.isLowIE) {
						decr = parseInt(item.img.css('padding-top'), 10) + parseInt(item.img.css('padding-bottom'), 10);
					}
					item.img.css('max-height', mfp.wH - decr);
				}
			},
			_onImageHasSize: function (item) {
				if (item.img) {

					item.hasSize = true;

					if (_imgInterval) {
						clearInterval(_imgInterval);
					}

					item.isCheckingImgSize = false;

					_mfpTrigger('ImageHasSize', item);

					if (item.imgHidden) {
						if (mfp.content) mfp.content.removeClass('mfp-loading');

						item.imgHidden = false;
					}
				}
			},

			/**
    * Function that loops until the image has size to display elements that rely on it asap
    */
			findImageSize: function (item) {

				var counter = 0,
				    img = item.img[0],
				    mfpSetInterval = function (delay) {

					if (_imgInterval) {
						clearInterval(_imgInterval);
					}
					// decelerating interval that checks for size of an image
					_imgInterval = setInterval(function () {
						if (img.naturalWidth > 0) {
							mfp._onImageHasSize(item);
							return;
						}

						if (counter > 200) {
							clearInterval(_imgInterval);
						}

						counter++;
						if (counter === 3) {
							mfpSetInterval(10);
						} else if (counter === 40) {
							mfpSetInterval(50);
						} else if (counter === 100) {
							mfpSetInterval(500);
						}
					}, delay);
				};

				mfpSetInterval(1);
			},

			getImage: function (item, template) {

				var guard = 0,


				// image load complete handler
				onLoadComplete = function () {
					if (item) {
						if (item.img[0].complete) {
							item.img.off('.mfploader');

							if (item === mfp.currItem) {
								mfp._onImageHasSize(item);

								mfp.updateStatus('ready');
							}

							item.hasSize = true;
							item.loaded = true;

							_mfpTrigger('ImageLoadComplete');
						} else {
							// if image complete check fails 200 times (20 sec), we assume that there was an error.
							guard++;
							if (guard < 200) {
								setTimeout(onLoadComplete, 100);
							} else {
								onLoadError();
							}
						}
					}
				},


				// image error handler
				onLoadError = function () {
					if (item) {
						item.img.off('.mfploader');
						if (item === mfp.currItem) {
							mfp._onImageHasSize(item);
							mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
						}

						item.hasSize = true;
						item.loaded = true;
						item.loadError = true;
					}
				},
				    imgSt = mfp.st.image;

				var el = template.find('.mfp-img');
				if (el.length) {
					var img = document.createElement('img');
					img.className = 'mfp-img';
					if (item.el && item.el.find('img').length) {
						img.alt = item.el.find('img').attr('alt');
					}
					item.img = $(img).on('load.mfploader', onLoadComplete).on('error.mfploader', onLoadError);
					img.src = item.src;

					// without clone() "error" event is not firing when IMG is replaced by new IMG
					// TODO: find a way to avoid such cloning
					if (el.is('img')) {
						item.img = item.img.clone();
					}

					img = item.img[0];
					if (img.naturalWidth > 0) {
						item.hasSize = true;
					} else if (!img.width) {
						item.hasSize = false;
					}
				}

				mfp._parseMarkup(template, {
					title: _getTitle(item),
					img_replaceWith: item.img
				}, item);

				mfp.resizeImage();

				if (item.hasSize) {
					if (_imgInterval) clearInterval(_imgInterval);

					if (item.loadError) {
						template.addClass('mfp-loading');
						mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
					} else {
						template.removeClass('mfp-loading');
						mfp.updateStatus('ready');
					}
					return template;
				}

				mfp.updateStatus('loading');
				item.loading = true;

				if (!item.hasSize) {
					item.imgHidden = true;
					template.addClass('mfp-loading');
					mfp.findImageSize(item);
				}

				return template;
			}
		}
	});

	/*>>image*/

	/*>>zoom*/
	var hasMozTransform,
	    getHasMozTransform = function () {
		if (hasMozTransform === undefined) {
			hasMozTransform = document.createElement('p').style.MozTransform !== undefined;
		}
		return hasMozTransform;
	};

	$.magnificPopup.registerModule('zoom', {

		options: {
			enabled: false,
			easing: 'ease-in-out',
			duration: 300,
			opener: function (element) {
				return element.is('img') ? element : element.find('img');
			}
		},

		proto: {

			initZoom: function () {
				var zoomSt = mfp.st.zoom,
				    ns = '.zoom',
				    image;

				if (!zoomSt.enabled || !mfp.supportsTransition) {
					return;
				}

				var duration = zoomSt.duration,
				    getElToAnimate = function (image) {
					var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),
					    transition = 'all ' + zoomSt.duration / 1000 + 's ' + zoomSt.easing,
					    cssObj = {
						position: 'fixed',
						zIndex: 9999,
						left: 0,
						top: 0,
						'-webkit-backface-visibility': 'hidden'
					},
					    t = 'transition';

					cssObj['-webkit-' + t] = cssObj['-moz-' + t] = cssObj['-o-' + t] = cssObj[t] = transition;

					newImg.css(cssObj);
					return newImg;
				},
				    showMainContent = function () {
					mfp.content.css('visibility', 'visible');
				},
				    openTimeout,
				    animatedImg;

				_mfpOn('BuildControls' + ns, function () {
					if (mfp._allowZoom()) {

						clearTimeout(openTimeout);
						mfp.content.css('visibility', 'hidden');

						// Basically, all code below does is clones existing image, puts in on top of the current one and animated it

						image = mfp._getItemToZoom();

						if (!image) {
							showMainContent();
							return;
						}

						animatedImg = getElToAnimate(image);

						animatedImg.css(mfp._getOffset());

						mfp.wrap.append(animatedImg);

						openTimeout = setTimeout(function () {
							animatedImg.css(mfp._getOffset(true));
							openTimeout = setTimeout(function () {

								showMainContent();

								setTimeout(function () {
									animatedImg.remove();
									image = animatedImg = null;
									_mfpTrigger('ZoomAnimationEnded');
								}, 16); // avoid blink when switching images
							}, duration); // this timeout equals animation duration
						}, 16); // by adding this timeout we avoid short glitch at the beginning of animation


						// Lots of timeouts...
					}
				});
				_mfpOn(BEFORE_CLOSE_EVENT + ns, function () {
					if (mfp._allowZoom()) {

						clearTimeout(openTimeout);

						mfp.st.removalDelay = duration;

						if (!image) {
							image = mfp._getItemToZoom();
							if (!image) {
								return;
							}
							animatedImg = getElToAnimate(image);
						}

						animatedImg.css(mfp._getOffset(true));
						mfp.wrap.append(animatedImg);
						mfp.content.css('visibility', 'hidden');

						setTimeout(function () {
							animatedImg.css(mfp._getOffset());
						}, 16);
					}
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					if (mfp._allowZoom()) {
						showMainContent();
						if (animatedImg) {
							animatedImg.remove();
						}
						image = null;
					}
				});
			},

			_allowZoom: function () {
				return mfp.currItem.type === 'image';
			},

			_getItemToZoom: function () {
				if (mfp.currItem.hasSize) {
					return mfp.currItem.img;
				} else {
					return false;
				}
			},

			// Get element postion relative to viewport
			_getOffset: function (isLarge) {
				var el;
				if (isLarge) {
					el = mfp.currItem.img;
				} else {
					el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
				}

				var offset = el.offset();
				var paddingTop = parseInt(el.css('padding-top'), 10);
				var paddingBottom = parseInt(el.css('padding-bottom'), 10);
				offset.top -= $(window).scrollTop() - paddingTop;

				/*
    	Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.
    	 */
				var obj = {
					width: el.width(),
					// fix Zepto height+padding issue
					height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
				};

				// I hate to do this, but there is no another option
				if (getHasMozTransform()) {
					obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';
				} else {
					obj.left = offset.left;
					obj.top = offset.top;
				}
				return obj;
			}

		}
	});

	/*>>zoom*/

	/*>>iframe*/

	var IFRAME_NS = 'iframe',
	    _emptyPage = '//about:blank',
	    _fixIframeBugs = function (isShowing) {
		if (mfp.currTemplate[IFRAME_NS]) {
			var el = mfp.currTemplate[IFRAME_NS].find('iframe');
			if (el.length) {
				// reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
				if (!isShowing) {
					el[0].src = _emptyPage;
				}

				// IE8 black screen bug fix
				if (mfp.isIE8) {
					el.css('display', isShowing ? 'block' : 'none');
				}
			}
		}
	};

	$.magnificPopup.registerModule(IFRAME_NS, {

		options: {
			markup: '<div class="mfp-iframe-scaler">' + '<div class="mfp-close"></div>' + '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>' + '</div>',

			srcAction: 'iframe_src',

			// we don't care and support only one default type of URL by default
			patterns: {
				youtube: {
					index: 'youtube.com',
					id: 'v=',
					src: '//www.youtube.com/embed/%id%?autoplay=1'
				},
				vimeo: {
					index: 'vimeo.com/',
					id: '/',
					src: '//player.vimeo.com/video/%id%?autoplay=1'
				},
				gmaps: {
					index: '//maps.google.',
					src: '%id%&output=embed'
				}
			}
		},

		proto: {
			initIframe: function () {
				mfp.types.push(IFRAME_NS);

				_mfpOn('BeforeChange', function (e, prevType, newType) {
					if (prevType !== newType) {
						if (prevType === IFRAME_NS) {
							_fixIframeBugs(); // iframe if removed
						} else if (newType === IFRAME_NS) {
							_fixIframeBugs(true); // iframe is showing
						}
					} // else {
					// iframe source is switched, don't do anything
					//}
				});

				_mfpOn(CLOSE_EVENT + '.' + IFRAME_NS, function () {
					_fixIframeBugs();
				});
			},

			getIframe: function (item, template) {
				var embedSrc = item.src;
				var iframeSt = mfp.st.iframe;

				$.each(iframeSt.patterns, function () {
					if (embedSrc.indexOf(this.index) > -1) {
						if (this.id) {
							if (typeof this.id === 'string') {
								embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length);
							} else {
								embedSrc = this.id.call(this, embedSrc);
							}
						}
						embedSrc = this.src.replace('%id%', embedSrc);
						return false; // break;
					}
				});

				var dataObj = {};
				if (iframeSt.srcAction) {
					dataObj[iframeSt.srcAction] = embedSrc;
				}
				mfp._parseMarkup(template, dataObj, item);

				mfp.updateStatus('ready');

				return template;
			}
		}
	});

	/*>>iframe*/

	/*>>gallery*/
	/**
  * Get looped index depending on number of slides
  */
	var _getLoopedId = function (index) {
		var numSlides = mfp.items.length;
		if (index > numSlides - 1) {
			return index - numSlides;
		} else if (index < 0) {
			return numSlides + index;
		}
		return index;
	},
	    _replaceCurrTotal = function (text, curr, total) {
		return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
	};

	$.magnificPopup.registerModule('gallery', {

		options: {
			enabled: false,
			arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
			preload: [0, 2],
			navigateByImgClick: true,
			arrows: true,

			tPrev: 'Previous (Left arrow key)',
			tNext: 'Next (Right arrow key)',
			tCounter: '%curr% of %total%'
		},

		proto: {
			initGallery: function () {

				var gSt = mfp.st.gallery,
				    ns = '.mfp-gallery';

				mfp.direction = true; // true - next, false - prev

				if (!gSt || !gSt.enabled) return false;

				_wrapClasses += ' mfp-gallery';

				_mfpOn(OPEN_EVENT + ns, function () {

					if (gSt.navigateByImgClick) {
						mfp.wrap.on('click' + ns, '.mfp-img', function () {
							if (mfp.items.length > 1) {
								mfp.next();
								return false;
							}
						});
					}

					_document.on('keydown' + ns, function (e) {
						if (e.keyCode === 37) {
							mfp.prev();
						} else if (e.keyCode === 39) {
							mfp.next();
						}
					});
				});

				_mfpOn('UpdateStatus' + ns, function (e, data) {
					if (data.text) {
						data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);
					}
				});

				_mfpOn(MARKUP_PARSE_EVENT + ns, function (e, element, values, item) {
					var l = mfp.items.length;
					values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : '';
				});

				_mfpOn('BuildControls' + ns, function () {
					if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
						var markup = gSt.arrowMarkup,
						    arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, 'left')).addClass(PREVENT_CLOSE_CLASS),
						    arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, 'right')).addClass(PREVENT_CLOSE_CLASS);

						arrowLeft.click(function () {
							mfp.prev();
						});
						arrowRight.click(function () {
							mfp.next();
						});

						mfp.container.append(arrowLeft.add(arrowRight));
					}
				});

				_mfpOn(CHANGE_EVENT + ns, function () {
					if (mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);

					mfp._preloadTimeout = setTimeout(function () {
						mfp.preloadNearbyImages();
						mfp._preloadTimeout = null;
					}, 16);
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					_document.off(ns);
					mfp.wrap.off('click' + ns);
					mfp.arrowRight = mfp.arrowLeft = null;
				});
			},
			next: function () {
				mfp.direction = true;
				mfp.index = _getLoopedId(mfp.index + 1);
				mfp.updateItemHTML();
			},
			prev: function () {
				mfp.direction = false;
				mfp.index = _getLoopedId(mfp.index - 1);
				mfp.updateItemHTML();
			},
			goTo: function (newIndex) {
				mfp.direction = newIndex >= mfp.index;
				mfp.index = newIndex;
				mfp.updateItemHTML();
			},
			preloadNearbyImages: function () {
				var p = mfp.st.gallery.preload,
				    preloadBefore = Math.min(p[0], mfp.items.length),
				    preloadAfter = Math.min(p[1], mfp.items.length),
				    i;

				for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
					mfp._preloadItem(mfp.index + i);
				}
				for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
					mfp._preloadItem(mfp.index - i);
				}
			},
			_preloadItem: function (index) {
				index = _getLoopedId(index);

				if (mfp.items[index].preloaded) {
					return;
				}

				var item = mfp.items[index];
				if (!item.parsed) {
					item = mfp.parseEl(index);
				}

				_mfpTrigger('LazyLoad', item);

				if (item.type === 'image') {
					item.img = $('<img class="mfp-img" />').on('load.mfploader', function () {
						item.hasSize = true;
					}).on('error.mfploader', function () {
						item.hasSize = true;
						item.loadError = true;
						_mfpTrigger('LazyLoadError', item);
					}).attr('src', item.src);
				}

				item.preloaded = true;
			}
		}
	});

	/*>>gallery*/

	/*>>retina*/

	var RETINA_NS = 'retina';

	$.magnificPopup.registerModule(RETINA_NS, {
		options: {
			replaceSrc: function (item) {
				return item.src.replace(/\.\w+$/, function (m) {
					return '@2x' + m;
				});
			},
			ratio: 1 // Function or number.  Set to 1 to disable.
		},
		proto: {
			initRetina: function () {
				if (window.devicePixelRatio > 1) {

					var st = mfp.st.retina,
					    ratio = st.ratio;

					ratio = !isNaN(ratio) ? ratio : ratio();

					if (ratio > 1) {
						_mfpOn('ImageHasSize' + '.' + RETINA_NS, function (e, item) {
							item.img.css({
								'max-width': item.img[0].naturalWidth / ratio,
								'width': '100%'
							});
						});
						_mfpOn('ElementParse' + '.' + RETINA_NS, function (e, item) {
							item.src = st.replaceSrc(item, ratio);
						});
					}
				}
			}
		}
	});

	/*>>retina*/
	_checkInstance();
});
;
;// ==========================================================================
// Plyr
// plyr.js v2.0.10
// https://github.com/selz/plyr
// License: The MIT License (MIT)
// ==========================================================================
// Credits: http://paypal.github.io/accessible-html5-video-player/
// ==========================================================================
;(function(root,factory){'use strict';/*global define,module*/if(typeof module==='object'&&typeof module.exports==='object'){// Node, CommonJS-like
module.exports=factory(root,document);}else if(typeof define==='function'&&define.amd){// AMD
define([],function(){return factory(root,document);});}else{// Browser globals (root is window)
root.plyr=factory(root,document);}})(typeof window!=='undefined'?window:this,function(window,document){'use strict';// Globals
var fullscreen,scroll={x:0,y:0},// Default config
defaults={enabled:true,debug:false,autoplay:false,loop:false,seekTime:10,volume:10,volumeMin:0,volumeMax:10,volumeStep:1,duration:null,displayDuration:true,loadSprite:true,iconPrefix:'plyr',iconUrl:'https://cdn.plyr.io/2.0.10/plyr.svg',clickToPlay:true,hideControls:true,showPosterOnEnd:false,disableContextMenu:true,keyboardShorcuts:{focused:true,global:false},tooltips:{controls:false,seek:true},selectors:{html5:'video, audio',embed:'[data-type]',editable:'input, textarea, select, [contenteditable]',container:'.plyr',controls:{container:null,wrapper:'.plyr__controls'},labels:'[data-plyr]',buttons:{seek:'[data-plyr="seek"]',play:'[data-plyr="play"]',pause:'[data-plyr="pause"]',restart:'[data-plyr="restart"]',rewind:'[data-plyr="rewind"]',forward:'[data-plyr="fast-forward"]',mute:'[data-plyr="mute"]',captions:'[data-plyr="captions"]',fullscreen:'[data-plyr="fullscreen"]'},volume:{input:'[data-plyr="volume"]',display:'.plyr__volume--display'},progress:{container:'.plyr__progress',buffer:'.plyr__progress--buffer',played:'.plyr__progress--played'},captions:'.plyr__captions',currentTime:'.plyr__time--current',duration:'.plyr__time--duration'},classes:{setup:'plyr--setup',ready:'plyr--ready',videoWrapper:'plyr__video-wrapper',embedWrapper:'plyr__video-embed',type:'plyr--{0}',stopped:'plyr--stopped',playing:'plyr--playing',muted:'plyr--muted',loading:'plyr--loading',hover:'plyr--hover',tooltip:'plyr__tooltip',hidden:'plyr__sr-only',hideControls:'plyr--hide-controls',isIos:'plyr--is-ios',isTouch:'plyr--is-touch',captions:{enabled:'plyr--captions-enabled',active:'plyr--captions-active'},fullscreen:{enabled:'plyr--fullscreen-enabled',active:'plyr--fullscreen-active'},tabFocus:'tab-focus'},captions:{defaultActive:false},fullscreen:{enabled:true,fallback:true,allowAudio:false},storage:{enabled:true,key:'plyr'},controls:['play-large','play','progress','current-time','mute','volume','captions','fullscreen'],i18n:{restart:'Restart',rewind:'Rewind {seektime} secs',play:'Play',pause:'Pause',forward:'Forward {seektime} secs',played:'played',buffered:'buffered',currentTime:'Current time',duration:'Duration',volume:'Volume',toggleMute:'Toggle Mute',toggleCaptions:'Toggle Captions',toggleFullscreen:'Toggle Fullscreen',frameTitle:'Player for {title}'},types:{embed:['youtube','vimeo','soundcloud'],html5:['video','audio']},// URLs
urls:{vimeo:{api:'https://player.vimeo.com/api/player.js'},youtube:{api:'https://www.youtube.com/iframe_api'},soundcloud:{api:'https://w.soundcloud.com/player/api.js'}},// Custom control listeners
listeners:{seek:null,play:null,pause:null,restart:null,rewind:null,forward:null,mute:null,volume:null,captions:null,fullscreen:null},// Events to watch on HTML5 media elements
events:['ready','ended','progress','stalled','playing','waiting','canplay','canplaythrough','loadstart','loadeddata','loadedmetadata','timeupdate','volumechange','play','pause','error','seeking','seeked','emptied'],// Logging
logPrefix:'[Plyr]'};// Credits: http://paypal.github.io/accessible-html5-video-player/
// Unfortunately, due to mixed support, UA sniffing is required
function _browserSniff(){var ua=navigator.userAgent,name=navigator.appName,fullVersion=''+parseFloat(navigator.appVersion),majorVersion=parseInt(navigator.appVersion,10),nameOffset,verOffset,ix,isIE=false,isFirefox=false,isChrome=false,isSafari=false;if(navigator.appVersion.indexOf('Windows NT')!==-1&&navigator.appVersion.indexOf('rv:11')!==-1){// MSIE 11
isIE=true;name='IE';fullVersion='11';}else if((verOffset=ua.indexOf('MSIE'))!==-1){// MSIE
isIE=true;name='IE';fullVersion=ua.substring(verOffset+5);}else if((verOffset=ua.indexOf('Chrome'))!==-1){// Chrome
isChrome=true;name='Chrome';fullVersion=ua.substring(verOffset+7);}else if((verOffset=ua.indexOf('Safari'))!==-1){// Safari
isSafari=true;name='Safari';fullVersion=ua.substring(verOffset+7);if((verOffset=ua.indexOf('Version'))!==-1){fullVersion=ua.substring(verOffset+8);}}else if((verOffset=ua.indexOf('Firefox'))!==-1){// Firefox
isFirefox=true;name='Firefox';fullVersion=ua.substring(verOffset+8);}else if((nameOffset=ua.lastIndexOf(' ')+1)<(verOffset=ua.lastIndexOf('/'))){// In most other browsers, 'name/version' is at the end of userAgent
name=ua.substring(nameOffset,verOffset);fullVersion=ua.substring(verOffset+1);if(name.toLowerCase()===name.toUpperCase()){name=navigator.appName;}}// Trim the fullVersion string at semicolon/space if present
if((ix=fullVersion.indexOf(';'))!==-1){fullVersion=fullVersion.substring(0,ix);}if((ix=fullVersion.indexOf(' '))!==-1){fullVersion=fullVersion.substring(0,ix);}// Get major version
majorVersion=parseInt(''+fullVersion,10);if(isNaN(majorVersion)){fullVersion=''+parseFloat(navigator.appVersion);majorVersion=parseInt(navigator.appVersion,10);}// Return data
return{name:name,version:majorVersion,isIE:isIE,isFirefox:isFirefox,isChrome:isChrome,isSafari:isSafari,isIos:/(iPad|iPhone|iPod)/g.test(navigator.platform),isTouch:'ontouchstart'in document.documentElement};}// Check for mime type support against a player instance
// Credits: http://diveintohtml5.info/everything.html
// Related: http://www.leanbackplyr.com/test/h5mt.html
function _supportMime(plyr,mimeType){var media=plyr.media;if(plyr.type==='video'){// Check type
switch(mimeType){case'video/webm':return!!(media.canPlayType&&media.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/no/,''));case'video/mp4':return!!(media.canPlayType&&media.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"').replace(/no/,''));case'video/ogg':return!!(media.canPlayType&&media.canPlayType('video/ogg; codecs="theora"').replace(/no/,''));}}else if(plyr.type==='audio'){// Check type
switch(mimeType){case'audio/mpeg':return!!(media.canPlayType&&media.canPlayType('audio/mpeg;').replace(/no/,''));case'audio/ogg':return!!(media.canPlayType&&media.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/,''));case'audio/wav':return!!(media.canPlayType&&media.canPlayType('audio/wav; codecs="1"').replace(/no/,''));}}// If we got this far, we're stuffed
return false;}// Inject a script
function _injectScript(source){if(document.querySelectorAll('script[src="'+source+'"]').length){return;}var tag=document.createElement('script');tag.src=source;var firstScriptTag=document.getElementsByTagName('script')[0];firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);}// Element exists in an array
function _inArray(haystack,needle){return Array.prototype.indexOf&&haystack.indexOf(needle)!==-1;}// Replace all
function _replaceAll(string,find,replace){return string.replace(new RegExp(find.replace(/([.*+?\^=!:${}()|\[\]\/\\])/g,'\\$1'),'g'),replace);}// Wrap an element
function _wrap(elements,wrapper){// Convert `elements` to an array, if necessary.
if(!elements.length){elements=[elements];}// Loops backwards to prevent having to clone the wrapper on the
// first element (see `child` below).
for(var i=elements.length-1;i>=0;i--){var child=i>0?wrapper.cloneNode(true):wrapper;var element=elements[i];// Cache the current parent and sibling.
var parent=element.parentNode;var sibling=element.nextSibling;// Wrap the element (is automatically removed from its current
// parent).
child.appendChild(element);// If the element had a sibling, insert the wrapper before
// the sibling to maintain the HTML structure; otherwise, just
// append it to the parent.
if(sibling){parent.insertBefore(child,sibling);}else{parent.appendChild(child);}return child;}}// Unwrap an element
// http://plainjs.com/javascript/manipulation/unwrap-a-dom-element-35/
/*function _unwrap(wrapper) {
        // Get the element's parent node
        var parent = wrapper.parentNode;

        // Move all children out of the element
        while (wrapper.firstChild) {
            parent.insertBefore(wrapper.firstChild, wrapper);
        }

        // Remove the empty element
        parent.removeChild(wrapper);
    }*/// Remove an element
function _remove(element){if(!element){return;}element.parentNode.removeChild(element);}// Prepend child
function _prependChild(parent,element){parent.insertBefore(element,parent.firstChild);}// Set attributes
function _setAttributes(element,attributes){for(var key in attributes){element.setAttribute(key,_is.boolean(attributes[key])&&attributes[key]?'':attributes[key]);}}// Insert a HTML element
function _insertElement(type,parent,attributes){// Create a new <element>
var element=document.createElement(type);// Set all passed attributes
_setAttributes(element,attributes);// Inject the new element
_prependChild(parent,element);}// Get a classname from selector
function _getClassname(selector){return selector.replace('.','');}// Toggle class on an element
function _toggleClass(element,className,state){if(element){if(element.classList){element.classList[state?'add':'remove'](className);}else{var name=(' '+element.className+' ').replace(/\s+/g,' ').replace(' '+className+' ','');element.className=name+(state?' '+className:'');}}}// Has class name
function _hasClass(element,className){if(element){if(element.classList){return element.classList.contains(className);}else{return new RegExp('(\\s|^)'+className+'(\\s|$)').test(element.className);}}return false;}// Element matches selector
function _matches(element,selector){var p=Element.prototype;var f=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.msMatchesSelector||function(s){return[].indexOf.call(document.querySelectorAll(s),this)!==-1;};return f.call(element,selector);}// Bind along with custom handler
function _proxyListener(element,eventName,userListener,defaultListener,useCapture){_on(element,eventName,function(event){if(userListener){userListener.apply(element,[event]);}defaultListener.apply(element,[event]);},useCapture);}// Toggle event listener
function _toggleListener(element,events,callback,toggle,useCapture){var eventList=events.split(' ');// Whether the listener is a capturing listener or not
// Default to false
if(!_is.boolean(useCapture)){useCapture=false;}// If a nodelist is passed, call itself on each node
if(element instanceof NodeList){for(var x=0;x<element.length;x++){if(element[x]instanceof Node){_toggleListener(element[x],arguments[1],arguments[2],arguments[3]);}}return;}// If a single node is passed, bind the event listener
for(var i=0;i<eventList.length;i++){element[toggle?'addEventListener':'removeEventListener'](eventList[i],callback,useCapture);}}// Bind event
function _on(element,events,callback,useCapture){if(element){_toggleListener(element,events,callback,true,useCapture);}}// Unbind event
/*function _off(element, events, callback, useCapture) {
        if (element) {
            _toggleListener(element, events, callback, false, useCapture);
        }
    }*/// Trigger event
function _event(element,type,bubbles,properties){// Bail if no element
if(!element||!type){return;}// Default bubbles to false
if(!_is.boolean(bubbles)){bubbles=false;}// Create and dispatch the event
var event=new CustomEvent(type,{bubbles:bubbles,detail:properties});// Dispatch the event
element.dispatchEvent(event);}// Toggle aria-pressed state on a toggle button
// http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles
function _toggleState(target,state){// Bail if no target
if(!target){return;}// Get state
state=_is.boolean(state)?state:!target.getAttribute('aria-pressed');// Set the attribute on target
target.setAttribute('aria-pressed',state);return state;}// Get percentage
function _getPercentage(current,max){if(current===0||max===0||isNaN(current)||isNaN(max)){return 0;}return(current/max*100).toFixed(2);}// Deep extend/merge destination object with N more objects
// http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/
// Removed call to arguments.callee (used explicit function name instead)
function _extend(){// Get arguments
var objects=arguments;// Bail if nothing to merge
if(!objects.length){return;}// Return first if specified but nothing to merge
if(objects.length===1){return objects[0];}// First object is the destination
var destination=Array.prototype.shift.call(objects),length=objects.length;// Loop through all objects to merge
for(var i=0;i<length;i++){var source=objects[i];for(var property in source){if(source[property]&&source[property].constructor&&source[property].constructor===Object){destination[property]=destination[property]||{};_extend(destination[property],source[property]);}else{destination[property]=source[property];}}}return destination;}// Check variable types
var _is={object:function(input){return input!==null&&typeof input==='object';},array:function(input){return input!==null&&typeof input==='object'&&input.constructor===Array;},number:function(input){return input!==null&&(typeof input==='number'&&!isNaN(input-0)||typeof input==='object'&&input.constructor===Number);},string:function(input){return input!==null&&(typeof input==='string'||typeof input==='object'&&input.constructor===String);},boolean:function(input){return input!==null&&typeof input==='boolean';},nodeList:function(input){return input!==null&&input instanceof NodeList;},htmlElement:function(input){return input!==null&&input instanceof HTMLElement;},function:function(input){return input!==null&&typeof input==='function';},undefined:function(input){return input!==null&&typeof input==='undefined';}};// Parse YouTube ID from url
function _parseYouTubeId(url){var regex=/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;return url.match(regex)?RegExp.$2:url;}// Parse Vimeo ID from url
function _parseVimeoId(url){var regex=/^.*(vimeo.com\/|video\/)(\d+).*/;return url.match(regex)?RegExp.$2:url;}// Fullscreen API
function _fullscreen(){var fullscreen={supportsFullScreen:false,isFullScreen:function(){return false;},requestFullScreen:function(){},cancelFullScreen:function(){},fullScreenEventName:'',element:null,prefix:''},browserPrefixes='webkit o moz ms khtml'.split(' ');// Check for native support
if(!_is.undefined(document.cancelFullScreen)){fullscreen.supportsFullScreen=true;}else{// Check for fullscreen support by vendor prefix
for(var i=0,il=browserPrefixes.length;i<il;i++){fullscreen.prefix=browserPrefixes[i];if(!_is.undefined(document[fullscreen.prefix+'CancelFullScreen'])){fullscreen.supportsFullScreen=true;break;}else if(!_is.undefined(document.msExitFullscreen)&&document.msFullscreenEnabled){// Special case for MS (when isn't it?)
fullscreen.prefix='ms';fullscreen.supportsFullScreen=true;break;}}}// Update methods to do something useful
if(fullscreen.supportsFullScreen){// Yet again Microsoft awesomeness,
// Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes
fullscreen.fullScreenEventName=fullscreen.prefix==='ms'?'MSFullscreenChange':fullscreen.prefix+'fullscreenchange';fullscreen.isFullScreen=function(element){if(_is.undefined(element)){element=document.body;}switch(this.prefix){case'':return document.fullscreenElement===element;case'moz':return document.mozFullScreenElement===element;default:return document[this.prefix+'FullscreenElement']===element;}};fullscreen.requestFullScreen=function(element){if(_is.undefined(element)){element=document.body;}return this.prefix===''?element.requestFullScreen():element[this.prefix+(this.prefix==='ms'?'RequestFullscreen':'RequestFullScreen')]();};fullscreen.cancelFullScreen=function(){return this.prefix===''?document.cancelFullScreen():document[this.prefix+(this.prefix==='ms'?'ExitFullscreen':'CancelFullScreen')]();};fullscreen.element=function(){return this.prefix===''?document.fullscreenElement:document[this.prefix+'FullscreenElement'];};}return fullscreen;}// Local storage
var _storage={supported:function(){if(!('localStorage'in window)){return false;}// Try to use it (it might be disabled, e.g. user is in private/porn mode)
// see: https://github.com/Selz/plyr/issues/131
try{// Add test item
window.localStorage.setItem('___test','OK');// Get the test item
var result=window.localStorage.getItem('___test');// Clean up
window.localStorage.removeItem('___test');// Check if value matches
return result==='OK';}catch(e){return false;}return false;}()};// Player instance
function Plyr(media,config){var plyr=this,timers={},api;// Set media
plyr.media=media;var original=media.cloneNode(true);// Trigger events, with plyr instance passed
function _triggerEvent(element,type,bubbles,properties){_event(element,type,bubbles,_extend({},properties,{plyr:api}));}// Debugging
function _console(type,args){if(config.debug&&window.console){args=Array.prototype.slice.call(args);if(_is.string(config.logPrefix)&&config.logPrefix.length){args.unshift(config.logPrefix);}console[type].apply(console,args);}}var _log=function(){_console('log',arguments);},_warn=function(){_console('warn',arguments);};// Log config options
_log('Config',config);// Get icon URL
function _getIconUrl(){return{url:config.iconUrl,absolute:config.iconUrl.indexOf("http")===0||plyr.browser.isIE};}// Build the default HTML
function _buildControls(){// Create html array
var html=[],iconUrl=_getIconUrl(),iconPath=(!iconUrl.absolute?iconUrl.url:'')+'#'+config.iconPrefix;// Larger overlaid play button
if(_inArray(config.controls,'play-large')){html.push('<button type="button" data-plyr="play" class="plyr__play-large">','<svg><use xlink:href="'+iconPath+'-play" /></svg>','<span class="plyr__sr-only">'+config.i18n.play+'</span>','</button>');}html.push('<div class="plyr__controls">');// Restart button
if(_inArray(config.controls,'restart')){html.push('<button type="button" data-plyr="restart">','<svg><use xlink:href="'+iconPath+'-restart" /></svg>','<span class="plyr__sr-only">'+config.i18n.restart+'</span>','</button>');}// Rewind button
if(_inArray(config.controls,'rewind')){html.push('<button type="button" data-plyr="rewind">','<svg><use xlink:href="'+iconPath+'-rewind" /></svg>','<span class="plyr__sr-only">'+config.i18n.rewind+'</span>','</button>');}// Play Pause button
// TODO: This should be a toggle button really?
if(_inArray(config.controls,'play')){html.push('<button type="button" data-plyr="play">','<svg><use xlink:href="'+iconPath+'-play" /></svg>','<span class="plyr__sr-only">'+config.i18n.play+'</span>','</button>','<button type="button" data-plyr="pause">','<svg><use xlink:href="'+iconPath+'-pause" /></svg>','<span class="plyr__sr-only">'+config.i18n.pause+'</span>','</button>');}// Fast forward button
if(_inArray(config.controls,'fast-forward')){html.push('<button type="button" data-plyr="fast-forward">','<svg><use xlink:href="'+iconPath+'-fast-forward" /></svg>','<span class="plyr__sr-only">'+config.i18n.forward+'</span>','</button>');}// Progress
if(_inArray(config.controls,'progress')){// Create progress
html.push('<span class="plyr__progress">','<label for="seek{id}" class="plyr__sr-only">Seek</label>','<input id="seek{id}" class="plyr__progress--seek" type="range" min="0" max="100" step="0.1" value="0" data-plyr="seek">','<progress class="plyr__progress--played" max="100" value="0" role="presentation"></progress>','<progress class="plyr__progress--buffer" max="100" value="0">','<span>0</span>% '+config.i18n.buffered,'</progress>');// Seek tooltip
if(config.tooltips.seek){html.push('<span class="plyr__tooltip">00:00</span>');}// Close
html.push('</span>');}// Media current time display
if(_inArray(config.controls,'current-time')){html.push('<span class="plyr__time">','<span class="plyr__sr-only">'+config.i18n.currentTime+'</span>','<span class="plyr__time--current">00:00</span>','</span>');}// Media duration display
if(_inArray(config.controls,'duration')){html.push('<span class="plyr__time">','<span class="plyr__sr-only">'+config.i18n.duration+'</span>','<span class="plyr__time--duration">00:00</span>','</span>');}// Toggle mute button
if(_inArray(config.controls,'mute')){html.push('<button type="button" data-plyr="mute">','<svg class="icon--muted"><use xlink:href="'+iconPath+'-muted" /></svg>','<svg><use xlink:href="'+iconPath+'-volume" /></svg>','<span class="plyr__sr-only">'+config.i18n.toggleMute+'</span>','</button>');}// Volume range control
if(_inArray(config.controls,'volume')){html.push('<span class="plyr__volume">','<label for="volume{id}" class="plyr__sr-only">'+config.i18n.volume+'</label>','<input id="volume{id}" class="plyr__volume--input" type="range" min="'+config.volumeMin+'" max="'+config.volumeMax+'" value="'+config.volume+'" data-plyr="volume">','<progress class="plyr__volume--display" max="'+config.volumeMax+'" value="'+config.volumeMin+'" role="presentation"></progress>','</span>');}// Toggle captions button
if(_inArray(config.controls,'captions')){html.push('<button type="button" data-plyr="captions">','<svg class="icon--captions-on"><use xlink:href="'+iconPath+'-captions-on" /></svg>','<svg><use xlink:href="'+iconPath+'-captions-off" /></svg>','<span class="plyr__sr-only">'+config.i18n.toggleCaptions+'</span>','</button>');}// Toggle fullscreen button
if(_inArray(config.controls,'fullscreen')){html.push('<button type="button" data-plyr="fullscreen">','<svg class="icon--exit-fullscreen"><use xlink:href="'+iconPath+'-exit-fullscreen" /></svg>','<svg><use xlink:href="'+iconPath+'-enter-fullscreen" /></svg>','<span class="plyr__sr-only">'+config.i18n.toggleFullscreen+'</span>','</button>');}// Close everything
html.push('</div>');return html.join('');}// Setup fullscreen
function _setupFullscreen(){if(!plyr.supported.full){return;}if((plyr.type!=='audio'||config.fullscreen.allowAudio)&&config.fullscreen.enabled){// Check for native support
var nativeSupport=fullscreen.supportsFullScreen;if(nativeSupport||config.fullscreen.fallback&&!_inFrame()){_log((nativeSupport?'Native':'Fallback')+' fullscreen enabled');// Add styling hook
_toggleClass(plyr.container,config.classes.fullscreen.enabled,true);}else{_log('Fullscreen not supported and fallback disabled');}// Toggle state
if(plyr.buttons&&plyr.buttons.fullscreen){_toggleState(plyr.buttons.fullscreen,false);}// Setup focus trap
_focusTrap();}}// Setup captions
function _setupCaptions(){// Bail if not HTML5 video
if(plyr.type!=='video'){return;}// Inject the container
if(!_getElement(config.selectors.captions)){plyr.videoContainer.insertAdjacentHTML('afterbegin','<div class="'+_getClassname(config.selectors.captions)+'"></div>');}// Determine if HTML5 textTracks is supported
plyr.usingTextTracks=false;if(plyr.media.textTracks){plyr.usingTextTracks=true;}// Get URL of caption file if exists
var captionSrc='',kind,children=plyr.media.childNodes;for(var i=0;i<children.length;i++){if(children[i].nodeName.toLowerCase()==='track'){kind=children[i].kind;if(kind==='captions'||kind==='subtitles'){captionSrc=children[i].getAttribute('src');}}}// Record if caption file exists or not
plyr.captionExists=true;if(captionSrc===''){plyr.captionExists=false;_log('No caption track found');}else{_log('Caption track found; URI: '+captionSrc);}// If no caption file exists, hide container for caption text
if(!plyr.captionExists){_toggleClass(plyr.container,config.classes.captions.enabled);}else{// Turn off native caption rendering to avoid double captions
// This doesn't seem to work in Safari 7+, so the <track> elements are removed from the dom below
var tracks=plyr.media.textTracks;for(var x=0;x<tracks.length;x++){tracks[x].mode='hidden';}// Enable UI
_showCaptions(plyr);// Disable unsupported browsers than report false positive
// Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1033144
if(plyr.browser.isIE&&plyr.browser.version>=10||plyr.browser.isFirefox&&plyr.browser.version>=31){// Debugging
_log('Detected browser with known TextTrack issues - using manual fallback');// Set to false so skips to 'manual' captioning
plyr.usingTextTracks=false;}// Rendering caption tracks
// Native support required - http://caniuse.com/webvtt
if(plyr.usingTextTracks){_log('TextTracks supported');for(var y=0;y<tracks.length;y++){var track=tracks[y];if(track.kind==='captions'||track.kind==='subtitles'){_on(track,'cuechange',function(){// Display a cue, if there is one
if(this.activeCues[0]&&'text'in this.activeCues[0]){_setCaption(this.activeCues[0].getCueAsHTML());}else{_setCaption();}});}}}else{// Caption tracks not natively supported
_log('TextTracks not supported so rendering captions manually');// Render captions from array at appropriate time
plyr.currentCaption='';plyr.captions=[];if(captionSrc!==''){// Create XMLHttpRequest Object
var xhr=new XMLHttpRequest();xhr.onreadystatechange=function(){if(xhr.readyState===4){if(xhr.status===200){var captions=[],caption,req=xhr.responseText;//According to webvtt spec, line terminator consists of one of the following
// CRLF (U+000D U+000A), LF (U+000A) or CR (U+000D)
var lineSeparator='\r\n';if(req.indexOf(lineSeparator+lineSeparator)===-1){if(req.indexOf('\r\r')!==-1){lineSeparator='\r';}else{lineSeparator='\n';}}captions=req.split(lineSeparator+lineSeparator);for(var r=0;r<captions.length;r++){caption=captions[r];plyr.captions[r]=[];// Get the parts of the captions
var parts=caption.split(lineSeparator),index=0;// Incase caption numbers are added
if(parts[index].indexOf(":")===-1){index=1;}plyr.captions[r]=[parts[index],parts[index+1]];}// Remove first element ('VTT')
plyr.captions.shift();_log('Successfully loaded the caption file via AJAX');}else{_warn(config.logPrefix+'There was a problem loading the caption file via AJAX');}}};xhr.open('get',captionSrc,true);xhr.send();}}}}// Set the current caption
function _setCaption(caption){/* jshint unused:false */var container=_getElement(config.selectors.captions),content=document.createElement('span');// Empty the container
container.innerHTML='';// Default to empty
if(_is.undefined(caption)){caption='';}// Set the span content
if(_is.string(caption)){content.innerHTML=caption.trim();}else{content.appendChild(caption);}// Set new caption text
container.appendChild(content);// Force redraw (for Safari)
var redraw=container.offsetHeight;}// Captions functions
// Seek the manual caption time and update UI
function _seekManualCaptions(time){// Utilities for caption time codes
function _timecodeCommon(tc,pos){var tcpair=[];tcpair=tc.split(' --> ');for(var i=0;i<tcpair.length;i++){// WebVTT allows for extra meta data after the timestamp line
// So get rid of this if it exists
tcpair[i]=tcpair[i].replace(/(\d+:\d+:\d+\.\d+).*/,"$1");}return _subTcSecs(tcpair[pos]);}function _timecodeMin(tc){return _timecodeCommon(tc,0);}function _timecodeMax(tc){return _timecodeCommon(tc,1);}function _subTcSecs(tc){if(tc===null||tc===undefined){return 0;}else{var tc1=[],tc2=[],seconds;tc1=tc.split(',');tc2=tc1[0].split(':');seconds=Math.floor(tc2[0]*60*60)+Math.floor(tc2[1]*60)+Math.floor(tc2[2]);return seconds;}}// If it's not video, or we're using textTracks, bail.
if(plyr.usingTextTracks||plyr.type!=='video'||!plyr.supported.full){return;}// Reset subcount
plyr.subcount=0;// Check time is a number, if not use currentTime
// IE has a bug where currentTime doesn't go to 0
// https://twitter.com/Sam_Potts/status/573715746506731521
time=_is.number(time)?time:plyr.media.currentTime;// If there's no subs available, bail
if(!plyr.captions[plyr.subcount]){return;}while(_timecodeMax(plyr.captions[plyr.subcount][0])<time.toFixed(1)){plyr.subcount++;if(plyr.subcount>plyr.captions.length-1){plyr.subcount=plyr.captions.length-1;break;}}// Check if the next caption is in the current time range
if(plyr.media.currentTime.toFixed(1)>=_timecodeMin(plyr.captions[plyr.subcount][0])&&plyr.media.currentTime.toFixed(1)<=_timecodeMax(plyr.captions[plyr.subcount][0])){plyr.currentCaption=plyr.captions[plyr.subcount][1];// Render the caption
_setCaption(plyr.currentCaption);}else{_setCaption();}}// Display captions container and button (for initialization)
function _showCaptions(){// If there's no caption toggle, bail
if(!plyr.buttons.captions){return;}_toggleClass(plyr.container,config.classes.captions.enabled,true);// Try to load the value from storage
var active=plyr.storage.captionsEnabled;// Otherwise fall back to the default config
if(!_is.boolean(active)){active=config.captions.defaultActive;}if(active){_toggleClass(plyr.container,config.classes.captions.active,true);_toggleState(plyr.buttons.captions,true);}}// Find all elements
function _getElements(selector){return plyr.container.querySelectorAll(selector);}// Find a single element
function _getElement(selector){return _getElements(selector)[0];}// Determine if we're in an iframe
function _inFrame(){try{return window.self!==window.top;}catch(e){return true;}}// Trap focus inside container
function _focusTrap(){var tabbables=_getElements('input:not([disabled]), button:not([disabled])'),first=tabbables[0],last=tabbables[tabbables.length-1];function _checkFocus(event){// If it is TAB
if(event.which===9&&plyr.isFullscreen){if(event.target===last&&!event.shiftKey){// Move focus to first element that can be tabbed if Shift isn't used
event.preventDefault();first.focus();}else if(event.target===first&&event.shiftKey){// Move focus to last element that can be tabbed if Shift is used
event.preventDefault();last.focus();}}}// Bind the handler
_on(plyr.container,'keydown',_checkFocus);}// Add elements to HTML5 media (source, tracks, etc)
function _insertChildElements(type,attributes){if(_is.string(attributes)){_insertElement(type,plyr.media,{src:attributes});}else if(attributes.constructor===Array){for(var i=attributes.length-1;i>=0;i--){_insertElement(type,plyr.media,attributes[i]);}}}// Insert controls
function _injectControls(){// Sprite
if(config.loadSprite){var iconUrl=_getIconUrl();// Only load external sprite using AJAX
if(iconUrl.absolute){_log('AJAX loading absolute SVG sprite'+(plyr.browser.isIE?' (due to IE)':''));loadSprite(iconUrl.url,"sprite-plyr");}else{_log('Sprite will be used as external resource directly');}}// Make a copy of the html
var html=config.html;// Insert custom video controls
_log('Injecting custom controls');// If no controls are specified, create default
if(!html){html=_buildControls();}// Replace seek time instances
html=_replaceAll(html,'{seektime}',config.seekTime);// Replace all id references with random numbers
html=_replaceAll(html,'{id}',Math.floor(Math.random()*10000));// Controls container
var target;// Inject to custom location
if(_is.string(config.selectors.controls.container)){target=document.querySelector(config.selectors.controls.container);}// Inject into the container by default
if(!_is.htmlElement(target)){target=plyr.container;}// Inject controls HTML
target.insertAdjacentHTML('beforeend',html);// Setup tooltips
if(config.tooltips.controls){var labels=_getElements([config.selectors.controls.wrapper,' ',config.selectors.labels,' .',config.classes.hidden].join(''));for(var i=labels.length-1;i>=0;i--){var label=labels[i];_toggleClass(label,config.classes.hidden,false);_toggleClass(label,config.classes.tooltip,true);}}}// Find the UI controls and store references
function _findElements(){try{plyr.controls=_getElement(config.selectors.controls.wrapper);// Buttons
plyr.buttons={};plyr.buttons.seek=_getElement(config.selectors.buttons.seek);plyr.buttons.play=_getElements(config.selectors.buttons.play);plyr.buttons.pause=_getElement(config.selectors.buttons.pause);plyr.buttons.restart=_getElement(config.selectors.buttons.restart);plyr.buttons.rewind=_getElement(config.selectors.buttons.rewind);plyr.buttons.forward=_getElement(config.selectors.buttons.forward);plyr.buttons.fullscreen=_getElement(config.selectors.buttons.fullscreen);// Inputs
plyr.buttons.mute=_getElement(config.selectors.buttons.mute);plyr.buttons.captions=_getElement(config.selectors.buttons.captions);// Progress
plyr.progress={};plyr.progress.container=_getElement(config.selectors.progress.container);// Progress - Buffering
plyr.progress.buffer={};plyr.progress.buffer.bar=_getElement(config.selectors.progress.buffer);plyr.progress.buffer.text=plyr.progress.buffer.bar&&plyr.progress.buffer.bar.getElementsByTagName('span')[0];// Progress - Played
plyr.progress.played=_getElement(config.selectors.progress.played);// Seek tooltip
plyr.progress.tooltip=plyr.progress.container&&plyr.progress.container.querySelector('.'+config.classes.tooltip);// Volume
plyr.volume={};plyr.volume.input=_getElement(config.selectors.volume.input);plyr.volume.display=_getElement(config.selectors.volume.display);// Timing
plyr.duration=_getElement(config.selectors.duration);plyr.currentTime=_getElement(config.selectors.currentTime);plyr.seekTime=_getElements(config.selectors.seekTime);return true;}catch(e){_warn('It looks like there is a problem with your controls HTML');// Restore native video controls
_toggleNativeControls(true);return false;}}// Toggle style hook
function _toggleStyleHook(){_toggleClass(plyr.container,config.selectors.container.replace('.',''),plyr.supported.full);}// Toggle native controls
function _toggleNativeControls(toggle){if(toggle&&_inArray(config.types.html5,plyr.type)){plyr.media.setAttribute('controls','');}else{plyr.media.removeAttribute('controls');}}// Setup aria attribute for play and iframe title
function _setTitle(iframe){// Find the current text
var label=config.i18n.play;// If there's a media title set, use that for the label
if(_is.string(config.title)&&config.title.length){label+=', '+config.title;// Set container label
plyr.container.setAttribute('aria-label',config.title);}// If there's a play button, set label
if(plyr.supported.full&&plyr.buttons.play){for(var i=plyr.buttons.play.length-1;i>=0;i--){plyr.buttons.play[i].setAttribute('aria-label',label);}}// Set iframe title
// https://github.com/Selz/plyr/issues/124
if(_is.htmlElement(iframe)){iframe.setAttribute('title',config.i18n.frameTitle.replace('{title}',config.title));}}// Setup localStorage
function _setupStorage(){var value=null;plyr.storage={};// Bail if we don't have localStorage support or it's disabled
if(!_storage.supported||!config.storage.enabled){return;}// Clean up old volume
// https://github.com/Selz/plyr/issues/171
window.localStorage.removeItem('plyr-volume');// load value from the current key
value=window.localStorage.getItem(config.storage.key);if(!value){// Key wasn't set (or had been cleared), move along
return;}else if(/^\d+(\.\d+)?$/.test(value)){// If value is a number, it's probably volume from an older
// version of plyr. See: https://github.com/Selz/plyr/pull/313
// Update the key to be JSON
_updateStorage({volume:parseFloat(value)});}else{// Assume it's JSON from this or a later version of plyr
plyr.storage=JSON.parse(value);}}// Save a value back to local storage
function _updateStorage(value){// Bail if we don't have localStorage support or it's disabled
if(!_storage.supported||!config.storage.enabled){return;}// Update the working copy of the values
_extend(plyr.storage,value);// Update storage
window.localStorage.setItem(config.storage.key,JSON.stringify(plyr.storage));}// Setup media
function _setupMedia(){// If there's no media, bail
if(!plyr.media){_warn('No media element found!');return;}if(plyr.supported.full){// Add type class
_toggleClass(plyr.container,config.classes.type.replace('{0}',plyr.type),true);// Add video class for embeds
// This will require changes if audio embeds are added
if(_inArray(config.types.embed,plyr.type)){_toggleClass(plyr.container,config.classes.type.replace('{0}','video'),true);}// If there's no autoplay attribute, assume the video is stopped and add state class
_toggleClass(plyr.container,config.classes.stopped,config.autoplay);// Add iOS class
_toggleClass(plyr.ontainer,config.classes.isIos,plyr.browser.isIos);// Add touch class
_toggleClass(plyr.container,config.classes.isTouch,plyr.browser.isTouch);// Inject the player wrapper
if(plyr.type==='video'){// Create the wrapper div
var wrapper=document.createElement('div');wrapper.setAttribute('class',config.classes.videoWrapper);// Wrap the video in a container
_wrap(plyr.media,wrapper);// Cache the container
plyr.videoContainer=wrapper;}}// Embeds
if(_inArray(config.types.embed,plyr.type)){_setupEmbed();}}// Setup YouTube/Vimeo
function _setupEmbed(){var container=document.createElement('div'),mediaId,id=plyr.type+'-'+Math.floor(Math.random()*10000);// Parse IDs from URLs if supplied
switch(plyr.type){case'youtube':mediaId=_parseYouTubeId(plyr.embedId);break;case'vimeo':mediaId=_parseVimeoId(plyr.embedId);break;default:mediaId=plyr.embedId;}// Remove old containers
var containers=_getElements('[id^="'+plyr.type+'-"]');for(var i=containers.length-1;i>=0;i--){_remove(containers[i]);}// Add embed class for responsive
_toggleClass(plyr.media,config.classes.videoWrapper,true);_toggleClass(plyr.media,config.classes.embedWrapper,true);if(plyr.type==='youtube'){// Create the YouTube container
plyr.media.appendChild(container);// Set ID
container.setAttribute('id',id);// Setup API
if(_is.object(window.YT)){_youTubeReady(mediaId,container);}else{// Load the API
_injectScript(config.urls.youtube.api);// Setup callback for the API
window.onYouTubeReadyCallbacks=window.onYouTubeReadyCallbacks||[];// Add to queue
window.onYouTubeReadyCallbacks.push(function(){_youTubeReady(mediaId,container);});// Set callback to process queue
window.onYouTubeIframeAPIReady=function(){window.onYouTubeReadyCallbacks.forEach(function(callback){callback();});};}}else if(plyr.type==='vimeo'){// Vimeo needs an extra div to hide controls on desktop (which has full support)
if(plyr.supported.full){plyr.media.appendChild(container);}else{container=plyr.media;}// Set ID
container.setAttribute('id',id);// Load the API if not already
if(!_is.object(window.Vimeo)){_injectScript(config.urls.vimeo.api);// Wait for fragaloop load
var vimeoTimer=window.setInterval(function(){if(_is.object(window.Vimeo)){window.clearInterval(vimeoTimer);_vimeoReady(mediaId,container);}},50);}else{_vimeoReady(mediaId,container);}}else if(plyr.type==='soundcloud'){// TODO: Currently unsupported and undocumented
// Inject the iframe
var soundCloud=document.createElement('iframe');// Watch for iframe load
soundCloud.loaded=false;_on(soundCloud,'load',function(){soundCloud.loaded=true;});_setAttributes(soundCloud,{'src':'https://w.soundcloud.com/player/?url=https://api.soundcloud.com/tracks/'+mediaId,'id':id});container.appendChild(soundCloud);plyr.media.appendChild(container);// Load the API if not already
if(!window.SC){_injectScript(config.urls.soundcloud.api);}// Wait for SC load
var soundCloudTimer=window.setInterval(function(){if(window.SC&&soundCloud.loaded){window.clearInterval(soundCloudTimer);_soundcloudReady.call(soundCloud);}},50);}}// When embeds are ready
function _embedReady(){// Setup the UI and call ready if full support
if(plyr.supported.full){_setupInterface();_ready();}// Set title
_setTitle(_getElement('iframe'));}// Handle YouTube API ready
function _youTubeReady(videoId,container){// Setup instance
// https://developers.google.com/youtube/iframe_api_reference
plyr.embed=new window.YT.Player(container.id,{videoId:videoId,playerVars:{autoplay:config.autoplay?1:0,controls:plyr.supported.full?0:1,rel:0,showinfo:0,iv_load_policy:3,cc_load_policy:config.captions.defaultActive?1:0,cc_lang_pref:'en',wmode:'transparent',modestbranding:1,disablekb:1,origin:'*'// https://code.google.com/p/gdata-issues/issues/detail?id=5788#c45
},events:{'onError':function(event){_triggerEvent(plyr.container,'error',true,{code:event.data,embed:event.target});},'onReady':function(event){// Get the instance
var instance=event.target;// Create a faux HTML5 API using the YouTube API
plyr.media.play=function(){instance.playVideo();plyr.media.paused=false;};plyr.media.pause=function(){instance.pauseVideo();plyr.media.paused=true;};plyr.media.stop=function(){instance.stopVideo();plyr.media.paused=true;};plyr.media.duration=instance.getDuration();plyr.media.paused=true;plyr.media.currentTime=0;plyr.media.muted=instance.isMuted();// Set title
config.title=instance.getVideoData().title;// Set the tabindex
if(plyr.supported.full){plyr.media.querySelector('iframe').setAttribute('tabindex','-1');}// Update UI
_embedReady();// Trigger timeupdate
_triggerEvent(plyr.media,'timeupdate');// Trigger timeupdate
_triggerEvent(plyr.media,'durationchange');// Reset timer
window.clearInterval(timers.buffering);// Setup buffering
timers.buffering=window.setInterval(function(){// Get loaded % from YouTube
plyr.media.buffered=instance.getVideoLoadedFraction();// Trigger progress only when we actually buffer something
if(plyr.media.lastBuffered===null||plyr.media.lastBuffered<plyr.media.buffered){_triggerEvent(plyr.media,'progress');}// Set last buffer point
plyr.media.lastBuffered=plyr.media.buffered;// Bail if we're at 100%
if(plyr.media.buffered===1){window.clearInterval(timers.buffering);// Trigger event
_triggerEvent(plyr.media,'canplaythrough');}},200);},'onStateChange':function(event){// Get the instance
var instance=event.target;// Reset timer
window.clearInterval(timers.playing);// Handle events
// -1   Unstarted
// 0    Ended
// 1    Playing
// 2    Paused
// 3    Buffering
// 5    Video cued
switch(event.data){case 0:plyr.media.paused=true;_triggerEvent(plyr.media,'ended');break;case 1:plyr.media.paused=false;// If we were seeking, fire seeked event
if(plyr.media.seeking){_triggerEvent(plyr.media,'seeked');}plyr.media.seeking=false;_triggerEvent(plyr.media,'play');_triggerEvent(plyr.media,'playing');// Poll to get playback progress
timers.playing=window.setInterval(function(){// Set the current time
plyr.media.currentTime=instance.getCurrentTime();// Trigger timeupdate
_triggerEvent(plyr.media,'timeupdate');},100);// Check duration again due to YouTube bug
// https://github.com/Selz/plyr/issues/374
// https://code.google.com/p/gdata-issues/issues/detail?id=8690
if(plyr.media.duration!==instance.getDuration()){plyr.media.duration=instance.getDuration();_triggerEvent(plyr.media,'durationchange');}break;case 2:plyr.media.paused=true;_triggerEvent(plyr.media,'pause');break;}_triggerEvent(plyr.container,'statechange',false,{code:event.data});}}});}// Vimeo ready
function _vimeoReady(mediaId,container){// Setup instance
// https://github.com/vimeo/player.js
plyr.embed=new window.Vimeo.Player(container,{id:parseInt(mediaId),loop:config.loop,autoplay:config.autoplay,byline:false,portrait:false,title:false});// Create a faux HTML5 API using the Vimeo API
plyr.media.play=function(){plyr.embed.play();plyr.media.paused=false;};plyr.media.pause=function(){plyr.embed.pause();plyr.media.paused=true;};plyr.media.stop=function(){plyr.embed.stop();plyr.media.paused=true;};plyr.media.paused=true;plyr.media.currentTime=0;// Update UI
_embedReady();plyr.embed.getCurrentTime().then(function(value){plyr.media.currentTime=value;// Trigger timeupdate
_triggerEvent(plyr.media,'timeupdate');});plyr.embed.getDuration().then(function(value){plyr.media.duration=value;// Trigger timeupdate
_triggerEvent(plyr.media,'durationchange');});// TODO: Captions
/*if (config.captions.defaultActive) {
                plyr.embed.enableTextTrack('en');
            }*/plyr.embed.on('loaded',function(){// Fix keyboard focus issues
// https://github.com/Selz/plyr/issues/317
if(_is.htmlElement(plyr.embed.element)&&plyr.supported.full){plyr.embed.element.setAttribute('tabindex','-1');}});plyr.embed.on('play',function(){plyr.media.paused=false;_triggerEvent(plyr.media,'play');_triggerEvent(plyr.media,'playing');});plyr.embed.on('pause',function(){plyr.media.paused=true;_triggerEvent(plyr.media,'pause');});plyr.embed.on('timeupdate',function(data){plyr.media.seeking=false;plyr.media.currentTime=data.seconds;_triggerEvent(plyr.media,'timeupdate');});plyr.embed.on('progress',function(data){plyr.media.buffered=data.percent;_triggerEvent(plyr.media,'progress');if(parseInt(data.percent)===1){// Trigger event
_triggerEvent(plyr.media,'canplaythrough');}});plyr.embed.on('seeked',function(){plyr.media.seeking=false;_triggerEvent(plyr.media,'seeked');_triggerEvent(plyr.media,'play');});plyr.embed.on('ended',function(){plyr.media.paused=true;_triggerEvent(plyr.media,'ended');});}// Soundcloud ready
function _soundcloudReady(){/* jshint validthis: true */plyr.embed=window.SC.Widget(this);// Setup on ready
plyr.embed.bind(window.SC.Widget.Events.READY,function(){// Create a faux HTML5 API using the Soundcloud API
plyr.media.play=function(){plyr.embed.play();plyr.media.paused=false;};plyr.media.pause=function(){plyr.embed.pause();plyr.media.paused=true;};plyr.media.stop=function(){plyr.embed.seekTo(0);plyr.embed.pause();plyr.media.paused=true;};plyr.media.paused=true;plyr.media.currentTime=0;plyr.embed.getDuration(function(value){plyr.media.duration=value/1000;// Update UI
_embedReady();});plyr.embed.getPosition(function(value){plyr.media.currentTime=value;// Trigger timeupdate
_triggerEvent(plyr.media,'timeupdate');});plyr.embed.bind(window.SC.Widget.Events.PLAY,function(){plyr.media.paused=false;_triggerEvent(plyr.media,'play');_triggerEvent(plyr.media,'playing');});plyr.embed.bind(window.SC.Widget.Events.PAUSE,function(){plyr.media.paused=true;_triggerEvent(plyr.media,'pause');});plyr.embed.bind(window.SC.Widget.Events.PLAY_PROGRESS,function(data){plyr.media.seeking=false;plyr.media.currentTime=data.currentPosition/1000;_triggerEvent(plyr.media,'timeupdate');});plyr.embed.bind(window.SC.Widget.Events.LOAD_PROGRESS,function(data){plyr.media.buffered=data.loadProgress;_triggerEvent(plyr.media,'progress');if(parseInt(data.loadProgress)===1){// Trigger event
_triggerEvent(plyr.media,'canplaythrough');}});plyr.embed.bind(window.SC.Widget.Events.FINISH,function(){plyr.media.paused=true;_triggerEvent(plyr.media,'ended');});});}// Play media
function _play(){if('play'in plyr.media){plyr.media.play();}}// Pause media
function _pause(){if('pause'in plyr.media){plyr.media.pause();}}// Toggle playback
function _togglePlay(toggle){// True toggle
if(!_is.boolean(toggle)){toggle=plyr.media.paused;}if(toggle){_play();}else{_pause();}return toggle;}// Rewind
function _rewind(seekTime){// Use default if needed
if(!_is.number(seekTime)){seekTime=config.seekTime;}_seek(plyr.media.currentTime-seekTime);}// Fast forward
function _forward(seekTime){// Use default if needed
if(!_is.number(seekTime)){seekTime=config.seekTime;}_seek(plyr.media.currentTime+seekTime);}// Seek to time
// The input parameter can be an event or a number
function _seek(input){var targetTime=0,paused=plyr.media.paused,duration=_getDuration();if(_is.number(input)){targetTime=input;}else if(_is.object(input)&&_inArray(['input','change'],input.type)){// It's the seek slider
// Seek to the selected time
targetTime=input.target.value/input.target.max*duration;}// Normalise targetTime
if(targetTime<0){targetTime=0;}else if(targetTime>duration){targetTime=duration;}// Update seek range and progress
_updateSeekDisplay(targetTime);// Set the current time
// Try/catch incase the media isn't set and we're calling seek() from source() and IE moans
try{plyr.media.currentTime=targetTime.toFixed(4);}catch(e){}// Embeds
if(_inArray(config.types.embed,plyr.type)){switch(plyr.type){case'youtube':plyr.embed.seekTo(targetTime);break;case'vimeo':// Round to nearest second for vimeo
plyr.embed.setCurrentTime(targetTime.toFixed(0));break;case'soundcloud':plyr.embed.seekTo(targetTime*1000);break;}if(paused){_pause();}// Trigger timeupdate
_triggerEvent(plyr.media,'timeupdate');// Set seeking flag
plyr.media.seeking=true;// Trigger seeking
_triggerEvent(plyr.media,'seeking');}// Logging
_log('Seeking to '+plyr.media.currentTime+' seconds');// Special handling for 'manual' captions
_seekManualCaptions(targetTime);}// Get the duration (or custom if set)
function _getDuration(){// It should be a number, but parse it just incase
var duration=parseInt(config.duration),// True duration
mediaDuration=0;// Only if duration available
if(plyr.media.duration!==null&&!isNaN(plyr.media.duration)){mediaDuration=plyr.media.duration;}// If custom duration is funky, use regular duration
return isNaN(duration)?mediaDuration:duration;}// Check playing state
function _checkPlaying(){_toggleClass(plyr.container,config.classes.playing,!plyr.media.paused);_toggleClass(plyr.container,config.classes.stopped,plyr.media.paused);_toggleControls(plyr.media.paused);}// Save scroll position
function _saveScrollPosition(){scroll={x:window.pageXOffset||0,y:window.pageYOffset||0};}// Restore scroll position
function _restoreScrollPosition(){window.scrollTo(scroll.x,scroll.y);}// Toggle fullscreen
function _toggleFullscreen(event){// Check for native support
var nativeSupport=fullscreen.supportsFullScreen;if(nativeSupport){// If it's a fullscreen change event, update the UI
if(event&&event.type===fullscreen.fullScreenEventName){plyr.isFullscreen=fullscreen.isFullScreen(plyr.container);}else{// Else it's a user request to enter or exit
if(!fullscreen.isFullScreen(plyr.container)){// Save scroll position
_saveScrollPosition();// Request full screen
fullscreen.requestFullScreen(plyr.container);}else{// Bail from fullscreen
fullscreen.cancelFullScreen();}// Check if we're actually full screen (it could fail)
plyr.isFullscreen=fullscreen.isFullScreen(plyr.container);return;}}else{// Otherwise, it's a simple toggle
plyr.isFullscreen=!plyr.isFullscreen;// Bind/unbind escape key
document.body.style.overflow=plyr.isFullscreen?'hidden':'';}// Set class hook
_toggleClass(plyr.container,config.classes.fullscreen.active,plyr.isFullscreen);// Trap focus
_focusTrap(plyr.isFullscreen);// Set button state
if(plyr.buttons&&plyr.buttons.fullscreen){_toggleState(plyr.buttons.fullscreen,plyr.isFullscreen);}// Trigger an event
_triggerEvent(plyr.container,plyr.isFullscreen?'enterfullscreen':'exitfullscreen',true);// Restore scroll position
if(!plyr.isFullscreen&&nativeSupport){_restoreScrollPosition();}}// Mute
function _toggleMute(muted){// If the method is called without parameter, toggle based on current value
if(!_is.boolean(muted)){muted=!plyr.media.muted;}// Set button state
_toggleState(plyr.buttons.mute,muted);// Set mute on the player
plyr.media.muted=muted;// If volume is 0 after unmuting, set to default
if(plyr.media.volume===0){_setVolume(config.volume);}// Embeds
if(_inArray(config.types.embed,plyr.type)){// YouTube
switch(plyr.type){case'youtube':plyr.embed[plyr.media.muted?'mute':'unMute']();break;case'vimeo':case'soundcloud':plyr.embed.setVolume(plyr.media.muted?0:parseFloat(config.volume/config.volumeMax));break;}// Trigger volumechange for embeds
_triggerEvent(plyr.media,'volumechange');}}// Set volume
function _setVolume(volume){var max=config.volumeMax,min=config.volumeMin;// Load volume from storage if no value specified
if(_is.undefined(volume)){volume=plyr.storage.volume;}// Use config if all else fails
if(volume===null||isNaN(volume)){volume=config.volume;}// Maximum is volumeMax
if(volume>max){volume=max;}// Minimum is volumeMin
if(volume<min){volume=min;}// Set the player volume
plyr.media.volume=parseFloat(volume/max);// Set the display
if(plyr.volume.display){plyr.volume.display.value=volume;}// Embeds
if(_inArray(config.types.embed,plyr.type)){switch(plyr.type){case'youtube':plyr.embed.setVolume(plyr.media.volume*100);break;case'vimeo':case'soundcloud':plyr.embed.setVolume(plyr.media.volume);break;}// Trigger volumechange for embeds
_triggerEvent(plyr.media,'volumechange');}// Toggle muted state
if(volume===0){plyr.media.muted=true;}else if(plyr.media.muted&&volume>0){_toggleMute();}}// Increase volume
function _increaseVolume(step){var volume=plyr.media.muted?0:plyr.media.volume*config.volumeMax;if(!_is.number(step)){step=config.volumeStep;}_setVolume(volume+step);}// Decrease volume
function _decreaseVolume(step){var volume=plyr.media.muted?0:plyr.media.volume*config.volumeMax;if(!_is.number(step)){step=config.volumeStep;}_setVolume(volume-step);}// Update volume UI and storage
function _updateVolume(){// Get the current volume
var volume=plyr.media.muted?0:plyr.media.volume*config.volumeMax;// Update the <input type="range"> if present
if(plyr.supported.full){if(plyr.volume.input){plyr.volume.input.value=volume;}if(plyr.volume.display){plyr.volume.display.value=volume;}}// Update the volume in storage
_updateStorage({volume:volume});// Toggle class if muted
_toggleClass(plyr.container,config.classes.muted,volume===0);// Update checkbox for mute state
if(plyr.supported.full&&plyr.buttons.mute){_toggleState(plyr.buttons.mute,volume===0);}}// Toggle captions
function _toggleCaptions(show){// If there's no full support, or there's no caption toggle
if(!plyr.supported.full||!plyr.buttons.captions){return;}// If the method is called without parameter, toggle based on current value
if(!_is.boolean(show)){show=plyr.container.className.indexOf(config.classes.captions.active)===-1;}// Set global
plyr.captionsEnabled=show;// Toggle state
_toggleState(plyr.buttons.captions,plyr.captionsEnabled);// Add class hook
_toggleClass(plyr.container,config.classes.captions.active,plyr.captionsEnabled);// Trigger an event
_triggerEvent(plyr.container,plyr.captionsEnabled?'captionsenabled':'captionsdisabled',true);// Save captions state to localStorage
_updateStorage({captionsEnabled:plyr.captionsEnabled});}// Check if media is loading
function _checkLoading(event){var loading=event.type==='waiting';// Clear timer
clearTimeout(timers.loading);// Timer to prevent flicker when seeking
timers.loading=setTimeout(function(){// Toggle container class hook
_toggleClass(plyr.container,config.classes.loading,loading);// Show controls if loading, hide if done
_toggleControls(loading);},loading?250:0);}// Update <progress> elements
function _updateProgress(event){if(!plyr.supported.full){return;}var progress=plyr.progress.played,value=0,duration=_getDuration();if(event){switch(event.type){// Video playing
case'timeupdate':case'seeking':if(plyr.controls.pressed){return;}value=_getPercentage(plyr.media.currentTime,duration);// Set seek range value only if it's a 'natural' time event
if(event.type==='timeupdate'&&plyr.buttons.seek){plyr.buttons.seek.value=value;}break;// Check buffer status
case'playing':case'progress':progress=plyr.progress.buffer;value=function(){var buffered=plyr.media.buffered;if(buffered&&buffered.length){// HTML5
return _getPercentage(buffered.end(0),duration);}else if(_is.number(buffered)){// YouTube returns between 0 and 1
return buffered*100;}return 0;}();break;}}// Set values
_setProgress(progress,value);}// Set <progress> value
function _setProgress(progress,value){if(!plyr.supported.full){return;}// Default to 0
if(_is.undefined(value)){value=0;}// Default to buffer or bail
if(_is.undefined(progress)){if(plyr.progress&&plyr.progress.buffer){progress=plyr.progress.buffer;}else{return;}}// One progress element passed
if(_is.htmlElement(progress)){progress.value=value;}else if(progress){// Object of progress + text element
if(progress.bar){progress.bar.value=value;}if(progress.text){progress.text.innerHTML=value;}}}// Update the displayed time
function _updateTimeDisplay(time,element){// Bail if there's no duration display
if(!element){return;}// Fallback to 0
if(isNaN(time)){time=0;}plyr.secs=parseInt(time%60);plyr.mins=parseInt(time/60%60);plyr.hours=parseInt(time/60/60%60);// Do we need to display hours?
var displayHours=parseInt(_getDuration()/60/60%60)>0;// Ensure it's two digits. For example, 03 rather than 3.
plyr.secs=('0'+plyr.secs).slice(-2);plyr.mins=('0'+plyr.mins).slice(-2);// Render
element.innerHTML=(displayHours?plyr.hours+':':'')+plyr.mins+':'+plyr.secs;}// Show the duration on metadataloaded
function _displayDuration(){if(!plyr.supported.full){return;}// Determine duration
var duration=_getDuration()||0;// If there's only one time display, display duration there
if(!plyr.duration&&config.displayDuration&&plyr.media.paused){_updateTimeDisplay(duration,plyr.currentTime);}// If there's a duration element, update content
if(plyr.duration){_updateTimeDisplay(duration,plyr.duration);}// Update the tooltip (if visible)
_updateSeekTooltip();}// Handle time change event
function _timeUpdate(event){// Duration
_updateTimeDisplay(plyr.media.currentTime,plyr.currentTime);// Ignore updates while seeking
if(event&&event.type==='timeupdate'&&plyr.media.seeking){return;}// Playing progress
_updateProgress(event);}// Update seek range and progress
function _updateSeekDisplay(time){// Default to 0
if(!_is.number(time)){time=0;}var duration=_getDuration(),value=_getPercentage(time,duration);// Update progress
if(plyr.progress&&plyr.progress.played){plyr.progress.played.value=value;}// Update seek range input
if(plyr.buttons&&plyr.buttons.seek){plyr.buttons.seek.value=value;}}// Update hover tooltip for seeking
function _updateSeekTooltip(event){var duration=_getDuration();// Bail if setting not true
if(!config.tooltips.seek||!plyr.progress.container||duration===0){return;}// Calculate percentage
var clientRect=plyr.progress.container.getBoundingClientRect(),percent=0,visible=config.classes.tooltip+'--visible';// Determine percentage, if already visible
if(!event){if(_hasClass(plyr.progress.tooltip,visible)){percent=plyr.progress.tooltip.style.left.replace('%','');}else{return;}}else{percent=100/clientRect.width*(event.pageX-clientRect.left);}// Set bounds
if(percent<0){percent=0;}else if(percent>100){percent=100;}// Display the time a click would seek to
_updateTimeDisplay(duration/100*percent,plyr.progress.tooltip);// Set position
plyr.progress.tooltip.style.left=percent+"%";// Show/hide the tooltip
// If the event is a moues in/out and percentage is inside bounds
if(event&&_inArray(['mouseenter','mouseleave'],event.type)){_toggleClass(plyr.progress.tooltip,visible,event.type==='mouseenter');}}// Show the player controls in fullscreen mode
function _toggleControls(toggle){// Don't hide if config says not to, it's audio, or not ready or loading
if(!config.hideControls||plyr.type==='audio'){return;}var delay=0,isEnterFullscreen=false,show=toggle,loading=_hasClass(plyr.container,config.classes.loading);// Default to false if no boolean
if(!_is.boolean(toggle)){if(toggle&&toggle.type){// Is the enter fullscreen event
isEnterFullscreen=toggle.type==='enterfullscreen';// Whether to show controls
show=_inArray(['mousemove','touchstart','mouseenter','focus'],toggle.type);// Delay hiding on move events
if(_inArray(['mousemove','touchmove'],toggle.type)){delay=2000;}// Delay a little more for keyboard users
if(toggle.type==='focus'){delay=3000;}}else{show=_hasClass(plyr.container,config.classes.hideControls);}}// Clear timer every movement
window.clearTimeout(timers.hover);// If the mouse is not over the controls, set a timeout to hide them
if(show||plyr.media.paused||loading){_toggleClass(plyr.container,config.classes.hideControls,false);// Always show controls when paused or if touch
if(plyr.media.paused||loading){return;}// Delay for hiding on touch
if(plyr.browser.isTouch){delay=3000;}}// If toggle is false or if we're playing (regardless of toggle),
// then set the timer to hide the controls
if(!show||!plyr.media.paused){timers.hover=window.setTimeout(function(){// If the mouse is over the controls (and not entering fullscreen), bail
if((plyr.controls.pressed||plyr.controls.hover)&&!isEnterFullscreen){return;}_toggleClass(plyr.container,config.classes.hideControls,true);},delay);}}// Add common function to retrieve media source
function _source(source){// If not null or undefined, parse it
if(!_is.undefined(source)){_updateSource(source);return;}// Return the current source
var url;switch(plyr.type){case'youtube':url=plyr.embed.getVideoUrl();break;case'vimeo':plyr.embed.getVideoUrl.then(function(value){url=value;});break;case'soundcloud':plyr.embed.getCurrentSound(function(object){url=object.permalink_url;});break;default:url=plyr.media.currentSrc;break;}return url||'';}// Update source
// Sources are not checked for support so be careful
function _updateSource(source){if(!_is.object(source)||!('sources'in source)||!source.sources.length){_warn('Invalid source format');return;}// Remove ready class hook
_toggleClass(plyr.container,config.classes.ready,false);// Pause playback
_pause();// Update seek range and progress
_updateSeekDisplay();// Reset buffer progress
_setProgress();// Cancel current network requests
_cancelRequests();// Setup new source
function setup(){// Remove embed object
plyr.embed=null;// Remove the old media
_remove(plyr.media);// Remove video container
if(plyr.type==='video'&&plyr.videoContainer){_remove(plyr.videoContainer);}// Reset class name
if(plyr.container){plyr.container.removeAttribute('class');}// Set the type
if('type'in source){plyr.type=source.type;// Get child type for video (it might be an embed)
if(plyr.type==='video'){var firstSource=source.sources[0];if('type'in firstSource&&_inArray(config.types.embed,firstSource.type)){plyr.type=firstSource.type;}}}// Check for support
plyr.supported=supported(plyr.type);// Create new markup
switch(plyr.type){case'video':plyr.media=document.createElement('video');break;case'audio':plyr.media=document.createElement('audio');break;case'youtube':case'vimeo':case'soundcloud':plyr.media=document.createElement('div');plyr.embedId=source.sources[0].src;break;}// Inject the new element
_prependChild(plyr.container,plyr.media);// Autoplay the new source?
if(_is.boolean(source.autoplay)){config.autoplay=source.autoplay;}// Set attributes for audio and video
if(_inArray(config.types.html5,plyr.type)){if(config.crossorigin){plyr.media.setAttribute('crossorigin','');}if(config.autoplay){plyr.media.setAttribute('autoplay','');}if('poster'in source){plyr.media.setAttribute('poster',source.poster);}if(config.loop){plyr.media.setAttribute('loop','');}}// Restore class hooks
_toggleClass(plyr.container,config.classes.fullscreen.active,plyr.isFullscreen);_toggleClass(plyr.container,config.classes.captions.active,plyr.captionsEnabled);_toggleStyleHook();// Set new sources for html5
if(_inArray(config.types.html5,plyr.type)){_insertChildElements('source',source.sources);}// Set up from scratch
_setupMedia();// HTML5 stuff
if(_inArray(config.types.html5,plyr.type)){// Setup captions
if('tracks'in source){_insertChildElements('track',source.tracks);}// Load HTML5 sources
plyr.media.load();}// If HTML5 or embed but not fully supported, setupInterface and call ready now
if(_inArray(config.types.html5,plyr.type)||_inArray(config.types.embed,plyr.type)&&!plyr.supported.full){// Setup interface
_setupInterface();// Call ready
_ready();}// Set aria title and iframe title
config.title=source.title;_setTitle();}// Destroy instance adn wait for callback
// Vimeo throws a wobbly if you don't wait
_destroy(setup,false);}// Update poster
function _updatePoster(source){if(plyr.type==='video'){plyr.media.setAttribute('poster',source);}}// Listen for control events
function _controlListeners(){// IE doesn't support input event, so we fallback to change
var inputEvent=plyr.browser.isIE?'change':'input';// Click play/pause helper
function togglePlay(){var play=_togglePlay();// Determine which buttons
var trigger=plyr.buttons[play?'play':'pause'],target=plyr.buttons[play?'pause':'play'];// Get the last play button to account for the large play button
if(target&&target.length>1){target=target[target.length-1];}else{target=target[0];}// Setup focus and tab focus
if(target){var hadTabFocus=_hasClass(trigger,config.classes.tabFocus);setTimeout(function(){target.focus();if(hadTabFocus){_toggleClass(trigger,config.classes.tabFocus,false);_toggleClass(target,config.classes.tabFocus,true);}},100);}}// Get the focused element
function getFocusElement(){var focused=document.activeElement;if(!focused||focused===document.body){focused=null;}else{focused=document.querySelector(':focus');}return focused;}// Get the key code for an event
function getKeyCode(event){return event.keyCode?event.keyCode:event.which;}// Detect tab focus
function checkTabFocus(focused){for(var button in plyr.buttons){var element=plyr.buttons[button];if(_is.nodeList(element)){for(var i=0;i<element.length;i++){_toggleClass(element[i],config.classes.tabFocus,element[i]===focused);}}else{_toggleClass(element,config.classes.tabFocus,element===focused);}}}// Keyboard shortcuts
if(config.keyboardShorcuts.focused){var last=null;// Handle global presses
if(config.keyboardShorcuts.global){_on(window,'keydown keyup',function(event){var code=getKeyCode(event),focused=getFocusElement(),allowed=[48,49,50,51,52,53,54,56,57,75,77,70,67],count=get().length;// Only handle global key press if there's only one player
// and the key is in the allowed keys
// and if the focused element is not editable (e.g. text input)
// and any that accept key input http://webaim.org/techniques/keyboard/
if(count===1&&_inArray(allowed,code)&&(!_is.htmlElement(focused)||!_matches(focused,config.selectors.editable))){handleKey(event);}});}// Handle presses on focused
_on(plyr.container,'keydown keyup',handleKey);}function handleKey(event){var code=getKeyCode(event),pressed=event.type==='keydown',held=pressed&&code===last;// If the event is bubbled from the media element
// Firefox doesn't get the keycode for whatever reason
if(!_is.number(code)){return;}// Seek by the number keys
function seekByKey(){// Get current duration
var duration=plyr.media.duration;// Bail if we have no duration set
if(!_is.number(duration)){return;}// Divide the max duration into 10th's and times by the number value
_seek(duration/10*(code-48));}// Handle the key on keydown
// Reset on keyup
if(pressed){// Which keycodes should we prevent default
var preventDefault=[48,49,50,51,52,53,54,56,57,32,75,38,40,77,39,37,70,67];// If the code is found prevent default (e.g. prevent scrolling for arrows)
if(_inArray(preventDefault,code)){event.preventDefault();event.stopPropagation();}switch(code){// 0-9
case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:if(!held){seekByKey();}break;// Space and K key
case 32:case 75:if(!held){_togglePlay();}break;// Arrow up
case 38:_increaseVolume();break;// Arrow down
case 40:_decreaseVolume();break;// M key
case 77:if(!held){_toggleMute();}break;// Arrow forward
case 39:_forward();break;// Arrow back
case 37:_rewind();break;// F key
case 70:_toggleFullscreen();break;// C key
case 67:if(!held){_toggleCaptions();}break;}// Escape is handle natively when in full screen
// So we only need to worry about non native
if(!fullscreen.supportsFullScreen&&plyr.isFullscreen&&code===27){_toggleFullscreen();}// Store last code for next cycle
last=code;}else{last=null;}}// Focus/tab management
_on(window,'keyup',function(event){var code=getKeyCode(event),focused=getFocusElement();if(code===9){checkTabFocus(focused);}});_on(document.body,'click',function(){_toggleClass(_getElement('.'+config.classes.tabFocus),config.classes.tabFocus,false);});for(var button in plyr.buttons){var element=plyr.buttons[button];_on(element,'blur',function(){_toggleClass(element,'tab-focus',false);});}// Play
_proxyListener(plyr.buttons.play,'click',config.listeners.play,togglePlay);// Pause
_proxyListener(plyr.buttons.pause,'click',config.listeners.pause,togglePlay);// Restart
_proxyListener(plyr.buttons.restart,'click',config.listeners.restart,_seek);// Rewind
_proxyListener(plyr.buttons.rewind,'click',config.listeners.rewind,_rewind);// Fast forward
_proxyListener(plyr.buttons.forward,'click',config.listeners.forward,_forward);// Seek
_proxyListener(plyr.buttons.seek,inputEvent,config.listeners.seek,_seek);// Set volume
_proxyListener(plyr.volume.input,inputEvent,config.listeners.volume,function(){_setVolume(plyr.volume.input.value);});// Mute
_proxyListener(plyr.buttons.mute,'click',config.listeners.mute,_toggleMute);// Fullscreen
_proxyListener(plyr.buttons.fullscreen,'click',config.listeners.fullscreen,_toggleFullscreen);// Handle user exiting fullscreen by escaping etc
if(fullscreen.supportsFullScreen){_on(document,fullscreen.fullScreenEventName,_toggleFullscreen);}// Captions
_on(plyr.buttons.captions,'click',_toggleCaptions);// Seek tooltip
_on(plyr.progress.container,'mouseenter mouseleave mousemove',_updateSeekTooltip);// Toggle controls visibility based on mouse movement
if(config.hideControls){// Toggle controls on mouse events and entering fullscreen
_on(plyr.container,'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen',_toggleControls);// Watch for cursor over controls so they don't hide when trying to interact
_on(plyr.controls,'mouseenter mouseleave',function(event){plyr.controls.hover=event.type==='mouseenter';});// Watch for cursor over controls so they don't hide when trying to interact
_on(plyr.controls,'mousedown mouseup touchstart touchend touchcancel',function(event){plyr.controls.pressed=_inArray(['mousedown','touchstart'],event.type);});// Focus in/out on controls
_on(plyr.controls,'focus blur',_toggleControls,true);}// Adjust volume on scroll
_on(plyr.volume.input,'wheel',function(event){event.preventDefault();// Detect "natural" scroll - suppored on OS X Safari only
// Other browsers on OS X will be inverted until support improves
var inverted=event.webkitDirectionInvertedFromDevice,step=config.volumeStep/5;// Scroll down (or up on natural) to decrease
if(event.deltaY<0||event.deltaX>0){if(inverted){_decreaseVolume(step);}else{_increaseVolume(step);}}// Scroll up (or down on natural) to increase
if(event.deltaY>0||event.deltaX<0){if(inverted){_increaseVolume(step);}else{_decreaseVolume(step);}}});}// Listen for media events
function _mediaListeners(){// Time change on media
_on(plyr.media,'timeupdate seeking',_timeUpdate);// Update manual captions
_on(plyr.media,'timeupdate',_seekManualCaptions);// Display duration
_on(plyr.media,'durationchange loadedmetadata',_displayDuration);// Handle the media finishing
_on(plyr.media,'ended',function(){// Show poster on end
if(plyr.type==='video'&&config.showPosterOnEnd){// Clear
if(plyr.type==='video'){_setCaption();}// Restart
_seek();// Re-load media
plyr.media.load();}});// Check for buffer progress
_on(plyr.media,'progress playing',_updateProgress);// Handle native mute
_on(plyr.media,'volumechange',_updateVolume);// Handle native play/pause
_on(plyr.media,'play pause ended',_checkPlaying);// Loading
_on(plyr.media,'waiting canplay seeked',_checkLoading);// Click video
if(config.clickToPlay&&plyr.type!=='audio'){// Re-fetch the wrapper
var wrapper=_getElement('.'+config.classes.videoWrapper);// Bail if there's no wrapper (this should never happen)
if(!wrapper){return;}// Set cursor
wrapper.style.cursor="pointer";// On click play, pause ore restart
_on(wrapper,'click',function(){// Touch devices will just show controls (if we're hiding controls)
if(config.hideControls&&plyr.browser.isTouch&&!plyr.media.paused){return;}if(plyr.media.paused){_play();}else if(plyr.media.ended){_seek();_play();}else{_pause();}});}// Disable right click
if(config.disableContextMenu){_on(plyr.media,'contextmenu',function(event){event.preventDefault();});}// Proxy events to container
// Bubble up key events for Edge
_on(plyr.media,config.events.concat(['keyup','keydown']).join(' '),function(event){_triggerEvent(plyr.container,event.type,true);});}// Cancel current network requests
// See https://github.com/Selz/plyr/issues/174
function _cancelRequests(){if(!_inArray(config.types.html5,plyr.type)){return;}// Remove child sources
var sources=plyr.media.querySelectorAll('source');for(var i=0;i<sources.length;i++){_remove(sources[i]);}// Set blank video src attribute
// This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error
// Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection
plyr.media.setAttribute('src','https://cdn.selz.com/plyr/blank.mp4');// Load the new empty source
// This will cancel existing requests
// See https://github.com/Selz/plyr/issues/174
plyr.media.load();// Debugging
_log('Cancelled network requests');}// Destroy an instance
// Event listeners are removed when elements are removed
// http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory
function _destroy(callback,restore){// Bail if the element is not initialized
if(!plyr.init){return null;}// Type specific stuff
switch(plyr.type){case'youtube':// Clear timers
window.clearInterval(timers.buffering);window.clearInterval(timers.playing);// Destroy YouTube API
plyr.embed.destroy();// Clean up
cleanUp();break;case'vimeo':// Destroy Vimeo API
// then clean up (wait, to prevent postmessage errors)
plyr.embed.unload().then(cleanUp);// Vimeo does not always return
timers.cleanUp=window.setTimeout(cleanUp,200);break;case'video':case'audio':// Restore native video controls
_toggleNativeControls(true);// Clean up
cleanUp();break;}function cleanUp(){clearTimeout(timers.cleanUp);// Default to restore original element
if(!_is.boolean(restore)){restore=true;}// Callback
if(_is.function(callback)){callback.call(original);}// Bail if we don't need to restore the original element
if(!restore){return;}// Remove init flag
plyr.init=false;// Replace the container with the original element provided
plyr.container.parentNode.replaceChild(original,plyr.container);// Event
_triggerEvent(original,'destroyed',true);}}// Setup a player
function _init(){// Bail if the element is initialized
if(plyr.init){return null;}// Setup the fullscreen api
fullscreen=_fullscreen();// Sniff out the browser
plyr.browser=_browserSniff();// Bail if nothing to setup
if(!_is.htmlElement(plyr.media)){return;}// Load saved settings from localStorage
_setupStorage();// Set media type based on tag or data attribute
// Supported: video, audio, vimeo, youtube
var tagName=media.tagName.toLowerCase();if(tagName==='div'){plyr.type=media.getAttribute('data-type');plyr.embedId=media.getAttribute('data-video-id');// Clean up
media.removeAttribute('data-type');media.removeAttribute('data-video-id');}else{plyr.type=tagName;config.crossorigin=media.getAttribute('crossorigin')!==null;config.autoplay=config.autoplay||media.getAttribute('autoplay')!==null;config.loop=config.loop||media.getAttribute('loop')!==null;}// Check for support
plyr.supported=supported(plyr.type);// If no native support, bail
if(!plyr.supported.basic){return;}// Wrap media
plyr.container=_wrap(media,document.createElement('div'));// Allow focus to be captured
plyr.container.setAttribute('tabindex',0);// Add style hook
_toggleStyleHook();// Debug info
_log(''+plyr.browser.name+' '+plyr.browser.version);// Setup media
_setupMedia();// Setup interface
// If embed but not fully supported, setupInterface (to avoid flash of controls) and call ready now
if(_inArray(config.types.html5,plyr.type)||_inArray(config.types.embed,plyr.type)&&!plyr.supported.full){// Setup UI
_setupInterface();// Call ready
_ready();// Set title on button and frame
_setTitle();}// Successful setup
plyr.init=true;}// Setup the UI
function _setupInterface(){// Don't setup interface if no support
if(!plyr.supported.full){_warn('Basic support only',plyr.type);// Remove controls
_remove(_getElement(config.selectors.controls.wrapper));// Remove large play
_remove(_getElement(config.selectors.buttons.play));// Restore native controls
_toggleNativeControls(true);// Bail
return;}// Inject custom controls if not present
var controlsMissing=!_getElements(config.selectors.controls.wrapper).length;if(controlsMissing){// Inject custom controls
_injectControls();}// Find the elements
if(!_findElements()){return;}// If the controls are injected, re-bind listeners for controls
if(controlsMissing){_controlListeners();}// Media element listeners
_mediaListeners();// Remove native controls
_toggleNativeControls();// Setup fullscreen
_setupFullscreen();// Captions
_setupCaptions();// Set volume
_setVolume();_updateVolume();// Reset time display
_timeUpdate();// Update the UI
_checkPlaying();}api={getOriginal:function(){return original;},getContainer:function(){return plyr.container;},getEmbed:function(){return plyr.embed;},getMedia:function(){return plyr.media;},getType:function(){return plyr.type;},getDuration:_getDuration,getCurrentTime:function(){return plyr.media.currentTime;},getVolume:function(){return plyr.media.volume;},isMuted:function(){return plyr.media.muted;},isReady:function(){return _hasClass(plyr.container,config.classes.ready);},isLoading:function(){return _hasClass(plyr.container,config.classes.loading);},isPaused:function(){return plyr.media.paused;},on:function(event,callback){_on(plyr.container,event,callback);return this;},play:_play,pause:_pause,stop:function(){_pause();_seek();},restart:_seek,rewind:_rewind,forward:_forward,seek:_seek,source:_source,poster:_updatePoster,setVolume:_setVolume,togglePlay:_togglePlay,toggleMute:_toggleMute,toggleCaptions:_toggleCaptions,toggleFullscreen:_toggleFullscreen,toggleControls:_toggleControls,isFullscreen:function(){return plyr.isFullscreen||false;},support:function(mimeType){return _supportMime(plyr,mimeType);},destroy:_destroy};// Everything done
function _ready(){// Ready event at end of execution stack
window.setTimeout(function(){_triggerEvent(plyr.media,'ready');},0);// Set class hook on media element
_toggleClass(plyr.media,defaults.classes.setup,true);// Set container class for ready
_toggleClass(plyr.container,config.classes.ready,true);// Store a refernce to instance
plyr.media.plyr=api;// Autoplay
if(config.autoplay){_play();}}// Initialize instance
_init();// If init failed, return null
if(!plyr.init){return null;}return api;}// Load a sprite
function loadSprite(url,id){var x=new XMLHttpRequest();// If the id is set and sprite exists, bail
if(_is.string(id)&&_is.htmlElement(document.querySelector('#'+id))){return;}// Create placeholder (to prevent loading twice)
var container=document.createElement('div');container.setAttribute('hidden','');if(_is.string(id)){container.setAttribute('id',id);}document.body.insertBefore(container,document.body.childNodes[0]);// Check for CORS support
if('withCredentials'in x){x.open('GET',url,true);}else{return;}// Inject hidden div with sprite on load
x.onload=function(){container.innerHTML=x.responseText;};x.send();}// Check for support
function supported(type){var browser=_browserSniff(),isOldIE=browser.isIE&&browser.version<=9,isIos=browser.isIos,isIphone=/iPhone|iPod/i.test(navigator.userAgent),audio=!!document.createElement('audio').canPlayType,video=!!document.createElement('video').canPlayType,basic,full;switch(type){case'video':basic=video;full=basic&&!isOldIE&&!isIphone;break;case'audio':basic=audio;full=basic&&!isOldIE;break;case'vimeo':case'youtube':case'soundcloud':basic=true;full=!isOldIE&&!isIos;break;default:basic=audio&&video;full=basic&&!isOldIE;}return{basic:basic,full:full};}// Setup function
function setup(targets,options){// Get the players
var players=[],instances=[],selector=[defaults.selectors.html5,defaults.selectors.embed].join(',');// Select the elements
if(_is.string(targets)){// String selector passed
targets=document.querySelectorAll(targets);}else if(_is.htmlElement(targets)){// Single HTMLElement passed
targets=[targets];}else if(!_is.nodeList(targets)&&!_is.array(targets)&&!_is.string(targets)){// No selector passed, possibly options as first argument
// If options are the first argument
if(_is.undefined(options)&&_is.object(targets)){options=targets;}// Use default selector
targets=document.querySelectorAll(selector);}// Convert NodeList to array
if(_is.nodeList(targets)){targets=Array.prototype.slice.call(targets);}// Bail if disabled or no basic support
// You may want to disable certain UAs etc
if(!supported().basic||!targets.length){return false;}// Add to container list
function add(target,media){if(!_hasClass(media,defaults.classes.hook)){players.push({// Always wrap in a <div> for styling
//container:  _wrap(media, document.createElement('div')),
// Could be a container or the media itself
target:target,// This should be the <video>, <audio> or <div> (YouTube/Vimeo)
media:media});}}// Check if the targets have multiple media elements
for(var i=0;i<targets.length;i++){var target=targets[i];// Get children
var children=target.querySelectorAll(selector);// If there's more than one media element child, wrap them
if(children.length){for(var x=0;x<children.length;x++){add(target,children[x]);}}else if(_matches(target,selector)){// Target is media element
add(target,target);}}// Create a player instance for each element
players.forEach(function(player){var element=player.target,media=player.media,match=false;// The target element can also be the media element
if(media===element){match=true;}// Setup a player instance and add to the element
// Create instance-specific config
var data={};// Try parsing data attribute config
try{data=JSON.parse(element.getAttribute('data-plyr'));}catch(e){}var config=_extend({},defaults,options,data);// Bail if not enabled
if(!config.enabled){return null;}// Create new instance
var instance=new Plyr(media,config);// Go to next if setup failed
if(!_is.object(instance)){return;}// Listen for events if debugging
if(config.debug){var events=config.events.concat(['setup','statechange','enterfullscreen','exitfullscreen','captionsenabled','captionsdisabled']);_on(instance.getContainer(),events.join(' '),function(event){console.log([config.logPrefix,'event:',event.type].join(' '),event.detail.plyr);});}// Callback
_event(instance.getContainer(),'setup',true,{plyr:instance});// Add to return array even if it's already setup
instances.push(instance);});return instances;}// Get all instances within a provided container
function get(container){if(_is.string(container)){// Get selector if string passed
container=document.querySelector(container);}else if(_is.undefined(container)){// Use body by default to get all on page
container=document.body;}// If we have a HTML element
if(_is.htmlElement(container)){var elements=container.querySelectorAll('.'+defaults.classes.setup),instances=[];Array.prototype.slice.call(elements).forEach(function(element){if(_is.object(element.plyr)){instances.push(element.plyr);}});return instances;}return[];}return{setup:setup,supported:supported,loadSprite:loadSprite,get:get};});// Custom event polyfill
// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
(function(){if(typeof window.CustomEvent==='function'){return;}function CustomEvent(event,params){params=params||{bubbles:false,cancelable:false,detail:undefined};var evt=document.createEvent('CustomEvent');evt.initCustomEvent(event,params.bubbles,params.cancelable,params.detail);return evt;}CustomEvent.prototype=window.Event.prototype;window.CustomEvent=CustomEvent;})();
;/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.6.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
(function (factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }
})(function ($) {
    'use strict';

    var Slick = window.Slick || {};

    Slick = function () {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this,
                dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function (slider, i) {
                    return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

            _.registerBreakpoints();
            _.init(true);
        }

        return Slick;
    }();

    Slick.prototype.activateADA = function () {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });
    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {

        var _ = this;

        if (typeof index === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || index >= _.slideCount) {
            return false;
        }

        _.unload();

        if (typeof index === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.animateHeight = function () {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function (targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }
        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -_.currentLeft;
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function (now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' + now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' + now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function () {
                        if (callback) {
                            callback.call();
                        }
                    }
                });
            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function () {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }
            }
        }
    };

    Slick.prototype.getNavTarget = function () {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if (asNavFor && asNavFor !== null) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;
    };

    Slick.prototype.asNavFor = function (index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if (asNavFor !== null && typeof asNavFor === 'object') {
            asNavFor.each(function () {
                var target = $(this).slick('getSlick');
                if (!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }
    };

    Slick.prototype.applyTransition = function (slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.autoPlay = function () {

        var _ = this;

        _.autoPlayClear();

        if (_.slideCount > _.options.slidesToShow) {
            _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
        }
    };

    Slick.prototype.autoPlayClear = function () {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }
    };

    Slick.prototype.autoPlayIterator = function () {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if (!_.paused && !_.interrupted && !_.focussed) {

            if (_.options.infinite === false) {

                if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {
                    _.direction = 0;
                } else if (_.direction === 0) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if (_.currentSlide - 1 === 0) {
                        _.direction = 1;
                    }
                }
            }

            _.slideHandler(slideTo);
        }
    };

    Slick.prototype.buildArrows = function () {

        var _ = this;

        if (_.options.arrows === true) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if (_.slideCount > _.options.slidesToShow) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                }
            } else {

                _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({
                    'aria-disabled': 'true',
                    'tabindex': '-1'
                });
            }
        }
    };

    Slick.prototype.buildDots = function () {

        var _ = this,
            i,
            dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');
        }
    };

    Slick.prototype.buildOut = function () {

        var _ = this;

        _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }
    };

    Slick.prototype.buildRows = function () {

        var _ = this,
            a,
            b,
            c,
            newSlides,
            numOfSlides,
            originalSlides,
            slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if (_.options.rows > 1) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);

            for (a = 0; a < numOfSlides; a++) {
                var slide = document.createElement('div');
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children().css({
                'width': 100 / _.options.slidesPerRow + '%',
                'display': 'inline-block'
            });
        }
    };

    Slick.prototype.checkResponsive = function (initial, forceUpdate) {

        var _ = this,
            breakpoint,
            targetBreakpoint,
            respondToWidth,
            triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if (!initial && triggerBreakpoint !== false) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }
    };

    Slick.prototype.changeSlide = function (event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset,
            slideOffset,
            unevenOffset;

        // If target is a link, prevent default action.
        if ($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if (!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }
    };

    Slick.prototype.checkNavigable = function (index) {

        var _ = this,
            navigables,
            prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function () {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);
    };

    Slick.prototype.cleanUpSlideEvents = function () {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
    };

    Slick.prototype.cleanUpRows = function () {

        var _ = this,
            originalSlides;

        if (_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }
    };

    Slick.prototype.clickHandler = function (event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }
    };

    Slick.prototype.destroy = function (refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.$prevArrow.length) {

            _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }
        }

        if (_.$nextArrow && _.$nextArrow.length) {

            _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }
        }

        if (_.$slides) {

            _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {
                $(this).attr('style', $(this).data('originalStyling'));
            });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if (!refresh) {
            _.$slider.trigger('destroy', [_]);
        }
    };

    Slick.prototype.disableTransition = function (slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.fadeSlide = function (slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function () {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }
        }
    };

    Slick.prototype.fadeSlideOut = function (slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });
        }
    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.focusHandler = function () {

        var _ = this;

        _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*:not(.slick-arrow)', function (event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function () {

                if (_.options.pauseOnFocus) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }
            }, 0);
        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {

        var _ = this;
        return _.currentSlide;
    };

    Slick.prototype.getDotCount = function () {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if (!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        } else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;
    };

    Slick.prototype.getLeft = function (slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
                verticalOffset = verticalHeight * _.options.slidesToShow * -1;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
                        verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;
                    } else {
                        _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
                        verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
                verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
        } else {
            targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft = 0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft = 0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;
    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {

        var _ = this;

        return _.options[option];
    };

    Slick.prototype.getNavigableIndexes = function () {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;
    };

    Slick.prototype.getSlick = function () {

        return this;
    };

    Slick.prototype.getSlideCount = function () {

        var _ = this,
            slidesTraversed,
            swipedSlide,
            centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function (index, slide) {
                if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;
        } else {
            return _.options.slidesToScroll;
        }
    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);
    };

    Slick.prototype.init = function (creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();
        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if (_.options.autoplay) {

            _.paused = false;
            _.autoPlay();
        }
    };

    Slick.prototype.initADA = function () {
        var _ = this;
        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        _.$slideTrack.attr('role', 'listbox');

        _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {
            $(this).attr({
                'role': 'option',
                'aria-describedby': 'slick-slide' + _.instanceUid + i + ''
            });
        });

        if (_.$dots !== null) {
            _.$dots.attr('role', 'tablist').find('li').each(function (i) {
                $(this).attr({
                    'role': 'presentation',
                    'aria-selected': 'false',
                    'aria-controls': 'navigation' + _.instanceUid + i + '',
                    'id': 'slick-slide' + _.instanceUid + i + ''
                });
            }).first().attr('aria-selected', 'true').end().find('button').attr('role', 'button').end().closest('div').attr('role', 'toolbar');
        }
        _.activateADA();
    };

    Slick.prototype.initArrowEvents = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.off('click.slick').on('click.slick', {
                message: 'previous'
            }, _.changeSlide);
            _.$nextArrow.off('click.slick').on('click.slick', {
                message: 'next'
            }, _.changeSlide);
        }
    };

    Slick.prototype.initDotEvents = function () {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);
        }

        if (_.options.dots === true && _.options.pauseOnDotsHover === true) {

            $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initSlideEvents = function () {

        var _ = this;

        if (_.options.pauseOnHover) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initializeEvents = function () {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);
    };

    Slick.prototype.initUI = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();
        }
    };

    Slick.prototype.keyHandler = function (event) {

        var _ = this;
        //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' : 'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }
    };

    Slick.prototype.lazyLoad = function () {

        var _ = this,
            loadRange,
            cloneRange,
            rangeStart,
            rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function () {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function () {

                    image.animate({ opacity: 0 }, 100, function () {
                        image.attr('src', imageSource).animate({ opacity: 1 }, 200, function () {
                            image.removeAttr('data-lazy').removeClass('slick-loading');
                        });
                        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                    });
                };

                imageToLoad.onerror = function () {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);
                };

                imageToLoad.src = imageSource;
            });
        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }
    };

    Slick.prototype.loadSlider = function () {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }
    };

    Slick.prototype.next = Slick.prototype.slickNext = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });
    };

    Slick.prototype.orientationChange = function () {

        var _ = this;

        _.checkResponsive();
        _.setPosition();
    };

    Slick.prototype.pause = Slick.prototype.slickPause = function () {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;
    };

    Slick.prototype.play = Slick.prototype.slickPlay = function () {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;
    };

    Slick.prototype.postSlide = function (index) {

        var _ = this;

        if (!_.unslicked) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            _.setPosition();

            _.swipeLeft = null;

            if (_.options.autoplay) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();
            }
        }
    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });
    };

    Slick.prototype.preventDefault = function (event) {

        event.preventDefault();
    };

    Slick.prototype.progressiveLazyLoad = function (tryCount) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $('img[data-lazy]', _.$slider),
            image,
            imageSource,
            imageToLoad;

        if ($imgsToLoad.length) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function () {

                image.attr('src', imageSource).removeAttr('data-lazy').removeClass('slick-loading');

                if (_.options.adaptiveHeight === true) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                _.progressiveLazyLoad();
            };

            imageToLoad.onerror = function () {

                if (tryCount < 3) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout(function () {
                        _.progressiveLazyLoad(tryCount + 1);
                    }, 500);
                } else {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                    _.progressiveLazyLoad();
                }
            };

            imageToLoad.src = imageSource;
        } else {

            _.$slider.trigger('allImagesLoaded', [_]);
        }
    };

    Slick.prototype.refresh = function (initializing) {

        var _ = this,
            currentSlide,
            lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if (!initializing) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);
        }
    };

    Slick.prototype.registerBreakpoints = function () {

        var _ = this,
            breakpoint,
            currentBreakpoint,
            l,
            responsiveSettings = _.options.responsive || null;

        if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {

            _.respondTo = _.options.respondTo || 'window';

            for (breakpoint in responsiveSettings) {

                l = _.breakpoints.length - 1;
                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while (l >= 0) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
                }
            }

            _.breakpoints.sort(function (a, b) {
                return _.options.mobileFirst ? a - b : b - a;
            });
        }
    };

    Slick.prototype.reinit = function () {

        var _ = this;

        _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);
    };

    Slick.prototype.resize = function () {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function () {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) {
                    _.setPosition();
                }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {

        var _ = this;

        if (typeof index === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.setCSS = function (position) {

        var _ = this,
            positionProps = {},
            x,
            y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }
    };

    Slick.prototype.setDimensions = function () {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: '0px ' + _.options.centerPadding
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: _.options.centerPadding + ' 0px'
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();

        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));
        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
    };

    Slick.prototype.setFade = function () {

        var _ = this,
            targetLeft;

        _.$slides.each(function (index, element) {
            targetLeft = _.slideWidth * index * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });
    };

    Slick.prototype.setHeight = function () {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }
    };

    Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {

        /**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */

        var _ = this,
            l,
            item,
            option,
            value,
            refresh = false,
            type;

        if ($.type(arguments[0]) === 'object') {

            option = arguments[0];
            refresh = arguments[1];
            type = 'multiple';
        } else if ($.type(arguments[0]) === 'string') {

            option = arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {

                type = 'responsive';
            } else if (typeof arguments[1] !== 'undefined') {

                type = 'single';
            }
        }

        if (type === 'single') {

            _.options[option] = value;
        } else if (type === 'multiple') {

            $.each(option, function (opt, val) {

                _.options[opt] = val;
            });
        } else if (type === 'responsive') {

            for (item in value) {

                if ($.type(_.options.responsive) !== 'array') {

                    _.options.responsive = [value[item]];
                } else {

                    l = _.options.responsive.length - 1;

                    // loop through the responsive object and splice out duplicates.
                    while (l >= 0) {

                        if (_.options.responsive[l].breakpoint === value[item].breakpoint) {

                            _.options.responsive.splice(l, 1);
                        }

                        l--;
                    }

                    _.options.responsive.push(value[item]);
                }
            }
        }

        if (refresh) {

            _.unload();
            _.reinit();
        }
    };

    Slick.prototype.setPosition = function () {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);
    };

    Slick.prototype.setProps = function () {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if (_.options.fade) {
            if (typeof _.options.zIndex === 'number') {
                if (_.options.zIndex < 3) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;
    };

    Slick.prototype.setSlideClasses = function (index) {

        var _ = this,
            centerOffset,
            allSlides,
            indexOffset,
            remainder;

        allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');

        _.$slides.eq(index).addClass('slick-current');

        if (_.options.centerMode === true) {

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {

                    _.$slides.slice(index - centerOffset, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides.slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');
                }

                if (index === 0) {

                    allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');
                } else if (index === _.slideCount - 1) {

                    allSlides.eq(_.options.slidesToShow).addClass('slick-center');
                }
            }

            _.$slides.eq(index).addClass('slick-center');
        } else {

            if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {

                _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides.addClass('slick-active').attr('aria-hidden', 'false');
            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {

                    allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
                }
            }
        }

        if (_.options.lazyLoad === 'ondemand') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function () {

        var _ = this,
            i,
            slideIndex,
            infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
                    $(this).attr('id', '');
                });
            }
        }
    };

    Slick.prototype.interrupt = function (toggle) {

        var _ = this;

        if (!toggle) {
            _.autoPlay();
        }
        _.interrupted = toggle;
    };

    Slick.prototype.selectHandler = function (event) {

        var _ = this;

        var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.setSlideClasses(index);
            _.asNavFor(index);
            return;
        }

        _.slideHandler(index);
    };

    Slick.prototype.slideHandler = function (index, sync, dontAnimate) {

        var targetSlide,
            animSlide,
            oldSlide,
            slideLeft,
            targetLeft = null,
            _ = this,
            navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if (_.options.autoplay) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if (_.options.asNavFor) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if (navTarget.slideCount <= navTarget.options.slidesToShow) {
                navTarget.setSlideClasses(_.currentSlide);
            }
        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function () {
                    _.postSlide(animSlide);
                });
            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function () {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }
    };

    Slick.prototype.startLoad = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();
        }

        _.$slider.addClass('slick-loading');
    };

    Slick.prototype.swipeDirection = function () {

        var xDist,
            yDist,
            r,
            swipeAngle,
            _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return _.options.rtl === false ? 'right' : 'left';
        }
        if (_.options.verticalSwiping === true) {
            if (swipeAngle >= 35 && swipeAngle <= 135) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';
    };

    Slick.prototype.swipeEnd = function (event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.interrupted = false;
        _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;

        if (_.touchObject.curX === undefined) {
            return false;
        }

        if (_.touchObject.edgeHit === true) {
            _.$slider.trigger('edge', [_, _.swipeDirection()]);
        }

        if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {

            direction = _.swipeDirection();

            switch (direction) {

                case 'left':
                case 'down':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:

            }

            if (direction != 'vertical') {

                _.slideHandler(slideCount);
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction]);
            }
        } else {

            if (_.touchObject.startX !== _.touchObject.curX) {

                _.slideHandler(_.currentSlide);
                _.touchObject = {};
            }
        }
    };

    Slick.prototype.swipeHandler = function (event) {

        var _ = this;

        if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }
    };

    Slick.prototype.swipeMove = function (event) {

        var _ = this,
            edgeWasHit = false,
            curLeft,
            swipeDirection,
            swipeLength,
            positionOffset,
            touches;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
        }

        swipeDirection = _.swipeDirection();

        if (swipeDirection === 'vertical') {
            return;
        }

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }

        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);
    };

    Slick.prototype.swipeStart = function (event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;
    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.unload = function () {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');
    };

    Slick.prototype.unslick = function (fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();
    };

    Slick.prototype.updateArrows = function () {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            }
        }
    };

    Slick.prototype.updateDots = function () {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots.find('li').removeClass('slick-active').attr('aria-hidden', 'true');

            _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active').attr('aria-hidden', 'false');
        }
    };

    Slick.prototype.visibility = function () {

        var _ = this;

        if (_.options.autoplay) {

            if (document[_.hidden]) {

                _.interrupted = true;
            } else {

                _.interrupted = false;
            }
        }
    };

    $.fn.slick = function () {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };
});
;/*!
 * smooth-scroll v10.1.0: Animate scrolling to anchor links
 * (c) 2016 Chris Ferdinandi
 * MIT License
 * http://github.com/cferdinandi/smooth-scroll
 */

(function (root, factory) {
	if (typeof define === 'function' && define.amd) {
		define([], factory(root));
	} else if (typeof exports === 'object') {
		module.exports = factory(root);
	} else {
		root.smoothScroll = factory(root);
	}
})(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {

	'use strict';

	//
	// Variables
	//

	var smoothScroll = {}; // Object for public APIs
	var supports = 'querySelector' in document && 'addEventListener' in root; // Feature test
	var settings, anchor, toggle, fixedHeader, headerHeight, eventTimeout, animationInterval;

	// Default settings
	var defaults = {
		selector: '[data-scroll]',
		selectorHeader: null,
		speed: 500,
		easing: 'easeInOutCubic',
		offset: 0,
		callback: function () {}
	};

	//
	// Methods
	//

	/**
  * Merge two or more objects. Returns a new object.
  * @private
  * @param {Boolean}  deep     If true, do a deep (or recursive) merge [optional]
  * @param {Object}   objects  The objects to merge together
  * @returns {Object}          Merged values of defaults and options
  */
	var extend = function () {

		// Variables
		var extended = {};
		var deep = false;
		var i = 0;
		var length = arguments.length;

		// Check if a deep merge
		if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {
			deep = arguments[0];
			i++;
		}

		// Merge the object into the extended object
		var merge = function (obj) {
			for (var prop in obj) {
				if (Object.prototype.hasOwnProperty.call(obj, prop)) {
					// If deep merge and property is an object, merge properties
					if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {
						extended[prop] = extend(true, extended[prop], obj[prop]);
					} else {
						extended[prop] = obj[prop];
					}
				}
			}
		};

		// Loop through each object and conduct a merge
		for (; i < length; i++) {
			var obj = arguments[i];
			merge(obj);
		}

		return extended;
	};

	/**
  * Get the height of an element.
  * @private
  * @param  {Node} elem The element to get the height of
  * @return {Number}    The element's height in pixels
  */
	var getHeight = function (elem) {
		return Math.max(elem.scrollHeight, elem.offsetHeight, elem.clientHeight);
	};

	/**
  * Get the closest matching element up the DOM tree.
  * @private
  * @param  {Element} elem     Starting element
  * @param  {String}  selector Selector to match against (class, ID, data attribute, or tag)
  * @return {Boolean|Element}  Returns null if not match found
  */
	var getClosest = function (elem, selector) {

		// Variables
		var firstChar = selector.charAt(0);
		var supports = 'classList' in document.documentElement;
		var attribute, value;

		// If selector is a data attribute, split attribute from value
		if (firstChar === '[') {
			selector = selector.substr(1, selector.length - 2);
			attribute = selector.split('=');

			if (attribute.length > 1) {
				value = true;
				attribute[1] = attribute[1].replace(/"/g, '').replace(/'/g, '');
			}
		}

		// Get closest match
		for (; elem && elem !== document && elem.nodeType === 1; elem = elem.parentNode) {

			// If selector is a class
			if (firstChar === '.') {
				if (supports) {
					if (elem.classList.contains(selector.substr(1))) {
						return elem;
					}
				} else {
					if (new RegExp('(^|\\s)' + selector.substr(1) + '(\\s|$)').test(elem.className)) {
						return elem;
					}
				}
			}

			// If selector is an ID
			if (firstChar === '#') {
				if (elem.id === selector.substr(1)) {
					return elem;
				}
			}

			// If selector is a data attribute
			if (firstChar === '[') {
				if (elem.hasAttribute(attribute[0])) {
					if (value) {
						if (elem.getAttribute(attribute[0]) === attribute[1]) {
							return elem;
						}
					} else {
						return elem;
					}
				}
			}

			// If selector is a tag
			if (elem.tagName.toLowerCase() === selector) {
				return elem;
			}
		}

		return null;
	};

	/**
  * Escape special characters for use with querySelector
  * @private
  * @param {String} id The anchor ID to escape
  * @author Mathias Bynens
  * @link https://github.com/mathiasbynens/CSS.escape
  */
	var escapeCharacters = function (id) {

		// Remove leading hash
		if (id.charAt(0) === '#') {
			id = id.substr(1);
		}

		var string = String(id);
		var length = string.length;
		var index = -1;
		var codeUnit;
		var result = '';
		var firstCodeUnit = string.charCodeAt(0);
		while (++index < length) {
			codeUnit = string.charCodeAt(index);
			// Note: there’s no need to special-case astral symbols, surrogate
			// pairs, or lone surrogates.

			// If the character is NULL (U+0000), then throw an
			// `InvalidCharacterError` exception and terminate these steps.
			if (codeUnit === 0x0000) {
				throw new InvalidCharacterError('Invalid character: the input contains U+0000.');
			}

			if (
			// If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
			// U+007F, […]
			codeUnit >= 0x0001 && codeUnit <= 0x001F || codeUnit == 0x007F ||
			// If the character is the first character and is in the range [0-9]
			// (U+0030 to U+0039), […]
			index === 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039 ||
			// If the character is the second character and is in the range [0-9]
			// (U+0030 to U+0039) and the first character is a `-` (U+002D), […]
			index === 1 && codeUnit >= 0x0030 && codeUnit <= 0x0039 && firstCodeUnit === 0x002D) {
				// http://dev.w3.org/csswg/cssom/#escape-a-character-as-code-point
				result += '\\' + codeUnit.toString(16) + ' ';
				continue;
			}

			// If the character is not handled by one of the above rules and is
			// greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or
			// is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to
			// U+005A), or [a-z] (U+0061 to U+007A), […]
			if (codeUnit >= 0x0080 || codeUnit === 0x002D || codeUnit === 0x005F || codeUnit >= 0x0030 && codeUnit <= 0x0039 || codeUnit >= 0x0041 && codeUnit <= 0x005A || codeUnit >= 0x0061 && codeUnit <= 0x007A) {
				// the character itself
				result += string.charAt(index);
				continue;
			}

			// Otherwise, the escaped character.
			// http://dev.w3.org/csswg/cssom/#escape-a-character
			result += '\\' + string.charAt(index);
		}

		return '#' + result;
	};

	/**
  * Calculate the easing pattern
  * @private
  * @link https://gist.github.com/gre/1650294
  * @param {String} type Easing pattern
  * @param {Number} time Time animation should take to complete
  * @returns {Number}
  */
	var easingPattern = function (type, time) {
		var pattern;
		if (type === 'easeInQuad') pattern = time * time; // accelerating from zero velocity
		if (type === 'easeOutQuad') pattern = time * (2 - time); // decelerating to zero velocity
		if (type === 'easeInOutQuad') pattern = time < 0.5 ? 2 * time * time : -1 + (4 - 2 * time) * time; // acceleration until halfway, then deceleration
		if (type === 'easeInCubic') pattern = time * time * time; // accelerating from zero velocity
		if (type === 'easeOutCubic') pattern = --time * time * time + 1; // decelerating to zero velocity
		if (type === 'easeInOutCubic') pattern = time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1; // acceleration until halfway, then deceleration
		if (type === 'easeInQuart') pattern = time * time * time * time; // accelerating from zero velocity
		if (type === 'easeOutQuart') pattern = 1 - --time * time * time * time; // decelerating to zero velocity
		if (type === 'easeInOutQuart') pattern = time < 0.5 ? 8 * time * time * time * time : 1 - 8 * --time * time * time * time; // acceleration until halfway, then deceleration
		if (type === 'easeInQuint') pattern = time * time * time * time * time; // accelerating from zero velocity
		if (type === 'easeOutQuint') pattern = 1 + --time * time * time * time * time; // decelerating to zero velocity
		if (type === 'easeInOutQuint') pattern = time < 0.5 ? 16 * time * time * time * time * time : 1 + 16 * --time * time * time * time * time; // acceleration until halfway, then deceleration
		return pattern || time; // no easing, no acceleration
	};

	/**
  * Calculate how far to scroll
  * @private
  * @param {Element} anchor The anchor element to scroll to
  * @param {Number} headerHeight Height of a fixed header, if any
  * @param {Number} offset Number of pixels by which to offset scroll
  * @returns {Number}
  */
	var getEndLocation = function (anchor, headerHeight, offset) {
		var location = 0;
		if (anchor.offsetParent) {
			do {
				location += anchor.offsetTop;
				anchor = anchor.offsetParent;
			} while (anchor);
		}
		location = Math.max(location - headerHeight - offset, 0);
		return Math.min(location, getDocumentHeight() - getViewportHeight());
	};

	/**
  * Determine the viewport's height
  * @private
  * @returns {Number}
  */
	var getViewportHeight = function () {
		return Math.max(document.documentElement.clientHeight, root.innerHeight || 0);
	};

	/**
  * Determine the document's height
  * @private
  * @returns {Number}
  */
	var getDocumentHeight = function () {
		return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight);
	};

	/**
  * Convert data-options attribute into an object of key/value pairs
  * @private
  * @param {String} options Link-specific options as a data attribute string
  * @returns {Object}
  */
	var getDataOptions = function (options) {
		return !options || !(typeof JSON === 'object' && typeof JSON.parse === 'function') ? {} : JSON.parse(options);
	};

	/**
  * Get the height of the fixed header
  * @private
  * @param  {Node}   header The header
  * @return {Number}        The height of the header
  */
	var getHeaderHeight = function (header) {
		return !header ? 0 : getHeight(header) + header.offsetTop;
	};

	/**
  * Bring the anchored element into focus
  * @private
  */
	var adjustFocus = function (anchor, endLocation, isNum) {

		// Don't run if scrolling to a number on the page
		if (isNum) return;

		// Otherwise, bring anchor element into focus
		anchor.focus();
		if (document.activeElement.id !== anchor.id) {
			anchor.setAttribute('tabindex', '-1');
			anchor.focus();
			anchor.style.outline = 'none';
		}
		root.scrollTo(0, endLocation);
	};

	/**
  * Start/stop the scrolling animation
  * @public
  * @param {Node|Number} anchor  The element or position to scroll to
  * @param {Element}     toggle  The element that toggled the scroll event
  * @param {Object}      options
  */
	smoothScroll.animateScroll = function (anchor, toggle, options) {

		// Options and overrides
		var overrides = getDataOptions(toggle ? toggle.getAttribute('data-options') : null);
		var animateSettings = extend(settings || defaults, options || {}, overrides); // Merge user options with defaults

		// Selectors and variables
		var isNum = Object.prototype.toString.call(anchor) === '[object Number]' ? true : false;
		var anchorElem = isNum || !anchor.tagName ? null : anchor;
		if (!isNum && !anchorElem) return;
		var startLocation = root.pageYOffset; // Current location on the page
		if (animateSettings.selectorHeader && !fixedHeader) {
			// Get the fixed header if not already set
			fixedHeader = document.querySelector(animateSettings.selectorHeader);
		}
		if (!headerHeight) {
			// Get the height of a fixed header if one exists and not already set
			headerHeight = getHeaderHeight(fixedHeader);
		}
		var endLocation = isNum ? anchor : getEndLocation(anchorElem, headerHeight, parseInt(animateSettings.offset, 10)); // Location to scroll to
		var distance = endLocation - startLocation; // distance to travel
		var documentHeight = getDocumentHeight();
		var timeLapsed = 0;
		var percentage, position;

		/**
   * Stop the scroll animation when it reaches its target (or the bottom/top of page)
   * @private
   * @param {Number} position Current position on the page
   * @param {Number} endLocation Scroll to location
   * @param {Number} animationInterval How much to scroll on this loop
   */
		var stopAnimateScroll = function (position, endLocation, animationInterval) {
			var currentLocation = root.pageYOffset;
			if (position == endLocation || currentLocation == endLocation || root.innerHeight + currentLocation >= documentHeight) {

				// Clear the animation timer
				clearInterval(animationInterval);

				// Bring the anchored element into focus
				adjustFocus(anchor, endLocation, isNum);

				// Run callback after animation complete
				animateSettings.callback(anchor, toggle);
			}
		};

		/**
   * Loop scrolling animation
   * @private
   */
		var loopAnimateScroll = function () {
			timeLapsed += 16;
			percentage = timeLapsed / parseInt(animateSettings.speed, 10);
			percentage = percentage > 1 ? 1 : percentage;
			position = startLocation + distance * easingPattern(animateSettings.easing, percentage);
			root.scrollTo(0, Math.floor(position));
			stopAnimateScroll(position, endLocation, animationInterval);
		};

		/**
   * Set interval timer
   * @private
   */
		var startAnimateScroll = function () {
			clearInterval(animationInterval);
			animationInterval = setInterval(loopAnimateScroll, 16);
		};

		/**
   * Reset position to fix weird iOS bug
   * @link https://github.com/cferdinandi/smooth-scroll/issues/45
   */
		if (root.pageYOffset === 0) {
			root.scrollTo(0, 0);
		}

		// Start scrolling animation
		startAnimateScroll();
	};

	/**
  * Handle has change event
  * @private
  */
	var hashChangeHandler = function (event) {

		// Get hash from URL
		var hash = root.location.hash;

		// Only run if there's an anchor element to scroll to
		if (!anchor) return;

		// Reset the anchor element's ID
		anchor.id = anchor.getAttribute('data-scroll-id');

		// Scroll to the anchored content
		smoothScroll.animateScroll(anchor, toggle);

		// Reset anchor and toggle
		anchor = null;
		toggle = null;
	};

	/**
  * If smooth scroll element clicked, animate scroll
  * @private
  */
	var clickHandler = function (event) {

		// Don't run if right-click or command/control + click
		if (event.button !== 0 || event.metaKey || event.ctrlKey) return;

		// Check if a smooth scroll link was clicked
		toggle = getClosest(event.target, settings.selector);
		if (!toggle || toggle.tagName.toLowerCase() !== 'a') return;

		// Only run if link is an anchor and points to the current page
		if (toggle.hostname !== root.location.hostname || toggle.pathname !== root.location.pathname || !/#/.test(toggle.href)) return;

		// Get the sanitized hash
		var hash = escapeCharacters(toggle.hash);

		// If the hash is empty, scroll to the top of the page
		if (hash === '#') {

			// Prevent default link behavior
			event.preventDefault();

			// Set the anchored element
			anchor = document.body;

			// Save or create the ID as a data attribute and remove it (prevents scroll jump)
			var id = anchor.id ? anchor.id : 'smooth-scroll-top';
			anchor.setAttribute('data-scroll-id', id);
			anchor.id = '';

			// If no hash change event will happen, fire manually
			// Otherwise, update the hash
			if (root.location.hash.substring(1) === id) {
				hashChangeHandler();
			} else {
				root.location.hash = id;
			}

			return;
		}

		// Get the anchored element
		anchor = document.querySelector(hash);

		// If anchored element exists, save the ID as a data attribute and remove it (prevents scroll jump)
		if (!anchor) return;
		anchor.setAttribute('data-scroll-id', anchor.id);
		anchor.id = '';

		// If no hash change event will happen, fire manually
		if (toggle.hash === root.location.hash) {
			event.preventDefault();
			hashChangeHandler();
		}
	};

	/**
  * On window scroll and resize, only run events at a rate of 15fps for better performance
  * @private
  * @param  {Function} eventTimeout Timeout function
  * @param  {Object} settings
  */
	var resizeThrottler = function (event) {
		if (!eventTimeout) {
			eventTimeout = setTimeout(function () {
				eventTimeout = null; // Reset timeout
				headerHeight = getHeaderHeight(fixedHeader); // Get the height of a fixed header if one exists
			}, 66);
		}
	};

	/**
  * Destroy the current initialization.
  * @public
  */
	smoothScroll.destroy = function () {

		// If plugin isn't already initialized, stop
		if (!settings) return;

		// Remove event listeners
		document.removeEventListener('click', clickHandler, false);
		root.removeEventListener('resize', resizeThrottler, false);

		// Reset varaibles
		settings = null;
		anchor = null;
		toggle = null;
		fixedHeader = null;
		headerHeight = null;
		eventTimeout = null;
		animationInterval = null;
	};

	/**
  * Initialize Smooth Scroll
  * @public
  * @param {Object} options User settings
  */
	smoothScroll.init = function (options) {

		// feature test
		if (!supports) return;

		// Destroy any existing initializations
		smoothScroll.destroy();

		// Selectors and variables
		settings = extend(defaults, options || {}); // Merge user options with defaults
		fixedHeader = settings.selectorHeader ? document.querySelector(settings.selectorHeader) : null; // Get the fixed header
		headerHeight = getHeaderHeight(fixedHeader);

		// When a toggle is clicked, run the click handler
		document.addEventListener('click', clickHandler, false);

		// Listen for hash changes
		root.addEventListener('hashchange', hashChangeHandler, false);

		// If window is resized and there's a fixed header, recalculate its size
		if (fixedHeader) {
			root.addEventListener('resize', resizeThrottler, false);
		}
	};

	//
	// Public APIs
	//

	return smoothScroll;
});
;
$(window).bind(' load resize orientationChange ', function () {
  var footer = $("#footer-container");
  var pos = footer.position();
  var height = $(window).height();
  height = height - pos.top;
  height = height - footer.height() - 1;

  function stickyFooter() {
    footer.css({
      'margin-top': height + 'px'
    });
  }

  if (height > 0) {
    stickyFooter();
  }
});
;/* ===================================================
 * wiawUniversalAjax.js v1.0
 * ===================================================
 */
!function ($) {

	$(function () {

		// Click the button!
		$(".archive__load-more a").click(function () {

			// alert('say whaaa?');

			var url = $(this).attr('href'),
			    split_url = url.slice(0, -1).split('/'),
			    page_num = split_url[split_url.length - 1],
			    vars = {};

			if (isNaN(page_num)) {
				page_num = split_url[split_url.length - 2];
			}

			// Set up the correct vars
			if ($("#wiaw_taxonomy").length >= 1) {
				vars.taxonomy = $("#wiaw_taxonomy").val();
				vars.term_id = $("#wiaw_term_id").val();
			} else {
				vars.post_type = $("#wiaw_post_type").val();
			}

			console.log(split_url);
			console.log(vars);
			console.log(page_num);

			wiaw_get_more_posts(page_num, vars);

			return false;
		});

		// Get Posts AJAX Call
		function wiaw_get_more_posts(page_num, vars) {

			// Show the ajax loader
			$(".ajax-spinner").show();

			// make sure page_num is being read as an INT
			var page_num = parseInt(page_num);

			// Do the AJAX call
			$.ajax({
				url: js_vars.ajaxurl,
				type: 'post',
				data: {
					action: 'archive_load_more',
					page: page_num,
					data: vars
				},
				error: function (exception) {
					alert('Exeption:' + exception);
				},
				success: function (html) {

					// console.log(html);

					// If there were any results
					if (html != '') {

						// Update the next page URL
						var btn = $(".archive__load-more a"),
						    btn_url = btn.attr('href');

						btn_url = btn_url.slice(0, -1).split('/'), btn_url[btn_url.length - 1] = page_num + 1, btn_url = btn_url.join('/') + '/';

						btn.attr('href', btn_url);

						// Insert the HTML
						$("#ajax-before-me").before(html);

						QuickLookInit(); // added this so that the quicklook works after load more. See app.js function called QuickLookInit

						// No results
					} else {

						// say no posts
						$("#ajax-before-me").before('<div class="alert alert-warning"><p>No further results.</p></div>');

						// hide the next button
						$(".archive__load-more").hide();
					}

					// Hide the ajax loader
					$(".ajax-spinner").hide();
				}
			});
		};
	});
}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndoYXQtaW5wdXQuanMiLCJmb3VuZGF0aW9uLmNvcmUuanMiLCJmb3VuZGF0aW9uLnV0aWwuYm94LmpzIiwiZm91bmRhdGlvbi51dGlsLmtleWJvYXJkLmpzIiwiZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnkuanMiLCJmb3VuZGF0aW9uLnV0aWwubW90aW9uLmpzIiwiZm91bmRhdGlvbi51dGlsLm5lc3QuanMiLCJmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlci5qcyIsImZvdW5kYXRpb24udXRpbC50b3VjaC5qcyIsImZvdW5kYXRpb24udXRpbC50cmlnZ2Vycy5qcyIsImZvdW5kYXRpb24uYWJpZGUuanMiLCJmb3VuZGF0aW9uLmFjY29yZGlvbi5qcyIsImZvdW5kYXRpb24uYWNjb3JkaW9uTWVudS5qcyIsImZvdW5kYXRpb24uZHJpbGxkb3duLmpzIiwiZm91bmRhdGlvbi5kcm9wZG93bi5qcyIsImZvdW5kYXRpb24uZHJvcGRvd25NZW51LmpzIiwiZm91bmRhdGlvbi5lcXVhbGl6ZXIuanMiLCJmb3VuZGF0aW9uLmludGVyY2hhbmdlLmpzIiwiZm91bmRhdGlvbi5tYWdlbGxhbi5qcyIsImZvdW5kYXRpb24ub2ZmY2FudmFzLmpzIiwiZm91bmRhdGlvbi5vcmJpdC5qcyIsImZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnUuanMiLCJmb3VuZGF0aW9uLnJlc3BvbnNpdmVUb2dnbGUuanMiLCJmb3VuZGF0aW9uLnJldmVhbC5qcyIsImZvdW5kYXRpb24uc2xpZGVyLmpzIiwiZm91bmRhdGlvbi5zdGlja3kuanMiLCJmb3VuZGF0aW9uLnRhYnMuanMiLCJmb3VuZGF0aW9uLnRvZ2dsZXIuanMiLCJmb3VuZGF0aW9uLnRvb2x0aXAuanMiLCJtb3Rpb24tdWkuanMiLCJmbGV4LXZpZGVvLmpzIiwiaW5pdC1mb3VuZGF0aW9uLmpzIiwiam95cmlkZS1kZW1vLmpzIiwianF1ZXJ5Lm1hZ25pZmljLXBvcHVwLmpzIiwib2ZmQ2FudmFzLmpzIiwicGx5ci5qcyIsInNsaWNrLmpzIiwic21vb3RoLXNjcm9sbC5qcyIsInN0aWNreWZvb3Rlci5qcyIsIndpYXdVbml2ZXJzYWxBamF4LmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsIndoYXRJbnB1dCIsImFjdGl2ZUtleXMiLCJib2R5IiwiYnVmZmVyIiwiY3VycmVudElucHV0Iiwibm9uVHlwaW5nSW5wdXRzIiwibW91c2VXaGVlbCIsImRldGVjdFdoZWVsIiwiaWdub3JlTWFwIiwiaW5wdXRNYXAiLCJpbnB1dFR5cGVzIiwia2V5TWFwIiwicG9pbnRlck1hcCIsInRpbWVyIiwiZXZlbnRCdWZmZXIiLCJjbGVhclRpbWVyIiwic2V0SW5wdXQiLCJldmVudCIsInNldFRpbWVvdXQiLCJidWZmZXJlZEV2ZW50IiwidW5CdWZmZXJlZEV2ZW50IiwiY2xlYXJUaW1lb3V0IiwiZXZlbnRLZXkiLCJrZXkiLCJ2YWx1ZSIsInR5cGUiLCJwb2ludGVyVHlwZSIsImV2ZW50VGFyZ2V0IiwidGFyZ2V0IiwiZXZlbnRUYXJnZXROb2RlIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImV2ZW50VGFyZ2V0VHlwZSIsImdldEF0dHJpYnV0ZSIsImhhc0F0dHJpYnV0ZSIsImluZGV4T2YiLCJzd2l0Y2hJbnB1dCIsImxvZ0tleXMiLCJzdHJpbmciLCJzZXRBdHRyaWJ1dGUiLCJwdXNoIiwia2V5Q29kZSIsIndoaWNoIiwic3JjRWxlbWVudCIsInVuTG9nS2V5cyIsImFycmF5UG9zIiwic3BsaWNlIiwiYmluZEV2ZW50cyIsImRvY3VtZW50IiwiUG9pbnRlckV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIk1TUG9pbnRlckV2ZW50IiwiY3JlYXRlRWxlbWVudCIsIm9ubW91c2V3aGVlbCIsInVuZGVmaW5lZCIsIkFycmF5IiwicHJvdG90eXBlIiwiYXNrIiwia2V5cyIsInR5cGVzIiwic2V0IiwiJCIsIkZPVU5EQVRJT05fVkVSU0lPTiIsIkZvdW5kYXRpb24iLCJ2ZXJzaW9uIiwiX3BsdWdpbnMiLCJfdXVpZHMiLCJydGwiLCJhdHRyIiwicGx1Z2luIiwibmFtZSIsImNsYXNzTmFtZSIsImZ1bmN0aW9uTmFtZSIsImF0dHJOYW1lIiwiaHlwaGVuYXRlIiwicmVnaXN0ZXJQbHVnaW4iLCJwbHVnaW5OYW1lIiwiY29uc3RydWN0b3IiLCJ1dWlkIiwiR2V0WW9EaWdpdHMiLCIkZWxlbWVudCIsImRhdGEiLCJ0cmlnZ2VyIiwidW5yZWdpc3RlclBsdWdpbiIsInJlbW92ZUF0dHIiLCJyZW1vdmVEYXRhIiwicHJvcCIsInJlSW5pdCIsInBsdWdpbnMiLCJpc0pRIiwiZWFjaCIsIl9pbml0IiwiX3RoaXMiLCJmbnMiLCJwbGdzIiwiZm9yRWFjaCIsInAiLCJmb3VuZGF0aW9uIiwiT2JqZWN0IiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwibGVuZ3RoIiwibmFtZXNwYWNlIiwiTWF0aCIsInJvdW5kIiwicG93IiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsInJlZmxvdyIsImVsZW0iLCJpIiwiJGVsZW0iLCJmaW5kIiwiYWRkQmFjayIsIiRlbCIsIm9wdHMiLCJ3YXJuIiwidGhpbmciLCJzcGxpdCIsImUiLCJvcHQiLCJtYXAiLCJlbCIsInRyaW0iLCJwYXJzZVZhbHVlIiwiZXIiLCJnZXRGbk5hbWUiLCJ0cmFuc2l0aW9uZW5kIiwidHJhbnNpdGlvbnMiLCJlbmQiLCJ0Iiwic3R5bGUiLCJ0cmlnZ2VySGFuZGxlciIsInV0aWwiLCJ0aHJvdHRsZSIsImZ1bmMiLCJkZWxheSIsImNvbnRleHQiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJtZXRob2QiLCIkbWV0YSIsIiRub0pTIiwiYXBwZW5kVG8iLCJoZWFkIiwicmVtb3ZlQ2xhc3MiLCJNZWRpYVF1ZXJ5IiwiY2FsbCIsInBsdWdDbGFzcyIsIlJlZmVyZW5jZUVycm9yIiwiVHlwZUVycm9yIiwiZm4iLCJEYXRlIiwibm93IiwiZ2V0VGltZSIsInZlbmRvcnMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ2cCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImxhc3RUaW1lIiwiY2FsbGJhY2siLCJuZXh0VGltZSIsIm1heCIsInBlcmZvcm1hbmNlIiwic3RhcnQiLCJGdW5jdGlvbiIsImJpbmQiLCJvVGhpcyIsImFBcmdzIiwiZlRvQmluZCIsImZOT1AiLCJmQm91bmQiLCJjb25jYXQiLCJmdW5jTmFtZVJlZ2V4IiwicmVzdWx0cyIsImV4ZWMiLCJzdHIiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJyZXBsYWNlIiwialF1ZXJ5IiwiQm94IiwiSW1Ob3RUb3VjaGluZ1lvdSIsIkdldERpbWVuc2lvbnMiLCJHZXRPZmZzZXRzIiwiZWxlbWVudCIsInBhcmVudCIsImxyT25seSIsInRiT25seSIsImVsZURpbXMiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJwYXJEaW1zIiwib2Zmc2V0IiwiaGVpZ2h0Iiwid2lkdGgiLCJ3aW5kb3dEaW1zIiwiYWxsRGlycyIsIkVycm9yIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhclJlY3QiLCJwYXJlbnROb2RlIiwid2luUmVjdCIsIndpblkiLCJwYWdlWU9mZnNldCIsIndpblgiLCJwYWdlWE9mZnNldCIsInBhcmVudERpbXMiLCJhbmNob3IiLCJwb3NpdGlvbiIsInZPZmZzZXQiLCJoT2Zmc2V0IiwiaXNPdmVyZmxvdyIsIiRlbGVEaW1zIiwiJGFuY2hvckRpbXMiLCJrZXlDb2RlcyIsImNvbW1hbmRzIiwiS2V5Ym9hcmQiLCJnZXRLZXlDb2RlcyIsInBhcnNlS2V5IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidG9VcHBlckNhc2UiLCJzaGlmdEtleSIsImN0cmxLZXkiLCJhbHRLZXkiLCJoYW5kbGVLZXkiLCJjb21wb25lbnQiLCJmdW5jdGlvbnMiLCJjb21tYW5kTGlzdCIsImNtZHMiLCJjb21tYW5kIiwibHRyIiwiZXh0ZW5kIiwicmV0dXJuVmFsdWUiLCJoYW5kbGVkIiwidW5oYW5kbGVkIiwiZmluZEZvY3VzYWJsZSIsImZpbHRlciIsImlzIiwicmVnaXN0ZXIiLCJjb21wb25lbnROYW1lIiwia2NzIiwiayIsImtjIiwiZGVmYXVsdFF1ZXJpZXMiLCJsYW5kc2NhcGUiLCJwb3J0cmFpdCIsInJldGluYSIsInF1ZXJpZXMiLCJjdXJyZW50Iiwic2VsZiIsImV4dHJhY3RlZFN0eWxlcyIsImNzcyIsIm5hbWVkUXVlcmllcyIsInBhcnNlU3R5bGVUb09iamVjdCIsImhhc093blByb3BlcnR5IiwiX2dldEN1cnJlbnRTaXplIiwiX3dhdGNoZXIiLCJhdExlYXN0Iiwic2l6ZSIsInF1ZXJ5IiwiZ2V0IiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJtYXRjaGVkIiwib24iLCJuZXdTaXplIiwiY3VycmVudFNpemUiLCJzdHlsZU1lZGlhIiwibWVkaWEiLCJzY3JpcHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluZm8iLCJpZCIsImluc2VydEJlZm9yZSIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJtYXRjaE1lZGl1bSIsInRleHQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsInRleHRDb250ZW50Iiwic3R5bGVPYmplY3QiLCJyZWR1Y2UiLCJyZXQiLCJwYXJhbSIsInBhcnRzIiwidmFsIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaXNBcnJheSIsImluaXRDbGFzc2VzIiwiYWN0aXZlQ2xhc3NlcyIsIk1vdGlvbiIsImFuaW1hdGVJbiIsImFuaW1hdGlvbiIsImNiIiwiYW5pbWF0ZSIsImFuaW1hdGVPdXQiLCJNb3ZlIiwiZHVyYXRpb24iLCJhbmltIiwicHJvZyIsIm1vdmUiLCJ0cyIsImlzSW4iLCJlcSIsImluaXRDbGFzcyIsImFjdGl2ZUNsYXNzIiwicmVzZXQiLCJhZGRDbGFzcyIsInNob3ciLCJvZmZzZXRXaWR0aCIsIm9uZSIsImZpbmlzaCIsImhpZGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJOZXN0IiwiRmVhdGhlciIsIm1lbnUiLCJpdGVtcyIsInN1Yk1lbnVDbGFzcyIsInN1Ykl0ZW1DbGFzcyIsImhhc1N1YkNsYXNzIiwiJGl0ZW0iLCIkc3ViIiwiY2hpbGRyZW4iLCJCdXJuIiwiVGltZXIiLCJvcHRpb25zIiwibmFtZVNwYWNlIiwicmVtYWluIiwiaXNQYXVzZWQiLCJyZXN0YXJ0IiwiaW5maW5pdGUiLCJwYXVzZSIsIm9uSW1hZ2VzTG9hZGVkIiwiaW1hZ2VzIiwidW5sb2FkZWQiLCJjb21wbGV0ZSIsInNpbmdsZUltYWdlTG9hZGVkIiwibmF0dXJhbFdpZHRoIiwic3BvdFN3aXBlIiwiZW5hYmxlZCIsImRvY3VtZW50RWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwibW92ZVRocmVzaG9sZCIsInRpbWVUaHJlc2hvbGQiLCJzdGFydFBvc1giLCJzdGFydFBvc1kiLCJzdGFydFRpbWUiLCJlbGFwc2VkVGltZSIsImlzTW92aW5nIiwib25Ub3VjaEVuZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvblRvdWNoTW92ZSIsIngiLCJ0b3VjaGVzIiwicGFnZVgiLCJ5IiwicGFnZVkiLCJkeCIsImR5IiwiZGlyIiwiYWJzIiwib25Ub3VjaFN0YXJ0IiwiaW5pdCIsInRlYXJkb3duIiwic3BlY2lhbCIsInN3aXBlIiwic2V0dXAiLCJub29wIiwiYWRkVG91Y2giLCJoYW5kbGVUb3VjaCIsImNoYW5nZWRUb3VjaGVzIiwiZmlyc3QiLCJldmVudFR5cGVzIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwic2ltdWxhdGVkRXZlbnQiLCJNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTXV0YXRpb25PYnNlcnZlciIsInByZWZpeGVzIiwidHJpZ2dlcnMiLCJzdG9wUHJvcGFnYXRpb24iLCJmYWRlT3V0IiwiY2hlY2tMaXN0ZW5lcnMiLCJldmVudHNMaXN0ZW5lciIsInJlc2l6ZUxpc3RlbmVyIiwic2Nyb2xsTGlzdGVuZXIiLCJjbG9zZW1lTGlzdGVuZXIiLCJ5ZXRpQm94ZXMiLCJwbHVnTmFtZXMiLCJsaXN0ZW5lcnMiLCJqb2luIiwib2ZmIiwicGx1Z2luSWQiLCJub3QiLCJkZWJvdW5jZSIsIiRub2RlcyIsIm5vZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24iLCJtdXRhdGlvblJlY29yZHNMaXN0IiwiJHRhcmdldCIsImVsZW1lbnRPYnNlcnZlciIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsInN1YnRyZWUiLCJhdHRyaWJ1dGVGaWx0ZXIiLCJJSGVhcllvdSIsIkFiaWRlIiwiZGVmYXVsdHMiLCIkaW5wdXRzIiwiX2V2ZW50cyIsInJlc2V0Rm9ybSIsInZhbGlkYXRlRm9ybSIsInZhbGlkYXRlT24iLCJ2YWxpZGF0ZUlucHV0IiwibGl2ZVZhbGlkYXRlIiwiX3JlZmxvdyIsInJlcXVpcmVkQ2hlY2siLCJpc0dvb2QiLCJjaGVja2VkIiwiZmluZEZvcm1FcnJvciIsIiRlcnJvciIsInNpYmxpbmdzIiwiZm9ybUVycm9yU2VsZWN0b3IiLCJmaW5kTGFiZWwiLCIkbGFiZWwiLCJjbG9zZXN0IiwiZmluZFJhZGlvTGFiZWxzIiwiJGVscyIsImxhYmVscyIsImFkZEVycm9yQ2xhc3NlcyIsIiRmb3JtRXJyb3IiLCJsYWJlbEVycm9yQ2xhc3MiLCJmb3JtRXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsInJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzIiwiZ3JvdXBOYW1lIiwiJGxhYmVscyIsIiRmb3JtRXJyb3JzIiwicmVtb3ZlRXJyb3JDbGFzc2VzIiwiY2xlYXJSZXF1aXJlIiwidmFsaWRhdGVkIiwiY3VzdG9tVmFsaWRhdG9yIiwidmFsaWRhdG9yIiwiZXF1YWxUbyIsInZhbGlkYXRlUmFkaW8iLCJ2YWxpZGF0ZVRleHQiLCJtYXRjaFZhbGlkYXRpb24iLCJ2YWxpZGF0b3JzIiwiZ29vZFRvR28iLCJtZXNzYWdlIiwiYWNjIiwibm9FcnJvciIsInBhdHRlcm4iLCJpbnB1dFRleHQiLCJ2YWxpZCIsInBhdHRlcm5zIiwiUmVnRXhwIiwiJGdyb3VwIiwicmVxdWlyZWQiLCJjbGVhciIsInYiLCIkZm9ybSIsImRlc3Ryb3kiLCJhbHBoYSIsImFscGhhX251bWVyaWMiLCJpbnRlZ2VyIiwibnVtYmVyIiwiY2FyZCIsImN2diIsImVtYWlsIiwidXJsIiwiZG9tYWluIiwiZGF0ZXRpbWUiLCJkYXRlIiwidGltZSIsImRhdGVJU08iLCJtb250aF9kYXlfeWVhciIsImRheV9tb250aF95ZWFyIiwiY29sb3IiLCJBY2NvcmRpb24iLCIkdGFicyIsImlkeCIsIiRjb250ZW50IiwibGlua0lkIiwiJGluaXRBY3RpdmUiLCJkb3duIiwiJHRhYkNvbnRlbnQiLCJ0b2dnbGUiLCJuZXh0IiwiJGEiLCJmb2N1cyIsIm11bHRpRXhwYW5kIiwicHJldmlvdXMiLCJwcmV2IiwiaGFzQ2xhc3MiLCJ1cCIsImZpcnN0VGltZSIsIiRjdXJyZW50QWN0aXZlIiwic2xpZGVEb3duIiwic2xpZGVTcGVlZCIsIiRhdW50cyIsImFsbG93QWxsQ2xvc2VkIiwic2xpZGVVcCIsInN0b3AiLCJBY2NvcmRpb25NZW51IiwibXVsdGlPcGVuIiwiJG1lbnVMaW5rcyIsInN1YklkIiwiaXNBY3RpdmUiLCJpbml0UGFuZXMiLCIkc3VibWVudSIsIiRlbGVtZW50cyIsIiRwcmV2RWxlbWVudCIsIiRuZXh0RWxlbWVudCIsIm1pbiIsInBhcmVudHMiLCJvcGVuIiwiY2xvc2UiLCJjbG9zZUFsbCIsImhpZGVBbGwiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwYXJlbnRzVW50aWwiLCJhZGQiLCIkbWVudXMiLCJEcmlsbGRvd24iLCIkc3VibWVudUFuY2hvcnMiLCIkc3VibWVudXMiLCIkbWVudUl0ZW1zIiwiX3ByZXBhcmVNZW51IiwiX2tleWJvYXJkRXZlbnRzIiwiJGxpbmsiLCJwYXJlbnRMaW5rIiwiY2xvbmUiLCJwcmVwZW5kVG8iLCJ3cmFwIiwiJG1lbnUiLCIkYmFjayIsInByZXBlbmQiLCJiYWNrQnV0dG9uIiwiX2JhY2siLCIkd3JhcHBlciIsIndyYXBwZXIiLCJfZ2V0TWF4RGltcyIsIl9zaG93IiwiY2xvc2VPbkNsaWNrIiwiJGJvZHkiLCJjb250YWlucyIsIl9oaWRlQWxsIiwiX2hpZGUiLCJwYXJlbnRTdWJNZW51IiwiX21lbnVMaW5rRXZlbnRzIiwiYmx1ciIsImJpZ2dlc3QiLCJyZXN1bHQiLCJ1bndyYXAiLCJyZW1vdmUiLCJEcm9wZG93biIsIiRpZCIsIiRhbmNob3IiLCJwb3NpdGlvbkNsYXNzIiwiZ2V0UG9zaXRpb25DbGFzcyIsImNvdW50ZXIiLCJ1c2VkUG9zaXRpb25zIiwidmVydGljYWxQb3NpdGlvbiIsIm1hdGNoIiwiaG9yaXpvbnRhbFBvc2l0aW9uIiwiX3JlcG9zaXRpb24iLCJjbGFzc0NoYW5nZWQiLCJfc2V0UG9zaXRpb24iLCJkaXJlY3Rpb24iLCJob3ZlciIsInRpbWVvdXQiLCJob3ZlckRlbGF5IiwiaG92ZXJQYW5lIiwidmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzIiwidGFiX2ZvcndhcmQiLCJ0cmFwRm9jdXMiLCJ0YWJfYmFja3dhcmQiLCJfYWRkQm9keUhhbmRsZXIiLCJhdXRvRm9jdXMiLCIkZm9jdXNhYmxlIiwiY3VyUG9zaXRpb25DbGFzcyIsIkRyb3Bkb3duTWVudSIsInN1YnMiLCJ2ZXJ0aWNhbENsYXNzIiwicmlnaHRDbGFzcyIsImFsaWdubWVudCIsImNoYW5nZWQiLCJfaXNWZXJ0aWNhbCIsImhhc1RvdWNoIiwib250b3VjaHN0YXJ0IiwicGFyQ2xhc3MiLCJoYW5kbGVDbGlja0ZuIiwiaGFzU3ViIiwiaGFzQ2xpY2tlZCIsImNsaWNrT3BlbiIsImZvcmNlRm9sbG93IiwiY2xvc2VPbkNsaWNrSW5zaWRlIiwiZGlzYWJsZUhvdmVyIiwiYXV0b2Nsb3NlIiwiY2xvc2luZ1RpbWUiLCJpc1RhYiIsImluZGV4IiwibmV4dFNpYmxpbmciLCJwcmV2U2libGluZyIsIm9wZW5TdWIiLCJjbG9zZVN1YiIsIiRzaWJzIiwib2xkQ2xhc3MiLCIkcGFyZW50TGkiLCIkdG9DbG9zZSIsInNvbWV0aGluZ1RvQ2xvc2UiLCJFcXVhbGl6ZXIiLCJlcUlkIiwiJHdhdGNoZWQiLCJoYXNOZXN0ZWQiLCJpc05lc3RlZCIsImlzT24iLCJfYmluZEhhbmRsZXIiLCJvblJlc2l6ZU1lQm91bmQiLCJfb25SZXNpemVNZSIsIm9uUG9zdEVxdWFsaXplZEJvdW5kIiwiX29uUG9zdEVxdWFsaXplZCIsImltZ3MiLCJ0b29TbWFsbCIsImVxdWFsaXplT24iLCJfY2hlY2tNUSIsIl9wYXVzZUV2ZW50cyIsIl9raWxsc3dpdGNoIiwiZXF1YWxpemVPblN0YWNrIiwiX2lzU3RhY2tlZCIsImVxdWFsaXplQnlSb3ciLCJnZXRIZWlnaHRzQnlSb3ciLCJhcHBseUhlaWdodEJ5Um93IiwiZ2V0SGVpZ2h0cyIsImFwcGx5SGVpZ2h0IiwiaGVpZ2h0cyIsImxlbiIsIm9mZnNldEhlaWdodCIsImxhc3RFbFRvcE9mZnNldCIsImdyb3VwcyIsImdyb3VwIiwiZWxPZmZzZXRUb3AiLCJqIiwibG4iLCJncm91cHNJTGVuZ3RoIiwibGVuSiIsIkludGVyY2hhbmdlIiwicnVsZXMiLCJjdXJyZW50UGF0aCIsIl9hZGRCcmVha3BvaW50cyIsIl9nZW5lcmF0ZVJ1bGVzIiwicnVsZSIsInBhdGgiLCJTUEVDSUFMX1FVRVJJRVMiLCJydWxlc0xpc3QiLCJyZXNwb25zZSIsImh0bWwiLCJNYWdlbGxhbiIsIiR0YXJnZXRzIiwiJGxpbmtzIiwiJGFjdGl2ZSIsInNjcm9sbFBvcyIsInBhcnNlSW50IiwiY2FsY1BvaW50cyIsInBvaW50cyIsIndpbkhlaWdodCIsImlubmVySGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiZG9jSGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiJHRhciIsInB0IiwidGhyZXNob2xkIiwidGFyZ2V0UG9pbnQiLCJhbmltYXRpb25EdXJhdGlvbiIsImVhc2luZyIsImFuaW1hdGlvbkVhc2luZyIsImRlZXBMaW5raW5nIiwibG9jYXRpb24iLCJoYXNoIiwic2Nyb2xsVG9Mb2MiLCJfdXBkYXRlQWN0aXZlIiwiYXJyaXZhbCIsImxvYyIsImJhck9mZnNldCIsInNjcm9sbFRvcCIsIndpblBvcyIsImN1cklkeCIsImlzRG93biIsImN1clZpc2libGUiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiT2ZmQ2FudmFzIiwiJGxhc3RUcmlnZ2VyIiwiJHRyaWdnZXJzIiwiJGV4aXRlciIsImV4aXRlciIsImFwcGVuZCIsImlzUmV2ZWFsZWQiLCJyZXZlYWxDbGFzcyIsInJldmVhbE9uIiwiX3NldE1RQ2hlY2tlciIsInRyYW5zaXRpb25UaW1lIiwiX2hhbmRsZUtleWJvYXJkIiwicmV2ZWFsIiwiJGNsb3NlciIsImZvcmNlVG9wIiwiX3RyYXBGb2N1cyIsImZvY3VzYWJsZSIsImxhc3QiLCJPcmJpdCIsImNvbnRhaW5lckNsYXNzIiwiJHNsaWRlcyIsInNsaWRlQ2xhc3MiLCIkaW1hZ2VzIiwiaW5pdEFjdGl2ZSIsInVzZU1VSSIsIl9wcmVwYXJlRm9yT3JiaXQiLCJidWxsZXRzIiwiX2xvYWRCdWxsZXRzIiwiYXV0b1BsYXkiLCJnZW9TeW5jIiwiYWNjZXNzaWJsZSIsIiRidWxsZXRzIiwiYm94T2ZCdWxsZXRzIiwidGltZXJEZWxheSIsImNoYW5nZVNsaWRlIiwiX3NldFdyYXBwZXJIZWlnaHQiLCJfc2V0U2xpZGVIZWlnaHQiLCJ0ZW1wIiwicGF1c2VPbkhvdmVyIiwibmF2QnV0dG9ucyIsIiRjb250cm9scyIsIm5leHRDbGFzcyIsInByZXZDbGFzcyIsIiRzbGlkZSIsImlzTFRSIiwiY2hvc2VuU2xpZGUiLCIkY3VyU2xpZGUiLCIkZmlyc3RTbGlkZSIsIiRsYXN0U2xpZGUiLCJkaXJJbiIsImRpck91dCIsIiRuZXdTbGlkZSIsImluZmluaXRlV3JhcCIsIl91cGRhdGVCdWxsZXRzIiwiJG9sZEJ1bGxldCIsInNwYW4iLCJkZXRhY2giLCIkbmV3QnVsbGV0IiwiYW5pbUluRnJvbVJpZ2h0IiwiYW5pbU91dFRvUmlnaHQiLCJhbmltSW5Gcm9tTGVmdCIsImFuaW1PdXRUb0xlZnQiLCJSZXNwb25zaXZlTWVudSIsImN1cnJlbnRNcSIsImN1cnJlbnRQbHVnaW4iLCJydWxlc1RyZWUiLCJydWxlU2l6ZSIsInJ1bGVQbHVnaW4iLCJNZW51UGx1Z2lucyIsImlzRW1wdHlPYmplY3QiLCJfY2hlY2tNZWRpYVF1ZXJpZXMiLCJtYXRjaGVkTXEiLCJjc3NDbGFzcyIsImRyb3Bkb3duIiwiZHJpbGxkb3duIiwiYWNjb3JkaW9uIiwiUmVzcG9uc2l2ZVRvZ2dsZSIsInRhcmdldElEIiwiJHRhcmdldE1lbnUiLCIkdG9nZ2xlciIsIl91cGRhdGUiLCJfdXBkYXRlTXFIYW5kbGVyIiwidG9nZ2xlTWVudSIsImhpZGVGb3IiLCJSZXZlYWwiLCJjYWNoZWQiLCJtcSIsImlzTW9iaWxlIiwibW9iaWxlU25pZmYiLCJmdWxsU2NyZWVuIiwib3ZlcmxheSIsIiRvdmVybGF5IiwiX21ha2VPdmVybGF5IiwiZGVlcExpbmsiLCJfdXBkYXRlUG9zaXRpb24iLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJtYXJnaW4iLCJfaGFuZGxlU3RhdGUiLCJtdWx0aXBsZU9wZW5lZCIsImFuaW1hdGlvbkluIiwiYWZ0ZXJBbmltYXRpb25Gb2N1cyIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvd0RlbGF5Iiwib3JpZ2luYWxTY3JvbGxQb3MiLCJfZXh0cmFIYW5kbGVycyIsImNsb3NlT25Fc2MiLCJhbmltYXRpb25PdXQiLCJmaW5pc2hVcCIsImhpZGVEZWxheSIsInJlc2V0T25DbG9zZSIsInJlcGxhY2VTdGF0ZSIsInRpdGxlIiwicGF0aG5hbWUiLCJidG1PZmZzZXRQY3QiLCJpUGhvbmVTbmlmZiIsImFuZHJvaWRTbmlmZiIsIlNsaWRlciIsImlucHV0cyIsImhhbmRsZXMiLCIkaGFuZGxlIiwiJGlucHV0IiwiJGZpbGwiLCJ2ZXJ0aWNhbCIsImlzRGJsIiwiZGlzYWJsZWQiLCJkaXNhYmxlZENsYXNzIiwiYmluZGluZyIsIl9zZXRJbml0QXR0ciIsImRvdWJsZVNpZGVkIiwiJGhhbmRsZTIiLCIkaW5wdXQyIiwiX3NldEhhbmRsZVBvcyIsImluaXRpYWxTdGFydCIsImluaXRpYWxFbmQiLCIkaG5kbCIsIm5vSW52ZXJ0IiwiaDJWYWwiLCJzdGVwIiwiaDFWYWwiLCJ2ZXJ0IiwiaE9yVyIsImxPclQiLCJoYW5kbGVEaW0iLCJlbGVtRGltIiwicGN0T2ZCYXIiLCJwZXJjZW50IiwidG9GaXhlZCIsInB4VG9Nb3ZlIiwibW92ZW1lbnQiLCJkZWNpbWFsIiwiX3NldFZhbHVlcyIsImlzTGVmdEhuZGwiLCJkaW0iLCJoYW5kbGVQY3QiLCJoYW5kbGVQb3MiLCJtb3ZlVGltZSIsImNoYW5nZWREZWxheSIsIl9oYW5kbGVFdmVudCIsImhhc1ZhbCIsImV2ZW50T2Zmc2V0IiwiaGFsZk9mSGFuZGxlIiwiYmFyRGltIiwid2luZG93U2Nyb2xsIiwic2Nyb2xsTGVmdCIsImVsZW1PZmZzZXQiLCJldmVudEZyb21CYXIiLCJiYXJYWSIsIm9mZnNldFBjdCIsIl9hZGp1c3RWYWx1ZSIsImZpcnN0SG5kbFBvcyIsImFic1Bvc2l0aW9uIiwic2VjbmRIbmRsUG9zIiwiZGl2IiwicHJldl92YWwiLCJuZXh0X3ZhbCIsImN1ckhhbmRsZSIsImNsaWNrU2VsZWN0IiwiZHJhZ2dhYmxlIiwiY3VycmVudFRhcmdldCIsIl8kaGFuZGxlIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsImRlY3JlYXNlIiwiaW5jcmVhc2UiLCJkZWNyZWFzZV9mYXN0IiwiaW5jcmVhc2VfZmFzdCIsImludmVydFZlcnRpY2FsIiwiZnJhYyIsIm51bSIsImNsaWNrUG9zIiwiU3RpY2t5IiwiJHBhcmVudCIsIndhc1dyYXBwZWQiLCIkY29udGFpbmVyIiwiY29udGFpbmVyIiwid3JhcElubmVyIiwic3RpY2t5Q2xhc3MiLCJzY3JvbGxDb3VudCIsImNoZWNrRXZlcnkiLCJpc1N0dWNrIiwiY29udGFpbmVySGVpZ2h0IiwiZWxlbUhlaWdodCIsIl9wYXJzZVBvaW50cyIsIl9zZXRTaXplcyIsIl9jYWxjIiwicmV2ZXJzZSIsInRvcEFuY2hvciIsImJ0bSIsImJ0bUFuY2hvciIsInB0cyIsImJyZWFrcyIsInBsYWNlIiwiY2FuU3RpY2siLCJfcGF1c2VMaXN0ZW5lcnMiLCJjaGVja1NpemVzIiwic2Nyb2xsIiwiX3JlbW92ZVN0aWNreSIsInRvcFBvaW50IiwiYm90dG9tUG9pbnQiLCJfc2V0U3RpY2t5Iiwic3RpY2tUbyIsIm1yZ24iLCJub3RTdHVja1RvIiwiaXNUb3AiLCJzdGlja1RvVG9wIiwiYW5jaG9yUHQiLCJhbmNob3JIZWlnaHQiLCJ0b3BPckJvdHRvbSIsInN0aWNreU9uIiwibmV3RWxlbVdpZHRoIiwiY29tcCIsInBkbmciLCJuZXdDb250YWluZXJIZWlnaHQiLCJfc2V0QnJlYWtQb2ludHMiLCJtVG9wIiwiZW1DYWxjIiwibWFyZ2luVG9wIiwibUJ0bSIsIm1hcmdpbkJvdHRvbSIsImVtIiwiZm9udFNpemUiLCJUYWJzIiwiJHRhYlRpdGxlcyIsImxpbmtDbGFzcyIsIm1hdGNoSGVpZ2h0IiwiX3NldEhlaWdodCIsIl9hZGRLZXlIYW5kbGVyIiwiX2FkZENsaWNrSGFuZGxlciIsIl9zZXRIZWlnaHRNcUhhbmRsZXIiLCJfaGFuZGxlVGFiQ2hhbmdlIiwiJGZpcnN0VGFiIiwiJGxhc3RUYWIiLCJ3cmFwT25LZXlzIiwiJHRhYkxpbmsiLCIkdGFyZ2V0Q29udGVudCIsIiRvbGRUYWIiLCJzZWxlY3RUYWIiLCJpZFN0ciIsInBhbmVsQ2xhc3MiLCJwYW5lbCIsImNoZWNrQ2xhc3MiLCJUb2dnbGVyIiwiaW5wdXQiLCJfdG9nZ2xlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsIl91cGRhdGVBUklBIiwiX3RvZ2dsZUFuaW1hdGUiLCJUb29sdGlwIiwiaXNDbGljayIsImVsZW1JZCIsIl9nZXRQb3NpdGlvbkNsYXNzIiwidGlwVGV4dCIsInRlbXBsYXRlIiwiX2J1aWxkVGVtcGxhdGUiLCJ0cmlnZ2VyQ2xhc3MiLCJ0ZW1wbGF0ZUNsYXNzZXMiLCJ0b29sdGlwQ2xhc3MiLCIkdGVtcGxhdGUiLCIkdGlwRGltcyIsInNob3dPbiIsImZhZGVJbiIsImZhZGVJbkR1cmF0aW9uIiwiZmFkZU91dER1cmF0aW9uIiwiaXNGb2N1cyIsImRpc2FibGVGb3JUb3VjaCIsInRvdWNoQ2xvc2VUZXh0IiwiZW5kRXZlbnQiLCJNb3Rpb25VSSIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJleHBvcnRzIiwicmVxdWlyZSIsIlplcHRvIiwiQ0xPU0VfRVZFTlQiLCJCRUZPUkVfQ0xPU0VfRVZFTlQiLCJBRlRFUl9DTE9TRV9FVkVOVCIsIkJFRk9SRV9BUFBFTkRfRVZFTlQiLCJNQVJLVVBfUEFSU0VfRVZFTlQiLCJPUEVOX0VWRU5UIiwiQ0hBTkdFX0VWRU5UIiwiTlMiLCJFVkVOVF9OUyIsIlJFQURZX0NMQVNTIiwiUkVNT1ZJTkdfQ0xBU1MiLCJQUkVWRU5UX0NMT1NFX0NMQVNTIiwibWZwIiwiTWFnbmlmaWNQb3B1cCIsIl9pc0pRIiwiX3ByZXZTdGF0dXMiLCJfd2luZG93IiwiX2RvY3VtZW50IiwiX3ByZXZDb250ZW50VHlwZSIsIl93cmFwQ2xhc3NlcyIsIl9jdXJyUG9wdXBUeXBlIiwiX21mcE9uIiwiZiIsImV2IiwiX2dldEVsIiwicmF3IiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJfbWZwVHJpZ2dlciIsInN0IiwiY2FsbGJhY2tzIiwiY2hhckF0IiwiX2dldENsb3NlQnRuIiwiY3VyclRlbXBsYXRlIiwiY2xvc2VCdG4iLCJjbG9zZU1hcmt1cCIsInRDbG9zZSIsIl9jaGVja0luc3RhbmNlIiwibWFnbmlmaWNQb3B1cCIsImluc3RhbmNlIiwic3VwcG9ydHNUcmFuc2l0aW9ucyIsInMiLCJwb3AiLCJhcHBWZXJzaW9uIiwiaXNMb3dJRSIsImlzSUU4IiwiYWxsIiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJzdXBwb3J0c1RyYW5zaXRpb24iLCJwcm9iYWJseU1vYmlsZSIsInBvcHVwc0NhY2hlIiwiaXNPYmoiLCJ0b0FycmF5IiwiaXRlbSIsInBhcnNlZCIsImlzT3BlbiIsInVwZGF0ZUl0ZW1IVE1MIiwibWFpbkVsIiwiZml4ZWRDb250ZW50UG9zIiwibW9kYWwiLCJjbG9zZU9uQ29udGVudENsaWNrIiwiY2xvc2VPbkJnQ2xpY2siLCJzaG93Q2xvc2VCdG4iLCJlbmFibGVFc2NhcGVLZXkiLCJiZ092ZXJsYXkiLCJfY2hlY2tJZkNsb3NlIiwiY29udGVudENvbnRhaW5lciIsInByZWxvYWRlciIsInRMb2FkaW5nIiwibW9kdWxlcyIsIm4iLCJjbG9zZUJ0bkluc2lkZSIsInZhbHVlcyIsImNsb3NlX3JlcGxhY2VXaXRoIiwiYWxpZ25Ub3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsImZpeGVkQmdQb3MiLCJ1cGRhdGVTaXplIiwid2luZG93SGVpZ2h0Iiwid0giLCJ3aW5kb3dTdHlsZXMiLCJfaGFzU2Nyb2xsQmFyIiwiX2dldFNjcm9sbGJhclNpemUiLCJtYXJnaW5SaWdodCIsImlzSUU3IiwiY2xhc3Nlc1RvYWRkIiwibWFpbkNsYXNzIiwiX2FkZENsYXNzVG9NRlAiLCJfbGFzdEZvY3VzZWRFbCIsImFjdGl2ZUVsZW1lbnQiLCJjb250ZW50IiwiX3NldEZvY3VzIiwiX29uRm9jdXNJbiIsInJlbW92YWxEZWxheSIsIl9jbG9zZSIsImNsYXNzZXNUb1JlbW92ZSIsImVtcHR5IiwiX3JlbW92ZUNsYXNzRnJvbU1GUCIsImN1cnJJdGVtIiwiYXV0b0ZvY3VzTGFzdCIsInByZXZIZWlnaHQiLCJ6b29tTGV2ZWwiLCJjbGllbnRXaWR0aCIsImlubmVyV2lkdGgiLCJwYXJzZUVsIiwibWFya3VwIiwibmV3Q29udGVudCIsImFwcGVuZENvbnRlbnQiLCJwcmVsb2FkZWQiLCJ0YWdOYW1lIiwic3JjIiwiYWRkR3JvdXAiLCJlSGFuZGxlciIsIm1mcEVsIiwiX29wZW5DbGljayIsImVOYW1lIiwiZGVsZWdhdGUiLCJtaWRDbGljayIsIm1ldGFLZXkiLCJkaXNhYmxlT24iLCJpc0Z1bmN0aW9uIiwidXBkYXRlU3RhdHVzIiwic3RhdHVzIiwiY2xvc2VPbkNvbnRlbnQiLCJjbG9zZU9uQmciLCJjTmFtZSIsIl9wYXJzZU1hcmt1cCIsImFyciIsInJlcGxhY2VXaXRoIiwic2Nyb2xsYmFyU2l6ZSIsInNjcm9sbERpdiIsInJlbW92ZUNoaWxkIiwicHJvdG8iLCJyZWdpc3Rlck1vZHVsZSIsIm1vZHVsZSIsImpxRWwiLCJpdGVtT3B0cyIsIklOTElORV9OUyIsIl9oaWRkZW5DbGFzcyIsIl9pbmxpbmVQbGFjZWhvbGRlciIsIl9sYXN0SW5saW5lRWxlbWVudCIsIl9wdXRJbmxpbmVFbGVtZW50c0JhY2siLCJhZnRlciIsImhpZGRlbkNsYXNzIiwidE5vdEZvdW5kIiwiaW5pdElubGluZSIsImdldElubGluZSIsImlubGluZVN0IiwiaW5saW5lIiwiaW5saW5lRWxlbWVudCIsIkFKQVhfTlMiLCJfYWpheEN1ciIsIl9yZW1vdmVBamF4Q3Vyc29yIiwiX2Rlc3Ryb3lBamF4UmVxdWVzdCIsInJlcSIsImFib3J0Iiwic2V0dGluZ3MiLCJjdXJzb3IiLCJ0RXJyb3IiLCJpbml0QWpheCIsImFqYXgiLCJnZXRBamF4Iiwic3VjY2VzcyIsInRleHRTdGF0dXMiLCJqcVhIUiIsInhociIsImZpbmlzaGVkIiwibG9hZEVycm9yIiwiX2ltZ0ludGVydmFsIiwiX2dldFRpdGxlIiwiaW1hZ2UiLCJ0aXRsZVNyYyIsInZlcnRpY2FsRml0IiwiaW5pdEltYWdlIiwiaW1nU3QiLCJucyIsInJlc2l6ZUltYWdlIiwiaW1nIiwiZGVjciIsIl9vbkltYWdlSGFzU2l6ZSIsImhhc1NpemUiLCJjbGVhckludGVydmFsIiwiaXNDaGVja2luZ0ltZ1NpemUiLCJpbWdIaWRkZW4iLCJmaW5kSW1hZ2VTaXplIiwibWZwU2V0SW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImdldEltYWdlIiwiZ3VhcmQiLCJvbkxvYWRDb21wbGV0ZSIsImxvYWRlZCIsIm9uTG9hZEVycm9yIiwiYWx0IiwiaW1nX3JlcGxhY2VXaXRoIiwibG9hZGluZyIsImhhc01velRyYW5zZm9ybSIsImdldEhhc01velRyYW5zZm9ybSIsIk1velRyYW5zZm9ybSIsIm9wZW5lciIsImluaXRab29tIiwiem9vbVN0Iiwiem9vbSIsImdldEVsVG9BbmltYXRlIiwibmV3SW1nIiwidHJhbnNpdGlvbiIsImNzc09iaiIsInpJbmRleCIsInNob3dNYWluQ29udGVudCIsIm9wZW5UaW1lb3V0IiwiYW5pbWF0ZWRJbWciLCJfYWxsb3dab29tIiwiX2dldEl0ZW1Ub1pvb20iLCJfZ2V0T2Zmc2V0IiwiaXNMYXJnZSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwib2JqIiwiSUZSQU1FX05TIiwiX2VtcHR5UGFnZSIsIl9maXhJZnJhbWVCdWdzIiwiaXNTaG93aW5nIiwic3JjQWN0aW9uIiwieW91dHViZSIsInZpbWVvIiwiZ21hcHMiLCJpbml0SWZyYW1lIiwicHJldlR5cGUiLCJuZXdUeXBlIiwiZ2V0SWZyYW1lIiwiZW1iZWRTcmMiLCJpZnJhbWVTdCIsImlmcmFtZSIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwiZGF0YU9iaiIsIl9nZXRMb29wZWRJZCIsIm51bVNsaWRlcyIsIl9yZXBsYWNlQ3VyclRvdGFsIiwiY3VyciIsInRvdGFsIiwiYXJyb3dNYXJrdXAiLCJwcmVsb2FkIiwibmF2aWdhdGVCeUltZ0NsaWNrIiwiYXJyb3dzIiwidFByZXYiLCJ0TmV4dCIsInRDb3VudGVyIiwiaW5pdEdhbGxlcnkiLCJnU3QiLCJnYWxsZXJ5IiwibCIsImFycm93TGVmdCIsImFycm93UmlnaHQiLCJjbGljayIsIl9wcmVsb2FkVGltZW91dCIsInByZWxvYWROZWFyYnlJbWFnZXMiLCJnb1RvIiwibmV3SW5kZXgiLCJwcmVsb2FkQmVmb3JlIiwicHJlbG9hZEFmdGVyIiwiX3ByZWxvYWRJdGVtIiwiUkVUSU5BX05TIiwicmVwbGFjZVNyYyIsIm0iLCJyYXRpbyIsImluaXRSZXRpbmEiLCJkZXZpY2VQaXhlbFJhdGlvIiwicm9vdCIsInBseXIiLCJmdWxsc2NyZWVuIiwiZGVidWciLCJhdXRvcGxheSIsImxvb3AiLCJzZWVrVGltZSIsInZvbHVtZSIsInZvbHVtZU1pbiIsInZvbHVtZU1heCIsInZvbHVtZVN0ZXAiLCJkaXNwbGF5RHVyYXRpb24iLCJsb2FkU3ByaXRlIiwiaWNvblByZWZpeCIsImljb25VcmwiLCJjbGlja1RvUGxheSIsImhpZGVDb250cm9scyIsInNob3dQb3N0ZXJPbkVuZCIsImRpc2FibGVDb250ZXh0TWVudSIsImtleWJvYXJkU2hvcmN1dHMiLCJmb2N1c2VkIiwiZ2xvYmFsIiwidG9vbHRpcHMiLCJjb250cm9scyIsInNlZWsiLCJzZWxlY3RvcnMiLCJodG1sNSIsImVtYmVkIiwiZWRpdGFibGUiLCJidXR0b25zIiwicGxheSIsInJld2luZCIsImZvcndhcmQiLCJtdXRlIiwiY2FwdGlvbnMiLCJkaXNwbGF5IiwicHJvZ3Jlc3MiLCJwbGF5ZWQiLCJjdXJyZW50VGltZSIsImNsYXNzZXMiLCJyZWFkeSIsInZpZGVvV3JhcHBlciIsImVtYmVkV3JhcHBlciIsInN0b3BwZWQiLCJwbGF5aW5nIiwibXV0ZWQiLCJ0b29sdGlwIiwiaGlkZGVuIiwiaXNJb3MiLCJpc1RvdWNoIiwiYWN0aXZlIiwidGFiRm9jdXMiLCJkZWZhdWx0QWN0aXZlIiwiZmFsbGJhY2siLCJhbGxvd0F1ZGlvIiwic3RvcmFnZSIsImkxOG4iLCJidWZmZXJlZCIsInRvZ2dsZU11dGUiLCJ0b2dnbGVDYXB0aW9ucyIsInRvZ2dsZUZ1bGxzY3JlZW4iLCJmcmFtZVRpdGxlIiwidXJscyIsImFwaSIsInNvdW5kY2xvdWQiLCJldmVudHMiLCJsb2dQcmVmaXgiLCJfYnJvd3NlclNuaWZmIiwidWEiLCJhcHBOYW1lIiwiZnVsbFZlcnNpb24iLCJtYWpvclZlcnNpb24iLCJuYW1lT2Zmc2V0IiwidmVyT2Zmc2V0IiwiaXgiLCJpc0lFIiwiaXNGaXJlZm94IiwiaXNDaHJvbWUiLCJpc1NhZmFyaSIsInN1YnN0cmluZyIsInBsYXRmb3JtIiwiX3N1cHBvcnRNaW1lIiwibWltZVR5cGUiLCJjYW5QbGF5VHlwZSIsIl9pbmplY3RTY3JpcHQiLCJzb3VyY2UiLCJ0YWciLCJmaXJzdFNjcmlwdFRhZyIsIl9pbkFycmF5IiwiaGF5c3RhY2siLCJuZWVkbGUiLCJfcmVwbGFjZUFsbCIsIl93cmFwIiwiZWxlbWVudHMiLCJjaGlsZCIsImNsb25lTm9kZSIsInNpYmxpbmciLCJfcmVtb3ZlIiwiX3ByZXBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJfc2V0QXR0cmlidXRlcyIsIl9pcyIsImJvb2xlYW4iLCJfaW5zZXJ0RWxlbWVudCIsIl9nZXRDbGFzc25hbWUiLCJzZWxlY3RvciIsInN0YXRlIiwiY2xhc3NMaXN0IiwiX2hhc0NsYXNzIiwiX21hdGNoZXMiLCJFbGVtZW50Iiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJfcHJveHlMaXN0ZW5lciIsImV2ZW50TmFtZSIsInVzZXJMaXN0ZW5lciIsImRlZmF1bHRMaXN0ZW5lciIsInVzZUNhcHR1cmUiLCJfb24iLCJfdG9nZ2xlTGlzdGVuZXIiLCJldmVudExpc3QiLCJOb2RlTGlzdCIsIk5vZGUiLCJfZXZlbnQiLCJidWJibGVzIiwicHJvcGVydGllcyIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiX3RvZ2dsZVN0YXRlIiwiX2dldFBlcmNlbnRhZ2UiLCJfZXh0ZW5kIiwib2JqZWN0cyIsImRlc3RpbmF0aW9uIiwic2hpZnQiLCJwcm9wZXJ0eSIsIm9iamVjdCIsImFycmF5IiwiTnVtYmVyIiwibm9kZUxpc3QiLCJodG1sRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiZnVuY3Rpb24iLCJfcGFyc2VZb3VUdWJlSWQiLCJyZWdleCIsIiQyIiwiX3BhcnNlVmltZW9JZCIsIl9mdWxsc2NyZWVuIiwic3VwcG9ydHNGdWxsU2NyZWVuIiwiaXNGdWxsU2NyZWVuIiwicmVxdWVzdEZ1bGxTY3JlZW4iLCJjYW5jZWxGdWxsU2NyZWVuIiwiZnVsbFNjcmVlbkV2ZW50TmFtZSIsInByZWZpeCIsImJyb3dzZXJQcmVmaXhlcyIsImlsIiwibXNFeGl0RnVsbHNjcmVlbiIsIm1zRnVsbHNjcmVlbkVuYWJsZWQiLCJmdWxsc2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW5FbGVtZW50IiwiX3N0b3JhZ2UiLCJzdXBwb3J0ZWQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJQbHlyIiwiY29uZmlnIiwidGltZXJzIiwib3JpZ2luYWwiLCJfdHJpZ2dlckV2ZW50IiwiX2NvbnNvbGUiLCJ1bnNoaWZ0IiwiX2xvZyIsIl93YXJuIiwiX2dldEljb25VcmwiLCJhYnNvbHV0ZSIsImJyb3dzZXIiLCJfYnVpbGRDb250cm9scyIsImljb25QYXRoIiwiX3NldHVwRnVsbHNjcmVlbiIsImZ1bGwiLCJuYXRpdmVTdXBwb3J0IiwiX2luRnJhbWUiLCJfZm9jdXNUcmFwIiwiX3NldHVwQ2FwdGlvbnMiLCJfZ2V0RWxlbWVudCIsInZpZGVvQ29udGFpbmVyIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwidXNpbmdUZXh0VHJhY2tzIiwidGV4dFRyYWNrcyIsImNhcHRpb25TcmMiLCJraW5kIiwiY2hpbGROb2RlcyIsImNhcHRpb25FeGlzdHMiLCJ0cmFja3MiLCJtb2RlIiwiX3Nob3dDYXB0aW9ucyIsInRyYWNrIiwiYWN0aXZlQ3VlcyIsIl9zZXRDYXB0aW9uIiwiZ2V0Q3VlQXNIVE1MIiwiY3VycmVudENhcHRpb24iLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJjYXB0aW9uIiwicmVzcG9uc2VUZXh0IiwibGluZVNlcGFyYXRvciIsInIiLCJzZW5kIiwicmVkcmF3IiwiX3NlZWtNYW51YWxDYXB0aW9ucyIsIl90aW1lY29kZUNvbW1vbiIsInRjIiwicG9zIiwidGNwYWlyIiwiX3N1YlRjU2VjcyIsIl90aW1lY29kZU1pbiIsIl90aW1lY29kZU1heCIsInRjMSIsInRjMiIsInNlY29uZHMiLCJmbG9vciIsInN1YmNvdW50IiwiY2FwdGlvbnNFbmFibGVkIiwiX2dldEVsZW1lbnRzIiwidGFiYmFibGVzIiwiX2NoZWNrRm9jdXMiLCJpc0Z1bGxzY3JlZW4iLCJfaW5zZXJ0Q2hpbGRFbGVtZW50cyIsIl9pbmplY3RDb250cm9scyIsInF1ZXJ5U2VsZWN0b3IiLCJsYWJlbCIsIl9maW5kRWxlbWVudHMiLCJiYXIiLCJfdG9nZ2xlTmF0aXZlQ29udHJvbHMiLCJfdG9nZ2xlU3R5bGVIb29rIiwicmVtb3ZlQXR0cmlidXRlIiwiX3NldFRpdGxlIiwiX3NldHVwU3RvcmFnZSIsIl91cGRhdGVTdG9yYWdlIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiX3NldHVwTWVkaWEiLCJvbnRhaW5lciIsIl9zZXR1cEVtYmVkIiwibWVkaWFJZCIsImVtYmVkSWQiLCJjb250YWluZXJzIiwiWVQiLCJfeW91VHViZVJlYWR5Iiwib25Zb3VUdWJlUmVhZHlDYWxsYmFja3MiLCJvbllvdVR1YmVJZnJhbWVBUElSZWFkeSIsIlZpbWVvIiwidmltZW9UaW1lciIsIl92aW1lb1JlYWR5Iiwic291bmRDbG91ZCIsIlNDIiwic291bmRDbG91ZFRpbWVyIiwiX3NvdW5kY2xvdWRSZWFkeSIsIl9lbWJlZFJlYWR5IiwiX3NldHVwSW50ZXJmYWNlIiwiX3JlYWR5IiwidmlkZW9JZCIsIlBsYXllciIsInBsYXllclZhcnMiLCJyZWwiLCJzaG93aW5mbyIsIml2X2xvYWRfcG9saWN5IiwiY2NfbG9hZF9wb2xpY3kiLCJjY19sYW5nX3ByZWYiLCJ3bW9kZSIsIm1vZGVzdGJyYW5kaW5nIiwiZGlzYWJsZWtiIiwib3JpZ2luIiwiY29kZSIsInBsYXlWaWRlbyIsInBhdXNlZCIsInBhdXNlVmlkZW8iLCJzdG9wVmlkZW8iLCJnZXREdXJhdGlvbiIsImlzTXV0ZWQiLCJnZXRWaWRlb0RhdGEiLCJidWZmZXJpbmciLCJnZXRWaWRlb0xvYWRlZEZyYWN0aW9uIiwibGFzdEJ1ZmZlcmVkIiwic2Vla2luZyIsImdldEN1cnJlbnRUaW1lIiwiYnlsaW5lIiwidGhlbiIsIldpZGdldCIsIkV2ZW50cyIsIlJFQURZIiwic2Vla1RvIiwiZ2V0UG9zaXRpb24iLCJQTEFZIiwiUEFVU0UiLCJQTEFZX1BST0dSRVNTIiwiY3VycmVudFBvc2l0aW9uIiwiTE9BRF9QUk9HUkVTUyIsImxvYWRQcm9ncmVzcyIsIkZJTklTSCIsIl9wbGF5IiwiX3BhdXNlIiwiX3RvZ2dsZVBsYXkiLCJfcmV3aW5kIiwiX3NlZWsiLCJfZm9yd2FyZCIsInRhcmdldFRpbWUiLCJfZ2V0RHVyYXRpb24iLCJfdXBkYXRlU2Vla0Rpc3BsYXkiLCJzZXRDdXJyZW50VGltZSIsIm1lZGlhRHVyYXRpb24iLCJfY2hlY2tQbGF5aW5nIiwiX3RvZ2dsZUNvbnRyb2xzIiwiX3NhdmVTY3JvbGxQb3NpdGlvbiIsIl9yZXN0b3JlU2Nyb2xsUG9zaXRpb24iLCJzY3JvbGxUbyIsIl90b2dnbGVGdWxsc2NyZWVuIiwiX3RvZ2dsZU11dGUiLCJfc2V0Vm9sdW1lIiwic2V0Vm9sdW1lIiwiX2luY3JlYXNlVm9sdW1lIiwiX2RlY3JlYXNlVm9sdW1lIiwiX3VwZGF0ZVZvbHVtZSIsIl90b2dnbGVDYXB0aW9ucyIsIl9jaGVja0xvYWRpbmciLCJfdXBkYXRlUHJvZ3Jlc3MiLCJwcmVzc2VkIiwiX3NldFByb2dyZXNzIiwiX3VwZGF0ZVRpbWVEaXNwbGF5Iiwic2VjcyIsIm1pbnMiLCJob3VycyIsImRpc3BsYXlIb3VycyIsIl9kaXNwbGF5RHVyYXRpb24iLCJfdXBkYXRlU2Vla1Rvb2x0aXAiLCJfdGltZVVwZGF0ZSIsImNsaWVudFJlY3QiLCJ2aXNpYmxlIiwiaXNFbnRlckZ1bGxzY3JlZW4iLCJfc291cmNlIiwiX3VwZGF0ZVNvdXJjZSIsImdldFZpZGVvVXJsIiwiZ2V0Q3VycmVudFNvdW5kIiwicGVybWFsaW5rX3VybCIsImN1cnJlbnRTcmMiLCJzb3VyY2VzIiwiX2NhbmNlbFJlcXVlc3RzIiwiZmlyc3RTb3VyY2UiLCJjcm9zc29yaWdpbiIsInBvc3RlciIsImxvYWQiLCJfZGVzdHJveSIsIl91cGRhdGVQb3N0ZXIiLCJfY29udHJvbExpc3RlbmVycyIsImlucHV0RXZlbnQiLCJ0b2dnbGVQbGF5IiwiaGFkVGFiRm9jdXMiLCJnZXRGb2N1c0VsZW1lbnQiLCJnZXRLZXlDb2RlIiwiY2hlY2tUYWJGb2N1cyIsImJ1dHRvbiIsImFsbG93ZWQiLCJjb3VudCIsImhlbGQiLCJzZWVrQnlLZXkiLCJpbnZlcnRlZCIsIndlYmtpdERpcmVjdGlvbkludmVydGVkRnJvbURldmljZSIsImRlbHRhWSIsImRlbHRhWCIsIl9tZWRpYUxpc3RlbmVycyIsImVuZGVkIiwicmVzdG9yZSIsImNsZWFuVXAiLCJ1bmxvYWQiLCJyZXBsYWNlQ2hpbGQiLCJiYXNpYyIsImNvbnRyb2xzTWlzc2luZyIsImdldE9yaWdpbmFsIiwiZ2V0Q29udGFpbmVyIiwiZ2V0RW1iZWQiLCJnZXRNZWRpYSIsImdldFR5cGUiLCJnZXRWb2x1bWUiLCJpc1JlYWR5IiwiaXNMb2FkaW5nIiwidG9nZ2xlQ29udHJvbHMiLCJzdXBwb3J0Iiwib25sb2FkIiwiaXNPbGRJRSIsImlzSXBob25lIiwiYXVkaW8iLCJ2aWRlbyIsInRhcmdldHMiLCJwbGF5ZXJzIiwiaW5zdGFuY2VzIiwiaG9vayIsInBsYXllciIsImxvZyIsInBhcmFtcyIsImNhbmNlbGFibGUiLCJldnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJFdmVudCIsIlNsaWNrIiwiaW5zdGFuY2VVaWQiLCJfIiwiZGF0YVNldHRpbmdzIiwiYWNjZXNzaWJpbGl0eSIsImFkYXB0aXZlSGVpZ2h0IiwiYXBwZW5kQXJyb3dzIiwiYXBwZW5kRG90cyIsImFzTmF2Rm9yIiwicHJldkFycm93IiwibmV4dEFycm93IiwiYXV0b3BsYXlTcGVlZCIsImNlbnRlck1vZGUiLCJjZW50ZXJQYWRkaW5nIiwiY3NzRWFzZSIsImN1c3RvbVBhZ2luZyIsInNsaWRlciIsImRvdHMiLCJkb3RzQ2xhc3MiLCJlZGdlRnJpY3Rpb24iLCJmYWRlIiwiZm9jdXNPblNlbGVjdCIsImluaXRpYWxTbGlkZSIsImxhenlMb2FkIiwibW9iaWxlRmlyc3QiLCJwYXVzZU9uRm9jdXMiLCJwYXVzZU9uRG90c0hvdmVyIiwicmVzcG9uZFRvIiwicmVzcG9uc2l2ZSIsInJvd3MiLCJzbGlkZSIsInNsaWRlc1BlclJvdyIsInNsaWRlc1RvU2hvdyIsInNsaWRlc1RvU2Nyb2xsIiwic3BlZWQiLCJzd2lwZVRvU2xpZGUiLCJ0b3VjaE1vdmUiLCJ0b3VjaFRocmVzaG9sZCIsInVzZUNTUyIsInVzZVRyYW5zZm9ybSIsInZhcmlhYmxlV2lkdGgiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwic2xpZGluZyIsInNsaWRlT2Zmc2V0Iiwic3dpcGVMZWZ0IiwiJGxpc3QiLCJ0b3VjaE9iamVjdCIsInRyYW5zZm9ybXNFbmFibGVkIiwidW5zbGlja2VkIiwiYWN0aXZlQnJlYWtwb2ludCIsImFuaW1UeXBlIiwiYW5pbVByb3AiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRTZXR0aW5ncyIsImNzc1RyYW5zaXRpb25zIiwiZm9jdXNzZWQiLCJpbnRlcnJ1cHRlZCIsInBvc2l0aW9uUHJvcCIsInJvd0NvdW50Iiwic2hvdWxkQ2xpY2siLCIkc2xpZGVyIiwiJHNsaWRlc0NhY2hlIiwidHJhbnNmb3JtVHlwZSIsInRyYW5zaXRpb25UeXBlIiwidmlzaWJpbGl0eUNoYW5nZSIsIndpbmRvd1dpZHRoIiwid2luZG93VGltZXIiLCJvcmlnaW5hbFNldHRpbmdzIiwibW96SGlkZGVuIiwid2Via2l0SGlkZGVuIiwicHJveHkiLCJhdXRvUGxheUNsZWFyIiwiYXV0b1BsYXlJdGVyYXRvciIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzZXRQb3NpdGlvbiIsInN3aXBlSGFuZGxlciIsImRyYWdIYW5kbGVyIiwia2V5SGFuZGxlciIsImh0bWxFeHByIiwicmVnaXN0ZXJCcmVha3BvaW50cyIsImFjdGl2YXRlQURBIiwiYWRkU2xpZGUiLCJzbGlja0FkZCIsImFkZEJlZm9yZSIsImluc2VydEFmdGVyIiwicmVpbml0IiwiYW5pbWF0ZUhlaWdodCIsInRhcmdldEhlaWdodCIsImFuaW1hdGVTbGlkZSIsInRhcmdldExlZnQiLCJhbmltUHJvcHMiLCJhbmltU3RhcnQiLCJjZWlsIiwiYXBwbHlUcmFuc2l0aW9uIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJnZXROYXZUYXJnZXQiLCJzbGljayIsInNsaWRlSGFuZGxlciIsInNsaWRlVG8iLCJidWlsZEFycm93cyIsImJ1aWxkRG90cyIsImRvdCIsImdldERvdENvdW50IiwiYnVpbGRPdXQiLCJ3cmFwQWxsIiwic2V0dXBJbmZpbml0ZSIsInVwZGF0ZURvdHMiLCJzZXRTbGlkZUNsYXNzZXMiLCJidWlsZFJvd3MiLCJhIiwiYiIsImMiLCJuZXdTbGlkZXMiLCJudW1PZlNsaWRlcyIsIm9yaWdpbmFsU2xpZGVzIiwic2xpZGVzUGVyU2VjdGlvbiIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJyb3ciLCJjaGVja1Jlc3BvbnNpdmUiLCJpbml0aWFsIiwiZm9yY2VVcGRhdGUiLCJicmVha3BvaW50IiwidGFyZ2V0QnJlYWtwb2ludCIsInJlc3BvbmRUb1dpZHRoIiwidHJpZ2dlckJyZWFrcG9pbnQiLCJzbGlkZXJXaWR0aCIsInVuc2xpY2siLCJyZWZyZXNoIiwiZG9udEFuaW1hdGUiLCJpbmRleE9mZnNldCIsInVuZXZlbk9mZnNldCIsImNoZWNrTmF2aWdhYmxlIiwibmF2aWdhYmxlcyIsInByZXZOYXZpZ2FibGUiLCJnZXROYXZpZ2FibGVJbmRleGVzIiwiY2xlYW5VcEV2ZW50cyIsImludGVycnVwdCIsInZpc2liaWxpdHkiLCJjbGVhblVwU2xpZGVFdmVudHMiLCJvcmllbnRhdGlvbkNoYW5nZSIsInJlc2l6ZSIsImNsZWFuVXBSb3dzIiwiZmFkZVNsaWRlIiwic2xpZGVJbmRleCIsIm9wYWNpdHkiLCJmYWRlU2xpZGVPdXQiLCJmaWx0ZXJTbGlkZXMiLCJzbGlja0ZpbHRlciIsImZvY3VzSGFuZGxlciIsIiRzZiIsImdldEN1cnJlbnQiLCJzbGlja0N1cnJlbnRTbGlkZSIsImJyZWFrUG9pbnQiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInZlcnRpY2FsT2Zmc2V0IiwidGFyZ2V0U2xpZGUiLCJvZmZzZXRMZWZ0IiwiZ2V0T3B0aW9uIiwic2xpY2tHZXRPcHRpb24iLCJvcHRpb24iLCJpbmRleGVzIiwiZ2V0U2xpY2siLCJnZXRTbGlkZUNvdW50Iiwic2xpZGVzVHJhdmVyc2VkIiwic3dpcGVkU2xpZGUiLCJjZW50ZXJPZmZzZXQiLCJzbGlja0dvVG8iLCJjcmVhdGlvbiIsInNldFByb3BzIiwic3RhcnRMb2FkIiwibG9hZFNsaWRlciIsImluaXRpYWxpemVFdmVudHMiLCJ1cGRhdGVBcnJvd3MiLCJpbml0QURBIiwiaW5pdEFycm93RXZlbnRzIiwiaW5pdERvdEV2ZW50cyIsImluaXRTbGlkZUV2ZW50cyIsImFjdGlvbiIsImluaXRVSSIsImxvYWRSYW5nZSIsImNsb25lUmFuZ2UiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJsb2FkSW1hZ2VzIiwiaW1hZ2VzU2NvcGUiLCJpbWFnZVNvdXJjZSIsImltYWdlVG9Mb2FkIiwib25lcnJvciIsInByb2dyZXNzaXZlTGF6eUxvYWQiLCJzbGlja05leHQiLCJzbGlja1BhdXNlIiwic2xpY2tQbGF5IiwicG9zdFNsaWRlIiwic2xpY2tQcmV2IiwidHJ5Q291bnQiLCIkaW1nc1RvTG9hZCIsImluaXRpYWxpemluZyIsImxhc3RWaXNpYmxlSW5kZXgiLCJjdXJyZW50QnJlYWtwb2ludCIsInJlc3BvbnNpdmVTZXR0aW5ncyIsInNvcnQiLCJ3aW5kb3dEZWxheSIsInJlbW92ZVNsaWRlIiwic2xpY2tSZW1vdmUiLCJyZW1vdmVCZWZvcmUiLCJyZW1vdmVBbGwiLCJzZXRDU1MiLCJwb3NpdGlvblByb3BzIiwic2V0RGltZW5zaW9ucyIsInBhZGRpbmciLCJzZXRGYWRlIiwic2V0SGVpZ2h0Iiwic2V0T3B0aW9uIiwic2xpY2tTZXRPcHRpb24iLCJib2R5U3R5bGUiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsIk9UcmFuc2Zvcm0iLCJwZXJzcGVjdGl2ZVByb3BlcnR5Iiwid2Via2l0UGVyc3BlY3RpdmUiLCJNb3pQZXJzcGVjdGl2ZSIsIndlYmtpdFRyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwiYWxsU2xpZGVzIiwicmVtYWluZGVyIiwiaW5maW5pdGVDb3VudCIsInRhcmdldEVsZW1lbnQiLCJzeW5jIiwiYW5pbVNsaWRlIiwib2xkU2xpZGUiLCJzbGlkZUxlZnQiLCJuYXZUYXJnZXQiLCJzd2lwZURpcmVjdGlvbiIsInhEaXN0IiwieURpc3QiLCJzd2lwZUFuZ2xlIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJhdGFuMiIsIlBJIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50Iiwib3JpZ2luYWxFdmVudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJlZGdlV2FzSGl0IiwiY3VyTGVmdCIsInBvc2l0aW9uT2Zmc2V0Iiwic3FydCIsInVuZmlsdGVyU2xpZGVzIiwic2xpY2tVbmZpbHRlciIsImZyb21CcmVha3BvaW50Iiwic21vb3RoU2Nyb2xsIiwic3VwcG9ydHMiLCJmaXhlZEhlYWRlciIsImhlYWRlckhlaWdodCIsImV2ZW50VGltZW91dCIsImFuaW1hdGlvbkludGVydmFsIiwic2VsZWN0b3JIZWFkZXIiLCJleHRlbmRlZCIsImRlZXAiLCJtZXJnZSIsImdldEhlaWdodCIsImdldENsb3Nlc3QiLCJmaXJzdENoYXIiLCJhdHRyaWJ1dGUiLCJub2RlVHlwZSIsImVzY2FwZUNoYXJhY3RlcnMiLCJjb2RlVW5pdCIsImZpcnN0Q29kZVVuaXQiLCJjaGFyQ29kZUF0IiwiSW52YWxpZENoYXJhY3RlckVycm9yIiwiZWFzaW5nUGF0dGVybiIsImdldEVuZExvY2F0aW9uIiwib2Zmc2V0UGFyZW50Iiwib2Zmc2V0VG9wIiwiZ2V0RG9jdW1lbnRIZWlnaHQiLCJnZXRWaWV3cG9ydEhlaWdodCIsImdldERhdGFPcHRpb25zIiwiZ2V0SGVhZGVySGVpZ2h0IiwiaGVhZGVyIiwiYWRqdXN0Rm9jdXMiLCJlbmRMb2NhdGlvbiIsImlzTnVtIiwib3V0bGluZSIsImFuaW1hdGVTY3JvbGwiLCJvdmVycmlkZXMiLCJhbmltYXRlU2V0dGluZ3MiLCJhbmNob3JFbGVtIiwic3RhcnRMb2NhdGlvbiIsImRpc3RhbmNlIiwiZG9jdW1lbnRIZWlnaHQiLCJ0aW1lTGFwc2VkIiwicGVyY2VudGFnZSIsInN0b3BBbmltYXRlU2Nyb2xsIiwiY3VycmVudExvY2F0aW9uIiwibG9vcEFuaW1hdGVTY3JvbGwiLCJzdGFydEFuaW1hdGVTY3JvbGwiLCJoYXNoQ2hhbmdlSGFuZGxlciIsImhvc3RuYW1lIiwiaHJlZiIsInJlc2l6ZVRocm90dGxlciIsImZvb3RlciIsInN0aWNreUZvb3RlciIsInNwbGl0X3VybCIsInBhZ2VfbnVtIiwidmFycyIsInRheG9ub215IiwidGVybV9pZCIsInBvc3RfdHlwZSIsIndpYXdfZ2V0X21vcmVfcG9zdHMiLCJqc192YXJzIiwiYWpheHVybCIsInBhZ2UiLCJleGNlcHRpb24iLCJhbGVydCIsImJ0biIsImJ0bl91cmwiLCJiZWZvcmUiLCJRdWlja0xvb2tJbml0Il0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsU0FBUCxHQUFvQixZQUFXOztBQUU3Qjs7QUFFQTs7Ozs7O0FBTUE7O0FBQ0EsTUFBSUMsYUFBYSxFQUFqQjs7QUFFQTtBQUNBLE1BQUlDLElBQUo7O0FBRUE7QUFDQSxNQUFJQyxTQUFTLEtBQWI7O0FBRUE7QUFDQSxNQUFJQyxlQUFlLElBQW5COztBQUVBO0FBQ0EsTUFBSUMsa0JBQWtCLENBQ3BCLFFBRG9CLEVBRXBCLFVBRm9CLEVBR3BCLE1BSG9CLEVBSXBCLE9BSm9CLEVBS3BCLE9B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Q0F4R0EsQ0F3R0NyVSxPQUFPMkwsTUF4R1IsQ0FBRCIsImZpbGUiOiJmb3VuZGF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LndoYXRJbnB1dCA9IChmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICB2YXJpYWJsZXNcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICAvLyBhcnJheSBvZiBhY3RpdmVseSBwcmVzc2VkIGtleXNcbiAgdmFyIGFjdGl2ZUtleXMgPSBbXTtcblxuICAvLyBjYWNoZSBkb2N1bWVudC5ib2R5XG4gIHZhciBib2R5O1xuXG4gIC8vIGJvb2xlYW46IHRydWUgaWYgdG91Y2ggYnVmZmVyIHRpbWVyIGlzIHJ1bm5pbmdcbiAgdmFyIGJ1ZmZlciA9IGZhbHNlO1xuXG4gIC8vIHRoZSBsYXN0IHVzZWQgaW5wdXQgdHlwZVxuICB2YXIgY3VycmVudElucHV0ID0gbnVsbDtcblxuICAvLyBgaW5wdXRgIHR5cGVzIHRoYXQgZG9uJ3QgYWNjZXB0IHRleHRcbiAgdmFyIG5vblR5cGluZ0lucHV0cyA9IFtcbiAgICAnYnV0dG9uJyxcbiAgICAnY2hlY2tib3gnLFxuICAgICdmaWxlJyxcbiAgICAnaW1hZ2UnLFxuICAgICdyYWRpbycsXG4gICAgJ3Jlc2V0JyxcbiAgICAnc3VibWl0J1xuICBdO1xuXG4gIC8vIGRldGVjdCB2ZXJzaW9uIG9mIG1vdXNlIHdoZWVsIGV2ZW50IHRvIHVzZVxuICAvLyB2aWEgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3doZWVsXG4gIHZhciBtb3VzZVdoZWVsID0gZGV0ZWN0V2hlZWwoKTtcblxuICAvLyBsaXN0IG9mIG1vZGlmaWVyIGtleXMgY29tbW9ubHkgdXNlZCB3aXRoIHRoZSBtb3VzZSBhbmRcbiAgLy8gY2FuIGJlIHNhZmVseSBpZ25vcmVkIHRvIHByZXZlbnQgZmFsc2Uga2V5Ym9hcmQgZGV0ZWN0aW9uXG4gIHZhciBpZ25vcmVNYXAgPSBbXG4gICAgMTYsIC8vIHNoaWZ0XG4gICAgMTcsIC8vIGNvbnRyb2xcbiAgICAxOCwgLy8gYWx0XG4gICAgOTEsIC8vIFdpbmRvd3Mga2V5IC8gbGVmdCBBcHBsZSBjbWRcbiAgICA5MyAgLy8gV2luZG93cyBtZW51IC8gcmlnaHQgQXBwbGUgY21kXG4gIF07XG5cbiAgLy8gbWFwcGluZyBvZiBldmVudHMgdG8gaW5wdXQgdHlwZXNcbiAgdmFyIGlucHV0TWFwID0ge1xuICAgICdrZXlkb3duJzogJ2tleWJvYXJkJyxcbiAgICAna2V5dXAnOiAna2V5Ym9hcmQnLFxuICAgICdtb3VzZWRvd24nOiAnbW91c2UnLFxuICAgICdtb3VzZW1vdmUnOiAnbW91c2UnLFxuICAgICdNU1BvaW50ZXJEb3duJzogJ3BvaW50ZXInLFxuICAgICdNU1BvaW50ZXJNb3ZlJzogJ3BvaW50ZXInLFxuICAgICdwb2ludGVyZG93bic6ICdwb2ludGVyJyxcbiAgICAncG9pbnRlcm1vdmUnOiAncG9pbnRlcicsXG4gICAgJ3RvdWNoc3RhcnQnOiAndG91Y2gnXG4gIH07XG5cbiAgLy8gYWRkIGNvcnJlY3QgbW91c2Ugd2hlZWwgZXZlbnQgbWFwcGluZyB0byBgaW5wdXRNYXBgXG4gIGlucHV0TWFwW2RldGVjdFdoZWVsKCldID0gJ21vdXNlJztcblxuICAvLyBhcnJheSBvZiBhbGwgdXNlZCBpbnB1dCB0eXBlc1xuICB2YXIgaW5wdXRUeXBlcyA9IFtdO1xuXG4gIC8vIG1hcHBpbmcgb2Yga2V5IGNvZGVzIHRvIGEgY29tbW9uIG5hbWVcbiAgdmFyIGtleU1hcCA9IHtcbiAgICA5OiAndGFiJyxcbiAgICAxMzogJ2VudGVyJyxcbiAgICAxNjogJ3NoaWZ0JyxcbiAgICAyNzogJ2VzYycsXG4gICAgMzI6ICdzcGFjZScsXG4gICAgMzc6ICdsZWZ0JyxcbiAgICAzODogJ3VwJyxcbiAgICAzOTogJ3JpZ2h0JyxcbiAgICA0MDogJ2Rvd24nXG4gIH07XG5cbiAgLy8gbWFwIG9mIElFIDEwIHBvaW50ZXIgZXZlbnRzXG4gIHZhciBwb2ludGVyTWFwID0ge1xuICAgIDI6ICd0b3VjaCcsXG4gICAgMzogJ3RvdWNoJywgLy8gdHJlYXQgcGVuIGxpa2UgdG91Y2hcbiAgICA0OiAnbW91c2UnXG4gIH07XG5cbiAgLy8gdG91Y2ggYnVmZmVyIHRpbWVyXG4gIHZhciB0aW1lcjtcblxuXG4gIC8qXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb25zXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICovXG5cbiAgLy8gYWxsb3dzIGV2ZW50cyB0aGF0IGFyZSBhbHNvIHRyaWdnZXJlZCB0byBiZSBmaWx0ZXJlZCBvdXQgZm9yIGB0b3VjaHN0YXJ0YFxuICBmdW5jdGlvbiBldmVudEJ1ZmZlcigpIHtcbiAgICBjbGVhclRpbWVyKCk7XG4gICAgc2V0SW5wdXQoZXZlbnQpO1xuXG4gICAgYnVmZmVyID0gdHJ1ZTtcbiAgICB0aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgYnVmZmVyID0gZmFsc2U7XG4gICAgfSwgNjUwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlcmVkRXZlbnQoZXZlbnQpIHtcbiAgICBpZiAoIWJ1ZmZlcikgc2V0SW5wdXQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5CdWZmZXJlZEV2ZW50KGV2ZW50KSB7XG4gICAgY2xlYXJUaW1lcigpO1xuICAgIHNldElucHV0KGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyVGltZXIoKSB7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lcik7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRJbnB1dChldmVudCkge1xuICAgIHZhciBldmVudEtleSA9IGtleShldmVudCk7XG4gICAgdmFyIHZhbHVlID0gaW5wdXRNYXBbZXZlbnQudHlwZV07XG4gICAgaWYgKHZhbHVlID09PSAncG9pbnRlcicpIHZhbHVlID0gcG9pbnRlclR5cGUoZXZlbnQpO1xuXG4gICAgLy8gZG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHZhbHVlIG1hdGNoZXMgdGhlIGlucHV0IHR5cGUgYWxyZWFkeSBzZXRcbiAgICBpZiAoY3VycmVudElucHV0ICE9PSB2YWx1ZSkge1xuICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gdGFyZ2V0KGV2ZW50KTtcbiAgICAgIHZhciBldmVudFRhcmdldE5vZGUgPSBldmVudFRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIGV2ZW50VGFyZ2V0VHlwZSA9IChldmVudFRhcmdldE5vZGUgPT09ICdpbnB1dCcpID8gZXZlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0eXBlJykgOiBudWxsO1xuXG4gICAgICBpZiAoXG4gICAgICAgICgvLyBvbmx5IGlmIHRoZSB1c2VyIGZsYWcgdG8gYWxsb3cgdHlwaW5nIGluIGZvcm0gZmllbGRzIGlzbid0IHNldFxuICAgICAgICAhYm9keS5oYXNBdHRyaWJ1dGUoJ2RhdGEtd2hhdGlucHV0LWZvcm10eXBpbmcnKSAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgY3VycmVudElucHV0IGhhcyBhIHZhbHVlXG4gICAgICAgIGN1cnJlbnRJbnB1dCAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgdGhlIGlucHV0IGlzIGBrZXlib2FyZGBcbiAgICAgICAgdmFsdWUgPT09ICdrZXlib2FyZCcgJiZcblxuICAgICAgICAvLyBub3QgaWYgdGhlIGtleSBpcyBgVEFCYFxuICAgICAgICBrZXlNYXBbZXZlbnRLZXldICE9PSAndGFiJyAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgdGhlIHRhcmdldCBpcyBhIGZvcm0gaW5wdXQgdGhhdCBhY2NlcHRzIHRleHRcbiAgICAgICAgKFxuICAgICAgICAgICBldmVudFRhcmdldE5vZGUgPT09ICd0ZXh0YXJlYScgfHxcbiAgICAgICAgICAgZXZlbnRUYXJnZXROb2RlID09PSAnc2VsZWN0JyB8fFxuICAgICAgICAgICAoZXZlbnRUYXJnZXROb2RlID09PSAnaW5wdXQnICYmIG5vblR5cGluZ0lucHV0cy5pbmRleE9mKGV2ZW50VGFyZ2V0VHlwZSkgPCAwKVxuICAgICAgICApKSB8fCAoXG4gICAgICAgICAgLy8gaWdub3JlIG1vZGlmaWVyIGtleXNcbiAgICAgICAgICBpZ25vcmVNYXAuaW5kZXhPZihldmVudEtleSkgPiAtMVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgLy8gaWdub3JlIGtleWJvYXJkIHR5cGluZ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoSW5wdXQodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PT0gJ2tleWJvYXJkJykgbG9nS2V5cyhldmVudEtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBzd2l0Y2hJbnB1dChzdHJpbmcpIHtcbiAgICBjdXJyZW50SW5wdXQgPSBzdHJpbmc7XG4gICAgYm9keS5zZXRBdHRyaWJ1dGUoJ2RhdGEtd2hhdGlucHV0JywgY3VycmVudElucHV0KTtcblxuICAgIGlmIChpbnB1dFR5cGVzLmluZGV4T2YoY3VycmVudElucHV0KSA9PT0gLTEpIGlucHV0VHlwZXMucHVzaChjdXJyZW50SW5wdXQpO1xuICB9XG5cbiAgZnVuY3Rpb24ga2V5KGV2ZW50KSB7XG4gICAgcmV0dXJuIChldmVudC5rZXlDb2RlKSA/IGV2ZW50LmtleUNvZGUgOiBldmVudC53aGljaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRhcmdldChldmVudCkge1xuICAgIHJldHVybiBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50ZXJUeXBlKGV2ZW50KSB7XG4gICAgaWYgKHR5cGVvZiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBwb2ludGVyTWFwW2V2ZW50LnBvaW50ZXJUeXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChldmVudC5wb2ludGVyVHlwZSA9PT0gJ3BlbicpID8gJ3RvdWNoJyA6IGV2ZW50LnBvaW50ZXJUeXBlOyAvLyB0cmVhdCBwZW4gbGlrZSB0b3VjaFxuICAgIH1cbiAgfVxuXG4gIC8vIGtleWJvYXJkIGxvZ2dpbmdcbiAgZnVuY3Rpb24gbG9nS2V5cyhldmVudEtleSkge1xuICAgIGlmIChhY3RpdmVLZXlzLmluZGV4T2Yoa2V5TWFwW2V2ZW50S2V5XSkgPT09IC0xICYmIGtleU1hcFtldmVudEtleV0pIGFjdGl2ZUtleXMucHVzaChrZXlNYXBbZXZlbnRLZXldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuTG9nS2V5cyhldmVudCkge1xuICAgIHZhciBldmVudEtleSA9IGtleShldmVudCk7XG4gICAgdmFyIGFycmF5UG9zID0gYWN0aXZlS2V5cy5pbmRleE9mKGtleU1hcFtldmVudEtleV0pO1xuXG4gICAgaWYgKGFycmF5UG9zICE9PSAtMSkgYWN0aXZlS2V5cy5zcGxpY2UoYXJyYXlQb3MsIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcbiAgICBib2R5ID0gZG9jdW1lbnQuYm9keTtcblxuICAgIC8vIHBvaW50ZXIgZXZlbnRzIChtb3VzZSwgcGVuLCB0b3VjaClcbiAgICBpZiAod2luZG93LlBvaW50ZXJFdmVudCkge1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgIH0gZWxzZSBpZiAod2luZG93Lk1TUG9pbnRlckV2ZW50KSB7XG4gICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ01TUG9pbnRlckRvd24nLCBidWZmZXJlZEV2ZW50KTtcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyTW92ZScsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vIG1vdXNlIGV2ZW50c1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBidWZmZXJlZEV2ZW50KTtcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgYnVmZmVyZWRFdmVudCk7XG5cbiAgICAgIC8vIHRvdWNoIGV2ZW50c1xuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykge1xuICAgICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBldmVudEJ1ZmZlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbW91c2Ugd2hlZWxcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIobW91c2VXaGVlbCwgYnVmZmVyZWRFdmVudCk7XG5cbiAgICAvLyBrZXlib2FyZCBldmVudHNcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB1bkJ1ZmZlcmVkRXZlbnQpO1xuICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB1bkJ1ZmZlcmVkRXZlbnQpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdW5Mb2dLZXlzKTtcbiAgfVxuXG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICB1dGlsaXRpZXNcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICAvLyBkZXRlY3QgdmVyc2lvbiBvZiBtb3VzZSB3aGVlbCBldmVudCB0byB1c2VcbiAgLy8gdmlhIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy93aGVlbFxuICBmdW5jdGlvbiBkZXRlY3RXaGVlbCgpIHtcbiAgICByZXR1cm4gbW91c2VXaGVlbCA9ICdvbndoZWVsJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA/XG4gICAgICAnd2hlZWwnIDogLy8gTW9kZXJuIGJyb3dzZXJzIHN1cHBvcnQgXCJ3aGVlbFwiXG5cbiAgICAgIGRvY3VtZW50Lm9ubW91c2V3aGVlbCAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgJ21vdXNld2hlZWwnIDogLy8gV2Via2l0IGFuZCBJRSBzdXBwb3J0IGF0IGxlYXN0IFwibW91c2V3aGVlbFwiXG4gICAgICAgICdET01Nb3VzZVNjcm9sbCc7IC8vIGxldCdzIGFzc3VtZSB0aGF0IHJlbWFpbmluZyBicm93c2VycyBhcmUgb2xkZXIgRmlyZWZveFxuICB9XG5cblxuICAvKlxuICAgIC0tLS0tLS0tLS0tLS0tLVxuICAgIGluaXRcblxuICAgIGRvbid0IHN0YXJ0IHNjcmlwdCB1bmxlc3MgYnJvd3NlciBjdXRzIHRoZSBtdXN0YXJkLFxuICAgIGFsc28gcGFzc2VzIGlmIHBvbHlmaWxscyBhcmUgdXNlZFxuICAgIC0tLS0tLS0tLS0tLS0tLVxuICAqL1xuXG4gIGlmIChcbiAgICAnYWRkRXZlbnRMaXN0ZW5lcicgaW4gd2luZG93ICYmXG4gICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZcbiAgKSB7XG5cbiAgICAvLyBpZiB0aGUgZG9tIGlzIGFscmVhZHkgcmVhZHkgYWxyZWFkeSAoc2NyaXB0IHdhcyBwbGFjZWQgYXQgYm90dG9tIG9mIDxib2R5PilcbiAgICBpZiAoZG9jdW1lbnQuYm9keSkge1xuICAgICAgYmluZEV2ZW50cygpO1xuXG4gICAgLy8gb3RoZXJ3aXNlIHdhaXQgZm9yIHRoZSBkb20gdG8gbG9hZCAoc2NyaXB0IHdhcyBwbGFjZWQgaW4gdGhlIDxoZWFkPilcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGJpbmRFdmVudHMpO1xuICAgIH1cbiAgfVxuXG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICBhcGlcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICByZXR1cm4ge1xuXG4gICAgLy8gcmV0dXJucyBzdHJpbmc6IHRoZSBjdXJyZW50IGlucHV0IHR5cGVcbiAgICBhc2s6IGZ1bmN0aW9uKCkgeyByZXR1cm4gY3VycmVudElucHV0OyB9LFxuXG4gICAgLy8gcmV0dXJucyBhcnJheTogY3VycmVudGx5IHByZXNzZWQga2V5c1xuICAgIGtleXM6IGZ1bmN0aW9uKCkgeyByZXR1cm4gYWN0aXZlS2V5czsgfSxcblxuICAgIC8vIHJldHVybnMgYXJyYXk6IGFsbCB0aGUgZGV0ZWN0ZWQgaW5wdXQgdHlwZXNcbiAgICB0eXBlczogZnVuY3Rpb24oKSB7IHJldHVybiBpbnB1dFR5cGVzOyB9LFxuXG4gICAgLy8gYWNjZXB0cyBzdHJpbmc6IG1hbnVhbGx5IHNldCB0aGUgaW5wdXQgdHlwZVxuICAgIHNldDogc3dpdGNoSW5wdXRcbiAgfTtcblxufSgpKTtcbiIsIiFmdW5jdGlvbigkKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRk9VTkRBVElPTl9WRVJTSU9OID0gJzYuMi40JztcblxuLy8gR2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4vLyBUaGlzIGlzIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3csIG9yIHVzZWQgYXMgYSBtb2R1bGUgZm9yIEFNRC9Ccm93c2VyaWZ5XG52YXIgRm91bmRhdGlvbiA9IHtcbiAgdmVyc2lvbjogRk9VTkRBVElPTl9WRVJTSU9OLFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgaW5pdGlhbGl6ZWQgcGx1Z2lucy5cbiAgICovXG4gIF9wbHVnaW5zOiB7fSxcblxuICAvKipcbiAgICogU3RvcmVzIGdlbmVyYXRlZCB1bmlxdWUgaWRzIGZvciBwbHVnaW4gaW5zdGFuY2VzXG4gICAqL1xuICBfdXVpZHM6IFtdLFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBmb3IgUlRMIHN1cHBvcnRcbiAgICovXG4gIHJ0bDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gJCgnaHRtbCcpLmF0dHIoJ2RpcicpID09PSAncnRsJztcbiAgfSxcbiAgLyoqXG4gICAqIERlZmluZXMgYSBGb3VuZGF0aW9uIHBsdWdpbiwgYWRkaW5nIGl0IHRvIHRoZSBgRm91bmRhdGlvbmAgbmFtZXNwYWNlIGFuZCB0aGUgbGlzdCBvZiBwbHVnaW5zIHRvIGluaXRpYWxpemUgd2hlbiByZWZsb3dpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBUaGUgY29uc3RydWN0b3Igb2YgdGhlIHBsdWdpbi5cbiAgICovXG4gIHBsdWdpbjogZnVuY3Rpb24ocGx1Z2luLCBuYW1lKSB7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBhZGRpbmcgdG8gZ2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4gICAgLy8gRXhhbXBsZXM6IEZvdW5kYXRpb24uUmV2ZWFsLCBGb3VuZGF0aW9uLk9mZkNhbnZhc1xuICAgIHZhciBjbGFzc05hbWUgPSAobmFtZSB8fCBmdW5jdGlvbk5hbWUocGx1Z2luKSk7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBzdG9yaW5nIHRoZSBwbHVnaW4sIGFsc28gdXNlZCB0byBjcmVhdGUgdGhlIGlkZW50aWZ5aW5nIGRhdGEgYXR0cmlidXRlIGZvciB0aGUgcGx1Z2luXG4gICAgLy8gRXhhbXBsZXM6IGRhdGEtcmV2ZWFsLCBkYXRhLW9mZi1jYW52YXNcbiAgICB2YXIgYXR0ck5hbWUgID0gaHlwaGVuYXRlKGNsYXNzTmFtZSk7XG5cbiAgICAvLyBBZGQgdG8gdGhlIEZvdW5kYXRpb24gb2JqZWN0IGFuZCB0aGUgcGx1Z2lucyBsaXN0IChmb3IgcmVmbG93aW5nKVxuICAgIHRoaXMuX3BsdWdpbnNbYXR0ck5hbWVdID0gdGhpc1tjbGFzc05hbWVdID0gcGx1Z2luO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFBvcHVsYXRlcyB0aGUgX3V1aWRzIGFycmF5IHdpdGggcG9pbnRlcnMgdG8gZWFjaCBpbmRpdmlkdWFsIHBsdWdpbiBpbnN0YW5jZS5cbiAgICogQWRkcyB0aGUgYHpmUGx1Z2luYCBkYXRhLWF0dHJpYnV0ZSB0byBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgcGx1Z2lucyB0byBhbGxvdyB1c2Ugb2YgJChzZWxlY3RvcikuZm91bmRhdGlvbihtZXRob2QpIGNhbGxzLlxuICAgKiBBbHNvIGZpcmVzIHRoZSBpbml0aWFsaXphdGlvbiBldmVudCBmb3IgZWFjaCBwbHVnaW4sIGNvbnNvbGlkYXRpbmcgcmVwZXRpdGl2ZSBjb2RlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gYW4gaW5zdGFuY2Ugb2YgYSBwbHVnaW4sIHVzdWFsbHkgYHRoaXNgIGluIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHBsdWdpbiwgcGFzc2VkIGFzIGEgY2FtZWxDYXNlZCBzdHJpbmcuXG4gICAqIEBmaXJlcyBQbHVnaW4jaW5pdFxuICAgKi9cbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uKHBsdWdpbiwgbmFtZSl7XG4gICAgdmFyIHBsdWdpbk5hbWUgPSBuYW1lID8gaHlwaGVuYXRlKG5hbWUpIDogZnVuY3Rpb25OYW1lKHBsdWdpbi5jb25zdHJ1Y3RvcikudG9Mb3dlckNhc2UoKTtcbiAgICBwbHVnaW4udXVpZCA9IHRoaXMuR2V0WW9EaWdpdHMoNiwgcGx1Z2luTmFtZSk7XG5cbiAgICBpZighcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApKXsgcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWAsIHBsdWdpbi51dWlkKTsgfVxuICAgIGlmKCFwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKSl7IHBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicsIHBsdWdpbik7IH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAgICAgICAqL1xuICAgIHBsdWdpbi4kZWxlbWVudC50cmlnZ2VyKGBpbml0LnpmLiR7cGx1Z2luTmFtZX1gKTtcblxuICAgIHRoaXMuX3V1aWRzLnB1c2gocGx1Z2luLnV1aWQpO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFJlbW92ZXMgdGhlIHBsdWdpbnMgdXVpZCBmcm9tIHRoZSBfdXVpZHMgYXJyYXkuXG4gICAqIFJlbW92ZXMgdGhlIHpmUGx1Z2luIGRhdGEgYXR0cmlidXRlLCBhcyB3ZWxsIGFzIHRoZSBkYXRhLXBsdWdpbi1uYW1lIGF0dHJpYnV0ZS5cbiAgICogQWxzbyBmaXJlcyB0aGUgZGVzdHJveWVkIGV2ZW50IGZvciB0aGUgcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rlc3Ryb3llZFxuICAgKi9cbiAgdW5yZWdpc3RlclBsdWdpbjogZnVuY3Rpb24ocGx1Z2luKXtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IGh5cGhlbmF0ZShmdW5jdGlvbk5hbWUocGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykuY29uc3RydWN0b3IpKTtcblxuICAgIHRoaXMuX3V1aWRzLnNwbGljZSh0aGlzLl91dWlkcy5pbmRleE9mKHBsdWdpbi51dWlkKSwgMSk7XG4gICAgcGx1Z2luLiRlbGVtZW50LnJlbW92ZUF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApLnJlbW92ZURhdGEoJ3pmUGx1Z2luJylcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gZGVzdHJveWVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jZGVzdHJveWVkXG4gICAgICAgICAgICovXG4gICAgICAgICAgLnRyaWdnZXIoYGRlc3Ryb3llZC56Zi4ke3BsdWdpbk5hbWV9YCk7XG4gICAgZm9yKHZhciBwcm9wIGluIHBsdWdpbil7XG4gICAgICBwbHVnaW5bcHJvcF0gPSBudWxsOy8vY2xlYW4gdXAgc2NyaXB0IHRvIHByZXAgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQ2F1c2VzIG9uZSBvciBtb3JlIGFjdGl2ZSBwbHVnaW5zIHRvIHJlLWluaXRpYWxpemUsIHJlc2V0dGluZyBldmVudCBsaXN0ZW5lcnMsIHJlY2FsY3VsYXRpbmcgcG9zaXRpb25zLCBldGMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5zIC0gb3B0aW9uYWwgc3RyaW5nIG9mIGFuIGluZGl2aWR1YWwgcGx1Z2luIGtleSwgYXR0YWluZWQgYnkgY2FsbGluZyBgJChlbGVtZW50KS5kYXRhKCdwbHVnaW5OYW1lJylgLCBvciBzdHJpbmcgb2YgYSBwbHVnaW4gY2xhc3MgaS5lLiBgJ2Ryb3Bkb3duJ2BcbiAgICogQGRlZmF1bHQgSWYgbm8gYXJndW1lbnQgaXMgcGFzc2VkLCByZWZsb3cgYWxsIGN1cnJlbnRseSBhY3RpdmUgcGx1Z2lucy5cbiAgICovXG4gICByZUluaXQ6IGZ1bmN0aW9uKHBsdWdpbnMpe1xuICAgICB2YXIgaXNKUSA9IHBsdWdpbnMgaW5zdGFuY2VvZiAkO1xuICAgICB0cnl7XG4gICAgICAgaWYoaXNKUSl7XG4gICAgICAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgJCh0aGlzKS5kYXRhKCd6ZlBsdWdpbicpLl9pbml0KCk7XG4gICAgICAgICB9KTtcbiAgICAgICB9ZWxzZXtcbiAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHBsdWdpbnMsXG4gICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICBmbnMgPSB7XG4gICAgICAgICAgICdvYmplY3QnOiBmdW5jdGlvbihwbGdzKXtcbiAgICAgICAgICAgICBwbGdzLmZvckVhY2goZnVuY3Rpb24ocCl7XG4gICAgICAgICAgICAgICBwID0gaHlwaGVuYXRlKHApO1xuICAgICAgICAgICAgICAgJCgnW2RhdGEtJysgcCArJ10nKS5mb3VuZGF0aW9uKCdfaW5pdCcpO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICB9LFxuICAgICAgICAgICAnc3RyaW5nJzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICBwbHVnaW5zID0gaHlwaGVuYXRlKHBsdWdpbnMpO1xuICAgICAgICAgICAgICQoJ1tkYXRhLScrIHBsdWdpbnMgKyddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgJ3VuZGVmaW5lZCc6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgdGhpc1snb2JqZWN0J10oT2JqZWN0LmtleXMoX3RoaXMuX3BsdWdpbnMpKTtcbiAgICAgICAgICAgfVxuICAgICAgICAgfTtcbiAgICAgICAgIGZuc1t0eXBlXShwbHVnaW5zKTtcbiAgICAgICB9XG4gICAgIH1jYXRjaChlcnIpe1xuICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgfWZpbmFsbHl7XG4gICAgICAgcmV0dXJuIHBsdWdpbnM7XG4gICAgIH1cbiAgIH0sXG5cbiAgLyoqXG4gICAqIHJldHVybnMgYSByYW5kb20gYmFzZS0zNiB1aWQgd2l0aCBuYW1lc3BhY2luZ1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCAtIG51bWJlciBvZiByYW5kb20gYmFzZS0zNiBkaWdpdHMgZGVzaXJlZC4gSW5jcmVhc2UgZm9yIG1vcmUgcmFuZG9tIHN0cmluZ3MuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBuYW1lIG9mIHBsdWdpbiB0byBiZSBpbmNvcnBvcmF0ZWQgaW4gdWlkLCBvcHRpb25hbC5cbiAgICogQGRlZmF1bHQge1N0cmluZ30gJycgLSBpZiBubyBwbHVnaW4gbmFtZSBpcyBwcm92aWRlZCwgbm90aGluZyBpcyBhcHBlbmRlZCB0byB0aGUgdWlkLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHVuaXF1ZSBpZFxuICAgKi9cbiAgR2V0WW9EaWdpdHM6IGZ1bmN0aW9uKGxlbmd0aCwgbmFtZXNwYWNlKXtcbiAgICBsZW5ndGggPSBsZW5ndGggfHwgNjtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoTWF0aC5wb3coMzYsIGxlbmd0aCArIDEpIC0gTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDM2LCBsZW5ndGgpKSkudG9TdHJpbmcoMzYpLnNsaWNlKDEpICsgKG5hbWVzcGFjZSA/IGAtJHtuYW1lc3BhY2V9YCA6ICcnKTtcbiAgfSxcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgcGx1Z2lucyBvbiBhbnkgZWxlbWVudHMgd2l0aGluIGBlbGVtYCAoYW5kIGBlbGVtYCBpdHNlbGYpIHRoYXQgYXJlbid0IGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIC0galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50IHRvIGNoZWNrIGluc2lkZS4gQWxzbyBjaGVja3MgdGhlIGVsZW1lbnQgaXRzZWxmLCB1bmxlc3MgaXQncyB0aGUgYGRvY3VtZW50YCBvYmplY3QuXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBwbHVnaW5zIC0gQSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZS4gTGVhdmUgdGhpcyBvdXQgdG8gaW5pdGlhbGl6ZSBldmVyeXRoaW5nLlxuICAgKi9cbiAgcmVmbG93OiBmdW5jdGlvbihlbGVtLCBwbHVnaW5zKSB7XG5cbiAgICAvLyBJZiBwbHVnaW5zIGlzIHVuZGVmaW5lZCwganVzdCBncmFiIGV2ZXJ5dGhpbmdcbiAgICBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwbHVnaW5zID0gT2JqZWN0LmtleXModGhpcy5fcGx1Z2lucyk7XG4gICAgfVxuICAgIC8vIElmIHBsdWdpbnMgaXMgYSBzdHJpbmcsIGNvbnZlcnQgaXQgdG8gYW4gYXJyYXkgd2l0aCBvbmUgaXRlbVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z2lucyA9IFtwbHVnaW5zXTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcGx1Z2luXG4gICAgJC5lYWNoKHBsdWdpbnMsIGZ1bmN0aW9uKGksIG5hbWUpIHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwbHVnaW5cbiAgICAgIHZhciBwbHVnaW4gPSBfdGhpcy5fcGx1Z2luc1tuYW1lXTtcblxuICAgICAgLy8gTG9jYWxpemUgdGhlIHNlYXJjaCB0byBhbGwgZWxlbWVudHMgaW5zaWRlIGVsZW0sIGFzIHdlbGwgYXMgZWxlbSBpdHNlbGYsIHVubGVzcyBlbGVtID09PSBkb2N1bWVudFxuICAgICAgdmFyICRlbGVtID0gJChlbGVtKS5maW5kKCdbZGF0YS0nK25hbWUrJ10nKS5hZGRCYWNrKCdbZGF0YS0nK25hbWUrJ10nKTtcblxuICAgICAgLy8gRm9yIGVhY2ggcGx1Z2luIGZvdW5kLCBpbml0aWFsaXplIGl0XG4gICAgICAkZWxlbS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgJGVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWRpcCBvbiBwbHVnaW5zXG4gICAgICAgIGlmICgkZWwuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIGluaXRpYWxpemUgXCIrbmFtZStcIiBvbiBhbiBlbGVtZW50IHRoYXQgYWxyZWFkeSBoYXMgYSBGb3VuZGF0aW9uIHBsdWdpbi5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoJGVsLmF0dHIoJ2RhdGEtb3B0aW9ucycpKXtcbiAgICAgICAgICB2YXIgdGhpbmcgPSAkZWwuYXR0cignZGF0YS1vcHRpb25zJykuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uKGUsIGkpe1xuICAgICAgICAgICAgdmFyIG9wdCA9IGUuc3BsaXQoJzonKS5tYXAoZnVuY3Rpb24oZWwpeyByZXR1cm4gZWwudHJpbSgpOyB9KTtcbiAgICAgICAgICAgIGlmKG9wdFswXSkgb3B0c1tvcHRbMF1dID0gcGFyc2VWYWx1ZShvcHRbMV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAkZWwuZGF0YSgnemZQbHVnaW4nLCBuZXcgcGx1Z2luKCQodGhpcyksIG9wdHMpKTtcbiAgICAgICAgfWNhdGNoKGVyKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVyKTtcbiAgICAgICAgfWZpbmFsbHl7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0Rm5OYW1lOiBmdW5jdGlvbk5hbWUsXG4gIHRyYW5zaXRpb25lbmQ6IGZ1bmN0aW9uKCRlbGVtKXtcbiAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgICAndHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAnT1RyYW5zaXRpb24nOiAnb3RyYW5zaXRpb25lbmQnXG4gICAgfTtcbiAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICBlbmQ7XG5cbiAgICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKXtcbiAgICAgIGlmICh0eXBlb2YgZWxlbS5zdHlsZVt0XSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBlbmQgPSB0cmFuc2l0aW9uc1t0XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoZW5kKXtcbiAgICAgIHJldHVybiBlbmQ7XG4gICAgfWVsc2V7XG4gICAgICBlbmQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICRlbGVtLnRyaWdnZXJIYW5kbGVyKCd0cmFuc2l0aW9uZW5kJywgWyRlbGVtXSk7XG4gICAgICB9LCAxKTtcbiAgICAgIHJldHVybiAndHJhbnNpdGlvbmVuZCc7XG4gICAgfVxuICB9XG59O1xuXG5Gb3VuZGF0aW9uLnV0aWwgPSB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiBmb3IgYXBwbHlpbmcgYSBkZWJvdW5jZSBlZmZlY3QgdG8gYSBmdW5jdGlvbiBjYWxsLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhdCBlbmQgb2YgdGltZW91dC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5IC0gVGltZSBpbiBtcyB0byBkZWxheSB0aGUgY2FsbCBvZiBgZnVuY2AuXG4gICAqIEByZXR1cm5zIGZ1bmN0aW9uXG4gICAqL1xuICB0aHJvdHRsZTogZnVuY3Rpb24gKGZ1bmMsIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgIGlmICh0aW1lciA9PT0gbnVsbCkge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuLy8gVE9ETzogY29uc2lkZXIgbm90IG1ha2luZyB0aGlzIGEgalF1ZXJ5IGZ1bmN0aW9uXG4vLyBUT0RPOiBuZWVkIHdheSB0byByZWZsb3cgdnMuIHJlLWluaXRpYWxpemVcbi8qKlxuICogVGhlIEZvdW5kYXRpb24galF1ZXJ5IG1ldGhvZC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBtZXRob2QgLSBBbiBhY3Rpb24gdG8gcGVyZm9ybSBvbiB0aGUgY3VycmVudCBqUXVlcnkgb2JqZWN0LlxuICovXG52YXIgZm91bmRhdGlvbiA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBtZXRob2QsXG4gICAgICAkbWV0YSA9ICQoJ21ldGEuZm91bmRhdGlvbi1tcScpLFxuICAgICAgJG5vSlMgPSAkKCcubm8tanMnKTtcblxuICBpZighJG1ldGEubGVuZ3RoKXtcbiAgICAkKCc8bWV0YSBjbGFzcz1cImZvdW5kYXRpb24tbXFcIj4nKS5hcHBlbmRUbyhkb2N1bWVudC5oZWFkKTtcbiAgfVxuICBpZigkbm9KUy5sZW5ndGgpe1xuICAgICRub0pTLnJlbW92ZUNsYXNzKCduby1qcycpO1xuICB9XG5cbiAgaWYodHlwZSA9PT0gJ3VuZGVmaW5lZCcpey8vbmVlZHMgdG8gaW5pdGlhbGl6ZSB0aGUgRm91bmRhdGlvbiBvYmplY3QsIG9yIGFuIGluZGl2aWR1YWwgcGx1Z2luLlxuICAgIEZvdW5kYXRpb24uTWVkaWFRdWVyeS5faW5pdCgpO1xuICAgIEZvdW5kYXRpb24ucmVmbG93KHRoaXMpO1xuICB9ZWxzZSBpZih0eXBlID09PSAnc3RyaW5nJyl7Ly9hbiBpbmRpdmlkdWFsIG1ldGhvZCB0byBpbnZva2Ugb24gYSBwbHVnaW4gb3IgZ3JvdXAgb2YgcGx1Z2luc1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsvL2NvbGxlY3QgYWxsIHRoZSBhcmd1bWVudHMsIGlmIG5lY2Vzc2FyeVxuICAgIHZhciBwbHVnQ2xhc3MgPSB0aGlzLmRhdGEoJ3pmUGx1Z2luJyk7Ly9kZXRlcm1pbmUgdGhlIGNsYXNzIG9mIHBsdWdpblxuXG4gICAgaWYocGx1Z0NsYXNzICE9PSB1bmRlZmluZWQgJiYgcGx1Z0NsYXNzW21ldGhvZF0gIT09IHVuZGVmaW5lZCl7Ly9tYWtlIHN1cmUgYm90aCB0aGUgY2xhc3MgYW5kIG1ldGhvZCBleGlzdFxuICAgICAgaWYodGhpcy5sZW5ndGggPT09IDEpey8vaWYgdGhlcmUncyBvbmx5IG9uZSwgY2FsbCBpdCBkaXJlY3RseS5cbiAgICAgICAgICBwbHVnQ2xhc3NbbWV0aG9kXS5hcHBseShwbHVnQ2xhc3MsIGFyZ3MpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpLCBlbCl7Ly9vdGhlcndpc2UgbG9vcCB0aHJvdWdoIHRoZSBqUXVlcnkgY29sbGVjdGlvbiBhbmQgaW52b2tlIHRoZSBtZXRob2Qgb24gZWFjaFxuICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KCQoZWwpLmRhdGEoJ3pmUGx1Z2luJyksIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9ZWxzZXsvL2Vycm9yIGZvciBubyBjbGFzcyBvciBubyBtZXRob2RcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIldlJ3JlIHNvcnJ5LCAnXCIgKyBtZXRob2QgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBtZXRob2QgZm9yIFwiICsgKHBsdWdDbGFzcyA/IGZ1bmN0aW9uTmFtZShwbHVnQ2xhc3MpIDogJ3RoaXMgZWxlbWVudCcpICsgJy4nKTtcbiAgICB9XG4gIH1lbHNley8vZXJyb3IgZm9yIGludmFsaWQgYXJndW1lbnQgdHlwZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFdlJ3JlIHNvcnJ5LCAke3R5cGV9IGlzIG5vdCBhIHZhbGlkIHBhcmFtZXRlci4gWW91IG11c3QgdXNlIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWV0aG9kIHlvdSB3aXNoIHRvIGludm9rZS5gKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbndpbmRvdy5Gb3VuZGF0aW9uID0gRm91bmRhdGlvbjtcbiQuZm4uZm91bmRhdGlvbiA9IGZvdW5kYXRpb247XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbigpIHtcbiAgaWYgKCFEYXRlLm5vdyB8fCAhd2luZG93LkRhdGUubm93KVxuICAgIHdpbmRvdy5EYXRlLm5vdyA9IERhdGUubm93ID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcblxuICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcbiAgICAgIHZhciB2cCA9IHZlbmRvcnNbaV07XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZwKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9ICh3aW5kb3dbdnArJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvd1t2cCsnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ10pO1xuICB9XG4gIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sobGFzdFRpbWUgPSBuZXh0VGltZSk7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUaW1lIC0gbm93KTtcbiAgICB9O1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgfVxuICAvKipcbiAgICogUG9seWZpbGwgZm9yIHBlcmZvcm1hbmNlLm5vdywgcmVxdWlyZWQgYnkgckFGXG4gICAqL1xuICBpZighd2luZG93LnBlcmZvcm1hbmNlIHx8ICF3aW5kb3cucGVyZm9ybWFuY2Uubm93KXtcbiAgICB3aW5kb3cucGVyZm9ybWFuY2UgPSB7XG4gICAgICBzdGFydDogRGF0ZS5ub3coKSxcbiAgICAgIG5vdzogZnVuY3Rpb24oKXsgcmV0dXJuIERhdGUubm93KCkgLSB0aGlzLnN0YXJ0OyB9XG4gICAgfTtcbiAgfVxufSkoKTtcbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbihvVGhpcykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XG4gICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZScpO1xuICAgIH1cblxuICAgIHZhciBhQXJncyAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgZlRvQmluZCA9IHRoaXMsXG4gICAgICAgIGZOT1AgICAgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgICBmQm91bmQgID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGZUb0JpbmQuYXBwbHkodGhpcyBpbnN0YW5jZW9mIGZOT1BcbiAgICAgICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICAgICAgIDogb1RoaXMsXG4gICAgICAgICAgICAgICAgIGFBcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm90b3R5cGUpIHtcbiAgICAgIC8vIG5hdGl2ZSBmdW5jdGlvbnMgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZVxuICAgICAgZk5PUC5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcbiAgICB9XG4gICAgZkJvdW5kLnByb3RvdHlwZSA9IG5ldyBmTk9QKCk7XG5cbiAgICByZXR1cm4gZkJvdW5kO1xuICB9O1xufVxuLy8gUG9seWZpbGwgdG8gZ2V0IHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gaW4gSUU5XG5mdW5jdGlvbiBmdW5jdGlvbk5hbWUoZm4pIHtcbiAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvblxccyhbXihdezEsfSlcXCgvO1xuICAgIHZhciByZXN1bHRzID0gKGZ1bmNOYW1lUmVnZXgpLmV4ZWMoKGZuKS50b1N0cmluZygpKTtcbiAgICByZXR1cm4gKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGggPiAxKSA/IHJlc3VsdHNbMV0udHJpbSgpIDogXCJcIjtcbiAgfVxuICBlbHNlIGlmIChmbi5wcm90b3R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmbi5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBmbi5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZShzdHIpe1xuICBpZigvdHJ1ZS8udGVzdChzdHIpKSByZXR1cm4gdHJ1ZTtcbiAgZWxzZSBpZigvZmFsc2UvLnRlc3Qoc3RyKSkgcmV0dXJuIGZhbHNlO1xuICBlbHNlIGlmKCFpc05hTihzdHIgKiAxKSkgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cbi8vIENvbnZlcnQgUGFzY2FsQ2FzZSB0byBrZWJhYi1jYXNlXG4vLyBUaGFuayB5b3U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg5NTU1ODBcbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xufVxuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbkZvdW5kYXRpb24uQm94ID0ge1xuICBJbU5vdFRvdWNoaW5nWW91OiBJbU5vdFRvdWNoaW5nWW91LFxuICBHZXREaW1lbnNpb25zOiBHZXREaW1lbnNpb25zLFxuICBHZXRPZmZzZXRzOiBHZXRPZmZzZXRzXG59XG5cbi8qKlxuICogQ29tcGFyZXMgdGhlIGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudCB0byBhIGNvbnRhaW5lciBhbmQgZGV0ZXJtaW5lcyBjb2xsaXNpb24gZXZlbnRzIHdpdGggY29udGFpbmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdGVzdCBmb3IgY29sbGlzaW9ucy5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBwYXJlbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHVzZSBhcyBib3VuZGluZyBjb250YWluZXIuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGxyT25seSAtIHNldCB0byB0cnVlIHRvIGNoZWNrIGxlZnQgYW5kIHJpZ2h0IHZhbHVlcyBvbmx5LlxuICogQHBhcmFtIHtCb29sZWFufSB0Yk9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayB0b3AgYW5kIGJvdHRvbSB2YWx1ZXMgb25seS5cbiAqIEBkZWZhdWx0IGlmIG5vIHBhcmVudCBvYmplY3QgcGFzc2VkLCBkZXRlY3RzIGNvbGxpc2lvbnMgd2l0aCBgd2luZG93YC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgY29sbGlzaW9uIGZyZWUsIGZhbHNlIGlmIGEgY29sbGlzaW9uIGluIGFueSBkaXJlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIEltTm90VG91Y2hpbmdZb3UoZWxlbWVudCwgcGFyZW50LCBsck9ubHksIHRiT25seSkge1xuICB2YXIgZWxlRGltcyA9IEdldERpbWVuc2lvbnMoZWxlbWVudCksXG4gICAgICB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQ7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIHZhciBwYXJEaW1zID0gR2V0RGltZW5zaW9ucyhwYXJlbnQpO1xuXG4gICAgYm90dG9tID0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0IDw9IHBhckRpbXMuaGVpZ2h0ICsgcGFyRGltcy5vZmZzZXQudG9wKTtcbiAgICB0b3AgICAgPSAoZWxlRGltcy5vZmZzZXQudG9wID49IHBhckRpbXMub2Zmc2V0LnRvcCk7XG4gICAgbGVmdCAgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgPj0gcGFyRGltcy5vZmZzZXQubGVmdCk7XG4gICAgcmlnaHQgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgKyBlbGVEaW1zLndpZHRoIDw9IHBhckRpbXMud2lkdGggKyBwYXJEaW1zLm9mZnNldC5sZWZ0KTtcbiAgfVxuICBlbHNlIHtcbiAgICBib3R0b20gPSAoZWxlRGltcy5vZmZzZXQudG9wICsgZWxlRGltcy5oZWlnaHQgPD0gZWxlRGltcy53aW5kb3dEaW1zLmhlaWdodCArIGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wKTtcbiAgICB0b3AgICAgPSAoZWxlRGltcy5vZmZzZXQudG9wID49IGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wKTtcbiAgICBsZWZ0ICAgPSAoZWxlRGltcy5vZmZzZXQubGVmdCA+PSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQpO1xuICAgIHJpZ2h0ICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ICsgZWxlRGltcy53aWR0aCA8PSBlbGVEaW1zLndpbmRvd0RpbXMud2lkdGgpO1xuICB9XG5cbiAgdmFyIGFsbERpcnMgPSBbYm90dG9tLCB0b3AsIGxlZnQsIHJpZ2h0XTtcblxuICBpZiAobHJPbmx5KSB7XG4gICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0ID09PSB0cnVlO1xuICB9XG5cbiAgaWYgKHRiT25seSkge1xuICAgIHJldHVybiB0b3AgPT09IGJvdHRvbSA9PT0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhbGxEaXJzLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbn07XG5cbi8qKlxuICogVXNlcyBuYXRpdmUgbWV0aG9kcyB0byByZXR1cm4gYW4gb2JqZWN0IG9mIGRpbWVuc2lvbiB2YWx1ZXMuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5IHx8IEhUTUx9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IG9yIERPTSBlbGVtZW50IGZvciB3aGljaCB0byBnZXQgdGhlIGRpbWVuc2lvbnMuIENhbiBiZSBhbnkgZWxlbWVudCBvdGhlciB0aGF0IGRvY3VtZW50IG9yIHdpbmRvdy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gbmVzdGVkIG9iamVjdCBvZiBpbnRlZ2VyIHBpeGVsIHZhbHVlc1xuICogVE9ETyAtIGlmIGVsZW1lbnQgaXMgd2luZG93LCByZXR1cm4gb25seSB0aG9zZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIEdldERpbWVuc2lvbnMoZWxlbSwgdGVzdCl7XG4gIGVsZW0gPSBlbGVtLmxlbmd0aCA/IGVsZW1bMF0gOiBlbGVtO1xuXG4gIGlmIChlbGVtID09PSB3aW5kb3cgfHwgZWxlbSA9PT0gZG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJJ20gc29ycnksIERhdmUuIEknbSBhZnJhaWQgSSBjYW4ndCBkbyB0aGF0LlwiKTtcbiAgfVxuXG4gIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHBhclJlY3QgPSBlbGVtLnBhcmVudE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5SZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHdpblkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICB3aW5YID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICBvZmZzZXQ6IHtcbiAgICAgIHRvcDogcmVjdC50b3AgKyB3aW5ZLFxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luWFxuICAgIH0sXG4gICAgcGFyZW50RGltczoge1xuICAgICAgd2lkdGg6IHBhclJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHBhclJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogcGFyUmVjdC50b3AgKyB3aW5ZLFxuICAgICAgICBsZWZ0OiBwYXJSZWN0LmxlZnQgKyB3aW5YXG4gICAgICB9XG4gICAgfSxcbiAgICB3aW5kb3dEaW1zOiB7XG4gICAgICB3aWR0aDogd2luUmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogd2luUmVjdC5oZWlnaHQsXG4gICAgICBvZmZzZXQ6IHtcbiAgICAgICAgdG9wOiB3aW5ZLFxuICAgICAgICBsZWZ0OiB3aW5YXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2YgdG9wIGFuZCBsZWZ0IGludGVnZXIgcGl4ZWwgdmFsdWVzIGZvciBkeW5hbWljYWxseSByZW5kZXJlZCBlbGVtZW50cyxcbiAqIHN1Y2ggYXM6IFRvb2x0aXAsIFJldmVhbCwgYW5kIERyb3Bkb3duXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQgYmVpbmcgcG9zaXRpb25lZC5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBhbmNob3IgLSBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZWxlbWVudCdzIGFuY2hvciBwb2ludC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIGEgc3RyaW5nIHJlbGF0aW5nIHRvIHRoZSBkZXNpcmVkIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LCByZWxhdGl2ZSB0byBpdCdzIGFuY2hvclxuICogQHBhcmFtIHtOdW1iZXJ9IHZPZmZzZXQgLSBpbnRlZ2VyIHBpeGVsIHZhbHVlIG9mIGRlc2lyZWQgdmVydGljYWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoT2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIGhvcml6b250YWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNPdmVyZmxvdyAtIGlmIGEgY29sbGlzaW9uIGV2ZW50IGlzIGRldGVjdGVkLCBzZXRzIHRvIHRydWUgdG8gZGVmYXVsdCB0aGUgZWxlbWVudCB0byBmdWxsIHdpZHRoIC0gYW55IGRlc2lyZWQgb2Zmc2V0LlxuICogVE9ETyBhbHRlci9yZXdyaXRlIHRvIHdvcmsgd2l0aCBgZW1gIHZhbHVlcyBhcyB3ZWxsL2luc3RlYWQgb2YgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIEdldE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdykge1xuICB2YXIgJGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgJGFuY2hvckRpbXMgPSBhbmNob3IgPyBHZXREaW1lbnNpb25zKGFuY2hvcikgOiBudWxsO1xuXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCAtICgkZWxlRGltcy5oZWlnaHQgKyB2T2Zmc2V0KVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0LFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciB0b3AnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgKCRhbmNob3JEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMiksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCAtICgkZWxlRGltcy5oZWlnaHQgKyB2T2Zmc2V0KVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyIGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBpc092ZXJmbG93ID8gaE9mZnNldCA6ICgoJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAoJGFuY2hvckRpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXRcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciBsZWZ0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gKCRlbGVEaW1zLndpZHRoICsgaE9mZnNldCksXG4gICAgICAgIHRvcDogKCRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAoJGFuY2hvckRpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgcmlnaHQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAkYW5jaG9yRGltcy53aWR0aCArIGhPZmZzZXQgKyAxLFxuICAgICAgICB0b3A6ICgkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgKCRhbmNob3JEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0ICsgKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSxcbiAgICAgICAgdG9wOiAoJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wICsgKCRlbGVEaW1zLndpbmRvd0RpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZXZlYWwnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLSAkZWxlRGltcy53aWR0aCkgLyAyLFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCArIHZPZmZzZXRcbiAgICAgIH1cbiAgICBjYXNlICdyZXZlYWwgZnVsbCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0LFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcFxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCBib3R0b20nOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0IGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICRhbmNob3JEaW1zLndpZHRoICsgaE9mZnNldCAtICRlbGVEaW1zLndpZHRoLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9XG4gIH1cbn1cblxufShqUXVlcnkpO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBUaGlzIHV0aWwgd2FzIGNyZWF0ZWQgYnkgTWFyaXVzIE9sYmVydHogKlxuICogUGxlYXNlIHRoYW5rIE1hcml1cyBvbiBHaXRIdWIgL293bGJlcnR6ICpcbiAqIG9yIHRoZSB3ZWIgaHR0cDovL3d3dy5tYXJpdXNvbGJlcnR6LmRlLyAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBrZXlDb2RlcyA9IHtcbiAgOTogJ1RBQicsXG4gIDEzOiAnRU5URVInLFxuICAyNzogJ0VTQ0FQRScsXG4gIDMyOiAnU1BBQ0UnLFxuICAzNzogJ0FSUk9XX0xFRlQnLFxuICAzODogJ0FSUk9XX1VQJyxcbiAgMzk6ICdBUlJPV19SSUdIVCcsXG4gIDQwOiAnQVJST1dfRE9XTidcbn1cblxudmFyIGNvbW1hbmRzID0ge31cblxudmFyIEtleWJvYXJkID0ge1xuICBrZXlzOiBnZXRLZXlDb2RlcyhrZXlDb2RlcyksXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgKGtleWJvYXJkKSBldmVudCBhbmQgcmV0dXJucyBhIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgaXRzIGtleVxuICAgKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm4gU3RyaW5nIGtleSAtIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGtleSBwcmVzc2VkXG4gICAqL1xuICBwYXJzZUtleShldmVudCkge1xuICAgIHZhciBrZXkgPSBrZXlDb2Rlc1tldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlXSB8fCBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LndoaWNoKS50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChldmVudC5zaGlmdEtleSkga2V5ID0gYFNISUZUXyR7a2V5fWA7XG4gICAgaWYgKGV2ZW50LmN0cmxLZXkpIGtleSA9IGBDVFJMXyR7a2V5fWA7XG4gICAgaWYgKGV2ZW50LmFsdEtleSkga2V5ID0gYEFMVF8ke2tleX1gO1xuICAgIHJldHVybiBrZXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIGdpdmVuIChrZXlib2FyZCkgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb21wb25lbnQgLSBGb3VuZGF0aW9uIGNvbXBvbmVudCdzIG5hbWUsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcGFyYW0ge09iamVjdHN9IGZ1bmN0aW9ucyAtIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHRvIGJlIGV4ZWN1dGVkXG4gICAqL1xuICBoYW5kbGVLZXkoZXZlbnQsIGNvbXBvbmVudCwgZnVuY3Rpb25zKSB7XG4gICAgdmFyIGNvbW1hbmRMaXN0ID0gY29tbWFuZHNbY29tcG9uZW50XSxcbiAgICAgIGtleUNvZGUgPSB0aGlzLnBhcnNlS2V5KGV2ZW50KSxcbiAgICAgIGNtZHMsXG4gICAgICBjb21tYW5kLFxuICAgICAgZm47XG5cbiAgICBpZiAoIWNvbW1hbmRMaXN0KSByZXR1cm4gY29uc29sZS53YXJuKCdDb21wb25lbnQgbm90IGRlZmluZWQhJyk7XG5cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRMaXN0Lmx0ciA9PT0gJ3VuZGVmaW5lZCcpIHsgLy8gdGhpcyBjb21wb25lbnQgZG9lcyBub3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGx0ciBhbmQgcnRsXG4gICAgICAgIGNtZHMgPSBjb21tYW5kTGlzdDsgLy8gdXNlIHBsYWluIGxpc3RcbiAgICB9IGVsc2UgeyAvLyBtZXJnZSBsdHIgYW5kIHJ0bDogaWYgZG9jdW1lbnQgaXMgcnRsLCBydGwgb3ZlcndyaXRlcyBsdHIgYW5kIHZpY2UgdmVyc2FcbiAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIGNtZHMgPSAkLmV4dGVuZCh7fSwgY29tbWFuZExpc3QubHRyLCBjb21tYW5kTGlzdC5ydGwpO1xuXG4gICAgICAgIGVsc2UgY21kcyA9ICQuZXh0ZW5kKHt9LCBjb21tYW5kTGlzdC5ydGwsIGNvbW1hbmRMaXN0Lmx0cik7XG4gICAgfVxuICAgIGNvbW1hbmQgPSBjbWRzW2tleUNvZGVdO1xuXG4gICAgZm4gPSBmdW5jdGlvbnNbY29tbWFuZF07XG4gICAgaWYgKGZuICYmIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGVjdXRlIGZ1bmN0aW9uICBpZiBleGlzdHNcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGZuLmFwcGx5KCk7XG4gICAgICBpZiAoZnVuY3Rpb25zLmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy5oYW5kbGVkID09PSAnZnVuY3Rpb24nKSB7IC8vIGV4ZWN1dGUgZnVuY3Rpb24gd2hlbiBldmVudCB3YXMgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy5oYW5kbGVkKHJldHVyblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZ1bmN0aW9ucy51bmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy51bmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHsgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBub3QgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy51bmhhbmRsZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBmb2N1c2FibGUgZWxlbWVudHMgd2l0aGluIHRoZSBnaXZlbiBgJGVsZW1lbnRgXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICAgKiBAcmV0dXJuIHtqUXVlcnl9ICRmb2N1c2FibGUgLSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiBgJGVsZW1lbnRgXG4gICAqL1xuICBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSB7XG4gICAgcmV0dXJuICRlbGVtZW50LmZpbmQoJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdLCAqW2NvbnRlbnRlZGl0YWJsZV0nKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoISQodGhpcykuaXMoJzp2aXNpYmxlJykgfHwgJCh0aGlzKS5hdHRyKCd0YWJpbmRleCcpIDwgMCkgeyByZXR1cm4gZmFsc2U7IH0gLy9vbmx5IGhhdmUgdmlzaWJsZSBlbGVtZW50cyBhbmQgdGhvc2UgdGhhdCBoYXZlIGEgdGFiaW5kZXggZ3JlYXRlciBvciBlcXVhbCAwXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IG5hbWUgbmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcmV0dXJuIFN0cmluZyBjb21wb25lbnROYW1lXG4gICAqL1xuXG4gIHJlZ2lzdGVyKGNvbXBvbmVudE5hbWUsIGNtZHMpIHtcbiAgICBjb21tYW5kc1tjb21wb25lbnROYW1lXSA9IGNtZHM7XG4gIH1cbn1cblxuLypcbiAqIENvbnN0YW50cyBmb3IgZWFzaWVyIGNvbXBhcmluZy5cbiAqIENhbiBiZSB1c2VkIGxpa2UgRm91bmRhdGlvbi5wYXJzZUtleShldmVudCkgPT09IEZvdW5kYXRpb24ua2V5cy5TUEFDRVxuICovXG5mdW5jdGlvbiBnZXRLZXlDb2RlcyhrY3MpIHtcbiAgdmFyIGsgPSB7fTtcbiAgZm9yICh2YXIga2MgaW4ga2NzKSBrW2tjc1trY11dID0ga2NzW2tjXTtcbiAgcmV0dXJuIGs7XG59XG5cbkZvdW5kYXRpb24uS2V5Ym9hcmQgPSBLZXlib2FyZDtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vLyBEZWZhdWx0IHNldCBvZiBtZWRpYSBxdWVyaWVzXG5jb25zdCBkZWZhdWx0UXVlcmllcyA9IHtcbiAgJ2RlZmF1bHQnIDogJ29ubHkgc2NyZWVuJyxcbiAgbGFuZHNjYXBlIDogJ29ubHkgc2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSknLFxuICBwb3J0cmFpdCA6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICByZXRpbmEgOiAnb25seSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMi8xKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMmRwcHgpJ1xufTtcblxudmFyIE1lZGlhUXVlcnkgPSB7XG4gIHF1ZXJpZXM6IFtdLFxuXG4gIGN1cnJlbnQ6ICcnLFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgbWVkaWEgcXVlcnkgaGVscGVyLCBieSBleHRyYWN0aW5nIHRoZSBicmVha3BvaW50IGxpc3QgZnJvbSB0aGUgQ1NTIGFuZCBhY3RpdmF0aW5nIHRoZSBicmVha3BvaW50IHdhdGNoZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBleHRyYWN0ZWRTdHlsZXMgPSAkKCcuZm91bmRhdGlvbi1tcScpLmNzcygnZm9udC1mYW1pbHknKTtcbiAgICB2YXIgbmFtZWRRdWVyaWVzO1xuXG4gICAgbmFtZWRRdWVyaWVzID0gcGFyc2VTdHlsZVRvT2JqZWN0KGV4dHJhY3RlZFN0eWxlcyk7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gbmFtZWRRdWVyaWVzKSB7XG4gICAgICBpZihuYW1lZFF1ZXJpZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBzZWxmLnF1ZXJpZXMucHVzaCh7XG4gICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgIHZhbHVlOiBgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR7bmFtZWRRdWVyaWVzW2tleV19KWBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKTtcblxuICAgIHRoaXMuX3dhdGNoZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gaXMgYXQgbGVhc3QgYXMgd2lkZSBhcyBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGJyZWFrcG9pbnQgbWF0Y2hlcywgYGZhbHNlYCBpZiBpdCdzIHNtYWxsZXIuXG4gICAqL1xuICBhdExlYXN0KHNpemUpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmdldChzaXplKTtcblxuICAgIGlmIChxdWVyeSkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5KS5tYXRjaGVzO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgbWVkaWEgcXVlcnkgb2YgYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGdldC5cbiAgICogQHJldHVybnMge1N0cmluZ3xudWxsfSAtIFRoZSBtZWRpYSBxdWVyeSBvZiB0aGUgYnJlYWtwb2ludCwgb3IgYG51bGxgIGlmIHRoZSBicmVha3BvaW50IGRvZXNuJ3QgZXhpc3QuXG4gICAqL1xuICBnZXQoc2l6ZSkge1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5xdWVyaWVzKSB7XG4gICAgICBpZih0aGlzLnF1ZXJpZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuICAgICAgICBpZiAoc2l6ZSA9PT0gcXVlcnkubmFtZSkgcmV0dXJuIHF1ZXJ5LnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgbmFtZSBieSB0ZXN0aW5nIGV2ZXJ5IGJyZWFrcG9pbnQgYW5kIHJldHVybmluZyB0aGUgbGFzdCBvbmUgdG8gbWF0Y2ggKHRoZSBiaWdnZXN0IG9uZSkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBOYW1lIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICBfZ2V0Q3VycmVudFNpemUoKSB7XG4gICAgdmFyIG1hdGNoZWQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuXG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocXVlcnkudmFsdWUpLm1hdGNoZXMpIHtcbiAgICAgICAgbWF0Y2hlZCA9IHF1ZXJ5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbWF0Y2hlZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBtYXRjaGVkLm5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWN0aXZhdGVzIHRoZSBicmVha3BvaW50IHdhdGNoZXIsIHdoaWNoIGZpcmVzIGFuIGV2ZW50IG9uIHRoZSB3aW5kb3cgd2hlbmV2ZXIgdGhlIGJyZWFrcG9pbnQgY2hhbmdlcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfd2F0Y2hlcigpIHtcbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5tZWRpYXF1ZXJ5JywgKCkgPT4ge1xuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpLCBjdXJyZW50U2l6ZSA9IHRoaXMuY3VycmVudDtcblxuICAgICAgaWYgKG5ld1NpemUgIT09IGN1cnJlbnRTaXplKSB7XG4gICAgICAgIC8vIENoYW5nZSB0aGUgY3VycmVudCBtZWRpYSBxdWVyeVxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBuZXdTaXplO1xuXG4gICAgICAgIC8vIEJyb2FkY2FzdCB0aGUgbWVkaWEgcXVlcnkgY2hhbmdlIG9uIHRoZSB3aW5kb3dcbiAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIFtuZXdTaXplLCBjdXJyZW50U2l6ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG4vLyBtYXRjaE1lZGlhKCkgcG9seWZpbGwgLSBUZXN0IGEgQ1NTIG1lZGlhIHR5cGUvcXVlcnkgaW4gSlMuXG4vLyBBdXRob3JzICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLCBQYXVsIElyaXNoLCBOaWNob2xhcyBaYWthcywgRGF2aWQgS25pZ2h0LiBEdWFsIE1JVC9CU0QgbGljZW5zZVxud2luZG93Lm1hdGNoTWVkaWEgfHwgKHdpbmRvdy5tYXRjaE1lZGlhID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IG1hdGNoTWVkaXVtIGFwaSBzdWNoIGFzIElFIDkgYW5kIHdlYmtpdFxuICB2YXIgc3R5bGVNZWRpYSA9ICh3aW5kb3cuc3R5bGVNZWRpYSB8fCB3aW5kb3cubWVkaWEpO1xuXG4gIC8vIEZvciB0aG9zZSB0aGF0IGRvbid0IHN1cHBvcnQgbWF0Y2hNZWRpdW1cbiAgaWYgKCFzdHlsZU1lZGlhKSB7XG4gICAgdmFyIHN0eWxlICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgIHNjcmlwdCAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdLFxuICAgIGluZm8gICAgICAgID0gbnVsbDtcblxuICAgIHN0eWxlLnR5cGUgID0gJ3RleHQvY3NzJztcbiAgICBzdHlsZS5pZCAgICA9ICdtYXRjaG1lZGlhanMtdGVzdCc7XG5cbiAgICBzY3JpcHQgJiYgc2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBzY3JpcHQpO1xuXG4gICAgLy8gJ3N0eWxlLmN1cnJlbnRTdHlsZScgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnd2luZG93LmdldENvbXB1dGVkU3R5bGUnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICBpbmZvID0gKCdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cpICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN0eWxlLCBudWxsKSB8fCBzdHlsZS5jdXJyZW50U3R5bGU7XG5cbiAgICBzdHlsZU1lZGlhID0ge1xuICAgICAgbWF0Y2hNZWRpdW0obWVkaWEpIHtcbiAgICAgICAgdmFyIHRleHQgPSBgQG1lZGlhICR7bWVkaWF9eyAjbWF0Y2htZWRpYWpzLXRlc3QgeyB3aWR0aDogMXB4OyB9IH1gO1xuXG4gICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBpZiBtZWRpYSBxdWVyeSBpcyB0cnVlIG9yIGZhbHNlXG4gICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24obWVkaWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hlczogc3R5bGVNZWRpYS5tYXRjaE1lZGl1bShtZWRpYSB8fCAnYWxsJyksXG4gICAgICBtZWRpYTogbWVkaWEgfHwgJ2FsbCdcbiAgICB9O1xuICB9XG59KCkpO1xuXG4vLyBUaGFuayB5b3U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nXG5mdW5jdGlvbiBwYXJzZVN0eWxlVG9PYmplY3Qoc3RyKSB7XG4gIHZhciBzdHlsZU9iamVjdCA9IHt9O1xuXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgfVxuXG4gIHN0ciA9IHN0ci50cmltKCkuc2xpY2UoMSwgLTEpOyAvLyBicm93c2VycyByZS1xdW90ZSBzdHJpbmcgc3R5bGUgdmFsdWVzXG5cbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHlsZU9iamVjdCA9IHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbihyZXQsIHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gcGFydHNbMF07XG4gICAgdmFyIHZhbCA9IHBhcnRzWzFdO1xuICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuXG4gICAgLy8gbWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcbiAgICAvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG4gICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cbiAgICBpZiAoIXJldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXRba2V5XSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0W2tleV0pKSB7XG4gICAgICByZXRba2V5XS5wdXNoKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldFtrZXldID0gW3JldFtrZXldLCB2YWxdO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHN0eWxlT2JqZWN0O1xufVxuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogTW90aW9uIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tb3Rpb25cbiAqL1xuXG5jb25zdCBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG5jb25zdCBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuY29uc3QgTW90aW9uID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb3ZlKGR1cmF0aW9uLCBlbGVtLCBmbil7XG4gIHZhciBhbmltLCBwcm9nLCBzdGFydCA9IG51bGw7XG4gIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcblxuICBmdW5jdGlvbiBtb3ZlKHRzKXtcbiAgICBpZighc3RhcnQpIHN0YXJ0ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0LCB0cyk7XG4gICAgcHJvZyA9IHRzIC0gc3RhcnQ7XG4gICAgZm4uYXBwbHkoZWxlbSk7XG5cbiAgICBpZihwcm9nIDwgZHVyYXRpb24peyBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlLCBlbGVtKTsgfVxuICAgIGVsc2V7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbSk7XG4gICAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICB9XG4gIH1cbiAgYW5pbSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZSk7XG59XG5cbi8qKlxuICogQW5pbWF0ZXMgYW4gZWxlbWVudCBpbiBvciBvdXQgdXNpbmcgYSBDU1MgdHJhbnNpdGlvbiBjbGFzcy5cbiAqIEBmdW5jdGlvblxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbiAtIERlZmluZXMgaWYgdGhlIGFuaW1hdGlvbiBpcyBpbiBvciBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvciBIVE1MIG9iamVjdCB0byBhbmltYXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IGFuaW1hdGlvbiAtIENTUyBjbGFzcyB0byB1c2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIHRvIHJ1biB3aGVuIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC5cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gIGVsZW1lbnQgPSAkKGVsZW1lbnQpLmVxKDApO1xuXG4gIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICB2YXIgaW5pdENsYXNzID0gaXNJbiA/IGluaXRDbGFzc2VzWzBdIDogaW5pdENsYXNzZXNbMV07XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzSW4gPyBhY3RpdmVDbGFzc2VzWzBdIDogYWN0aXZlQ2xhc3Nlc1sxXTtcblxuICAvLyBTZXQgdXAgdGhlIGFuaW1hdGlvblxuICByZXNldCgpO1xuXG4gIGVsZW1lbnRcbiAgICAuYWRkQ2xhc3MoYW5pbWF0aW9uKVxuICAgIC5jc3MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhpbml0Q2xhc3MpO1xuICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgfSk7XG5cbiAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7XG4gICAgZWxlbWVudFxuICAgICAgLmNzcygndHJhbnNpdGlvbicsICcnKVxuICAgICAgLmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZChlbGVtZW50KSwgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhgJHtpbml0Q2xhc3N9ICR7YWN0aXZlQ2xhc3N9ICR7YW5pbWF0aW9ufWApO1xuICB9XG59XG5cbkZvdW5kYXRpb24uTW92ZSA9IE1vdmU7XG5Gb3VuZGF0aW9uLk1vdGlvbiA9IE1vdGlvbjtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBOZXN0ID0ge1xuICBGZWF0aGVyKG1lbnUsIHR5cGUgPSAnemYnKSB7XG4gICAgbWVudS5hdHRyKCdyb2xlJywgJ21lbnViYXInKTtcblxuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5hdHRyKHsncm9sZSc6ICdtZW51aXRlbSd9KSxcbiAgICAgICAgc3ViTWVudUNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudWAsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IGAke3N1Yk1lbnVDbGFzc30taXRlbWAsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudS1wYXJlbnRgO1xuXG4gICAgbWVudS5maW5kKCdhOmZpcnN0JykuYXR0cigndGFiaW5kZXgnLCAwKTtcblxuICAgIGl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICRzdWIgPSAkaXRlbS5jaGlsZHJlbigndWwnKTtcblxuICAgICAgaWYgKCRzdWIubGVuZ3RoKSB7XG4gICAgICAgICRpdGVtXG4gICAgICAgICAgLmFkZENsYXNzKGhhc1N1YkNsYXNzKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICRpdGVtLmNoaWxkcmVuKCdhOmZpcnN0JykudGV4dCgpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgJHN1YlxuICAgICAgICAgIC5hZGRDbGFzcyhgc3VibWVudSAke3N1Yk1lbnVDbGFzc31gKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdkYXRhLXN1Ym1lbnUnOiAnJyxcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICAgICAncm9sZSc6ICdtZW51J1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGl0ZW0ucGFyZW50KCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCkge1xuICAgICAgICAkaXRlbS5hZGRDbGFzcyhgaXMtc3VibWVudS1pdGVtICR7c3ViSXRlbUNsYXNzfWApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIEJ1cm4obWVudSwgdHlwZSkge1xuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpLFxuICAgICAgICBzdWJNZW51Q2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51YCxcbiAgICAgICAgc3ViSXRlbUNsYXNzID0gYCR7c3ViTWVudUNsYXNzfS1pdGVtYCxcbiAgICAgICAgaGFzU3ViQ2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51LXBhcmVudGA7XG5cbiAgICBtZW51XG4gICAgICAuZmluZCgnPmxpLCAubWVudSwgLm1lbnUgPiBsaScpXG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7c3ViTWVudUNsYXNzfSAke3N1Ykl0ZW1DbGFzc30gJHtoYXNTdWJDbGFzc30gaXMtc3VibWVudS1pdGVtIHN1Ym1lbnUgaXMtYWN0aXZlYClcbiAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyggICAgICBtZW51LmZpbmQoJy4nICsgc3ViTWVudUNsYXNzICsgJywgLicgKyBzdWJJdGVtQ2xhc3MgKyAnLCAuaGFzLXN1Ym1lbnUsIC5pcy1zdWJtZW51LWl0ZW0sIC5zdWJtZW51LCBbZGF0YS1zdWJtZW51XScpXG4gICAgLy8gICAgICAgICAgIC5yZW1vdmVDbGFzcyhzdWJNZW51Q2xhc3MgKyAnICcgKyBzdWJJdGVtQ2xhc3MgKyAnIGhhcy1zdWJtZW51IGlzLXN1Ym1lbnUtaXRlbSBzdWJtZW51JylcbiAgICAvLyAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3VibWVudScpKTtcbiAgICAvLyBpdGVtcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgLy8gICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgIC8vICAgICAgICRzdWIgPSAkaXRlbS5jaGlsZHJlbigndWwnKTtcbiAgICAvLyAgIGlmKCRpdGVtLnBhcmVudCgnW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpe1xuICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaXMtc3VibWVudS1pdGVtICcgKyBzdWJJdGVtQ2xhc3MpO1xuICAgIC8vICAgfVxuICAgIC8vICAgaWYoJHN1Yi5sZW5ndGgpe1xuICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaGFzLXN1Ym1lbnUnKTtcbiAgICAvLyAgICAgJHN1Yi5yZW1vdmVDbGFzcygnc3VibWVudSAnICsgc3ViTWVudUNsYXNzKS5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcbiAgfVxufVxuXG5Gb3VuZGF0aW9uLk5lc3QgPSBOZXN0O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmZ1bmN0aW9uIFRpbWVyKGVsZW0sIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sLy9vcHRpb25zIGlzIGFuIG9iamVjdCBmb3IgZWFzaWx5IGFkZGluZyBmZWF0dXJlcyBsYXRlci5cbiAgICAgIG5hbWVTcGFjZSA9IE9iamVjdC5rZXlzKGVsZW0uZGF0YSgpKVswXSB8fCAndGltZXInLFxuICAgICAgcmVtYWluID0gLTEsXG4gICAgICBzdGFydCxcbiAgICAgIHRpbWVyO1xuXG4gIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcblxuICB0aGlzLnJlc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICByZW1haW4gPSAtMTtcbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfVxuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgLy8gaWYoIWVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICByZW1haW4gPSByZW1haW4gPD0gMCA/IGR1cmF0aW9uIDogcmVtYWluO1xuICAgIGVsZW0uZGF0YSgncGF1c2VkJywgZmFsc2UpO1xuICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIGlmKG9wdGlvbnMuaW5maW5pdGUpe1xuICAgICAgICBfdGhpcy5yZXN0YXJ0KCk7Ly9yZXJ1biB0aGUgdGltZXIuXG4gICAgICB9XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9LCByZW1haW4pO1xuICAgIGVsZW0udHJpZ2dlcihgdGltZXJzdGFydC56Zi4ke25hbWVTcGFjZX1gKTtcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAvL2lmKGVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIHRydWUpO1xuICAgIHZhciBlbmQgPSBEYXRlLm5vdygpO1xuICAgIHJlbWFpbiA9IHJlbWFpbiAtIChlbmQgLSBzdGFydCk7XG4gICAgZWxlbS50cmlnZ2VyKGB0aW1lcnBhdXNlZC56Zi4ke25hbWVTcGFjZX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGltYWdlcyAtIEltYWdlKHMpIHRvIGNoZWNrIGlmIGxvYWRlZC5cbiAqIEBwYXJhbSB7RnVuY30gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gaW1hZ2UgaXMgZnVsbHkgbG9hZGVkLlxuICovXG5mdW5jdGlvbiBvbkltYWdlc0xvYWRlZChpbWFnZXMsIGNhbGxiYWNrKXtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgdW5sb2FkZWQgPSBpbWFnZXMubGVuZ3RoO1xuXG4gIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBpbWFnZXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5jb21wbGV0ZSkge1xuICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHRoaXMubmF0dXJhbFdpZHRoICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLm5hdHVyYWxXaWR0aCA+IDApIHtcbiAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJCh0aGlzKS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2luZ2xlSW1hZ2VMb2FkZWQoKSB7XG4gICAgdW5sb2FkZWQtLTtcbiAgICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG59XG5cbkZvdW5kYXRpb24uVGltZXIgPSBUaW1lcjtcbkZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQgPSBvbkltYWdlc0xvYWRlZDtcblxufShqUXVlcnkpO1xuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKldvcmsgaW5zcGlyZWQgYnkgbXVsdGlwbGUganF1ZXJ5IHN3aXBlIHBsdWdpbnMqKlxuLy8qKkRvbmUgYnkgWW9oYWkgQXJhcmF0ICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuKGZ1bmN0aW9uKCQpIHtcblxuICAkLnNwb3RTd2lwZSA9IHtcbiAgICB2ZXJzaW9uOiAnMS4wLjAnLFxuICAgIGVuYWJsZWQ6ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICBwcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gICAgbW92ZVRocmVzaG9sZDogNzUsXG4gICAgdGltZVRocmVzaG9sZDogMjAwXG4gIH07XG5cbiAgdmFyICAgc3RhcnRQb3NYLFxuICAgICAgICBzdGFydFBvc1ksXG4gICAgICAgIHN0YXJ0VGltZSxcbiAgICAgICAgZWxhcHNlZFRpbWUsXG4gICAgICAgIGlzTW92aW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHtcbiAgICAvLyAgYWxlcnQodGhpcyk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQpO1xuICAgIGlzTW92aW5nID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgaWYgKCQuc3BvdFN3aXBlLnByZXZlbnREZWZhdWx0KSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgIGlmKGlzTW92aW5nKSB7XG4gICAgICB2YXIgeCA9IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIHZhciB5ID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgdmFyIGR4ID0gc3RhcnRQb3NYIC0geDtcbiAgICAgIHZhciBkeSA9IHN0YXJ0UG9zWSAtIHk7XG4gICAgICB2YXIgZGlyO1xuICAgICAgZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcbiAgICAgIGlmKE1hdGguYWJzKGR4KSA+PSAkLnNwb3RTd2lwZS5tb3ZlVGhyZXNob2xkICYmIGVsYXBzZWRUaW1lIDw9ICQuc3BvdFN3aXBlLnRpbWVUaHJlc2hvbGQpIHtcbiAgICAgICAgZGlyID0gZHggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgIH1cbiAgICAgIC8vIGVsc2UgaWYoTWF0aC5hYnMoZHkpID49ICQuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gJC5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuICAgICAgLy8gICBkaXIgPSBkeSA+IDAgPyAnZG93bicgOiAndXAnO1xuICAgICAgLy8gfVxuICAgICAgaWYoZGlyKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25Ub3VjaEVuZC5jYWxsKHRoaXMpO1xuICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ3N3aXBlJywgZGlyKS50cmlnZ2VyKGBzd2lwZSR7ZGlyfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT0gMSkge1xuICAgICAgc3RhcnRQb3NYID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgc3RhcnRQb3NZID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgaXNNb3ZpbmcgPSB0cnVlO1xuICAgICAgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyICYmIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGVhcmRvd24oKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgfVxuXG4gICQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHsgc2V0dXA6IGluaXQgfTtcblxuICAkLmVhY2goWydsZWZ0JywgJ3VwJywgJ2Rvd24nLCAncmlnaHQnXSwgZnVuY3Rpb24gKCkge1xuICAgICQuZXZlbnQuc3BlY2lhbFtgc3dpcGUke3RoaXN9YF0gPSB7IHNldHVwOiBmdW5jdGlvbigpe1xuICAgICAgJCh0aGlzKS5vbignc3dpcGUnLCAkLm5vb3ApO1xuICAgIH0gfTtcbiAgfSk7XG59KShqUXVlcnkpO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIE1ldGhvZCBmb3IgYWRkaW5nIHBzdWVkbyBkcmFnIGV2ZW50cyB0byBlbGVtZW50cyAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuIWZ1bmN0aW9uKCQpe1xuICAkLmZuLmFkZFRvdWNoID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oaSxlbCl7XG4gICAgICAkKGVsKS5iaW5kKCd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsZnVuY3Rpb24oKXtcbiAgICAgICAgLy93ZSBwYXNzIHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QgYmVjYXVzZSB0aGUgalF1ZXJ5IGV2ZW50XG4gICAgICAgIC8vb2JqZWN0IGlzIG5vcm1hbGl6ZWQgdG8gdzNjIHNwZWNzIGFuZCBkb2VzIG5vdCBwcm92aWRlIHRoZSBUb3VjaExpc3RcbiAgICAgICAgaGFuZGxlVG91Y2goZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGFuZGxlVG91Y2ggPSBmdW5jdGlvbihldmVudCl7XG4gICAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIGZpcnN0ID0gdG91Y2hlc1swXSxcbiAgICAgICAgICBldmVudFR5cGVzID0ge1xuICAgICAgICAgICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgICAgICAgICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgdG91Y2hlbmQ6ICdtb3VzZXVwJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHlwZSA9IGV2ZW50VHlwZXNbZXZlbnQudHlwZV0sXG4gICAgICAgICAgc2ltdWxhdGVkRXZlbnRcbiAgICAgICAgO1xuXG4gICAgICBpZignTW91c2VFdmVudCcgaW4gd2luZG93ICYmIHR5cGVvZiB3aW5kb3cuTW91c2VFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IG5ldyB3aW5kb3cuTW91c2VFdmVudCh0eXBlLCB7XG4gICAgICAgICAgJ2J1YmJsZXMnOiB0cnVlLFxuICAgICAgICAgICdjYW5jZWxhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnc2NyZWVuWCc6IGZpcnN0LnNjcmVlblgsXG4gICAgICAgICAgJ3NjcmVlblknOiBmaXJzdC5zY3JlZW5ZLFxuICAgICAgICAgICdjbGllbnRYJzogZmlyc3QuY2xpZW50WCxcbiAgICAgICAgICAnY2xpZW50WSc6IGZpcnN0LmNsaWVudFlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMSwgZmlyc3Quc2NyZWVuWCwgZmlyc3Quc2NyZWVuWSwgZmlyc3QuY2xpZW50WCwgZmlyc3QuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAvKmxlZnQqLywgbnVsbCk7XG4gICAgICB9XG4gICAgICBmaXJzdC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7XG4gICAgfTtcbiAgfTtcbn0oalF1ZXJ5KTtcblxuXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipGcm9tIHRoZSBqUXVlcnkgTW9iaWxlIExpYnJhcnkqKlxuLy8qKm5lZWQgdG8gcmVjcmVhdGUgZnVuY3Rpb25hbGl0eSoqXG4vLyoqYW5kIHRyeSB0byBpbXByb3ZlIGlmIHBvc3NpYmxlKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4vKiBSZW1vdmluZyB0aGUgalF1ZXJ5IGZ1bmN0aW9uICoqKipcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4oZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkge1xuXG5cdHZhciAkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLFxuXHRcdC8vIHN1cHBvcnRUb3VjaCA9ICQubW9iaWxlLnN1cHBvcnQudG91Y2gsXG5cdFx0dG91Y2hTdGFydEV2ZW50ID0gJ3RvdWNoc3RhcnQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoc3RhcnRcIiA6IFwibW91c2Vkb3duXCIsXG5cdFx0dG91Y2hTdG9wRXZlbnQgPSAndG91Y2hlbmQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoZW5kXCIgOiBcIm1vdXNldXBcIixcblx0XHR0b3VjaE1vdmVFdmVudCA9ICd0b3VjaG1vdmUnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNobW92ZVwiIDogXCJtb3VzZW1vdmVcIjtcblxuXHQvLyBzZXR1cCBuZXcgZXZlbnQgc2hvcnRjdXRzXG5cdCQuZWFjaCggKCBcInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIFwiICtcblx0XHRcInN3aXBlIHN3aXBlbGVmdCBzd2lwZXJpZ2h0XCIgKS5zcGxpdCggXCIgXCIgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0XHQkLmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRyZXR1cm4gZm4gPyB0aGlzLmJpbmQoIG5hbWUsIGZuICkgOiB0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXG5cdFx0Ly8galF1ZXJ5IDwgMS44XG5cdFx0aWYgKCAkLmF0dHJGbiApIHtcblx0XHRcdCQuYXR0ckZuWyBuYW1lIF0gPSB0cnVlO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gdHJpZ2dlckN1c3RvbUV2ZW50KCBvYmosIGV2ZW50VHlwZSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHR2YXIgb3JpZ2luYWxUeXBlID0gZXZlbnQudHlwZTtcblx0XHRldmVudC50eXBlID0gZXZlbnRUeXBlO1xuXHRcdGlmICggYnViYmxlICkge1xuXHRcdFx0JC5ldmVudC50cmlnZ2VyKCBldmVudCwgdW5kZWZpbmVkLCBvYmogKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5ldmVudC5kaXNwYXRjaC5jYWxsKCBvYmosIGV2ZW50ICk7XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSBvcmlnaW5hbFR5cGU7XG5cdH1cblxuXHQvLyBhbHNvIGhhbmRsZXMgdGFwaG9sZFxuXG5cdC8vIEFsc28gaGFuZGxlcyBzd2lwZWxlZnQsIHN3aXBlcmlnaHRcblx0JC5ldmVudC5zcGVjaWFsLnN3aXBlID0ge1xuXG5cdFx0Ly8gTW9yZSB0aGFuIHRoaXMgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQsIGFuZCB3ZSB3aWxsIHN1cHByZXNzIHNjcm9sbGluZy5cblx0XHRzY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkOiAzMCxcblxuXHRcdC8vIE1vcmUgdGltZSB0aGFuIHRoaXMsIGFuZCBpdCBpc24ndCBhIHN3aXBlLlxuXHRcdGR1cmF0aW9uVGhyZXNob2xkOiAxMDAwLFxuXG5cdFx0Ly8gU3dpcGUgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBtb3JlIHRoYW4gdGhpcy5cblx0XHRob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQ6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID49IDIgPyAxNSA6IDMwLFxuXG5cdFx0Ly8gU3dpcGUgdmVydGljYWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbGVzcyB0aGFuIHRoaXMuXG5cdFx0dmVydGljYWxEaXN0YW5jZVRocmVzaG9sZDogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPj0gMiA/IDE1IDogMzAsXG5cblx0XHRnZXRMb2NhdGlvbjogZnVuY3Rpb24gKCBldmVudCApIHtcblx0XHRcdHZhciB3aW5QYWdlWCA9IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0d2luUGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdFx0XHRcdHggPSBldmVudC5jbGllbnRYLFxuXHRcdFx0XHR5ID0gZXZlbnQuY2xpZW50WTtcblxuXHRcdFx0aWYgKCBldmVudC5wYWdlWSA9PT0gMCAmJiBNYXRoLmZsb29yKCB5ICkgPiBNYXRoLmZsb29yKCBldmVudC5wYWdlWSApIHx8XG5cdFx0XHRcdGV2ZW50LnBhZ2VYID09PSAwICYmIE1hdGguZmxvb3IoIHggKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gaU9TNCBjbGllbnRYL2NsaWVudFkgaGF2ZSB0aGUgdmFsdWUgdGhhdCBzaG91bGQgaGF2ZSBiZWVuXG5cdFx0XHRcdC8vIGluIHBhZ2VYL3BhZ2VZLiBXaGlsZSBwYWdlWC9wYWdlLyBoYXZlIHRoZSB2YWx1ZSAwXG5cdFx0XHRcdHggPSB4IC0gd2luUGFnZVg7XG5cdFx0XHRcdHkgPSB5IC0gd2luUGFnZVk7XG5cdFx0XHR9IGVsc2UgaWYgKCB5IDwgKCBldmVudC5wYWdlWSAtIHdpblBhZ2VZKSB8fCB4IDwgKCBldmVudC5wYWdlWCAtIHdpblBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gU29tZSBBbmRyb2lkIGJyb3dzZXJzIGhhdmUgdG90YWxseSBib2d1cyB2YWx1ZXMgZm9yIGNsaWVudFgvWVxuXHRcdFx0XHQvLyB3aGVuIHNjcm9sbGluZy96b29taW5nIGEgcGFnZS4gRGV0ZWN0YWJsZSBzaW5jZSBjbGllbnRYL2NsaWVudFlcblx0XHRcdFx0Ly8gc2hvdWxkIG5ldmVyIGJlIHNtYWxsZXIgdGhhbiBwYWdlWC9wYWdlWSBtaW51cyBwYWdlIHNjcm9sbFxuXHRcdFx0XHR4ID0gZXZlbnQucGFnZVggLSB3aW5QYWdlWDtcblx0XHRcdFx0eSA9IGV2ZW50LnBhZ2VZIC0gd2luUGFnZVk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHlcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZGF0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA/XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCxcblx0XHRcdFx0bG9jYXRpb24gPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZ2V0TG9jYXRpb24oIGRhdGEgKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksXG5cdFx0XHRcdFx0XHRjb29yZHM6IFsgbG9jYXRpb24ueCwgbG9jYXRpb24ueSBdLFxuXHRcdFx0XHRcdFx0b3JpZ2luOiAkKCBldmVudC50YXJnZXQgKVxuXHRcdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50LFxuXHRcdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdFx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF1cblx0XHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRoYW5kbGVTd2lwZTogZnVuY3Rpb24oIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICkge1xuXHRcdFx0aWYgKCBzdG9wLnRpbWUgLSBzdGFydC50aW1lIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLmR1cmF0aW9uVGhyZXNob2xkICYmXG5cdFx0XHRcdE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMSBdIC0gc3RvcC5jb29yZHNbIDEgXSApIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLnZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQgKSB7XG5cdFx0XHRcdHZhciBkaXJlY3Rpb24gPSBzdGFydC5jb29yZHNbMF0gPiBzdG9wLmNvb3Jkc1sgMCBdID8gXCJzd2lwZWxlZnRcIiA6IFwic3dpcGVyaWdodFwiO1xuXG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgXCJzd2lwZVwiLCAkLkV2ZW50KCBcInN3aXBlXCIsIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0LCBzd2lwZXN0YXJ0OiBzdGFydCwgc3dpcGVzdG9wOiBzdG9wIH0pLCB0cnVlICk7XG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgZGlyZWN0aW9uLCQuRXZlbnQoIGRpcmVjdGlvbiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQsIHN3aXBlc3RhcnQ6IHN0YXJ0LCBzd2lwZXN0b3A6IHN0b3AgfSApLCB0cnVlICk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdC8vIFRoaXMgc2VydmVzIGFzIGEgZmxhZyB0byBlbnN1cmUgdGhhdCBhdCBtb3N0IG9uZSBzd2lwZSBldmVudCBldmVudCBpc1xuXHRcdC8vIGluIHdvcmsgYXQgYW55IGdpdmVuIHRpbWVcblx0XHRldmVudEluUHJvZ3Jlc3M6IGZhbHNlLFxuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGV2ZW50cyxcblx0XHRcdFx0dGhpc09iamVjdCA9IHRoaXMsXG5cdFx0XHRcdCR0aGlzID0gJCggdGhpc09iamVjdCApLFxuXHRcdFx0XHRjb250ZXh0ID0ge307XG5cblx0XHRcdC8vIFJldHJpZXZlIHRoZSBldmVudHMgZGF0YSBmb3IgdGhpcyBlbGVtZW50IGFuZCBhZGQgdGhlIHN3aXBlIGNvbnRleHRcblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggIWV2ZW50cyApIHtcblx0XHRcdFx0ZXZlbnRzID0geyBsZW5ndGg6IDAgfTtcblx0XHRcdFx0JC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiwgZXZlbnRzICk7XG5cdFx0XHR9XG5cdFx0XHRldmVudHMubGVuZ3RoKys7XG5cdFx0XHRldmVudHMuc3dpcGUgPSBjb250ZXh0O1xuXG5cdFx0XHRjb250ZXh0LnN0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIEJhaWwgaWYgd2UncmUgYWxyZWFkeSB3b3JraW5nIG9uIGEgc3dpcGUgZXZlbnRcblx0XHRcdFx0aWYgKCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gdHJ1ZTtcblxuXHRcdFx0XHR2YXIgc3RvcCxcblx0XHRcdFx0XHRzdGFydCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdGFydCggZXZlbnQgKSxcblx0XHRcdFx0XHRvcmlnVGFyZ2V0ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRcdGVtaXR0ZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhcnQgfHwgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c3RvcCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdG9wKCBldmVudCApO1xuXHRcdFx0XHRcdGlmICggIWVtaXR0ZWQgKSB7XG5cdFx0XHRcdFx0XHRlbWl0dGVkID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmhhbmRsZVN3aXBlKCBzdGFydCwgc3RvcCwgdGhpc09iamVjdCwgb3JpZ1RhcmdldCApO1xuXHRcdFx0XHRcdFx0aWYgKCBlbWl0dGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHByZXZlbnQgc2Nyb2xsaW5nXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZCApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGNvbnRleHQuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0ZW1pdHRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlID0gbnVsbDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQkZG9jdW1lbnQub24oIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKVxuXHRcdFx0XHRcdC5vbmUoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdH07XG5cdFx0XHQkdGhpcy5vbiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0fSxcblxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBldmVudHMsIGNvbnRleHQ7XG5cblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0XHRjb250ZXh0ID0gZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRkZWxldGUgZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRldmVudHMubGVuZ3RoLS07XG5cdFx0XHRcdGlmICggZXZlbnRzLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0XHQkLnJlbW92ZURhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjb250ZXh0ICkge1xuXHRcdFx0XHRpZiAoIGNvbnRleHQuc3RhcnQgKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLm9mZiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBjb250ZXh0Lm1vdmUgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggY29udGV4dC5zdG9wICkge1xuXHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0JC5lYWNoKHtcblx0XHRzd2lwZWxlZnQ6IFwic3dpcGUubGVmdFwiLFxuXHRcdHN3aXBlcmlnaHQ6IFwic3dpcGUucmlnaHRcIlxuXHR9LCBmdW5jdGlvbiggZXZlbnQsIHNvdXJjZUV2ZW50ICkge1xuXG5cdFx0JC5ldmVudC5zcGVjaWFsWyBldmVudCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuYmluZCggc291cmNlRXZlbnQsICQubm9vcCApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLnVuYmluZCggc291cmNlRXZlbnQgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcbn0pKCBqUXVlcnksIHRoaXMgKTtcbiovXG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmNvbnN0IE11dGF0aW9uT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbiAgZm9yICh2YXIgaT0wOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYCR7cHJlZml4ZXNbaV19TXV0YXRpb25PYnNlcnZlcmAgaW4gd2luZG93KSB7XG4gICAgICByZXR1cm4gd2luZG93W2Ake3ByZWZpeGVzW2ldfU11dGF0aW9uT2JzZXJ2ZXJgXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSgpKTtcblxuY29uc3QgdHJpZ2dlcnMgPSAoZWwsIHR5cGUpID0+IHtcbiAgZWwuZGF0YSh0eXBlKS5zcGxpdCgnICcpLmZvckVhY2goaWQgPT4ge1xuICAgICQoYCMke2lkfWApWyB0eXBlID09PSAnY2xvc2UnID8gJ3RyaWdnZXInIDogJ3RyaWdnZXJIYW5kbGVyJ10oYCR7dHlwZX0uemYudHJpZ2dlcmAsIFtlbF0pO1xuICB9KTtcbn07XG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLW9wZW5dIHdpbGwgcmV2ZWFsIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtb3Blbl0nLCBmdW5jdGlvbigpIHtcbiAgdHJpZ2dlcnMoJCh0aGlzKSwgJ29wZW4nKTtcbn0pO1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NlXSB3aWxsIGNsb3NlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuLy8gSWYgdXNlZCB3aXRob3V0IGEgdmFsdWUgb24gW2RhdGEtY2xvc2VdLCB0aGUgZXZlbnQgd2lsbCBidWJibGUsIGFsbG93aW5nIGl0IHRvIGNsb3NlIGEgcGFyZW50IGNvbXBvbmVudC5cbiQoZG9jdW1lbnQpLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ2Nsb3NlJyk7XG4gIGlmIChpZCkge1xuICAgIHRyaWdnZXJzKCQodGhpcyksICdjbG9zZScpO1xuICB9XG4gIGVsc2Uge1xuICAgICQodGhpcykudHJpZ2dlcignY2xvc2UuemYudHJpZ2dlcicpO1xuICB9XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGVdIHdpbGwgdG9nZ2xlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlXScsIGZ1bmN0aW9uKCkge1xuICB0cmlnZ2VycygkKHRoaXMpLCAndG9nZ2xlJyk7XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zYWJsZV0gd2lsbCByZXNwb25kIHRvIGNsb3NlLnpmLnRyaWdnZXIgZXZlbnRzLlxuJChkb2N1bWVudCkub24oJ2Nsb3NlLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2FibGVdJywgZnVuY3Rpb24oZSl7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGxldCBhbmltYXRpb24gPSAkKHRoaXMpLmRhdGEoJ2Nsb3NhYmxlJyk7XG5cbiAgaWYoYW5pbWF0aW9uICE9PSAnJyl7XG4gICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCgkKHRoaXMpLCBhbmltYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICB9KTtcbiAgfWVsc2V7XG4gICAgJCh0aGlzKS5mYWRlT3V0KCkudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gIH1cbn0pO1xuXG4kKGRvY3VtZW50KS5vbignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlLWZvY3VzXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZS1mb2N1cycpO1xuICAkKGAjJHtpZH1gKS50cmlnZ2VySGFuZGxlcigndG9nZ2xlLnpmLnRyaWdnZXInLCBbJCh0aGlzKV0pO1xufSk7XG5cbi8qKlxuKiBGaXJlcyBvbmNlIGFmdGVyIGFsbCBvdGhlciBzY3JpcHRzIGhhdmUgbG9hZGVkXG4qIEBmdW5jdGlvblxuKiBAcHJpdmF0ZVxuKi9cbiQod2luZG93KS5vbignbG9hZCcsICgpID0+IHtcbiAgY2hlY2tMaXN0ZW5lcnMoKTtcbn0pO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVycygpIHtcbiAgZXZlbnRzTGlzdGVuZXIoKTtcbiAgcmVzaXplTGlzdGVuZXIoKTtcbiAgc2Nyb2xsTGlzdGVuZXIoKTtcbiAgY2xvc2VtZUxpc3RlbmVyKCk7XG59XG5cbi8vKioqKioqKiogb25seSBmaXJlcyB0aGlzIGZ1bmN0aW9uIG9uY2Ugb24gbG9hZCwgaWYgdGhlcmUncyBzb21ldGhpbmcgdG8gd2F0Y2ggKioqKioqKipcbmZ1bmN0aW9uIGNsb3NlbWVMaXN0ZW5lcihwbHVnaW5OYW1lKSB7XG4gIHZhciB5ZXRpQm94ZXMgPSAkKCdbZGF0YS15ZXRpLWJveF0nKSxcbiAgICAgIHBsdWdOYW1lcyA9IFsnZHJvcGRvd24nLCAndG9vbHRpcCcsICdyZXZlYWwnXTtcblxuICBpZihwbHVnaW5OYW1lKXtcbiAgICBpZih0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ3N0cmluZycpe1xuICAgICAgcGx1Z05hbWVzLnB1c2gocGx1Z2luTmFtZSk7XG4gICAgfWVsc2UgaWYodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwbHVnaW5OYW1lWzBdID09PSAnc3RyaW5nJyl7XG4gICAgICBwbHVnTmFtZXMuY29uY2F0KHBsdWdpbk5hbWUpO1xuICAgIH1lbHNle1xuICAgICAgY29uc29sZS5lcnJvcignUGx1Z2luIG5hbWVzIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgfVxuICBpZih5ZXRpQm94ZXMubGVuZ3RoKXtcbiAgICBsZXQgbGlzdGVuZXJzID0gcGx1Z05hbWVzLm1hcCgobmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIGBjbG9zZW1lLnpmLiR7bmFtZX1gO1xuICAgIH0pLmpvaW4oJyAnKTtcblxuICAgICQod2luZG93KS5vZmYobGlzdGVuZXJzKS5vbihsaXN0ZW5lcnMsIGZ1bmN0aW9uKGUsIHBsdWdpbklkKXtcbiAgICAgIGxldCBwbHVnaW4gPSBlLm5hbWVzcGFjZS5zcGxpdCgnLicpWzBdO1xuICAgICAgbGV0IHBsdWdpbnMgPSAkKGBbZGF0YS0ke3BsdWdpbn1dYCkubm90KGBbZGF0YS15ZXRpLWJveD1cIiR7cGx1Z2luSWR9XCJdYCk7XG5cbiAgICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICBsZXQgX3RoaXMgPSAkKHRoaXMpO1xuXG4gICAgICAgIF90aGlzLnRyaWdnZXJIYW5kbGVyKCdjbG9zZS56Zi50cmlnZ2VyJywgW190aGlzXSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNpemVMaXN0ZW5lcihkZWJvdW5jZSl7XG4gIGxldCB0aW1lcixcbiAgICAgICRub2RlcyA9ICQoJ1tkYXRhLXJlc2l6ZV0nKTtcbiAgaWYoJG5vZGVzLmxlbmd0aCl7XG4gICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnpmLnRyaWdnZXInKVxuICAgIC5vbigncmVzaXplLnpmLnRyaWdnZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAodGltZXIpIHsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgfVxuXG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblxuICAgICAgICBpZighTXV0YXRpb25PYnNlcnZlcil7Ly9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHJlc2l6ZSBldmVudFxuICAgICAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInJlc2l6ZVwiKTtcbiAgICAgIH0sIGRlYm91bmNlIHx8IDEwKTsvL2RlZmF1bHQgdGltZSB0byBlbWl0IHJlc2l6ZSBldmVudFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbExpc3RlbmVyKGRlYm91bmNlKXtcbiAgbGV0IHRpbWVyLFxuICAgICAgJG5vZGVzID0gJCgnW2RhdGEtc2Nyb2xsXScpO1xuICBpZigkbm9kZXMubGVuZ3RoKXtcbiAgICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYudHJpZ2dlcicpXG4gICAgLm9uKCdzY3JvbGwuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYodGltZXIpeyBjbGVhclRpbWVvdXQodGltZXIpOyB9XG5cbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgc2Nyb2xsIGV2ZW50XG4gICAgICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwic2Nyb2xsXCIpO1xuICAgICAgfSwgZGVib3VuY2UgfHwgMTApOy8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgc2Nyb2xsIGV2ZW50XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRzTGlzdGVuZXIoKSB7XG4gIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsgcmV0dXJuIGZhbHNlOyB9XG4gIGxldCBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXJlc2l6ZV0sIFtkYXRhLXNjcm9sbF0sIFtkYXRhLW11dGF0ZV0nKTtcblxuICAvL2VsZW1lbnQgY2FsbGJhY2tcbiAgdmFyIGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24gPSBmdW5jdGlvbihtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgdmFyICR0YXJnZXQgPSAkKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udGFyZ2V0KTtcbiAgICAvL3RyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBlbGVtZW50IGRlcGVuZGluZyBvbiB0eXBlXG4gICAgc3dpdGNoICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSkge1xuXG4gICAgICBjYXNlIFwicmVzaXplXCIgOlxuICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0XSk7XG4gICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInNjcm9sbFwiIDpcbiAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInLCBbJHRhcmdldCwgd2luZG93LnBhZ2VZT2Zmc2V0XSk7XG4gICAgICBicmVhaztcblxuICAgICAgLy8gY2FzZSBcIm11dGF0ZVwiIDpcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdtdXRhdGUnLCAkdGFyZ2V0KTtcbiAgICAgIC8vICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ211dGF0ZS56Zi50cmlnZ2VyJyk7XG4gICAgICAvL1xuICAgICAgLy8gLy9tYWtlIHN1cmUgd2UgZG9uJ3QgZ2V0IHN0dWNrIGluIGFuIGluZmluaXRlIGxvb3AgZnJvbSBzbG9wcHkgY29kZWluZ1xuICAgICAgLy8gaWYgKCR0YXJnZXQuaW5kZXgoJ1tkYXRhLW11dGF0ZV0nKSA9PSAkKFwiW2RhdGEtbXV0YXRlXVwiKS5sZW5ndGgtMSkge1xuICAgICAgLy8gICBkb21NdXRhdGlvbk9ic2VydmVyKCk7XG4gICAgICAvLyB9XG4gICAgICAvLyBicmVhaztcblxuICAgICAgZGVmYXVsdCA6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvL25vdGhpbmdcbiAgICB9XG4gIH1cblxuICBpZihub2Rlcy5sZW5ndGgpe1xuICAgIC8vZm9yIGVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRvIGxpc3RlbiBmb3IgcmVzaXppbmcsIHNjcm9sbGluZywgKG9yIGNvbWluZyBzb29uIG11dGF0aW9uKSBhZGQgYSBzaW5nbGUgb2JzZXJ2ZXJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBub2Rlcy5sZW5ndGgtMTsgaSsrKSB7XG4gICAgICBsZXQgZWxlbWVudE9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbik7XG4gICAgICBlbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZShub2Rlc1tpXSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IGZhbHNlLCBjaGFyYWN0ZXJEYXRhOiBmYWxzZSwgc3VidHJlZTpmYWxzZSwgYXR0cmlidXRlRmlsdGVyOltcImRhdGEtZXZlbnRzXCJdfSk7XG4gICAgfVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBbUEhdXG4vLyBGb3VuZGF0aW9uLkNoZWNrV2F0Y2hlcnMgPSBjaGVja1dhdGNoZXJzO1xuRm91bmRhdGlvbi5JSGVhcllvdSA9IGNoZWNrTGlzdGVuZXJzO1xuLy8gRm91bmRhdGlvbi5JU2VlWW91ID0gc2Nyb2xsTGlzdGVuZXI7XG4vLyBGb3VuZGF0aW9uLklGZWVsWW91ID0gY2xvc2VtZUxpc3RlbmVyO1xuXG59KGpRdWVyeSk7XG5cbi8vIGZ1bmN0aW9uIGRvbU11dGF0aW9uT2JzZXJ2ZXIoZGVib3VuY2UpIHtcbi8vICAgLy8gISEhIFRoaXMgaXMgY29taW5nIHNvb24gYW5kIG5lZWRzIG1vcmUgd29yazsgbm90IGFjdGl2ZSAgISEhIC8vXG4vLyAgIHZhciB0aW1lcixcbi8vICAgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tdXRhdGVdJyk7XG4vLyAgIC8vXG4vLyAgIGlmIChub2Rlcy5sZW5ndGgpIHtcbi8vICAgICAvLyB2YXIgTXV0YXRpb25PYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4vLyAgICAgLy8gICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbi8vICAgICAvLyAgIGZvciAodmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgLy8gICAgIGlmIChwcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHtcbi8vICAgICAvLyAgICAgICByZXR1cm4gd2luZG93W3ByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInXTtcbi8vICAgICAvLyAgICAgfVxuLy8gICAgIC8vICAgfVxuLy8gICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuLy8gICAgIC8vIH0oKSk7XG4vL1xuLy9cbi8vICAgICAvL2ZvciB0aGUgYm9keSwgd2UgbmVlZCB0byBsaXN0ZW4gZm9yIGFsbCBjaGFuZ2VzIGVmZmVjdGluZyB0aGUgc3R5bGUgYW5kIGNsYXNzIGF0dHJpYnV0ZXNcbi8vICAgICB2YXIgYm9keU9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoYm9keU11dGF0aW9uKTtcbi8vICAgICBib2R5T2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogZmFsc2UsIHN1YnRyZWU6dHJ1ZSwgYXR0cmlidXRlRmlsdGVyOltcInN0eWxlXCIsIFwiY2xhc3NcIl19KTtcbi8vXG4vL1xuLy8gICAgIC8vYm9keSBjYWxsYmFja1xuLy8gICAgIGZ1bmN0aW9uIGJvZHlNdXRhdGlvbihtdXRhdGUpIHtcbi8vICAgICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBtdXRhdGlvbiBldmVudFxuLy8gICAgICAgaWYgKHRpbWVyKSB7IGNsZWFyVGltZW91dCh0aW1lcik7IH1cbi8vXG4vLyAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgIGJvZHlPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4vLyAgICAgICAgICQoJ1tkYXRhLW11dGF0ZV0nKS5hdHRyKCdkYXRhLWV2ZW50cycsXCJtdXRhdGVcIik7XG4vLyAgICAgICB9LCBkZWJvdW5jZSB8fCAxNTApO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gfVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFiaWRlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5hYmlkZVxuICovXG5cbmNsYXNzIEFiaWRlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQWJpZGUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWJpZGUjaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgID0gJC5leHRlbmQoe30sIEFiaWRlLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdBYmlkZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBBYmlkZSBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgQWJpZGUgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuJGlucHV0cyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKTtcblxuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgQWJpZGUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuYWJpZGUnKVxuICAgICAgLm9uKCdyZXNldC56Zi5hYmlkZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5yZXNldEZvcm0oKTtcbiAgICAgIH0pXG4gICAgICAub24oJ3N1Ym1pdC56Zi5hYmlkZScsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVGb3JtKCk7XG4gICAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMudmFsaWRhdGVPbiA9PT0gJ2ZpZWxkQ2hhbmdlJykge1xuICAgICAgdGhpcy4kaW5wdXRzXG4gICAgICAgIC5vZmYoJ2NoYW5nZS56Zi5hYmlkZScpXG4gICAgICAgIC5vbignY2hhbmdlLnpmLmFiaWRlJywgKGUpID0+IHtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXQoJChlLnRhcmdldCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmxpdmVWYWxpZGF0ZSkge1xuICAgICAgdGhpcy4kaW5wdXRzXG4gICAgICAgIC5vZmYoJ2lucHV0LnpmLmFiaWRlJylcbiAgICAgICAgLm9uKCdpbnB1dC56Zi5hYmlkZScsIChlKSA9PiB7XG4gICAgICAgICAgdGhpcy52YWxpZGF0ZUlucHV0KCQoZS50YXJnZXQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIEFiaWRlIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICB0aGlzLl9pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IGEgZm9ybSBlbGVtZW50IGhhcyB0aGUgcmVxdWlyZWQgYXR0cmlidXRlIGFuZCBpZiBpdCdzIGNoZWNrZWQgb3Igbm90XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBjaGVjayBmb3IgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXR0cmlidXRlIGlzIGNoZWNrZWQgb3IgZW1wdHlcbiAgICovXG4gIHJlcXVpcmVkQ2hlY2soJGVsKSB7XG4gICAgaWYgKCEkZWwuYXR0cigncmVxdWlyZWQnKSkgcmV0dXJuIHRydWU7XG5cbiAgICB2YXIgaXNHb29kID0gdHJ1ZTtcblxuICAgIHN3aXRjaCAoJGVsWzBdLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgaXNHb29kID0gJGVsWzBdLmNoZWNrZWQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgY2FzZSAnc2VsZWN0LW9uZSc6XG4gICAgICBjYXNlICdzZWxlY3QtbXVsdGlwbGUnOlxuICAgICAgICB2YXIgb3B0ID0gJGVsLmZpbmQoJ29wdGlvbjpzZWxlY3RlZCcpO1xuICAgICAgICBpZiAoIW9wdC5sZW5ndGggfHwgIW9wdC52YWwoKSkgaXNHb29kID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZighJGVsLnZhbCgpIHx8ICEkZWwudmFsKCkubGVuZ3RoKSBpc0dvb2QgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNHb29kO1xuICB9XG5cbiAgLyoqXG4gICAqIEJhc2VkIG9uICRlbCwgZ2V0IHRoZSBmaXJzdCBlbGVtZW50IHdpdGggc2VsZWN0b3IgaW4gdGhpcyBvcmRlcjpcbiAgICogMS4gVGhlIGVsZW1lbnQncyBkaXJlY3Qgc2libGluZygncykuXG4gICAqIDMuIFRoZSBlbGVtZW50J3MgcGFyZW50J3MgY2hpbGRyZW4uXG4gICAqXG4gICAqIFRoaXMgYWxsb3dzIGZvciBtdWx0aXBsZSBmb3JtIGVycm9ycyBwZXIgaW5wdXQsIHRob3VnaCBpZiBub25lIGFyZSBmb3VuZCwgbm8gZm9ybSBlcnJvcnMgd2lsbCBiZSBzaG93bi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGFzIHJlZmVyZW5jZSB0byBmaW5kIHRoZSBmb3JtIGVycm9yIHNlbGVjdG9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBqUXVlcnkgb2JqZWN0IHdpdGggdGhlIHNlbGVjdG9yLlxuICAgKi9cbiAgZmluZEZvcm1FcnJvcigkZWwpIHtcbiAgICB2YXIgJGVycm9yID0gJGVsLnNpYmxpbmdzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JTZWxlY3Rvcik7XG5cbiAgICBpZiAoISRlcnJvci5sZW5ndGgpIHtcbiAgICAgICRlcnJvciA9ICRlbC5wYXJlbnQoKS5maW5kKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JTZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuICRlcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhpcyBvcmRlcjpcbiAgICogMi4gVGhlIDxsYWJlbD4gd2l0aCB0aGUgYXR0cmlidXRlIGBbZm9yPVwic29tZUlucHV0SWRcIl1gXG4gICAqIDMuIFRoZSBgLmNsb3Nlc3QoKWAgPGxhYmVsPlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IG9iamVjdCB0byBjaGVjayBmb3IgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXR0cmlidXRlIGlzIGNoZWNrZWQgb3IgZW1wdHlcbiAgICovXG4gIGZpbmRMYWJlbCgkZWwpIHtcbiAgICB2YXIgaWQgPSAkZWxbMF0uaWQ7XG4gICAgdmFyICRsYWJlbCA9IHRoaXMuJGVsZW1lbnQuZmluZChgbGFiZWxbZm9yPVwiJHtpZH1cIl1gKTtcblxuICAgIGlmICghJGxhYmVsLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICRlbC5jbG9zZXN0KCdsYWJlbCcpO1xuICAgIH1cblxuICAgIHJldHVybiAkbGFiZWw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzZXQgb2YgbGFiZWxzIGFzc29jaWF0ZWQgd2l0aCBhIHNldCBvZiByYWRpbyBlbHMgaW4gdGhpcyBvcmRlclxuICAgKiAyLiBUaGUgPGxhYmVsPiB3aXRoIHRoZSBhdHRyaWJ1dGUgYFtmb3I9XCJzb21lSW5wdXRJZFwiXWBcbiAgICogMy4gVGhlIGAuY2xvc2VzdCgpYCA8bGFiZWw+XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgKi9cbiAgZmluZFJhZGlvTGFiZWxzKCRlbHMpIHtcbiAgICB2YXIgbGFiZWxzID0gJGVscy5tYXAoKGksIGVsKSA9PiB7XG4gICAgICB2YXIgaWQgPSBlbC5pZDtcbiAgICAgIHZhciAkbGFiZWwgPSB0aGlzLiRlbGVtZW50LmZpbmQoYGxhYmVsW2Zvcj1cIiR7aWR9XCJdYCk7XG5cbiAgICAgIGlmICghJGxhYmVsLmxlbmd0aCkge1xuICAgICAgICAkbGFiZWwgPSAkKGVsKS5jbG9zZXN0KCdsYWJlbCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICRsYWJlbFswXTtcbiAgICB9KTtcblxuICAgIHJldHVybiAkKGxhYmVscyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgQ1NTIGVycm9yIGNsYXNzIGFzIHNwZWNpZmllZCBieSB0aGUgQWJpZGUgc2V0dGluZ3MgdG8gdGhlIGxhYmVsLCBpbnB1dCwgYW5kIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgY2xhc3MgdG9cbiAgICovXG4gIGFkZEVycm9yQ2xhc3NlcygkZWwpIHtcbiAgICB2YXIgJGxhYmVsID0gdGhpcy5maW5kTGFiZWwoJGVsKTtcbiAgICB2YXIgJGZvcm1FcnJvciA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWwpO1xuXG4gICAgaWYgKCRsYWJlbC5sZW5ndGgpIHtcbiAgICAgICRsYWJlbC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvci5sZW5ndGgpIHtcbiAgICAgICRmb3JtRXJyb3IuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmZvcm1FcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykuYXR0cignZGF0YS1pbnZhbGlkJywgJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBDU1MgZXJyb3IgY2xhc3NlcyBldGMgZnJvbSBhbiBlbnRpcmUgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBncm91cE5hbWUgLSBBIHN0cmluZyB0aGF0IHNwZWNpZmllcyB0aGUgbmFtZSBvZiBhIHJhZGlvIGJ1dHRvbiBncm91cFxuICAgKlxuICAgKi9cblxuICByZW1vdmVSYWRpb0Vycm9yQ2xhc3Nlcyhncm91cE5hbWUpIHtcbiAgICB2YXIgJGVscyA9IHRoaXMuJGVsZW1lbnQuZmluZChgOnJhZGlvW25hbWU9XCIke2dyb3VwTmFtZX1cIl1gKTtcbiAgICB2YXIgJGxhYmVscyA9IHRoaXMuZmluZFJhZGlvTGFiZWxzKCRlbHMpO1xuICAgIHZhciAkZm9ybUVycm9ycyA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWxzKTtcblxuICAgIGlmICgkbGFiZWxzLmxlbmd0aCkge1xuICAgICAgJGxhYmVscy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAkZm9ybUVycm9ycy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbHMucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIENTUyBlcnJvciBjbGFzcyBhcyBzcGVjaWZpZWQgYnkgdGhlIEFiaWRlIHNldHRpbmdzIGZyb20gdGhlIGxhYmVsLCBpbnB1dCwgYW5kIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHJlbW92ZSB0aGUgY2xhc3MgZnJvbVxuICAgKi9cbiAgcmVtb3ZlRXJyb3JDbGFzc2VzKCRlbCkge1xuICAgIC8vIHJhZGlvcyBuZWVkIHRvIGNsZWFyIGFsbCBvZiB0aGUgZWxzXG4gICAgaWYoJGVsWzBdLnR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlUmFkaW9FcnJvckNsYXNzZXMoJGVsLmF0dHIoJ25hbWUnKSk7XG4gICAgfVxuXG4gICAgdmFyICRsYWJlbCA9IHRoaXMuZmluZExhYmVsKCRlbCk7XG4gICAgdmFyICRmb3JtRXJyb3IgPSB0aGlzLmZpbmRGb3JtRXJyb3IoJGVsKTtcblxuICAgIGlmICgkbGFiZWwubGVuZ3RoKSB7XG4gICAgICAkbGFiZWwucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxhYmVsRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKCRmb3JtRXJyb3IubGVuZ3RoKSB7XG4gICAgICAkZm9ybUVycm9yLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVsLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5pbnB1dEVycm9yQ2xhc3MpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdvZXMgdGhyb3VnaCBhIGZvcm0gdG8gZmluZCBpbnB1dHMgYW5kIHByb2NlZWRzIHRvIHZhbGlkYXRlIHRoZW0gaW4gd2F5cyBzcGVjaWZpYyB0byB0aGVpciB0eXBlXG4gICAqIEBmaXJlcyBBYmlkZSNpbnZhbGlkXG4gICAqIEBmaXJlcyBBYmlkZSN2YWxpZFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdmFsaWRhdGUsIHNob3VsZCBiZSBhbiBIVE1MIGlucHV0XG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBnb29kVG9HbyAtIElmIHRoZSBpbnB1dCBpcyB2YWxpZCBvciBub3QuXG4gICAqL1xuICB2YWxpZGF0ZUlucHV0KCRlbCkge1xuICAgIHZhciBjbGVhclJlcXVpcmUgPSB0aGlzLnJlcXVpcmVkQ2hlY2soJGVsKSxcbiAgICAgICAgdmFsaWRhdGVkID0gZmFsc2UsXG4gICAgICAgIGN1c3RvbVZhbGlkYXRvciA9IHRydWUsXG4gICAgICAgIHZhbGlkYXRvciA9ICRlbC5hdHRyKCdkYXRhLXZhbGlkYXRvcicpLFxuICAgICAgICBlcXVhbFRvID0gdHJ1ZTtcblxuICAgIC8vIGRvbid0IHZhbGlkYXRlIGlnbm9yZWQgaW5wdXRzIG9yIGhpZGRlbiBpbnB1dHNcbiAgICBpZiAoJGVsLmlzKCdbZGF0YS1hYmlkZS1pZ25vcmVdJykgfHwgJGVsLmlzKCdbdHlwZT1cImhpZGRlblwiXScpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKCRlbFswXS50eXBlKSB7XG4gICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgIHZhbGlkYXRlZCA9IHRoaXMudmFsaWRhdGVSYWRpbygkZWwuYXR0cignbmFtZScpKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgdmFsaWRhdGVkID0gY2xlYXJSZXF1aXJlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGNhc2UgJ3NlbGVjdC1vbmUnOlxuICAgICAgY2FzZSAnc2VsZWN0LW11bHRpcGxlJzpcbiAgICAgICAgdmFsaWRhdGVkID0gY2xlYXJSZXF1aXJlO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFsaWRhdGVkID0gdGhpcy52YWxpZGF0ZVRleHQoJGVsKTtcbiAgICB9XG5cbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjdXN0b21WYWxpZGF0b3IgPSB0aGlzLm1hdGNoVmFsaWRhdGlvbigkZWwsIHZhbGlkYXRvciwgJGVsLmF0dHIoJ3JlcXVpcmVkJykpO1xuICAgIH1cblxuICAgIGlmICgkZWwuYXR0cignZGF0YS1lcXVhbHRvJykpIHtcbiAgICAgIGVxdWFsVG8gPSB0aGlzLm9wdGlvbnMudmFsaWRhdG9ycy5lcXVhbFRvKCRlbCk7XG4gICAgfVxuXG5cbiAgICB2YXIgZ29vZFRvR28gPSBbY2xlYXJSZXF1aXJlLCB2YWxpZGF0ZWQsIGN1c3RvbVZhbGlkYXRvciwgZXF1YWxUb10uaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuICAgIHZhciBtZXNzYWdlID0gKGdvb2RUb0dvID8gJ3ZhbGlkJyA6ICdpbnZhbGlkJykgKyAnLnpmLmFiaWRlJztcblxuICAgIHRoaXNbZ29vZFRvR28gPyAncmVtb3ZlRXJyb3JDbGFzc2VzJyA6ICdhZGRFcnJvckNsYXNzZXMnXSgkZWwpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgaW5wdXQgaXMgZG9uZSBjaGVja2luZyBmb3IgdmFsaWRhdGlvbi4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYHZhbGlkLnpmLmFiaWRlYCBvciBgaW52YWxpZC56Zi5hYmlkZWBcbiAgICAgKiBUcmlnZ2VyIGluY2x1ZGVzIHRoZSBET00gZWxlbWVudCBvZiB0aGUgaW5wdXQuXG4gICAgICogQGV2ZW50IEFiaWRlI3ZhbGlkXG4gICAgICogQGV2ZW50IEFiaWRlI2ludmFsaWRcbiAgICAgKi9cbiAgICAkZWwudHJpZ2dlcihtZXNzYWdlLCBbJGVsXSk7XG5cbiAgICByZXR1cm4gZ29vZFRvR287XG4gIH1cblxuICAvKipcbiAgICogR29lcyB0aHJvdWdoIGEgZm9ybSBhbmQgaWYgdGhlcmUgYXJlIGFueSBpbnZhbGlkIGlucHV0cywgaXQgd2lsbCBkaXNwbGF5IHRoZSBmb3JtIGVycm9yIGVsZW1lbnRcbiAgICogQHJldHVybnMge0Jvb2xlYW59IG5vRXJyb3IgLSB0cnVlIGlmIG5vIGVycm9ycyB3ZXJlIGRldGVjdGVkLi4uXG4gICAqIEBmaXJlcyBBYmlkZSNmb3JtdmFsaWRcbiAgICogQGZpcmVzIEFiaWRlI2Zvcm1pbnZhbGlkXG4gICAqL1xuICB2YWxpZGF0ZUZvcm0oKSB7XG4gICAgdmFyIGFjYyA9IFtdO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRpbnB1dHMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGFjYy5wdXNoKF90aGlzLnZhbGlkYXRlSW5wdXQoJCh0aGlzKSkpO1xuICAgIH0pO1xuXG4gICAgdmFyIG5vRXJyb3IgPSBhY2MuaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1hYmlkZS1lcnJvcl0nKS5jc3MoJ2Rpc3BsYXknLCAobm9FcnJvciA/ICdub25lJyA6ICdibG9jaycpKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGZvcm0gaXMgZmluaXNoZWQgdmFsaWRhdGluZy4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYGZvcm12YWxpZC56Zi5hYmlkZWAgb3IgYGZvcm1pbnZhbGlkLnpmLmFiaWRlYC5cbiAgICAgKiBUcmlnZ2VyIGluY2x1ZGVzIHRoZSBlbGVtZW50IG9mIHRoZSBmb3JtLlxuICAgICAqIEBldmVudCBBYmlkZSNmb3JtdmFsaWRcbiAgICAgKiBAZXZlbnQgQWJpZGUjZm9ybWludmFsaWRcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoKG5vRXJyb3IgPyAnZm9ybXZhbGlkJyA6ICdmb3JtaW52YWxpZCcpICsgJy56Zi5hYmlkZScsIFt0aGlzLiRlbGVtZW50XSk7XG5cbiAgICByZXR1cm4gbm9FcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3IgYSBub3QgYSB0ZXh0IGlucHV0IGlzIHZhbGlkIGJhc2VkIG9uIHRoZSBwYXR0ZXJuIHNwZWNpZmllZCBpbiB0aGUgYXR0cmlidXRlLiBJZiBubyBtYXRjaGluZyBwYXR0ZXJuIGlzIGZvdW5kLCByZXR1cm5zIHRydWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHZhbGlkYXRlLCBzaG91bGQgYmUgYSB0ZXh0IGlucHV0IEhUTUwgZWxlbWVudFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVybiAtIHN0cmluZyB2YWx1ZSBvZiBvbmUgb2YgdGhlIFJlZ0V4IHBhdHRlcm5zIGluIEFiaWRlLm9wdGlvbnMucGF0dGVybnNcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCB0aGUgaW5wdXQgdmFsdWUgbWF0Y2hlcyB0aGUgcGF0dGVybiBzcGVjaWZpZWRcbiAgICovXG4gIHZhbGlkYXRlVGV4dCgkZWwsIHBhdHRlcm4pIHtcbiAgICAvLyBBIHBhdHRlcm4gY2FuIGJlIHBhc3NlZCB0byB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGJlIGluZmVyZWQgZnJvbSB0aGUgaW5wdXQncyBcInBhdHRlcm5cIiBhdHRyaWJ1dGUsIG9yIGl0J3MgXCJ0eXBlXCIgYXR0cmlidXRlXG4gICAgcGF0dGVybiA9IChwYXR0ZXJuIHx8ICRlbC5hdHRyKCdwYXR0ZXJuJykgfHwgJGVsLmF0dHIoJ3R5cGUnKSk7XG4gICAgdmFyIGlucHV0VGV4dCA9ICRlbC52YWwoKTtcbiAgICB2YXIgdmFsaWQgPSBmYWxzZTtcblxuICAgIGlmIChpbnB1dFRleHQubGVuZ3RoKSB7XG4gICAgICAvLyBJZiB0aGUgcGF0dGVybiBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaXMgaW4gQWJpZGUncyBsaXN0IG9mIHBhdHRlcm5zLCB0aGVuIHRlc3QgdGhhdCByZWdleHBcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGF0dGVybnMuaGFzT3duUHJvcGVydHkocGF0dGVybikpIHtcbiAgICAgICAgdmFsaWQgPSB0aGlzLm9wdGlvbnMucGF0dGVybnNbcGF0dGVybl0udGVzdChpbnB1dFRleHQpO1xuICAgICAgfVxuICAgICAgLy8gSWYgdGhlIHBhdHRlcm4gbmFtZSBpc24ndCBhbHNvIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiB0aGUgZmllbGQsIHRoZW4gdGVzdCBpdCBhcyBhIHJlZ2V4cFxuICAgICAgZWxzZSBpZiAocGF0dGVybiAhPT0gJGVsLmF0dHIoJ3R5cGUnKSkge1xuICAgICAgICB2YWxpZCA9IG5ldyBSZWdFeHAocGF0dGVybikudGVzdChpbnB1dFRleHQpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQW4gZW1wdHkgZmllbGQgaXMgdmFsaWQgaWYgaXQncyBub3QgcmVxdWlyZWRcbiAgICBlbHNlIGlmICghJGVsLnByb3AoJ3JlcXVpcmVkJykpIHtcbiAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWQ7XG4gICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBhIG5vdCBhIHJhZGlvIGlucHV0IGlzIHZhbGlkIGJhc2VkIG9uIHdoZXRoZXIgb3Igbm90IGl0IGlzIHJlcXVpcmVkIGFuZCBzZWxlY3RlZC4gQWx0aG91Z2ggdGhlIGZ1bmN0aW9uIHRhcmdldHMgYSBzaW5nbGUgYDxpbnB1dD5gLCBpdCB2YWxpZGF0ZXMgYnkgY2hlY2tpbmcgdGhlIGByZXF1aXJlZGAgYW5kIGBjaGVja2VkYCBwcm9wZXJ0aWVzIG9mIGFsbCByYWRpbyBidXR0b25zIGluIGl0cyBncm91cC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGdyb3VwTmFtZSAtIEEgc3RyaW5nIHRoYXQgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIGEgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXQgbGVhc3Qgb25lIHJhZGlvIGlucHV0IGhhcyBiZWVuIHNlbGVjdGVkIChpZiBpdCdzIHJlcXVpcmVkKVxuICAgKi9cbiAgdmFsaWRhdGVSYWRpbyhncm91cE5hbWUpIHtcbiAgICAvLyBJZiBhdCBsZWFzdCBvbmUgcmFkaW8gaW4gdGhlIGdyb3VwIGhhcyB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUsIHRoZSBncm91cCBpcyBjb25zaWRlcmVkIHJlcXVpcmVkXG4gICAgLy8gUGVyIFczQyBzcGVjLCBhbGwgcmFkaW8gYnV0dG9ucyBpbiBhIGdyb3VwIHNob3VsZCBoYXZlIGByZXF1aXJlZGAsIGJ1dCB3ZSdyZSBiZWluZyBuaWNlXG4gICAgdmFyICRncm91cCA9IHRoaXMuJGVsZW1lbnQuZmluZChgOnJhZGlvW25hbWU9XCIke2dyb3VwTmFtZX1cIl1gKTtcbiAgICB2YXIgdmFsaWQgPSBmYWxzZSwgcmVxdWlyZWQgPSBmYWxzZTtcblxuICAgIC8vIEZvciB0aGUgZ3JvdXAgdG8gYmUgcmVxdWlyZWQsIGF0IGxlYXN0IG9uZSByYWRpbyBuZWVkcyB0byBiZSByZXF1aXJlZFxuICAgICRncm91cC5lYWNoKChpLCBlKSA9PiB7XG4gICAgICBpZiAoJChlKS5hdHRyKCdyZXF1aXJlZCcpKSB7XG4gICAgICAgIHJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZighcmVxdWlyZWQpIHZhbGlkPXRydWU7XG5cbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAvLyBGb3IgdGhlIGdyb3VwIHRvIGJlIHZhbGlkLCBhdCBsZWFzdCBvbmUgcmFkaW8gbmVlZHMgdG8gYmUgY2hlY2tlZFxuICAgICAgJGdyb3VwLmVhY2goKGksIGUpID0+IHtcbiAgICAgICAgaWYgKCQoZSkucHJvcCgnY2hlY2tlZCcpKSB7XG4gICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHZhbGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYSBzZWxlY3RlZCBpbnB1dCBwYXNzZXMgYSBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbi4gTXVsdGlwbGUgdmFsaWRhdGlvbnMgY2FuIGJlIHVzZWQsIGlmIHBhc3NlZCB0byB0aGUgZWxlbWVudCB3aXRoIGBkYXRhLXZhbGlkYXRvcj1cImZvbyBiYXIgYmF6XCJgIGluIGEgc3BhY2Ugc2VwYXJhdGVkIGxpc3RlZC5cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsaWRhdG9ycyAtIGEgc3RyaW5nIG9mIGZ1bmN0aW9uIG5hbWVzIG1hdGNoaW5nIGZ1bmN0aW9ucyBpbiB0aGUgQWJpZGUub3B0aW9ucy52YWxpZGF0b3JzIG9iamVjdC5cbiAgICogQHBhcmFtIHtCb29sZWFufSByZXF1aXJlZCAtIHNlbGYgZXhwbGFuYXRvcnk/XG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgdmFsaWRhdGlvbnMgcGFzc2VkLlxuICAgKi9cbiAgbWF0Y2hWYWxpZGF0aW9uKCRlbCwgdmFsaWRhdG9ycywgcmVxdWlyZWQpIHtcbiAgICByZXF1aXJlZCA9IHJlcXVpcmVkID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgdmFyIGNsZWFyID0gdmFsaWRhdG9ycy5zcGxpdCgnICcpLm1hcCgodikgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52YWxpZGF0b3JzW3ZdKCRlbCwgcmVxdWlyZWQsICRlbC5wYXJlbnQoKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsZWFyLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgZm9ybSBpbnB1dHMgYW5kIHN0eWxlc1xuICAgKiBAZmlyZXMgQWJpZGUjZm9ybXJlc2V0XG4gICAqL1xuICByZXNldEZvcm0oKSB7XG4gICAgdmFyICRmb3JtID0gdGhpcy4kZWxlbWVudCxcbiAgICAgICAgb3B0cyA9IHRoaXMub3B0aW9ucztcblxuICAgICQoYC4ke29wdHMubGFiZWxFcnJvckNsYXNzfWAsICRmb3JtKS5ub3QoJ3NtYWxsJykucmVtb3ZlQ2xhc3Mob3B0cy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgICQoYC4ke29wdHMuaW5wdXRFcnJvckNsYXNzfWAsICRmb3JtKS5ub3QoJ3NtYWxsJykucmVtb3ZlQ2xhc3Mob3B0cy5pbnB1dEVycm9yQ2xhc3MpO1xuICAgICQoYCR7b3B0cy5mb3JtRXJyb3JTZWxlY3Rvcn0uJHtvcHRzLmZvcm1FcnJvckNsYXNzfWApLnJlbW92ZUNsYXNzKG9wdHMuZm9ybUVycm9yQ2xhc3MpO1xuICAgICRmb3JtLmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgJCgnOmlucHV0JywgJGZvcm0pLm5vdCgnOmJ1dHRvbiwgOnN1Ym1pdCwgOnJlc2V0LCA6aGlkZGVuLCA6cmFkaW8sIDpjaGVja2JveCwgW2RhdGEtYWJpZGUtaWdub3JlXScpLnZhbCgnJykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgJCgnOmlucHV0OnJhZGlvJywgJGZvcm0pLm5vdCgnW2RhdGEtYWJpZGUtaWdub3JlXScpLnByb3AoJ2NoZWNrZWQnLGZhbHNlKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcbiAgICAkKCc6aW5wdXQ6Y2hlY2tib3gnLCAkZm9ybSkubm90KCdbZGF0YS1hYmlkZS1pZ25vcmVdJykucHJvcCgnY2hlY2tlZCcsZmFsc2UpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGZvcm0gaGFzIGJlZW4gcmVzZXQuXG4gICAgICogQGV2ZW50IEFiaWRlI2Zvcm1yZXNldFxuICAgICAqL1xuICAgICRmb3JtLnRyaWdnZXIoJ2Zvcm1yZXNldC56Zi5hYmlkZScsIFskZm9ybV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIEFiaWRlLlxuICAgKiBSZW1vdmVzIGVycm9yIHN0eWxlcyBhbmQgY2xhc3NlcyBmcm9tIGVsZW1lbnRzLCB3aXRob3V0IHJlc2V0dGluZyB0aGVpciB2YWx1ZXMuXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9mZignLmFiaWRlJylcbiAgICAgIC5maW5kKCdbZGF0YS1hYmlkZS1lcnJvcl0nKVxuICAgICAgICAuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgIHRoaXMuJGlucHV0c1xuICAgICAgLm9mZignLmFiaWRlJylcbiAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5yZW1vdmVFcnJvckNsYXNzZXMoJCh0aGlzKSk7XG4gICAgICB9KTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5BYmlkZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGV2ZW50IHRvIHZhbGlkYXRlIGlucHV0cy4gQ2hlY2tib3hlcyBhbmQgcmFkaW9zIHZhbGlkYXRlIGltbWVkaWF0ZWx5LlxuICAgKiBSZW1vdmUgb3IgY2hhbmdlIHRoaXMgdmFsdWUgZm9yIG1hbnVhbCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdmaWVsZENoYW5nZSdcbiAgICovXG4gIHZhbGlkYXRlT246ICdmaWVsZENoYW5nZScsXG5cbiAgLyoqXG4gICAqIENsYXNzIHRvIGJlIGFwcGxpZWQgdG8gaW5wdXQgbGFiZWxzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdpcy1pbnZhbGlkLWxhYmVsJ1xuICAgKi9cbiAgbGFiZWxFcnJvckNsYXNzOiAnaXMtaW52YWxpZC1sYWJlbCcsXG5cbiAgLyoqXG4gICAqIENsYXNzIHRvIGJlIGFwcGxpZWQgdG8gaW5wdXRzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdpcy1pbnZhbGlkLWlucHV0J1xuICAgKi9cbiAgaW5wdXRFcnJvckNsYXNzOiAnaXMtaW52YWxpZC1pbnB1dCcsXG5cbiAgLyoqXG4gICAqIENsYXNzIHNlbGVjdG9yIHRvIHVzZSB0byB0YXJnZXQgRm9ybSBFcnJvcnMgZm9yIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnLmZvcm0tZXJyb3InXG4gICAqL1xuICBmb3JtRXJyb3JTZWxlY3RvcjogJy5mb3JtLWVycm9yJyxcblxuICAvKipcbiAgICogQ2xhc3MgYWRkZWQgdG8gRm9ybSBFcnJvcnMgb24gZmFpbGVkIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2lzLXZpc2libGUnXG4gICAqL1xuICBmb3JtRXJyb3JDbGFzczogJ2lzLXZpc2libGUnLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSB0byB2YWxpZGF0ZSB0ZXh0IGlucHV0cyBvbiBhbnkgdmFsdWUgY2hhbmdlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBsaXZlVmFsaWRhdGU6IGZhbHNlLFxuXG4gIHBhdHRlcm5zOiB7XG4gICAgYWxwaGEgOiAvXlthLXpBLVpdKyQvLFxuICAgIGFscGhhX251bWVyaWMgOiAvXlthLXpBLVowLTldKyQvLFxuICAgIGludGVnZXIgOiAvXlstK10/XFxkKyQvLFxuICAgIG51bWJlciA6IC9eWy0rXT9cXGQqKD86W1xcLlxcLF1cXGQrKT8kLyxcblxuICAgIC8vIGFtZXgsIHZpc2EsIGRpbmVyc1xuICAgIGNhcmQgOiAvXig/OjRbMC05XXsxMn0oPzpbMC05XXszfSk/fDVbMS01XVswLTldezE0fXw2KD86MDExfDVbMC05XVswLTldKVswLTldezEyfXwzWzQ3XVswLTldezEzfXwzKD86MFswLTVdfFs2OF1bMC05XSlbMC05XXsxMX18KD86MjEzMXwxODAwfDM1XFxkezN9KVxcZHsxMX0pJC8sXG4gICAgY3Z2IDogL14oWzAtOV0pezMsNH0kLyxcblxuICAgIC8vIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3N0YXRlcy1vZi10aGUtdHlwZS1hdHRyaWJ1dGUuaHRtbCN2YWxpZC1lLW1haWwtYWRkcmVzc1xuICAgIGVtYWlsIDogL15bYS16QS1aMC05LiEjJCUmJyorXFwvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrJC8sXG5cbiAgICB1cmwgOiAvXihodHRwcz98ZnRwfGZpbGV8c3NoKTpcXC9cXC8oKCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OikqQCk/KCgoXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pKXwoKChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4/KSg6XFxkKik/KShcXC8oKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKyhcXC8oKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkqKSopPyk/KFxcPygoKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8W1xcdUUwMDAtXFx1RjhGRl18XFwvfFxcPykqKT8oXFwjKCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxcXC98XFw/KSopPyQvLFxuICAgIC8vIGFiYy5kZVxuICAgIGRvbWFpbiA6IC9eKFthLXpBLVowLTldKFthLXpBLVowLTlcXC1dezAsNjF9W2EtekEtWjAtOV0pP1xcLikrW2EtekEtWl17Miw4fSQvLFxuXG4gICAgZGF0ZXRpbWUgOiAvXihbMC0yXVswLTldezN9KVxcLShbMC0xXVswLTldKVxcLShbMC0zXVswLTldKVQoWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSkoWnwoW1xcLVxcK10oWzAtMV1bMC05XSlcXDowMCkpJC8sXG4gICAgLy8gWVlZWS1NTS1ERFxuICAgIGRhdGUgOiAvKD86MTl8MjApWzAtOV17Mn0tKD86KD86MFsxLTldfDFbMC0yXSktKD86MFsxLTldfDFbMC05XXwyWzAtOV0pfCg/Oig/ITAyKSg/OjBbMS05XXwxWzAtMl0pLSg/OjMwKSl8KD86KD86MFsxMzU3OF18MVswMl0pLTMxKSkkLyxcbiAgICAvLyBISDpNTTpTU1xuICAgIHRpbWUgOiAvXigwWzAtOV18MVswLTldfDJbMC0zXSkoOlswLTVdWzAtOV0pezJ9JC8sXG4gICAgZGF0ZUlTTyA6IC9eXFxkezR9W1xcL1xcLV1cXGR7MSwyfVtcXC9cXC1dXFxkezEsMn0kLyxcbiAgICAvLyBNTS9ERC9ZWVlZXG4gICAgbW9udGhfZGF5X3llYXIgOiAvXigwWzEtOV18MVswMTJdKVstIFxcLy5dKDBbMS05XXxbMTJdWzAtOV18M1swMV0pWy0gXFwvLl1cXGR7NH0kLyxcbiAgICAvLyBERC9NTS9ZWVlZXG4gICAgZGF5X21vbnRoX3llYXIgOiAvXigwWzEtOV18WzEyXVswLTldfDNbMDFdKVstIFxcLy5dKDBbMS05XXwxWzAxMl0pWy0gXFwvLl1cXGR7NH0kLyxcblxuICAgIC8vICNGRkYgb3IgI0ZGRkZGRlxuICAgIGNvbG9yIDogL14jPyhbYS1mQS1GMC05XXs2fXxbYS1mQS1GMC05XXszfSkkL1xuICB9LFxuXG4gIC8qKlxuICAgKiBPcHRpb25hbCB2YWxpZGF0aW9uIGZ1bmN0aW9ucyB0byBiZSB1c2VkLiBgZXF1YWxUb2AgYmVpbmcgdGhlIG9ubHkgZGVmYXVsdCBpbmNsdWRlZCBmdW5jdGlvbi5cbiAgICogRnVuY3Rpb25zIHNob3VsZCByZXR1cm4gb25seSBhIGJvb2xlYW4gaWYgdGhlIGlucHV0IGlzIHZhbGlkIG9yIG5vdC4gRnVuY3Rpb25zIGFyZSBnaXZlbiB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAgICogZWwgOiBUaGUgalF1ZXJ5IGVsZW1lbnQgdG8gdmFsaWRhdGUuXG4gICAqIHJlcXVpcmVkIDogQm9vbGVhbiB2YWx1ZSBvZiB0aGUgcmVxdWlyZWQgYXR0cmlidXRlIGJlIHByZXNlbnQgb3Igbm90LlxuICAgKiBwYXJlbnQgOiBUaGUgZGlyZWN0IHBhcmVudCBvZiB0aGUgaW5wdXQuXG4gICAqIEBvcHRpb25cbiAgICovXG4gIHZhbGlkYXRvcnM6IHtcbiAgICBlcXVhbFRvOiBmdW5jdGlvbiAoZWwsIHJlcXVpcmVkLCBwYXJlbnQpIHtcbiAgICAgIHJldHVybiAkKGAjJHtlbC5hdHRyKCdkYXRhLWVxdWFsdG8nKX1gKS52YWwoKSA9PT0gZWwudmFsKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBYmlkZSwgJ0FiaWRlJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBBY2NvcmRpb24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqL1xuXG5jbGFzcyBBY2NvcmRpb24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24uXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWNjb3JkaW9uI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYSBwbGFpbiBvYmplY3Qgd2l0aCBzZXR0aW5ncyB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBY2NvcmRpb24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0FjY29yZGlvbicpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbicsIHtcbiAgICAgICdFTlRFUic6ICd0b2dnbGUnLFxuICAgICAgJ1NQQUNFJzogJ3RvZ2dsZScsXG4gICAgICAnQVJST1dfRE9XTic6ICduZXh0JyxcbiAgICAgICdBUlJPV19VUCc6ICdwcmV2aW91cydcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIGJ5IGFuaW1hdGluZyB0aGUgcHJlc2V0IGFjdGl2ZSBwYW5lKHMpLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICB0aGlzLiR0YWJzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignbGksIFtkYXRhLWFjY29yZGlvbi1pdGVtXScpO1xuXG4gICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uKGlkeCwgZWwpIHtcbiAgICAgIHZhciAkZWwgPSAkKGVsKSxcbiAgICAgICAgICAkY29udGVudCA9ICRlbC5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyksXG4gICAgICAgICAgaWQgPSAkY29udGVudFswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdhY2NvcmRpb24nKSxcbiAgICAgICAgICBsaW5rSWQgPSBlbC5pZCB8fCBgJHtpZH0tbGFiZWxgO1xuXG4gICAgICAkZWwuZmluZCgnYTpmaXJzdCcpLmF0dHIoe1xuICAgICAgICAnYXJpYS1jb250cm9scyc6IGlkLFxuICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAnaWQnOiBsaW5rSWQsXG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICAkY29udGVudC5hdHRyKHsncm9sZSc6ICd0YWJwYW5lbCcsICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWQsICdhcmlhLWhpZGRlbic6IHRydWUsICdpZCc6IGlkfSk7XG4gICAgfSk7XG4gICAgdmFyICRpbml0QWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJykuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgIGlmKCRpbml0QWN0aXZlLmxlbmd0aCl7XG4gICAgICB0aGlzLmRvd24oJGluaXRBY3RpdmUsIHRydWUpO1xuICAgIH1cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIGFjY29yZGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJHRhYnMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkZWxlbSA9ICQodGhpcyk7XG4gICAgICB2YXIgJHRhYkNvbnRlbnQgPSAkZWxlbS5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyk7XG4gICAgICBpZiAoJHRhYkNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICAgICRlbGVtLmNoaWxkcmVuKCdhJykub2ZmKCdjbGljay56Zi5hY2NvcmRpb24ga2V5ZG93bi56Zi5hY2NvcmRpb24nKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay56Zi5hY2NvcmRpb24nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLnRvZ2dsZSgkdGFiQ29udGVudCk7XG4gICAgICAgIH0pLm9uKCdrZXlkb3duLnpmLmFjY29yZGlvbicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdBY2NvcmRpb24nLCB7XG4gICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBfdGhpcy50b2dnbGUoJHRhYkNvbnRlbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgJGEgPSAkZWxlbS5uZXh0KCkuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5tdWx0aUV4cGFuZCkge1xuICAgICAgICAgICAgICAgICRhLnRyaWdnZXIoJ2NsaWNrLnpmLmFjY29yZGlvbicpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2aW91czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciAkYSA9ICRlbGVtLnByZXYoKS5maW5kKCdhJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgJGEudHJpZ2dlcignY2xpY2suemYuYWNjb3JkaW9uJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHNlbGVjdGVkIGNvbnRlbnQgcGFuZSdzIG9wZW4vY2xvc2Ugc3RhdGUuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0galF1ZXJ5IG9iamVjdCBvZiB0aGUgcGFuZSB0byB0b2dnbGUgKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoJHRhcmdldCkge1xuICAgIGlmKCR0YXJnZXQucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XG4gICAgICB0aGlzLnVwKCR0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvd24oJHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBhY2NvcmRpb24gdGFiIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIEFjY29yZGlvbiBwYW5lIHRvIG9wZW4gKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICogQHBhcmFtIHtCb29sZWFufSBmaXJzdFRpbWUgLSBmbGFnIHRvIGRldGVybWluZSBpZiByZWZsb3cgc2hvdWxkIGhhcHBlbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbiNkb3duXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZG93bigkdGFyZ2V0LCBmaXJzdFRpbWUpIHtcbiAgICAkdGFyZ2V0XG4gICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSlcbiAgICAgIC5wYXJlbnQoJ1tkYXRhLXRhYi1jb250ZW50XScpXG4gICAgICAuYWRkQmFjaygpXG4gICAgICAucGFyZW50KCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQgJiYgIWZpcnN0VGltZSkge1xuICAgICAgdmFyICRjdXJyZW50QWN0aXZlID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWFjdGl2ZScpLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgIGlmICgkY3VycmVudEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy51cCgkY3VycmVudEFjdGl2ZS5ub3QoJHRhcmdldCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgICR0YXJnZXQuc2xpZGVEb3duKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAoKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHRhYiBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI2Rvd25cbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdkb3duLnpmLmFjY29yZGlvbicsIFskdGFyZ2V0XSk7XG4gICAgfSk7XG5cbiAgICAkKGAjJHskdGFyZ2V0LmF0dHIoJ2FyaWEtbGFiZWxsZWRieScpfWApLmF0dHIoe1xuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiB0cnVlLFxuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSB0YWIgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQWNjb3JkaW9uIHRhYiB0byBjbG9zZSAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uI3VwXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgdXAoJHRhcmdldCkge1xuICAgIHZhciAkYXVudHMgPSAkdGFyZ2V0LnBhcmVudCgpLnNpYmxpbmdzKCksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmKCghdGhpcy5vcHRpb25zLmFsbG93QWxsQ2xvc2VkICYmICEkYXVudHMuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB8fCAhJHRhcmdldC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsICR0YXJnZXQsIGZ1bmN0aW9uKCl7XG4gICAgICAkdGFyZ2V0LnNsaWRlVXAoX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB0YWIgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI3VwXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cC56Zi5hY2NvcmRpb24nLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG4gICAgLy8gfSk7XG5cbiAgICAkdGFyZ2V0LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICAgICAgICAgLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICQoYCMkeyR0YXJnZXQuYXR0cignYXJpYS1sYWJlbGxlZGJ5Jyl9YCkuYXR0cih7XG4gICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFuIGFjY29yZGlvbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbiNkZXN0cm95ZWRcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtdGFiLWNvbnRlbnRdJykuc3RvcCh0cnVlKS5zbGlkZVVwKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJy56Zi5hY2NvcmRpb24nKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5BY2NvcmRpb24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBhbmltYXRlIHRoZSBvcGVuaW5nIG9mIGFuIGFjY29yZGlvbiBwYW5lLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1MFxuICAgKi9cbiAgc2xpZGVTcGVlZDogMjUwLFxuICAvKipcbiAgICogQWxsb3cgdGhlIGFjY29yZGlvbiB0byBoYXZlIG11bHRpcGxlIG9wZW4gcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIG11bHRpRXhwYW5kOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBhY2NvcmRpb24gdG8gY2xvc2UgYWxsIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBhbGxvd0FsbENsb3NlZDogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBY2NvcmRpb24sICdBY2NvcmRpb24nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFjY29yZGlvbk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvbk1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG5jbGFzcyBBY2NvcmRpb25NZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQWNjb3JkaW9uTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnQWNjb3JkaW9uTWVudScpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbk1lbnUnLCB7XG4gICAgICAnRU5URVInOiAndG9nZ2xlJyxcbiAgICAgICdTUEFDRSc6ICd0b2dnbGUnLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAnY2xvc2UnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZUFsbCdcbiAgICB9KTtcbiAgfVxuXG5cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGFjY29yZGlvbiBtZW51IGJ5IGhpZGluZyBhbGwgbmVzdGVkIG1lbnVzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLm5vdCgnLmlzLWFjdGl2ZScpLnNsaWRlVXAoMCk7Ly8uZmluZCgnYScpLmNzcygncGFkZGluZy1sZWZ0JywgJzFyZW0nKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ3JvbGUnOiAnbWVudScsXG4gICAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiB0aGlzLm9wdGlvbnMubXVsdGlPcGVuXG4gICAgfSk7XG5cbiAgICB0aGlzLiRtZW51TGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY2NvcmRpb24tc3VibWVudS1wYXJlbnQnKTtcbiAgICB0aGlzLiRtZW51TGlua3MuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyIGxpbmtJZCA9IHRoaXMuaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnYWNjLW1lbnUtbGluaycpLFxuICAgICAgICAgICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAkc3ViID0gJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyksXG4gICAgICAgICAgc3ViSWQgPSAkc3ViWzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjYy1tZW51JyksXG4gICAgICAgICAgaXNBY3RpdmUgPSAkc3ViLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICRlbGVtLmF0dHIoe1xuICAgICAgICAnYXJpYS1jb250cm9scyc6IHN1YklkLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGlzQWN0aXZlLFxuICAgICAgICAncm9sZSc6ICdtZW51aXRlbScsXG4gICAgICAgICdpZCc6IGxpbmtJZFxuICAgICAgfSk7XG4gICAgICAkc3ViLmF0dHIoe1xuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICdyb2xlJzogJ21lbnUnLFxuICAgICAgICAnaWQnOiBzdWJJZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGluaXRQYW5lcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpO1xuICAgIGlmKGluaXRQYW5lcy5sZW5ndGgpe1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGluaXRQYW5lcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIF90aGlzLmRvd24oJCh0aGlzKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSBtZW51LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJHN1Ym1lbnUgPSAkKHRoaXMpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuXG4gICAgICBpZiAoJHN1Ym1lbnUubGVuZ3RoKSB7XG4gICAgICAgICQodGhpcykuY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKS5vbignY2xpY2suemYuYWNjb3JkaW9uTWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICBfdGhpcy50b2dnbGUoJHN1Ym1lbnUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KS5vbigna2V5ZG93bi56Zi5hY2NvcmRpb25tZW51JywgZnVuY3Rpb24oZSl7XG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50LFxuICAgICAgICAgICR0YXJnZXQgPSAkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKTtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaS0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkrMSwgJGVsZW1lbnRzLmxlbmd0aC0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG5cbiAgICAgICAgICBpZiAoJCh0aGlzKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkgeyAvLyBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3QtY2hpbGQnKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpmaXJzdC1jaGlsZCcpKSB7IC8vIGlzIGZpcnN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdOnZpc2libGUnKS5sZW5ndGgpIHsgLy8gaWYgcHJldmlvdXMgZWxlbWVudCBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJHByZXZFbGVtZW50LnBhcmVudHMoJ2xpJykuZmluZCgnbGk6bGFzdC1jaGlsZCcpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJCh0aGlzKS5pcygnOmxhc3QtY2hpbGQnKSkgeyAvLyBpcyBsYXN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5uZXh0KCdsaScpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdBY2NvcmRpb25NZW51Jywge1xuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgICBfdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgICAgICAgJHRhcmdldC5maW5kKCdsaScpLmZpcnN0KCkuZmluZCgnYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5sZW5ndGggJiYgISR0YXJnZXQuaXMoJzpoaWRkZW4nKSkgeyAvLyBjbG9zZSBhY3RpdmUgc3ViIG9mIHRoaXMgaXRlbVxuICAgICAgICAgICAgX3RoaXMudXAoJHRhcmdldCk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7IC8vIGNsb3NlIGN1cnJlbnRseSBvcGVuIHN1YlxuICAgICAgICAgICAgX3RoaXMudXAoJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdWJtZW51XScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBfdGhpcy50b2dnbGUoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmhpZGVBbGwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24ocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7Ly8uYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYWxsIHBhbmVzIG9mIHRoZSBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGhpZGVBbGwoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLnNsaWRlVXAodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2Ugc3RhdGUgb2YgYSBzdWJtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSB0aGUgc3VibWVudSB0byB0b2dnbGVcbiAgICovXG4gIHRvZ2dsZSgkdGFyZ2V0KXtcbiAgICBpZighJHRhcmdldC5pcygnOmFuaW1hdGVkJykpIHtcbiAgICAgIGlmICghJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgIHRoaXMudXAoJHRhcmdldCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgc3ViLW1lbnUgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gb3Blbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjZG93blxuICAgKi9cbiAgZG93bigkdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmKCF0aGlzLm9wdGlvbnMubXVsdGlPcGVuKSB7XG4gICAgICB0aGlzLnVwKHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpLm5vdCgkdGFyZ2V0LnBhcmVudHNVbnRpbCh0aGlzLiRlbGVtZW50KS5hZGQoJHRhcmdldCkpKTtcbiAgICB9XG5cbiAgICAkdGFyZ2V0LmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hdHRyKHsnYXJpYS1oaWRkZW4nOiBmYWxzZX0pXG4gICAgICAucGFyZW50KCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50JykuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG5cbiAgICAgIC8vRm91bmRhdGlvbi5Nb3ZlKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAkdGFyZ2V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgJHRhcmdldC5zbGlkZURvd24oX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbk1lbnUjZG93blxuICAgICAgICAgICAqL1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Rvd24uemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICAgIH0pO1xuICAgICAgLy99KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHN1Yi1tZW51IGRlZmluZWQgYnkgYCR0YXJnZXRgLiBBbGwgc3ViLW1lbnVzIGluc2lkZSB0aGUgdGFyZ2V0IHdpbGwgYmUgY2xvc2VkIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gY2xvc2UuXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I3VwXG4gICAqL1xuICB1cCgkdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAvL0ZvdW5kYXRpb24uTW92ZSh0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgJHRhcmdldCwgZnVuY3Rpb24oKXtcbiAgICAgICR0YXJnZXQuc2xpZGVVcChfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uTWVudSN1cFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcigndXAuemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcbiAgICAvL30pO1xuXG4gICAgdmFyICRtZW51cyA9ICR0YXJnZXQuZmluZCgnW2RhdGEtc3VibWVudV0nKS5zbGlkZVVwKDApLmFkZEJhY2soKS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgJG1lbnVzLnBhcmVudCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2Rlc3Ryb3llZFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVEb3duKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKTtcblxuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdhY2NvcmRpb24nKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuQWNjb3JkaW9uTWVudS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGFuaW1hdGUgdGhlIG9wZW5pbmcgb2YgYSBzdWJtZW51IGluIG1zLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1MFxuICAgKi9cbiAgc2xpZGVTcGVlZDogMjUwLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIG11bHRpT3BlbjogdHJ1ZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEFjY29yZGlvbk1lbnUsICdBY2NvcmRpb25NZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBEcmlsbGRvd24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyaWxsZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubmVzdFxuICovXG5cbmNsYXNzIERyaWxsZG93biB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgZHJpbGxkb3duIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbiBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIERyaWxsZG93bi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2RyaWxsZG93bicpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRHJpbGxkb3duJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignRHJpbGxkb3duJywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZScsXG4gICAgICAnVEFCJzogJ2Rvd24nLFxuICAgICAgJ1NISUZUX1RBQic6ICd1cCdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgZHJpbGxkb3duIGJ5IGNyZWF0aW5nIGpRdWVyeSBjb2xsZWN0aW9ucyBvZiBlbGVtZW50c1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kc3VibWVudUFuY2hvcnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpLmlzLWRyaWxsZG93bi1zdWJtZW51LXBhcmVudCcpLmNoaWxkcmVuKCdhJyk7XG4gICAgdGhpcy4kc3VibWVudXMgPSB0aGlzLiRzdWJtZW51QW5jaG9ycy5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyk7XG4gICAgdGhpcy4kbWVudUl0ZW1zID0gdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLm5vdCgnLmpzLWRyaWxsZG93bi1iYWNrJykuYXR0cigncm9sZScsICdtZW51aXRlbScpLmZpbmQoJ2EnKTtcblxuICAgIHRoaXMuX3ByZXBhcmVNZW51KCk7XG5cbiAgICB0aGlzLl9rZXlib2FyZEV2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIHByZXBhcmVzIGRyaWxsZG93biBtZW51IGJ5IHNldHRpbmcgYXR0cmlidXRlcyB0byBsaW5rcyBhbmQgZWxlbWVudHNcbiAgICogc2V0cyBhIG1pbiBoZWlnaHQgdG8gcHJldmVudCBjb250ZW50IGp1bXBpbmdcbiAgICogd3JhcHMgdGhlIGVsZW1lbnQgaWYgbm90IGFscmVhZHkgd3JhcHBlZFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIF9wcmVwYXJlTWVudSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8vIGlmKCF0aGlzLm9wdGlvbnMuaG9sZE9wZW4pe1xuICAgIC8vICAgdGhpcy5fbWVudUxpbmtFdmVudHMoKTtcbiAgICAvLyB9XG4gICAgdGhpcy4kc3VibWVudUFuY2hvcnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyICRsaW5rID0gJCh0aGlzKTtcbiAgICAgIHZhciAkc3ViID0gJGxpbmsucGFyZW50KCk7XG4gICAgICBpZihfdGhpcy5vcHRpb25zLnBhcmVudExpbmspe1xuICAgICAgICAkbGluay5jbG9uZSgpLnByZXBlbmRUbygkc3ViLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpKS53cmFwKCc8bGkgY2xhc3M9XCJpcy1zdWJtZW51LXBhcmVudC1pdGVtIGlzLXN1Ym1lbnUtaXRlbSBpcy1kcmlsbGRvd24tc3VibWVudS1pdGVtXCIgcm9sZT1cIm1lbnUtaXRlbVwiPjwvbGk+Jyk7XG4gICAgICB9XG4gICAgICAkbGluay5kYXRhKCdzYXZlZEhyZWYnLCAkbGluay5hdHRyKCdocmVmJykpLnJlbW92ZUF0dHIoJ2hyZWYnKS5hdHRyKCd0YWJpbmRleCcsIDApO1xuICAgICAgJGxpbmsuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJylcbiAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogMCxcbiAgICAgICAgICAgICdyb2xlJzogJ21lbnUnXG4gICAgICAgICAgfSk7XG4gICAgICBfdGhpcy5fZXZlbnRzKCRsaW5rKTtcbiAgICB9KTtcbiAgICB0aGlzLiRzdWJtZW51cy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJG1lbnUgPSAkKHRoaXMpLFxuICAgICAgICAgICRiYWNrID0gJG1lbnUuZmluZCgnLmpzLWRyaWxsZG93bi1iYWNrJyk7XG4gICAgICBpZighJGJhY2subGVuZ3RoKXtcbiAgICAgICAgJG1lbnUucHJlcGVuZChfdGhpcy5vcHRpb25zLmJhY2tCdXR0b24pO1xuICAgICAgfVxuICAgICAgX3RoaXMuX2JhY2soJG1lbnUpO1xuICAgIH0pO1xuICAgIGlmKCF0aGlzLiRlbGVtZW50LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24nKSl7XG4gICAgICB0aGlzLiR3cmFwcGVyID0gJCh0aGlzLm9wdGlvbnMud3JhcHBlcikuYWRkQ2xhc3MoJ2lzLWRyaWxsZG93bicpO1xuICAgICAgdGhpcy4kd3JhcHBlciA9IHRoaXMuJGVsZW1lbnQud3JhcCh0aGlzLiR3cmFwcGVyKS5wYXJlbnQoKS5jc3ModGhpcy5fZ2V0TWF4RGltcygpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyB0byBlbGVtZW50cyBpbiB0aGUgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IG1lbnUgaXRlbSB0byBhZGQgaGFuZGxlcnMgdG8uXG4gICAqL1xuICBfZXZlbnRzKCRlbGVtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICRlbGVtLm9mZignY2xpY2suemYuZHJpbGxkb3duJylcbiAgICAub24oJ2NsaWNrLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYoJChlLnRhcmdldCkucGFyZW50c1VudGlsKCd1bCcsICdsaScpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnQnKSl7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldC5maXJzdEVsZW1lbnRDaGlsZCl7XG4gICAgICAvLyAgIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIH1cbiAgICAgIF90aGlzLl9zaG93KCRlbGVtLnBhcmVudCgnbGknKSk7XG5cbiAgICAgIGlmKF90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKXtcbiAgICAgICAgdmFyICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgICAkYm9keS5vZmYoJy56Zi5kcmlsbGRvd24nKS5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBfdGhpcy4kZWxlbWVudFswXSB8fCAkLmNvbnRhaW5zKF90aGlzLiRlbGVtZW50WzBdLCBlLnRhcmdldCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLl9oaWRlQWxsKCk7XG4gICAgICAgICAgJGJvZHkub2ZmKCcuemYuZHJpbGxkb3duJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMga2V5ZG93biBldmVudCBsaXN0ZW5lciB0byBgbGlgJ3MgaW4gdGhlIG1lbnUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfa2V5Ym9hcmRFdmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJG1lbnVJdGVtcy5hZGQodGhpcy4kZWxlbWVudC5maW5kKCcuanMtZHJpbGxkb3duLWJhY2sgPiBhJykpLm9uKCdrZXlkb3duLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uKGUpe1xuXG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykuY2hpbGRyZW4oJ2xpJykuY2hpbGRyZW4oJ2EnKSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1heCgwLCBpLTEpKTtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSsxLCAkZWxlbWVudHMubGVuZ3RoLTEpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnRHJpbGxkb3duJywge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLmZpbmQoJ3VsIGxpIGEnKS5maWx0ZXIoX3RoaXMuJG1lbnVJdGVtcykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpKTtcbiAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW1lbnQpLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ2EnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLl9iYWNrKCk7XG4gICAgICAgICAgLy9fdGhpcy4kbWVudUl0ZW1zLmZpcnN0KCkuZm9jdXMoKTsgLy8gZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoISRlbGVtZW50LmlzKF90aGlzLiRtZW51SXRlbXMpKSB7IC8vIG5vdCBtZW51IGl0ZW0gbWVhbnMgYmFjayBidXR0b25cbiAgICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykpO1xuICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKS5jaGlsZHJlbignYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAgICAgICAgICAgIFxuICAgICAgICAgIH0gZWxzZSBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLmZpbmQoJ3VsIGxpIGEnKS5maWx0ZXIoX3RoaXMuJG1lbnVJdGVtcykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pOyAvLyBlbmQga2V5Ym9hcmRBY2Nlc3NcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYWxsIG9wZW4gZWxlbWVudHMsIGFuZCByZXR1cm5zIHRvIHJvb3QgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcmlsbGRvd24jY2xvc2VkXG4gICAqL1xuICBfaGlkZUFsbCgpIHtcbiAgICB2YXIgJGVsZW0gPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1kcmlsbGRvd24tc3VibWVudS5pcy1hY3RpdmUnKS5hZGRDbGFzcygnaXMtY2xvc2luZycpO1xuICAgICRlbGVtLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW0pLCBmdW5jdGlvbihlKXtcbiAgICAgICRlbGVtLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZycpO1xuICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBmdWxseSBjbG9zZWQuXG4gICAgICAgICAqIEBldmVudCBEcmlsbGRvd24jY2xvc2VkXG4gICAgICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VkLnpmLmRyaWxsZG93bicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXIgZm9yIGVhY2ggYGJhY2tgIGJ1dHRvbiwgYW5kIGNsb3NlcyBvcGVuIG1lbnVzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyaWxsZG93biNiYWNrXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IHN1Yi1tZW51IHRvIGFkZCBgYmFja2AgZXZlbnQuXG4gICAqL1xuICBfYmFjaygkZWxlbSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgJGVsZW0ub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKTtcbiAgICAkZWxlbS5jaGlsZHJlbignLmpzLWRyaWxsZG93bi1iYWNrJylcbiAgICAgIC5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdtb3VzZXVwIG9uIGJhY2snKTtcbiAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGEgcGFyZW50IHN1Ym1lbnUsIGNhbGwgc2hvd1xuICAgICAgICBsZXQgcGFyZW50U3ViTWVudSA9ICRlbGVtLnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykucGFyZW50KCdsaScpO1xuICAgICAgICBpZiAocGFyZW50U3ViTWVudS5sZW5ndGgpIHsgXG4gICAgICAgICAgX3RoaXMuX3Nob3cocGFyZW50U3ViTWVudSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXIgdG8gbWVudSBpdGVtcyB3L28gc3VibWVudXMgdG8gY2xvc2Ugb3BlbiBtZW51cyBvbiBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbWVudUxpbmtFdmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRtZW51SXRlbXMubm90KCcuaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50JylcbiAgICAgICAgLm9mZignY2xpY2suemYuZHJpbGxkb3duJylcbiAgICAgICAgLm9uKCdjbGljay56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAvLyBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIF90aGlzLl9oaWRlQWxsKCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIHN1Ym1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJpbGxkb3duI29wZW5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBvcGVuLCBpLmUuIHRoZSBgbGlgIHRhZy5cbiAgICovXG4gIF9zaG93KCRlbGVtKSB7XG4gICAgJGVsZW0uYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICRlbGVtLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpLmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBzdWJtZW51IGhhcyBvcGVuZWQuXG4gICAgICogQGV2ZW50IERyaWxsZG93biNvcGVuXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvcGVuLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBIaWRlcyBhIHN1Ym1lbnVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcmlsbGRvd24jaGlkZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSB0aGUgY3VycmVudCBzdWItbWVudSB0byBoaWRlLCBpLmUuIHRoZSBgdWxgIHRhZy5cbiAgICovXG4gIF9oaWRlKCRlbGVtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAkZWxlbS5wYXJlbnQoJ2xpJykuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAkZWxlbS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpLmFkZENsYXNzKCdpcy1jbG9zaW5nJylcbiAgICAgICAgIC5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtKSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgJGVsZW0ucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZSBpcy1jbG9zaW5nJyk7XG4gICAgICAgICAgICRlbGVtLmJsdXIoKTtcbiAgICAgICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHN1Ym1lbnUgaGFzIGNsb3NlZC5cbiAgICAgKiBAZXZlbnQgRHJpbGxkb3duI2hpZGVcbiAgICAgKi9cbiAgICAkZWxlbS50cmlnZ2VyKCdoaWRlLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIHRocm91Z2ggdGhlIG5lc3RlZCBtZW51cyB0byBjYWxjdWxhdGUgdGhlIG1pbi1oZWlnaHQsIGFuZCBtYXgtd2lkdGggZm9yIHRoZSBtZW51LlxuICAgKiBQcmV2ZW50cyBjb250ZW50IGp1bXBpbmcuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldE1heERpbXMoKSB7XG4gICAgdmFyIGJpZ2dlc3QgPSAwXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gICAgdGhpcy4kc3VibWVudXMuYWRkKHRoaXMuJGVsZW1lbnQpLmVhY2goKGksIGVsZW0pID0+IHtcbiAgICAgIHZhciBoZWlnaHQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgIGlmIChoZWlnaHQgPiBiaWdnZXN0KSBiaWdnZXN0ID0gaGVpZ2h0O1xuICAgIH0pO1xuXG4gICAgcmVzdWx0WydtaW4taGVpZ2h0J10gPSBgJHtiaWdnZXN0fXB4YDtcbiAgICByZXN1bHRbJ21heC13aWR0aCddID0gYCR7dGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aH1weGA7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBEcmlsbGRvd24gTWVudVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5faGlkZUFsbCgpO1xuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdkcmlsbGRvd24nKTtcbiAgICB0aGlzLiRlbGVtZW50LnVud3JhcCgpXG4gICAgICAgICAgICAgICAgIC5maW5kKCcuanMtZHJpbGxkb3duLWJhY2ssIC5pcy1zdWJtZW51LXBhcmVudC1pdGVtJykucmVtb3ZlKClcbiAgICAgICAgICAgICAgICAgLmVuZCgpLmZpbmQoJy5pcy1hY3RpdmUsIC5pcy1jbG9zaW5nLCAuaXMtZHJpbGxkb3duLXN1Ym1lbnUnKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWNsb3NpbmcgaXMtZHJpbGxkb3duLXN1Ym1lbnUnKVxuICAgICAgICAgICAgICAgICAuZW5kKCkuZmluZCgnW2RhdGEtc3VibWVudV0nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCByb2xlJyk7XG4gICAgdGhpcy4kc3VibWVudUFuY2hvcnMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICQodGhpcykub2ZmKCcuemYuZHJpbGxkb3duJyk7XG4gICAgfSk7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdhJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyICRsaW5rID0gJCh0aGlzKTtcbiAgICAgICRsaW5rLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICBpZigkbGluay5kYXRhKCdzYXZlZEhyZWYnKSl7XG4gICAgICAgICRsaW5rLmF0dHIoJ2hyZWYnLCAkbGluay5kYXRhKCdzYXZlZEhyZWYnKSkucmVtb3ZlRGF0YSgnc2F2ZWRIcmVmJyk7XG4gICAgICB9ZWxzZXsgcmV0dXJuOyB9XG4gICAgfSk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9O1xufVxuXG5EcmlsbGRvd24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBNYXJrdXAgdXNlZCBmb3IgSlMgZ2VuZXJhdGVkIGJhY2sgYnV0dG9uLiBQcmVwZW5kZWQgdG8gc3VibWVudSBsaXN0cyBhbmQgZGVsZXRlZCBvbiBgZGVzdHJveWAgbWV0aG9kLCAnanMtZHJpbGxkb3duLWJhY2snIGNsYXNzIHJlcXVpcmVkLiBSZW1vdmUgdGhlIGJhY2tzbGFzaCAoYFxcYCkgaWYgY29weSBhbmQgcGFzdGluZy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnPFxcbGk+PFxcYT5CYWNrPFxcL2E+PFxcL2xpPidcbiAgICovXG4gIGJhY2tCdXR0b246ICc8bGkgY2xhc3M9XCJqcy1kcmlsbGRvd24tYmFja1wiPjxhIHRhYmluZGV4PVwiMFwiPkJhY2s8L2E+PC9saT4nLFxuICAvKipcbiAgICogTWFya3VwIHVzZWQgdG8gd3JhcCBkcmlsbGRvd24gbWVudS4gVXNlIGEgY2xhc3MgbmFtZSBmb3IgaW5kZXBlbmRlbnQgc3R5bGluZzsgdGhlIEpTIGFwcGxpZWQgY2xhc3M6IGBpcy1kcmlsbGRvd25gIGlzIHJlcXVpcmVkLiBSZW1vdmUgdGhlIGJhY2tzbGFzaCAoYFxcYCkgaWYgY29weSBhbmQgcGFzdGluZy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnPFxcZGl2IGNsYXNzPVwiaXMtZHJpbGxkb3duXCI+PFxcL2Rpdj4nXG4gICAqL1xuICB3cmFwcGVyOiAnPGRpdj48L2Rpdj4nLFxuICAvKipcbiAgICogQWRkcyB0aGUgcGFyZW50IGxpbmsgdG8gdGhlIHN1Ym1lbnUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIHBhcmVudExpbms6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gcmV0dXJuIHRvIHJvb3QgbGlzdCBvbiBib2R5IGNsaWNrLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IGZhbHNlXG4gIC8vIGhvbGRPcGVuOiBmYWxzZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKERyaWxsZG93biwgJ0RyaWxsZG93bicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRHJvcGRvd24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyb3Bkb3duXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbmNsYXNzIERyb3Bkb3duIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBkcm9wZG93bi5cbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93bi5cbiAgICogICAgICAgIE9iamVjdCBzaG91bGQgYmUgb2YgdGhlIGRyb3Bkb3duIHBhbmVsLCByYXRoZXIgdGhhbiBpdHMgYW5jaG9yLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIERyb3Bkb3duLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRHJvcGRvd24nKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdEcm9wZG93bicsIHtcbiAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICdFU0NBUEUnOiAnY2xvc2UnLFxuICAgICAgJ1RBQic6ICd0YWJfZm9yd2FyZCcsXG4gICAgICAnU0hJRlRfVEFCJzogJ3RhYl9iYWNrd2FyZCdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luIGJ5IHNldHRpbmcvY2hlY2tpbmcgb3B0aW9ucyBhbmQgYXR0cmlidXRlcywgYWRkaW5nIGhlbHBlciB2YXJpYWJsZXMsIGFuZCBzYXZpbmcgdGhlIGFuY2hvci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgJGlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpO1xuXG4gICAgdGhpcy4kYW5jaG9yID0gJChgW2RhdGEtdG9nZ2xlPVwiJHskaWR9XCJdYCkubGVuZ3RoID8gJChgW2RhdGEtdG9nZ2xlPVwiJHskaWR9XCJdYCkgOiAkKGBbZGF0YS1vcGVuPVwiJHskaWR9XCJdYCk7XG4gICAgdGhpcy4kYW5jaG9yLmF0dHIoe1xuICAgICAgJ2FyaWEtY29udHJvbHMnOiAkaWQsXG4gICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgJ2RhdGEteWV0aS1ib3gnOiAkaWQsXG4gICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlXG5cbiAgICB9KTtcblxuICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzID0gdGhpcy5nZXRQb3NpdGlvbkNsYXNzKCk7XG4gICAgdGhpcy5jb3VudGVyID0gNDtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMgPSBbXTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgJ2RhdGEteWV0aS1ib3gnOiAkaWQsXG4gICAgICAnZGF0YS1yZXNpemUnOiAkaWQsXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogdGhpcy4kYW5jaG9yWzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2RkLWFuY2hvcicpXG4gICAgfSk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSBjdXJyZW50IG9yaWVudGF0aW9uIG9mIGRyb3Bkb3duIHBhbmUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBwb3NpdGlvbiAtIHN0cmluZyB2YWx1ZSBvZiBhIHBvc2l0aW9uIGNsYXNzLlxuICAgKi9cbiAgZ2V0UG9zaXRpb25DbGFzcygpIHtcbiAgICB2YXIgdmVydGljYWxQb3NpdGlvbiA9IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8odG9wfGxlZnR8cmlnaHR8Ym90dG9tKS9nKTtcbiAgICAgICAgdmVydGljYWxQb3NpdGlvbiA9IHZlcnRpY2FsUG9zaXRpb24gPyB2ZXJ0aWNhbFBvc2l0aW9uWzBdIDogJyc7XG4gICAgdmFyIGhvcml6b250YWxQb3NpdGlvbiA9IC9mbG9hdC0oXFxTKykvLmV4ZWModGhpcy4kYW5jaG9yWzBdLmNsYXNzTmFtZSk7XG4gICAgICAgIGhvcml6b250YWxQb3NpdGlvbiA9IGhvcml6b250YWxQb3NpdGlvbiA/IGhvcml6b250YWxQb3NpdGlvblsxXSA6ICcnO1xuICAgIHZhciBwb3NpdGlvbiA9IGhvcml6b250YWxQb3NpdGlvbiA/IGhvcml6b250YWxQb3NpdGlvbiArICcgJyArIHZlcnRpY2FsUG9zaXRpb24gOiB2ZXJ0aWNhbFBvc2l0aW9uO1xuXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkanVzdHMgdGhlIGRyb3Bkb3duIHBhbmVzIG9yaWVudGF0aW9uIGJ5IGFkZGluZy9yZW1vdmluZyBwb3NpdGlvbmluZyBjbGFzc2VzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBvc2l0aW9uIC0gcG9zaXRpb24gY2xhc3MgdG8gcmVtb3ZlLlxuICAgKi9cbiAgX3JlcG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMucHVzaChwb3NpdGlvbiA/IHBvc2l0aW9uIDogJ2JvdHRvbScpO1xuICAgIC8vZGVmYXVsdCwgdHJ5IHN3aXRjaGluZyB0byBvcHBvc2l0ZSBzaWRlXG4gICAgaWYoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCd0b3AnKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbilcbiAgICAgICAgICAuYWRkQ2xhc3MoJ3JpZ2h0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICdyaWdodCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH1cblxuICAgIC8vaWYgZGVmYXVsdCBjaGFuZ2UgZGlkbid0IHdvcmssIHRyeSBib3R0b20gb3IgbGVmdCBmaXJzdFxuICAgIGVsc2UgaWYoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICd0b3AnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2JvdHRvbScpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIC8vaWYgbm90aGluZyBjbGVhcmVkLCBzZXQgdG8gYm90dG9tXG4gICAgZWxzZXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1cbiAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IHRydWU7XG4gICAgdGhpcy5jb3VudGVyLS07XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcG9zaXRpb24gYW5kIG9yaWVudGF0aW9uIG9mIHRoZSBkcm9wZG93biBwYW5lLCBjaGVja3MgZm9yIGNvbGxpc2lvbnMuXG4gICAqIFJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiBpZiBhIGNvbGxpc2lvbiBpcyBkZXRlY3RlZCwgd2l0aCBhIG5ldyBwb3NpdGlvbiBjbGFzcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0UG9zaXRpb24oKSB7XG4gICAgaWYodGhpcy4kYW5jaG9yLmF0dHIoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ2ZhbHNlJyl7IHJldHVybiBmYWxzZTsgfVxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb25DbGFzcygpLFxuICAgICAgICAkZWxlRGltcyA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy4kZWxlbWVudCksXG4gICAgICAgICRhbmNob3JEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRhbmNob3IpLFxuICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGRpcmVjdGlvbiA9IChwb3NpdGlvbiA9PT0gJ2xlZnQnID8gJ2xlZnQnIDogKChwb3NpdGlvbiA9PT0gJ3JpZ2h0JykgPyAnbGVmdCcgOiAndG9wJykpLFxuICAgICAgICBwYXJhbSA9IChkaXJlY3Rpb24gPT09ICd0b3AnKSA/ICdoZWlnaHQnIDogJ3dpZHRoJyxcbiAgICAgICAgb2Zmc2V0ID0gKHBhcmFtID09PSAnaGVpZ2h0JykgPyB0aGlzLm9wdGlvbnMudk9mZnNldCA6IHRoaXMub3B0aW9ucy5oT2Zmc2V0O1xuXG5cblxuICAgIGlmKCgkZWxlRGltcy53aWR0aCA+PSAkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoKSB8fCAoIXRoaXMuY291bnRlciAmJiAhRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLiRlbGVtZW50KSkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLiRlbGVtZW50LCB0aGlzLiRhbmNob3IsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0LCB0cnVlKSkuY3NzKHtcbiAgICAgICAgJ3dpZHRoJzogJGVsZURpbXMud2luZG93RGltcy53aWR0aCAtICh0aGlzLm9wdGlvbnMuaE9mZnNldCAqIDIpLFxuICAgICAgICAnaGVpZ2h0JzogJ2F1dG8nXG4gICAgICB9KTtcbiAgICAgIHRoaXMuY2xhc3NDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJGFuY2hvciwgcG9zaXRpb24sIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCkpO1xuXG4gICAgd2hpbGUoIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy4kZWxlbWVudCwgZmFsc2UsIHRydWUpICYmIHRoaXMuY291bnRlcil7XG4gICAgICB0aGlzLl9yZXBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBlbGVtZW50IHV0aWxpemluZyB0aGUgdHJpZ2dlcnMgdXRpbGl0eSBsaWJyYXJ5LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fc2V0UG9zaXRpb24uYmluZCh0aGlzKVxuICAgIH0pO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmhvdmVyKXtcbiAgICAgIHRoaXMuJGFuY2hvci5vZmYoJ21vdXNlZW50ZXIuemYuZHJvcGRvd24gbW91c2VsZWF2ZS56Zi5kcm9wZG93bicpXG4gICAgICAub24oJ21vdXNlZW50ZXIuemYuZHJvcGRvd24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoJCgnYm9keVtkYXRhLXdoYXRpbnB1dD1cIm1vdXNlXCJdJykuaXMoJyonKSkge1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZGF0YSgnaG92ZXInLCB0cnVlKTtcbiAgICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmRhdGEoJ2hvdmVyJywgZmFsc2UpO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICB9KTtcbiAgICAgIGlmKHRoaXMub3B0aW9ucy5ob3ZlclBhbmUpe1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignbW91c2VlbnRlci56Zi5kcm9wZG93biBtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJylcbiAgICAgICAgICAgIC5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiRhbmNob3IuYWRkKHRoaXMuJGVsZW1lbnQpLm9uKCdrZXlkb3duLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oZSkge1xuXG4gICAgICB2YXIgJHRhcmdldCA9ICQodGhpcyksXG4gICAgICAgIHZpc2libGVGb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdEcm9wZG93bicsIHtcbiAgICAgICAgdGFiX2ZvcndhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyh2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpKSkgeyAvLyBsZWZ0IG1vZGFsIGRvd253YXJkcywgc2V0dGluZyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy50cmFwRm9jdXMpIHsgLy8gaWYgZm9jdXMgc2hhbGwgYmUgdHJhcHBlZFxuICAgICAgICAgICAgICB2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgZm9jdXMgaXMgbm90IHRyYXBwZWQsIGNsb3NlIGRyb3Bkb3duIG9uIGZvY3VzIG91dFxuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGFiX2JhY2t3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuJGVsZW1lbnQuZmluZCgnOmZvY3VzJykuaXModmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzLmVxKDApKSB8fCBfdGhpcy4kZWxlbWVudC5pcygnOmZvY3VzJykpIHsgLy8gbGVmdCBtb2RhbCB1cHdhcmRzLCBzZXR0aW5nIGZvY3VzIHRvIGxhc3QgZWxlbWVudFxuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMudHJhcEZvY3VzKSB7IC8vIGlmIGZvY3VzIHNoYWxsIGJlIHRyYXBwZWRcbiAgICAgICAgICAgICAgdmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzLmVxKC0xKS5mb2N1cygpO1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiBmb2N1cyBpcyBub3QgdHJhcHBlZCwgY2xvc2UgZHJvcGRvd24gb24gZm9jdXMgb3V0XG4gICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5pcyhfdGhpcy4kYW5jaG9yKSkge1xuICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAtMSkuZm9jdXMoKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBib2R5IHRvIGNsb3NlIGFueSBkcm9wZG93bnMgb24gYSBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQm9keUhhbmRsZXIoKSB7XG4gICAgIHZhciAkYm9keSA9ICQoZG9jdW1lbnQuYm9keSkubm90KHRoaXMuJGVsZW1lbnQpLFxuICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAkYm9keS5vZmYoJ2NsaWNrLnpmLmRyb3Bkb3duJylcbiAgICAgICAgICAub24oJ2NsaWNrLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBpZihfdGhpcy4kYW5jaG9yLmlzKGUudGFyZ2V0KSB8fCBfdGhpcy4kYW5jaG9yLmZpbmQoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5maW5kKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICRib2R5Lm9mZignY2xpY2suemYuZHJvcGRvd24nKTtcbiAgICAgICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgZHJvcGRvd24gcGFuZSwgYW5kIGZpcmVzIGEgYnViYmxpbmcgZXZlbnQgdG8gY2xvc2Ugb3RoZXIgZHJvcGRvd25zLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyb3Bkb3duI2Nsb3NlbWVcbiAgICogQGZpcmVzIERyb3Bkb3duI3Nob3dcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgLy8gdmFyIF90aGlzID0gdGhpcztcbiAgICAvKipcbiAgICAgKiBGaXJlcyB0byBjbG9zZSBvdGhlciBvcGVuIGRyb3Bkb3duc1xuICAgICAqIEBldmVudCBEcm9wZG93biNjbG9zZW1lXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZW1lLnpmLmRyb3Bkb3duJywgdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICB0aGlzLiRhbmNob3IuYWRkQ2xhc3MoJ2hvdmVyJylcbiAgICAgICAgLmF0dHIoeydhcmlhLWV4cGFuZGVkJzogdHJ1ZX0pO1xuICAgIC8vIHRoaXMuJGVsZW1lbnQvKi5zaG93KCkqLztcbiAgICB0aGlzLl9zZXRQb3NpdGlvbigpO1xuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLW9wZW4nKVxuICAgICAgICAuYXR0cih7J2FyaWEtaGlkZGVuJzogZmFsc2V9KTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5hdXRvRm9jdXMpe1xuICAgICAgdmFyICRmb2N1c2FibGUgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCk7XG4gICAgICBpZigkZm9jdXNhYmxlLmxlbmd0aCl7XG4gICAgICAgICRmb2N1c2FibGUuZXEoMCkuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKXsgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTsgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgb25jZSB0aGUgZHJvcGRvd24gaXMgdmlzaWJsZS5cbiAgICAgKiBAZXZlbnQgRHJvcGRvd24jc2hvd1xuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi5kcm9wZG93bicsIFt0aGlzLiRlbGVtZW50XSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvcGVuIGRyb3Bkb3duIHBhbmUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJvcGRvd24jaGlkZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKVxuICAgICAgICAuYXR0cih7J2FyaWEtaGlkZGVuJzogdHJ1ZX0pO1xuXG4gICAgdGhpcy4kYW5jaG9yLnJlbW92ZUNsYXNzKCdob3ZlcicpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXG4gICAgaWYodGhpcy5jbGFzc0NoYW5nZWQpe1xuICAgICAgdmFyIGN1clBvc2l0aW9uQ2xhc3MgPSB0aGlzLmdldFBvc2l0aW9uQ2xhc3MoKTtcbiAgICAgIGlmKGN1clBvc2l0aW9uQ2xhc3Mpe1xuICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGN1clBvc2l0aW9uQ2xhc3MpO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcylcbiAgICAgICAgICAvKi5oaWRlKCkqLy5jc3Moe2hlaWdodDogJycsIHdpZHRoOiAnJ30pO1xuICAgICAgdGhpcy5jbGFzc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY291bnRlciA9IDQ7XG4gICAgICB0aGlzLnVzZWRQb3NpdGlvbnMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLmRyb3Bkb3duJywgW3RoaXMuJGVsZW1lbnRdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBkcm9wZG93biBwYW5lJ3MgdmlzaWJpbGl0eS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKXtcbiAgICAgIGlmKHRoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicpKSByZXR1cm47XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGRyb3Bkb3duLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyJykuaGlkZSgpO1xuICAgIHRoaXMuJGFuY2hvci5vZmYoJy56Zi5kcm9wZG93bicpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbkRyb3Bkb3duLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgb3BlbmluZyBhIHN1Ym1lbnUgb24gaG92ZXIgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjUwXG4gICAqL1xuICBob3ZlckRlbGF5OiAyNTAsXG4gIC8qKlxuICAgKiBBbGxvdyBzdWJtZW51cyB0byBvcGVuIG9uIGhvdmVyIGV2ZW50c1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBob3ZlcjogZmFsc2UsXG4gIC8qKlxuICAgKiBEb24ndCBjbG9zZSBkcm9wZG93biB3aGVuIGhvdmVyaW5nIG92ZXIgZHJvcGRvd24gcGFuZVxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGhvdmVyUGFuZTogZmFsc2UsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIGJldHdlZW4gdGhlIGRyb3Bkb3duIHBhbmUgYW5kIHRoZSB0cmlnZ2VyaW5nIGVsZW1lbnQgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxXG4gICAqL1xuICB2T2Zmc2V0OiAxLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyBiZXR3ZWVuIHRoZSBkcm9wZG93biBwYW5lIGFuZCB0aGUgdHJpZ2dlcmluZyBlbGVtZW50IG9uIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgaE9mZnNldDogMSxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gYWRqdXN0IG9wZW4gcG9zaXRpb24uIEpTIHdpbGwgdGVzdCBhbmQgZmlsbCB0aGlzIGluLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b3AnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gdHJhcCBmb2N1cyB0byB0aGUgZHJvcGRvd24gcGFuZSBpZiBvcGVuZWQgd2l0aCBrZXlib2FyZCBjb21tYW5kcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgdHJhcEZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gc2V0IGZvY3VzIHRvIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCB3aXRoaW4gdGhlIHBhbmUsIHJlZ2FyZGxlc3Mgb2YgbWV0aG9kIG9mIG9wZW5pbmcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyBhIGNsaWNrIG9uIHRoZSBib2R5IHRvIGNsb3NlIHRoZSBkcm9wZG93bi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiBmYWxzZVxufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRHJvcGRvd24sICdEcm9wZG93bicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRHJvcGRvd25NZW51IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcm9wZG93bi1tZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gKi9cblxuY2xhc3MgRHJvcGRvd25NZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgRHJvcGRvd25NZW51LlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIERyb3Bkb3duTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93biBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIERyb3Bkb3duTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2Ryb3Bkb3duJyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRHJvcGRvd25NZW51Jyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignRHJvcGRvd25NZW51Jywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZSdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luLCBhbmQgY2FsbHMgX3ByZXBhcmVNZW51XG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHN1YnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50JykuY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51JykuYWRkQ2xhc3MoJ2ZpcnN0LXN1YicpO1xuXG4gICAgdGhpcy4kbWVudUl0ZW1zID0gdGhpcy4kZWxlbWVudC5maW5kKCdbcm9sZT1cIm1lbnVpdGVtXCJdJyk7XG4gICAgdGhpcy4kdGFicyA9IHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oJ1tyb2xlPVwibWVudWl0ZW1cIl0nKTtcbiAgICB0aGlzLiR0YWJzLmZpbmQoJ3VsLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudmVydGljYWxDbGFzcyk7XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMucmlnaHRDbGFzcykgfHwgdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ3JpZ2h0JyB8fCBGb3VuZGF0aW9uLnJ0bCgpIHx8IHRoaXMuJGVsZW1lbnQucGFyZW50cygnLnRvcC1iYXItcmlnaHQnKS5pcygnKicpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID0gJ3JpZ2h0JztcbiAgICAgIHN1YnMuYWRkQ2xhc3MoJ29wZW5zLWxlZnQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtcmlnaHQnKTtcbiAgICB9XG4gICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH07XG5cbiAgX2lzVmVydGljYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHRhYnMuY3NzKCdkaXNwbGF5JykgPT09ICdibG9jayc7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gZWxlbWVudHMgd2l0aGluIHRoZSBtZW51XG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBoYXNUb3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCAodHlwZW9mIHdpbmRvdy5vbnRvdWNoc3RhcnQgIT09ICd1bmRlZmluZWQnKSxcbiAgICAgICAgcGFyQ2xhc3MgPSAnaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnO1xuXG4gICAgLy8gdXNlZCBmb3Igb25DbGljayBhbmQgaW4gdGhlIGtleWJvYXJkIGhhbmRsZXJzXG4gICAgdmFyIGhhbmRsZUNsaWNrRm4gPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgJGVsZW0gPSAkKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgYC4ke3BhckNsYXNzfWApLFxuICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKSxcbiAgICAgICAgICBoYXNDbGlja2VkID0gJGVsZW0uYXR0cignZGF0YS1pcy1jbGljaycpID09PSAndHJ1ZScsXG4gICAgICAgICAgJHN1YiA9ICRlbGVtLmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudScpO1xuXG4gICAgICBpZiAoaGFzU3ViKSB7XG4gICAgICAgIGlmIChoYXNDbGlja2VkKSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmNsb3NlT25DbGljayB8fCAoIV90aGlzLm9wdGlvbnMuY2xpY2tPcGVuICYmICFoYXNUb3VjaCkgfHwgKF90aGlzLm9wdGlvbnMuZm9yY2VGb2xsb3cgJiYgaGFzVG91Y2gpKSB7IHJldHVybjsgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgX3RoaXMuX3Nob3coJHN1Yik7XG4gICAgICAgICAgJGVsZW0uYWRkKCRlbGVtLnBhcmVudHNVbnRpbChfdGhpcy4kZWxlbWVudCwgYC4ke3BhckNsYXNzfWApKS5hdHRyKCdkYXRhLWlzLWNsaWNrJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKF90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrSW5zaWRlKXtcbiAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3BlbiB8fCBoYXNUb3VjaCkge1xuICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdjbGljay56Zi5kcm9wZG93bm1lbnUgdG91Y2hzdGFydC56Zi5kcm9wZG93bm1lbnUnLCBoYW5kbGVDbGlja0ZuKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIpIHtcbiAgICAgIHRoaXMuJG1lbnVJdGVtcy5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciAkZWxlbSA9ICQodGhpcyksXG4gICAgICAgICAgICBoYXNTdWIgPSAkZWxlbS5oYXNDbGFzcyhwYXJDbGFzcyk7XG5cbiAgICAgICAgaWYgKGhhc1N1Yikge1xuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5kZWxheSk7XG4gICAgICAgICAgX3RoaXMuZGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW0uY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51JykpO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKTtcbiAgICAgICAgaWYgKGhhc1N1YiAmJiBfdGhpcy5vcHRpb25zLmF1dG9jbG9zZSkge1xuICAgICAgICAgIGlmICgkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyAmJiBfdGhpcy5vcHRpb25zLmNsaWNrT3BlbikgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5kZWxheSk7XG4gICAgICAgICAgX3RoaXMuZGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuY2xvc2luZ1RpbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdrZXlkb3duLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkZWxlbWVudCA9ICQoZS50YXJnZXQpLnBhcmVudHNVbnRpbCgndWwnLCAnW3JvbGU9XCJtZW51aXRlbVwiXScpLFxuICAgICAgICAgIGlzVGFiID0gX3RoaXMuJHRhYnMuaW5kZXgoJGVsZW1lbnQpID4gLTEsXG4gICAgICAgICAgJGVsZW1lbnRzID0gaXNUYWIgPyBfdGhpcy4kdGFicyA6ICRlbGVtZW50LnNpYmxpbmdzKCdsaScpLmFkZCgkZWxlbWVudCksXG4gICAgICAgICAgJHByZXZFbGVtZW50LFxuICAgICAgICAgICRuZXh0RWxlbWVudDtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoaS0xKTtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoaSsxKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbmV4dFNpYmxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCEkZWxlbWVudC5pcygnOmxhc3QtY2hpbGQnKSkge1xuICAgICAgICAgICRuZXh0RWxlbWVudC5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9LCBwcmV2U2libGluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkcHJldkVsZW1lbnQuY2hpbGRyZW4oJ2E6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBvcGVuU3ViID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciAkc3ViID0gJGVsZW1lbnQuY2hpbGRyZW4oJ3VsLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKTtcbiAgICAgICAgaWYgKCRzdWIubGVuZ3RoKSB7XG4gICAgICAgICAgX3RoaXMuX3Nob3coJHN1Yik7XG4gICAgICAgICAgJGVsZW1lbnQuZmluZCgnbGkgPiBhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSB7IHJldHVybjsgfVxuICAgICAgfSwgY2xvc2VTdWIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9pZiAoJGVsZW1lbnQuaXMoJzpmaXJzdC1jaGlsZCcpKSB7XG4gICAgICAgIHZhciBjbG9zZSA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJyk7XG4gICAgICAgIGNsb3NlLmNoaWxkcmVuKCdhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgX3RoaXMuX2hpZGUoY2xvc2UpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vfVxuICAgICAgfTtcbiAgICAgIHZhciBmdW5jdGlvbnMgPSB7XG4gICAgICAgIG9wZW46IG9wZW5TdWIsXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5faGlkZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgX3RoaXMuJG1lbnVJdGVtcy5maW5kKCdhOmZpcnN0JykuZm9jdXMoKTsgLy8gZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKGlzVGFiKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNWZXJ0aWNhbCgpKSB7IC8vIHZlcnRpY2FsIG1lbnVcbiAgICAgICAgICBpZiAoRm91bmRhdGlvbi5ydGwoKSkgeyAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHVwOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgbmV4dDogY2xvc2VTdWIsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBvcGVuU3ViXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgeyAvLyBsZWZ0IGFsaWduZWRcbiAgICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBuZXh0OiBvcGVuU3ViLFxuICAgICAgICAgICAgICBwcmV2aW91czogY2xvc2VTdWJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gaG9yaXpvbnRhbCBtZW51XG4gICAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIHsgLy8gcmlnaHQgYWxpZ25lZFxuICAgICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIG5leHQ6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBwcmV2aW91czogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIGRvd246IG9wZW5TdWIsXG4gICAgICAgICAgICAgIHVwOiBjbG9zZVN1YlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gbGVmdCBhbGlnbmVkXG4gICAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgbmV4dDogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgZG93bjogb3BlblN1YixcbiAgICAgICAgICAgICAgdXA6IGNsb3NlU3ViXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7IC8vIG5vdCB0YWJzIC0+IG9uZSBzdWJcbiAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIHsgLy8gcmlnaHQgYWxpZ25lZFxuICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgbmV4dDogY2xvc2VTdWIsXG4gICAgICAgICAgICBwcmV2aW91czogb3BlblN1YixcbiAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7IC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgbmV4dDogb3BlblN1YixcbiAgICAgICAgICAgIHByZXZpb3VzOiBjbG9zZVN1YixcbiAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdEcm9wZG93bk1lbnUnLCBmdW5jdGlvbnMpO1xuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBib2R5IHRvIGNsb3NlIGFueSBkcm9wZG93bnMgb24gYSBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQm9keUhhbmRsZXIoKSB7XG4gICAgdmFyICRib2R5ID0gJChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICRib2R5Lm9mZignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51JylcbiAgICAgICAgIC5vbignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICB2YXIgJGxpbmsgPSBfdGhpcy4kZWxlbWVudC5maW5kKGUudGFyZ2V0KTtcbiAgICAgICAgICAgaWYgKCRsaW5rLmxlbmd0aCkgeyByZXR1cm47IH1cblxuICAgICAgICAgICBfdGhpcy5faGlkZSgpO1xuICAgICAgICAgICAkYm9keS5vZmYoJ21vdXNldXAuemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudScpO1xuICAgICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgYSBkcm9wZG93biBwYW5lLCBhbmQgY2hlY2tzIGZvciBjb2xsaXNpb25zIGZpcnN0LlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHN1YiAtIHVsIGVsZW1lbnQgdGhhdCBpcyBhIHN1Ym1lbnUgdG8gc2hvd1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQGZpcmVzIERyb3Bkb3duTWVudSNzaG93XG4gICAqL1xuICBfc2hvdygkc3ViKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMuJHRhYnMuaW5kZXgodGhpcy4kdGFicy5maWx0ZXIoZnVuY3Rpb24oaSwgZWwpIHtcbiAgICAgIHJldHVybiAkKGVsKS5maW5kKCRzdWIpLmxlbmd0aCA+IDA7XG4gICAgfSkpO1xuICAgIHZhciAkc2licyA9ICRzdWIucGFyZW50KCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLnNpYmxpbmdzKCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpO1xuICAgIHRoaXMuX2hpZGUoJHNpYnMsIGlkeCk7XG4gICAgJHN1Yi5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJykuYWRkQ2xhc3MoJ2pzLWRyb3Bkb3duLWFjdGl2ZScpLmF0dHIoeydhcmlhLWhpZGRlbic6IGZhbHNlfSlcbiAgICAgICAgLnBhcmVudCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5hZGRDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgICAgLmF0dHIoeydhcmlhLWV4cGFuZGVkJzogdHJ1ZX0pO1xuICAgIHZhciBjbGVhciA9IEZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UoJHN1YiwgbnVsbCwgdHJ1ZSk7XG4gICAgaWYgKCFjbGVhcikge1xuICAgICAgdmFyIG9sZENsYXNzID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2xlZnQnID8gJy1yaWdodCcgOiAnLWxlZnQnLFxuICAgICAgICAgICRwYXJlbnRMaSA9ICRzdWIucGFyZW50KCcuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKTtcbiAgICAgICRwYXJlbnRMaS5yZW1vdmVDbGFzcyhgb3BlbnMke29sZENsYXNzfWApLmFkZENsYXNzKGBvcGVucy0ke3RoaXMub3B0aW9ucy5hbGlnbm1lbnR9YCk7XG4gICAgICBjbGVhciA9IEZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UoJHN1YiwgbnVsbCwgdHJ1ZSk7XG4gICAgICBpZiAoIWNsZWFyKSB7XG4gICAgICAgICRwYXJlbnRMaS5yZW1vdmVDbGFzcyhgb3BlbnMtJHt0aGlzLm9wdGlvbnMuYWxpZ25tZW50fWApLmFkZENsYXNzKCdvcGVucy1pbm5lcicpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgJHN1Yi5jc3MoJ3Zpc2liaWxpdHknLCAnJyk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHsgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTsgfVxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIG5ldyBkcm9wZG93biBwYW5lIGlzIHZpc2libGUuXG4gICAgICogQGV2ZW50IERyb3Bkb3duTWVudSNzaG93XG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzaG93LnpmLmRyb3Bkb3dubWVudScsIFskc3ViXSk7XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgYSBzaW5nbGUsIGN1cnJlbnRseSBvcGVuIGRyb3Bkb3duIHBhbmUsIGlmIHBhc3NlZCBhIHBhcmFtZXRlciwgb3RoZXJ3aXNlLCBoaWRlcyBldmVyeXRoaW5nLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBoaWRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZHggLSBpbmRleCBvZiB0aGUgJHRhYnMgY29sbGVjdGlvbiB0byBoaWRlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGlkZSgkZWxlbSwgaWR4KSB7XG4gICAgdmFyICR0b0Nsb3NlO1xuICAgIGlmICgkZWxlbSAmJiAkZWxlbS5sZW5ndGgpIHtcbiAgICAgICR0b0Nsb3NlID0gJGVsZW07XG4gICAgfSBlbHNlIGlmIChpZHggIT09IHVuZGVmaW5lZCkge1xuICAgICAgJHRvQ2xvc2UgPSB0aGlzLiR0YWJzLm5vdChmdW5jdGlvbihpLCBlbCkge1xuICAgICAgICByZXR1cm4gaSA9PT0gaWR4O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJHRvQ2xvc2UgPSB0aGlzLiRlbGVtZW50O1xuICAgIH1cbiAgICB2YXIgc29tZXRoaW5nVG9DbG9zZSA9ICR0b0Nsb3NlLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSB8fCAkdG9DbG9zZS5maW5kKCcuaXMtYWN0aXZlJykubGVuZ3RoID4gMDtcblxuICAgIGlmIChzb21ldGhpbmdUb0Nsb3NlKSB7XG4gICAgICAkdG9DbG9zZS5maW5kKCdsaS5pcy1hY3RpdmUnKS5hZGQoJHRvQ2xvc2UpLmF0dHIoe1xuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlLFxuICAgICAgICAnZGF0YS1pcy1jbGljayc6IGZhbHNlXG4gICAgICB9KS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAgICR0b0Nsb3NlLmZpbmQoJ3VsLmpzLWRyb3Bkb3duLWFjdGl2ZScpLmF0dHIoe1xuICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlXG4gICAgICB9KS5yZW1vdmVDbGFzcygnanMtZHJvcGRvd24tYWN0aXZlJyk7XG5cbiAgICAgIGlmICh0aGlzLmNoYW5nZWQgfHwgJHRvQ2xvc2UuZmluZCgnb3BlbnMtaW5uZXInKS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG9sZENsYXNzID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgJHRvQ2xvc2UuZmluZCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5hZGQoJHRvQ2xvc2UpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGBvcGVucy1pbm5lciBvcGVucy0ke3RoaXMub3B0aW9ucy5hbGlnbm1lbnR9YClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYG9wZW5zLSR7b2xkQ2xhc3N9YCk7XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBvcGVuIG1lbnVzIGFyZSBjbG9zZWQuXG4gICAgICAgKiBAZXZlbnQgRHJvcGRvd25NZW51I2hpZGVcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLmRyb3Bkb3dubWVudScsIFskdG9DbG9zZV0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kbWVudUl0ZW1zLm9mZignLnpmLmRyb3Bkb3dubWVudScpLnJlbW92ZUF0dHIoJ2RhdGEtaXMtY2xpY2snKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2lzLXJpZ2h0LWFycm93IGlzLWxlZnQtYXJyb3cgaXMtZG93bi1hcnJvdyBvcGVucy1yaWdodCBvcGVucy1sZWZ0IG9wZW5zLWlubmVyJyk7XG4gICAgJChkb2N1bWVudC5ib2R5KS5vZmYoJy56Zi5kcm9wZG93bm1lbnUnKTtcbiAgICBGb3VuZGF0aW9uLk5lc3QuQnVybih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuRHJvcGRvd25NZW51LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRGlzYWxsb3dzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgc3VibWVudXNcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IGEgc3VibWVudSB0byBhdXRvbWF0aWNhbGx5IGNsb3NlIG9uIGEgbW91c2VsZWF2ZSBldmVudCwgaWYgbm90IGNsaWNrZWQgb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBhdXRvY2xvc2U6IHRydWUsXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBkZWxheSBvcGVuaW5nIGEgc3VibWVudSBvbiBob3ZlciBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSA1MFxuICAgKi9cbiAgaG92ZXJEZWxheTogNTAsXG4gIC8qKlxuICAgKiBBbGxvdyBhIHN1Ym1lbnUgdG8gb3Blbi9yZW1haW4gb3BlbiBvbiBwYXJlbnQgY2xpY2sgZXZlbnQuIEFsbG93cyBjdXJzb3IgdG8gbW92ZSBhd2F5IGZyb20gbWVudS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbGlja09wZW46IGZhbHNlLFxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgY2xvc2luZyBhIHN1Ym1lbnUgb24gYSBtb3VzZWxlYXZlIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwMFxuICAgKi9cblxuICBjbG9zaW5nVGltZTogNTAwLFxuICAvKipcbiAgICogUG9zaXRpb24gb2YgdGhlIG1lbnUgcmVsYXRpdmUgdG8gd2hhdCBkaXJlY3Rpb24gdGhlIHN1Ym1lbnVzIHNob3VsZCBvcGVuLiBIYW5kbGVkIGJ5IEpTLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdsZWZ0J1xuICAgKi9cbiAgYWxpZ25tZW50OiAnbGVmdCcsXG4gIC8qKlxuICAgKiBBbGxvdyBjbGlja3Mgb24gdGhlIGJvZHkgdG8gY2xvc2UgYW55IG9wZW4gc3VibWVudXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuICAvKipcbiAgICogQWxsb3cgY2xpY2tzIG9uIGxlYWYgYW5jaG9yIGxpbmtzIHRvIGNsb3NlIGFueSBvcGVuIHN1Ym1lbnVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsb3NlT25DbGlja0luc2lkZTogdHJ1ZSxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdmVydGljYWwgb3JpZW50ZWQgbWVudXMsIEZvdW5kYXRpb24gZGVmYXVsdCBpcyBgdmVydGljYWxgLiBVcGRhdGUgdGhpcyBpZiB1c2luZyB5b3VyIG93biBjbGFzcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndmVydGljYWwnXG4gICAqL1xuICB2ZXJ0aWNhbENsYXNzOiAndmVydGljYWwnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byByaWdodC1zaWRlIG9yaWVudGVkIG1lbnVzLCBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgYGFsaWduLXJpZ2h0YC4gVXBkYXRlIHRoaXMgaWYgdXNpbmcgeW91ciBvd24gY2xhc3MuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2FsaWduLXJpZ2h0J1xuICAgKi9cbiAgcmlnaHRDbGFzczogJ2FsaWduLXJpZ2h0JyxcbiAgLyoqXG4gICAqIEJvb2xlYW4gdG8gZm9yY2Ugb3ZlcmlkZSB0aGUgY2xpY2tpbmcgb2YgbGlua3MgdG8gcGVyZm9ybSBkZWZhdWx0IGFjdGlvbiwgb24gc2Vjb25kIHRvdWNoIGV2ZW50IGZvciBtb2JpbGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGZvcmNlRm9sbG93OiB0cnVlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRHJvcGRvd25NZW51LCAnRHJvcGRvd25NZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBFcXVhbGl6ZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmVxdWFsaXplclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRpbWVyQW5kSW1hZ2VMb2FkZXIgaWYgZXF1YWxpemVyIGNvbnRhaW5zIGltYWdlc1xuICovXG5cbmNsYXNzIEVxdWFsaXplciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEVxdWFsaXplci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKXtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgID0gJC5leHRlbmQoe30sIEVxdWFsaXplci5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRXF1YWxpemVyJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEVxdWFsaXplciBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgZXF1YWxpemVyIGZ1bmN0aW9uaW5nIG9uIGxvYWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgZXFJZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1lcXVhbGl6ZXInKSB8fCAnJztcbiAgICB2YXIgJHdhdGNoZWQgPSB0aGlzLiRlbGVtZW50LmZpbmQoYFtkYXRhLWVxdWFsaXplci13YXRjaD1cIiR7ZXFJZH1cIl1gKTtcblxuICAgIHRoaXMuJHdhdGNoZWQgPSAkd2F0Y2hlZC5sZW5ndGggPyAkd2F0Y2hlZCA6IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyLXdhdGNoXScpO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1yZXNpemUnLCAoZXFJZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdlcScpKSk7XG5cbiAgICB0aGlzLmhhc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyXScpLmxlbmd0aCA+IDA7XG4gICAgdGhpcy5pc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQucGFyZW50c1VudGlsKGRvY3VtZW50LmJvZHksICdbZGF0YS1lcXVhbGl6ZXJdJykubGVuZ3RoID4gMDtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICB0aGlzLl9iaW5kSGFuZGxlciA9IHtcbiAgICAgIG9uUmVzaXplTWVCb3VuZDogdGhpcy5fb25SZXNpemVNZS5iaW5kKHRoaXMpLFxuICAgICAgb25Qb3N0RXF1YWxpemVkQm91bmQ6IHRoaXMuX29uUG9zdEVxdWFsaXplZC5iaW5kKHRoaXMpXG4gICAgfTtcblxuICAgIHZhciBpbWdzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKTtcbiAgICB2YXIgdG9vU21hbGw7XG4gICAgaWYodGhpcy5vcHRpb25zLmVxdWFsaXplT24pe1xuICAgICAgdG9vU21hbGwgPSB0aGlzLl9jaGVja01RKCk7XG4gICAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX2NoZWNrTVEuYmluZCh0aGlzKSk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG4gICAgaWYoKHRvb1NtYWxsICE9PSB1bmRlZmluZWQgJiYgdG9vU21hbGwgPT09IGZhbHNlKSB8fCB0b29TbWFsbCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIGlmKGltZ3MubGVuZ3RoKXtcbiAgICAgICAgRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZChpbWdzLCB0aGlzLl9yZWZsb3cuYmluZCh0aGlzKSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5fcmVmbG93KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGlmIHRoZSBicmVha3BvaW50IGlzIHRvbyBzbWFsbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXVzZUV2ZW50cygpIHtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZih7XG4gICAgICAnLnpmLmVxdWFsaXplcic6IHRoaXMuX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kLFxuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmRcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBoYW5kbGUgJGVsZW1lbnRzIHJlc2l6ZW1lLnpmLnRyaWdnZXIsIHdpdGggYm91bmQgdGhpcyBvbiBfYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25SZXNpemVNZShlKSB7XG4gICAgdGhpcy5fcmVmbG93KCk7XG4gIH1cblxuICAvKipcbiAgICogZnVuY3Rpb24gdG8gaGFuZGxlICRlbGVtZW50cyBwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplciwgd2l0aCBib3VuZCB0aGlzIG9uIF9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUG9zdEVxdWFsaXplZChlKSB7XG4gICAgaWYoZS50YXJnZXQgIT09IHRoaXMuJGVsZW1lbnRbMF0peyB0aGlzLl9yZWZsb3coKTsgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgRXF1YWxpemVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgaWYodGhpcy5oYXNOZXN0ZWQpe1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInLCB0aGlzLl9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZCk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kKTtcbiAgICB9XG4gICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgYnJlYWtwb2ludCB0byB0aGUgbWluaW11bSByZXF1aXJlZCBzaXplLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrTVEoKSB7XG4gICAgdmFyIHRvb1NtYWxsID0gIUZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5lcXVhbGl6ZU9uKTtcbiAgICBpZih0b29TbWFsbCl7XG4gICAgICBpZih0aGlzLmlzT24pe1xuICAgICAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgICAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgIGlmKCF0aGlzLmlzT24pe1xuICAgICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvb1NtYWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgbm9vcCB2ZXJzaW9uIGZvciB0aGUgcGx1Z2luXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfa2lsbHN3aXRjaCgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgRXF1YWxpemVyIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICBpZighdGhpcy5vcHRpb25zLmVxdWFsaXplT25TdGFjayl7XG4gICAgICBpZih0aGlzLl9pc1N0YWNrZWQoKSl7XG4gICAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZXF1YWxpemVCeVJvdykge1xuICAgICAgdGhpcy5nZXRIZWlnaHRzQnlSb3codGhpcy5hcHBseUhlaWdodEJ5Um93LmJpbmQodGhpcykpO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5nZXRIZWlnaHRzKHRoaXMuYXBwbHlIZWlnaHQuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hbnVhbGx5IGRldGVybWluZXMgaWYgdGhlIGZpcnN0IDIgZWxlbWVudHMgYXJlICpOT1QqIHN0YWNrZWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaXNTdGFja2VkKCkge1xuICAgIHJldHVybiB0aGlzLiR3YXRjaGVkWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAhPT0gdGhpcy4kd2F0Y2hlZFsxXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgdGhlIG91dGVyIGhlaWdodHMgb2YgY2hpbGRyZW4gY29udGFpbmVkIHdpdGhpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IGFuZCByZXR1cm5zIHRoZW0gaW4gYW4gYXJyYXlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBBIG5vbi1vcHRpb25hbCBjYWxsYmFjayB0byByZXR1cm4gdGhlIGhlaWdodHMgYXJyYXkgdG8uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gaGVpZ2h0cyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXJcbiAgICovXG4gIGdldEhlaWdodHMoY2IpIHtcbiAgICB2YXIgaGVpZ2h0cyA9IFtdO1xuICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IHRoaXMuJHdhdGNoZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgICAgdGhpcy4kd2F0Y2hlZFtpXS5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICBoZWlnaHRzLnB1c2godGhpcy4kd2F0Y2hlZFtpXS5vZmZzZXRIZWlnaHQpO1xuICAgIH1cbiAgICBjYihoZWlnaHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgb3V0ZXIgaGVpZ2h0cyBvZiBjaGlsZHJlbiBjb250YWluZWQgd2l0aGluIGFuIEVxdWFsaXplciBwYXJlbnQgYW5kIHJldHVybnMgdGhlbSBpbiBhbiBhcnJheVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIEEgbm9uLW9wdGlvbmFsIGNhbGxiYWNrIHRvIHJldHVybiB0aGUgaGVpZ2h0cyBhcnJheSB0by5cbiAgICogQHJldHVybnMge0FycmF5fSBncm91cHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyIGdyb3VwZWQgYnkgcm93IHdpdGggZWxlbWVudCxoZWlnaHQgYW5kIG1heCBhcyBsYXN0IGNoaWxkXG4gICAqL1xuICBnZXRIZWlnaHRzQnlSb3coY2IpIHtcbiAgICB2YXIgbGFzdEVsVG9wT2Zmc2V0ID0gKHRoaXMuJHdhdGNoZWQubGVuZ3RoID8gdGhpcy4kd2F0Y2hlZC5maXJzdCgpLm9mZnNldCgpLnRvcCA6IDApLFxuICAgICAgICBncm91cHMgPSBbXSxcbiAgICAgICAgZ3JvdXAgPSAwO1xuICAgIC8vZ3JvdXAgYnkgUm93XG4gICAgZ3JvdXBzW2dyb3VwXSA9IFtdO1xuICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IHRoaXMuJHdhdGNoZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgICAgdGhpcy4kd2F0Y2hlZFtpXS5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICAvL21heWJlIGNvdWxkIHVzZSB0aGlzLiR3YXRjaGVkW2ldLm9mZnNldFRvcFxuICAgICAgdmFyIGVsT2Zmc2V0VG9wID0gJCh0aGlzLiR3YXRjaGVkW2ldKS5vZmZzZXQoKS50b3A7XG4gICAgICBpZiAoZWxPZmZzZXRUb3AhPWxhc3RFbFRvcE9mZnNldCkge1xuICAgICAgICBncm91cCsrO1xuICAgICAgICBncm91cHNbZ3JvdXBdID0gW107XG4gICAgICAgIGxhc3RFbFRvcE9mZnNldD1lbE9mZnNldFRvcDtcbiAgICAgIH1cbiAgICAgIGdyb3Vwc1tncm91cF0ucHVzaChbdGhpcy4kd2F0Y2hlZFtpXSx0aGlzLiR3YXRjaGVkW2ldLm9mZnNldEhlaWdodF0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGogPSAwLCBsbiA9IGdyb3Vwcy5sZW5ndGg7IGogPCBsbjsgaisrKSB7XG4gICAgICB2YXIgaGVpZ2h0cyA9ICQoZ3JvdXBzW2pdKS5tYXAoZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbMV07IH0pLmdldCgpO1xuICAgICAgdmFyIG1heCAgICAgICAgID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG4gICAgICBncm91cHNbal0ucHVzaChtYXgpO1xuICAgIH1cbiAgICBjYihncm91cHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIENTUyBoZWlnaHQgcHJvcGVydHkgb2YgZWFjaCBjaGlsZCBpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IHRvIG1hdGNoIHRoZSB0YWxsZXN0XG4gICAqIEBwYXJhbSB7YXJyYXl9IGhlaWdodHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgKi9cbiAgYXBwbHlIZWlnaHQoaGVpZ2h0cykge1xuICAgIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBiZWZvcmUgdGhlIGhlaWdodHMgYXJlIGFwcGxpZWRcbiAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3ByZWVxdWFsaXplZFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuXG4gICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsIG1heCk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICogQGV2ZW50IEVxdWFsaXplciNwb3N0ZXF1YWxpemVkXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBDU1MgaGVpZ2h0IHByb3BlcnR5IG9mIGVhY2ggY2hpbGQgaW4gYW4gRXF1YWxpemVyIHBhcmVudCB0byBtYXRjaCB0aGUgdGFsbGVzdCBieSByb3dcbiAgICogQHBhcmFtIHthcnJheX0gZ3JvdXBzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lciBncm91cGVkIGJ5IHJvdyB3aXRoIGVsZW1lbnQsaGVpZ2h0IGFuZCBtYXggYXMgbGFzdCBjaGlsZFxuICAgKiBAZmlyZXMgRXF1YWxpemVyI3ByZWVxdWFsaXplZFxuICAgKiBAZmlyZXMgRXF1YWxpemVyI3ByZWVxdWFsaXplZFJvd1xuICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRSb3dcbiAgICogQGZpcmVzIEVxdWFsaXplciNwb3N0ZXF1YWxpemVkXG4gICAqL1xuICBhcHBseUhlaWdodEJ5Um93KGdyb3Vwcykge1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBhcmUgYXBwbGllZFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBncm91cHMubGVuZ3RoOyBpIDwgbGVuIDsgaSsrKSB7XG4gICAgICB2YXIgZ3JvdXBzSUxlbmd0aCA9IGdyb3Vwc1tpXS5sZW5ndGgsXG4gICAgICAgICAgbWF4ID0gZ3JvdXBzW2ldW2dyb3Vwc0lMZW5ndGggLSAxXTtcbiAgICAgIGlmIChncm91cHNJTGVuZ3RoPD0yKSB7XG4gICAgICAgICQoZ3JvdXBzW2ldWzBdWzBdKS5jc3MoeydoZWlnaHQnOidhdXRvJ30pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBwZXIgcm93IGFyZSBhcHBsaWVkXG4gICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwcmVlcXVhbGl6ZWRSb3dcbiAgICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkcm93LnpmLmVxdWFsaXplcicpO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGxlbkogPSAoZ3JvdXBzSUxlbmd0aC0xKTsgaiA8IGxlbkogOyBqKyspIHtcbiAgICAgICAgJChncm91cHNbaV1bal1bMF0pLmNzcyh7J2hlaWdodCc6bWF4fSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIHBlciByb3cgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRSb3dcbiAgICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZHJvdy56Zi5lcXVhbGl6ZXInKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgaGVpZ2h0cyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAqL1xuICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgRXF1YWxpemVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcGF1c2VFdmVudHMoKTtcbiAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5FcXVhbGl6ZXIuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBFbmFibGUgaGVpZ2h0IGVxdWFsaXphdGlvbiB3aGVuIHN0YWNrZWQgb24gc21hbGxlciBzY3JlZW5zLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGVxdWFsaXplT25TdGFjazogZmFsc2UsXG4gIC8qKlxuICAgKiBFbmFibGUgaGVpZ2h0IGVxdWFsaXphdGlvbiByb3cgYnkgcm93LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBlcXVhbGl6ZUJ5Um93OiBmYWxzZSxcbiAgLyoqXG4gICAqIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIG1pbmltdW0gYnJlYWtwb2ludCBzaXplIHRoZSBwbHVnaW4gc2hvdWxkIGVxdWFsaXplIGhlaWdodHMgb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ21lZGl1bSdcbiAgICovXG4gIGVxdWFsaXplT246ICcnXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRXF1YWxpemVyLCAnRXF1YWxpemVyJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBJbnRlcmNoYW5nZSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uaW50ZXJjaGFuZ2VcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyXG4gKi9cblxuY2xhc3MgSW50ZXJjaGFuZ2Uge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBJbnRlcmNoYW5nZS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBJbnRlcmNoYW5nZSNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgSW50ZXJjaGFuZ2UuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIHRoaXMucnVsZXMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRQYXRoID0gJyc7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdJbnRlcmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBJbnRlcmNoYW5nZSBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgaW50ZXJjaGFuZ2UgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLl9hZGRCcmVha3BvaW50cygpO1xuICAgIHRoaXMuX2dlbmVyYXRlUnVsZXMoKTtcbiAgICB0aGlzLl9yZWZsb3coKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEludGVyY2hhbmdlLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuemYuaW50ZXJjaGFuZ2UnLCBGb3VuZGF0aW9uLnV0aWwudGhyb3R0bGUodGhpcy5fcmVmbG93LmJpbmQodGhpcyksIDUwKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgSW50ZXJjaGFuZ2UgdXBvbiBET00gY2hhbmdlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICB2YXIgbWF0Y2g7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlLCBidXQgb25seSBzYXZlIHRoZSBsYXN0IG1hdGNoXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICBpZih0aGlzLnJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlc1tpXTtcblxuICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocnVsZS5xdWVyeSkubWF0Y2hlcykge1xuICAgICAgICAgIG1hdGNoID0gcnVsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgdGhpcy5yZXBsYWNlKG1hdGNoLnBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBGb3VuZGF0aW9uIGJyZWFrcG9pbnRzIGFuZCBhZGRzIHRoZW0gdG8gdGhlIEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFUyBvYmplY3QuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZEJyZWFrcG9pbnRzKCkge1xuICAgIGZvciAodmFyIGkgaW4gRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LnF1ZXJpZXMpIHtcbiAgICAgIGlmIChGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICB2YXIgcXVlcnkgPSBGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllc1tpXTtcbiAgICAgICAgSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5Lm5hbWVdID0gcXVlcnkudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgSW50ZXJjaGFuZ2UgZWxlbWVudCBmb3IgdGhlIHByb3ZpZGVkIG1lZGlhIHF1ZXJ5ICsgY29udGVudCBwYWlyaW5nc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRoYXQgaXMgYW4gSW50ZXJjaGFuZ2UgaW5zdGFuY2VcbiAgICogQHJldHVybnMge0FycmF5fSBzY2VuYXJpb3MgLSBBcnJheSBvZiBvYmplY3RzIHRoYXQgaGF2ZSAnbXEnIGFuZCAncGF0aCcga2V5cyB3aXRoIGNvcnJlc3BvbmRpbmcga2V5c1xuICAgKi9cbiAgX2dlbmVyYXRlUnVsZXMoZWxlbWVudCkge1xuICAgIHZhciBydWxlc0xpc3QgPSBbXTtcbiAgICB2YXIgcnVsZXM7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnJ1bGVzKSB7XG4gICAgICBydWxlcyA9IHRoaXMub3B0aW9ucy5ydWxlcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnaW50ZXJjaGFuZ2UnKS5tYXRjaCgvXFxbLio/XFxdL2cpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgaW4gcnVsZXMpIHtcbiAgICAgIGlmKHJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gcnVsZXNbaV0uc2xpY2UoMSwgLTEpLnNwbGl0KCcsICcpO1xuICAgICAgICB2YXIgcGF0aCA9IHJ1bGUuc2xpY2UoMCwgLTEpLmpvaW4oJycpO1xuICAgICAgICB2YXIgcXVlcnkgPSBydWxlW3J1bGUubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV0pIHtcbiAgICAgICAgICBxdWVyeSA9IEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV07XG4gICAgICAgIH1cblxuICAgICAgICBydWxlc0xpc3QucHVzaCh7XG4gICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzTGlzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGBzcmNgIHByb3BlcnR5IG9mIGFuIGltYWdlLCBvciBjaGFuZ2UgdGhlIEhUTUwgb2YgYSBjb250YWluZXIsIHRvIHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIC0gUGF0aCB0byB0aGUgaW1hZ2Ugb3IgSFRNTCBwYXJ0aWFsLlxuICAgKiBAZmlyZXMgSW50ZXJjaGFuZ2UjcmVwbGFjZWRcbiAgICovXG4gIHJlcGxhY2UocGF0aCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRQYXRoID09PSBwYXRoKSByZXR1cm47XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICB0cmlnZ2VyID0gJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJztcblxuICAgIC8vIFJlcGxhY2luZyBpbWFnZXNcbiAgICBpZiAodGhpcy4kZWxlbWVudFswXS5ub2RlTmFtZSA9PT0gJ0lNRycpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignc3JjJywgcGF0aCkub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgfSlcbiAgICAgIC50cmlnZ2VyKHRyaWdnZXIpO1xuICAgIH1cbiAgICAvLyBSZXBsYWNpbmcgYmFja2dyb3VuZCBpbWFnZXNcbiAgICBlbHNlIGlmIChwYXRoLm1hdGNoKC9cXC4oZ2lmfGpwZ3xqcGVnfHBuZ3xzdmd8dGlmZikoWz8jXS4qKT8vaSkpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHsgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCcrcGF0aCsnKScgfSlcbiAgICAgICAgICAudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICB9XG4gICAgLy8gUmVwbGFjaW5nIEhUTUxcbiAgICBlbHNlIHtcbiAgICAgICQuZ2V0KHBhdGgsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIF90aGlzLiRlbGVtZW50Lmh0bWwocmVzcG9uc2UpXG4gICAgICAgICAgICAgLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgICAgICQocmVzcG9uc2UpLmZvdW5kYXRpb24oKTtcbiAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBjb250ZW50IGluIGFuIEludGVyY2hhbmdlIGVsZW1lbnQgaXMgZG9uZSBiZWluZyBsb2FkZWQuXG4gICAgICogQGV2ZW50IEludGVyY2hhbmdlI3JlcGxhY2VkXG4gICAgICovXG4gICAgLy8gdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdyZXBsYWNlZC56Zi5pbnRlcmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGludGVyY2hhbmdlLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgLy9UT0RPIHRoaXMuXG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuSW50ZXJjaGFuZ2UuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBSdWxlcyB0byBiZSBhcHBsaWVkIHRvIEludGVyY2hhbmdlIGVsZW1lbnRzLiBTZXQgd2l0aCB0aGUgYGRhdGEtaW50ZXJjaGFuZ2VgIGFycmF5IG5vdGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqL1xuICBydWxlczogbnVsbFxufTtcblxuSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTID0ge1xuICAnbGFuZHNjYXBlJzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgJ3BvcnRyYWl0JzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICAncmV0aW5hJzogJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDE5MmRwaSksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihJbnRlcmNoYW5nZSwgJ0ludGVyY2hhbmdlJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBNYWdlbGxhbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubWFnZWxsYW5cbiAqL1xuXG5jbGFzcyBNYWdlbGxhbiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIE1hZ2VsbGFuLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE1hZ2VsbGFuI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgTWFnZWxsYW4uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ01hZ2VsbGFuJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIE1hZ2VsbGFuIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBlcXVhbGl6ZXIgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnbWFnZWxsYW4nKTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuJHRhcmdldHMgPSAkKCdbZGF0YS1tYWdlbGxhbi10YXJnZXRdJyk7XG4gICAgdGhpcy4kbGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ2RhdGEtcmVzaXplJzogaWQsXG4gICAgICAnZGF0YS1zY3JvbGwnOiBpZCxcbiAgICAgICdpZCc6IGlkXG4gICAgfSk7XG4gICAgdGhpcy4kYWN0aXZlID0gJCgpO1xuICAgIHRoaXMuc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCk7XG5cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGFuIGFycmF5IG9mIHBpeGVsIHZhbHVlcyB0aGF0IGFyZSB0aGUgZGVtYXJjYXRpb24gbGluZXMgYmV0d2VlbiBsb2NhdGlvbnMgb24gdGhlIHBhZ2UuXG4gICAqIENhbiBiZSBpbnZva2VkIGlmIG5ldyBlbGVtZW50cyBhcmUgYWRkZWQgb3IgdGhlIHNpemUgb2YgYSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGNhbGNQb2ludHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgYm9keSA9IGRvY3VtZW50LmJvZHksXG4gICAgICAgIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgIHRoaXMud2luSGVpZ2h0ID0gTWF0aC5yb3VuZChNYXRoLm1heCh3aW5kb3cuaW5uZXJIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0KSk7XG4gICAgdGhpcy5kb2NIZWlnaHQgPSBNYXRoLnJvdW5kKE1hdGgubWF4KGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5Lm9mZnNldEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLm9mZnNldEhlaWdodCkpO1xuXG4gICAgdGhpcy4kdGFyZ2V0cy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJHRhciA9ICQodGhpcyksXG4gICAgICAgICAgcHQgPSBNYXRoLnJvdW5kKCR0YXIub2Zmc2V0KCkudG9wIC0gX3RoaXMub3B0aW9ucy50aHJlc2hvbGQpO1xuICAgICAgJHRhci50YXJnZXRQb2ludCA9IHB0O1xuICAgICAgX3RoaXMucG9pbnRzLnB1c2gocHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgTWFnZWxsYW4uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICRib2R5ID0gJCgnaHRtbCwgYm9keScpLFxuICAgICAgICBvcHRzID0ge1xuICAgICAgICAgIGR1cmF0aW9uOiBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIGVhc2luZzogICBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZ1xuICAgICAgICB9O1xuICAgICQod2luZG93KS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpe1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICAgIGlmKGxvY2F0aW9uLmhhc2gpe1xuICAgICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGxvY2F0aW9uLmhhc2gpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgICBfdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5yZWZsb3cuYmluZCh0aGlzKSxcbiAgICAgICdzY3JvbGxtZS56Zi50cmlnZ2VyJzogdGhpcy5fdXBkYXRlQWN0aXZlLmJpbmQodGhpcylcbiAgICB9KS5vbignY2xpY2suemYubWFnZWxsYW4nLCAnYVtocmVmXj1cIiNcIl0nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGFycml2YWwgICA9IHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGFycml2YWwpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHNjcm9sbCB0byBhIGdpdmVuIGxvY2F0aW9uIG9uIHRoZSBwYWdlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbG9jIC0gYSBwcm9wZXJseSBmb3JtYXR0ZWQgalF1ZXJ5IGlkIHNlbGVjdG9yLiBFeGFtcGxlOiAnI2ZvbydcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzY3JvbGxUb0xvYyhsb2MpIHtcbiAgICAvLyBEbyBub3RoaW5nIGlmIHRhcmdldCBkb2VzIG5vdCBleGlzdCB0byBwcmV2ZW50IGVycm9yc1xuICAgIGlmICghJChsb2MpLmxlbmd0aCkge3JldHVybiBmYWxzZTt9XG4gICAgdmFyIHNjcm9sbFBvcyA9IE1hdGgucm91bmQoJChsb2MpLm9mZnNldCgpLnRvcCAtIHRoaXMub3B0aW9ucy50aHJlc2hvbGQgLyAyIC0gdGhpcy5vcHRpb25zLmJhck9mZnNldCk7XG5cbiAgICAkKCdodG1sLCBib2R5Jykuc3RvcCh0cnVlKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBzY3JvbGxQb3MgfSwgdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBNYWdlbGxhbiB1cG9uIERPTSBjaGFuZ2VcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICByZWZsb3coKSB7XG4gICAgdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdmlzaWJpbGl0eSBvZiBhbiBhY3RpdmUgbG9jYXRpb24gbGluaywgYW5kIHVwZGF0ZXMgdGhlIHVybCBoYXNoIGZvciB0aGUgcGFnZSwgaWYgZGVlcExpbmtpbmcgZW5hYmxlZC5cbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBNYWdlbGxhbiN1cGRhdGVcbiAgICovXG4gIF91cGRhdGVBY3RpdmUoLypldnQsIGVsZW0sIHNjcm9sbFBvcyovKSB7XG4gICAgdmFyIHdpblBvcyA9IC8qc2Nyb2xsUG9zIHx8Ki8gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCksXG4gICAgICAgIGN1cklkeDtcblxuICAgIGlmKHdpblBvcyArIHRoaXMud2luSGVpZ2h0ID09PSB0aGlzLmRvY0hlaWdodCl7IGN1cklkeCA9IHRoaXMucG9pbnRzLmxlbmd0aCAtIDE7IH1cbiAgICBlbHNlIGlmKHdpblBvcyA8IHRoaXMucG9pbnRzWzBdKXsgY3VySWR4ID0gMDsgfVxuICAgIGVsc2V7XG4gICAgICB2YXIgaXNEb3duID0gdGhpcy5zY3JvbGxQb3MgPCB3aW5Qb3MsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIGN1clZpc2libGUgPSB0aGlzLnBvaW50cy5maWx0ZXIoZnVuY3Rpb24ocCwgaSl7XG4gICAgICAgICAgICByZXR1cm4gaXNEb3duID8gcCAtIF90aGlzLm9wdGlvbnMuYmFyT2Zmc2V0IDw9IHdpblBvcyA6IHAgLSBfdGhpcy5vcHRpb25zLmJhck9mZnNldCAtIF90aGlzLm9wdGlvbnMudGhyZXNob2xkIDw9IHdpblBvcztcbiAgICAgICAgICB9KTtcbiAgICAgIGN1cklkeCA9IGN1clZpc2libGUubGVuZ3RoID8gY3VyVmlzaWJsZS5sZW5ndGggLSAxIDogMDtcbiAgICB9XG5cbiAgICB0aGlzLiRhY3RpdmUucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcbiAgICB0aGlzLiRhY3RpdmUgPSB0aGlzLiRsaW5rcy5maWx0ZXIoJ1tocmVmPVwiIycgKyB0aGlzLiR0YXJnZXRzLmVxKGN1cklkeCkuZGF0YSgnbWFnZWxsYW4tdGFyZ2V0JykgKyAnXCJdJykuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICB2YXIgaGFzaCA9IHRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgIGlmKHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSl7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBoYXNoKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zY3JvbGxQb3MgPSB3aW5Qb3M7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBtYWdlbGxhbiBpcyBmaW5pc2hlZCB1cGRhdGluZyB0byB0aGUgbmV3IGFjdGl2ZSBlbGVtZW50LlxuICAgICAqIEBldmVudCBNYWdlbGxhbiN1cGRhdGVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwZGF0ZS56Zi5tYWdlbGxhbicsIFt0aGlzLiRhY3RpdmVdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBNYWdlbGxhbiBhbmQgcmVzZXRzIHRoZSB1cmwgb2YgdGhlIHdpbmRvdy5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYubWFnZWxsYW4nKVxuICAgICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzfWApLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpe1xuICAgICAgdmFyIGhhc2ggPSB0aGlzLiRhY3RpdmVbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKGhhc2gsICcnKTtcbiAgICB9XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuTWFnZWxsYW4uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSwgaW4gbXMsIHRoZSBhbmltYXRlZCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgYmV0d2VlbiBsb2NhdGlvbnMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuICBhbmltYXRpb25EdXJhdGlvbjogNTAwLFxuICAvKipcbiAgICogQW5pbWF0aW9uIHN0eWxlIHRvIHVzZSB3aGVuIHNjcm9sbGluZyBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZWFzZS1pbi1vdXQnXG4gICAqL1xuICBhbmltYXRpb25FYXNpbmc6ICdsaW5lYXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyB0byB1c2UgYXMgYSBtYXJrZXIgZm9yIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTBcbiAgICovXG4gIHRocmVzaG9sZDogNTAsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBhY3RpdmUgbG9jYXRpb25zIGxpbmsgb24gdGhlIG1hZ2VsbGFuIGNvbnRhaW5lci5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnYWN0aXZlJ1xuICAgKi9cbiAgYWN0aXZlQ2xhc3M6ICdhY3RpdmUnLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBzY3JpcHQgdG8gbWFuaXB1bGF0ZSB0aGUgdXJsIG9mIHRoZSBjdXJyZW50IHBhZ2UsIGFuZCBpZiBzdXBwb3J0ZWQsIGFsdGVyIHRoZSBoaXN0b3J5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGRlZXBMaW5raW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBzY3JvbGwgb2YgdGhlIHBhZ2Ugb24gaXRlbSBjbGljayBpZiB1c2luZyBhIHN0aWNreSBuYXYgYmFyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1XG4gICAqL1xuICBiYXJPZmZzZXQ6IDBcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE1hZ2VsbGFuLCAnTWFnZWxsYW4nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE9mZkNhbnZhcyBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ub2ZmY2FudmFzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKi9cblxuY2xhc3MgT2ZmQ2FudmFzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gb2ZmLWNhbnZhcyB3cmFwcGVyLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE9mZkNhbnZhcyNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBpbml0aWFsaXplLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE9mZkNhbnZhcy5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gJCgpO1xuICAgIHRoaXMuJHRyaWdnZXJzID0gJCgpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnT2ZmQ2FudmFzJylcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdPZmZDYW52YXMnLCB7XG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG9mZi1jYW52YXMgd3JhcHBlciBieSBhZGRpbmcgdGhlIGV4aXQgb3ZlcmxheSAoaWYgbmVlZGVkKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgIC8vIEZpbmQgdHJpZ2dlcnMgdGhhdCBhZmZlY3QgdGhpcyBlbGVtZW50IGFuZCBhZGQgYXJpYS1leHBhbmRlZCB0byB0aGVtXG4gICAgdGhpcy4kdHJpZ2dlcnMgPSAkKGRvY3VtZW50KVxuICAgICAgLmZpbmQoJ1tkYXRhLW9wZW49XCInK2lkKydcIl0sIFtkYXRhLWNsb3NlPVwiJytpZCsnXCJdLCBbZGF0YS10b2dnbGU9XCInK2lkKydcIl0nKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG5cbiAgICAvLyBBZGQgYSBjbG9zZSB0cmlnZ2VyIG92ZXIgdGhlIGJvZHkgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIGlmICgkKCcuanMtb2ZmLWNhbnZhcy1leGl0JykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGV4aXRlciA9ICQoJy5qcy1vZmYtY2FudmFzLWV4aXQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBleGl0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZXhpdGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnanMtb2ZmLWNhbnZhcy1leGl0Jyk7XG4gICAgICAgICQoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5hcHBlbmQoZXhpdGVyKTtcblxuICAgICAgICB0aGlzLiRleGl0ZXIgPSAkKGV4aXRlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCB8fCBuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXZlYWxDbGFzcywgJ2cnKS50ZXN0KHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5vcHRpb25zLnJldmVhbE9uID0gdGhpcy5vcHRpb25zLnJldmVhbE9uIHx8IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8ocmV2ZWFsLWZvci1tZWRpdW18cmV2ZWFsLWZvci1sYXJnZSkvZylbMF0uc3BsaXQoJy0nKVsyXTtcbiAgICAgIHRoaXMuX3NldE1RQ2hlY2tlcigpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZSkge1xuICAgICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkKCdbZGF0YS1vZmYtY2FudmFzLXdyYXBwZXJdJylbMF0pLnRyYW5zaXRpb25EdXJhdGlvbikgKiAxMDAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIHRoZSBvZmYtY2FudmFzIHdyYXBwZXIgYW5kIHRoZSBleGl0IG92ZXJsYXkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhcycpLm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdrZXlkb3duLnpmLm9mZmNhbnZhcyc6IHRoaXMuX2hhbmRsZUtleWJvYXJkLmJpbmQodGhpcylcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrICYmIHRoaXMuJGV4aXRlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGV4aXRlci5vbih7J2NsaWNrLnpmLm9mZmNhbnZhcyc6IHRoaXMuY2xvc2UuYmluZCh0aGlzKX0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGV2ZW50IGxpc3RlbmVyIGZvciBlbGVtZW50cyB0aGF0IHdpbGwgcmV2ZWFsIGF0IGNlcnRhaW4gYnJlYWtwb2ludHMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0TVFDaGVja2VyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnJldmVhbChmYWxzZSk7XG4gICAgICB9XG4gICAgfSkub25lKCdsb2FkLnpmLm9mZmNhbnZhcycsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSByZXZlYWxpbmcvaGlkaW5nIHRoZSBvZmYtY2FudmFzIGF0IGJyZWFrcG9pbnRzLCBub3QgdGhlIHNhbWUgYXMgb3Blbi5cbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1JldmVhbGVkIC0gdHJ1ZSBpZiBlbGVtZW50IHNob3VsZCBiZSByZXZlYWxlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICByZXZlYWwoaXNSZXZlYWxlZCkge1xuICAgIHZhciAkY2xvc2VyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1jbG9zZV0nKTtcbiAgICBpZiAoaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgdGhpcy5pc1JldmVhbGVkID0gdHJ1ZTtcbiAgICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgICAvLyAgIHZhciBzY3JvbGxQb3MgPSBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgLy8gICB0aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMCwnICsgc2Nyb2xsUG9zICsgJ3B4KSc7XG4gICAgICAvLyB9XG4gICAgICAvLyBpZiAodGhpcy5vcHRpb25zLmlzU3RpY2t5KSB7IHRoaXMuX3N0aWNrKCk7IH1cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdvcGVuLnpmLnRyaWdnZXIgdG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkgeyAkY2xvc2VyLmhpZGUoKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzUmV2ZWFsZWQgPSBmYWxzZTtcbiAgICAgIC8vIGlmICh0aGlzLm9wdGlvbnMuaXNTdGlja3kgfHwgIXRoaXMub3B0aW9ucy5mb3JjZVRvcCkge1xuICAgICAgLy8gICB0aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgICAgLy8gICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYub2ZmY2FudmFzJyk7XG4gICAgICAvLyB9XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgICB9KTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkge1xuICAgICAgICAkY2xvc2VyLnNob3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqIEBmaXJlcyBPZmZDYW52YXMjb3BlbmVkXG4gICAqL1xuICBvcGVuKGV2ZW50LCB0cmlnZ2VyKSB7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHsgcmV0dXJuOyB9XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgJGJvZHkgPSAkKGRvY3VtZW50LmJvZHkpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5mb3JjZVRvcCkge1xuICAgICAgJCgnYm9keScpLnNjcm9sbFRvcCgwKTtcbiAgICB9XG4gICAgLy8gd2luZG93LnBhZ2VZT2Zmc2V0ID0gMDtcblxuICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgLy8gICB2YXIgc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAvLyAgIHRoaXMuJGVsZW1lbnRbMF0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBzY3JvbGxQb3MgKyAncHgpJztcbiAgICAvLyAgIGlmICh0aGlzLiRleGl0ZXIubGVuZ3RoKSB7XG4gICAgLy8gICAgIHRoaXMuJGV4aXRlclswXS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHNjcm9sbFBvcyArICdweCknO1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbnMuXG4gICAgICogQGV2ZW50IE9mZkNhbnZhcyNvcGVuZWRcbiAgICAgKi9cblxuICAgIHZhciAkd3JhcHBlciA9ICQoJ1tkYXRhLW9mZi1jYW52YXMtd3JhcHBlcl0nKTtcbiAgICAkd3JhcHBlci5hZGRDbGFzcygnaXMtb2ZmLWNhbnZhcy1vcGVuIGlzLW9wZW4tJysgX3RoaXMub3B0aW9ucy5wb3NpdGlvbik7XG5cbiAgICBfdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnaXMtb3BlbicpXG5cbiAgICAgIC8vIGlmIChfdGhpcy5vcHRpb25zLmlzU3RpY2t5KSB7XG4gICAgICAvLyAgIF90aGlzLl9zdGljaygpO1xuICAgICAgLy8gfVxuXG4gICAgdGhpcy4kdHJpZ2dlcnMuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpXG4gICAgICAgIC50cmlnZ2VyKCdvcGVuZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgdGhpcy4kZXhpdGVyLmFkZENsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Gb2N1cykge1xuICAgICAgJHdyYXBwZXIub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkd3JhcHBlciksIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7IC8vIGhhbmRsZSBkb3VibGUgY2xpY2tzXG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgJHdyYXBwZXIub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkd3JhcHBlciksIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7IC8vIGhhbmRsZSBkb3VibGUgY2xpY2tzXG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICBfdGhpcy50cmFwRm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYXBzIGZvY3VzIHdpdGhpbiB0aGUgb2ZmY2FudmFzIG9uIG9wZW4uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdHJhcEZvY3VzKCkge1xuICAgIHZhciBmb2N1c2FibGUgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCksXG4gICAgICAgIGZpcnN0ID0gZm9jdXNhYmxlLmVxKDApLFxuICAgICAgICBsYXN0ID0gZm9jdXNhYmxlLmVxKC0xKTtcblxuICAgIGZvY3VzYWJsZS5vZmYoJy56Zi5vZmZjYW52YXMnKS5vbigna2V5ZG93bi56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIga2V5ID0gRm91bmRhdGlvbi5LZXlib2FyZC5wYXJzZUtleShlKTtcbiAgICAgIGlmIChrZXkgPT09ICdUQUInICYmIGUudGFyZ2V0ID09PSBsYXN0WzBdKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZmlyc3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdTSElGVF9UQUInICYmIGUudGFyZ2V0ID09PSBmaXJzdFswXSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxhc3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG9mZmNhbnZhcyB0byBhcHBlYXIgc3RpY2t5IHV0aWxpemluZyB0cmFuc2xhdGUgcHJvcGVydGllcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIC8vIE9mZkNhbnZhcy5wcm90b3R5cGUuX3N0aWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgdmFyIGVsU3R5bGUgPSB0aGlzLiRlbGVtZW50WzBdLnN0eWxlO1xuICAvL1xuICAvLyAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gIC8vICAgICB2YXIgZXhpdFN0eWxlID0gdGhpcy4kZXhpdGVyWzBdLnN0eWxlO1xuICAvLyAgIH1cbiAgLy9cbiAgLy8gICAkKHdpbmRvdykub24oJ3Njcm9sbC56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbihlKSB7XG4gIC8vICAgICBjb25zb2xlLmxvZyhlKTtcbiAgLy8gICAgIHZhciBwYWdlWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgLy8gICAgIGVsU3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBwYWdlWSArICdweCknO1xuICAvLyAgICAgaWYgKGV4aXRTdHlsZSAhPT0gdW5kZWZpbmVkKSB7IGV4aXRTdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHBhZ2VZICsgJ3B4KSc7IH1cbiAgLy8gICB9KTtcbiAgLy8gICAvLyB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3N0dWNrLnpmLm9mZmNhbnZhcycpO1xuICAvLyB9O1xuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNiIHRvIGZpcmUgYWZ0ZXIgY2xvc3VyZS5cbiAgICogQGZpcmVzIE9mZkNhbnZhcyNjbG9zZWRcbiAgICovXG4gIGNsb3NlKGNiKSB7XG4gICAgaWYgKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykgfHwgdGhpcy5pc1JldmVhbGVkKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vICBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lLCB0aGlzLiRlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAkKCdbZGF0YS1vZmYtY2FudmFzLXdyYXBwZXJdJykucmVtb3ZlQ2xhc3MoYGlzLW9mZi1jYW52YXMtb3BlbiBpcy1vcGVuLSR7X3RoaXMub3B0aW9ucy5wb3NpdGlvbn1gKTtcbiAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgLy8gRm91bmRhdGlvbi5fcmVmbG93KCk7XG4gICAgLy8gfSk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgb2ZmLWNhbnZhcyBtZW51IG9wZW5zLlxuICAgICAgICogQGV2ZW50IE9mZkNhbnZhcyNjbG9zZWRcbiAgICAgICAqL1xuICAgICAgICAudHJpZ2dlcignY2xvc2VkLnpmLm9mZmNhbnZhcycpO1xuICAgIC8vIGlmIChfdGhpcy5vcHRpb25zLmlzU3RpY2t5IHx8ICFfdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgLy8gICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICBfdGhpcy4kZWxlbWVudFswXS5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICAvLyAgICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsLnpmLm9mZmNhbnZhcycpO1xuICAgIC8vICAgfSwgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lKTtcbiAgICAvLyB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIHRoaXMuJGV4aXRlci5yZW1vdmVDbGFzcygnaXMtdmlzaWJsZScpO1xuICAgIH1cblxuICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgJCgnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9mZi1jYW52YXMgbWVudSBvcGVuIG9yIGNsb3NlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqL1xuICB0b2dnbGUoZXZlbnQsIHRyaWdnZXIpIHtcbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICB0aGlzLmNsb3NlKGV2ZW50LCB0cmlnZ2VyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLm9wZW4oZXZlbnQsIHRyaWdnZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGtleWJvYXJkIGlucHV0IHdoZW4gZGV0ZWN0ZWQuIFdoZW4gdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZCwgdGhlIG9mZi1jYW52YXMgbWVudSBjbG9zZXMsIGFuZCBmb2N1cyBpcyByZXN0b3JlZCB0byB0aGUgZWxlbWVudCB0aGF0IG9wZW5lZCB0aGUgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGFuZGxlS2V5Ym9hcmQoZSkge1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdPZmZDYW52YXMnLCB7XG4gICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyLmZvY3VzKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZWQ6ICgpID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBvZmZjYW52YXMgcGx1Z2luLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYub2ZmY2FudmFzJyk7XG4gICAgdGhpcy4kZXhpdGVyLm9mZignLnpmLm9mZmNhbnZhcycpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbk9mZkNhbnZhcy5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFsbG93IHRoZSB1c2VyIHRvIGNsaWNrIG91dHNpZGUgb2YgdGhlIG1lbnUgdG8gY2xvc2UgaXQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSBpbiBtcyB0aGUgb3BlbiBhbmQgY2xvc2UgdHJhbnNpdGlvbiByZXF1aXJlcy4gSWYgbm9uZSBzZWxlY3RlZCwgcHVsbHMgZnJvbSBib2R5IHN0eWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwMFxuICAgKi9cbiAgdHJhbnNpdGlvblRpbWU6IDAsXG5cbiAgLyoqXG4gICAqIERpcmVjdGlvbiB0aGUgb2ZmY2FudmFzIG9wZW5zIGZyb20uIERldGVybWluZXMgY2xhc3MgYXBwbGllZCB0byBib2R5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGxlZnRcbiAgICovXG4gIHBvc2l0aW9uOiAnbGVmdCcsXG5cbiAgLyoqXG4gICAqIEZvcmNlIHRoZSBwYWdlIHRvIHNjcm9sbCB0byB0b3Agb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBmb3JjZVRvcDogdHJ1ZSxcblxuICAvKipcbiAgICogQWxsb3cgdGhlIG9mZmNhbnZhcyB0byByZW1haW4gb3BlbiBmb3IgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgaXNSZXZlYWxlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgYXQgd2hpY2ggdG8gcmV2ZWFsLiBKUyB3aWxsIHVzZSBhIFJlZ0V4cCB0byB0YXJnZXQgc3RhbmRhcmQgY2xhc3NlcywgaWYgY2hhbmdpbmcgY2xhc3NuYW1lcywgcGFzcyB5b3VyIGNsYXNzIHdpdGggdGhlIGByZXZlYWxDbGFzc2Agb3B0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHJldmVhbC1mb3ItbGFyZ2VcbiAgICovXG4gIHJldmVhbE9uOiBudWxsLFxuXG4gIC8qKlxuICAgKiBGb3JjZSBmb2N1cyB0byB0aGUgb2ZmY2FudmFzIG9uIG9wZW4uIElmIHRydWUsIHdpbGwgZm9jdXMgdGhlIG9wZW5pbmcgdHJpZ2dlciBvbiBjbG9zZS4gU2V0cyB0YWJpbmRleCBvZiBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdIHRvIC0xIGZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGF1dG9Gb2N1czogdHJ1ZSxcblxuICAvKipcbiAgICogQ2xhc3MgdXNlZCB0byBmb3JjZSBhbiBvZmZjYW52YXMgdG8gcmVtYWluIG9wZW4uIEZvdW5kYXRpb24gZGVmYXVsdHMgZm9yIHRoaXMgYXJlIGByZXZlYWwtZm9yLWxhcmdlYCAmIGByZXZlYWwtZm9yLW1lZGl1bWAuXG4gICAqIEBvcHRpb25cbiAgICogVE9ETyBpbXByb3ZlIHRoZSByZWdleCB0ZXN0aW5nIGZvciB0aGlzLlxuICAgKiBAZXhhbXBsZSByZXZlYWwtZm9yLWxhcmdlXG4gICAqL1xuICByZXZlYWxDbGFzczogJ3JldmVhbC1mb3ItJyxcblxuICAvKipcbiAgICogVHJpZ2dlcnMgb3B0aW9uYWwgZm9jdXMgdHJhcHBpbmcgd2hlbiBvcGVuaW5nIGFuIG9mZmNhbnZhcy4gU2V0cyB0YWJpbmRleCBvZiBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdIHRvIC0xIGZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIHRyYXBGb2N1czogZmFsc2Vcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE9mZkNhbnZhcywgJ09mZkNhbnZhcycpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogT3JiaXQgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLm9yYml0XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRvdWNoXG4gKi9cblxuY2xhc3MgT3JiaXQge1xuICAvKipcbiAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGFuIG9yYml0IGNhcm91c2VsLlxuICAqIEBjbGFzc1xuICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gT3JiaXQgQ2Fyb3VzZWwuXG4gICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKXtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgT3JiaXQuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ09yYml0Jyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignT3JiaXQnLCB7XG4gICAgICAnbHRyJzoge1xuICAgICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAgICdBUlJPV19MRUZUJzogJ3ByZXZpb3VzJ1xuICAgICAgfSxcbiAgICAgICdydGwnOiB7XG4gICAgICAgICdBUlJPV19MRUZUJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfUklHSFQnOiAncHJldmlvdXMnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luIGJ5IGNyZWF0aW5nIGpRdWVyeSBjb2xsZWN0aW9ucywgc2V0dGluZyBhdHRyaWJ1dGVzLCBhbmQgc3RhcnRpbmcgdGhlIGFuaW1hdGlvbi5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLiR3cmFwcGVyID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgdGhpcy4kc2xpZGVzID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKTtcbiAgICB2YXIgJGltYWdlcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW1nJyksXG4gICAgaW5pdEFjdGl2ZSA9IHRoaXMuJHNsaWRlcy5maWx0ZXIoJy5pcy1hY3RpdmUnKTtcblxuICAgIGlmICghaW5pdEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJHNsaWRlcy5lcSgwKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMudXNlTVVJKSB7XG4gICAgICB0aGlzLiRzbGlkZXMuYWRkQ2xhc3MoJ25vLW1vdGlvbnVpJyk7XG4gICAgfVxuXG4gICAgaWYgKCRpbWFnZXMubGVuZ3RoKSB7XG4gICAgICBGb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkKCRpbWFnZXMsIHRoaXMuX3ByZXBhcmVGb3JPcmJpdC5iaW5kKHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcHJlcGFyZUZvck9yYml0KCk7Ly9oZWhlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICB0aGlzLl9sb2FkQnVsbGV0cygpO1xuICAgIH1cblxuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSAmJiB0aGlzLiRzbGlkZXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5nZW9TeW5jKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hY2Nlc3NpYmxlKSB7IC8vIGFsbG93IHdyYXBwZXIgdG8gYmUgZm9jdXNhYmxlIHRvIGVuYWJsZSBhcnJvdyBuYXZpZ2F0aW9uXG4gICAgICB0aGlzLiR3cmFwcGVyLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogQ3JlYXRlcyBhIGpRdWVyeSBjb2xsZWN0aW9uIG9mIGJ1bGxldHMsIGlmIHRoZXkgYXJlIGJlaW5nIHVzZWQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX2xvYWRCdWxsZXRzKCkge1xuICAgIHRoaXMuJGJ1bGxldHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoYC4ke3RoaXMub3B0aW9ucy5ib3hPZkJ1bGxldHN9YCkuZmluZCgnYnV0dG9uJyk7XG4gIH1cblxuICAvKipcbiAgKiBTZXRzIGEgYHRpbWVyYCBvYmplY3Qgb24gdGhlIG9yYml0LCBhbmQgc3RhcnRzIHRoZSBjb3VudGVyIGZvciB0aGUgbmV4dCBzbGlkZS5cbiAgKiBAZnVuY3Rpb25cbiAgKi9cbiAgZ2VvU3luYygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMudGltZXIgPSBuZXcgRm91bmRhdGlvbi5UaW1lcihcbiAgICAgIHRoaXMuJGVsZW1lbnQsXG4gICAgICB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGlzLm9wdGlvbnMudGltZXJEZWxheSxcbiAgICAgICAgaW5maW5pdGU6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHRydWUpO1xuICAgICAgfSk7XG4gICAgdGhpcy50aW1lci5zdGFydCgpO1xuICB9XG5cbiAgLyoqXG4gICogU2V0cyB3cmFwcGVyIGFuZCBzbGlkZSBoZWlnaHRzIGZvciB0aGUgb3JiaXQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX3ByZXBhcmVGb3JPcmJpdCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuX3NldFdyYXBwZXJIZWlnaHQoZnVuY3Rpb24obWF4KXtcbiAgICAgIF90aGlzLl9zZXRTbGlkZUhlaWdodChtYXgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogQ2FsdWxhdGVzIHRoZSBoZWlnaHQgb2YgZWFjaCBzbGlkZSBpbiB0aGUgY29sbGVjdGlvbiwgYW5kIHVzZXMgdGhlIHRhbGxlc3Qgb25lIGZvciB0aGUgd3JhcHBlciBoZWlnaHQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSB3aGVuIGNvbXBsZXRlLlxuICAqL1xuICBfc2V0V3JhcHBlckhlaWdodChjYikgey8vcmV3cml0ZSB0aGlzIHRvIGBmb3JgIGxvb3BcbiAgICB2YXIgbWF4ID0gMCwgdGVtcCwgY291bnRlciA9IDA7XG5cbiAgICB0aGlzLiRzbGlkZXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHRlbXAgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICQodGhpcykuYXR0cignZGF0YS1zbGlkZScsIGNvdW50ZXIpO1xuXG4gICAgICBpZiAoY291bnRlcikgey8vaWYgbm90IHRoZSBmaXJzdCBzbGlkZSwgc2V0IGNzcyBwb3NpdGlvbiBhbmQgZGlzcGxheSBwcm9wZXJ0eVxuICAgICAgICAkKHRoaXMpLmNzcyh7J3Bvc2l0aW9uJzogJ3JlbGF0aXZlJywgJ2Rpc3BsYXknOiAnbm9uZSd9KTtcbiAgICAgIH1cbiAgICAgIG1heCA9IHRlbXAgPiBtYXggPyB0ZW1wIDogbWF4O1xuICAgICAgY291bnRlcisrO1xuICAgIH0pO1xuXG4gICAgaWYgKGNvdW50ZXIgPT09IHRoaXMuJHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJHdyYXBwZXIuY3NzKHsnaGVpZ2h0JzogbWF4fSk7IC8vb25seSBjaGFuZ2UgdGhlIHdyYXBwZXIgaGVpZ2h0IHByb3BlcnR5IG9uY2UuXG4gICAgICBjYihtYXgpOyAvL2ZpcmUgY2FsbGJhY2sgd2l0aCBtYXggaGVpZ2h0IGRpbWVuc2lvbi5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBTZXRzIHRoZSBtYXgtaGVpZ2h0IG9mIGVhY2ggc2xpZGUuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX3NldFNsaWRlSGVpZ2h0KGhlaWdodCkge1xuICAgIHRoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS5jc3MoJ21heC1oZWlnaHQnLCBoZWlnaHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gYmFzaWNhbGx5IGV2ZXJ5dGhpbmcgd2l0aGluIHRoZSBlbGVtZW50LlxuICAqIEBmdW5jdGlvblxuICAqIEBwcml2YXRlXG4gICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgLy8qKk5vdyB1c2luZyBjdXN0b20gZXZlbnQgLSB0aGFua3MgdG86KipcbiAgICAvLyoqICAgICAgWW9oYWkgQXJhcmF0IG9mIFRvcm9udG8gICAgICAqKlxuICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgaWYgKHRoaXMuJHNsaWRlcy5sZW5ndGggPiAxKSB7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3dpcGUpIHtcbiAgICAgICAgdGhpcy4kc2xpZGVzLm9mZignc3dpcGVsZWZ0LnpmLm9yYml0IHN3aXBlcmlnaHQuemYub3JiaXQnKVxuICAgICAgICAub24oJ3N3aXBlbGVmdC56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSh0cnVlKTtcbiAgICAgICAgfSkub24oJ3N3aXBlcmlnaHQuemYub3JiaXQnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1BsYXkpIHtcbiAgICAgICAgdGhpcy4kc2xpZGVzLm9uKCdjbGljay56Zi5vcmJpdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicsIF90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpID8gZmFsc2UgOiB0cnVlKTtcbiAgICAgICAgICBfdGhpcy50aW1lcltfdGhpcy4kZWxlbWVudC5kYXRhKCdjbGlja2VkT24nKSA/ICdwYXVzZScgOiAnc3RhcnQnXSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhdXNlT25Ib3Zlcikge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZW50ZXIuemYub3JiaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLnRpbWVyLnBhdXNlKCk7XG4gICAgICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYub3JiaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuJGVsZW1lbnQuZGF0YSgnY2xpY2tlZE9uJykpIHtcbiAgICAgICAgICAgICAgX3RoaXMudGltZXIuc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5hdkJ1dHRvbnMpIHtcbiAgICAgICAgdmFyICRjb250cm9scyA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLm5leHRDbGFzc30sIC4ke3RoaXMub3B0aW9ucy5wcmV2Q2xhc3N9YCk7XG4gICAgICAgICRjb250cm9scy5hdHRyKCd0YWJpbmRleCcsIDApXG4gICAgICAgIC8vYWxzbyBuZWVkIHRvIGhhbmRsZSBlbnRlci9yZXR1cm4gYW5kIHNwYWNlYmFyIGtleSBwcmVzc2VzXG4gICAgICAgIC5vbignY2xpY2suemYub3JiaXQgdG91Y2hlbmQuemYub3JiaXQnLCBmdW5jdGlvbihlKXtcblx0ICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoJCh0aGlzKS5oYXNDbGFzcyhfdGhpcy5vcHRpb25zLm5leHRDbGFzcykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICAgIHRoaXMuJGJ1bGxldHMub24oJ2NsaWNrLnpmLm9yYml0IHRvdWNoZW5kLnpmLm9yYml0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKC9pcy1hY3RpdmUvZy50ZXN0KHRoaXMuY2xhc3NOYW1lKSkgeyByZXR1cm4gZmFsc2U7IH0vL2lmIHRoaXMgaXMgYWN0aXZlLCBraWNrIG91dCBvZiBmdW5jdGlvbi5cbiAgICAgICAgICB2YXIgaWR4ID0gJCh0aGlzKS5kYXRhKCdzbGlkZScpLFxuICAgICAgICAgIGx0ciA9IGlkeCA+IF90aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZGF0YSgnc2xpZGUnKSxcbiAgICAgICAgICAkc2xpZGUgPSBfdGhpcy4kc2xpZGVzLmVxKGlkeCk7XG5cbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShsdHIsICRzbGlkZSwgaWR4KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWNjZXNzaWJsZSkge1xuICAgICAgICB0aGlzLiR3cmFwcGVyLmFkZCh0aGlzLiRidWxsZXRzKS5vbigna2V5ZG93bi56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAvLyBoYW5kbGUga2V5Ym9hcmQgZXZlbnQgd2l0aCBrZXlib2FyZCB1dGlsXG4gICAgICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ09yYml0Jywge1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoZmFsc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkgeyAvLyBpZiBidWxsZXQgaXMgZm9jdXNlZCwgbWFrZSBzdXJlIGZvY3VzIG1vdmVzXG4gICAgICAgICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyhfdGhpcy4kYnVsbGV0cykpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy4kYnVsbGV0cy5maWx0ZXIoJy5pcy1hY3RpdmUnKS5mb2N1cygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIENoYW5nZXMgdGhlIGN1cnJlbnQgc2xpZGUgdG8gYSBuZXcgb25lLlxuICAqIEBmdW5jdGlvblxuICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNMVFIgLSBmbGFnIGlmIHRoZSBzbGlkZSBzaG91bGQgbW92ZSBsZWZ0IHRvIHJpZ2h0LlxuICAqIEBwYXJhbSB7alF1ZXJ5fSBjaG9zZW5TbGlkZSAtIHRoZSBqUXVlcnkgZWxlbWVudCBvZiB0aGUgc2xpZGUgdG8gc2hvdyBuZXh0LCBpZiBvbmUgaXMgc2VsZWN0ZWQuXG4gICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIHRoZSBpbmRleCBvZiB0aGUgbmV3IHNsaWRlIGluIGl0cyBjb2xsZWN0aW9uLCBpZiBvbmUgY2hvc2VuLlxuICAqIEBmaXJlcyBPcmJpdCNzbGlkZWNoYW5nZVxuICAqL1xuICBjaGFuZ2VTbGlkZShpc0xUUiwgY2hvc2VuU2xpZGUsIGlkeCkge1xuICAgIHZhciAkY3VyU2xpZGUgPSB0aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZXEoMCk7XG5cbiAgICBpZiAoL211aS9nLnRlc3QoJGN1clNsaWRlWzBdLmNsYXNzTmFtZSkpIHsgcmV0dXJuIGZhbHNlOyB9IC8vaWYgdGhlIHNsaWRlIGlzIGN1cnJlbnRseSBhbmltYXRpbmcsIGtpY2sgb3V0IG9mIHRoZSBmdW5jdGlvblxuXG4gICAgdmFyICRmaXJzdFNsaWRlID0gdGhpcy4kc2xpZGVzLmZpcnN0KCksXG4gICAgJGxhc3RTbGlkZSA9IHRoaXMuJHNsaWRlcy5sYXN0KCksXG4gICAgZGlySW4gPSBpc0xUUiA/ICdSaWdodCcgOiAnTGVmdCcsXG4gICAgZGlyT3V0ID0gaXNMVFIgPyAnTGVmdCcgOiAnUmlnaHQnLFxuICAgIF90aGlzID0gdGhpcyxcbiAgICAkbmV3U2xpZGU7XG5cbiAgICBpZiAoIWNob3NlblNsaWRlKSB7IC8vbW9zdCBvZiB0aGUgdGltZSwgdGhpcyB3aWxsIGJlIGF1dG8gcGxheWVkIG9yIGNsaWNrZWQgZnJvbSB0aGUgbmF2QnV0dG9ucy5cbiAgICAgICRuZXdTbGlkZSA9IGlzTFRSID8gLy9pZiB3cmFwcGluZyBlbmFibGVkLCBjaGVjayB0byBzZWUgaWYgdGhlcmUgaXMgYSBgbmV4dGAgb3IgYHByZXZgIHNpYmxpbmcsIGlmIG5vdCwgc2VsZWN0IHRoZSBmaXJzdCBvciBsYXN0IHNsaWRlIHRvIGZpbGwgaW4uIGlmIHdyYXBwaW5nIG5vdCBlbmFibGVkLCBhdHRlbXB0IHRvIHNlbGVjdCBgbmV4dGAgb3IgYHByZXZgLCBpZiB0aGVyZSdzIG5vdGhpbmcgdGhlcmUsIHRoZSBmdW5jdGlvbiB3aWxsIGtpY2sgb3V0IG9uIG5leHQgc3RlcC4gQ1JBWlkgTkVTVEVEIFRFUk5BUklFUyEhISEhXG4gICAgICAodGhpcy5vcHRpb25zLmluZmluaXRlV3JhcCA/ICRjdXJTbGlkZS5uZXh0KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKS5sZW5ndGggPyAkY3VyU2xpZGUubmV4dChgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkgOiAkZmlyc3RTbGlkZSA6ICRjdXJTbGlkZS5uZXh0KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKSkvL3BpY2sgbmV4dCBzbGlkZSBpZiBtb3ZpbmcgbGVmdCB0byByaWdodFxuICAgICAgOlxuICAgICAgKHRoaXMub3B0aW9ucy5pbmZpbml0ZVdyYXAgPyAkY3VyU2xpZGUucHJldihgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkubGVuZ3RoID8gJGN1clNsaWRlLnByZXYoYC4ke3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzfWApIDogJGxhc3RTbGlkZSA6ICRjdXJTbGlkZS5wcmV2KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKSk7Ly9waWNrIHByZXYgc2xpZGUgaWYgbW92aW5nIHJpZ2h0IHRvIGxlZnRcbiAgICB9IGVsc2Uge1xuICAgICAgJG5ld1NsaWRlID0gY2hvc2VuU2xpZGU7XG4gICAgfVxuXG4gICAgaWYgKCRuZXdTbGlkZS5sZW5ndGgpIHtcbiAgICAgIC8qKlxuICAgICAgKiBUcmlnZ2VycyBiZWZvcmUgdGhlIG5leHQgc2xpZGUgc3RhcnRzIGFuaW1hdGluZyBpbiBhbmQgb25seSBpZiBhIG5leHQgc2xpZGUgaGFzIGJlZW4gZm91bmQuXG4gICAgICAqIEBldmVudCBPcmJpdCNiZWZvcmVzbGlkZWNoYW5nZVxuICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignYmVmb3Jlc2xpZGVjaGFuZ2UuemYub3JiaXQnLCBbJGN1clNsaWRlLCAkbmV3U2xpZGVdKTtcbiAgICAgIFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICAgIGlkeCA9IGlkeCB8fCB0aGlzLiRzbGlkZXMuaW5kZXgoJG5ld1NsaWRlKTsgLy9ncmFiIGluZGV4IHRvIHVwZGF0ZSBidWxsZXRzXG4gICAgICAgIHRoaXMuX3VwZGF0ZUJ1bGxldHMoaWR4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy51c2VNVUkpIHtcbiAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKFxuICAgICAgICAgICRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlJykuY3NzKHsncG9zaXRpb24nOiAnYWJzb2x1dGUnLCAndG9wJzogMH0pLFxuICAgICAgICAgIHRoaXMub3B0aW9uc1tgYW5pbUluRnJvbSR7ZGlySW59YF0sXG4gICAgICAgICAgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRuZXdTbGlkZS5jc3Moeydwb3NpdGlvbic6ICdyZWxhdGl2ZScsICdkaXNwbGF5JzogJ2Jsb2NrJ30pXG4gICAgICAgICAgICAuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KFxuICAgICAgICAgICRjdXJTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyksXG4gICAgICAgICAgdGhpcy5vcHRpb25zW2BhbmltT3V0VG8ke2Rpck91dH1gXSxcbiAgICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgICAgJGN1clNsaWRlLnJlbW92ZUF0dHIoJ2FyaWEtbGl2ZScpO1xuICAgICAgICAgICAgaWYoX3RoaXMub3B0aW9ucy5hdXRvUGxheSAmJiAhX3RoaXMudGltZXIuaXNQYXVzZWQpe1xuICAgICAgICAgICAgICBfdGhpcy50aW1lci5yZXN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2RvIHN0dWZmP1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGN1clNsaWRlLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtaW4nKS5yZW1vdmVBdHRyKCdhcmlhLWxpdmUnKS5oaWRlKCk7XG4gICAgICAgICRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlIGlzLWluJykuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpLnNob3coKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSAmJiAhdGhpcy50aW1lci5pc1BhdXNlZCkge1xuICAgICAgICAgIHRoaXMudGltZXIucmVzdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgLyoqXG4gICAgKiBUcmlnZ2VycyB3aGVuIHRoZSBzbGlkZSBoYXMgZmluaXNoZWQgYW5pbWF0aW5nIGluLlxuICAgICogQGV2ZW50IE9yYml0I3NsaWRlY2hhbmdlXG4gICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2xpZGVjaGFuZ2UuemYub3JiaXQnLCBbJG5ld1NsaWRlXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVXBkYXRlcyB0aGUgYWN0aXZlIHN0YXRlIG9mIHRoZSBidWxsZXRzLCBpZiBkaXNwbGF5ZWQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gdGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IHNsaWRlLlxuICAqL1xuICBfdXBkYXRlQnVsbGV0cyhpZHgpIHtcbiAgICB2YXIgJG9sZEJ1bGxldCA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLmJveE9mQnVsbGV0c31gKVxuICAgIC5maW5kKCcuaXMtYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmJsdXIoKSxcbiAgICBzcGFuID0gJG9sZEJ1bGxldC5maW5kKCdzcGFuOmxhc3QnKS5kZXRhY2goKSxcbiAgICAkbmV3QnVsbGV0ID0gdGhpcy4kYnVsbGV0cy5lcShpZHgpLmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hcHBlbmQoc3Bhbik7XG4gIH1cblxuICAvKipcbiAgKiBEZXN0cm95cyB0aGUgY2Fyb3VzZWwgYW5kIGhpZGVzIHRoZSBlbGVtZW50LlxuICAqIEBmdW5jdGlvblxuICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYub3JiaXQnKS5maW5kKCcqJykub2ZmKCcuemYub3JiaXQnKS5lbmQoKS5oaWRlKCk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbk9yYml0LmRlZmF1bHRzID0ge1xuICAvKipcbiAgKiBUZWxscyB0aGUgSlMgdG8gbG9vayBmb3IgYW5kIGxvYWRCdWxsZXRzLlxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIGJ1bGxldHM6IHRydWUsXG4gIC8qKlxuICAqIFRlbGxzIHRoZSBKUyB0byBhcHBseSBldmVudCBsaXN0ZW5lcnMgdG8gbmF2IGJ1dHRvbnNcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICBuYXZCdXR0b25zOiB0cnVlLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdzbGlkZS1pbi1yaWdodCdcbiAgKi9cbiAgYW5pbUluRnJvbVJpZ2h0OiAnc2xpZGUtaW4tcmlnaHQnLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdzbGlkZS1vdXQtcmlnaHQnXG4gICovXG4gIGFuaW1PdXRUb1JpZ2h0OiAnc2xpZGUtb3V0LXJpZ2h0JyxcbiAgLyoqXG4gICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnc2xpZGUtaW4tbGVmdCdcbiAgKlxuICAqL1xuICBhbmltSW5Gcm9tTGVmdDogJ3NsaWRlLWluLWxlZnQnLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdzbGlkZS1vdXQtbGVmdCdcbiAgKi9cbiAgYW5pbU91dFRvTGVmdDogJ3NsaWRlLW91dC1sZWZ0JyxcbiAgLyoqXG4gICogQWxsb3dzIE9yYml0IHRvIGF1dG9tYXRpY2FsbHkgYW5pbWF0ZSBvbiBwYWdlIGxvYWQuXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgYXV0b1BsYXk6IHRydWUsXG4gIC8qKlxuICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgYmV0d2VlbiBzbGlkZSB0cmFuc2l0aW9uc1xuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSA1MDAwXG4gICovXG4gIHRpbWVyRGVsYXk6IDUwMDAsXG4gIC8qKlxuICAqIEFsbG93cyBPcmJpdCB0byBpbmZpbml0ZWx5IGxvb3AgdGhyb3VnaCB0aGUgc2xpZGVzXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgaW5maW5pdGVXcmFwOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgdGhlIE9yYml0IHNsaWRlcyB0byBiaW5kIHRvIHN3aXBlIGV2ZW50cyBmb3IgbW9iaWxlLCByZXF1aXJlcyBhbiBhZGRpdGlvbmFsIHV0aWwgbGlicmFyeVxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIHN3aXBlOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgdGhlIHRpbWluZyBmdW5jdGlvbiB0byBwYXVzZSBhbmltYXRpb24gb24gaG92ZXIuXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgT3JiaXQgdG8gYmluZCBrZXlib2FyZCBldmVudHMgdG8gdGhlIHNsaWRlciwgdG8gYW5pbWF0ZSBmcmFtZXMgd2l0aCBhcnJvdyBrZXlzXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgYWNjZXNzaWJsZTogdHJ1ZSxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIG9mIE9yYml0XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdvcmJpdC1jb250YWluZXInXG4gICovXG4gIGNvbnRhaW5lckNsYXNzOiAnb3JiaXQtY29udGFpbmVyJyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byBpbmRpdmlkdWFsIHNsaWRlcy5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LXNsaWRlJ1xuICAqL1xuICBzbGlkZUNsYXNzOiAnb3JiaXQtc2xpZGUnLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBidWxsZXQgY29udGFpbmVyLiBZb3UncmUgd2VsY29tZS5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LWJ1bGxldHMnXG4gICovXG4gIGJveE9mQnVsbGV0czogJ29yYml0LWJ1bGxldHMnLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBgbmV4dGAgbmF2aWdhdGlvbiBidXR0b24uXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdvcmJpdC1uZXh0J1xuICAqL1xuICBuZXh0Q2xhc3M6ICdvcmJpdC1uZXh0JyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYHByZXZpb3VzYCBuYXZpZ2F0aW9uIGJ1dHRvbi5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LXByZXZpb3VzJ1xuICAqL1xuICBwcmV2Q2xhc3M6ICdvcmJpdC1wcmV2aW91cycsXG4gIC8qKlxuICAqIEJvb2xlYW4gdG8gZmxhZyB0aGUganMgdG8gdXNlIG1vdGlvbiB1aSBjbGFzc2VzIG9yIG5vdC4gRGVmYXVsdCB0byB0cnVlIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0eS5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICB1c2VNVUk6IHRydWVcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihPcmJpdCwgJ09yYml0Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBSZXNwb25zaXZlTWVudSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5hY2NvcmRpb25NZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmRyaWxsZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5kcm9wZG93bi1tZW51XG4gKi9cblxuY2xhc3MgUmVzcG9uc2l2ZU1lbnUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHJlc3BvbnNpdmUgbWVudS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93biBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgdGhpcy5ydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgncmVzcG9uc2l2ZS1tZW51Jyk7XG4gICAgdGhpcy5jdXJyZW50TXEgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudFBsdWdpbiA9IG51bGw7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdSZXNwb25zaXZlTWVudScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBNZW51IGJ5IHBhcnNpbmcgdGhlIGNsYXNzZXMgZnJvbSB0aGUgJ2RhdGEtUmVzcG9uc2l2ZU1lbnUnIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICAvLyBUaGUgZmlyc3QgdGltZSBhbiBJbnRlcmNoYW5nZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQsIHRoaXMucnVsZXMgaXMgY29udmVydGVkIGZyb20gYSBzdHJpbmcgb2YgXCJjbGFzc2VzXCIgdG8gYW4gb2JqZWN0IG9mIHJ1bGVzXG4gICAgaWYgKHR5cGVvZiB0aGlzLnJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IHJ1bGVzVHJlZSA9IHt9O1xuXG4gICAgICAvLyBQYXJzZSBydWxlcyBmcm9tIFwiY2xhc3Nlc1wiIHB1bGxlZCBmcm9tIGRhdGEgYXR0cmlidXRlXG4gICAgICBsZXQgcnVsZXMgPSB0aGlzLnJ1bGVzLnNwbGl0KCcgJyk7XG5cbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBldmVyeSBydWxlIGZvdW5kXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBydWxlID0gcnVsZXNbaV0uc3BsaXQoJy0nKTtcbiAgICAgICAgbGV0IHJ1bGVTaXplID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVswXSA6ICdzbWFsbCc7XG4gICAgICAgIGxldCBydWxlUGx1Z2luID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVsxXSA6IHJ1bGVbMF07XG5cbiAgICAgICAgaWYgKE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dICE9PSBudWxsKSB7XG4gICAgICAgICAgcnVsZXNUcmVlW3J1bGVTaXplXSA9IE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMucnVsZXMgPSBydWxlc1RyZWU7XG4gICAgfVxuXG4gICAgaWYgKCEkLmlzRW1wdHlPYmplY3QodGhpcy5ydWxlcykpIHtcbiAgICAgIHRoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIE1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH0pO1xuICAgIC8vICQod2luZG93KS5vbigncmVzaXplLnpmLlJlc3BvbnNpdmVNZW51JywgZnVuY3Rpb24oKSB7XG4gICAgLy8gICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICAvLyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgc2NyZWVuIHdpZHRoIGFnYWluc3QgYXZhaWxhYmxlIG1lZGlhIHF1ZXJpZXMuIElmIHRoZSBtZWRpYSBxdWVyeSBoYXMgY2hhbmdlZCwgYW5kIHRoZSBwbHVnaW4gbmVlZGVkIGhhcyBjaGFuZ2VkLCB0aGUgcGx1Z2lucyB3aWxsIHN3YXAgb3V0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja01lZGlhUXVlcmllcygpIHtcbiAgICB2YXIgbWF0Y2hlZE1xLCBfdGhpcyA9IHRoaXM7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcnVsZSBhbmQgZmluZCB0aGUgbGFzdCBtYXRjaGluZyBydWxlXG4gICAgJC5lYWNoKHRoaXMucnVsZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KGtleSkpIHtcbiAgICAgICAgbWF0Y2hlZE1xID0ga2V5O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTm8gbWF0Y2g/IE5vIGRpY2VcbiAgICBpZiAoIW1hdGNoZWRNcSkgcmV0dXJuO1xuXG4gICAgLy8gUGx1Z2luIGFscmVhZHkgaW5pdGlhbGl6ZWQ/IFdlIGdvb2RcbiAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luIGluc3RhbmNlb2YgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbikgcmV0dXJuO1xuXG4gICAgLy8gUmVtb3ZlIGV4aXN0aW5nIHBsdWdpbi1zcGVjaWZpYyBDU1MgY2xhc3Nlc1xuICAgICQuZWFjaChNZW51UGx1Z2lucywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgX3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModmFsdWUuY3NzQ2xhc3MpO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIHRoZSBDU1MgY2xhc3MgZm9yIHRoZSBuZXcgcGx1Z2luXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLnJ1bGVzW21hdGNoZWRNcV0uY3NzQ2xhc3MpO1xuXG4gICAgLy8gQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBuZXcgcGx1Z2luXG4gICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbikgdGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKTtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBuZXcgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbih0aGlzLiRlbGVtZW50LCB7fSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IHBsdWdpbiBvbiB0aGlzIGVsZW1lbnQsIGFzIHdlbGwgYXMgdGhlIHdpbmRvdyByZXNpemUgaGFuZGxlciB0aGF0IHN3aXRjaGVzIHRoZSBwbHVnaW5zIG91dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgJCh3aW5kb3cpLm9mZignLnpmLlJlc3BvbnNpdmVNZW51Jyk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblJlc3BvbnNpdmVNZW51LmRlZmF1bHRzID0ge307XG5cbi8vIFRoZSBwbHVnaW4gbWF0Y2hlcyB0aGUgcGx1Z2luIGNsYXNzZXMgd2l0aCB0aGVzZSBwbHVnaW4gaW5zdGFuY2VzLlxudmFyIE1lbnVQbHVnaW5zID0ge1xuICBkcm9wZG93bjoge1xuICAgIGNzc0NsYXNzOiAnZHJvcGRvd24nLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snZHJvcGRvd24tbWVudSddIHx8IG51bGxcbiAgfSxcbiBkcmlsbGRvd246IHtcbiAgICBjc3NDbGFzczogJ2RyaWxsZG93bicsXG4gICAgcGx1Z2luOiBGb3VuZGF0aW9uLl9wbHVnaW5zWydkcmlsbGRvd24nXSB8fCBudWxsXG4gIH0sXG4gIGFjY29yZGlvbjoge1xuICAgIGNzc0NsYXNzOiAnYWNjb3JkaW9uLW1lbnUnLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snYWNjb3JkaW9uLW1lbnUnXSB8fCBudWxsXG4gIH1cbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXNwb25zaXZlTWVudSwgJ1Jlc3BvbnNpdmVNZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBSZXNwb25zaXZlVG9nZ2xlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlVG9nZ2xlXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqL1xuXG5jbGFzcyBSZXNwb25zaXZlVG9nZ2xlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVGFiIEJhci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlVG9nZ2xlI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGF0dGFjaCB0YWIgYmFyIGZ1bmN0aW9uYWxpdHkgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSB0YWIgYmFyIGJ5IGZpbmRpbmcgdGhlIHRhcmdldCBlbGVtZW50LCB0b2dnbGluZyBlbGVtZW50LCBhbmQgcnVubmluZyB1cGRhdGUoKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgdGFyZ2V0SUQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtdG9nZ2xlJyk7XG4gICAgaWYgKCF0YXJnZXRJRCkge1xuICAgICAgY29uc29sZS5lcnJvcignWW91ciB0YWIgYmFyIG5lZWRzIGFuIElEIG9mIGEgTWVudSBhcyB0aGUgdmFsdWUgb2YgZGF0YS10YWItYmFyLicpO1xuICAgIH1cblxuICAgIHRoaXMuJHRhcmdldE1lbnUgPSAkKGAjJHt0YXJnZXRJRH1gKTtcbiAgICB0aGlzLiR0b2dnbGVyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS10b2dnbGVdJyk7XG5cbiAgICB0aGlzLl91cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG5lY2Vzc2FyeSBldmVudCBoYW5kbGVycyBmb3IgdGhlIHRhYiBiYXIgdG8gd29yay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl91cGRhdGVNcUhhbmRsZXIgPSB0aGlzLl91cGRhdGUuYmluZCh0aGlzKTtcbiAgICBcbiAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3VwZGF0ZU1xSGFuZGxlcik7XG5cbiAgICB0aGlzLiR0b2dnbGVyLm9uKCdjbGljay56Zi5yZXNwb25zaXZlVG9nZ2xlJywgdGhpcy50b2dnbGVNZW51LmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgY3VycmVudCBtZWRpYSBxdWVyeSB0byBkZXRlcm1pbmUgaWYgdGhlIHRhYiBiYXIgc2hvdWxkIGJlIHZpc2libGUgb3IgaGlkZGVuLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGUoKSB7XG4gICAgLy8gTW9iaWxlXG4gICAgaWYgKCFGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuaGlkZUZvcikpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuc2hvdygpO1xuICAgICAgdGhpcy4kdGFyZ2V0TWVudS5oaWRlKCk7XG4gICAgfVxuXG4gICAgLy8gRGVza3RvcFxuICAgIGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKCk7XG4gICAgICB0aGlzLiR0YXJnZXRNZW51LnNob3coKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgZWxlbWVudCBhdHRhY2hlZCB0byB0aGUgdGFiIGJhci4gVGhlIHRvZ2dsZSBvbmx5IGhhcHBlbnMgaWYgdGhlIHNjcmVlbiBpcyBzbWFsbCBlbm91Z2ggdG8gYWxsb3cgaXQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAqL1xuICB0b2dnbGVNZW51KCkgeyAgIFxuICAgIGlmICghRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLmhpZGVGb3IpKSB7XG4gICAgICB0aGlzLiR0YXJnZXRNZW51LnRvZ2dsZSgwKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBlbGVtZW50IGF0dGFjaGVkIHRvIHRoZSB0YWIgYmFyIHRvZ2dsZXMuXG4gICAgICAgKiBAZXZlbnQgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgfVxuICB9O1xuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgdGhpcy4kdG9nZ2xlci5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgXG4gICAgJCh3aW5kb3cpLm9mZignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fdXBkYXRlTXFIYW5kbGVyKTtcbiAgICBcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBicmVha3BvaW50IGFmdGVyIHdoaWNoIHRoZSBtZW51IGlzIGFsd2F5cyBzaG93biwgYW5kIHRoZSB0YWIgYmFyIGlzIGhpZGRlbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnbWVkaXVtJ1xuICAgKi9cbiAgaGlkZUZvcjogJ21lZGl1bSdcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXNwb25zaXZlVG9nZ2xlLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogUmV2ZWFsIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXZlYWxcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uIGlmIHVzaW5nIGFuaW1hdGlvbnNcbiAqL1xuXG5jbGFzcyBSZXZlYWwge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXZlYWwuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGZvciB0aGUgbW9kYWwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9uYWwgcGFyYW1ldGVycy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgUmV2ZWFsLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmV2ZWFsJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignUmV2ZWFsJywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZScsXG4gICAgICAnVEFCJzogJ3RhYl9mb3J3YXJkJyxcbiAgICAgICdTSElGVF9UQUInOiAndGFiX2JhY2t3YXJkJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBtb2RhbCBieSBhZGRpbmcgdGhlIG92ZXJsYXkgYW5kIGNsb3NlIGJ1dHRvbnMsIChpZiBzZWxlY3RlZCkuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLmlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpO1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLmNhY2hlZCA9IHttcTogRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmN1cnJlbnR9O1xuICAgIHRoaXMuaXNNb2JpbGUgPSBtb2JpbGVTbmlmZigpO1xuXG4gICAgdGhpcy4kYW5jaG9yID0gJChgW2RhdGEtb3Blbj1cIiR7dGhpcy5pZH1cIl1gKS5sZW5ndGggPyAkKGBbZGF0YS1vcGVuPVwiJHt0aGlzLmlkfVwiXWApIDogJChgW2RhdGEtdG9nZ2xlPVwiJHt0aGlzLmlkfVwiXWApO1xuICAgIHRoaXMuJGFuY2hvci5hdHRyKHtcbiAgICAgICdhcmlhLWNvbnRyb2xzJzogdGhpcy5pZCxcbiAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICd0YWJpbmRleCc6IDBcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbiB8fCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmdWxsJykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5mdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgIHRoaXMub3B0aW9ucy5vdmVybGF5ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiAhdGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheSA9IHRoaXMuX21ha2VPdmVybGF5KHRoaXMuaWQpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ2RpYWxvZycsXG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICdkYXRhLXlldGktYm94JzogdGhpcy5pZCxcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogdGhpcy5pZFxuICAgIH0pO1xuXG4gICAgaWYodGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5kZXRhY2goKS5hcHBlbmRUbyh0aGlzLiRvdmVybGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5kZXRhY2goKS5hcHBlbmRUbygkKCdib2R5JykpO1xuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnd2l0aG91dC1vdmVybGF5Jyk7XG4gICAgfVxuICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmsgJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICggYCMke3RoaXMuaWR9YCkpIHtcbiAgICAgICQod2luZG93KS5vbmUoJ2xvYWQuemYucmV2ZWFsJywgdGhpcy5vcGVuLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIG92ZXJsYXkgZGl2IHRvIGRpc3BsYXkgYmVoaW5kIHRoZSBtb2RhbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tYWtlT3ZlcmxheShpZCkge1xuICAgIHZhciAkb3ZlcmxheSA9ICQoJzxkaXY+PC9kaXY+JylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdyZXZlYWwtb3ZlcmxheScpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbygnYm9keScpO1xuICAgIHJldHVybiAkb3ZlcmxheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHBvc2l0aW9uIG9mIG1vZGFsXG4gICAqIFRPRE86ICBGaWd1cmUgb3V0IGlmIHdlIGFjdHVhbGx5IG5lZWQgdG8gY2FjaGUgdGhlc2UgdmFsdWVzIG9yIGlmIGl0IGRvZXNuJ3QgbWF0dGVyXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgdmFyIHdpZHRoID0gdGhpcy4kZWxlbWVudC5vdXRlcldpZHRoKCk7XG4gICAgdmFyIG91dGVyV2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy4kZWxlbWVudC5vdXRlckhlaWdodCgpO1xuICAgIHZhciBvdXRlckhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcbiAgICB2YXIgbGVmdCwgdG9wO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuaE9mZnNldCA9PT0gJ2F1dG8nKSB7XG4gICAgICBsZWZ0ID0gcGFyc2VJbnQoKG91dGVyV2lkdGggLSB3aWR0aCkgLyAyLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMuaE9mZnNldCwgMTApO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnZPZmZzZXQgPT09ICdhdXRvJykge1xuICAgICAgaWYgKGhlaWdodCA+IG91dGVySGVpZ2h0KSB7XG4gICAgICAgIHRvcCA9IHBhcnNlSW50KE1hdGgubWluKDEwMCwgb3V0ZXJIZWlnaHQgLyAxMCksIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvcCA9IHBhcnNlSW50KChvdXRlckhlaWdodCAtIGhlaWdodCkgLyA0LCAxMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IHBhcnNlSW50KHRoaXMub3B0aW9ucy52T2Zmc2V0LCAxMCk7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHt0b3A6IHRvcCArICdweCd9KTtcbiAgICAvLyBvbmx5IHdvcnJ5IGFib3V0IGxlZnQgaWYgd2UgZG9uJ3QgaGF2ZSBhbiBvdmVybGF5IG9yIHdlIGhhdmVhICBob3Jpem9udGFsIG9mZnNldCxcbiAgICAvLyBvdGhlcndpc2Ugd2UncmUgcGVyZmVjdGx5IGluIHRoZSBtaWRkbGVcbiAgICBpZighdGhpcy4kb3ZlcmxheSB8fCAodGhpcy5vcHRpb25zLmhPZmZzZXQgIT09ICdhdXRvJykpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtsZWZ0OiBsZWZ0ICsgJ3B4J30pO1xuICAgICAgdGhpcy4kZWxlbWVudC5jc3Moe21hcmdpbjogJzBweCd9KTtcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgbW9kYWwuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogKGV2ZW50LCAkZWxlbWVudCkgPT4ge1xuICAgICAgICBpZiAoKGV2ZW50LnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0pIHx8XG4gICAgICAgICAgICAoJChldmVudC50YXJnZXQpLnBhcmVudHMoJ1tkYXRhLWNsb3NhYmxlXScpWzBdID09PSAkZWxlbWVudCkpIHsgLy8gb25seSBjbG9zZSByZXZlYWwgd2hlbiBpdCdzIGV4cGxpY2l0bHkgY2FsbGVkXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2UuYXBwbHkodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgdGhpcy4kYW5jaG9yLm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUud2hpY2ggPT09IDEzIHx8IGUud2hpY2ggPT09IDMyKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiB0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5vZmYoJy56Zi5yZXZlYWwnKS5vbignY2xpY2suemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8IFxuICAgICAgICAgICQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSB8fCBcbiAgICAgICAgICAgICEkLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHsgXG4gICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAkKHdpbmRvdykub24oYHBvcHN0YXRlLnpmLnJldmVhbDoke3RoaXMuaWR9YCwgdGhpcy5faGFuZGxlU3RhdGUuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgbW9kYWwgbWV0aG9kcyBvbiBiYWNrL2ZvcndhcmQgYnV0dG9uIGNsaWNrcyBvciBhbnkgb3RoZXIgZXZlbnQgdGhhdCB0cmlnZ2VycyBwb3BzdGF0ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9oYW5kbGVTdGF0ZShlKSB7XG4gICAgaWYod2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICggJyMnICsgdGhpcy5pZCkgJiYgIXRoaXMuaXNBY3RpdmUpeyB0aGlzLm9wZW4oKTsgfVxuICAgIGVsc2V7IHRoaXMuY2xvc2UoKTsgfVxuICB9XG5cblxuICAvKipcbiAgICogT3BlbnMgdGhlIG1vZGFsIGNvbnRyb2xsZWQgYnkgYHRoaXMuJGFuY2hvcmAsIGFuZCBjbG9zZXMgYWxsIG90aGVycyBieSBkZWZhdWx0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFJldmVhbCNjbG9zZW1lXG4gICAqIEBmaXJlcyBSZXZlYWwjb3BlblxuICAgKi9cbiAgb3BlbigpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICB2YXIgaGFzaCA9IGAjJHt0aGlzLmlkfWA7XG5cbiAgICAgIGlmICh3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGhhc2gpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgLy8gTWFrZSBlbGVtZW50cyBpbnZpc2libGUsIGJ1dCByZW1vdmUgZGlzcGxheTogbm9uZSBzbyB3ZSBjYW4gZ2V0IHNpemUgYW5kIHBvc2l0aW9uaW5nXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAuY3NzKHsgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJyB9KVxuICAgICAgICAuc2hvdygpXG4gICAgICAgIC5zY3JvbGxUb3AoMCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICB0aGlzLiRvdmVybGF5LmNzcyh7J3Zpc2liaWxpdHknOiAnaGlkZGVuJ30pLnNob3coKTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigpO1xuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmhpZGUoKVxuICAgICAgLmNzcyh7ICd2aXNpYmlsaXR5JzogJycgfSk7XG5cbiAgICBpZih0aGlzLiRvdmVybGF5KSB7XG4gICAgICB0aGlzLiRvdmVybGF5LmNzcyh7J3Zpc2liaWxpdHknOiAnJ30pLmhpZGUoKTtcbiAgICAgIGlmKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2Zhc3QnKSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdmYXN0Jyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ3Nsb3cnKSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdzbG93Jyk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tdWx0aXBsZU9wZW5lZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIG1vZGFsIG9wZW5zLlxuICAgICAgICogQ2xvc2VzIGFueSBvdGhlciBtb2RhbHMgdGhhdCBhcmUgY3VycmVudGx5IG9wZW5cbiAgICAgICAqIEBldmVudCBSZXZlYWwjY2xvc2VtZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYucmV2ZWFsJywgdGhpcy5pZCk7XG4gICAgfVxuICAgIC8vIE1vdGlvbiBVSSBtZXRob2Qgb2YgcmV2ZWFsXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb25Jbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW9uRm9jdXMoKXtcbiAgICAgICAgX3RoaXMuJGVsZW1lbnRcbiAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZSxcbiAgICAgICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kb3ZlcmxheSwgJ2ZhZGUtaW4nKTtcbiAgICAgIH1cbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbih0aGlzLiRlbGVtZW50LCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uSW4sICgpID0+IHtcbiAgICAgICAgdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcbiAgICAgICAgYWZ0ZXJBbmltYXRpb25Gb2N1cygpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGpRdWVyeSBtZXRob2Qgb2YgcmV2ZWFsXG4gICAgZWxzZSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5zaG93KDApO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5zaG93KHRoaXMub3B0aW9ucy5zaG93RGVsYXkpO1xuICAgIH1cblxuICAgIC8vIGhhbmRsZSBhY2Nlc3NpYmlsaXR5XG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmF0dHIoe1xuICAgICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZSxcbiAgICAgICAgJ3RhYmluZGV4JzogLTFcbiAgICAgIH0pXG4gICAgICAuZm9jdXMoKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIG1vZGFsIGhhcyBzdWNjZXNzZnVsbHkgb3BlbmVkLlxuICAgICAqIEBldmVudCBSZXZlYWwjb3BlblxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb3Blbi56Zi5yZXZlYWwnKTtcblxuICAgIGlmICh0aGlzLmlzTW9iaWxlKSB7XG4gICAgICB0aGlzLm9yaWdpbmFsU2Nyb2xsUG9zID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgJCgnaHRtbCwgYm9keScpLmFkZENsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuX2V4dHJhSGFuZGxlcnMoKTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV4dHJhIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgYm9keSBhbmQgd2luZG93IGlmIG5lY2Vzc2FyeS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9leHRyYUhhbmRsZXJzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLm92ZXJsYXkgJiYgdGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiAhdGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4pIHtcbiAgICAgICQoJ2JvZHknKS5vbignY2xpY2suemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8IFxuICAgICAgICAgICQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSB8fCBcbiAgICAgICAgICAgICEkLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICQod2luZG93KS5vbigna2V5ZG93bi56Zi5yZXZlYWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGxvY2sgZm9jdXMgd2l0aGluIG1vZGFsIHdoaWxlIHRhYmJpbmdcbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcbiAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgIHRhYl9mb3J3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmZpbmQoJzpmb2N1cycpLmlzKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmVxKC0xKSkpIHsgLy8gbGVmdCBtb2RhbCBkb3dud2FyZHMsIHNldHRpbmcgZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICAgICAgX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoID09PSAwKSB7IC8vIG5vIGZvY3VzYWJsZSBlbGVtZW50cyBpbnNpZGUgdGhlIG1vZGFsIGF0IGFsbCwgcHJldmVudCB0YWJiaW5nIGluIGdlbmVyYWxcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGFiX2JhY2t3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmZpbmQoJzpmb2N1cycpLmlzKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmVxKDApKSB8fCBfdGhpcy4kZWxlbWVudC5pcygnOmZvY3VzJykpIHsgLy8gbGVmdCBtb2RhbCB1cHdhcmRzLCBzZXR0aW5nIGZvY3VzIHRvIGxhc3QgZWxlbWVudFxuICAgICAgICAgICAgX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpLmZvY3VzKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCA9PT0gMCkgeyAvLyBubyBmb2N1c2FibGUgZWxlbWVudHMgaW5zaWRlIHRoZSBtb2RhbCBhdCBhbGwsIHByZXZlbnQgdGFiYmluZyBpbiBnZW5lcmFsXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyhfdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1jbG9zZV0nKSkpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IC8vIHNldCBmb2N1cyBiYWNrIHRvIGFuY2hvciBpZiBjbG9zZSBidXR0b24gaGFzIGJlZW4gYWN0aXZhdGVkXG4gICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJHRhcmdldC5pcyhfdGhpcy5mb2N1c2FibGVFbGVtZW50cykpIHsgLy8gZG9udCd0IHRyaWdnZXIgaWYgYWN1YWwgZWxlbWVudCBoYXMgZm9jdXMgKGkuZS4gaW5wdXRzLCBsaW5rcywgLi4uKVxuICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbihwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBtb2RhbC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBSZXZlYWwjY2xvc2VkXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIE1vdGlvbiBVSSBtZXRob2Qgb2YgaGlkaW5nXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJG92ZXJsYXksICdmYWRlLW91dCcsIGZpbmlzaFVwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmaW5pc2hVcCgpO1xuICAgICAgfVxuXG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsIHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQpO1xuICAgIH1cbiAgICAvLyBqUXVlcnkgbWV0aG9kIG9mIGhpZGluZ1xuICAgIGVsc2Uge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgwLCBmaW5pc2hVcCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZmluaXNoVXAoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKHRoaXMub3B0aW9ucy5oaWRlRGVsYXkpO1xuICAgIH1cblxuICAgIC8vIENvbmRpdGlvbmFscyB0byByZW1vdmUgZXh0cmEgZXZlbnQgbGlzdGVuZXJzIGFkZGVkIG9uIG9wZW5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICQod2luZG93KS5vZmYoJ2tleWRvd24uemYucmV2ZWFsJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiB0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gICAgICAkKCdib2R5Jykub2ZmKCdjbGljay56Zi5yZXZlYWwnKTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZigna2V5ZG93bi56Zi5yZXZlYWwnKTtcblxuICAgIGZ1bmN0aW9uIGZpbmlzaFVwKCkge1xuICAgICAgaWYgKF90aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgICQoJ2h0bWwsIGJvZHknKS5yZW1vdmVDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICAgICAgaWYoX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpIHtcbiAgICAgICAgICAkKCdib2R5Jykuc2Nyb2xsVG9wKF90aGlzLm9yaWdpbmFsU2Nyb2xsUG9zKTtcbiAgICAgICAgICBfdGhpcy5vcmlnaW5hbFNjcm9sbFBvcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgIC8qKlxuICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtb2RhbCBpcyBkb25lIGNsb3NpbmcuXG4gICAgICAqIEBldmVudCBSZXZlYWwjY2xvc2VkXG4gICAgICAqL1xuICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VkLnpmLnJldmVhbCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVzZXRzIHRoZSBtb2RhbCBjb250ZW50XG4gICAgKiBUaGlzIHByZXZlbnRzIGEgcnVubmluZyB2aWRlbyB0byBrZWVwIGdvaW5nIGluIHRoZSBiYWNrZ3JvdW5kXG4gICAgKi9cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc2V0T25DbG9zZSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5odG1sKHRoaXMuJGVsZW1lbnQuaHRtbCgpKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgIGlmIChfdGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgaWYgKHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKFwiXCIsIGRvY3VtZW50LnRpdGxlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgIH0gZWxzZSB7XG4gICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnO1xuICAgICAgIH1cbiAgICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2VkIHN0YXRlIG9mIGEgbW9kYWwuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYSBtb2RhbC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5hcHBlbmRUbygkKCdib2R5JykpOyAvLyBtb3ZlICRlbGVtZW50IG91dHNpZGUgb2YgJG92ZXJsYXkgdG8gcHJldmVudCBlcnJvciB1bnJlZ2lzdGVyUGx1Z2luKClcbiAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgpLm9mZigpLnJlbW92ZSgpO1xuICAgIH1cbiAgICB0aGlzLiRlbGVtZW50LmhpZGUoKS5vZmYoKTtcbiAgICB0aGlzLiRhbmNob3Iub2ZmKCcuemYnKTtcbiAgICAkKHdpbmRvdykub2ZmKGAuemYucmV2ZWFsOiR7dGhpcy5pZH1gKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfTtcbn1cblxuUmV2ZWFsLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogTW90aW9uLVVJIGNsYXNzIHRvIHVzZSBmb3IgYW5pbWF0ZWQgZWxlbWVudHMuIElmIG5vbmUgdXNlZCwgZGVmYXVsdHMgdG8gc2ltcGxlIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnc2xpZGUtaW4tbGVmdCdcbiAgICovXG4gIGFuaW1hdGlvbkluOiAnJyxcbiAgLyoqXG4gICAqIE1vdGlvbi1VSSBjbGFzcyB0byB1c2UgZm9yIGFuaW1hdGVkIGVsZW1lbnRzLiBJZiBub25lIHVzZWQsIGRlZmF1bHRzIHRvIHNpbXBsZSBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3NsaWRlLW91dC1yaWdodCdcbiAgICovXG4gIGFuaW1hdGlvbk91dDogJycsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gZGVsYXkgdGhlIG9wZW5pbmcgb2YgYSBtb2RhbCBhZnRlciBhIGNsaWNrIGlmIG5vIGFuaW1hdGlvbiB1c2VkLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICBzaG93RGVsYXk6IDAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gZGVsYXkgdGhlIGNsb3Npbmcgb2YgYSBtb2RhbCBhZnRlciBhIGNsaWNrIGlmIG5vIGFuaW1hdGlvbiB1c2VkLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICBoaWRlRGVsYXk6IDAsXG4gIC8qKlxuICAgKiBBbGxvd3MgYSBjbGljayBvbiB0aGUgYm9keS9vdmVybGF5IHRvIGNsb3NlIHRoZSBtb2RhbC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGNsb3NlIGlmIHRoZSB1c2VyIHByZXNzZXMgdGhlIGBFU0NBUEVgIGtleS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbG9zZU9uRXNjOiB0cnVlLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgYWxsb3dzIG11bHRpcGxlIG1vZGFscyB0byBiZSBkaXNwbGF5ZWQgYXQgb25jZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgbXVsdGlwbGVPcGVuZWQ6IGZhbHNlLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIG1vZGFsIHNob3VsZCBwdXNoIGRvd24gZnJvbSB0aGUgdG9wIG9mIHRoZSBzY3JlZW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgYXV0b1xuICAgKi9cbiAgdk9mZnNldDogJ2F1dG8nLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIG1vZGFsIHNob3VsZCBwdXNoIGluIGZyb20gdGhlIHNpZGUgb2YgdGhlIHNjcmVlbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBhdXRvXG4gICAqL1xuICBoT2Zmc2V0OiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGJlIGZ1bGxzY3JlZW4sIGNvbXBsZXRlbHkgYmxvY2tpbmcgb3V0IHRoZSByZXN0IG9mIHRoZSB2aWV3LiBKUyBjaGVja3MgZm9yIHRoaXMgYXMgd2VsbC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZnVsbFNjcmVlbjogZmFsc2UsXG4gIC8qKlxuICAgKiBQZXJjZW50YWdlIG9mIHNjcmVlbiBoZWlnaHQgdGhlIG1vZGFsIHNob3VsZCBwdXNoIHVwIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMFxuICAgKi9cbiAgYnRtT2Zmc2V0UGN0OiAxMCxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gZ2VuZXJhdGUgYW4gb3ZlcmxheSBkaXYsIHdoaWNoIHdpbGwgY292ZXIgdGhlIHZpZXcgd2hlbiBtb2RhbCBvcGVucy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBvdmVybGF5OiB0cnVlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byByZW1vdmUgYW5kIHJlaW5qZWN0IG1hcmt1cCBvbiBjbG9zZS4gU2hvdWxkIGJlIHRydWUgaWYgdXNpbmcgdmlkZW8gZWxlbWVudHMgdy9vIHVzaW5nIHByb3ZpZGVyJ3MgYXBpLCBvdGhlcndpc2UsIHZpZGVvcyB3aWxsIGNvbnRpbnVlIHRvIHBsYXkgaW4gdGhlIGJhY2tncm91bmQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIHJlc2V0T25DbG9zZTogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGFsdGVyIHRoZSB1cmwgb24gb3Blbi9jbG9zZSwgYW5kIGFsbG93cyB0aGUgdXNlIG9mIHRoZSBgYmFja2AgYnV0dG9uIHRvIGNsb3NlIG1vZGFscy4gQUxTTywgYWxsb3dzIGEgbW9kYWwgdG8gYXV0by1tYW5pYWNhbGx5IG9wZW4gb24gcGFnZSBsb2FkIElGIHRoZSBoYXNoID09PSB0aGUgbW9kYWwncyB1c2VyLXNldCBpZC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGVlcExpbms6IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oUmV2ZWFsLCAnUmV2ZWFsJyk7XG5cbmZ1bmN0aW9uIGlQaG9uZVNuaWZmKCkge1xuICByZXR1cm4gL2lQKGFkfGhvbmV8b2QpLipPUy8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG5cbmZ1bmN0aW9uIGFuZHJvaWRTbmlmZigpIHtcbiAgcmV0dXJuIC9BbmRyb2lkLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbn1cblxuZnVuY3Rpb24gbW9iaWxlU25pZmYoKSB7XG4gIHJldHVybiBpUGhvbmVTbmlmZigpIHx8IGFuZHJvaWRTbmlmZigpO1xufVxuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogU2xpZGVyIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5zbGlkZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRvdWNoXG4gKi9cblxuY2xhc3MgU2xpZGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBkcmlsbGRvd24gbWVudS5cbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgU2xpZGVyLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdTbGlkZXInKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdTbGlkZXInLCB7XG4gICAgICAnbHRyJzoge1xuICAgICAgICAnQVJST1dfUklHSFQnOiAnaW5jcmVhc2UnLFxuICAgICAgICAnQVJST1dfVVAnOiAnaW5jcmVhc2UnLFxuICAgICAgICAnQVJST1dfRE9XTic6ICdkZWNyZWFzZScsXG4gICAgICAgICdBUlJPV19MRUZUJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX1JJR0hUJzogJ2luY3JlYXNlX2Zhc3QnLFxuICAgICAgICAnU0hJRlRfQVJST1dfVVAnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICdTSElGVF9BUlJPV19ET1dOJzogJ2RlY3JlYXNlX2Zhc3QnLFxuICAgICAgICAnU0hJRlRfQVJST1dfTEVGVCc6ICdkZWNyZWFzZV9mYXN0J1xuICAgICAgfSxcbiAgICAgICdydGwnOiB7XG4gICAgICAgICdBUlJPV19MRUZUJzogJ2luY3JlYXNlJyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX0xFRlQnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICdTSElGVF9BUlJPV19SSUdIVCc6ICdkZWNyZWFzZV9mYXN0J1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpbGl6ZXMgdGhlIHBsdWdpbiBieSByZWFkaW5nL3NldHRpbmcgYXR0cmlidXRlcywgY3JlYXRpbmcgY29sbGVjdGlvbnMgYW5kIHNldHRpbmcgdGhlIGluaXRpYWwgcG9zaXRpb24gb2YgdGhlIGhhbmRsZShzKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLmlucHV0cyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKTtcbiAgICB0aGlzLmhhbmRsZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXNsaWRlci1oYW5kbGVdJyk7XG5cbiAgICB0aGlzLiRoYW5kbGUgPSB0aGlzLmhhbmRsZXMuZXEoMCk7XG4gICAgdGhpcy4kaW5wdXQgPSB0aGlzLmlucHV0cy5sZW5ndGggPyB0aGlzLmlucHV0cy5lcSgwKSA6ICQoYCMke3RoaXMuJGhhbmRsZS5hdHRyKCdhcmlhLWNvbnRyb2xzJyl9YCk7XG4gICAgdGhpcy4kZmlsbCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc2xpZGVyLWZpbGxdJykuY3NzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJywgMCk7XG5cbiAgICB2YXIgaXNEYmwgPSBmYWxzZSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmlucHV0cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuaW5wdXRzID0gJCgpLmFkZCh0aGlzLiRpbnB1dCk7XG4gICAgICB0aGlzLm9wdGlvbnMuYmluZGluZyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX3NldEluaXRBdHRyKDApO1xuICAgIHRoaXMuX2V2ZW50cyh0aGlzLiRoYW5kbGUpO1xuXG4gICAgaWYgKHRoaXMuaGFuZGxlc1sxXSkge1xuICAgICAgdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuJGhhbmRsZTIgPSB0aGlzLmhhbmRsZXMuZXEoMSk7XG4gICAgICB0aGlzLiRpbnB1dDIgPSB0aGlzLmlucHV0cy5sZW5ndGggPiAxID8gdGhpcy5pbnB1dHMuZXEoMSkgOiAkKGAjJHt0aGlzLiRoYW5kbGUyLmF0dHIoJ2FyaWEtY29udHJvbHMnKX1gKTtcblxuICAgICAgaWYgKCF0aGlzLmlucHV0c1sxXSkge1xuICAgICAgICB0aGlzLmlucHV0cyA9IHRoaXMuaW5wdXRzLmFkZCh0aGlzLiRpbnB1dDIpO1xuICAgICAgfVxuICAgICAgaXNEYmwgPSB0cnVlO1xuXG4gICAgICB0aGlzLl9zZXRIYW5kbGVQb3ModGhpcy4kaGFuZGxlLCB0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0LCB0cnVlLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF90aGlzLiRoYW5kbGUyLCBfdGhpcy5vcHRpb25zLmluaXRpYWxFbmQsIHRydWUpO1xuICAgICAgfSk7XG4gICAgICAvLyB0aGlzLiRoYW5kbGUudHJpZ2dlckhhbmRsZXIoJ2NsaWNrLnpmLnNsaWRlcicpO1xuICAgICAgdGhpcy5fc2V0SW5pdEF0dHIoMSk7XG4gICAgICB0aGlzLl9ldmVudHModGhpcy4kaGFuZGxlMik7XG4gICAgfVxuXG4gICAgaWYgKCFpc0RibCkge1xuICAgICAgdGhpcy5fc2V0SGFuZGxlUG9zKHRoaXMuJGhhbmRsZSwgdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBzZWxlY3RlZCBoYW5kbGUgYW5kIGZpbGwgYmFyLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRobmRsIC0gdGhlIHNlbGVjdGVkIGhhbmRsZSB0byBtb3ZlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gbG9jYXRpb24gLSBmbG9hdGluZyBwb2ludCBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcyBvZiB0aGUgc2xpZGVyIGJhci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIG9uIGNvbXBsZXRpb24uXG4gICAqIEBmaXJlcyBTbGlkZXIjbW92ZWRcbiAgICogQGZpcmVzIFNsaWRlciNjaGFuZ2VkXG4gICAqL1xuICBfc2V0SGFuZGxlUG9zKCRobmRsLCBsb2NhdGlvbiwgbm9JbnZlcnQsIGNiKSB7XG4gICAgLy8gZG9uJ3QgbW92ZSBpZiB0aGUgc2xpZGVyIGhhcyBiZWVuIGRpc2FibGVkIHNpbmNlIGl0cyBpbml0aWFsaXphdGlvblxuICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMub3B0aW9ucy5kaXNhYmxlZENsYXNzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL21pZ2h0IG5lZWQgdG8gYWx0ZXIgdGhhdCBzbGlnaHRseSBmb3IgYmFycyB0aGF0IHdpbGwgaGF2ZSBvZGQgbnVtYmVyIHNlbGVjdGlvbnMuXG4gICAgbG9jYXRpb24gPSBwYXJzZUZsb2F0KGxvY2F0aW9uKTsvL29uIGlucHV0IGNoYW5nZSBldmVudHMsIGNvbnZlcnQgc3RyaW5nIHRvIG51bWJlci4uLmdydW1ibGUuXG5cbiAgICAvLyBwcmV2ZW50IHNsaWRlciBmcm9tIHJ1bm5pbmcgb3V0IG9mIGJvdW5kcywgaWYgdmFsdWUgZXhjZWVkcyB0aGUgbGltaXRzIHNldCB0aHJvdWdoIG9wdGlvbnMsIG92ZXJyaWRlIHRoZSB2YWx1ZSB0byBtaW4vbWF4XG4gICAgaWYgKGxvY2F0aW9uIDwgdGhpcy5vcHRpb25zLnN0YXJ0KSB7IGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLnN0YXJ0OyB9XG4gICAgZWxzZSBpZiAobG9jYXRpb24gPiB0aGlzLm9wdGlvbnMuZW5kKSB7IGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLmVuZDsgfVxuXG4gICAgdmFyIGlzRGJsID0gdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkO1xuXG4gICAgaWYgKGlzRGJsKSB7IC8vdGhpcyBibG9jayBpcyB0byBwcmV2ZW50IDIgaGFuZGxlcyBmcm9tIGNyb3NzaW5nIGVhY2hvdGhlci4gQ291bGQvc2hvdWxkIGJlIGltcHJvdmVkLlxuICAgICAgaWYgKHRoaXMuaGFuZGxlcy5pbmRleCgkaG5kbCkgPT09IDApIHtcbiAgICAgICAgdmFyIGgyVmFsID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGUyLmF0dHIoJ2FyaWEtdmFsdWVub3cnKSk7XG4gICAgICAgIGxvY2F0aW9uID0gbG9jYXRpb24gPj0gaDJWYWwgPyBoMlZhbCAtIHRoaXMub3B0aW9ucy5zdGVwIDogbG9jYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaDFWYWwgPSBwYXJzZUZsb2F0KHRoaXMuJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgICAgICBsb2NhdGlvbiA9IGxvY2F0aW9uIDw9IGgxVmFsID8gaDFWYWwgKyB0aGlzLm9wdGlvbnMuc3RlcCA6IGxvY2F0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vdGhpcyBpcyBmb3Igc2luZ2xlLWhhbmRsZWQgdmVydGljYWwgc2xpZGVycywgaXQgYWRqdXN0cyB0aGUgdmFsdWUgdG8gYWNjb3VudCBmb3IgdGhlIHNsaWRlciBiZWluZyBcInVwc2lkZS1kb3duXCJcbiAgICAvL2ZvciBjbGljayBhbmQgZHJhZyBldmVudHMsIGl0J3Mgd2VpcmQgZHVlIHRvIHRoZSBzY2FsZSgtMSwgMSkgY3NzIHByb3BlcnR5XG4gICAgaWYgKHRoaXMub3B0aW9ucy52ZXJ0aWNhbCAmJiAhbm9JbnZlcnQpIHtcbiAgICAgIGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLmVuZCAtIGxvY2F0aW9uO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHZlcnQgPSB0aGlzLm9wdGlvbnMudmVydGljYWwsXG4gICAgICAgIGhPclcgPSB2ZXJ0ID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBsT3JUID0gdmVydCA/ICd0b3AnIDogJ2xlZnQnLFxuICAgICAgICBoYW5kbGVEaW0gPSAkaG5kbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtoT3JXXSxcbiAgICAgICAgZWxlbURpbSA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaE9yV10sXG4gICAgICAgIC8vcGVyY2VudGFnZSBvZiBiYXIgbWluL21heCB2YWx1ZSBiYXNlZCBvbiBjbGljayBvciBkcmFnIHBvaW50XG4gICAgICAgIHBjdE9mQmFyID0gcGVyY2VudChsb2NhdGlvbiAtIHRoaXMub3B0aW9ucy5zdGFydCwgdGhpcy5vcHRpb25zLmVuZCAtIHRoaXMub3B0aW9ucy5zdGFydCkudG9GaXhlZCgyKSxcbiAgICAgICAgLy9udW1iZXIgb2YgYWN0dWFsIHBpeGVscyB0byBzaGlmdCB0aGUgaGFuZGxlLCBiYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBvYnRhaW5lZCBhYm92ZVxuICAgICAgICBweFRvTW92ZSA9IChlbGVtRGltIC0gaGFuZGxlRGltKSAqIHBjdE9mQmFyLFxuICAgICAgICAvL3BlcmNlbnRhZ2Ugb2YgYmFyIHRvIHNoaWZ0IHRoZSBoYW5kbGVcbiAgICAgICAgbW92ZW1lbnQgPSAocGVyY2VudChweFRvTW92ZSwgZWxlbURpbSkgKiAxMDApLnRvRml4ZWQodGhpcy5vcHRpb25zLmRlY2ltYWwpO1xuICAgICAgICAvL2ZpeGluZyB0aGUgZGVjaW1hbCB2YWx1ZSBmb3IgdGhlIGxvY2F0aW9uIG51bWJlciwgaXMgcGFzc2VkIHRvIG90aGVyIG1ldGhvZHMgYXMgYSBmaXhlZCBmbG9hdGluZy1wb2ludCB2YWx1ZVxuICAgICAgICBsb2NhdGlvbiA9IHBhcnNlRmxvYXQobG9jYXRpb24udG9GaXhlZCh0aGlzLm9wdGlvbnMuZGVjaW1hbCkpO1xuICAgICAgICAvLyBkZWNsYXJlIGVtcHR5IG9iamVjdCBmb3IgY3NzIGFkanVzdG1lbnRzLCBvbmx5IHVzZWQgd2l0aCAyIGhhbmRsZWQtc2xpZGVyc1xuICAgIHZhciBjc3MgPSB7fTtcblxuICAgIHRoaXMuX3NldFZhbHVlcygkaG5kbCwgbG9jYXRpb24pO1xuXG4gICAgLy8gVE9ETyB1cGRhdGUgdG8gY2FsY3VsYXRlIGJhc2VkIG9uIHZhbHVlcyBzZXQgdG8gcmVzcGVjdGl2ZSBpbnB1dHM/P1xuICAgIGlmIChpc0RibCkge1xuICAgICAgdmFyIGlzTGVmdEhuZGwgPSB0aGlzLmhhbmRsZXMuaW5kZXgoJGhuZGwpID09PSAwLFxuICAgICAgICAgIC8vZW1wdHkgdmFyaWFibGUsIHdpbGwgYmUgdXNlZCBmb3IgbWluLWhlaWdodC93aWR0aCBmb3IgZmlsbCBiYXJcbiAgICAgICAgICBkaW0sXG4gICAgICAgICAgLy9wZXJjZW50YWdlIHcvaCBvZiB0aGUgaGFuZGxlIGNvbXBhcmVkIHRvIHRoZSBzbGlkZXIgYmFyXG4gICAgICAgICAgaGFuZGxlUGN0ID0gIH5+KHBlcmNlbnQoaGFuZGxlRGltLCBlbGVtRGltKSAqIDEwMCk7XG4gICAgICAvL2lmIGxlZnQgaGFuZGxlLCB0aGUgbWF0aCBpcyBzbGlnaHRseSBkaWZmZXJlbnQgdGhhbiBpZiBpdCdzIHRoZSByaWdodCBoYW5kbGUsIGFuZCB0aGUgbGVmdC90b3AgcHJvcGVydHkgbmVlZHMgdG8gYmUgY2hhbmdlZCBmb3IgdGhlIGZpbGwgYmFyXG4gICAgICBpZiAoaXNMZWZ0SG5kbCkge1xuICAgICAgICAvL2xlZnQgb3IgdG9wIHBlcmNlbnRhZ2UgdmFsdWUgdG8gYXBwbHkgdG8gdGhlIGZpbGwgYmFyLlxuICAgICAgICBjc3NbbE9yVF0gPSBgJHttb3ZlbWVudH0lYDtcbiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIG5ldyBtaW4taGVpZ2h0L3dpZHRoIGZvciB0aGUgZmlsbCBiYXIuXG4gICAgICAgIGRpbSA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlMlswXS5zdHlsZVtsT3JUXSkgLSBtb3ZlbWVudCArIGhhbmRsZVBjdDtcbiAgICAgICAgLy90aGlzIGNhbGxiYWNrIGlzIG5lY2Vzc2FyeSB0byBwcmV2ZW50IGVycm9ycyBhbmQgYWxsb3cgdGhlIHByb3BlciBwbGFjZW1lbnQgYW5kIGluaXRpYWxpemF0aW9uIG9mIGEgMi1oYW5kbGVkIHNsaWRlclxuICAgICAgICAvL3BsdXMsIGl0IG1lYW5zIHdlIGRvbid0IGNhcmUgaWYgJ2RpbScgaXNOYU4gb24gaW5pdCwgaXQgd29uJ3QgYmUgaW4gdGhlIGZ1dHVyZS5cbiAgICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9Ly90aGlzIGlzIG9ubHkgbmVlZGVkIGZvciB0aGUgaW5pdGlhbGl6YXRpb24gb2YgMiBoYW5kbGVkIHNsaWRlcnNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vanVzdCBjYWNoaW5nIHRoZSB2YWx1ZSBvZiB0aGUgbGVmdC9ib3R0b20gaGFuZGxlJ3MgbGVmdC90b3AgcHJvcGVydHlcbiAgICAgICAgdmFyIGhhbmRsZVBvcyA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlWzBdLnN0eWxlW2xPclRdKTtcbiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIG5ldyBtaW4taGVpZ2h0L3dpZHRoIGZvciB0aGUgZmlsbCBiYXIuIFVzZSBpc05hTiB0byBwcmV2ZW50IGZhbHNlIHBvc2l0aXZlcyBmb3IgbnVtYmVycyA8PSAwXG4gICAgICAgIC8vYmFzZWQgb24gdGhlIHBlcmNlbnRhZ2Ugb2YgbW92ZW1lbnQgb2YgdGhlIGhhbmRsZSBiZWluZyBtYW5pcHVsYXRlZCwgbGVzcyB0aGUgb3Bwb3NpbmcgaGFuZGxlJ3MgbGVmdC90b3AgcG9zaXRpb24sIHBsdXMgdGhlIHBlcmNlbnRhZ2Ugdy9oIG9mIHRoZSBoYW5kbGUgaXRzZWxmXG4gICAgICAgIGRpbSA9IG1vdmVtZW50IC0gKGlzTmFOKGhhbmRsZVBvcykgPyB0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0LygodGhpcy5vcHRpb25zLmVuZC10aGlzLm9wdGlvbnMuc3RhcnQpLzEwMCkgOiBoYW5kbGVQb3MpICsgaGFuZGxlUGN0O1xuICAgICAgfVxuICAgICAgLy8gYXNzaWduIHRoZSBtaW4taGVpZ2h0L3dpZHRoIHRvIG91ciBjc3Mgb2JqZWN0XG4gICAgICBjc3NbYG1pbi0ke2hPcld9YF0gPSBgJHtkaW19JWA7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5vbmUoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhhbmRsZSBpcyBkb25lIG1vdmluZy5cbiAgICAgICAgICAgICAgICAgICAgICogQGV2ZW50IFNsaWRlciNtb3ZlZFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignbW92ZWQuemYuc2xpZGVyJywgWyRobmRsXSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAvL2JlY2F1c2Ugd2UgZG9uJ3Qga25vdyBleGFjdGx5IGhvdyB0aGUgaGFuZGxlIHdpbGwgYmUgbW92ZWQsIGNoZWNrIHRoZSBhbW91bnQgb2YgdGltZSBpdCBzaG91bGQgdGFrZSB0byBtb3ZlLlxuICAgIHZhciBtb3ZlVGltZSA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnZHJhZ2dpbmcnKSA/IDEwMDAvNjAgOiB0aGlzLm9wdGlvbnMubW92ZVRpbWU7XG5cbiAgICBGb3VuZGF0aW9uLk1vdmUobW92ZVRpbWUsICRobmRsLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vYWRqdXN0aW5nIHRoZSBsZWZ0L3RvcCBwcm9wZXJ0eSBvZiB0aGUgaGFuZGxlLCBiYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBjYWxjdWxhdGVkIGFib3ZlXG4gICAgICAkaG5kbC5jc3MobE9yVCwgYCR7bW92ZW1lbnR9JWApO1xuXG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQpIHtcbiAgICAgICAgLy9pZiBzaW5nbGUtaGFuZGxlZCwgYSBzaW1wbGUgbWV0aG9kIHRvIGV4cGFuZCB0aGUgZmlsbCBiYXJcbiAgICAgICAgX3RoaXMuJGZpbGwuY3NzKGhPclcsIGAke3BjdE9mQmFyICogMTAwfSVgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vb3RoZXJ3aXNlLCB1c2UgdGhlIGNzcyBvYmplY3Qgd2UgY3JlYXRlZCBhYm92ZVxuICAgICAgICBfdGhpcy4kZmlsbC5jc3MoY3NzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHZhbHVlIGhhcyBub3QgYmVlbiBjaGFuZ2UgZm9yIGEgZ2l2ZW4gdGltZS5cbiAgICAgKiBAZXZlbnQgU2xpZGVyI2NoYW5nZWRcbiAgICAgKi9cbiAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZWQuemYuc2xpZGVyJywgWyRobmRsXSk7XG4gICAgfSwgX3RoaXMub3B0aW9ucy5jaGFuZ2VkRGVsYXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGluaXRpYWwgYXR0cmlidXRlIGZvciB0aGUgc2xpZGVyIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gaW5kZXggb2YgdGhlIGN1cnJlbnQgaGFuZGxlL2lucHV0IHRvIHVzZS5cbiAgICovXG4gIF9zZXRJbml0QXR0cihpZHgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlucHV0cy5lcShpZHgpLmF0dHIoJ2lkJykgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnc2xpZGVyJyk7XG4gICAgdGhpcy5pbnB1dHMuZXEoaWR4KS5hdHRyKHtcbiAgICAgICdpZCc6IGlkLFxuICAgICAgJ21heCc6IHRoaXMub3B0aW9ucy5lbmQsXG4gICAgICAnbWluJzogdGhpcy5vcHRpb25zLnN0YXJ0LFxuICAgICAgJ3N0ZXAnOiB0aGlzLm9wdGlvbnMuc3RlcFxuICAgIH0pO1xuICAgIHRoaXMuaGFuZGxlcy5lcShpZHgpLmF0dHIoe1xuICAgICAgJ3JvbGUnOiAnc2xpZGVyJyxcbiAgICAgICdhcmlhLWNvbnRyb2xzJzogaWQsXG4gICAgICAnYXJpYS12YWx1ZW1heCc6IHRoaXMub3B0aW9ucy5lbmQsXG4gICAgICAnYXJpYS12YWx1ZW1pbic6IHRoaXMub3B0aW9ucy5zdGFydCxcbiAgICAgICdhcmlhLXZhbHVlbm93JzogaWR4ID09PSAwID8gdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCA6IHRoaXMub3B0aW9ucy5pbml0aWFsRW5kLFxuICAgICAgJ2FyaWEtb3JpZW50YXRpb24nOiB0aGlzLm9wdGlvbnMudmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnLFxuICAgICAgJ3RhYmluZGV4JzogMFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGlucHV0IGFuZCBgYXJpYS12YWx1ZW5vd2AgdmFsdWVzIGZvciB0aGUgc2xpZGVyIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgaGFuZGxlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsIC0gZmxvYXRpbmcgcG9pbnQgb2YgdGhlIG5ldyB2YWx1ZS5cbiAgICovXG4gIF9zZXRWYWx1ZXMoJGhhbmRsZSwgdmFsKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMub3B0aW9ucy5kb3VibGVTaWRlZCA/IHRoaXMuaGFuZGxlcy5pbmRleCgkaGFuZGxlKSA6IDA7XG4gICAgdGhpcy5pbnB1dHMuZXEoaWR4KS52YWwodmFsKTtcbiAgICAkaGFuZGxlLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCB2YWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgZXZlbnRzIG9uIHRoZSBzbGlkZXIgZWxlbWVudC5cbiAgICogQ2FsY3VsYXRlcyB0aGUgbmV3IGxvY2F0aW9uIG9mIHRoZSBjdXJyZW50IGhhbmRsZS5cbiAgICogSWYgdGhlcmUgYXJlIHR3byBoYW5kbGVzIGFuZCB0aGUgYmFyIHdhcyBjbGlja2VkLCBpdCBkZXRlcm1pbmVzIHdoaWNoIGhhbmRsZSB0byBtb3ZlLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGUgLSB0aGUgYGV2ZW50YCBvYmplY3QgcGFzc2VkIGZyb20gdGhlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBjdXJyZW50IGhhbmRsZSB0byBjYWxjdWxhdGUgZm9yLCBpZiBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbCAtIGZsb2F0aW5nIHBvaW50IG51bWJlciBmb3IgdGhlIG5ldyB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBUT0RPIGNsZWFuIHRoaXMgdXAsIHRoZXJlJ3MgYSBsb3Qgb2YgcmVwZWF0ZWQgY29kZSBiZXR3ZWVuIHRoaXMgYW5kIHRoZSBfc2V0SGFuZGxlUG9zIGZuLlxuICAgKi9cbiAgX2hhbmRsZUV2ZW50KGUsICRoYW5kbGUsIHZhbCkge1xuICAgIHZhciB2YWx1ZSwgaGFzVmFsO1xuICAgIGlmICghdmFsKSB7Ly9jbGljayBvciBkcmFnIGV2ZW50c1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICB2ZXJ0aWNhbCA9IHRoaXMub3B0aW9ucy52ZXJ0aWNhbCxcbiAgICAgICAgICBwYXJhbSA9IHZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICAgIGRpcmVjdGlvbiA9IHZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsXG4gICAgICAgICAgZXZlbnRPZmZzZXQgPSB2ZXJ0aWNhbCA/IGUucGFnZVkgOiBlLnBhZ2VYLFxuICAgICAgICAgIGhhbGZPZkhhbmRsZSA9IHRoaXMuJGhhbmRsZVswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtwYXJhbV0gLyAyLFxuICAgICAgICAgIGJhckRpbSA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbcGFyYW1dLFxuICAgICAgICAgIHdpbmRvd1Njcm9sbCA9IHZlcnRpY2FsID8gJCh3aW5kb3cpLnNjcm9sbFRvcCgpIDogJCh3aW5kb3cpLnNjcm9sbExlZnQoKTtcblxuXG4gICAgICB2YXIgZWxlbU9mZnNldCA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClbZGlyZWN0aW9uXTtcblxuICAgICAgLy8gdG91Y2ggZXZlbnRzIGVtdWxhdGVkIGJ5IHRoZSB0b3VjaCB1dGlsIGdpdmUgcG9zaXRpb24gcmVsYXRpdmUgdG8gc2NyZWVuLCBhZGQgd2luZG93LnNjcm9sbCB0byBldmVudCBjb29yZGluYXRlcy4uLlxuICAgICAgLy8gYmVzdCB3YXkgdG8gZ3Vlc3MgdGhpcyBpcyBzaW11bGF0ZWQgaXMgaWYgY2xpZW50WSA9PSBwYWdlWVxuICAgICAgaWYgKGUuY2xpZW50WSA9PT0gZS5wYWdlWSkgeyBldmVudE9mZnNldCA9IGV2ZW50T2Zmc2V0ICsgd2luZG93U2Nyb2xsOyB9XG4gICAgICB2YXIgZXZlbnRGcm9tQmFyID0gZXZlbnRPZmZzZXQgLSBlbGVtT2Zmc2V0O1xuICAgICAgdmFyIGJhclhZO1xuICAgICAgaWYgKGV2ZW50RnJvbUJhciA8IDApIHtcbiAgICAgICAgYmFyWFkgPSAwO1xuICAgICAgfSBlbHNlIGlmIChldmVudEZyb21CYXIgPiBiYXJEaW0pIHtcbiAgICAgICAgYmFyWFkgPSBiYXJEaW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXJYWSA9IGV2ZW50RnJvbUJhcjtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXRQY3QgPSBwZXJjZW50KGJhclhZLCBiYXJEaW0pO1xuXG4gICAgICB2YWx1ZSA9ICh0aGlzLm9wdGlvbnMuZW5kIC0gdGhpcy5vcHRpb25zLnN0YXJ0KSAqIG9mZnNldFBjdCArIHRoaXMub3B0aW9ucy5zdGFydDtcblxuICAgICAgLy8gdHVybiBldmVyeXRoaW5nIGFyb3VuZCBmb3IgUlRMLCB5YXkgbWF0aCFcbiAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpICYmICF0aGlzLm9wdGlvbnMudmVydGljYWwpIHt2YWx1ZSA9IHRoaXMub3B0aW9ucy5lbmQgLSB2YWx1ZTt9XG5cbiAgICAgIHZhbHVlID0gX3RoaXMuX2FkanVzdFZhbHVlKG51bGwsIHZhbHVlKTtcbiAgICAgIC8vYm9vbGVhbiBmbGFnIGZvciB0aGUgc2V0SGFuZGxlUG9zIGZuLCBzcGVjaWZpY2FsbHkgZm9yIHZlcnRpY2FsIHNsaWRlcnNcbiAgICAgIGhhc1ZhbCA9IGZhbHNlO1xuXG4gICAgICBpZiAoISRoYW5kbGUpIHsvL2ZpZ3VyZSBvdXQgd2hpY2ggaGFuZGxlIGl0IGlzLCBwYXNzIGl0IHRvIHRoZSBuZXh0IGZ1bmN0aW9uLlxuICAgICAgICB2YXIgZmlyc3RIbmRsUG9zID0gYWJzUG9zaXRpb24odGhpcy4kaGFuZGxlLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSksXG4gICAgICAgICAgICBzZWNuZEhuZGxQb3MgPSBhYnNQb3NpdGlvbih0aGlzLiRoYW5kbGUyLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSk7XG4gICAgICAgICAgICAkaGFuZGxlID0gZmlyc3RIbmRsUG9zIDw9IHNlY25kSG5kbFBvcyA/IHRoaXMuJGhhbmRsZSA6IHRoaXMuJGhhbmRsZTI7XG4gICAgICB9XG5cbiAgICB9IGVsc2Ugey8vY2hhbmdlIGV2ZW50IG9uIGlucHV0XG4gICAgICB2YWx1ZSA9IHRoaXMuX2FkanVzdFZhbHVlKG51bGwsIHZhbCk7XG4gICAgICBoYXNWYWwgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3NldEhhbmRsZVBvcygkaGFuZGxlLCB2YWx1ZSwgaGFzVmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGp1c3RlcyB2YWx1ZSBmb3IgaGFuZGxlIGluIHJlZ2FyZCB0byBzdGVwIHZhbHVlLiByZXR1cm5zIGFkanVzdGVkIHZhbHVlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBzZWxlY3RlZCBoYW5kbGUuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIGFkanVzdC4gdXNlZCBpZiAkaGFuZGxlIGlzIGZhbHN5XG4gICAqL1xuICBfYWRqdXN0VmFsdWUoJGhhbmRsZSwgdmFsdWUpIHtcbiAgICB2YXIgdmFsLFxuICAgICAgc3RlcCA9IHRoaXMub3B0aW9ucy5zdGVwLFxuICAgICAgZGl2ID0gcGFyc2VGbG9hdChzdGVwLzIpLFxuICAgICAgbGVmdCwgcHJldl92YWwsIG5leHRfdmFsO1xuICAgIGlmICghISRoYW5kbGUpIHtcbiAgICAgIHZhbCA9IHBhcnNlRmxvYXQoJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhbCA9IHZhbHVlO1xuICAgIH1cbiAgICBsZWZ0ID0gdmFsICUgc3RlcDtcbiAgICBwcmV2X3ZhbCA9IHZhbCAtIGxlZnQ7XG4gICAgbmV4dF92YWwgPSBwcmV2X3ZhbCArIHN0ZXA7XG4gICAgaWYgKGxlZnQgPT09IDApIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIHZhbCA9IHZhbCA+PSBwcmV2X3ZhbCArIGRpdiA/IG5leHRfdmFsIDogcHJldl92YWw7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc2xpZGVyIGVsZW1lbnRzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRoYW5kbGUgLSB0aGUgY3VycmVudCBoYW5kbGUgdG8gYXBwbHkgbGlzdGVuZXJzIHRvLlxuICAgKi9cbiAgX2V2ZW50cygkaGFuZGxlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgY3VySGFuZGxlLFxuICAgICAgICB0aW1lcjtcblxuICAgICAgdGhpcy5pbnB1dHMub2ZmKCdjaGFuZ2UuemYuc2xpZGVyJykub24oJ2NoYW5nZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBpZHggPSBfdGhpcy5pbnB1dHMuaW5kZXgoJCh0aGlzKSk7XG4gICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBfdGhpcy5oYW5kbGVzLmVxKGlkeCksICQodGhpcykudmFsKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tTZWxlY3QpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2NsaWNrLnpmLnNsaWRlcicpLm9uKCdjbGljay56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJykpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKCdbZGF0YS1zbGlkZXItaGFuZGxlXScpKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kb3VibGVTaWRlZCkge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgX3RoaXMuJGhhbmRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlKSB7XG4gICAgICB0aGlzLmhhbmRsZXMuYWRkVG91Y2goKTtcblxuICAgICAgdmFyICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgJGhhbmRsZVxuICAgICAgICAub2ZmKCdtb3VzZWRvd24uemYuc2xpZGVyJylcbiAgICAgICAgLm9uKCdtb3VzZWRvd24uemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICRoYW5kbGUuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgX3RoaXMuJGZpbGwuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7Ly9cbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIHRydWUpO1xuXG4gICAgICAgICAgY3VySGFuZGxlID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuXG4gICAgICAgICAgJGJvZHkub24oJ21vdXNlbW92ZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgY3VySGFuZGxlKTtcblxuICAgICAgICAgIH0pLm9uKCdtb3VzZXVwLnpmLnNsaWRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBjdXJIYW5kbGUpO1xuXG4gICAgICAgICAgICAkaGFuZGxlLnJlbW92ZUNsYXNzKCdpcy1kcmFnZ2luZycpO1xuICAgICAgICAgICAgX3RoaXMuJGZpbGwucmVtb3ZlQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIGZhbHNlKTtcblxuICAgICAgICAgICAgJGJvZHkub2ZmKCdtb3VzZW1vdmUuemYuc2xpZGVyIG1vdXNldXAuemYuc2xpZGVyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLy8gcHJldmVudCBldmVudHMgdHJpZ2dlcmVkIGJ5IHRvdWNoXG4gICAgICAub24oJ3NlbGVjdHN0YXJ0LnpmLnNsaWRlciB0b3VjaG1vdmUuemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkaGFuZGxlLm9mZigna2V5ZG93bi56Zi5zbGlkZXInKS5vbigna2V5ZG93bi56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgXyRoYW5kbGUgPSAkKHRoaXMpLFxuICAgICAgICAgIGlkeCA9IF90aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQgPyBfdGhpcy5oYW5kbGVzLmluZGV4KF8kaGFuZGxlKSA6IDAsXG4gICAgICAgICAgb2xkVmFsdWUgPSBwYXJzZUZsb2F0KF90aGlzLmlucHV0cy5lcShpZHgpLnZhbCgpKSxcbiAgICAgICAgICBuZXdWYWx1ZTtcblxuICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1NsaWRlcicsIHtcbiAgICAgICAgZGVjcmVhc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgLSBfdGhpcy5vcHRpb25zLnN0ZXA7XG4gICAgICAgIH0sXG4gICAgICAgIGluY3JlYXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlICsgX3RoaXMub3B0aW9ucy5zdGVwO1xuICAgICAgICB9LFxuICAgICAgICBkZWNyZWFzZV9mYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlIC0gX3RoaXMub3B0aW9ucy5zdGVwICogMTA7XG4gICAgICAgIH0sXG4gICAgICAgIGluY3JlYXNlX2Zhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgKyBfdGhpcy5vcHRpb25zLnN0ZXAgKiAxMDtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7IC8vIG9ubHkgc2V0IGhhbmRsZSBwb3Mgd2hlbiBldmVudCB3YXMgaGFuZGxlZCBzcGVjaWFsbHlcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuX3NldEhhbmRsZVBvcyhfJGhhbmRsZSwgbmV3VmFsdWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8qaWYgKG5ld1ZhbHVlKSB7IC8vIGlmIHByZXNzZWQga2V5IGhhcyBzcGVjaWFsIGZ1bmN0aW9uLCB1cGRhdGUgdmFsdWVcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF8kaGFuZGxlLCBuZXdWYWx1ZSk7XG4gICAgICB9Ki9cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgc2xpZGVyIHBsdWdpbi5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5oYW5kbGVzLm9mZignLnpmLnNsaWRlcicpO1xuICAgIHRoaXMuaW5wdXRzLm9mZignLnpmLnNsaWRlcicpO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYuc2xpZGVyJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuU2xpZGVyLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogTWluaW11bSB2YWx1ZSBmb3IgdGhlIHNsaWRlciBzY2FsZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAwXG4gICAqL1xuICBzdGFydDogMCxcbiAgLyoqXG4gICAqIE1heGltdW0gdmFsdWUgZm9yIHRoZSBzbGlkZXIgc2NhbGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTAwXG4gICAqL1xuICBlbmQ6IDEwMCxcbiAgLyoqXG4gICAqIE1pbmltdW0gdmFsdWUgY2hhbmdlIHBlciBjaGFuZ2UgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgc3RlcDogMSxcbiAgLyoqXG4gICAqIFZhbHVlIGF0IHdoaWNoIHRoZSBoYW5kbGUvaW5wdXQgKihsZWZ0IGhhbmRsZS9maXJzdCBpbnB1dCkqIHNob3VsZCBiZSBzZXQgdG8gb24gaW5pdGlhbGl6YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMFxuICAgKi9cbiAgaW5pdGlhbFN0YXJ0OiAwLFxuICAvKipcbiAgICogVmFsdWUgYXQgd2hpY2ggdGhlIHJpZ2h0IGhhbmRsZS9zZWNvbmQgaW5wdXQgc2hvdWxkIGJlIHNldCB0byBvbiBpbml0aWFsaXphdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMDBcbiAgICovXG4gIGluaXRpYWxFbmQ6IDEwMCxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgaW5wdXQgdG8gYmUgbG9jYXRlZCBvdXRzaWRlIHRoZSBjb250YWluZXIgYW5kIHZpc2libGUuIFNldCB0byBieSB0aGUgSlNcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgYmluZGluZzogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gY2xpY2svdGFwIG9uIHRoZSBzbGlkZXIgYmFyIHRvIHNlbGVjdCBhIHZhbHVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrU2VsZWN0OiB0cnVlLFxuICAvKipcbiAgICogU2V0IHRvIHRydWUgYW5kIHVzZSB0aGUgYHZlcnRpY2FsYCBjbGFzcyB0byBjaGFuZ2UgYWxpZ25tZW50IHRvIHZlcnRpY2FsLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICB2ZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gZHJhZyB0aGUgc2xpZGVyIGhhbmRsZShzKSB0byBzZWxlY3QgYSB2YWx1ZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBkcmFnZ2FibGU6IHRydWUsXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgc2xpZGVyIGFuZCBwcmV2ZW50cyBldmVudCBsaXN0ZW5lcnMgZnJvbSBiZWluZyBhcHBsaWVkLiBEb3VibGUgY2hlY2tlZCBieSBKUyB3aXRoIGBkaXNhYmxlZENsYXNzYC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB1c2Ugb2YgdHdvIGhhbmRsZXMuIERvdWJsZSBjaGVja2VkIGJ5IHRoZSBKUy4gQ2hhbmdlcyBzb21lIGxvZ2ljIGhhbmRsaW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBkb3VibGVTaWRlZDogZmFsc2UsXG4gIC8qKlxuICAgKiBQb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUuXG4gICAqL1xuICAvLyBzdGVwczogMTAwLFxuICAvKipcbiAgICogTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRoZSBwbHVnaW4gc2hvdWxkIGdvIHRvIGZvciBmbG9hdGluZyBwb2ludCBwcmVjaXNpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMlxuICAgKi9cbiAgZGVjaW1hbDogMixcbiAgLyoqXG4gICAqIFRpbWUgZGVsYXkgZm9yIGRyYWdnZWQgZWxlbWVudHMuXG4gICAqL1xuICAvLyBkcmFnRGVsYXk6IDAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gYW5pbWF0ZSB0aGUgbW92ZW1lbnQgb2YgYSBzbGlkZXIgaGFuZGxlIGlmIHVzZXIgY2xpY2tzL3RhcHMgb24gdGhlIGJhci4gTmVlZHMgdG8gYmUgbWFudWFsbHkgc2V0IGlmIHVwZGF0aW5nIHRoZSB0cmFuc2l0aW9uIHRpbWUgaW4gdGhlIFNhc3Mgc2V0dGluZ3MuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjAwXG4gICAqL1xuICBtb3ZlVGltZTogMjAwLC8vdXBkYXRlIHRoaXMgaWYgY2hhbmdpbmcgdGhlIHRyYW5zaXRpb24gdGltZSBpbiB0aGUgc2Fzc1xuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBkaXNhYmxlZCBzbGlkZXJzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdkaXNhYmxlZCdcbiAgICovXG4gIGRpc2FibGVkQ2xhc3M6ICdkaXNhYmxlZCcsXG4gIC8qKlxuICAgKiBXaWxsIGludmVydCB0aGUgZGVmYXVsdCBsYXlvdXQgZm9yIGEgdmVydGljYWw8c3BhbiBkYXRhLXRvb2x0aXAgdGl0bGU9XCJ3aG8gd291bGQgZG8gdGhpcz8/P1wiPiA8L3NwYW4+c2xpZGVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBpbnZlcnRWZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBNaWxsaXNlY29uZHMgYmVmb3JlIHRoZSBgY2hhbmdlZC56Zi1zbGlkZXJgIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciB2YWx1ZSBjaGFuZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuICBjaGFuZ2VkRGVsYXk6IDUwMFxufTtcblxuZnVuY3Rpb24gcGVyY2VudChmcmFjLCBudW0pIHtcbiAgcmV0dXJuIChmcmFjIC8gbnVtKTtcbn1cbmZ1bmN0aW9uIGFic1Bvc2l0aW9uKCRoYW5kbGUsIGRpciwgY2xpY2tQb3MsIHBhcmFtKSB7XG4gIHJldHVybiBNYXRoLmFicygoJGhhbmRsZS5wb3NpdGlvbigpW2Rpcl0gKyAoJGhhbmRsZVtwYXJhbV0oKSAvIDIpKSAtIGNsaWNrUG9zKTtcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFNsaWRlciwgJ1NsaWRlcicpO1xuXG59KGpRdWVyeSk7XG5cbi8vKioqKioqKioqdGhpcyBpcyBpbiBjYXNlIHdlIGdvIHRvIHN0YXRpYywgYWJzb2x1dGUgcG9zaXRpb25zIGluc3RlYWQgb2YgZHluYW1pYyBwb3NpdGlvbmluZyoqKioqKioqXG4vLyB0aGlzLnNldFN0ZXBzKGZ1bmN0aW9uKCkge1xuLy8gICBfdGhpcy5fZXZlbnRzKCk7XG4vLyAgIHZhciBpbml0U3RhcnQgPSBfdGhpcy5vcHRpb25zLnBvc2l0aW9uc1tfdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCAtIDFdIHx8IG51bGw7XG4vLyAgIHZhciBpbml0RW5kID0gX3RoaXMub3B0aW9ucy5pbml0aWFsRW5kID8gX3RoaXMub3B0aW9ucy5wb3NpdGlvbltfdGhpcy5vcHRpb25zLmluaXRpYWxFbmQgLSAxXSA6IG51bGw7XG4vLyAgIGlmIChpbml0U3RhcnQgfHwgaW5pdEVuZCkge1xuLy8gICAgIF90aGlzLl9oYW5kbGVFdmVudChpbml0U3RhcnQsIGluaXRFbmQpO1xuLy8gICB9XG4vLyB9KTtcblxuLy8qKioqKioqKioqKnRoZSBvdGhlciBwYXJ0IG9mIGFic29sdXRlIHBvc2l0aW9ucyoqKioqKioqKioqKipcbi8vIFNsaWRlci5wcm90b3R5cGUuc2V0U3RlcHMgPSBmdW5jdGlvbihjYikge1xuLy8gICB2YXIgcG9zQ2hhbmdlID0gdGhpcy4kZWxlbWVudC5vdXRlcldpZHRoKCkgLyB0aGlzLm9wdGlvbnMuc3RlcHM7XG4vLyAgIHZhciBjb3VudGVyID0gMFxuLy8gICB3aGlsZShjb3VudGVyIDwgdGhpcy5vcHRpb25zLnN0ZXBzKSB7XG4vLyAgICAgaWYgKGNvdW50ZXIpIHtcbi8vICAgICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbnMucHVzaCh0aGlzLm9wdGlvbnMucG9zaXRpb25zW2NvdW50ZXIgLSAxXSArIHBvc0NoYW5nZSk7XG4vLyAgICAgfSBlbHNlIHtcbi8vICAgICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbnMucHVzaChwb3NDaGFuZ2UpO1xuLy8gICAgIH1cbi8vICAgICBjb3VudGVyKys7XG4vLyAgIH1cbi8vICAgY2IoKTtcbi8vIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogU3RpY2t5IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5zdGlja3lcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICovXG5cbmNsYXNzIFN0aWNreSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgc3RpY2t5IHRoaW5nLlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2Ugc3RpY2t5LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB3aGVuIGNyZWF0aW5nIHRoZSBlbGVtZW50IHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFN0aWNreS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnU3RpY2t5Jyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHN0aWNreSBlbGVtZW50IGJ5IGFkZGluZyBjbGFzc2VzLCBnZXR0aW5nL3NldHRpbmcgZGltZW5zaW9ucywgYnJlYWtwb2ludHMgYW5kIGF0dHJpYnV0ZXNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdGlja3ktY29udGFpbmVyXScpLFxuICAgICAgICBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnc3RpY2t5JyksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgIHRoaXMud2FzV3JhcHBlZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuJGNvbnRhaW5lciA9ICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICQodGhpcy5vcHRpb25zLmNvbnRhaW5lcikud3JhcElubmVyKHRoaXMuJGVsZW1lbnQpO1xuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3MpXG4gICAgICAgICAgICAgICAgIC5hdHRyKHsnZGF0YS1yZXNpemUnOiBpZH0pO1xuXG4gICAgdGhpcy5zY3JvbGxDb3VudCA9IHRoaXMub3B0aW9ucy5jaGVja0V2ZXJ5O1xuICAgIHRoaXMuaXNTdHVjayA9IGZhbHNlO1xuICAgICQod2luZG93KS5vbmUoJ2xvYWQuemYuc3RpY2t5JywgZnVuY3Rpb24oKXtcbiAgICAgIC8vV2UgY2FsY3VsYXRlIHRoZSBjb250YWluZXIgaGVpZ2h0IHRvIGhhdmUgY29ycmVjdCB2YWx1ZXMgZm9yIGFuY2hvciBwb2ludHMgb2Zmc2V0IGNhbGN1bGF0aW9uLlxuICAgICAgX3RoaXMuY29udGFpbmVySGVpZ2h0ID0gX3RoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIiA/IDAgOiBfdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICBfdGhpcy4kY29udGFpbmVyLmNzcygnaGVpZ2h0JywgX3RoaXMuY29udGFpbmVySGVpZ2h0KTtcbiAgICAgIF90aGlzLmVsZW1IZWlnaHQgPSBfdGhpcy5jb250YWluZXJIZWlnaHQ7XG4gICAgICBpZihfdGhpcy5vcHRpb25zLmFuY2hvciAhPT0gJycpe1xuICAgICAgICBfdGhpcy4kYW5jaG9yID0gJCgnIycgKyBfdGhpcy5vcHRpb25zLmFuY2hvcik7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgX3RoaXMuX3BhcnNlUG9pbnRzKCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbigpe1xuICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIF90aGlzLl9ldmVudHMoaWQuc3BsaXQoJy0nKS5yZXZlcnNlKCkuam9pbignLScpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtdWx0aXBsZSBlbGVtZW50cyBhcyBhbmNob3JzLCBjYWxjdWxhdGVzIHRoZSB0b3AgYW5kIGJvdHRvbSBwaXhlbCB2YWx1ZXMgdGhlIHN0aWNreSB0aGluZyBzaG91bGQgc3RpY2sgYW5kIHVuc3RpY2sgb24uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhcnNlUG9pbnRzKCkge1xuICAgIHZhciB0b3AgPSB0aGlzLm9wdGlvbnMudG9wQW5jaG9yID09IFwiXCIgPyAxIDogdGhpcy5vcHRpb25zLnRvcEFuY2hvcixcbiAgICAgICAgYnRtID0gdGhpcy5vcHRpb25zLmJ0bUFuY2hvcj09IFwiXCIgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IDogdGhpcy5vcHRpb25zLmJ0bUFuY2hvcixcbiAgICAgICAgcHRzID0gW3RvcCwgYnRtXSxcbiAgICAgICAgYnJlYWtzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHB0cy5sZW5ndGg7IGkgPCBsZW4gJiYgcHRzW2ldOyBpKyspIHtcbiAgICAgIHZhciBwdDtcbiAgICAgIGlmICh0eXBlb2YgcHRzW2ldID09PSAnbnVtYmVyJykge1xuICAgICAgICBwdCA9IHB0c1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwbGFjZSA9IHB0c1tpXS5zcGxpdCgnOicpLFxuICAgICAgICAgICAgYW5jaG9yID0gJChgIyR7cGxhY2VbMF19YCk7XG5cbiAgICAgICAgcHQgPSBhbmNob3Iub2Zmc2V0KCkudG9wO1xuICAgICAgICBpZiAocGxhY2VbMV0gJiYgcGxhY2VbMV0udG9Mb3dlckNhc2UoKSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICBwdCArPSBhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha3NbaV0gPSBwdDtcbiAgICB9XG5cblxuICAgIHRoaXMucG9pbnRzID0gYnJlYWtzO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgc2Nyb2xsaW5nIGVsZW1lbnQuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHBzdWVkby1yYW5kb20gaWQgZm9yIHVuaXF1ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIuXG4gICAqL1xuICBfZXZlbnRzKGlkKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVyID0gYHNjcm9sbC56Zi4ke2lkfWA7XG4gICAgaWYgKHRoaXMuaXNPbikgeyByZXR1cm47IH1cbiAgICBpZiAodGhpcy5jYW5TdGljaykge1xuICAgICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgICAgICQod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpXG4gICAgICAgICAgICAgICAub24oc2Nyb2xsTGlzdGVuZXIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnNjcm9sbENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQgPSBfdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuX3NldFNpemVzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQtLTtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZigncmVzaXplbWUuemYudHJpZ2dlcicpXG4gICAgICAgICAgICAgICAgIC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUsIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9jYWxjKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmNhblN0aWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5pc09uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZXZlbnRzKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuaXNPbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wYXVzZUxpc3RlbmVycyhzY3JvbGxMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlcnMgZm9yIHNjcm9sbCBhbmQgY2hhbmdlIGV2ZW50cyBvbiBhbmNob3IuXG4gICAqIEBmaXJlcyBTdGlja3kjcGF1c2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNjcm9sbExpc3RlbmVyIC0gdW5pcXVlLCBuYW1lc3BhY2VkIHNjcm9sbCBsaXN0ZW5lciBhdHRhY2hlZCB0byBgd2luZG93YFxuICAgKi9cbiAgX3BhdXNlTGlzdGVuZXJzKHNjcm9sbExpc3RlbmVyKSB7XG4gICAgdGhpcy5pc09uID0gZmFsc2U7XG4gICAgJCh3aW5kb3cpLm9mZihzY3JvbGxMaXN0ZW5lcik7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaXMgcGF1c2VkIGR1ZSB0byByZXNpemUgZXZlbnQgc2hyaW5raW5nIHRoZSB2aWV3LlxuICAgICAqIEBldmVudCBTdGlja3kjcGF1c2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3BhdXNlLnpmLnN0aWNreScpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBldmVyeSBgc2Nyb2xsYCBldmVudCBhbmQgb24gYF9pbml0YFxuICAgKiBmaXJlcyBmdW5jdGlvbnMgYmFzZWQgb24gYm9vbGVhbnMgYW5kIGNhY2hlZCB2YWx1ZXNcbiAgICogQHBhcmFtIHtCb29sZWFufSBjaGVja1NpemVzIC0gdHJ1ZSBpZiBwbHVnaW4gc2hvdWxkIHJlY2FsY3VsYXRlIHNpemVzIGFuZCBicmVha3BvaW50cy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjcm9sbCAtIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHBhc3NlZCBmcm9tIHNjcm9sbCBldmVudCBjYiBmdW5jdGlvbi4gSWYgbm90IHBhc3NlZCwgZGVmYXVsdHMgdG8gYHdpbmRvdy5wYWdlWU9mZnNldGAuXG4gICAqL1xuICBfY2FsYyhjaGVja1NpemVzLCBzY3JvbGwpIHtcbiAgICBpZiAoY2hlY2tTaXplcykgeyB0aGlzLl9zZXRTaXplcygpOyB9XG5cbiAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgIGlmICh0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghc2Nyb2xsKSB7IHNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDsgfVxuXG4gICAgaWYgKHNjcm9sbCA+PSB0aGlzLnRvcFBvaW50KSB7XG4gICAgICBpZiAoc2Nyb2xsIDw9IHRoaXMuYm90dG9tUG9pbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgICB0aGlzLl9zZXRTdGlja3koKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhdXNlcyB0aGUgJGVsZW1lbnQgdG8gYmVjb21lIHN0dWNrLlxuICAgKiBBZGRzIGBwb3NpdGlvbjogZml4ZWQ7YCwgYW5kIGhlbHBlciBjbGFzc2VzLlxuICAgKiBAZmlyZXMgU3RpY2t5I3N0dWNrdG9cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0U3RpY2t5KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHN0aWNrVG8gPSB0aGlzLm9wdGlvbnMuc3RpY2tUbyxcbiAgICAgICAgbXJnbiA9IHN0aWNrVG8gPT09ICd0b3AnID8gJ21hcmdpblRvcCcgOiAnbWFyZ2luQm90dG9tJyxcbiAgICAgICAgbm90U3R1Y2tUbyA9IHN0aWNrVG8gPT09ICd0b3AnID8gJ2JvdHRvbScgOiAndG9wJyxcbiAgICAgICAgY3NzID0ge307XG5cbiAgICBjc3NbbXJnbl0gPSBgJHt0aGlzLm9wdGlvbnNbbXJnbl19ZW1gO1xuICAgIGNzc1tzdGlja1RvXSA9IDA7XG4gICAgY3NzW25vdFN0dWNrVG9dID0gJ2F1dG8nO1xuICAgIGNzc1snbGVmdCddID0gdGhpcy4kY29udGFpbmVyLm9mZnNldCgpLmxlZnQgKyBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLiRjb250YWluZXJbMF0pW1wicGFkZGluZy1sZWZ0XCJdLCAxMCk7XG4gICAgdGhpcy5pc1N0dWNrID0gdHJ1ZTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGBpcy1hbmNob3JlZCBpcy1hdC0ke25vdFN0dWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGBpcy1zdHVjayBpcy1hdC0ke3N0aWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmNzcyhjc3MpXG4gICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSAkZWxlbWVudCBoYXMgYmVjb21lIGBwb3NpdGlvbjogZml4ZWQ7YFxuICAgICAgICAgICAgICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYuc3R1Y2t0bzp0b3BgXG4gICAgICAgICAgICAgICAgICAqIEBldmVudCBTdGlja3kjc3R1Y2t0b1xuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgLnRyaWdnZXIoYHN0aWNreS56Zi5zdHVja3RvOiR7c3RpY2tUb31gKTtcbiAgICB0aGlzLiRlbGVtZW50Lm9uKFwidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIE1TVHJhbnNpdGlvbkVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9zZXRTaXplcygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhdXNlcyB0aGUgJGVsZW1lbnQgdG8gYmVjb21lIHVuc3R1Y2suXG4gICAqIFJlbW92ZXMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEFkZHMgb3RoZXIgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNUb3AgLSB0ZWxscyB0aGUgZnVuY3Rpb24gaWYgdGhlICRlbGVtZW50IHNob3VsZCBhbmNob3IgdG8gdGhlIHRvcCBvciBib3R0b20gb2YgaXRzICRhbmNob3IgZWxlbWVudC5cbiAgICogQGZpcmVzIFN0aWNreSN1bnN0dWNrZnJvbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbW92ZVN0aWNreShpc1RvcCkge1xuICAgIHZhciBzdGlja1RvID0gdGhpcy5vcHRpb25zLnN0aWNrVG8sXG4gICAgICAgIHN0aWNrVG9Ub3AgPSBzdGlja1RvID09PSAndG9wJyxcbiAgICAgICAgY3NzID0ge30sXG4gICAgICAgIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLnBvaW50c1swXSA6IHRoaXMuYW5jaG9ySGVpZ2h0KSAtIHRoaXMuZWxlbUhlaWdodCxcbiAgICAgICAgbXJnbiA9IHN0aWNrVG9Ub3AgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUb1RvcCA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgICAgIHRvcE9yQm90dG9tID0gaXNUb3AgPyAndG9wJyA6ICdib3R0b20nO1xuXG4gICAgY3NzW21yZ25dID0gMDtcblxuICAgIGNzc1snYm90dG9tJ10gPSAnYXV0byc7XG4gICAgaWYoaXNUb3ApIHtcbiAgICAgIGNzc1sndG9wJ10gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NbJ3RvcCddID0gYW5jaG9yUHQ7XG4gICAgfVxuXG4gICAgY3NzWydsZWZ0J10gPSAnJztcbiAgICB0aGlzLmlzU3R1Y2sgPSBmYWxzZTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGBpcy1zdHVjayBpcy1hdC0ke3N0aWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGBpcy1hbmNob3JlZCBpcy1hdC0ke3RvcE9yQm90dG9tfWApXG4gICAgICAgICAgICAgICAgIC5jc3MoY3NzKVxuICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgJGVsZW1lbnQgaGFzIGJlY29tZSBhbmNob3JlZC5cbiAgICAgICAgICAgICAgICAgICogTmFtZXNwYWNlZCB0byBgdG9wYCBvciBgYm90dG9tYCwgZS5nLiBgc3RpY2t5LnpmLnVuc3R1Y2tmcm9tOmJvdHRvbWBcbiAgICAgICAgICAgICAgICAgICogQGV2ZW50IFN0aWNreSN1bnN0dWNrZnJvbVxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgLnRyaWdnZXIoYHN0aWNreS56Zi51bnN0dWNrZnJvbToke3RvcE9yQm90dG9tfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlICRlbGVtZW50IGFuZCAkY29udGFpbmVyIHNpemVzIGZvciBwbHVnaW4uXG4gICAqIENhbGxzIGBfc2V0QnJlYWtQb2ludHNgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgb24gY29tcGxldGlvbiBvZiBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRTaXplcyhjYikge1xuICAgIHRoaXMuY2FuU3RpY2sgPSBGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuc3RpY2t5T24pO1xuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gICAgfVxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIG5ld0VsZW1XaWR0aCA9IHRoaXMuJGNvbnRhaW5lclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCxcbiAgICAgICAgY29tcCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuJGNvbnRhaW5lclswXSksXG4gICAgICAgIHBkbmcgPSBwYXJzZUludChjb21wWydwYWRkaW5nLXJpZ2h0J10sIDEwKTtcblxuICAgIGlmICh0aGlzLiRhbmNob3IgJiYgdGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgdGhpcy5hbmNob3JIZWlnaHQgPSB0aGlzLiRhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZVBvaW50cygpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgICdtYXgtd2lkdGgnOiBgJHtuZXdFbGVtV2lkdGggLSBwZG5nfXB4YFxuICAgIH0pO1xuXG4gICAgdmFyIG5ld0NvbnRhaW5lckhlaWdodCA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IHx8IHRoaXMuY29udGFpbmVySGVpZ2h0O1xuICAgIGlmICh0aGlzLiRlbGVtZW50LmNzcyhcImRpc3BsYXlcIikgPT0gXCJub25lXCIpIHtcbiAgICAgIG5ld0NvbnRhaW5lckhlaWdodCA9IDA7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVySGVpZ2h0ID0gbmV3Q29udGFpbmVySGVpZ2h0O1xuICAgIHRoaXMuJGNvbnRhaW5lci5jc3Moe1xuICAgICAgaGVpZ2h0OiBuZXdDb250YWluZXJIZWlnaHRcbiAgICB9KTtcbiAgICB0aGlzLmVsZW1IZWlnaHQgPSBuZXdDb250YWluZXJIZWlnaHQ7XG5cbiAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7XCJsZWZ0XCI6dGhpcy4kY29udGFpbmVyLm9mZnNldCgpLmxlZnQgKyBwYXJzZUludChjb21wWydwYWRkaW5nLWxlZnQnXSwgMTApfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1hdC1ib3R0b20nKSkge1xuICAgICAgICB2YXIgYW5jaG9yUHQgPSAodGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSAtIHRoaXMuJGNvbnRhaW5lci5vZmZzZXQoKS50b3AgOiB0aGlzLmFuY2hvckhlaWdodCkgLSB0aGlzLmVsZW1IZWlnaHQ7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCBhbmNob3JQdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0QnJlYWtQb2ludHMobmV3Q29udGFpbmVySGVpZ2h0LCBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHVwcGVyIGFuZCBsb3dlciBicmVha3BvaW50cyBmb3IgdGhlIGVsZW1lbnQgdG8gYmVjb21lIHN0aWNreS91bnN0aWNreS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGVsZW1IZWlnaHQgLSBweCB2YWx1ZSBmb3Igc3RpY2t5LiRlbGVtZW50IGhlaWdodCwgY2FsY3VsYXRlZCBieSBgX3NldFNpemVzYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gY29tcGxldGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRCcmVha1BvaW50cyhlbGVtSGVpZ2h0LCBjYikge1xuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gICAgICBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgfVxuICAgIHZhciBtVG9wID0gZW1DYWxjKHRoaXMub3B0aW9ucy5tYXJnaW5Ub3ApLFxuICAgICAgICBtQnRtID0gZW1DYWxjKHRoaXMub3B0aW9ucy5tYXJnaW5Cb3R0b20pLFxuICAgICAgICB0b3BQb2ludCA9IHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMF0gOiB0aGlzLiRhbmNob3Iub2Zmc2V0KCkudG9wLFxuICAgICAgICBib3R0b21Qb2ludCA9IHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gOiB0b3BQb2ludCArIHRoaXMuYW5jaG9ySGVpZ2h0LFxuICAgICAgICAvLyB0b3BQb2ludCA9IHRoaXMuJGFuY2hvci5vZmZzZXQoKS50b3AgfHwgdGhpcy5wb2ludHNbMF0sXG4gICAgICAgIC8vIGJvdHRvbVBvaW50ID0gdG9wUG9pbnQgKyB0aGlzLmFuY2hvckhlaWdodCB8fCB0aGlzLnBvaW50c1sxXSxcbiAgICAgICAgd2luSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdGlja1RvID09PSAndG9wJykge1xuICAgICAgdG9wUG9pbnQgLT0gbVRvcDtcbiAgICAgIGJvdHRvbVBvaW50IC09IChlbGVtSGVpZ2h0ICsgbVRvcCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc3RpY2tUbyA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHRvcFBvaW50IC09ICh3aW5IZWlnaHQgLSAoZWxlbUhlaWdodCArIG1CdG0pKTtcbiAgICAgIGJvdHRvbVBvaW50IC09ICh3aW5IZWlnaHQgLSBtQnRtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy90aGlzIHdvdWxkIGJlIHRoZSBzdGlja1RvOiBib3RoIG9wdGlvbi4uLiB0cmlja3lcbiAgICB9XG5cbiAgICB0aGlzLnRvcFBvaW50ID0gdG9wUG9pbnQ7XG4gICAgdGhpcy5ib3R0b21Qb2ludCA9IGJvdHRvbVBvaW50O1xuXG4gICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGN1cnJlbnQgc3RpY2t5IGVsZW1lbnQuXG4gICAqIFJlc2V0cyB0aGUgZWxlbWVudCB0byB0aGUgdG9wIHBvc2l0aW9uIGZpcnN0LlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycywgSlMtYWRkZWQgY3NzIHByb3BlcnRpZXMgYW5kIGNsYXNzZXMsIGFuZCB1bndyYXBzIHRoZSAkZWxlbWVudCBpZiB0aGUgSlMgYWRkZWQgdGhlICRjb250YWluZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG5cbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGAke3RoaXMub3B0aW9ucy5zdGlja3lDbGFzc30gaXMtYW5jaG9yZWQgaXMtYXQtdG9wYClcbiAgICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgICAgICAgICAgICB0b3A6ICcnLFxuICAgICAgICAgICAgICAgICAgIGJvdHRvbTogJycsXG4gICAgICAgICAgICAgICAgICAgJ21heC13aWR0aCc6ICcnXG4gICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgIC5vZmYoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKTtcbiAgICBpZiAodGhpcy4kYW5jaG9yICYmIHRoaXMuJGFuY2hvci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGFuY2hvci5vZmYoJ2NoYW5nZS56Zi5zdGlja3knKTtcbiAgICB9XG4gICAgJCh3aW5kb3cpLm9mZih0aGlzLnNjcm9sbExpc3RlbmVyKTtcblxuICAgIGlmICh0aGlzLndhc1dyYXBwZWQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudW53cmFwKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnJ1xuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5TdGlja3kuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBDdXN0b21pemFibGUgY29udGFpbmVyIHRlbXBsYXRlLiBBZGQgeW91ciBvd24gY2xhc3NlcyBmb3Igc3R5bGluZyBhbmQgc2l6aW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICcmbHQ7ZGl2IGRhdGEtc3RpY2t5LWNvbnRhaW5lciBjbGFzcz1cInNtYWxsLTYgY29sdW1uc1wiJmd0OyZsdDsvZGl2Jmd0OydcbiAgICovXG4gIGNvbnRhaW5lcjogJzxkaXYgZGF0YS1zdGlja3ktY29udGFpbmVyPjwvZGl2PicsXG4gIC8qKlxuICAgKiBMb2NhdGlvbiBpbiB0aGUgdmlldyB0aGUgZWxlbWVudCBzdGlja3MgdG8uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3RvcCdcbiAgICovXG4gIHN0aWNrVG86ICd0b3AnLFxuICAvKipcbiAgICogSWYgYW5jaG9yZWQgdG8gYSBzaW5nbGUgZWxlbWVudCwgdGhlIGlkIG9mIHRoYXQgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZXhhbXBsZUlkJ1xuICAgKi9cbiAgYW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIHRvcCBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2V4YW1wbGVJZDp0b3AnXG4gICAqL1xuICB0b3BBbmNob3I6ICcnLFxuICAvKipcbiAgICogSWYgdXNpbmcgbW9yZSB0aGFuIG9uZSBlbGVtZW50IGFzIGFuY2hvciBwb2ludHMsIHRoZSBpZCBvZiB0aGUgYm90dG9tIGFuY2hvci5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZXhhbXBsZUlkOmJvdHRvbSdcbiAgICovXG4gIGJ0bUFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBNYXJnaW4sIGluIGBlbWAncyB0byBhcHBseSB0byB0aGUgdG9wIG9mIHRoZSBlbGVtZW50IHdoZW4gaXQgYmVjb21lcyBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgbWFyZ2luVG9wOiAxLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIGJvdHRvbSBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDFcbiAgICovXG4gIG1hcmdpbkJvdHRvbTogMSxcbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgc3RyaW5nIHRoYXQgaXMgdGhlIG1pbmltdW0gc2NyZWVuIHNpemUgYW4gZWxlbWVudCBzaG91bGQgYmVjb21lIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnbWVkaXVtJ1xuICAgKi9cbiAgc3RpY2t5T246ICdtZWRpdW0nLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBzdGlja3kgZWxlbWVudCwgYW5kIHJlbW92ZWQgb24gZGVzdHJ1Y3Rpb24uIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreWAuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3N0aWNreSdcbiAgICovXG4gIHN0aWNreUNsYXNzOiAnc3RpY2t5JyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGNvbnRhaW5lci4gRm91bmRhdGlvbiBkZWZhdWx0cyB0byBgc3RpY2t5LWNvbnRhaW5lcmAuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3N0aWNreS1jb250YWluZXInXG4gICAqL1xuICBjb250YWluZXJDbGFzczogJ3N0aWNreS1jb250YWluZXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHNjcm9sbCBldmVudHMgYmV0d2VlbiB0aGUgcGx1Z2luJ3MgcmVjYWxjdWxhdGluZyBzdGlja3kgcG9pbnRzLiBTZXR0aW5nIGl0IHRvIGAwYCB3aWxsIGNhdXNlIGl0IHRvIHJlY2FsYyBldmVyeSBzY3JvbGwgZXZlbnQsIHNldHRpbmcgaXQgdG8gYC0xYCB3aWxsIHByZXZlbnQgcmVjYWxjIG9uIHNjcm9sbC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSA1MFxuICAgKi9cbiAgY2hlY2tFdmVyeTogLTFcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBlbSB2YWx1ZXNcbiAqIEBwYXJhbSBOdW1iZXIge2VtfSAtIG51bWJlciBvZiBlbSdzIHRvIGNhbGN1bGF0ZSBpbnRvIHBpeGVsc1xuICovXG5mdW5jdGlvbiBlbUNhbGMoZW0pIHtcbiAgcmV0dXJuIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHksIG51bGwpLmZvbnRTaXplLCAxMCkgKiBlbTtcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFN0aWNreSwgJ1N0aWNreScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogVGFicyBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udGFic1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyIGlmIHRhYnMgY29udGFpbiBpbWFnZXNcbiAqL1xuXG5jbGFzcyBUYWJzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGFicy5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBUYWJzI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byB0YWJzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFRhYnMuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdUYWJzJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignVGFicycsIHtcbiAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICdBUlJPV19VUCc6ICdwcmV2aW91cycsXG4gICAgICAnQVJST1dfRE9XTic6ICduZXh0JyxcbiAgICAgICdBUlJPV19MRUZUJzogJ3ByZXZpb3VzJ1xuICAgICAgLy8gJ1RBQic6ICduZXh0JyxcbiAgICAgIC8vICdTSElGVF9UQUInOiAncHJldmlvdXMnXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHRhYnMgYnkgc2hvd2luZyBhbmQgZm9jdXNpbmcgKGlmIGF1dG9Gb2N1cz10cnVlKSB0aGUgcHJlc2V0IGFjdGl2ZSB0YWIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kdGFiVGl0bGVzID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfWApO1xuICAgIHRoaXMuJHRhYkNvbnRlbnQgPSAkKGBbZGF0YS10YWJzLWNvbnRlbnQ9XCIke3RoaXMuJGVsZW1lbnRbMF0uaWR9XCJdYCk7XG5cbiAgICB0aGlzLiR0YWJUaXRsZXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAkbGluayA9ICRlbGVtLmZpbmQoJ2EnKSxcbiAgICAgICAgICBpc0FjdGl2ZSA9ICRlbGVtLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSxcbiAgICAgICAgICBoYXNoID0gJGxpbmtbMF0uaGFzaC5zbGljZSgxKSxcbiAgICAgICAgICBsaW5rSWQgPSAkbGlua1swXS5pZCA/ICRsaW5rWzBdLmlkIDogYCR7aGFzaH0tbGFiZWxgLFxuICAgICAgICAgICR0YWJDb250ZW50ID0gJChgIyR7aGFzaH1gKTtcblxuICAgICAgJGVsZW0uYXR0cih7J3JvbGUnOiAncHJlc2VudGF0aW9uJ30pO1xuXG4gICAgICAkbGluay5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndGFiJyxcbiAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBoYXNoLFxuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGlzQWN0aXZlLFxuICAgICAgICAnaWQnOiBsaW5rSWRcbiAgICAgIH0pO1xuXG4gICAgICAkdGFiQ29udGVudC5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndGFicGFuZWwnLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWRcbiAgICAgIH0pO1xuXG4gICAgICBpZihpc0FjdGl2ZSAmJiBfdGhpcy5vcHRpb25zLmF1dG9Gb2N1cyl7XG4gICAgICAgICRsaW5rLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpIHtcbiAgICAgIHZhciAkaW1hZ2VzID0gdGhpcy4kdGFiQ29udGVudC5maW5kKCdpbWcnKTtcblxuICAgICAgaWYgKCRpbWFnZXMubGVuZ3RoKSB7XG4gICAgICAgIEZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQoJGltYWdlcywgdGhpcy5fc2V0SGVpZ2h0LmJpbmQodGhpcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2V0SGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLl9hZGRLZXlIYW5kbGVyKCk7XG4gICAgdGhpcy5fYWRkQ2xpY2tIYW5kbGVyKCk7XG4gICAgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyID0gbnVsbDtcbiAgICBcbiAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIgPSB0aGlzLl9zZXRIZWlnaHQuYmluZCh0aGlzKTtcbiAgICAgIFxuICAgICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGNsaWNrIGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIHRhYnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQ2xpY2tIYW5kbGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub2ZmKCdjbGljay56Zi50YWJzJylcbiAgICAgIC5vbignY2xpY2suemYudGFicycsIGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfWAsIGZ1bmN0aW9uKGUpe1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCQodGhpcykpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBrZXlib2FyZCBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZEtleUhhbmRsZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgJGZpcnN0VGFiID0gX3RoaXMuJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3Qtb2YtdHlwZScpO1xuICAgIHZhciAkbGFzdFRhYiA9IF90aGlzLiRlbGVtZW50LmZpbmQoJ2xpOmxhc3Qtb2YtdHlwZScpO1xuXG4gICAgdGhpcy4kdGFiVGl0bGVzLm9mZigna2V5ZG93bi56Zi50YWJzJykub24oJ2tleWRvd24uemYudGFicycsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYgKGUud2hpY2ggPT09IDkpIHJldHVybjtcbiAgICAgIFxuXG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAkZWxlbWVudHMgPSAkZWxlbWVudC5wYXJlbnQoJ3VsJykuY2hpbGRyZW4oJ2xpJyksXG4gICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLndyYXBPbktleXMpIHtcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9IGkgPT09IDAgPyAkZWxlbWVudHMubGFzdCgpIDogJGVsZW1lbnRzLmVxKGktMSk7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSBpID09PSAkZWxlbWVudHMubGVuZ3RoIC0xID8gJGVsZW1lbnRzLmZpcnN0KCkgOiAkZWxlbWVudHMuZXEoaSsxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWF4KDAsIGktMSkpO1xuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkrMSwgJGVsZW1lbnRzLmxlbmd0aC0xKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdUYWJzJywge1xuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkZWxlbWVudC5maW5kKCdbcm9sZT1cInRhYlwiXScpLmZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkZWxlbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpO1xuICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJHByZXZFbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJG5leHRFbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCRuZXh0RWxlbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgdGFiIGAkdGFyZ2V0Q29udGVudGAgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gVGFiIHRvIG9wZW4uXG4gICAqIEBmaXJlcyBUYWJzI2NoYW5nZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIF9oYW5kbGVUYWJDaGFuZ2UoJHRhcmdldCkge1xuICAgIHZhciAkdGFiTGluayA9ICR0YXJnZXQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKSxcbiAgICAgICAgaGFzaCA9ICR0YWJMaW5rWzBdLmhhc2gsXG4gICAgICAgICR0YXJnZXRDb250ZW50ID0gdGhpcy4kdGFiQ29udGVudC5maW5kKGhhc2gpLFxuICAgICAgICAkb2xkVGFiID0gdGhpcy4kZWxlbWVudC5cbiAgICAgICAgICBmaW5kKGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfS5pcy1hY3RpdmVgKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgICAgICAuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKHsgJ2FyaWEtc2VsZWN0ZWQnOiAnZmFsc2UnIH0pO1xuXG4gICAgJChgIyR7JG9sZFRhYi5hdHRyKCdhcmlhLWNvbnRyb2xzJyl9YClcbiAgICAgIC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgIC5hdHRyKHsgJ2FyaWEtaGlkZGVuJzogJ3RydWUnIH0pO1xuXG4gICAgJHRhcmdldC5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAkdGFiTGluay5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6ICd0cnVlJ30pO1xuXG4gICAgJHRhcmdldENvbnRlbnRcbiAgICAgIC5hZGRDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgIC5hdHRyKHsnYXJpYS1oaWRkZW4nOiAnZmFsc2UnfSk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIHN1Y2Nlc3NmdWxseSBjaGFuZ2VkIHRhYnMuXG4gICAgICogQGV2ZW50IFRhYnMjY2hhbmdlXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UuemYudGFicycsIFskdGFyZ2V0XSk7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIG1ldGhvZCBmb3Igc2VsZWN0aW5nIGEgY29udGVudCBwYW5lIHRvIGRpc3BsYXkuXG4gICAqIEBwYXJhbSB7alF1ZXJ5IHwgU3RyaW5nfSBlbGVtIC0galF1ZXJ5IG9iamVjdCBvciBzdHJpbmcgb2YgdGhlIGlkIG9mIHRoZSBwYW5lIHRvIGRpc3BsYXkuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgc2VsZWN0VGFiKGVsZW0pIHtcbiAgICB2YXIgaWRTdHI7XG5cbiAgICBpZiAodHlwZW9mIGVsZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICBpZFN0ciA9IGVsZW1bMF0uaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkU3RyID0gZWxlbTtcbiAgICB9XG5cbiAgICBpZiAoaWRTdHIuaW5kZXhPZignIycpIDwgMCkge1xuICAgICAgaWRTdHIgPSBgIyR7aWRTdHJ9YDtcbiAgICB9XG5cbiAgICB2YXIgJHRhcmdldCA9IHRoaXMuJHRhYlRpdGxlcy5maW5kKGBbaHJlZj1cIiR7aWRTdHJ9XCJdYCkucGFyZW50KGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfWApO1xuXG4gICAgdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCR0YXJnZXQpO1xuICB9O1xuICAvKipcbiAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIGVhY2ggcGFuZWwgdG8gdGhlIGhlaWdodCBvZiB0aGUgdGFsbGVzdCBwYW5lbC5cbiAgICogSWYgZW5hYmxlZCBpbiBvcHRpb25zLCBnZXRzIGNhbGxlZCBvbiBtZWRpYSBxdWVyeSBjaGFuZ2UuXG4gICAqIElmIGxvYWRpbmcgY29udGVudCB2aWEgZXh0ZXJuYWwgc291cmNlLCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IG9yIHdpdGggX3JlZmxvdy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0SGVpZ2h0KCkge1xuICAgIHZhciBtYXggPSAwO1xuICAgIHRoaXMuJHRhYkNvbnRlbnRcbiAgICAgIC5maW5kKGAuJHt0aGlzLm9wdGlvbnMucGFuZWxDbGFzc31gKVxuICAgICAgLmNzcygnaGVpZ2h0JywgJycpXG4gICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhbmVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGlzQWN0aXZlID0gcGFuZWwuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgICBwYW5lbC5jc3Moeyd2aXNpYmlsaXR5JzogJ2hpZGRlbicsICdkaXNwbGF5JzogJ2Jsb2NrJ30pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRlbXAgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgcGFuZWwuY3NzKHtcbiAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJycsXG4gICAgICAgICAgICAnZGlzcGxheSc6ICcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXggPSB0ZW1wID4gbWF4ID8gdGVtcCA6IG1heDtcbiAgICAgIH0pXG4gICAgICAuY3NzKCdoZWlnaHQnLCBgJHttYXh9cHhgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBhbiB0YWJzLlxuICAgKiBAZmlyZXMgVGFicyNkZXN0cm95ZWRcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmZpbmQoYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9YClcbiAgICAgIC5vZmYoJy56Zi50YWJzJykuaGlkZSgpLmVuZCgpXG4gICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLnBhbmVsQ2xhc3N9YClcbiAgICAgIC5oaWRlKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICBpZiAodGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICQod2luZG93KS5vZmYoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblRhYnMuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBhY3RpdmUgcGFuZSBvbiBsb2FkIGlmIHNldCB0byB0cnVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3Mga2V5Ym9hcmQgaW5wdXQgdG8gJ3dyYXAnIGFyb3VuZCB0aGUgdGFiIGxpbmtzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIHdyYXBPbktleXM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdGFiIGNvbnRlbnQgcGFuZXMgdG8gbWF0Y2ggaGVpZ2h0cyBpZiBzZXQgdG8gdHJ1ZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgbWF0Y2hIZWlnaHQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIGBsaWAncyBpbiB0YWIgbGluayBsaXN0LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0YWJzLXRpdGxlJ1xuICAgKi9cbiAgbGlua0NsYXNzOiAndGFicy10aXRsZScsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGNvbnRlbnQgY29udGFpbmVycy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndGFicy1wYW5lbCdcbiAgICovXG4gIHBhbmVsQ2xhc3M6ICd0YWJzLXBhbmVsJ1xufTtcblxuZnVuY3Rpb24gY2hlY2tDbGFzcygkZWxlbSl7XG4gIHJldHVybiAkZWxlbS5oYXNDbGFzcygnaXMtYWN0aXZlJyk7XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihUYWJzLCAnVGFicycpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogVG9nZ2xlciBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udG9nZ2xlclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xuXG5jbGFzcyBUb2dnbGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVG9nZ2xlci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBUb2dnbGVyI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBUb2dnbGVyLmRlZmF1bHRzLCBlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5jbGFzc05hbWUgPSAnJztcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1RvZ2dsZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgVG9nZ2xlciBwbHVnaW4gYnkgcGFyc2luZyB0aGUgdG9nZ2xlIGNsYXNzIGZyb20gZGF0YS10b2dnbGVyLCBvciBhbmltYXRpb24gY2xhc3NlcyBmcm9tIGRhdGEtYW5pbWF0ZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaW5wdXQ7XG4gICAgLy8gUGFyc2UgYW5pbWF0aW9uIGNsYXNzZXMgaWYgdGhleSB3ZXJlIHNldFxuICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0ZSkge1xuICAgICAgaW5wdXQgPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZS5zcGxpdCgnICcpO1xuXG4gICAgICB0aGlzLmFuaW1hdGlvbkluID0gaW5wdXRbMF07XG4gICAgICB0aGlzLmFuaW1hdGlvbk91dCA9IGlucHV0WzFdIHx8IG51bGw7XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgcGFyc2UgdG9nZ2xlIGNsYXNzXG4gICAgZWxzZSB7XG4gICAgICBpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZGF0YSgndG9nZ2xlcicpO1xuICAgICAgLy8gQWxsb3cgZm9yIGEgLiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzdHJpbmdcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gaW5wdXRbMF0gPT09ICcuJyA/IGlucHV0LnNsaWNlKDEpIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gQWRkIEFSSUEgYXR0cmlidXRlcyB0byB0cmlnZ2Vyc1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQ7XG4gICAgJChgW2RhdGEtb3Blbj1cIiR7aWR9XCJdLCBbZGF0YS1jbG9zZT1cIiR7aWR9XCJdLCBbZGF0YS10b2dnbGU9XCIke2lkfVwiXWApXG4gICAgICAuYXR0cignYXJpYS1jb250cm9scycsIGlkKTtcbiAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGhpZGRlbiwgYWRkIGFyaWEtaGlkZGVuXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdGhpcy4kZWxlbWVudC5pcygnOmhpZGRlbicpID8gZmFsc2UgOiB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIHRoZSB0b2dnbGUgdHJpZ2dlci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b2dnbGUuemYudHJpZ2dlcicpLm9uKCd0b2dnbGUuemYudHJpZ2dlcicsIHRoaXMudG9nZ2xlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHRhcmdldCBjbGFzcyBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQuIEFuIGV2ZW50IGlzIGZpcmVkIGZyb20gdGhlIG9yaWdpbmFsIHRyaWdnZXIgZGVwZW5kaW5nIG9uIGlmIHRoZSByZXN1bHRhbnQgc3RhdGUgd2FzIFwib25cIiBvciBcIm9mZlwiLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFRvZ2dsZXIjb25cbiAgICogQGZpcmVzIFRvZ2dsZXIjb2ZmXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgdGhpc1sgdGhpcy5vcHRpb25zLmFuaW1hdGUgPyAnX3RvZ2dsZUFuaW1hdGUnIDogJ190b2dnbGVDbGFzcyddKCk7XG4gIH1cblxuICBfdG9nZ2xlQ2xhc3MoKSB7XG4gICAgdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLmNsYXNzTmFtZSk7XG5cbiAgICB2YXIgaXNPbiA9IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3ModGhpcy5jbGFzc05hbWUpO1xuICAgIGlmIChpc09uKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBoYXMgdGhlIGNsYXNzIGFmdGVyIGEgdG9nZ2xlLlxuICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb25cbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvbi56Zi50b2dnbGVyJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgZG9lcyBub3QgaGF2ZSB0aGUgY2xhc3MgYWZ0ZXIgYSB0b2dnbGUuXG4gICAgICAgKiBAZXZlbnQgVG9nZ2xlciNvZmZcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvZmYuemYudG9nZ2xlcicpO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZUFSSUEoaXNPbik7XG4gIH1cblxuICBfdG9nZ2xlQW5pbWF0ZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKHRoaXMuJGVsZW1lbnQsIHRoaXMuYW5pbWF0aW9uSW4sIGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5fdXBkYXRlQVJJQSh0cnVlKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdvbi56Zi50b2dnbGVyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsIHRoaXMuYW5pbWF0aW9uT3V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFSSUEoZmFsc2UpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ29mZi56Zi50b2dnbGVyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfdXBkYXRlQVJJQShpc09uKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPbiA/IHRydWUgOiBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIFRvZ2dsZXIgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRvZ2dsZXInKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVG9nZ2xlci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRlbGxzIHRoZSBwbHVnaW4gaWYgdGhlIGVsZW1lbnQgc2hvdWxkIGFuaW1hdGVkIHdoZW4gdG9nZ2xlZC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgYW5pbWF0ZTogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihUb2dnbGVyLCAnVG9nZ2xlcicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogVG9vbHRpcCBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udG9vbHRpcFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbmNsYXNzIFRvb2x0aXAge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIFRvb2x0aXAuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgVG9vbHRpcCNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhdHRhY2ggYSB0b29sdGlwIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9iamVjdCB0byBleHRlbmQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVG9vbHRpcC5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1Rvb2x0aXAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgdG9vbHRpcCBieSBzZXR0aW5nIHRoZSBjcmVhdGluZyB0aGUgdGlwIGVsZW1lbnQsIGFkZGluZyBpdCdzIHRleHQsIHNldHRpbmcgcHJpdmF0ZSB2YXJpYWJsZXMgYW5kIHNldHRpbmcgYXR0cmlidXRlcyBvbiB0aGUgYW5jaG9yLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGVsZW1JZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScpIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ3Rvb2x0aXAnKTtcblxuICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgfHwgdGhpcy5fZ2V0UG9zaXRpb25DbGFzcyh0aGlzLiRlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMudGlwVGV4dCA9IHRoaXMub3B0aW9ucy50aXBUZXh0IHx8IHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnKTtcbiAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlID8gJCh0aGlzLm9wdGlvbnMudGVtcGxhdGUpIDogdGhpcy5fYnVpbGRUZW1wbGF0ZShlbGVtSWQpO1xuXG4gICAgdGhpcy50ZW1wbGF0ZS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KVxuICAgICAgICAudGV4dCh0aGlzLm9wdGlvbnMudGlwVGV4dClcbiAgICAgICAgLmhpZGUoKTtcblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAndGl0bGUnOiAnJyxcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogZWxlbUlkLFxuICAgICAgJ2RhdGEteWV0aS1ib3gnOiBlbGVtSWQsXG4gICAgICAnZGF0YS10b2dnbGUnOiBlbGVtSWQsXG4gICAgICAnZGF0YS1yZXNpemUnOiBlbGVtSWRcbiAgICB9KS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudHJpZ2dlckNsYXNzKTtcblxuICAgIC8vaGVscGVyIHZhcmlhYmxlcyB0byB0cmFjayBtb3ZlbWVudCBvbiBjb2xsaXNpb25zXG4gICAgdGhpcy51c2VkUG9zaXRpb25zID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gNDtcbiAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogR3JhYnMgdGhlIGN1cnJlbnQgcG9zaXRpb25pbmcgY2xhc3MsIGlmIHByZXNlbnQsIGFuZCByZXR1cm5zIHRoZSB2YWx1ZSBvciBhbiBlbXB0eSBzdHJpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0UG9zaXRpb25DbGFzcyhlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSB7IHJldHVybiAnJzsgfVxuICAgIC8vIHZhciBwb3NpdGlvbiA9IGVsZW1lbnQuYXR0cignY2xhc3MnKS5tYXRjaCgvdG9wfGxlZnR8cmlnaHQvZyk7XG4gICAgdmFyIHBvc2l0aW9uID0gZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goL1xcYih0b3B8bGVmdHxyaWdodClcXGIvZyk7XG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPyBwb3NpdGlvblswXSA6ICcnO1xuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfTtcbiAgLyoqXG4gICAqIGJ1aWxkcyB0aGUgdG9vbHRpcCBlbGVtZW50LCBhZGRzIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm5zIHRoZSB0ZW1wbGF0ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9idWlsZFRlbXBsYXRlKGlkKSB7XG4gICAgdmFyIHRlbXBsYXRlQ2xhc3NlcyA9IChgJHt0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzfSAke3RoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzfSAke3RoaXMub3B0aW9ucy50ZW1wbGF0ZUNsYXNzZXN9YCkudHJpbSgpO1xuICAgIHZhciAkdGVtcGxhdGUgPSAgJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcyh0ZW1wbGF0ZUNsYXNzZXMpLmF0dHIoe1xuICAgICAgJ3JvbGUnOiAndG9vbHRpcCcsXG4gICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgJ2RhdGEtaXMtYWN0aXZlJzogZmFsc2UsXG4gICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgJ2lkJzogaWRcbiAgICB9KTtcbiAgICByZXR1cm4gJHRlbXBsYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgaWYgYSBjb2xsaXNpb24gZXZlbnQgaXMgZGV0ZWN0ZWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIHBvc2l0aW9uaW5nIGNsYXNzIHRvIHRyeVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlcG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMucHVzaChwb3NpdGlvbiA/IHBvc2l0aW9uIDogJ2JvdHRvbScpO1xuXG4gICAgLy9kZWZhdWx0LCB0cnkgc3dpdGNoaW5nIHRvIG9wcG9zaXRlIHNpZGVcbiAgICBpZiAoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5hZGRDbGFzcygndG9wJyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpIDwgMCkpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdyaWdodCcpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbilcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2xlZnQnKTtcbiAgICB9XG5cbiAgICAvL2lmIGRlZmF1bHQgY2hhbmdlIGRpZG4ndCB3b3JrLCB0cnkgYm90dG9tIG9yIGxlZnQgZmlyc3RcbiAgICBlbHNlIGlmICghcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignbGVmdCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIC8vaWYgbm90aGluZyBjbGVhcmVkLCBzZXQgdG8gYm90dG9tXG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgdGhpcy5jbGFzc0NoYW5nZWQgPSB0cnVlO1xuICAgIHRoaXMuY291bnRlci0tO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHMgdGhlIHBvc2l0aW9uIGNsYXNzIG9mIGFuIGVsZW1lbnQgYW5kIHJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiB1bnRpbCB0aGVyZSBhcmUgbm8gbW9yZSBwb3NzaWJsZSBwb3NpdGlvbnMgdG8gYXR0ZW1wdCwgb3IgdGhlIHRvb2x0aXAgZWxlbWVudCBpcyBubyBsb25nZXIgY29sbGlkaW5nLlxuICAgKiBpZiB0aGUgdG9vbHRpcCBpcyBsYXJnZXIgdGhhbiB0aGUgc2NyZWVuIHdpZHRoLCBkZWZhdWx0IHRvIGZ1bGwgd2lkdGggLSBhbnkgdXNlciBzZWxlY3RlZCBtYXJnaW5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRQb3NpdGlvbigpIHtcbiAgICB2YXIgcG9zaXRpb24gPSB0aGlzLl9nZXRQb3NpdGlvbkNsYXNzKHRoaXMudGVtcGxhdGUpLFxuICAgICAgICAkdGlwRGltcyA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy50ZW1wbGF0ZSksXG4gICAgICAgICRhbmNob3JEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRlbGVtZW50KSxcbiAgICAgICAgZGlyZWN0aW9uID0gKHBvc2l0aW9uID09PSAnbGVmdCcgPyAnbGVmdCcgOiAoKHBvc2l0aW9uID09PSAncmlnaHQnKSA/ICdsZWZ0JyA6ICd0b3AnKSksXG4gICAgICAgIHBhcmFtID0gKGRpcmVjdGlvbiA9PT0gJ3RvcCcpID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBvZmZzZXQgPSAocGFyYW0gPT09ICdoZWlnaHQnKSA/IHRoaXMub3B0aW9ucy52T2Zmc2V0IDogdGhpcy5vcHRpb25zLmhPZmZzZXQsXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmICgoJHRpcERpbXMud2lkdGggPj0gJHRpcERpbXMud2luZG93RGltcy53aWR0aCkgfHwgKCF0aGlzLmNvdW50ZXIgJiYgIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy50ZW1wbGF0ZSkpKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMudGVtcGxhdGUsIHRoaXMuJGVsZW1lbnQsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0LCB0cnVlKSkuY3NzKHtcbiAgICAgIC8vIHRoaXMuJGVsZW1lbnQub2Zmc2V0KEZvdW5kYXRpb24uR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLCB0aGlzLiRlbGVtZW50LCAnY2VudGVyIGJvdHRvbScsIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCwgdHJ1ZSkpLmNzcyh7XG4gICAgICAgICd3aWR0aCc6ICRhbmNob3JEaW1zLndpbmRvd0RpbXMud2lkdGggLSAodGhpcy5vcHRpb25zLmhPZmZzZXQgKiAyKSxcbiAgICAgICAgJ2hlaWdodCc6ICdhdXRvJ1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy50ZW1wbGF0ZS5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLCB0aGlzLiRlbGVtZW50LCdjZW50ZXIgJyArIChwb3NpdGlvbiB8fCAnYm90dG9tJyksIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCkpO1xuXG4gICAgd2hpbGUoIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy50ZW1wbGF0ZSkgJiYgdGhpcy5jb3VudGVyKSB7XG4gICAgICB0aGlzLl9yZXBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHJldmVhbHMgdGhlIHRvb2x0aXAsIGFuZCBmaXJlcyBhbiBldmVudCB0byBjbG9zZSBhbnkgb3RoZXIgb3BlbiB0b29sdGlwcyBvbiB0aGUgcGFnZVxuICAgKiBAZmlyZXMgVG9vbHRpcCNjbG9zZW1lXG4gICAqIEBmaXJlcyBUb29sdGlwI3Nob3dcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzaG93KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd09uICE9PSAnYWxsJyAmJiAhRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLnNob3dPbikpIHtcbiAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ1RoZSBzY3JlZW4gaXMgdG9vIHNtYWxsIHRvIGRpc3BsYXkgdGhpcyB0b29sdGlwJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLnRlbXBsYXRlLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKS5zaG93KCk7XG4gICAgdGhpcy5fc2V0UG9zaXRpb24oKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHRvIGNsb3NlIGFsbCBvdGhlciBvcGVuIHRvb2x0aXBzIG9uIHRoZSBwYWdlXG4gICAgICogQGV2ZW50IENsb3NlbWUjdG9vbHRpcFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VtZS56Zi50b29sdGlwJywgdGhpcy50ZW1wbGF0ZS5hdHRyKCdpZCcpKTtcblxuXG4gICAgdGhpcy50ZW1wbGF0ZS5hdHRyKHtcbiAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IHRydWUsXG4gICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZVxuICAgIH0pO1xuICAgIF90aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnRlbXBsYXRlKTtcbiAgICB0aGlzLnRlbXBsYXRlLnN0b3AoKS5oaWRlKCkuY3NzKCd2aXNpYmlsaXR5JywgJycpLmZhZGVJbih0aGlzLm9wdGlvbnMuZmFkZUluRHVyYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgLy9tYXliZSBkbyBzdHVmZj9cbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB0b29sdGlwIGlzIHNob3duXG4gICAgICogQGV2ZW50IFRvb2x0aXAjc2hvd1xuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi50b29sdGlwJyk7XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgdGhlIGN1cnJlbnQgdG9vbHRpcCwgYW5kIHJlc2V0cyB0aGUgcG9zaXRpb25pbmcgY2xhc3MgaWYgaXQgd2FzIGNoYW5nZWQgZHVlIHRvIGNvbGxpc2lvblxuICAgKiBAZmlyZXMgVG9vbHRpcCNoaWRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgaGlkZSgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnaGlkaW5nJywgdGhpcy4kZWxlbWVudC5kYXRhKCd5ZXRpLWJveCcpKTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMudGVtcGxhdGUuc3RvcCgpLmF0dHIoe1xuICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IGZhbHNlXG4gICAgfSkuZmFkZU91dCh0aGlzLm9wdGlvbnMuZmFkZU91dER1cmF0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICBpZiAoX3RoaXMuY2xhc3NDaGFuZ2VkKSB7XG4gICAgICAgIF90aGlzLnRlbXBsYXRlXG4gICAgICAgICAgICAgLnJlbW92ZUNsYXNzKF90aGlzLl9nZXRQb3NpdGlvbkNsYXNzKF90aGlzLnRlbXBsYXRlKSlcbiAgICAgICAgICAgICAuYWRkQ2xhc3MoX3RoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzKTtcblxuICAgICAgIF90aGlzLnVzZWRQb3NpdGlvbnMgPSBbXTtcbiAgICAgICBfdGhpcy5jb3VudGVyID0gNDtcbiAgICAgICBfdGhpcy5jbGFzc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBmaXJlcyB3aGVuIHRoZSB0b29sdGlwIGlzIGhpZGRlblxuICAgICAqIEBldmVudCBUb29sdGlwI2hpZGVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYudG9vbHRpcCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIGFkZHMgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgdG9vbHRpcCBhbmQgaXRzIGFuY2hvclxuICAgKiBUT0RPIGNvbWJpbmUgc29tZSBvZiB0aGUgbGlzdGVuZXJzIGxpa2UgZm9jdXMgYW5kIG1vdXNlZW50ZXIsIGV0Yy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgJHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZTtcbiAgICB2YXIgaXNGb2N1cyA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZGlzYWJsZUhvdmVyKSB7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignbW91c2VlbnRlci56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoIV90aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfdGhpcy5zaG93KCk7XG4gICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VsZWF2ZS56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgIGlmICghaXNGb2N1cyB8fCAoX3RoaXMuaXNDbGljayAmJiAhX3RoaXMub3B0aW9ucy5jbGlja09wZW4pKSB7XG4gICAgICAgICAgX3RoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3Blbikge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2Vkb3duLnpmLnRvb2x0aXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChfdGhpcy5pc0NsaWNrKSB7XG4gICAgICAgICAgLy9fdGhpcy5oaWRlKCk7XG4gICAgICAgICAgLy8gX3RoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmlzQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgIGlmICgoX3RoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIgfHwgIV90aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykpICYmICFfdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgX3RoaXMuc2hvdygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZG93bi56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBfdGhpcy5pc0NsaWNrID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVGb3JUb3VjaCkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uKCd0YXAuemYudG9vbHRpcCB0b3VjaGVuZC56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBfdGhpcy5pc0FjdGl2ZSA/IF90aGlzLmhpZGUoKSA6IF90aGlzLnNob3coKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgLy8gJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgIC8vICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5oaWRlLmJpbmQodGhpcylcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5oaWRlLmJpbmQodGhpcylcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignZm9jdXMuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaXNGb2N1cyA9IHRydWU7XG4gICAgICAgIGlmIChfdGhpcy5pc0NsaWNrKSB7XG4gICAgICAgICAgLy8gSWYgd2UncmUgbm90IHNob3dpbmcgb3BlbiBvbiBjbGlja3MsIHdlIG5lZWQgdG8gcHJldGVuZCBhIGNsaWNrLWxhdW5jaGVkIGZvY3VzIGlzbid0XG4gICAgICAgICAgLy8gYSByZWFsIGZvY3VzLCBvdGhlcndpc2Ugb24gaG92ZXIgYW5kIGNvbWUgYmFjayB3ZSBnZXQgYmFkIGJlaGF2aW9yXG4gICAgICAgICAgaWYoIV90aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSB7IGlzRm9jdXMgPSBmYWxzZTsgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIC5vbignZm9jdXNvdXQuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaXNGb2N1cyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhpZGUoKTtcbiAgICAgIH0pXG5cbiAgICAgIC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoX3RoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICBfdGhpcy5fc2V0UG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogYWRkcyBhIHRvZ2dsZSBtZXRob2QsIGluIGFkZGl0aW9uIHRvIHRoZSBzdGF0aWMgc2hvdygpICYgaGlkZSgpIGZ1bmN0aW9uc1xuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiB0b29sdGlwLCByZW1vdmVzIHRlbXBsYXRlIGVsZW1lbnQgZnJvbSB0aGUgdmlldy5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnLCB0aGlzLnRlbXBsYXRlLnRleHQoKSlcbiAgICAgICAgICAgICAgICAgLm9mZignLnpmLnRyaWdnZXIgLnpmLnRvb3RpcCcpXG4gICAgICAgICAgICAgICAgLy8gIC5yZW1vdmVDbGFzcygnaGFzLXRpcCcpXG4gICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEteWV0aS1ib3gnKVxuICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS10b2dnbGUnKVxuICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1yZXNpemUnKTtcblxuICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlKCk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVG9vbHRpcC5kZWZhdWx0cyA9IHtcbiAgZGlzYWJsZUZvclRvdWNoOiBmYWxzZSxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCBiZWZvcmUgYSB0b29sdGlwIHNob3VsZCBvcGVuIG9uIGhvdmVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDIwMFxuICAgKi9cbiAgaG92ZXJEZWxheTogMjAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIGEgdG9vbHRpcCBzaG91bGQgdGFrZSB0byBmYWRlIGludG8gdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxNTBcbiAgICovXG4gIGZhZGVJbkR1cmF0aW9uOiAxNTAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgYSB0b29sdGlwIHNob3VsZCB0YWtlIHRvIGZhZGUgb3V0IG9mIHZpZXcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTUwXG4gICAqL1xuICBmYWRlT3V0RHVyYXRpb246IDE1MCxcbiAgLyoqXG4gICAqIERpc2FibGVzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgdGhlIHRvb2x0aXAgaWYgc2V0IHRvIHRydWVcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGFkZHRpb25hbCBjbGFzc2VzIHRvIGFwcGx5IHRvIHRoZSB0b29sdGlwIHRlbXBsYXRlIG9uIGluaXQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ215LWNvb2wtdGlwLWNsYXNzJ1xuICAgKi9cbiAgdGVtcGxhdGVDbGFzc2VzOiAnJyxcbiAgLyoqXG4gICAqIE5vbi1vcHRpb25hbCBjbGFzcyBhZGRlZCB0byB0b29sdGlwIHRlbXBsYXRlcy4gRm91bmRhdGlvbiBkZWZhdWx0IGlzICd0b29sdGlwJy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndG9vbHRpcCdcbiAgICovXG4gIHRvb2x0aXBDbGFzczogJ3Rvb2x0aXAnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgdG9vbHRpcCBhbmNob3IgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnaGFzLXRpcCdcbiAgICovXG4gIHRyaWdnZXJDbGFzczogJ2hhcy10aXAnLFxuICAvKipcbiAgICogTWluaW11bSBicmVha3BvaW50IHNpemUgYXQgd2hpY2ggdG8gb3BlbiB0aGUgdG9vbHRpcC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnc21hbGwnXG4gICAqL1xuICBzaG93T246ICdzbWFsbCcsXG4gIC8qKlxuICAgKiBDdXN0b20gdGVtcGxhdGUgdG8gYmUgdXNlZCB0byBnZW5lcmF0ZSBtYXJrdXAgZm9yIHRvb2x0aXAuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJyZsdDtkaXYgY2xhc3M9XCJ0b29sdGlwXCImZ3Q7Jmx0Oy9kaXYmZ3Q7J1xuICAgKi9cbiAgdGVtcGxhdGU6ICcnLFxuICAvKipcbiAgICogVGV4dCBkaXNwbGF5ZWQgaW4gdGhlIHRvb2x0aXAgdGVtcGxhdGUgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnU29tZSBjb29sIHNwYWNlIGZhY3QgaGVyZS4nXG4gICAqL1xuICB0aXBUZXh0OiAnJyxcbiAgdG91Y2hDbG9zZVRleHQ6ICdUYXAgdG8gY2xvc2UuJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdG9vbHRpcCB0byByZW1haW4gb3BlbiBpZiB0cmlnZ2VyZWQgd2l0aCBhIGNsaWNrIG9yIHRvdWNoIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrT3BlbjogdHJ1ZSxcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgcG9zaXRpb25pbmcgY2xhc3Nlcywgc2V0IGJ5IHRoZSBKU1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b3AnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgcHVzaCBhd2F5IGZyb20gdGhlIGFuY2hvciBvbiB0aGUgWSBheGlzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICB2T2Zmc2V0OiAxMCxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgcHVzaCBhd2F5IGZyb20gdGhlIGFuY2hvciBvbiB0aGUgWCBheGlzLCBpZiBhbGlnbmVkIHRvIGEgc2lkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMlxuICAgKi9cbiAgaE9mZnNldDogMTJcbn07XG5cbi8qKlxuICogVE9ETyB1dGlsaXplIHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gKi9cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFRvb2x0aXAsICdUb29sdGlwJyk7XG5cbn0oalF1ZXJ5KTsiLCIndXNlIHN0cmljdCc7XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbigpIHtcbiAgaWYgKCFEYXRlLm5vdylcbiAgICBEYXRlLm5vdyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH07XG5cbiAgdmFyIHZlbmRvcnMgPSBbJ3dlYmtpdCcsICdtb3onXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKytpKSB7XG4gICAgICB2YXIgdnAgPSB2ZW5kb3JzW2ldO1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2cCsnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAod2luZG93W3ZwKydDYW5jZWxBbmltYXRpb25GcmFtZSddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB3aW5kb3dbdnArJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddKTtcbiAgfVxuICBpZiAoL2lQKGFkfGhvbmV8b2QpLipPUyA2Ly50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICAgIHx8ICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8ICF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHtcbiAgICB2YXIgbGFzdFRpbWUgPSAwO1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIG5leHRUaW1lID0gTWF0aC5tYXgobGFzdFRpbWUgKyAxNiwgbm93KTtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNhbGxiYWNrKGxhc3RUaW1lID0gbmV4dFRpbWUpOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0VGltZSAtIG5vdyk7XG4gICAgfTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjbGVhclRpbWVvdXQ7XG4gIH1cbn0pKCk7XG5cbnZhciBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG52YXIgYWN0aXZlQ2xhc3NlcyA9IFsnbXVpLWVudGVyLWFjdGl2ZScsICdtdWktbGVhdmUtYWN0aXZlJ107XG5cbi8vIEZpbmQgdGhlIHJpZ2h0IFwidHJhbnNpdGlvbmVuZFwiIGV2ZW50IGZvciB0aGlzIGJyb3dzZXJcbnZhciBlbmRFdmVudCA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHRyYW5zaXRpb25zID0ge1xuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICdNb3pUcmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdPVHJhbnNpdGlvbic6ICdvdHJhbnNpdGlvbmVuZCdcbiAgfVxuICB2YXIgZWxlbSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtLnN0eWxlW3RdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25zW3RdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSkoKTtcblxuZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gIGVsZW1lbnQgPSAkKGVsZW1lbnQpLmVxKDApO1xuXG4gIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICBpZiAoZW5kRXZlbnQgPT09IG51bGwpIHtcbiAgICBpc0luID8gZWxlbWVudC5zaG93KCkgOiBlbGVtZW50LmhpZGUoKTtcbiAgICBjYigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpbml0Q2xhc3MgPSBpc0luID8gaW5pdENsYXNzZXNbMF0gOiBpbml0Q2xhc3Nlc1sxXTtcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNJbiA/IGFjdGl2ZUNsYXNzZXNbMF0gOiBhY3RpdmVDbGFzc2VzWzFdO1xuXG4gIC8vIFNldCB1cCB0aGUgYW5pbWF0aW9uXG4gIHJlc2V0KCk7XG4gIGVsZW1lbnQuYWRkQ2xhc3MoYW5pbWF0aW9uKTtcbiAgZWxlbWVudC5jc3MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhpbml0Q2xhc3MpO1xuICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgfSk7XG5cbiAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aDtcbiAgICBlbGVtZW50LmNzcygndHJhbnNpdGlvbicsICcnKTtcbiAgICBlbGVtZW50LmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKCd0cmFuc2l0aW9uZW5kJywgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhpbml0Q2xhc3MgKyAnICcgKyBhY3RpdmVDbGFzcyArICcgJyArIGFuaW1hdGlvbik7XG4gIH1cbn1cblxudmFyIE1vdGlvblVJID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuIiwialF1ZXJ5KCAnaWZyYW1lW3NyYyo9XCJ5b3V0dWJlLmNvbVwiXScpLndyYXAoXCI8ZGl2IGNsYXNzPSdmbGV4LXZpZGVvIHdpZGVzY3JlZW4nLz5cIik7XG5qUXVlcnkoICdpZnJhbWVbc3JjKj1cInZpbWVvLmNvbVwiXScpLndyYXAoXCI8ZGl2IGNsYXNzPSdmbGV4LXZpZGVvIHdpZGVzY3JlZW4gdmltZW8nLz5cIik7XG4iLCJqUXVlcnkoZG9jdW1lbnQpLmZvdW5kYXRpb24oKTtcbiIsIi8vIEpveXJpZGUgZGVtb1xuJCgnI3N0YXJ0LWpyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICQoZG9jdW1lbnQpLmZvdW5kYXRpb24oJ2pveXJpZGUnLCdzdGFydCcpO1xufSk7IiwiLyohIE1hZ25pZmljIFBvcHVwIC0gdjEuMS4wIC0gMjAxNi0wMi0yMFxuKiBodHRwOi8vZGltc2VtZW5vdi5jb20vcGx1Z2lucy9tYWduaWZpYy1wb3B1cC9cbiogQ29weXJpZ2h0IChjKSAyMDE2IERtaXRyeSBTZW1lbm92OyAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkgeyBcbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsgXG4gLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLiBcbiBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7IFxuIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7IFxuIC8vIE5vZGUvQ29tbW9uSlMgXG4gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7IFxuIH0gZWxzZSB7IFxuIC8vIEJyb3dzZXIgZ2xvYmFscyBcbiBmYWN0b3J5KHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvKTsgXG4gfSBcbiB9KGZ1bmN0aW9uKCQpIHsgXG5cbi8qPj5jb3JlKi9cbi8qKlxuICogXG4gKiBNYWduaWZpYyBQb3B1cCBDb3JlIEpTIGZpbGVcbiAqIFxuICovXG5cblxuLyoqXG4gKiBQcml2YXRlIHN0YXRpYyBjb25zdGFudHNcbiAqL1xudmFyIENMT1NFX0VWRU5UID0gJ0Nsb3NlJyxcblx0QkVGT1JFX0NMT1NFX0VWRU5UID0gJ0JlZm9yZUNsb3NlJyxcblx0QUZURVJfQ0xPU0VfRVZFTlQgPSAnQWZ0ZXJDbG9zZScsXG5cdEJFRk9SRV9BUFBFTkRfRVZFTlQgPSAnQmVmb3JlQXBwZW5kJyxcblx0TUFSS1VQX1BBUlNFX0VWRU5UID0gJ01hcmt1cFBhcnNlJyxcblx0T1BFTl9FVkVOVCA9ICdPcGVuJyxcblx0Q0hBTkdFX0VWRU5UID0gJ0NoYW5nZScsXG5cdE5TID0gJ21mcCcsXG5cdEVWRU5UX05TID0gJy4nICsgTlMsXG5cdFJFQURZX0NMQVNTID0gJ21mcC1yZWFkeScsXG5cdFJFTU9WSU5HX0NMQVNTID0gJ21mcC1yZW1vdmluZycsXG5cdFBSRVZFTlRfQ0xPU0VfQ0xBU1MgPSAnbWZwLXByZXZlbnQtY2xvc2UnO1xuXG5cbi8qKlxuICogUHJpdmF0ZSB2YXJzIFxuICovXG4vKmpzaGludCAtVzA3OSAqL1xudmFyIG1mcCwgLy8gQXMgd2UgaGF2ZSBvbmx5IG9uZSBpbnN0YW5jZSBvZiBNYWduaWZpY1BvcHVwIG9iamVjdCwgd2UgZGVmaW5lIGl0IGxvY2FsbHkgdG8gbm90IHRvIHVzZSAndGhpcydcblx0TWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKCl7fSxcblx0X2lzSlEgPSAhISh3aW5kb3cualF1ZXJ5KSxcblx0X3ByZXZTdGF0dXMsXG5cdF93aW5kb3cgPSAkKHdpbmRvdyksXG5cdF9kb2N1bWVudCxcblx0X3ByZXZDb250ZW50VHlwZSxcblx0X3dyYXBDbGFzc2VzLFxuXHRfY3VyclBvcHVwVHlwZTtcblxuXG4vKipcbiAqIFByaXZhdGUgZnVuY3Rpb25zXG4gKi9cbnZhciBfbWZwT24gPSBmdW5jdGlvbihuYW1lLCBmKSB7XG5cdFx0bWZwLmV2Lm9uKE5TICsgbmFtZSArIEVWRU5UX05TLCBmKTtcblx0fSxcblx0X2dldEVsID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBhcHBlbmRUbywgaHRtbCwgcmF3KSB7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0ZWwuY2xhc3NOYW1lID0gJ21mcC0nK2NsYXNzTmFtZTtcblx0XHRpZihodG1sKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBodG1sO1xuXHRcdH1cblx0XHRpZighcmF3KSB7XG5cdFx0XHRlbCA9ICQoZWwpO1xuXHRcdFx0aWYoYXBwZW5kVG8pIHtcblx0XHRcdFx0ZWwuYXBwZW5kVG8oYXBwZW5kVG8pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZihhcHBlbmRUbykge1xuXHRcdFx0YXBwZW5kVG8uYXBwZW5kQ2hpbGQoZWwpO1xuXHRcdH1cblx0XHRyZXR1cm4gZWw7XG5cdH0sXG5cdF9tZnBUcmlnZ2VyID0gZnVuY3Rpb24oZSwgZGF0YSkge1xuXHRcdG1mcC5ldi50cmlnZ2VySGFuZGxlcihOUyArIGUsIGRhdGEpO1xuXG5cdFx0aWYobWZwLnN0LmNhbGxiYWNrcykge1xuXHRcdFx0Ly8gY29udmVydHMgXCJtZnBFdmVudE5hbWVcIiB0byBcImV2ZW50TmFtZVwiIGNhbGxiYWNrIGFuZCB0cmlnZ2VycyBpdCBpZiBpdCdzIHByZXNlbnRcblx0XHRcdGUgPSBlLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgZS5zbGljZSgxKTtcblx0XHRcdGlmKG1mcC5zdC5jYWxsYmFja3NbZV0pIHtcblx0XHRcdFx0bWZwLnN0LmNhbGxiYWNrc1tlXS5hcHBseShtZnAsICQuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0X2dldENsb3NlQnRuID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdGlmKHR5cGUgIT09IF9jdXJyUG9wdXBUeXBlIHx8ICFtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKSB7XG5cdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuID0gJCggbWZwLnN0LmNsb3NlTWFya3VwLnJlcGxhY2UoJyV0aXRsZSUnLCBtZnAuc3QudENsb3NlICkgKTtcblx0XHRcdF9jdXJyUG9wdXBUeXBlID0gdHlwZTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5jdXJyVGVtcGxhdGUuY2xvc2VCdG47XG5cdH0sXG5cdC8vIEluaXRpYWxpemUgTWFnbmlmaWMgUG9wdXAgb25seSB3aGVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdF9jaGVja0luc3RhbmNlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoISQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSkge1xuXHRcdFx0Lypqc2hpbnQgLVcwMjAgKi9cblx0XHRcdG1mcCA9IG5ldyBNYWduaWZpY1BvcHVwKCk7XG5cdFx0XHRtZnAuaW5pdCgpO1xuXHRcdFx0JC5tYWduaWZpY1BvcHVwLmluc3RhbmNlID0gbWZwO1xuXHRcdH1cblx0fSxcblx0Ly8gQ1NTIHRyYW5zaXRpb24gZGV0ZWN0aW9uLCBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzcyNjQ4OTkvZGV0ZWN0LWNzcy10cmFuc2l0aW9ucy11c2luZy1qYXZhc2NyaXB0LWFuZC13aXRob3V0LW1vZGVybml6clxuXHRzdXBwb3J0c1RyYW5zaXRpb25zID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGUsIC8vICdzJyBmb3Igc3R5bGUuIGJldHRlciB0byBjcmVhdGUgYW4gZWxlbWVudCBpZiBib2R5IHlldCB0byBleGlzdFxuXHRcdFx0diA9IFsnbXMnLCdPJywnTW96JywnV2Via2l0J107IC8vICd2JyBmb3IgdmVuZG9yXG5cblx0XHRpZiggc1sndHJhbnNpdGlvbiddICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTsgXG5cdFx0fVxuXHRcdFx0XG5cdFx0d2hpbGUoIHYubGVuZ3RoICkge1xuXHRcdFx0aWYoIHYucG9wKCkgKyAnVHJhbnNpdGlvbicgaW4gcyApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblxuXG4vKipcbiAqIFB1YmxpYyBmdW5jdGlvbnNcbiAqL1xuTWFnbmlmaWNQb3B1cC5wcm90b3R5cGUgPSB7XG5cblx0Y29uc3RydWN0b3I6IE1hZ25pZmljUG9wdXAsXG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIE1hZ25pZmljIFBvcHVwIHBsdWdpbi4gXG5cdCAqIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIG9ubHkgb25jZSB3aGVuICQuZm4ubWFnbmlmaWNQb3B1cCBvciAkLm1hZ25pZmljUG9wdXAgaXMgZXhlY3V0ZWRcblx0ICovXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcHBWZXJzaW9uID0gbmF2aWdhdG9yLmFwcFZlcnNpb247XG5cdFx0bWZwLmlzTG93SUUgPSBtZnAuaXNJRTggPSBkb2N1bWVudC5hbGwgJiYgIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7XG5cdFx0bWZwLmlzQW5kcm9pZCA9ICgvYW5kcm9pZC9naSkudGVzdChhcHBWZXJzaW9uKTtcblx0XHRtZnAuaXNJT1MgPSAoL2lwaG9uZXxpcGFkfGlwb2QvZ2kpLnRlc3QoYXBwVmVyc2lvbik7XG5cdFx0bWZwLnN1cHBvcnRzVHJhbnNpdGlvbiA9IHN1cHBvcnRzVHJhbnNpdGlvbnMoKTtcblxuXHRcdC8vIFdlIGRpc2FibGUgZml4ZWQgcG9zaXRpb25lZCBsaWdodGJveCBvbiBkZXZpY2VzIHRoYXQgZG9uJ3QgaGFuZGxlIGl0IG5pY2VseS5cblx0XHQvLyBJZiB5b3Uga25vdyBhIGJldHRlciB3YXkgb2YgZGV0ZWN0aW5nIHRoaXMgLSBsZXQgbWUga25vdy5cblx0XHRtZnAucHJvYmFibHlNb2JpbGUgPSAobWZwLmlzQW5kcm9pZCB8fCBtZnAuaXNJT1MgfHwgLyhPcGVyYSBNaW5pKXxLaW5kbGV8d2ViT1N8QmxhY2tCZXJyeXwoT3BlcmEgTW9iaSl8KFdpbmRvd3MgUGhvbmUpfElFTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSApO1xuXHRcdF9kb2N1bWVudCA9ICQoZG9jdW1lbnQpO1xuXG5cdFx0bWZwLnBvcHVwc0NhY2hlID0ge307XG5cdH0sXG5cblx0LyoqXG5cdCAqIE9wZW5zIHBvcHVwXG5cdCAqIEBwYXJhbSAgZGF0YSBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRvcGVuOiBmdW5jdGlvbihkYXRhKSB7XG5cblx0XHR2YXIgaTtcblxuXHRcdGlmKGRhdGEuaXNPYmogPT09IGZhbHNlKSB7IFxuXHRcdFx0Ly8gY29udmVydCBqUXVlcnkgY29sbGVjdGlvbiB0byBhcnJheSB0byBhdm9pZCBjb25mbGljdHMgbGF0ZXJcblx0XHRcdG1mcC5pdGVtcyA9IGRhdGEuaXRlbXMudG9BcnJheSgpO1xuXG5cdFx0XHRtZnAuaW5kZXggPSAwO1xuXHRcdFx0dmFyIGl0ZW1zID0gZGF0YS5pdGVtcyxcblx0XHRcdFx0aXRlbTtcblx0XHRcdGZvcihpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdFx0aWYoaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0XHRpdGVtID0gaXRlbS5lbFswXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihpdGVtID09PSBkYXRhLmVsWzBdKSB7XG5cdFx0XHRcdFx0bWZwLmluZGV4ID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuaXRlbXMgPSAkLmlzQXJyYXkoZGF0YS5pdGVtcykgPyBkYXRhLml0ZW1zIDogW2RhdGEuaXRlbXNdO1xuXHRcdFx0bWZwLmluZGV4ID0gZGF0YS5pbmRleCB8fCAwO1xuXHRcdH1cblxuXHRcdC8vIGlmIHBvcHVwIGlzIGFscmVhZHkgb3BlbmVkIC0gd2UganVzdCB1cGRhdGUgdGhlIGNvbnRlbnRcblx0XHRpZihtZnAuaXNPcGVuKSB7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0bWZwLnR5cGVzID0gW107IFxuXHRcdF93cmFwQ2xhc3NlcyA9ICcnO1xuXHRcdGlmKGRhdGEubWFpbkVsICYmIGRhdGEubWFpbkVsLmxlbmd0aCkge1xuXHRcdFx0bWZwLmV2ID0gZGF0YS5tYWluRWwuZXEoMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5ldiA9IF9kb2N1bWVudDtcblx0XHR9XG5cblx0XHRpZihkYXRhLmtleSkge1xuXHRcdFx0aWYoIW1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV0pIHtcblx0XHRcdFx0bWZwLnBvcHVwc0NhY2hlW2RhdGEua2V5XSA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5jdXJyVGVtcGxhdGUgPSB7fTtcblx0XHR9XG5cblxuXG5cdFx0bWZwLnN0ID0gJC5leHRlbmQodHJ1ZSwge30sICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cywgZGF0YSApOyBcblx0XHRtZnAuZml4ZWRDb250ZW50UG9zID0gbWZwLnN0LmZpeGVkQ29udGVudFBvcyA9PT0gJ2F1dG8nID8gIW1mcC5wcm9iYWJseU1vYmlsZSA6IG1mcC5zdC5maXhlZENvbnRlbnRQb3M7XG5cblx0XHRpZihtZnAuc3QubW9kYWwpIHtcblx0XHRcdG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrID0gZmFsc2U7XG5cdFx0XHRtZnAuc3QuY2xvc2VPbkJnQ2xpY2sgPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5zaG93Q2xvc2VCdG4gPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5lbmFibGVFc2NhcGVLZXkgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cblx0XHQvLyBCdWlsZGluZyBtYXJrdXBcblx0XHQvLyBtYWluIGNvbnRhaW5lcnMgYXJlIGNyZWF0ZWQgb25seSBvbmNlXG5cdFx0aWYoIW1mcC5iZ092ZXJsYXkpIHtcblxuXHRcdFx0Ly8gRGFyayBvdmVybGF5XG5cdFx0XHRtZnAuYmdPdmVybGF5ID0gX2dldEVsKCdiZycpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuY2xvc2UoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAud3JhcCA9IF9nZXRFbCgnd3JhcCcpLmF0dHIoJ3RhYmluZGV4JywgLTEpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYobWZwLl9jaGVja0lmQ2xvc2UoZS50YXJnZXQpKSB7XG5cdFx0XHRcdFx0bWZwLmNsb3NlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyID0gX2dldEVsKCdjb250YWluZXInLCBtZnAud3JhcCk7XG5cdFx0fVxuXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIgPSBfZ2V0RWwoJ2NvbnRlbnQnKTtcblx0XHRpZihtZnAuc3QucHJlbG9hZGVyKSB7XG5cdFx0XHRtZnAucHJlbG9hZGVyID0gX2dldEVsKCdwcmVsb2FkZXInLCBtZnAuY29udGFpbmVyLCBtZnAuc3QudExvYWRpbmcpO1xuXHRcdH1cblxuXG5cdFx0Ly8gSW5pdGlhbGl6aW5nIG1vZHVsZXNcblx0XHR2YXIgbW9kdWxlcyA9ICQubWFnbmlmaWNQb3B1cC5tb2R1bGVzO1xuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBuID0gbW9kdWxlc1tpXTtcblx0XHRcdG4gPSBuLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbi5zbGljZSgxKTtcblx0XHRcdG1mcFsnaW5pdCcrbl0uY2FsbChtZnApO1xuXHRcdH1cblx0XHRfbWZwVHJpZ2dlcignQmVmb3JlT3BlbicpO1xuXG5cblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuKSB7XG5cdFx0XHQvLyBDbG9zZSBidXR0b25cblx0XHRcdGlmKCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUpIHtcblx0XHRcdFx0bWZwLndyYXAuYXBwZW5kKCBfZ2V0Q2xvc2VCdG4oKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X21mcE9uKE1BUktVUF9QQVJTRV9FVkVOVCwgZnVuY3Rpb24oZSwgdGVtcGxhdGUsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHRcdHZhbHVlcy5jbG9zZV9yZXBsYWNlV2l0aCA9IF9nZXRDbG9zZUJ0bihpdGVtLnR5cGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWNsb3NlLWJ0bi1pbic7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYobWZwLnN0LmFsaWduVG9wKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYWxpZ24tdG9wJztcblx0XHR9XG5cblx0XG5cblx0XHRpZihtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHRtZnAud3JhcC5jc3Moe1xuXHRcdFx0XHRvdmVyZmxvdzogbWZwLnN0Lm92ZXJmbG93WSxcblx0XHRcdFx0b3ZlcmZsb3dYOiAnaGlkZGVuJyxcblx0XHRcdFx0b3ZlcmZsb3dZOiBtZnAuc3Qub3ZlcmZsb3dZXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndyYXAuY3NzKHsgXG5cdFx0XHRcdHRvcDogX3dpbmRvdy5zY3JvbGxUb3AoKSxcblx0XHRcdFx0cG9zaXRpb246ICdhYnNvbHV0ZSdcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiggbWZwLnN0LmZpeGVkQmdQb3MgPT09IGZhbHNlIHx8IChtZnAuc3QuZml4ZWRCZ1BvcyA9PT0gJ2F1dG8nICYmICFtZnAuZml4ZWRDb250ZW50UG9zKSApIHtcblx0XHRcdG1mcC5iZ092ZXJsYXkuY3NzKHtcblx0XHRcdFx0aGVpZ2h0OiBfZG9jdW1lbnQuaGVpZ2h0KCksXG5cdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRcblxuXHRcdGlmKG1mcC5zdC5lbmFibGVFc2NhcGVLZXkpIHtcblx0XHRcdC8vIENsb3NlIG9uIEVTQyBrZXlcblx0XHRcdF9kb2N1bWVudC5vbigna2V5dXAnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYoZS5rZXlDb2RlID09PSAyNykge1xuXHRcdFx0XHRcdG1mcC5jbG9zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRfd2luZG93Lm9uKCdyZXNpemUnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnVwZGF0ZVNpemUoKTtcblx0XHR9KTtcblxuXG5cdFx0aWYoIW1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYXV0by1jdXJzb3InO1xuXHRcdH1cblx0XHRcblx0XHRpZihfd3JhcENsYXNzZXMpXG5cdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhfd3JhcENsYXNzZXMpO1xuXG5cblx0XHQvLyB0aGlzIHRyaWdnZXJzIHJlY2FsY3VsYXRpb24gb2YgbGF5b3V0LCBzbyB3ZSBnZXQgaXQgb25jZSB0byBub3QgdG8gdHJpZ2dlciB0d2ljZVxuXHRcdHZhciB3aW5kb3dIZWlnaHQgPSBtZnAud0ggPSBfd2luZG93LmhlaWdodCgpO1xuXG5cdFx0XG5cdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHt9O1xuXG5cdFx0aWYoIG1mcC5maXhlZENvbnRlbnRQb3MgKSB7XG4gICAgICAgICAgICBpZihtZnAuX2hhc1Njcm9sbEJhcih3aW5kb3dIZWlnaHQpKXtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG1mcC5fZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgICAgICAgICAgIGlmKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93U3R5bGVzLm1hcmdpblJpZ2h0ID0gcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHRcdGlmKG1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdGlmKCFtZnAuaXNJRTcpIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZTcgZG91YmxlLXNjcm9sbCBidWdcblx0XHRcdFx0JCgnYm9keSwgaHRtbCcpLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0XG5cdFx0XG5cdFx0dmFyIGNsYXNzZXNUb2FkZCA9IG1mcC5zdC5tYWluQ2xhc3M7XG5cdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRjbGFzc2VzVG9hZGQgKz0gJyBtZnAtaWU3Jztcblx0XHR9XG5cdFx0aWYoY2xhc3Nlc1RvYWRkKSB7XG5cdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoIGNsYXNzZXNUb2FkZCApO1xuXHRcdH1cblxuXHRcdC8vIGFkZCBjb250ZW50XG5cdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cblx0XHRfbWZwVHJpZ2dlcignQnVpbGRDb250cm9scycpO1xuXG5cdFx0Ly8gcmVtb3ZlIHNjcm9sbGJhciwgYWRkIG1hcmdpbiBlLnQuY1xuXHRcdCQoJ2h0bWwnKS5jc3Mod2luZG93U3R5bGVzKTtcblx0XHRcblx0XHQvLyBhZGQgZXZlcnl0aGluZyB0byBET01cblx0XHRtZnAuYmdPdmVybGF5LmFkZChtZnAud3JhcCkucHJlcGVuZFRvKCBtZnAuc3QucHJlcGVuZFRvIHx8ICQoZG9jdW1lbnQuYm9keSkgKTtcblxuXHRcdC8vIFNhdmUgbGFzdCBmb2N1c2VkIGVsZW1lbnRcblx0XHRtZnAuX2xhc3RGb2N1c2VkRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHRcdFxuXHRcdC8vIFdhaXQgZm9yIG5leHQgY3ljbGUgdG8gYWxsb3cgQ1NTIHRyYW5zaXRpb25cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XG5cdFx0XHRpZihtZnAuY29udGVudCkge1xuXHRcdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0XHRtZnAuX3NldEZvY3VzKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiBjb250ZW50IGlzIG5vdCBkZWZpbmVkIChub3QgbG9hZGVkIGUudC5jKSB3ZSBhZGQgY2xhc3Mgb25seSBmb3IgQkdcblx0XHRcdFx0bWZwLmJnT3ZlcmxheS5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFRyYXAgdGhlIGZvY3VzIGluIHBvcHVwXG5cdFx0XHRfZG9jdW1lbnQub24oJ2ZvY3VzaW4nICsgRVZFTlRfTlMsIG1mcC5fb25Gb2N1c0luKTtcblxuXHRcdH0sIDE2KTtcblxuXHRcdG1mcC5pc09wZW4gPSB0cnVlO1xuXHRcdG1mcC51cGRhdGVTaXplKHdpbmRvd0hlaWdodCk7XG5cdFx0X21mcFRyaWdnZXIoT1BFTl9FVkVOVCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvKipcblx0ICogQ2xvc2VzIHRoZSBwb3B1cFxuXHQgKi9cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCFtZnAuaXNPcGVuKSByZXR1cm47XG5cdFx0X21mcFRyaWdnZXIoQkVGT1JFX0NMT1NFX0VWRU5UKTtcblxuXHRcdG1mcC5pc09wZW4gPSBmYWxzZTtcblx0XHQvLyBmb3IgQ1NTMyBhbmltYXRpb25cblx0XHRpZihtZnAuc3QucmVtb3ZhbERlbGF5ICYmICFtZnAuaXNMb3dJRSAmJiBtZnAuc3VwcG9ydHNUcmFuc2l0aW9uICkgIHtcblx0XHRcdG1mcC5fYWRkQ2xhc3NUb01GUChSRU1PVklOR19DTEFTUyk7XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuX2Nsb3NlKCk7XG5cdFx0XHR9LCBtZnAuc3QucmVtb3ZhbERlbGF5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLl9jbG9zZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogSGVscGVyIGZvciBjbG9zZSgpIGZ1bmN0aW9uXG5cdCAqL1xuXHRfY2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdF9tZnBUcmlnZ2VyKENMT1NFX0VWRU5UKTtcblxuXHRcdHZhciBjbGFzc2VzVG9SZW1vdmUgPSBSRU1PVklOR19DTEFTUyArICcgJyArIFJFQURZX0NMQVNTICsgJyAnO1xuXG5cdFx0bWZwLmJnT3ZlcmxheS5kZXRhY2goKTtcblx0XHRtZnAud3JhcC5kZXRhY2goKTtcblx0XHRtZnAuY29udGFpbmVyLmVtcHR5KCk7XG5cblx0XHRpZihtZnAuc3QubWFpbkNsYXNzKSB7XG5cdFx0XHRjbGFzc2VzVG9SZW1vdmUgKz0gbWZwLnN0Lm1haW5DbGFzcyArICcgJztcblx0XHR9XG5cblx0XHRtZnAuX3JlbW92ZUNsYXNzRnJvbU1GUChjbGFzc2VzVG9SZW1vdmUpO1xuXG5cdFx0aWYobWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHttYXJnaW5SaWdodDogJyd9O1xuXHRcdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRcdCQoJ2JvZHksIGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJyc7XG5cdFx0XHR9XG5cdFx0XHQkKCdodG1sJykuY3NzKHdpbmRvd1N0eWxlcyk7XG5cdFx0fVxuXHRcdFxuXHRcdF9kb2N1bWVudC5vZmYoJ2tleXVwJyArIEVWRU5UX05TICsgJyBmb2N1c2luJyArIEVWRU5UX05TKTtcblx0XHRtZnAuZXYub2ZmKEVWRU5UX05TKTtcblxuXHRcdC8vIGNsZWFuIHVwIERPTSBlbGVtZW50cyB0aGF0IGFyZW4ndCByZW1vdmVkXG5cdFx0bWZwLndyYXAuYXR0cignY2xhc3MnLCAnbWZwLXdyYXAnKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXHRcdG1mcC5iZ092ZXJsYXkuYXR0cignY2xhc3MnLCAnbWZwLWJnJyk7XG5cdFx0bWZwLmNvbnRhaW5lci5hdHRyKCdjbGFzcycsICdtZnAtY29udGFpbmVyJyk7XG5cblx0XHQvLyByZW1vdmUgY2xvc2UgYnV0dG9uIGZyb20gdGFyZ2V0IGVsZW1lbnRcblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmXG5cdFx0KCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUgfHwgbWZwLmN1cnJUZW1wbGF0ZVttZnAuY3Vyckl0ZW0udHlwZV0gPT09IHRydWUpKSB7XG5cdFx0XHRpZihtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKVxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuLmRldGFjaCgpO1xuXHRcdH1cblxuXG5cdFx0aWYobWZwLnN0LmF1dG9Gb2N1c0xhc3QgJiYgbWZwLl9sYXN0Rm9jdXNlZEVsKSB7XG5cdFx0XHQkKG1mcC5fbGFzdEZvY3VzZWRFbCkuZm9jdXMoKTsgLy8gcHV0IHRhYiBmb2N1cyBiYWNrXG5cdFx0fVxuXHRcdG1mcC5jdXJySXRlbSA9IG51bGw7XHRcblx0XHRtZnAuY29udGVudCA9IG51bGw7XG5cdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG51bGw7XG5cdFx0bWZwLnByZXZIZWlnaHQgPSAwO1xuXG5cdFx0X21mcFRyaWdnZXIoQUZURVJfQ0xPU0VfRVZFTlQpO1xuXHR9LFxuXHRcblx0dXBkYXRlU2l6ZTogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cblx0XHRpZihtZnAuaXNJT1MpIHtcblx0XHRcdC8vIGZpeGVzIGlPUyBuYXYgYmFycyBodHRwczovL2dpdGh1Yi5jb20vZGltc2VtZW5vdi9NYWduaWZpYy1Qb3B1cC9pc3N1ZXMvMlxuXHRcdFx0dmFyIHpvb21MZXZlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdFx0dmFyIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIHpvb21MZXZlbDtcblx0XHRcdG1mcC53cmFwLmNzcygnaGVpZ2h0JywgaGVpZ2h0KTtcblx0XHRcdG1mcC53SCA9IGhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndIID0gd2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCk7XG5cdFx0fVxuXHRcdC8vIEZpeGVzICM4NDogcG9wdXAgaW5jb3JyZWN0bHkgcG9zaXRpb25lZCB3aXRoIHBvc2l0aW9uOnJlbGF0aXZlIG9uIGJvZHlcblx0XHRpZighbWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0bWZwLndyYXAuY3NzKCdoZWlnaHQnLCBtZnAud0gpO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKCdSZXNpemUnKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXQgY29udGVudCBvZiBwb3B1cCBiYXNlZCBvbiBjdXJyZW50IGluZGV4XG5cdCAqL1xuXHR1cGRhdGVJdGVtSFRNTDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbbWZwLmluZGV4XTtcblxuXHRcdC8vIERldGFjaCBhbmQgcGVyZm9ybSBtb2RpZmljYXRpb25zXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIuZGV0YWNoKCk7XG5cblx0XHRpZihtZnAuY29udGVudClcblx0XHRcdG1mcC5jb250ZW50LmRldGFjaCgpO1xuXG5cdFx0aWYoIWl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRpdGVtID0gbWZwLnBhcnNlRWwoIG1mcC5pbmRleCApO1xuXHRcdH1cblxuXHRcdHZhciB0eXBlID0gaXRlbS50eXBlO1xuXG5cdFx0X21mcFRyaWdnZXIoJ0JlZm9yZUNoYW5nZScsIFttZnAuY3Vyckl0ZW0gPyBtZnAuY3Vyckl0ZW0udHlwZSA6ICcnLCB0eXBlXSk7XG5cdFx0Ly8gQmVmb3JlQ2hhbmdlIGV2ZW50IHdvcmtzIGxpa2Ugc286XG5cdFx0Ly8gX21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkgeyB9KTtcblxuXHRcdG1mcC5jdXJySXRlbSA9IGl0ZW07XG5cblx0XHRpZighbWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSkge1xuXHRcdFx0dmFyIG1hcmt1cCA9IG1mcC5zdFt0eXBlXSA/IG1mcC5zdFt0eXBlXS5tYXJrdXAgOiBmYWxzZTtcblxuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBtYXJrdXBcblx0XHRcdF9tZnBUcmlnZ2VyKCdGaXJzdE1hcmt1cFBhcnNlJywgbWFya3VwKTtcblxuXHRcdFx0aWYobWFya3VwKSB7XG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0gPSAkKG1hcmt1cCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBtYXJrdXAgZm91bmQgd2UganVzdCBkZWZpbmUgdGhhdCB0ZW1wbGF0ZSBpcyBwYXJzZWRcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoX3ByZXZDb250ZW50VHlwZSAmJiBfcHJldkNvbnRlbnRUeXBlICE9PSBpdGVtLnR5cGUpIHtcblx0XHRcdG1mcC5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ21mcC0nK19wcmV2Q29udGVudFR5cGUrJy1ob2xkZXInKTtcblx0XHR9XG5cblx0XHR2YXIgbmV3Q29udGVudCA9IG1mcFsnZ2V0JyArIHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpXShpdGVtLCBtZnAuY3VyclRlbXBsYXRlW3R5cGVdKTtcblx0XHRtZnAuYXBwZW5kQ29udGVudChuZXdDb250ZW50LCB0eXBlKTtcblxuXHRcdGl0ZW0ucHJlbG9hZGVkID0gdHJ1ZTtcblxuXHRcdF9tZnBUcmlnZ2VyKENIQU5HRV9FVkVOVCwgaXRlbSk7XG5cdFx0X3ByZXZDb250ZW50VHlwZSA9IGl0ZW0udHlwZTtcblxuXHRcdC8vIEFwcGVuZCBjb250YWluZXIgYmFjayBhZnRlciBpdHMgY29udGVudCBjaGFuZ2VkXG5cdFx0bWZwLmNvbnRhaW5lci5wcmVwZW5kKG1mcC5jb250ZW50Q29udGFpbmVyKTtcblxuXHRcdF9tZnBUcmlnZ2VyKCdBZnRlckNoYW5nZScpO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIFNldCBIVE1MIGNvbnRlbnQgb2YgcG9wdXBcblx0ICovXG5cdGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uKG5ld0NvbnRlbnQsIHR5cGUpIHtcblx0XHRtZnAuY29udGVudCA9IG5ld0NvbnRlbnQ7XG5cblx0XHRpZihuZXdDb250ZW50KSB7XG5cdFx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmIG1mcC5zdC5jbG9zZUJ0bkluc2lkZSAmJlxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlW3R5cGVdID09PSB0cnVlKSB7XG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIG1hcmt1cCwgd2UganVzdCBhcHBlbmQgY2xvc2UgYnV0dG9uIGVsZW1lbnQgaW5zaWRlXG5cdFx0XHRcdGlmKCFtZnAuY29udGVudC5maW5kKCcubWZwLWNsb3NlJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuYXBwZW5kKF9nZXRDbG9zZUJ0bigpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWZwLmNvbnRlbnQgPSBuZXdDb250ZW50O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuY29udGVudCA9ICcnO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKEJFRk9SRV9BUFBFTkRfRVZFTlQpO1xuXHRcdG1mcC5jb250YWluZXIuYWRkQ2xhc3MoJ21mcC0nK3R5cGUrJy1ob2xkZXInKTtcblxuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyLmFwcGVuZChtZnAuY29udGVudCk7XG5cdH0sXG5cblxuXHQvKipcblx0ICogQ3JlYXRlcyBNYWduaWZpYyBQb3B1cCBkYXRhIG9iamVjdCBiYXNlZCBvbiBnaXZlbiBkYXRhXG5cdCAqIEBwYXJhbSAge2ludH0gaW5kZXggSW5kZXggb2YgaXRlbSB0byBwYXJzZVxuXHQgKi9cblx0cGFyc2VFbDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF0sXG5cdFx0XHR0eXBlO1xuXG5cdFx0aWYoaXRlbS50YWdOYW1lKSB7XG5cdFx0XHRpdGVtID0geyBlbDogJChpdGVtKSB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0eXBlID0gaXRlbS50eXBlO1xuXHRcdFx0aXRlbSA9IHsgZGF0YTogaXRlbSwgc3JjOiBpdGVtLnNyYyB9O1xuXHRcdH1cblxuXHRcdGlmKGl0ZW0uZWwpIHtcblx0XHRcdHZhciB0eXBlcyA9IG1mcC50eXBlcztcblxuXHRcdFx0Ly8gY2hlY2sgZm9yICdtZnAtVFlQRScgY2xhc3Ncblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiggaXRlbS5lbC5oYXNDbGFzcygnbWZwLScrdHlwZXNbaV0pICkge1xuXHRcdFx0XHRcdHR5cGUgPSB0eXBlc1tpXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpdGVtLnNyYyA9IGl0ZW0uZWwuYXR0cignZGF0YS1tZnAtc3JjJyk7XG5cdFx0XHRpZighaXRlbS5zcmMpIHtcblx0XHRcdFx0aXRlbS5zcmMgPSBpdGVtLmVsLmF0dHIoJ2hyZWYnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpdGVtLnR5cGUgPSB0eXBlIHx8IG1mcC5zdC50eXBlIHx8ICdpbmxpbmUnO1xuXHRcdGl0ZW0uaW5kZXggPSBpbmRleDtcblx0XHRpdGVtLnBhcnNlZCA9IHRydWU7XG5cdFx0bWZwLml0ZW1zW2luZGV4XSA9IGl0ZW07XG5cdFx0X21mcFRyaWdnZXIoJ0VsZW1lbnRQYXJzZScsIGl0ZW0pO1xuXG5cdFx0cmV0dXJuIG1mcC5pdGVtc1tpbmRleF07XG5cdH0sXG5cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgc2luZ2xlIHBvcHVwIG9yIGEgZ3JvdXAgb2YgcG9wdXBzXG5cdCAqL1xuXHRhZGRHcm91cDogZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcblx0XHR2YXIgZUhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRlLm1mcEVsID0gdGhpcztcblx0XHRcdG1mcC5fb3BlbkNsaWNrKGUsIGVsLCBvcHRpb25zKTtcblx0XHR9O1xuXG5cdFx0aWYoIW9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHR9XG5cblx0XHR2YXIgZU5hbWUgPSAnY2xpY2subWFnbmlmaWNQb3B1cCc7XG5cdFx0b3B0aW9ucy5tYWluRWwgPSBlbDtcblxuXHRcdGlmKG9wdGlvbnMuaXRlbXMpIHtcblx0XHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdFx0ZWwub2ZmKGVOYW1lKS5vbihlTmFtZSwgZUhhbmRsZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zLmlzT2JqID0gZmFsc2U7XG5cdFx0XHRpZihvcHRpb25zLmRlbGVnYXRlKSB7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIG9wdGlvbnMuZGVsZWdhdGUgLCBlSGFuZGxlcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHRpb25zLml0ZW1zID0gZWw7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIGVIYW5kbGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdF9vcGVuQ2xpY2s6IGZ1bmN0aW9uKGUsIGVsLCBvcHRpb25zKSB7XG5cdFx0dmFyIG1pZENsaWNrID0gb3B0aW9ucy5taWRDbGljayAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5taWRDbGljayA6ICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cy5taWRDbGljaztcblxuXG5cdFx0aWYoIW1pZENsaWNrICYmICggZS53aGljaCA9PT0gMiB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuc2hpZnRLZXkgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZGlzYWJsZU9uID0gb3B0aW9ucy5kaXNhYmxlT24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGlzYWJsZU9uIDogJC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLmRpc2FibGVPbjtcblxuXHRcdGlmKGRpc2FibGVPbikge1xuXHRcdFx0aWYoJC5pc0Z1bmN0aW9uKGRpc2FibGVPbikpIHtcblx0XHRcdFx0aWYoICFkaXNhYmxlT24uY2FsbChtZnApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgeyAvLyBlbHNlIGl0J3MgbnVtYmVyXG5cdFx0XHRcdGlmKCBfd2luZG93LndpZHRoKCkgPCBkaXNhYmxlT24gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihlLnR5cGUpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Ly8gVGhpcyB3aWxsIHByZXZlbnQgcG9wdXAgZnJvbSBjbG9zaW5nIGlmIGVsZW1lbnQgaXMgaW5zaWRlIGFuZCBwb3B1cCBpcyBhbHJlYWR5IG9wZW5lZFxuXHRcdFx0aWYobWZwLmlzT3Blbikge1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG9wdGlvbnMuZWwgPSAkKGUubWZwRWwpO1xuXHRcdGlmKG9wdGlvbnMuZGVsZWdhdGUpIHtcblx0XHRcdG9wdGlvbnMuaXRlbXMgPSBlbC5maW5kKG9wdGlvbnMuZGVsZWdhdGUpO1xuXHRcdH1cblx0XHRtZnAub3BlbihvcHRpb25zKTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRleHQgb24gcHJlbG9hZGVyXG5cdCAqL1xuXHR1cGRhdGVTdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuXG5cdFx0aWYobWZwLnByZWxvYWRlcikge1xuXHRcdFx0aWYoX3ByZXZTdGF0dXMgIT09IHN0YXR1cykge1xuXHRcdFx0XHRtZnAuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdtZnAtcy0nK19wcmV2U3RhdHVzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIXRleHQgJiYgc3RhdHVzID09PSAnbG9hZGluZycpIHtcblx0XHRcdFx0dGV4dCA9IG1mcC5zdC50TG9hZGluZztcblx0XHRcdH1cblxuXHRcdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRcdHN0YXR1czogc3RhdHVzLFxuXHRcdFx0XHR0ZXh0OiB0ZXh0XG5cdFx0XHR9O1xuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBzdGF0dXNcblx0XHRcdF9tZnBUcmlnZ2VyKCdVcGRhdGVTdGF0dXMnLCBkYXRhKTtcblxuXHRcdFx0c3RhdHVzID0gZGF0YS5zdGF0dXM7XG5cdFx0XHR0ZXh0ID0gZGF0YS50ZXh0O1xuXG5cdFx0XHRtZnAucHJlbG9hZGVyLmh0bWwodGV4dCk7XG5cblx0XHRcdG1mcC5wcmVsb2FkZXIuZmluZCgnYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyLmFkZENsYXNzKCdtZnAtcy0nK3N0YXR1cyk7XG5cdFx0XHRfcHJldlN0YXR1cyA9IHN0YXR1cztcblx0XHR9XG5cdH0sXG5cblxuXHQvKlxuXHRcdFwiUHJpdmF0ZVwiIGhlbHBlcnMgdGhhdCBhcmVuJ3QgcHJpdmF0ZSBhdCBhbGxcblx0ICovXG5cdC8vIENoZWNrIHRvIGNsb3NlIHBvcHVwIG9yIG5vdFxuXHQvLyBcInRhcmdldFwiIGlzIGFuIGVsZW1lbnQgdGhhdCB3YXMgY2xpY2tlZFxuXHRfY2hlY2tJZkNsb3NlOiBmdW5jdGlvbih0YXJnZXQpIHtcblxuXHRcdGlmKCQodGFyZ2V0KS5oYXNDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjbG9zZU9uQ29udGVudCA9IG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrO1xuXHRcdHZhciBjbG9zZU9uQmcgPSBtZnAuc3QuY2xvc2VPbkJnQ2xpY2s7XG5cblx0XHRpZihjbG9zZU9uQ29udGVudCAmJiBjbG9zZU9uQmcpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFdlIGNsb3NlIHRoZSBwb3B1cCBpZiBjbGljayBpcyBvbiBjbG9zZSBidXR0b24gb3Igb24gcHJlbG9hZGVyLiBPciBpZiB0aGVyZSBpcyBubyBjb250ZW50LlxuXHRcdFx0aWYoIW1mcC5jb250ZW50IHx8ICQodGFyZ2V0KS5oYXNDbGFzcygnbWZwLWNsb3NlJykgfHwgKG1mcC5wcmVsb2FkZXIgJiYgdGFyZ2V0ID09PSBtZnAucHJlbG9hZGVyWzBdKSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIGNsaWNrIGlzIG91dHNpZGUgdGhlIGNvbnRlbnRcblx0XHRcdGlmKCAgKHRhcmdldCAhPT0gbWZwLmNvbnRlbnRbMF0gJiYgISQuY29udGFpbnMobWZwLmNvbnRlbnRbMF0sIHRhcmdldCkpICApIHtcblx0XHRcdFx0aWYoY2xvc2VPbkJnKSB7XG5cdFx0XHRcdFx0Ly8gbGFzdCBjaGVjaywgaWYgdGhlIGNsaWNrZWQgZWxlbWVudCBpcyBpbiBET00sIChpbiBjYXNlIGl0J3MgcmVtb3ZlZCBvbmNsaWNrKVxuXHRcdFx0XHRcdGlmKCAkLmNvbnRhaW5zKGRvY3VtZW50LCB0YXJnZXQpICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYoY2xvc2VPbkNvbnRlbnQpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXHRfYWRkQ2xhc3NUb01GUDogZnVuY3Rpb24oY05hbWUpIHtcblx0XHRtZnAuYmdPdmVybGF5LmFkZENsYXNzKGNOYW1lKTtcblx0XHRtZnAud3JhcC5hZGRDbGFzcyhjTmFtZSk7XG5cdH0sXG5cdF9yZW1vdmVDbGFzc0Zyb21NRlA6IGZ1bmN0aW9uKGNOYW1lKSB7XG5cdFx0dGhpcy5iZ092ZXJsYXkucmVtb3ZlQ2xhc3MoY05hbWUpO1xuXHRcdG1mcC53cmFwLnJlbW92ZUNsYXNzKGNOYW1lKTtcblx0fSxcblx0X2hhc1Njcm9sbEJhcjogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cdFx0cmV0dXJuICggIChtZnAuaXNJRTcgPyBfZG9jdW1lbnQuaGVpZ2h0KCkgOiBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCkgPiAod2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCkpICk7XG5cdH0sXG5cdF9zZXRGb2N1czogZnVuY3Rpb24oKSB7XG5cdFx0KG1mcC5zdC5mb2N1cyA/IG1mcC5jb250ZW50LmZpbmQobWZwLnN0LmZvY3VzKS5lcSgwKSA6IG1mcC53cmFwKS5mb2N1cygpO1xuXHR9LFxuXHRfb25Gb2N1c0luOiBmdW5jdGlvbihlKSB7XG5cdFx0aWYoIGUudGFyZ2V0ICE9PSBtZnAud3JhcFswXSAmJiAhJC5jb250YWlucyhtZnAud3JhcFswXSwgZS50YXJnZXQpICkge1xuXHRcdFx0bWZwLl9zZXRGb2N1cygpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0X3BhcnNlTWFya3VwOiBmdW5jdGlvbih0ZW1wbGF0ZSwgdmFsdWVzLCBpdGVtKSB7XG5cdFx0dmFyIGFycjtcblx0XHRpZihpdGVtLmRhdGEpIHtcblx0XHRcdHZhbHVlcyA9ICQuZXh0ZW5kKGl0ZW0uZGF0YSwgdmFsdWVzKTtcblx0XHR9XG5cdFx0X21mcFRyaWdnZXIoTUFSS1VQX1BBUlNFX0VWRU5ULCBbdGVtcGxhdGUsIHZhbHVlcywgaXRlbV0gKTtcblxuXHRcdCQuZWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0YXJyID0ga2V5LnNwbGl0KCdfJyk7XG5cdFx0XHRpZihhcnIubGVuZ3RoID4gMSkge1xuXHRcdFx0XHR2YXIgZWwgPSB0ZW1wbGF0ZS5maW5kKEVWRU5UX05TICsgJy0nK2FyclswXSk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHZhciBhdHRyID0gYXJyWzFdO1xuXHRcdFx0XHRcdGlmKGF0dHIgPT09ICdyZXBsYWNlV2l0aCcpIHtcblx0XHRcdFx0XHRcdGlmKGVsWzBdICE9PSB2YWx1ZVswXSkge1xuXHRcdFx0XHRcdFx0XHRlbC5yZXBsYWNlV2l0aCh2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGF0dHIgPT09ICdpbWcnKSB7XG5cdFx0XHRcdFx0XHRpZihlbC5pcygnaW1nJykpIHtcblx0XHRcdFx0XHRcdFx0ZWwuYXR0cignc3JjJywgdmFsdWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZWwucmVwbGFjZVdpdGgoICQoJzxpbWc+JykuYXR0cignc3JjJywgdmFsdWUpLmF0dHIoJ2NsYXNzJywgZWwuYXR0cignY2xhc3MnKSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWwuYXR0cihhcnJbMV0sIHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGVtcGxhdGUuZmluZChFVkVOVF9OUyArICctJytrZXkpLmh0bWwodmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdF9nZXRTY3JvbGxiYXJTaXplOiBmdW5jdGlvbigpIHtcblx0XHQvLyB0aHggRGF2aWRcblx0XHRpZihtZnAuc2Nyb2xsYmFyU2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdHNjcm9sbERpdi5zdHlsZS5jc3NUZXh0ID0gJ3dpZHRoOiA5OXB4OyBoZWlnaHQ6IDk5cHg7IG92ZXJmbG93OiBzY3JvbGw7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtOTk5OXB4Oyc7XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG5cdFx0XHRtZnAuc2Nyb2xsYmFyU2l6ZSA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5zY3JvbGxiYXJTaXplO1xuXHR9XG5cbn07IC8qIE1hZ25pZmljUG9wdXAgY29yZSBwcm90b3R5cGUgZW5kICovXG5cblxuXG5cbi8qKlxuICogUHVibGljIHN0YXRpYyBmdW5jdGlvbnNcbiAqL1xuJC5tYWduaWZpY1BvcHVwID0ge1xuXHRpbnN0YW5jZTogbnVsbCxcblx0cHJvdG86IE1hZ25pZmljUG9wdXAucHJvdG90eXBlLFxuXHRtb2R1bGVzOiBbXSxcblxuXHRvcGVuOiBmdW5jdGlvbihvcHRpb25zLCBpbmRleCkge1xuXHRcdF9jaGVja0luc3RhbmNlKCk7XG5cblx0XHRpZighb3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdG9wdGlvbnMuaW5kZXggPSBpbmRleCB8fCAwO1xuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlLm9wZW4ob3B0aW9ucyk7XG5cdH0sXG5cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UgJiYgJC5tYWduaWZpY1BvcHVwLmluc3RhbmNlLmNsb3NlKCk7XG5cdH0sXG5cblx0cmVnaXN0ZXJNb2R1bGU6IGZ1bmN0aW9uKG5hbWUsIG1vZHVsZSkge1xuXHRcdGlmKG1vZHVsZS5vcHRpb25zKSB7XG5cdFx0XHQkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHNbbmFtZV0gPSBtb2R1bGUub3B0aW9ucztcblx0XHR9XG5cdFx0JC5leHRlbmQodGhpcy5wcm90bywgbW9kdWxlLnByb3RvKTtcblx0XHR0aGlzLm1vZHVsZXMucHVzaChuYW1lKTtcblx0fSxcblxuXHRkZWZhdWx0czoge1xuXG5cdFx0Ly8gSW5mbyBhYm91dCBvcHRpb25zIGlzIGluIGRvY3M6XG5cdFx0Ly8gaHR0cDovL2RpbXNlbWVub3YuY29tL3BsdWdpbnMvbWFnbmlmaWMtcG9wdXAvZG9jdW1lbnRhdGlvbi5odG1sI29wdGlvbnNcblxuXHRcdGRpc2FibGVPbjogMCxcblxuXHRcdGtleTogbnVsbCxcblxuXHRcdG1pZENsaWNrOiBmYWxzZSxcblxuXHRcdG1haW5DbGFzczogJycsXG5cblx0XHRwcmVsb2FkZXI6IHRydWUsXG5cblx0XHRmb2N1czogJycsIC8vIENTUyBzZWxlY3RvciBvZiBpbnB1dCB0byBmb2N1cyBhZnRlciBwb3B1cCBpcyBvcGVuZWRcblxuXHRcdGNsb3NlT25Db250ZW50Q2xpY2s6IGZhbHNlLFxuXG5cdFx0Y2xvc2VPbkJnQ2xpY2s6IHRydWUsXG5cblx0XHRjbG9zZUJ0bkluc2lkZTogdHJ1ZSxcblxuXHRcdHNob3dDbG9zZUJ0bjogdHJ1ZSxcblxuXHRcdGVuYWJsZUVzY2FwZUtleTogdHJ1ZSxcblxuXHRcdG1vZGFsOiBmYWxzZSxcblxuXHRcdGFsaWduVG9wOiBmYWxzZSxcblxuXHRcdHJlbW92YWxEZWxheTogMCxcblxuXHRcdHByZXBlbmRUbzogbnVsbCxcblxuXHRcdGZpeGVkQ29udGVudFBvczogJ2F1dG8nLFxuXG5cdFx0Zml4ZWRCZ1BvczogJ2F1dG8nLFxuXG5cdFx0b3ZlcmZsb3dZOiAnYXV0bycsXG5cblx0XHRjbG9zZU1hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWNsb3NlXCI+JiMyMTU7PC9idXR0b24+JyxcblxuXHRcdHRDbG9zZTogJ0Nsb3NlIChFc2MpJyxcblxuXHRcdHRMb2FkaW5nOiAnTG9hZGluZy4uLicsXG5cblx0XHRhdXRvRm9jdXNMYXN0OiB0cnVlXG5cblx0fVxufTtcblxuXG5cbiQuZm4ubWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0X2NoZWNrSW5zdGFuY2UoKTtcblxuXHR2YXIganFFbCA9ICQodGhpcyk7XG5cblx0Ly8gV2UgY2FsbCBzb21lIEFQSSBtZXRob2Qgb2YgZmlyc3QgcGFyYW0gaXMgYSBzdHJpbmdcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0aWYob3B0aW9ucyA9PT0gJ29wZW4nKSB7XG5cdFx0XHR2YXIgaXRlbXMsXG5cdFx0XHRcdGl0ZW1PcHRzID0gX2lzSlEgPyBqcUVsLmRhdGEoJ21hZ25pZmljUG9wdXAnKSA6IGpxRWxbMF0ubWFnbmlmaWNQb3B1cCxcblx0XHRcdFx0aW5kZXggPSBwYXJzZUludChhcmd1bWVudHNbMV0sIDEwKSB8fCAwO1xuXG5cdFx0XHRpZihpdGVtT3B0cy5pdGVtcykge1xuXHRcdFx0XHRpdGVtcyA9IGl0ZW1PcHRzLml0ZW1zW2luZGV4XTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW1zID0ganFFbDtcblx0XHRcdFx0aWYoaXRlbU9wdHMuZGVsZWdhdGUpIHtcblx0XHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmZpbmQoaXRlbU9wdHMuZGVsZWdhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGl0ZW1zID0gaXRlbXMuZXEoIGluZGV4ICk7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX29wZW5DbGljayh7bWZwRWw6aXRlbXN9LCBqcUVsLCBpdGVtT3B0cyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKG1mcC5pc09wZW4pXG5cdFx0XHRcdG1mcFtvcHRpb25zXS5hcHBseShtZnAsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIGNsb25lIG9wdGlvbnMgb2JqXG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcblxuXHRcdC8qXG5cdFx0ICogQXMgWmVwdG8gZG9lc24ndCBzdXBwb3J0IC5kYXRhKCkgbWV0aG9kIGZvciBvYmplY3RzXG5cdFx0ICogYW5kIGl0IHdvcmtzIG9ubHkgaW4gbm9ybWFsIGJyb3dzZXJzXG5cdFx0ICogd2UgYXNzaWduIFwib3B0aW9uc1wiIG9iamVjdCBkaXJlY3RseSB0byB0aGUgRE9NIGVsZW1lbnQuIEZUVyFcblx0XHQgKi9cblx0XHRpZihfaXNKUSkge1xuXHRcdFx0anFFbC5kYXRhKCdtYWduaWZpY1BvcHVwJywgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxRWxbMF0ubWFnbmlmaWNQb3B1cCA9IG9wdGlvbnM7XG5cdFx0fVxuXG5cdFx0bWZwLmFkZEdyb3VwKGpxRWwsIG9wdGlvbnMpO1xuXG5cdH1cblx0cmV0dXJuIGpxRWw7XG59O1xuXG4vKj4+Y29yZSovXG5cbi8qPj5pbmxpbmUqL1xuXG52YXIgSU5MSU5FX05TID0gJ2lubGluZScsXG5cdF9oaWRkZW5DbGFzcyxcblx0X2lubGluZVBsYWNlaG9sZGVyLFxuXHRfbGFzdElubGluZUVsZW1lbnQsXG5cdF9wdXRJbmxpbmVFbGVtZW50c0JhY2sgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfbGFzdElubGluZUVsZW1lbnQpIHtcblx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlci5hZnRlciggX2xhc3RJbmxpbmVFbGVtZW50LmFkZENsYXNzKF9oaWRkZW5DbGFzcykgKS5kZXRhY2goKTtcblx0XHRcdF9sYXN0SW5saW5lRWxlbWVudCA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoSU5MSU5FX05TLCB7XG5cdG9wdGlvbnM6IHtcblx0XHRoaWRkZW5DbGFzczogJ2hpZGUnLCAvLyB3aWxsIGJlIGFwcGVuZGVkIHdpdGggYG1mcC1gIHByZWZpeFxuXHRcdG1hcmt1cDogJycsXG5cdFx0dE5vdEZvdW5kOiAnQ29udGVudCBub3QgZm91bmQnXG5cdH0sXG5cdHByb3RvOiB7XG5cblx0XHRpbml0SW5saW5lOiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKElOTElORV9OUyk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrSU5MSU5FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGdldElubGluZTogZnVuY3Rpb24oaXRlbSwgdGVtcGxhdGUpIHtcblxuXHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXG5cdFx0XHRpZihpdGVtLnNyYykge1xuXHRcdFx0XHR2YXIgaW5saW5lU3QgPSBtZnAuc3QuaW5saW5lLFxuXHRcdFx0XHRcdGVsID0gJChpdGVtLnNyYyk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB0YXJnZXQgZWxlbWVudCBoYXMgcGFyZW50IC0gd2UgcmVwbGFjZSBpdCB3aXRoIHBsYWNlaG9sZGVyIGFuZCBwdXQgaXQgYmFjayBhZnRlciBwb3B1cCBpcyBjbG9zZWRcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gZWxbMF0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRpZihwYXJlbnQgJiYgcGFyZW50LnRhZ05hbWUpIHtcblx0XHRcdFx0XHRcdGlmKCFfaW5saW5lUGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRcdFx0X2hpZGRlbkNsYXNzID0gaW5saW5lU3QuaGlkZGVuQ2xhc3M7XG5cdFx0XHRcdFx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlciA9IF9nZXRFbChfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdFx0XHRfaGlkZGVuQ2xhc3MgPSAnbWZwLScrX2hpZGRlbkNsYXNzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gcmVwbGFjZSB0YXJnZXQgaW5saW5lIGVsZW1lbnQgd2l0aCBwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0X2xhc3RJbmxpbmVFbGVtZW50ID0gZWwuYWZ0ZXIoX2lubGluZVBsYWNlaG9sZGVyKS5kZXRhY2goKS5yZW1vdmVDbGFzcyhfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBpbmxpbmVTdC50Tm90Rm91bmQpO1xuXHRcdFx0XHRcdGVsID0gJCgnPGRpdj4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGl0ZW0uaW5saW5lRWxlbWVudCA9IGVsO1xuXHRcdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCB7fSwgaXRlbSk7XG5cdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmlubGluZSovXG5cbi8qPj5hamF4Ki9cbnZhciBBSkFYX05TID0gJ2FqYXgnLFxuXHRfYWpheEN1cixcblx0X3JlbW92ZUFqYXhDdXJzb3IgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfYWpheEN1cikge1xuXHRcdFx0JChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhfYWpheEN1cik7XG5cdFx0fVxuXHR9LFxuXHRfZGVzdHJveUFqYXhSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblx0XHRpZihtZnAucmVxKSB7XG5cdFx0XHRtZnAucmVxLmFib3J0KCk7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoQUpBWF9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRzZXR0aW5nczogbnVsbCxcblx0XHRjdXJzb3I6ICdtZnAtYWpheC1jdXInLFxuXHRcdHRFcnJvcjogJzxhIGhyZWY9XCIldXJsJVwiPlRoZSBjb250ZW50PC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRBamF4OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKEFKQVhfTlMpO1xuXHRcdFx0X2FqYXhDdXIgPSBtZnAuc3QuYWpheC5jdXJzb3I7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0XHRfbWZwT24oJ0JlZm9yZUNoYW5nZS4nICsgQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0fSxcblx0XHRnZXRBamF4OiBmdW5jdGlvbihpdGVtKSB7XG5cblx0XHRcdGlmKF9hamF4Q3VyKSB7XG5cdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoX2FqYXhDdXIpO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdsb2FkaW5nJyk7XG5cblx0XHRcdHZhciBvcHRzID0gJC5leHRlbmQoe1xuXHRcdFx0XHR1cmw6IGl0ZW0uc3JjLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuXHRcdFx0XHRcdHZhciB0ZW1wID0ge1xuXHRcdFx0XHRcdFx0ZGF0YTpkYXRhLFxuXHRcdFx0XHRcdFx0eGhyOmpxWEhSXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdQYXJzZUFqYXgnLCB0ZW1wKTtcblxuXHRcdFx0XHRcdG1mcC5hcHBlbmRDb250ZW50KCAkKHRlbXAuZGF0YSksIEFKQVhfTlMgKTtcblxuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblxuXHRcdFx0XHRcdG1mcC5fc2V0Rm9jdXMoKTtcblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHRcdFx0fSwgMTYpO1xuXG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdBamF4Q29udGVudEFkZGVkJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRfcmVtb3ZlQWpheEN1cnNvcigpO1xuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSBpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBtZnAuc3QuYWpheC50RXJyb3IucmVwbGFjZSgnJXVybCUnLCBpdGVtLnNyYykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZnAuc3QuYWpheC5zZXR0aW5ncyk7XG5cblx0XHRcdG1mcC5yZXEgPSAkLmFqYXgob3B0cyk7XG5cblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+YWpheCovXG5cbi8qPj5pbWFnZSovXG52YXIgX2ltZ0ludGVydmFsLFxuXHRfZ2V0VGl0bGUgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYoaXRlbS5kYXRhICYmIGl0ZW0uZGF0YS50aXRsZSAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0cmV0dXJuIGl0ZW0uZGF0YS50aXRsZTtcblxuXHRcdHZhciBzcmMgPSBtZnAuc3QuaW1hZ2UudGl0bGVTcmM7XG5cblx0XHRpZihzcmMpIHtcblx0XHRcdGlmKCQuaXNGdW5jdGlvbihzcmMpKSB7XG5cdFx0XHRcdHJldHVybiBzcmMuY2FsbChtZnAsIGl0ZW0pO1xuXHRcdFx0fSBlbHNlIGlmKGl0ZW0uZWwpIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0uZWwuYXR0cihzcmMpIHx8ICcnO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gJyc7XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZSgnaW1hZ2UnLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdG1hcmt1cDogJzxkaXYgY2xhc3M9XCJtZnAtZmlndXJlXCI+Jytcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jbG9zZVwiPjwvZGl2PicrXG5cdFx0XHRcdFx0JzxmaWd1cmU+Jytcblx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWltZ1wiPjwvZGl2PicrXG5cdFx0XHRcdFx0XHQnPGZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtYm90dG9tLWJhclwiPicrXG5cdFx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtdGl0bGVcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNvdW50ZXJcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdFx0XHRcdCc8L2ZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHQnPC9maWd1cmU+Jytcblx0XHRcdFx0JzwvZGl2PicsXG5cdFx0Y3Vyc29yOiAnbWZwLXpvb20tb3V0LWN1cicsXG5cdFx0dGl0bGVTcmM6ICd0aXRsZScsXG5cdFx0dmVydGljYWxGaXQ6IHRydWUsXG5cdFx0dEVycm9yOiAnPGEgaHJlZj1cIiV1cmwlXCI+VGhlIGltYWdlPC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW1nU3QgPSBtZnAuc3QuaW1hZ2UsXG5cdFx0XHRcdG5zID0gJy5pbWFnZSc7XG5cblx0XHRcdG1mcC50eXBlcy5wdXNoKCdpbWFnZScpO1xuXG5cdFx0XHRfbWZwT24oT1BFTl9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5jdXJySXRlbS50eXBlID09PSAnaW1hZ2UnICYmIGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfd2luZG93Lm9mZigncmVzaXplJyArIEVWRU5UX05TKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oJ1Jlc2l6ZScrbnMsIG1mcC5yZXNpemVJbWFnZSk7XG5cdFx0XHRpZihtZnAuaXNMb3dJRSkge1xuXHRcdFx0XHRfbWZwT24oJ0FmdGVyQ2hhbmdlJywgbWZwLnJlc2l6ZUltYWdlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlc2l6ZUltYWdlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpdGVtID0gbWZwLmN1cnJJdGVtO1xuXHRcdFx0aWYoIWl0ZW0gfHwgIWl0ZW0uaW1nKSByZXR1cm47XG5cblx0XHRcdGlmKG1mcC5zdC5pbWFnZS52ZXJ0aWNhbEZpdCkge1xuXHRcdFx0XHR2YXIgZGVjciA9IDA7XG5cdFx0XHRcdC8vIGZpeCBib3gtc2l6aW5nIGluIGllNy84XG5cdFx0XHRcdGlmKG1mcC5pc0xvd0lFKSB7XG5cdFx0XHRcdFx0ZGVjciA9IHBhcnNlSW50KGl0ZW0uaW1nLmNzcygncGFkZGluZy10b3AnKSwgMTApICsgcGFyc2VJbnQoaXRlbS5pbWcuY3NzKCdwYWRkaW5nLWJvdHRvbScpLDEwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZy5jc3MoJ21heC1oZWlnaHQnLCBtZnAud0gtZGVjcik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfb25JbWFnZUhhc1NpemU6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdGlmKGl0ZW0uaW1nKSB7XG5cblx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblxuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtLmlzQ2hlY2tpbmdJbWdTaXplID0gZmFsc2U7XG5cblx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlSGFzU2l6ZScsIGl0ZW0pO1xuXG5cdFx0XHRcdGlmKGl0ZW0uaW1nSGlkZGVuKSB7XG5cdFx0XHRcdFx0aWYobWZwLmNvbnRlbnQpXG5cdFx0XHRcdFx0XHRtZnAuY29udGVudC5yZW1vdmVDbGFzcygnbWZwLWxvYWRpbmcnKTtcblxuXHRcdFx0XHRcdGl0ZW0uaW1nSGlkZGVuID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGdW5jdGlvbiB0aGF0IGxvb3BzIHVudGlsIHRoZSBpbWFnZSBoYXMgc2l6ZSB0byBkaXNwbGF5IGVsZW1lbnRzIHRoYXQgcmVseSBvbiBpdCBhc2FwXG5cdFx0ICovXG5cdFx0ZmluZEltYWdlU2l6ZTogZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHR2YXIgY291bnRlciA9IDAsXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdLFxuXHRcdFx0XHRtZnBTZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKGRlbGF5KSB7XG5cblx0XHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZGVjZWxlcmF0aW5nIGludGVydmFsIHRoYXQgY2hlY2tzIGZvciBzaXplIG9mIGFuIGltYWdlXG5cdFx0XHRcdFx0X2ltZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmKGNvdW50ZXIgPiAyMDApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb3VudGVyKys7XG5cdFx0XHRcdFx0XHRpZihjb3VudGVyID09PSAzKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDEwKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihjb3VudGVyID09PSA0MCkge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCg1MCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY291bnRlciA9PT0gMTAwKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDUwMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgZGVsYXkpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRtZnBTZXRJbnRlcnZhbCgxKTtcblx0XHR9LFxuXG5cdFx0Z2V0SW1hZ2U6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cblx0XHRcdHZhciBndWFyZCA9IDAsXG5cblx0XHRcdFx0Ly8gaW1hZ2UgbG9hZCBjb21wbGV0ZSBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZENvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aWYgKGl0ZW0uaW1nWzBdLmNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uaW1nLm9mZignLm1mcGxvYWRlcicpO1xuXG5cdFx0XHRcdFx0XHRcdGlmKGl0ZW0gPT09IG1mcC5jdXJySXRlbSl7XG5cdFx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblxuXHRcdFx0XHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRpdGVtLmxvYWRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlTG9hZENvbXBsZXRlJyk7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBpZiBpbWFnZSBjb21wbGV0ZSBjaGVjayBmYWlscyAyMDAgdGltZXMgKDIwIHNlYyksIHdlIGFzc3VtZSB0aGF0IHRoZXJlIHdhcyBhbiBlcnJvci5cblx0XHRcdFx0XHRcdFx0Z3VhcmQrKztcblx0XHRcdFx0XHRcdFx0aWYoZ3VhcmQgPCAyMDApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KG9uTG9hZENvbXBsZXRlLDEwMCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0b25Mb2FkRXJyb3IoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBpbWFnZSBlcnJvciBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZEVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcub2ZmKCcubWZwbG9hZGVyJyk7XG5cdFx0XHRcdFx0XHRpZihpdGVtID09PSBtZnAuY3Vyckl0ZW0pe1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIGltZ1N0LnRFcnJvci5yZXBsYWNlKCcldXJsJScsIGl0ZW0uc3JjKSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0aW1nU3QgPSBtZnAuc3QuaW1hZ2U7XG5cblxuXHRcdFx0dmFyIGVsID0gdGVtcGxhdGUuZmluZCgnLm1mcC1pbWcnKTtcblx0XHRcdGlmKGVsLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cdFx0XHRcdGltZy5jbGFzc05hbWUgPSAnbWZwLWltZyc7XG5cdFx0XHRcdGlmKGl0ZW0uZWwgJiYgaXRlbS5lbC5maW5kKCdpbWcnKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRpbWcuYWx0ID0gaXRlbS5lbC5maW5kKCdpbWcnKS5hdHRyKCdhbHQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZyA9ICQoaW1nKS5vbignbG9hZC5tZnBsb2FkZXInLCBvbkxvYWRDb21wbGV0ZSkub24oJ2Vycm9yLm1mcGxvYWRlcicsIG9uTG9hZEVycm9yKTtcblx0XHRcdFx0aW1nLnNyYyA9IGl0ZW0uc3JjO1xuXG5cdFx0XHRcdC8vIHdpdGhvdXQgY2xvbmUoKSBcImVycm9yXCIgZXZlbnQgaXMgbm90IGZpcmluZyB3aGVuIElNRyBpcyByZXBsYWNlZCBieSBuZXcgSU1HXG5cdFx0XHRcdC8vIFRPRE86IGZpbmQgYSB3YXkgdG8gYXZvaWQgc3VjaCBjbG9uaW5nXG5cdFx0XHRcdGlmKGVsLmlzKCdpbWcnKSkge1xuXHRcdFx0XHRcdGl0ZW0uaW1nID0gaXRlbS5pbWcuY2xvbmUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdO1xuXHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZighaW1nLndpZHRoKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwge1xuXHRcdFx0XHR0aXRsZTogX2dldFRpdGxlKGl0ZW0pLFxuXHRcdFx0XHRpbWdfcmVwbGFjZVdpdGg6IGl0ZW0uaW1nXG5cdFx0XHR9LCBpdGVtKTtcblxuXHRcdFx0bWZwLnJlc2l6ZUltYWdlKCk7XG5cblx0XHRcdGlmKGl0ZW0uaGFzU2l6ZSkge1xuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblxuXHRcdFx0XHRpZihpdGVtLmxvYWRFcnJvcikge1xuXHRcdFx0XHRcdHRlbXBsYXRlLmFkZENsYXNzKCdtZnAtbG9hZGluZycpO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgaW1nU3QudEVycm9yLnJlcGxhY2UoJyV1cmwlJywgaXRlbS5zcmMpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2xvYWRpbmcnKTtcblx0XHRcdGl0ZW0ubG9hZGluZyA9IHRydWU7XG5cblx0XHRcdGlmKCFpdGVtLmhhc1NpemUpIHtcblx0XHRcdFx0aXRlbS5pbWdIaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR0ZW1wbGF0ZS5hZGRDbGFzcygnbWZwLWxvYWRpbmcnKTtcblx0XHRcdFx0bWZwLmZpbmRJbWFnZVNpemUoaXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+aW1hZ2UqL1xuXG4vKj4+em9vbSovXG52YXIgaGFzTW96VHJhbnNmb3JtLFxuXHRnZXRIYXNNb3pUcmFuc2Zvcm0gPSBmdW5jdGlvbigpIHtcblx0XHRpZihoYXNNb3pUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aGFzTW96VHJhbnNmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRyZXR1cm4gaGFzTW96VHJhbnNmb3JtO1xuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoJ3pvb20nLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdGVuYWJsZWQ6IGZhbHNlLFxuXHRcdGVhc2luZzogJ2Vhc2UtaW4tb3V0Jyxcblx0XHRkdXJhdGlvbjogMzAwLFxuXHRcdG9wZW5lcjogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIGVsZW1lbnQuaXMoJ2ltZycpID8gZWxlbWVudCA6IGVsZW1lbnQuZmluZCgnaW1nJyk7XG5cdFx0fVxuXHR9LFxuXG5cdHByb3RvOiB7XG5cblx0XHRpbml0Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgem9vbVN0ID0gbWZwLnN0Lnpvb20sXG5cdFx0XHRcdG5zID0gJy56b29tJyxcblx0XHRcdFx0aW1hZ2U7XG5cblx0XHRcdGlmKCF6b29tU3QuZW5hYmxlZCB8fCAhbWZwLnN1cHBvcnRzVHJhbnNpdGlvbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkdXJhdGlvbiA9IHpvb21TdC5kdXJhdGlvbixcblx0XHRcdFx0Z2V0RWxUb0FuaW1hdGUgPSBmdW5jdGlvbihpbWFnZSkge1xuXHRcdFx0XHRcdHZhciBuZXdJbWcgPSBpbWFnZS5jbG9uZSgpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignY2xhc3MnKS5hZGRDbGFzcygnbWZwLWFuaW1hdGVkLWltYWdlJyksXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uID0gJ2FsbCAnKyh6b29tU3QuZHVyYXRpb24vMTAwMCkrJ3MgJyArIHpvb21TdC5lYXNpbmcsXG5cdFx0XHRcdFx0XHRjc3NPYmogPSB7XG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiAnZml4ZWQnLFxuXHRcdFx0XHRcdFx0XHR6SW5kZXg6IDk5OTksXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0XHRcdFx0Jy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSc6ICdoaWRkZW4nXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0dCA9ICd0cmFuc2l0aW9uJztcblxuXHRcdFx0XHRcdGNzc09ialsnLXdlYmtpdC0nK3RdID0gY3NzT2JqWyctbW96LScrdF0gPSBjc3NPYmpbJy1vLScrdF0gPSBjc3NPYmpbdF0gPSB0cmFuc2l0aW9uO1xuXG5cdFx0XHRcdFx0bmV3SW1nLmNzcyhjc3NPYmopO1xuXHRcdFx0XHRcdHJldHVybiBuZXdJbWc7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNob3dNYWluQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9wZW5UaW1lb3V0LFxuXHRcdFx0XHRhbmltYXRlZEltZztcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJytucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0Ly8gQmFzaWNhbGx5LCBhbGwgY29kZSBiZWxvdyBkb2VzIGlzIGNsb25lcyBleGlzdGluZyBpbWFnZSwgcHV0cyBpbiBvbiB0b3Agb2YgdGhlIGN1cnJlbnQgb25lIGFuZCBhbmltYXRlZCBpdFxuXG5cdFx0XHRcdFx0aW1hZ2UgPSBtZnAuX2dldEl0ZW1Ub1pvb20oKTtcblxuXHRcdFx0XHRcdGlmKCFpbWFnZSkge1xuXHRcdFx0XHRcdFx0c2hvd01haW5Db250ZW50KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cblx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCkgKTtcblxuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cblx0XHRcdFx0XHRvcGVuVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCB0cnVlICkgKTtcblx0XHRcdFx0XHRcdG9wZW5UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0XHRzaG93TWFpbkNvbnRlbnQoKTtcblxuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGltYWdlID0gYW5pbWF0ZWRJbWcgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdab29tQW5pbWF0aW9uRW5kZWQnKTtcblx0XHRcdFx0XHRcdFx0fSwgMTYpOyAvLyBhdm9pZCBibGluayB3aGVuIHN3aXRjaGluZyBpbWFnZXNcblxuXHRcdFx0XHRcdFx0fSwgZHVyYXRpb24pOyAvLyB0aGlzIHRpbWVvdXQgZXF1YWxzIGFuaW1hdGlvbiBkdXJhdGlvblxuXG5cdFx0XHRcdFx0fSwgMTYpOyAvLyBieSBhZGRpbmcgdGhpcyB0aW1lb3V0IHdlIGF2b2lkIHNob3J0IGdsaXRjaCBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvblxuXG5cblx0XHRcdFx0XHQvLyBMb3RzIG9mIHRpbWVvdXRzLi4uXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0X21mcE9uKEJFRk9SRV9DTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cblx0XHRcdFx0XHRtZnAuc3QucmVtb3ZhbERlbGF5ID0gZHVyYXRpb247XG5cblx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdGltYWdlID0gbWZwLl9nZXRJdGVtVG9ab29tKCk7XG5cdFx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCh0cnVlKSApO1xuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQoKSApO1xuXHRcdFx0XHRcdH0sIDE2KTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLl9hbGxvd1pvb20oKSkge1xuXHRcdFx0XHRcdHNob3dNYWluQ29udGVudCgpO1xuXHRcdFx0XHRcdGlmKGFuaW1hdGVkSW1nKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5yZW1vdmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aW1hZ2UgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0X2FsbG93Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gbWZwLmN1cnJJdGVtLnR5cGUgPT09ICdpbWFnZSc7XG5cdFx0fSxcblxuXHRcdF9nZXRJdGVtVG9ab29tOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKG1mcC5jdXJySXRlbS5oYXNTaXplKSB7XG5cdFx0XHRcdHJldHVybiBtZnAuY3Vyckl0ZW0uaW1nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBHZXQgZWxlbWVudCBwb3N0aW9uIHJlbGF0aXZlIHRvIHZpZXdwb3J0XG5cdFx0X2dldE9mZnNldDogZnVuY3Rpb24oaXNMYXJnZSkge1xuXHRcdFx0dmFyIGVsO1xuXHRcdFx0aWYoaXNMYXJnZSkge1xuXHRcdFx0XHRlbCA9IG1mcC5jdXJySXRlbS5pbWc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbCA9IG1mcC5zdC56b29tLm9wZW5lcihtZnAuY3Vyckl0ZW0uZWwgfHwgbWZwLmN1cnJJdGVtKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG9mZnNldCA9IGVsLm9mZnNldCgpO1xuXHRcdFx0dmFyIHBhZGRpbmdUb3AgPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctdG9wJyksMTApO1xuXHRcdFx0dmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctYm90dG9tJyksMTApO1xuXHRcdFx0b2Zmc2V0LnRvcCAtPSAoICQod2luZG93KS5zY3JvbGxUb3AoKSAtIHBhZGRpbmdUb3AgKTtcblxuXG5cdFx0XHQvKlxuXG5cdFx0XHRBbmltYXRpbmcgbGVmdCArIHRvcCArIHdpZHRoL2hlaWdodCBsb29rcyBnbGl0Y2h5IGluIEZpcmVmb3gsIGJ1dCBwZXJmZWN0IGluIENocm9tZS4gQW5kIHZpY2UtdmVyc2EuXG5cblx0XHRcdCAqL1xuXHRcdFx0dmFyIG9iaiA9IHtcblx0XHRcdFx0d2lkdGg6IGVsLndpZHRoKCksXG5cdFx0XHRcdC8vIGZpeCBaZXB0byBoZWlnaHQrcGFkZGluZyBpc3N1ZVxuXHRcdFx0XHRoZWlnaHQ6IChfaXNKUSA/IGVsLmlubmVySGVpZ2h0KCkgOiBlbFswXS5vZmZzZXRIZWlnaHQpIC0gcGFkZGluZ0JvdHRvbSAtIHBhZGRpbmdUb3Bcblx0XHRcdH07XG5cblx0XHRcdC8vIEkgaGF0ZSB0byBkbyB0aGlzLCBidXQgdGhlcmUgaXMgbm8gYW5vdGhlciBvcHRpb25cblx0XHRcdGlmKCBnZXRIYXNNb3pUcmFuc2Zvcm0oKSApIHtcblx0XHRcdFx0b2JqWyctbW96LXRyYW5zZm9ybSddID0gb2JqWyd0cmFuc2Zvcm0nXSA9ICd0cmFuc2xhdGUoJyArIG9mZnNldC5sZWZ0ICsgJ3B4LCcgKyBvZmZzZXQudG9wICsgJ3B4KSc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvYmoubGVmdCA9IG9mZnNldC5sZWZ0O1xuXHRcdFx0XHRvYmoudG9wID0gb2Zmc2V0LnRvcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXG5cdH1cbn0pO1xuXG5cblxuLyo+Pnpvb20qL1xuXG4vKj4+aWZyYW1lKi9cblxudmFyIElGUkFNRV9OUyA9ICdpZnJhbWUnLFxuXHRfZW1wdHlQYWdlID0gJy8vYWJvdXQ6YmxhbmsnLFxuXG5cdF9maXhJZnJhbWVCdWdzID0gZnVuY3Rpb24oaXNTaG93aW5nKSB7XG5cdFx0aWYobWZwLmN1cnJUZW1wbGF0ZVtJRlJBTUVfTlNdKSB7XG5cdFx0XHR2YXIgZWwgPSBtZnAuY3VyclRlbXBsYXRlW0lGUkFNRV9OU10uZmluZCgnaWZyYW1lJyk7XG5cdFx0XHRpZihlbC5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gcmVzZXQgc3JjIGFmdGVyIHRoZSBwb3B1cCBpcyBjbG9zZWQgdG8gYXZvaWQgXCJ2aWRlbyBrZWVwcyBwbGF5aW5nIGFmdGVyIHBvcHVwIGlzIGNsb3NlZFwiIGJ1Z1xuXHRcdFx0XHRpZighaXNTaG93aW5nKSB7XG5cdFx0XHRcdFx0ZWxbMF0uc3JjID0gX2VtcHR5UGFnZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElFOCBibGFjayBzY3JlZW4gYnVnIGZpeFxuXHRcdFx0XHRpZihtZnAuaXNJRTgpIHtcblx0XHRcdFx0XHRlbC5jc3MoJ2Rpc3BsYXknLCBpc1Nob3dpbmcgPyAnYmxvY2snIDogJ25vbmUnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKElGUkFNRV9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRtYXJrdXA6ICc8ZGl2IGNsYXNzPVwibWZwLWlmcmFtZS1zY2FsZXJcIj4nK1xuXHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNsb3NlXCI+PC9kaXY+Jytcblx0XHRcdFx0XHQnPGlmcmFtZSBjbGFzcz1cIm1mcC1pZnJhbWVcIiBzcmM9XCIvL2Fib3V0OmJsYW5rXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPicrXG5cdFx0XHRcdCc8L2Rpdj4nLFxuXG5cdFx0c3JjQWN0aW9uOiAnaWZyYW1lX3NyYycsXG5cblx0XHQvLyB3ZSBkb24ndCBjYXJlIGFuZCBzdXBwb3J0IG9ubHkgb25lIGRlZmF1bHQgdHlwZSBvZiBVUkwgYnkgZGVmYXVsdFxuXHRcdHBhdHRlcm5zOiB7XG5cdFx0XHR5b3V0dWJlOiB7XG5cdFx0XHRcdGluZGV4OiAneW91dHViZS5jb20nLFxuXHRcdFx0XHRpZDogJ3Y9Jyxcblx0XHRcdFx0c3JjOiAnLy93d3cueW91dHViZS5jb20vZW1iZWQvJWlkJT9hdXRvcGxheT0xJ1xuXHRcdFx0fSxcblx0XHRcdHZpbWVvOiB7XG5cdFx0XHRcdGluZGV4OiAndmltZW8uY29tLycsXG5cdFx0XHRcdGlkOiAnLycsXG5cdFx0XHRcdHNyYzogJy8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8laWQlP2F1dG9wbGF5PTEnXG5cdFx0XHR9LFxuXHRcdFx0Z21hcHM6IHtcblx0XHRcdFx0aW5kZXg6ICcvL21hcHMuZ29vZ2xlLicsXG5cdFx0XHRcdHNyYzogJyVpZCUmb3V0cHV0PWVtYmVkJ1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJZnJhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnR5cGVzLnB1c2goSUZSQU1FX05TKTtcblxuXHRcdFx0X21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkge1xuXHRcdFx0XHRpZihwcmV2VHlwZSAhPT0gbmV3VHlwZSkge1xuXHRcdFx0XHRcdGlmKHByZXZUeXBlID09PSBJRlJBTUVfTlMpIHtcblx0XHRcdFx0XHRcdF9maXhJZnJhbWVCdWdzKCk7IC8vIGlmcmFtZSBpZiByZW1vdmVkXG5cdFx0XHRcdFx0fSBlbHNlIGlmKG5ld1R5cGUgPT09IElGUkFNRV9OUykge1xuXHRcdFx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3ModHJ1ZSk7IC8vIGlmcmFtZSBpcyBzaG93aW5nXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9Ly8gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gaWZyYW1lIHNvdXJjZSBpcyBzd2l0Y2hlZCwgZG9uJ3QgZG8gYW55dGhpbmdcblx0XHRcdFx0Ly99XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UICsgJy4nICsgSUZSQU1FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3MoKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRnZXRJZnJhbWU6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cdFx0XHR2YXIgZW1iZWRTcmMgPSBpdGVtLnNyYztcblx0XHRcdHZhciBpZnJhbWVTdCA9IG1mcC5zdC5pZnJhbWU7XG5cblx0XHRcdCQuZWFjaChpZnJhbWVTdC5wYXR0ZXJucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVtYmVkU3JjLmluZGV4T2YoIHRoaXMuaW5kZXggKSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYodGhpcy5pZCkge1xuXHRcdFx0XHRcdFx0aWYodHlwZW9mIHRoaXMuaWQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0XHRcdGVtYmVkU3JjID0gZW1iZWRTcmMuc3Vic3RyKGVtYmVkU3JjLmxhc3RJbmRleE9mKHRoaXMuaWQpK3RoaXMuaWQubGVuZ3RoLCBlbWJlZFNyYy5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZW1iZWRTcmMgPSB0aGlzLmlkLmNhbGwoIHRoaXMsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVtYmVkU3JjID0gdGhpcy5zcmMucmVwbGFjZSgnJWlkJScsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBkYXRhT2JqID0ge307XG5cdFx0XHRpZihpZnJhbWVTdC5zcmNBY3Rpb24pIHtcblx0XHRcdFx0ZGF0YU9ialtpZnJhbWVTdC5zcmNBY3Rpb25dID0gZW1iZWRTcmM7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCBkYXRhT2JqLCBpdGVtKTtcblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdH1cblx0fVxufSk7XG5cblxuXG4vKj4+aWZyYW1lKi9cblxuLyo+PmdhbGxlcnkqL1xuLyoqXG4gKiBHZXQgbG9vcGVkIGluZGV4IGRlcGVuZGluZyBvbiBudW1iZXIgb2Ygc2xpZGVzXG4gKi9cbnZhciBfZ2V0TG9vcGVkSWQgPSBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBudW1TbGlkZXMgPSBtZnAuaXRlbXMubGVuZ3RoO1xuXHRcdGlmKGluZGV4ID4gbnVtU2xpZGVzIC0gMSkge1xuXHRcdFx0cmV0dXJuIGluZGV4IC0gbnVtU2xpZGVzO1xuXHRcdH0gZWxzZSAgaWYoaW5kZXggPCAwKSB7XG5cdFx0XHRyZXR1cm4gbnVtU2xpZGVzICsgaW5kZXg7XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleDtcblx0fSxcblx0X3JlcGxhY2VDdXJyVG90YWwgPSBmdW5jdGlvbih0ZXh0LCBjdXJyLCB0b3RhbCkge1xuXHRcdHJldHVybiB0ZXh0LnJlcGxhY2UoLyVjdXJyJS9naSwgY3VyciArIDEpLnJlcGxhY2UoLyV0b3RhbCUvZ2ksIHRvdGFsKTtcblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKCdnYWxsZXJ5Jywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRhcnJvd01hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWFycm93IG1mcC1hcnJvdy0lZGlyJVwiPjwvYnV0dG9uPicsXG5cdFx0cHJlbG9hZDogWzAsMl0sXG5cdFx0bmF2aWdhdGVCeUltZ0NsaWNrOiB0cnVlLFxuXHRcdGFycm93czogdHJ1ZSxcblxuXHRcdHRQcmV2OiAnUHJldmlvdXMgKExlZnQgYXJyb3cga2V5KScsXG5cdFx0dE5leHQ6ICdOZXh0IChSaWdodCBhcnJvdyBrZXkpJyxcblx0XHR0Q291bnRlcjogJyVjdXJyJSBvZiAldG90YWwlJ1xuXHR9LFxuXG5cdHByb3RvOiB7XG5cdFx0aW5pdEdhbGxlcnk6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgZ1N0ID0gbWZwLnN0LmdhbGxlcnksXG5cdFx0XHRcdG5zID0gJy5tZnAtZ2FsbGVyeSc7XG5cblx0XHRcdG1mcC5kaXJlY3Rpb24gPSB0cnVlOyAvLyB0cnVlIC0gbmV4dCwgZmFsc2UgLSBwcmV2XG5cblx0XHRcdGlmKCFnU3QgfHwgIWdTdC5lbmFibGVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtZ2FsbGVyeSc7XG5cblx0XHRcdF9tZnBPbihPUEVOX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRpZihnU3QubmF2aWdhdGVCeUltZ0NsaWNrKSB7XG5cdFx0XHRcdFx0bWZwLndyYXAub24oJ2NsaWNrJytucywgJy5tZnAtaW1nJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihtZnAuaXRlbXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfZG9jdW1lbnQub24oJ2tleWRvd24nK25zLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcblx0XHRcdFx0XHRcdG1mcC5wcmV2KCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XG5cdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdVcGRhdGVTdGF0dXMnK25zLCBmdW5jdGlvbihlLCBkYXRhKSB7XG5cdFx0XHRcdGlmKGRhdGEudGV4dCkge1xuXHRcdFx0XHRcdGRhdGEudGV4dCA9IF9yZXBsYWNlQ3VyclRvdGFsKGRhdGEudGV4dCwgbWZwLmN1cnJJdGVtLmluZGV4LCBtZnAuaXRlbXMubGVuZ3RoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihNQVJLVVBfUEFSU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKGUsIGVsZW1lbnQsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHR2YXIgbCA9IG1mcC5pdGVtcy5sZW5ndGg7XG5cdFx0XHRcdHZhbHVlcy5jb3VudGVyID0gbCA+IDEgPyBfcmVwbGFjZUN1cnJUb3RhbChnU3QudENvdW50ZXIsIGl0ZW0uaW5kZXgsIGwpIDogJyc7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJyArIG5zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLml0ZW1zLmxlbmd0aCA+IDEgJiYgZ1N0LmFycm93cyAmJiAhbWZwLmFycm93TGVmdCkge1xuXHRcdFx0XHRcdHZhciBtYXJrdXAgPSBnU3QuYXJyb3dNYXJrdXAsXG5cdFx0XHRcdFx0XHRhcnJvd0xlZnQgPSBtZnAuYXJyb3dMZWZ0ID0gJCggbWFya3VwLnJlcGxhY2UoLyV0aXRsZSUvZ2ksIGdTdC50UHJldikucmVwbGFjZSgvJWRpciUvZ2ksICdsZWZ0JykgKS5hZGRDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSxcblx0XHRcdFx0XHRcdGFycm93UmlnaHQgPSBtZnAuYXJyb3dSaWdodCA9ICQoIG1hcmt1cC5yZXBsYWNlKC8ldGl0bGUlL2dpLCBnU3QudE5leHQpLnJlcGxhY2UoLyVkaXIlL2dpLCAncmlnaHQnKSApLmFkZENsYXNzKFBSRVZFTlRfQ0xPU0VfQ0xBU1MpO1xuXG5cdFx0XHRcdFx0YXJyb3dMZWZ0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLnByZXYoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRhcnJvd1JpZ2h0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdG1mcC5jb250YWluZXIuYXBwZW5kKGFycm93TGVmdC5hZGQoYXJyb3dSaWdodCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENIQU5HRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fcHJlbG9hZFRpbWVvdXQpIGNsZWFyVGltZW91dChtZnAuX3ByZWxvYWRUaW1lb3V0KTtcblxuXHRcdFx0XHRtZnAuX3ByZWxvYWRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZnAucHJlbG9hZE5lYXJieUltYWdlcygpO1xuXHRcdFx0XHRcdG1mcC5fcHJlbG9hZFRpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHR9LCAxNik7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfZG9jdW1lbnQub2ZmKG5zKTtcblx0XHRcdFx0bWZwLndyYXAub2ZmKCdjbGljaycrbnMpO1xuXHRcdFx0XHRtZnAuYXJyb3dSaWdodCA9IG1mcC5hcnJvd0xlZnQgPSBudWxsO1xuXHRcdFx0fSk7XG5cblx0XHR9LFxuXHRcdG5leHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IHRydWU7XG5cdFx0XHRtZnAuaW5kZXggPSBfZ2V0TG9vcGVkSWQobWZwLmluZGV4ICsgMSk7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZXY6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IGZhbHNlO1xuXHRcdFx0bWZwLmluZGV4ID0gX2dldExvb3BlZElkKG1mcC5pbmRleCAtIDEpO1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRnb1RvOiBmdW5jdGlvbihuZXdJbmRleCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IChuZXdJbmRleCA+PSBtZnAuaW5kZXgpO1xuXHRcdFx0bWZwLmluZGV4ID0gbmV3SW5kZXg7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZWxvYWROZWFyYnlJbWFnZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHAgPSBtZnAuc3QuZ2FsbGVyeS5wcmVsb2FkLFxuXHRcdFx0XHRwcmVsb2FkQmVmb3JlID0gTWF0aC5taW4ocFswXSwgbWZwLml0ZW1zLmxlbmd0aCksXG5cdFx0XHRcdHByZWxvYWRBZnRlciA9IE1hdGgubWluKHBbMV0sIG1mcC5pdGVtcy5sZW5ndGgpLFxuXHRcdFx0XHRpO1xuXG5cdFx0XHRmb3IoaSA9IDE7IGkgPD0gKG1mcC5kaXJlY3Rpb24gPyBwcmVsb2FkQWZ0ZXIgOiBwcmVsb2FkQmVmb3JlKTsgaSsrKSB7XG5cdFx0XHRcdG1mcC5fcHJlbG9hZEl0ZW0obWZwLmluZGV4K2kpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChtZnAuZGlyZWN0aW9uID8gcHJlbG9hZEJlZm9yZSA6IHByZWxvYWRBZnRlcik7IGkrKykge1xuXHRcdFx0XHRtZnAuX3ByZWxvYWRJdGVtKG1mcC5pbmRleC1pKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9wcmVsb2FkSXRlbTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdGluZGV4ID0gX2dldExvb3BlZElkKGluZGV4KTtcblxuXHRcdFx0aWYobWZwLml0ZW1zW2luZGV4XS5wcmVsb2FkZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF07XG5cdFx0XHRpZighaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0aXRlbSA9IG1mcC5wYXJzZUVsKCBpbmRleCApO1xuXHRcdFx0fVxuXG5cdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWQnLCBpdGVtKTtcblxuXHRcdFx0aWYoaXRlbS50eXBlID09PSAnaW1hZ2UnKSB7XG5cdFx0XHRcdGl0ZW0uaW1nID0gJCgnPGltZyBjbGFzcz1cIm1mcC1pbWdcIiAvPicpLm9uKCdsb2FkLm1mcGxvYWRlcicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0pLm9uKCdlcnJvci5tZnBsb2FkZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWRFcnJvcicsIGl0ZW0pO1xuXHRcdFx0XHR9KS5hdHRyKCdzcmMnLCBpdGVtLnNyYyk7XG5cdFx0XHR9XG5cblxuXHRcdFx0aXRlbS5wcmVsb2FkZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5nYWxsZXJ5Ki9cblxuLyo+PnJldGluYSovXG5cbnZhciBSRVRJTkFfTlMgPSAncmV0aW5hJztcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKFJFVElOQV9OUywge1xuXHRvcHRpb25zOiB7XG5cdFx0cmVwbGFjZVNyYzogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0cmV0dXJuIGl0ZW0uc3JjLnJlcGxhY2UoL1xcLlxcdyskLywgZnVuY3Rpb24obSkgeyByZXR1cm4gJ0AyeCcgKyBtOyB9KTtcblx0XHR9LFxuXHRcdHJhdGlvOiAxIC8vIEZ1bmN0aW9uIG9yIG51bWJlci4gIFNldCB0byAxIHRvIGRpc2FibGUuXG5cdH0sXG5cdHByb3RvOiB7XG5cdFx0aW5pdFJldGluYTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEpIHtcblxuXHRcdFx0XHR2YXIgc3QgPSBtZnAuc3QucmV0aW5hLFxuXHRcdFx0XHRcdHJhdGlvID0gc3QucmF0aW87XG5cblx0XHRcdFx0cmF0aW8gPSAhaXNOYU4ocmF0aW8pID8gcmF0aW8gOiByYXRpbygpO1xuXG5cdFx0XHRcdGlmKHJhdGlvID4gMSkge1xuXHRcdFx0XHRcdF9tZnBPbignSW1hZ2VIYXNTaXplJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcuY3NzKHtcblx0XHRcdFx0XHRcdFx0J21heC13aWR0aCc6IGl0ZW0uaW1nWzBdLm5hdHVyYWxXaWR0aCAvIHJhdGlvLFxuXHRcdFx0XHRcdFx0XHQnd2lkdGgnOiAnMTAwJSdcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdF9tZnBPbignRWxlbWVudFBhcnNlJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5zcmMgPSBzdC5yZXBsYWNlU3JjKGl0ZW0sIHJhdGlvKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PnJldGluYSovXG4gX2NoZWNrSW5zdGFuY2UoKTsgfSkpOyIsIiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBQbHlyXG4vLyBwbHlyLmpzIHYyLjAuMTBcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWx6L3BseXJcbi8vIExpY2Vuc2U6IFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIENyZWRpdHM6IGh0dHA6Ly9wYXlwYWwuZ2l0aHViLmlvL2FjY2Vzc2libGUtaHRtbDUtdmlkZW8tcGxheWVyL1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuOyhmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8qZ2xvYmFsIGRlZmluZSxtb2R1bGUqL1xuXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZSwgQ29tbW9uSlMtbGlrZVxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnkocm9vdCwgZG9jdW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRFxuICAgICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhY3Rvcnkocm9vdCwgZG9jdW1lbnQpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgICAgICByb290LnBseXIgPSBmYWN0b3J5KHJvb3QsIGRvY3VtZW50KTtcbiAgICB9XG59KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIEdsb2JhbHNcbiAgICB2YXIgZnVsbHNjcmVlbixcbiAgICBzY3JvbGwgPSB7IHg6IDAsIHk6IDAgfSxcblxuICAgIC8vIERlZmF1bHQgY29uZmlnXG4gICAgZGVmYXVsdHMgPSB7XG4gICAgICAgIGVuYWJsZWQ6ICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGRlYnVnOiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICBhdXRvcGxheTogICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgbG9vcDogICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgIHNlZWtUaW1lOiAgICAgICAgICAgICAgIDEwLFxuICAgICAgICB2b2x1bWU6ICAgICAgICAgICAgICAgICAxMCxcbiAgICAgICAgdm9sdW1lTWluOiAgICAgICAgICAgICAgMCxcbiAgICAgICAgdm9sdW1lTWF4OiAgICAgICAgICAgICAgMTAsXG4gICAgICAgIHZvbHVtZVN0ZXA6ICAgICAgICAgICAgIDEsXG4gICAgICAgIGR1cmF0aW9uOiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgIGRpc3BsYXlEdXJhdGlvbjogICAgICAgIHRydWUsXG4gICAgICAgIGxvYWRTcHJpdGU6ICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGljb25QcmVmaXg6ICAgICAgICAgICAgICdwbHlyJyxcbiAgICAgICAgaWNvblVybDogICAgICAgICAgICAgICAgJ2h0dHBzOi8vY2RuLnBseXIuaW8vMi4wLjEwL3BseXIuc3ZnJyxcbiAgICAgICAgY2xpY2tUb1BsYXk6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgaGlkZUNvbnRyb2xzOiAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgc2hvd1Bvc3Rlck9uRW5kOiAgICAgICAgZmFsc2UsXG4gICAgICAgIGRpc2FibGVDb250ZXh0TWVudTogICAgIHRydWUsXG4gICAgICAgIGtleWJvYXJkU2hvcmN1dHM6ICAgICAgIHtcbiAgICAgICAgICAgIGZvY3VzZWQ6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGdsb2JhbDogICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgIGNvbnRyb2xzOiAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBzZWVrOiAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICBodG1sNTogICAgICAgICAgICAgICd2aWRlbywgYXVkaW8nLFxuICAgICAgICAgICAgZW1iZWQ6ICAgICAgICAgICAgICAnW2RhdGEtdHlwZV0nLFxuICAgICAgICAgICAgZWRpdGFibGU6ICAgICAgICAgICAnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIFtjb250ZW50ZWRpdGFibGVdJyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogICAgICAgICAgJy5wbHlyJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgd3JhcHBlcjogICAgICAgICcucGx5cl9fY29udHJvbHMnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFiZWxzOiAgICAgICAgICAgICAnW2RhdGEtcGx5cl0nLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgIHNlZWs6ICAgICAgICAgICAnW2RhdGEtcGx5cj1cInNlZWtcIl0nLFxuICAgICAgICAgICAgICAgIHBsYXk6ICAgICAgICAgICAnW2RhdGEtcGx5cj1cInBsYXlcIl0nLFxuICAgICAgICAgICAgICAgIHBhdXNlOiAgICAgICAgICAnW2RhdGEtcGx5cj1cInBhdXNlXCJdJyxcbiAgICAgICAgICAgICAgICByZXN0YXJ0OiAgICAgICAgJ1tkYXRhLXBseXI9XCJyZXN0YXJ0XCJdJyxcbiAgICAgICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgJ1tkYXRhLXBseXI9XCJyZXdpbmRcIl0nLFxuICAgICAgICAgICAgICAgIGZvcndhcmQ6ICAgICAgICAnW2RhdGEtcGx5cj1cImZhc3QtZm9yd2FyZFwiXScsXG4gICAgICAgICAgICAgICAgbXV0ZTogICAgICAgICAgICdbZGF0YS1wbHlyPVwibXV0ZVwiXScsXG4gICAgICAgICAgICAgICAgY2FwdGlvbnM6ICAgICAgICdbZGF0YS1wbHlyPVwiY2FwdGlvbnNcIl0nLFxuICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW46ICAgICAnW2RhdGEtcGx5cj1cImZ1bGxzY3JlZW5cIl0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdm9sdW1lOiB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6ICAgICAgICAgICdbZGF0YS1wbHlyPVwidm9sdW1lXCJdJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAgICAgICAgJy5wbHlyX192b2x1bWUtLWRpc3BsYXknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgICAgICAgICBjb250YWluZXI6ICAgICAgJy5wbHlyX19wcm9ncmVzcycsXG4gICAgICAgICAgICAgICAgYnVmZmVyOiAgICAgICAgICcucGx5cl9fcHJvZ3Jlc3MtLWJ1ZmZlcicsXG4gICAgICAgICAgICAgICAgcGxheWVkOiAgICAgICAgICcucGx5cl9fcHJvZ3Jlc3MtLXBsYXllZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXB0aW9uczogICAgICAgICAgICcucGx5cl9fY2FwdGlvbnMnLFxuICAgICAgICAgICAgY3VycmVudFRpbWU6ICAgICAgICAnLnBseXJfX3RpbWUtLWN1cnJlbnQnLFxuICAgICAgICAgICAgZHVyYXRpb246ICAgICAgICAgICAnLnBseXJfX3RpbWUtLWR1cmF0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICBjbGFzc2VzOiB7XG4gICAgICAgICAgICBzZXR1cDogICAgICAgICAgICAgICdwbHlyLS1zZXR1cCcsXG4gICAgICAgICAgICByZWFkeTogICAgICAgICAgICAgICdwbHlyLS1yZWFkeScsXG4gICAgICAgICAgICB2aWRlb1dyYXBwZXI6ICAgICAgICdwbHlyX192aWRlby13cmFwcGVyJyxcbiAgICAgICAgICAgIGVtYmVkV3JhcHBlcjogICAgICAgJ3BseXJfX3ZpZGVvLWVtYmVkJyxcbiAgICAgICAgICAgIHR5cGU6ICAgICAgICAgICAgICAgJ3BseXItLXswfScsXG4gICAgICAgICAgICBzdG9wcGVkOiAgICAgICAgICAgICdwbHlyLS1zdG9wcGVkJyxcbiAgICAgICAgICAgIHBsYXlpbmc6ICAgICAgICAgICAgJ3BseXItLXBsYXlpbmcnLFxuICAgICAgICAgICAgbXV0ZWQ6ICAgICAgICAgICAgICAncGx5ci0tbXV0ZWQnLFxuICAgICAgICAgICAgbG9hZGluZzogICAgICAgICAgICAncGx5ci0tbG9hZGluZycsXG4gICAgICAgICAgICBob3ZlcjogICAgICAgICAgICAgICdwbHlyLS1ob3ZlcicsXG4gICAgICAgICAgICB0b29sdGlwOiAgICAgICAgICAgICdwbHlyX190b29sdGlwJyxcbiAgICAgICAgICAgIGhpZGRlbjogICAgICAgICAgICAgJ3BseXJfX3NyLW9ubHknLFxuICAgICAgICAgICAgaGlkZUNvbnRyb2xzOiAgICAgICAncGx5ci0taGlkZS1jb250cm9scycsXG4gICAgICAgICAgICBpc0lvczogICAgICAgICAgICAgICdwbHlyLS1pcy1pb3MnLFxuICAgICAgICAgICAgaXNUb3VjaDogICAgICAgICAgICAncGx5ci0taXMtdG91Y2gnLFxuICAgICAgICAgICAgY2FwdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiAgICAgICAgJ3BseXItLWNhcHRpb25zLWVuYWJsZWQnLFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogICAgICAgICAncGx5ci0tY2FwdGlvbnMtYWN0aXZlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiAgICAgICAgJ3BseXItLWZ1bGxzY3JlZW4tZW5hYmxlZCcsXG4gICAgICAgICAgICAgICAgYWN0aXZlOiAgICAgICAgICdwbHlyLS1mdWxsc2NyZWVuLWFjdGl2ZSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWJGb2N1czogICAgICAgICAgICd0YWItZm9jdXMnXG4gICAgICAgIH0sXG4gICAgICAgIGNhcHRpb25zOiB7XG4gICAgICAgICAgICBkZWZhdWx0QWN0aXZlOiAgICAgIGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxzY3JlZW46IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbGxiYWNrOiAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGFsbG93QXVkaW86ICAgICAgICAgZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc3RvcmFnZToge1xuICAgICAgICAgICAgZW5hYmxlZDogICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAga2V5OiAgICAgICAgICAgICAgICAncGx5cidcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbHM6ICAgICAgICAgICAgICAgWydwbGF5LWxhcmdlJywgJ3BsYXknLCAncHJvZ3Jlc3MnLCAnY3VycmVudC10aW1lJywgJ211dGUnLCAndm9sdW1lJywgJ2NhcHRpb25zJywgJ2Z1bGxzY3JlZW4nXSxcbiAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgcmVzdGFydDogICAgICAgICAgICAnUmVzdGFydCcsXG4gICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgICAgICdSZXdpbmQge3NlZWt0aW1lfSBzZWNzJyxcbiAgICAgICAgICAgIHBsYXk6ICAgICAgICAgICAgICAgJ1BsYXknLFxuICAgICAgICAgICAgcGF1c2U6ICAgICAgICAgICAgICAnUGF1c2UnLFxuICAgICAgICAgICAgZm9yd2FyZDogICAgICAgICAgICAnRm9yd2FyZCB7c2Vla3RpbWV9IHNlY3MnLFxuICAgICAgICAgICAgcGxheWVkOiAgICAgICAgICAgICAncGxheWVkJyxcbiAgICAgICAgICAgIGJ1ZmZlcmVkOiAgICAgICAgICAgJ2J1ZmZlcmVkJyxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiAgICAgICAgJ0N1cnJlbnQgdGltZScsXG4gICAgICAgICAgICBkdXJhdGlvbjogICAgICAgICAgICdEdXJhdGlvbicsXG4gICAgICAgICAgICB2b2x1bWU6ICAgICAgICAgICAgICdWb2x1bWUnLFxuICAgICAgICAgICAgdG9nZ2xlTXV0ZTogICAgICAgICAnVG9nZ2xlIE11dGUnLFxuICAgICAgICAgICAgdG9nZ2xlQ2FwdGlvbnM6ICAgICAnVG9nZ2xlIENhcHRpb25zJyxcbiAgICAgICAgICAgIHRvZ2dsZUZ1bGxzY3JlZW46ICAgJ1RvZ2dsZSBGdWxsc2NyZWVuJyxcbiAgICAgICAgICAgIGZyYW1lVGl0bGU6ICAgICAgICAgJ1BsYXllciBmb3Ige3RpdGxlfSdcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZXM6IHtcbiAgICAgICAgICAgIGVtYmVkOiAgICAgICAgICAgICAgWyd5b3V0dWJlJywgJ3ZpbWVvJywgJ3NvdW5kY2xvdWQnXSxcbiAgICAgICAgICAgIGh0bWw1OiAgICAgICAgICAgICAgWyd2aWRlbycsICdhdWRpbyddXG4gICAgICAgIH0sXG4gICAgICAgIC8vIFVSTHNcbiAgICAgICAgdXJsczoge1xuICAgICAgICAgICAgdmltZW86IHtcbiAgICAgICAgICAgICAgICBhcGk6ICAgICAgICAgICAgJ2h0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS9hcGkvcGxheWVyLmpzJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5b3V0dWJlOiB7XG4gICAgICAgICAgICAgICAgYXBpOiAgICAgICAgICAgICdodHRwczovL3d3dy55b3V0dWJlLmNvbS9pZnJhbWVfYXBpJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNvdW5kY2xvdWQ6IHtcbiAgICAgICAgICAgICAgICBhcGk6ICAgICAgICAgICAgJ2h0dHBzOi8vdy5zb3VuZGNsb3VkLmNvbS9wbGF5ZXIvYXBpLmpzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBDdXN0b20gY29udHJvbCBsaXN0ZW5lcnNcbiAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgICBzZWVrOiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwbGF5OiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwYXVzZTogICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICByZXN0YXJ0OiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBmb3J3YXJkOiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBtdXRlOiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB2b2x1bWU6ICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBjYXB0aW9uczogICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiAgICAgICAgIG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gRXZlbnRzIHRvIHdhdGNoIG9uIEhUTUw1IG1lZGlhIGVsZW1lbnRzXG4gICAgICAgIGV2ZW50czogICAgICAgICAgICAgICAgIFsncmVhZHknLCAnZW5kZWQnLCAncHJvZ3Jlc3MnLCAnc3RhbGxlZCcsICdwbGF5aW5nJywgJ3dhaXRpbmcnLCAnY2FucGxheScsICdjYW5wbGF5dGhyb3VnaCcsICdsb2Fkc3RhcnQnLCAnbG9hZGVkZGF0YScsICdsb2FkZWRtZXRhZGF0YScsICd0aW1ldXBkYXRlJywgJ3ZvbHVtZWNoYW5nZScsICdwbGF5JywgJ3BhdXNlJywgJ2Vycm9yJywgJ3NlZWtpbmcnLCAnc2Vla2VkJywgJ2VtcHRpZWQnXSxcbiAgICAgICAgLy8gTG9nZ2luZ1xuICAgICAgICBsb2dQcmVmaXg6ICAgICAgICAgICAgICAnW1BseXJdJ1xuICAgIH07XG5cbiAgICAvLyBDcmVkaXRzOiBodHRwOi8vcGF5cGFsLmdpdGh1Yi5pby9hY2Nlc3NpYmxlLWh0bWw1LXZpZGVvLXBsYXllci9cbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCBkdWUgdG8gbWl4ZWQgc3VwcG9ydCwgVUEgc25pZmZpbmcgaXMgcmVxdWlyZWRcbiAgICBmdW5jdGlvbiBfYnJvd3NlclNuaWZmKCkge1xuICAgICAgICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgbmFtZSA9IG5hdmlnYXRvci5hcHBOYW1lLFxuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSAnJyArIHBhcnNlRmxvYXQobmF2aWdhdG9yLmFwcFZlcnNpb24pLFxuICAgICAgICAgICAgbWFqb3JWZXJzaW9uID0gcGFyc2VJbnQobmF2aWdhdG9yLmFwcFZlcnNpb24sIDEwKSxcbiAgICAgICAgICAgIG5hbWVPZmZzZXQsXG4gICAgICAgICAgICB2ZXJPZmZzZXQsXG4gICAgICAgICAgICBpeCxcbiAgICAgICAgICAgIGlzSUUgPSBmYWxzZSxcbiAgICAgICAgICAgIGlzRmlyZWZveCA9IGZhbHNlLFxuICAgICAgICAgICAgaXNDaHJvbWUgPSBmYWxzZSxcbiAgICAgICAgICAgIGlzU2FmYXJpID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdXaW5kb3dzIE5UJykgIT09IC0xKSAmJiAobmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZigncnY6MTEnKSAhPT0gLTEpKSB7XG4gICAgICAgICAgICAvLyBNU0lFIDExXG4gICAgICAgICAgICBpc0lFID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnSUUnO1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSAnMTEnO1xuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdNU0lFJykpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gTVNJRVxuICAgICAgICAgICAgaXNJRSA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gJ0lFJztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDUpO1xuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdDaHJvbWUnKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBDaHJvbWVcbiAgICAgICAgICAgIGlzQ2hyb21lID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnQ2hyb21lJztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDcpO1xuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdTYWZhcmknKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBTYWZhcmlcbiAgICAgICAgICAgIGlzU2FmYXJpID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnU2FmYXJpJztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDcpO1xuICAgICAgICAgICAgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdWZXJzaW9uJykpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdGaXJlZm94JykpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gRmlyZWZveFxuICAgICAgICAgICAgaXNGaXJlZm94ID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnRmlyZWZveCc7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9IHVhLnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA4KTtcbiAgICAgICAgfSBlbHNlIGlmICgobmFtZU9mZnNldCA9IHVhLmxhc3RJbmRleE9mKCcgJykgKyAxKSA8ICh2ZXJPZmZzZXQgPSB1YS5sYXN0SW5kZXhPZignLycpKSkge1xuICAgICAgICAgICAgLy8gSW4gbW9zdCBvdGhlciBicm93c2VycywgJ25hbWUvdmVyc2lvbicgaXMgYXQgdGhlIGVuZCBvZiB1c2VyQWdlbnRcbiAgICAgICAgICAgIG5hbWUgPSB1YS5zdWJzdHJpbmcobmFtZU9mZnNldCx2ZXJPZmZzZXQpO1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSB1YS5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgMSk7XG5cbiAgICAgICAgICAgIGlmIChuYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBuYXZpZ2F0b3IuYXBwTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyaW0gdGhlIGZ1bGxWZXJzaW9uIHN0cmluZyBhdCBzZW1pY29sb24vc3BhY2UgaWYgcHJlc2VudFxuICAgICAgICBpZiAoKGl4ID0gZnVsbFZlcnNpb24uaW5kZXhPZignOycpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gZnVsbFZlcnNpb24uc3Vic3RyaW5nKDAsIGl4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGl4ID0gZnVsbFZlcnNpb24uaW5kZXhPZignICcpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gZnVsbFZlcnNpb24uc3Vic3RyaW5nKDAsIGl4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBtYWpvciB2ZXJzaW9uXG4gICAgICAgIG1ham9yVmVyc2lvbiA9IHBhcnNlSW50KCcnICsgZnVsbFZlcnNpb24sIDEwKTtcbiAgICAgICAgaWYgKGlzTmFOKG1ham9yVmVyc2lvbikpIHtcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gJycgKyBwYXJzZUZsb2F0KG5hdmlnYXRvci5hcHBWZXJzaW9uKTtcbiAgICAgICAgICAgIG1ham9yVmVyc2lvbiA9IHBhcnNlSW50KG5hdmlnYXRvci5hcHBWZXJzaW9uLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gZGF0YVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogICAgICAgbmFtZSxcbiAgICAgICAgICAgIHZlcnNpb246ICAgIG1ham9yVmVyc2lvbixcbiAgICAgICAgICAgIGlzSUU6ICAgICAgIGlzSUUsXG4gICAgICAgICAgICBpc0ZpcmVmb3g6ICBpc0ZpcmVmb3gsXG4gICAgICAgICAgICBpc0Nocm9tZTogICBpc0Nocm9tZSxcbiAgICAgICAgICAgIGlzU2FmYXJpOiAgIGlzU2FmYXJpLFxuICAgICAgICAgICAgaXNJb3M6ICAgICAgLyhpUGFkfGlQaG9uZXxpUG9kKS9nLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSxcbiAgICAgICAgICAgIGlzVG91Y2g6ICAgICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBtaW1lIHR5cGUgc3VwcG9ydCBhZ2FpbnN0IGEgcGxheWVyIGluc3RhbmNlXG4gICAgLy8gQ3JlZGl0czogaHR0cDovL2RpdmVpbnRvaHRtbDUuaW5mby9ldmVyeXRoaW5nLmh0bWxcbiAgICAvLyBSZWxhdGVkOiBodHRwOi8vd3d3LmxlYW5iYWNrcGx5ci5jb20vdGVzdC9oNW10Lmh0bWxcbiAgICBmdW5jdGlvbiBfc3VwcG9ydE1pbWUocGx5ciwgbWltZVR5cGUpIHtcbiAgICAgICAgdmFyIG1lZGlhID0gcGx5ci5tZWRpYTtcblxuICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAvLyBDaGVjayB0eXBlXG4gICAgICAgICAgICBzd2l0Y2ggKG1pbWVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndmlkZW8vd2VibSc6ICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCd2aWRlby93ZWJtOyBjb2RlY3M9XCJ2cDgsIHZvcmJpc1wiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvL21wNCc6ICAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgndmlkZW8vbXA0OyBjb2RlY3M9XCJhdmMxLjQyRTAxRSwgbXA0YS40MC4yXCInKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAndmlkZW8vb2dnJzogICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCd2aWRlby9vZ2c7IGNvZGVjcz1cInRoZW9yYVwiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBseXIudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgLy8gQ2hlY2sgdHlwZVxuICAgICAgICAgICAgc3dpdGNoIChtaW1lVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvL21wZWcnOiAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgnYXVkaW8vbXBlZzsnKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXVkaW8vb2dnJzogICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCdhdWRpby9vZ2c7IGNvZGVjcz1cInZvcmJpc1wiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvL3dhdic6ICAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgnYXVkaW8vd2F2OyBjb2RlY3M9XCIxXCInKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB3ZSBnb3QgdGhpcyBmYXIsIHdlJ3JlIHN0dWZmZWRcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEluamVjdCBhIHNjcmlwdFxuICAgIGZ1bmN0aW9uIF9pbmplY3RTY3JpcHQoc291cmNlKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHRbc3JjPVwiJyArIHNvdXJjZSArICdcIl0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgdGFnLnNyYyA9IHNvdXJjZTtcbiAgICAgICAgdmFyIGZpcnN0U2NyaXB0VGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICAgICAgICBmaXJzdFNjcmlwdFRhZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0YWcsIGZpcnN0U2NyaXB0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBFbGVtZW50IGV4aXN0cyBpbiBhbiBhcnJheVxuICAgIGZ1bmN0aW9uIF9pbkFycmF5KGhheXN0YWNrLCBuZWVkbGUpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mICYmIChoYXlzdGFjay5pbmRleE9mKG5lZWRsZSkgIT09IC0xKTtcbiAgICB9XG5cbiAgICAvLyBSZXBsYWNlIGFsbFxuICAgIGZ1bmN0aW9uIF9yZXBsYWNlQWxsKHN0cmluZywgZmluZCwgcmVwbGFjZSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChmaW5kLnJlcGxhY2UoLyhbLiorP1xcXj0hOiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyksICdnJyksIHJlcGxhY2UpO1xuICAgIH1cblxuICAgIC8vIFdyYXAgYW4gZWxlbWVudFxuICAgIGZ1bmN0aW9uIF93cmFwKGVsZW1lbnRzLCB3cmFwcGVyKSB7XG4gICAgICAgIC8vIENvbnZlcnQgYGVsZW1lbnRzYCB0byBhbiBhcnJheSwgaWYgbmVjZXNzYXJ5LlxuICAgICAgICBpZiAoIWVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9vcHMgYmFja3dhcmRzIHRvIHByZXZlbnQgaGF2aW5nIHRvIGNsb25lIHRoZSB3cmFwcGVyIG9uIHRoZVxuICAgICAgICAvLyBmaXJzdCBlbGVtZW50IChzZWUgYGNoaWxkYCBiZWxvdykuXG4gICAgICAgIGZvciAodmFyIGkgPSBlbGVtZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIGNoaWxkICAgPSAoaSA+IDApID8gd3JhcHBlci5jbG9uZU5vZGUodHJ1ZSkgOiB3cmFwcGVyO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcblxuICAgICAgICAgICAgLy8gQ2FjaGUgdGhlIGN1cnJlbnQgcGFyZW50IGFuZCBzaWJsaW5nLlxuICAgICAgICAgICAgdmFyIHBhcmVudCAgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICB2YXIgc2libGluZyA9IGVsZW1lbnQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgIC8vIFdyYXAgdGhlIGVsZW1lbnQgKGlzIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBmcm9tIGl0cyBjdXJyZW50XG4gICAgICAgICAgICAvLyBwYXJlbnQpLlxuICAgICAgICAgICAgY2hpbGQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBlbGVtZW50IGhhZCBhIHNpYmxpbmcsIGluc2VydCB0aGUgd3JhcHBlciBiZWZvcmVcbiAgICAgICAgICAgIC8vIHRoZSBzaWJsaW5nIHRvIG1haW50YWluIHRoZSBIVE1MIHN0cnVjdHVyZTsgb3RoZXJ3aXNlLCBqdXN0XG4gICAgICAgICAgICAvLyBhcHBlbmQgaXQgdG8gdGhlIHBhcmVudC5cbiAgICAgICAgICAgIGlmIChzaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgc2libGluZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVud3JhcCBhbiBlbGVtZW50XG4gICAgLy8gaHR0cDovL3BsYWluanMuY29tL2phdmFzY3JpcHQvbWFuaXB1bGF0aW9uL3Vud3JhcC1hLWRvbS1lbGVtZW50LTM1L1xuICAgIC8qZnVuY3Rpb24gX3Vud3JhcCh3cmFwcGVyKSB7XG4gICAgICAgIC8vIEdldCB0aGUgZWxlbWVudCdzIHBhcmVudCBub2RlXG4gICAgICAgIHZhciBwYXJlbnQgPSB3cmFwcGVyLnBhcmVudE5vZGU7XG5cbiAgICAgICAgLy8gTW92ZSBhbGwgY2hpbGRyZW4gb3V0IG9mIHRoZSBlbGVtZW50XG4gICAgICAgIHdoaWxlICh3cmFwcGVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUod3JhcHBlci5maXJzdENoaWxkLCB3cmFwcGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZW1wdHkgZWxlbWVudFxuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQod3JhcHBlcik7XG4gICAgfSovXG5cbiAgICAvLyBSZW1vdmUgYW4gZWxlbWVudFxuICAgIGZ1bmN0aW9uIF9yZW1vdmUoZWxlbWVudCkge1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gUHJlcGVuZCBjaGlsZFxuICAgIGZ1bmN0aW9uIF9wcmVwZW5kQ2hpbGQocGFyZW50LCBlbGVtZW50KSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZWxlbWVudCwgcGFyZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIC8vIFNldCBhdHRyaWJ1dGVzXG4gICAgZnVuY3Rpb24gX3NldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCAoX2lzLmJvb2xlYW4oYXR0cmlidXRlc1trZXldKSAmJiBhdHRyaWJ1dGVzW2tleV0pID8gJycgOiBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5zZXJ0IGEgSFRNTCBlbGVtZW50XG4gICAgZnVuY3Rpb24gX2luc2VydEVsZW1lbnQodHlwZSwgcGFyZW50LCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyA8ZWxlbWVudD5cbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuXG4gICAgICAgIC8vIFNldCBhbGwgcGFzc2VkIGF0dHJpYnV0ZXNcbiAgICAgICAgX3NldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcyk7XG5cbiAgICAgICAgLy8gSW5qZWN0IHRoZSBuZXcgZWxlbWVudFxuICAgICAgICBfcHJlcGVuZENoaWxkKHBhcmVudCwgZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gR2V0IGEgY2xhc3NuYW1lIGZyb20gc2VsZWN0b3JcbiAgICBmdW5jdGlvbiBfZ2V0Q2xhc3NuYW1lKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5yZXBsYWNlKCcuJywgJycpO1xuICAgIH1cblxuICAgIC8vIFRvZ2dsZSBjbGFzcyBvbiBhbiBlbGVtZW50XG4gICAgZnVuY3Rpb24gX3RvZ2dsZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0W3N0YXRlID8gJ2FkZCcgOiAncmVtb3ZlJ10oY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAoJyAnICsgZWxlbWVudC5jbGFzc05hbWUgKyAnICcpLnJlcGxhY2UoL1xccysvZywgJyAnKS5yZXBsYWNlKCcgJyArIGNsYXNzTmFtZSArICcgJywgJycpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gbmFtZSArIChzdGF0ZSA/ICcgJyArIGNsYXNzTmFtZSA6ICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhcyBjbGFzcyBuYW1lXG4gICAgZnVuY3Rpb24gX2hhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgY2xhc3NOYW1lICsgJyhcXFxcc3wkKScpLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBFbGVtZW50IG1hdGNoZXMgc2VsZWN0b3JcbiAgICBmdW5jdGlvbiBfbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcCA9IEVsZW1lbnQucHJvdG90eXBlO1xuXG4gICAgICAgIHZhciBmID0gcC5tYXRjaGVzIHx8IHAud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IHAubW96TWF0Y2hlc1NlbGVjdG9yIHx8IHAubXNNYXRjaGVzU2VsZWN0b3IgfHwgZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgcmV0dXJuIFtdLmluZGV4T2YuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpLCB0aGlzKSAhPT0gLTE7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGYuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgLy8gQmluZCBhbG9uZyB3aXRoIGN1c3RvbSBoYW5kbGVyXG4gICAgZnVuY3Rpb24gX3Byb3h5TGlzdGVuZXIoZWxlbWVudCwgZXZlbnROYW1lLCB1c2VyTGlzdGVuZXIsIGRlZmF1bHRMaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xuICAgICAgICBfb24oZWxlbWVudCwgZXZlbnROYW1lLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKHVzZXJMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIHVzZXJMaXN0ZW5lci5hcHBseShlbGVtZW50LCBbZXZlbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHRMaXN0ZW5lci5hcHBseShlbGVtZW50LCBbZXZlbnRdKTtcbiAgICAgICAgfSwgdXNlQ2FwdHVyZSk7XG4gICAgfVxuXG4gICAgLy8gVG9nZ2xlIGV2ZW50IGxpc3RlbmVyXG4gICAgZnVuY3Rpb24gX3RvZ2dsZUxpc3RlbmVyKGVsZW1lbnQsIGV2ZW50cywgY2FsbGJhY2ssIHRvZ2dsZSwgdXNlQ2FwdHVyZSkge1xuICAgICAgICB2YXIgZXZlbnRMaXN0ID0gZXZlbnRzLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgLy8gV2hldGhlciB0aGUgbGlzdGVuZXIgaXMgYSBjYXB0dXJpbmcgbGlzdGVuZXIgb3Igbm90XG4gICAgICAgIC8vIERlZmF1bHQgdG8gZmFsc2VcbiAgICAgICAgaWYgKCFfaXMuYm9vbGVhbih1c2VDYXB0dXJlKSkge1xuICAgICAgICAgICAgdXNlQ2FwdHVyZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYSBub2RlbGlzdCBpcyBwYXNzZWQsIGNhbGwgaXRzZWxmIG9uIGVhY2ggbm9kZVxuICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGVsZW1lbnQubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFt4XSBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUxpc3RlbmVyKGVsZW1lbnRbeF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGEgc2luZ2xlIG5vZGUgaXMgcGFzc2VkLCBiaW5kIHRoZSBldmVudCBsaXN0ZW5lclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZWxlbWVudFt0b2dnbGUgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lciddKGV2ZW50TGlzdFtpXSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQmluZCBldmVudFxuICAgIGZ1bmN0aW9uIF9vbihlbGVtZW50LCBldmVudHMsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKSB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBfdG9nZ2xlTGlzdGVuZXIoZWxlbWVudCwgZXZlbnRzLCBjYWxsYmFjaywgdHJ1ZSwgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVbmJpbmQgZXZlbnRcbiAgICAvKmZ1bmN0aW9uIF9vZmYoZWxlbWVudCwgZXZlbnRzLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgX3RvZ2dsZUxpc3RlbmVyKGVsZW1lbnQsIGV2ZW50cywgY2FsbGJhY2ssIGZhbHNlLCB1c2VDYXB0dXJlKTtcbiAgICAgICAgfVxuICAgIH0qL1xuXG4gICAgLy8gVHJpZ2dlciBldmVudFxuICAgIGZ1bmN0aW9uIF9ldmVudChlbGVtZW50LCB0eXBlLCBidWJibGVzLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIC8vIEJhaWwgaWYgbm8gZWxlbWVudFxuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIXR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgYnViYmxlcyB0byBmYWxzZVxuICAgICAgICBpZiAoIV9pcy5ib29sZWFuKGJ1YmJsZXMpKSB7XG4gICAgICAgICAgICBidWJibGVzID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYW5kIGRpc3BhdGNoIHRoZSBldmVudFxuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQodHlwZSwge1xuICAgICAgICAgICAgYnViYmxlczogICAgYnViYmxlcyxcbiAgICAgICAgICAgIGRldGFpbDogICAgIHByb3BlcnRpZXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV2ZW50XG4gICAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuXG4gICAgLy8gVG9nZ2xlIGFyaWEtcHJlc3NlZCBzdGF0ZSBvbiBhIHRvZ2dsZSBidXR0b25cbiAgICAvLyBodHRwOi8vd3d3LnNzYmJhcnRncm91cC5jb20vYmxvZy9ob3ctbm90LXRvLW1pc3VzZS1hcmlhLXN0YXRlcy1wcm9wZXJ0aWVzLWFuZC1yb2xlc1xuICAgIGZ1bmN0aW9uIF90b2dnbGVTdGF0ZSh0YXJnZXQsIHN0YXRlKSB7XG4gICAgICAgIC8vIEJhaWwgaWYgbm8gdGFyZ2V0XG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgc3RhdGVcbiAgICAgICAgc3RhdGUgPSAoX2lzLmJvb2xlYW4oc3RhdGUpID8gc3RhdGUgOiAhdGFyZ2V0LmdldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJykpO1xuXG4gICAgICAgIC8vIFNldCB0aGUgYXR0cmlidXRlIG9uIHRhcmdldFxuICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCBzdGF0ZSk7XG5cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIC8vIEdldCBwZXJjZW50YWdlXG4gICAgZnVuY3Rpb24gX2dldFBlcmNlbnRhZ2UoY3VycmVudCwgbWF4KSB7XG4gICAgICAgIGlmIChjdXJyZW50ID09PSAwIHx8IG1heCA9PT0gMCB8fCBpc05hTihjdXJyZW50KSB8fCBpc05hTihtYXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKChjdXJyZW50IC8gbWF4KSAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICB9XG5cbiAgICAvLyBEZWVwIGV4dGVuZC9tZXJnZSBkZXN0aW5hdGlvbiBvYmplY3Qgd2l0aCBOIG1vcmUgb2JqZWN0c1xuICAgIC8vIGh0dHA6Ly9hbmRyZXdkdXBvbnQubmV0LzIwMDkvMDgvMjgvZGVlcC1leHRlbmRpbmctb2JqZWN0cy1pbi1qYXZhc2NyaXB0L1xuICAgIC8vIFJlbW92ZWQgY2FsbCB0byBhcmd1bWVudHMuY2FsbGVlICh1c2VkIGV4cGxpY2l0IGZ1bmN0aW9uIG5hbWUgaW5zdGVhZClcbiAgICBmdW5jdGlvbiBfZXh0ZW5kKCkge1xuICAgICAgICAvLyBHZXQgYXJndW1lbnRzXG4gICAgICAgIHZhciBvYmplY3RzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIC8vIEJhaWwgaWYgbm90aGluZyB0byBtZXJnZVxuICAgICAgICBpZiAoIW9iamVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gZmlyc3QgaWYgc3BlY2lmaWVkIGJ1dCBub3RoaW5nIHRvIG1lcmdlXG4gICAgICAgIGlmIChvYmplY3RzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdHNbMF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJzdCBvYmplY3QgaXMgdGhlIGRlc3RpbmF0aW9uXG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IEFycmF5LnByb3RvdHlwZS5zaGlmdC5jYWxsKG9iamVjdHMpLFxuICAgICAgICAgICAgbGVuZ3RoICAgICAgPSBvYmplY3RzLmxlbmd0aDtcblxuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIG9iamVjdHMgdG8gbWVyZ2VcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IG9iamVjdHNbaV07XG5cbiAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VbcHJvcGVydHldICYmIHNvdXJjZVtwcm9wZXJ0eV0uY29uc3RydWN0b3IgJiYgc291cmNlW3Byb3BlcnR5XS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IGRlc3RpbmF0aW9uW3Byb3BlcnR5XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgX2V4dGVuZChkZXN0aW5hdGlvbltwcm9wZXJ0eV0sIHNvdXJjZVtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHZhcmlhYmxlIHR5cGVzXG4gICAgdmFyIF9pcyA9IHtcbiAgICAgICAgb2JqZWN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZihpbnB1dCkgPT09ICdvYmplY3QnO1xuICAgICAgICB9LFxuICAgICAgICBhcnJheTogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiAodHlwZW9mKGlucHV0KSA9PT0gJ29iamVjdCcgJiYgaW5wdXQuY29uc3RydWN0b3IgPT09IEFycmF5KTtcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmICh0eXBlb2YoaW5wdXQpID09PSAnbnVtYmVyJyAmJiAhaXNOYU4oaW5wdXQgLSAwKSB8fCAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dC5jb25zdHJ1Y3RvciA9PT0gTnVtYmVyKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0cmluZzogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJvb2xlYW46IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbic7XG4gICAgICAgIH0sXG4gICAgICAgIG5vZGVMaXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIGlucHV0IGluc3RhbmNlb2YgTm9kZUxpc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGh0bWxFbGVtZW50OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIGlucHV0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgfSxcbiAgICAgICAgdW5kZWZpbmVkOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUGFyc2UgWW91VHViZSBJRCBmcm9tIHVybFxuICAgIGZ1bmN0aW9uIF9wYXJzZVlvdVR1YmVJZCh1cmwpIHtcbiAgICAgICAgdmFyIHJlZ2V4ID0gL14uKih5b3V0dS5iZVxcL3x2XFwvfHVcXC9cXHdcXC98ZW1iZWRcXC98d2F0Y2hcXD92PXxcXCZ2PSkoW14jXFwmXFw/XSopLiovO1xuICAgICAgICByZXR1cm4gKHVybC5tYXRjaChyZWdleCkpID8gUmVnRXhwLiQyIDogdXJsO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIFZpbWVvIElEIGZyb20gdXJsXG4gICAgZnVuY3Rpb24gX3BhcnNlVmltZW9JZCh1cmwpIHtcbiAgICAgICAgdmFyIHJlZ2V4ID0gL14uKih2aW1lby5jb21cXC98dmlkZW9cXC8pKFxcZCspLiovO1xuICAgICAgICByZXR1cm4gKHVybC5tYXRjaChyZWdleCkpID8gUmVnRXhwLiQyIDogdXJsO1xuICAgIH1cblxuICAgIC8vIEZ1bGxzY3JlZW4gQVBJXG4gICAgZnVuY3Rpb24gX2Z1bGxzY3JlZW4oKSB7XG4gICAgICAgIHZhciBmdWxsc2NyZWVuID0ge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRzRnVsbFNjcmVlbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNGdWxsU2NyZWVuOiBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIHJlcXVlc3RGdWxsU2NyZWVuOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgIGNhbmNlbEZ1bGxTY3JlZW46IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgZnVsbFNjcmVlbkV2ZW50TmFtZTogJycsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgICAgICAgICAgICBwcmVmaXg6ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnJvd3NlclByZWZpeGVzID0gJ3dlYmtpdCBvIG1veiBtcyBraHRtbCcuc3BsaXQoJyAnKTtcblxuICAgICAgICAvLyBDaGVjayBmb3IgbmF0aXZlIHN1cHBvcnRcbiAgICAgICAgaWYgKCFfaXMudW5kZWZpbmVkKGRvY3VtZW50LmNhbmNlbEZ1bGxTY3JlZW4pKSB7XG4gICAgICAgICAgICBmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgZnVsbHNjcmVlbiBzdXBwb3J0IGJ5IHZlbmRvciBwcmVmaXhcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGJyb3dzZXJQcmVmaXhlcy5sZW5ndGg7IGkgPCBpbDsgaSsrICkge1xuICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4ucHJlZml4ID0gYnJvd3NlclByZWZpeGVzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFfaXMudW5kZWZpbmVkKGRvY3VtZW50W2Z1bGxzY3JlZW4ucHJlZml4ICsgJ0NhbmNlbEZ1bGxTY3JlZW4nXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFfaXMudW5kZWZpbmVkKGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4pICYmIGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBNUyAod2hlbiBpc24ndCBpdD8pXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4ucHJlZml4ID0gJ21zJztcbiAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgbWV0aG9kcyB0byBkbyBzb21ldGhpbmcgdXNlZnVsXG4gICAgICAgIGlmIChmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgLy8gWWV0IGFnYWluIE1pY3Jvc29mdCBhd2Vzb21lbmVzcyxcbiAgICAgICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgcHJlZml4IGlzICdtcycsIHNvbWV0aW1lcyAnTVMnIHRvIGtlZXAgeW91IG9uIHlvdXIgdG9lc1xuICAgICAgICAgICAgZnVsbHNjcmVlbi5mdWxsU2NyZWVuRXZlbnROYW1lID0gKGZ1bGxzY3JlZW4ucHJlZml4ID09PSAnbXMnID8gJ01TRnVsbHNjcmVlbkNoYW5nZScgOiBmdWxsc2NyZWVuLnByZWZpeCArICdmdWxsc2NyZWVuY2hhbmdlJyk7XG5cbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uaXNGdWxsU2NyZWVuID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMucHJlZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJyc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgPT09IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21veic6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgPT09IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnRbdGhpcy5wcmVmaXggKyAnRnVsbHNjcmVlbkVsZW1lbnQnXSA9PT0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZnVsbHNjcmVlbi5yZXF1ZXN0RnVsbFNjcmVlbiA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnByZWZpeCA9PT0gJycpID8gZWxlbWVudC5yZXF1ZXN0RnVsbFNjcmVlbigpIDogZWxlbWVudFt0aGlzLnByZWZpeCArICh0aGlzLnByZWZpeCA9PT0gJ21zJyA/ICdSZXF1ZXN0RnVsbHNjcmVlbicgOiAnUmVxdWVzdEZ1bGxTY3JlZW4nKV0oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmdWxsc2NyZWVuLmNhbmNlbEZ1bGxTY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucHJlZml4ID09PSAnJykgPyBkb2N1bWVudC5jYW5jZWxGdWxsU2NyZWVuKCkgOiBkb2N1bWVudFt0aGlzLnByZWZpeCArICh0aGlzLnByZWZpeCA9PT0gJ21zJyA/ICdFeGl0RnVsbHNjcmVlbicgOiAnQ2FuY2VsRnVsbFNjcmVlbicpXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uZWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5wcmVmaXggPT09ICcnKSA/IGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IDogZG9jdW1lbnRbdGhpcy5wcmVmaXggKyAnRnVsbHNjcmVlbkVsZW1lbnQnXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVsbHNjcmVlbjtcbiAgICB9XG5cbiAgICAvLyBMb2NhbCBzdG9yYWdlXG4gICAgdmFyIF9zdG9yYWdlID0ge1xuICAgICAgICBzdXBwb3J0ZWQ6IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghKCdsb2NhbFN0b3JhZ2UnIGluIHdpbmRvdykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRyeSB0byB1c2UgaXQgKGl0IG1pZ2h0IGJlIGRpc2FibGVkLCBlLmcuIHVzZXIgaXMgaW4gcHJpdmF0ZS9wb3JuIG1vZGUpXG4gICAgICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzEzMVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgdGVzdCBpdGVtXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdfX190ZXN0JywgJ09LJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRlc3QgaXRlbVxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ19fX3Rlc3QnKTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdfX190ZXN0Jyk7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB2YWx1ZSBtYXRjaGVzXG4gICAgICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQgPT09ICdPSycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSkoKVxuICAgIH07XG5cbiAgICAvLyBQbGF5ZXIgaW5zdGFuY2VcbiAgICBmdW5jdGlvbiBQbHlyKG1lZGlhLCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBseXIgPSB0aGlzLFxuICAgICAgICB0aW1lcnMgPSB7fSxcbiAgICAgICAgYXBpO1xuXG4gICAgICAgIC8vIFNldCBtZWRpYVxuICAgICAgICBwbHlyLm1lZGlhID0gbWVkaWE7XG4gICAgICAgIHZhciBvcmlnaW5hbCA9IG1lZGlhLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAvLyBUcmlnZ2VyIGV2ZW50cywgd2l0aCBwbHlyIGluc3RhbmNlIHBhc3NlZFxuICAgICAgICBmdW5jdGlvbiBfdHJpZ2dlckV2ZW50KGVsZW1lbnQsIHR5cGUsIGJ1YmJsZXMsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIF9ldmVudChlbGVtZW50LCB0eXBlLCBidWJibGVzLCBfZXh0ZW5kKHt9LCBwcm9wZXJ0aWVzLCB7XG4gICAgICAgICAgICAgICAgcGx5cjogYXBpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWJ1Z2dpbmdcbiAgICAgICAgZnVuY3Rpb24gX2NvbnNvbGUodHlwZSwgYXJncykge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSkge1xuICAgICAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcblxuICAgICAgICAgICAgICAgIGlmIChfaXMuc3RyaW5nKGNvbmZpZy5sb2dQcmVmaXgpICYmIGNvbmZpZy5sb2dQcmVmaXgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MudW5zaGlmdChjb25maWcubG9nUHJlZml4KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlW3R5cGVdLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBfbG9nID0gZnVuY3Rpb24oKSB7IF9jb25zb2xlKCdsb2cnLCBhcmd1bWVudHMpIH0sXG4gICAgICAgICAgICBfd2FybiA9IGZ1bmN0aW9uKCkgeyBfY29uc29sZSgnd2FybicsIGFyZ3VtZW50cykgfTtcblxuICAgICAgICAvLyBMb2cgY29uZmlnIG9wdGlvbnNcbiAgICAgICAgX2xvZygnQ29uZmlnJywgY29uZmlnKTtcblxuICAgICAgICAvLyBHZXQgaWNvbiBVUkxcbiAgICAgICAgZnVuY3Rpb24gX2dldEljb25VcmwoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogICAgICAgIGNvbmZpZy5pY29uVXJsLFxuICAgICAgICAgICAgICAgIGFic29sdXRlOiAgIChjb25maWcuaWNvblVybC5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkgfHwgcGx5ci5icm93c2VyLmlzSUVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCdWlsZCB0aGUgZGVmYXVsdCBIVE1MXG4gICAgICAgIGZ1bmN0aW9uIF9idWlsZENvbnRyb2xzKCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGh0bWwgYXJyYXlcbiAgICAgICAgICAgIHZhciBodG1sICAgICAgICA9IFtdLFxuICAgICAgICAgICAgICAgIGljb25VcmwgICAgID0gX2dldEljb25VcmwoKSxcbiAgICAgICAgICAgICAgICBpY29uUGF0aCAgICA9ICghaWNvblVybC5hYnNvbHV0ZSA/IGljb25VcmwudXJsIDogJycpICsgJyMnICsgY29uZmlnLmljb25QcmVmaXg7XG5cbiAgICAgICAgICAgIC8vIExhcmdlciBvdmVybGFpZCBwbGF5IGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ3BsYXktbGFyZ2UnKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cInBsYXlcIiBjbGFzcz1cInBseXJfX3BsYXktbGFyZ2VcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1wbGF5XCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5wbGF5ICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGh0bWwucHVzaCgnPGRpdiBjbGFzcz1cInBseXJfX2NvbnRyb2xzXCI+Jyk7XG5cbiAgICAgICAgICAgIC8vIFJlc3RhcnQgYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncmVzdGFydCcpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicmVzdGFydFwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLXJlc3RhcnRcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnJlc3RhcnQgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmV3aW5kIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ3Jld2luZCcpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicmV3aW5kXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctcmV3aW5kXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5yZXdpbmQgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUGxheSBQYXVzZSBidXR0b25cbiAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIGJlIGEgdG9nZ2xlIGJ1dHRvbiByZWFsbHk/XG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncGxheScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicGxheVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLXBsYXlcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnBsYXkgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicGF1c2VcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1wYXVzZVwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4ucGF1c2UgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmFzdCBmb3J3YXJkIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2Zhc3QtZm9yd2FyZCcpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwiZmFzdC1mb3J3YXJkXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctZmFzdC1mb3J3YXJkXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5mb3J3YXJkICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFByb2dyZXNzXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncHJvZ3Jlc3MnKSkge1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBwcm9ncmVzc1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHNwYW4gY2xhc3M9XCJwbHlyX19wcm9ncmVzc1wiPicsXG4gICAgICAgICAgICAgICAgICAgICc8bGFiZWwgZm9yPVwic2Vla3tpZH1cIiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj5TZWVrPC9sYWJlbD4nLFxuICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGlkPVwic2Vla3tpZH1cIiBjbGFzcz1cInBseXJfX3Byb2dyZXNzLS1zZWVrXCIgdHlwZT1cInJhbmdlXCIgbWluPVwiMFwiIG1heD1cIjEwMFwiIHN0ZXA9XCIwLjFcIiB2YWx1ZT1cIjBcIiBkYXRhLXBseXI9XCJzZWVrXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxwcm9ncmVzcyBjbGFzcz1cInBseXJfX3Byb2dyZXNzLS1wbGF5ZWRcIiBtYXg9XCIxMDBcIiB2YWx1ZT1cIjBcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+PC9wcm9ncmVzcz4nLFxuICAgICAgICAgICAgICAgICAgICAnPHByb2dyZXNzIGNsYXNzPVwicGx5cl9fcHJvZ3Jlc3MtLWJ1ZmZlclwiIG1heD1cIjEwMFwiIHZhbHVlPVwiMFwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4+MDwvc3Bhbj4lICcgKyBjb25maWcuaTE4bi5idWZmZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgJzwvcHJvZ3Jlc3M+Jyk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZWVrIHRvb2x0aXBcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnRvb2x0aXBzLnNlZWspIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8c3BhbiBjbGFzcz1cInBseXJfX3Rvb2x0aXBcIj4wMDowMDwvc3Bhbj4nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDbG9zZVxuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPC9zcGFuPicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNZWRpYSBjdXJyZW50IHRpbWUgZGlzcGxheVxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2N1cnJlbnQtdGltZScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX190aW1lXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4uY3VycmVudFRpbWUgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX190aW1lLS1jdXJyZW50XCI+MDA6MDA8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWVkaWEgZHVyYXRpb24gZGlzcGxheVxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2R1cmF0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3RpbWVcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5kdXJhdGlvbiArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3RpbWUtLWR1cmF0aW9uXCI+MDA6MDA8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVG9nZ2xlIG11dGUgYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAnbXV0ZScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwibXV0ZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyBjbGFzcz1cImljb24tLW11dGVkXCI+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1tdXRlZFwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctdm9sdW1lXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi50b2dnbGVNdXRlICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFZvbHVtZSByYW5nZSBjb250cm9sXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAndm9sdW1lJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3ZvbHVtZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGZvcj1cInZvbHVtZXtpZH1cIiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4udm9sdW1lICsgJzwvbGFiZWw+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8aW5wdXQgaWQ9XCJ2b2x1bWV7aWR9XCIgY2xhc3M9XCJwbHlyX192b2x1bWUtLWlucHV0XCIgdHlwZT1cInJhbmdlXCIgbWluPVwiJyArIGNvbmZpZy52b2x1bWVNaW4gKyAnXCIgbWF4PVwiJyArIGNvbmZpZy52b2x1bWVNYXggKyAnXCIgdmFsdWU9XCInICsgY29uZmlnLnZvbHVtZSArICdcIiBkYXRhLXBseXI9XCJ2b2x1bWVcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxwcm9ncmVzcyBjbGFzcz1cInBseXJfX3ZvbHVtZS0tZGlzcGxheVwiIG1heD1cIicgKyBjb25maWcudm9sdW1lTWF4ICsgJ1wiIHZhbHVlPVwiJyArIGNvbmZpZy52b2x1bWVNaW4gKyAnXCIgcm9sZT1cInByZXNlbnRhdGlvblwiPjwvcHJvZ3Jlc3M+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGNhcHRpb25zIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2NhcHRpb25zJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJjYXB0aW9uc1wiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyBjbGFzcz1cImljb24tLWNhcHRpb25zLW9uXCI+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1jYXB0aW9ucy1vblwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCsgJy1jYXB0aW9ucy1vZmZcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnRvZ2dsZUNhcHRpb25zICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRvZ2dsZSBmdWxsc2NyZWVuIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2Z1bGxzY3JlZW4nKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cImZ1bGxzY3JlZW5cIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmcgY2xhc3M9XCJpY29uLS1leGl0LWZ1bGxzY3JlZW5cIj48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLWV4aXQtZnVsbHNjcmVlblwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctZW50ZXItZnVsbHNjcmVlblwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4udG9nZ2xlRnVsbHNjcmVlbiArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbG9zZSBldmVyeXRoaW5nXG4gICAgICAgICAgICBodG1sLnB1c2goJzwvZGl2PicpO1xuXG4gICAgICAgICAgICByZXR1cm4gaHRtbC5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGZ1bGxzY3JlZW5cbiAgICAgICAgZnVuY3Rpb24gX3NldHVwRnVsbHNjcmVlbigpIHtcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKChwbHlyLnR5cGUgIT09ICdhdWRpbycgfHwgY29uZmlnLmZ1bGxzY3JlZW4uYWxsb3dBdWRpbykgJiYgY29uZmlnLmZ1bGxzY3JlZW4uZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBuYXRpdmUgc3VwcG9ydFxuICAgICAgICAgICAgICAgIHZhciBuYXRpdmVTdXBwb3J0ID0gZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW47XG5cbiAgICAgICAgICAgICAgICBpZiAobmF0aXZlU3VwcG9ydCB8fCAoY29uZmlnLmZ1bGxzY3JlZW4uZmFsbGJhY2sgJiYgIV9pbkZyYW1lKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2coKG5hdGl2ZVN1cHBvcnQgPyAnTmF0aXZlJyA6ICdGYWxsYmFjaycpICsgJyBmdWxsc2NyZWVuIGVuYWJsZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgc3R5bGluZyBob29rXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuZnVsbHNjcmVlbi5lbmFibGVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfbG9nKCdGdWxsc2NyZWVuIG5vdCBzdXBwb3J0ZWQgYW5kIGZhbGxiYWNrIGRpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVG9nZ2xlIHN0YXRlXG4gICAgICAgICAgICAgICAgaWYgKHBseXIuYnV0dG9ucyAmJiBwbHlyLmJ1dHRvbnMuZnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLmZ1bGxzY3JlZW4sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXR1cCBmb2N1cyB0cmFwXG4gICAgICAgICAgICAgICAgX2ZvY3VzVHJhcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgY2FwdGlvbnNcbiAgICAgICAgZnVuY3Rpb24gX3NldHVwQ2FwdGlvbnMoKSB7XG4gICAgICAgICAgICAvLyBCYWlsIGlmIG5vdCBIVE1MNSB2aWRlb1xuICAgICAgICAgICAgaWYgKHBseXIudHlwZSAhPT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5qZWN0IHRoZSBjb250YWluZXJcbiAgICAgICAgICAgIGlmICghX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jYXB0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnZpZGVvQ29udGFpbmVyLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsICc8ZGl2IGNsYXNzPVwiJyArIF9nZXRDbGFzc25hbWUoY29uZmlnLnNlbGVjdG9ycy5jYXB0aW9ucykgKyAnXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERldGVybWluZSBpZiBIVE1MNSB0ZXh0VHJhY2tzIGlzIHN1cHBvcnRlZFxuICAgICAgICAgICAgcGx5ci51c2luZ1RleHRUcmFja3MgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnRleHRUcmFja3MpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnVzaW5nVGV4dFRyYWNrcyA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCBVUkwgb2YgY2FwdGlvbiBmaWxlIGlmIGV4aXN0c1xuICAgICAgICAgICAgdmFyIGNhcHRpb25TcmMgPSAnJyxcbiAgICAgICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gcGx5ci5tZWRpYS5jaGlsZE5vZGVzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2ldLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0cmFjaycpIHtcbiAgICAgICAgICAgICAgICAgICAga2luZCA9IGNoaWxkcmVuW2ldLmtpbmQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChraW5kID09PSAnY2FwdGlvbnMnIHx8IGtpbmQgPT09ICdzdWJ0aXRsZXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uU3JjID0gY2hpbGRyZW5baV0uZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVjb3JkIGlmIGNhcHRpb24gZmlsZSBleGlzdHMgb3Igbm90XG4gICAgICAgICAgICBwbHlyLmNhcHRpb25FeGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGNhcHRpb25TcmMgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5jYXB0aW9uRXhpc3RzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX2xvZygnTm8gY2FwdGlvbiB0cmFjayBmb3VuZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfbG9nKCdDYXB0aW9uIHRyYWNrIGZvdW5kOyBVUkk6ICcgKyBjYXB0aW9uU3JjKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FwdGlvbiBmaWxlIGV4aXN0cywgaGlkZSBjb250YWluZXIgZm9yIGNhcHRpb24gdGV4dFxuICAgICAgICAgICAgaWYgKCFwbHlyLmNhcHRpb25FeGlzdHMpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmVuYWJsZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUdXJuIG9mZiBuYXRpdmUgY2FwdGlvbiByZW5kZXJpbmcgdG8gYXZvaWQgZG91YmxlIGNhcHRpb25zXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBkb2Vzbid0IHNlZW0gdG8gd29yayBpbiBTYWZhcmkgNyssIHNvIHRoZSA8dHJhY2s+IGVsZW1lbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIGRvbSBiZWxvd1xuICAgICAgICAgICAgICAgIHZhciB0cmFja3MgPSBwbHlyLm1lZGlhLnRleHRUcmFja3M7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0cmFja3MubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tzW3hdLm1vZGUgPSAnaGlkZGVuJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFbmFibGUgVUlcbiAgICAgICAgICAgICAgICBfc2hvd0NhcHRpb25zKHBseXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gRGlzYWJsZSB1bnN1cHBvcnRlZCBicm93c2VycyB0aGFuIHJlcG9ydCBmYWxzZSBwb3NpdGl2ZVxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggYnVnOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDMzMTQ0XG4gICAgICAgICAgICAgICAgaWYgKChwbHlyLmJyb3dzZXIuaXNJRSAmJiBwbHlyLmJyb3dzZXIudmVyc2lvbiA+PSAxMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHBseXIuYnJvd3Nlci5pc0ZpcmVmb3ggJiYgcGx5ci5icm93c2VyLnZlcnNpb24gPj0gMzEpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVidWdnaW5nXG4gICAgICAgICAgICAgICAgICAgIF9sb2coJ0RldGVjdGVkIGJyb3dzZXIgd2l0aCBrbm93biBUZXh0VHJhY2sgaXNzdWVzIC0gdXNpbmcgbWFudWFsIGZhbGxiYWNrJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRvIGZhbHNlIHNvIHNraXBzIHRvICdtYW51YWwnIGNhcHRpb25pbmdcbiAgICAgICAgICAgICAgICAgICAgcGx5ci51c2luZ1RleHRUcmFja3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZW5kZXJpbmcgY2FwdGlvbiB0cmFja3NcbiAgICAgICAgICAgICAgICAvLyBOYXRpdmUgc3VwcG9ydCByZXF1aXJlZCAtIGh0dHA6Ly9jYW5pdXNlLmNvbS93ZWJ2dHRcbiAgICAgICAgICAgICAgICBpZiAocGx5ci51c2luZ1RleHRUcmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvZygnVGV4dFRyYWNrcyBzdXBwb3J0ZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRyYWNrcy5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW3ldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2sua2luZCA9PT0gJ2NhcHRpb25zJyB8fCB0cmFjay5raW5kID09PSAnc3VidGl0bGVzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vbih0cmFjaywgJ2N1ZWNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IGEgY3VlLCBpZiB0aGVyZSBpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ3Vlc1swXSAmJiAndGV4dCcgaW4gdGhpcy5hY3RpdmVDdWVzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbih0aGlzLmFjdGl2ZUN1ZXNbMF0uZ2V0Q3VlQXNIVE1MKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldENhcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FwdGlvbiB0cmFja3Mgbm90IG5hdGl2ZWx5IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgICAgICBfbG9nKCdUZXh0VHJhY2tzIG5vdCBzdXBwb3J0ZWQgc28gcmVuZGVyaW5nIGNhcHRpb25zIG1hbnVhbGx5Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVuZGVyIGNhcHRpb25zIGZyb20gYXJyYXkgYXQgYXBwcm9wcmlhdGUgdGltZVxuICAgICAgICAgICAgICAgICAgICBwbHlyLmN1cnJlbnRDYXB0aW9uID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY2FwdGlvbnMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FwdGlvblNyYyAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBYTUxIdHRwUmVxdWVzdCBPYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FwdGlvbnMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IHhoci5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQWNjb3JkaW5nIHRvIHdlYnZ0dCBzcGVjLCBsaW5lIHRlcm1pbmF0b3IgY29uc2lzdHMgb2Ygb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENSTEYgKFUrMDAwRCBVKzAwMEEpLCBMRiAoVSswMDBBKSBvciBDUiAoVSswMDBEKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVTZXBhcmF0b3IgPSAnXFxyXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlcS5pbmRleE9mKGxpbmVTZXBhcmF0b3IrbGluZVNlcGFyYXRvcikgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVxLmluZGV4T2YoJ1xcclxccicpICE9PSAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTZXBhcmF0b3IgPSAnXFxyJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU2VwYXJhdG9yID0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9ucyA9IHJlcS5zcGxpdChsaW5lU2VwYXJhdG9yK2xpbmVTZXBhcmF0b3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IGNhcHRpb25zLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdGlvbiA9IGNhcHRpb25zW3JdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuY2FwdGlvbnNbcl0gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcGFydHMgb2YgdGhlIGNhcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gY2FwdGlvbi5zcGxpdChsaW5lU2VwYXJhdG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5jYXNlIGNhcHRpb24gbnVtYmVycyBhcmUgYWRkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydHNbaW5kZXhdLmluZGV4T2YoXCI6XCIpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5jYXB0aW9uc1tyXSA9IFtwYXJ0c1tpbmRleF0sIHBhcnRzW2luZGV4ICsgMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZmlyc3QgZWxlbWVudCAoJ1ZUVCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmNhcHRpb25zLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2coJ1N1Y2Nlc3NmdWxseSBsb2FkZWQgdGhlIGNhcHRpb24gZmlsZSB2aWEgQUpBWCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dhcm4oY29uZmlnLmxvZ1ByZWZpeCArICdUaGVyZSB3YXMgYSBwcm9ibGVtIGxvYWRpbmcgdGhlIGNhcHRpb24gZmlsZSB2aWEgQUpBWCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oJ2dldCcsIGNhcHRpb25TcmMsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSBjdXJyZW50IGNhcHRpb25cbiAgICAgICAgZnVuY3Rpb24gX3NldENhcHRpb24oY2FwdGlvbikge1xuICAgICAgICAgICAgLyoganNoaW50IHVudXNlZDpmYWxzZSAqL1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuY2FwdGlvbnMpLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cbiAgICAgICAgICAgIC8vIEVtcHR5IHRoZSBjb250YWluZXJcbiAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBlbXB0eVxuICAgICAgICAgICAgaWYgKF9pcy51bmRlZmluZWQoY2FwdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjYXB0aW9uID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgc3BhbiBjb250ZW50XG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhjYXB0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MID0gY2FwdGlvbi50cmltKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoY2FwdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBuZXcgY2FwdGlvbiB0ZXh0XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGVudCk7XG5cbiAgICAgICAgICAgIC8vIEZvcmNlIHJlZHJhdyAoZm9yIFNhZmFyaSlcbiAgICAgICAgICAgIHZhciByZWRyYXcgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FwdGlvbnMgZnVuY3Rpb25zXG4gICAgICAgIC8vIFNlZWsgdGhlIG1hbnVhbCBjYXB0aW9uIHRpbWUgYW5kIHVwZGF0ZSBVSVxuICAgICAgICBmdW5jdGlvbiBfc2Vla01hbnVhbENhcHRpb25zKHRpbWUpIHtcbiAgICAgICAgICAgIC8vIFV0aWxpdGllcyBmb3IgY2FwdGlvbiB0aW1lIGNvZGVzXG4gICAgICAgICAgICBmdW5jdGlvbiBfdGltZWNvZGVDb21tb24odGMsIHBvcykge1xuICAgICAgICAgICAgICAgIHZhciB0Y3BhaXIgPSBbXTtcbiAgICAgICAgICAgICAgICB0Y3BhaXIgPSB0Yy5zcGxpdCgnIC0tPiAnKTtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGNwYWlyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlYlZUVCBhbGxvd3MgZm9yIGV4dHJhIG1ldGEgZGF0YSBhZnRlciB0aGUgdGltZXN0YW1wIGxpbmVcbiAgICAgICAgICAgICAgICAgICAgLy8gU28gZ2V0IHJpZCBvZiB0aGlzIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICB0Y3BhaXJbaV0gPSB0Y3BhaXJbaV0ucmVwbGFjZSgvKFxcZCs6XFxkKzpcXGQrXFwuXFxkKykuKi8sIFwiJDFcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfc3ViVGNTZWNzKHRjcGFpcltwb3NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIF90aW1lY29kZU1pbih0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGltZWNvZGVDb21tb24odGMsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gX3RpbWVjb2RlTWF4KHRjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aW1lY29kZUNvbW1vbih0YywgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBfc3ViVGNTZWNzKHRjKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRjID09PSBudWxsIHx8IHRjID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRjMSA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGMyID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzO1xuICAgICAgICAgICAgICAgICAgICB0YzEgPSB0Yy5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICB0YzIgPSB0YzFbMF0uc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IE1hdGguZmxvb3IodGMyWzBdKjYwKjYwKSArIE1hdGguZmxvb3IodGMyWzFdKjYwKSArIE1hdGguZmxvb3IodGMyWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlY29uZHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBpdCdzIG5vdCB2aWRlbywgb3Igd2UncmUgdXNpbmcgdGV4dFRyYWNrcywgYmFpbC5cbiAgICAgICAgICAgIGlmIChwbHlyLnVzaW5nVGV4dFRyYWNrcyB8fCBwbHlyLnR5cGUgIT09ICd2aWRlbycgfHwgIXBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IHN1YmNvdW50XG4gICAgICAgICAgICBwbHlyLnN1YmNvdW50ID0gMDtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgdGltZSBpcyBhIG51bWJlciwgaWYgbm90IHVzZSBjdXJyZW50VGltZVxuICAgICAgICAgICAgLy8gSUUgaGFzIGEgYnVnIHdoZXJlIGN1cnJlbnRUaW1lIGRvZXNuJ3QgZ28gdG8gMFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly90d2l0dGVyLmNvbS9TYW1fUG90dHMvc3RhdHVzLzU3MzcxNTc0NjUwNjczMTUyMVxuICAgICAgICAgICAgdGltZSA9IF9pcy5udW1iZXIodGltZSkgPyB0aW1lIDogcGx5ci5tZWRpYS5jdXJyZW50VGltZTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBzdWJzIGF2YWlsYWJsZSwgYmFpbFxuICAgICAgICAgICAgaWYgKCFwbHlyLmNhcHRpb25zW3BseXIuc3ViY291bnRdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGlsZSAoX3RpbWVjb2RlTWF4KHBseXIuY2FwdGlvbnNbcGx5ci5zdWJjb3VudF1bMF0pIDwgdGltZS50b0ZpeGVkKDEpKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5zdWJjb3VudCsrO1xuICAgICAgICAgICAgICAgIGlmIChwbHlyLnN1YmNvdW50ID4gcGx5ci5jYXB0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuc3ViY291bnQgPSBwbHlyLmNhcHRpb25zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIG5leHQgY2FwdGlvbiBpcyBpbiB0aGUgY3VycmVudCB0aW1lIHJhbmdlXG4gICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5jdXJyZW50VGltZS50b0ZpeGVkKDEpID49IF90aW1lY29kZU1pbihwbHlyLmNhcHRpb25zW3BseXIuc3ViY291bnRdWzBdKSAmJlxuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUudG9GaXhlZCgxKSA8PSBfdGltZWNvZGVNYXgocGx5ci5jYXB0aW9uc1twbHlyLnN1YmNvdW50XVswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5jdXJyZW50Q2FwdGlvbiA9IHBseXIuY2FwdGlvbnNbcGx5ci5zdWJjb3VudF1bMV07XG5cbiAgICAgICAgICAgICAgICAvLyBSZW5kZXIgdGhlIGNhcHRpb25cbiAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbihwbHlyLmN1cnJlbnRDYXB0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3NldENhcHRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc3BsYXkgY2FwdGlvbnMgY29udGFpbmVyIGFuZCBidXR0b24gKGZvciBpbml0aWFsaXphdGlvbilcbiAgICAgICAgZnVuY3Rpb24gX3Nob3dDYXB0aW9ucygpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gY2FwdGlvbiB0b2dnbGUsIGJhaWxcbiAgICAgICAgICAgIGlmICghcGx5ci5idXR0b25zLmNhcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmVuYWJsZWQsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBUcnkgdG8gbG9hZCB0aGUgdmFsdWUgZnJvbSBzdG9yYWdlXG4gICAgICAgICAgICB2YXIgYWN0aXZlID0gcGx5ci5zdG9yYWdlLmNhcHRpb25zRW5hYmxlZDtcblxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGZhbGwgYmFjayB0byB0aGUgZGVmYXVsdCBjb25maWdcbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4oYWN0aXZlKSkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGNvbmZpZy5jYXB0aW9ucy5kZWZhdWx0QWN0aXZlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5jYXB0aW9ucy5hY3RpdmUsIHRydWUpO1xuICAgICAgICAgICAgICAgIF90b2dnbGVTdGF0ZShwbHlyLmJ1dHRvbnMuY2FwdGlvbnMsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZCBhbGwgZWxlbWVudHNcbiAgICAgICAgZnVuY3Rpb24gX2dldEVsZW1lbnRzKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcGx5ci5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIGEgc2luZ2xlIGVsZW1lbnRcbiAgICAgICAgZnVuY3Rpb24gX2dldEVsZW1lbnQoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBfZ2V0RWxlbWVudHMoc2VsZWN0b3IpWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHdlJ3JlIGluIGFuIGlmcmFtZVxuICAgICAgICBmdW5jdGlvbiBfaW5GcmFtZSgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYXAgZm9jdXMgaW5zaWRlIGNvbnRhaW5lclxuICAgICAgICBmdW5jdGlvbiBfZm9jdXNUcmFwKCkge1xuICAgICAgICAgICAgdmFyIHRhYmJhYmxlcyAgID0gX2dldEVsZW1lbnRzKCdpbnB1dDpub3QoW2Rpc2FibGVkXSksIGJ1dHRvbjpub3QoW2Rpc2FibGVkXSknKSxcbiAgICAgICAgICAgICAgICBmaXJzdCAgICAgICA9IHRhYmJhYmxlc1swXSxcbiAgICAgICAgICAgICAgICBsYXN0ICAgICAgICA9IHRhYmJhYmxlc1t0YWJiYWJsZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9jaGVja0ZvY3VzKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQgaXMgVEFCXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSA5ICYmIHBseXIuaXNGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGxhc3QgJiYgIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIGZvY3VzIHRvIGZpcnN0IGVsZW1lbnQgdGhhdCBjYW4gYmUgdGFiYmVkIGlmIFNoaWZ0IGlzbid0IHVzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldCA9PT0gZmlyc3QgJiYgZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgZm9jdXMgdG8gbGFzdCBlbGVtZW50IHRoYXQgY2FuIGJlIHRhYmJlZCBpZiBTaGlmdCBpcyB1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBCaW5kIHRoZSBoYW5kbGVyXG4gICAgICAgICAgICBfb24ocGx5ci5jb250YWluZXIsICdrZXlkb3duJywgX2NoZWNrRm9jdXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGVsZW1lbnRzIHRvIEhUTUw1IG1lZGlhIChzb3VyY2UsIHRyYWNrcywgZXRjKVxuICAgICAgICBmdW5jdGlvbiBfaW5zZXJ0Q2hpbGRFbGVtZW50cyh0eXBlLCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhhdHRyaWJ1dGVzKSkge1xuICAgICAgICAgICAgICAgX2luc2VydEVsZW1lbnQodHlwZSwgcGx5ci5tZWRpYSwgeyBzcmM6IGF0dHJpYnV0ZXMgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZXMuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgX2luc2VydEVsZW1lbnQodHlwZSwgcGx5ci5tZWRpYSwgYXR0cmlidXRlc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5zZXJ0IGNvbnRyb2xzXG4gICAgICAgIGZ1bmN0aW9uIF9pbmplY3RDb250cm9scygpIHtcbiAgICAgICAgICAgIC8vIFNwcml0ZVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5sb2FkU3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGljb25VcmwgPSBfZ2V0SWNvblVybCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBsb2FkIGV4dGVybmFsIHNwcml0ZSB1c2luZyBBSkFYXG4gICAgICAgICAgICAgICAgaWYgKGljb25VcmwuYWJzb2x1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvZygnQUpBWCBsb2FkaW5nIGFic29sdXRlIFNWRyBzcHJpdGUnICsgKHBseXIuYnJvd3Nlci5pc0lFID8gJyAoZHVlIHRvIElFKScgOiAnJykpO1xuICAgICAgICAgICAgICAgICAgICBsb2FkU3ByaXRlKGljb25VcmwudXJsLCBcInNwcml0ZS1wbHlyXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2coJ1Nwcml0ZSB3aWxsIGJlIHVzZWQgYXMgZXh0ZXJuYWwgcmVzb3VyY2UgZGlyZWN0bHknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1ha2UgYSBjb3B5IG9mIHRoZSBodG1sXG4gICAgICAgICAgICB2YXIgaHRtbCA9IGNvbmZpZy5odG1sO1xuXG4gICAgICAgICAgICAvLyBJbnNlcnQgY3VzdG9tIHZpZGVvIGNvbnRyb2xzXG4gICAgICAgICAgICBfbG9nKCdJbmplY3RpbmcgY3VzdG9tIGNvbnRyb2xzJyk7XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNvbnRyb2xzIGFyZSBzcGVjaWZpZWQsIGNyZWF0ZSBkZWZhdWx0XG4gICAgICAgICAgICBpZiAoIWh0bWwpIHtcbiAgICAgICAgICAgICAgICBodG1sID0gX2J1aWxkQ29udHJvbHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVwbGFjZSBzZWVrIHRpbWUgaW5zdGFuY2VzXG4gICAgICAgICAgICBodG1sID0gX3JlcGxhY2VBbGwoaHRtbCwgJ3tzZWVrdGltZX0nLCBjb25maWcuc2Vla1RpbWUpO1xuXG4gICAgICAgICAgICAvLyBSZXBsYWNlIGFsbCBpZCByZWZlcmVuY2VzIHdpdGggcmFuZG9tIG51bWJlcnNcbiAgICAgICAgICAgIGh0bWwgPSBfcmVwbGFjZUFsbChodG1sLCAne2lkfScsIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAwMCkpKTtcblxuICAgICAgICAgICAgLy8gQ29udHJvbHMgY29udGFpbmVyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0O1xuXG4gICAgICAgICAgICAvLyBJbmplY3QgdG8gY3VzdG9tIGxvY2F0aW9uXG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLmNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5zZWxlY3RvcnMuY29udHJvbHMuY29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5qZWN0IGludG8gdGhlIGNvbnRhaW5lciBieSBkZWZhdWx0XG4gICAgICAgICAgICBpZiAoIV9pcy5odG1sRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gcGx5ci5jb250YWluZXJcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5qZWN0IGNvbnRyb2xzIEhUTUxcbiAgICAgICAgICAgIHRhcmdldC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGh0bWwpO1xuXG4gICAgICAgICAgICAvLyBTZXR1cCB0b29sdGlwc1xuICAgICAgICAgICAgaWYgKGNvbmZpZy50b29sdGlwcy5jb250cm9scykge1xuICAgICAgICAgICAgICAgIHZhciBsYWJlbHMgPSBfZ2V0RWxlbWVudHMoW2NvbmZpZy5zZWxlY3RvcnMuY29udHJvbHMud3JhcHBlciwgJyAnLCBjb25maWcuc2VsZWN0b3JzLmxhYmVscywgJyAuJywgY29uZmlnLmNsYXNzZXMuaGlkZGVuXS5qb2luKCcnKSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gbGFiZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IGxhYmVsc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MobGFiZWwsIGNvbmZpZy5jbGFzc2VzLmhpZGRlbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MobGFiZWwsIGNvbmZpZy5jbGFzc2VzLnRvb2x0aXAsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmQgdGhlIFVJIGNvbnRyb2xzIGFuZCBzdG9yZSByZWZlcmVuY2VzXG4gICAgICAgIGZ1bmN0aW9uIF9maW5kRWxlbWVudHMoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBseXIuY29udHJvbHMgICAgICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jb250cm9scy53cmFwcGVyKTtcblxuICAgICAgICAgICAgICAgIC8vIEJ1dHRvbnNcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuc2VlayAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5zZWVrKTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMucGxheSAgICAgICAgICAgICA9IF9nZXRFbGVtZW50cyhjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucGxheSk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnBhdXNlICAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucGF1c2UpO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5yZXN0YXJ0ICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLnJlc3RhcnQpO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5yZXdpbmQgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLnJld2luZCk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLmZvcndhcmQgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMuZm9yd2FyZCk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLmZ1bGxzY3JlZW4gICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMuZnVsbHNjcmVlbik7XG5cbiAgICAgICAgICAgICAgICAvLyBJbnB1dHNcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMubXV0ZSAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5tdXRlKTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuY2FwdGlvbnMgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5jYXB0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAvLyBQcm9ncmVzc1xuICAgICAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MgPSB7fTtcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLmNvbnRhaW5lciAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMucHJvZ3Jlc3MuY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIFByb2dyZXNzIC0gQnVmZmVyaW5nXG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5idWZmZXIgICAgICAgICAgPSB7fTtcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLmJ1ZmZlci5iYXIgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMucHJvZ3Jlc3MuYnVmZmVyKTtcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLmJ1ZmZlci50ZXh0ICAgICA9IHBseXIucHJvZ3Jlc3MuYnVmZmVyLmJhciAmJiBwbHlyLnByb2dyZXNzLmJ1ZmZlci5iYXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NwYW4nKVswXTtcblxuICAgICAgICAgICAgICAgIC8vIFByb2dyZXNzIC0gUGxheWVkXG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5wbGF5ZWQgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLnByb2dyZXNzLnBsYXllZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZWVrIHRvb2x0aXBcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLnRvb2x0aXAgICAgICAgICA9IHBseXIucHJvZ3Jlc3MuY29udGFpbmVyICYmIHBseXIucHJvZ3Jlc3MuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLmNsYXNzZXMudG9vbHRpcCk7XG5cbiAgICAgICAgICAgICAgICAvLyBWb2x1bWVcbiAgICAgICAgICAgICAgICBwbHlyLnZvbHVtZSAgICAgICAgICAgICAgICAgICA9IHt9O1xuICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmlucHV0ICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy52b2x1bWUuaW5wdXQpO1xuICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmRpc3BsYXkgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy52b2x1bWUuZGlzcGxheSk7XG5cbiAgICAgICAgICAgICAgICAvLyBUaW1pbmdcbiAgICAgICAgICAgICAgICBwbHlyLmR1cmF0aW9uICAgICAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIHBseXIuY3VycmVudFRpbWUgICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgcGx5ci5zZWVrVGltZSAgICAgICAgICAgICAgICAgPSBfZ2V0RWxlbWVudHMoY29uZmlnLnNlbGVjdG9ycy5zZWVrVGltZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICBfd2FybignSXQgbG9va3MgbGlrZSB0aGVyZSBpcyBhIHByb2JsZW0gd2l0aCB5b3VyIGNvbnRyb2xzIEhUTUwnKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgbmF0aXZlIHZpZGVvIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX3RvZ2dsZU5hdGl2ZUNvbnRyb2xzKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG9nZ2xlIHN0eWxlIGhvb2tcbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZVN0eWxlSG9vaygpIHtcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLnNlbGVjdG9ycy5jb250YWluZXIucmVwbGFjZSgnLicsICcnKSwgcGx5ci5zdXBwb3J0ZWQuZnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUb2dnbGUgbmF0aXZlIGNvbnRyb2xzXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVOYXRpdmVDb250cm9scyh0b2dnbGUpIHtcbiAgICAgICAgICAgIGlmICh0b2dnbGUgJiYgX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ2NvbnRyb2xzJywgJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnY29udHJvbHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGFyaWEgYXR0cmlidXRlIGZvciBwbGF5IGFuZCBpZnJhbWUgdGl0bGVcbiAgICAgICAgZnVuY3Rpb24gX3NldFRpdGxlKGlmcmFtZSkge1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgY3VycmVudCB0ZXh0XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBjb25maWcuaTE4bi5wbGF5O1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGEgbWVkaWEgdGl0bGUgc2V0LCB1c2UgdGhhdCBmb3IgdGhlIGxhYmVsXG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhjb25maWcudGl0bGUpICYmIGNvbmZpZy50aXRsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsYWJlbCArPSAnLCAnICsgY29uZmlnLnRpdGxlO1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0IGNvbnRhaW5lciBsYWJlbFxuICAgICAgICAgICAgICAgIHBseXIuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGNvbmZpZy50aXRsZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBwbGF5IGJ1dHRvbiwgc2V0IGxhYmVsXG4gICAgICAgICAgICBpZiAocGx5ci5zdXBwb3J0ZWQuZnVsbCAmJiBwbHlyLmJ1dHRvbnMucGxheSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBwbHlyLmJ1dHRvbnMucGxheS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMucGxheVtpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgaWZyYW1lIHRpdGxlXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xMjRcbiAgICAgICAgICAgIGlmIChfaXMuaHRtbEVsZW1lbnQoaWZyYW1lKSkge1xuICAgICAgICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgY29uZmlnLmkxOG4uZnJhbWVUaXRsZS5yZXBsYWNlKCd7dGl0bGV9JywgY29uZmlnLnRpdGxlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBsb2NhbFN0b3JhZ2VcbiAgICAgICAgZnVuY3Rpb24gX3NldHVwU3RvcmFnZSgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICBwbHlyLnN0b3JhZ2UgPSB7fTtcblxuICAgICAgICAgICAgLy8gQmFpbCBpZiB3ZSBkb24ndCBoYXZlIGxvY2FsU3RvcmFnZSBzdXBwb3J0IG9yIGl0J3MgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmICghX3N0b3JhZ2Uuc3VwcG9ydGVkIHx8ICFjb25maWcuc3RvcmFnZS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBvbGQgdm9sdW1lXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xNzFcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgncGx5ci12b2x1bWUnKTtcblxuICAgICAgICAgICAgLy8gbG9hZCB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGtleVxuICAgICAgICAgICAgdmFsdWUgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oY29uZmlnLnN0b3JhZ2Uua2V5KTtcblxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIEtleSB3YXNuJ3Qgc2V0IChvciBoYWQgYmVlbiBjbGVhcmVkKSwgbW92ZSBhbG9uZ1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL15cXGQrKFxcLlxcZCspPyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdmFsdWUgaXMgYSBudW1iZXIsIGl0J3MgcHJvYmFibHkgdm9sdW1lIGZyb20gYW4gb2xkZXJcbiAgICAgICAgICAgICAgICAvLyB2ZXJzaW9uIG9mIHBseXIuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9wdWxsLzMxM1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUga2V5IHRvIGJlIEpTT05cbiAgICAgICAgICAgICAgICBfdXBkYXRlU3RvcmFnZSh7dm9sdW1lOiBwYXJzZUZsb2F0KHZhbHVlKX0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBBc3N1bWUgaXQncyBKU09OIGZyb20gdGhpcyBvciBhIGxhdGVyIHZlcnNpb24gb2YgcGx5clxuICAgICAgICAgICAgICAgIHBseXIuc3RvcmFnZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2F2ZSBhIHZhbHVlIGJhY2sgdG8gbG9jYWwgc3RvcmFnZVxuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlU3RvcmFnZSh2YWx1ZSkge1xuICAgICAgICAgICAgLy8gQmFpbCBpZiB3ZSBkb24ndCBoYXZlIGxvY2FsU3RvcmFnZSBzdXBwb3J0IG9yIGl0J3MgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmICghX3N0b3JhZ2Uuc3VwcG9ydGVkIHx8ICFjb25maWcuc3RvcmFnZS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHdvcmtpbmcgY29weSBvZiB0aGUgdmFsdWVzXG4gICAgICAgICAgICBfZXh0ZW5kKHBseXIuc3RvcmFnZSwgdmFsdWUpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgc3RvcmFnZVxuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGNvbmZpZy5zdG9yYWdlLmtleSwgSlNPTi5zdHJpbmdpZnkocGx5ci5zdG9yYWdlKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBtZWRpYVxuICAgICAgICBmdW5jdGlvbiBfc2V0dXBNZWRpYSgpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gbWVkaWEsIGJhaWxcbiAgICAgICAgICAgIGlmICghcGx5ci5tZWRpYSkge1xuICAgICAgICAgICAgICAgIF93YXJuKCdObyBtZWRpYSBlbGVtZW50IGZvdW5kIScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgdHlwZSBjbGFzc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMudHlwZS5yZXBsYWNlKCd7MH0nLCBwbHlyLnR5cGUpLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCB2aWRlbyBjbGFzcyBmb3IgZW1iZWRzXG4gICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHJlcXVpcmUgY2hhbmdlcyBpZiBhdWRpbyBlbWJlZHMgYXJlIGFkZGVkXG4gICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnR5cGUucmVwbGFjZSgnezB9JywgJ3ZpZGVvJyksIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gYXV0b3BsYXkgYXR0cmlidXRlLCBhc3N1bWUgdGhlIHZpZGVvIGlzIHN0b3BwZWQgYW5kIGFkZCBzdGF0ZSBjbGFzc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuc3RvcHBlZCwgY29uZmlnLmF1dG9wbGF5KTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCBpT1MgY2xhc3NcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5vbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuaXNJb3MsIHBseXIuYnJvd3Nlci5pc0lvcyk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdG91Y2ggY2xhc3NcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmlzVG91Y2gsIHBseXIuYnJvd3Nlci5pc1RvdWNoKTtcblxuICAgICAgICAgICAgICAgIC8vIEluamVjdCB0aGUgcGxheWVyIHdyYXBwZXJcbiAgICAgICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgd3JhcHBlciBkaXZcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY29uZmlnLmNsYXNzZXMudmlkZW9XcmFwcGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXcmFwIHRoZSB2aWRlbyBpbiBhIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICBfd3JhcChwbHlyLm1lZGlhLCB3cmFwcGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWNoZSB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIHBseXIudmlkZW9Db250YWluZXIgPSB3cmFwcGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW1iZWRzXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmVtYmVkLCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgX3NldHVwRW1iZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIFlvdVR1YmUvVmltZW9cbiAgICAgICAgZnVuY3Rpb24gX3NldHVwRW1iZWQoKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgICAgICAgbWVkaWFJZCxcbiAgICAgICAgICAgICAgICBpZCA9IHBseXIudHlwZSArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAwMCkpO1xuXG4gICAgICAgICAgICAvLyBQYXJzZSBJRHMgZnJvbSBVUkxzIGlmIHN1cHBsaWVkXG4gICAgICAgICAgICBzd2l0Y2ggKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICBtZWRpYUlkID0gX3BhcnNlWW91VHViZUlkKHBseXIuZW1iZWRJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICBtZWRpYUlkID0gX3BhcnNlVmltZW9JZChwbHlyLmVtYmVkSWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhSWQgPSBwbHlyLmVtYmVkSWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBvbGQgY29udGFpbmVyc1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lcnMgPSBfZ2V0RWxlbWVudHMoJ1tpZF49XCInICsgcGx5ci50eXBlICsgJy1cIl0nKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgX3JlbW92ZShjb250YWluZXJzW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWRkIGVtYmVkIGNsYXNzIGZvciByZXNwb25zaXZlXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5tZWRpYSwgY29uZmlnLmNsYXNzZXMudmlkZW9XcmFwcGVyLCB0cnVlKTtcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLm1lZGlhLCBjb25maWcuY2xhc3Nlcy5lbWJlZFdyYXBwZXIsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAneW91dHViZScpIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIFlvdVR1YmUgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0IElEXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXR1cCBBUElcbiAgICAgICAgICAgICAgICBpZiAoX2lzLm9iamVjdCh3aW5kb3cuWVQpKSB7XG4gICAgICAgICAgICAgICAgICAgIF95b3VUdWJlUmVhZHkobWVkaWFJZCwgY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBMb2FkIHRoZSBBUElcbiAgICAgICAgICAgICAgICAgICAgX2luamVjdFNjcmlwdChjb25maWcudXJscy55b3V0dWJlLmFwaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgY2FsbGJhY2sgZm9yIHRoZSBBUElcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9uWW91VHViZVJlYWR5Q2FsbGJhY2tzID0gd2luZG93Lm9uWW91VHViZVJlYWR5Q2FsbGJhY2tzIHx8IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byBxdWV1ZVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25Zb3VUdWJlUmVhZHlDYWxsYmFja3MucHVzaChmdW5jdGlvbigpIHsgX3lvdVR1YmVSZWFkeShtZWRpYUlkLCBjb250YWluZXIpOyB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgY2FsbGJhY2sgdG8gcHJvY2VzcyBxdWV1ZVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25Zb3VUdWJlUmVhZHlDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykgeyBjYWxsYmFjaygpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBseXIudHlwZSA9PT0gJ3ZpbWVvJykge1xuICAgICAgICAgICAgICAgIC8vIFZpbWVvIG5lZWRzIGFuIGV4dHJhIGRpdiB0byBoaWRlIGNvbnRyb2xzIG9uIGRlc2t0b3AgKHdoaWNoIGhhcyBmdWxsIHN1cHBvcnQpXG4gICAgICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHBseXIubWVkaWE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IElEXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBMb2FkIHRoZSBBUEkgaWYgbm90IGFscmVhZHlcbiAgICAgICAgICAgICAgICBpZiAoIV9pcy5vYmplY3Qod2luZG93LlZpbWVvKSkge1xuICAgICAgICAgICAgICAgICAgICBfaW5qZWN0U2NyaXB0KGNvbmZpZy51cmxzLnZpbWVvLmFwaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgZnJhZ2Fsb29wIGxvYWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpbWVvVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzLm9iamVjdCh3aW5kb3cuVmltZW8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodmltZW9UaW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZpbWVvUmVhZHkobWVkaWFJZCwgY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF92aW1lb1JlYWR5KG1lZGlhSWQsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwbHlyLnR5cGUgPT09ICdzb3VuZGNsb3VkJykge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEN1cnJlbnRseSB1bnN1cHBvcnRlZCBhbmQgdW5kb2N1bWVudGVkXG4gICAgICAgICAgICAgICAgLy8gSW5qZWN0IHRoZSBpZnJhbWVcbiAgICAgICAgICAgICAgICB2YXIgc291bmRDbG91ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV2F0Y2ggZm9yIGlmcmFtZSBsb2FkXG4gICAgICAgICAgICAgICAgc291bmRDbG91ZC5sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfb24oc291bmRDbG91ZCwgJ2xvYWQnLCBmdW5jdGlvbigpIHsgc291bmRDbG91ZC5sb2FkZWQgPSB0cnVlOyB9KTtcblxuICAgICAgICAgICAgICAgIF9zZXRBdHRyaWJ1dGVzKHNvdW5kQ2xvdWQsIHtcbiAgICAgICAgICAgICAgICAgICAgJ3NyYyc6ICAnaHR0cHM6Ly93LnNvdW5kY2xvdWQuY29tL3BsYXllci8/dXJsPWh0dHBzOi8vYXBpLnNvdW5kY2xvdWQuY29tL3RyYWNrcy8nICsgbWVkaWFJZCxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogICBpZFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNvdW5kQ2xvdWQpO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIExvYWQgdGhlIEFQSSBpZiBub3QgYWxyZWFkeVxuICAgICAgICAgICAgICAgIGlmICghd2luZG93LlNDKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pbmplY3RTY3JpcHQoY29uZmlnLnVybHMuc291bmRjbG91ZC5hcGkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFdhaXQgZm9yIFNDIGxvYWRcbiAgICAgICAgICAgICAgICB2YXIgc291bmRDbG91ZFRpbWVyID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LlNDICYmIHNvdW5kQ2xvdWQubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChzb3VuZENsb3VkVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NvdW5kY2xvdWRSZWFkeS5jYWxsKHNvdW5kQ2xvdWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2hlbiBlbWJlZHMgYXJlIHJlYWR5XG4gICAgICAgIGZ1bmN0aW9uIF9lbWJlZFJlYWR5KCkge1xuICAgICAgICAgICAgLy8gU2V0dXAgdGhlIFVJIGFuZCBjYWxsIHJlYWR5IGlmIGZ1bGwgc3VwcG9ydFxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICBfc2V0dXBJbnRlcmZhY2UoKTtcbiAgICAgICAgICAgICAgICBfcmVhZHkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRpdGxlXG4gICAgICAgICAgICBfc2V0VGl0bGUoX2dldEVsZW1lbnQoJ2lmcmFtZScpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBZb3VUdWJlIEFQSSByZWFkeVxuICAgICAgICBmdW5jdGlvbiBfeW91VHViZVJlYWR5KHZpZGVvSWQsIGNvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gU2V0dXAgaW5zdGFuY2VcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvaWZyYW1lX2FwaV9yZWZlcmVuY2VcbiAgICAgICAgICAgIHBseXIuZW1iZWQgPSBuZXcgd2luZG93LllULlBsYXllcihjb250YWluZXIuaWQsIHtcbiAgICAgICAgICAgICAgICB2aWRlb0lkOiB2aWRlb0lkLFxuICAgICAgICAgICAgICAgIHBsYXllclZhcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6ICAgICAgIChjb25maWcuYXV0b3BsYXkgPyAxIDogMCksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzOiAgICAgICAocGx5ci5zdXBwb3J0ZWQuZnVsbCA/IDAgOiAxKSxcbiAgICAgICAgICAgICAgICAgICAgcmVsOiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHNob3dpbmZvOiAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICBpdl9sb2FkX3BvbGljeTogMyxcbiAgICAgICAgICAgICAgICAgICAgY2NfbG9hZF9wb2xpY3k6IChjb25maWcuY2FwdGlvbnMuZGVmYXVsdEFjdGl2ZSA/IDEgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgY2NfbGFuZ19wcmVmOiAgICdlbicsXG4gICAgICAgICAgICAgICAgICAgIHdtb2RlOiAgICAgICAgICAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgICAgICAgICBtb2Rlc3RicmFuZGluZzogMSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWtiOiAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbjogICAgICAgICAnKicgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9nZGF0YS1pc3N1ZXMvaXNzdWVzL2RldGFpbD9pZD01Nzg4I2M0NVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICdvbkVycm9yJzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsICdlcnJvcicsIHRydWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAgIGV2ZW50LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWQ6ICBldmVudC50YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnb25SZWFkeSc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGZhdXggSFRNTDUgQVBJIHVzaW5nIHRoZSBZb3VUdWJlIEFQSVxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UucGxheVZpZGVvKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UucGF1c2VWaWRlbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5zdG9wVmlkZW8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5kdXJhdGlvbiA9IGluc3RhbmNlLmdldER1cmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEubXV0ZWQgPSBpbnN0YW5jZS5pc011dGVkKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnRpdGxlID0gaW5zdGFuY2UuZ2V0VmlkZW9EYXRhKCkudGl0bGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgdGFiaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBVSVxuICAgICAgICAgICAgICAgICAgICAgICAgX2VtYmVkUmVhZHkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZHVyYXRpb25jaGFuZ2UnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgdGltZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5idWZmZXJpbmcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXR1cCBidWZmZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVycy5idWZmZXJpbmcgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGxvYWRlZCAlIGZyb20gWW91VHViZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYnVmZmVyZWQgPSBpbnN0YW5jZS5nZXRWaWRlb0xvYWRlZEZyYWN0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHByb2dyZXNzIG9ubHkgd2hlbiB3ZSBhY3R1YWxseSBidWZmZXIgc29tZXRoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIubWVkaWEubGFzdEJ1ZmZlcmVkID09PSBudWxsIHx8IHBseXIubWVkaWEubGFzdEJ1ZmZlcmVkIDwgcGx5ci5tZWRpYS5idWZmZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwcm9ncmVzcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBsYXN0IGJ1ZmZlciBwb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEubGFzdEJ1ZmZlcmVkID0gcGx5ci5tZWRpYS5idWZmZXJlZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhaWwgaWYgd2UncmUgYXQgMTAwJVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLmJ1ZmZlcmVkID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5idWZmZXJpbmcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnb25TdGF0ZUNoYW5nZSc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRpbWVyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcnMucGxheWluZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0xICAgVW5zdGFydGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwICAgIEVuZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAxICAgIFBsYXlpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIgICAgUGF1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAzICAgIEJ1ZmZlcmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNSAgICBWaWRlbyBjdWVkXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZW5kZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2Ugd2VyZSBzZWVraW5nLCBmaXJlIHNlZWtlZCBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5zZWVraW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdzZWVrZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2Vla2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXlpbmcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQb2xsIHRvIGdldCBwbGF5YmFjayBwcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lcnMucGxheWluZyA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gaW5zdGFuY2UuZ2V0Q3VycmVudFRpbWUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZHVyYXRpb24gYWdhaW4gZHVlIHRvIFlvdVR1YmUgYnVnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzM3NFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2dkYXRhLWlzc3Vlcy9pc3N1ZXMvZGV0YWlsP2lkPTg2OTBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIubWVkaWEuZHVyYXRpb24gIT09IGluc3RhbmNlLmdldER1cmF0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuZHVyYXRpb24gPSBpbnN0YW5jZS5nZXREdXJhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZHVyYXRpb25jaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BhdXNlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIuY29udGFpbmVyLCAnc3RhdGVjaGFuZ2UnLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGV2ZW50LmRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWaW1lbyByZWFkeVxuICAgICAgICBmdW5jdGlvbiBfdmltZW9SZWFkeShtZWRpYUlkLCBjb250YWluZXIpIHtcbiAgICAgICAgICAgIC8vIFNldHVwIGluc3RhbmNlXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdmltZW8vcGxheWVyLmpzXG4gICAgICAgICAgICBwbHlyLmVtYmVkID0gbmV3IHdpbmRvdy5WaW1lby5QbGF5ZXIoY29udGFpbmVyLCB7XG4gICAgICAgICAgICAgICAgaWQ6ICAgICAgICAgcGFyc2VJbnQobWVkaWFJZCksXG4gICAgICAgICAgICAgICAgbG9vcDogICAgICAgY29uZmlnLmxvb3AsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6ICAgY29uZmlnLmF1dG9wbGF5LFxuICAgICAgICAgICAgICAgIGJ5bGluZTogICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHBvcnRyYWl0OiAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAgICAgIGZhbHNlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgZmF1eCBIVE1MNSBBUEkgdXNpbmcgdGhlIFZpbWVvIEFQSVxuICAgICAgICAgICAgcGx5ci5tZWRpYS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wbGF5KCk7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwbHlyLm1lZGlhLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnN0b3AoKTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gMDtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIFVJXG4gICAgICAgICAgICBfZW1iZWRSZWFkeSgpO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLmdldEN1cnJlbnRUaW1lKCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLmdldER1cmF0aW9uKCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuZHVyYXRpb24gPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2R1cmF0aW9uY2hhbmdlJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVE9ETzogQ2FwdGlvbnNcbiAgICAgICAgICAgIC8qaWYgKGNvbmZpZy5jYXB0aW9ucy5kZWZhdWx0QWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5lbmFibGVUZXh0VHJhY2soJ2VuJyk7XG4gICAgICAgICAgICB9Ki9cblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbignbG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gRml4IGtleWJvYXJkIGZvY3VzIGlzc3Vlc1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzMxN1xuICAgICAgICAgICAgICAgIGlmIChfaXMuaHRtbEVsZW1lbnQocGx5ci5lbWJlZC5lbGVtZW50KSAmJiBwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ3BsYXknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXknKTtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5aW5nJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbigncGF1c2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGF1c2UnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLm9uKCd0aW1ldXBkYXRlJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2Vla2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSBkYXRhLnNlY29uZHM7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndGltZXVwZGF0ZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ3Byb2dyZXNzJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYnVmZmVyZWQgPSBkYXRhLnBlcmNlbnQ7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncHJvZ3Jlc3MnKTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChkYXRhLnBlcmNlbnQpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbignc2Vla2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnc2Vla2VkJyk7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ2VuZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2VuZGVkJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvdW5kY2xvdWQgcmVhZHlcbiAgICAgICAgZnVuY3Rpb24gX3NvdW5kY2xvdWRSZWFkeSgpIHtcbiAgICAgICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgICAgIHBseXIuZW1iZWQgPSB3aW5kb3cuU0MuV2lkZ2V0KHRoaXMpO1xuXG4gICAgICAgICAgICAvLyBTZXR1cCBvbiByZWFkeVxuICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLlJFQURZLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBmYXV4IEhUTUw1IEFQSSB1c2luZyB0aGUgU291bmRjbG91ZCBBUElcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQucGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2Vla1RvKDApO1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSAwO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5nZXREdXJhdGlvbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmR1cmF0aW9uID0gdmFsdWUvMTAwMDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgVUlcbiAgICAgICAgICAgICAgICAgICAgX2VtYmVkUmVhZHkoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZ2V0UG9zaXRpb24oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmJpbmQod2luZG93LlNDLldpZGdldC5FdmVudHMuUExBWSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXknKTtcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheWluZycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLlBBVVNFLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwYXVzZScpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLlBMQVlfUFJPR1JFU1MsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSBkYXRhLmN1cnJlbnRQb3NpdGlvbi8xMDAwO1xuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmJpbmQod2luZG93LlNDLldpZGdldC5FdmVudHMuTE9BRF9QUk9HUkVTUywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmJ1ZmZlcmVkID0gZGF0YS5sb2FkUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3Byb2dyZXNzJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGRhdGEubG9hZFByb2dyZXNzKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLkZJTklTSCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZW5kZWQnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGxheSBtZWRpYVxuICAgICAgICBmdW5jdGlvbiBfcGxheSgpIHtcbiAgICAgICAgICAgIGlmICgncGxheScgaW4gcGx5ci5tZWRpYSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGF1c2UgbWVkaWFcbiAgICAgICAgZnVuY3Rpb24gX3BhdXNlKCkge1xuICAgICAgICAgICAgaWYgKCdwYXVzZScgaW4gcGx5ci5tZWRpYSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBwbGF5YmFja1xuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlUGxheSh0b2dnbGUpIHtcbiAgICAgICAgICAgIC8vIFRydWUgdG9nZ2xlXG4gICAgICAgICAgICBpZiAoIV9pcy5ib29sZWFuKHRvZ2dsZSkpIHtcbiAgICAgICAgICAgICAgICB0b2dnbGUgPSBwbHlyLm1lZGlhLnBhdXNlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRvZ2dsZSkge1xuICAgICAgICAgICAgICAgIF9wbGF5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9wYXVzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdG9nZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV3aW5kXG4gICAgICAgIGZ1bmN0aW9uIF9yZXdpbmQoc2Vla1RpbWUpIHtcbiAgICAgICAgICAgIC8vIFVzZSBkZWZhdWx0IGlmIG5lZWRlZFxuICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKHNlZWtUaW1lKSkge1xuICAgICAgICAgICAgICAgIHNlZWtUaW1lID0gY29uZmlnLnNlZWtUaW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3NlZWsocGx5ci5tZWRpYS5jdXJyZW50VGltZSAtIHNlZWtUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZhc3QgZm9yd2FyZFxuICAgICAgICBmdW5jdGlvbiBfZm9yd2FyZChzZWVrVGltZSkge1xuICAgICAgICAgICAgLy8gVXNlIGRlZmF1bHQgaWYgbmVlZGVkXG4gICAgICAgICAgICBpZiAoIV9pcy5udW1iZXIoc2Vla1RpbWUpKSB7XG4gICAgICAgICAgICAgICAgc2Vla1RpbWUgPSBjb25maWcuc2Vla1RpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfc2VlayhwbHlyLm1lZGlhLmN1cnJlbnRUaW1lICsgc2Vla1RpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VlayB0byB0aW1lXG4gICAgICAgIC8vIFRoZSBpbnB1dCBwYXJhbWV0ZXIgY2FuIGJlIGFuIGV2ZW50IG9yIGEgbnVtYmVyXG4gICAgICAgIGZ1bmN0aW9uIF9zZWVrKGlucHV0KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0VGltZSAgPSAwLFxuICAgICAgICAgICAgICAgIHBhdXNlZCAgICAgID0gcGx5ci5tZWRpYS5wYXVzZWQsXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gICAgPSBfZ2V0RHVyYXRpb24oKTtcblxuICAgICAgICAgICAgaWYgKF9pcy5udW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0VGltZSA9IGlucHV0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfaXMub2JqZWN0KGlucHV0KSAmJiBfaW5BcnJheShbJ2lucHV0JywgJ2NoYW5nZSddLCBpbnB1dC50eXBlKSkge1xuICAgICAgICAgICAgICAgIC8vIEl0J3MgdGhlIHNlZWsgc2xpZGVyXG4gICAgICAgICAgICAgICAgLy8gU2VlayB0byB0aGUgc2VsZWN0ZWQgdGltZVxuICAgICAgICAgICAgICAgIHRhcmdldFRpbWUgPSAoKGlucHV0LnRhcmdldC52YWx1ZSAvIGlucHV0LnRhcmdldC5tYXgpICogZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3JtYWxpc2UgdGFyZ2V0VGltZVxuICAgICAgICAgICAgaWYgKHRhcmdldFRpbWUgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0VGltZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFRpbWUgPiBkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRhcmdldFRpbWUgPSBkdXJhdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHNlZWsgcmFuZ2UgYW5kIHByb2dyZXNzXG4gICAgICAgICAgICBfdXBkYXRlU2Vla0Rpc3BsYXkodGFyZ2V0VGltZSk7XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgICAgICAvLyBUcnkvY2F0Y2ggaW5jYXNlIHRoZSBtZWRpYSBpc24ndCBzZXQgYW5kIHdlJ3JlIGNhbGxpbmcgc2VlaygpIGZyb20gc291cmNlKCkgYW5kIElFIG1vYW5zXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSB0YXJnZXRUaW1lLnRvRml4ZWQoNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaChlKSB7fVxuXG4gICAgICAgICAgICAvLyBFbWJlZHNcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZWVrVG8odGFyZ2V0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSb3VuZCB0byBuZWFyZXN0IHNlY29uZCBmb3IgdmltZW9cbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2V0Q3VycmVudFRpbWUodGFyZ2V0VGltZS50b0ZpeGVkKDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZWVrVG8odGFyZ2V0VGltZSAqIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICBfcGF1c2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRpbWV1cGRhdGVcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgc2Vla2luZyBmbGFnXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgc2Vla2luZ1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3NlZWtpbmcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9nZ2luZ1xuICAgICAgICAgICAgX2xvZygnU2Vla2luZyB0byAnICsgcGx5ci5tZWRpYS5jdXJyZW50VGltZSArICcgc2Vjb25kcycpO1xuXG4gICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciAnbWFudWFsJyBjYXB0aW9uc1xuICAgICAgICAgICAgX3NlZWtNYW51YWxDYXB0aW9ucyh0YXJnZXRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCB0aGUgZHVyYXRpb24gKG9yIGN1c3RvbSBpZiBzZXQpXG4gICAgICAgIGZ1bmN0aW9uIF9nZXREdXJhdGlvbigpIHtcbiAgICAgICAgICAgIC8vIEl0IHNob3VsZCBiZSBhIG51bWJlciwgYnV0IHBhcnNlIGl0IGp1c3QgaW5jYXNlXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBwYXJzZUludChjb25maWcuZHVyYXRpb24pLFxuXG4gICAgICAgICAgICAvLyBUcnVlIGR1cmF0aW9uXG4gICAgICAgICAgICBtZWRpYUR1cmF0aW9uID0gMDtcblxuICAgICAgICAgICAgLy8gT25seSBpZiBkdXJhdGlvbiBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLmR1cmF0aW9uICE9PSBudWxsICYmICFpc05hTihwbHlyLm1lZGlhLmR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIG1lZGlhRHVyYXRpb24gPSBwbHlyLm1lZGlhLmR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBjdXN0b20gZHVyYXRpb24gaXMgZnVua3ksIHVzZSByZWd1bGFyIGR1cmF0aW9uXG4gICAgICAgICAgICByZXR1cm4gKGlzTmFOKGR1cmF0aW9uKSA/IG1lZGlhRHVyYXRpb24gOiBkdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBwbGF5aW5nIHN0YXRlXG4gICAgICAgIGZ1bmN0aW9uIF9jaGVja1BsYXlpbmcoKSB7XG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnBsYXlpbmcsICFwbHlyLm1lZGlhLnBhdXNlZCk7XG5cbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuc3RvcHBlZCwgcGx5ci5tZWRpYS5wYXVzZWQpO1xuXG4gICAgICAgICAgICBfdG9nZ2xlQ29udHJvbHMocGx5ci5tZWRpYS5wYXVzZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2F2ZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgZnVuY3Rpb24gX3NhdmVTY3JvbGxQb3NpdGlvbigpIHtcbiAgICAgICAgICAgIHNjcm9sbCA9IHtcbiAgICAgICAgICAgICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQgfHwgMCxcbiAgICAgICAgICAgICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICAgIGZ1bmN0aW9uIF9yZXN0b3JlU2Nyb2xsUG9zaXRpb24oKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oc2Nyb2xsLngsIHNjcm9sbC55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBmdWxsc2NyZWVuXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVGdWxsc2NyZWVuKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgbmF0aXZlIHN1cHBvcnRcbiAgICAgICAgICAgIHZhciBuYXRpdmVTdXBwb3J0ID0gZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW47XG5cbiAgICAgICAgICAgIGlmIChuYXRpdmVTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQncyBhIGZ1bGxzY3JlZW4gY2hhbmdlIGV2ZW50LCB1cGRhdGUgdGhlIFVJXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09IGZ1bGxzY3JlZW4uZnVsbFNjcmVlbkV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmlzRnVsbHNjcmVlbiA9IGZ1bGxzY3JlZW4uaXNGdWxsU2NyZWVuKHBseXIuY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBFbHNlIGl0J3MgYSB1c2VyIHJlcXVlc3QgdG8gZW50ZXIgb3IgZXhpdFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZ1bGxzY3JlZW4uaXNGdWxsU2NyZWVuKHBseXIuY29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F2ZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIF9zYXZlU2Nyb2xsUG9zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVxdWVzdCBmdWxsIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5yZXF1ZXN0RnVsbFNjcmVlbihwbHlyLmNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIGZyb20gZnVsbHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5jYW5jZWxGdWxsU2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSBmdWxsIHNjcmVlbiAoaXQgY291bGQgZmFpbClcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5pc0Z1bGxzY3JlZW4gPSBmdWxsc2NyZWVuLmlzRnVsbFNjcmVlbihwbHlyLmNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdCdzIGEgc2ltcGxlIHRvZ2dsZVxuICAgICAgICAgICAgICAgIHBseXIuaXNGdWxsc2NyZWVuID0gIXBseXIuaXNGdWxsc2NyZWVuO1xuXG4gICAgICAgICAgICAgICAgLy8gQmluZC91bmJpbmQgZXNjYXBlIGtleVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBwbHlyLmlzRnVsbHNjcmVlbiA/ICdoaWRkZW4nIDogJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBjbGFzcyBob29rXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmZ1bGxzY3JlZW4uYWN0aXZlLCBwbHlyLmlzRnVsbHNjcmVlbik7XG5cbiAgICAgICAgICAgIC8vIFRyYXAgZm9jdXNcbiAgICAgICAgICAgIF9mb2N1c1RyYXAocGx5ci5pc0Z1bGxzY3JlZW4pO1xuXG4gICAgICAgICAgICAvLyBTZXQgYnV0dG9uIHN0YXRlXG4gICAgICAgICAgICBpZiAocGx5ci5idXR0b25zICYmIHBseXIuYnV0dG9ucy5mdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZVN0YXRlKHBseXIuYnV0dG9ucy5mdWxsc2NyZWVuLCBwbHlyLmlzRnVsbHNjcmVlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYW4gZXZlbnRcbiAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsIHBseXIuaXNGdWxsc2NyZWVuID8gJ2VudGVyZnVsbHNjcmVlbicgOiAnZXhpdGZ1bGxzY3JlZW4nLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gUmVzdG9yZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgICAgIGlmICghcGx5ci5pc0Z1bGxzY3JlZW4gJiYgbmF0aXZlU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgIF9yZXN0b3JlU2Nyb2xsUG9zaXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE11dGVcbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZU11dGUobXV0ZWQpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBtZXRob2QgaXMgY2FsbGVkIHdpdGhvdXQgcGFyYW1ldGVyLCB0b2dnbGUgYmFzZWQgb24gY3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgaWYgKCFfaXMuYm9vbGVhbihtdXRlZCkpIHtcbiAgICAgICAgICAgICAgICBtdXRlZCA9ICFwbHlyLm1lZGlhLm11dGVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgYnV0dG9uIHN0YXRlXG4gICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLm11dGUsIG11dGVkKTtcblxuICAgICAgICAgICAgLy8gU2V0IG11dGUgb24gdGhlIHBsYXllclxuICAgICAgICAgICAgcGx5ci5tZWRpYS5tdXRlZCA9IG11dGVkO1xuXG4gICAgICAgICAgICAvLyBJZiB2b2x1bWUgaXMgMCBhZnRlciB1bm11dGluZywgc2V0IHRvIGRlZmF1bHRcbiAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnZvbHVtZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIF9zZXRWb2x1bWUoY29uZmlnLnZvbHVtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVtYmVkc1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgIC8vIFlvdVR1YmVcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZFtwbHlyLm1lZGlhLm11dGVkID8gJ211dGUnIDogJ3VuTXV0ZSddKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZXRWb2x1bWUocGx5ci5tZWRpYS5tdXRlZCA/IDAgOiBwYXJzZUZsb2F0KGNvbmZpZy52b2x1bWUgLyBjb25maWcudm9sdW1lTWF4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHZvbHVtZWNoYW5nZSBmb3IgZW1iZWRzXG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndm9sdW1lY2hhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdm9sdW1lXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRWb2x1bWUodm9sdW1lKSB7XG4gICAgICAgICAgICB2YXIgbWF4ID0gY29uZmlnLnZvbHVtZU1heCxcbiAgICAgICAgICAgICAgICBtaW4gPSBjb25maWcudm9sdW1lTWluO1xuXG4gICAgICAgICAgICAvLyBMb2FkIHZvbHVtZSBmcm9tIHN0b3JhZ2UgaWYgbm8gdmFsdWUgc3BlY2lmaWVkXG4gICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZCh2b2x1bWUpKSB7XG4gICAgICAgICAgICAgICAgdm9sdW1lID0gcGx5ci5zdG9yYWdlLnZvbHVtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIGNvbmZpZyBpZiBhbGwgZWxzZSBmYWlsc1xuICAgICAgICAgICAgaWYgKHZvbHVtZSA9PT0gbnVsbCB8fCBpc05hTih2b2x1bWUpKSB7XG4gICAgICAgICAgICAgICAgdm9sdW1lID0gY29uZmlnLnZvbHVtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWF4aW11bSBpcyB2b2x1bWVNYXhcbiAgICAgICAgICAgIGlmICh2b2x1bWUgPiBtYXgpIHtcbiAgICAgICAgICAgICAgICB2b2x1bWUgPSBtYXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNaW5pbXVtIGlzIHZvbHVtZU1pblxuICAgICAgICAgICAgaWYgKHZvbHVtZSA8IG1pbikge1xuICAgICAgICAgICAgICAgIHZvbHVtZSA9IG1pbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBwbGF5ZXIgdm9sdW1lXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnZvbHVtZSA9IHBhcnNlRmxvYXQodm9sdW1lIC8gbWF4KTtcblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBkaXNwbGF5XG4gICAgICAgICAgICBpZiAocGx5ci52b2x1bWUuZGlzcGxheSkge1xuICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmRpc3BsYXkudmFsdWUgPSB2b2x1bWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVtYmVkc1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaChwbHlyLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnNldFZvbHVtZShwbHlyLm1lZGlhLnZvbHVtZSAqIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZXRWb2x1bWUocGx5ci5tZWRpYS52b2x1bWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB2b2x1bWVjaGFuZ2UgZm9yIGVtYmVkc1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3ZvbHVtZWNoYW5nZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUb2dnbGUgbXV0ZWQgc3RhdGVcbiAgICAgICAgICAgIGlmICh2b2x1bWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLm11dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGx5ci5tZWRpYS5tdXRlZCAmJiB2b2x1bWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZU11dGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluY3JlYXNlIHZvbHVtZVxuICAgICAgICBmdW5jdGlvbiBfaW5jcmVhc2VWb2x1bWUoc3RlcCkge1xuICAgICAgICAgICAgdmFyIHZvbHVtZSA9IHBseXIubWVkaWEubXV0ZWQgPyAwIDogKHBseXIubWVkaWEudm9sdW1lICogY29uZmlnLnZvbHVtZU1heCk7XG5cbiAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihzdGVwKSkge1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBjb25maWcudm9sdW1lU3RlcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3NldFZvbHVtZSh2b2x1bWUgKyBzdGVwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlY3JlYXNlIHZvbHVtZVxuICAgICAgICBmdW5jdGlvbiBfZGVjcmVhc2VWb2x1bWUoc3RlcCkge1xuICAgICAgICAgICAgdmFyIHZvbHVtZSA9IHBseXIubWVkaWEubXV0ZWQgPyAwIDogKHBseXIubWVkaWEudm9sdW1lICogY29uZmlnLnZvbHVtZU1heCk7XG5cbiAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihzdGVwKSkge1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBjb25maWcudm9sdW1lU3RlcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3NldFZvbHVtZSh2b2x1bWUgLSBzdGVwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB2b2x1bWUgVUkgYW5kIHN0b3JhZ2VcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVZvbHVtZSgpIHtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCB2b2x1bWVcbiAgICAgICAgICAgIHZhciB2b2x1bWUgPSBwbHlyLm1lZGlhLm11dGVkID8gMCA6IChwbHlyLm1lZGlhLnZvbHVtZSAqIGNvbmZpZy52b2x1bWVNYXgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIDxpbnB1dCB0eXBlPVwicmFuZ2VcIj4gaWYgcHJlc2VudFxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAocGx5ci52b2x1bWUuaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci52b2x1bWUuaW5wdXQudmFsdWUgPSB2b2x1bWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnZvbHVtZS5kaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmRpc3BsYXkudmFsdWUgPSB2b2x1bWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHZvbHVtZSBpbiBzdG9yYWdlXG4gICAgICAgICAgICBfdXBkYXRlU3RvcmFnZSh7dm9sdW1lOiB2b2x1bWV9KTtcblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGNsYXNzIGlmIG11dGVkXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLm11dGVkLCAodm9sdW1lID09PSAwKSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBjaGVja2JveCBmb3IgbXV0ZSBzdGF0ZVxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwgJiYgcGx5ci5idXR0b25zLm11dGUpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLm11dGUsICh2b2x1bWUgPT09IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBjYXB0aW9uc1xuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlQ2FwdGlvbnMoc2hvdykge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBmdWxsIHN1cHBvcnQsIG9yIHRoZXJlJ3Mgbm8gY2FwdGlvbiB0b2dnbGVcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCB8fCAhcGx5ci5idXR0b25zLmNhcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbWV0aG9kIGlzIGNhbGxlZCB3aXRob3V0IHBhcmFtZXRlciwgdG9nZ2xlIGJhc2VkIG9uIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4oc2hvdykpIHtcbiAgICAgICAgICAgICAgICBzaG93ID0gKHBseXIuY29udGFpbmVyLmNsYXNzTmFtZS5pbmRleE9mKGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmFjdGl2ZSkgPT09IC0xKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IGdsb2JhbFxuICAgICAgICAgICAgcGx5ci5jYXB0aW9uc0VuYWJsZWQgPSBzaG93O1xuXG4gICAgICAgICAgICAvLyBUb2dnbGUgc3RhdGVcbiAgICAgICAgICAgIF90b2dnbGVTdGF0ZShwbHlyLmJ1dHRvbnMuY2FwdGlvbnMsIHBseXIuY2FwdGlvbnNFbmFibGVkKTtcblxuICAgICAgICAgICAgLy8gQWRkIGNsYXNzIGhvb2tcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuY2FwdGlvbnMuYWN0aXZlLCBwbHlyLmNhcHRpb25zRW5hYmxlZCk7XG5cbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYW4gZXZlbnRcbiAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsIHBseXIuY2FwdGlvbnNFbmFibGVkID8gJ2NhcHRpb25zZW5hYmxlZCcgOiAnY2FwdGlvbnNkaXNhYmxlZCcsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBTYXZlIGNhcHRpb25zIHN0YXRlIHRvIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgX3VwZGF0ZVN0b3JhZ2Uoe2NhcHRpb25zRW5hYmxlZDogcGx5ci5jYXB0aW9uc0VuYWJsZWR9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIG1lZGlhIGlzIGxvYWRpbmdcbiAgICAgICAgZnVuY3Rpb24gX2NoZWNrTG9hZGluZyhldmVudCkge1xuICAgICAgICAgICAgdmFyIGxvYWRpbmcgPSAoZXZlbnQudHlwZSA9PT0gJ3dhaXRpbmcnKTtcblxuICAgICAgICAgICAgLy8gQ2xlYXIgdGltZXJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcnMubG9hZGluZyk7XG5cbiAgICAgICAgICAgIC8vIFRpbWVyIHRvIHByZXZlbnQgZmxpY2tlciB3aGVuIHNlZWtpbmdcbiAgICAgICAgICAgIHRpbWVycy5sb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBUb2dnbGUgY29udGFpbmVyIGNsYXNzIGhvb2tcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmxvYWRpbmcsIGxvYWRpbmcpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2hvdyBjb250cm9scyBpZiBsb2FkaW5nLCBoaWRlIGlmIGRvbmVcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ29udHJvbHMobG9hZGluZyk7XG4gICAgICAgICAgICB9LCAobG9hZGluZyA/IDI1MCA6IDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSA8cHJvZ3Jlc3M+IGVsZW1lbnRzXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVQcm9ncmVzcyhldmVudCkge1xuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgICAgPSBwbHlyLnByb2dyZXNzLnBsYXllZCxcbiAgICAgICAgICAgICAgICB2YWx1ZSAgICAgICA9IDAsXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gICAgPSBfZ2V0RHVyYXRpb24oKTtcblxuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFZpZGVvIHBsYXlpbmdcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGltZXVwZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NlZWtpbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIuY29udHJvbHMucHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBfZ2V0UGVyY2VudGFnZShwbHlyLm1lZGlhLmN1cnJlbnRUaW1lLCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBzZWVrIHJhbmdlIHZhbHVlIG9ubHkgaWYgaXQncyBhICduYXR1cmFsJyB0aW1lIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RpbWV1cGRhdGUnICYmIHBseXIuYnV0dG9ucy5zZWVrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnNlZWsudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgYnVmZmVyIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwbGF5aW5nJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJvZ3Jlc3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MgICAgPSBwbHlyLnByb2dyZXNzLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICAgICAgID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZCA9IHBseXIubWVkaWEuYnVmZmVyZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyZWQgJiYgYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhUTUw1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0UGVyY2VudGFnZShidWZmZXJlZC5lbmQoMCksIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF9pcy5udW1iZXIoYnVmZmVyZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFlvdVR1YmUgcmV0dXJucyBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChidWZmZXJlZCAqIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB2YWx1ZXNcbiAgICAgICAgICAgIF9zZXRQcm9ncmVzcyhwcm9ncmVzcywgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IDxwcm9ncmVzcz4gdmFsdWVcbiAgICAgICAgZnVuY3Rpb24gX3NldFByb2dyZXNzKHByb2dyZXNzLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIDBcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gYnVmZmVyIG9yIGJhaWxcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKHByb2dyZXNzKSkge1xuICAgICAgICAgICAgICAgIGlmIChwbHlyLnByb2dyZXNzICYmIHBseXIucHJvZ3Jlc3MuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gcGx5ci5wcm9ncmVzcy5idWZmZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT25lIHByb2dyZXNzIGVsZW1lbnQgcGFzc2VkXG4gICAgICAgICAgICBpZiAoX2lzLmh0bWxFbGVtZW50KHByb2dyZXNzKSkge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgLy8gT2JqZWN0IG9mIHByb2dyZXNzICsgdGV4dCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzLmJhcikge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcy5iYXIudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzLnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MudGV4dC5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgdGhlIGRpc3BsYXllZCB0aW1lXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVUaW1lRGlzcGxheSh0aW1lLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBCYWlsIGlmIHRoZXJlJ3Mgbm8gZHVyYXRpb24gZGlzcGxheVxuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGYWxsYmFjayB0byAwXG4gICAgICAgICAgICBpZiAoaXNOYU4odGltZSkpIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGx5ci5zZWNzID0gcGFyc2VJbnQodGltZSAlIDYwKTtcbiAgICAgICAgICAgIHBseXIubWlucyA9IHBhcnNlSW50KCh0aW1lIC8gNjApICUgNjApO1xuICAgICAgICAgICAgcGx5ci5ob3VycyA9IHBhcnNlSW50KCgodGltZSAvIDYwKSAvIDYwKSAlIDYwKTtcblxuICAgICAgICAgICAgLy8gRG8gd2UgbmVlZCB0byBkaXNwbGF5IGhvdXJzP1xuICAgICAgICAgICAgdmFyIGRpc3BsYXlIb3VycyA9IChwYXJzZUludCgoKF9nZXREdXJhdGlvbigpIC8gNjApIC8gNjApICUgNjApID4gMCk7XG5cbiAgICAgICAgICAgIC8vIEVuc3VyZSBpdCdzIHR3byBkaWdpdHMuIEZvciBleGFtcGxlLCAwMyByYXRoZXIgdGhhbiAzLlxuICAgICAgICAgICAgcGx5ci5zZWNzID0gKCcwJyArIHBseXIuc2Vjcykuc2xpY2UoLTIpO1xuICAgICAgICAgICAgcGx5ci5taW5zID0gKCcwJyArIHBseXIubWlucykuc2xpY2UoLTIpO1xuXG4gICAgICAgICAgICAvLyBSZW5kZXJcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gKGRpc3BsYXlIb3VycyA/IHBseXIuaG91cnMgKyAnOicgOiAnJykgKyBwbHlyLm1pbnMgKyAnOicgKyBwbHlyLnNlY3M7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IHRoZSBkdXJhdGlvbiBvbiBtZXRhZGF0YWxvYWRlZFxuICAgICAgICBmdW5jdGlvbiBfZGlzcGxheUR1cmF0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgZHVyYXRpb25cbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IF9nZXREdXJhdGlvbigpIHx8IDA7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgb25seSBvbmUgdGltZSBkaXNwbGF5LCBkaXNwbGF5IGR1cmF0aW9uIHRoZXJlXG4gICAgICAgICAgICBpZiAoIXBseXIuZHVyYXRpb24gJiYgY29uZmlnLmRpc3BsYXlEdXJhdGlvbiAmJiBwbHlyLm1lZGlhLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgIF91cGRhdGVUaW1lRGlzcGxheShkdXJhdGlvbiwgcGx5ci5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBkdXJhdGlvbiBlbGVtZW50LCB1cGRhdGUgY29udGVudFxuICAgICAgICAgICAgaWYgKHBseXIuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBfdXBkYXRlVGltZURpc3BsYXkoZHVyYXRpb24sIHBseXIuZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHRvb2x0aXAgKGlmIHZpc2libGUpXG4gICAgICAgICAgICBfdXBkYXRlU2Vla1Rvb2x0aXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSB0aW1lIGNoYW5nZSBldmVudFxuICAgICAgICBmdW5jdGlvbiBfdGltZVVwZGF0ZShldmVudCkge1xuICAgICAgICAgICAgLy8gRHVyYXRpb25cbiAgICAgICAgICAgIF91cGRhdGVUaW1lRGlzcGxheShwbHlyLm1lZGlhLmN1cnJlbnRUaW1lLCBwbHlyLmN1cnJlbnRUaW1lKTtcblxuICAgICAgICAgICAgLy8gSWdub3JlIHVwZGF0ZXMgd2hpbGUgc2Vla2luZ1xuICAgICAgICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICd0aW1ldXBkYXRlJyAmJiBwbHlyLm1lZGlhLnNlZWtpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFBsYXlpbmcgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF91cGRhdGVQcm9ncmVzcyhldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgc2VlayByYW5nZSBhbmQgcHJvZ3Jlc3NcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVNlZWtEaXNwbGF5KHRpbWUpIHtcbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gMFxuICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKHRpbWUpKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiAgICA9IF9nZXREdXJhdGlvbigpLFxuICAgICAgICAgICAgICAgIHZhbHVlICAgICAgID0gX2dldFBlcmNlbnRhZ2UodGltZSwgZHVyYXRpb24pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgICAgICAgICAgIGlmIChwbHlyLnByb2dyZXNzICYmIHBseXIucHJvZ3Jlc3MucGxheWVkKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5wbGF5ZWQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHNlZWsgcmFuZ2UgaW5wdXRcbiAgICAgICAgICAgIGlmIChwbHlyLmJ1dHRvbnMgJiYgcGx5ci5idXR0b25zLnNlZWspIHtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuc2Vlay52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGhvdmVyIHRvb2x0aXAgZm9yIHNlZWtpbmdcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVNlZWtUb29sdGlwKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBfZ2V0RHVyYXRpb24oKTtcblxuICAgICAgICAgICAgLy8gQmFpbCBpZiBzZXR0aW5nIG5vdCB0cnVlXG4gICAgICAgICAgICBpZiAoIWNvbmZpZy50b29sdGlwcy5zZWVrIHx8ICFwbHlyLnByb2dyZXNzLmNvbnRhaW5lciB8fCBkdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBlcmNlbnRhZ2VcbiAgICAgICAgICAgIHZhciBjbGllbnRSZWN0ICA9IHBseXIucHJvZ3Jlc3MuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICAgIHBlcmNlbnQgICAgID0gMCxcbiAgICAgICAgICAgICAgICB2aXNpYmxlICAgICA9IGNvbmZpZy5jbGFzc2VzLnRvb2x0aXAgKyAnLS12aXNpYmxlJztcblxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHBlcmNlbnRhZ2UsIGlmIGFscmVhZHkgdmlzaWJsZVxuICAgICAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfaGFzQ2xhc3MocGx5ci5wcm9ncmVzcy50b29sdGlwLCB2aXNpYmxlKSkge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gcGx5ci5wcm9ncmVzcy50b29sdGlwLnN0eWxlLmxlZnQucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gKCgxMDAgLyBjbGllbnRSZWN0LndpZHRoKSAqIChldmVudC5wYWdlWCAtIGNsaWVudFJlY3QubGVmdCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgYm91bmRzXG4gICAgICAgICAgICBpZiAocGVyY2VudCA8IDApIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGVyY2VudCA+IDEwMCkge1xuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAxMDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERpc3BsYXkgdGhlIHRpbWUgYSBjbGljayB3b3VsZCBzZWVrIHRvXG4gICAgICAgICAgICBfdXBkYXRlVGltZURpc3BsYXkoKChkdXJhdGlvbiAvIDEwMCkgKiBwZXJjZW50KSwgcGx5ci5wcm9ncmVzcy50b29sdGlwKTtcblxuICAgICAgICAgICAgLy8gU2V0IHBvc2l0aW9uXG4gICAgICAgICAgICBwbHlyLnByb2dyZXNzLnRvb2x0aXAuc3R5bGUubGVmdCA9IHBlcmNlbnQgKyBcIiVcIjtcblxuICAgICAgICAgICAgLy8gU2hvdy9oaWRlIHRoZSB0b29sdGlwXG4gICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgaXMgYSBtb3VlcyBpbi9vdXQgYW5kIHBlcmNlbnRhZ2UgaXMgaW5zaWRlIGJvdW5kc1xuICAgICAgICAgICAgaWYgKGV2ZW50ICYmIF9pbkFycmF5KFsnbW91c2VlbnRlcicsICdtb3VzZWxlYXZlJ10sIGV2ZW50LnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIucHJvZ3Jlc3MudG9vbHRpcCwgdmlzaWJsZSwgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hvdyB0aGUgcGxheWVyIGNvbnRyb2xzIGluIGZ1bGxzY3JlZW4gbW9kZVxuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlQ29udHJvbHModG9nZ2xlKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBoaWRlIGlmIGNvbmZpZyBzYXlzIG5vdCB0bywgaXQncyBhdWRpbywgb3Igbm90IHJlYWR5IG9yIGxvYWRpbmdcbiAgICAgICAgICAgIGlmICghY29uZmlnLmhpZGVDb250cm9scyB8fCBwbHlyLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkZWxheSA9IDAsXG4gICAgICAgICAgICAgICAgaXNFbnRlckZ1bGxzY3JlZW4gPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93ID0gdG9nZ2xlLFxuICAgICAgICAgICAgICAgIGxvYWRpbmcgPSBfaGFzQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmxvYWRpbmcpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGZhbHNlIGlmIG5vIGJvb2xlYW5cbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4odG9nZ2xlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0b2dnbGUgJiYgdG9nZ2xlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXMgdGhlIGVudGVyIGZ1bGxzY3JlZW4gZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaXNFbnRlckZ1bGxzY3JlZW4gPSAodG9nZ2xlLnR5cGUgPT09ICdlbnRlcmZ1bGxzY3JlZW4nKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXaGV0aGVyIHRvIHNob3cgY29udHJvbHNcbiAgICAgICAgICAgICAgICAgICAgc2hvdyA9IF9pbkFycmF5KFsnbW91c2Vtb3ZlJywgJ3RvdWNoc3RhcnQnLCAnbW91c2VlbnRlcicsICdmb2N1cyddLCB0b2dnbGUudHlwZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVsYXkgaGlkaW5nIG9uIG1vdmUgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShbJ21vdXNlbW92ZScsICd0b3VjaG1vdmUnXSwgdG9nZ2xlLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheSA9IDIwMDA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBEZWxheSBhIGxpdHRsZSBtb3JlIGZvciBrZXlib2FyZCB1c2Vyc1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9nZ2xlLnR5cGUgPT09ICdmb2N1cycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMzAwMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3cgPSBfaGFzQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmhpZGVDb250cm9scyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbGVhciB0aW1lciBldmVyeSBtb3ZlbWVudFxuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lcnMuaG92ZXIpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbW91c2UgaXMgbm90IG92ZXIgdGhlIGNvbnRyb2xzLCBzZXQgYSB0aW1lb3V0IHRvIGhpZGUgdGhlbVxuICAgICAgICAgICAgaWYgKHNob3cgfHwgcGx5ci5tZWRpYS5wYXVzZWQgfHwgbG9hZGluZykge1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuaGlkZUNvbnRyb2xzLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBbHdheXMgc2hvdyBjb250cm9scyB3aGVuIHBhdXNlZCBvciBpZiB0b3VjaFxuICAgICAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnBhdXNlZCB8fCBsb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEZWxheSBmb3IgaGlkaW5nIG9uIHRvdWNoXG4gICAgICAgICAgICAgICAgaWYgKHBseXIuYnJvd3Nlci5pc1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMzAwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRvZ2dsZSBpcyBmYWxzZSBvciBpZiB3ZSdyZSBwbGF5aW5nIChyZWdhcmRsZXNzIG9mIHRvZ2dsZSksXG4gICAgICAgICAgICAvLyB0aGVuIHNldCB0aGUgdGltZXIgdG8gaGlkZSB0aGUgY29udHJvbHNcbiAgICAgICAgICAgIGlmICghc2hvdyB8fCAhcGx5ci5tZWRpYS5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICB0aW1lcnMuaG92ZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG1vdXNlIGlzIG92ZXIgdGhlIGNvbnRyb2xzIChhbmQgbm90IGVudGVyaW5nIGZ1bGxzY3JlZW4pLCBiYWlsXG4gICAgICAgICAgICAgICAgICAgIGlmICgocGx5ci5jb250cm9scy5wcmVzc2VkIHx8IHBseXIuY29udHJvbHMuaG92ZXIpICYmICFpc0VudGVyRnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5oaWRlQ29udHJvbHMsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBjb21tb24gZnVuY3Rpb24gdG8gcmV0cmlldmUgbWVkaWEgc291cmNlXG4gICAgICAgIGZ1bmN0aW9uIF9zb3VyY2Uoc291cmNlKSB7XG4gICAgICAgICAgICAvLyBJZiBub3QgbnVsbCBvciB1bmRlZmluZWQsIHBhcnNlIGl0XG4gICAgICAgICAgICBpZiAoIV9pcy51bmRlZmluZWQoc291cmNlKSkge1xuICAgICAgICAgICAgICAgIF91cGRhdGVTb3VyY2Uoc291cmNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgY3VycmVudCBzb3VyY2VcbiAgICAgICAgICAgIHZhciB1cmw7XG4gICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IHBseXIuZW1iZWQuZ2V0VmlkZW9VcmwoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZ2V0VmlkZW9VcmwudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5nZXRDdXJyZW50U291bmQoZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBvYmplY3QucGVybWFsaW5rX3VybDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gcGx5ci5tZWRpYS5jdXJyZW50U3JjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVybCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBzb3VyY2VcbiAgICAgICAgLy8gU291cmNlcyBhcmUgbm90IGNoZWNrZWQgZm9yIHN1cHBvcnQgc28gYmUgY2FyZWZ1bFxuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlU291cmNlKHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKCFfaXMub2JqZWN0KHNvdXJjZSkgfHwgISgnc291cmNlcycgaW4gc291cmNlKSB8fCAhc291cmNlLnNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgX3dhcm4oJ0ludmFsaWQgc291cmNlIGZvcm1hdCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVtb3ZlIHJlYWR5IGNsYXNzIGhvb2tcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMucmVhZHksIGZhbHNlKTtcblxuICAgICAgICAgICAgLy8gUGF1c2UgcGxheWJhY2tcbiAgICAgICAgICAgIF9wYXVzZSgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgc2VlayByYW5nZSBhbmQgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF91cGRhdGVTZWVrRGlzcGxheSgpO1xuXG4gICAgICAgICAgICAvLyBSZXNldCBidWZmZXIgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF9zZXRQcm9ncmVzcygpO1xuXG4gICAgICAgICAgICAvLyBDYW5jZWwgY3VycmVudCBuZXR3b3JrIHJlcXVlc3RzXG4gICAgICAgICAgICBfY2FuY2VsUmVxdWVzdHMoKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgbmV3IHNvdXJjZVxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGVtYmVkIG9iamVjdFxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBvbGQgbWVkaWFcbiAgICAgICAgICAgICAgICBfcmVtb3ZlKHBseXIubWVkaWEpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHZpZGVvIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycgJiYgcGx5ci52aWRlb0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICBfcmVtb3ZlKHBseXIudmlkZW9Db250YWluZXIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IGNsYXNzIG5hbWVcbiAgICAgICAgICAgICAgICBpZiAocGx5ci5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5jb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgdHlwZVxuICAgICAgICAgICAgICAgIGlmICgndHlwZScgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIudHlwZSA9IHNvdXJjZS50eXBlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBjaGlsZCB0eXBlIGZvciB2aWRlbyAoaXQgbWlnaHQgYmUgYW4gZW1iZWQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdFNvdXJjZSA9IHNvdXJjZS5zb3VyY2VzWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ3R5cGUnIGluIGZpcnN0U291cmNlICYmIF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgZmlyc3RTb3VyY2UudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLnR5cGUgPSBmaXJzdFNvdXJjZS50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHN1cHBvcnRcbiAgICAgICAgICAgICAgICBwbHlyLnN1cHBvcnRlZCA9IHN1cHBvcnRlZChwbHlyLnR5cGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBtYXJrdXBcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWRJZCA9IHNvdXJjZS5zb3VyY2VzWzBdLnNyYztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEluamVjdCB0aGUgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBfcHJlcGVuZENoaWxkKHBseXIuY29udGFpbmVyLCBwbHlyLm1lZGlhKTtcblxuICAgICAgICAgICAgICAgIC8vIEF1dG9wbGF5IHRoZSBuZXcgc291cmNlP1xuICAgICAgICAgICAgICAgIGlmIChfaXMuYm9vbGVhbihzb3VyY2UuYXV0b3BsYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5hdXRvcGxheSA9IHNvdXJjZS5hdXRvcGxheTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgYXR0cmlidXRlcyBmb3IgYXVkaW8gYW5kIHZpZGVvXG4gICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5odG1sNSwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmNyb3Nzb3JpZ2luKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgnY3Jvc3NvcmlnaW4nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5hdXRvcGxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ2F1dG9wbGF5JywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgncG9zdGVyJyBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdwb3N0ZXInLCBzb3VyY2UucG9zdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmxvb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdsb29wJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBjbGFzcyBob29rc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuZnVsbHNjcmVlbi5hY3RpdmUsIHBseXIuaXNGdWxsc2NyZWVuKTtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmFjdGl2ZSwgcGx5ci5jYXB0aW9uc0VuYWJsZWQpO1xuICAgICAgICAgICAgICAgIF90b2dnbGVTdHlsZUhvb2soKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCBuZXcgc291cmNlcyBmb3IgaHRtbDVcbiAgICAgICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pbnNlcnRDaGlsZEVsZW1lbnRzKCdzb3VyY2UnLCBzb3VyY2Uuc291cmNlcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IHVwIGZyb20gc2NyYXRjaFxuICAgICAgICAgICAgICAgIF9zZXR1cE1lZGlhKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBIVE1MNSBzdHVmZlxuICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgY2FwdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCd0cmFja3MnIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2luc2VydENoaWxkRWxlbWVudHMoJ3RyYWNrJywgc291cmNlLnRyYWNrcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBMb2FkIEhUTUw1IHNvdXJjZXNcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgSFRNTDUgb3IgZW1iZWQgYnV0IG5vdCBmdWxseSBzdXBwb3J0ZWQsIHNldHVwSW50ZXJmYWNlIGFuZCBjYWxsIHJlYWR5IG5vd1xuICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkgfHwgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSAmJiAhcGx5ci5zdXBwb3J0ZWQuZnVsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgaW50ZXJmYWNlXG4gICAgICAgICAgICAgICAgICAgIF9zZXR1cEludGVyZmFjZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgcmVhZHlcbiAgICAgICAgICAgICAgICAgICAgX3JlYWR5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IGFyaWEgdGl0bGUgYW5kIGlmcmFtZSB0aXRsZVxuICAgICAgICAgICAgICAgIGNvbmZpZy50aXRsZSA9IHNvdXJjZS50aXRsZTtcbiAgICAgICAgICAgICAgICBfc2V0VGl0bGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGVzdHJveSBpbnN0YW5jZSBhZG4gd2FpdCBmb3IgY2FsbGJhY2tcbiAgICAgICAgICAgIC8vIFZpbWVvIHRocm93cyBhIHdvYmJseSBpZiB5b3UgZG9uJ3Qgd2FpdFxuICAgICAgICAgICAgX2Rlc3Ryb3koc2V0dXAsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBwb3N0ZXJcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVBvc3Rlcihzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgncG9zdGVyJywgc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExpc3RlbiBmb3IgY29udHJvbCBldmVudHNcbiAgICAgICAgZnVuY3Rpb24gX2NvbnRyb2xMaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5wdXQgZXZlbnQsIHNvIHdlIGZhbGxiYWNrIHRvIGNoYW5nZVxuICAgICAgICAgICAgdmFyIGlucHV0RXZlbnQgPSAocGx5ci5icm93c2VyLmlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCcpO1xuXG4gICAgICAgICAgICAvLyBDbGljayBwbGF5L3BhdXNlIGhlbHBlclxuICAgICAgICAgICAgZnVuY3Rpb24gdG9nZ2xlUGxheSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGxheSA9IF90b2dnbGVQbGF5KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgd2hpY2ggYnV0dG9uc1xuICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gcGx5ci5idXR0b25zW3BsYXkgPyAncGxheScgOiAncGF1c2UnXSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gcGx5ci5idXR0b25zW3BsYXkgPyAncGF1c2UnIDogJ3BsYXknXTtcblxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgbGFzdCBwbGF5IGJ1dHRvbiB0byBhY2NvdW50IGZvciB0aGUgbGFyZ2UgcGxheSBidXR0b25cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldFt0YXJnZXQubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0WzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldHVwIGZvY3VzIGFuZCB0YWIgZm9jdXNcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYWRUYWJGb2N1cyA9IF9oYXNDbGFzcyh0cmlnZ2VyLCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5mb2N1cygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFkVGFiRm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3ModHJpZ2dlciwgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3ModGFyZ2V0LCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGZvY3VzZWQgZWxlbWVudFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Rm9jdXNFbGVtZW50KCkge1xuICAgICAgICAgICAgICAgIHZhciBmb2N1c2VkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICAgICAgICAgICAgICAgIGlmICghZm9jdXNlZCB8fCBmb2N1c2VkID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCc6Zm9jdXMnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZm9jdXNlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBrZXkgY29kZSBmb3IgYW4gZXZlbnRcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEtleUNvZGUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQua2V5Q29kZSA/IGV2ZW50LmtleUNvZGUgOiBldmVudC53aGljaDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGV0ZWN0IHRhYiBmb2N1c1xuICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tUYWJGb2N1cyhmb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYnV0dG9uIGluIHBseXIuYnV0dG9ucykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHBseXIuYnV0dG9uc1tidXR0b25dO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaXMubm9kZUxpc3QoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhlbGVtZW50W2ldLCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgKGVsZW1lbnRbaV0gPT09IGZvY3VzZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhlbGVtZW50LCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgKGVsZW1lbnQgPT09IGZvY3VzZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2V5Ym9hcmQgc2hvcnRjdXRzXG4gICAgICAgICAgICBpZiAoY29uZmlnLmtleWJvYXJkU2hvcmN1dHMuZm9jdXNlZCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBnbG9iYWwgcHJlc3Nlc1xuICAgICAgICAgICAgICAgIGlmIChjb25maWcua2V5Ym9hcmRTaG9yY3V0cy5nbG9iYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgX29uKHdpbmRvdywgJ2tleWRvd24ga2V5dXAnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBnZXRLZXlDb2RlKGV2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBnZXRGb2N1c0VsZW1lbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZWQgPSBbNDgsNDksNTAsNTEsNTIsNTMsNTQsNTYsNTcsNzUsNzcsNzAsNjddLFxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgICA9IGdldCgpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBoYW5kbGUgZ2xvYmFsIGtleSBwcmVzcyBpZiB0aGVyZSdzIG9ubHkgb25lIHBsYXllclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHRoZSBrZXkgaXMgaW4gdGhlIGFsbG93ZWQga2V5c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGlmIHRoZSBmb2N1c2VkIGVsZW1lbnQgaXMgbm90IGVkaXRhYmxlIChlLmcuIHRleHQgaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgYW55IHRoYXQgYWNjZXB0IGtleSBpbnB1dCBodHRwOi8vd2ViYWltLm9yZy90ZWNobmlxdWVzL2tleWJvYXJkL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAxICYmIF9pbkFycmF5KGFsbG93ZWQsIGNvZGUpICYmICghX2lzLmh0bWxFbGVtZW50KGZvY3VzZWQpIHx8ICFfbWF0Y2hlcyhmb2N1c2VkLCBjb25maWcuc2VsZWN0b3JzLmVkaXRhYmxlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVLZXkoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgcHJlc3NlcyBvbiBmb2N1c2VkXG4gICAgICAgICAgICAgICAgX29uKHBseXIuY29udGFpbmVyLCAna2V5ZG93biBrZXl1cCcsIGhhbmRsZUtleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZUtleShldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZ2V0S2V5Q29kZShldmVudCksXG4gICAgICAgICAgICAgICAgICAgIHByZXNzZWQgPSBldmVudC50eXBlID09PSAna2V5ZG93bicsXG4gICAgICAgICAgICAgICAgICAgIGhlbGQgPSBwcmVzc2VkICYmIGNvZGUgPT09IGxhc3Q7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgaXMgYnViYmxlZCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCBkb2Vzbid0IGdldCB0aGUga2V5Y29kZSBmb3Igd2hhdGV2ZXIgcmVhc29uXG4gICAgICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKGNvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZWVrIGJ5IHRoZSBudW1iZXIga2V5c1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNlZWtCeUtleSgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGN1cnJlbnQgZHVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gcGx5ci5tZWRpYS5kdXJhdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIGlmIHdlIGhhdmUgbm8gZHVyYXRpb24gc2V0XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihkdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERpdmlkZSB0aGUgbWF4IGR1cmF0aW9uIGludG8gMTB0aCdzIGFuZCB0aW1lcyBieSB0aGUgbnVtYmVyIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIF9zZWVrKChkdXJhdGlvbiAvIDEwKSAqIChjb2RlIC0gNDgpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGtleSBvbiBrZXlkb3duXG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgb24ga2V5dXBcbiAgICAgICAgICAgICAgICBpZiAocHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGljaCBrZXljb2RlcyBzaG91bGQgd2UgcHJldmVudCBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IFs0OCw0OSw1MCw1MSw1Miw1Myw1NCw1Niw1NywzMiw3NSwzOCw0MCw3NywzOSwzNyw3MCw2N107XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGNvZGUgaXMgZm91bmQgcHJldmVudCBkZWZhdWx0IChlLmcuIHByZXZlbnQgc2Nyb2xsaW5nIGZvciBhcnJvd3MpXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShwcmV2ZW50RGVmYXVsdCwgY29kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaChjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwLTlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDg6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ5OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1MDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDUyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1MzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1NjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTc6IGlmICghaGVsZCkgeyBzZWVrQnlLZXkoKTsgfSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNwYWNlIGFuZCBLIGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzU6IGlmICghaGVsZCkgeyBfdG9nZ2xlUGxheSgpOyB9IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJyb3cgdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzg6IF9pbmNyZWFzZVZvbHVtZSgpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFycm93IGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDA6IF9kZWNyZWFzZVZvbHVtZSgpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE0ga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc3OiBpZiAoIWhlbGQpIHsgX3RvZ2dsZU11dGUoKSB9IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJyb3cgZm9yd2FyZFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOTogX2ZvcndhcmQoKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcnJvdyBiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM3OiBfcmV3aW5kKCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRiBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzA6IF90b2dnbGVGdWxsc2NyZWVuKCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQyBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjc6IGlmICghaGVsZCkgeyBfdG9nZ2xlQ2FwdGlvbnMoKTsgfSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEVzY2FwZSBpcyBoYW5kbGUgbmF0aXZlbHkgd2hlbiBpbiBmdWxsIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAvLyBTbyB3ZSBvbmx5IG5lZWQgdG8gd29ycnkgYWJvdXQgbm9uIG5hdGl2ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsU2NyZWVuICYmIHBseXIuaXNGdWxsc2NyZWVuICYmIGNvZGUgPT09IDI3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlRnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgbGFzdCBjb2RlIGZvciBuZXh0IGN5Y2xlXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBjb2RlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRm9jdXMvdGFiIG1hbmFnZW1lbnRcbiAgICAgICAgICAgIF9vbih3aW5kb3csICdrZXl1cCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBnZXRLZXlDb2RlKGV2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IGdldEZvY3VzRWxlbWVudCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tUYWJGb2N1cyhmb2N1c2VkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF9vbihkb2N1bWVudC5ib2R5LCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MoX2dldEVsZW1lbnQoJy4nICsgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMpLCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKHZhciBidXR0b24gaW4gcGx5ci5idXR0b25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBwbHlyLmJ1dHRvbnNbYnV0dG9uXTtcblxuICAgICAgICAgICAgICAgIF9vbihlbGVtZW50LCAnYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MoZWxlbWVudCwgJ3RhYi1mb2N1cycsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUGxheVxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnBsYXksICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMucGxheSwgdG9nZ2xlUGxheSk7XG5cbiAgICAgICAgICAgIC8vIFBhdXNlXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMucGF1c2UsICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMucGF1c2UsIHRvZ2dsZVBsYXkpO1xuXG4gICAgICAgICAgICAvLyBSZXN0YXJ0XG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMucmVzdGFydCwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5yZXN0YXJ0LCBfc2Vlayk7XG5cbiAgICAgICAgICAgIC8vIFJld2luZFxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnJld2luZCwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5yZXdpbmQsIF9yZXdpbmQpO1xuXG4gICAgICAgICAgICAvLyBGYXN0IGZvcndhcmRcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5mb3J3YXJkLCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLmZvcndhcmQsIF9mb3J3YXJkKTtcblxuICAgICAgICAgICAgLy8gU2Vla1xuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnNlZWssIGlucHV0RXZlbnQsIGNvbmZpZy5saXN0ZW5lcnMuc2VlaywgX3NlZWspO1xuXG4gICAgICAgICAgICAvLyBTZXQgdm9sdW1lXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLnZvbHVtZS5pbnB1dCwgaW5wdXRFdmVudCwgY29uZmlnLmxpc3RlbmVycy52b2x1bWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9zZXRWb2x1bWUocGx5ci52b2x1bWUuaW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIE11dGVcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5tdXRlLCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLm11dGUsIF90b2dnbGVNdXRlKTtcblxuICAgICAgICAgICAgLy8gRnVsbHNjcmVlblxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLmZ1bGxzY3JlZW4sICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMuZnVsbHNjcmVlbiwgX3RvZ2dsZUZ1bGxzY3JlZW4pO1xuXG4gICAgICAgICAgICAvLyBIYW5kbGUgdXNlciBleGl0aW5nIGZ1bGxzY3JlZW4gYnkgZXNjYXBpbmcgZXRjXG4gICAgICAgICAgICBpZiAoZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgICAgICBfb24oZG9jdW1lbnQsIGZ1bGxzY3JlZW4uZnVsbFNjcmVlbkV2ZW50TmFtZSwgX3RvZ2dsZUZ1bGxzY3JlZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYXB0aW9uc1xuICAgICAgICAgICAgX29uKHBseXIuYnV0dG9ucy5jYXB0aW9ucywgJ2NsaWNrJywgX3RvZ2dsZUNhcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gU2VlayB0b29sdGlwXG4gICAgICAgICAgICBfb24ocGx5ci5wcm9ncmVzcy5jb250YWluZXIsICdtb3VzZWVudGVyIG1vdXNlbGVhdmUgbW91c2Vtb3ZlJywgX3VwZGF0ZVNlZWtUb29sdGlwKTtcblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGNvbnRyb2xzIHZpc2liaWxpdHkgYmFzZWQgb24gbW91c2UgbW92ZW1lbnRcbiAgICAgICAgICAgIGlmIChjb25maWcuaGlkZUNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgLy8gVG9nZ2xlIGNvbnRyb2xzIG9uIG1vdXNlIGV2ZW50cyBhbmQgZW50ZXJpbmcgZnVsbHNjcmVlblxuICAgICAgICAgICAgICAgIF9vbihwbHlyLmNvbnRhaW5lciwgJ21vdXNlZW50ZXIgbW91c2VsZWF2ZSBtb3VzZW1vdmUgdG91Y2hzdGFydCB0b3VjaGVuZCB0b3VjaGNhbmNlbCB0b3VjaG1vdmUgZW50ZXJmdWxsc2NyZWVuJywgX3RvZ2dsZUNvbnRyb2xzKTtcblxuICAgICAgICAgICAgICAgIC8vIFdhdGNoIGZvciBjdXJzb3Igb3ZlciBjb250cm9scyBzbyB0aGV5IGRvbid0IGhpZGUgd2hlbiB0cnlpbmcgdG8gaW50ZXJhY3RcbiAgICAgICAgICAgICAgICBfb24ocGx5ci5jb250cm9scywgJ21vdXNlZW50ZXIgbW91c2VsZWF2ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY29udHJvbHMuaG92ZXIgPSBldmVudC50eXBlID09PSAnbW91c2VlbnRlcic7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgLy8gV2F0Y2ggZm9yIGN1cnNvciBvdmVyIGNvbnRyb2xzIHNvIHRoZXkgZG9uJ3QgaGlkZSB3aGVuIHRyeWluZyB0byBpbnRlcmFjdFxuICAgICAgICAgICAgICAgIF9vbihwbHlyLmNvbnRyb2xzLCAnbW91c2Vkb3duIG1vdXNldXAgdG91Y2hzdGFydCB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY29udHJvbHMucHJlc3NlZCA9IF9pbkFycmF5KFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXSwgZXZlbnQudHlwZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGb2N1cyBpbi9vdXQgb24gY29udHJvbHNcbiAgICAgICAgICAgICAgICBfb24ocGx5ci5jb250cm9scywgJ2ZvY3VzIGJsdXInLCBfdG9nZ2xlQ29udHJvbHMsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGp1c3Qgdm9sdW1lIG9uIHNjcm9sbFxuICAgICAgICAgICAgX29uKHBseXIudm9sdW1lLmlucHV0LCAnd2hlZWwnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBEZXRlY3QgXCJuYXR1cmFsXCIgc2Nyb2xsIC0gc3VwcG9yZWQgb24gT1MgWCBTYWZhcmkgb25seVxuICAgICAgICAgICAgICAgIC8vIE90aGVyIGJyb3dzZXJzIG9uIE9TIFggd2lsbCBiZSBpbnZlcnRlZCB1bnRpbCBzdXBwb3J0IGltcHJvdmVzXG4gICAgICAgICAgICAgICAgdmFyIGludmVydGVkID0gZXZlbnQud2Via2l0RGlyZWN0aW9uSW52ZXJ0ZWRGcm9tRGV2aWNlLFxuICAgICAgICAgICAgICAgICAgICBzdGVwID0gKGNvbmZpZy52b2x1bWVTdGVwIC8gNSk7XG5cbiAgICAgICAgICAgICAgICAvLyBTY3JvbGwgZG93biAob3IgdXAgb24gbmF0dXJhbCkgdG8gZGVjcmVhc2VcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGVsdGFZIDwgMCB8fCBldmVudC5kZWx0YVggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnZlcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RlY3JlYXNlVm9sdW1lKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2luY3JlYXNlVm9sdW1lKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2Nyb2xsIHVwIChvciBkb3duIG9uIG5hdHVyYWwpIHRvIGluY3JlYXNlXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDAgfHwgZXZlbnQuZGVsdGFYIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW52ZXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbmNyZWFzZVZvbHVtZShzdGVwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kZWNyZWFzZVZvbHVtZShzdGVwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTGlzdGVuIGZvciBtZWRpYSBldmVudHNcbiAgICAgICAgZnVuY3Rpb24gX21lZGlhTGlzdGVuZXJzKCkge1xuICAgICAgICAgICAgLy8gVGltZSBjaGFuZ2Ugb24gbWVkaWFcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAndGltZXVwZGF0ZSBzZWVraW5nJywgX3RpbWVVcGRhdGUpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgbWFudWFsIGNhcHRpb25zXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnLCBfc2Vla01hbnVhbENhcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gRGlzcGxheSBkdXJhdGlvblxuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICdkdXJhdGlvbmNoYW5nZSBsb2FkZWRtZXRhZGF0YScsIF9kaXNwbGF5RHVyYXRpb24pO1xuXG4gICAgICAgICAgICAvLyBIYW5kbGUgdGhlIG1lZGlhIGZpbmlzaGluZ1xuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICdlbmRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIFNob3cgcG9zdGVyIG9uIGVuZFxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycgJiYgY29uZmlnLnNob3dQb3N0ZXJPbkVuZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhclxuICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzdGFydFxuICAgICAgICAgICAgICAgICAgICBfc2VlaygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlLWxvYWQgbWVkaWFcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBidWZmZXIgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAncHJvZ3Jlc3MgcGxheWluZycsIF91cGRhdGVQcm9ncmVzcyk7XG5cbiAgICAgICAgICAgIC8vIEhhbmRsZSBuYXRpdmUgbXV0ZVxuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICd2b2x1bWVjaGFuZ2UnLCBfdXBkYXRlVm9sdW1lKTtcblxuICAgICAgICAgICAgLy8gSGFuZGxlIG5hdGl2ZSBwbGF5L3BhdXNlXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ3BsYXkgcGF1c2UgZW5kZWQnLCBfY2hlY2tQbGF5aW5nKTtcblxuICAgICAgICAgICAgLy8gTG9hZGluZ1xuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICd3YWl0aW5nIGNhbnBsYXkgc2Vla2VkJywgX2NoZWNrTG9hZGluZyk7XG5cbiAgICAgICAgICAgIC8vIENsaWNrIHZpZGVvXG4gICAgICAgICAgICBpZiAoY29uZmlnLmNsaWNrVG9QbGF5ICYmIHBseXIudHlwZSAhPT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgICAgIC8vIFJlLWZldGNoIHRoZSB3cmFwcGVyXG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBfZ2V0RWxlbWVudCgnLicgKyBjb25maWcuY2xhc3Nlcy52aWRlb1dyYXBwZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gQmFpbCBpZiB0aGVyZSdzIG5vIHdyYXBwZXIgKHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbilcbiAgICAgICAgICAgICAgICBpZiAoIXdyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldCBjdXJzb3JcbiAgICAgICAgICAgICAgICB3cmFwcGVyLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuXG4gICAgICAgICAgICAgICAgLy8gT24gY2xpY2sgcGxheSwgcGF1c2Ugb3JlIHJlc3RhcnRcbiAgICAgICAgICAgICAgICBfb24od3JhcHBlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRvdWNoIGRldmljZXMgd2lsbCBqdXN0IHNob3cgY29udHJvbHMgKGlmIHdlJ3JlIGhpZGluZyBjb250cm9scylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5oaWRlQ29udHJvbHMgJiYgcGx5ci5icm93c2VyLmlzVG91Y2ggJiYgIXBseXIubWVkaWEucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGx5ci5tZWRpYS5lbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NlZWsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEaXNhYmxlIHJpZ2h0IGNsaWNrXG4gICAgICAgICAgICBpZiAoY29uZmlnLmRpc2FibGVDb250ZXh0TWVudSkge1xuICAgICAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAnY29udGV4dG1lbnUnLCBmdW5jdGlvbihldmVudCkgeyBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUHJveHkgZXZlbnRzIHRvIGNvbnRhaW5lclxuICAgICAgICAgICAgLy8gQnViYmxlIHVwIGtleSBldmVudHMgZm9yIEVkZ2VcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCBjb25maWcuZXZlbnRzLmNvbmNhdChbJ2tleXVwJywgJ2tleWRvd24nXSkuam9pbignICcpLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsIGV2ZW50LnR5cGUsIHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYW5jZWwgY3VycmVudCBuZXR3b3JrIHJlcXVlc3RzXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xNzRcbiAgICAgICAgZnVuY3Rpb24gX2NhbmNlbFJlcXVlc3RzKCkge1xuICAgICAgICAgICAgaWYgKCFfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBjaGlsZCBzb3VyY2VzXG4gICAgICAgICAgICB2YXIgc291cmNlcyA9IHBseXIubWVkaWEucXVlcnlTZWxlY3RvckFsbCgnc291cmNlJyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBfcmVtb3ZlKHNvdXJjZXNbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgYmxhbmsgdmlkZW8gc3JjIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy8gVGhpcyBpcyB0byBwcmV2ZW50IGEgTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEIGVycm9yXG4gICAgICAgICAgICAvLyBJbmZvOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMyMjMxNTc5L2hvdy10by1wcm9wZXJseS1kaXNwb3NlLW9mLWFuLWh0bWw1LXZpZGVvLWFuZC1jbG9zZS1zb2NrZXQtb3ItY29ubmVjdGlvblxuICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ3NyYycsICdodHRwczovL2Nkbi5zZWx6LmNvbS9wbHlyL2JsYW5rLm1wNCcpO1xuXG4gICAgICAgICAgICAvLyBMb2FkIHRoZSBuZXcgZW1wdHkgc291cmNlXG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgY2FuY2VsIGV4aXN0aW5nIHJlcXVlc3RzXG4gICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9pc3N1ZXMvMTc0XG4gICAgICAgICAgICBwbHlyLm1lZGlhLmxvYWQoKTtcblxuICAgICAgICAgICAgLy8gRGVidWdnaW5nXG4gICAgICAgICAgICBfbG9nKCdDYW5jZWxsZWQgbmV0d29yayByZXF1ZXN0cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVzdHJveSBhbiBpbnN0YW5jZVxuICAgICAgICAvLyBFdmVudCBsaXN0ZW5lcnMgYXJlIHJlbW92ZWQgd2hlbiBlbGVtZW50cyBhcmUgcmVtb3ZlZFxuICAgICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyNTI4MDQ5L2lmLWEtZG9tLWVsZW1lbnQtaXMtcmVtb3ZlZC1hcmUtaXRzLWxpc3RlbmVycy1hbHNvLXJlbW92ZWQtZnJvbS1tZW1vcnlcbiAgICAgICAgZnVuY3Rpb24gX2Rlc3Ryb3koY2FsbGJhY2ssIHJlc3RvcmUpIHtcbiAgICAgICAgICAgIC8vIEJhaWwgaWYgdGhlIGVsZW1lbnQgaXMgbm90IGluaXRpYWxpemVkXG4gICAgICAgICAgICBpZiAoIXBseXIuaW5pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUeXBlIHNwZWNpZmljIHN0dWZmXG4gICAgICAgICAgICBzd2l0Y2ggKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciB0aW1lcnNcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXJzLmJ1ZmZlcmluZyk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5wbGF5aW5nKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEZXN0cm95IFlvdVR1YmUgQVBJXG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuVXAoKTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpbWVvJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVzdHJveSBWaW1lbyBBUElcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiBjbGVhbiB1cCAod2FpdCwgdG8gcHJldmVudCBwb3N0bWVzc2FnZSBlcnJvcnMpXG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQudW5sb2FkKCkudGhlbihjbGVhblVwKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBWaW1lbyBkb2VzIG5vdCBhbHdheXMgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIHRpbWVycy5jbGVhblVwID0gd2luZG93LnNldFRpbWVvdXQoY2xlYW5VcCwgMjAwKTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgbmF0aXZlIHZpZGVvIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVOYXRpdmVDb250cm9scyh0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICAgICAgICAgICAgICBjbGVhblVwKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFuVXAoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVycy5jbGVhblVwKTtcblxuICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gcmVzdG9yZSBvcmlnaW5hbCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKCFfaXMuYm9vbGVhbihyZXN0b3JlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN0b3JlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICAgICAgICAgIGlmIChfaXMuZnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwob3JpZ2luYWwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEJhaWwgaWYgd2UgZG9uJ3QgbmVlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN0b3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgaW5pdCBmbGFnXG4gICAgICAgICAgICAgICAgcGx5ci5pbml0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBjb250YWluZXIgd2l0aCB0aGUgb3JpZ2luYWwgZWxlbWVudCBwcm92aWRlZFxuICAgICAgICAgICAgICAgIHBseXIuY29udGFpbmVyLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG9yaWdpbmFsLCBwbHlyLmNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAvLyBFdmVudFxuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQob3JpZ2luYWwsICdkZXN0cm95ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGEgcGxheWVyXG4gICAgICAgIGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgICAgICAgLy8gQmFpbCBpZiB0aGUgZWxlbWVudCBpcyBpbml0aWFsaXplZFxuICAgICAgICAgICAgaWYgKHBseXIuaW5pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXR1cCB0aGUgZnVsbHNjcmVlbiBhcGlcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4gPSBfZnVsbHNjcmVlbigpO1xuXG4gICAgICAgICAgICAvLyBTbmlmZiBvdXQgdGhlIGJyb3dzZXJcbiAgICAgICAgICAgIHBseXIuYnJvd3NlciA9IF9icm93c2VyU25pZmYoKTtcblxuICAgICAgICAgICAgLy8gQmFpbCBpZiBub3RoaW5nIHRvIHNldHVwXG4gICAgICAgICAgICBpZiAoIV9pcy5odG1sRWxlbWVudChwbHlyLm1lZGlhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9hZCBzYXZlZCBzZXR0aW5ncyBmcm9tIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgX3NldHVwU3RvcmFnZSgpO1xuXG4gICAgICAgICAgICAvLyBTZXQgbWVkaWEgdHlwZSBiYXNlZCBvbiB0YWcgb3IgZGF0YSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vIFN1cHBvcnRlZDogdmlkZW8sIGF1ZGlvLCB2aW1lbywgeW91dHViZVxuICAgICAgICAgICAgdmFyIHRhZ05hbWUgPSBtZWRpYS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAodGFnTmFtZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnR5cGUgICAgID0gbWVkaWEuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKTtcbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkSWQgID0gbWVkaWEuZ2V0QXR0cmlidXRlKCdkYXRhLXZpZGVvLWlkJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICAgICAgICAgIG1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XG4gICAgICAgICAgICAgICAgbWVkaWEucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZpZGVvLWlkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBseXIudHlwZSAgICAgICAgICAgPSB0YWdOYW1lO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5jcm9zc29yaWdpbiAgPSAobWVkaWEuZ2V0QXR0cmlidXRlKCdjcm9zc29yaWdpbicpICE9PSBudWxsKTtcbiAgICAgICAgICAgICAgICBjb25maWcuYXV0b3BsYXkgICAgID0gKGNvbmZpZy5hdXRvcGxheSB8fCAobWVkaWEuZ2V0QXR0cmlidXRlKCdhdXRvcGxheScpICE9PSBudWxsKSk7XG4gICAgICAgICAgICAgICAgY29uZmlnLmxvb3AgICAgICAgICA9IChjb25maWcubG9vcCB8fCAobWVkaWEuZ2V0QXR0cmlidXRlKCdsb29wJykgIT09IG51bGwpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHN1cHBvcnRcbiAgICAgICAgICAgIHBseXIuc3VwcG9ydGVkID0gc3VwcG9ydGVkKHBseXIudHlwZSk7XG5cbiAgICAgICAgICAgIC8vIElmIG5vIG5hdGl2ZSBzdXBwb3J0LCBiYWlsXG4gICAgICAgICAgICBpZiAoIXBseXIuc3VwcG9ydGVkLmJhc2ljKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXcmFwIG1lZGlhXG4gICAgICAgICAgICBwbHlyLmNvbnRhaW5lciA9IF93cmFwKG1lZGlhLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG5cbiAgICAgICAgICAgIC8vIEFsbG93IGZvY3VzIHRvIGJlIGNhcHR1cmVkXG4gICAgICAgICAgICBwbHlyLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XG5cbiAgICAgICAgICAgIC8vIEFkZCBzdHlsZSBob29rXG4gICAgICAgICAgICBfdG9nZ2xlU3R5bGVIb29rKCk7XG5cbiAgICAgICAgICAgIC8vIERlYnVnIGluZm9cbiAgICAgICAgICAgIF9sb2coJycgKyBwbHlyLmJyb3dzZXIubmFtZSArICcgJyArIHBseXIuYnJvd3Nlci52ZXJzaW9uKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgbWVkaWFcbiAgICAgICAgICAgIF9zZXR1cE1lZGlhKCk7XG5cbiAgICAgICAgICAgIC8vIFNldHVwIGludGVyZmFjZVxuICAgICAgICAgICAgLy8gSWYgZW1iZWQgYnV0IG5vdCBmdWxseSBzdXBwb3J0ZWQsIHNldHVwSW50ZXJmYWNlICh0byBhdm9pZCBmbGFzaCBvZiBjb250cm9scykgYW5kIGNhbGwgcmVhZHkgbm93XG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpIHx8IChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkgJiYgIXBseXIuc3VwcG9ydGVkLmZ1bGwpKSB7XG4gICAgICAgICAgICAgICAgLy8gU2V0dXAgVUlcbiAgICAgICAgICAgICAgICBfc2V0dXBJbnRlcmZhY2UoKTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGwgcmVhZHlcbiAgICAgICAgICAgICAgICBfcmVhZHkoKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCB0aXRsZSBvbiBidXR0b24gYW5kIGZyYW1lXG4gICAgICAgICAgICAgICAgX3NldFRpdGxlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN1Y2Nlc3NmdWwgc2V0dXBcbiAgICAgICAgICAgIHBseXIuaW5pdCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCB0aGUgVUlcbiAgICAgICAgZnVuY3Rpb24gX3NldHVwSW50ZXJmYWNlKCkge1xuICAgICAgICAgICAgLy8gRG9uJ3Qgc2V0dXAgaW50ZXJmYWNlIGlmIG5vIHN1cHBvcnRcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIF93YXJuKCdCYXNpYyBzdXBwb3J0IG9ubHknLCBwbHlyLnR5cGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX3JlbW92ZShfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLndyYXBwZXIpKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBsYXJnZSBwbGF5XG4gICAgICAgICAgICAgICAgX3JlbW92ZShfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucGxheSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBuYXRpdmUgY29udHJvbHNcbiAgICAgICAgICAgICAgICBfdG9nZ2xlTmF0aXZlQ29udHJvbHModHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBCYWlsXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbmplY3QgY3VzdG9tIGNvbnRyb2xzIGlmIG5vdCBwcmVzZW50XG4gICAgICAgICAgICB2YXIgY29udHJvbHNNaXNzaW5nID0gIV9nZXRFbGVtZW50cyhjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLndyYXBwZXIpLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChjb250cm9sc01pc3NpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBJbmplY3QgY3VzdG9tIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX2luamVjdENvbnRyb2xzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGVsZW1lbnRzXG4gICAgICAgICAgICBpZiAoIV9maW5kRWxlbWVudHMoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIGNvbnRyb2xzIGFyZSBpbmplY3RlZCwgcmUtYmluZCBsaXN0ZW5lcnMgZm9yIGNvbnRyb2xzXG4gICAgICAgICAgICBpZiAoY29udHJvbHNNaXNzaW5nKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRyb2xMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWVkaWEgZWxlbWVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIF9tZWRpYUxpc3RlbmVycygpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgbmF0aXZlIGNvbnRyb2xzXG4gICAgICAgICAgICBfdG9nZ2xlTmF0aXZlQ29udHJvbHMoKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgZnVsbHNjcmVlblxuICAgICAgICAgICAgX3NldHVwRnVsbHNjcmVlbigpO1xuXG4gICAgICAgICAgICAvLyBDYXB0aW9uc1xuICAgICAgICAgICAgX3NldHVwQ2FwdGlvbnMoKTtcblxuICAgICAgICAgICAgLy8gU2V0IHZvbHVtZVxuICAgICAgICAgICAgX3NldFZvbHVtZSgpO1xuICAgICAgICAgICAgX3VwZGF0ZVZvbHVtZSgpO1xuXG4gICAgICAgICAgICAvLyBSZXNldCB0aW1lIGRpc3BsYXlcbiAgICAgICAgICAgIF90aW1lVXBkYXRlKCk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgVUlcbiAgICAgICAgICAgIF9jaGVja1BsYXlpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwaSA9IHtcbiAgICAgICAgICAgIGdldE9yaWdpbmFsOiAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBvcmlnaW5hbDsgfSxcbiAgICAgICAgICAgIGdldENvbnRhaW5lcjogICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLmNvbnRhaW5lciB9LFxuICAgICAgICAgICAgZ2V0RW1iZWQ6ICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIuZW1iZWQ7IH0sXG4gICAgICAgICAgICBnZXRNZWRpYTogICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5tZWRpYTsgfSxcbiAgICAgICAgICAgIGdldFR5cGU6ICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLnR5cGU7IH0sXG4gICAgICAgICAgICBnZXREdXJhdGlvbjogICAgICAgIF9nZXREdXJhdGlvbixcbiAgICAgICAgICAgIGdldEN1cnJlbnRUaW1lOiAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lOyB9LFxuICAgICAgICAgICAgZ2V0Vm9sdW1lOiAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIubWVkaWEudm9sdW1lOyB9LFxuICAgICAgICAgICAgaXNNdXRlZDogICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIubWVkaWEubXV0ZWQ7IH0sXG4gICAgICAgICAgICBpc1JlYWR5OiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gX2hhc0NsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5yZWFkeSk7IH0sXG4gICAgICAgICAgICBpc0xvYWRpbmc6ICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gX2hhc0NsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5sb2FkaW5nKTsgfSxcbiAgICAgICAgICAgIGlzUGF1c2VkOiAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLm1lZGlhLnBhdXNlZDsgfSxcbiAgICAgICAgICAgIG9uOiAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKSB7IF9vbihwbHlyLmNvbnRhaW5lciwgZXZlbnQsIGNhbGxiYWNrKTsgcmV0dXJuIHRoaXM7IH0sXG4gICAgICAgICAgICBwbGF5OiAgICAgICAgICAgICAgIF9wbGF5LFxuICAgICAgICAgICAgcGF1c2U6ICAgICAgICAgICAgICBfcGF1c2UsXG4gICAgICAgICAgICBzdG9wOiAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyBfcGF1c2UoKTsgX3NlZWsoKTsgfSxcbiAgICAgICAgICAgIHJlc3RhcnQ6ICAgICAgICAgICAgX3NlZWssXG4gICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgICAgIF9yZXdpbmQsXG4gICAgICAgICAgICBmb3J3YXJkOiAgICAgICAgICAgIF9mb3J3YXJkLFxuICAgICAgICAgICAgc2VlazogICAgICAgICAgICAgICBfc2VlayxcbiAgICAgICAgICAgIHNvdXJjZTogICAgICAgICAgICAgX3NvdXJjZSxcbiAgICAgICAgICAgIHBvc3RlcjogICAgICAgICAgICAgX3VwZGF0ZVBvc3RlcixcbiAgICAgICAgICAgIHNldFZvbHVtZTogICAgICAgICAgX3NldFZvbHVtZSxcbiAgICAgICAgICAgIHRvZ2dsZVBsYXk6ICAgICAgICAgX3RvZ2dsZVBsYXksXG4gICAgICAgICAgICB0b2dnbGVNdXRlOiAgICAgICAgIF90b2dnbGVNdXRlLFxuICAgICAgICAgICAgdG9nZ2xlQ2FwdGlvbnM6ICAgICBfdG9nZ2xlQ2FwdGlvbnMsXG4gICAgICAgICAgICB0b2dnbGVGdWxsc2NyZWVuOiAgIF90b2dnbGVGdWxsc2NyZWVuLFxuICAgICAgICAgICAgdG9nZ2xlQ29udHJvbHM6ICAgICBfdG9nZ2xlQ29udHJvbHMsXG4gICAgICAgICAgICBpc0Z1bGxzY3JlZW46ICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5pc0Z1bGxzY3JlZW4gfHwgZmFsc2U7IH0sXG4gICAgICAgICAgICBzdXBwb3J0OiAgICAgICAgICAgIGZ1bmN0aW9uKG1pbWVUeXBlKSB7IHJldHVybiBfc3VwcG9ydE1pbWUocGx5ciwgbWltZVR5cGUpOyB9LFxuICAgICAgICAgICAgZGVzdHJveTogICAgICAgICAgICBfZGVzdHJveVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEV2ZXJ5dGhpbmcgZG9uZVxuICAgICAgICBmdW5jdGlvbiBfcmVhZHkoKSB7XG4gICAgICAgICAgICAvLyBSZWFkeSBldmVudCBhdCBlbmQgb2YgZXhlY3V0aW9uIHN0YWNrXG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdyZWFkeScpO1xuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgICAgIC8vIFNldCBjbGFzcyBob29rIG9uIG1lZGlhIGVsZW1lbnRcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLm1lZGlhLCBkZWZhdWx0cy5jbGFzc2VzLnNldHVwLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gU2V0IGNvbnRhaW5lciBjbGFzcyBmb3IgcmVhZHlcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMucmVhZHksIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBTdG9yZSBhIHJlZmVybmNlIHRvIGluc3RhbmNlXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnBseXIgPSBhcGk7XG5cbiAgICAgICAgICAgIC8vIEF1dG9wbGF5XG4gICAgICAgICAgICBpZiAoY29uZmlnLmF1dG9wbGF5KSB7XG4gICAgICAgICAgICAgICAgX3BsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemUgaW5zdGFuY2VcbiAgICAgICAgX2luaXQoKTtcblxuICAgICAgICAvLyBJZiBpbml0IGZhaWxlZCwgcmV0dXJuIG51bGxcbiAgICAgICAgaWYgKCFwbHlyLmluaXQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFwaTtcbiAgICB9XG5cbiAgICAvLyBMb2FkIGEgc3ByaXRlXG4gICAgZnVuY3Rpb24gbG9hZFNwcml0ZSh1cmwsIGlkKSB7XG4gICAgICAgIHZhciB4ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgLy8gSWYgdGhlIGlkIGlzIHNldCBhbmQgc3ByaXRlIGV4aXN0cywgYmFpbFxuICAgICAgICBpZiAoX2lzLnN0cmluZyhpZCkgJiYgX2lzLmh0bWxFbGVtZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgaWQpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIHBsYWNlaG9sZGVyICh0byBwcmV2ZW50IGxvYWRpbmcgdHdpY2UpXG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuICAgICAgICBpZiAoX2lzLnN0cmluZyhpZCkpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgZG9jdW1lbnQuYm9keS5jaGlsZE5vZGVzWzBdKTtcblxuICAgICAgICAvLyBDaGVjayBmb3IgQ09SUyBzdXBwb3J0XG4gICAgICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4KSB7XG4gICAgICAgICAgICB4Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmplY3QgaGlkZGVuIGRpdiB3aXRoIHNwcml0ZSBvbiBsb2FkXG4gICAgICAgIHgub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0geC5yZXNwb25zZVRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICB4LnNlbmQoKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3Igc3VwcG9ydFxuICAgIGZ1bmN0aW9uIHN1cHBvcnRlZCh0eXBlKSB7XG4gICAgICAgIHZhciBicm93c2VyICAgICA9IF9icm93c2VyU25pZmYoKSxcbiAgICAgICAgICAgIGlzT2xkSUUgICAgID0gKGJyb3dzZXIuaXNJRSAmJiBicm93c2VyLnZlcnNpb24gPD0gOSksXG4gICAgICAgICAgICBpc0lvcyAgICAgICA9IGJyb3dzZXIuaXNJb3MsXG4gICAgICAgICAgICBpc0lwaG9uZSAgICA9IC9pUGhvbmV8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXG4gICAgICAgICAgICBhdWRpbyAgICAgICA9ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKS5jYW5QbGF5VHlwZSxcbiAgICAgICAgICAgIHZpZGVvICAgICAgID0gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpLmNhblBsYXlUeXBlLFxuICAgICAgICAgICAgYmFzaWMsIGZ1bGw7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAgICAgICAgYmFzaWMgPSB2aWRlbztcbiAgICAgICAgICAgICAgICBmdWxsICA9IChiYXNpYyAmJiAoIWlzT2xkSUUgJiYgIWlzSXBob25lKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgICAgICAgICBiYXNpYyA9IGF1ZGlvO1xuICAgICAgICAgICAgICAgIGZ1bGwgID0gKGJhc2ljICYmICFpc09sZElFKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICBiYXNpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZnVsbCAgPSAoIWlzT2xkSUUgJiYgIWlzSW9zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBiYXNpYyA9IChhdWRpbyAmJiB2aWRlbyk7XG4gICAgICAgICAgICAgICAgZnVsbCAgPSAoYmFzaWMgJiYgIWlzT2xkSUUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2ljOiAgYmFzaWMsXG4gICAgICAgICAgICBmdWxsOiAgIGZ1bGxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBTZXR1cCBmdW5jdGlvblxuICAgIGZ1bmN0aW9uIHNldHVwKHRhcmdldHMsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBwbGF5ZXJzXG4gICAgICAgIHZhciBwbGF5ZXJzICAgICA9IFtdLFxuICAgICAgICAgICAgaW5zdGFuY2VzICAgPSBbXSxcbiAgICAgICAgICAgIHNlbGVjdG9yICAgID0gW2RlZmF1bHRzLnNlbGVjdG9ycy5odG1sNSwgZGVmYXVsdHMuc2VsZWN0b3JzLmVtYmVkXS5qb2luKCcsJyk7XG5cbiAgICAgICAgLy8gU2VsZWN0IHRoZSBlbGVtZW50c1xuICAgICAgICBpZiAoX2lzLnN0cmluZyh0YXJnZXRzKSkge1xuICAgICAgICAgICAgLy8gU3RyaW5nIHNlbGVjdG9yIHBhc3NlZFxuICAgICAgICAgICAgdGFyZ2V0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0cyk7XG4gICAgICAgIH0gIGVsc2UgaWYgKF9pcy5odG1sRWxlbWVudCh0YXJnZXRzKSkge1xuICAgICAgICAgICAgLy8gU2luZ2xlIEhUTUxFbGVtZW50IHBhc3NlZFxuICAgICAgICAgICAgdGFyZ2V0cyA9IFt0YXJnZXRzXTtcbiAgICAgICAgfSAgZWxzZSBpZiAoIV9pcy5ub2RlTGlzdCh0YXJnZXRzKSAmJiAhX2lzLmFycmF5KHRhcmdldHMpICYmICFfaXMuc3RyaW5nKHRhcmdldHMpKSAge1xuICAgICAgICAgICAgLy8gTm8gc2VsZWN0b3IgcGFzc2VkLCBwb3NzaWJseSBvcHRpb25zIGFzIGZpcnN0IGFyZ3VtZW50XG4gICAgICAgICAgICAvLyBJZiBvcHRpb25zIGFyZSB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKG9wdGlvbnMpICYmIF9pcy5vYmplY3QodGFyZ2V0cykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGFyZ2V0cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIGRlZmF1bHQgc2VsZWN0b3JcbiAgICAgICAgICAgIHRhcmdldHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgTm9kZUxpc3QgdG8gYXJyYXlcbiAgICAgICAgaWYgKF9pcy5ub2RlTGlzdCh0YXJnZXRzKSkge1xuICAgICAgICAgICAgdGFyZ2V0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRhcmdldHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmFpbCBpZiBkaXNhYmxlZCBvciBubyBiYXNpYyBzdXBwb3J0XG4gICAgICAgIC8vIFlvdSBtYXkgd2FudCB0byBkaXNhYmxlIGNlcnRhaW4gVUFzIGV0Y1xuICAgICAgICBpZiAoIXN1cHBvcnRlZCgpLmJhc2ljIHx8ICF0YXJnZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHRvIGNvbnRhaW5lciBsaXN0XG4gICAgICAgIGZ1bmN0aW9uIGFkZCh0YXJnZXQsIG1lZGlhKSB7XG4gICAgICAgICAgICBpZiAoIV9oYXNDbGFzcyhtZWRpYSwgZGVmYXVsdHMuY2xhc3Nlcy5ob29rKSkge1xuICAgICAgICAgICAgICAgIHBsYXllcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFsd2F5cyB3cmFwIGluIGEgPGRpdj4gZm9yIHN0eWxpbmdcbiAgICAgICAgICAgICAgICAgICAgLy9jb250YWluZXI6ICBfd3JhcChtZWRpYSwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLFxuICAgICAgICAgICAgICAgICAgICAvLyBDb3VsZCBiZSBhIGNvbnRhaW5lciBvciB0aGUgbWVkaWEgaXRzZWxmXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgdGhlIDx2aWRlbz4sIDxhdWRpbz4gb3IgPGRpdj4gKFlvdVR1YmUvVmltZW8pXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhOiAgICAgIG1lZGlhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgdGFyZ2V0cyBoYXZlIG11bHRpcGxlIG1lZGlhIGVsZW1lbnRzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRhcmdldHNbaV07XG5cbiAgICAgICAgICAgIC8vIEdldCBjaGlsZHJlblxuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG1vcmUgdGhhbiBvbmUgbWVkaWEgZWxlbWVudCBjaGlsZCwgd3JhcCB0aGVtXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBjaGlsZHJlbi5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgICAgICBhZGQodGFyZ2V0LCBjaGlsZHJlblt4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChfbWF0Y2hlcyh0YXJnZXQsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIC8vIFRhcmdldCBpcyBtZWRpYSBlbGVtZW50XG4gICAgICAgICAgICAgICAgYWRkKHRhcmdldCwgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIHBsYXllciBpbnN0YW5jZSBmb3IgZWFjaCBlbGVtZW50XG4gICAgICAgIHBsYXllcnMuZm9yRWFjaChmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ICAgICA9IHBsYXllci50YXJnZXQsXG4gICAgICAgICAgICAgICAgbWVkaWEgICAgICAgPSBwbGF5ZXIubWVkaWEsXG4gICAgICAgICAgICAgICAgbWF0Y2ggICAgICAgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gVGhlIHRhcmdldCBlbGVtZW50IGNhbiBhbHNvIGJlIHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICAgICAgICBpZiAobWVkaWEgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldHVwIGEgcGxheWVyIGluc3RhbmNlIGFuZCBhZGQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIENyZWF0ZSBpbnN0YW5jZS1zcGVjaWZpYyBjb25maWdcbiAgICAgICAgICAgIHZhciBkYXRhID0ge307XG5cbiAgICAgICAgICAgIC8vIFRyeSBwYXJzaW5nIGRhdGEgYXR0cmlidXRlIGNvbmZpZ1xuICAgICAgICAgICAgdHJ5IHsgZGF0YSA9IEpTT04ucGFyc2UoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGx5cicpKTsgfVxuICAgICAgICAgICAgY2F0Y2goZSkgeyB9XG5cbiAgICAgICAgICAgIHZhciBjb25maWcgPSBfZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucywgZGF0YSk7XG5cbiAgICAgICAgICAgIC8vIEJhaWwgaWYgbm90IGVuYWJsZWRcbiAgICAgICAgICAgIGlmICghY29uZmlnLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBpbnN0YW5jZVxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFBseXIobWVkaWEsIGNvbmZpZyk7XG5cbiAgICAgICAgICAgIC8vIEdvIHRvIG5leHQgaWYgc2V0dXAgZmFpbGVkXG4gICAgICAgICAgICBpZiAoIV9pcy5vYmplY3QoaW5zdGFuY2UpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGV2ZW50cyBpZiBkZWJ1Z2dpbmdcbiAgICAgICAgICAgIGlmIChjb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gY29uZmlnLmV2ZW50cy5jb25jYXQoWydzZXR1cCcsICdzdGF0ZWNoYW5nZScsICdlbnRlcmZ1bGxzY3JlZW4nLCAnZXhpdGZ1bGxzY3JlZW4nLCAnY2FwdGlvbnNlbmFibGVkJywgJ2NhcHRpb25zZGlzYWJsZWQnXSk7XG5cbiAgICAgICAgICAgICAgICBfb24oaW5zdGFuY2UuZ2V0Q29udGFpbmVyKCksIGV2ZW50cy5qb2luKCcgJyksIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFtjb25maWcubG9nUHJlZml4LCAnZXZlbnQ6JywgZXZlbnQudHlwZV0uam9pbignICcpLCBldmVudC5kZXRhaWwucGx5cik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgICAgICBfZXZlbnQoaW5zdGFuY2UuZ2V0Q29udGFpbmVyKCksICdzZXR1cCcsIHRydWUsIHtcbiAgICAgICAgICAgICAgICBwbHlyOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEFkZCB0byByZXR1cm4gYXJyYXkgZXZlbiBpZiBpdCdzIGFscmVhZHkgc2V0dXBcbiAgICAgICAgICAgIGluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlcztcbiAgICB9XG5cbiAgICAvLyBHZXQgYWxsIGluc3RhbmNlcyB3aXRoaW4gYSBwcm92aWRlZCBjb250YWluZXJcbiAgICBmdW5jdGlvbiBnZXQoY29udGFpbmVyKSB7XG4gICAgICAgIGlmIChfaXMuc3RyaW5nKGNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgIC8vIEdldCBzZWxlY3RvciBpZiBzdHJpbmcgcGFzc2VkXG4gICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSBpZiAoX2lzLnVuZGVmaW5lZChjb250YWluZXIpKSB7XG4gICAgICAgICAgICAvLyBVc2UgYm9keSBieSBkZWZhdWx0IHRvIGdldCBhbGwgb24gcGFnZVxuICAgICAgICAgICAgY29udGFpbmVyID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBIVE1MIGVsZW1lbnRcbiAgICAgICAgaWYgKF9pcy5odG1sRWxlbWVudChjb250YWluZXIpKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLicgKyBkZWZhdWx0cy5jbGFzc2VzLnNldHVwKSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZXMgPSBbXTtcblxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfaXMub2JqZWN0KGVsZW1lbnQucGx5cikpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzLnB1c2goZWxlbWVudC5wbHlyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZXR1cDogICAgICBzZXR1cCxcbiAgICAgICAgc3VwcG9ydGVkOiAgc3VwcG9ydGVkLFxuICAgICAgICBsb2FkU3ByaXRlOiBsb2FkU3ByaXRlLFxuICAgICAgICBnZXQ6ICAgICAgICBnZXRcbiAgICB9O1xufSkpO1xuXG4vLyBDdXN0b20gZXZlbnQgcG9seWZpbGxcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudC9DdXN0b21FdmVudFxuKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwgeyBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkIH07XG4gICAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgICAgcmV0dXJuIGV2dDtcbiAgICB9XG5cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuXG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gQ3VzdG9tRXZlbnQ7XG59KSgpO1xuIiwiLypcbiAgICAgXyBfICAgICAgXyAgICAgICBfXG4gX19ffCAoXykgX19ffCB8IF9fICAoXylfX19cbi8gX198IHwgfC8gX198IHwvIC8gIHwgLyBfX3xcblxcX18gXFwgfCB8IChfX3wgICA8IF8gfCBcXF9fIFxcXG58X19fL198X3xcXF9fX3xffFxcXyhfKS8gfF9fXy9cbiAgICAgICAgICAgICAgICAgICB8X18vXG5cbiBWZXJzaW9uOiAxLjYuMFxuICBBdXRob3I6IEtlbiBXaGVlbGVyXG4gV2Vic2l0ZTogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvXG4gICAgRG9jczogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvL3NsaWNrXG4gICAgUmVwbzogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGlja1xuICBJc3N1ZXM6IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2svaXNzdWVzXG5cbiAqL1xuLyogZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQsIGRlZmluZSwgalF1ZXJ5LCBzZXRJbnRlcnZhbCwgY2xlYXJJbnRlcnZhbCAqL1xuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxuXG59KGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFNsaWNrID0gd2luZG93LlNsaWNrIHx8IHt9O1xuXG4gICAgU2xpY2sgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGluc3RhbmNlVWlkID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBTbGljayhlbGVtZW50LCBzZXR0aW5ncykge1xuXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMsIGRhdGFTZXR0aW5ncztcblxuICAgICAgICAgICAgXy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhcHBlbmRBcnJvd3M6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXBwZW5kRG90czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgYXNOYXZGb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJldkFycm93OiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHRhYmluZGV4PVwiMFwiIHJvbGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgbmV4dEFycm93OiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdGFiaW5kZXg9XCIwXCIgcm9sZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICc1MHB4JyxcbiAgICAgICAgICAgICAgICBjc3NFYXNlOiAnZWFzZScsXG4gICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nOiBmdW5jdGlvbihzbGlkZXIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcm9sZT1cIm5vbmVcIiByb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCIwXCIgLz4nKS50ZXh0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRvdHNDbGFzczogJ3NsaWNrLWRvdHMnLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgICAgICAgICAgICAgICBmYWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgbGF6eUxvYWQ6ICdvbmRlbWFuZCcsXG4gICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzcG9uZFRvOiAnd2luZG93JyxcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgcnRsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZTogJycsXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxuICAgICAgICAgICAgICAgIHN3aXBlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdG91Y2hNb3ZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoVGhyZXNob2xkOiA1LFxuICAgICAgICAgICAgICAgIHVzZUNTUzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FpdEZvckFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxMDAwXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfLmluaXRpYWxzID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9QbGF5VGltZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbjogMCxcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAxLFxuICAgICAgICAgICAgICAgICRkb3RzOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0SGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgICAgIGxvYWRJbmRleDogMCxcbiAgICAgICAgICAgICAgICAkbmV4dEFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgICRwcmV2QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGVDb3VudDogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkZVdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZVRyYWNrOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZXM6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgc3dpcGVMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgICRsaXN0OiBudWxsLFxuICAgICAgICAgICAgICAgIHRvdWNoT2JqZWN0OiB7fSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5zbGlja2VkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscyk7XG5cbiAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5icmVha3BvaW50cyA9IFtdO1xuICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3MgPSBbXTtcbiAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaGlkZGVuID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IG51bGw7XG4gICAgICAgICAgICBfLnJvd0NvdW50ID0gMTtcbiAgICAgICAgICAgIF8uc2hvdWxkQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgXy4kc2xpZGVyID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAwO1xuICAgICAgICAgICAgXy53aW5kb3dUaW1lciA9IG51bGw7XG5cbiAgICAgICAgICAgIGRhdGFTZXR0aW5ncyA9ICQoZWxlbWVudCkuZGF0YSgnc2xpY2snKSB8fCB7fTtcblxuICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8uZGVmYXVsdHMsIHNldHRpbmdzLCBkYXRhU2V0dGluZ3MpO1xuXG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG5cbiAgICAgICAgICAgIF8ub3JpZ2luYWxTZXR0aW5ncyA9IF8ub3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnbW96SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnbW96dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnd2Via2l0SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYXV0b1BsYXkgPSAkLnByb3h5KF8uYXV0b1BsYXksIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUNsZWFyID0gJC5wcm94eShfLmF1dG9QbGF5Q2xlYXIsIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUl0ZXJhdG9yID0gJC5wcm94eShfLmF1dG9QbGF5SXRlcmF0b3IsIF8pO1xuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSA9ICQucHJveHkoXy5jaGFuZ2VTbGlkZSwgXyk7XG4gICAgICAgICAgICBfLmNsaWNrSGFuZGxlciA9ICQucHJveHkoXy5jbGlja0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZWxlY3RIYW5kbGVyID0gJC5wcm94eShfLnNlbGVjdEhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZXRQb3NpdGlvbiA9ICQucHJveHkoXy5zZXRQb3NpdGlvbiwgXyk7XG4gICAgICAgICAgICBfLnN3aXBlSGFuZGxlciA9ICQucHJveHkoXy5zd2lwZUhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5kcmFnSGFuZGxlciA9ICQucHJveHkoXy5kcmFnSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmtleUhhbmRsZXIgPSAkLnByb3h5KF8ua2V5SGFuZGxlciwgXyk7XG5cbiAgICAgICAgICAgIF8uaW5zdGFuY2VVaWQgPSBpbnN0YW5jZVVpZCsrO1xuXG4gICAgICAgICAgICAvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuICAgICAgICAgICAgLy8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKG11c3Qgc3RhcnQgd2l0aCA8KVxuICAgICAgICAgICAgLy8gRXh0cmFjdGVkIGZyb20galF1ZXJ5IHYxLjExIHNvdXJjZVxuICAgICAgICAgICAgXy5odG1sRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKikkLztcblxuXG4gICAgICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcbiAgICAgICAgICAgIF8uaW5pdCh0cnVlKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNsaWNrO1xuXG4gICAgfSgpKTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hY3RpdmF0ZUFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stYWN0aXZlJykuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAnZmFsc2UnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hZGRTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0FkZCA9IGZ1bmN0aW9uKG1hcmt1cCwgaW5kZXgsIGFkZEJlZm9yZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBhZGRCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA8IDAgfHwgKGluZGV4ID49IF8uc2xpZGVDb3VudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgXy4kc2xpZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEJlZm9yZShfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEFmdGVyKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFkZEJlZm9yZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEgJiYgXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgXy4kbGlzdC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRhcmdldEhlaWdodFxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlID0gZnVuY3Rpb24odGFyZ2V0TGVmdCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgYW5pbVByb3BzID0ge30sXG4gICAgICAgICAgICBfID0gdGhpcztcblxuICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gLXRhcmdldExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50TGVmdCA9IC0oXy5jdXJyZW50TGVmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IF8uY3VycmVudExlZnRcbiAgICAgICAgICAgICAgICB9KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogXy5vcHRpb25zLnNwZWVkLFxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IF8ub3B0aW9ucy5lYXNpbmcsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uKG5vdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gTWF0aC5jZWlsKG5vdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgwcHgsJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gTWF0aC5jZWlsKHRhcmdldExlZnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgwcHgsJyArIHRhcmdldExlZnQgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLm9wdGlvbnMuYXNOYXZGb3I7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAmJiBhc05hdkZvciAhPT0gbnVsbCApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gJChhc05hdkZvcikubm90KF8uJHNsaWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNOYXZGb3I7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFzTmF2Rm9yID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAhPT0gbnVsbCAmJiB0eXBlb2YgYXNOYXZGb3IgPT09ICdvYmplY3QnICkge1xuICAgICAgICAgICAgYXNOYXZGb3IuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKS5zbGljaygnZ2V0U2xpY2snKTtcbiAgICAgICAgICAgICAgICBpZighdGFyZ2V0LnVuc2xpY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc2xpZGVIYW5kbGVyKGluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb24gPSBmdW5jdGlvbihzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gXy50cmFuc2Zvcm1UeXBlICsgJyAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnb3BhY2l0eSAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheVRpbWVyID0gc2V0SW50ZXJ2YWwoIF8uYXV0b1BsYXlJdGVyYXRvciwgXy5vcHRpb25zLmF1dG9wbGF5U3BlZWQgKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUNsZWFyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmF1dG9QbGF5VGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIGlmICggIV8ucGF1c2VkICYmICFfLmludGVycnVwdGVkICYmICFfLmZvY3Vzc2VkICkge1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8uZGlyZWN0aW9uID09PSAxICYmICggXy5jdXJyZW50U2xpZGUgKyAxICkgPT09ICggXy5zbGlkZUNvdW50IC0gMSApKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbHNlIGlmICggXy5kaXJlY3Rpb24gPT09IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggXy5jdXJyZW50U2xpZGUgLSAxID09PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlVG8gKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgPSAkKF8ub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ID0gJChfLm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcblxuICAgICAgICAgICAgaWYoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucHJlcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkKCBfLiRuZXh0QXJyb3cgKVxuXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZERvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBpLCBkb3Q7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICAgICAgZG90ID0gJCgnPHVsIC8+JykuYWRkQ2xhc3MoXy5vcHRpb25zLmRvdHNDbGFzcyk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPD0gXy5nZXREb3RDb3VudCgpOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBkb3QuYXBwZW5kKCQoJzxsaSAvPicpLmFwcGVuZChfLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcywgXywgaSkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kZG90cyA9IGRvdC5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kRG90cyk7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuZmluZCgnbGknKS5maXJzdCgpLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRPdXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbiggXy5vcHRpb25zLnNsaWRlICsgJzpub3QoLnNsaWNrLWNsb25lZCknKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleClcbiAgICAgICAgICAgICAgICAuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJywgJChlbGVtZW50KS5hdHRyKCdzdHlsZScpIHx8ICcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1zbGlkZXInKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrID0gKF8uc2xpZGVDb3VudCA9PT0gMCkgP1xuICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLmFwcGVuZFRvKF8uJHNsaWRlcikgOlxuICAgICAgICAgICAgXy4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICBfLiRsaXN0ID0gXy4kc2xpZGVUcmFjay53cmFwKFxuICAgICAgICAgICAgJzxkaXYgYXJpYS1saXZlPVwicG9saXRlXCIgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpO1xuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcygnb3BhY2l0eScsIDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIpLm5vdCgnW3NyY10nKS5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuXG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcblxuICAgICAgICBfLmJ1aWxkRG90cygpO1xuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuXG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3QuYWRkQ2xhc3MoJ2RyYWdnYWJsZScpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYSwgYiwgYywgbmV3U2xpZGVzLCBudW1PZlNsaWRlcywgb3JpZ2luYWxTbGlkZXMsc2xpZGVzUGVyU2VjdGlvbjtcblxuICAgICAgICBuZXdTbGlkZXMgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVyLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAxKSB7XG5cbiAgICAgICAgICAgIHNsaWRlc1BlclNlY3Rpb24gPSBfLm9wdGlvbnMuc2xpZGVzUGVyUm93ICogXy5vcHRpb25zLnJvd3M7XG4gICAgICAgICAgICBudW1PZlNsaWRlcyA9IE1hdGguY2VpbChcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5sZW5ndGggLyBzbGlkZXNQZXJTZWN0aW9uXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IoYSA9IDA7IGEgPCBudW1PZlNsaWRlczsgYSsrKXtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBmb3IoYiA9IDA7IGIgPCBfLm9wdGlvbnMucm93czsgYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGMgPSAwOyBjIDwgXy5vcHRpb25zLnNsaWRlc1BlclJvdzsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gKGEgKiBzbGlkZXNQZXJTZWN0aW9uICsgKChiICogXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyBjKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld1NsaWRlcy5hcHBlbmRDaGlsZChzbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChuZXdTbGlkZXMpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCc6KDEwMCAvIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmUgPSBmdW5jdGlvbihpbml0aWFsLCBmb3JjZVVwZGF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrcG9pbnQsIHRhcmdldEJyZWFrcG9pbnQsIHJlc3BvbmRUb1dpZHRoLCB0cmlnZ2VyQnJlYWtwb2ludCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2xpZGVyV2lkdGggPSBfLiRzbGlkZXIud2lkdGgoKTtcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgJCh3aW5kb3cpLndpZHRoKCk7XG5cbiAgICAgICAgaWYgKF8ucmVzcG9uZFRvID09PSAnd2luZG93Jykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3NsaWRlcicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gc2xpZGVyV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdtaW4nKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IE1hdGgubWluKHdpbmRvd1dpZHRoLCBzbGlkZXJXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5yZXNwb25zaXZlICYmXG4gICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGggJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBmb3IgKGJyZWFrcG9pbnQgaW4gXy5icmVha3BvaW50cykge1xuICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPCBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPiBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gXy5hY3RpdmVCcmVha3BvaW50IHx8IGZvcmNlVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYnJlYWtwb2ludHMgZHVyaW5nIGFuIGFjdHVhbCBicmVhay4gbm90IG9uIGluaXRpYWxpemUuXG4gICAgICAgICAgICBpZiggIWluaXRpYWwgJiYgdHJpZ2dlckJyZWFrcG9pbnQgIT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdicmVha3BvaW50JywgW18sIHRyaWdnZXJCcmVha3BvaW50XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hhbmdlU2xpZGUgPSBmdW5jdGlvbihldmVudCwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgIGluZGV4T2Zmc2V0LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0O1xuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBhIGxpbmssIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgIGlmKCR0YXJnZXQuaXMoJ2EnKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBub3QgdGhlIDxsaT4gZWxlbWVudCAoaWU6IGEgY2hpbGQpLCBmaW5kIHRoZSA8bGk+LlxuICAgICAgICBpZighJHRhcmdldC5pcygnbGknKSkge1xuICAgICAgICAgICAgJHRhcmdldCA9ICR0YXJnZXQuY2xvc2VzdCgnbGknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuZXZlbk9mZnNldCA9IChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApO1xuICAgICAgICBpbmRleE9mZnNldCA9IHVuZXZlbk9mZnNldCA/IDAgOiAoXy5zbGlkZUNvdW50IC0gXy5jdXJyZW50U2xpZGUpICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5tZXNzYWdlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIGluZGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgKyBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2luZGV4JzpcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5kYXRhLmluZGV4ID09PSAwID8gMCA6XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXggfHwgJHRhcmdldC5pbmRleCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jaGVja05hdmlnYWJsZShpbmRleCksIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgJHRhcmdldC5jaGlsZHJlbigpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBuYXZpZ2FibGVzLCBwcmV2TmF2aWdhYmxlO1xuXG4gICAgICAgIG5hdmlnYWJsZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKTtcbiAgICAgICAgcHJldk5hdmlnYWJsZSA9IDA7XG4gICAgICAgIGlmIChpbmRleCA+IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuIGluIG5hdmlnYWJsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZOYXZpZ2FibGUgPSBuYXZpZ2FibGVzW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgJiYgXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihfLnZpc2liaWxpdHlDaGFuZ2UsIF8udmlzaWJpbGl0eSk7XG5cbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ub3JpZW50YXRpb25DaGFuZ2UpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5yZXNpemUpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub2ZmKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcbiAgICAgICAgJChkb2N1bWVudCkub2ZmKCdyZWFkeS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgb3JpZ2luYWxTbGlkZXM7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAxKSB7XG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlcy5jaGlsZHJlbigpLmNoaWxkcmVuKCk7XG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG9yaWdpbmFsU2xpZGVzKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGlja0hhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5zaG91bGRDbGljayA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihyZWZyZXNoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICBfLmNsZWFuVXBFdmVudHMoKTtcblxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5kZXRhY2goKTtcblxuICAgICAgICBpZiAoXy4kZG90cykge1xuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKCBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywnJyk7XG5cbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMucHJldkFycm93ICkpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5uZXh0QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoXy4kc2xpZGVzKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKVxuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdpbmFsU3R5bGluZycpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRsaXN0LmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYXBwZW5kKF8uJHNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfLmNsZWFuVXBSb3dzKCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZXInKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgIF8udW5zbGlja2VkID0gdHJ1ZTtcblxuICAgICAgICBpZighcmVmcmVzaCkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2Rlc3Ryb3knLCBbX10pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICcnO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlID0gZnVuY3Rpb24oc2xpZGVJbmRleCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGVPdXQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrRmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChmaWx0ZXIgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuZmlsdGVyKGZpbHRlcikuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mb2N1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJylcbiAgICAgICAgICAgIC5vbignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycsXG4gICAgICAgICAgICAgICAgJyo6bm90KC5zbGljay1hcnJvdyknLCBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHZhciAkc2YgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy5wYXVzZU9uRm9jdXMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9jdXNzZWQgPSAkc2YuaXMoJzpmb2N1cycpO1xuICAgICAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldEN1cnJlbnQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tDdXJyZW50U2xpZGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBfLmN1cnJlbnRTbGlkZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0RG90Q291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGJyZWFrUG9pbnQgPSAwO1xuICAgICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICAgIHZhciBwYWdlclF0eSA9IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIGlmKCFfLm9wdGlvbnMuYXNOYXZGb3IpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gMSArIE1hdGguY2VpbCgoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnZXJRdHkgLSAxO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRMZWZ0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQsXG4gICAgICAgICAgICB2ZXJ0aWNhbEhlaWdodCxcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIHRhcmdldFNsaWRlO1xuXG4gICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICB2ZXJ0aWNhbEhlaWdodCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IChfLnNsaWRlV2lkdGggKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKHZlcnRpY2FsSGVpZ2h0ICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA+IF8uc2xpZGVDb3VudCAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogXy5zbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogdmVydGljYWxIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSAtIF8uc2xpZGVXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiBfLnNsaWRlV2lkdGgpICogLTEpICsgXy5zbGlkZU9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMSkgKyB2ZXJ0aWNhbE9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCArPSAoXy4kbGlzdC53aWR0aCgpIC0gdGFyZ2V0U2xpZGUub3V0ZXJXaWR0aCgpKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0TGVmdDtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0T3B0aW9uID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBfLm9wdGlvbnNbb3B0aW9uXTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSAwLFxuICAgICAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgICBtYXg7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcbiAgICAgICAgICAgIGNvdW50ZXIgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudCAqIDI7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IG1heCkge1xuICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGJyZWFrUG9pbnQpO1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleGVzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGlkZUNvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkLCBzd2lwZWRTbGlkZSwgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlID8gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgOiAwO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1zbGlkZScpLmVhY2goZnVuY3Rpb24oaW5kZXgsIHNsaWRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlLm9mZnNldExlZnQgLSBjZW50ZXJPZmZzZXQgKyAoJChzbGlkZSkub3V0ZXJXaWR0aCgpIC8gMikgPiAoXy5zd2lwZUxlZnQgKiAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVkU2xpZGUgPSBzbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQgPSBNYXRoLmFicygkKHN3aXBlZFNsaWRlKS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykgLSBfLmN1cnJlbnRTbGlkZSkgfHwgMTtcblxuICAgICAgICAgICAgcmV0dXJuIHNsaWRlc1RyYXZlcnNlZDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nb1RvID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR29UbyA9IGZ1bmN0aW9uKHNsaWRlLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgIGluZGV4OiBwYXJzZUludChzbGlkZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZG9udEFuaW1hdGUpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oY3JlYXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCEkKF8uJHNsaWRlcikuaGFzQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJykpIHtcblxuICAgICAgICAgICAgJChfLiRzbGlkZXIpLmFkZENsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuXG4gICAgICAgICAgICBfLmJ1aWxkUm93cygpO1xuICAgICAgICAgICAgXy5idWlsZE91dCgpO1xuICAgICAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICAgICAgXy5zdGFydExvYWQoKTtcbiAgICAgICAgICAgIF8ubG9hZFNsaWRlcigpO1xuICAgICAgICAgICAgXy5pbml0aWFsaXplRXZlbnRzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSh0cnVlKTtcbiAgICAgICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcmVhdGlvbikge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2luaXQnLCBbX10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLmluaXRBREEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIF8uJHNsaWRlcy5hZGQoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hdHRyKCdyb2xlJywgJ2xpc3Rib3gnKTtcblxuICAgICAgICBfLiRzbGlkZXMubm90KF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgJ3JvbGUnOiAnb3B0aW9uJyxcbiAgICAgICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgaSArICcnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF8uJGRvdHMuYXR0cigncm9sZScsICd0YWJsaXN0JykuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICdwcmVzZW50YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6ICdmYWxzZScsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogJ25hdmlnYXRpb24nICsgXy5pbnN0YW5jZVVpZCArIGkgKyAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBpICsgJydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZpcnN0KCkuYXR0cignYXJpYS1zZWxlY3RlZCcsICd0cnVlJykuZW5kKClcbiAgICAgICAgICAgICAgICAuZmluZCgnYnV0dG9uJykuYXR0cigncm9sZScsICdidXR0b24nKS5lbmQoKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCdkaXYnKS5hdHRyKCdyb2xlJywgJ3Rvb2xiYXInKTtcbiAgICAgICAgfVxuICAgICAgICBfLmFjdGl2YXRlQURBKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXREb3RFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cykub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCdcbiAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciA9PT0gdHJ1ZSApIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucGF1c2VPbkhvdmVyICkge1xuXG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG5cbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdzdGFydCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnbW92ZSdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbihfLnZpc2liaWxpdHlDaGFuZ2UsICQucHJveHkoXy52aXNpYmlsaXR5LCBfKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ub3JpZW50YXRpb25DaGFuZ2UsIF8pKTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLnJlc2l6ZSwgXykpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub24oJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vbignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdyZWFkeS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRVSSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5zaG93KCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmtleUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgIC8vRG9udCBzbGlkZSBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgZm9ybSBmaWVsZHMgYW5kIGFycm93IGtleXMgYXJlIHByZXNzZWRcbiAgICAgICAgaWYoIWV2ZW50LnRhcmdldC50YWdOYW1lLm1hdGNoKCdURVhUQVJFQXxJTlBVVHxTRUxFQ1QnKSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAnbmV4dCcgOiAgJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAncHJldmlvdXMnIDogJ25leHQnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGxvYWRSYW5nZSwgY2xvbmVSYW5nZSwgcmFuZ2VTdGFydCwgcmFuZ2VFbmQ7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZEltYWdlcyhpbWFnZXNTY29wZSkge1xuXG4gICAgICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIGltYWdlc1Njb3BlKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbGF6eScpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCAxMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmMnLCBpbWFnZVNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAxIH0sIDIwMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFtfLCBpbWFnZSwgaW1hZ2VTb3VyY2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5jdXJyZW50U2xpZGUgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IE1hdGgubWF4KDAsIF8uY3VycmVudFNsaWRlIC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gMiArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpICsgXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5vcHRpb25zLmluZmluaXRlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIF8uY3VycmVudFNsaWRlIDogXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICByYW5nZUVuZCA9IE1hdGguY2VpbChyYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydCA+IDApIHJhbmdlU3RhcnQtLTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbmQgPD0gXy5zbGlkZUNvdW50KSByYW5nZUVuZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZFJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kKTtcbiAgICAgICAgbG9hZEltYWdlcyhsb2FkUmFuZ2UpO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoMCwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZShfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICogLTEpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sb2FkU2xpZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uaW5pdFVJKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ3Byb2dyZXNzaXZlJykge1xuICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubmV4dCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja05leHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBhdXNlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGF1c2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG4gICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGxheSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICBfLm9wdGlvbnMuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucG9zdFNsaWRlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FmdGVyQ2hhbmdlJywgW18sIGluZGV4XSk7XG5cbiAgICAgICAgICAgIF8uYW5pbWF0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1ByZXYgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByb2dyZXNzaXZlTGF6eUxvYWQgPSBmdW5jdGlvbiggdHJ5Q291bnQgKSB7XG5cbiAgICAgICAgdHJ5Q291bnQgPSB0cnlDb3VudCB8fCAxO1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICRpbWdzVG9Mb2FkID0gJCggJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyICksXG4gICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgIGltYWdlU291cmNlLFxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQ7XG5cbiAgICAgICAgaWYgKCAkaW1nc1RvTG9hZC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIGltYWdlID0gJGltZ3NUb0xvYWQuZmlyc3QoKTtcbiAgICAgICAgICAgIGltYWdlU291cmNlID0gaW1hZ2UuYXR0cignZGF0YS1sYXp5Jyk7XG4gICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCAnc3JjJywgaW1hZ2VTb3VyY2UgKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5JylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZGVkJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG4gICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmICggdHJ5Q291bnQgPCAzICkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiB0cnkgdG8gbG9hZCB0aGUgaW1hZ2UgMyB0aW1lcyxcbiAgICAgICAgICAgICAgICAgICAgICogbGVhdmUgYSBzbGlnaHQgZGVsYXkgc28gd2UgZG9uJ3QgZ2V0XG4gICAgICAgICAgICAgICAgICAgICAqIHNlcnZlcnMgYmxvY2tpbmcgdGhlIHJlcXVlc3QuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCggdHJ5Q291bnQgKyAxICk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhbGxJbWFnZXNMb2FkZWQnLCBbIF8gXSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oIGluaXRpYWxpemluZyApIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGN1cnJlbnRTbGlkZSwgbGFzdFZpc2libGVJbmRleDtcblxuICAgICAgICBsYXN0VmlzaWJsZUluZGV4ID0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcblxuICAgICAgICAvLyBpbiBub24taW5maW5pdGUgc2xpZGVycywgd2UgZG9uJ3Qgd2FudCB0byBnbyBwYXN0IHRoZVxuICAgICAgICAvLyBsYXN0IHZpc2libGUgaW5kZXguXG4gICAgICAgIGlmKCAhXy5vcHRpb25zLmluZmluaXRlICYmICggXy5jdXJyZW50U2xpZGUgPiBsYXN0VmlzaWJsZUluZGV4ICkpIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gbGFzdFZpc2libGVJbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGxlc3Mgc2xpZGVzIHRoYW4gdG8gc2hvdywgZ28gdG8gc3RhcnQuXG4gICAgICAgIGlmICggXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuXG4gICAgICAgIF8uZGVzdHJveSh0cnVlKTtcblxuICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzLCB7IGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlIH0pO1xuXG4gICAgICAgIF8uaW5pdCgpO1xuXG4gICAgICAgIGlmKCAhaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBjdXJyZW50U2xpZGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWdpc3RlckJyZWFrcG9pbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBicmVha3BvaW50LCBjdXJyZW50QnJlYWtwb2ludCwgbCxcbiAgICAgICAgICAgIHJlc3BvbnNpdmVTZXR0aW5ncyA9IF8ub3B0aW9ucy5yZXNwb25zaXZlIHx8IG51bGw7XG5cbiAgICAgICAgaWYgKCAkLnR5cGUocmVzcG9uc2l2ZVNldHRpbmdzKSA9PT0gJ2FycmF5JyAmJiByZXNwb25zaXZlU2V0dGluZ3MubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IF8ub3B0aW9ucy5yZXNwb25kVG8gfHwgJ3dpbmRvdyc7XG5cbiAgICAgICAgICAgIGZvciAoIGJyZWFrcG9pbnQgaW4gcmVzcG9uc2l2ZVNldHRpbmdzICkge1xuXG4gICAgICAgICAgICAgICAgbCA9IF8uYnJlYWtwb2ludHMubGVuZ3RoLTE7XG4gICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uYnJlYWtwb2ludDtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIGFuZCBjdXQgb3V0IGFueSBleGlzdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBvbmVzIHdpdGggdGhlIHNhbWUgYnJlYWtwb2ludCBudW1iZXIsIHdlIGRvbid0IHdhbnQgZHVwZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNwbGljZShsLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbY3VycmVudEJyZWFrcG9pbnRdID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLnNldHRpbmdzO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICggXy5vcHRpb25zLm1vYmlsZUZpcnN0ICkgPyBhLWIgOiBiLWE7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVUcmFja1xuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAmJiBfLmN1cnJlbnRTbGlkZSAhPT0gMCkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG5cbiAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuICAgICAgICBfLmJ1aWxkRG90cygpO1xuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoZmFsc2UsIHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgXy5wYXVzZWQgPSAhXy5vcHRpb25zLmF1dG9wbGF5O1xuICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3JlSW5pdCcsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgIT09IF8ud2luZG93V2lkdGgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfLndpbmRvd0RlbGF5KTtcbiAgICAgICAgICAgIF8ud2luZG93RGVsYXkgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgICAgICAgICBpZiggIV8udW5zbGlja2VkICkgeyBfLnNldFBvc2l0aW9uKCk7IH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVtb3ZlU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tSZW1vdmUgPSBmdW5jdGlvbihpbmRleCwgcmVtb3ZlQmVmb3JlLCByZW1vdmVBbGwpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmVtb3ZlQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IDAgOiBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAtLWluZGV4IDogaW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDwgMSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBfLnNsaWRlQ291bnQgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmIChyZW1vdmVBbGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpbmRleCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0Q1NTID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge30sXG4gICAgICAgICAgICB4LCB5O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcbiAgICAgICAgeSA9IF8ucG9zaXRpb25Qcm9wID09ICd0b3AnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcblxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgJyArIHkgKyAnLCAwcHgpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXREaW1lbnNpb25zID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICgnMHB4ICcgKyBfLm9wdGlvbnMuY2VudGVyUGFkZGluZylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJGxpc3QuaGVpZ2h0KF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IChfLm9wdGlvbnMuY2VudGVyUGFkZGluZyArICcgMHB4JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8ubGlzdFdpZHRoID0gXy4kbGlzdC53aWR0aCgpO1xuICAgICAgICBfLmxpc3RIZWlnaHQgPSBfLiRsaXN0LmhlaWdodCgpO1xuXG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGggLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKChfLnNsaWRlV2lkdGggKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aCg1MDAwICogXy5zbGlkZUNvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmhlaWdodChNYXRoLmNlaWwoKF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVyV2lkdGgodHJ1ZSkgLSBfLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS53aWR0aChfLnNsaWRlV2lkdGggLSBvZmZzZXQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRGYWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLnNsaWRlV2lkdGggKiBpbmRleCkgKiAtMTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5jc3Moe1xuICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmNzcygnaGVpZ2h0JywgdGFyZ2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRPcHRpb24gPVxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlja1NldE9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhY2NlcHRzIGFyZ3VtZW50cyBpbiBmb3JtYXQgb2Y6XG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNpbmdsZSBvcHRpb24ncyB2YWx1ZTpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2V0IG9mIHJlc3BvbnNpdmUgb3B0aW9uczpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCAncmVzcG9uc2l2ZScsIFt7fSwgLi4uXSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciB1cGRhdGluZyBtdWx0aXBsZSB2YWx1ZXMgYXQgb25jZSAobm90IHJlc3BvbnNpdmUpXG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgeyAnb3B0aW9uJzogdmFsdWUsIC4uLiB9LCByZWZyZXNoIClcbiAgICAgICAgICovXG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBsLCBpdGVtLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoID0gZmFsc2UsIHR5cGU7XG5cbiAgICAgICAgaWYoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdvYmplY3QnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHR5cGUgPSAnbXVsdGlwbGUnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdzdHJpbmcnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzJdO1xuXG4gICAgICAgICAgICBpZiAoIGFyZ3VtZW50c1swXSA9PT0gJ3Jlc3BvbnNpdmUnICYmICQudHlwZSggYXJndW1lbnRzWzFdICkgPT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3Jlc3BvbnNpdmUnO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgYXJndW1lbnRzWzFdICE9PSAndW5kZWZpbmVkJyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2luZ2xlJztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHR5cGUgPT09ICdzaW5nbGUnICkge1xuXG4gICAgICAgICAgICBfLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ211bHRpcGxlJyApIHtcblxuICAgICAgICAgICAgJC5lYWNoKCBvcHRpb24gLCBmdW5jdGlvbiggb3B0LCB2YWwgKSB7XG5cbiAgICAgICAgICAgICAgICBfLm9wdGlvbnNbb3B0XSA9IHZhbDtcblxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAncmVzcG9uc2l2ZScgKSB7XG5cbiAgICAgICAgICAgIGZvciAoIGl0ZW0gaW4gdmFsdWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggJC50eXBlKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSApICE9PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlID0gWyB2YWx1ZVtpdGVtXSBdO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsID0gXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSByZXNwb25zaXZlIG9iamVjdCBhbmQgc3BsaWNlIG91dCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCggdmFsdWVbaXRlbV0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHJlZnJlc2ggKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXREaW1lbnNpb25zKCk7XG5cbiAgICAgICAgXy5zZXRIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNldENTUyhfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2V0RmFkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3NldFBvc2l0aW9uJywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UHJvcHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuXG4gICAgICAgIF8ucG9zaXRpb25Qcm9wID0gXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlID8gJ3RvcCcgOiAnbGVmdCc7XG5cbiAgICAgICAgaWYgKF8ucG9zaXRpb25Qcm9wID09PSAndG9wJykge1xuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5XZWJraXRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5tc1RyYW5zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy51c2VDU1MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmZhZGUgKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBfLm9wdGlvbnMuekluZGV4ID09PSAnbnVtYmVyJyApIHtcbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnpJbmRleCA8IDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IF8uZGVmYXVsdHMuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5PVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnT1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW8tdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnT1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ01velRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1vei10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdNb3pUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS5Nb3pQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS53ZWJraXRUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnd2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdtc1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1zLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ21zVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAndHJhbnNpdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgXy50cmFuc2Zvcm1zRW5hYmxlZCA9IF8ub3B0aW9ucy51c2VUcmFuc2Zvcm0gJiYgKF8uYW5pbVR5cGUgIT09IG51bGwgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpO1xuICAgIH07XG5cblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldCwgYWxsU2xpZGVzLCBpbmRleE9mZnNldCwgcmVtYWluZGVyO1xuXG4gICAgICAgIGFsbFNsaWRlcyA9IF8uJHNsaWRlclxuICAgICAgICAgICAgLmZpbmQoJy5zbGljay1zbGlkZScpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jdXJyZW50Jyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gY2VudGVyT2Zmc2V0ICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSAxKSAtIGNlbnRlck9mZnNldCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4IC0gY2VudGVyT2Zmc2V0LCBpbmRleCArIGNlbnRlck9mZnNldCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gY2VudGVyT2Zmc2V0ICsgMSwgaW5kZXhPZmZzZXQgKyBjZW50ZXJPZmZzZXQgKyAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShhbGxTbGlkZXMubGVuZ3RoIC0gMSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gXy5zbGlkZUNvdW50IC0gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5lcShpbmRleClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSkge1xuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCwgaW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsbFNsaWRlcy5sZW5ndGggPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICByZW1haW5kZXIgPSBfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIGluZGV4T2Zmc2V0ID0gXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIGluZGV4IDogaW5kZXg7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgJiYgKF8uc2xpZGVDb3VudCAtIGluZGV4KSA8IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gcmVtYWluZGVyKSwgaW5kZXhPZmZzZXQgKyByZW1haW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQsIGluZGV4T2Zmc2V0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdvbmRlbWFuZCcpIHtcbiAgICAgICAgICAgIF8ubGF6eUxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXR1cEluZmluaXRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgc2xpZGVJbmRleCwgaW5maW5pdGVDb3VudDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5jZW50ZXJNb2RlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlICYmIF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBzbGlkZUluZGV4ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gXy5zbGlkZUNvdW50OyBpID4gKF8uc2xpZGVDb3VudCAtXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50KTsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGluZmluaXRlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggKyBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oXy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoJ3NsaWNrLWNsb25lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKS5maW5kKCdbaWRdJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdpZCcsICcnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24oIHRvZ2dsZSApIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICF0b2dnbGUgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRvZ2dsZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2VsZWN0SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHZhciB0YXJnZXRFbGVtZW50ID1cbiAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5pcygnLnNsaWNrLXNsaWRlJykgP1xuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KSA6XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpLnBhcmVudHMoJy5zbGljay1zbGlkZScpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHRhcmdldEVsZW1lbnQuYXR0cignZGF0YS1zbGljay1pbmRleCcpKTtcblxuICAgICAgICBpZiAoIWluZGV4KSBpbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKGluZGV4KTtcbiAgICAgICAgICAgIF8uYXNOYXZGb3IoaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLnNsaWRlSGFuZGxlcihpbmRleCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWRlSGFuZGxlciA9IGZ1bmN0aW9uKGluZGV4LCBzeW5jLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciB0YXJnZXRTbGlkZSwgYW5pbVNsaWRlLCBvbGRTbGlkZSwgc2xpZGVMZWZ0LCB0YXJnZXRMZWZ0ID0gbnVsbCxcbiAgICAgICAgICAgIF8gPSB0aGlzLCBuYXZUYXJnZXQ7XG5cbiAgICAgICAgc3luYyA9IHN5bmMgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlICYmIF8ub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlICYmIF8uY3VycmVudFNsaWRlID09PSBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYXNOYXZGb3IoaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0U2xpZGUgPSBpbmRleDtcbiAgICAgICAgdGFyZ2V0TGVmdCA9IF8uZ2V0TGVmdCh0YXJnZXRTbGlkZSk7XG4gICAgICAgIHNsaWRlTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy5jdXJyZW50TGVmdCA9IF8uc3dpcGVMZWZ0ID09PSBudWxsID8gc2xpZGVMZWZ0IDogXy5zd2lwZUxlZnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiBfLmdldERvdENvdW50KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0U2xpZGUgPCAwKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50IC0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCArIHRhcmdldFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFNsaWRlID49IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlIC0gXy5zbGlkZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGU7XG4gICAgICAgIH1cblxuICAgICAgICBfLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JlZm9yZUNoYW5nZScsIFtfLCBfLmN1cnJlbnRTbGlkZSwgYW5pbVNsaWRlXSk7XG5cbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBhbmltU2xpZGU7XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFzTmF2Rm9yICkge1xuXG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBfLmdldE5hdlRhcmdldCgpO1xuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gbmF2VGFyZ2V0LnNsaWNrKCdnZXRTbGljaycpO1xuXG4gICAgICAgICAgICBpZiAoIG5hdlRhcmdldC5zbGlkZUNvdW50IDw9IG5hdlRhcmdldC5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgICAgICBuYXZUYXJnZXQuc2V0U2xpZGVDbGFzc2VzKF8uY3VycmVudFNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlT3V0KG9sZFNsaWRlKTtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlKGFuaW1TbGlkZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBfLmFuaW1hdGVTbGlkZSh0YXJnZXRMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5oaWRlKCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHhEaXN0LCB5RGlzdCwgciwgc3dpcGVBbmdsZSwgXyA9IHRoaXM7XG5cbiAgICAgICAgeERpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCAtIF8udG91Y2hPYmplY3QuY3VyWDtcbiAgICAgICAgeURpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSAtIF8udG91Y2hPYmplY3QuY3VyWTtcbiAgICAgICAgciA9IE1hdGguYXRhbjIoeURpc3QsIHhEaXN0KTtcblxuICAgICAgICBzd2lwZUFuZ2xlID0gTWF0aC5yb3VuZChyICogMTgwIC8gTWF0aC5QSSk7XG4gICAgICAgIGlmIChzd2lwZUFuZ2xlIDwgMCkge1xuICAgICAgICAgICAgc3dpcGVBbmdsZSA9IDM2MCAtIE1hdGguYWJzKHN3aXBlQW5nbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDQ1KSAmJiAoc3dpcGVBbmdsZSA+PSAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA8PSAzNjApICYmIChzd2lwZUFuZ2xlID49IDMxNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPj0gMTM1KSAmJiAoc3dpcGVBbmdsZSA8PSAyMjUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ3JpZ2h0JyA6ICdsZWZ0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMTM1KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG93bic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAndXAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICd2ZXJ0aWNhbCc7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRW5kID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZUNvdW50LFxuICAgICAgICAgICAgZGlyZWN0aW9uO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICBfLnNob3VsZENsaWNrID0gKCBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gMTAgKSA/IGZhbHNlIDogdHJ1ZTtcblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuY3VyWCA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPT09IHRydWUgKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZWRnZScsIFtfLCBfLnN3aXBlRGlyZWN0aW9uKCkgXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPj0gXy50b3VjaE9iamVjdC5taW5Td2lwZSApIHtcblxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCBkaXJlY3Rpb24gKSB7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdkb3duJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tOYXZpZ2FibGUoIF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCkgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tOYXZpZ2FibGUoIF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCkgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcblxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCBkaXJlY3Rpb24gIT0gJ3ZlcnRpY2FsJyApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBzbGlkZUNvdW50ICk7XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzd2lwZScsIFtfLCBkaXJlY3Rpb24gXSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3RhcnRYICE9PSBfLnRvdWNoT2JqZWN0LmN1clggKSB7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggXy5jdXJyZW50U2xpZGUgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgoXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkgfHwgKCdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCAmJiBfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IGZhbHNlICYmIGV2ZW50LnR5cGUuaW5kZXhPZignbW91c2UnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgPSBldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGggOiAxO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RXaWR0aCAvIF8ub3B0aW9uc1xuICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0SGVpZ2h0IC8gXy5vcHRpb25zXG4gICAgICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLmFjdGlvbikge1xuXG4gICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZVN0YXJ0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbW92ZSc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZU1vdmUoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVFbmQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVNb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBlZGdlV2FzSGl0ID0gZmFsc2UsXG4gICAgICAgICAgICBjdXJMZWZ0LCBzd2lwZURpcmVjdGlvbiwgc3dpcGVMZW5ndGgsIHBvc2l0aW9uT2Zmc2V0LCB0b3VjaGVzO1xuXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgPyBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgOiBudWxsO1xuXG4gICAgICAgIGlmICghXy5kcmFnZ2luZyB8fCB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3coXy50b3VjaE9iamVjdC5jdXJYIC0gXy50b3VjaE9iamVjdC5zdGFydFgsIDIpKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChcbiAgICAgICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clkgLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlRGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgIGlmIChzd2lwZURpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gMSA6IC0xKSAqIChfLnRvdWNoT2JqZWN0LmN1clggPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbk9mZnNldCA9IF8udG91Y2hPYmplY3QuY3VyWSA+IF8udG91Y2hPYmplY3Quc3RhcnRZID8gMSA6IC0xO1xuICAgICAgICB9XG5cblxuICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmICgoXy5jdXJyZW50U2xpZGUgPT09IDAgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdyaWdodCcpIHx8IChfLmN1cnJlbnRTbGlkZSA+PSBfLmdldERvdENvdW50KCkgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdsZWZ0JykpIHtcbiAgICAgICAgICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggKiBfLm9wdGlvbnMuZWRnZUZyaWN0aW9uO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIChzd2lwZUxlbmd0aCAqIChfLiRsaXN0LmhlaWdodCgpIC8gXy5saXN0V2lkdGgpKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlIHx8IF8ub3B0aW9ucy50b3VjaE1vdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0Q1NTKF8uc3dpcGVMZWZ0KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdG91Y2hlcztcblxuICAgICAgICBfLmludGVycnVwdGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCAhPT0gMSB8fCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRYID0gXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRZID0gXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IHRydWU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrVW5maWx0ZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJHNsaWRlc0NhY2hlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kcHJldkFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJG5leHRBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgJycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bnNsaWNrID0gZnVuY3Rpb24oZnJvbUJyZWFrcG9pbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCd1bnNsaWNrJywgW18sIGZyb21CcmVha3BvaW50XSk7XG4gICAgICAgIF8uZGVzdHJveSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmXG4gICAgICAgICAgICBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmXG4gICAgICAgICAgICAhXy5vcHRpb25zLmluZmluaXRlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gMSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZURvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgIC5lcShNYXRoLmZsb29yKF8uY3VycmVudFNsaWRlIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBpZiAoIGRvY3VtZW50W18uaGlkZGVuXSApIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgICQuZm4uc2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgb3B0ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsID0gXy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcmV0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0ID09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIF9baV0uc2xpY2sgPSBuZXcgU2xpY2soX1tpXSwgb3B0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXQgPSBfW2ldLnNsaWNrW29wdF0uYXBwbHkoX1tpXS5zbGljaywgYXJncyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPSAndW5kZWZpbmVkJykgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXztcbiAgICB9O1xuXG59KSk7XG4iLCIvKiFcbiAqIHNtb290aC1zY3JvbGwgdjEwLjEuMDogQW5pbWF0ZSBzY3JvbGxpbmcgdG8gYW5jaG9yIGxpbmtzXG4gKiAoYykgMjAxNiBDaHJpcyBGZXJkaW5hbmRpXG4gKiBNSVQgTGljZW5zZVxuICogaHR0cDovL2dpdGh1Yi5jb20vY2ZlcmRpbmFuZGkvc21vb3RoLXNjcm9sbFxuICovXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcblx0XHRkZWZpbmUoW10sIGZhY3Rvcnkocm9vdCkpO1xuXHR9IGVsc2UgaWYgKCB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJvb3QpO1xuXHR9IGVsc2Uge1xuXHRcdHJvb3Quc21vb3RoU2Nyb2xsID0gZmFjdG9yeShyb290KTtcblx0fVxufSkodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0aGlzLndpbmRvdyB8fCB0aGlzLmdsb2JhbCwgKGZ1bmN0aW9uIChyb290KSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cdC8vXG5cdC8vIFZhcmlhYmxlc1xuXHQvL1xuXG5cdHZhciBzbW9vdGhTY3JvbGwgPSB7fTsgLy8gT2JqZWN0IGZvciBwdWJsaWMgQVBJc1xuXHR2YXIgc3VwcG9ydHMgPSAncXVlcnlTZWxlY3RvcicgaW4gZG9jdW1lbnQgJiYgJ2FkZEV2ZW50TGlzdGVuZXInIGluIHJvb3Q7IC8vIEZlYXR1cmUgdGVzdFxuXHR2YXIgc2V0dGluZ3MsIGFuY2hvciwgdG9nZ2xlLCBmaXhlZEhlYWRlciwgaGVhZGVySGVpZ2h0LCBldmVudFRpbWVvdXQsIGFuaW1hdGlvbkludGVydmFsO1xuXG5cdC8vIERlZmF1bHQgc2V0dGluZ3Ncblx0dmFyIGRlZmF1bHRzID0ge1xuXHRcdHNlbGVjdG9yOiAnW2RhdGEtc2Nyb2xsXScsXG5cdFx0c2VsZWN0b3JIZWFkZXI6IG51bGwsXG5cdFx0c3BlZWQ6IDUwMCxcblx0XHRlYXNpbmc6ICdlYXNlSW5PdXRDdWJpYycsXG5cdFx0b2Zmc2V0OiAwLFxuXHRcdGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fVxuXHR9O1xuXG5cblx0Ly9cblx0Ly8gTWV0aG9kc1xuXHQvL1xuXG5cdC8qKlxuXHQgKiBNZXJnZSB0d28gb3IgbW9yZSBvYmplY3RzLiBSZXR1cm5zIGEgbmV3IG9iamVjdC5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtCb29sZWFufSAgZGVlcCAgICAgSWYgdHJ1ZSwgZG8gYSBkZWVwIChvciByZWN1cnNpdmUpIG1lcmdlIFtvcHRpb25hbF1cblx0ICogQHBhcmFtIHtPYmplY3R9ICAgb2JqZWN0cyAgVGhlIG9iamVjdHMgdG8gbWVyZ2UgdG9nZXRoZXJcblx0ICogQHJldHVybnMge09iamVjdH0gICAgICAgICAgTWVyZ2VkIHZhbHVlcyBvZiBkZWZhdWx0cyBhbmQgb3B0aW9uc1xuXHQgKi9cblx0dmFyIGV4dGVuZCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIFZhcmlhYmxlc1xuXHRcdHZhciBleHRlbmRlZCA9IHt9O1xuXHRcdHZhciBkZWVwID0gZmFsc2U7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgYSBkZWVwIG1lcmdlXG5cdFx0aWYgKCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoIGFyZ3VtZW50c1swXSApID09PSAnW29iamVjdCBCb29sZWFuXScgKSB7XG5cdFx0XHRkZWVwID0gYXJndW1lbnRzWzBdO1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdC8vIE1lcmdlIHRoZSBvYmplY3QgaW50byB0aGUgZXh0ZW5kZWQgb2JqZWN0XG5cdFx0dmFyIG1lcmdlID0gZnVuY3Rpb24gKG9iaikge1xuXHRcdFx0Zm9yICggdmFyIHByb3AgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggb2JqLCBwcm9wICkgKSB7XG5cdFx0XHRcdFx0Ly8gSWYgZGVlcCBtZXJnZSBhbmQgcHJvcGVydHkgaXMgYW4gb2JqZWN0LCBtZXJnZSBwcm9wZXJ0aWVzXG5cdFx0XHRcdFx0aWYgKCBkZWVwICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmpbcHJvcF0pID09PSAnW29iamVjdCBPYmplY3RdJyApIHtcblx0XHRcdFx0XHRcdGV4dGVuZGVkW3Byb3BdID0gZXh0ZW5kKCB0cnVlLCBleHRlbmRlZFtwcm9wXSwgb2JqW3Byb3BdICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGV4dGVuZGVkW3Byb3BdID0gb2JqW3Byb3BdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBMb29wIHRocm91Z2ggZWFjaCBvYmplY3QgYW5kIGNvbmR1Y3QgYSBtZXJnZVxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0dmFyIG9iaiA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdG1lcmdlKG9iaik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV4dGVuZGVkO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgaGVpZ2h0IG9mIGFuIGVsZW1lbnQuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSAge05vZGV9IGVsZW0gVGhlIGVsZW1lbnQgdG8gZ2V0IHRoZSBoZWlnaHQgb2Zcblx0ICogQHJldHVybiB7TnVtYmVyfSAgICBUaGUgZWxlbWVudCdzIGhlaWdodCBpbiBwaXhlbHNcblx0ICovXG5cdHZhciBnZXRIZWlnaHQgPSBmdW5jdGlvbiAoIGVsZW0gKSB7XG5cdFx0cmV0dXJuIE1hdGgubWF4KCBlbGVtLnNjcm9sbEhlaWdodCwgZWxlbS5vZmZzZXRIZWlnaHQsIGVsZW0uY2xpZW50SGVpZ2h0ICk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgY2xvc2VzdCBtYXRjaGluZyBlbGVtZW50IHVwIHRoZSBET00gdHJlZS5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtICB7RWxlbWVudH0gZWxlbSAgICAgU3RhcnRpbmcgZWxlbWVudFxuXHQgKiBAcGFyYW0gIHtTdHJpbmd9ICBzZWxlY3RvciBTZWxlY3RvciB0byBtYXRjaCBhZ2FpbnN0IChjbGFzcywgSUQsIGRhdGEgYXR0cmlidXRlLCBvciB0YWcpXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW58RWxlbWVudH0gIFJldHVybnMgbnVsbCBpZiBub3QgbWF0Y2ggZm91bmRcblx0ICovXG5cdHZhciBnZXRDbG9zZXN0ID0gZnVuY3Rpb24gKCBlbGVtLCBzZWxlY3RvciApIHtcblxuXHRcdC8vIFZhcmlhYmxlc1xuXHRcdHZhciBmaXJzdENoYXIgPSBzZWxlY3Rvci5jaGFyQXQoMCk7XG5cdFx0dmFyIHN1cHBvcnRzID0gJ2NsYXNzTGlzdCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRcdHZhciBhdHRyaWJ1dGUsIHZhbHVlO1xuXG5cdFx0Ly8gSWYgc2VsZWN0b3IgaXMgYSBkYXRhIGF0dHJpYnV0ZSwgc3BsaXQgYXR0cmlidXRlIGZyb20gdmFsdWVcblx0XHRpZiAoIGZpcnN0Q2hhciA9PT0gJ1snICkge1xuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zdWJzdHIoMSwgc2VsZWN0b3IubGVuZ3RoIC0gMik7XG5cdFx0XHRhdHRyaWJ1dGUgPSBzZWxlY3Rvci5zcGxpdCggJz0nICk7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdHZhbHVlID0gdHJ1ZTtcblx0XHRcdFx0YXR0cmlidXRlWzFdID0gYXR0cmlidXRlWzFdLnJlcGxhY2UoIC9cIi9nLCAnJyApLnJlcGxhY2UoIC8nL2csICcnICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGNsb3Nlc3QgbWF0Y2hcblx0XHRmb3IgKCA7IGVsZW0gJiYgZWxlbSAhPT0gZG9jdW1lbnQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTsgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgaXMgYSBjbGFzc1xuXHRcdFx0aWYgKCBmaXJzdENoYXIgPT09ICcuJyApIHtcblx0XHRcdFx0aWYgKCBzdXBwb3J0cyApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCBzZWxlY3Rvci5zdWJzdHIoMSkgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAoIG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBzZWxlY3Rvci5zdWJzdHIoMSkgKyAnKFxcXFxzfCQpJykudGVzdCggZWxlbS5jbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdFx0aWYgKCBmaXJzdENoYXIgPT09ICcjJyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBzZWxlY3Rvci5zdWJzdHIoMSkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgaXMgYSBkYXRhIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBmaXJzdENoYXIgPT09ICdbJyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLmhhc0F0dHJpYnV0ZSggYXR0cmlidXRlWzBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRcdGlmICggZWxlbS5nZXRBdHRyaWJ1dGUoIGF0dHJpYnV0ZVswXSApID09PSBhdHRyaWJ1dGVbMV0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgaXMgYSB0YWdcblx0XHRcdGlmICggZWxlbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHNlbGVjdG9yICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIEVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgZm9yIHVzZSB3aXRoIHF1ZXJ5U2VsZWN0b3Jcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlkIFRoZSBhbmNob3IgSUQgdG8gZXNjYXBlXG5cdCAqIEBhdXRob3IgTWF0aGlhcyBCeW5lbnNcblx0ICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvQ1NTLmVzY2FwZVxuXHQgKi9cblx0dmFyIGVzY2FwZUNoYXJhY3RlcnMgPSBmdW5jdGlvbiAoIGlkICkge1xuXG5cdFx0Ly8gUmVtb3ZlIGxlYWRpbmcgaGFzaFxuXHRcdGlmICggaWQuY2hhckF0KDApID09PSAnIycgKSB7XG5cdFx0XHRpZCA9IGlkLnN1YnN0cigxKTtcblx0XHR9XG5cblx0XHR2YXIgc3RyaW5nID0gU3RyaW5nKGlkKTtcblx0XHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0XHR2YXIgaW5kZXggPSAtMTtcblx0XHR2YXIgY29kZVVuaXQ7XG5cdFx0dmFyIHJlc3VsdCA9ICcnO1xuXHRcdHZhciBmaXJzdENvZGVVbml0ID0gc3RyaW5nLmNoYXJDb2RlQXQoMCk7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdGNvZGVVbml0ID0gc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpO1xuXHRcdFx0Ly8gTm90ZTogdGhlcmXigJlzIG5vIG5lZWQgdG8gc3BlY2lhbC1jYXNlIGFzdHJhbCBzeW1ib2xzLCBzdXJyb2dhdGVcblx0XHRcdC8vIHBhaXJzLCBvciBsb25lIHN1cnJvZ2F0ZXMuXG5cblx0XHRcdC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgTlVMTCAoVSswMDAwKSwgdGhlbiB0aHJvdyBhblxuXHRcdFx0Ly8gYEludmFsaWRDaGFyYWN0ZXJFcnJvcmAgZXhjZXB0aW9uIGFuZCB0ZXJtaW5hdGUgdGhlc2Ugc3RlcHMuXG5cdFx0XHRpZiAoY29kZVVuaXQgPT09IDB4MDAwMCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgSW52YWxpZENoYXJhY3RlckVycm9yKFxuXHRcdFx0XHRcdCdJbnZhbGlkIGNoYXJhY3RlcjogdGhlIGlucHV0IGNvbnRhaW5zIFUrMDAwMC4nXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChcblx0XHRcdFx0Ly8gSWYgdGhlIGNoYXJhY3RlciBpcyBpbiB0aGUgcmFuZ2UgW1xcMS1cXDFGXSAoVSswMDAxIHRvIFUrMDAxRikgb3IgaXNcblx0XHRcdFx0Ly8gVSswMDdGLCBb4oCmXVxuXHRcdFx0XHQoY29kZVVuaXQgPj0gMHgwMDAxICYmIGNvZGVVbml0IDw9IDB4MDAxRikgfHwgY29kZVVuaXQgPT0gMHgwMDdGIHx8XG5cdFx0XHRcdC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgdGhlIGZpcnN0IGNoYXJhY3RlciBhbmQgaXMgaW4gdGhlIHJhbmdlIFswLTldXG5cdFx0XHRcdC8vIChVKzAwMzAgdG8gVSswMDM5KSwgW+KApl1cblx0XHRcdFx0KGluZGV4ID09PSAwICYmIGNvZGVVbml0ID49IDB4MDAzMCAmJiBjb2RlVW5pdCA8PSAweDAwMzkpIHx8XG5cdFx0XHRcdC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgdGhlIHNlY29uZCBjaGFyYWN0ZXIgYW5kIGlzIGluIHRoZSByYW5nZSBbMC05XVxuXHRcdFx0XHQvLyAoVSswMDMwIHRvIFUrMDAzOSkgYW5kIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaXMgYSBgLWAgKFUrMDAyRCksIFvigKZdXG5cdFx0XHRcdChcblx0XHRcdFx0XHRpbmRleCA9PT0gMSAmJlxuXHRcdFx0XHRcdGNvZGVVbml0ID49IDB4MDAzMCAmJiBjb2RlVW5pdCA8PSAweDAwMzkgJiZcblx0XHRcdFx0XHRmaXJzdENvZGVVbml0ID09PSAweDAwMkRcblx0XHRcdFx0KVxuXHRcdFx0KSB7XG5cdFx0XHRcdC8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNlc2NhcGUtYS1jaGFyYWN0ZXItYXMtY29kZS1wb2ludFxuXHRcdFx0XHRyZXN1bHQgKz0gJ1xcXFwnICsgY29kZVVuaXQudG9TdHJpbmcoMTYpICsgJyAnO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhlIGNoYXJhY3RlciBpcyBub3QgaGFuZGxlZCBieSBvbmUgb2YgdGhlIGFib3ZlIHJ1bGVzIGFuZCBpc1xuXHRcdFx0Ly8gZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIFUrMDA4MCwgaXMgYC1gIChVKzAwMkQpIG9yIGBfYCAoVSswMDVGKSwgb3Jcblx0XHRcdC8vIGlzIGluIG9uZSBvZiB0aGUgcmFuZ2VzIFswLTldIChVKzAwMzAgdG8gVSswMDM5KSwgW0EtWl0gKFUrMDA0MSB0b1xuXHRcdFx0Ly8gVSswMDVBKSwgb3IgW2Etel0gKFUrMDA2MSB0byBVKzAwN0EpLCBb4oCmXVxuXHRcdFx0aWYgKFxuXHRcdFx0XHRjb2RlVW5pdCA+PSAweDAwODAgfHxcblx0XHRcdFx0Y29kZVVuaXQgPT09IDB4MDAyRCB8fFxuXHRcdFx0XHRjb2RlVW5pdCA9PT0gMHgwMDVGIHx8XG5cdFx0XHRcdGNvZGVVbml0ID49IDB4MDAzMCAmJiBjb2RlVW5pdCA8PSAweDAwMzkgfHxcblx0XHRcdFx0Y29kZVVuaXQgPj0gMHgwMDQxICYmIGNvZGVVbml0IDw9IDB4MDA1QSB8fFxuXHRcdFx0XHRjb2RlVW5pdCA+PSAweDAwNjEgJiYgY29kZVVuaXQgPD0gMHgwMDdBXG5cdFx0XHQpIHtcblx0XHRcdFx0Ly8gdGhlIGNoYXJhY3RlciBpdHNlbGZcblx0XHRcdFx0cmVzdWx0ICs9IHN0cmluZy5jaGFyQXQoaW5kZXgpO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG5cdFx0XHQvLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jZXNjYXBlLWEtY2hhcmFjdGVyXG5cdFx0XHRyZXN1bHQgKz0gJ1xcXFwnICsgc3RyaW5nLmNoYXJBdChpbmRleCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gJyMnICsgcmVzdWx0O1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZSB0aGUgZWFzaW5nIHBhdHRlcm5cblx0ICogQHByaXZhdGVcblx0ICogQGxpbmsgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ3JlLzE2NTAyOTRcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgRWFzaW5nIHBhdHRlcm5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRpbWUgVGltZSBhbmltYXRpb24gc2hvdWxkIHRha2UgdG8gY29tcGxldGVcblx0ICogQHJldHVybnMge051bWJlcn1cblx0ICovXG5cdHZhciBlYXNpbmdQYXR0ZXJuID0gZnVuY3Rpb24gKCB0eXBlLCB0aW1lICkge1xuXHRcdHZhciBwYXR0ZXJuO1xuXHRcdGlmICggdHlwZSA9PT0gJ2Vhc2VJblF1YWQnICkgcGF0dGVybiA9IHRpbWUgKiB0aW1lOyAvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG5cdFx0aWYgKCB0eXBlID09PSAnZWFzZU91dFF1YWQnICkgcGF0dGVybiA9IHRpbWUgKiAoMiAtIHRpbWUpOyAvLyBkZWNlbGVyYXRpbmcgdG8gemVybyB2ZWxvY2l0eVxuXHRcdGlmICggdHlwZSA9PT0gJ2Vhc2VJbk91dFF1YWQnICkgcGF0dGVybiA9IHRpbWUgPCAwLjUgPyAyICogdGltZSAqIHRpbWUgOiAtMSArICg0IC0gMiAqIHRpbWUpICogdGltZTsgLy8gYWNjZWxlcmF0aW9uIHVudGlsIGhhbGZ3YXksIHRoZW4gZGVjZWxlcmF0aW9uXG5cdFx0aWYgKCB0eXBlID09PSAnZWFzZUluQ3ViaWMnICkgcGF0dGVybiA9IHRpbWUgKiB0aW1lICogdGltZTsgLy8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuXHRcdGlmICggdHlwZSA9PT0gJ2Vhc2VPdXRDdWJpYycgKSBwYXR0ZXJuID0gKC0tdGltZSkgKiB0aW1lICogdGltZSArIDE7IC8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG5cdFx0aWYgKCB0eXBlID09PSAnZWFzZUluT3V0Q3ViaWMnICkgcGF0dGVybiA9IHRpbWUgPCAwLjUgPyA0ICogdGltZSAqIHRpbWUgKiB0aW1lIDogKHRpbWUgLSAxKSAqICgyICogdGltZSAtIDIpICogKDIgKiB0aW1lIC0gMikgKyAxOyAvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cblx0XHRpZiAoIHR5cGUgPT09ICdlYXNlSW5RdWFydCcgKSBwYXR0ZXJuID0gdGltZSAqIHRpbWUgKiB0aW1lICogdGltZTsgLy8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuXHRcdGlmICggdHlwZSA9PT0gJ2Vhc2VPdXRRdWFydCcgKSBwYXR0ZXJuID0gMSAtICgtLXRpbWUpICogdGltZSAqIHRpbWUgKiB0aW1lOyAvLyBkZWNlbGVyYXRpbmcgdG8gemVybyB2ZWxvY2l0eVxuXHRcdGlmICggdHlwZSA9PT0gJ2Vhc2VJbk91dFF1YXJ0JyApIHBhdHRlcm4gPSB0aW1lIDwgMC41ID8gOCAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgOiAxIC0gOCAqICgtLXRpbWUpICogdGltZSAqIHRpbWUgKiB0aW1lOyAvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cblx0XHRpZiAoIHR5cGUgPT09ICdlYXNlSW5RdWludCcgKSBwYXR0ZXJuID0gdGltZSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWU7IC8vIGFjY2VsZXJhdGluZyBmcm9tIHplcm8gdmVsb2NpdHlcblx0XHRpZiAoIHR5cGUgPT09ICdlYXNlT3V0UXVpbnQnICkgcGF0dGVybiA9IDEgKyAoLS10aW1lKSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWU7IC8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG5cdFx0aWYgKCB0eXBlID09PSAnZWFzZUluT3V0UXVpbnQnICkgcGF0dGVybiA9IHRpbWUgPCAwLjUgPyAxNiAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lIDogMSArIDE2ICogKC0tdGltZSkgKiB0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lOyAvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cblx0XHRyZXR1cm4gcGF0dGVybiB8fCB0aW1lOyAvLyBubyBlYXNpbmcsIG5vIGFjY2VsZXJhdGlvblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBDYWxjdWxhdGUgaG93IGZhciB0byBzY3JvbGxcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtFbGVtZW50fSBhbmNob3IgVGhlIGFuY2hvciBlbGVtZW50IHRvIHNjcm9sbCB0b1xuXHQgKiBAcGFyYW0ge051bWJlcn0gaGVhZGVySGVpZ2h0IEhlaWdodCBvZiBhIGZpeGVkIGhlYWRlciwgaWYgYW55XG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIHBpeGVscyBieSB3aGljaCB0byBvZmZzZXQgc2Nyb2xsXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9XG5cdCAqL1xuXHR2YXIgZ2V0RW5kTG9jYXRpb24gPSBmdW5jdGlvbiAoIGFuY2hvciwgaGVhZGVySGVpZ2h0LCBvZmZzZXQgKSB7XG5cdFx0dmFyIGxvY2F0aW9uID0gMDtcblx0XHRpZiAoYW5jaG9yLm9mZnNldFBhcmVudCkge1xuXHRcdFx0ZG8ge1xuXHRcdFx0XHRsb2NhdGlvbiArPSBhbmNob3Iub2Zmc2V0VG9wO1xuXHRcdFx0XHRhbmNob3IgPSBhbmNob3Iub2Zmc2V0UGFyZW50O1xuXHRcdFx0fSB3aGlsZSAoYW5jaG9yKTtcblx0XHR9XG5cdFx0bG9jYXRpb24gPSBNYXRoLm1heChsb2NhdGlvbiAtIGhlYWRlckhlaWdodCAtIG9mZnNldCwgMCk7XG5cdFx0cmV0dXJuIE1hdGgubWluKGxvY2F0aW9uLCBnZXREb2N1bWVudEhlaWdodCgpIC0gZ2V0Vmlld3BvcnRIZWlnaHQoKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERldGVybWluZSB0aGUgdmlld3BvcnQncyBoZWlnaHRcblx0ICogQHByaXZhdGVcblx0ICogQHJldHVybnMge051bWJlcn1cblx0ICovXG5cdHZhciBnZXRWaWV3cG9ydEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBNYXRoLm1heCggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgcm9vdC5pbm5lckhlaWdodCB8fCAwICk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERldGVybWluZSB0aGUgZG9jdW1lbnQncyBoZWlnaHRcblx0ICogQHByaXZhdGVcblx0ICogQHJldHVybnMge051bWJlcn1cblx0ICovXG5cdHZhciBnZXREb2N1bWVudEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCxcblx0XHRcdGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0LFxuXHRcdFx0ZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcblx0XHQpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDb252ZXJ0IGRhdGEtb3B0aW9ucyBhdHRyaWJ1dGUgaW50byBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zIExpbmstc3BlY2lmaWMgb3B0aW9ucyBhcyBhIGRhdGEgYXR0cmlidXRlIHN0cmluZ1xuXHQgKiBAcmV0dXJucyB7T2JqZWN0fVxuXHQgKi9cblx0dmFyIGdldERhdGFPcHRpb25zID0gZnVuY3Rpb24gKCBvcHRpb25zICkge1xuXHRcdHJldHVybiAhb3B0aW9ucyB8fCAhKHR5cGVvZiBKU09OID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgSlNPTi5wYXJzZSA9PT0gJ2Z1bmN0aW9uJykgPyB7fSA6IEpTT04ucGFyc2UoIG9wdGlvbnMgKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0IHRoZSBoZWlnaHQgb2YgdGhlIGZpeGVkIGhlYWRlclxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0gIHtOb2RlfSAgIGhlYWRlciBUaGUgaGVhZGVyXG5cdCAqIEByZXR1cm4ge051bWJlcn0gICAgICAgIFRoZSBoZWlnaHQgb2YgdGhlIGhlYWRlclxuXHQgKi9cblx0dmFyIGdldEhlYWRlckhlaWdodCA9IGZ1bmN0aW9uICggaGVhZGVyICkge1xuXHRcdHJldHVybiAhaGVhZGVyID8gMCA6ICggZ2V0SGVpZ2h0KCBoZWFkZXIgKSArIGhlYWRlci5vZmZzZXRUb3AgKTtcblx0fTtcblxuXHQvKipcblx0ICogQnJpbmcgdGhlIGFuY2hvcmVkIGVsZW1lbnQgaW50byBmb2N1c1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dmFyIGFkanVzdEZvY3VzID0gZnVuY3Rpb24gKCBhbmNob3IsIGVuZExvY2F0aW9uLCBpc051bSApIHtcblxuXHRcdC8vIERvbid0IHJ1biBpZiBzY3JvbGxpbmcgdG8gYSBudW1iZXIgb24gdGhlIHBhZ2Vcblx0XHRpZiAoIGlzTnVtICkgcmV0dXJuO1xuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBicmluZyBhbmNob3IgZWxlbWVudCBpbnRvIGZvY3VzXG5cdFx0YW5jaG9yLmZvY3VzKCk7XG5cdFx0aWYgKCBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmlkICE9PSBhbmNob3IuaWQgKSB7XG5cdFx0XHRhbmNob3Iuc2V0QXR0cmlidXRlKCAndGFiaW5kZXgnLCAnLTEnICk7XG5cdFx0XHRhbmNob3IuZm9jdXMoKTtcblx0XHRcdGFuY2hvci5zdHlsZS5vdXRsaW5lID0gJ25vbmUnO1xuXHRcdH1cblx0XHRyb290LnNjcm9sbFRvKCAwICwgZW5kTG9jYXRpb24gKTtcblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBTdGFydC9zdG9wIHRoZSBzY3JvbGxpbmcgYW5pbWF0aW9uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOb2RlfE51bWJlcn0gYW5jaG9yICBUaGUgZWxlbWVudCBvciBwb3NpdGlvbiB0byBzY3JvbGwgdG9cblx0ICogQHBhcmFtIHtFbGVtZW50fSAgICAgdG9nZ2xlICBUaGUgZWxlbWVudCB0aGF0IHRvZ2dsZWQgdGhlIHNjcm9sbCBldmVudFxuXHQgKiBAcGFyYW0ge09iamVjdH0gICAgICBvcHRpb25zXG5cdCAqL1xuXHRzbW9vdGhTY3JvbGwuYW5pbWF0ZVNjcm9sbCA9IGZ1bmN0aW9uICggYW5jaG9yLCB0b2dnbGUsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBPcHRpb25zIGFuZCBvdmVycmlkZXNcblx0XHR2YXIgb3ZlcnJpZGVzID0gZ2V0RGF0YU9wdGlvbnMoIHRvZ2dsZSA/IHRvZ2dsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3B0aW9ucycpIDogbnVsbCApO1xuXHRcdHZhciBhbmltYXRlU2V0dGluZ3MgPSBleHRlbmQoIHNldHRpbmdzIHx8IGRlZmF1bHRzLCBvcHRpb25zIHx8IHt9LCBvdmVycmlkZXMgKTsgLy8gTWVyZ2UgdXNlciBvcHRpb25zIHdpdGggZGVmYXVsdHNcblxuXHRcdC8vIFNlbGVjdG9ycyBhbmQgdmFyaWFibGVzXG5cdFx0dmFyIGlzTnVtID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCBhbmNob3IgKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgPyB0cnVlIDogZmFsc2U7XG5cdFx0dmFyIGFuY2hvckVsZW0gPSBpc051bSB8fCAhYW5jaG9yLnRhZ05hbWUgPyBudWxsIDogYW5jaG9yO1xuXHRcdGlmICggIWlzTnVtICYmICFhbmNob3JFbGVtICkgcmV0dXJuO1xuXHRcdHZhciBzdGFydExvY2F0aW9uID0gcm9vdC5wYWdlWU9mZnNldDsgLy8gQ3VycmVudCBsb2NhdGlvbiBvbiB0aGUgcGFnZVxuXHRcdGlmICggYW5pbWF0ZVNldHRpbmdzLnNlbGVjdG9ySGVhZGVyICYmICFmaXhlZEhlYWRlciApIHtcblx0XHRcdC8vIEdldCB0aGUgZml4ZWQgaGVhZGVyIGlmIG5vdCBhbHJlYWR5IHNldFxuXHRcdFx0Zml4ZWRIZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBhbmltYXRlU2V0dGluZ3Muc2VsZWN0b3JIZWFkZXIgKTtcblx0XHR9XG5cdFx0aWYgKCAhaGVhZGVySGVpZ2h0ICkge1xuXHRcdFx0Ly8gR2V0IHRoZSBoZWlnaHQgb2YgYSBmaXhlZCBoZWFkZXIgaWYgb25lIGV4aXN0cyBhbmQgbm90IGFscmVhZHkgc2V0XG5cdFx0XHRoZWFkZXJIZWlnaHQgPSBnZXRIZWFkZXJIZWlnaHQoIGZpeGVkSGVhZGVyICk7XG5cdFx0fVxuXHRcdHZhciBlbmRMb2NhdGlvbiA9IGlzTnVtID8gYW5jaG9yIDogZ2V0RW5kTG9jYXRpb24oIGFuY2hvckVsZW0sIGhlYWRlckhlaWdodCwgcGFyc2VJbnQoYW5pbWF0ZVNldHRpbmdzLm9mZnNldCwgMTApICk7IC8vIExvY2F0aW9uIHRvIHNjcm9sbCB0b1xuXHRcdHZhciBkaXN0YW5jZSA9IGVuZExvY2F0aW9uIC0gc3RhcnRMb2NhdGlvbjsgLy8gZGlzdGFuY2UgdG8gdHJhdmVsXG5cdFx0dmFyIGRvY3VtZW50SGVpZ2h0ID0gZ2V0RG9jdW1lbnRIZWlnaHQoKTtcblx0XHR2YXIgdGltZUxhcHNlZCA9IDA7XG5cdFx0dmFyIHBlcmNlbnRhZ2UsIHBvc2l0aW9uO1xuXG5cdFx0LyoqXG5cdFx0ICogU3RvcCB0aGUgc2Nyb2xsIGFuaW1hdGlvbiB3aGVuIGl0IHJlYWNoZXMgaXRzIHRhcmdldCAob3IgdGhlIGJvdHRvbS90b3Agb2YgcGFnZSlcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiBDdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBwYWdlXG5cdFx0ICogQHBhcmFtIHtOdW1iZXJ9IGVuZExvY2F0aW9uIFNjcm9sbCB0byBsb2NhdGlvblxuXHRcdCAqIEBwYXJhbSB7TnVtYmVyfSBhbmltYXRpb25JbnRlcnZhbCBIb3cgbXVjaCB0byBzY3JvbGwgb24gdGhpcyBsb29wXG5cdFx0ICovXG5cdFx0dmFyIHN0b3BBbmltYXRlU2Nyb2xsID0gZnVuY3Rpb24gKCBwb3NpdGlvbiwgZW5kTG9jYXRpb24sIGFuaW1hdGlvbkludGVydmFsICkge1xuXHRcdFx0dmFyIGN1cnJlbnRMb2NhdGlvbiA9IHJvb3QucGFnZVlPZmZzZXQ7XG5cdFx0XHRpZiAoIHBvc2l0aW9uID09IGVuZExvY2F0aW9uIHx8IGN1cnJlbnRMb2NhdGlvbiA9PSBlbmRMb2NhdGlvbiB8fCAoIChyb290LmlubmVySGVpZ2h0ICsgY3VycmVudExvY2F0aW9uKSA+PSBkb2N1bWVudEhlaWdodCApICkge1xuXG5cdFx0XHRcdC8vIENsZWFyIHRoZSBhbmltYXRpb24gdGltZXJcblx0XHRcdFx0Y2xlYXJJbnRlcnZhbChhbmltYXRpb25JbnRlcnZhbCk7XG5cblx0XHRcdFx0Ly8gQnJpbmcgdGhlIGFuY2hvcmVkIGVsZW1lbnQgaW50byBmb2N1c1xuXHRcdFx0XHRhZGp1c3RGb2N1cyggYW5jaG9yLCBlbmRMb2NhdGlvbiwgaXNOdW0gKTtcblxuXHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYWZ0ZXIgYW5pbWF0aW9uIGNvbXBsZXRlXG5cdFx0XHRcdGFuaW1hdGVTZXR0aW5ncy5jYWxsYmFjayggYW5jaG9yLCB0b2dnbGUgKTtcblxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBMb29wIHNjcm9sbGluZyBhbmltYXRpb25cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHZhciBsb29wQW5pbWF0ZVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRpbWVMYXBzZWQgKz0gMTY7XG5cdFx0XHRwZXJjZW50YWdlID0gKCB0aW1lTGFwc2VkIC8gcGFyc2VJbnQoYW5pbWF0ZVNldHRpbmdzLnNwZWVkLCAxMCkgKTtcblx0XHRcdHBlcmNlbnRhZ2UgPSAoIHBlcmNlbnRhZ2UgPiAxICkgPyAxIDogcGVyY2VudGFnZTtcblx0XHRcdHBvc2l0aW9uID0gc3RhcnRMb2NhdGlvbiArICggZGlzdGFuY2UgKiBlYXNpbmdQYXR0ZXJuKGFuaW1hdGVTZXR0aW5ncy5lYXNpbmcsIHBlcmNlbnRhZ2UpICk7XG5cdFx0XHRyb290LnNjcm9sbFRvKCAwLCBNYXRoLmZsb29yKHBvc2l0aW9uKSApO1xuXHRcdFx0c3RvcEFuaW1hdGVTY3JvbGwocG9zaXRpb24sIGVuZExvY2F0aW9uLCBhbmltYXRpb25JbnRlcnZhbCk7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFNldCBpbnRlcnZhbCB0aW1lclxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dmFyIHN0YXJ0QW5pbWF0ZVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGNsZWFySW50ZXJ2YWwoYW5pbWF0aW9uSW50ZXJ2YWwpO1xuXHRcdFx0YW5pbWF0aW9uSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChsb29wQW5pbWF0ZVNjcm9sbCwgMTYpO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZXNldCBwb3NpdGlvbiB0byBmaXggd2VpcmQgaU9TIGJ1Z1xuXHRcdCAqIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9jZmVyZGluYW5kaS9zbW9vdGgtc2Nyb2xsL2lzc3Vlcy80NVxuXHRcdCAqL1xuXHRcdGlmICggcm9vdC5wYWdlWU9mZnNldCA9PT0gMCApIHtcblx0XHRcdHJvb3Quc2Nyb2xsVG8oIDAsIDAgKTtcblx0XHR9XG5cblx0XHQvLyBTdGFydCBzY3JvbGxpbmcgYW5pbWF0aW9uXG5cdFx0c3RhcnRBbmltYXRlU2Nyb2xsKCk7XG5cblx0fTtcblxuXHQvKipcblx0ICogSGFuZGxlIGhhcyBjaGFuZ2UgZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHZhciBoYXNoQ2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuXG5cdFx0Ly8gR2V0IGhhc2ggZnJvbSBVUkxcblx0XHR2YXIgaGFzaCA9IHJvb3QubG9jYXRpb24uaGFzaDtcblxuXHRcdC8vIE9ubHkgcnVuIGlmIHRoZXJlJ3MgYW4gYW5jaG9yIGVsZW1lbnQgdG8gc2Nyb2xsIHRvXG5cdFx0aWYgKCAhYW5jaG9yICkgcmV0dXJuO1xuXG5cdFx0Ly8gUmVzZXQgdGhlIGFuY2hvciBlbGVtZW50J3MgSURcblx0XHRhbmNob3IuaWQgPSBhbmNob3IuZ2V0QXR0cmlidXRlKCAnZGF0YS1zY3JvbGwtaWQnICk7XG5cblx0XHQvLyBTY3JvbGwgdG8gdGhlIGFuY2hvcmVkIGNvbnRlbnRcblx0XHRzbW9vdGhTY3JvbGwuYW5pbWF0ZVNjcm9sbCggYW5jaG9yLCB0b2dnbGUgKTtcblxuXHRcdC8vIFJlc2V0IGFuY2hvciBhbmQgdG9nZ2xlXG5cdFx0YW5jaG9yID0gbnVsbDtcblx0XHR0b2dnbGUgPSBudWxsO1xuXG5cdH07XG5cblx0LyoqXG5cdCAqIElmIHNtb290aCBzY3JvbGwgZWxlbWVudCBjbGlja2VkLCBhbmltYXRlIHNjcm9sbFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0dmFyIGNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuXG5cdFx0Ly8gRG9uJ3QgcnVuIGlmIHJpZ2h0LWNsaWNrIG9yIGNvbW1hbmQvY29udHJvbCArIGNsaWNrXG5cdFx0aWYgKCBldmVudC5idXR0b24gIT09IDAgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5jdHJsS2V5ICkgcmV0dXJuO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgYSBzbW9vdGggc2Nyb2xsIGxpbmsgd2FzIGNsaWNrZWRcblx0XHR0b2dnbGUgPSBnZXRDbG9zZXN0KCBldmVudC50YXJnZXQsIHNldHRpbmdzLnNlbGVjdG9yICk7XG5cdFx0aWYgKCAhdG9nZ2xlIHx8IHRvZ2dsZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdhJyApIHJldHVybjtcblxuXHRcdC8vIE9ubHkgcnVuIGlmIGxpbmsgaXMgYW4gYW5jaG9yIGFuZCBwb2ludHMgdG8gdGhlIGN1cnJlbnQgcGFnZVxuXHRcdGlmICggdG9nZ2xlLmhvc3RuYW1lICE9PSByb290LmxvY2F0aW9uLmhvc3RuYW1lIHx8IHRvZ2dsZS5wYXRobmFtZSAhPT0gcm9vdC5sb2NhdGlvbi5wYXRobmFtZSB8fCAhLyMvLnRlc3QodG9nZ2xlLmhyZWYpICkgcmV0dXJuO1xuXG5cdFx0Ly8gR2V0IHRoZSBzYW5pdGl6ZWQgaGFzaFxuXHRcdHZhciBoYXNoID0gZXNjYXBlQ2hhcmFjdGVycyggdG9nZ2xlLmhhc2ggKTtcblxuXHRcdC8vIElmIHRoZSBoYXNoIGlzIGVtcHR5LCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxuXHRcdGlmICggaGFzaCA9PT0gJyMnICkge1xuXG5cdFx0XHQvLyBQcmV2ZW50IGRlZmF1bHQgbGluayBiZWhhdmlvclxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBhbmNob3JlZCBlbGVtZW50XG5cdFx0XHRhbmNob3IgPSBkb2N1bWVudC5ib2R5O1xuXG5cdFx0XHQvLyBTYXZlIG9yIGNyZWF0ZSB0aGUgSUQgYXMgYSBkYXRhIGF0dHJpYnV0ZSBhbmQgcmVtb3ZlIGl0IChwcmV2ZW50cyBzY3JvbGwganVtcClcblx0XHRcdHZhciBpZCA9IGFuY2hvci5pZCA/IGFuY2hvci5pZCA6ICdzbW9vdGgtc2Nyb2xsLXRvcCc7XG5cdFx0XHRhbmNob3Iuc2V0QXR0cmlidXRlKCAnZGF0YS1zY3JvbGwtaWQnLCBpZCApO1xuXHRcdFx0YW5jaG9yLmlkID0gJyc7XG5cblx0XHRcdC8vIElmIG5vIGhhc2ggY2hhbmdlIGV2ZW50IHdpbGwgaGFwcGVuLCBmaXJlIG1hbnVhbGx5XG5cdFx0XHQvLyBPdGhlcndpc2UsIHVwZGF0ZSB0aGUgaGFzaFxuXHRcdFx0aWYgKCByb290LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpID09PSBpZCApIHtcblx0XHRcdFx0aGFzaENoYW5nZUhhbmRsZXIoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJvb3QubG9jYXRpb24uaGFzaCA9IGlkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBHZXQgdGhlIGFuY2hvcmVkIGVsZW1lbnRcblx0XHRhbmNob3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBoYXNoICk7XG5cblx0XHQvLyBJZiBhbmNob3JlZCBlbGVtZW50IGV4aXN0cywgc2F2ZSB0aGUgSUQgYXMgYSBkYXRhIGF0dHJpYnV0ZSBhbmQgcmVtb3ZlIGl0IChwcmV2ZW50cyBzY3JvbGwganVtcClcblx0XHRpZiAoICFhbmNob3IgKSByZXR1cm47XG5cdFx0YW5jaG9yLnNldEF0dHJpYnV0ZSggJ2RhdGEtc2Nyb2xsLWlkJywgYW5jaG9yLmlkICk7XG5cdFx0YW5jaG9yLmlkID0gJyc7XG5cblx0XHQvLyBJZiBubyBoYXNoIGNoYW5nZSBldmVudCB3aWxsIGhhcHBlbiwgZmlyZSBtYW51YWxseVxuXHRcdGlmICggdG9nZ2xlLmhhc2ggPT09IHJvb3QubG9jYXRpb24uaGFzaCApIHtcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRoYXNoQ2hhbmdlSGFuZGxlcigpO1xuXHRcdH1cblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBPbiB3aW5kb3cgc2Nyb2xsIGFuZCByZXNpemUsIG9ubHkgcnVuIGV2ZW50cyBhdCBhIHJhdGUgb2YgMTVmcHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZXZlbnRUaW1lb3V0IFRpbWVvdXQgZnVuY3Rpb25cblx0ICogQHBhcmFtICB7T2JqZWN0fSBzZXR0aW5nc1xuXHQgKi9cblx0dmFyIHJlc2l6ZVRocm90dGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdGlmICggIWV2ZW50VGltZW91dCApIHtcblx0XHRcdGV2ZW50VGltZW91dCA9IHNldFRpbWVvdXQoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRldmVudFRpbWVvdXQgPSBudWxsOyAvLyBSZXNldCB0aW1lb3V0XG5cdFx0XHRcdGhlYWRlckhlaWdodCA9IGdldEhlYWRlckhlaWdodCggZml4ZWRIZWFkZXIgKTsgLy8gR2V0IHRoZSBoZWlnaHQgb2YgYSBmaXhlZCBoZWFkZXIgaWYgb25lIGV4aXN0c1xuXHRcdFx0fSksIDY2KTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIERlc3Ryb3kgdGhlIGN1cnJlbnQgaW5pdGlhbGl6YXRpb24uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdHNtb290aFNjcm9sbC5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gSWYgcGx1Z2luIGlzbid0IGFscmVhZHkgaW5pdGlhbGl6ZWQsIHN0b3Bcblx0XHRpZiAoICFzZXR0aW5ncyApIHJldHVybjtcblxuXHRcdC8vIFJlbW92ZSBldmVudCBsaXN0ZW5lcnNcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnY2xpY2snLCBjbGlja0hhbmRsZXIsIGZhbHNlICk7XG5cdFx0cm9vdC5yZW1vdmVFdmVudExpc3RlbmVyKCAncmVzaXplJywgcmVzaXplVGhyb3R0bGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gUmVzZXQgdmFyYWlibGVzXG5cdFx0c2V0dGluZ3MgPSBudWxsO1xuXHRcdGFuY2hvciA9IG51bGw7XG5cdFx0dG9nZ2xlID0gbnVsbDtcblx0XHRmaXhlZEhlYWRlciA9IG51bGw7XG5cdFx0aGVhZGVySGVpZ2h0ID0gbnVsbDtcblx0XHRldmVudFRpbWVvdXQgPSBudWxsO1xuXHRcdGFuaW1hdGlvbkludGVydmFsID0gbnVsbDtcblx0fTtcblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZSBTbW9vdGggU2Nyb2xsXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgVXNlciBzZXR0aW5nc1xuXHQgKi9cblx0c21vb3RoU2Nyb2xsLmluaXQgPSBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBmZWF0dXJlIHRlc3Rcblx0XHRpZiAoICFzdXBwb3J0cyApIHJldHVybjtcblxuXHRcdC8vIERlc3Ryb3kgYW55IGV4aXN0aW5nIGluaXRpYWxpemF0aW9uc1xuXHRcdHNtb290aFNjcm9sbC5kZXN0cm95KCk7XG5cblx0XHQvLyBTZWxlY3RvcnMgYW5kIHZhcmlhYmxlc1xuXHRcdHNldHRpbmdzID0gZXh0ZW5kKCBkZWZhdWx0cywgb3B0aW9ucyB8fCB7fSApOyAvLyBNZXJnZSB1c2VyIG9wdGlvbnMgd2l0aCBkZWZhdWx0c1xuXHRcdGZpeGVkSGVhZGVyID0gc2V0dGluZ3Muc2VsZWN0b3JIZWFkZXIgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCBzZXR0aW5ncy5zZWxlY3RvckhlYWRlciApIDogbnVsbDsgLy8gR2V0IHRoZSBmaXhlZCBoZWFkZXJcblx0XHRoZWFkZXJIZWlnaHQgPSBnZXRIZWFkZXJIZWlnaHQoIGZpeGVkSGVhZGVyICk7XG5cblx0XHQvLyBXaGVuIGEgdG9nZ2xlIGlzIGNsaWNrZWQsIHJ1biB0aGUgY2xpY2sgaGFuZGxlclxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjbGljaycsIGNsaWNrSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIExpc3RlbiBmb3IgaGFzaCBjaGFuZ2VzXG5cdFx0cm9vdC5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgaGFzaENoYW5nZUhhbmRsZXIsIGZhbHNlKTtcblxuXHRcdC8vIElmIHdpbmRvdyBpcyByZXNpemVkIGFuZCB0aGVyZSdzIGEgZml4ZWQgaGVhZGVyLCByZWNhbGN1bGF0ZSBpdHMgc2l6ZVxuXHRcdGlmICggZml4ZWRIZWFkZXIgKSB7XG5cdFx0XHRyb290LmFkZEV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCByZXNpemVUaHJvdHRsZXIsIGZhbHNlICk7XG5cdFx0fVxuXG5cdH07XG5cblxuXHQvL1xuXHQvLyBQdWJsaWMgQVBJc1xuXHQvL1xuXG5cdHJldHVybiBzbW9vdGhTY3JvbGw7XG5cbn0pKTsiLCJcbiQod2luZG93KS5iaW5kKCcgbG9hZCByZXNpemUgb3JpZW50YXRpb25DaGFuZ2UgJywgZnVuY3Rpb24gKCkge1xuICAgdmFyIGZvb3RlciA9ICQoXCIjZm9vdGVyLWNvbnRhaW5lclwiKTtcbiAgIHZhciBwb3MgPSBmb290ZXIucG9zaXRpb24oKTtcbiAgIHZhciBoZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG4gICBoZWlnaHQgPSBoZWlnaHQgLSBwb3MudG9wO1xuICAgaGVpZ2h0ID0gaGVpZ2h0IC0gZm9vdGVyLmhlaWdodCgpIC0xO1xuXG4gICBmdW5jdGlvbiBzdGlja3lGb290ZXIoKSB7XG4gICAgIGZvb3Rlci5jc3Moe1xuICAgICAgICAgJ21hcmdpbi10b3AnOiBoZWlnaHQgKyAncHgnXG4gICAgIH0pO1xuICAgfVxuXG4gICBpZiAoaGVpZ2h0ID4gMCkge1xuICAgICBzdGlja3lGb290ZXIoKTtcbiAgIH1cbn0pO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiB3aWF3VW5pdmVyc2FsQWpheC5qcyB2MS4wXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuIWZ1bmN0aW9uKCQpIHtcblxuXHQkKGZ1bmN0aW9uKCl7XG5cblxuXHRcdC8vIENsaWNrIHRoZSBidXR0b24hXG5cdFx0JChcIi5hcmNoaXZlX19sb2FkLW1vcmUgYVwiKS5jbGljayggZnVuY3Rpb24oKXtcblxuXHRcdFx0Ly8gYWxlcnQoJ3NheSB3aGFhYT8nKTtcblxuXHRcdFx0dmFyIHVybCA9ICQodGhpcykuYXR0cignaHJlZicpLFxuXHRcdFx0XHRzcGxpdF91cmwgPSB1cmwuc2xpY2UoMCwgLTEpLnNwbGl0KCcvJyksXG5cdFx0XHRcdHBhZ2VfbnVtID0gc3BsaXRfdXJsWyBzcGxpdF91cmwubGVuZ3RoLTFdLFxuXHRcdFx0XHR2YXJzID0ge307XG5cblxuXHRcdFx0aWYgKCBpc05hTihwYWdlX251bSkgKXtcblx0XHRcdFx0cGFnZV9udW0gPSBzcGxpdF91cmxbIHNwbGl0X3VybC5sZW5ndGgtMl07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB1cCB0aGUgY29ycmVjdCB2YXJzXG5cdFx0XHRpZiAoICQoXCIjd2lhd190YXhvbm9teVwiKS5sZW5ndGggPj0gMSkge1xuXHRcdFx0XHR2YXJzLnRheG9ub215IFx0PSAkKFwiI3dpYXdfdGF4b25vbXlcIikudmFsKCk7XG5cdFx0XHRcdHZhcnMudGVybV9pZCBcdD0gJChcIiN3aWF3X3Rlcm1faWRcIikudmFsKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXJzLnBvc3RfdHlwZSBcdD0gJChcIiN3aWF3X3Bvc3RfdHlwZVwiKS52YWwoKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc29sZS5sb2coc3BsaXRfdXJsKTtcblx0XHRcdGNvbnNvbGUubG9nKHZhcnMpO1xuXHRcdFx0Y29uc29sZS5sb2cocGFnZV9udW0pO1xuXG5cdFx0XHR3aWF3X2dldF9tb3JlX3Bvc3RzKCBwYWdlX251bSwgdmFycyk7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9KTtcblxuXG5cblx0XHQvLyBHZXQgUG9zdHMgQUpBWCBDYWxsXG5cdFx0ZnVuY3Rpb24gd2lhd19nZXRfbW9yZV9wb3N0cyggcGFnZV9udW0sIHZhcnMgKSB7XG5cblx0XHRcdC8vIFNob3cgdGhlIGFqYXggbG9hZGVyXG5cdFx0XHQkKFwiLmFqYXgtc3Bpbm5lclwiKS5zaG93KCk7XG5cblx0XHRcdC8vIG1ha2Ugc3VyZSBwYWdlX251bSBpcyBiZWluZyByZWFkIGFzIGFuIElOVFxuXHRcdFx0dmFyIHBhZ2VfbnVtID0gcGFyc2VJbnQoIHBhZ2VfbnVtKTtcblxuXHRcdFx0Ly8gRG8gdGhlIEFKQVggY2FsbFxuXHRcdFx0JC5hamF4KHtcblx0XHRcdFx0dXJsOiBqc192YXJzLmFqYXh1cmwsXG5cdFx0XHRcdHR5cGU6ICdwb3N0Jyxcblx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdGFjdGlvbjogJ2FyY2hpdmVfbG9hZF9tb3JlJyxcblx0XHRcdFx0XHRwYWdlOiBcdHBhZ2VfbnVtLFxuXHRcdFx0XHRcdGRhdGE6XHR2YXJzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbihleGNlcHRpb24pe1xuXHRcdFx0XHRcdGFsZXJ0KCdFeGVwdGlvbjonK2V4Y2VwdGlvbik7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCBodG1sICkge1xuXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coaHRtbCk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSB3ZXJlIGFueSByZXN1bHRzXG5cdFx0XHRcdFx0aWYgKCBodG1sICE9ICcnKSB7XG5cblxuXHRcdFx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBuZXh0IHBhZ2UgVVJMXG5cdFx0XHRcdFx0XHR2YXIgYnRuIFx0XHRcdFx0XHQ9ICQoXCIuYXJjaGl2ZV9fbG9hZC1tb3JlIGFcIiksXG5cdFx0XHRcdFx0XHRcdGJ0bl91cmwgXHRcdFx0XHQ9IGJ0bi5hdHRyKCdocmVmJyk7XG5cblx0XHRcdFx0XHRcdGJ0bl91cmwgXHRcdFx0XHRcdD0gYnRuX3VybC5zbGljZSgwLCAtMSkuc3BsaXQoJy8nKSxcblx0XHRcdFx0XHRcdGJ0bl91cmxbIGJ0bl91cmwubGVuZ3RoLTFdIFx0PSAocGFnZV9udW0gKyAxKSxcblx0XHRcdFx0XHRcdGJ0bl91cmwgXHRcdFx0XHRcdD0gYnRuX3VybC5qb2luKCcvJykgKyAnLyc7XG5cblx0XHRcdFx0XHRcdGJ0bi5hdHRyKCdocmVmJywgYnRuX3VybCk7XG5cblxuXHRcdFx0XHRcdFx0Ly8gSW5zZXJ0IHRoZSBIVE1MXG5cdFx0XHRcdFx0XHQkKFwiI2FqYXgtYmVmb3JlLW1lXCIpLmJlZm9yZSggaHRtbCk7XG5cblx0XHRcdFx0XHRcdFF1aWNrTG9va0luaXQoKTsgLy8gYWRkZWQgdGhpcyBzbyB0aGF0IHRoZSBxdWlja2xvb2sgd29ya3MgYWZ0ZXIgbG9hZCBtb3JlLiBTZWUgYXBwLmpzIGZ1bmN0aW9uIGNhbGxlZCBRdWlja0xvb2tJbml0XG5cblx0XHRcdFx0XHQvLyBObyByZXN1bHRzXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gc2F5IG5vIHBvc3RzXG5cdFx0XHRcdFx0XHQkKFwiI2FqYXgtYmVmb3JlLW1lXCIpLmJlZm9yZSggJzxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+PHA+Tm8gZnVydGhlciByZXN1bHRzLjwvcD48L2Rpdj4nKTtcblxuXHRcdFx0XHRcdFx0Ly8gaGlkZSB0aGUgbmV4dCBidXR0b25cblx0XHRcdFx0XHRcdCQoXCIuYXJjaGl2ZV9fbG9hZC1tb3JlXCIpLmhpZGUoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEhpZGUgdGhlIGFqYXggbG9hZGVyXG5cdFx0XHRcdFx0JChcIi5hamF4LXNwaW5uZXJcIikuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9KTtcblxuXG5cbn0od2luZG93LmpRdWVyeSk7XG4iXX0=
