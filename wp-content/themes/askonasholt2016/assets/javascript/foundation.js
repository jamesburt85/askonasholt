!function ($) {

  "use strict";

  var FOUNDATION_VERSION = '6.2.4';

  // Global Foundation object
  // This is attached to the window, or used as a module for AMD/Browserify
  var Foundation = {
    version: FOUNDATION_VERSION,

    /**
     * Stores initialized plugins.
     */
    _plugins: {},

    /**
     * Stores generated unique ids for plugin instances
     */
    _uuids: [],

    /**
     * Returns a boolean for RTL support
     */
    rtl: function () {
      return $('html').attr('dir') === 'rtl';
    },
    /**
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.
     */
    plugin: function (plugin, name) {
      // Object key to use when adding to global Foundation object
      // Examples: Foundation.Reveal, Foundation.OffCanvas
      var className = name || functionName(plugin);
      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
      // Examples: data-reveal, data-off-canvas
      var attrName = hyphenate(className);

      // Add to the Foundation object and the plugins list (for reflowing)
      this._plugins[attrName] = this[className] = plugin;
    },
    /**
     * @function
     * Populates the _uuids array with pointers to each individual plugin instance.
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @param {String} name - the name of the plugin, passed as a camelCased string.
     * @fires Plugin#init
     */
    registerPlugin: function (plugin, name) {
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
      plugin.uuid = this.GetYoDigits(6, pluginName);

      if (!plugin.$element.attr(`data-${ pluginName }`)) {
        plugin.$element.attr(`data-${ pluginName }`, plugin.uuid);
      }
      if (!plugin.$element.data('zfPlugin')) {
        plugin.$element.data('zfPlugin', plugin);
      }
      /**
       * Fires when the plugin has initialized.
       * @event Plugin#init
       */
      plugin.$element.trigger(`init.zf.${ pluginName }`);

      this._uuids.push(plugin.uuid);

      return;
    },
    /**
     * @function
     * Removes the plugins uuid from the _uuids array.
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
     * Also fires the destroyed event for the plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @fires Plugin#destroyed
     */
    unregisterPlugin: function (plugin) {
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
      plugin.$element.removeAttr(`data-${ pluginName }`).removeData('zfPlugin')
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      .trigger(`destroyed.zf.${ pluginName }`);
      for (var prop in plugin) {
        plugin[prop] = null; //clean up script to prep for garbage collection.
      }
      return;
    },

    /**
     * @function
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.
     */
    reInit: function (plugins) {
      var isJQ = plugins instanceof $;
      try {
        if (isJQ) {
          plugins.each(function () {
            $(this).data('zfPlugin')._init();
          });
        } else {
          var type = typeof plugins,
              _this = this,
              fns = {
            'object': function (plgs) {
              plgs.forEach(function (p) {
                p = hyphenate(p);
                $('[data-' + p + ']').foundation('_init');
              });
            },
            'string': function () {
              plugins = hyphenate(plugins);
              $('[data-' + plugins + ']').foundation('_init');
            },
            'undefined': function () {
              this['object'](Object.keys(_this._plugins));
            }
          };
          fns[type](plugins);
        }
      } catch (err) {
        console.error(err);
      } finally {
        return plugins;
      }
    },

    /**
     * returns a random base-36 uid with namespacing
     * @function
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
     * @returns {String} - unique id
     */
    GetYoDigits: function (length, namespace) {
      length = length || 6;
      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? `-${ namespace }` : '');
    },
    /**
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
     */
    reflow: function (elem, plugins) {

      // If plugins is undefined, just grab everything
      if (typeof plugins === 'undefined') {
        plugins = Object.keys(this._plugins);
      }
      // If plugins is a string, convert it to an array with one item
      else if (typeof plugins === 'string') {
          plugins = [plugins];
        }

      var _this = this;

      // Iterate through each plugin
      $.each(plugins, function (i, name) {
        // Get the current plugin
        var plugin = _this._plugins[name];

        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

        // For each plugin found, initialize it
        $elem.each(function () {
          var $el = $(this),
              opts = {};
          // Don't double-dip on plugins
          if ($el.data('zfPlugin')) {
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
            return;
          }

          if ($el.attr('data-options')) {
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
              var opt = e.split(':').map(function (el) {
                return el.trim();
              });
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
            });
          }
          try {
            $el.data('zfPlugin', new plugin($(this), opts));
          } catch (er) {
            console.error(er);
          } finally {
            return;
          }
        });
      });
    },
    getFnName: functionName,
    transitionend: function ($elem) {
      var transitions = {
        'transition': 'transitionend',
        'WebkitTransition': 'webkitTransitionEnd',
        'MozTransition': 'transitionend',
        'OTransition': 'otransitionend'
      };
      var elem = document.createElement('div'),
          end;

      for (var t in transitions) {
        if (typeof elem.style[t] !== 'undefined') {
          end = transitions[t];
        }
      }
      if (end) {
        return end;
      } else {
        end = setTimeout(function () {
          $elem.triggerHandler('transitionend', [$elem]);
        }, 1);
        return 'transitionend';
      }
    }
  };

  Foundation.util = {
    /**
     * Function for applying a debounce effect to a function call.
     * @function
     * @param {Function} func - Function to be called at end of timeout.
     * @param {Number} delay - Time in ms to delay the call of `func`.
     * @returns function
     */
    throttle: function (func, delay) {
      var timer = null;

      return function () {
        var context = this,
            args = arguments;

        if (timer === null) {
          timer = setTimeout(function () {
            func.apply(context, args);
            timer = null;
          }, delay);
        }
      };
    }
  };

  // TODO: consider not making this a jQuery function
  // TODO: need way to reflow vs. re-initialize
  /**
   * The Foundation jQuery method.
   * @param {String|Array} method - An action to perform on the current jQuery object.
   */
  var foundation = function (method) {
    var type = typeof method,
        $meta = $('meta.foundation-mq'),
        $noJS = $('.no-js');

    if (!$meta.length) {
      $('<meta class="foundation-mq">').appendTo(document.head);
    }
    if ($noJS.length) {
      $noJS.removeClass('no-js');
    }

    if (type === 'undefined') {
      //needs to initialize the Foundation object, or an individual plugin.
      Foundation.MediaQuery._init();
      Foundation.reflow(this);
    } else if (type === 'string') {
      //an individual method to invoke on a plugin or group of plugins
      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
      var plugClass = this.data('zfPlugin'); //determine the class of plugin

      if (plugClass !== undefined && plugClass[method] !== undefined) {
        //make sure both the class and method exist
        if (this.length === 1) {
          //if there's only one, call it directly.
          plugClass[method].apply(plugClass, args);
        } else {
          this.each(function (i, el) {
            //otherwise loop through the jQuery collection and invoke the method on each
            plugClass[method].apply($(el).data('zfPlugin'), args);
          });
        }
      } else {
        //error for no class or no method
        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
      }
    } else {
      //error for invalid argument type
      throw new TypeError(`We're sorry, ${ type } is not a valid parameter. You must use a string representing the method you wish to invoke.`);
    }
    return this;
  };

  window.Foundation = Foundation;
  $.fn.foundation = foundation;

  // Polyfill for requestAnimationFrame
  (function () {
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
      return new Date().getTime();
    };

    var vendors = ['webkit', 'moz'];
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
      var vp = vendors[i];
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;
      window.requestAnimationFrame = function (callback) {
        var now = Date.now();
        var nextTime = Math.max(lastTime + 16, now);
        return setTimeout(function () {
          callback(lastTime = nextTime);
        }, nextTime - now);
      };
      window.cancelAnimationFrame = clearTimeout;
    }
    /**
     * Polyfill for performance.now, required by rAF
     */
    if (!window.performance || !window.performance.now) {
      window.performance = {
        start: Date.now(),
        now: function () {
          return Date.now() - this.start;
        }
      };
    }
  })();
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // closest thing possible to the ECMAScript 5
        // internal IsCallable function
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };

      if (this.prototype) {
        // native functions don't have a prototype
        fNOP.prototype = this.prototype;
      }
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
  // Polyfill to get the name of a function in IE9
  function functionName(fn) {
    if (Function.prototype.name === undefined) {
      var funcNameRegex = /function\s([^(]{1,})\(/;
      var results = funcNameRegex.exec(fn.toString());
      return results && results.length > 1 ? results[1].trim() : "";
    } else if (fn.prototype === undefined) {
      return fn.constructor.name;
    } else {
      return fn.prototype.constructor.name;
    }
  }
  function parseValue(str) {
    if (/true/.test(str)) return true;else if (/false/.test(str)) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;
  }
  // Convert PascalCase to kebab-case
  // Thank you: http://stackoverflow.com/a/8955580
  function hyphenate(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  }
}(jQuery);
;'use strict';

!function ($) {

  Foundation.Box = {
    ImNotTouchingYou: ImNotTouchingYou,
    GetDimensions: GetDimensions,
    GetOffsets: GetOffsets
  };

  /**
   * Compares the dimensions of an element to a container and determines collision events with container.
   * @function
   * @param {jQuery} element - jQuery object to test for collisions.
   * @param {jQuery} parent - jQuery object to use as bounding container.
   * @param {Boolean} lrOnly - set to true to check left and right values only.
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.
   * @default if no parent object passed, detects collisions with `window`.
   * @returns {Boolean} - true if collision free, false if a collision in any direction.
   */
  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {
    var eleDims = GetDimensions(element),
        top,
        bottom,
        left,
        right;

    if (parent) {
      var parDims = GetDimensions(parent);

      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;
      top = eleDims.offset.top >= parDims.offset.top;
      left = eleDims.offset.left >= parDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;
    } else {
      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;
      top = eleDims.offset.top >= eleDims.windowDims.offset.top;
      left = eleDims.offset.left >= eleDims.windowDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;
    }

    var allDirs = [bottom, top, left, right];

    if (lrOnly) {
      return left === right === true;
    }

    if (tbOnly) {
      return top === bottom === true;
    }

    return allDirs.indexOf(false) === -1;
  };

  /**
   * Uses native methods to return an object of dimension values.
   * @function
   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
   * @returns {Object} - nested object of integer pixel values
   * TODO - if element is window, return only those values.
   */
  function GetDimensions(elem, test) {
    elem = elem.length ? elem[0] : elem;

    if (elem === window || elem === document) {
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
    }

    var rect = elem.getBoundingClientRect(),
        parRect = elem.parentNode.getBoundingClientRect(),
        winRect = document.body.getBoundingClientRect(),
        winY = window.pageYOffset,
        winX = window.pageXOffset;

    return {
      width: rect.width,
      height: rect.height,
      offset: {
        top: rect.top + winY,
        left: rect.left + winX
      },
      parentDims: {
        width: parRect.width,
        height: parRect.height,
        offset: {
          top: parRect.top + winY,
          left: parRect.left + winX
        }
      },
      windowDims: {
        width: winRect.width,
        height: winRect.height,
        offset: {
          top: winY,
          left: winX
        }
      }
    };
  }

  /**
   * Returns an object of top and left integer pixel values for dynamically rendered elements,
   * such as: Tooltip, Reveal, and Dropdown
   * @function
   * @param {jQuery} element - jQuery object for the element being positioned.
   * @param {jQuery} anchor - jQuery object for the element's anchor point.
   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
   * TODO alter/rewrite to work with `em` values as well/instead of pixels
   */
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
    var $eleDims = GetDimensions(element),
        $anchorDims = anchor ? GetDimensions(anchor) : null;

    switch (position) {
      case 'top':
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top
        };
        break;
      case 'right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset,
          top: $anchorDims.offset.top
        };
        break;
      case 'center top':
        return {
          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'center bottom':
        return {
          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'center left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center':
        return {
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'reveal':
        return {
          left: ($eleDims.windowDims.width - $eleDims.width) / 2,
          top: $eleDims.windowDims.offset.top + vOffset
        };
      case 'reveal full':
        return {
          left: $eleDims.windowDims.offset.left,
          top: $eleDims.windowDims.offset.top
        };
        break;
      case 'left bottom':
        return {
          left: $anchorDims.offset.left,
          top: $anchorDims.offset.top + $anchorDims.height
        };
        break;
      case 'right bottom':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,
          top: $anchorDims.offset.top + $anchorDims.height
        };
        break;
      default:
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
    }
  }
}(jQuery);
;/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/

'use strict';

!function ($) {

  const keyCodes = {
    9: 'TAB',
    13: 'ENTER',
    27: 'ESCAPE',
    32: 'SPACE',
    37: 'ARROW_LEFT',
    38: 'ARROW_UP',
    39: 'ARROW_RIGHT',
    40: 'ARROW_DOWN'
  };

  var commands = {};

  var Keyboard = {
    keys: getKeyCodes(keyCodes),

    /**
     * Parses the (keyboard) event and returns a String that represents its key
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
     * @param {Event} event - the event generated by the event handler
     * @return String key - String that represents the key pressed
     */
    parseKey(event) {
      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();
      if (event.shiftKey) key = `SHIFT_${ key }`;
      if (event.ctrlKey) key = `CTRL_${ key }`;
      if (event.altKey) key = `ALT_${ key }`;
      return key;
    },

    /**
     * Handles the given (keyboard) event
     * @param {Event} event - the event generated by the event handler
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal
     * @param {Objects} functions - collection of functions that are to be executed
     */
    handleKey(event, component, functions) {
      var commandList = commands[component],
          keyCode = this.parseKey(event),
          cmds,
          command,
          fn;

      if (!commandList) return console.warn('Component not defined!');

      if (typeof commandList.ltr === 'undefined') {
        // this component does not differentiate between ltr and rtl
        cmds = commandList; // use plain list
      } else {
        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
      }
      command = cmds[keyCode];

      fn = functions[command];
      if (fn && typeof fn === 'function') {
        // execute function  if exists
        var returnValue = fn.apply();
        if (functions.handled || typeof functions.handled === 'function') {
          // execute function when event was handled
          functions.handled(returnValue);
        }
      } else {
        if (functions.unhandled || typeof functions.unhandled === 'function') {
          // execute function when event was not handled
          functions.unhandled();
        }
      }
    },

    /**
     * Finds all focusable elements within the given `$element`
     * @param {jQuery} $element - jQuery object to search within
     * @return {jQuery} $focusable - all focusable elements within `$element`
     */
    findFocusable($element) {
      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {
          return false;
        } //only have visible elements and those that have a tabindex greater or equal 0
        return true;
      });
    },

    /**
     * Returns the component name name
     * @param {Object} component - Foundation component, e.g. Slider or Reveal
     * @return String componentName
     */

    register(componentName, cmds) {
      commands[componentName] = cmds;
    }
  };

  /*
   * Constants for easier comparing.
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   */
  function getKeyCodes(kcs) {
    var k = {};
    for (var kc in kcs) k[kcs[kc]] = kcs[kc];
    return k;
  }

  Foundation.Keyboard = Keyboard;
}(jQuery);
;'use strict';

!function ($) {

  // Default set of media queries
  const defaultQueries = {
    'default': 'only screen',
    landscape: 'only screen and (orientation: landscape)',
    portrait: 'only screen and (orientation: portrait)',
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };

  var MediaQuery = {
    queries: [],

    current: '',

    /**
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function
     * @private
     */
    _init() {
      var self = this;
      var extractedStyles = $('.foundation-mq').css('font-family');
      var namedQueries;

      namedQueries = parseStyleToObject(extractedStyles);

      for (var key in namedQueries) {
        if (namedQueries.hasOwnProperty(key)) {
          self.queries.push({
            name: key,
            value: `only screen and (min-width: ${ namedQueries[key] })`
          });
        }
      }

      this.current = this._getCurrentSize();

      this._watcher();
    },

    /**
     * Checks if the screen is at least as wide as a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
     */
    atLeast(size) {
      var query = this.get(size);

      if (query) {
        return window.matchMedia(query).matches;
      }

      return false;
    },

    /**
     * Gets the media query of a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to get.
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
     */
    get(size) {
      for (var i in this.queries) {
        if (this.queries.hasOwnProperty(i)) {
          var query = this.queries[i];
          if (size === query.name) return query.value;
        }
      }

      return null;
    },

    /**
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function
     * @private
     * @returns {String} Name of the current breakpoint.
     */
    _getCurrentSize() {
      var matched;

      for (var i = 0; i < this.queries.length; i++) {
        var query = this.queries[i];

        if (window.matchMedia(query.value).matches) {
          matched = query;
        }
      }

      if (typeof matched === 'object') {
        return matched.name;
      } else {
        return matched;
      }
    },

    /**
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
     * @function
     * @private
     */
    _watcher() {
      $(window).on('resize.zf.mediaquery', () => {
        var newSize = this._getCurrentSize(),
            currentSize = this.current;

        if (newSize !== currentSize) {
          // Change the current media query
          this.current = newSize;

          // Broadcast the media query change on the window
          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
        }
      });
    }
  };

  Foundation.MediaQuery = MediaQuery;

  // matchMedia() polyfill - Test a CSS media type/query in JS.
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
  window.matchMedia || (window.matchMedia = function () {
    'use strict';

    // For browsers that support matchMedium api such as IE 9 and webkit

    var styleMedia = window.styleMedia || window.media;

    // For those that don't support matchMedium
    if (!styleMedia) {
      var style = document.createElement('style'),
          script = document.getElementsByTagName('script')[0],
          info = null;

      style.type = 'text/css';
      style.id = 'matchmediajs-test';

      script && script.parentNode && script.parentNode.insertBefore(style, script);

      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

      styleMedia = {
        matchMedium(media) {
          var text = `@media ${ media }{ #matchmediajs-test { width: 1px; } }`;

          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
          if (style.styleSheet) {
            style.styleSheet.cssText = text;
          } else {
            style.textContent = text;
          }

          // Test if media query is true or false
          return info.width === '1px';
        }
      };
    }

    return function (media) {
      return {
        matches: styleMedia.matchMedium(media || 'all'),
        media: media || 'all'
      };
    };
  }());

  // Thank you: https://github.com/sindresorhus/query-string
  function parseStyleToObject(str) {
    var styleObject = {};

    if (typeof str !== 'string') {
      return styleObject;
    }

    str = str.trim().slice(1, -1); // browsers re-quote string style values

    if (!str) {
      return styleObject;
    }

    styleObject = str.split('&').reduce(function (ret, param) {
      var parts = param.replace(/\+/g, ' ').split('=');
      var key = parts[0];
      var val = parts[1];
      key = decodeURIComponent(key);

      // missing `=` should be `null`:
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
      val = val === undefined ? null : decodeURIComponent(val);

      if (!ret.hasOwnProperty(key)) {
        ret[key] = val;
      } else if (Array.isArray(ret[key])) {
        ret[key].push(val);
      } else {
        ret[key] = [ret[key], val];
      }
      return ret;
    }, {});

    return styleObject;
  }

  Foundation.MediaQuery = MediaQuery;
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Motion module.
   * @module foundation.motion
   */

  const initClasses = ['mui-enter', 'mui-leave'];
  const activeClasses = ['mui-enter-active', 'mui-leave-active'];

  const Motion = {
    animateIn: function (element, animation, cb) {
      animate(true, element, animation, cb);
    },

    animateOut: function (element, animation, cb) {
      animate(false, element, animation, cb);
    }
  };

  function Move(duration, elem, fn) {
    var anim,
        prog,
        start = null;
    // console.log('called');

    function move(ts) {
      if (!start) start = window.performance.now();
      // console.log(start, ts);
      prog = ts - start;
      fn.apply(elem);

      if (prog < duration) {
        anim = window.requestAnimationFrame(move, elem);
      } else {
        window.cancelAnimationFrame(anim);
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      }
    }
    anim = window.requestAnimationFrame(move);
  }

  /**
   * Animates an element in or out using a CSS transition class.
   * @function
   * @private
   * @param {Boolean} isIn - Defines if the animation is in or out.
   * @param {Object} element - jQuery or HTML object to animate.
   * @param {String} animation - CSS class to use.
   * @param {Function} cb - Callback to run when animation is finished.
   */
  function animate(isIn, element, animation, cb) {
    element = $(element).eq(0);

    if (!element.length) return;

    var initClass = isIn ? initClasses[0] : initClasses[1];
    var activeClass = isIn ? activeClasses[0] : activeClasses[1];

    // Set up the animation
    reset();

    element.addClass(animation).css('transition', 'none');

    requestAnimationFrame(() => {
      element.addClass(initClass);
      if (isIn) element.show();
    });

    // Start the animation
    requestAnimationFrame(() => {
      element[0].offsetWidth;
      element.css('transition', '').addClass(activeClass);
    });

    // Clean up the animation when it finishes
    element.one(Foundation.transitionend(element), finish);

    // Hides the element (for out animations), resets the element, and runs a callback
    function finish() {
      if (!isIn) element.hide();
      reset();
      if (cb) cb.apply(element);
    }

    // Resets transitions and removes motion-specific classes
    function reset() {
      element[0].style.transitionDuration = 0;
      element.removeClass(`${ initClass } ${ activeClass } ${ animation }`);
    }
  }

  Foundation.Move = Move;
  Foundation.Motion = Motion;
}(jQuery);
;'use strict';

!function ($) {

  const Nest = {
    Feather(menu, type = 'zf') {
      menu.attr('role', 'menubar');

      var items = menu.find('li').attr({ 'role': 'menuitem' }),
          subMenuClass = `is-${ type }-submenu`,
          subItemClass = `${ subMenuClass }-item`,
          hasSubClass = `is-${ type }-submenu-parent`;

      menu.find('a:first').attr('tabindex', 0);

      items.each(function () {
        var $item = $(this),
            $sub = $item.children('ul');

        if ($sub.length) {
          $item.addClass(hasSubClass).attr({
            'aria-haspopup': true,
            'aria-expanded': false,
            'aria-label': $item.children('a:first').text()
          });

          $sub.addClass(`submenu ${ subMenuClass }`).attr({
            'data-submenu': '',
            'aria-hidden': true,
            'role': 'menu'
          });
        }

        if ($item.parent('[data-submenu]').length) {
          $item.addClass(`is-submenu-item ${ subItemClass }`);
        }
      });

      return;
    },

    Burn(menu, type) {
      var items = menu.find('li').removeAttr('tabindex'),
          subMenuClass = `is-${ type }-submenu`,
          subItemClass = `${ subMenuClass }-item`,
          hasSubClass = `is-${ type }-submenu-parent`;

      menu.find('>li, .menu, .menu > li').removeClass(`${ subMenuClass } ${ subItemClass } ${ hasSubClass } is-submenu-item submenu is-active`).removeAttr('data-submenu').css('display', '');

      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')
      //           .removeAttr('data-submenu'));
      // items.each(function(){
      //   var $item = $(this),
      //       $sub = $item.children('ul');
      //   if($item.parent('[data-submenu]').length){
      //     $item.removeClass('is-submenu-item ' + subItemClass);
      //   }
      //   if($sub.length){
      //     $item.removeClass('has-submenu');
      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');
      //   }
      // });
    }
  };

  Foundation.Nest = Nest;
}(jQuery);
;'use strict';

!function ($) {

  function Timer(elem, options, cb) {
    var _this = this,
        duration = options.duration,
        //options is an object for easily adding features later.
    nameSpace = Object.keys(elem.data())[0] || 'timer',
        remain = -1,
        start,
        timer;

    this.isPaused = false;

    this.restart = function () {
      remain = -1;
      clearTimeout(timer);
      this.start();
    };

    this.start = function () {
      this.isPaused = false;
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      remain = remain <= 0 ? duration : remain;
      elem.data('paused', false);
      start = Date.now();
      timer = setTimeout(function () {
        if (options.infinite) {
          _this.restart(); //rerun the timer.
        }
        if (cb && typeof cb === 'function') {
          cb();
        }
      }, remain);
      elem.trigger(`timerstart.zf.${ nameSpace }`);
    };

    this.pause = function () {
      this.isPaused = true;
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      elem.data('paused', true);
      var end = Date.now();
      remain = remain - (end - start);
      elem.trigger(`timerpaused.zf.${ nameSpace }`);
    };
  }

  /**
   * Runs a callback function when images are fully loaded.
   * @param {Object} images - Image(s) to check if loaded.
   * @param {Func} callback - Function to execute when image is fully loaded.
   */
  function onImagesLoaded(images, callback) {
    var self = this,
        unloaded = images.length;

    if (unloaded === 0) {
      callback();
    }

    images.each(function () {
      if (this.complete) {
        singleImageLoaded();
      } else if (typeof this.naturalWidth !== 'undefined' && this.naturalWidth > 0) {
        singleImageLoaded();
      } else {
        $(this).one('load', function () {
          singleImageLoaded();
        });
      }
    });

    function singleImageLoaded() {
      unloaded--;
      if (unloaded === 0) {
        callback();
      }
    }
  }

  Foundation.Timer = Timer;
  Foundation.onImagesLoaded = onImagesLoaded;
}(jQuery);
;//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************
(function ($) {

	$.spotSwipe = {
		version: '1.0.0',
		enabled: 'ontouchstart' in document.documentElement,
		preventDefault: false,
		moveThreshold: 75,
		timeThreshold: 200
	};

	var startPosX,
	    startPosY,
	    startTime,
	    elapsedTime,
	    isMoving = false;

	function onTouchEnd() {
		//  alert(this);
		this.removeEventListener('touchmove', onTouchMove);
		this.removeEventListener('touchend', onTouchEnd);
		isMoving = false;
	}

	function onTouchMove(e) {
		if ($.spotSwipe.preventDefault) {
			e.preventDefault();
		}
		if (isMoving) {
			var x = e.touches[0].pageX;
			var y = e.touches[0].pageY;
			var dx = startPosX - x;
			var dy = startPosY - y;
			var dir;
			elapsedTime = new Date().getTime() - startTime;
			if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
				dir = dx > 0 ? 'left' : 'right';
			}
			// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
			//   dir = dy > 0 ? 'down' : 'up';
			// }
			if (dir) {
				e.preventDefault();
				onTouchEnd.call(this);
				$(this).trigger('swipe', dir).trigger(`swipe${ dir }`);
			}
		}
	}

	function onTouchStart(e) {
		if (e.touches.length == 1) {
			startPosX = e.touches[0].pageX;
			startPosY = e.touches[0].pageY;
			isMoving = true;
			startTime = new Date().getTime();
			this.addEventListener('touchmove', onTouchMove, false);
			this.addEventListener('touchend', onTouchEnd, false);
		}
	}

	function init() {
		this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
	}

	function teardown() {
		this.removeEventListener('touchstart', onTouchStart);
	}

	$.event.special.swipe = { setup: init };

	$.each(['left', 'up', 'down', 'right'], function () {
		$.event.special[`swipe${ this }`] = { setup: function () {
				$(this).on('swipe', $.noop);
			} };
	});
})(jQuery);
/****************************************************
 * Method for adding psuedo drag events to elements *
 ***************************************************/
!function ($) {
	$.fn.addTouch = function () {
		this.each(function (i, el) {
			$(el).bind('touchstart touchmove touchend touchcancel', function () {
				//we pass the original event object because the jQuery event
				//object is normalized to w3c specs and does not provide the TouchList
				handleTouch(event);
			});
		});

		var handleTouch = function (event) {
			var touches = event.changedTouches,
			    first = touches[0],
			    eventTypes = {
				touchstart: 'mousedown',
				touchmove: 'mousemove',
				touchend: 'mouseup'
			},
			    type = eventTypes[event.type],
			    simulatedEvent;

			if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
				simulatedEvent = new window.MouseEvent(type, {
					'bubbles': true,
					'cancelable': true,
					'screenX': first.screenX,
					'screenY': first.screenY,
					'clientX': first.clientX,
					'clientY': first.clientY
				});
			} else {
				simulatedEvent = document.createEvent('MouseEvent');
				simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
			}
			first.target.dispatchEvent(simulatedEvent);
		};
	};
}(jQuery);

//**********************************
//**From the jQuery Mobile Library**
//**need to recreate functionality**
//**and try to improve if possible**
//**********************************

/* Removing the jQuery function ****
************************************

(function( $, window, undefined ) {

	var $document = $( document ),
		// supportTouch = $.mobile.support.touch,
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";

	// setup new event shortcuts
	$.each( ( "touchstart touchmove touchend " +
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {

		$.fn[ name ] = function( fn ) {
			return fn ? this.bind( name, fn ) : this.trigger( name );
		};

		// jQuery < 1.8
		if ( $.attrFn ) {
			$.attrFn[ name ] = true;
		}
	});

	function triggerCustomEvent( obj, eventType, event, bubble ) {
		var originalType = event.type;
		event.type = eventType;
		if ( bubble ) {
			$.event.trigger( event, undefined, obj );
		} else {
			$.event.dispatch.call( obj, event );
		}
		event.type = originalType;
	}

	// also handles taphold

	// Also handles swipeleft, swiperight
	$.event.special.swipe = {

		// More than this horizontal displacement, and we will suppress scrolling.
		scrollSupressionThreshold: 30,

		// More time than this, and it isn't a swipe.
		durationThreshold: 1000,

		// Swipe horizontal displacement must be more than this.
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		// Swipe vertical displacement must be less than this.
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		getLocation: function ( event ) {
			var winPageX = window.pageXOffset,
				winPageY = window.pageYOffset,
				x = event.clientX,
				y = event.clientY;

			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {

				// iOS4 clientX/clientY have the value that should have been
				// in pageX/pageY. While pageX/page/ have the value 0
				x = x - winPageX;
				y = y - winPageY;
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {

				// Some Android browsers have totally bogus values for clientX/Y
				// when scrolling/zooming a page. Detectable since clientX/clientY
				// should never be smaller than pageX/pageY minus page scroll
				x = event.pageX - winPageX;
				y = event.pageY - winPageY;
			}

			return {
				x: x,
				y: y
			};
		},

		start: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ],
						origin: $( event.target )
					};
		},

		stop: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ]
					};
		},

		handleSwipe: function( start, stop, thisObject, origTarget ) {
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";

				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;
			}
			return false;

		},

		// This serves as a flag to ensure that at most one swipe event event is
		// in work at any given time
		eventInProgress: false,

		setup: function() {
			var events,
				thisObject = this,
				$this = $( thisObject ),
				context = {};

			// Retrieve the events data for this element and add the swipe context
			events = $.data( this, "mobile-events" );
			if ( !events ) {
				events = { length: 0 };
				$.data( this, "mobile-events", events );
			}
			events.length++;
			events.swipe = context;

			context.start = function( event ) {

				// Bail if we're already working on a swipe event
				if ( $.event.special.swipe.eventInProgress ) {
					return;
				}
				$.event.special.swipe.eventInProgress = true;

				var stop,
					start = $.event.special.swipe.start( event ),
					origTarget = event.target,
					emitted = false;

				context.move = function( event ) {
					if ( !start || event.isDefaultPrevented() ) {
						return;
					}

					stop = $.event.special.swipe.stop( event );
					if ( !emitted ) {
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );
						if ( emitted ) {

							// Reset the context to make way for the next swipe event
							$.event.special.swipe.eventInProgress = false;
						}
					}
					// prevent scrolling
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
						event.preventDefault();
					}
				};

				context.stop = function() {
						emitted = true;

						// Reset the context to make way for the next swipe event
						$.event.special.swipe.eventInProgress = false;
						$document.off( touchMoveEvent, context.move );
						context.move = null;
				};

				$document.on( touchMoveEvent, context.move )
					.one( touchStopEvent, context.stop );
			};
			$this.on( touchStartEvent, context.start );
		},

		teardown: function() {
			var events, context;

			events = $.data( this, "mobile-events" );
			if ( events ) {
				context = events.swipe;
				delete events.swipe;
				events.length--;
				if ( events.length === 0 ) {
					$.removeData( this, "mobile-events" );
				}
			}

			if ( context ) {
				if ( context.start ) {
					$( this ).off( touchStartEvent, context.start );
				}
				if ( context.move ) {
					$document.off( touchMoveEvent, context.move );
				}
				if ( context.stop ) {
					$document.off( touchStopEvent, context.stop );
				}
			}
		}
	};
	$.each({
		swipeleft: "swipe.left",
		swiperight: "swipe.right"
	}, function( event, sourceEvent ) {

		$.event.special[ event ] = {
			setup: function() {
				$( this ).bind( sourceEvent, $.noop );
			},
			teardown: function() {
				$( this ).unbind( sourceEvent );
			}
		};
	});
})( jQuery, this );
*/
;'use strict';

!function ($) {

  const MutationObserver = function () {
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
    for (var i = 0; i < prefixes.length; i++) {
      if (`${ prefixes[i] }MutationObserver` in window) {
        return window[`${ prefixes[i] }MutationObserver`];
      }
    }
    return false;
  }();

  const triggers = (el, type) => {
    el.data(type).split(' ').forEach(id => {
      $(`#${ id }`)[type === 'close' ? 'trigger' : 'triggerHandler'](`${ type }.zf.trigger`, [el]);
    });
  };
  // Elements with [data-open] will reveal a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-open]', function () {
    triggers($(this), 'open');
  });

  // Elements with [data-close] will close a plugin that supports it when clicked.
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
  $(document).on('click.zf.trigger', '[data-close]', function () {
    let id = $(this).data('close');
    if (id) {
      triggers($(this), 'close');
    } else {
      $(this).trigger('close.zf.trigger');
    }
  });

  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-toggle]', function () {
    triggers($(this), 'toggle');
  });

  // Elements with [data-closable] will respond to close.zf.trigger events.
  $(document).on('close.zf.trigger', '[data-closable]', function (e) {
    e.stopPropagation();
    let animation = $(this).data('closable');

    if (animation !== '') {
      Foundation.Motion.animateOut($(this), animation, function () {
        $(this).trigger('closed.zf');
      });
    } else {
      $(this).fadeOut().trigger('closed.zf');
    }
  });

  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {
    let id = $(this).data('toggle-focus');
    $(`#${ id }`).triggerHandler('toggle.zf.trigger', [$(this)]);
  });

  /**
  * Fires once after all other scripts have loaded
  * @function
  * @private
  */
  $(window).on('load', () => {
    checkListeners();
  });

  function checkListeners() {
    eventsListener();
    resizeListener();
    scrollListener();
    closemeListener();
  }

  //******** only fires this function once on load, if there's something to watch ********
  function closemeListener(pluginName) {
    var yetiBoxes = $('[data-yeti-box]'),
        plugNames = ['dropdown', 'tooltip', 'reveal'];

    if (pluginName) {
      if (typeof pluginName === 'string') {
        plugNames.push(pluginName);
      } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
        plugNames.concat(pluginName);
      } else {
        console.error('Plugin names must be strings');
      }
    }
    if (yetiBoxes.length) {
      let listeners = plugNames.map(name => {
        return `closeme.zf.${ name }`;
      }).join(' ');

      $(window).off(listeners).on(listeners, function (e, pluginId) {
        let plugin = e.namespace.split('.')[0];
        let plugins = $(`[data-${ plugin }]`).not(`[data-yeti-box="${ pluginId }"]`);

        plugins.each(function () {
          let _this = $(this);

          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      });
    }
  }

  function resizeListener(debounce) {
    let timer,
        $nodes = $('[data-resize]');
    if ($nodes.length) {
      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('resizeme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a resize event
          $nodes.attr('data-events', "resize");
        }, debounce || 10); //default time to emit resize event
      });
    }
  }

  function scrollListener(debounce) {
    let timer,
        $nodes = $('[data-scroll]');
    if ($nodes.length) {
      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('scrollme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a scroll event
          $nodes.attr('data-events', "scroll");
        }, debounce || 10); //default time to emit scroll event
      });
    }
  }

  function eventsListener() {
    if (!MutationObserver) {
      return false;
    }
    let nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');

    //element callback
    var listeningElementsMutation = function (mutationRecordsList) {
      var $target = $(mutationRecordsList[0].target);
      //trigger the event handler for the element depending on type
      switch ($target.attr("data-events")) {

        case "resize":
          $target.triggerHandler('resizeme.zf.trigger', [$target]);
          break;

        case "scroll":
          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
          break;

        // case "mutate" :
        // console.log('mutate', $target);
        // $target.triggerHandler('mutate.zf.trigger');
        //
        // //make sure we don't get stuck in an infinite loop from sloppy codeing
        // if ($target.index('[data-mutate]') == $("[data-mutate]").length-1) {
        //   domMutationObserver();
        // }
        // break;

        default:
          return false;
        //nothing
      }
    };

    if (nodes.length) {
      //for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer
      for (var i = 0; i <= nodes.length - 1; i++) {
        let elementObserver = new MutationObserver(listeningElementsMutation);
        elementObserver.observe(nodes[i], { attributes: true, childList: false, characterData: false, subtree: false, attributeFilter: ["data-events"] });
      }
    }
  }

  // ------------------------------------

  // [PH]
  // Foundation.CheckWatchers = checkWatchers;
  Foundation.IHearYou = checkListeners;
  // Foundation.ISeeYou = scrollListener;
  // Foundation.IFeelYou = closemeListener;
}(jQuery);

// function domMutationObserver(debounce) {
//   // !!! This is coming soon and needs more work; not active  !!! //
//   var timer,
//   nodes = document.querySelectorAll('[data-mutate]');
//   //
//   if (nodes.length) {
//     // var MutationObserver = (function () {
//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
//     //   for (var i=0; i < prefixes.length; i++) {
//     //     if (prefixes[i] + 'MutationObserver' in window) {
//     //       return window[prefixes[i] + 'MutationObserver'];
//     //     }
//     //   }
//     //   return false;
//     // }());
//
//
//     //for the body, we need to listen for all changes effecting the style and class attributes
//     var bodyObserver = new MutationObserver(bodyMutation);
//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:["style", "class"]});
//
//
//     //body callback
//     function bodyMutation(mutate) {
//       //trigger all listening elements and signal a mutation event
//       if (timer) { clearTimeout(timer); }
//
//       timer = setTimeout(function() {
//         bodyObserver.disconnect();
//         $('[data-mutate]').attr('data-events',"mutate");
//       }, debounce || 150);
//     }
//   }
// }
;window.whatInput = function () {

  'use strict';

  /*
    ---------------
    variables
    ---------------
  */

  // array of actively pressed keys

  var activeKeys = [];

  // cache document.body
  var body;

  // boolean: true if touch buffer timer is running
  var buffer = false;

  // the last used input type
  var currentInput = null;

  // `input` types that don't accept text
  var nonTypingInputs = ['button', 'checkbox', 'file', 'image', 'radio', 'reset', 'submit'];

  // detect version of mouse wheel event to use
  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
  var mouseWheel = detectWheel();

  // list of modifier keys commonly used with the mouse and
  // can be safely ignored to prevent false keyboard detection
  var ignoreMap = [16, // shift
  17, // control
  18, // alt
  91, // Windows key / left Apple cmd
  93 // Windows menu / right Apple cmd
  ];

  // mapping of events to input types
  var inputMap = {
    'keydown': 'keyboard',
    'keyup': 'keyboard',
    'mousedown': 'mouse',
    'mousemove': 'mouse',
    'MSPointerDown': 'pointer',
    'MSPointerMove': 'pointer',
    'pointerdown': 'pointer',
    'pointermove': 'pointer',
    'touchstart': 'touch'
  };

  // add correct mouse wheel event mapping to `inputMap`
  inputMap[detectWheel()] = 'mouse';

  // array of all used input types
  var inputTypes = [];

  // mapping of key codes to a common name
  var keyMap = {
    9: 'tab',
    13: 'enter',
    16: 'shift',
    27: 'esc',
    32: 'space',
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down'
  };

  // map of IE 10 pointer events
  var pointerMap = {
    2: 'touch',
    3: 'touch', // treat pen like touch
    4: 'mouse'
  };

  // touch buffer timer
  var timer;

  /*
    ---------------
    functions
    ---------------
  */

  // allows events that are also triggered to be filtered out for `touchstart`
  function eventBuffer() {
    clearTimer();
    setInput(event);

    buffer = true;
    timer = window.setTimeout(function () {
      buffer = false;
    }, 650);
  }

  function bufferedEvent(event) {
    if (!buffer) setInput(event);
  }

  function unBufferedEvent(event) {
    clearTimer();
    setInput(event);
  }

  function clearTimer() {
    window.clearTimeout(timer);
  }

  function setInput(event) {
    var eventKey = key(event);
    var value = inputMap[event.type];
    if (value === 'pointer') value = pointerType(event);

    // don't do anything if the value matches the input type already set
    if (currentInput !== value) {
      var eventTarget = target(event);
      var eventTargetNode = eventTarget.nodeName.toLowerCase();
      var eventTargetType = eventTargetNode === 'input' ? eventTarget.getAttribute('type') : null;

      if ( // only if the user flag to allow typing in form fields isn't set
      !body.hasAttribute('data-whatinput-formtyping') &&

      // only if currentInput has a value
      currentInput &&

      // only if the input is `keyboard`
      value === 'keyboard' &&

      // not if the key is `TAB`
      keyMap[eventKey] !== 'tab' && (

      // only if the target is a form input that accepts text
      eventTargetNode === 'textarea' || eventTargetNode === 'select' || eventTargetNode === 'input' && nonTypingInputs.indexOf(eventTargetType) < 0) ||
      // ignore modifier keys
      ignoreMap.indexOf(eventKey) > -1) {
        // ignore keyboard typing
      } else {
        switchInput(value);
      }
    }

    if (value === 'keyboard') logKeys(eventKey);
  }

  function switchInput(string) {
    currentInput = string;
    body.setAttribute('data-whatinput', currentInput);

    if (inputTypes.indexOf(currentInput) === -1) inputTypes.push(currentInput);
  }

  function key(event) {
    return event.keyCode ? event.keyCode : event.which;
  }

  function target(event) {
    return event.target || event.srcElement;
  }

  function pointerType(event) {
    if (typeof event.pointerType === 'number') {
      return pointerMap[event.pointerType];
    } else {
      return event.pointerType === 'pen' ? 'touch' : event.pointerType; // treat pen like touch
    }
  }

  // keyboard logging
  function logKeys(eventKey) {
    if (activeKeys.indexOf(keyMap[eventKey]) === -1 && keyMap[eventKey]) activeKeys.push(keyMap[eventKey]);
  }

  function unLogKeys(event) {
    var eventKey = key(event);
    var arrayPos = activeKeys.indexOf(keyMap[eventKey]);

    if (arrayPos !== -1) activeKeys.splice(arrayPos, 1);
  }

  function bindEvents() {
    body = document.body;

    // pointer events (mouse, pen, touch)
    if (window.PointerEvent) {
      body.addEventListener('pointerdown', bufferedEvent);
      body.addEventListener('pointermove', bufferedEvent);
    } else if (window.MSPointerEvent) {
      body.addEventListener('MSPointerDown', bufferedEvent);
      body.addEventListener('MSPointerMove', bufferedEvent);
    } else {

      // mouse events
      body.addEventListener('mousedown', bufferedEvent);
      body.addEventListener('mousemove', bufferedEvent);

      // touch events
      if ('ontouchstart' in window) {
        body.addEventListener('touchstart', eventBuffer);
      }
    }

    // mouse wheel
    body.addEventListener(mouseWheel, bufferedEvent);

    // keyboard events
    body.addEventListener('keydown', unBufferedEvent);
    body.addEventListener('keyup', unBufferedEvent);
    document.addEventListener('keyup', unLogKeys);
  }

  /*
    ---------------
    utilities
    ---------------
  */

  // detect version of mouse wheel event to use
  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
  function detectWheel() {
    return mouseWheel = 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support "wheel"

    document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least "mousewheel"
    'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox
  }

  /*
    ---------------
    init
     don't start script unless browser cuts the mustard,
    also passes if polyfills are used
    ---------------
  */

  if ('addEventListener' in window && Array.prototype.indexOf) {

    // if the dom is already ready already (script was placed at bottom of <body>)
    if (document.body) {
      bindEvents();

      // otherwise wait for the dom to load (script was placed in the <head>)
    } else {
      document.addEventListener('DOMContentLoaded', bindEvents);
    }
  }

  /*
    ---------------
    api
    ---------------
  */

  return {

    // returns string: the current input type
    ask: function () {
      return currentInput;
    },

    // returns array: currently pressed keys
    keys: function () {
      return activeKeys;
    },

    // returns array: all the detected input types
    types: function () {
      return inputTypes;
    },

    // accepts string: manually set the input type
    set: switchInput
  };
}();
;'use strict';

!function ($) {

  /**
   * Abide module.
   * @module foundation.abide
   */

  class Abide {
    /**
     * Creates a new instance of Abide.
     * @class
     * @fires Abide#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options = {}) {
      this.$element = element;
      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Abide');
    }

    /**
     * Initializes the Abide plugin and calls functions to get Abide functioning on load.
     * @private
     */
    _init() {
      this.$inputs = this.$element.find('input, textarea, select');

      this._events();
    }

    /**
     * Initializes events for Abide.
     * @private
     */
    _events() {
      this.$element.off('.abide').on('reset.zf.abide', () => {
        this.resetForm();
      }).on('submit.zf.abide', () => {
        return this.validateForm();
      });

      if (this.options.validateOn === 'fieldChange') {
        this.$inputs.off('change.zf.abide').on('change.zf.abide', e => {
          this.validateInput($(e.target));
        });
      }

      if (this.options.liveValidate) {
        this.$inputs.off('input.zf.abide').on('input.zf.abide', e => {
          this.validateInput($(e.target));
        });
      }
    }

    /**
     * Calls necessary functions to update Abide upon DOM change
     * @private
     */
    _reflow() {
      this._init();
    }

    /**
     * Checks whether or not a form element has the required attribute and if it's checked or not
     * @param {Object} element - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */
    requiredCheck($el) {
      if (!$el.attr('required')) return true;

      var isGood = true;

      switch ($el[0].type) {
        case 'checkbox':
          isGood = $el[0].checked;
          break;

        case 'select':
        case 'select-one':
        case 'select-multiple':
          var opt = $el.find('option:selected');
          if (!opt.length || !opt.val()) isGood = false;
          break;

        default:
          if (!$el.val() || !$el.val().length) isGood = false;
      }

      return isGood;
    }

    /**
     * Based on $el, get the first element with selector in this order:
     * 1. The element's direct sibling('s).
     * 3. The element's parent's children.
     *
     * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
     *
     * @param {Object} $el - jQuery object to use as reference to find the form error selector.
     * @returns {Object} jQuery object with the selector.
     */
    findFormError($el) {
      var $error = $el.siblings(this.options.formErrorSelector);

      if (!$error.length) {
        $error = $el.parent().find(this.options.formErrorSelector);
      }

      return $error;
    }

    /**
     * Get the first element in this order:
     * 2. The <label> with the attribute `[for="someInputId"]`
     * 3. The `.closest()` <label>
     *
     * @param {Object} $el - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */
    findLabel($el) {
      var id = $el[0].id;
      var $label = this.$element.find(`label[for="${ id }"]`);

      if (!$label.length) {
        return $el.closest('label');
      }

      return $label;
    }

    /**
     * Get the set of labels associated with a set of radio els in this order
     * 2. The <label> with the attribute `[for="someInputId"]`
     * 3. The `.closest()` <label>
     *
     * @param {Object} $el - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */
    findRadioLabels($els) {
      var labels = $els.map((i, el) => {
        var id = el.id;
        var $label = this.$element.find(`label[for="${ id }"]`);

        if (!$label.length) {
          $label = $(el).closest('label');
        }
        return $label[0];
      });

      return $(labels);
    }

    /**
     * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
     * @param {Object} $el - jQuery object to add the class to
     */
    addErrorClasses($el) {
      var $label = this.findLabel($el);
      var $formError = this.findFormError($el);

      if ($label.length) {
        $label.addClass(this.options.labelErrorClass);
      }

      if ($formError.length) {
        $formError.addClass(this.options.formErrorClass);
      }

      $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');
    }

    /**
     * Remove CSS error classes etc from an entire radio button group
     * @param {String} groupName - A string that specifies the name of a radio button group
     *
     */

    removeRadioErrorClasses(groupName) {
      var $els = this.$element.find(`:radio[name="${ groupName }"]`);
      var $labels = this.findRadioLabels($els);
      var $formErrors = this.findFormError($els);

      if ($labels.length) {
        $labels.removeClass(this.options.labelErrorClass);
      }

      if ($formErrors.length) {
        $formErrors.removeClass(this.options.formErrorClass);
      }

      $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
    }

    /**
     * Removes CSS error class as specified by the Abide settings from the label, input, and the form
     * @param {Object} $el - jQuery object to remove the class from
     */
    removeErrorClasses($el) {
      // radios need to clear all of the els
      if ($el[0].type == 'radio') {
        return this.removeRadioErrorClasses($el.attr('name'));
      }

      var $label = this.findLabel($el);
      var $formError = this.findFormError($el);

      if ($label.length) {
        $label.removeClass(this.options.labelErrorClass);
      }

      if ($formError.length) {
        $formError.removeClass(this.options.formErrorClass);
      }

      $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
    }

    /**
     * Goes through a form to find inputs and proceeds to validate them in ways specific to their type
     * @fires Abide#invalid
     * @fires Abide#valid
     * @param {Object} element - jQuery object to validate, should be an HTML input
     * @returns {Boolean} goodToGo - If the input is valid or not.
     */
    validateInput($el) {
      var clearRequire = this.requiredCheck($el),
          validated = false,
          customValidator = true,
          validator = $el.attr('data-validator'),
          equalTo = true;

      // don't validate ignored inputs or hidden inputs
      if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]')) {
        return true;
      }

      switch ($el[0].type) {
        case 'radio':
          validated = this.validateRadio($el.attr('name'));
          break;

        case 'checkbox':
          validated = clearRequire;
          break;

        case 'select':
        case 'select-one':
        case 'select-multiple':
          validated = clearRequire;
          break;

        default:
          validated = this.validateText($el);
      }

      if (validator) {
        customValidator = this.matchValidation($el, validator, $el.attr('required'));
      }

      if ($el.attr('data-equalto')) {
        equalTo = this.options.validators.equalTo($el);
      }

      var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;
      var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';

      this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);

      /**
       * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
       * Trigger includes the DOM element of the input.
       * @event Abide#valid
       * @event Abide#invalid
       */
      $el.trigger(message, [$el]);

      return goodToGo;
    }

    /**
     * Goes through a form and if there are any invalid inputs, it will display the form error element
     * @returns {Boolean} noError - true if no errors were detected...
     * @fires Abide#formvalid
     * @fires Abide#forminvalid
     */
    validateForm() {
      var acc = [];
      var _this = this;

      this.$inputs.each(function () {
        acc.push(_this.validateInput($(this)));
      });

      var noError = acc.indexOf(false) === -1;

      this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');

      /**
       * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
       * Trigger includes the element of the form.
       * @event Abide#formvalid
       * @event Abide#forminvalid
       */
      this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);

      return noError;
    }

    /**
     * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
     * @param {Object} $el - jQuery object to validate, should be a text input HTML element
     * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
     * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
     */
    validateText($el, pattern) {
      // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
      pattern = pattern || $el.attr('pattern') || $el.attr('type');
      var inputText = $el.val();
      var valid = false;

      if (inputText.length) {
        // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
        if (this.options.patterns.hasOwnProperty(pattern)) {
          valid = this.options.patterns[pattern].test(inputText);
        }
        // If the pattern name isn't also the type attribute of the field, then test it as a regexp
        else if (pattern !== $el.attr('type')) {
            valid = new RegExp(pattern).test(inputText);
          } else {
            valid = true;
          }
      }
      // An empty field is valid if it's not required
      else if (!$el.prop('required')) {
          valid = true;
        }

      return valid;
    }

    /**
     * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
     * @param {String} groupName - A string that specifies the name of a radio button group
     * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
     */
    validateRadio(groupName) {
      // If at least one radio in the group has the `required` attribute, the group is considered required
      // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
      var $group = this.$element.find(`:radio[name="${ groupName }"]`);
      var valid = false,
          required = false;

      // For the group to be required, at least one radio needs to be required
      $group.each((i, e) => {
        if ($(e).attr('required')) {
          required = true;
        }
      });
      if (!required) valid = true;

      if (!valid) {
        // For the group to be valid, at least one radio needs to be checked
        $group.each((i, e) => {
          if ($(e).prop('checked')) {
            valid = true;
          }
        });
      };

      return valid;
    }

    /**
     * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
     * @param {Object} $el - jQuery input element.
     * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
     * @param {Boolean} required - self explanatory?
     * @returns {Boolean} - true if validations passed.
     */
    matchValidation($el, validators, required) {
      required = required ? true : false;

      var clear = validators.split(' ').map(v => {
        return this.options.validators[v]($el, required, $el.parent());
      });
      return clear.indexOf(false) === -1;
    }

    /**
     * Resets form inputs and styles
     * @fires Abide#formreset
     */
    resetForm() {
      var $form = this.$element,
          opts = this.options;

      $(`.${ opts.labelErrorClass }`, $form).not('small').removeClass(opts.labelErrorClass);
      $(`.${ opts.inputErrorClass }`, $form).not('small').removeClass(opts.inputErrorClass);
      $(`${ opts.formErrorSelector }.${ opts.formErrorClass }`).removeClass(opts.formErrorClass);
      $form.find('[data-abide-error]').css('display', 'none');
      $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
      $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
      $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
      /**
       * Fires when the form has been reset.
       * @event Abide#formreset
       */
      $form.trigger('formreset.zf.abide', [$form]);
    }

    /**
     * Destroys an instance of Abide.
     * Removes error styles and classes from elements, without resetting their values.
     */
    destroy() {
      var _this = this;
      this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');

      this.$inputs.off('.abide').each(function () {
        _this.removeErrorClasses($(this));
      });

      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  Abide.defaults = {
    /**
     * The default event to validate inputs. Checkboxes and radios validate immediately.
     * Remove or change this value for manual validation.
     * @option
     * @example 'fieldChange'
     */
    validateOn: 'fieldChange',

    /**
     * Class to be applied to input labels on failed validation.
     * @option
     * @example 'is-invalid-label'
     */
    labelErrorClass: 'is-invalid-label',

    /**
     * Class to be applied to inputs on failed validation.
     * @option
     * @example 'is-invalid-input'
     */
    inputErrorClass: 'is-invalid-input',

    /**
     * Class selector to use to target Form Errors for show/hide.
     * @option
     * @example '.form-error'
     */
    formErrorSelector: '.form-error',

    /**
     * Class added to Form Errors on failed validation.
     * @option
     * @example 'is-visible'
     */
    formErrorClass: 'is-visible',

    /**
     * Set to true to validate text inputs on any value change.
     * @option
     * @example false
     */
    liveValidate: false,

    patterns: {
      alpha: /^[a-zA-Z]+$/,
      alpha_numeric: /^[a-zA-Z0-9]+$/,
      integer: /^[-+]?\d+$/,
      number: /^[-+]?\d*(?:[\.\,]\d+)?$/,

      // amex, visa, diners
      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
      cvv: /^([0-9]){3,4}$/,

      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
      email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,

      url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
      // abc.de
      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,

      datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
      // YYYY-MM-DD
      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
      // HH:MM:SS
      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
      dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
      // MM/DD/YYYY
      month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
      // DD/MM/YYYY
      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,

      // #FFF or #FFFFFF
      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/
    },

    /**
     * Optional validation functions to be used. `equalTo` being the only default included function.
     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
     * el : The jQuery element to validate.
     * required : Boolean value of the required attribute be present or not.
     * parent : The direct parent of the input.
     * @option
     */
    validators: {
      equalTo: function (el, required, parent) {
        return $(`#${ el.attr('data-equalto') }`).val() === el.val();
      }
    }
  };

  // Window exports
  Foundation.plugin(Abide, 'Abide');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Accordion module.
   * @module foundation.accordion
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   */

  class Accordion {
    /**
     * Creates a new instance of an accordion.
     * @class
     * @fires Accordion#init
     * @param {jQuery} element - jQuery object to make into an accordion.
     * @param {Object} options - a plain object with settings to override the default options.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Accordion');
      Foundation.Keyboard.register('Accordion', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_DOWN': 'next',
        'ARROW_UP': 'previous'
      });
    }

    /**
     * Initializes the accordion by animating the preset active pane(s).
     * @private
     */
    _init() {
      this.$element.attr('role', 'tablist');
      this.$tabs = this.$element.children('li, [data-accordion-item]');

      this.$tabs.each(function (idx, el) {
        var $el = $(el),
            $content = $el.children('[data-tab-content]'),
            id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),
            linkId = el.id || `${ id }-label`;

        $el.find('a:first').attr({
          'aria-controls': id,
          'role': 'tab',
          'id': linkId,
          'aria-expanded': false,
          'aria-selected': false
        });

        $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });
      });
      var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
      if ($initActive.length) {
        this.down($initActive, true);
      }
      this._events();
    }

    /**
     * Adds event handlers for items within the accordion.
     * @private
     */
    _events() {
      var _this = this;

      this.$tabs.each(function () {
        var $elem = $(this);
        var $tabContent = $elem.children('[data-tab-content]');
        if ($tabContent.length) {
          $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
            e.preventDefault();
            _this.toggle($tabContent);
          }).on('keydown.zf.accordion', function (e) {
            Foundation.Keyboard.handleKey(e, 'Accordion', {
              toggle: function () {
                _this.toggle($tabContent);
              },
              next: function () {
                var $a = $elem.next().find('a').focus();
                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              previous: function () {
                var $a = $elem.prev().find('a').focus();
                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              handled: function () {
                e.preventDefault();
                e.stopPropagation();
              }
            });
          });
        }
      });
    }

    /**
     * Toggles the selected content pane's open/close state.
     * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
     * @function
     */
    toggle($target) {
      if ($target.parent().hasClass('is-active')) {
        this.up($target);
      } else {
        this.down($target);
      }
    }

    /**
     * Opens the accordion tab defined by `$target`.
     * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
     * @param {Boolean} firstTime - flag to determine if reflow should happen.
     * @fires Accordion#down
     * @function
     */
    down($target, firstTime) {
      $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

      if (!this.options.multiExpand && !firstTime) {
        var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');
        if ($currentActive.length) {
          this.up($currentActive.not($target));
        }
      }

      $target.slideDown(this.options.slideSpeed, () => {
        /**
         * Fires when the tab is done opening.
         * @event Accordion#down
         */
        this.$element.trigger('down.zf.accordion', [$target]);
      });

      $(`#${ $target.attr('aria-labelledby') }`).attr({
        'aria-expanded': true,
        'aria-selected': true
      });
    }

    /**
     * Closes the tab defined by `$target`.
     * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
     * @fires Accordion#up
     * @function
     */
    up($target) {
      var $aunts = $target.parent().siblings(),
          _this = this;

      if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
        return;
      }

      // Foundation.Move(this.options.slideSpeed, $target, function(){
      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the tab is done collapsing up.
         * @event Accordion#up
         */
        _this.$element.trigger('up.zf.accordion', [$target]);
      });
      // });

      $target.attr('aria-hidden', true).parent().removeClass('is-active');

      $(`#${ $target.attr('aria-labelledby') }`).attr({
        'aria-expanded': false,
        'aria-selected': false
      });
    }

    /**
     * Destroys an instance of an accordion.
     * @fires Accordion#destroyed
     * @function
     */
    destroy() {
      this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
      this.$element.find('a').off('.zf.accordion');

      Foundation.unregisterPlugin(this);
    }
  }

  Accordion.defaults = {
    /**
     * Amount of time to animate the opening of an accordion pane.
     * @option
     * @example 250
     */
    slideSpeed: 250,
    /**
     * Allow the accordion to have multiple open panes.
     * @option
     * @example false
     */
    multiExpand: false,
    /**
     * Allow the accordion to close all panes.
     * @option
     * @example false
     */
    allowAllClosed: false
  };

  // Window exports
  Foundation.plugin(Accordion, 'Accordion');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * AccordionMenu module.
   * @module foundation.accordionMenu
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  class AccordionMenu {
    /**
     * Creates a new instance of an accordion menu.
     * @class
     * @fires AccordionMenu#init
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'accordion');

      this._init();

      Foundation.registerPlugin(this, 'AccordionMenu');
      Foundation.Keyboard.register('AccordionMenu', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_RIGHT': 'open',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'close',
        'ESCAPE': 'closeAll'
      });
    }

    /**
     * Initializes the accordion menu by hiding all nested menus.
     * @private
     */
    _init() {
      this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
      this.$element.attr({
        'role': 'menu',
        'aria-multiselectable': this.options.multiOpen
      });

      this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
      this.$menuLinks.each(function () {
        var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),
            $elem = $(this),
            $sub = $elem.children('[data-submenu]'),
            subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),
            isActive = $sub.hasClass('is-active');
        $elem.attr({
          'aria-controls': subId,
          'aria-expanded': isActive,
          'role': 'menuitem',
          'id': linkId
        });
        $sub.attr({
          'aria-labelledby': linkId,
          'aria-hidden': !isActive,
          'role': 'menu',
          'id': subId
        });
      });
      var initPanes = this.$element.find('.is-active');
      if (initPanes.length) {
        var _this = this;
        initPanes.each(function () {
          _this.down($(this));
        });
      }
      this._events();
    }

    /**
     * Adds event handlers for items within the menu.
     * @private
     */
    _events() {
      var _this = this;

      this.$element.find('li').each(function () {
        var $submenu = $(this).children('[data-submenu]');

        if ($submenu.length) {
          $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
            e.preventDefault();

            _this.toggle($submenu);
          });
        }
      }).on('keydown.zf.accordionmenu', function (e) {
        var $element = $(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement,
            $target = $element.children('[data-submenu]');

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

            if ($(this).children('[data-submenu]:visible').length) {
              // has open sub menu
              $nextElement = $element.find('li:first-child').find('a').first();
            }
            if ($(this).is(':first-child')) {
              // is first element of sub menu
              $prevElement = $element.parents('li').first().find('a').first();
            } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
              // if previous element has open sub menu
              $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
            }
            if ($(this).is(':last-child')) {
              // is last element of sub menu
              $nextElement = $element.parents('li').first().next('li').find('a').first();
            }

            return;
          }
        });

        Foundation.Keyboard.handleKey(e, 'AccordionMenu', {
          open: function () {
            if ($target.is(':hidden')) {
              _this.down($target);
              $target.find('li').first().find('a').first().focus();
            }
          },
          close: function () {
            if ($target.length && !$target.is(':hidden')) {
              // close active sub of this item
              _this.up($target);
            } else if ($element.parent('[data-submenu]').length) {
              // close currently open sub
              _this.up($element.parent('[data-submenu]'));
              $element.parents('li').first().find('a').first().focus();
            }
          },
          up: function () {
            $prevElement.focus();
            return true;
          },
          down: function () {
            $nextElement.focus();
            return true;
          },
          toggle: function () {
            if ($element.children('[data-submenu]').length) {
              _this.toggle($element.children('[data-submenu]'));
            }
          },
          closeAll: function () {
            _this.hideAll();
          },
          handled: function (preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
            e.stopImmediatePropagation();
          }
        });
      }); //.attr('tabindex', 0);
    }

    /**
     * Closes all panes of the menu.
     * @function
     */
    hideAll() {
      this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);
    }

    /**
     * Toggles the open/close state of a submenu.
     * @function
     * @param {jQuery} $target - the submenu to toggle
     */
    toggle($target) {
      if (!$target.is(':animated')) {
        if (!$target.is(':hidden')) {
          this.up($target);
        } else {
          this.down($target);
        }
      }
    }

    /**
     * Opens the sub-menu defined by `$target`.
     * @param {jQuery} $target - Sub-menu to open.
     * @fires AccordionMenu#down
     */
    down($target) {
      var _this = this;

      if (!this.options.multiOpen) {
        this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
      }

      $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });

      //Foundation.Move(this.options.slideSpeed, $target, function() {
      $target.slideDown(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done opening.
         * @event AccordionMenu#down
         */
        _this.$element.trigger('down.zf.accordionMenu', [$target]);
      });
      //});
    }

    /**
     * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
     * @param {jQuery} $target - Sub-menu to close.
     * @fires AccordionMenu#up
     */
    up($target) {
      var _this = this;
      //Foundation.Move(this.options.slideSpeed, $target, function(){
      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done collapsing up.
         * @event AccordionMenu#up
         */
        _this.$element.trigger('up.zf.accordionMenu', [$target]);
      });
      //});

      var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);

      $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
    }

    /**
     * Destroys an instance of accordion menu.
     * @fires AccordionMenu#destroyed
     */
    destroy() {
      this.$element.find('[data-submenu]').slideDown(0).css('display', '');
      this.$element.find('a').off('click.zf.accordionMenu');

      Foundation.Nest.Burn(this.$element, 'accordion');
      Foundation.unregisterPlugin(this);
    }
  }

  AccordionMenu.defaults = {
    /**
     * Amount of time to animate the opening of a submenu in ms.
     * @option
     * @example 250
     */
    slideSpeed: 250,
    /**
     * Allow the menu to have multiple open panes.
     * @option
     * @example true
     */
    multiOpen: true
  };

  // Window exports
  Foundation.plugin(AccordionMenu, 'AccordionMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Drilldown module.
   * @module foundation.drilldown
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  class Drilldown {
    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'drilldown');

      this._init();

      Foundation.registerPlugin(this, 'Drilldown');
      Foundation.Keyboard.register('Drilldown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close',
        'TAB': 'down',
        'SHIFT_TAB': 'up'
      });
    }

    /**
     * Initializes the drilldown by creating jQuery collections of elements
     * @private
     */
    _init() {
      this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');
      this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]');
      this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'menuitem').find('a');

      this._prepareMenu();

      this._keyboardEvents();
    }

    /**
     * prepares drilldown menu by setting attributes to links and elements
     * sets a min height to prevent content jumping
     * wraps the element if not already wrapped
     * @private
     * @function
     */
    _prepareMenu() {
      var _this = this;
      // if(!this.options.holdOpen){
      //   this._menuLinkEvents();
      // }
      this.$submenuAnchors.each(function () {
        var $link = $(this);
        var $sub = $link.parent();
        if (_this.options.parentLink) {
          $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>');
        }
        $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);
        $link.children('[data-submenu]').attr({
          'aria-hidden': true,
          'tabindex': 0,
          'role': 'menu'
        });
        _this._events($link);
      });
      this.$submenus.each(function () {
        var $menu = $(this),
            $back = $menu.find('.js-drilldown-back');
        if (!$back.length) {
          $menu.prepend(_this.options.backButton);
        }
        _this._back($menu);
      });
      if (!this.$element.parent().hasClass('is-drilldown')) {
        this.$wrapper = $(this.options.wrapper).addClass('is-drilldown');
        this.$wrapper = this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());
      }
    }

    /**
     * Adds event handlers to elements in the menu.
     * @function
     * @private
     * @param {jQuery} $elem - the current menu item to add handlers to.
     */
    _events($elem) {
      var _this = this;

      $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
        if ($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {
          e.stopImmediatePropagation();
          e.preventDefault();
        }

        // if(e.target !== e.currentTarget.firstElementChild){
        //   return false;
        // }
        _this._show($elem.parent('li'));

        if (_this.options.closeOnClick) {
          var $body = $('body');
          $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {
            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {
              return;
            }
            e.preventDefault();
            _this._hideAll();
            $body.off('.zf.drilldown');
          });
        }
      });
    }

    /**
     * Adds keydown event listener to `li`'s in the menu.
     * @private
     */
    _keyboardEvents() {
      var _this = this;

      this.$menuItems.add(this.$element.find('.js-drilldown-back > a')).on('keydown.zf.drilldown', function (e) {

        var $element = $(this),
            $elements = $element.parent('li').parent('ul').children('li').children('a'),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1));
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
            return;
          }
        });

        Foundation.Keyboard.handleKey(e, 'Drilldown', {
          next: function () {
            if ($element.is(_this.$submenuAnchors)) {
              _this._show($element.parent('li'));
              $element.parent('li').one(Foundation.transitionend($element), function () {
                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
              });
              return true;
            }
          },
          previous: function () {
            _this._hide($element.parent('li').parent('ul'));
            $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {
              setTimeout(function () {
                $element.parent('li').parent('ul').parent('li').children('a').first().focus();
              }, 1);
            });
            return true;
          },
          up: function () {
            $prevElement.focus();
            return true;
          },
          down: function () {
            $nextElement.focus();
            return true;
          },
          close: function () {
            _this._back();
            //_this.$menuItems.first().focus(); // focus to first element
          },
          open: function () {
            if (!$element.is(_this.$menuItems)) {
              // not menu item means back button
              _this._hide($element.parent('li').parent('ul'));
              $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {
                setTimeout(function () {
                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                }, 1);
              });
              return true;
            } else if ($element.is(_this.$submenuAnchors)) {
              _this._show($element.parent('li'));
              $element.parent('li').one(Foundation.transitionend($element), function () {
                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
              });
              return true;
            }
          },
          handled: function (preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
            e.stopImmediatePropagation();
          }
        });
      }); // end keyboardAccess
    }

    /**
     * Closes all open elements, and returns to root menu.
     * @function
     * @fires Drilldown#closed
     */
    _hideAll() {
      var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');
      $elem.one(Foundation.transitionend($elem), function (e) {
        $elem.removeClass('is-active is-closing');
      });
      /**
       * Fires when the menu is fully closed.
       * @event Drilldown#closed
       */
      this.$element.trigger('closed.zf.drilldown');
    }

    /**
     * Adds event listener for each `back` button, and closes open menus.
     * @function
     * @fires Drilldown#back
     * @param {jQuery} $elem - the current sub-menu to add `back` event.
     */
    _back($elem) {
      var _this = this;
      $elem.off('click.zf.drilldown');
      $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {
        e.stopImmediatePropagation();
        // console.log('mouseup on back');
        _this._hide($elem);

        // If there is a parent submenu, call show
        let parentSubMenu = $elem.parent('li').parent('ul').parent('li');
        if (parentSubMenu.length) {
          _this._show(parentSubMenu);
        }
      });
    }

    /**
     * Adds event listener to menu items w/o submenus to close open menus on click.
     * @function
     * @private
     */
    _menuLinkEvents() {
      var _this = this;
      this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
        // e.stopImmediatePropagation();
        setTimeout(function () {
          _this._hideAll();
        }, 0);
      });
    }

    /**
     * Opens a submenu.
     * @function
     * @fires Drilldown#open
     * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
     */
    _show($elem) {
      $elem.attr('aria-expanded', true);
      $elem.children('[data-submenu]').addClass('is-active').attr('aria-hidden', false);
      /**
       * Fires when the submenu has opened.
       * @event Drilldown#open
       */
      this.$element.trigger('open.zf.drilldown', [$elem]);
    }

    /**
     * Hides a submenu
     * @function
     * @fires Drilldown#hide
     * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
     */
    _hide($elem) {
      var _this = this;
      $elem.parent('li').attr('aria-expanded', false);
      $elem.attr('aria-hidden', true).addClass('is-closing').one(Foundation.transitionend($elem), function () {
        $elem.removeClass('is-active is-closing');
        $elem.blur();
      });
      /**
       * Fires when the submenu has closed.
       * @event Drilldown#hide
       */
      $elem.trigger('hide.zf.drilldown', [$elem]);
    }

    /**
     * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
     * Prevents content jumping.
     * @function
     * @private
     */
    _getMaxDims() {
      var biggest = 0;
      var result = {};

      this.$submenus.add(this.$element).each((i, elem) => {
        var height = elem.getBoundingClientRect().height;
        if (height > biggest) biggest = height;
      });

      result['min-height'] = `${ biggest }px`;
      result['max-width'] = `${ this.$element[0].getBoundingClientRect().width }px`;

      return result;
    }

    /**
     * Destroys the Drilldown Menu
     * @function
     */
    destroy() {
      this._hideAll();
      Foundation.Nest.Burn(this.$element, 'drilldown');
      this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
      this.$submenuAnchors.each(function () {
        $(this).off('.zf.drilldown');
      });
      this.$element.find('a').each(function () {
        var $link = $(this);
        $link.removeAttr('tabindex');
        if ($link.data('savedHref')) {
          $link.attr('href', $link.data('savedHref')).removeData('savedHref');
        } else {
          return;
        }
      });
      Foundation.unregisterPlugin(this);
    }
  }

  Drilldown.defaults = {
    /**
     * Markup used for JS generated back button. Prepended to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
     * @option
     * @example '<\li><\a>Back<\/a><\/li>'
     */
    backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',
    /**
     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
     * @option
     * @example '<\div class="is-drilldown"><\/div>'
     */
    wrapper: '<div></div>',
    /**
     * Adds the parent link to the submenu.
     * @option
     * @example false
     */
    parentLink: false,
    /**
     * Allow the menu to return to root list on body click.
     * @option
     * @example false
     */
    closeOnClick: false
    // holdOpen: false
  };

  // Window exports
  Foundation.plugin(Drilldown, 'Drilldown');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Dropdown module.
   * @module foundation.dropdown
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   */

  class Dropdown {
    /**
     * Creates a new instance of a dropdown.
     * @class
     * @param {jQuery} element - jQuery object to make into a dropdown.
     *        Object should be of the dropdown panel, rather than its anchor.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Dropdown');
      Foundation.Keyboard.register('Dropdown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close',
        'TAB': 'tab_forward',
        'SHIFT_TAB': 'tab_backward'
      });
    }

    /**
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function
     * @private
     */
    _init() {
      var $id = this.$element.attr('id');

      this.$anchor = $(`[data-toggle="${ $id }"]`).length ? $(`[data-toggle="${ $id }"]`) : $(`[data-open="${ $id }"]`);
      this.$anchor.attr({
        'aria-controls': $id,
        'data-is-focus': false,
        'data-yeti-box': $id,
        'aria-haspopup': true,
        'aria-expanded': false

      });

      this.options.positionClass = this.getPositionClass();
      this.counter = 4;
      this.usedPositions = [];
      this.$element.attr({
        'aria-hidden': 'true',
        'data-yeti-box': $id,
        'data-resize': $id,
        'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')
      });
      this._events();
    }

    /**
     * Helper function to determine current orientation of dropdown pane.
     * @function
     * @returns {String} position - string value of a position class.
     */
    getPositionClass() {
      var verticalPosition = this.$element[0].className.match(/(top|left|right|bottom)/g);
      verticalPosition = verticalPosition ? verticalPosition[0] : '';
      var horizontalPosition = /float-(\S+)/.exec(this.$anchor[0].className);
      horizontalPosition = horizontalPosition ? horizontalPosition[1] : '';
      var position = horizontalPosition ? horizontalPosition + ' ' + verticalPosition : verticalPosition;

      return position;
    }

    /**
     * Adjusts the dropdown panes orientation by adding/removing positioning classes.
     * @function
     * @private
     * @param {String} position - position class to remove.
     */
    _reposition(position) {
      this.usedPositions.push(position ? position : 'bottom');
      //default, try switching to opposite side
      if (!position && this.usedPositions.indexOf('top') < 0) {
        this.$element.addClass('top');
      } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
        this.$element.removeClass(position);
      } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
        this.$element.removeClass(position).addClass('right');
      } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
        this.$element.removeClass(position).addClass('left');
      }

      //if default change didn't work, try bottom or left first
      else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.$element.addClass('left');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.$element.removeClass(position).addClass('left');
        } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.$element.removeClass(position);
        } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.$element.removeClass(position);
        }
        //if nothing cleared, set to bottom
        else {
            this.$element.removeClass(position);
          }
      this.classChanged = true;
      this.counter--;
    }

    /**
     * Sets the position and orientation of the dropdown pane, checks for collisions.
     * Recursively calls itself if a collision is detected, with a new position class.
     * @function
     * @private
     */
    _setPosition() {
      if (this.$anchor.attr('aria-expanded') === 'false') {
        return false;
      }
      var position = this.getPositionClass(),
          $eleDims = Foundation.Box.GetDimensions(this.$element),
          $anchorDims = Foundation.Box.GetDimensions(this.$anchor),
          _this = this,
          direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
          param = direction === 'top' ? 'height' : 'width',
          offset = param === 'height' ? this.options.vOffset : this.options.hOffset;

      if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element)) {
        this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
          'width': $eleDims.windowDims.width - this.options.hOffset * 2,
          'height': 'auto'
        });
        this.classChanged = true;
        return false;
      }

      this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));

      while (!Foundation.Box.ImNotTouchingYou(this.$element, false, true) && this.counter) {
        this._reposition(position);
        this._setPosition();
      }
    }

    /**
     * Adds event listeners to the element utilizing the triggers utility library.
     * @function
     * @private
     */
    _events() {
      var _this = this;
      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': this._setPosition.bind(this)
      });

      if (this.options.hover) {
        this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
          if ($('body[data-whatinput="mouse"]').is('*')) {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.open();
              _this.$anchor.data('hover', true);
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.dropdown', function () {
          clearTimeout(_this.timeout);
          _this.timeout = setTimeout(function () {
            _this.close();
            _this.$anchor.data('hover', false);
          }, _this.options.hoverDelay);
        });
        if (this.options.hoverPane) {
          this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
            clearTimeout(_this.timeout);
          }).on('mouseleave.zf.dropdown', function () {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.close();
              _this.$anchor.data('hover', false);
            }, _this.options.hoverDelay);
          });
        }
      }
      this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {

        var $target = $(this),
            visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);

        Foundation.Keyboard.handleKey(e, 'Dropdown', {
          tab_forward: function () {
            if (_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))) {
              // left modal downwards, setting focus to first element
              if (_this.options.trapFocus) {
                // if focus shall be trapped
                visibleFocusableElements.eq(0).focus();
                e.preventDefault();
              } else {
                // if focus is not trapped, close dropdown on focus out
                _this.close();
              }
            }
          },
          tab_backward: function () {
            if (_this.$element.find(':focus').is(visibleFocusableElements.eq(0)) || _this.$element.is(':focus')) {
              // left modal upwards, setting focus to last element
              if (_this.options.trapFocus) {
                // if focus shall be trapped
                visibleFocusableElements.eq(-1).focus();
                e.preventDefault();
              } else {
                // if focus is not trapped, close dropdown on focus out
                _this.close();
              }
            }
          },
          open: function () {
            if ($target.is(_this.$anchor)) {
              _this.open();
              _this.$element.attr('tabindex', -1).focus();
              e.preventDefault();
            }
          },
          close: function () {
            _this.close();
            _this.$anchor.focus();
          }
        });
      });
    }

    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */
    _addBodyHandler() {
      var $body = $(document.body).not(this.$element),
          _this = this;
      $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {
        if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {
          return;
        }
        if (_this.$element.find(e.target).length) {
          return;
        }
        _this.close();
        $body.off('click.zf.dropdown');
      });
    }

    /**
     * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
     * @function
     * @fires Dropdown#closeme
     * @fires Dropdown#show
     */
    open() {
      // var _this = this;
      /**
       * Fires to close other open dropdowns
       * @event Dropdown#closeme
       */
      this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));
      this.$anchor.addClass('hover').attr({ 'aria-expanded': true });
      // this.$element/*.show()*/;
      this._setPosition();
      this.$element.addClass('is-open').attr({ 'aria-hidden': false });

      if (this.options.autoFocus) {
        var $focusable = Foundation.Keyboard.findFocusable(this.$element);
        if ($focusable.length) {
          $focusable.eq(0).focus();
        }
      }

      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }

      /**
       * Fires once the dropdown is visible.
       * @event Dropdown#show
       */
      this.$element.trigger('show.zf.dropdown', [this.$element]);
    }

    /**
     * Closes the open dropdown pane.
     * @function
     * @fires Dropdown#hide
     */
    close() {
      if (!this.$element.hasClass('is-open')) {
        return false;
      }
      this.$element.removeClass('is-open').attr({ 'aria-hidden': true });

      this.$anchor.removeClass('hover').attr('aria-expanded', false);

      if (this.classChanged) {
        var curPositionClass = this.getPositionClass();
        if (curPositionClass) {
          this.$element.removeClass(curPositionClass);
        }
        this.$element.addClass(this.options.positionClass)
        /*.hide()*/.css({ height: '', width: '' });
        this.classChanged = false;
        this.counter = 4;
        this.usedPositions.length = 0;
      }
      this.$element.trigger('hide.zf.dropdown', [this.$element]);
    }

    /**
     * Toggles the dropdown pane's visibility.
     * @function
     */
    toggle() {
      if (this.$element.hasClass('is-open')) {
        if (this.$anchor.data('hover')) return;
        this.close();
      } else {
        this.open();
      }
    }

    /**
     * Destroys the dropdown.
     * @function
     */
    destroy() {
      this.$element.off('.zf.trigger').hide();
      this.$anchor.off('.zf.dropdown');

      Foundation.unregisterPlugin(this);
    }
  }

  Dropdown.defaults = {
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @example 250
     */
    hoverDelay: 250,
    /**
     * Allow submenus to open on hover events
     * @option
     * @example false
     */
    hover: false,
    /**
     * Don't close dropdown when hovering over dropdown pane
     * @option
     * @example true
     */
    hoverPane: false,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @example 1
     */
    vOffset: 1,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @example 1
     */
    hOffset: 1,
    /**
     * Class applied to adjust open position. JS will test and fill this in.
     * @option
     * @example 'top'
     */
    positionClass: '',
    /**
     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
     * @option
     * @example false
     */
    trapFocus: false,
    /**
     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
     * @option
     * @example true
     */
    autoFocus: false,
    /**
     * Allows a click on the body to close the dropdown.
     * @option
     * @example false
     */
    closeOnClick: false
  };

  // Window exports
  Foundation.plugin(Dropdown, 'Dropdown');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * DropdownMenu module.
   * @module foundation.dropdown-menu
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.nest
   */

  class DropdownMenu {
    /**
     * Creates a new instance of DropdownMenu.
     * @class
     * @fires DropdownMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'dropdown');
      this._init();

      Foundation.registerPlugin(this, 'DropdownMenu');
      Foundation.Keyboard.register('DropdownMenu', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the plugin, and calls _prepareMenu
     * @private
     * @function
     */
    _init() {
      var subs = this.$element.find('li.is-dropdown-submenu-parent');
      this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');

      this.$menuItems = this.$element.find('[role="menuitem"]');
      this.$tabs = this.$element.children('[role="menuitem"]');
      this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);

      if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl() || this.$element.parents('.top-bar-right').is('*')) {
        this.options.alignment = 'right';
        subs.addClass('opens-left');
      } else {
        subs.addClass('opens-right');
      }
      this.changed = false;
      this._events();
    }

    _isVertical() {
      return this.$tabs.css('display') === 'block';
    }

    /**
     * Adds event listeners to elements within the menu
     * @private
     * @function
     */
    _events() {
      var _this = this,
          hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',
          parClass = 'is-dropdown-submenu-parent';

      // used for onClick and in the keyboard handlers
      var handleClickFn = function (e) {
        var $elem = $(e.target).parentsUntil('ul', `.${ parClass }`),
            hasSub = $elem.hasClass(parClass),
            hasClicked = $elem.attr('data-is-click') === 'true',
            $sub = $elem.children('.is-dropdown-submenu');

        if (hasSub) {
          if (hasClicked) {
            if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
              return;
            } else {
              e.stopImmediatePropagation();
              e.preventDefault();
              _this._hide($elem);
            }
          } else {
            e.preventDefault();
            e.stopImmediatePropagation();
            _this._show($sub);
            $elem.add($elem.parentsUntil(_this.$element, `.${ parClass }`)).attr('data-is-click', true);
          }
        } else {
          if (_this.options.closeOnClickInside) {
            _this._hide($elem);
          }
          return;
        }
      };

      if (this.options.clickOpen || hasTouch) {
        this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);
      }

      if (!this.options.disableHover) {
        this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {
          var $elem = $(this),
              hasSub = $elem.hasClass(parClass);

          if (hasSub) {
            clearTimeout(_this.delay);
            _this.delay = setTimeout(function () {
              _this._show($elem.children('.is-dropdown-submenu'));
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.dropdownmenu', function (e) {
          var $elem = $(this),
              hasSub = $elem.hasClass(parClass);
          if (hasSub && _this.options.autoclose) {
            if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {
              return false;
            }

            clearTimeout(_this.delay);
            _this.delay = setTimeout(function () {
              _this._hide($elem);
            }, _this.options.closingTime);
          }
        });
      }
      this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {
        var $element = $(e.target).parentsUntil('ul', '[role="menuitem"]'),
            isTab = _this.$tabs.index($element) > -1,
            $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(i - 1);
            $nextElement = $elements.eq(i + 1);
            return;
          }
        });

        var nextSibling = function () {
          if (!$element.is(':last-child')) {
            $nextElement.children('a:first').focus();
            e.preventDefault();
          }
        },
            prevSibling = function () {
          $prevElement.children('a:first').focus();
          e.preventDefault();
        },
            openSub = function () {
          var $sub = $element.children('ul.is-dropdown-submenu');
          if ($sub.length) {
            _this._show($sub);
            $element.find('li > a:first').focus();
            e.preventDefault();
          } else {
            return;
          }
        },
            closeSub = function () {
          //if ($element.is(':first-child')) {
          var close = $element.parent('ul').parent('li');
          close.children('a:first').focus();
          _this._hide(close);
          e.preventDefault();
          //}
        };
        var functions = {
          open: openSub,
          close: function () {
            _this._hide(_this.$element);
            _this.$menuItems.find('a:first').focus(); // focus to first element
            e.preventDefault();
          },
          handled: function () {
            e.stopImmediatePropagation();
          }
        };

        if (isTab) {
          if (_this._isVertical()) {
            // vertical menu
            if (Foundation.rtl()) {
              // right aligned
              $.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: closeSub,
                previous: openSub
              });
            } else {
              // left aligned
              $.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: openSub,
                previous: closeSub
              });
            }
          } else {
            // horizontal menu
            if (Foundation.rtl()) {
              // right aligned
              $.extend(functions, {
                next: prevSibling,
                previous: nextSibling,
                down: openSub,
                up: closeSub
              });
            } else {
              // left aligned
              $.extend(functions, {
                next: nextSibling,
                previous: prevSibling,
                down: openSub,
                up: closeSub
              });
            }
          }
        } else {
          // not tabs -> one sub
          if (Foundation.rtl()) {
            // right aligned
            $.extend(functions, {
              next: closeSub,
              previous: openSub,
              down: nextSibling,
              up: prevSibling
            });
          } else {
            // left aligned
            $.extend(functions, {
              next: openSub,
              previous: closeSub,
              down: nextSibling,
              up: prevSibling
            });
          }
        }
        Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);
      });
    }

    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */
    _addBodyHandler() {
      var $body = $(document.body),
          _this = this;
      $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
        var $link = _this.$element.find(e.target);
        if ($link.length) {
          return;
        }

        _this._hide();
        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');
      });
    }

    /**
     * Opens a dropdown pane, and checks for collisions first.
     * @param {jQuery} $sub - ul element that is a submenu to show
     * @function
     * @private
     * @fires DropdownMenu#show
     */
    _show($sub) {
      var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {
        return $(el).find($sub).length > 0;
      }));
      var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');
      this._hide($sibs, idx);
      $sub.css('visibility', 'hidden').addClass('js-dropdown-active').attr({ 'aria-hidden': false }).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({ 'aria-expanded': true });
      var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
      if (!clear) {
        var oldClass = this.options.alignment === 'left' ? '-right' : '-left',
            $parentLi = $sub.parent('.is-dropdown-submenu-parent');
        $parentLi.removeClass(`opens${ oldClass }`).addClass(`opens-${ this.options.alignment }`);
        clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
        if (!clear) {
          $parentLi.removeClass(`opens-${ this.options.alignment }`).addClass('opens-inner');
        }
        this.changed = true;
      }
      $sub.css('visibility', '');
      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }
      /**
       * Fires when the new dropdown pane is visible.
       * @event DropdownMenu#show
       */
      this.$element.trigger('show.zf.dropdownmenu', [$sub]);
    }

    /**
     * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
     * @function
     * @param {jQuery} $elem - element with a submenu to hide
     * @param {Number} idx - index of the $tabs collection to hide
     * @private
     */
    _hide($elem, idx) {
      var $toClose;
      if ($elem && $elem.length) {
        $toClose = $elem;
      } else if (idx !== undefined) {
        $toClose = this.$tabs.not(function (i, el) {
          return i === idx;
        });
      } else {
        $toClose = this.$element;
      }
      var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;

      if (somethingToClose) {
        $toClose.find('li.is-active').add($toClose).attr({
          'aria-expanded': false,
          'data-is-click': false
        }).removeClass('is-active');

        $toClose.find('ul.js-dropdown-active').attr({
          'aria-hidden': true
        }).removeClass('js-dropdown-active');

        if (this.changed || $toClose.find('opens-inner').length) {
          var oldClass = this.options.alignment === 'left' ? 'right' : 'left';
          $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass(`opens-inner opens-${ this.options.alignment }`).addClass(`opens-${ oldClass }`);
          this.changed = false;
        }
        /**
         * Fires when the open menus are closed.
         * @event DropdownMenu#hide
         */
        this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);
      }
    }

    /**
     * Destroys the plugin.
     * @function
     */
    destroy() {
      this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
      $(document.body).off('.zf.dropdownmenu');
      Foundation.Nest.Burn(this.$element, 'dropdown');
      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  DropdownMenu.defaults = {
    /**
     * Disallows hover events from opening submenus
     * @option
     * @example false
     */
    disableHover: false,
    /**
     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
     * @option
     * @example true
     */
    autoclose: true,
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @example 50
     */
    hoverDelay: 50,
    /**
     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
     * @option
     * @example true
     */
    clickOpen: false,
    /**
     * Amount of time to delay closing a submenu on a mouseleave event.
     * @option
     * @example 500
     */

    closingTime: 500,
    /**
     * Position of the menu relative to what direction the submenus should open. Handled by JS.
     * @option
     * @example 'left'
     */
    alignment: 'left',
    /**
     * Allow clicks on the body to close any open submenus.
     * @option
     * @example true
     */
    closeOnClick: true,
    /**
     * Allow clicks on leaf anchor links to close any open submenus.
     * @option
     * @example true
     */
    closeOnClickInside: true,
    /**
     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
     * @option
     * @example 'vertical'
     */
    verticalClass: 'vertical',
    /**
     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
     * @option
     * @example 'align-right'
     */
    rightClass: 'align-right',
    /**
     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
     * @option
     * @example false
     */
    forceFollow: true
  };

  // Window exports
  Foundation.plugin(DropdownMenu, 'DropdownMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Equalizer module.
   * @module foundation.equalizer
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader if equalizer contains images
   */

  class Equalizer {
    /**
     * Creates a new instance of Equalizer.
     * @class
     * @fires Equalizer#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Equalizer');
    }

    /**
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
     * @private
     */
    _init() {
      var eqId = this.$element.attr('data-equalizer') || '';
      var $watched = this.$element.find(`[data-equalizer-watch="${ eqId }"]`);

      this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
      this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));

      this.hasNested = this.$element.find('[data-equalizer]').length > 0;
      this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
      this.isOn = false;
      this._bindHandler = {
        onResizeMeBound: this._onResizeMe.bind(this),
        onPostEqualizedBound: this._onPostEqualized.bind(this)
      };

      var imgs = this.$element.find('img');
      var tooSmall;
      if (this.options.equalizeOn) {
        tooSmall = this._checkMQ();
        $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
      } else {
        this._events();
      }
      if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {
        if (imgs.length) {
          Foundation.onImagesLoaded(imgs, this._reflow.bind(this));
        } else {
          this._reflow();
        }
      }
    }

    /**
     * Removes event listeners if the breakpoint is too small.
     * @private
     */
    _pauseEvents() {
      this.isOn = false;
      this.$element.off({
        '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
        'resizeme.zf.trigger': this._bindHandler.onResizeMeBound
      });
    }

    /**
     * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
     * @private
     */
    _onResizeMe(e) {
      this._reflow();
    }

    /**
     * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
     * @private
     */
    _onPostEqualized(e) {
      if (e.target !== this.$element[0]) {
        this._reflow();
      }
    }

    /**
     * Initializes events for Equalizer.
     * @private
     */
    _events() {
      var _this = this;
      this._pauseEvents();
      if (this.hasNested) {
        this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
      } else {
        this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
      }
      this.isOn = true;
    }

    /**
     * Checks the current breakpoint to the minimum required size.
     * @private
     */
    _checkMQ() {
      var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);
      if (tooSmall) {
        if (this.isOn) {
          this._pauseEvents();
          this.$watched.css('height', 'auto');
        }
      } else {
        if (!this.isOn) {
          this._events();
        }
      }
      return tooSmall;
    }

    /**
     * A noop version for the plugin
     * @private
     */
    _killswitch() {
      return;
    }

    /**
     * Calls necessary functions to update Equalizer upon DOM change
     * @private
     */
    _reflow() {
      if (!this.options.equalizeOnStack) {
        if (this._isStacked()) {
          this.$watched.css('height', 'auto');
          return false;
        }
      }
      if (this.options.equalizeByRow) {
        this.getHeightsByRow(this.applyHeightByRow.bind(this));
      } else {
        this.getHeights(this.applyHeight.bind(this));
      }
    }

    /**
     * Manually determines if the first 2 elements are *NOT* stacked.
     * @private
     */
    _isStacked() {
      return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
    }

    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} heights - An array of heights of children within Equalizer container
     */
    getHeights(cb) {
      var heights = [];
      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        heights.push(this.$watched[i].offsetHeight);
      }
      cb(heights);
    }

    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     */
    getHeightsByRow(cb) {
      var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
          groups = [],
          group = 0;
      //group by Row
      groups[group] = [];
      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        //maybe could use this.$watched[i].offsetTop
        var elOffsetTop = $(this.$watched[i]).offset().top;
        if (elOffsetTop != lastElTopOffset) {
          group++;
          groups[group] = [];
          lastElTopOffset = elOffsetTop;
        }
        groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
      }

      for (var j = 0, ln = groups.length; j < ln; j++) {
        var heights = $(groups[j]).map(function () {
          return this[1];
        }).get();
        var max = Math.max.apply(null, heights);
        groups[j].push(max);
      }
      cb(groups);
    }

    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest
     * @param {array} heights - An array of heights of children within Equalizer container
     * @fires Equalizer#preequalized
     * @fires Equalizer#postequalized
     */
    applyHeight(heights) {
      var max = Math.max.apply(null, heights);
      /**
       * Fires before the heights are applied
       * @event Equalizer#preequalized
       */
      this.$element.trigger('preequalized.zf.equalizer');

      this.$watched.css('height', max);

      /**
       * Fires when the heights have been applied
       * @event Equalizer#postequalized
       */
      this.$element.trigger('postequalized.zf.equalizer');
    }

    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
     * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     * @fires Equalizer#preequalized
     * @fires Equalizer#preequalizedRow
     * @fires Equalizer#postequalizedRow
     * @fires Equalizer#postequalized
     */
    applyHeightByRow(groups) {
      /**
       * Fires before the heights are applied
       */
      this.$element.trigger('preequalized.zf.equalizer');
      for (var i = 0, len = groups.length; i < len; i++) {
        var groupsILength = groups[i].length,
            max = groups[i][groupsILength - 1];
        if (groupsILength <= 2) {
          $(groups[i][0][0]).css({ 'height': 'auto' });
          continue;
        }
        /**
          * Fires before the heights per row are applied
          * @event Equalizer#preequalizedRow
          */
        this.$element.trigger('preequalizedrow.zf.equalizer');
        for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
          $(groups[i][j][0]).css({ 'height': max });
        }
        /**
          * Fires when the heights per row have been applied
          * @event Equalizer#postequalizedRow
          */
        this.$element.trigger('postequalizedrow.zf.equalizer');
      }
      /**
       * Fires when the heights have been applied
       */
      this.$element.trigger('postequalized.zf.equalizer');
    }

    /**
     * Destroys an instance of Equalizer.
     * @function
     */
    destroy() {
      this._pauseEvents();
      this.$watched.css('height', 'auto');

      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  Equalizer.defaults = {
    /**
     * Enable height equalization when stacked on smaller screens.
     * @option
     * @example true
     */
    equalizeOnStack: false,
    /**
     * Enable height equalization row by row.
     * @option
     * @example false
     */
    equalizeByRow: false,
    /**
     * String representing the minimum breakpoint size the plugin should equalize heights on.
     * @option
     * @example 'medium'
     */
    equalizeOn: ''
  };

  // Window exports
  Foundation.plugin(Equalizer, 'Equalizer');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Interchange module.
   * @module foundation.interchange
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader
   */

  class Interchange {
    /**
     * Creates a new instance of Interchange.
     * @class
     * @fires Interchange#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Interchange.defaults, options);
      this.rules = [];
      this.currentPath = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Interchange');
    }

    /**
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
     * @function
     * @private
     */
    _init() {
      this._addBreakpoints();
      this._generateRules();
      this._reflow();
    }

    /**
     * Initializes events for Interchange.
     * @function
     * @private
     */
    _events() {
      $(window).on('resize.zf.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));
    }

    /**
     * Calls necessary functions to update Interchange upon DOM change
     * @function
     * @private
     */
    _reflow() {
      var match;

      // Iterate through each rule, but only save the last match
      for (var i in this.rules) {
        if (this.rules.hasOwnProperty(i)) {
          var rule = this.rules[i];

          if (window.matchMedia(rule.query).matches) {
            match = rule;
          }
        }
      }

      if (match) {
        this.replace(match.path);
      }
    }

    /**
     * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
     * @function
     * @private
     */
    _addBreakpoints() {
      for (var i in Foundation.MediaQuery.queries) {
        if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {
          var query = Foundation.MediaQuery.queries[i];
          Interchange.SPECIAL_QUERIES[query.name] = query.value;
        }
      }
    }

    /**
     * Checks the Interchange element for the provided media query + content pairings
     * @function
     * @private
     * @param {Object} element - jQuery object that is an Interchange instance
     * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
     */
    _generateRules(element) {
      var rulesList = [];
      var rules;

      if (this.options.rules) {
        rules = this.options.rules;
      } else {
        rules = this.$element.data('interchange').match(/\[.*?\]/g);
      }

      for (var i in rules) {
        if (rules.hasOwnProperty(i)) {
          var rule = rules[i].slice(1, -1).split(', ');
          var path = rule.slice(0, -1).join('');
          var query = rule[rule.length - 1];

          if (Interchange.SPECIAL_QUERIES[query]) {
            query = Interchange.SPECIAL_QUERIES[query];
          }

          rulesList.push({
            path: path,
            query: query
          });
        }
      }

      this.rules = rulesList;
    }

    /**
     * Update the `src` property of an image, or change the HTML of a container, to the specified path.
     * @function
     * @param {String} path - Path to the image or HTML partial.
     * @fires Interchange#replaced
     */
    replace(path) {
      if (this.currentPath === path) return;

      var _this = this,
          trigger = 'replaced.zf.interchange';

      // Replacing images
      if (this.$element[0].nodeName === 'IMG') {
        this.$element.attr('src', path).on('load', function () {
          _this.currentPath = path;
        }).trigger(trigger);
      }
      // Replacing background images
      else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
          this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);
        }
        // Replacing HTML
        else {
            $.get(path, function (response) {
              _this.$element.html(response).trigger(trigger);
              $(response).foundation();
              _this.currentPath = path;
            });
          }

      /**
       * Fires when content in an Interchange element is done being loaded.
       * @event Interchange#replaced
       */
      // this.$element.trigger('replaced.zf.interchange');
    }

    /**
     * Destroys an instance of interchange.
     * @function
     */
    destroy() {
      //TODO this.
    }
  }

  /**
   * Default settings for plugin
   */
  Interchange.defaults = {
    /**
     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
     * @option
     */
    rules: null
  };

  Interchange.SPECIAL_QUERIES = {
    'landscape': 'screen and (orientation: landscape)',
    'portrait': 'screen and (orientation: portrait)',
    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
  };

  // Window exports
  Foundation.plugin(Interchange, 'Interchange');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Magellan module.
   * @module foundation.magellan
   */

  class Magellan {
    /**
     * Creates a new instance of Magellan.
     * @class
     * @fires Magellan#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Magellan');
    }

    /**
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
     * @private
     */
    _init() {
      var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');
      var _this = this;
      this.$targets = $('[data-magellan-target]');
      this.$links = this.$element.find('a');
      this.$element.attr({
        'data-resize': id,
        'data-scroll': id,
        'id': id
      });
      this.$active = $();
      this.scrollPos = parseInt(window.pageYOffset, 10);

      this._events();
    }

    /**
     * Calculates an array of pixel values that are the demarcation lines between locations on the page.
     * Can be invoked if new elements are added or the size of a location changes.
     * @function
     */
    calcPoints() {
      var _this = this,
          body = document.body,
          html = document.documentElement;

      this.points = [];
      this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
      this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));

      this.$targets.each(function () {
        var $tar = $(this),
            pt = Math.round($tar.offset().top - _this.options.threshold);
        $tar.targetPoint = pt;
        _this.points.push(pt);
      });
    }

    /**
     * Initializes events for Magellan.
     * @private
     */
    _events() {
      var _this = this,
          $body = $('html, body'),
          opts = {
        duration: _this.options.animationDuration,
        easing: _this.options.animationEasing
      };
      $(window).one('load', function () {
        if (_this.options.deepLinking) {
          if (location.hash) {
            _this.scrollToLoc(location.hash);
          }
        }
        _this.calcPoints();
        _this._updateActive();
      });

      this.$element.on({
        'resizeme.zf.trigger': this.reflow.bind(this),
        'scrollme.zf.trigger': this._updateActive.bind(this)
      }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
        e.preventDefault();
        var arrival = this.getAttribute('href');
        _this.scrollToLoc(arrival);
      });
    }

    /**
     * Function to scroll to a given location on the page.
     * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
     * @function
     */
    scrollToLoc(loc) {
      // Do nothing if target does not exist to prevent errors
      if (!$(loc).length) {
        return false;
      }
      var scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);

      $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing);
    }

    /**
     * Calls necessary functions to update Magellan upon DOM change
     * @function
     */
    reflow() {
      this.calcPoints();
      this._updateActive();
    }

    /**
     * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
     * @private
     * @function
     * @fires Magellan#update
     */
    _updateActive() /*evt, elem, scrollPos*/{
      var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),
          curIdx;

      if (winPos + this.winHeight === this.docHeight) {
        curIdx = this.points.length - 1;
      } else if (winPos < this.points[0]) {
        curIdx = 0;
      } else {
        var isDown = this.scrollPos < winPos,
            _this = this,
            curVisible = this.points.filter(function (p, i) {
          return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;
        });
        curIdx = curVisible.length ? curVisible.length - 1 : 0;
      }

      this.$active.removeClass(this.options.activeClass);
      this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);

      if (this.options.deepLinking) {
        var hash = this.$active[0].getAttribute('href');
        if (window.history.pushState) {
          window.history.pushState(null, null, hash);
        } else {
          window.location.hash = hash;
        }
      }

      this.scrollPos = winPos;
      /**
       * Fires when magellan is finished updating to the new active element.
       * @event Magellan#update
       */
      this.$element.trigger('update.zf.magellan', [this.$active]);
    }

    /**
     * Destroys an instance of Magellan and resets the url of the window.
     * @function
     */
    destroy() {
      this.$element.off('.zf.trigger .zf.magellan').find(`.${ this.options.activeClass }`).removeClass(this.options.activeClass);

      if (this.options.deepLinking) {
        var hash = this.$active[0].getAttribute('href');
        window.location.hash.replace(hash, '');
      }

      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  Magellan.defaults = {
    /**
     * Amount of time, in ms, the animated scrolling should take between locations.
     * @option
     * @example 500
     */
    animationDuration: 500,
    /**
     * Animation style to use when scrolling between locations.
     * @option
     * @example 'ease-in-out'
     */
    animationEasing: 'linear',
    /**
     * Number of pixels to use as a marker for location changes.
     * @option
     * @example 50
     */
    threshold: 50,
    /**
     * Class applied to the active locations link on the magellan container.
     * @option
     * @example 'active'
     */
    activeClass: 'active',
    /**
     * Allows the script to manipulate the url of the current page, and if supported, alter the history.
     * @option
     * @example true
     */
    deepLinking: false,
    /**
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
     * @option
     * @example 25
     */
    barOffset: 0
  };

  // Window exports
  Foundation.plugin(Magellan, 'Magellan');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * OffCanvas module.
   * @module foundation.offcanvas
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   * @requires foundation.util.motion
   */

  class OffCanvas {
    /**
     * Creates a new instance of an off-canvas wrapper.
     * @class
     * @fires OffCanvas#init
     * @param {Object} element - jQuery object to initialize.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);
      this.$lastTrigger = $();
      this.$triggers = $();

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'OffCanvas');
      Foundation.Keyboard.register('OffCanvas', {
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
     * @function
     * @private
     */
    _init() {
      var id = this.$element.attr('id');

      this.$element.attr('aria-hidden', 'true');

      // Find triggers that affect this element and add aria-expanded to them
      this.$triggers = $(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);

      // Add a close trigger over the body if necessary
      if (this.options.closeOnClick) {
        if ($('.js-off-canvas-exit').length) {
          this.$exiter = $('.js-off-canvas-exit');
        } else {
          var exiter = document.createElement('div');
          exiter.setAttribute('class', 'js-off-canvas-exit');
          $('[data-off-canvas-content]').append(exiter);

          this.$exiter = $(exiter);
        }
      }

      this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);

      if (this.options.isRevealed) {
        this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
        this._setMQChecker();
      }
      if (!this.options.transitionTime) {
        this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration) * 1000;
      }
    }

    /**
     * Adds event handlers to the off-canvas wrapper and the exit overlay.
     * @function
     * @private
     */
    _events() {
      this.$element.off('.zf.trigger .zf.offcanvas').on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
      });

      if (this.options.closeOnClick && this.$exiter.length) {
        this.$exiter.on({ 'click.zf.offcanvas': this.close.bind(this) });
      }
    }

    /**
     * Applies event listener for elements that will reveal at certain breakpoints.
     * @private
     */
    _setMQChecker() {
      var _this = this;

      $(window).on('changed.zf.mediaquery', function () {
        if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        } else {
          _this.reveal(false);
        }
      }).one('load.zf.offcanvas', function () {
        if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        }
      });
    }

    /**
     * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
     * @param {Boolean} isRevealed - true if element should be revealed.
     * @function
     */
    reveal(isRevealed) {
      var $closer = this.$element.find('[data-close]');
      if (isRevealed) {
        this.close();
        this.isRevealed = true;
        // if (!this.options.forceTop) {
        //   var scrollPos = parseInt(window.pageYOffset);
        //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
        // }
        // if (this.options.isSticky) { this._stick(); }
        this.$element.off('open.zf.trigger toggle.zf.trigger');
        if ($closer.length) {
          $closer.hide();
        }
      } else {
        this.isRevealed = false;
        // if (this.options.isSticky || !this.options.forceTop) {
        //   this.$element[0].style.transform = '';
        //   $(window).off('scroll.zf.offcanvas');
        // }
        this.$element.on({
          'open.zf.trigger': this.open.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this)
        });
        if ($closer.length) {
          $closer.show();
        }
      }
    }

    /**
     * Opens the off-canvas menu.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     * @fires OffCanvas#opened
     */
    open(event, trigger) {
      if (this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }
      var _this = this,
          $body = $(document.body);

      if (this.options.forceTop) {
        $('body').scrollTop(0);
      }
      // window.pageYOffset = 0;

      // if (!this.options.forceTop) {
      //   var scrollPos = parseInt(window.pageYOffset);
      //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
      //   if (this.$exiter.length) {
      //     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';
      //   }
      // }
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#opened
       */

      var $wrapper = $('[data-off-canvas-wrapper]');
      $wrapper.addClass('is-off-canvas-open is-open-' + _this.options.position);

      _this.$element.addClass('is-open');

      // if (_this.options.isSticky) {
      //   _this._stick();
      // }

      this.$triggers.attr('aria-expanded', 'true');
      this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');

      if (this.options.closeOnClick) {
        this.$exiter.addClass('is-visible');
      }

      if (trigger) {
        this.$lastTrigger = trigger;
      }

      if (this.options.autoFocus) {
        $wrapper.one(Foundation.transitionend($wrapper), function () {
          if (_this.$element.hasClass('is-open')) {
            // handle double clicks
            _this.$element.attr('tabindex', '-1');
            _this.$element.focus();
          }
        });
      }

      if (this.options.trapFocus) {
        $wrapper.one(Foundation.transitionend($wrapper), function () {
          if (_this.$element.hasClass('is-open')) {
            // handle double clicks
            _this.$element.attr('tabindex', '-1');
            _this.trapFocus();
          }
        });
      }
    }

    /**
     * Traps focus within the offcanvas on open.
     * @private
     */
    _trapFocus() {
      var focusable = Foundation.Keyboard.findFocusable(this.$element),
          first = focusable.eq(0),
          last = focusable.eq(-1);

      focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas', function (e) {
        var key = Foundation.Keyboard.parseKey(e);
        if (key === 'TAB' && e.target === last[0]) {
          e.preventDefault();
          first.focus();
        }
        if (key === 'SHIFT_TAB' && e.target === first[0]) {
          e.preventDefault();
          last.focus();
        }
      });
    }

    /**
     * Allows the offcanvas to appear sticky utilizing translate properties.
     * @private
     */
    // OffCanvas.prototype._stick = function() {
    //   var elStyle = this.$element[0].style;
    //
    //   if (this.options.closeOnClick) {
    //     var exitStyle = this.$exiter[0].style;
    //   }
    //
    //   $(window).on('scroll.zf.offcanvas', function(e) {
    //     console.log(e);
    //     var pageY = window.pageYOffset;
    //     elStyle.transform = 'translate(0,' + pageY + 'px)';
    //     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }
    //   });
    //   // this.$element.trigger('stuck.zf.offcanvas');
    // };
    /**
     * Closes the off-canvas menu.
     * @function
     * @param {Function} cb - optional cb to fire after closure.
     * @fires OffCanvas#closed
     */
    close(cb) {
      if (!this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }

      var _this = this;

      //  Foundation.Move(this.options.transitionTime, this.$element, function() {
      $('[data-off-canvas-wrapper]').removeClass(`is-off-canvas-open is-open-${ _this.options.position }`);
      _this.$element.removeClass('is-open');
      // Foundation._reflow();
      // });
      this.$element.attr('aria-hidden', 'true')
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#closed
       */
      .trigger('closed.zf.offcanvas');
      // if (_this.options.isSticky || !_this.options.forceTop) {
      //   setTimeout(function() {
      //     _this.$element[0].style.transform = '';
      //     $(window).off('scroll.zf.offcanvas');
      //   }, this.options.transitionTime);
      // }
      if (this.options.closeOnClick) {
        this.$exiter.removeClass('is-visible');
      }

      this.$triggers.attr('aria-expanded', 'false');
      if (this.options.trapFocus) {
        $('[data-off-canvas-content]').removeAttr('tabindex');
      }
    }

    /**
     * Toggles the off-canvas menu open or closed.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     */
    toggle(event, trigger) {
      if (this.$element.hasClass('is-open')) {
        this.close(event, trigger);
      } else {
        this.open(event, trigger);
      }
    }

    /**
     * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
     * @function
     * @private
     */
    _handleKeyboard(e) {
      Foundation.Keyboard.handleKey(e, 'OffCanvas', {
        close: () => {
          this.close();
          this.$lastTrigger.focus();
          return true;
        },
        handled: () => {
          e.stopPropagation();
          e.preventDefault();
        }
      });
    }

    /**
     * Destroys the offcanvas plugin.
     * @function
     */
    destroy() {
      this.close();
      this.$element.off('.zf.trigger .zf.offcanvas');
      this.$exiter.off('.zf.offcanvas');

      Foundation.unregisterPlugin(this);
    }
  }

  OffCanvas.defaults = {
    /**
     * Allow the user to click outside of the menu to close it.
     * @option
     * @example true
     */
    closeOnClick: true,

    /**
     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
     * @option
     * @example 500
     */
    transitionTime: 0,

    /**
     * Direction the offcanvas opens from. Determines class applied to body.
     * @option
     * @example left
     */
    position: 'left',

    /**
     * Force the page to scroll to top on open.
     * @option
     * @example true
     */
    forceTop: true,

    /**
     * Allow the offcanvas to remain open for certain breakpoints.
     * @option
     * @example false
     */
    isRevealed: false,

    /**
     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
     * @option
     * @example reveal-for-large
     */
    revealOn: null,

    /**
     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @example true
     */
    autoFocus: true,

    /**
     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
     * @option
     * TODO improve the regex testing for this.
     * @example reveal-for-large
     */
    revealClass: 'reveal-for-',

    /**
     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @example true
     */
    trapFocus: false
  };

  // Window exports
  Foundation.plugin(OffCanvas, 'OffCanvas');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Orbit module.
   * @module foundation.orbit
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.timerAndImageLoader
   * @requires foundation.util.touch
   */

  class Orbit {
    /**
    * Creates a new instance of an orbit carousel.
    * @class
    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.
    * @param {Object} options - Overrides to the default plugin settings.
    */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Orbit');
      Foundation.Keyboard.register('Orbit', {
        'ltr': {
          'ARROW_RIGHT': 'next',
          'ARROW_LEFT': 'previous'
        },
        'rtl': {
          'ARROW_LEFT': 'next',
          'ARROW_RIGHT': 'previous'
        }
      });
    }

    /**
    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.
    * @function
    * @private
    */
    _init() {
      this.$wrapper = this.$element.find(`.${ this.options.containerClass }`);
      this.$slides = this.$element.find(`.${ this.options.slideClass }`);
      var $images = this.$element.find('img'),
          initActive = this.$slides.filter('.is-active');

      if (!initActive.length) {
        this.$slides.eq(0).addClass('is-active');
      }

      if (!this.options.useMUI) {
        this.$slides.addClass('no-motionui');
      }

      if ($images.length) {
        Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));
      } else {
        this._prepareForOrbit(); //hehe
      }

      if (this.options.bullets) {
        this._loadBullets();
      }

      this._events();

      if (this.options.autoPlay && this.$slides.length > 1) {
        this.geoSync();
      }

      if (this.options.accessible) {
        // allow wrapper to be focusable to enable arrow navigation
        this.$wrapper.attr('tabindex', 0);
      }
    }

    /**
    * Creates a jQuery collection of bullets, if they are being used.
    * @function
    * @private
    */
    _loadBullets() {
      this.$bullets = this.$element.find(`.${ this.options.boxOfBullets }`).find('button');
    }

    /**
    * Sets a `timer` object on the orbit, and starts the counter for the next slide.
    * @function
    */
    geoSync() {
      var _this = this;
      this.timer = new Foundation.Timer(this.$element, {
        duration: this.options.timerDelay,
        infinite: false
      }, function () {
        _this.changeSlide(true);
      });
      this.timer.start();
    }

    /**
    * Sets wrapper and slide heights for the orbit.
    * @function
    * @private
    */
    _prepareForOrbit() {
      var _this = this;
      this._setWrapperHeight(function (max) {
        _this._setSlideHeight(max);
      });
    }

    /**
    * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.
    * @function
    * @private
    * @param {Function} cb - a callback function to fire when complete.
    */
    _setWrapperHeight(cb) {
      //rewrite this to `for` loop
      var max = 0,
          temp,
          counter = 0;

      this.$slides.each(function () {
        temp = this.getBoundingClientRect().height;
        $(this).attr('data-slide', counter);

        if (counter) {
          //if not the first slide, set css position and display property
          $(this).css({ 'position': 'relative', 'display': 'none' });
        }
        max = temp > max ? temp : max;
        counter++;
      });

      if (counter === this.$slides.length) {
        this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.
        cb(max); //fire callback with max height dimension.
      }
    }

    /**
    * Sets the max-height of each slide.
    * @function
    * @private
    */
    _setSlideHeight(height) {
      this.$slides.each(function () {
        $(this).css('max-height', height);
      });
    }

    /**
    * Adds event listeners to basically everything within the element.
    * @function
    * @private
    */
    _events() {
      var _this = this;

      //***************************************
      //**Now using custom event - thanks to:**
      //**      Yohai Ararat of Toronto      **
      //***************************************
      if (this.$slides.length > 1) {

        if (this.options.swipe) {
          this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide(true);
          }).on('swiperight.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide(false);
          });
        }
        //***************************************

        if (this.options.autoPlay) {
          this.$slides.on('click.zf.orbit', function () {
            _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);
            _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();
          });

          if (this.options.pauseOnHover) {
            this.$element.on('mouseenter.zf.orbit', function () {
              _this.timer.pause();
            }).on('mouseleave.zf.orbit', function () {
              if (!_this.$element.data('clickedOn')) {
                _this.timer.start();
              }
            });
          }
        }

        if (this.options.navButtons) {
          var $controls = this.$element.find(`.${ this.options.nextClass }, .${ this.options.prevClass }`);
          $controls.attr('tabindex', 0)
          //also need to handle enter/return and spacebar key presses
          .on('click.zf.orbit touchend.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide($(this).hasClass(_this.options.nextClass));
          });
        }

        if (this.options.bullets) {
          this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {
            if (/is-active/g.test(this.className)) {
              return false;
            } //if this is active, kick out of function.
            var idx = $(this).data('slide'),
                ltr = idx > _this.$slides.filter('.is-active').data('slide'),
                $slide = _this.$slides.eq(idx);

            _this.changeSlide(ltr, $slide, idx);
          });
        }

        if (this.options.accessible) {
          this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {
            // handle keyboard event with keyboard util
            Foundation.Keyboard.handleKey(e, 'Orbit', {
              next: function () {
                _this.changeSlide(true);
              },
              previous: function () {
                _this.changeSlide(false);
              },
              handled: function () {
                // if bullet is focused, make sure focus moves
                if ($(e.target).is(_this.$bullets)) {
                  _this.$bullets.filter('.is-active').focus();
                }
              }
            });
          });
        }
      }
    }

    /**
    * Changes the current slide to a new one.
    * @function
    * @param {Boolean} isLTR - flag if the slide should move left to right.
    * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.
    * @param {Number} idx - the index of the new slide in its collection, if one chosen.
    * @fires Orbit#slidechange
    */
    changeSlide(isLTR, chosenSlide, idx) {
      var $curSlide = this.$slides.filter('.is-active').eq(0);

      if (/mui/g.test($curSlide[0].className)) {
        return false;
      } //if the slide is currently animating, kick out of the function

      var $firstSlide = this.$slides.first(),
          $lastSlide = this.$slides.last(),
          dirIn = isLTR ? 'Right' : 'Left',
          dirOut = isLTR ? 'Left' : 'Right',
          _this = this,
          $newSlide;

      if (!chosenSlide) {
        //most of the time, this will be auto played or clicked from the navButtons.
        $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
        this.options.infiniteWrap ? $curSlide.next(`.${ this.options.slideClass }`).length ? $curSlide.next(`.${ this.options.slideClass }`) : $firstSlide : $curSlide.next(`.${ this.options.slideClass }`) : //pick next slide if moving left to right
        this.options.infiniteWrap ? $curSlide.prev(`.${ this.options.slideClass }`).length ? $curSlide.prev(`.${ this.options.slideClass }`) : $lastSlide : $curSlide.prev(`.${ this.options.slideClass }`); //pick prev slide if moving right to left
      } else {
        $newSlide = chosenSlide;
      }

      if ($newSlide.length) {
        /**
        * Triggers before the next slide starts animating in and only if a next slide has been found.
        * @event Orbit#beforeslidechange
        */
        this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);

        if (this.options.bullets) {
          idx = idx || this.$slides.index($newSlide); //grab index to update bullets
          this._updateBullets(idx);
        }

        if (this.options.useMUI) {
          Foundation.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options[`animInFrom${ dirIn }`], function () {
            $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');
          });

          Foundation.Motion.animateOut($curSlide.removeClass('is-active'), this.options[`animOutTo${ dirOut }`], function () {
            $curSlide.removeAttr('aria-live');
            if (_this.options.autoPlay && !_this.timer.isPaused) {
              _this.timer.restart();
            }
            //do stuff?
          });
        } else {
          $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();
          $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();
          if (this.options.autoPlay && !this.timer.isPaused) {
            this.timer.restart();
          }
        }
        /**
        * Triggers when the slide has finished animating in.
        * @event Orbit#slidechange
        */
        this.$element.trigger('slidechange.zf.orbit', [$newSlide]);
      }
    }

    /**
    * Updates the active state of the bullets, if displayed.
    * @function
    * @private
    * @param {Number} idx - the index of the current slide.
    */
    _updateBullets(idx) {
      var $oldBullet = this.$element.find(`.${ this.options.boxOfBullets }`).find('.is-active').removeClass('is-active').blur(),
          span = $oldBullet.find('span:last').detach(),
          $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);
    }

    /**
    * Destroys the carousel and hides the element.
    * @function
    */
    destroy() {
      this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();
      Foundation.unregisterPlugin(this);
    }
  }

  Orbit.defaults = {
    /**
    * Tells the JS to look for and loadBullets.
    * @option
    * @example true
    */
    bullets: true,
    /**
    * Tells the JS to apply event listeners to nav buttons
    * @option
    * @example true
    */
    navButtons: true,
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-in-right'
    */
    animInFromRight: 'slide-in-right',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-out-right'
    */
    animOutToRight: 'slide-out-right',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-in-left'
    *
    */
    animInFromLeft: 'slide-in-left',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-out-left'
    */
    animOutToLeft: 'slide-out-left',
    /**
    * Allows Orbit to automatically animate on page load.
    * @option
    * @example true
    */
    autoPlay: true,
    /**
    * Amount of time, in ms, between slide transitions
    * @option
    * @example 5000
    */
    timerDelay: 5000,
    /**
    * Allows Orbit to infinitely loop through the slides
    * @option
    * @example true
    */
    infiniteWrap: true,
    /**
    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library
    * @option
    * @example true
    */
    swipe: true,
    /**
    * Allows the timing function to pause animation on hover.
    * @option
    * @example true
    */
    pauseOnHover: true,
    /**
    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys
    * @option
    * @example true
    */
    accessible: true,
    /**
    * Class applied to the container of Orbit
    * @option
    * @example 'orbit-container'
    */
    containerClass: 'orbit-container',
    /**
    * Class applied to individual slides.
    * @option
    * @example 'orbit-slide'
    */
    slideClass: 'orbit-slide',
    /**
    * Class applied to the bullet container. You're welcome.
    * @option
    * @example 'orbit-bullets'
    */
    boxOfBullets: 'orbit-bullets',
    /**
    * Class applied to the `next` navigation button.
    * @option
    * @example 'orbit-next'
    */
    nextClass: 'orbit-next',
    /**
    * Class applied to the `previous` navigation button.
    * @option
    * @example 'orbit-previous'
    */
    prevClass: 'orbit-previous',
    /**
    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.
    * @option
    * @example true
    */
    useMUI: true
  };

  // Window exports
  Foundation.plugin(Orbit, 'Orbit');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * ResponsiveMenu module.
   * @module foundation.responsiveMenu
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.accordionMenu
   * @requires foundation.util.drilldown
   * @requires foundation.util.dropdown-menu
   */

  class ResponsiveMenu {
    /**
     * Creates a new instance of a responsive menu.
     * @class
     * @fires ResponsiveMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = $(element);
      this.rules = this.$element.data('responsive-menu');
      this.currentMq = null;
      this.currentPlugin = null;

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveMenu');
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
     * @function
     * @private
     */
    _init() {
      // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
      if (typeof this.rules === 'string') {
        let rulesTree = {};

        // Parse rules from "classes" pulled from data attribute
        let rules = this.rules.split(' ');

        // Iterate through every rule found
        for (let i = 0; i < rules.length; i++) {
          let rule = rules[i].split('-');
          let ruleSize = rule.length > 1 ? rule[0] : 'small';
          let rulePlugin = rule.length > 1 ? rule[1] : rule[0];

          if (MenuPlugins[rulePlugin] !== null) {
            rulesTree[ruleSize] = MenuPlugins[rulePlugin];
          }
        }

        this.rules = rulesTree;
      }

      if (!$.isEmptyObject(this.rules)) {
        this._checkMediaQueries();
      }
    }

    /**
     * Initializes events for the Menu.
     * @function
     * @private
     */
    _events() {
      var _this = this;

      $(window).on('changed.zf.mediaquery', function () {
        _this._checkMediaQueries();
      });
      // $(window).on('resize.zf.ResponsiveMenu', function() {
      //   _this._checkMediaQueries();
      // });
    }

    /**
     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
     * @function
     * @private
     */
    _checkMediaQueries() {
      var matchedMq,
          _this = this;
      // Iterate through each rule and find the last matching rule
      $.each(this.rules, function (key) {
        if (Foundation.MediaQuery.atLeast(key)) {
          matchedMq = key;
        }
      });

      // No match? No dice
      if (!matchedMq) return;

      // Plugin already initialized? We good
      if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

      // Remove existing plugin-specific CSS classes
      $.each(MenuPlugins, function (key, value) {
        _this.$element.removeClass(value.cssClass);
      });

      // Add the CSS class for the new plugin
      this.$element.addClass(this.rules[matchedMq].cssClass);

      // Create an instance of the new plugin
      if (this.currentPlugin) this.currentPlugin.destroy();
      this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
    }

    /**
     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
     * @function
     */
    destroy() {
      this.currentPlugin.destroy();
      $(window).off('.zf.ResponsiveMenu');
      Foundation.unregisterPlugin(this);
    }
  }

  ResponsiveMenu.defaults = {};

  // The plugin matches the plugin classes with these plugin instances.
  var MenuPlugins = {
    dropdown: {
      cssClass: 'dropdown',
      plugin: Foundation._plugins['dropdown-menu'] || null
    },
    drilldown: {
      cssClass: 'drilldown',
      plugin: Foundation._plugins['drilldown'] || null
    },
    accordion: {
      cssClass: 'accordion-menu',
      plugin: Foundation._plugins['accordion-menu'] || null
    }
  };

  // Window exports
  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * ResponsiveToggle module.
   * @module foundation.responsiveToggle
   * @requires foundation.util.mediaQuery
   */

  class ResponsiveToggle {
    /**
     * Creates a new instance of Tab Bar.
     * @class
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = $(element);
      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveToggle');
    }

    /**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */
    _init() {
      var targetID = this.$element.data('responsive-toggle');
      if (!targetID) {
        console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
      }

      this.$targetMenu = $(`#${ targetID }`);
      this.$toggler = this.$element.find('[data-toggle]');

      this._update();
    }

    /**
     * Adds necessary event handlers for the tab bar to work.
     * @function
     * @private
     */
    _events() {
      var _this = this;

      this._updateMqHandler = this._update.bind(this);

      $(window).on('changed.zf.mediaquery', this._updateMqHandler);

      this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
    }

    /**
     * Checks the current media query to determine if the tab bar should be visible or hidden.
     * @function
     * @private
     */
    _update() {
      // Mobile
      if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
        this.$element.show();
        this.$targetMenu.hide();
      }

      // Desktop
      else {
          this.$element.hide();
          this.$targetMenu.show();
        }
    }

    /**
     * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
     * @function
     * @fires ResponsiveToggle#toggled
     */
    toggleMenu() {
      if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
        this.$targetMenu.toggle(0);

        /**
         * Fires when the element attached to the tab bar toggles.
         * @event ResponsiveToggle#toggled
         */
        this.$element.trigger('toggled.zf.responsiveToggle');
      }
    }

    destroy() {
      this.$element.off('.zf.responsiveToggle');
      this.$toggler.off('.zf.responsiveToggle');

      $(window).off('changed.zf.mediaquery', this._updateMqHandler);

      Foundation.unregisterPlugin(this);
    }
  }

  ResponsiveToggle.defaults = {
    /**
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.
     * @option
     * @example 'medium'
     */
    hideFor: 'medium'
  };

  // Window exports
  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Reveal module.
   * @module foundation.reveal
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.motion if using animations
   */

  class Reveal {
    /**
     * Creates a new instance of Reveal.
     * @class
     * @param {jQuery} element - jQuery object to use for the modal.
     * @param {Object} options - optional parameters.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Reveal');
      Foundation.Keyboard.register('Reveal', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close',
        'TAB': 'tab_forward',
        'SHIFT_TAB': 'tab_backward'
      });
    }

    /**
     * Initializes the modal by adding the overlay and close buttons, (if selected).
     * @private
     */
    _init() {
      this.id = this.$element.attr('id');
      this.isActive = false;
      this.cached = { mq: Foundation.MediaQuery.current };
      this.isMobile = mobileSniff();

      this.$anchor = $(`[data-open="${ this.id }"]`).length ? $(`[data-open="${ this.id }"]`) : $(`[data-toggle="${ this.id }"]`);
      this.$anchor.attr({
        'aria-controls': this.id,
        'aria-haspopup': true,
        'tabindex': 0
      });

      if (this.options.fullScreen || this.$element.hasClass('full')) {
        this.options.fullScreen = true;
        this.options.overlay = false;
      }
      if (this.options.overlay && !this.$overlay) {
        this.$overlay = this._makeOverlay(this.id);
      }

      this.$element.attr({
        'role': 'dialog',
        'aria-hidden': true,
        'data-yeti-box': this.id,
        'data-resize': this.id
      });

      if (this.$overlay) {
        this.$element.detach().appendTo(this.$overlay);
      } else {
        this.$element.detach().appendTo($('body'));
        this.$element.addClass('without-overlay');
      }
      this._events();
      if (this.options.deepLink && window.location.hash === `#${ this.id }`) {
        $(window).one('load.zf.reveal', this.open.bind(this));
      }
    }

    /**
     * Creates an overlay div to display behind the modal.
     * @private
     */
    _makeOverlay(id) {
      var $overlay = $('<div></div>').addClass('reveal-overlay').appendTo('body');
      return $overlay;
    }

    /**
     * Updates position of modal
     * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
     * @private
     */
    _updatePosition() {
      var width = this.$element.outerWidth();
      var outerWidth = $(window).width();
      var height = this.$element.outerHeight();
      var outerHeight = $(window).height();
      var left, top;
      if (this.options.hOffset === 'auto') {
        left = parseInt((outerWidth - width) / 2, 10);
      } else {
        left = parseInt(this.options.hOffset, 10);
      }
      if (this.options.vOffset === 'auto') {
        if (height > outerHeight) {
          top = parseInt(Math.min(100, outerHeight / 10), 10);
        } else {
          top = parseInt((outerHeight - height) / 4, 10);
        }
      } else {
        top = parseInt(this.options.vOffset, 10);
      }
      this.$element.css({ top: top + 'px' });
      // only worry about left if we don't have an overlay or we havea  horizontal offset,
      // otherwise we're perfectly in the middle
      if (!this.$overlay || this.options.hOffset !== 'auto') {
        this.$element.css({ left: left + 'px' });
        this.$element.css({ margin: '0px' });
      }
    }

    /**
     * Adds event handlers for the modal.
     * @private
     */
    _events() {
      var _this = this;

      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': (event, $element) => {
          if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {
            // only close reveal when it's explicitly called
            return this.close.apply(this);
          }
        },
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': function () {
          _this._updatePosition();
        }
      });

      if (this.$anchor.length) {
        this.$anchor.on('keydown.zf.reveal', function (e) {
          if (e.which === 13 || e.which === 32) {
            e.stopPropagation();
            e.preventDefault();
            _this.open();
          }
        });
      }

      if (this.options.closeOnClick && this.options.overlay) {
        this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
          if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
            return;
          }
          _this.close();
        });
      }
      if (this.options.deepLink) {
        $(window).on(`popstate.zf.reveal:${ this.id }`, this._handleState.bind(this));
      }
    }

    /**
     * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
     * @private
     */
    _handleState(e) {
      if (window.location.hash === '#' + this.id && !this.isActive) {
        this.open();
      } else {
        this.close();
      }
    }

    /**
     * Opens the modal controlled by `this.$anchor`, and closes all others by default.
     * @function
     * @fires Reveal#closeme
     * @fires Reveal#open
     */
    open() {
      if (this.options.deepLink) {
        var hash = `#${ this.id }`;

        if (window.history.pushState) {
          window.history.pushState(null, null, hash);
        } else {
          window.location.hash = hash;
        }
      }

      this.isActive = true;

      // Make elements invisible, but remove display: none so we can get size and positioning
      this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);
      if (this.options.overlay) {
        this.$overlay.css({ 'visibility': 'hidden' }).show();
      }

      this._updatePosition();

      this.$element.hide().css({ 'visibility': '' });

      if (this.$overlay) {
        this.$overlay.css({ 'visibility': '' }).hide();
        if (this.$element.hasClass('fast')) {
          this.$overlay.addClass('fast');
        } else if (this.$element.hasClass('slow')) {
          this.$overlay.addClass('slow');
        }
      }

      if (!this.options.multipleOpened) {
        /**
         * Fires immediately before the modal opens.
         * Closes any other modals that are currently open
         * @event Reveal#closeme
         */
        this.$element.trigger('closeme.zf.reveal', this.id);
      }
      // Motion UI method of reveal
      if (this.options.animationIn) {
        var _this = this;
        function afterAnimationFocus() {
          _this.$element.attr({
            'aria-hidden': false,
            'tabindex': -1
          }).focus();
        }
        if (this.options.overlay) {
          Foundation.Motion.animateIn(this.$overlay, 'fade-in');
        }
        Foundation.Motion.animateIn(this.$element, this.options.animationIn, () => {
          this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);
          afterAnimationFocus();
        });
      }
      // jQuery method of reveal
      else {
          if (this.options.overlay) {
            this.$overlay.show(0);
          }
          this.$element.show(this.options.showDelay);
        }

      // handle accessibility
      this.$element.attr({
        'aria-hidden': false,
        'tabindex': -1
      }).focus();

      /**
       * Fires when the modal has successfully opened.
       * @event Reveal#open
       */
      this.$element.trigger('open.zf.reveal');

      if (this.isMobile) {
        this.originalScrollPos = window.pageYOffset;
        $('html, body').addClass('is-reveal-open');
      } else {
        $('body').addClass('is-reveal-open');
      }

      setTimeout(() => {
        this._extraHandlers();
      }, 0);
    }

    /**
     * Adds extra event handlers for the body and window if necessary.
     * @private
     */
    _extraHandlers() {
      var _this = this;
      this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);

      if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
        $('body').on('click.zf.reveal', function (e) {
          if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
            return;
          }
          _this.close();
        });
      }

      if (this.options.closeOnEsc) {
        $(window).on('keydown.zf.reveal', function (e) {
          Foundation.Keyboard.handleKey(e, 'Reveal', {
            close: function () {
              if (_this.options.closeOnEsc) {
                _this.close();
                _this.$anchor.focus();
              }
            }
          });
        });
      }

      // lock focus within modal while tabbing
      this.$element.on('keydown.zf.reveal', function (e) {
        var $target = $(this);
        // handle keyboard event with keyboard util
        Foundation.Keyboard.handleKey(e, 'Reveal', {
          tab_forward: function () {
            _this.focusableElements = Foundation.Keyboard.findFocusable(_this.$element);
            if (_this.$element.find(':focus').is(_this.focusableElements.eq(-1))) {
              // left modal downwards, setting focus to first element
              _this.focusableElements.eq(0).focus();
              return true;
            }
            if (_this.focusableElements.length === 0) {
              // no focusable elements inside the modal at all, prevent tabbing in general
              return true;
            }
          },
          tab_backward: function () {
            _this.focusableElements = Foundation.Keyboard.findFocusable(_this.$element);
            if (_this.$element.find(':focus').is(_this.focusableElements.eq(0)) || _this.$element.is(':focus')) {
              // left modal upwards, setting focus to last element
              _this.focusableElements.eq(-1).focus();
              return true;
            }
            if (_this.focusableElements.length === 0) {
              // no focusable elements inside the modal at all, prevent tabbing in general
              return true;
            }
          },
          open: function () {
            if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {
              setTimeout(function () {
                // set focus back to anchor if close button has been activated
                _this.$anchor.focus();
              }, 1);
            } else if ($target.is(_this.focusableElements)) {
              // dont't trigger if acual element has focus (i.e. inputs, links, ...)
              _this.open();
            }
          },
          close: function () {
            if (_this.options.closeOnEsc) {
              _this.close();
              _this.$anchor.focus();
            }
          },
          handled: function (preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
          }
        });
      });
    }

    /**
     * Closes the modal.
     * @function
     * @fires Reveal#closed
     */
    close() {
      if (!this.isActive || !this.$element.is(':visible')) {
        return false;
      }
      var _this = this;

      // Motion UI method of hiding
      if (this.options.animationOut) {
        if (this.options.overlay) {
          Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);
        } else {
          finishUp();
        }

        Foundation.Motion.animateOut(this.$element, this.options.animationOut);
      }
      // jQuery method of hiding
      else {
          if (this.options.overlay) {
            this.$overlay.hide(0, finishUp);
          } else {
            finishUp();
          }

          this.$element.hide(this.options.hideDelay);
        }

      // Conditionals to remove extra event listeners added on open
      if (this.options.closeOnEsc) {
        $(window).off('keydown.zf.reveal');
      }

      if (!this.options.overlay && this.options.closeOnClick) {
        $('body').off('click.zf.reveal');
      }

      this.$element.off('keydown.zf.reveal');

      function finishUp() {
        if (_this.isMobile) {
          $('html, body').removeClass('is-reveal-open');
          if (_this.originalScrollPos) {
            $('body').scrollTop(_this.originalScrollPos);
            _this.originalScrollPos = null;
          }
        } else {
          $('body').removeClass('is-reveal-open');
        }

        _this.$element.attr('aria-hidden', true);

        /**
        * Fires when the modal is done closing.
        * @event Reveal#closed
        */
        _this.$element.trigger('closed.zf.reveal');
      }

      /**
      * Resets the modal content
      * This prevents a running video to keep going in the background
      */
      if (this.options.resetOnClose) {
        this.$element.html(this.$element.html());
      }

      this.isActive = false;
      if (_this.options.deepLink) {
        if (window.history.replaceState) {
          window.history.replaceState("", document.title, window.location.pathname);
        } else {
          window.location.hash = '';
        }
      }
    }

    /**
     * Toggles the open/closed state of a modal.
     * @function
     */
    toggle() {
      if (this.isActive) {
        this.close();
      } else {
        this.open();
      }
    }

    /**
     * Destroys an instance of a modal.
     * @function
     */
    destroy() {
      if (this.options.overlay) {
        this.$element.appendTo($('body')); // move $element outside of $overlay to prevent error unregisterPlugin()
        this.$overlay.hide().off().remove();
      }
      this.$element.hide().off();
      this.$anchor.off('.zf');
      $(window).off(`.zf.reveal:${ this.id }`);

      Foundation.unregisterPlugin(this);
    }
  }

  Reveal.defaults = {
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @example 'slide-in-left'
     */
    animationIn: '',
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @example 'slide-out-right'
     */
    animationOut: '',
    /**
     * Time, in ms, to delay the opening of a modal after a click if no animation used.
     * @option
     * @example 10
     */
    showDelay: 0,
    /**
     * Time, in ms, to delay the closing of a modal after a click if no animation used.
     * @option
     * @example 10
     */
    hideDelay: 0,
    /**
     * Allows a click on the body/overlay to close the modal.
     * @option
     * @example true
     */
    closeOnClick: true,
    /**
     * Allows the modal to close if the user presses the `ESCAPE` key.
     * @option
     * @example true
     */
    closeOnEsc: true,
    /**
     * If true, allows multiple modals to be displayed at once.
     * @option
     * @example false
     */
    multipleOpened: false,
    /**
     * Distance, in pixels, the modal should push down from the top of the screen.
     * @option
     * @example auto
     */
    vOffset: 'auto',
    /**
     * Distance, in pixels, the modal should push in from the side of the screen.
     * @option
     * @example auto
     */
    hOffset: 'auto',
    /**
     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
     * @option
     * @example false
     */
    fullScreen: false,
    /**
     * Percentage of screen height the modal should push up from the bottom of the view.
     * @option
     * @example 10
     */
    btmOffsetPct: 10,
    /**
     * Allows the modal to generate an overlay div, which will cover the view when modal opens.
     * @option
     * @example true
     */
    overlay: true,
    /**
     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
     * @option
     * @example false
     */
    resetOnClose: false,
    /**
     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
     * @option
     * @example false
     */
    deepLink: false
  };

  // Window exports
  Foundation.plugin(Reveal, 'Reveal');

  function iPhoneSniff() {
    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)
    );
  }

  function androidSniff() {
    return (/Android/.test(window.navigator.userAgent)
    );
  }

  function mobileSniff() {
    return iPhoneSniff() || androidSniff();
  }
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Slider module.
   * @module foundation.slider
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   * @requires foundation.util.keyboard
   * @requires foundation.util.touch
   */

  class Slider {
    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Slider');
      Foundation.Keyboard.register('Slider', {
        'ltr': {
          'ARROW_RIGHT': 'increase',
          'ARROW_UP': 'increase',
          'ARROW_DOWN': 'decrease',
          'ARROW_LEFT': 'decrease',
          'SHIFT_ARROW_RIGHT': 'increase_fast',
          'SHIFT_ARROW_UP': 'increase_fast',
          'SHIFT_ARROW_DOWN': 'decrease_fast',
          'SHIFT_ARROW_LEFT': 'decrease_fast'
        },
        'rtl': {
          'ARROW_LEFT': 'increase',
          'ARROW_RIGHT': 'decrease',
          'SHIFT_ARROW_LEFT': 'increase_fast',
          'SHIFT_ARROW_RIGHT': 'decrease_fast'
        }
      });
    }

    /**
     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
     * @function
     * @private
     */
    _init() {
      this.inputs = this.$element.find('input');
      this.handles = this.$element.find('[data-slider-handle]');

      this.$handle = this.handles.eq(0);
      this.$input = this.inputs.length ? this.inputs.eq(0) : $(`#${ this.$handle.attr('aria-controls') }`);
      this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);

      var isDbl = false,
          _this = this;
      if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {
        this.options.disabled = true;
        this.$element.addClass(this.options.disabledClass);
      }
      if (!this.inputs.length) {
        this.inputs = $().add(this.$input);
        this.options.binding = true;
      }
      this._setInitAttr(0);
      this._events(this.$handle);

      if (this.handles[1]) {
        this.options.doubleSided = true;
        this.$handle2 = this.handles.eq(1);
        this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $(`#${ this.$handle2.attr('aria-controls') }`);

        if (!this.inputs[1]) {
          this.inputs = this.inputs.add(this.$input2);
        }
        isDbl = true;

        this._setHandlePos(this.$handle, this.options.initialStart, true, function () {

          _this._setHandlePos(_this.$handle2, _this.options.initialEnd, true);
        });
        // this.$handle.triggerHandler('click.zf.slider');
        this._setInitAttr(1);
        this._events(this.$handle2);
      }

      if (!isDbl) {
        this._setHandlePos(this.$handle, this.options.initialStart, true);
      }
    }

    /**
     * Sets the position of the selected handle and fill bar.
     * @function
     * @private
     * @param {jQuery} $hndl - the selected handle to move.
     * @param {Number} location - floating point between the start and end values of the slider bar.
     * @param {Function} cb - callback function to fire on completion.
     * @fires Slider#moved
     * @fires Slider#changed
     */
    _setHandlePos($hndl, location, noInvert, cb) {
      // don't move if the slider has been disabled since its initialization
      if (this.$element.hasClass(this.options.disabledClass)) {
        return;
      }
      //might need to alter that slightly for bars that will have odd number selections.
      location = parseFloat(location); //on input change events, convert string to number...grumble.

      // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
      if (location < this.options.start) {
        location = this.options.start;
      } else if (location > this.options.end) {
        location = this.options.end;
      }

      var isDbl = this.options.doubleSided;

      if (isDbl) {
        //this block is to prevent 2 handles from crossing eachother. Could/should be improved.
        if (this.handles.index($hndl) === 0) {
          var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));
          location = location >= h2Val ? h2Val - this.options.step : location;
        } else {
          var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));
          location = location <= h1Val ? h1Val + this.options.step : location;
        }
      }

      //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
      //for click and drag events, it's weird due to the scale(-1, 1) css property
      if (this.options.vertical && !noInvert) {
        location = this.options.end - location;
      }

      var _this = this,
          vert = this.options.vertical,
          hOrW = vert ? 'height' : 'width',
          lOrT = vert ? 'top' : 'left',
          handleDim = $hndl[0].getBoundingClientRect()[hOrW],
          elemDim = this.$element[0].getBoundingClientRect()[hOrW],

      //percentage of bar min/max value based on click or drag point
      pctOfBar = percent(location - this.options.start, this.options.end - this.options.start).toFixed(2),

      //number of actual pixels to shift the handle, based on the percentage obtained above
      pxToMove = (elemDim - handleDim) * pctOfBar,

      //percentage of bar to shift the handle
      movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);
      //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
      location = parseFloat(location.toFixed(this.options.decimal));
      // declare empty object for css adjustments, only used with 2 handled-sliders
      var css = {};

      this._setValues($hndl, location);

      // TODO update to calculate based on values set to respective inputs??
      if (isDbl) {
        var isLeftHndl = this.handles.index($hndl) === 0,

        //empty variable, will be used for min-height/width for fill bar
        dim,

        //percentage w/h of the handle compared to the slider bar
        handlePct = ~~(percent(handleDim, elemDim) * 100);
        //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
        if (isLeftHndl) {
          //left or top percentage value to apply to the fill bar.
          css[lOrT] = `${ movement }%`;
          //calculate the new min-height/width for the fill bar.
          dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;
          //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
          //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.
          if (cb && typeof cb === 'function') {
            cb();
          } //this is only needed for the initialization of 2 handled sliders
        } else {
          //just caching the value of the left/bottom handle's left/top property
          var handlePos = parseFloat(this.$handle[0].style[lOrT]);
          //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
          //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
          dim = movement - (isNaN(handlePos) ? this.options.initialStart / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
        }
        // assign the min-height/width to our css object
        css[`min-${ hOrW }`] = `${ dim }%`;
      }

      this.$element.one('finished.zf.animate', function () {
        /**
         * Fires when the handle is done moving.
         * @event Slider#moved
         */
        _this.$element.trigger('moved.zf.slider', [$hndl]);
      });

      //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
      var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;

      Foundation.Move(moveTime, $hndl, function () {
        //adjusting the left/top property of the handle, based on the percentage calculated above
        $hndl.css(lOrT, `${ movement }%`);

        if (!_this.options.doubleSided) {
          //if single-handled, a simple method to expand the fill bar
          _this.$fill.css(hOrW, `${ pctOfBar * 100 }%`);
        } else {
          //otherwise, use the css object we created above
          _this.$fill.css(css);
        }
      });

      /**
       * Fires when the value has not been change for a given time.
       * @event Slider#changed
       */
      clearTimeout(_this.timeout);
      _this.timeout = setTimeout(function () {
        _this.$element.trigger('changed.zf.slider', [$hndl]);
      }, _this.options.changedDelay);
    }

    /**
     * Sets the initial attribute for the slider element.
     * @function
     * @private
     * @param {Number} idx - index of the current handle/input to use.
     */
    _setInitAttr(idx) {
      var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');
      this.inputs.eq(idx).attr({
        'id': id,
        'max': this.options.end,
        'min': this.options.start,
        'step': this.options.step
      });
      this.handles.eq(idx).attr({
        'role': 'slider',
        'aria-controls': id,
        'aria-valuemax': this.options.end,
        'aria-valuemin': this.options.start,
        'aria-valuenow': idx === 0 ? this.options.initialStart : this.options.initialEnd,
        'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',
        'tabindex': 0
      });
    }

    /**
     * Sets the input and `aria-valuenow` values for the slider element.
     * @function
     * @private
     * @param {jQuery} $handle - the currently selected handle.
     * @param {Number} val - floating point of the new value.
     */
    _setValues($handle, val) {
      var idx = this.options.doubleSided ? this.handles.index($handle) : 0;
      this.inputs.eq(idx).val(val);
      $handle.attr('aria-valuenow', val);
    }

    /**
     * Handles events on the slider element.
     * Calculates the new location of the current handle.
     * If there are two handles and the bar was clicked, it determines which handle to move.
     * @function
     * @private
     * @param {Object} e - the `event` object passed from the listener.
     * @param {jQuery} $handle - the current handle to calculate for, if selected.
     * @param {Number} val - floating point number for the new value of the slider.
     * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.
     */
    _handleEvent(e, $handle, val) {
      var value, hasVal;
      if (!val) {
        //click or drag events
        e.preventDefault();
        var _this = this,
            vertical = this.options.vertical,
            param = vertical ? 'height' : 'width',
            direction = vertical ? 'top' : 'left',
            eventOffset = vertical ? e.pageY : e.pageX,
            halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,
            barDim = this.$element[0].getBoundingClientRect()[param],
            windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();

        var elemOffset = this.$element.offset()[direction];

        // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
        // best way to guess this is simulated is if clientY == pageY
        if (e.clientY === e.pageY) {
          eventOffset = eventOffset + windowScroll;
        }
        var eventFromBar = eventOffset - elemOffset;
        var barXY;
        if (eventFromBar < 0) {
          barXY = 0;
        } else if (eventFromBar > barDim) {
          barXY = barDim;
        } else {
          barXY = eventFromBar;
        }
        var offsetPct = percent(barXY, barDim);

        value = (this.options.end - this.options.start) * offsetPct + this.options.start;

        // turn everything around for RTL, yay math!
        if (Foundation.rtl() && !this.options.vertical) {
          value = this.options.end - value;
        }

        value = _this._adjustValue(null, value);
        //boolean flag for the setHandlePos fn, specifically for vertical sliders
        hasVal = false;

        if (!$handle) {
          //figure out which handle it is, pass it to the next function.
          var firstHndlPos = absPosition(this.$handle, direction, barXY, param),
              secndHndlPos = absPosition(this.$handle2, direction, barXY, param);
          $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;
        }
      } else {
        //change event on input
        value = this._adjustValue(null, val);
        hasVal = true;
      }

      this._setHandlePos($handle, value, hasVal);
    }

    /**
     * Adjustes value for handle in regard to step value. returns adjusted value
     * @function
     * @private
     * @param {jQuery} $handle - the selected handle.
     * @param {Number} value - value to adjust. used if $handle is falsy
     */
    _adjustValue($handle, value) {
      var val,
          step = this.options.step,
          div = parseFloat(step / 2),
          left,
          prev_val,
          next_val;
      if (!!$handle) {
        val = parseFloat($handle.attr('aria-valuenow'));
      } else {
        val = value;
      }
      left = val % step;
      prev_val = val - left;
      next_val = prev_val + step;
      if (left === 0) {
        return val;
      }
      val = val >= prev_val + div ? next_val : prev_val;
      return val;
    }

    /**
     * Adds event listeners to the slider elements.
     * @function
     * @private
     * @param {jQuery} $handle - the current handle to apply listeners to.
     */
    _events($handle) {
      var _this = this,
          curHandle,
          timer;

      this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {
        var idx = _this.inputs.index($(this));
        _this._handleEvent(e, _this.handles.eq(idx), $(this).val());
      });

      if (this.options.clickSelect) {
        this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {
          if (_this.$element.data('dragging')) {
            return false;
          }

          if (!$(e.target).is('[data-slider-handle]')) {
            if (_this.options.doubleSided) {
              _this._handleEvent(e);
            } else {
              _this._handleEvent(e, _this.$handle);
            }
          }
        });
      }

      if (this.options.draggable) {
        this.handles.addTouch();

        var $body = $('body');
        $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {
          $handle.addClass('is-dragging');
          _this.$fill.addClass('is-dragging'); //
          _this.$element.data('dragging', true);

          curHandle = $(e.currentTarget);

          $body.on('mousemove.zf.slider', function (e) {
            e.preventDefault();
            _this._handleEvent(e, curHandle);
          }).on('mouseup.zf.slider', function (e) {
            _this._handleEvent(e, curHandle);

            $handle.removeClass('is-dragging');
            _this.$fill.removeClass('is-dragging');
            _this.$element.data('dragging', false);

            $body.off('mousemove.zf.slider mouseup.zf.slider');
          });
        })
        // prevent events triggered by touch
        .on('selectstart.zf.slider touchmove.zf.slider', function (e) {
          e.preventDefault();
        });
      }

      $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {
        var _$handle = $(this),
            idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,
            oldValue = parseFloat(_this.inputs.eq(idx).val()),
            newValue;

        // handle keyboard event with keyboard util
        Foundation.Keyboard.handleKey(e, 'Slider', {
          decrease: function () {
            newValue = oldValue - _this.options.step;
          },
          increase: function () {
            newValue = oldValue + _this.options.step;
          },
          decrease_fast: function () {
            newValue = oldValue - _this.options.step * 10;
          },
          increase_fast: function () {
            newValue = oldValue + _this.options.step * 10;
          },
          handled: function () {
            // only set handle pos when event was handled specially
            e.preventDefault();
            _this._setHandlePos(_$handle, newValue, true);
          }
        });
        /*if (newValue) { // if pressed key has special function, update value
          e.preventDefault();
          _this._setHandlePos(_$handle, newValue);
        }*/
      });
    }

    /**
     * Destroys the slider plugin.
     */
    destroy() {
      this.handles.off('.zf.slider');
      this.inputs.off('.zf.slider');
      this.$element.off('.zf.slider');

      Foundation.unregisterPlugin(this);
    }
  }

  Slider.defaults = {
    /**
     * Minimum value for the slider scale.
     * @option
     * @example 0
     */
    start: 0,
    /**
     * Maximum value for the slider scale.
     * @option
     * @example 100
     */
    end: 100,
    /**
     * Minimum value change per change event.
     * @option
     * @example 1
     */
    step: 1,
    /**
     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.
     * @option
     * @example 0
     */
    initialStart: 0,
    /**
     * Value at which the right handle/second input should be set to on initialization.
     * @option
     * @example 100
     */
    initialEnd: 100,
    /**
     * Allows the input to be located outside the container and visible. Set to by the JS
     * @option
     * @example false
     */
    binding: false,
    /**
     * Allows the user to click/tap on the slider bar to select a value.
     * @option
     * @example true
     */
    clickSelect: true,
    /**
     * Set to true and use the `vertical` class to change alignment to vertical.
     * @option
     * @example false
     */
    vertical: false,
    /**
     * Allows the user to drag the slider handle(s) to select a value.
     * @option
     * @example true
     */
    draggable: true,
    /**
     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
     * @option
     * @example false
     */
    disabled: false,
    /**
     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.
     * @option
     * @example false
     */
    doubleSided: false,
    /**
     * Potential future feature.
     */
    // steps: 100,
    /**
     * Number of decimal places the plugin should go to for floating point precision.
     * @option
     * @example 2
     */
    decimal: 2,
    /**
     * Time delay for dragged elements.
     */
    // dragDelay: 0,
    /**
     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
     * @option
     * @example 200
     */
    moveTime: 200, //update this if changing the transition time in the sass
    /**
     * Class applied to disabled sliders.
     * @option
     * @example 'disabled'
     */
    disabledClass: 'disabled',
    /**
     * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.
     * @option
     * @example false
     */
    invertVertical: false,
    /**
     * Milliseconds before the `changed.zf-slider` event is triggered after value change.
     * @option
     * @example 500
     */
    changedDelay: 500
  };

  function percent(frac, num) {
    return frac / num;
  }
  function absPosition($handle, dir, clickPos, param) {
    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);
  }

  // Window exports
  Foundation.plugin(Slider, 'Slider');
}(jQuery);

//*********this is in case we go to static, absolute positions instead of dynamic positioning********
// this.setSteps(function() {
//   _this._events();
//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;
//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;
//   if (initStart || initEnd) {
//     _this._handleEvent(initStart, initEnd);
//   }
// });

//***********the other part of absolute positions*************
// Slider.prototype.setSteps = function(cb) {
//   var posChange = this.$element.outerWidth() / this.options.steps;
//   var counter = 0
//   while(counter < this.options.steps) {
//     if (counter) {
//       this.options.positions.push(this.options.positions[counter - 1] + posChange);
//     } else {
//       this.options.positions.push(posChange);
//     }
//     counter++;
//   }
//   cb();
// };
;'use strict';

!function ($) {

  /**
   * Sticky module.
   * @module foundation.sticky
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   */

  class Sticky {
    /**
     * Creates a new instance of a sticky thing.
     * @class
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Sticky');
    }

    /**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */
    _init() {
      var $parent = this.$element.parent('[data-sticky-container]'),
          id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),
          _this = this;

      if (!$parent.length) {
        this.wasWrapped = true;
      }
      this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);
      this.$container.addClass(this.options.containerClass);

      this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });

      this.scrollCount = this.options.checkEvery;
      this.isStuck = false;
      $(window).one('load.zf.sticky', function () {
        //We calculate the container height to have correct values for anchor points offset calculation.
        _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
        _this.$container.css('height', _this.containerHeight);
        _this.elemHeight = _this.containerHeight;
        if (_this.options.anchor !== '') {
          _this.$anchor = $('#' + _this.options.anchor);
        } else {
          _this._parsePoints();
        }

        _this._setSizes(function () {
          _this._calc(false);
        });
        _this._events(id.split('-').reverse().join('-'));
      });
    }

    /**
     * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
     * @function
     * @private
     */
    _parsePoints() {
      var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
          btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
          pts = [top, btm],
          breaks = {};
      for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
        var pt;
        if (typeof pts[i] === 'number') {
          pt = pts[i];
        } else {
          var place = pts[i].split(':'),
              anchor = $(`#${ place[0] }`);

          pt = anchor.offset().top;
          if (place[1] && place[1].toLowerCase() === 'bottom') {
            pt += anchor[0].getBoundingClientRect().height;
          }
        }
        breaks[i] = pt;
      }

      this.points = breaks;
      return;
    }

    /**
     * Adds event handlers for the scrolling element.
     * @private
     * @param {String} id - psuedo-random id for unique scroll event listener.
     */
    _events(id) {
      var _this = this,
          scrollListener = this.scrollListener = `scroll.zf.${ id }`;
      if (this.isOn) {
        return;
      }
      if (this.canStick) {
        this.isOn = true;
        $(window).off(scrollListener).on(scrollListener, function (e) {
          if (_this.scrollCount === 0) {
            _this.scrollCount = _this.options.checkEvery;
            _this._setSizes(function () {
              _this._calc(false, window.pageYOffset);
            });
          } else {
            _this.scrollCount--;
            _this._calc(false, window.pageYOffset);
          }
        });
      }

      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
        _this._setSizes(function () {
          _this._calc(false);
          if (_this.canStick) {
            if (!_this.isOn) {
              _this._events(id);
            }
          } else if (_this.isOn) {
            _this._pauseListeners(scrollListener);
          }
        });
      });
    }

    /**
     * Removes event handlers for scroll and change events on anchor.
     * @fires Sticky#pause
     * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
     */
    _pauseListeners(scrollListener) {
      this.isOn = false;
      $(window).off(scrollListener);

      /**
       * Fires when the plugin is paused due to resize event shrinking the view.
       * @event Sticky#pause
       * @private
       */
      this.$element.trigger('pause.zf.sticky');
    }

    /**
     * Called on every `scroll` event and on `_init`
     * fires functions based on booleans and cached values
     * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
     * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
     */
    _calc(checkSizes, scroll) {
      if (checkSizes) {
        this._setSizes();
      }

      if (!this.canStick) {
        if (this.isStuck) {
          this._removeSticky(true);
        }
        return false;
      }

      if (!scroll) {
        scroll = window.pageYOffset;
      }

      if (scroll >= this.topPoint) {
        if (scroll <= this.bottomPoint) {
          if (!this.isStuck) {
            this._setSticky();
          }
        } else {
          if (this.isStuck) {
            this._removeSticky(false);
          }
        }
      } else {
        if (this.isStuck) {
          this._removeSticky(true);
        }
      }
    }

    /**
     * Causes the $element to become stuck.
     * Adds `position: fixed;`, and helper classes.
     * @fires Sticky#stuckto
     * @function
     * @private
     */
    _setSticky() {
      var _this = this,
          stickTo = this.options.stickTo,
          mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
          notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
          css = {};

      css[mrgn] = `${ this.options[mrgn] }em`;
      css[stickTo] = 0;
      css[notStuckTo] = 'auto';
      css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])["padding-left"], 10);
      this.isStuck = true;
      this.$element.removeClass(`is-anchored is-at-${ notStuckTo }`).addClass(`is-stuck is-at-${ stickTo }`).css(css)
      /**
       * Fires when the $element has become `position: fixed;`
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
       * @event Sticky#stuckto
       */
      .trigger(`sticky.zf.stuckto:${ stickTo }`);
      this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
        _this._setSizes();
      });
    }

    /**
     * Causes the $element to become unstuck.
     * Removes `position: fixed;`, and helper classes.
     * Adds other helper classes.
     * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
     * @fires Sticky#unstuckfrom
     * @private
     */
    _removeSticky(isTop) {
      var stickTo = this.options.stickTo,
          stickToTop = stickTo === 'top',
          css = {},
          anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
          mrgn = stickToTop ? 'marginTop' : 'marginBottom',
          notStuckTo = stickToTop ? 'bottom' : 'top',
          topOrBottom = isTop ? 'top' : 'bottom';

      css[mrgn] = 0;

      css['bottom'] = 'auto';
      if (isTop) {
        css['top'] = 0;
      } else {
        css['top'] = anchorPt;
      }

      css['left'] = '';
      this.isStuck = false;
      this.$element.removeClass(`is-stuck is-at-${ stickTo }`).addClass(`is-anchored is-at-${ topOrBottom }`).css(css)
      /**
       * Fires when the $element has become anchored.
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
       * @event Sticky#unstuckfrom
       */
      .trigger(`sticky.zf.unstuckfrom:${ topOrBottom }`);
    }

    /**
     * Sets the $element and $container sizes for plugin.
     * Calls `_setBreakPoints`.
     * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
     * @private
     */
    _setSizes(cb) {
      this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        }
      }
      var _this = this,
          newElemWidth = this.$container[0].getBoundingClientRect().width,
          comp = window.getComputedStyle(this.$container[0]),
          pdng = parseInt(comp['padding-right'], 10);

      if (this.$anchor && this.$anchor.length) {
        this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
      } else {
        this._parsePoints();
      }

      this.$element.css({
        'max-width': `${ newElemWidth - pdng }px`
      });

      var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
      if (this.$element.css("display") == "none") {
        newContainerHeight = 0;
      }
      this.containerHeight = newContainerHeight;
      this.$container.css({
        height: newContainerHeight
      });
      this.elemHeight = newContainerHeight;

      if (this.isStuck) {
        this.$element.css({ "left": this.$container.offset().left + parseInt(comp['padding-left'], 10) });
      } else {
        if (this.$element.hasClass('is-at-bottom')) {
          var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
          this.$element.css('top', anchorPt);
        }
      }

      this._setBreakPoints(newContainerHeight, function () {
        if (cb && typeof cb === 'function') {
          cb();
        }
      });
    }

    /**
     * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
     * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
     * @param {Function} cb - optional callback function to be called on completion.
     * @private
     */
    _setBreakPoints(elemHeight, cb) {
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        } else {
          return false;
        }
      }
      var mTop = emCalc(this.options.marginTop),
          mBtm = emCalc(this.options.marginBottom),
          topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
          bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,

      // topPoint = this.$anchor.offset().top || this.points[0],
      // bottomPoint = topPoint + this.anchorHeight || this.points[1],
      winHeight = window.innerHeight;

      if (this.options.stickTo === 'top') {
        topPoint -= mTop;
        bottomPoint -= elemHeight + mTop;
      } else if (this.options.stickTo === 'bottom') {
        topPoint -= winHeight - (elemHeight + mBtm);
        bottomPoint -= winHeight - mBtm;
      } else {
        //this would be the stickTo: both option... tricky
      }

      this.topPoint = topPoint;
      this.bottomPoint = bottomPoint;

      if (cb && typeof cb === 'function') {
        cb();
      }
    }

    /**
     * Destroys the current sticky element.
     * Resets the element to the top position first.
     * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
     * @function
     */
    destroy() {
      this._removeSticky(true);

      this.$element.removeClass(`${ this.options.stickyClass } is-anchored is-at-top`).css({
        height: '',
        top: '',
        bottom: '',
        'max-width': ''
      }).off('resizeme.zf.trigger');
      if (this.$anchor && this.$anchor.length) {
        this.$anchor.off('change.zf.sticky');
      }
      $(window).off(this.scrollListener);

      if (this.wasWrapped) {
        this.$element.unwrap();
      } else {
        this.$container.removeClass(this.options.containerClass).css({
          height: ''
        });
      }
      Foundation.unregisterPlugin(this);
    }
  }

  Sticky.defaults = {
    /**
     * Customizable container template. Add your own classes for styling and sizing.
     * @option
     * @example '&lt;div data-sticky-container class="small-6 columns"&gt;&lt;/div&gt;'
     */
    container: '<div data-sticky-container></div>',
    /**
     * Location in the view the element sticks to.
     * @option
     * @example 'top'
     */
    stickTo: 'top',
    /**
     * If anchored to a single element, the id of that element.
     * @option
     * @example 'exampleId'
     */
    anchor: '',
    /**
     * If using more than one element as anchor points, the id of the top anchor.
     * @option
     * @example 'exampleId:top'
     */
    topAnchor: '',
    /**
     * If using more than one element as anchor points, the id of the bottom anchor.
     * @option
     * @example 'exampleId:bottom'
     */
    btmAnchor: '',
    /**
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
     * @option
     * @example 1
     */
    marginTop: 1,
    /**
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
     * @option
     * @example 1
     */
    marginBottom: 1,
    /**
     * Breakpoint string that is the minimum screen size an element should become sticky.
     * @option
     * @example 'medium'
     */
    stickyOn: 'medium',
    /**
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
     * @option
     * @example 'sticky'
     */
    stickyClass: 'sticky',
    /**
     * Class applied to sticky container. Foundation defaults to `sticky-container`.
     * @option
     * @example 'sticky-container'
     */
    containerClass: 'sticky-container',
    /**
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option
     * @example 50
     */
    checkEvery: -1
  };

  /**
   * Helper function to calculate em values
   * @param Number {em} - number of em's to calculate into pixels
   */
  function emCalc(em) {
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
  }

  // Window exports
  Foundation.plugin(Sticky, 'Sticky');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Tabs module.
   * @module foundation.tabs
   * @requires foundation.util.keyboard
   * @requires foundation.util.timerAndImageLoader if tabs contain images
   */

  class Tabs {
    /**
     * Creates a new instance of tabs.
     * @class
     * @fires Tabs#init
     * @param {jQuery} element - jQuery object to make into tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);

      this._init();
      Foundation.registerPlugin(this, 'Tabs');
      Foundation.Keyboard.register('Tabs', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'previous',
        'ARROW_DOWN': 'next',
        'ARROW_LEFT': 'previous'
        // 'TAB': 'next',
        // 'SHIFT_TAB': 'previous'
      });
    }

    /**
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
     * @private
     */
    _init() {
      var _this = this;

      this.$tabTitles = this.$element.find(`.${ this.options.linkClass }`);
      this.$tabContent = $(`[data-tabs-content="${ this.$element[0].id }"]`);

      this.$tabTitles.each(function () {
        var $elem = $(this),
            $link = $elem.find('a'),
            isActive = $elem.hasClass('is-active'),
            hash = $link[0].hash.slice(1),
            linkId = $link[0].id ? $link[0].id : `${ hash }-label`,
            $tabContent = $(`#${ hash }`);

        $elem.attr({ 'role': 'presentation' });

        $link.attr({
          'role': 'tab',
          'aria-controls': hash,
          'aria-selected': isActive,
          'id': linkId
        });

        $tabContent.attr({
          'role': 'tabpanel',
          'aria-hidden': !isActive,
          'aria-labelledby': linkId
        });

        if (isActive && _this.options.autoFocus) {
          $link.focus();
        }
      });

      if (this.options.matchHeight) {
        var $images = this.$tabContent.find('img');

        if ($images.length) {
          Foundation.onImagesLoaded($images, this._setHeight.bind(this));
        } else {
          this._setHeight();
        }
      }

      this._events();
    }

    /**
     * Adds event handlers for items within the tabs.
     * @private
     */
    _events() {
      this._addKeyHandler();
      this._addClickHandler();
      this._setHeightMqHandler = null;

      if (this.options.matchHeight) {
        this._setHeightMqHandler = this._setHeight.bind(this);

        $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
      }
    }

    /**
     * Adds click handlers for items within the tabs.
     * @private
     */
    _addClickHandler() {
      var _this = this;

      this.$element.off('click.zf.tabs').on('click.zf.tabs', `.${ this.options.linkClass }`, function (e) {
        e.preventDefault();
        e.stopPropagation();
        if ($(this).hasClass('is-active')) {
          return;
        }
        _this._handleTabChange($(this));
      });
    }

    /**
     * Adds keyboard event handlers for items within the tabs.
     * @private
     */
    _addKeyHandler() {
      var _this = this;
      var $firstTab = _this.$element.find('li:first-of-type');
      var $lastTab = _this.$element.find('li:last-of-type');

      this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {
        if (e.which === 9) return;

        var $element = $(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ($(this).is($element)) {
            if (_this.options.wrapOnKeys) {
              $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
              $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
            } else {
              $prevElement = $elements.eq(Math.max(0, i - 1));
              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
            }
            return;
          }
        });

        // handle keyboard event with keyboard util
        Foundation.Keyboard.handleKey(e, 'Tabs', {
          open: function () {
            $element.find('[role="tab"]').focus();
            _this._handleTabChange($element);
          },
          previous: function () {
            $prevElement.find('[role="tab"]').focus();
            _this._handleTabChange($prevElement);
          },
          next: function () {
            $nextElement.find('[role="tab"]').focus();
            _this._handleTabChange($nextElement);
          },
          handled: function () {
            e.stopPropagation();
            e.preventDefault();
          }
        });
      });
    }

    /**
     * Opens the tab `$targetContent` defined by `$target`.
     * @param {jQuery} $target - Tab to open.
     * @fires Tabs#change
     * @function
     */
    _handleTabChange($target) {
      var $tabLink = $target.find('[role="tab"]'),
          hash = $tabLink[0].hash,
          $targetContent = this.$tabContent.find(hash),
          $oldTab = this.$element.find(`.${ this.options.linkClass }.is-active`).removeClass('is-active').find('[role="tab"]').attr({ 'aria-selected': 'false' });

      $(`#${ $oldTab.attr('aria-controls') }`).removeClass('is-active').attr({ 'aria-hidden': 'true' });

      $target.addClass('is-active');

      $tabLink.attr({ 'aria-selected': 'true' });

      $targetContent.addClass('is-active').attr({ 'aria-hidden': 'false' });

      /**
       * Fires when the plugin has successfully changed tabs.
       * @event Tabs#change
       */
      this.$element.trigger('change.zf.tabs', [$target]);
    }

    /**
     * Public method for selecting a content pane to display.
     * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
     * @function
     */
    selectTab(elem) {
      var idStr;

      if (typeof elem === 'object') {
        idStr = elem[0].id;
      } else {
        idStr = elem;
      }

      if (idStr.indexOf('#') < 0) {
        idStr = `#${ idStr }`;
      }

      var $target = this.$tabTitles.find(`[href="${ idStr }"]`).parent(`.${ this.options.linkClass }`);

      this._handleTabChange($target);
    }
    /**
     * Sets the height of each panel to the height of the tallest panel.
     * If enabled in options, gets called on media query change.
     * If loading content via external source, can be called directly or with _reflow.
     * @function
     * @private
     */
    _setHeight() {
      var max = 0;
      this.$tabContent.find(`.${ this.options.panelClass }`).css('height', '').each(function () {
        var panel = $(this),
            isActive = panel.hasClass('is-active');

        if (!isActive) {
          panel.css({ 'visibility': 'hidden', 'display': 'block' });
        }

        var temp = this.getBoundingClientRect().height;

        if (!isActive) {
          panel.css({
            'visibility': '',
            'display': ''
          });
        }

        max = temp > max ? temp : max;
      }).css('height', `${ max }px`);
    }

    /**
     * Destroys an instance of an tabs.
     * @fires Tabs#destroyed
     */
    destroy() {
      this.$element.find(`.${ this.options.linkClass }`).off('.zf.tabs').hide().end().find(`.${ this.options.panelClass }`).hide();

      if (this.options.matchHeight) {
        if (this._setHeightMqHandler != null) {
          $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
        }
      }

      Foundation.unregisterPlugin(this);
    }
  }

  Tabs.defaults = {
    /**
     * Allows the window to scroll to content of active pane on load if set to true.
     * @option
     * @example false
     */
    autoFocus: false,

    /**
     * Allows keyboard input to 'wrap' around the tab links.
     * @option
     * @example true
     */
    wrapOnKeys: true,

    /**
     * Allows the tab content panes to match heights if set to true.
     * @option
     * @example false
     */
    matchHeight: false,

    /**
     * Class applied to `li`'s in tab link list.
     * @option
     * @example 'tabs-title'
     */
    linkClass: 'tabs-title',

    /**
     * Class applied to the content containers.
     * @option
     * @example 'tabs-panel'
     */
    panelClass: 'tabs-panel'
  };

  function checkClass($elem) {
    return $elem.hasClass('is-active');
  }

  // Window exports
  Foundation.plugin(Tabs, 'Tabs');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Toggler module.
   * @module foundation.toggler
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   */

  class Toggler {
    /**
     * Creates a new instance of Toggler.
     * @class
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Toggler.defaults, element.data(), options);
      this.className = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Toggler');
    }

    /**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */
    _init() {
      var input;
      // Parse animation classes if they were set
      if (this.options.animate) {
        input = this.options.animate.split(' ');

        this.animationIn = input[0];
        this.animationOut = input[1] || null;
      }
      // Otherwise, parse toggle class
      else {
          input = this.$element.data('toggler');
          // Allow for a . at the beginning of the string
          this.className = input[0] === '.' ? input.slice(1) : input;
        }

      // Add ARIA attributes to triggers
      var id = this.$element[0].id;
      $(`[data-open="${ id }"], [data-close="${ id }"], [data-toggle="${ id }"]`).attr('aria-controls', id);
      // If the target is hidden, add aria-hidden
      this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
    }

    /**
     * Initializes events for the toggle trigger.
     * @function
     * @private
     */
    _events() {
      this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
    }

    /**
     * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
     * @function
     * @fires Toggler#on
     * @fires Toggler#off
     */
    toggle() {
      this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
    }

    _toggleClass() {
      this.$element.toggleClass(this.className);

      var isOn = this.$element.hasClass(this.className);
      if (isOn) {
        /**
         * Fires if the target element has the class after a toggle.
         * @event Toggler#on
         */
        this.$element.trigger('on.zf.toggler');
      } else {
        /**
         * Fires if the target element does not have the class after a toggle.
         * @event Toggler#off
         */
        this.$element.trigger('off.zf.toggler');
      }

      this._updateARIA(isOn);
    }

    _toggleAnimate() {
      var _this = this;

      if (this.$element.is(':hidden')) {
        Foundation.Motion.animateIn(this.$element, this.animationIn, function () {
          _this._updateARIA(true);
          this.trigger('on.zf.toggler');
        });
      } else {
        Foundation.Motion.animateOut(this.$element, this.animationOut, function () {
          _this._updateARIA(false);
          this.trigger('off.zf.toggler');
        });
      }
    }

    _updateARIA(isOn) {
      this.$element.attr('aria-expanded', isOn ? true : false);
    }

    /**
     * Destroys the instance of Toggler on the element.
     * @function
     */
    destroy() {
      this.$element.off('.zf.toggler');
      Foundation.unregisterPlugin(this);
    }
  }

  Toggler.defaults = {
    /**
     * Tells the plugin if the element should animated when toggled.
     * @option
     * @example false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(Toggler, 'Toggler');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Tooltip module.
   * @module foundation.tooltip
   * @requires foundation.util.box
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   */

  class Tooltip {
    /**
     * Creates a new instance of a Tooltip.
     * @class
     * @fires Tooltip#init
     * @param {jQuery} element - jQuery object to attach a tooltip to.
     * @param {Object} options - object to extend the default configuration.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);

      this.isActive = false;
      this.isClick = false;
      this._init();

      Foundation.registerPlugin(this, 'Tooltip');
    }

    /**
     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
     * @private
     */
    _init() {
      var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');

      this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);
      this.options.tipText = this.options.tipText || this.$element.attr('title');
      this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);

      this.template.appendTo(document.body).text(this.options.tipText).hide();

      this.$element.attr({
        'title': '',
        'aria-describedby': elemId,
        'data-yeti-box': elemId,
        'data-toggle': elemId,
        'data-resize': elemId
      }).addClass(this.options.triggerClass);

      //helper variables to track movement on collisions
      this.usedPositions = [];
      this.counter = 4;
      this.classChanged = false;

      this._events();
    }

    /**
     * Grabs the current positioning class, if present, and returns the value or an empty string.
     * @private
     */
    _getPositionClass(element) {
      if (!element) {
        return '';
      }
      // var position = element.attr('class').match(/top|left|right/g);
      var position = element[0].className.match(/\b(top|left|right)\b/g);
      position = position ? position[0] : '';
      return position;
    }
    /**
     * builds the tooltip element, adds attributes, and returns the template.
     * @private
     */
    _buildTemplate(id) {
      var templateClasses = `${ this.options.tooltipClass } ${ this.options.positionClass } ${ this.options.templateClasses }`.trim();
      var $template = $('<div></div>').addClass(templateClasses).attr({
        'role': 'tooltip',
        'aria-hidden': true,
        'data-is-active': false,
        'data-is-focus': false,
        'id': id
      });
      return $template;
    }

    /**
     * Function that gets called if a collision event is detected.
     * @param {String} position - positioning class to try
     * @private
     */
    _reposition(position) {
      this.usedPositions.push(position ? position : 'bottom');

      //default, try switching to opposite side
      if (!position && this.usedPositions.indexOf('top') < 0) {
        this.template.addClass('top');
      } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
        this.template.removeClass(position);
      } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
        this.template.removeClass(position).addClass('right');
      } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
        this.template.removeClass(position).addClass('left');
      }

      //if default change didn't work, try bottom or left first
      else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.template.addClass('left');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.template.removeClass(position).addClass('left');
        } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.template.removeClass(position);
        } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.template.removeClass(position);
        }
        //if nothing cleared, set to bottom
        else {
            this.template.removeClass(position);
          }
      this.classChanged = true;
      this.counter--;
    }

    /**
     * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
     * if the tooltip is larger than the screen width, default to full width - any user selected margin
     * @private
     */
    _setPosition() {
      var position = this._getPositionClass(this.template),
          $tipDims = Foundation.Box.GetDimensions(this.template),
          $anchorDims = Foundation.Box.GetDimensions(this.$element),
          direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
          param = direction === 'top' ? 'height' : 'width',
          offset = param === 'height' ? this.options.vOffset : this.options.hOffset,
          _this = this;

      if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {
        this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
          // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
          'width': $anchorDims.windowDims.width - this.options.hOffset * 2,
          'height': 'auto'
        });
        return false;
      }

      this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));

      while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {
        this._reposition(position);
        this._setPosition();
      }
    }

    /**
     * reveals the tooltip, and fires an event to close any other open tooltips on the page
     * @fires Tooltip#closeme
     * @fires Tooltip#show
     * @function
     */
    show() {
      if (this.options.showOn !== 'all' && !Foundation.MediaQuery.atLeast(this.options.showOn)) {
        // console.error('The screen is too small to display this tooltip');
        return false;
      }

      var _this = this;
      this.template.css('visibility', 'hidden').show();
      this._setPosition();

      /**
       * Fires to close all other open tooltips on the page
       * @event Closeme#tooltip
       */
      this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));

      this.template.attr({
        'data-is-active': true,
        'aria-hidden': false
      });
      _this.isActive = true;
      // console.log(this.template);
      this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {
        //maybe do stuff?
      });
      /**
       * Fires when the tooltip is shown
       * @event Tooltip#show
       */
      this.$element.trigger('show.zf.tooltip');
    }

    /**
     * Hides the current tooltip, and resets the positioning class if it was changed due to collision
     * @fires Tooltip#hide
     * @function
     */
    hide() {
      // console.log('hiding', this.$element.data('yeti-box'));
      var _this = this;
      this.template.stop().attr({
        'aria-hidden': true,
        'data-is-active': false
      }).fadeOut(this.options.fadeOutDuration, function () {
        _this.isActive = false;
        _this.isClick = false;
        if (_this.classChanged) {
          _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);

          _this.usedPositions = [];
          _this.counter = 4;
          _this.classChanged = false;
        }
      });
      /**
       * fires when the tooltip is hidden
       * @event Tooltip#hide
       */
      this.$element.trigger('hide.zf.tooltip');
    }

    /**
     * adds event listeners for the tooltip and its anchor
     * TODO combine some of the listeners like focus and mouseenter, etc.
     * @private
     */
    _events() {
      var _this = this;
      var $template = this.template;
      var isFocus = false;

      if (!this.options.disableHover) {

        this.$element.on('mouseenter.zf.tooltip', function (e) {
          if (!_this.isActive) {
            _this.timeout = setTimeout(function () {
              _this.show();
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.tooltip', function (e) {
          clearTimeout(_this.timeout);
          if (!isFocus || _this.isClick && !_this.options.clickOpen) {
            _this.hide();
          }
        });
      }

      if (this.options.clickOpen) {
        this.$element.on('mousedown.zf.tooltip', function (e) {
          e.stopImmediatePropagation();
          if (_this.isClick) {
            //_this.hide();
            // _this.isClick = false;
          } else {
            _this.isClick = true;
            if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {
              _this.show();
            }
          }
        });
      } else {
        this.$element.on('mousedown.zf.tooltip', function (e) {
          e.stopImmediatePropagation();
          _this.isClick = true;
        });
      }

      if (!this.options.disableForTouch) {
        this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {
          _this.isActive ? _this.hide() : _this.show();
        });
      }

      this.$element.on({
        // 'toggle.zf.trigger': this.toggle.bind(this),
        // 'close.zf.trigger': this.hide.bind(this)
        'close.zf.trigger': this.hide.bind(this)
      });

      this.$element.on('focus.zf.tooltip', function (e) {
        isFocus = true;
        if (_this.isClick) {
          // If we're not showing open on clicks, we need to pretend a click-launched focus isn't
          // a real focus, otherwise on hover and come back we get bad behavior
          if (!_this.options.clickOpen) {
            isFocus = false;
          }
          return false;
        } else {
          _this.show();
        }
      }).on('focusout.zf.tooltip', function (e) {
        isFocus = false;
        _this.isClick = false;
        _this.hide();
      }).on('resizeme.zf.trigger', function () {
        if (_this.isActive) {
          _this._setPosition();
        }
      });
    }

    /**
     * adds a toggle method, in addition to the static show() & hide() functions
     * @function
     */
    toggle() {
      if (this.isActive) {
        this.hide();
      } else {
        this.show();
      }
    }

    /**
     * Destroys an instance of tooltip, removes template element from the view.
     * @function
     */
    destroy() {
      this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tootip')
      //  .removeClass('has-tip')
      .removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');

      this.template.remove();

      Foundation.unregisterPlugin(this);
    }
  }

  Tooltip.defaults = {
    disableForTouch: false,
    /**
     * Time, in ms, before a tooltip should open on hover.
     * @option
     * @example 200
     */
    hoverDelay: 200,
    /**
     * Time, in ms, a tooltip should take to fade into view.
     * @option
     * @example 150
     */
    fadeInDuration: 150,
    /**
     * Time, in ms, a tooltip should take to fade out of view.
     * @option
     * @example 150
     */
    fadeOutDuration: 150,
    /**
     * Disables hover events from opening the tooltip if set to true
     * @option
     * @example false
     */
    disableHover: false,
    /**
     * Optional addtional classes to apply to the tooltip template on init.
     * @option
     * @example 'my-cool-tip-class'
     */
    templateClasses: '',
    /**
     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
     * @option
     * @example 'tooltip'
     */
    tooltipClass: 'tooltip',
    /**
     * Class applied to the tooltip anchor element.
     * @option
     * @example 'has-tip'
     */
    triggerClass: 'has-tip',
    /**
     * Minimum breakpoint size at which to open the tooltip.
     * @option
     * @example 'small'
     */
    showOn: 'small',
    /**
     * Custom template to be used to generate markup for tooltip.
     * @option
     * @example '&lt;div class="tooltip"&gt;&lt;/div&gt;'
     */
    template: '',
    /**
     * Text displayed in the tooltip template on open.
     * @option
     * @example 'Some cool space fact here.'
     */
    tipText: '',
    touchCloseText: 'Tap to close.',
    /**
     * Allows the tooltip to remain open if triggered with a click or touch event.
     * @option
     * @example true
     */
    clickOpen: true,
    /**
     * Additional positioning classes, set by the JS
     * @option
     * @example 'top'
     */
    positionClass: '',
    /**
     * Distance, in pixels, the template should push away from the anchor on the Y axis.
     * @option
     * @example 10
     */
    vOffset: 10,
    /**
     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.
     * @option
     * @example 12
     */
    hOffset: 12
  };

  /**
   * TODO utilize resize event trigger
   */

  // Window exports
  Foundation.plugin(Tooltip, 'Tooltip');
}(jQuery);
;'use strict';

// Polyfill for requestAnimationFrame

(function () {
  if (!Date.now) Date.now = function () {
    return new Date().getTime();
  };

  var vendors = ['webkit', 'moz'];
  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
    var vp = vendors[i];
    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
  }
  if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
    var lastTime = 0;
    window.requestAnimationFrame = function (callback) {
      var now = Date.now();
      var nextTime = Math.max(lastTime + 16, now);
      return setTimeout(function () {
        callback(lastTime = nextTime);
      }, nextTime - now);
    };
    window.cancelAnimationFrame = clearTimeout;
  }
})();

var initClasses = ['mui-enter', 'mui-leave'];
var activeClasses = ['mui-enter-active', 'mui-leave-active'];

// Find the right "transitionend" event for this browser
var endEvent = function () {
  var transitions = {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'otransitionend'
  };
  var elem = window.document.createElement('div');

  for (var t in transitions) {
    if (typeof elem.style[t] !== 'undefined') {
      return transitions[t];
    }
  }

  return null;
}();

function animate(isIn, element, animation, cb) {
  element = $(element).eq(0);

  if (!element.length) return;

  if (endEvent === null) {
    isIn ? element.show() : element.hide();
    cb();
    return;
  }

  var initClass = isIn ? initClasses[0] : initClasses[1];
  var activeClass = isIn ? activeClasses[0] : activeClasses[1];

  // Set up the animation
  reset();
  element.addClass(animation);
  element.css('transition', 'none');
  requestAnimationFrame(function () {
    element.addClass(initClass);
    if (isIn) element.show();
  });

  // Start the animation
  requestAnimationFrame(function () {
    element[0].offsetWidth;
    element.css('transition', '');
    element.addClass(activeClass);
  });

  // Clean up the animation when it finishes
  element.one('transitionend', finish);

  // Hides the element (for out animations), resets the element, and runs a callback
  function finish() {
    if (!isIn) element.hide();
    reset();
    if (cb) cb.apply(element);
  }

  // Resets transitions and removes motion-specific classes
  function reset() {
    element[0].style.transitionDuration = 0;
    element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
  }
}

var MotionUI = {
  animateIn: function (element, animation, cb) {
    animate(true, element, animation, cb);
  },

  animateOut: function (element, animation, cb) {
    animate(false, element, animation, cb);
  }
};
;!function ($) {

    $(document).ready(function () {

        // submit events form
        $('#events-form').on('submit', function (e) {

            e.preventDefault();

            $('#events-results-spinner').show();
            $('#load-more-events').hide();

            // reset page number
            $('input[name="page_number"]').val(1);

            $('#events-results').html('');

            var data = $("#events-form").serializeArray();

            var ajax_data = {
                'action': 'events_ajax_get_events',
                'data': data
            };

            jQuery.post(js_vars.ajaxurl + window.location.search, ajax_data, function (response) {

                // replace events list
                $('#events-results-spinner').hide();
                $('#events-results').html(response);

                if (response.indexOf("accordion") >= 0) {
                    // has results

                    $('#load-more-events').show();

                    //  page number
                    $('input[name="page_number"]').val(2);

                    // recalc accordians
                    $(document).foundation();
                } else {
                    //no results

                }
            });
        });

        // load more
        $('#load-more-events').on('click', function (e) {

            $('#load-more-events').prop("disabled", true);
            $('#load-more-events-spinner').show();

            var data = $("#events-form").serializeArray();

            var ajax_data = {
                'action': 'events_ajax_get_events',
                'data': data
            };

            jQuery.post(js_vars.ajaxurl + window.location.search, ajax_data, function (response) {

                $('#load-more-events').prop("disabled", false);
                $('#load-more-events-spinner').hide();

                // replace events list
                $('#events-results').append(response);

                if (response.indexOf("accordion") >= 0) {
                    // has results

                    $('#load-more-events').show();

                    // increase page number
                    page_number = parseInt($('input[name="page_number"]').val());
                    $('input[name="page_number"]').val(page_number + 1);

                    // recalc accordians
                    $(document).foundation();
                } else {
                    //no results
                    $('#load-more-events').hide();
                }
            });
        });
    });
}(window.jQuery);
;jQuery('iframe[src*="youtube.com"]').wrap("<div class='flex-video widescreen'/>");
jQuery('iframe[src*="vimeo.com"]').wrap("<div class='flex-video widescreen vimeo'/>");
;jQuery(document).foundation();
;// Joyride demo
$('#start-jr').on('click', function () {
  $(document).foundation('joyride', 'start');
});
;/**
 * author Christopher Blum
 *    - based on the idea of Remy Sharp, http://remysharp.com/2009/01/26/element-in-view-event-plugin/
 *    - forked from http://github.com/zuk/jquery.inview/
 */
(function (factory) {
  if (typeof define == 'function' && define.amd) {
    // AMD
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    // Node, CommonJS
    module.exports = factory(require('jquery'));
  } else {
    // Browser globals
    factory(jQuery);
  }
})(function ($) {

  var inviewObjects = [],
      viewportSize,
      viewportOffset,
      d = document,
      w = window,
      documentElement = d.documentElement,
      timer;

  $.event.special.inview = {
    add: function (data) {
      inviewObjects.push({ data: data, $element: $(this), element: this });
      // Use setInterval in order to also make sure this captures elements within
      // "overflow:scroll" elements or elements that appeared in the dom tree due to
      // dom manipulation and reflow
      // old: $(window).scroll(checkInView);
      //
      // By the way, iOS (iPad, iPhone, ...) seems to not execute, or at least delays
      // intervals while the user scrolls. Therefore the inview event might fire a bit late there
      //
      // Don't waste cycles with an interval until we get at least one element that
      // has bound to the inview event.
      if (!timer && inviewObjects.length) {
        timer = setInterval(checkInView, 250);
      }
    },

    remove: function (data) {
      for (var i = 0; i < inviewObjects.length; i++) {
        var inviewObject = inviewObjects[i];
        if (inviewObject.element === this && inviewObject.data.guid === data.guid) {
          inviewObjects.splice(i, 1);
          break;
        }
      }

      // Clear interval when we no longer have any elements listening
      if (!inviewObjects.length) {
        clearInterval(timer);
        timer = null;
      }
    }
  };

  function getViewportSize() {
    var mode,
        domObject,
        size = { height: w.innerHeight, width: w.innerWidth };

    // if this is correct then return it. iPad has compat Mode, so will
    // go into check clientHeight/clientWidth (which has the wrong value).
    if (!size.height) {
      mode = d.compatMode;
      if (mode || !$.support.boxModel) {
        // IE, Gecko
        domObject = mode === 'CSS1Compat' ? documentElement : // Standards
        d.body; // Quirks
        size = {
          height: domObject.clientHeight,
          width: domObject.clientWidth
        };
      }
    }

    return size;
  }

  function getViewportOffset() {
    return {
      top: w.pageYOffset || documentElement.scrollTop || d.body.scrollTop,
      left: w.pageXOffset || documentElement.scrollLeft || d.body.scrollLeft
    };
  }

  function checkInView() {
    if (!inviewObjects.length) {
      return;
    }

    var i = 0,
        $elements = $.map(inviewObjects, function (inviewObject) {
      var selector = inviewObject.data.selector,
          $element = inviewObject.$element;
      return selector ? $element.find(selector) : $element;
    });

    viewportSize = viewportSize || getViewportSize();
    viewportOffset = viewportOffset || getViewportOffset();

    for (; i < inviewObjects.length; i++) {
      // Ignore elements that are not in the DOM tree
      if (!$.contains(documentElement, $elements[i][0])) {
        continue;
      }

      var $element = $($elements[i]),
          elementSize = { height: $element[0].offsetHeight, width: $element[0].offsetWidth },
          elementOffset = $element.offset(),
          inView = $element.data('inview');

      // Don't ask me why because I haven't figured out yet:
      // viewportOffset and viewportSize are sometimes suddenly null in Firefox 5.
      // Even though it sounds weird:
      // It seems that the execution of this function is interferred by the onresize/onscroll event
      // where viewportOffset and viewportSize are unset
      if (!viewportOffset || !viewportSize) {
        return;
      }

      if (elementOffset.top + elementSize.height > viewportOffset.top && elementOffset.top < viewportOffset.top + viewportSize.height && elementOffset.left + elementSize.width > viewportOffset.left && elementOffset.left < viewportOffset.left + viewportSize.width) {
        if (!inView) {
          $element.data('inview', true).trigger('inview', [true]);
        }
      } else if (inView) {
        $element.data('inview', false).trigger('inview', [false]);
      }
    }
  }

  $(w).on("scroll resize scrollstop", function () {
    viewportSize = viewportOffset = null;
  });

  // IE < 9 scrolls to focused elements without firing the "scroll" event
  if (!documentElement.addEventListener && documentElement.attachEvent) {
    documentElement.attachEvent("onfocusin", function () {
      viewportOffset = null;
    });
  }
});
;/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */
;(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module. 
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// Node/CommonJS 
		factory(require('jquery'));
	} else {
		// Browser globals 
		factory(window.jQuery || window.Zepto);
	}
})(function ($) {

	/*>>core*/
	/**
  * 
  * Magnific Popup Core JS file
  * 
  */

	/**
  * Private static constants
  */
	var CLOSE_EVENT = 'Close',
	    BEFORE_CLOSE_EVENT = 'BeforeClose',
	    AFTER_CLOSE_EVENT = 'AfterClose',
	    BEFORE_APPEND_EVENT = 'BeforeAppend',
	    MARKUP_PARSE_EVENT = 'MarkupParse',
	    OPEN_EVENT = 'Open',
	    CHANGE_EVENT = 'Change',
	    NS = 'mfp',
	    EVENT_NS = '.' + NS,
	    READY_CLASS = 'mfp-ready',
	    REMOVING_CLASS = 'mfp-removing',
	    PREVENT_CLOSE_CLASS = 'mfp-prevent-close';

	/**
  * Private vars 
  */
	/*jshint -W079 */
	var mfp,
	    // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
	MagnificPopup = function () {},
	    _isJQ = !!window.jQuery,
	    _prevStatus,
	    _window = $(window),
	    _document,
	    _prevContentType,
	    _wrapClasses,
	    _currPopupType;

	/**
  * Private functions
  */
	var _mfpOn = function (name, f) {
		mfp.ev.on(NS + name + EVENT_NS, f);
	},
	    _getEl = function (className, appendTo, html, raw) {
		var el = document.createElement('div');
		el.className = 'mfp-' + className;
		if (html) {
			el.innerHTML = html;
		}
		if (!raw) {
			el = $(el);
			if (appendTo) {
				el.appendTo(appendTo);
			}
		} else if (appendTo) {
			appendTo.appendChild(el);
		}
		return el;
	},
	    _mfpTrigger = function (e, data) {
		mfp.ev.triggerHandler(NS + e, data);

		if (mfp.st.callbacks) {
			// converts "mfpEventName" to "eventName" callback and triggers it if it's present
			e = e.charAt(0).toLowerCase() + e.slice(1);
			if (mfp.st.callbacks[e]) {
				mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
			}
		}
	},
	    _getCloseBtn = function (type) {
		if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
			mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace('%title%', mfp.st.tClose));
			_currPopupType = type;
		}
		return mfp.currTemplate.closeBtn;
	},

	// Initialize Magnific Popup only when called at least once
	_checkInstance = function () {
		if (!$.magnificPopup.instance) {
			/*jshint -W020 */
			mfp = new MagnificPopup();
			mfp.init();
			$.magnificPopup.instance = mfp;
		}
	},

	// CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
	supportsTransitions = function () {
		var s = document.createElement('p').style,
		    // 's' for style. better to create an element if body yet to exist
		v = ['ms', 'O', 'Moz', 'Webkit']; // 'v' for vendor

		if (s['transition'] !== undefined) {
			return true;
		}

		while (v.length) {
			if (v.pop() + 'Transition' in s) {
				return true;
			}
		}

		return false;
	};

	/**
  * Public functions
  */
	MagnificPopup.prototype = {

		constructor: MagnificPopup,

		/**
   * Initializes Magnific Popup plugin. 
   * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
   */
		init: function () {
			var appVersion = navigator.appVersion;
			mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;
			mfp.isAndroid = /android/gi.test(appVersion);
			mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion);
			mfp.supportsTransition = supportsTransitions();

			// We disable fixed positioned lightbox on devices that don't handle it nicely.
			// If you know a better way of detecting this - let me know.
			mfp.probablyMobile = mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent);
			_document = $(document);

			mfp.popupsCache = {};
		},

		/**
   * Opens popup
   * @param  data [description]
   */
		open: function (data) {

			var i;

			if (data.isObj === false) {
				// convert jQuery collection to array to avoid conflicts later
				mfp.items = data.items.toArray();

				mfp.index = 0;
				var items = data.items,
				    item;
				for (i = 0; i < items.length; i++) {
					item = items[i];
					if (item.parsed) {
						item = item.el[0];
					}
					if (item === data.el[0]) {
						mfp.index = i;
						break;
					}
				}
			} else {
				mfp.items = $.isArray(data.items) ? data.items : [data.items];
				mfp.index = data.index || 0;
			}

			// if popup is already opened - we just update the content
			if (mfp.isOpen) {
				mfp.updateItemHTML();
				return;
			}

			mfp.types = [];
			_wrapClasses = '';
			if (data.mainEl && data.mainEl.length) {
				mfp.ev = data.mainEl.eq(0);
			} else {
				mfp.ev = _document;
			}

			if (data.key) {
				if (!mfp.popupsCache[data.key]) {
					mfp.popupsCache[data.key] = {};
				}
				mfp.currTemplate = mfp.popupsCache[data.key];
			} else {
				mfp.currTemplate = {};
			}

			mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
			mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;

			if (mfp.st.modal) {
				mfp.st.closeOnContentClick = false;
				mfp.st.closeOnBgClick = false;
				mfp.st.showCloseBtn = false;
				mfp.st.enableEscapeKey = false;
			}

			// Building markup
			// main containers are created only once
			if (!mfp.bgOverlay) {

				// Dark overlay
				mfp.bgOverlay = _getEl('bg').on('click' + EVENT_NS, function () {
					mfp.close();
				});

				mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click' + EVENT_NS, function (e) {
					if (mfp._checkIfClose(e.target)) {
						mfp.close();
					}
				});

				mfp.container = _getEl('container', mfp.wrap);
			}

			mfp.contentContainer = _getEl('content');
			if (mfp.st.preloader) {
				mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);
			}

			// Initializing modules
			var modules = $.magnificPopup.modules;
			for (i = 0; i < modules.length; i++) {
				var n = modules[i];
				n = n.charAt(0).toUpperCase() + n.slice(1);
				mfp['init' + n].call(mfp);
			}
			_mfpTrigger('BeforeOpen');

			if (mfp.st.showCloseBtn) {
				// Close button
				if (!mfp.st.closeBtnInside) {
					mfp.wrap.append(_getCloseBtn());
				} else {
					_mfpOn(MARKUP_PARSE_EVENT, function (e, template, values, item) {
						values.close_replaceWith = _getCloseBtn(item.type);
					});
					_wrapClasses += ' mfp-close-btn-in';
				}
			}

			if (mfp.st.alignTop) {
				_wrapClasses += ' mfp-align-top';
			}

			if (mfp.fixedContentPos) {
				mfp.wrap.css({
					overflow: mfp.st.overflowY,
					overflowX: 'hidden',
					overflowY: mfp.st.overflowY
				});
			} else {
				mfp.wrap.css({
					top: _window.scrollTop(),
					position: 'absolute'
				});
			}
			if (mfp.st.fixedBgPos === false || mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos) {
				mfp.bgOverlay.css({
					height: _document.height(),
					position: 'absolute'
				});
			}

			if (mfp.st.enableEscapeKey) {
				// Close on ESC key
				_document.on('keyup' + EVENT_NS, function (e) {
					if (e.keyCode === 27) {
						mfp.close();
					}
				});
			}

			_window.on('resize' + EVENT_NS, function () {
				mfp.updateSize();
			});

			if (!mfp.st.closeOnContentClick) {
				_wrapClasses += ' mfp-auto-cursor';
			}

			if (_wrapClasses) mfp.wrap.addClass(_wrapClasses);

			// this triggers recalculation of layout, so we get it once to not to trigger twice
			var windowHeight = mfp.wH = _window.height();

			var windowStyles = {};

			if (mfp.fixedContentPos) {
				if (mfp._hasScrollBar(windowHeight)) {
					var s = mfp._getScrollbarSize();
					if (s) {
						windowStyles.marginRight = s;
					}
				}
			}

			if (mfp.fixedContentPos) {
				if (!mfp.isIE7) {
					windowStyles.overflow = 'hidden';
				} else {
					// ie7 double-scroll bug
					$('body, html').css('overflow', 'hidden');
				}
			}

			var classesToadd = mfp.st.mainClass;
			if (mfp.isIE7) {
				classesToadd += ' mfp-ie7';
			}
			if (classesToadd) {
				mfp._addClassToMFP(classesToadd);
			}

			// add content
			mfp.updateItemHTML();

			_mfpTrigger('BuildControls');

			// remove scrollbar, add margin e.t.c
			$('html').css(windowStyles);

			// add everything to DOM
			mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || $(document.body));

			// Save last focused element
			mfp._lastFocusedEl = document.activeElement;

			// Wait for next cycle to allow CSS transition
			setTimeout(function () {

				if (mfp.content) {
					mfp._addClassToMFP(READY_CLASS);
					mfp._setFocus();
				} else {
					// if content is not defined (not loaded e.t.c) we add class only for BG
					mfp.bgOverlay.addClass(READY_CLASS);
				}

				// Trap the focus in popup
				_document.on('focusin' + EVENT_NS, mfp._onFocusIn);
			}, 16);

			mfp.isOpen = true;
			mfp.updateSize(windowHeight);
			_mfpTrigger(OPEN_EVENT);

			return data;
		},

		/**
   * Closes the popup
   */
		close: function () {
			if (!mfp.isOpen) return;
			_mfpTrigger(BEFORE_CLOSE_EVENT);

			mfp.isOpen = false;
			// for CSS3 animation
			if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
				mfp._addClassToMFP(REMOVING_CLASS);
				setTimeout(function () {
					mfp._close();
				}, mfp.st.removalDelay);
			} else {
				mfp._close();
			}
		},

		/**
   * Helper for close() function
   */
		_close: function () {
			_mfpTrigger(CLOSE_EVENT);

			var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';

			mfp.bgOverlay.detach();
			mfp.wrap.detach();
			mfp.container.empty();

			if (mfp.st.mainClass) {
				classesToRemove += mfp.st.mainClass + ' ';
			}

			mfp._removeClassFromMFP(classesToRemove);

			if (mfp.fixedContentPos) {
				var windowStyles = { marginRight: '' };
				if (mfp.isIE7) {
					$('body, html').css('overflow', '');
				} else {
					windowStyles.overflow = '';
				}
				$('html').css(windowStyles);
			}

			_document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);
			mfp.ev.off(EVENT_NS);

			// clean up DOM elements that aren't removed
			mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');
			mfp.bgOverlay.attr('class', 'mfp-bg');
			mfp.container.attr('class', 'mfp-container');

			// remove close button from target element
			if (mfp.st.showCloseBtn && (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
				if (mfp.currTemplate.closeBtn) mfp.currTemplate.closeBtn.detach();
			}

			if (mfp.st.autoFocusLast && mfp._lastFocusedEl) {
				$(mfp._lastFocusedEl).focus(); // put tab focus back
			}
			mfp.currItem = null;
			mfp.content = null;
			mfp.currTemplate = null;
			mfp.prevHeight = 0;

			_mfpTrigger(AFTER_CLOSE_EVENT);
		},

		updateSize: function (winHeight) {

			if (mfp.isIOS) {
				// fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
				var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
				var height = window.innerHeight * zoomLevel;
				mfp.wrap.css('height', height);
				mfp.wH = height;
			} else {
				mfp.wH = winHeight || _window.height();
			}
			// Fixes #84: popup incorrectly positioned with position:relative on body
			if (!mfp.fixedContentPos) {
				mfp.wrap.css('height', mfp.wH);
			}

			_mfpTrigger('Resize');
		},

		/**
   * Set content of popup based on current index
   */
		updateItemHTML: function () {
			var item = mfp.items[mfp.index];

			// Detach and perform modifications
			mfp.contentContainer.detach();

			if (mfp.content) mfp.content.detach();

			if (!item.parsed) {
				item = mfp.parseEl(mfp.index);
			}

			var type = item.type;

			_mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]);
			// BeforeChange event works like so:
			// _mfpOn('BeforeChange', function(e, prevType, newType) { });

			mfp.currItem = item;

			if (!mfp.currTemplate[type]) {
				var markup = mfp.st[type] ? mfp.st[type].markup : false;

				// allows to modify markup
				_mfpTrigger('FirstMarkupParse', markup);

				if (markup) {
					mfp.currTemplate[type] = $(markup);
				} else {
					// if there is no markup found we just define that template is parsed
					mfp.currTemplate[type] = true;
				}
			}

			if (_prevContentType && _prevContentType !== item.type) {
				mfp.container.removeClass('mfp-' + _prevContentType + '-holder');
			}

			var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
			mfp.appendContent(newContent, type);

			item.preloaded = true;

			_mfpTrigger(CHANGE_EVENT, item);
			_prevContentType = item.type;

			// Append container back after its content changed
			mfp.container.prepend(mfp.contentContainer);

			_mfpTrigger('AfterChange');
		},

		/**
   * Set HTML content of popup
   */
		appendContent: function (newContent, type) {
			mfp.content = newContent;

			if (newContent) {
				if (mfp.st.showCloseBtn && mfp.st.closeBtnInside && mfp.currTemplate[type] === true) {
					// if there is no markup, we just append close button element inside
					if (!mfp.content.find('.mfp-close').length) {
						mfp.content.append(_getCloseBtn());
					}
				} else {
					mfp.content = newContent;
				}
			} else {
				mfp.content = '';
			}

			_mfpTrigger(BEFORE_APPEND_EVENT);
			mfp.container.addClass('mfp-' + type + '-holder');

			mfp.contentContainer.append(mfp.content);
		},

		/**
   * Creates Magnific Popup data object based on given data
   * @param  {int} index Index of item to parse
   */
		parseEl: function (index) {
			var item = mfp.items[index],
			    type;

			if (item.tagName) {
				item = { el: $(item) };
			} else {
				type = item.type;
				item = { data: item, src: item.src };
			}

			if (item.el) {
				var types = mfp.types;

				// check for 'mfp-TYPE' class
				for (var i = 0; i < types.length; i++) {
					if (item.el.hasClass('mfp-' + types[i])) {
						type = types[i];
						break;
					}
				}

				item.src = item.el.attr('data-mfp-src');
				if (!item.src) {
					item.src = item.el.attr('href');
				}
			}

			item.type = type || mfp.st.type || 'inline';
			item.index = index;
			item.parsed = true;
			mfp.items[index] = item;
			_mfpTrigger('ElementParse', item);

			return mfp.items[index];
		},

		/**
   * Initializes single popup or a group of popups
   */
		addGroup: function (el, options) {
			var eHandler = function (e) {
				e.mfpEl = this;
				mfp._openClick(e, el, options);
			};

			if (!options) {
				options = {};
			}

			var eName = 'click.magnificPopup';
			options.mainEl = el;

			if (options.items) {
				options.isObj = true;
				el.off(eName).on(eName, eHandler);
			} else {
				options.isObj = false;
				if (options.delegate) {
					el.off(eName).on(eName, options.delegate, eHandler);
				} else {
					options.items = el;
					el.off(eName).on(eName, eHandler);
				}
			}
		},
		_openClick: function (e, el, options) {
			var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;

			if (!midClick && (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)) {
				return;
			}

			var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;

			if (disableOn) {
				if ($.isFunction(disableOn)) {
					if (!disableOn.call(mfp)) {
						return true;
					}
				} else {
					// else it's number
					if (_window.width() < disableOn) {
						return true;
					}
				}
			}

			if (e.type) {
				e.preventDefault();

				// This will prevent popup from closing if element is inside and popup is already opened
				if (mfp.isOpen) {
					e.stopPropagation();
				}
			}

			options.el = $(e.mfpEl);
			if (options.delegate) {
				options.items = el.find(options.delegate);
			}
			mfp.open(options);
		},

		/**
   * Updates text on preloader
   */
		updateStatus: function (status, text) {

			if (mfp.preloader) {
				if (_prevStatus !== status) {
					mfp.container.removeClass('mfp-s-' + _prevStatus);
				}

				if (!text && status === 'loading') {
					text = mfp.st.tLoading;
				}

				var data = {
					status: status,
					text: text
				};
				// allows to modify status
				_mfpTrigger('UpdateStatus', data);

				status = data.status;
				text = data.text;

				mfp.preloader.html(text);

				mfp.preloader.find('a').on('click', function (e) {
					e.stopImmediatePropagation();
				});

				mfp.container.addClass('mfp-s-' + status);
				_prevStatus = status;
			}
		},

		/*
  	"Private" helpers that aren't private at all
   */
		// Check to close popup or not
		// "target" is an element that was clicked
		_checkIfClose: function (target) {

			if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
				return;
			}

			var closeOnContent = mfp.st.closeOnContentClick;
			var closeOnBg = mfp.st.closeOnBgClick;

			if (closeOnContent && closeOnBg) {
				return true;
			} else {

				// We close the popup if click is on close button or on preloader. Or if there is no content.
				if (!mfp.content || $(target).hasClass('mfp-close') || mfp.preloader && target === mfp.preloader[0]) {
					return true;
				}

				// if click is outside the content
				if (target !== mfp.content[0] && !$.contains(mfp.content[0], target)) {
					if (closeOnBg) {
						// last check, if the clicked element is in DOM, (in case it's removed onclick)
						if ($.contains(document, target)) {
							return true;
						}
					}
				} else if (closeOnContent) {
					return true;
				}
			}
			return false;
		},
		_addClassToMFP: function (cName) {
			mfp.bgOverlay.addClass(cName);
			mfp.wrap.addClass(cName);
		},
		_removeClassFromMFP: function (cName) {
			this.bgOverlay.removeClass(cName);
			mfp.wrap.removeClass(cName);
		},
		_hasScrollBar: function (winHeight) {
			return (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height());
		},
		_setFocus: function () {
			(mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
		},
		_onFocusIn: function (e) {
			if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
				mfp._setFocus();
				return false;
			}
		},
		_parseMarkup: function (template, values, item) {
			var arr;
			if (item.data) {
				values = $.extend(item.data, values);
			}
			_mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);

			$.each(values, function (key, value) {
				if (value === undefined || value === false) {
					return true;
				}
				arr = key.split('_');
				if (arr.length > 1) {
					var el = template.find(EVENT_NS + '-' + arr[0]);

					if (el.length > 0) {
						var attr = arr[1];
						if (attr === 'replaceWith') {
							if (el[0] !== value[0]) {
								el.replaceWith(value);
							}
						} else if (attr === 'img') {
							if (el.is('img')) {
								el.attr('src', value);
							} else {
								el.replaceWith($('<img>').attr('src', value).attr('class', el.attr('class')));
							}
						} else {
							el.attr(arr[1], value);
						}
					}
				} else {
					template.find(EVENT_NS + '-' + key).html(value);
				}
			});
		},

		_getScrollbarSize: function () {
			// thx David
			if (mfp.scrollbarSize === undefined) {
				var scrollDiv = document.createElement("div");
				scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
				document.body.appendChild(scrollDiv);
				mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
				document.body.removeChild(scrollDiv);
			}
			return mfp.scrollbarSize;
		}

	}; /* MagnificPopup core prototype end */

	/**
  * Public static functions
  */
	$.magnificPopup = {
		instance: null,
		proto: MagnificPopup.prototype,
		modules: [],

		open: function (options, index) {
			_checkInstance();

			if (!options) {
				options = {};
			} else {
				options = $.extend(true, {}, options);
			}

			options.isObj = true;
			options.index = index || 0;
			return this.instance.open(options);
		},

		close: function () {
			return $.magnificPopup.instance && $.magnificPopup.instance.close();
		},

		registerModule: function (name, module) {
			if (module.options) {
				$.magnificPopup.defaults[name] = module.options;
			}
			$.extend(this.proto, module.proto);
			this.modules.push(name);
		},

		defaults: {

			// Info about options is in docs:
			// http://dimsemenov.com/plugins/magnific-popup/documentation.html#options

			disableOn: 0,

			key: null,

			midClick: false,

			mainClass: '',

			preloader: true,

			focus: '', // CSS selector of input to focus after popup is opened

			closeOnContentClick: false,

			closeOnBgClick: true,

			closeBtnInside: true,

			showCloseBtn: true,

			enableEscapeKey: true,

			modal: false,

			alignTop: false,

			removalDelay: 0,

			prependTo: null,

			fixedContentPos: 'auto',

			fixedBgPos: 'auto',

			overflowY: 'auto',

			closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',

			tClose: 'Close (Esc)',

			tLoading: 'Loading...',

			autoFocusLast: true

		}
	};

	$.fn.magnificPopup = function (options) {
		_checkInstance();

		var jqEl = $(this);

		// We call some API method of first param is a string
		if (typeof options === "string") {

			if (options === 'open') {
				var items,
				    itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,
				    index = parseInt(arguments[1], 10) || 0;

				if (itemOpts.items) {
					items = itemOpts.items[index];
				} else {
					items = jqEl;
					if (itemOpts.delegate) {
						items = items.find(itemOpts.delegate);
					}
					items = items.eq(index);
				}
				mfp._openClick({ mfpEl: items }, jqEl, itemOpts);
			} else {
				if (mfp.isOpen) mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
			}
		} else {
			// clone options obj
			options = $.extend(true, {}, options);

			/*
    * As Zepto doesn't support .data() method for objects
    * and it works only in normal browsers
    * we assign "options" object directly to the DOM element. FTW!
    */
			if (_isJQ) {
				jqEl.data('magnificPopup', options);
			} else {
				jqEl[0].magnificPopup = options;
			}

			mfp.addGroup(jqEl, options);
		}
		return jqEl;
	};

	/*>>core*/

	/*>>inline*/

	var INLINE_NS = 'inline',
	    _hiddenClass,
	    _inlinePlaceholder,
	    _lastInlineElement,
	    _putInlineElementsBack = function () {
		if (_lastInlineElement) {
			_inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();
			_lastInlineElement = null;
		}
	};

	$.magnificPopup.registerModule(INLINE_NS, {
		options: {
			hiddenClass: 'hide', // will be appended with `mfp-` prefix
			markup: '',
			tNotFound: 'Content not found'
		},
		proto: {

			initInline: function () {
				mfp.types.push(INLINE_NS);

				_mfpOn(CLOSE_EVENT + '.' + INLINE_NS, function () {
					_putInlineElementsBack();
				});
			},

			getInline: function (item, template) {

				_putInlineElementsBack();

				if (item.src) {
					var inlineSt = mfp.st.inline,
					    el = $(item.src);

					if (el.length) {

						// If target element has parent - we replace it with placeholder and put it back after popup is closed
						var parent = el[0].parentNode;
						if (parent && parent.tagName) {
							if (!_inlinePlaceholder) {
								_hiddenClass = inlineSt.hiddenClass;
								_inlinePlaceholder = _getEl(_hiddenClass);
								_hiddenClass = 'mfp-' + _hiddenClass;
							}
							// replace target inline element with placeholder
							_lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
						}

						mfp.updateStatus('ready');
					} else {
						mfp.updateStatus('error', inlineSt.tNotFound);
						el = $('<div>');
					}

					item.inlineElement = el;
					return el;
				}

				mfp.updateStatus('ready');
				mfp._parseMarkup(template, {}, item);
				return template;
			}
		}
	});

	/*>>inline*/

	/*>>ajax*/
	var AJAX_NS = 'ajax',
	    _ajaxCur,
	    _removeAjaxCursor = function () {
		if (_ajaxCur) {
			$(document.body).removeClass(_ajaxCur);
		}
	},
	    _destroyAjaxRequest = function () {
		_removeAjaxCursor();
		if (mfp.req) {
			mfp.req.abort();
		}
	};

	$.magnificPopup.registerModule(AJAX_NS, {

		options: {
			settings: null,
			cursor: 'mfp-ajax-cur',
			tError: '<a href="%url%">The content</a> could not be loaded.'
		},

		proto: {
			initAjax: function () {
				mfp.types.push(AJAX_NS);
				_ajaxCur = mfp.st.ajax.cursor;

				_mfpOn(CLOSE_EVENT + '.' + AJAX_NS, _destroyAjaxRequest);
				_mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);
			},
			getAjax: function (item) {

				if (_ajaxCur) {
					$(document.body).addClass(_ajaxCur);
				}

				mfp.updateStatus('loading');

				var opts = $.extend({
					url: item.src,
					success: function (data, textStatus, jqXHR) {
						var temp = {
							data: data,
							xhr: jqXHR
						};

						_mfpTrigger('ParseAjax', temp);

						mfp.appendContent($(temp.data), AJAX_NS);

						item.finished = true;

						_removeAjaxCursor();

						mfp._setFocus();

						setTimeout(function () {
							mfp.wrap.addClass(READY_CLASS);
						}, 16);

						mfp.updateStatus('ready');

						_mfpTrigger('AjaxContentAdded');
					},
					error: function () {
						_removeAjaxCursor();
						item.finished = item.loadError = true;
						mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));
					}
				}, mfp.st.ajax.settings);

				mfp.req = $.ajax(opts);

				return '';
			}
		}
	});

	/*>>ajax*/

	/*>>image*/
	var _imgInterval,
	    _getTitle = function (item) {
		if (item.data && item.data.title !== undefined) return item.data.title;

		var src = mfp.st.image.titleSrc;

		if (src) {
			if ($.isFunction(src)) {
				return src.call(mfp, item);
			} else if (item.el) {
				return item.el.attr(src) || '';
			}
		}
		return '';
	};

	$.magnificPopup.registerModule('image', {

		options: {
			markup: '<div class="mfp-figure">' + '<div class="mfp-close"></div>' + '<figure>' + '<div class="mfp-img"></div>' + '<figcaption>' + '<div class="mfp-bottom-bar">' + '<div class="mfp-title"></div>' + '<div class="mfp-counter"></div>' + '</div>' + '</figcaption>' + '</figure>' + '</div>',
			cursor: 'mfp-zoom-out-cur',
			titleSrc: 'title',
			verticalFit: true,
			tError: '<a href="%url%">The image</a> could not be loaded.'
		},

		proto: {
			initImage: function () {
				var imgSt = mfp.st.image,
				    ns = '.image';

				mfp.types.push('image');

				_mfpOn(OPEN_EVENT + ns, function () {
					if (mfp.currItem.type === 'image' && imgSt.cursor) {
						$(document.body).addClass(imgSt.cursor);
					}
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					if (imgSt.cursor) {
						$(document.body).removeClass(imgSt.cursor);
					}
					_window.off('resize' + EVENT_NS);
				});

				_mfpOn('Resize' + ns, mfp.resizeImage);
				if (mfp.isLowIE) {
					_mfpOn('AfterChange', mfp.resizeImage);
				}
			},
			resizeImage: function () {
				var item = mfp.currItem;
				if (!item || !item.img) return;

				if (mfp.st.image.verticalFit) {
					var decr = 0;
					// fix box-sizing in ie7/8
					if (mfp.isLowIE) {
						decr = parseInt(item.img.css('padding-top'), 10) + parseInt(item.img.css('padding-bottom'), 10);
					}
					item.img.css('max-height', mfp.wH - decr);
				}
			},
			_onImageHasSize: function (item) {
				if (item.img) {

					item.hasSize = true;

					if (_imgInterval) {
						clearInterval(_imgInterval);
					}

					item.isCheckingImgSize = false;

					_mfpTrigger('ImageHasSize', item);

					if (item.imgHidden) {
						if (mfp.content) mfp.content.removeClass('mfp-loading');

						item.imgHidden = false;
					}
				}
			},

			/**
    * Function that loops until the image has size to display elements that rely on it asap
    */
			findImageSize: function (item) {

				var counter = 0,
				    img = item.img[0],
				    mfpSetInterval = function (delay) {

					if (_imgInterval) {
						clearInterval(_imgInterval);
					}
					// decelerating interval that checks for size of an image
					_imgInterval = setInterval(function () {
						if (img.naturalWidth > 0) {
							mfp._onImageHasSize(item);
							return;
						}

						if (counter > 200) {
							clearInterval(_imgInterval);
						}

						counter++;
						if (counter === 3) {
							mfpSetInterval(10);
						} else if (counter === 40) {
							mfpSetInterval(50);
						} else if (counter === 100) {
							mfpSetInterval(500);
						}
					}, delay);
				};

				mfpSetInterval(1);
			},

			getImage: function (item, template) {

				var guard = 0,


				// image load complete handler
				onLoadComplete = function () {
					if (item) {
						if (item.img[0].complete) {
							item.img.off('.mfploader');

							if (item === mfp.currItem) {
								mfp._onImageHasSize(item);

								mfp.updateStatus('ready');
							}

							item.hasSize = true;
							item.loaded = true;

							_mfpTrigger('ImageLoadComplete');
						} else {
							// if image complete check fails 200 times (20 sec), we assume that there was an error.
							guard++;
							if (guard < 200) {
								setTimeout(onLoadComplete, 100);
							} else {
								onLoadError();
							}
						}
					}
				},


				// image error handler
				onLoadError = function () {
					if (item) {
						item.img.off('.mfploader');
						if (item === mfp.currItem) {
							mfp._onImageHasSize(item);
							mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
						}

						item.hasSize = true;
						item.loaded = true;
						item.loadError = true;
					}
				},
				    imgSt = mfp.st.image;

				var el = template.find('.mfp-img');
				if (el.length) {
					var img = document.createElement('img');
					img.className = 'mfp-img';
					if (item.el && item.el.find('img').length) {
						img.alt = item.el.find('img').attr('alt');
					}
					item.img = $(img).on('load.mfploader', onLoadComplete).on('error.mfploader', onLoadError);
					img.src = item.src;

					// without clone() "error" event is not firing when IMG is replaced by new IMG
					// TODO: find a way to avoid such cloning
					if (el.is('img')) {
						item.img = item.img.clone();
					}

					img = item.img[0];
					if (img.naturalWidth > 0) {
						item.hasSize = true;
					} else if (!img.width) {
						item.hasSize = false;
					}
				}

				mfp._parseMarkup(template, {
					title: _getTitle(item),
					img_replaceWith: item.img
				}, item);

				mfp.resizeImage();

				if (item.hasSize) {
					if (_imgInterval) clearInterval(_imgInterval);

					if (item.loadError) {
						template.addClass('mfp-loading');
						mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
					} else {
						template.removeClass('mfp-loading');
						mfp.updateStatus('ready');
					}
					return template;
				}

				mfp.updateStatus('loading');
				item.loading = true;

				if (!item.hasSize) {
					item.imgHidden = true;
					template.addClass('mfp-loading');
					mfp.findImageSize(item);
				}

				return template;
			}
		}
	});

	/*>>image*/

	/*>>zoom*/
	var hasMozTransform,
	    getHasMozTransform = function () {
		if (hasMozTransform === undefined) {
			hasMozTransform = document.createElement('p').style.MozTransform !== undefined;
		}
		return hasMozTransform;
	};

	$.magnificPopup.registerModule('zoom', {

		options: {
			enabled: false,
			easing: 'ease-in-out',
			duration: 300,
			opener: function (element) {
				return element.is('img') ? element : element.find('img');
			}
		},

		proto: {

			initZoom: function () {
				var zoomSt = mfp.st.zoom,
				    ns = '.zoom',
				    image;

				if (!zoomSt.enabled || !mfp.supportsTransition) {
					return;
				}

				var duration = zoomSt.duration,
				    getElToAnimate = function (image) {
					var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),
					    transition = 'all ' + zoomSt.duration / 1000 + 's ' + zoomSt.easing,
					    cssObj = {
						position: 'fixed',
						zIndex: 9999,
						left: 0,
						top: 0,
						'-webkit-backface-visibility': 'hidden'
					},
					    t = 'transition';

					cssObj['-webkit-' + t] = cssObj['-moz-' + t] = cssObj['-o-' + t] = cssObj[t] = transition;

					newImg.css(cssObj);
					return newImg;
				},
				    showMainContent = function () {
					mfp.content.css('visibility', 'visible');
				},
				    openTimeout,
				    animatedImg;

				_mfpOn('BuildControls' + ns, function () {
					if (mfp._allowZoom()) {

						clearTimeout(openTimeout);
						mfp.content.css('visibility', 'hidden');

						// Basically, all code below does is clones existing image, puts in on top of the current one and animated it

						image = mfp._getItemToZoom();

						if (!image) {
							showMainContent();
							return;
						}

						animatedImg = getElToAnimate(image);

						animatedImg.css(mfp._getOffset());

						mfp.wrap.append(animatedImg);

						openTimeout = setTimeout(function () {
							animatedImg.css(mfp._getOffset(true));
							openTimeout = setTimeout(function () {

								showMainContent();

								setTimeout(function () {
									animatedImg.remove();
									image = animatedImg = null;
									_mfpTrigger('ZoomAnimationEnded');
								}, 16); // avoid blink when switching images
							}, duration); // this timeout equals animation duration
						}, 16); // by adding this timeout we avoid short glitch at the beginning of animation


						// Lots of timeouts...
					}
				});
				_mfpOn(BEFORE_CLOSE_EVENT + ns, function () {
					if (mfp._allowZoom()) {

						clearTimeout(openTimeout);

						mfp.st.removalDelay = duration;

						if (!image) {
							image = mfp._getItemToZoom();
							if (!image) {
								return;
							}
							animatedImg = getElToAnimate(image);
						}

						animatedImg.css(mfp._getOffset(true));
						mfp.wrap.append(animatedImg);
						mfp.content.css('visibility', 'hidden');

						setTimeout(function () {
							animatedImg.css(mfp._getOffset());
						}, 16);
					}
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					if (mfp._allowZoom()) {
						showMainContent();
						if (animatedImg) {
							animatedImg.remove();
						}
						image = null;
					}
				});
			},

			_allowZoom: function () {
				return mfp.currItem.type === 'image';
			},

			_getItemToZoom: function () {
				if (mfp.currItem.hasSize) {
					return mfp.currItem.img;
				} else {
					return false;
				}
			},

			// Get element postion relative to viewport
			_getOffset: function (isLarge) {
				var el;
				if (isLarge) {
					el = mfp.currItem.img;
				} else {
					el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
				}

				var offset = el.offset();
				var paddingTop = parseInt(el.css('padding-top'), 10);
				var paddingBottom = parseInt(el.css('padding-bottom'), 10);
				offset.top -= $(window).scrollTop() - paddingTop;

				/*
    	Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.
    	 */
				var obj = {
					width: el.width(),
					// fix Zepto height+padding issue
					height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
				};

				// I hate to do this, but there is no another option
				if (getHasMozTransform()) {
					obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';
				} else {
					obj.left = offset.left;
					obj.top = offset.top;
				}
				return obj;
			}

		}
	});

	/*>>zoom*/

	/*>>iframe*/

	var IFRAME_NS = 'iframe',
	    _emptyPage = '//about:blank',
	    _fixIframeBugs = function (isShowing) {
		if (mfp.currTemplate[IFRAME_NS]) {
			var el = mfp.currTemplate[IFRAME_NS].find('iframe');
			if (el.length) {
				// reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
				if (!isShowing) {
					el[0].src = _emptyPage;
				}

				// IE8 black screen bug fix
				if (mfp.isIE8) {
					el.css('display', isShowing ? 'block' : 'none');
				}
			}
		}
	};

	$.magnificPopup.registerModule(IFRAME_NS, {

		options: {
			markup: '<div class="mfp-iframe-scaler">' + '<div class="mfp-close"></div>' + '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>' + '</div>',

			srcAction: 'iframe_src',

			// we don't care and support only one default type of URL by default
			patterns: {
				youtube: {
					index: 'youtube.com',
					id: 'v=',
					src: '//www.youtube.com/embed/%id%?autoplay=1'
				},
				vimeo: {
					index: 'vimeo.com/',
					id: '/',
					src: '//player.vimeo.com/video/%id%?autoplay=1'
				},
				gmaps: {
					index: '//maps.google.',
					src: '%id%&output=embed'
				}
			}
		},

		proto: {
			initIframe: function () {
				mfp.types.push(IFRAME_NS);

				_mfpOn('BeforeChange', function (e, prevType, newType) {
					if (prevType !== newType) {
						if (prevType === IFRAME_NS) {
							_fixIframeBugs(); // iframe if removed
						} else if (newType === IFRAME_NS) {
							_fixIframeBugs(true); // iframe is showing
						}
					} // else {
					// iframe source is switched, don't do anything
					//}
				});

				_mfpOn(CLOSE_EVENT + '.' + IFRAME_NS, function () {
					_fixIframeBugs();
				});
			},

			getIframe: function (item, template) {
				var embedSrc = item.src;
				var iframeSt = mfp.st.iframe;

				$.each(iframeSt.patterns, function () {
					if (embedSrc.indexOf(this.index) > -1) {
						if (this.id) {
							if (typeof this.id === 'string') {
								embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length);
							} else {
								embedSrc = this.id.call(this, embedSrc);
							}
						}
						embedSrc = this.src.replace('%id%', embedSrc);
						return false; // break;
					}
				});

				var dataObj = {};
				if (iframeSt.srcAction) {
					dataObj[iframeSt.srcAction] = embedSrc;
				}
				mfp._parseMarkup(template, dataObj, item);

				mfp.updateStatus('ready');

				return template;
			}
		}
	});

	/*>>iframe*/

	/*>>gallery*/
	/**
  * Get looped index depending on number of slides
  */
	var _getLoopedId = function (index) {
		var numSlides = mfp.items.length;
		if (index > numSlides - 1) {
			return index - numSlides;
		} else if (index < 0) {
			return numSlides + index;
		}
		return index;
	},
	    _replaceCurrTotal = function (text, curr, total) {
		return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
	};

	$.magnificPopup.registerModule('gallery', {

		options: {
			enabled: false,
			arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
			preload: [0, 2],
			navigateByImgClick: true,
			arrows: true,

			tPrev: 'Previous (Left arrow key)',
			tNext: 'Next (Right arrow key)',
			tCounter: '%curr% of %total%'
		},

		proto: {
			initGallery: function () {

				var gSt = mfp.st.gallery,
				    ns = '.mfp-gallery';

				mfp.direction = true; // true - next, false - prev

				if (!gSt || !gSt.enabled) return false;

				_wrapClasses += ' mfp-gallery';

				_mfpOn(OPEN_EVENT + ns, function () {

					if (gSt.navigateByImgClick) {
						mfp.wrap.on('click' + ns, '.mfp-img', function () {
							if (mfp.items.length > 1) {
								mfp.next();
								return false;
							}
						});
					}

					_document.on('keydown' + ns, function (e) {
						if (e.keyCode === 37) {
							mfp.prev();
						} else if (e.keyCode === 39) {
							mfp.next();
						}
					});
				});

				_mfpOn('UpdateStatus' + ns, function (e, data) {
					if (data.text) {
						data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);
					}
				});

				_mfpOn(MARKUP_PARSE_EVENT + ns, function (e, element, values, item) {
					var l = mfp.items.length;
					values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : '';
				});

				_mfpOn('BuildControls' + ns, function () {
					if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
						var markup = gSt.arrowMarkup,
						    arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, 'left')).addClass(PREVENT_CLOSE_CLASS),
						    arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, 'right')).addClass(PREVENT_CLOSE_CLASS);

						arrowLeft.click(function () {
							mfp.prev();
						});
						arrowRight.click(function () {
							mfp.next();
						});

						mfp.container.append(arrowLeft.add(arrowRight));
					}
				});

				_mfpOn(CHANGE_EVENT + ns, function () {
					if (mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);

					mfp._preloadTimeout = setTimeout(function () {
						mfp.preloadNearbyImages();
						mfp._preloadTimeout = null;
					}, 16);
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					_document.off(ns);
					mfp.wrap.off('click' + ns);
					mfp.arrowRight = mfp.arrowLeft = null;
				});
			},
			next: function () {
				mfp.direction = true;
				mfp.index = _getLoopedId(mfp.index + 1);
				mfp.updateItemHTML();
			},
			prev: function () {
				mfp.direction = false;
				mfp.index = _getLoopedId(mfp.index - 1);
				mfp.updateItemHTML();
			},
			goTo: function (newIndex) {
				mfp.direction = newIndex >= mfp.index;
				mfp.index = newIndex;
				mfp.updateItemHTML();
			},
			preloadNearbyImages: function () {
				var p = mfp.st.gallery.preload,
				    preloadBefore = Math.min(p[0], mfp.items.length),
				    preloadAfter = Math.min(p[1], mfp.items.length),
				    i;

				for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
					mfp._preloadItem(mfp.index + i);
				}
				for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
					mfp._preloadItem(mfp.index - i);
				}
			},
			_preloadItem: function (index) {
				index = _getLoopedId(index);

				if (mfp.items[index].preloaded) {
					return;
				}

				var item = mfp.items[index];
				if (!item.parsed) {
					item = mfp.parseEl(index);
				}

				_mfpTrigger('LazyLoad', item);

				if (item.type === 'image') {
					item.img = $('<img class="mfp-img" />').on('load.mfploader', function () {
						item.hasSize = true;
					}).on('error.mfploader', function () {
						item.hasSize = true;
						item.loadError = true;
						_mfpTrigger('LazyLoadError', item);
					}).attr('src', item.src);
				}

				item.preloaded = true;
			}
		}
	});

	/*>>gallery*/

	/*>>retina*/

	var RETINA_NS = 'retina';

	$.magnificPopup.registerModule(RETINA_NS, {
		options: {
			replaceSrc: function (item) {
				return item.src.replace(/\.\w+$/, function (m) {
					return '@2x' + m;
				});
			},
			ratio: 1 // Function or number.  Set to 1 to disable.
		},
		proto: {
			initRetina: function () {
				if (window.devicePixelRatio > 1) {

					var st = mfp.st.retina,
					    ratio = st.ratio;

					ratio = !isNaN(ratio) ? ratio : ratio();

					if (ratio > 1) {
						_mfpOn('ImageHasSize' + '.' + RETINA_NS, function (e, item) {
							item.img.css({
								'max-width': item.img[0].naturalWidth / ratio,
								'width': '100%'
							});
						});
						_mfpOn('ElementParse' + '.' + RETINA_NS, function (e, item) {
							item.src = st.replaceSrc(item, ratio);
						});
					}
				}
			}
		}
	});

	/*>>retina*/
	_checkInstance();
});
;/*!
Waypoints - 4.0.1
Copyright © 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
(function () {
  'use strict';

  var keyCounter = 0;
  var allWaypoints = {};

  /* http://imakewebthings.com/waypoints/api/waypoint */
  function Waypoint(options) {
    if (!options) {
      throw new Error('No options passed to Waypoint constructor');
    }
    if (!options.element) {
      throw new Error('No element option passed to Waypoint constructor');
    }
    if (!options.handler) {
      throw new Error('No handler option passed to Waypoint constructor');
    }

    this.key = 'waypoint-' + keyCounter;
    this.options = Waypoint.Adapter.extend({}, Waypoint.defaults, options);
    this.element = this.options.element;
    this.adapter = new Waypoint.Adapter(this.element);
    this.callback = options.handler;
    this.axis = this.options.horizontal ? 'horizontal' : 'vertical';
    this.enabled = this.options.enabled;
    this.triggerPoint = null;
    this.group = Waypoint.Group.findOrCreate({
      name: this.options.group,
      axis: this.axis
    });
    this.context = Waypoint.Context.findOrCreateByElement(this.options.context);

    if (Waypoint.offsetAliases[this.options.offset]) {
      this.options.offset = Waypoint.offsetAliases[this.options.offset];
    }
    this.group.add(this);
    this.context.add(this);
    allWaypoints[this.key] = this;
    keyCounter += 1;
  }

  /* Private */
  Waypoint.prototype.queueTrigger = function (direction) {
    this.group.queueTrigger(this, direction);
  };

  /* Private */
  Waypoint.prototype.trigger = function (args) {
    if (!this.enabled) {
      return;
    }
    if (this.callback) {
      this.callback.apply(this, args);
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/destroy */
  Waypoint.prototype.destroy = function () {
    this.context.remove(this);
    this.group.remove(this);
    delete allWaypoints[this.key];
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/disable */
  Waypoint.prototype.disable = function () {
    this.enabled = false;
    return this;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/enable */
  Waypoint.prototype.enable = function () {
    this.context.refresh();
    this.enabled = true;
    return this;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/next */
  Waypoint.prototype.next = function () {
    return this.group.next(this);
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/previous */
  Waypoint.prototype.previous = function () {
    return this.group.previous(this);
  };

  /* Private */
  Waypoint.invokeAll = function (method) {
    var allWaypointsArray = [];
    for (var waypointKey in allWaypoints) {
      allWaypointsArray.push(allWaypoints[waypointKey]);
    }
    for (var i = 0, end = allWaypointsArray.length; i < end; i++) {
      allWaypointsArray[i][method]();
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/destroy-all */
  Waypoint.destroyAll = function () {
    Waypoint.invokeAll('destroy');
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/disable-all */
  Waypoint.disableAll = function () {
    Waypoint.invokeAll('disable');
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/enable-all */
  Waypoint.enableAll = function () {
    Waypoint.Context.refreshAll();
    for (var waypointKey in allWaypoints) {
      allWaypoints[waypointKey].enabled = true;
    }
    return this;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/refresh-all */
  Waypoint.refreshAll = function () {
    Waypoint.Context.refreshAll();
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/viewport-height */
  Waypoint.viewportHeight = function () {
    return window.innerHeight || document.documentElement.clientHeight;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/viewport-width */
  Waypoint.viewportWidth = function () {
    return document.documentElement.clientWidth;
  };

  Waypoint.adapters = [];

  Waypoint.defaults = {
    context: window,
    continuous: true,
    enabled: true,
    group: 'default',
    horizontal: false,
    offset: 0
  };

  Waypoint.offsetAliases = {
    'bottom-in-view': function () {
      return this.context.innerHeight() - this.adapter.outerHeight();
    },
    'right-in-view': function () {
      return this.context.innerWidth() - this.adapter.outerWidth();
    }
  };

  window.Waypoint = Waypoint;
})();(function () {
  'use strict';

  function requestAnimationFrameShim(callback) {
    window.setTimeout(callback, 1000 / 60);
  }

  var keyCounter = 0;
  var contexts = {};
  var Waypoint = window.Waypoint;
  var oldWindowLoad = window.onload;

  /* http://imakewebthings.com/waypoints/api/context */
  function Context(element) {
    this.element = element;
    this.Adapter = Waypoint.Adapter;
    this.adapter = new this.Adapter(element);
    this.key = 'waypoint-context-' + keyCounter;
    this.didScroll = false;
    this.didResize = false;
    this.oldScroll = {
      x: this.adapter.scrollLeft(),
      y: this.adapter.scrollTop()
    };
    this.waypoints = {
      vertical: {},
      horizontal: {}
    };

    element.waypointContextKey = this.key;
    contexts[element.waypointContextKey] = this;
    keyCounter += 1;
    if (!Waypoint.windowContext) {
      Waypoint.windowContext = true;
      Waypoint.windowContext = new Context(window);
    }

    this.createThrottledScrollHandler();
    this.createThrottledResizeHandler();
  }

  /* Private */
  Context.prototype.add = function (waypoint) {
    var axis = waypoint.options.horizontal ? 'horizontal' : 'vertical';
    this.waypoints[axis][waypoint.key] = waypoint;
    this.refresh();
  };

  /* Private */
  Context.prototype.checkEmpty = function () {
    var horizontalEmpty = this.Adapter.isEmptyObject(this.waypoints.horizontal);
    var verticalEmpty = this.Adapter.isEmptyObject(this.waypoints.vertical);
    var isWindow = this.element == this.element.window;
    if (horizontalEmpty && verticalEmpty && !isWindow) {
      this.adapter.off('.waypoints');
      delete contexts[this.key];
    }
  };

  /* Private */
  Context.prototype.createThrottledResizeHandler = function () {
    var self = this;

    function resizeHandler() {
      self.handleResize();
      self.didResize = false;
    }

    this.adapter.on('resize.waypoints', function () {
      if (!self.didResize) {
        self.didResize = true;
        Waypoint.requestAnimationFrame(resizeHandler);
      }
    });
  };

  /* Private */
  Context.prototype.createThrottledScrollHandler = function () {
    var self = this;
    function scrollHandler() {
      self.handleScroll();
      self.didScroll = false;
    }

    this.adapter.on('scroll.waypoints', function () {
      if (!self.didScroll || Waypoint.isTouch) {
        self.didScroll = true;
        Waypoint.requestAnimationFrame(scrollHandler);
      }
    });
  };

  /* Private */
  Context.prototype.handleResize = function () {
    Waypoint.Context.refreshAll();
  };

  /* Private */
  Context.prototype.handleScroll = function () {
    var triggeredGroups = {};
    var axes = {
      horizontal: {
        newScroll: this.adapter.scrollLeft(),
        oldScroll: this.oldScroll.x,
        forward: 'right',
        backward: 'left'
      },
      vertical: {
        newScroll: this.adapter.scrollTop(),
        oldScroll: this.oldScroll.y,
        forward: 'down',
        backward: 'up'
      }
    };

    for (var axisKey in axes) {
      var axis = axes[axisKey];
      var isForward = axis.newScroll > axis.oldScroll;
      var direction = isForward ? axis.forward : axis.backward;

      for (var waypointKey in this.waypoints[axisKey]) {
        var waypoint = this.waypoints[axisKey][waypointKey];
        if (waypoint.triggerPoint === null) {
          continue;
        }
        var wasBeforeTriggerPoint = axis.oldScroll < waypoint.triggerPoint;
        var nowAfterTriggerPoint = axis.newScroll >= waypoint.triggerPoint;
        var crossedForward = wasBeforeTriggerPoint && nowAfterTriggerPoint;
        var crossedBackward = !wasBeforeTriggerPoint && !nowAfterTriggerPoint;
        if (crossedForward || crossedBackward) {
          waypoint.queueTrigger(direction);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        }
      }
    }

    for (var groupKey in triggeredGroups) {
      triggeredGroups[groupKey].flushTriggers();
    }

    this.oldScroll = {
      x: axes.horizontal.newScroll,
      y: axes.vertical.newScroll
    };
  };

  /* Private */
  Context.prototype.innerHeight = function () {
    /*eslint-disable eqeqeq */
    if (this.element == this.element.window) {
      return Waypoint.viewportHeight();
    }
    /*eslint-enable eqeqeq */
    return this.adapter.innerHeight();
  };

  /* Private */
  Context.prototype.remove = function (waypoint) {
    delete this.waypoints[waypoint.axis][waypoint.key];
    this.checkEmpty();
  };

  /* Private */
  Context.prototype.innerWidth = function () {
    /*eslint-disable eqeqeq */
    if (this.element == this.element.window) {
      return Waypoint.viewportWidth();
    }
    /*eslint-enable eqeqeq */
    return this.adapter.innerWidth();
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/context-destroy */
  Context.prototype.destroy = function () {
    var allWaypoints = [];
    for (var axis in this.waypoints) {
      for (var waypointKey in this.waypoints[axis]) {
        allWaypoints.push(this.waypoints[axis][waypointKey]);
      }
    }
    for (var i = 0, end = allWaypoints.length; i < end; i++) {
      allWaypoints[i].destroy();
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/context-refresh */
  Context.prototype.refresh = function () {
    /*eslint-disable eqeqeq */
    var isWindow = this.element == this.element.window;
    /*eslint-enable eqeqeq */
    var contextOffset = isWindow ? undefined : this.adapter.offset();
    var triggeredGroups = {};
    var axes;

    this.handleScroll();
    axes = {
      horizontal: {
        contextOffset: isWindow ? 0 : contextOffset.left,
        contextScroll: isWindow ? 0 : this.oldScroll.x,
        contextDimension: this.innerWidth(),
        oldScroll: this.oldScroll.x,
        forward: 'right',
        backward: 'left',
        offsetProp: 'left'
      },
      vertical: {
        contextOffset: isWindow ? 0 : contextOffset.top,
        contextScroll: isWindow ? 0 : this.oldScroll.y,
        contextDimension: this.innerHeight(),
        oldScroll: this.oldScroll.y,
        forward: 'down',
        backward: 'up',
        offsetProp: 'top'
      }
    };

    for (var axisKey in axes) {
      var axis = axes[axisKey];
      for (var waypointKey in this.waypoints[axisKey]) {
        var waypoint = this.waypoints[axisKey][waypointKey];
        var adjustment = waypoint.options.offset;
        var oldTriggerPoint = waypoint.triggerPoint;
        var elementOffset = 0;
        var freshWaypoint = oldTriggerPoint == null;
        var contextModifier, wasBeforeScroll, nowAfterScroll;
        var triggeredBackward, triggeredForward;

        if (waypoint.element !== waypoint.element.window) {
          elementOffset = waypoint.adapter.offset()[axis.offsetProp];
        }

        if (typeof adjustment === 'function') {
          adjustment = adjustment.apply(waypoint);
        } else if (typeof adjustment === 'string') {
          adjustment = parseFloat(adjustment);
          if (waypoint.options.offset.indexOf('%') > -1) {
            adjustment = Math.ceil(axis.contextDimension * adjustment / 100);
          }
        }

        contextModifier = axis.contextScroll - axis.contextOffset;
        waypoint.triggerPoint = Math.floor(elementOffset + contextModifier - adjustment);
        wasBeforeScroll = oldTriggerPoint < axis.oldScroll;
        nowAfterScroll = waypoint.triggerPoint >= axis.oldScroll;
        triggeredBackward = wasBeforeScroll && nowAfterScroll;
        triggeredForward = !wasBeforeScroll && !nowAfterScroll;

        if (!freshWaypoint && triggeredBackward) {
          waypoint.queueTrigger(axis.backward);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        } else if (!freshWaypoint && triggeredForward) {
          waypoint.queueTrigger(axis.forward);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        } else if (freshWaypoint && axis.oldScroll >= waypoint.triggerPoint) {
          waypoint.queueTrigger(axis.forward);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        }
      }
    }

    Waypoint.requestAnimationFrame(function () {
      for (var groupKey in triggeredGroups) {
        triggeredGroups[groupKey].flushTriggers();
      }
    });

    return this;
  };

  /* Private */
  Context.findOrCreateByElement = function (element) {
    return Context.findByElement(element) || new Context(element);
  };

  /* Private */
  Context.refreshAll = function () {
    for (var contextId in contexts) {
      contexts[contextId].refresh();
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/context-find-by-element */
  Context.findByElement = function (element) {
    return contexts[element.waypointContextKey];
  };

  window.onload = function () {
    if (oldWindowLoad) {
      oldWindowLoad();
    }
    Context.refreshAll();
  };

  Waypoint.requestAnimationFrame = function (callback) {
    var requestFn = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || requestAnimationFrameShim;
    requestFn.call(window, callback);
  };
  Waypoint.Context = Context;
})();(function () {
  'use strict';

  function byTriggerPoint(a, b) {
    return a.triggerPoint - b.triggerPoint;
  }

  function byReverseTriggerPoint(a, b) {
    return b.triggerPoint - a.triggerPoint;
  }

  var groups = {
    vertical: {},
    horizontal: {}
  };
  var Waypoint = window.Waypoint;

  /* http://imakewebthings.com/waypoints/api/group */
  function Group(options) {
    this.name = options.name;
    this.axis = options.axis;
    this.id = this.name + '-' + this.axis;
    this.waypoints = [];
    this.clearTriggerQueues();
    groups[this.axis][this.name] = this;
  }

  /* Private */
  Group.prototype.add = function (waypoint) {
    this.waypoints.push(waypoint);
  };

  /* Private */
  Group.prototype.clearTriggerQueues = function () {
    this.triggerQueues = {
      up: [],
      down: [],
      left: [],
      right: []
    };
  };

  /* Private */
  Group.prototype.flushTriggers = function () {
    for (var direction in this.triggerQueues) {
      var waypoints = this.triggerQueues[direction];
      var reverse = direction === 'up' || direction === 'left';
      waypoints.sort(reverse ? byReverseTriggerPoint : byTriggerPoint);
      for (var i = 0, end = waypoints.length; i < end; i += 1) {
        var waypoint = waypoints[i];
        if (waypoint.options.continuous || i === waypoints.length - 1) {
          waypoint.trigger([direction]);
        }
      }
    }
    this.clearTriggerQueues();
  };

  /* Private */
  Group.prototype.next = function (waypoint) {
    this.waypoints.sort(byTriggerPoint);
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    var isLast = index === this.waypoints.length - 1;
    return isLast ? null : this.waypoints[index + 1];
  };

  /* Private */
  Group.prototype.previous = function (waypoint) {
    this.waypoints.sort(byTriggerPoint);
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    return index ? this.waypoints[index - 1] : null;
  };

  /* Private */
  Group.prototype.queueTrigger = function (waypoint, direction) {
    this.triggerQueues[direction].push(waypoint);
  };

  /* Private */
  Group.prototype.remove = function (waypoint) {
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    if (index > -1) {
      this.waypoints.splice(index, 1);
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/first */
  Group.prototype.first = function () {
    return this.waypoints[0];
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/last */
  Group.prototype.last = function () {
    return this.waypoints[this.waypoints.length - 1];
  };

  /* Private */
  Group.findOrCreate = function (options) {
    return groups[options.axis][options.name] || new Group(options);
  };

  Waypoint.Group = Group;
})();(function () {
  'use strict';

  var $ = window.jQuery;
  var Waypoint = window.Waypoint;

  function JQueryAdapter(element) {
    this.$element = $(element);
  }

  $.each(['innerHeight', 'innerWidth', 'off', 'offset', 'on', 'outerHeight', 'outerWidth', 'scrollLeft', 'scrollTop'], function (i, method) {
    JQueryAdapter.prototype[method] = function () {
      var args = Array.prototype.slice.call(arguments);
      return this.$element[method].apply(this.$element, args);
    };
  });

  $.each(['extend', 'inArray', 'isEmptyObject'], function (i, method) {
    JQueryAdapter[method] = $[method];
  });

  Waypoint.adapters.push({
    name: 'jquery',
    Adapter: JQueryAdapter
  });
  Waypoint.Adapter = JQueryAdapter;
})();(function () {
  'use strict';

  var Waypoint = window.Waypoint;

  function createExtension(framework) {
    return function () {
      var waypoints = [];
      var overrides = arguments[0];

      if (framework.isFunction(arguments[0])) {
        overrides = framework.extend({}, arguments[1]);
        overrides.handler = arguments[0];
      }

      this.each(function () {
        var options = framework.extend({}, overrides, {
          element: this
        });
        if (typeof options.context === 'string') {
          options.context = framework(this).closest(options.context)[0];
        }
        waypoints.push(new Waypoint(options));
      });

      return waypoints;
    };
  }

  if (window.jQuery) {
    window.jQuery.fn.waypoint = createExtension(window.jQuery);
  }
  if (window.Zepto) {
    window.Zepto.fn.waypoint = createExtension(window.Zepto);
  }
})();
;
;/*! PhotoSwipe Default UI - 4.1.1 - 2015-12-24
* http://photoswipe.com
* Copyright (c) 2015 Dmitry Semenov; */
/**
*
* UI on top of main sliding area (caption, arrows, close button, etc.).
* Built just using public methods/properties of PhotoSwipe.
* 
*/
(function (root, factory) {
	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		root.PhotoSwipeUI_Default = factory();
	}
})(this, function () {

	'use strict';

	var PhotoSwipeUI_Default = function (pswp, framework) {

		var ui = this;
		var _overlayUIUpdated = false,
		    _controlsVisible = true,
		    _fullscrenAPI,
		    _controls,
		    _captionContainer,
		    _fakeCaptionContainer,
		    _indexIndicator,
		    _shareButton,
		    _shareModal,
		    _shareModalHidden = true,
		    _initalCloseOnScrollValue,
		    _isIdle,
		    _listen,
		    _loadingIndicator,
		    _loadingIndicatorHidden,
		    _loadingIndicatorTimeout,
		    _galleryHasOneSlide,
		    _options,
		    _defaultUIOptions = {
			barsSize: { top: 44, bottom: 'auto' },
			closeElClasses: ['item', 'caption', 'zoom-wrap', 'ui', 'top-bar'],
			timeToIdle: 4000,
			timeToIdleOutside: 1000,
			loadingIndicatorDelay: 1000, // 2s

			addCaptionHTMLFn: function (item, captionEl /*, isFake */) {
				if (!item.title) {
					captionEl.children[0].innerHTML = '';
					return false;
				}
				captionEl.children[0].innerHTML = item.title;
				return true;
			},

			closeEl: true,
			captionEl: true,
			fullscreenEl: true,
			zoomEl: true,
			shareEl: true,
			counterEl: true,
			arrowEl: true,
			preloaderEl: true,

			tapToClose: false,
			tapToToggleControls: true,

			clickToCloseNonZoomable: true,

			shareButtons: [{ id: 'facebook', label: 'Share on Facebook', url: 'https://www.facebook.com/sharer/sharer.php?u={{url}}' }, { id: 'twitter', label: 'Tweet', url: 'https://twitter.com/intent/tweet?text={{text}}&url={{url}}' }, { id: 'pinterest', label: 'Pin it', url: 'http://www.pinterest.com/pin/create/button/' + '?url={{url}}&media={{image_url}}&description={{text}}' }, { id: 'download', label: 'Download image', url: '{{raw_image_url}}', download: true }],
			getImageURLForShare: function () /* shareButtonData */{
				return pswp.currItem.src || '';
			},
			getPageURLForShare: function () /* shareButtonData */{
				return window.location.href;
			},
			getTextForShare: function () /* shareButtonData */{
				return pswp.currItem.title || '';
			},

			indexIndicatorSep: ' / ',
			fitControlsWidth: 1200

		},
		    _blockControlsTap,
		    _blockControlsTapTimeout;

		var _onControlsTap = function (e) {
			if (_blockControlsTap) {
				return true;
			}

			e = e || window.event;

			if (_options.timeToIdle && _options.mouseUsed && !_isIdle) {
				// reset idle timer
				_onIdleMouseMove();
			}

			var target = e.target || e.srcElement,
			    uiElement,
			    clickedClass = target.getAttribute('class') || '',
			    found;

			for (var i = 0; i < _uiElements.length; i++) {
				uiElement = _uiElements[i];
				if (uiElement.onTap && clickedClass.indexOf('pswp__' + uiElement.name) > -1) {
					uiElement.onTap();
					found = true;
				}
			}

			if (found) {
				if (e.stopPropagation) {
					e.stopPropagation();
				}
				_blockControlsTap = true;

				// Some versions of Android don't prevent ghost click event 
				// when preventDefault() was called on touchstart and/or touchend.
				// 
				// This happens on v4.3, 4.2, 4.1, 
				// older versions strangely work correctly, 
				// but just in case we add delay on all of them)	
				var tapDelay = framework.features.isOldAndroid ? 600 : 30;
				_blockControlsTapTimeout = setTimeout(function () {
					_blockControlsTap = false;
				}, tapDelay);
			}
		},
		    _fitControlsInViewport = function () {
			return !pswp.likelyTouchDevice || _options.mouseUsed || screen.width > _options.fitControlsWidth;
		},
		    _togglePswpClass = function (el, cName, add) {
			framework[(add ? 'add' : 'remove') + 'Class'](el, 'pswp__' + cName);
		},


		// add class when there is just one item in the gallery
		// (by default it hides left/right arrows and 1ofX counter)
		_countNumItems = function () {
			var hasOneSlide = _options.getNumItemsFn() === 1;

			if (hasOneSlide !== _galleryHasOneSlide) {
				_togglePswpClass(_controls, 'ui--one-slide', hasOneSlide);
				_galleryHasOneSlide = hasOneSlide;
			}
		},
		    _toggleShareModalClass = function () {
			_togglePswpClass(_shareModal, 'share-modal--hidden', _shareModalHidden);
		},
		    _toggleShareModal = function () {

			_shareModalHidden = !_shareModalHidden;

			if (!_shareModalHidden) {
				_toggleShareModalClass();
				setTimeout(function () {
					if (!_shareModalHidden) {
						framework.addClass(_shareModal, 'pswp__share-modal--fade-in');
					}
				}, 30);
			} else {
				framework.removeClass(_shareModal, 'pswp__share-modal--fade-in');
				setTimeout(function () {
					if (_shareModalHidden) {
						_toggleShareModalClass();
					}
				}, 300);
			}

			if (!_shareModalHidden) {
				_updateShareURLs();
			}
			return false;
		},
		    _openWindowPopup = function (e) {
			e = e || window.event;
			var target = e.target || e.srcElement;

			pswp.shout('shareLinkClick', e, target);

			if (!target.href) {
				return false;
			}

			if (target.hasAttribute('download')) {
				return true;
			}

			window.open(target.href, 'pswp_share', 'scrollbars=yes,resizable=yes,toolbar=no,' + 'location=yes,width=550,height=420,top=100,left=' + (window.screen ? Math.round(screen.width / 2 - 275) : 100));

			if (!_shareModalHidden) {
				_toggleShareModal();
			}

			return false;
		},
		    _updateShareURLs = function () {
			var shareButtonOut = '',
			    shareButtonData,
			    shareURL,
			    image_url,
			    page_url,
			    share_text;

			for (var i = 0; i < _options.shareButtons.length; i++) {
				shareButtonData = _options.shareButtons[i];

				image_url = _options.getImageURLForShare(shareButtonData);
				page_url = _options.getPageURLForShare(shareButtonData);
				share_text = _options.getTextForShare(shareButtonData);

				shareURL = shareButtonData.url.replace('{{url}}', encodeURIComponent(page_url)).replace('{{image_url}}', encodeURIComponent(image_url)).replace('{{raw_image_url}}', image_url).replace('{{text}}', encodeURIComponent(share_text));

				shareButtonOut += '<a href="' + shareURL + '" target="_blank" ' + 'class="pswp__share--' + shareButtonData.id + '"' + (shareButtonData.download ? 'download' : '') + '>' + shareButtonData.label + '</a>';

				if (_options.parseShareButtonOut) {
					shareButtonOut = _options.parseShareButtonOut(shareButtonData, shareButtonOut);
				}
			}
			_shareModal.children[0].innerHTML = shareButtonOut;
			_shareModal.children[0].onclick = _openWindowPopup;
		},
		    _hasCloseClass = function (target) {
			for (var i = 0; i < _options.closeElClasses.length; i++) {
				if (framework.hasClass(target, 'pswp__' + _options.closeElClasses[i])) {
					return true;
				}
			}
		},
		    _idleInterval,
		    _idleTimer,
		    _idleIncrement = 0,
		    _onIdleMouseMove = function () {
			clearTimeout(_idleTimer);
			_idleIncrement = 0;
			if (_isIdle) {
				ui.setIdle(false);
			}
		},
		    _onMouseLeaveWindow = function (e) {
			e = e ? e : window.event;
			var from = e.relatedTarget || e.toElement;
			if (!from || from.nodeName === 'HTML') {
				clearTimeout(_idleTimer);
				_idleTimer = setTimeout(function () {
					ui.setIdle(true);
				}, _options.timeToIdleOutside);
			}
		},
		    _setupFullscreenAPI = function () {
			if (_options.fullscreenEl && !framework.features.isOldAndroid) {
				if (!_fullscrenAPI) {
					_fullscrenAPI = ui.getFullscreenAPI();
				}
				if (_fullscrenAPI) {
					framework.bind(document, _fullscrenAPI.eventK, ui.updateFullscreen);
					ui.updateFullscreen();
					framework.addClass(pswp.template, 'pswp--supports-fs');
				} else {
					framework.removeClass(pswp.template, 'pswp--supports-fs');
				}
			}
		},
		    _setupLoadingIndicator = function () {
			// Setup loading indicator
			if (_options.preloaderEl) {

				_toggleLoadingIndicator(true);

				_listen('beforeChange', function () {

					clearTimeout(_loadingIndicatorTimeout);

					// display loading indicator with delay
					_loadingIndicatorTimeout = setTimeout(function () {

						if (pswp.currItem && pswp.currItem.loading) {

							if (!pswp.allowProgressiveImg() || pswp.currItem.img && !pswp.currItem.img.naturalWidth) {
								// show preloader if progressive loading is not enabled, 
								// or image width is not defined yet (because of slow connection)
								_toggleLoadingIndicator(false);
								// items-controller.js function allowProgressiveImg
							}
						} else {
							_toggleLoadingIndicator(true); // hide preloader
						}
					}, _options.loadingIndicatorDelay);
				});
				_listen('imageLoadComplete', function (index, item) {
					if (pswp.currItem === item) {
						_toggleLoadingIndicator(true);
					}
				});
			}
		},
		    _toggleLoadingIndicator = function (hide) {
			if (_loadingIndicatorHidden !== hide) {
				_togglePswpClass(_loadingIndicator, 'preloader--active', !hide);
				_loadingIndicatorHidden = hide;
			}
		},
		    _applyNavBarGaps = function (item) {
			var gap = item.vGap;

			if (_fitControlsInViewport()) {

				var bars = _options.barsSize;
				if (_options.captionEl && bars.bottom === 'auto') {
					if (!_fakeCaptionContainer) {
						_fakeCaptionContainer = framework.createEl('pswp__caption pswp__caption--fake');
						_fakeCaptionContainer.appendChild(framework.createEl('pswp__caption__center'));
						_controls.insertBefore(_fakeCaptionContainer, _captionContainer);
						framework.addClass(_controls, 'pswp__ui--fit');
					}
					if (_options.addCaptionHTMLFn(item, _fakeCaptionContainer, true)) {

						var captionSize = _fakeCaptionContainer.clientHeight;
						gap.bottom = parseInt(captionSize, 10) || 44;
					} else {
						gap.bottom = bars.top; // if no caption, set size of bottom gap to size of top
					}
				} else {
					gap.bottom = bars.bottom === 'auto' ? 0 : bars.bottom;
				}

				// height of top bar is static, no need to calculate it
				gap.top = bars.top;
			} else {
				gap.top = gap.bottom = 0;
			}
		},
		    _setupIdle = function () {
			// Hide controls when mouse is used
			if (_options.timeToIdle) {
				_listen('mouseUsed', function () {

					framework.bind(document, 'mousemove', _onIdleMouseMove);
					framework.bind(document, 'mouseout', _onMouseLeaveWindow);

					_idleInterval = setInterval(function () {
						_idleIncrement++;
						if (_idleIncrement === 2) {
							ui.setIdle(true);
						}
					}, _options.timeToIdle / 2);
				});
			}
		},
		    _setupHidingControlsDuringGestures = function () {

			// Hide controls on vertical drag
			_listen('onVerticalDrag', function (now) {
				if (_controlsVisible && now < 0.95) {
					ui.hideControls();
				} else if (!_controlsVisible && now >= 0.95) {
					ui.showControls();
				}
			});

			// Hide controls when pinching to close
			var pinchControlsHidden;
			_listen('onPinchClose', function (now) {
				if (_controlsVisible && now < 0.9) {
					ui.hideControls();
					pinchControlsHidden = true;
				} else if (pinchControlsHidden && !_controlsVisible && now > 0.9) {
					ui.showControls();
				}
			});

			_listen('zoomGestureEnded', function () {
				pinchControlsHidden = false;
				if (pinchControlsHidden && !_controlsVisible) {
					ui.showControls();
				}
			});
		};

		var _uiElements = [{
			name: 'caption',
			option: 'captionEl',
			onInit: function (el) {
				_captionContainer = el;
			}
		}, {
			name: 'share-modal',
			option: 'shareEl',
			onInit: function (el) {
				_shareModal = el;
			},
			onTap: function () {
				_toggleShareModal();
			}
		}, {
			name: 'button--share',
			option: 'shareEl',
			onInit: function (el) {
				_shareButton = el;
			},
			onTap: function () {
				_toggleShareModal();
			}
		}, {
			name: 'button--zoom',
			option: 'zoomEl',
			onTap: pswp.toggleDesktopZoom
		}, {
			name: 'counter',
			option: 'counterEl',
			onInit: function (el) {
				_indexIndicator = el;
			}
		}, {
			name: 'button--close',
			option: 'closeEl',
			onTap: pswp.close
		}, {
			name: 'button--arrow--left',
			option: 'arrowEl',
			onTap: pswp.prev
		}, {
			name: 'button--arrow--right',
			option: 'arrowEl',
			onTap: pswp.next
		}, {
			name: 'button--fs',
			option: 'fullscreenEl',
			onTap: function () {
				if (_fullscrenAPI.isFullscreen()) {
					_fullscrenAPI.exit();
				} else {
					_fullscrenAPI.enter();
				}
			}
		}, {
			name: 'preloader',
			option: 'preloaderEl',
			onInit: function (el) {
				_loadingIndicator = el;
			}
		}];

		var _setupUIElements = function () {
			var item, classAttr, uiElement;

			var loopThroughChildElements = function (sChildren) {
				if (!sChildren) {
					return;
				}

				var l = sChildren.length;
				for (var i = 0; i < l; i++) {
					item = sChildren[i];
					classAttr = item.className;

					for (var a = 0; a < _uiElements.length; a++) {
						uiElement = _uiElements[a];

						if (classAttr.indexOf('pswp__' + uiElement.name) > -1) {

							if (_options[uiElement.option]) {
								// if element is not disabled from options

								framework.removeClass(item, 'pswp__element--disabled');
								if (uiElement.onInit) {
									uiElement.onInit(item);
								}

								//item.style.display = 'block';
							} else {
								framework.addClass(item, 'pswp__element--disabled');
								//item.style.display = 'none';
							}
						}
					}
				}
			};
			loopThroughChildElements(_controls.children);

			var topBar = framework.getChildByClass(_controls, 'pswp__top-bar');
			if (topBar) {
				loopThroughChildElements(topBar.children);
			}
		};

		ui.init = function () {

			// extend options
			framework.extend(pswp.options, _defaultUIOptions, true);

			// create local link for fast access
			_options = pswp.options;

			// find pswp__ui element
			_controls = framework.getChildByClass(pswp.scrollWrap, 'pswp__ui');

			// create local link
			_listen = pswp.listen;

			_setupHidingControlsDuringGestures();

			// update controls when slides change
			_listen('beforeChange', ui.update);

			// toggle zoom on double-tap
			_listen('doubleTap', function (point) {
				var initialZoomLevel = pswp.currItem.initialZoomLevel;
				if (pswp.getZoomLevel() !== initialZoomLevel) {
					pswp.zoomTo(initialZoomLevel, point, 333);
				} else {
					pswp.zoomTo(_options.getDoubleTapZoom(false, pswp.currItem), point, 333);
				}
			});

			// Allow text selection in caption
			_listen('preventDragEvent', function (e, isDown, preventObj) {
				var t = e.target || e.srcElement;
				if (t && t.getAttribute('class') && e.type.indexOf('mouse') > -1 && (t.getAttribute('class').indexOf('__caption') > 0 || /(SMALL|STRONG|EM)/i.test(t.tagName))) {
					preventObj.prevent = false;
				}
			});

			// bind events for UI
			_listen('bindEvents', function () {
				framework.bind(_controls, 'pswpTap click', _onControlsTap);
				framework.bind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);

				if (!pswp.likelyTouchDevice) {
					framework.bind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);
				}
			});

			// unbind events for UI
			_listen('unbindEvents', function () {
				if (!_shareModalHidden) {
					_toggleShareModal();
				}

				if (_idleInterval) {
					clearInterval(_idleInterval);
				}
				framework.unbind(document, 'mouseout', _onMouseLeaveWindow);
				framework.unbind(document, 'mousemove', _onIdleMouseMove);
				framework.unbind(_controls, 'pswpTap click', _onControlsTap);
				framework.unbind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);
				framework.unbind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);

				if (_fullscrenAPI) {
					framework.unbind(document, _fullscrenAPI.eventK, ui.updateFullscreen);
					if (_fullscrenAPI.isFullscreen()) {
						_options.hideAnimationDuration = 0;
						_fullscrenAPI.exit();
					}
					_fullscrenAPI = null;
				}
			});

			// clean up things when gallery is destroyed
			_listen('destroy', function () {
				if (_options.captionEl) {
					if (_fakeCaptionContainer) {
						_controls.removeChild(_fakeCaptionContainer);
					}
					framework.removeClass(_captionContainer, 'pswp__caption--empty');
				}

				if (_shareModal) {
					_shareModal.children[0].onclick = null;
				}
				framework.removeClass(_controls, 'pswp__ui--over-close');
				framework.addClass(_controls, 'pswp__ui--hidden');
				ui.setIdle(false);
			});

			if (!_options.showAnimationDuration) {
				framework.removeClass(_controls, 'pswp__ui--hidden');
			}
			_listen('initialZoomIn', function () {
				if (_options.showAnimationDuration) {
					framework.removeClass(_controls, 'pswp__ui--hidden');
				}
			});
			_listen('initialZoomOut', function () {
				framework.addClass(_controls, 'pswp__ui--hidden');
			});

			_listen('parseVerticalMargin', _applyNavBarGaps);

			_setupUIElements();

			if (_options.shareEl && _shareButton && _shareModal) {
				_shareModalHidden = true;
			}

			_countNumItems();

			_setupIdle();

			_setupFullscreenAPI();

			_setupLoadingIndicator();
		};

		ui.setIdle = function (isIdle) {
			_isIdle = isIdle;
			_togglePswpClass(_controls, 'ui--idle', isIdle);
		};

		ui.update = function () {
			// Don't update UI if it's hidden
			if (_controlsVisible && pswp.currItem) {

				ui.updateIndexIndicator();

				if (_options.captionEl) {
					_options.addCaptionHTMLFn(pswp.currItem, _captionContainer);

					_togglePswpClass(_captionContainer, 'caption--empty', !pswp.currItem.title);
				}

				_overlayUIUpdated = true;
			} else {
				_overlayUIUpdated = false;
			}

			if (!_shareModalHidden) {
				_toggleShareModal();
			}

			_countNumItems();
		};

		ui.updateFullscreen = function (e) {

			if (e) {
				// some browsers change window scroll position during the fullscreen
				// so PhotoSwipe updates it just in case
				setTimeout(function () {
					pswp.setScrollOffset(0, framework.getScrollY());
				}, 50);
			}

			// toogle pswp--fs class on root element
			framework[(_fullscrenAPI.isFullscreen() ? 'add' : 'remove') + 'Class'](pswp.template, 'pswp--fs');
		};

		ui.updateIndexIndicator = function () {
			if (_options.counterEl) {
				_indexIndicator.innerHTML = pswp.getCurrentIndex() + 1 + _options.indexIndicatorSep + _options.getNumItemsFn();
			}
		};

		ui.onGlobalTap = function (e) {
			e = e || window.event;
			var target = e.target || e.srcElement;

			if (_blockControlsTap) {
				return;
			}

			if (e.detail && e.detail.pointerType === 'mouse') {

				// close gallery if clicked outside of the image
				if (_hasCloseClass(target)) {
					pswp.close();
					return;
				}

				if (framework.hasClass(target, 'pswp__img')) {
					if (pswp.getZoomLevel() === 1 && pswp.getZoomLevel() <= pswp.currItem.fitRatio) {
						if (_options.clickToCloseNonZoomable) {
							pswp.close();
						}
					} else {
						pswp.toggleDesktopZoom(e.detail.releasePoint);
					}
				}
			} else {

				// tap anywhere (except buttons) to toggle visibility of controls
				if (_options.tapToToggleControls) {
					if (_controlsVisible) {
						ui.hideControls();
					} else {
						ui.showControls();
					}
				}

				// tap to close gallery
				if (_options.tapToClose && (framework.hasClass(target, 'pswp__img') || _hasCloseClass(target))) {
					pswp.close();
					return;
				}
			}
		};
		ui.onMouseOver = function (e) {
			e = e || window.event;
			var target = e.target || e.srcElement;

			// add class when mouse is over an element that should close the gallery
			_togglePswpClass(_controls, 'ui--over-close', _hasCloseClass(target));
		};

		ui.hideControls = function () {
			framework.addClass(_controls, 'pswp__ui--hidden');
			_controlsVisible = false;
		};

		ui.showControls = function () {
			_controlsVisible = true;
			if (!_overlayUIUpdated) {
				ui.update();
			}
			framework.removeClass(_controls, 'pswp__ui--hidden');
		};

		ui.supportsFullscreen = function () {
			var d = document;
			return !!(d.exitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen || d.msExitFullscreen);
		};

		ui.getFullscreenAPI = function () {
			var dE = document.documentElement,
			    api,
			    tF = 'fullscreenchange';

			if (dE.requestFullscreen) {
				api = {
					enterK: 'requestFullscreen',
					exitK: 'exitFullscreen',
					elementK: 'fullscreenElement',
					eventK: tF
				};
			} else if (dE.mozRequestFullScreen) {
				api = {
					enterK: 'mozRequestFullScreen',
					exitK: 'mozCancelFullScreen',
					elementK: 'mozFullScreenElement',
					eventK: 'moz' + tF
				};
			} else if (dE.webkitRequestFullscreen) {
				api = {
					enterK: 'webkitRequestFullscreen',
					exitK: 'webkitExitFullscreen',
					elementK: 'webkitFullscreenElement',
					eventK: 'webkit' + tF
				};
			} else if (dE.msRequestFullscreen) {
				api = {
					enterK: 'msRequestFullscreen',
					exitK: 'msExitFullscreen',
					elementK: 'msFullscreenElement',
					eventK: 'MSFullscreenChange'
				};
			}

			if (api) {
				api.enter = function () {
					// disable close-on-scroll in fullscreen
					_initalCloseOnScrollValue = _options.closeOnScroll;
					_options.closeOnScroll = false;

					if (this.enterK === 'webkitRequestFullscreen') {
						pswp.template[this.enterK](Element.ALLOW_KEYBOARD_INPUT);
					} else {
						return pswp.template[this.enterK]();
					}
				};
				api.exit = function () {
					_options.closeOnScroll = _initalCloseOnScrollValue;

					return document[this.exitK]();
				};
				api.isFullscreen = function () {
					return document[this.elementK];
				};
			}

			return api;
		};
	};
	return PhotoSwipeUI_Default;
});
;/*! PhotoSwipe - v4.1.1 - 2015-12-24
* http://photoswipe.com
* Copyright (c) 2015 Dmitry Semenov; */
(function (root, factory) {
	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		root.PhotoSwipe = factory();
	}
})(this, function () {

	'use strict';

	var PhotoSwipe = function (template, UiClass, items, options) {

		/*>>framework-bridge*/
		/**
   *
   * Set of generic functions used by gallery.
   * 
   * You're free to modify anything here as long as functionality is kept.
   * 
   */
		var framework = {
			features: null,
			bind: function (target, type, listener, unbind) {
				var methodName = (unbind ? 'remove' : 'add') + 'EventListener';
				type = type.split(' ');
				for (var i = 0; i < type.length; i++) {
					if (type[i]) {
						target[methodName](type[i], listener, false);
					}
				}
			},
			isArray: function (obj) {
				return obj instanceof Array;
			},
			createEl: function (classes, tag) {
				var el = document.createElement(tag || 'div');
				if (classes) {
					el.className = classes;
				}
				return el;
			},
			getScrollY: function () {
				var yOffset = window.pageYOffset;
				return yOffset !== undefined ? yOffset : document.documentElement.scrollTop;
			},
			unbind: function (target, type, listener) {
				framework.bind(target, type, listener, true);
			},
			removeClass: function (el, className) {
				var reg = new RegExp('(\\s|^)' + className + '(\\s|$)');
				el.className = el.className.replace(reg, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
			},
			addClass: function (el, className) {
				if (!framework.hasClass(el, className)) {
					el.className += (el.className ? ' ' : '') + className;
				}
			},
			hasClass: function (el, className) {
				return el.className && new RegExp('(^|\\s)' + className + '(\\s|$)').test(el.className);
			},
			getChildByClass: function (parentEl, childClassName) {
				var node = parentEl.firstChild;
				while (node) {
					if (framework.hasClass(node, childClassName)) {
						return node;
					}
					node = node.nextSibling;
				}
			},
			arraySearch: function (array, value, key) {
				var i = array.length;
				while (i--) {
					if (array[i][key] === value) {
						return i;
					}
				}
				return -1;
			},
			extend: function (o1, o2, preventOverwrite) {
				for (var prop in o2) {
					if (o2.hasOwnProperty(prop)) {
						if (preventOverwrite && o1.hasOwnProperty(prop)) {
							continue;
						}
						o1[prop] = o2[prop];
					}
				}
			},
			easing: {
				sine: {
					out: function (k) {
						return Math.sin(k * (Math.PI / 2));
					},
					inOut: function (k) {
						return -(Math.cos(Math.PI * k) - 1) / 2;
					}
				},
				cubic: {
					out: function (k) {
						return --k * k * k + 1;
					}
				}
				/*
    	elastic: {
    		out: function ( k ) {
    				var s, a = 0.1, p = 0.4;
    			if ( k === 0 ) return 0;
    			if ( k === 1 ) return 1;
    			if ( !a || a < 1 ) { a = 1; s = p / 4; }
    			else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
    			return ( a * Math.pow( 2, - 10 * k) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) + 1 );
    			},
    	},
    	back: {
    		out: function ( k ) {
    			var s = 1.70158;
    			return --k * k * ( ( s + 1 ) * k + s ) + 1;
    		}
    	}
    */
			},

			/**
    * 
    * @return {object}
    * 
    * {
    *  raf : request animation frame function
    *  caf : cancel animation frame function
    *  transfrom : transform property key (with vendor), or null if not supported
    *  oldIE : IE8 or below
    * }
    * 
    */
			detectFeatures: function () {
				if (framework.features) {
					return framework.features;
				}
				var helperEl = framework.createEl(),
				    helperStyle = helperEl.style,
				    vendor = '',
				    features = {};

				// IE8 and below
				features.oldIE = document.all && !document.addEventListener;

				features.touch = 'ontouchstart' in window;

				if (window.requestAnimationFrame) {
					features.raf = window.requestAnimationFrame;
					features.caf = window.cancelAnimationFrame;
				}

				features.pointerEvent = navigator.pointerEnabled || navigator.msPointerEnabled;

				// fix false-positive detection of old Android in new IE
				// (IE11 ua string contains "Android 4.0")

				if (!features.pointerEvent) {

					var ua = navigator.userAgent;

					// Detect if device is iPhone or iPod and if it's older than iOS 8
					// http://stackoverflow.com/a/14223920
					// 
					// This detection is made because of buggy top/bottom toolbars
					// that don't trigger window.resize event.
					// For more info refer to _isFixedPosition variable in core.js

					if (/iP(hone|od)/.test(navigator.platform)) {
						var v = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
						if (v && v.length > 0) {
							v = parseInt(v[1], 10);
							if (v >= 1 && v < 8) {
								features.isOldIOSPhone = true;
							}
						}
					}

					// Detect old Android (before KitKat)
					// due to bugs related to position:fixed
					// http://stackoverflow.com/questions/7184573/pick-up-the-android-version-in-the-browser-by-javascript

					var match = ua.match(/Android\s([0-9\.]*)/);
					var androidversion = match ? match[1] : 0;
					androidversion = parseFloat(androidversion);
					if (androidversion >= 1) {
						if (androidversion < 4.4) {
							features.isOldAndroid = true; // for fixed position bug & performance
						}
						features.androidVersion = androidversion; // for touchend bug
					}
					features.isMobileOpera = /opera mini|opera mobi/i.test(ua);

					// p.s. yes, yes, UA sniffing is bad, propose your solution for above bugs.
				}

				var styleChecks = ['transform', 'perspective', 'animationName'],
				    vendors = ['', 'webkit', 'Moz', 'ms', 'O'],
				    styleCheckItem,
				    styleName;

				for (var i = 0; i < 4; i++) {
					vendor = vendors[i];

					for (var a = 0; a < 3; a++) {
						styleCheckItem = styleChecks[a];

						// uppercase first letter of property name, if vendor is present
						styleName = vendor + (vendor ? styleCheckItem.charAt(0).toUpperCase() + styleCheckItem.slice(1) : styleCheckItem);

						if (!features[styleCheckItem] && styleName in helperStyle) {
							features[styleCheckItem] = styleName;
						}
					}

					if (vendor && !features.raf) {
						vendor = vendor.toLowerCase();
						features.raf = window[vendor + 'RequestAnimationFrame'];
						if (features.raf) {
							features.caf = window[vendor + 'CancelAnimationFrame'] || window[vendor + 'CancelRequestAnimationFrame'];
						}
					}
				}

				if (!features.raf) {
					var lastTime = 0;
					features.raf = function (fn) {
						var currTime = new Date().getTime();
						var timeToCall = Math.max(0, 16 - (currTime - lastTime));
						var id = window.setTimeout(function () {
							fn(currTime + timeToCall);
						}, timeToCall);
						lastTime = currTime + timeToCall;
						return id;
					};
					features.caf = function (id) {
						clearTimeout(id);
					};
				}

				// Detect SVG support
				features.svg = !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;

				framework.features = features;

				return features;
			}
		};

		framework.detectFeatures();

		// Override addEventListener for old versions of IE
		if (framework.features.oldIE) {

			framework.bind = function (target, type, listener, unbind) {

				type = type.split(' ');

				var methodName = (unbind ? 'detach' : 'attach') + 'Event',
				    evName,
				    _handleEv = function () {
					listener.handleEvent.call(listener);
				};

				for (var i = 0; i < type.length; i++) {
					evName = type[i];
					if (evName) {

						if (typeof listener === 'object' && listener.handleEvent) {
							if (!unbind) {
								listener['oldIE' + evName] = _handleEv;
							} else {
								if (!listener['oldIE' + evName]) {
									return false;
								}
							}

							target[methodName]('on' + evName, listener['oldIE' + evName]);
						} else {
							target[methodName]('on' + evName, listener);
						}
					}
				}
			};
		}

		/*>>framework-bridge*/

		/*>>core*/
		//function(template, UiClass, items, options)

		var self = this;

		/**
   * Static vars, don't change unless you know what you're doing.
   */
		var DOUBLE_TAP_RADIUS = 25,
		    NUM_HOLDERS = 3;

		/**
   * Options
   */
		var _options = {
			allowPanToNext: true,
			spacing: 0.12,
			bgOpacity: 1,
			mouseUsed: false,
			loop: true,
			pinchToClose: true,
			closeOnScroll: true,
			closeOnVerticalDrag: true,
			verticalDragRange: 0.75,
			hideAnimationDuration: 333,
			showAnimationDuration: 333,
			showHideOpacity: false,
			focus: true,
			escKey: true,
			arrowKeys: true,
			mainScrollEndFriction: 0.35,
			panEndFriction: 0.35,
			isClickableElement: function (el) {
				return el.tagName === 'A';
			},
			getDoubleTapZoom: function (isMouseClick, item) {
				if (isMouseClick) {
					return 1;
				} else {
					return item.initialZoomLevel < 0.7 ? 1 : 1.33;
				}
			},
			maxSpreadZoom: 1.33,
			modal: true,

			// not fully implemented yet
			scaleMode: 'fit' // TODO
		};
		framework.extend(_options, options);

		/**
   * Private helper variables & functions
   */

		var _getEmptyPoint = function () {
			return { x: 0, y: 0 };
		};

		var _isOpen,
		    _isDestroying,
		    _closedByScroll,
		    _currentItemIndex,
		    _containerStyle,
		    _containerShiftIndex,
		    _currPanDist = _getEmptyPoint(),
		    _startPanOffset = _getEmptyPoint(),
		    _panOffset = _getEmptyPoint(),
		    _upMoveEvents,
		    // drag move, drag end & drag cancel events array
		_downEvents,
		    // drag start events array
		_globalEventHandlers,
		    _viewportSize = {},
		    _currZoomLevel,
		    _startZoomLevel,
		    _translatePrefix,
		    _translateSufix,
		    _updateSizeInterval,
		    _itemsNeedUpdate,
		    _currPositionIndex = 0,
		    _offset = {},
		    _slideSize = _getEmptyPoint(),
		    // size of slide area, including spacing
		_itemHolders,
		    _prevItemIndex,
		    _indexDiff = 0,
		    // difference of indexes since last content update
		_dragStartEvent,
		    _dragMoveEvent,
		    _dragEndEvent,
		    _dragCancelEvent,
		    _transformKey,
		    _pointerEventEnabled,
		    _isFixedPosition = true,
		    _likelyTouchDevice,
		    _modules = [],
		    _requestAF,
		    _cancelAF,
		    _initalClassName,
		    _initalWindowScrollY,
		    _oldIE,
		    _currentWindowScrollY,
		    _features,
		    _windowVisibleSize = {},
		    _renderMaxResolution = false,


		// Registers PhotoSWipe module (History, Controller ...)
		_registerModule = function (name, module) {
			framework.extend(self, module.publicMethods);
			_modules.push(name);
		},
		    _getLoopedId = function (index) {
			var numSlides = _getNumItems();
			if (index > numSlides - 1) {
				return index - numSlides;
			} else if (index < 0) {
				return numSlides + index;
			}
			return index;
		},


		// Micro bind/trigger
		_listeners = {},
		    _listen = function (name, fn) {
			if (!_listeners[name]) {
				_listeners[name] = [];
			}
			return _listeners[name].push(fn);
		},
		    _shout = function (name) {
			var listeners = _listeners[name];

			if (listeners) {
				var args = Array.prototype.slice.call(arguments);
				args.shift();

				for (var i = 0; i < listeners.length; i++) {
					listeners[i].apply(self, args);
				}
			}
		},
		    _getCurrentTime = function () {
			return new Date().getTime();
		},
		    _applyBgOpacity = function (opacity) {
			_bgOpacity = opacity;
			self.bg.style.opacity = opacity * _options.bgOpacity;
		},
		    _applyZoomTransform = function (styleObj, x, y, zoom, item) {
			if (!_renderMaxResolution || item && item !== self.currItem) {
				zoom = zoom / (item ? item.fitRatio : self.currItem.fitRatio);
			}

			styleObj[_transformKey] = _translatePrefix + x + 'px, ' + y + 'px' + _translateSufix + ' scale(' + zoom + ')';
		},
		    _applyCurrentZoomPan = function (allowRenderResolution) {
			if (_currZoomElementStyle) {

				if (allowRenderResolution) {
					if (_currZoomLevel > self.currItem.fitRatio) {
						if (!_renderMaxResolution) {
							_setImageSize(self.currItem, false, true);
							_renderMaxResolution = true;
						}
					} else {
						if (_renderMaxResolution) {
							_setImageSize(self.currItem);
							_renderMaxResolution = false;
						}
					}
				}

				_applyZoomTransform(_currZoomElementStyle, _panOffset.x, _panOffset.y, _currZoomLevel);
			}
		},
		    _applyZoomPanToItem = function (item) {
			if (item.container) {

				_applyZoomTransform(item.container.style, item.initialPosition.x, item.initialPosition.y, item.initialZoomLevel, item);
			}
		},
		    _setTranslateX = function (x, elStyle) {
			elStyle[_transformKey] = _translatePrefix + x + 'px, 0px' + _translateSufix;
		},
		    _moveMainScroll = function (x, dragging) {

			if (!_options.loop && dragging) {
				var newSlideIndexOffset = _currentItemIndex + (_slideSize.x * _currPositionIndex - x) / _slideSize.x,
				    delta = Math.round(x - _mainScrollPos.x);

				if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= _getNumItems() - 1 && delta < 0) {
					x = _mainScrollPos.x + delta * _options.mainScrollEndFriction;
				}
			}

			_mainScrollPos.x = x;
			_setTranslateX(x, _containerStyle);
		},
		    _calculatePanOffset = function (axis, zoomLevel) {
			var m = _midZoomPoint[axis] - _offset[axis];
			return _startPanOffset[axis] + _currPanDist[axis] + m - m * (zoomLevel / _startZoomLevel);
		},
		    _equalizePoints = function (p1, p2) {
			p1.x = p2.x;
			p1.y = p2.y;
			if (p2.id) {
				p1.id = p2.id;
			}
		},
		    _roundPoint = function (p) {
			p.x = Math.round(p.x);
			p.y = Math.round(p.y);
		},
		    _mouseMoveTimeout = null,
		    _onFirstMouseMove = function () {
			// Wait until mouse move event is fired at least twice during 100ms
			// We do this, because some mobile browsers trigger it on touchstart
			if (_mouseMoveTimeout) {
				framework.unbind(document, 'mousemove', _onFirstMouseMove);
				framework.addClass(template, 'pswp--has_mouse');
				_options.mouseUsed = true;
				_shout('mouseUsed');
			}
			_mouseMoveTimeout = setTimeout(function () {
				_mouseMoveTimeout = null;
			}, 100);
		},
		    _bindEvents = function () {
			framework.bind(document, 'keydown', self);

			if (_features.transform) {
				// don't bind click event in browsers that don't support transform (mostly IE8)
				framework.bind(self.scrollWrap, 'click', self);
			}

			if (!_options.mouseUsed) {
				framework.bind(document, 'mousemove', _onFirstMouseMove);
			}

			framework.bind(window, 'resize scroll', self);

			_shout('bindEvents');
		},
		    _unbindEvents = function () {
			framework.unbind(window, 'resize', self);
			framework.unbind(window, 'scroll', _globalEventHandlers.scroll);
			framework.unbind(document, 'keydown', self);
			framework.unbind(document, 'mousemove', _onFirstMouseMove);

			if (_features.transform) {
				framework.unbind(self.scrollWrap, 'click', self);
			}

			if (_isDragging) {
				framework.unbind(window, _upMoveEvents, self);
			}

			_shout('unbindEvents');
		},
		    _calculatePanBounds = function (zoomLevel, update) {
			var bounds = _calculateItemSize(self.currItem, _viewportSize, zoomLevel);
			if (update) {
				_currPanBounds = bounds;
			}
			return bounds;
		},
		    _getMinZoomLevel = function (item) {
			if (!item) {
				item = self.currItem;
			}
			return item.initialZoomLevel;
		},
		    _getMaxZoomLevel = function (item) {
			if (!item) {
				item = self.currItem;
			}
			return item.w > 0 ? _options.maxSpreadZoom : 1;
		},


		// Return true if offset is out of the bounds
		_modifyDestPanOffset = function (axis, destPanBounds, destPanOffset, destZoomLevel) {
			if (destZoomLevel === self.currItem.initialZoomLevel) {
				destPanOffset[axis] = self.currItem.initialPosition[axis];
				return true;
			} else {
				destPanOffset[axis] = _calculatePanOffset(axis, destZoomLevel);

				if (destPanOffset[axis] > destPanBounds.min[axis]) {
					destPanOffset[axis] = destPanBounds.min[axis];
					return true;
				} else if (destPanOffset[axis] < destPanBounds.max[axis]) {
					destPanOffset[axis] = destPanBounds.max[axis];
					return true;
				}
			}
			return false;
		},
		    _setupTransforms = function () {

			if (_transformKey) {
				// setup 3d transforms
				var allow3dTransform = _features.perspective && !_likelyTouchDevice;
				_translatePrefix = 'translate' + (allow3dTransform ? '3d(' : '(');
				_translateSufix = _features.perspective ? ', 0px)' : ')';
				return;
			}

			// Override zoom/pan/move functions in case old browser is used (most likely IE)
			// (so they use left/top/width/height, instead of CSS transform)

			_transformKey = 'left';
			framework.addClass(template, 'pswp--ie');

			_setTranslateX = function (x, elStyle) {
				elStyle.left = x + 'px';
			};
			_applyZoomPanToItem = function (item) {

				var zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio,
				    s = item.container.style,
				    w = zoomRatio * item.w,
				    h = zoomRatio * item.h;

				s.width = w + 'px';
				s.height = h + 'px';
				s.left = item.initialPosition.x + 'px';
				s.top = item.initialPosition.y + 'px';
			};
			_applyCurrentZoomPan = function () {
				if (_currZoomElementStyle) {

					var s = _currZoomElementStyle,
					    item = self.currItem,
					    zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio,
					    w = zoomRatio * item.w,
					    h = zoomRatio * item.h;

					s.width = w + 'px';
					s.height = h + 'px';

					s.left = _panOffset.x + 'px';
					s.top = _panOffset.y + 'px';
				}
			};
		},
		    _onKeyDown = function (e) {
			var keydownAction = '';
			if (_options.escKey && e.keyCode === 27) {
				keydownAction = 'close';
			} else if (_options.arrowKeys) {
				if (e.keyCode === 37) {
					keydownAction = 'prev';
				} else if (e.keyCode === 39) {
					keydownAction = 'next';
				}
			}

			if (keydownAction) {
				// don't do anything if special key pressed to prevent from overriding default browser actions
				// e.g. in Chrome on Mac cmd+arrow-left returns to previous page
				if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey) {
					if (e.preventDefault) {
						e.preventDefault();
					} else {
						e.returnValue = false;
					}
					self[keydownAction]();
				}
			}
		},
		    _onGlobalClick = function (e) {
			if (!e) {
				return;
			}

			// don't allow click event to pass through when triggering after drag or some other gesture
			if (_moved || _zoomStarted || _mainScrollAnimating || _verticalDragInitiated) {
				e.preventDefault();
				e.stopPropagation();
			}
		},
		    _updatePageScrollOffset = function () {
			self.setScrollOffset(0, framework.getScrollY());
		};

		// Micro animation engine
		var _animations = {},
		    _numAnimations = 0,
		    _stopAnimation = function (name) {
			if (_animations[name]) {
				if (_animations[name].raf) {
					_cancelAF(_animations[name].raf);
				}
				_numAnimations--;
				delete _animations[name];
			}
		},
		    _registerStartAnimation = function (name) {
			if (_animations[name]) {
				_stopAnimation(name);
			}
			if (!_animations[name]) {
				_numAnimations++;
				_animations[name] = {};
			}
		},
		    _stopAllAnimations = function () {
			for (var prop in _animations) {

				if (_animations.hasOwnProperty(prop)) {
					_stopAnimation(prop);
				}
			}
		},
		    _animateProp = function (name, b, endProp, d, easingFn, onUpdate, onComplete) {
			var startAnimTime = _getCurrentTime(),
			    t;
			_registerStartAnimation(name);

			var animloop = function () {
				if (_animations[name]) {

					t = _getCurrentTime() - startAnimTime; // time diff
					//b - beginning (start prop)
					//d - anim duration

					if (t >= d) {
						_stopAnimation(name);
						onUpdate(endProp);
						if (onComplete) {
							onComplete();
						}
						return;
					}
					onUpdate((endProp - b) * easingFn(t / d) + b);

					_animations[name].raf = _requestAF(animloop);
				}
			};
			animloop();
		};

		var publicMethods = {

			// make a few local variables and functions public
			shout: _shout,
			listen: _listen,
			viewportSize: _viewportSize,
			options: _options,

			isMainScrollAnimating: function () {
				return _mainScrollAnimating;
			},
			getZoomLevel: function () {
				return _currZoomLevel;
			},
			getCurrentIndex: function () {
				return _currentItemIndex;
			},
			isDragging: function () {
				return _isDragging;
			},
			isZooming: function () {
				return _isZooming;
			},
			setScrollOffset: function (x, y) {
				_offset.x = x;
				_currentWindowScrollY = _offset.y = y;
				_shout('updateScrollOffset', _offset);
			},
			applyZoomPan: function (zoomLevel, panX, panY, allowRenderResolution) {
				_panOffset.x = panX;
				_panOffset.y = panY;
				_currZoomLevel = zoomLevel;
				_applyCurrentZoomPan(allowRenderResolution);
			},

			init: function () {

				if (_isOpen || _isDestroying) {
					return;
				}

				var i;

				self.framework = framework; // basic functionality
				self.template = template; // root DOM element of PhotoSwipe
				self.bg = framework.getChildByClass(template, 'pswp__bg');

				_initalClassName = template.className;
				_isOpen = true;

				_features = framework.detectFeatures();
				_requestAF = _features.raf;
				_cancelAF = _features.caf;
				_transformKey = _features.transform;
				_oldIE = _features.oldIE;

				self.scrollWrap = framework.getChildByClass(template, 'pswp__scroll-wrap');
				self.container = framework.getChildByClass(self.scrollWrap, 'pswp__container');

				_containerStyle = self.container.style; // for fast access

				// Objects that hold slides (there are only 3 in DOM)
				self.itemHolders = _itemHolders = [{ el: self.container.children[0], wrap: 0, index: -1 }, { el: self.container.children[1], wrap: 0, index: -1 }, { el: self.container.children[2], wrap: 0, index: -1 }];

				// hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)
				_itemHolders[0].el.style.display = _itemHolders[2].el.style.display = 'none';

				_setupTransforms();

				// Setup global events
				_globalEventHandlers = {
					resize: self.updateSize,
					scroll: _updatePageScrollOffset,
					keydown: _onKeyDown,
					click: _onGlobalClick
				};

				// disable show/hide effects on old browsers that don't support CSS animations or transforms, 
				// old IOS, Android and Opera mobile. Blackberry seems to work fine, even older models.
				var oldPhone = _features.isOldIOSPhone || _features.isOldAndroid || _features.isMobileOpera;
				if (!_features.animationName || !_features.transform || oldPhone) {
					_options.showAnimationDuration = _options.hideAnimationDuration = 0;
				}

				// init modules
				for (i = 0; i < _modules.length; i++) {
					self['init' + _modules[i]]();
				}

				// init
				if (UiClass) {
					var ui = self.ui = new UiClass(self, framework);
					ui.init();
				}

				_shout('firstUpdate');
				_currentItemIndex = _currentItemIndex || _options.index || 0;
				// validate index
				if (isNaN(_currentItemIndex) || _currentItemIndex < 0 || _currentItemIndex >= _getNumItems()) {
					_currentItemIndex = 0;
				}
				self.currItem = _getItemAt(_currentItemIndex);

				if (_features.isOldIOSPhone || _features.isOldAndroid) {
					_isFixedPosition = false;
				}

				template.setAttribute('aria-hidden', 'false');
				if (_options.modal) {
					if (!_isFixedPosition) {
						template.style.position = 'absolute';
						template.style.top = framework.getScrollY() + 'px';
					} else {
						template.style.position = 'fixed';
					}
				}

				if (_currentWindowScrollY === undefined) {
					_shout('initialLayout');
					_currentWindowScrollY = _initalWindowScrollY = framework.getScrollY();
				}

				// add classes to root element of PhotoSwipe
				var rootClasses = 'pswp--open ';
				if (_options.mainClass) {
					rootClasses += _options.mainClass + ' ';
				}
				if (_options.showHideOpacity) {
					rootClasses += 'pswp--animate_opacity ';
				}
				rootClasses += _likelyTouchDevice ? 'pswp--touch' : 'pswp--notouch';
				rootClasses += _features.animationName ? ' pswp--css_animation' : '';
				rootClasses += _features.svg ? ' pswp--svg' : '';
				framework.addClass(template, rootClasses);

				self.updateSize();

				// initial update
				_containerShiftIndex = -1;
				_indexDiff = null;
				for (i = 0; i < NUM_HOLDERS; i++) {
					_setTranslateX((i + _containerShiftIndex) * _slideSize.x, _itemHolders[i].el.style);
				}

				if (!_oldIE) {
					framework.bind(self.scrollWrap, _downEvents, self); // no dragging for old IE
				}

				_listen('initialZoomInEnd', function () {
					self.setContent(_itemHolders[0], _currentItemIndex - 1);
					self.setContent(_itemHolders[2], _currentItemIndex + 1);

					_itemHolders[0].el.style.display = _itemHolders[2].el.style.display = 'block';

					if (_options.focus) {
						// focus causes layout, 
						// which causes lag during the animation, 
						// that's why we delay it untill the initial zoom transition ends
						template.focus();
					}

					_bindEvents();
				});

				// set content for center slide (first time)
				self.setContent(_itemHolders[1], _currentItemIndex);

				self.updateCurrItem();

				_shout('afterInit');

				if (!_isFixedPosition) {

					// On all versions of iOS lower than 8.0, we check size of viewport every second.
					// 
					// This is done to detect when Safari top & bottom bars appear, 
					// as this action doesn't trigger any events (like resize). 
					// 
					// On iOS8 they fixed this.
					// 
					// 10 Nov 2014: iOS 7 usage ~40%. iOS 8 usage 56%.

					_updateSizeInterval = setInterval(function () {
						if (!_numAnimations && !_isDragging && !_isZooming && _currZoomLevel === self.currItem.initialZoomLevel) {
							self.updateSize();
						}
					}, 1000);
				}

				framework.addClass(template, 'pswp--visible');
			},

			// Close the gallery, then destroy it
			close: function () {
				if (!_isOpen) {
					return;
				}

				_isOpen = false;
				_isDestroying = true;
				_shout('close');
				_unbindEvents();

				_showOrHide(self.currItem, null, true, self.destroy);
			},

			// destroys the gallery (unbinds events, cleans up intervals and timeouts to avoid memory leaks)
			destroy: function () {
				_shout('destroy');

				if (_showOrHideTimeout) {
					clearTimeout(_showOrHideTimeout);
				}

				template.setAttribute('aria-hidden', 'true');
				template.className = _initalClassName;

				if (_updateSizeInterval) {
					clearInterval(_updateSizeInterval);
				}

				framework.unbind(self.scrollWrap, _downEvents, self);

				// we unbind scroll event at the end, as closing animation may depend on it
				framework.unbind(window, 'scroll', self);

				_stopDragUpdateLoop();

				_stopAllAnimations();

				_listeners = null;
			},

			/**
    * Pan image to position
    * @param {Number} x     
    * @param {Number} y     
    * @param {Boolean} force Will ignore bounds if set to true.
    */
			panTo: function (x, y, force) {
				if (!force) {
					if (x > _currPanBounds.min.x) {
						x = _currPanBounds.min.x;
					} else if (x < _currPanBounds.max.x) {
						x = _currPanBounds.max.x;
					}

					if (y > _currPanBounds.min.y) {
						y = _currPanBounds.min.y;
					} else if (y < _currPanBounds.max.y) {
						y = _currPanBounds.max.y;
					}
				}

				_panOffset.x = x;
				_panOffset.y = y;
				_applyCurrentZoomPan();
			},

			handleEvent: function (e) {
				e = e || window.event;
				if (_globalEventHandlers[e.type]) {
					_globalEventHandlers[e.type](e);
				}
			},

			goTo: function (index) {

				index = _getLoopedId(index);

				var diff = index - _currentItemIndex;
				_indexDiff = diff;

				_currentItemIndex = index;
				self.currItem = _getItemAt(_currentItemIndex);
				_currPositionIndex -= diff;

				_moveMainScroll(_slideSize.x * _currPositionIndex);

				_stopAllAnimations();
				_mainScrollAnimating = false;

				self.updateCurrItem();
			},
			next: function () {
				self.goTo(_currentItemIndex + 1);
			},
			prev: function () {
				self.goTo(_currentItemIndex - 1);
			},

			// update current zoom/pan objects
			updateCurrZoomItem: function (emulateSetContent) {
				if (emulateSetContent) {
					_shout('beforeChange', 0);
				}

				// itemHolder[1] is middle (current) item
				if (_itemHolders[1].el.children.length) {
					var zoomElement = _itemHolders[1].el.children[0];
					if (framework.hasClass(zoomElement, 'pswp__zoom-wrap')) {
						_currZoomElementStyle = zoomElement.style;
					} else {
						_currZoomElementStyle = null;
					}
				} else {
					_currZoomElementStyle = null;
				}

				_currPanBounds = self.currItem.bounds;
				_startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;

				_panOffset.x = _currPanBounds.center.x;
				_panOffset.y = _currPanBounds.center.y;

				if (emulateSetContent) {
					_shout('afterChange');
				}
			},

			invalidateCurrItems: function () {
				_itemsNeedUpdate = true;
				for (var i = 0; i < NUM_HOLDERS; i++) {
					if (_itemHolders[i].item) {
						_itemHolders[i].item.needsUpdate = true;
					}
				}
			},

			updateCurrItem: function (beforeAnimation) {

				if (_indexDiff === 0) {
					return;
				}

				var diffAbs = Math.abs(_indexDiff),
				    tempHolder;

				if (beforeAnimation && diffAbs < 2) {
					return;
				}

				self.currItem = _getItemAt(_currentItemIndex);
				_renderMaxResolution = false;

				_shout('beforeChange', _indexDiff);

				if (diffAbs >= NUM_HOLDERS) {
					_containerShiftIndex += _indexDiff + (_indexDiff > 0 ? -NUM_HOLDERS : NUM_HOLDERS);
					diffAbs = NUM_HOLDERS;
				}
				for (var i = 0; i < diffAbs; i++) {
					if (_indexDiff > 0) {
						tempHolder = _itemHolders.shift();
						_itemHolders[NUM_HOLDERS - 1] = tempHolder; // move first to last

						_containerShiftIndex++;
						_setTranslateX((_containerShiftIndex + 2) * _slideSize.x, tempHolder.el.style);
						self.setContent(tempHolder, _currentItemIndex - diffAbs + i + 1 + 1);
					} else {
						tempHolder = _itemHolders.pop();
						_itemHolders.unshift(tempHolder); // move last to first

						_containerShiftIndex--;
						_setTranslateX(_containerShiftIndex * _slideSize.x, tempHolder.el.style);
						self.setContent(tempHolder, _currentItemIndex + diffAbs - i - 1 - 1);
					}
				}

				// reset zoom/pan on previous item
				if (_currZoomElementStyle && Math.abs(_indexDiff) === 1) {

					var prevItem = _getItemAt(_prevItemIndex);
					if (prevItem.initialZoomLevel !== _currZoomLevel) {
						_calculateItemSize(prevItem, _viewportSize);
						_setImageSize(prevItem);
						_applyZoomPanToItem(prevItem);
					}
				}

				// reset diff after update
				_indexDiff = 0;

				self.updateCurrZoomItem();

				_prevItemIndex = _currentItemIndex;

				_shout('afterChange');
			},

			updateSize: function (force) {

				if (!_isFixedPosition && _options.modal) {
					var windowScrollY = framework.getScrollY();
					if (_currentWindowScrollY !== windowScrollY) {
						template.style.top = windowScrollY + 'px';
						_currentWindowScrollY = windowScrollY;
					}
					if (!force && _windowVisibleSize.x === window.innerWidth && _windowVisibleSize.y === window.innerHeight) {
						return;
					}
					_windowVisibleSize.x = window.innerWidth;
					_windowVisibleSize.y = window.innerHeight;

					//template.style.width = _windowVisibleSize.x + 'px';
					template.style.height = _windowVisibleSize.y + 'px';
				}

				_viewportSize.x = self.scrollWrap.clientWidth;
				_viewportSize.y = self.scrollWrap.clientHeight;

				_updatePageScrollOffset();

				_slideSize.x = _viewportSize.x + Math.round(_viewportSize.x * _options.spacing);
				_slideSize.y = _viewportSize.y;

				_moveMainScroll(_slideSize.x * _currPositionIndex);

				_shout('beforeResize'); // even may be used for example to switch image sources


				// don't re-calculate size on inital size update
				if (_containerShiftIndex !== undefined) {

					var holder, item, hIndex;

					for (var i = 0; i < NUM_HOLDERS; i++) {
						holder = _itemHolders[i];
						_setTranslateX((i + _containerShiftIndex) * _slideSize.x, holder.el.style);

						hIndex = _currentItemIndex + i - 1;

						if (_options.loop && _getNumItems() > 2) {
							hIndex = _getLoopedId(hIndex);
						}

						// update zoom level on items and refresh source (if needsUpdate)
						item = _getItemAt(hIndex);

						// re-render gallery item if `needsUpdate`,
						// or doesn't have `bounds` (entirely new slide object)
						if (item && (_itemsNeedUpdate || item.needsUpdate || !item.bounds)) {

							self.cleanSlide(item);

							self.setContent(holder, hIndex);

							// if "center" slide
							if (i === 1) {
								self.currItem = item;
								self.updateCurrZoomItem(true);
							}

							item.needsUpdate = false;
						} else if (holder.index === -1 && hIndex >= 0) {
							// add content first time
							self.setContent(holder, hIndex);
						}
						if (item && item.container) {
							_calculateItemSize(item, _viewportSize);
							_setImageSize(item);
							_applyZoomPanToItem(item);
						}
					}
					_itemsNeedUpdate = false;
				}

				_startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;
				_currPanBounds = self.currItem.bounds;

				if (_currPanBounds) {
					_panOffset.x = _currPanBounds.center.x;
					_panOffset.y = _currPanBounds.center.y;
					_applyCurrentZoomPan(true);
				}

				_shout('resize');
			},

			// Zoom current item to
			zoomTo: function (destZoomLevel, centerPoint, speed, easingFn, updateFn) {
				/*
    	if(destZoomLevel === 'fit') {
    		destZoomLevel = self.currItem.fitRatio;
    	} else if(destZoomLevel === 'fill') {
    		destZoomLevel = self.currItem.fillRatio;
    	}
    */

				if (centerPoint) {
					_startZoomLevel = _currZoomLevel;
					_midZoomPoint.x = Math.abs(centerPoint.x) - _panOffset.x;
					_midZoomPoint.y = Math.abs(centerPoint.y) - _panOffset.y;
					_equalizePoints(_startPanOffset, _panOffset);
				}

				var destPanBounds = _calculatePanBounds(destZoomLevel, false),
				    destPanOffset = {};

				_modifyDestPanOffset('x', destPanBounds, destPanOffset, destZoomLevel);
				_modifyDestPanOffset('y', destPanBounds, destPanOffset, destZoomLevel);

				var initialZoomLevel = _currZoomLevel;
				var initialPanOffset = {
					x: _panOffset.x,
					y: _panOffset.y
				};

				_roundPoint(destPanOffset);

				var onUpdate = function (now) {
					if (now === 1) {
						_currZoomLevel = destZoomLevel;
						_panOffset.x = destPanOffset.x;
						_panOffset.y = destPanOffset.y;
					} else {
						_currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;
						_panOffset.x = (destPanOffset.x - initialPanOffset.x) * now + initialPanOffset.x;
						_panOffset.y = (destPanOffset.y - initialPanOffset.y) * now + initialPanOffset.y;
					}

					if (updateFn) {
						updateFn(now);
					}

					_applyCurrentZoomPan(now === 1);
				};

				if (speed) {
					_animateProp('customZoomTo', 0, 1, speed, easingFn || framework.easing.sine.inOut, onUpdate);
				} else {
					onUpdate(1);
				}
			}

		};

		/*>>core*/

		/*>>gestures*/
		/**
   * Mouse/touch/pointer event handlers.
   * 
   * separated from @core.js for readability
   */

		var MIN_SWIPE_DISTANCE = 30,
		    DIRECTION_CHECK_OFFSET = 10; // amount of pixels to drag to determine direction of swipe

		var _gestureStartTime,
		    _gestureCheckSpeedTime,


		// pool of objects that are used during dragging of zooming
		p = {},
		    // first point
		p2 = {},
		    // second point (for zoom gesture)
		delta = {},
		    _currPoint = {},
		    _startPoint = {},
		    _currPointers = [],
		    _startMainScrollPos = {},
		    _releaseAnimData,
		    _posPoints = [],
		    // array of points during dragging, used to determine type of gesture
		_tempPoint = {},
		    _isZoomingIn,
		    _verticalDragInitiated,
		    _oldAndroidTouchEndTimeout,
		    _currZoomedItemIndex = 0,
		    _centerPoint = _getEmptyPoint(),
		    _lastReleaseTime = 0,
		    _isDragging,
		    // at least one pointer is down
		_isMultitouch,
		    // at least two _pointers are down
		_zoomStarted,
		    // zoom level changed during zoom gesture
		_moved,
		    _dragAnimFrame,
		    _mainScrollShifted,
		    _currentPoints,
		    // array of current touch points
		_isZooming,
		    _currPointsDistance,
		    _startPointsDistance,
		    _currPanBounds,
		    _mainScrollPos = _getEmptyPoint(),
		    _currZoomElementStyle,
		    _mainScrollAnimating,
		    // true, if animation after swipe gesture is running
		_midZoomPoint = _getEmptyPoint(),
		    _currCenterPoint = _getEmptyPoint(),
		    _direction,
		    _isFirstMove,
		    _opacityChanged,
		    _bgOpacity,
		    _wasOverInitialZoom,
		    _isEqualPoints = function (p1, p2) {
			return p1.x === p2.x && p1.y === p2.y;
		},
		    _isNearbyPoints = function (touch0, touch1) {
			return Math.abs(touch0.x - touch1.x) < DOUBLE_TAP_RADIUS && Math.abs(touch0.y - touch1.y) < DOUBLE_TAP_RADIUS;
		},
		    _calculatePointsDistance = function (p1, p2) {
			_tempPoint.x = Math.abs(p1.x - p2.x);
			_tempPoint.y = Math.abs(p1.y - p2.y);
			return Math.sqrt(_tempPoint.x * _tempPoint.x + _tempPoint.y * _tempPoint.y);
		},
		    _stopDragUpdateLoop = function () {
			if (_dragAnimFrame) {
				_cancelAF(_dragAnimFrame);
				_dragAnimFrame = null;
			}
		},
		    _dragUpdateLoop = function () {
			if (_isDragging) {
				_dragAnimFrame = _requestAF(_dragUpdateLoop);
				_renderMovement();
			}
		},
		    _canPan = function () {
			return !(_options.scaleMode === 'fit' && _currZoomLevel === self.currItem.initialZoomLevel);
		},


		// find the closest parent DOM element
		_closestElement = function (el, fn) {
			if (!el || el === document) {
				return false;
			}

			// don't search elements above pswp__scroll-wrap
			if (el.getAttribute('class') && el.getAttribute('class').indexOf('pswp__scroll-wrap') > -1) {
				return false;
			}

			if (fn(el)) {
				return el;
			}

			return _closestElement(el.parentNode, fn);
		},
		    _preventObj = {},
		    _preventDefaultEventBehaviour = function (e, isDown) {
			_preventObj.prevent = !_closestElement(e.target, _options.isClickableElement);

			_shout('preventDragEvent', e, isDown, _preventObj);
			return _preventObj.prevent;
		},
		    _convertTouchToPoint = function (touch, p) {
			p.x = touch.pageX;
			p.y = touch.pageY;
			p.id = touch.identifier;
			return p;
		},
		    _findCenterOfPoints = function (p1, p2, pCenter) {
			pCenter.x = (p1.x + p2.x) * 0.5;
			pCenter.y = (p1.y + p2.y) * 0.5;
		},
		    _pushPosPoint = function (time, x, y) {
			if (time - _gestureCheckSpeedTime > 50) {
				var o = _posPoints.length > 2 ? _posPoints.shift() : {};
				o.x = x;
				o.y = y;
				_posPoints.push(o);
				_gestureCheckSpeedTime = time;
			}
		},
		    _calculateVerticalDragOpacityRatio = function () {
			var yOffset = _panOffset.y - self.currItem.initialPosition.y; // difference between initial and current position
			return 1 - Math.abs(yOffset / (_viewportSize.y / 2));
		},


		// points pool, reused during touch events
		_ePoint1 = {},
		    _ePoint2 = {},
		    _tempPointsArr = [],
		    _tempCounter,
		    _getTouchPoints = function (e) {
			// clean up previous points, without recreating array
			while (_tempPointsArr.length > 0) {
				_tempPointsArr.pop();
			}

			if (!_pointerEventEnabled) {
				if (e.type.indexOf('touch') > -1) {

					if (e.touches && e.touches.length > 0) {
						_tempPointsArr[0] = _convertTouchToPoint(e.touches[0], _ePoint1);
						if (e.touches.length > 1) {
							_tempPointsArr[1] = _convertTouchToPoint(e.touches[1], _ePoint2);
						}
					}
				} else {
					_ePoint1.x = e.pageX;
					_ePoint1.y = e.pageY;
					_ePoint1.id = '';
					_tempPointsArr[0] = _ePoint1; //_ePoint1;
				}
			} else {
				_tempCounter = 0;
				// we can use forEach, as pointer events are supported only in modern browsers
				_currPointers.forEach(function (p) {
					if (_tempCounter === 0) {
						_tempPointsArr[0] = p;
					} else if (_tempCounter === 1) {
						_tempPointsArr[1] = p;
					}
					_tempCounter++;
				});
			}
			return _tempPointsArr;
		},
		    _panOrMoveMainScroll = function (axis, delta) {

			var panFriction,
			    overDiff = 0,
			    newOffset = _panOffset[axis] + delta[axis],
			    startOverDiff,
			    dir = delta[axis] > 0,
			    newMainScrollPosition = _mainScrollPos.x + delta.x,
			    mainScrollDiff = _mainScrollPos.x - _startMainScrollPos.x,
			    newPanPos,
			    newMainScrollPos;

			// calculate fdistance over the bounds and friction
			if (newOffset > _currPanBounds.min[axis] || newOffset < _currPanBounds.max[axis]) {
				panFriction = _options.panEndFriction;
				// Linear increasing of friction, so at 1/4 of viewport it's at max value. 
				// Looks not as nice as was expected. Left for history.
				// panFriction = (1 - (_panOffset[axis] + delta[axis] + panBounds.min[axis]) / (_viewportSize[axis] / 4) );
			} else {
				panFriction = 1;
			}

			newOffset = _panOffset[axis] + delta[axis] * panFriction;

			// move main scroll or start panning
			if (_options.allowPanToNext || _currZoomLevel === self.currItem.initialZoomLevel) {

				if (!_currZoomElementStyle) {

					newMainScrollPos = newMainScrollPosition;
				} else if (_direction === 'h' && axis === 'x' && !_zoomStarted) {

					if (dir) {
						if (newOffset > _currPanBounds.min[axis]) {
							panFriction = _options.panEndFriction;
							overDiff = _currPanBounds.min[axis] - newOffset;
							startOverDiff = _currPanBounds.min[axis] - _startPanOffset[axis];
						}

						// drag right
						if ((startOverDiff <= 0 || mainScrollDiff < 0) && _getNumItems() > 1) {
							newMainScrollPos = newMainScrollPosition;
							if (mainScrollDiff < 0 && newMainScrollPosition > _startMainScrollPos.x) {
								newMainScrollPos = _startMainScrollPos.x;
							}
						} else {
							if (_currPanBounds.min.x !== _currPanBounds.max.x) {
								newPanPos = newOffset;
							}
						}
					} else {

						if (newOffset < _currPanBounds.max[axis]) {
							panFriction = _options.panEndFriction;
							overDiff = newOffset - _currPanBounds.max[axis];
							startOverDiff = _startPanOffset[axis] - _currPanBounds.max[axis];
						}

						if ((startOverDiff <= 0 || mainScrollDiff > 0) && _getNumItems() > 1) {
							newMainScrollPos = newMainScrollPosition;

							if (mainScrollDiff > 0 && newMainScrollPosition < _startMainScrollPos.x) {
								newMainScrollPos = _startMainScrollPos.x;
							}
						} else {
							if (_currPanBounds.min.x !== _currPanBounds.max.x) {
								newPanPos = newOffset;
							}
						}
					}

					//
				}

				if (axis === 'x') {

					if (newMainScrollPos !== undefined) {
						_moveMainScroll(newMainScrollPos, true);
						if (newMainScrollPos === _startMainScrollPos.x) {
							_mainScrollShifted = false;
						} else {
							_mainScrollShifted = true;
						}
					}

					if (_currPanBounds.min.x !== _currPanBounds.max.x) {
						if (newPanPos !== undefined) {
							_panOffset.x = newPanPos;
						} else if (!_mainScrollShifted) {
							_panOffset.x += delta.x * panFriction;
						}
					}

					return newMainScrollPos !== undefined;
				}
			}

			if (!_mainScrollAnimating) {

				if (!_mainScrollShifted) {
					if (_currZoomLevel > self.currItem.fitRatio) {
						_panOffset[axis] += delta[axis] * panFriction;
					}
				}
			}
		},


		// Pointerdown/touchstart/mousedown handler
		_onDragStart = function (e) {

			// Allow dragging only via left mouse button.
			// As this handler is not added in IE8 - we ignore e.which
			// 
			// http://www.quirksmode.org/js/events_properties.html
			// https://developer.mozilla.org/en-US/docs/Web/API/event.button
			if (e.type === 'mousedown' && e.button > 0) {
				return;
			}

			if (_initialZoomRunning) {
				e.preventDefault();
				return;
			}

			if (_oldAndroidTouchEndTimeout && e.type === 'mousedown') {
				return;
			}

			if (_preventDefaultEventBehaviour(e, true)) {
				e.preventDefault();
			}

			_shout('pointerDown');

			if (_pointerEventEnabled) {
				var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');
				if (pointerIndex < 0) {
					pointerIndex = _currPointers.length;
				}
				_currPointers[pointerIndex] = { x: e.pageX, y: e.pageY, id: e.pointerId };
			}

			var startPointsList = _getTouchPoints(e),
			    numPoints = startPointsList.length;

			_currentPoints = null;

			_stopAllAnimations();

			// init drag
			if (!_isDragging || numPoints === 1) {

				_isDragging = _isFirstMove = true;
				framework.bind(window, _upMoveEvents, self);

				_isZoomingIn = _wasOverInitialZoom = _opacityChanged = _verticalDragInitiated = _mainScrollShifted = _moved = _isMultitouch = _zoomStarted = false;

				_direction = null;

				_shout('firstTouchStart', startPointsList);

				_equalizePoints(_startPanOffset, _panOffset);

				_currPanDist.x = _currPanDist.y = 0;
				_equalizePoints(_currPoint, startPointsList[0]);
				_equalizePoints(_startPoint, _currPoint);

				//_equalizePoints(_startMainScrollPos, _mainScrollPos);
				_startMainScrollPos.x = _slideSize.x * _currPositionIndex;

				_posPoints = [{
					x: _currPoint.x,
					y: _currPoint.y
				}];

				_gestureCheckSpeedTime = _gestureStartTime = _getCurrentTime();

				//_mainScrollAnimationEnd(true);
				_calculatePanBounds(_currZoomLevel, true);

				// Start rendering
				_stopDragUpdateLoop();
				_dragUpdateLoop();
			}

			// init zoom
			if (!_isZooming && numPoints > 1 && !_mainScrollAnimating && !_mainScrollShifted) {
				_startZoomLevel = _currZoomLevel;
				_zoomStarted = false; // true if zoom changed at least once

				_isZooming = _isMultitouch = true;
				_currPanDist.y = _currPanDist.x = 0;

				_equalizePoints(_startPanOffset, _panOffset);

				_equalizePoints(p, startPointsList[0]);
				_equalizePoints(p2, startPointsList[1]);

				_findCenterOfPoints(p, p2, _currCenterPoint);

				_midZoomPoint.x = Math.abs(_currCenterPoint.x) - _panOffset.x;
				_midZoomPoint.y = Math.abs(_currCenterPoint.y) - _panOffset.y;
				_currPointsDistance = _startPointsDistance = _calculatePointsDistance(p, p2);
			}
		},


		// Pointermove/touchmove/mousemove handler
		_onDragMove = function (e) {

			e.preventDefault();

			if (_pointerEventEnabled) {
				var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');
				if (pointerIndex > -1) {
					var p = _currPointers[pointerIndex];
					p.x = e.pageX;
					p.y = e.pageY;
				}
			}

			if (_isDragging) {
				var touchesList = _getTouchPoints(e);
				if (!_direction && !_moved && !_isZooming) {

					if (_mainScrollPos.x !== _slideSize.x * _currPositionIndex) {
						// if main scroll position is shifted – direction is always horizontal
						_direction = 'h';
					} else {
						var diff = Math.abs(touchesList[0].x - _currPoint.x) - Math.abs(touchesList[0].y - _currPoint.y);
						// check the direction of movement
						if (Math.abs(diff) >= DIRECTION_CHECK_OFFSET) {
							_direction = diff > 0 ? 'h' : 'v';
							_currentPoints = touchesList;
						}
					}
				} else {
					_currentPoints = touchesList;
				}
			}
		},

		// 
		_renderMovement = function () {

			if (!_currentPoints) {
				return;
			}

			var numPoints = _currentPoints.length;

			if (numPoints === 0) {
				return;
			}

			_equalizePoints(p, _currentPoints[0]);

			delta.x = p.x - _currPoint.x;
			delta.y = p.y - _currPoint.y;

			if (_isZooming && numPoints > 1) {
				// Handle behaviour for more than 1 point

				_currPoint.x = p.x;
				_currPoint.y = p.y;

				// check if one of two points changed
				if (!delta.x && !delta.y && _isEqualPoints(_currentPoints[1], p2)) {
					return;
				}

				_equalizePoints(p2, _currentPoints[1]);

				if (!_zoomStarted) {
					_zoomStarted = true;
					_shout('zoomGestureStarted');
				}

				// Distance between two points
				var pointsDistance = _calculatePointsDistance(p, p2);

				var zoomLevel = _calculateZoomLevel(pointsDistance);

				// slightly over the of initial zoom level
				if (zoomLevel > self.currItem.initialZoomLevel + self.currItem.initialZoomLevel / 15) {
					_wasOverInitialZoom = true;
				}

				// Apply the friction if zoom level is out of the bounds
				var zoomFriction = 1,
				    minZoomLevel = _getMinZoomLevel(),
				    maxZoomLevel = _getMaxZoomLevel();

				if (zoomLevel < minZoomLevel) {

					if (_options.pinchToClose && !_wasOverInitialZoom && _startZoomLevel <= self.currItem.initialZoomLevel) {
						// fade out background if zooming out
						var minusDiff = minZoomLevel - zoomLevel;
						var percent = 1 - minusDiff / (minZoomLevel / 1.2);

						_applyBgOpacity(percent);
						_shout('onPinchClose', percent);
						_opacityChanged = true;
					} else {
						zoomFriction = (minZoomLevel - zoomLevel) / minZoomLevel;
						if (zoomFriction > 1) {
							zoomFriction = 1;
						}
						zoomLevel = minZoomLevel - zoomFriction * (minZoomLevel / 3);
					}
				} else if (zoomLevel > maxZoomLevel) {
					// 1.5 - extra zoom level above the max. E.g. if max is x6, real max 6 + 1.5 = 7.5
					zoomFriction = (zoomLevel - maxZoomLevel) / (minZoomLevel * 6);
					if (zoomFriction > 1) {
						zoomFriction = 1;
					}
					zoomLevel = maxZoomLevel + zoomFriction * minZoomLevel;
				}

				if (zoomFriction < 0) {
					zoomFriction = 0;
				}

				// distance between touch points after friction is applied
				_currPointsDistance = pointsDistance;

				// _centerPoint - The point in the middle of two pointers
				_findCenterOfPoints(p, p2, _centerPoint);

				// paning with two pointers pressed
				_currPanDist.x += _centerPoint.x - _currCenterPoint.x;
				_currPanDist.y += _centerPoint.y - _currCenterPoint.y;
				_equalizePoints(_currCenterPoint, _centerPoint);

				_panOffset.x = _calculatePanOffset('x', zoomLevel);
				_panOffset.y = _calculatePanOffset('y', zoomLevel);

				_isZoomingIn = zoomLevel > _currZoomLevel;
				_currZoomLevel = zoomLevel;
				_applyCurrentZoomPan();
			} else {

				// handle behaviour for one point (dragging or panning)

				if (!_direction) {
					return;
				}

				if (_isFirstMove) {
					_isFirstMove = false;

					// subtract drag distance that was used during the detection direction  

					if (Math.abs(delta.x) >= DIRECTION_CHECK_OFFSET) {
						delta.x -= _currentPoints[0].x - _startPoint.x;
					}

					if (Math.abs(delta.y) >= DIRECTION_CHECK_OFFSET) {
						delta.y -= _currentPoints[0].y - _startPoint.y;
					}
				}

				_currPoint.x = p.x;
				_currPoint.y = p.y;

				// do nothing if pointers position hasn't changed
				if (delta.x === 0 && delta.y === 0) {
					return;
				}

				if (_direction === 'v' && _options.closeOnVerticalDrag) {
					if (!_canPan()) {
						_currPanDist.y += delta.y;
						_panOffset.y += delta.y;

						var opacityRatio = _calculateVerticalDragOpacityRatio();

						_verticalDragInitiated = true;
						_shout('onVerticalDrag', opacityRatio);

						_applyBgOpacity(opacityRatio);
						_applyCurrentZoomPan();
						return;
					}
				}

				_pushPosPoint(_getCurrentTime(), p.x, p.y);

				_moved = true;
				_currPanBounds = self.currItem.bounds;

				var mainScrollChanged = _panOrMoveMainScroll('x', delta);
				if (!mainScrollChanged) {
					_panOrMoveMainScroll('y', delta);

					_roundPoint(_panOffset);
					_applyCurrentZoomPan();
				}
			}
		},


		// Pointerup/pointercancel/touchend/touchcancel/mouseup event handler
		_onDragRelease = function (e) {

			if (_features.isOldAndroid) {

				if (_oldAndroidTouchEndTimeout && e.type === 'mouseup') {
					return;
				}

				// on Android (v4.1, 4.2, 4.3 & possibly older) 
				// ghost mousedown/up event isn't preventable via e.preventDefault,
				// which causes fake mousedown event
				// so we block mousedown/up for 600ms
				if (e.type.indexOf('touch') > -1) {
					clearTimeout(_oldAndroidTouchEndTimeout);
					_oldAndroidTouchEndTimeout = setTimeout(function () {
						_oldAndroidTouchEndTimeout = 0;
					}, 600);
				}
			}

			_shout('pointerUp');

			if (_preventDefaultEventBehaviour(e, false)) {
				e.preventDefault();
			}

			var releasePoint;

			if (_pointerEventEnabled) {
				var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');

				if (pointerIndex > -1) {
					releasePoint = _currPointers.splice(pointerIndex, 1)[0];

					if (navigator.pointerEnabled) {
						releasePoint.type = e.pointerType || 'mouse';
					} else {
						var MSPOINTER_TYPES = {
							4: 'mouse', // event.MSPOINTER_TYPE_MOUSE
							2: 'touch', // event.MSPOINTER_TYPE_TOUCH 
							3: 'pen' // event.MSPOINTER_TYPE_PEN
						};
						releasePoint.type = MSPOINTER_TYPES[e.pointerType];

						if (!releasePoint.type) {
							releasePoint.type = e.pointerType || 'mouse';
						}
					}
				}
			}

			var touchList = _getTouchPoints(e),
			    gestureType,
			    numPoints = touchList.length;

			if (e.type === 'mouseup') {
				numPoints = 0;
			}

			// Do nothing if there were 3 touch points or more
			if (numPoints === 2) {
				_currentPoints = null;
				return true;
			}

			// if second pointer released
			if (numPoints === 1) {
				_equalizePoints(_startPoint, touchList[0]);
			}

			// pointer hasn't moved, send "tap release" point
			if (numPoints === 0 && !_direction && !_mainScrollAnimating) {
				if (!releasePoint) {
					if (e.type === 'mouseup') {
						releasePoint = { x: e.pageX, y: e.pageY, type: 'mouse' };
					} else if (e.changedTouches && e.changedTouches[0]) {
						releasePoint = { x: e.changedTouches[0].pageX, y: e.changedTouches[0].pageY, type: 'touch' };
					}
				}

				_shout('touchRelease', e, releasePoint);
			}

			// Difference in time between releasing of two last touch points (zoom gesture)
			var releaseTimeDiff = -1;

			// Gesture completed, no pointers left
			if (numPoints === 0) {
				_isDragging = false;
				framework.unbind(window, _upMoveEvents, self);

				_stopDragUpdateLoop();

				if (_isZooming) {
					// Two points released at the same time
					releaseTimeDiff = 0;
				} else if (_lastReleaseTime !== -1) {
					releaseTimeDiff = _getCurrentTime() - _lastReleaseTime;
				}
			}
			_lastReleaseTime = numPoints === 1 ? _getCurrentTime() : -1;

			if (releaseTimeDiff !== -1 && releaseTimeDiff < 150) {
				gestureType = 'zoom';
			} else {
				gestureType = 'swipe';
			}

			if (_isZooming && numPoints < 2) {
				_isZooming = false;

				// Only second point released
				if (numPoints === 1) {
					gestureType = 'zoomPointerUp';
				}
				_shout('zoomGestureEnded');
			}

			_currentPoints = null;
			if (!_moved && !_zoomStarted && !_mainScrollAnimating && !_verticalDragInitiated) {
				// nothing to animate
				return;
			}

			_stopAllAnimations();

			if (!_releaseAnimData) {
				_releaseAnimData = _initDragReleaseAnimationData();
			}

			_releaseAnimData.calculateSwipeSpeed('x');

			if (_verticalDragInitiated) {

				var opacityRatio = _calculateVerticalDragOpacityRatio();

				if (opacityRatio < _options.verticalDragRange) {
					self.close();
				} else {
					var initalPanY = _panOffset.y,
					    initialBgOpacity = _bgOpacity;

					_animateProp('verticalDrag', 0, 1, 300, framework.easing.cubic.out, function (now) {

						_panOffset.y = (self.currItem.initialPosition.y - initalPanY) * now + initalPanY;

						_applyBgOpacity((1 - initialBgOpacity) * now + initialBgOpacity);
						_applyCurrentZoomPan();
					});

					_shout('onVerticalDrag', 1);
				}

				return;
			}

			// main scroll 
			if ((_mainScrollShifted || _mainScrollAnimating) && numPoints === 0) {
				var itemChanged = _finishSwipeMainScrollGesture(gestureType, _releaseAnimData);
				if (itemChanged) {
					return;
				}
				gestureType = 'zoomPointerUp';
			}

			// prevent zoom/pan animation when main scroll animation runs
			if (_mainScrollAnimating) {
				return;
			}

			// Complete simple zoom gesture (reset zoom level if it's out of the bounds)  
			if (gestureType !== 'swipe') {
				_completeZoomGesture();
				return;
			}

			// Complete pan gesture if main scroll is not shifted, and it's possible to pan current image
			if (!_mainScrollShifted && _currZoomLevel > self.currItem.fitRatio) {
				_completePanGesture(_releaseAnimData);
			}
		},


		// Returns object with data about gesture
		// It's created only once and then reused
		_initDragReleaseAnimationData = function () {
			// temp local vars
			var lastFlickDuration, tempReleasePos;

			// s = this
			var s = {
				lastFlickOffset: {},
				lastFlickDist: {},
				lastFlickSpeed: {},
				slowDownRatio: {},
				slowDownRatioReverse: {},
				speedDecelerationRatio: {},
				speedDecelerationRatioAbs: {},
				distanceOffset: {},
				backAnimDestination: {},
				backAnimStarted: {},
				calculateSwipeSpeed: function (axis) {

					if (_posPoints.length > 1) {
						lastFlickDuration = _getCurrentTime() - _gestureCheckSpeedTime + 50;
						tempReleasePos = _posPoints[_posPoints.length - 2][axis];
					} else {
						lastFlickDuration = _getCurrentTime() - _gestureStartTime; // total gesture duration
						tempReleasePos = _startPoint[axis];
					}
					s.lastFlickOffset[axis] = _currPoint[axis] - tempReleasePos;
					s.lastFlickDist[axis] = Math.abs(s.lastFlickOffset[axis]);
					if (s.lastFlickDist[axis] > 20) {
						s.lastFlickSpeed[axis] = s.lastFlickOffset[axis] / lastFlickDuration;
					} else {
						s.lastFlickSpeed[axis] = 0;
					}
					if (Math.abs(s.lastFlickSpeed[axis]) < 0.1) {
						s.lastFlickSpeed[axis] = 0;
					}

					s.slowDownRatio[axis] = 0.95;
					s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];
					s.speedDecelerationRatio[axis] = 1;
				},

				calculateOverBoundsAnimOffset: function (axis, speed) {
					if (!s.backAnimStarted[axis]) {

						if (_panOffset[axis] > _currPanBounds.min[axis]) {
							s.backAnimDestination[axis] = _currPanBounds.min[axis];
						} else if (_panOffset[axis] < _currPanBounds.max[axis]) {
							s.backAnimDestination[axis] = _currPanBounds.max[axis];
						}

						if (s.backAnimDestination[axis] !== undefined) {
							s.slowDownRatio[axis] = 0.7;
							s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];
							if (s.speedDecelerationRatioAbs[axis] < 0.05) {

								s.lastFlickSpeed[axis] = 0;
								s.backAnimStarted[axis] = true;

								_animateProp('bounceZoomPan' + axis, _panOffset[axis], s.backAnimDestination[axis], speed || 300, framework.easing.sine.out, function (pos) {
									_panOffset[axis] = pos;
									_applyCurrentZoomPan();
								});
							}
						}
					}
				},

				// Reduces the speed by slowDownRatio (per 10ms)
				calculateAnimOffset: function (axis) {
					if (!s.backAnimStarted[axis]) {
						s.speedDecelerationRatio[axis] = s.speedDecelerationRatio[axis] * (s.slowDownRatio[axis] + s.slowDownRatioReverse[axis] - s.slowDownRatioReverse[axis] * s.timeDiff / 10);

						s.speedDecelerationRatioAbs[axis] = Math.abs(s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis]);
						s.distanceOffset[axis] = s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis] * s.timeDiff;
						_panOffset[axis] += s.distanceOffset[axis];
					}
				},

				panAnimLoop: function () {
					if (_animations.zoomPan) {
						_animations.zoomPan.raf = _requestAF(s.panAnimLoop);

						s.now = _getCurrentTime();
						s.timeDiff = s.now - s.lastNow;
						s.lastNow = s.now;

						s.calculateAnimOffset('x');
						s.calculateAnimOffset('y');

						_applyCurrentZoomPan();

						s.calculateOverBoundsAnimOffset('x');
						s.calculateOverBoundsAnimOffset('y');

						if (s.speedDecelerationRatioAbs.x < 0.05 && s.speedDecelerationRatioAbs.y < 0.05) {

							// round pan position
							_panOffset.x = Math.round(_panOffset.x);
							_panOffset.y = Math.round(_panOffset.y);
							_applyCurrentZoomPan();

							_stopAnimation('zoomPan');
							return;
						}
					}
				}
			};
			return s;
		},
		    _completePanGesture = function (animData) {
			// calculate swipe speed for Y axis (paanning)
			animData.calculateSwipeSpeed('y');

			_currPanBounds = self.currItem.bounds;

			animData.backAnimDestination = {};
			animData.backAnimStarted = {};

			// Avoid acceleration animation if speed is too low
			if (Math.abs(animData.lastFlickSpeed.x) <= 0.05 && Math.abs(animData.lastFlickSpeed.y) <= 0.05) {
				animData.speedDecelerationRatioAbs.x = animData.speedDecelerationRatioAbs.y = 0;

				// Run pan drag release animation. E.g. if you drag image and release finger without momentum.
				animData.calculateOverBoundsAnimOffset('x');
				animData.calculateOverBoundsAnimOffset('y');
				return true;
			}

			// Animation loop that controls the acceleration after pan gesture ends
			_registerStartAnimation('zoomPan');
			animData.lastNow = _getCurrentTime();
			animData.panAnimLoop();
		},
		    _finishSwipeMainScrollGesture = function (gestureType, _releaseAnimData) {
			var itemChanged;
			if (!_mainScrollAnimating) {
				_currZoomedItemIndex = _currentItemIndex;
			}

			var itemsDiff;

			if (gestureType === 'swipe') {
				var totalShiftDist = _currPoint.x - _startPoint.x,
				    isFastLastFlick = _releaseAnimData.lastFlickDist.x < 10;

				// if container is shifted for more than MIN_SWIPE_DISTANCE, 
				// and last flick gesture was in right direction
				if (totalShiftDist > MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData.lastFlickOffset.x > 20)) {
					// go to prev item
					itemsDiff = -1;
				} else if (totalShiftDist < -MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData.lastFlickOffset.x < -20)) {
					// go to next item
					itemsDiff = 1;
				}
			}

			var nextCircle;

			if (itemsDiff) {

				_currentItemIndex += itemsDiff;

				if (_currentItemIndex < 0) {
					_currentItemIndex = _options.loop ? _getNumItems() - 1 : 0;
					nextCircle = true;
				} else if (_currentItemIndex >= _getNumItems()) {
					_currentItemIndex = _options.loop ? 0 : _getNumItems() - 1;
					nextCircle = true;
				}

				if (!nextCircle || _options.loop) {
					_indexDiff += itemsDiff;
					_currPositionIndex -= itemsDiff;
					itemChanged = true;
				}
			}

			var animateToX = _slideSize.x * _currPositionIndex;
			var animateToDist = Math.abs(animateToX - _mainScrollPos.x);
			var finishAnimDuration;

			if (!itemChanged && animateToX > _mainScrollPos.x !== _releaseAnimData.lastFlickSpeed.x > 0) {
				// "return to current" duration, e.g. when dragging from slide 0 to -1
				finishAnimDuration = 333;
			} else {
				finishAnimDuration = Math.abs(_releaseAnimData.lastFlickSpeed.x) > 0 ? animateToDist / Math.abs(_releaseAnimData.lastFlickSpeed.x) : 333;

				finishAnimDuration = Math.min(finishAnimDuration, 400);
				finishAnimDuration = Math.max(finishAnimDuration, 250);
			}

			if (_currZoomedItemIndex === _currentItemIndex) {
				itemChanged = false;
			}

			_mainScrollAnimating = true;

			_shout('mainScrollAnimStart');

			_animateProp('mainScroll', _mainScrollPos.x, animateToX, finishAnimDuration, framework.easing.cubic.out, _moveMainScroll, function () {
				_stopAllAnimations();
				_mainScrollAnimating = false;
				_currZoomedItemIndex = -1;

				if (itemChanged || _currZoomedItemIndex !== _currentItemIndex) {
					self.updateCurrItem();
				}

				_shout('mainScrollAnimComplete');
			});

			if (itemChanged) {
				self.updateCurrItem(true);
			}

			return itemChanged;
		},
		    _calculateZoomLevel = function (touchesDistance) {
			return 1 / _startPointsDistance * touchesDistance * _startZoomLevel;
		},


		// Resets zoom if it's out of bounds
		_completeZoomGesture = function () {
			var destZoomLevel = _currZoomLevel,
			    minZoomLevel = _getMinZoomLevel(),
			    maxZoomLevel = _getMaxZoomLevel();

			if (_currZoomLevel < minZoomLevel) {
				destZoomLevel = minZoomLevel;
			} else if (_currZoomLevel > maxZoomLevel) {
				destZoomLevel = maxZoomLevel;
			}

			var destOpacity = 1,
			    onUpdate,
			    initialOpacity = _bgOpacity;

			if (_opacityChanged && !_isZoomingIn && !_wasOverInitialZoom && _currZoomLevel < minZoomLevel) {
				//_closedByScroll = true;
				self.close();
				return true;
			}

			if (_opacityChanged) {
				onUpdate = function (now) {
					_applyBgOpacity((destOpacity - initialOpacity) * now + initialOpacity);
				};
			}

			self.zoomTo(destZoomLevel, 0, 200, framework.easing.cubic.out, onUpdate);
			return true;
		};

		_registerModule('Gestures', {
			publicMethods: {

				initGestures: function () {

					// helper function that builds touch/pointer/mouse events
					var addEventNames = function (pref, down, move, up, cancel) {
						_dragStartEvent = pref + down;
						_dragMoveEvent = pref + move;
						_dragEndEvent = pref + up;
						if (cancel) {
							_dragCancelEvent = pref + cancel;
						} else {
							_dragCancelEvent = '';
						}
					};

					_pointerEventEnabled = _features.pointerEvent;
					if (_pointerEventEnabled && _features.touch) {
						// we don't need touch events, if browser supports pointer events
						_features.touch = false;
					}

					if (_pointerEventEnabled) {
						if (navigator.pointerEnabled) {
							addEventNames('pointer', 'down', 'move', 'up', 'cancel');
						} else {
							// IE10 pointer events are case-sensitive
							addEventNames('MSPointer', 'Down', 'Move', 'Up', 'Cancel');
						}
					} else if (_features.touch) {
						addEventNames('touch', 'start', 'move', 'end', 'cancel');
						_likelyTouchDevice = true;
					} else {
						addEventNames('mouse', 'down', 'move', 'up');
					}

					_upMoveEvents = _dragMoveEvent + ' ' + _dragEndEvent + ' ' + _dragCancelEvent;
					_downEvents = _dragStartEvent;

					if (_pointerEventEnabled && !_likelyTouchDevice) {
						_likelyTouchDevice = navigator.maxTouchPoints > 1 || navigator.msMaxTouchPoints > 1;
					}
					// make variable public
					self.likelyTouchDevice = _likelyTouchDevice;

					_globalEventHandlers[_dragStartEvent] = _onDragStart;
					_globalEventHandlers[_dragMoveEvent] = _onDragMove;
					_globalEventHandlers[_dragEndEvent] = _onDragRelease; // the Kraken

					if (_dragCancelEvent) {
						_globalEventHandlers[_dragCancelEvent] = _globalEventHandlers[_dragEndEvent];
					}

					// Bind mouse events on device with detected hardware touch support, in case it supports multiple types of input.
					if (_features.touch) {
						_downEvents += ' mousedown';
						_upMoveEvents += ' mousemove mouseup';
						_globalEventHandlers.mousedown = _globalEventHandlers[_dragStartEvent];
						_globalEventHandlers.mousemove = _globalEventHandlers[_dragMoveEvent];
						_globalEventHandlers.mouseup = _globalEventHandlers[_dragEndEvent];
					}

					if (!_likelyTouchDevice) {
						// don't allow pan to next slide from zoomed state on Desktop
						_options.allowPanToNext = false;
					}
				}

			}
		});

		/*>>gestures*/

		/*>>show-hide-transition*/
		/**
   * show-hide-transition.js:
   *
   * Manages initial opening or closing transition.
   *
   * If you're not planning to use transition for gallery at all,
   * you may set options hideAnimationDuration and showAnimationDuration to 0,
   * and just delete startAnimation function.
   * 
   */

		var _showOrHideTimeout,
		    _showOrHide = function (item, img, out, completeFn) {

			if (_showOrHideTimeout) {
				clearTimeout(_showOrHideTimeout);
			}

			_initialZoomRunning = true;
			_initialContentSet = true;

			// dimensions of small thumbnail {x:,y:,w:}.
			// Height is optional, as calculated based on large image.
			var thumbBounds;
			if (item.initialLayout) {
				thumbBounds = item.initialLayout;
				item.initialLayout = null;
			} else {
				thumbBounds = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);
			}

			var duration = out ? _options.hideAnimationDuration : _options.showAnimationDuration;

			var onComplete = function () {
				_stopAnimation('initialZoom');
				if (!out) {
					_applyBgOpacity(1);
					if (img) {
						img.style.display = 'block';
					}
					framework.addClass(template, 'pswp--animated-in');
					_shout('initialZoom' + (out ? 'OutEnd' : 'InEnd'));
				} else {
					self.template.removeAttribute('style');
					self.bg.removeAttribute('style');
				}

				if (completeFn) {
					completeFn();
				}
				_initialZoomRunning = false;
			};

			// if bounds aren't provided, just open gallery without animation
			if (!duration || !thumbBounds || thumbBounds.x === undefined) {

				_shout('initialZoom' + (out ? 'Out' : 'In'));

				_currZoomLevel = item.initialZoomLevel;
				_equalizePoints(_panOffset, item.initialPosition);
				_applyCurrentZoomPan();

				template.style.opacity = out ? 0 : 1;
				_applyBgOpacity(1);

				if (duration) {
					setTimeout(function () {
						onComplete();
					}, duration);
				} else {
					onComplete();
				}

				return;
			}

			var startAnimation = function () {
				var closeWithRaf = _closedByScroll,
				    fadeEverything = !self.currItem.src || self.currItem.loadError || _options.showHideOpacity;

				// apply hw-acceleration to image
				if (item.miniImg) {
					item.miniImg.style.webkitBackfaceVisibility = 'hidden';
				}

				if (!out) {
					_currZoomLevel = thumbBounds.w / item.w;
					_panOffset.x = thumbBounds.x;
					_panOffset.y = thumbBounds.y - _initalWindowScrollY;

					self[fadeEverything ? 'template' : 'bg'].style.opacity = 0.001;
					_applyCurrentZoomPan();
				}

				_registerStartAnimation('initialZoom');

				if (out && !closeWithRaf) {
					framework.removeClass(template, 'pswp--animated-in');
				}

				if (fadeEverything) {
					if (out) {
						framework[(closeWithRaf ? 'remove' : 'add') + 'Class'](template, 'pswp--animate_opacity');
					} else {
						setTimeout(function () {
							framework.addClass(template, 'pswp--animate_opacity');
						}, 30);
					}
				}

				_showOrHideTimeout = setTimeout(function () {

					_shout('initialZoom' + (out ? 'Out' : 'In'));

					if (!out) {

						// "in" animation always uses CSS transitions (instead of rAF).
						// CSS transition work faster here, 
						// as developer may also want to animate other things, 
						// like ui on top of sliding area, which can be animated just via CSS

						_currZoomLevel = item.initialZoomLevel;
						_equalizePoints(_panOffset, item.initialPosition);
						_applyCurrentZoomPan();
						_applyBgOpacity(1);

						if (fadeEverything) {
							template.style.opacity = 1;
						} else {
							_applyBgOpacity(1);
						}

						_showOrHideTimeout = setTimeout(onComplete, duration + 20);
					} else {

						// "out" animation uses rAF only when PhotoSwipe is closed by browser scroll, to recalculate position
						var destZoomLevel = thumbBounds.w / item.w,
						    initialPanOffset = {
							x: _panOffset.x,
							y: _panOffset.y
						},
						    initialZoomLevel = _currZoomLevel,
						    initalBgOpacity = _bgOpacity,
						    onUpdate = function (now) {

							if (now === 1) {
								_currZoomLevel = destZoomLevel;
								_panOffset.x = thumbBounds.x;
								_panOffset.y = thumbBounds.y - _currentWindowScrollY;
							} else {
								_currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;
								_panOffset.x = (thumbBounds.x - initialPanOffset.x) * now + initialPanOffset.x;
								_panOffset.y = (thumbBounds.y - _currentWindowScrollY - initialPanOffset.y) * now + initialPanOffset.y;
							}

							_applyCurrentZoomPan();
							if (fadeEverything) {
								template.style.opacity = 1 - now;
							} else {
								_applyBgOpacity(initalBgOpacity - now * initalBgOpacity);
							}
						};

						if (closeWithRaf) {
							_animateProp('initialZoom', 0, 1, duration, framework.easing.cubic.out, onUpdate, onComplete);
						} else {
							onUpdate(1);
							_showOrHideTimeout = setTimeout(onComplete, duration + 20);
						}
					}
				}, out ? 25 : 90); // Main purpose of this delay is to give browser time to paint and
				// create composite layers of PhotoSwipe UI parts (background, controls, caption, arrows).
				// Which avoids lag at the beginning of scale transition.
			};
			startAnimation();
		};

		/*>>show-hide-transition*/

		/*>>items-controller*/
		/**
  *
  * Controller manages gallery items, their dimensions, and their content.
  * 
  */

		var _items,
		    _tempPanAreaSize = {},
		    _imagesToAppendPool = [],
		    _initialContentSet,
		    _initialZoomRunning,
		    _controllerDefaultOptions = {
			index: 0,
			errorMsg: '<div class="pswp__error-msg"><a href="%url%" target="_blank">The image</a> could not be loaded.</div>',
			forceProgressiveLoading: false, // TODO
			preload: [1, 1],
			getNumItemsFn: function () {
				return _items.length;
			}
		};

		var _getItemAt,
		    _getNumItems,
		    _initialIsLoop,
		    _getZeroBounds = function () {
			return {
				center: { x: 0, y: 0 },
				max: { x: 0, y: 0 },
				min: { x: 0, y: 0 }
			};
		},
		    _calculateSingleItemPanBounds = function (item, realPanElementW, realPanElementH) {
			var bounds = item.bounds;

			// position of element when it's centered
			bounds.center.x = Math.round((_tempPanAreaSize.x - realPanElementW) / 2);
			bounds.center.y = Math.round((_tempPanAreaSize.y - realPanElementH) / 2) + item.vGap.top;

			// maximum pan position
			bounds.max.x = realPanElementW > _tempPanAreaSize.x ? Math.round(_tempPanAreaSize.x - realPanElementW) : bounds.center.x;

			bounds.max.y = realPanElementH > _tempPanAreaSize.y ? Math.round(_tempPanAreaSize.y - realPanElementH) + item.vGap.top : bounds.center.y;

			// minimum pan position
			bounds.min.x = realPanElementW > _tempPanAreaSize.x ? 0 : bounds.center.x;
			bounds.min.y = realPanElementH > _tempPanAreaSize.y ? item.vGap.top : bounds.center.y;
		},
		    _calculateItemSize = function (item, viewportSize, zoomLevel) {

			if (item.src && !item.loadError) {
				var isInitial = !zoomLevel;

				if (isInitial) {
					if (!item.vGap) {
						item.vGap = { top: 0, bottom: 0 };
					}
					// allows overriding vertical margin for individual items
					_shout('parseVerticalMargin', item);
				}

				_tempPanAreaSize.x = viewportSize.x;
				_tempPanAreaSize.y = viewportSize.y - item.vGap.top - item.vGap.bottom;

				if (isInitial) {
					var hRatio = _tempPanAreaSize.x / item.w;
					var vRatio = _tempPanAreaSize.y / item.h;

					item.fitRatio = hRatio < vRatio ? hRatio : vRatio;
					//item.fillRatio = hRatio > vRatio ? hRatio : vRatio;

					var scaleMode = _options.scaleMode;

					if (scaleMode === 'orig') {
						zoomLevel = 1;
					} else if (scaleMode === 'fit') {
						zoomLevel = item.fitRatio;
					}

					if (zoomLevel > 1) {
						zoomLevel = 1;
					}

					item.initialZoomLevel = zoomLevel;

					if (!item.bounds) {
						// reuse bounds object
						item.bounds = _getZeroBounds();
					}
				}

				if (!zoomLevel) {
					return;
				}

				_calculateSingleItemPanBounds(item, item.w * zoomLevel, item.h * zoomLevel);

				if (isInitial && zoomLevel === item.initialZoomLevel) {
					item.initialPosition = item.bounds.center;
				}

				return item.bounds;
			} else {
				item.w = item.h = 0;
				item.initialZoomLevel = item.fitRatio = 1;
				item.bounds = _getZeroBounds();
				item.initialPosition = item.bounds.center;

				// if it's not image, we return zero bounds (content is not zoomable)
				return item.bounds;
			}
		},
		    _appendImage = function (index, item, baseDiv, img, preventAnimation, keepPlaceholder) {

			if (item.loadError) {
				return;
			}

			if (img) {

				item.imageAppended = true;
				_setImageSize(item, img, item === self.currItem && _renderMaxResolution);

				baseDiv.appendChild(img);

				if (keepPlaceholder) {
					setTimeout(function () {
						if (item && item.loaded && item.placeholder) {
							item.placeholder.style.display = 'none';
							item.placeholder = null;
						}
					}, 500);
				}
			}
		},
		    _preloadImage = function (item) {
			item.loading = true;
			item.loaded = false;
			var img = item.img = framework.createEl('pswp__img', 'img');
			var onComplete = function () {
				item.loading = false;
				item.loaded = true;

				if (item.loadComplete) {
					item.loadComplete(item);
				} else {
					item.img = null; // no need to store image object
				}
				img.onload = img.onerror = null;
				img = null;
			};
			img.onload = onComplete;
			img.onerror = function () {
				item.loadError = true;
				onComplete();
			};

			img.src = item.src; // + '?a=' + Math.random();

			return img;
		},
		    _checkForError = function (item, cleanUp) {
			if (item.src && item.loadError && item.container) {

				if (cleanUp) {
					item.container.innerHTML = '';
				}

				item.container.innerHTML = _options.errorMsg.replace('%url%', item.src);
				return true;
			}
		},
		    _setImageSize = function (item, img, maxRes) {
			if (!item.src) {
				return;
			}

			if (!img) {
				img = item.container.lastChild;
			}

			var w = maxRes ? item.w : Math.round(item.w * item.fitRatio),
			    h = maxRes ? item.h : Math.round(item.h * item.fitRatio);

			if (item.placeholder && !item.loaded) {
				item.placeholder.style.width = w + 'px';
				item.placeholder.style.height = h + 'px';
			}

			img.style.width = w + 'px';
			img.style.height = h + 'px';
		},
		    _appendImagesPool = function () {

			if (_imagesToAppendPool.length) {
				var poolItem;

				for (var i = 0; i < _imagesToAppendPool.length; i++) {
					poolItem = _imagesToAppendPool[i];
					if (poolItem.holder.index === poolItem.index) {
						_appendImage(poolItem.index, poolItem.item, poolItem.baseDiv, poolItem.img, false, poolItem.clearPlaceholder);
					}
				}
				_imagesToAppendPool = [];
			}
		};

		_registerModule('Controller', {

			publicMethods: {

				lazyLoadItem: function (index) {
					index = _getLoopedId(index);
					var item = _getItemAt(index);

					if (!item || (item.loaded || item.loading) && !_itemsNeedUpdate) {
						return;
					}

					_shout('gettingData', index, item);

					if (!item.src) {
						return;
					}

					_preloadImage(item);
				},
				initController: function () {
					framework.extend(_options, _controllerDefaultOptions, true);
					self.items = _items = items;
					_getItemAt = self.getItemAt;
					_getNumItems = _options.getNumItemsFn; //self.getNumItems;


					_initialIsLoop = _options.loop;
					if (_getNumItems() < 3) {
						_options.loop = false; // disable loop if less then 3 items
					}

					_listen('beforeChange', function (diff) {

						var p = _options.preload,
						    isNext = diff === null ? true : diff >= 0,
						    preloadBefore = Math.min(p[0], _getNumItems()),
						    preloadAfter = Math.min(p[1], _getNumItems()),
						    i;

						for (i = 1; i <= (isNext ? preloadAfter : preloadBefore); i++) {
							self.lazyLoadItem(_currentItemIndex + i);
						}
						for (i = 1; i <= (isNext ? preloadBefore : preloadAfter); i++) {
							self.lazyLoadItem(_currentItemIndex - i);
						}
					});

					_listen('initialLayout', function () {
						self.currItem.initialLayout = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);
					});

					_listen('mainScrollAnimComplete', _appendImagesPool);
					_listen('initialZoomInEnd', _appendImagesPool);

					_listen('destroy', function () {
						var item;
						for (var i = 0; i < _items.length; i++) {
							item = _items[i];
							// remove reference to DOM elements, for GC
							if (item.container) {
								item.container = null;
							}
							if (item.placeholder) {
								item.placeholder = null;
							}
							if (item.img) {
								item.img = null;
							}
							if (item.preloader) {
								item.preloader = null;
							}
							if (item.loadError) {
								item.loaded = item.loadError = false;
							}
						}
						_imagesToAppendPool = null;
					});
				},

				getItemAt: function (index) {
					if (index >= 0) {
						return _items[index] !== undefined ? _items[index] : false;
					}
					return false;
				},

				allowProgressiveImg: function () {
					// 1. Progressive image loading isn't working on webkit/blink 
					//    when hw-acceleration (e.g. translateZ) is applied to IMG element.
					//    That's why in PhotoSwipe parent element gets zoom transform, not image itself.
					//    
					// 2. Progressive image loading sometimes blinks in webkit/blink when applying animation to parent element.
					//    That's why it's disabled on touch devices (mainly because of swipe transition)
					//    
					// 3. Progressive image loading sometimes doesn't work in IE (up to 11).

					// Don't allow progressive loading on non-large touch devices
					return _options.forceProgressiveLoading || !_likelyTouchDevice || _options.mouseUsed || screen.width > 1200;
					// 1200 - to eliminate touch devices with large screen (like Chromebook Pixel)
				},

				setContent: function (holder, index) {

					if (_options.loop) {
						index = _getLoopedId(index);
					}

					var prevItem = self.getItemAt(holder.index);
					if (prevItem) {
						prevItem.container = null;
					}

					var item = self.getItemAt(index),
					    img;

					if (!item) {
						holder.el.innerHTML = '';
						return;
					}

					// allow to override data
					_shout('gettingData', index, item);

					holder.index = index;
					holder.item = item;

					// base container DIV is created only once for each of 3 holders
					var baseDiv = item.container = framework.createEl('pswp__zoom-wrap');

					if (!item.src && item.html) {
						if (item.html.tagName) {
							baseDiv.appendChild(item.html);
						} else {
							baseDiv.innerHTML = item.html;
						}
					}

					_checkForError(item);

					_calculateItemSize(item, _viewportSize);

					if (item.src && !item.loadError && !item.loaded) {

						item.loadComplete = function (item) {

							// gallery closed before image finished loading
							if (!_isOpen) {
								return;
							}

							// check if holder hasn't changed while image was loading
							if (holder && holder.index === index) {
								if (_checkForError(item, true)) {
									item.loadComplete = item.img = null;
									_calculateItemSize(item, _viewportSize);
									_applyZoomPanToItem(item);

									if (holder.index === _currentItemIndex) {
										// recalculate dimensions
										self.updateCurrZoomItem();
									}
									return;
								}
								if (!item.imageAppended) {
									if (_features.transform && (_mainScrollAnimating || _initialZoomRunning)) {
										_imagesToAppendPool.push({
											item: item,
											baseDiv: baseDiv,
											img: item.img,
											index: index,
											holder: holder,
											clearPlaceholder: true
										});
									} else {
										_appendImage(index, item, baseDiv, item.img, _mainScrollAnimating || _initialZoomRunning, true);
									}
								} else {
									// remove preloader & mini-img
									if (!_initialZoomRunning && item.placeholder) {
										item.placeholder.style.display = 'none';
										item.placeholder = null;
									}
								}
							}

							item.loadComplete = null;
							item.img = null; // no need to store image element after it's added

							_shout('imageLoadComplete', index, item);
						};

						if (framework.features.transform) {

							var placeholderClassName = 'pswp__img pswp__img--placeholder';
							placeholderClassName += item.msrc ? '' : ' pswp__img--placeholder--blank';

							var placeholder = framework.createEl(placeholderClassName, item.msrc ? 'img' : '');
							if (item.msrc) {
								placeholder.src = item.msrc;
							}

							_setImageSize(item, placeholder);

							baseDiv.appendChild(placeholder);
							item.placeholder = placeholder;
						}

						if (!item.loading) {
							_preloadImage(item);
						}

						if (self.allowProgressiveImg()) {
							// just append image
							if (!_initialContentSet && _features.transform) {
								_imagesToAppendPool.push({
									item: item,
									baseDiv: baseDiv,
									img: item.img,
									index: index,
									holder: holder
								});
							} else {
								_appendImage(index, item, baseDiv, item.img, true, true);
							}
						}
					} else if (item.src && !item.loadError) {
						// image object is created every time, due to bugs of image loading & delay when switching images
						img = framework.createEl('pswp__img', 'img');
						img.style.opacity = 1;
						img.src = item.src;
						_setImageSize(item, img);
						_appendImage(index, item, baseDiv, img, true);
					}

					if (!_initialContentSet && index === _currentItemIndex) {
						_currZoomElementStyle = baseDiv.style;
						_showOrHide(item, img || item.img);
					} else {
						_applyZoomPanToItem(item);
					}

					holder.el.innerHTML = '';
					holder.el.appendChild(baseDiv);
				},

				cleanSlide: function (item) {
					if (item.img) {
						item.img.onload = item.img.onerror = null;
					}
					item.loaded = item.loading = item.img = item.imageAppended = false;
				}

			}
		});

		/*>>items-controller*/

		/*>>tap*/
		/**
   * tap.js:
   *
   * Displatches tap and double-tap events.
   * 
   */

		var tapTimer,
		    tapReleasePoint = {},
		    _dispatchTapEvent = function (origEvent, releasePoint, pointerType) {
			var e = document.createEvent('CustomEvent'),
			    eDetail = {
				origEvent: origEvent,
				target: origEvent.target,
				releasePoint: releasePoint,
				pointerType: pointerType || 'touch'
			};

			e.initCustomEvent('pswpTap', true, true, eDetail);
			origEvent.target.dispatchEvent(e);
		};

		_registerModule('Tap', {
			publicMethods: {
				initTap: function () {
					_listen('firstTouchStart', self.onTapStart);
					_listen('touchRelease', self.onTapRelease);
					_listen('destroy', function () {
						tapReleasePoint = {};
						tapTimer = null;
					});
				},
				onTapStart: function (touchList) {
					if (touchList.length > 1) {
						clearTimeout(tapTimer);
						tapTimer = null;
					}
				},
				onTapRelease: function (e, releasePoint) {
					if (!releasePoint) {
						return;
					}

					if (!_moved && !_isMultitouch && !_numAnimations) {
						var p0 = releasePoint;
						if (tapTimer) {
							clearTimeout(tapTimer);
							tapTimer = null;

							// Check if taped on the same place
							if (_isNearbyPoints(p0, tapReleasePoint)) {
								_shout('doubleTap', p0);
								return;
							}
						}

						if (releasePoint.type === 'mouse') {
							_dispatchTapEvent(e, releasePoint, 'mouse');
							return;
						}

						var clickedTagName = e.target.tagName.toUpperCase();
						// avoid double tap delay on buttons and elements that have class pswp__single-tap
						if (clickedTagName === 'BUTTON' || framework.hasClass(e.target, 'pswp__single-tap')) {
							_dispatchTapEvent(e, releasePoint);
							return;
						}

						_equalizePoints(tapReleasePoint, p0);

						tapTimer = setTimeout(function () {
							_dispatchTapEvent(e, releasePoint);
							tapTimer = null;
						}, 300);
					}
				}
			}
		});

		/*>>tap*/

		/*>>desktop-zoom*/
		/**
   *
   * desktop-zoom.js:
   *
   * - Binds mousewheel event for paning zoomed image.
   * - Manages "dragging", "zoomed-in", "zoom-out" classes.
   *   (which are used for cursors and zoom icon)
   * - Adds toggleDesktopZoom function.
   * 
   */

		var _wheelDelta;

		_registerModule('DesktopZoom', {

			publicMethods: {

				initDesktopZoom: function () {

					if (_oldIE) {
						// no zoom for old IE (<=8)
						return;
					}

					if (_likelyTouchDevice) {
						// if detected hardware touch support, we wait until mouse is used,
						// and only then apply desktop-zoom features
						_listen('mouseUsed', function () {
							self.setupDesktopZoom();
						});
					} else {
						self.setupDesktopZoom(true);
					}
				},

				setupDesktopZoom: function (onInit) {

					_wheelDelta = {};

					var events = 'wheel mousewheel DOMMouseScroll';

					_listen('bindEvents', function () {
						framework.bind(template, events, self.handleMouseWheel);
					});

					_listen('unbindEvents', function () {
						if (_wheelDelta) {
							framework.unbind(template, events, self.handleMouseWheel);
						}
					});

					self.mouseZoomedIn = false;

					var hasDraggingClass,
					    updateZoomable = function () {
						if (self.mouseZoomedIn) {
							framework.removeClass(template, 'pswp--zoomed-in');
							self.mouseZoomedIn = false;
						}
						if (_currZoomLevel < 1) {
							framework.addClass(template, 'pswp--zoom-allowed');
						} else {
							framework.removeClass(template, 'pswp--zoom-allowed');
						}
						removeDraggingClass();
					},
					    removeDraggingClass = function () {
						if (hasDraggingClass) {
							framework.removeClass(template, 'pswp--dragging');
							hasDraggingClass = false;
						}
					};

					_listen('resize', updateZoomable);
					_listen('afterChange', updateZoomable);
					_listen('pointerDown', function () {
						if (self.mouseZoomedIn) {
							hasDraggingClass = true;
							framework.addClass(template, 'pswp--dragging');
						}
					});
					_listen('pointerUp', removeDraggingClass);

					if (!onInit) {
						updateZoomable();
					}
				},

				handleMouseWheel: function (e) {

					if (_currZoomLevel <= self.currItem.fitRatio) {
						if (_options.modal) {

							if (!_options.closeOnScroll || _numAnimations || _isDragging) {
								e.preventDefault();
							} else if (_transformKey && Math.abs(e.deltaY) > 2) {
								// close PhotoSwipe
								// if browser supports transforms & scroll changed enough
								_closedByScroll = true;
								self.close();
							}
						}
						return true;
					}

					// allow just one event to fire
					e.stopPropagation();

					// https://developer.mozilla.org/en-US/docs/Web/Events/wheel
					_wheelDelta.x = 0;

					if ('deltaX' in e) {
						if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {
								// 18 - average line height
								_wheelDelta.x = e.deltaX * 18;
								_wheelDelta.y = e.deltaY * 18;
							} else {
							_wheelDelta.x = e.deltaX;
							_wheelDelta.y = e.deltaY;
						}
					} else if ('wheelDelta' in e) {
						if (e.wheelDeltaX) {
							_wheelDelta.x = -0.16 * e.wheelDeltaX;
						}
						if (e.wheelDeltaY) {
							_wheelDelta.y = -0.16 * e.wheelDeltaY;
						} else {
							_wheelDelta.y = -0.16 * e.wheelDelta;
						}
					} else if ('detail' in e) {
						_wheelDelta.y = e.detail;
					} else {
						return;
					}

					_calculatePanBounds(_currZoomLevel, true);

					var newPanX = _panOffset.x - _wheelDelta.x,
					    newPanY = _panOffset.y - _wheelDelta.y;

					// only prevent scrolling in nonmodal mode when not at edges
					if (_options.modal || newPanX <= _currPanBounds.min.x && newPanX >= _currPanBounds.max.x && newPanY <= _currPanBounds.min.y && newPanY >= _currPanBounds.max.y) {
						e.preventDefault();
					}

					// TODO: use rAF instead of mousewheel?
					self.panTo(newPanX, newPanY);
				},

				toggleDesktopZoom: function (centerPoint) {
					centerPoint = centerPoint || { x: _viewportSize.x / 2 + _offset.x, y: _viewportSize.y / 2 + _offset.y };

					var doubleTapZoomLevel = _options.getDoubleTapZoom(true, self.currItem);
					var zoomOut = _currZoomLevel === doubleTapZoomLevel;

					self.mouseZoomedIn = !zoomOut;

					self.zoomTo(zoomOut ? self.currItem.initialZoomLevel : doubleTapZoomLevel, centerPoint, 333);
					framework[(!zoomOut ? 'add' : 'remove') + 'Class'](template, 'pswp--zoomed-in');
				}

			}
		});

		/*>>desktop-zoom*/

		/*>>history*/
		/**
   *
   * history.js:
   *
   * - Back button to close gallery.
   * 
   * - Unique URL for each slide: example.com/&pid=1&gid=3
   *   (where PID is picture index, and GID and gallery index)
   *   
   * - Switch URL when slides change.
   * 
   */

		var _historyDefaultOptions = {
			history: true,
			galleryUID: 1
		};

		var _historyUpdateTimeout,
		    _hashChangeTimeout,
		    _hashAnimCheckTimeout,
		    _hashChangedByScript,
		    _hashChangedByHistory,
		    _hashReseted,
		    _initialHash,
		    _historyChanged,
		    _closedFromURL,
		    _urlChangedOnce,
		    _windowLoc,
		    _supportsPushState,
		    _getHash = function () {
			return _windowLoc.hash.substring(1);
		},
		    _cleanHistoryTimeouts = function () {

			if (_historyUpdateTimeout) {
				clearTimeout(_historyUpdateTimeout);
			}

			if (_hashAnimCheckTimeout) {
				clearTimeout(_hashAnimCheckTimeout);
			}
		},


		// pid - Picture index
		// gid - Gallery index
		_parseItemIndexFromURL = function () {
			var hash = _getHash(),
			    params = {};

			if (hash.length < 5) {
				// pid=1
				return params;
			}

			var i,
			    vars = hash.split('&');
			for (i = 0; i < vars.length; i++) {
				if (!vars[i]) {
					continue;
				}
				var pair = vars[i].split('=');
				if (pair.length < 2) {
					continue;
				}
				params[pair[0]] = pair[1];
			}
			if (_options.galleryPIDs) {
				// detect custom pid in hash and search for it among the items collection
				var searchfor = params.pid;
				params.pid = 0; // if custom pid cannot be found, fallback to the first item
				for (i = 0; i < _items.length; i++) {
					if (_items[i].pid === searchfor) {
						params.pid = i;
						break;
					}
				}
			} else {
				params.pid = parseInt(params.pid, 10) - 1;
			}
			if (params.pid < 0) {
				params.pid = 0;
			}
			return params;
		},
		    _updateHash = function () {

			if (_hashAnimCheckTimeout) {
				clearTimeout(_hashAnimCheckTimeout);
			}

			if (_numAnimations || _isDragging) {
				// changing browser URL forces layout/paint in some browsers, which causes noticable lag during animation
				// that's why we update hash only when no animations running
				_hashAnimCheckTimeout = setTimeout(_updateHash, 500);
				return;
			}

			if (_hashChangedByScript) {
				clearTimeout(_hashChangeTimeout);
			} else {
				_hashChangedByScript = true;
			}

			var pid = _currentItemIndex + 1;
			var item = _getItemAt(_currentItemIndex);
			if (item.hasOwnProperty('pid')) {
				// carry forward any custom pid assigned to the item
				pid = item.pid;
			}
			var newHash = _initialHash + '&' + 'gid=' + _options.galleryUID + '&' + 'pid=' + pid;

			if (!_historyChanged) {
				if (_windowLoc.hash.indexOf(newHash) === -1) {
					_urlChangedOnce = true;
				}
				// first time - add new hisory record, then just replace
			}

			var newURL = _windowLoc.href.split('#')[0] + '#' + newHash;

			if (_supportsPushState) {

				if ('#' + newHash !== window.location.hash) {
					history[_historyChanged ? 'replaceState' : 'pushState']('', document.title, newURL);
				}
			} else {
				if (_historyChanged) {
					_windowLoc.replace(newURL);
				} else {
					_windowLoc.hash = newHash;
				}
			}

			_historyChanged = true;
			_hashChangeTimeout = setTimeout(function () {
				_hashChangedByScript = false;
			}, 60);
		};

		_registerModule('History', {

			publicMethods: {
				initHistory: function () {

					framework.extend(_options, _historyDefaultOptions, true);

					if (!_options.history) {
						return;
					}

					_windowLoc = window.location;
					_urlChangedOnce = false;
					_closedFromURL = false;
					_historyChanged = false;
					_initialHash = _getHash();
					_supportsPushState = 'pushState' in history;

					if (_initialHash.indexOf('gid=') > -1) {
						_initialHash = _initialHash.split('&gid=')[0];
						_initialHash = _initialHash.split('?gid=')[0];
					}

					_listen('afterChange', self.updateURL);
					_listen('unbindEvents', function () {
						framework.unbind(window, 'hashchange', self.onHashChange);
					});

					var returnToOriginal = function () {
						_hashReseted = true;
						if (!_closedFromURL) {

							if (_urlChangedOnce) {
								history.back();
							} else {

								if (_initialHash) {
									_windowLoc.hash = _initialHash;
								} else {
									if (_supportsPushState) {

										// remove hash from url without refreshing it or scrolling to top
										history.pushState('', document.title, _windowLoc.pathname + _windowLoc.search);
									} else {
										_windowLoc.hash = '';
									}
								}
							}
						}

						_cleanHistoryTimeouts();
					};

					_listen('unbindEvents', function () {
						if (_closedByScroll) {
							// if PhotoSwipe is closed by scroll, we go "back" before the closing animation starts
							// this is done to keep the scroll position
							returnToOriginal();
						}
					});
					_listen('destroy', function () {
						if (!_hashReseted) {
							returnToOriginal();
						}
					});
					_listen('firstUpdate', function () {
						_currentItemIndex = _parseItemIndexFromURL().pid;
					});

					var index = _initialHash.indexOf('pid=');
					if (index > -1) {
						_initialHash = _initialHash.substring(0, index);
						if (_initialHash.slice(-1) === '&') {
							_initialHash = _initialHash.slice(0, -1);
						}
					}

					setTimeout(function () {
						if (_isOpen) {
							// hasn't destroyed yet
							framework.bind(window, 'hashchange', self.onHashChange);
						}
					}, 40);
				},
				onHashChange: function () {

					if (_getHash() === _initialHash) {

						_closedFromURL = true;
						self.close();
						return;
					}
					if (!_hashChangedByScript) {

						_hashChangedByHistory = true;
						self.goTo(_parseItemIndexFromURL().pid);
						_hashChangedByHistory = false;
					}
				},
				updateURL: function () {

					// Delay the update of URL, to avoid lag during transition, 
					// and to not to trigger actions like "refresh page sound" or "blinking favicon" to often

					_cleanHistoryTimeouts();

					if (_hashChangedByHistory) {
						return;
					}

					if (!_historyChanged) {
						_updateHash(); // first time
					} else {
						_historyUpdateTimeout = setTimeout(_updateHash, 800);
					}
				}

			}
		});

		/*>>history*/
		framework.extend(self, publicMethods);
	};
	return PhotoSwipe;
});
;// ==========================================================================
// Plyr
// plyr.js v2.0.10
// https://github.com/selz/plyr
// License: The MIT License (MIT)
// ==========================================================================
// Credits: http://paypal.github.io/accessible-html5-video-player/
// ==========================================================================

;(function (root, factory) {
    'use strict';
    /*global define,module*/

    if (typeof module === 'object' && typeof module.exports === 'object') {
        // Node, CommonJS-like
        module.exports = factory(root, document);
    } else if (typeof define === 'function' && define.amd) {
        // AMD
        define([], function () {
            return factory(root, document);
        });
    } else {
        // Browser globals (root is window)
        root.plyr = factory(root, document);
    }
})(typeof window !== 'undefined' ? window : this, function (window, document) {
    'use strict';

    // Globals

    var fullscreen,
        scroll = { x: 0, y: 0 },


    // Default config
    defaults = {
        enabled: true,
        debug: false,
        autoplay: false,
        loop: false,
        seekTime: 10,
        volume: 10,
        volumeMin: 0,
        volumeMax: 10,
        volumeStep: 1,
        duration: null,
        displayDuration: true,
        loadSprite: true,
        iconPrefix: 'plyr',
        iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',
        clickToPlay: true,
        hideControls: true,
        showPosterOnEnd: false,
        disableContextMenu: true,
        keyboardShorcuts: {
            focused: true,
            global: false
        },
        tooltips: {
            controls: false,
            seek: true
        },
        selectors: {
            html5: 'video, audio',
            embed: '[data-type]',
            editable: 'input, textarea, select, [contenteditable]',
            container: '.plyr',
            controls: {
                container: null,
                wrapper: '.plyr__controls'
            },
            labels: '[data-plyr]',
            buttons: {
                seek: '[data-plyr="seek"]',
                play: '[data-plyr="play"]',
                pause: '[data-plyr="pause"]',
                restart: '[data-plyr="restart"]',
                rewind: '[data-plyr="rewind"]',
                forward: '[data-plyr="fast-forward"]',
                mute: '[data-plyr="mute"]',
                captions: '[data-plyr="captions"]',
                fullscreen: '[data-plyr="fullscreen"]'
            },
            volume: {
                input: '[data-plyr="volume"]',
                display: '.plyr__volume--display'
            },
            progress: {
                container: '.plyr__progress',
                buffer: '.plyr__progress--buffer',
                played: '.plyr__progress--played'
            },
            captions: '.plyr__captions',
            currentTime: '.plyr__time--current',
            duration: '.plyr__time--duration'
        },
        classes: {
            setup: 'plyr--setup',
            ready: 'plyr--ready',
            videoWrapper: 'plyr__video-wrapper',
            embedWrapper: 'plyr__video-embed',
            type: 'plyr--{0}',
            stopped: 'plyr--stopped',
            playing: 'plyr--playing',
            muted: 'plyr--muted',
            loading: 'plyr--loading',
            hover: 'plyr--hover',
            tooltip: 'plyr__tooltip',
            hidden: 'plyr__sr-only',
            hideControls: 'plyr--hide-controls',
            isIos: 'plyr--is-ios',
            isTouch: 'plyr--is-touch',
            captions: {
                enabled: 'plyr--captions-enabled',
                active: 'plyr--captions-active'
            },
            fullscreen: {
                enabled: 'plyr--fullscreen-enabled',
                active: 'plyr--fullscreen-active'
            },
            tabFocus: 'tab-focus'
        },
        captions: {
            defaultActive: false
        },
        fullscreen: {
            enabled: true,
            fallback: true,
            allowAudio: false
        },
        storage: {
            enabled: true,
            key: 'plyr'
        },
        controls: ['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'captions', 'fullscreen'],
        i18n: {
            restart: 'Restart',
            rewind: 'Rewind {seektime} secs',
            play: 'Play',
            pause: 'Pause',
            forward: 'Forward {seektime} secs',
            played: 'played',
            buffered: 'buffered',
            currentTime: 'Current time',
            duration: 'Duration',
            volume: 'Volume',
            toggleMute: 'Toggle Mute',
            toggleCaptions: 'Toggle Captions',
            toggleFullscreen: 'Toggle Fullscreen',
            frameTitle: 'Player for {title}'
        },
        types: {
            embed: ['youtube', 'vimeo', 'soundcloud'],
            html5: ['video', 'audio']
        },
        // URLs
        urls: {
            vimeo: {
                api: 'https://player.vimeo.com/api/player.js'
            },
            youtube: {
                api: 'https://www.youtube.com/iframe_api'
            },
            soundcloud: {
                api: 'https://w.soundcloud.com/player/api.js'
            }
        },
        // Custom control listeners
        listeners: {
            seek: null,
            play: null,
            pause: null,
            restart: null,
            rewind: null,
            forward: null,
            mute: null,
            volume: null,
            captions: null,
            fullscreen: null
        },
        // Events to watch on HTML5 media elements
        events: ['ready', 'ended', 'progress', 'stalled', 'playing', 'waiting', 'canplay', 'canplaythrough', 'loadstart', 'loadeddata', 'loadedmetadata', 'timeupdate', 'volumechange', 'play', 'pause', 'error', 'seeking', 'seeked', 'emptied'],
        // Logging
        logPrefix: '[Plyr]'
    };

    // Credits: http://paypal.github.io/accessible-html5-video-player/
    // Unfortunately, due to mixed support, UA sniffing is required
    function _browserSniff() {
        var ua = navigator.userAgent,
            name = navigator.appName,
            fullVersion = '' + parseFloat(navigator.appVersion),
            majorVersion = parseInt(navigator.appVersion, 10),
            nameOffset,
            verOffset,
            ix,
            isIE = false,
            isFirefox = false,
            isChrome = false,
            isSafari = false;

        if (navigator.appVersion.indexOf('Windows NT') !== -1 && navigator.appVersion.indexOf('rv:11') !== -1) {
            // MSIE 11
            isIE = true;
            name = 'IE';
            fullVersion = '11';
        } else if ((verOffset = ua.indexOf('MSIE')) !== -1) {
            // MSIE
            isIE = true;
            name = 'IE';
            fullVersion = ua.substring(verOffset + 5);
        } else if ((verOffset = ua.indexOf('Chrome')) !== -1) {
            // Chrome
            isChrome = true;
            name = 'Chrome';
            fullVersion = ua.substring(verOffset + 7);
        } else if ((verOffset = ua.indexOf('Safari')) !== -1) {
            // Safari
            isSafari = true;
            name = 'Safari';
            fullVersion = ua.substring(verOffset + 7);
            if ((verOffset = ua.indexOf('Version')) !== -1) {
                fullVersion = ua.substring(verOffset + 8);
            }
        } else if ((verOffset = ua.indexOf('Firefox')) !== -1) {
            // Firefox
            isFirefox = true;
            name = 'Firefox';
            fullVersion = ua.substring(verOffset + 8);
        } else if ((nameOffset = ua.lastIndexOf(' ') + 1) < (verOffset = ua.lastIndexOf('/'))) {
            // In most other browsers, 'name/version' is at the end of userAgent
            name = ua.substring(nameOffset, verOffset);
            fullVersion = ua.substring(verOffset + 1);

            if (name.toLowerCase() === name.toUpperCase()) {
                name = navigator.appName;
            }
        }

        // Trim the fullVersion string at semicolon/space if present
        if ((ix = fullVersion.indexOf(';')) !== -1) {
            fullVersion = fullVersion.substring(0, ix);
        }
        if ((ix = fullVersion.indexOf(' ')) !== -1) {
            fullVersion = fullVersion.substring(0, ix);
        }

        // Get major version
        majorVersion = parseInt('' + fullVersion, 10);
        if (isNaN(majorVersion)) {
            fullVersion = '' + parseFloat(navigator.appVersion);
            majorVersion = parseInt(navigator.appVersion, 10);
        }

        // Return data
        return {
            name: name,
            version: majorVersion,
            isIE: isIE,
            isFirefox: isFirefox,
            isChrome: isChrome,
            isSafari: isSafari,
            isIos: /(iPad|iPhone|iPod)/g.test(navigator.platform),
            isTouch: 'ontouchstart' in document.documentElement
        };
    }

    // Check for mime type support against a player instance
    // Credits: http://diveintohtml5.info/everything.html
    // Related: http://www.leanbackplyr.com/test/h5mt.html
    function _supportMime(plyr, mimeType) {
        var media = plyr.media;

        if (plyr.type === 'video') {
            // Check type
            switch (mimeType) {
                case 'video/webm':
                    return !!(media.canPlayType && media.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/no/, ''));
                case 'video/mp4':
                    return !!(media.canPlayType && media.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"').replace(/no/, ''));
                case 'video/ogg':
                    return !!(media.canPlayType && media.canPlayType('video/ogg; codecs="theora"').replace(/no/, ''));
            }
        } else if (plyr.type === 'audio') {
            // Check type
            switch (mimeType) {
                case 'audio/mpeg':
                    return !!(media.canPlayType && media.canPlayType('audio/mpeg;').replace(/no/, ''));
                case 'audio/ogg':
                    return !!(media.canPlayType && media.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/, ''));
                case 'audio/wav':
                    return !!(media.canPlayType && media.canPlayType('audio/wav; codecs="1"').replace(/no/, ''));
            }
        }

        // If we got this far, we're stuffed
        return false;
    }

    // Inject a script
    function _injectScript(source) {
        if (document.querySelectorAll('script[src="' + source + '"]').length) {
            return;
        }

        var tag = document.createElement('script');
        tag.src = source;
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    }

    // Element exists in an array
    function _inArray(haystack, needle) {
        return Array.prototype.indexOf && haystack.indexOf(needle) !== -1;
    }

    // Replace all
    function _replaceAll(string, find, replace) {
        return string.replace(new RegExp(find.replace(/([.*+?\^=!:${}()|\[\]\/\\])/g, '\\$1'), 'g'), replace);
    }

    // Wrap an element
    function _wrap(elements, wrapper) {
        // Convert `elements` to an array, if necessary.
        if (!elements.length) {
            elements = [elements];
        }

        // Loops backwards to prevent having to clone the wrapper on the
        // first element (see `child` below).
        for (var i = elements.length - 1; i >= 0; i--) {
            var child = i > 0 ? wrapper.cloneNode(true) : wrapper;
            var element = elements[i];

            // Cache the current parent and sibling.
            var parent = element.parentNode;
            var sibling = element.nextSibling;

            // Wrap the element (is automatically removed from its current
            // parent).
            child.appendChild(element);

            // If the element had a sibling, insert the wrapper before
            // the sibling to maintain the HTML structure; otherwise, just
            // append it to the parent.
            if (sibling) {
                parent.insertBefore(child, sibling);
            } else {
                parent.appendChild(child);
            }

            return child;
        }
    }

    // Unwrap an element
    // http://plainjs.com/javascript/manipulation/unwrap-a-dom-element-35/
    /*function _unwrap(wrapper) {
        // Get the element's parent node
        var parent = wrapper.parentNode;
         // Move all children out of the element
        while (wrapper.firstChild) {
            parent.insertBefore(wrapper.firstChild, wrapper);
        }
         // Remove the empty element
        parent.removeChild(wrapper);
    }*/

    // Remove an element
    function _remove(element) {
        if (!element) {
            return;
        }
        element.parentNode.removeChild(element);
    }

    // Prepend child
    function _prependChild(parent, element) {
        parent.insertBefore(element, parent.firstChild);
    }

    // Set attributes
    function _setAttributes(element, attributes) {
        for (var key in attributes) {
            element.setAttribute(key, _is.boolean(attributes[key]) && attributes[key] ? '' : attributes[key]);
        }
    }

    // Insert a HTML element
    function _insertElement(type, parent, attributes) {
        // Create a new <element>
        var element = document.createElement(type);

        // Set all passed attributes
        _setAttributes(element, attributes);

        // Inject the new element
        _prependChild(parent, element);
    }

    // Get a classname from selector
    function _getClassname(selector) {
        return selector.replace('.', '');
    }

    // Toggle class on an element
    function _toggleClass(element, className, state) {
        if (element) {
            if (element.classList) {
                element.classList[state ? 'add' : 'remove'](className);
            } else {
                var name = (' ' + element.className + ' ').replace(/\s+/g, ' ').replace(' ' + className + ' ', '');
                element.className = name + (state ? ' ' + className : '');
            }
        }
    }

    // Has class name
    function _hasClass(element, className) {
        if (element) {
            if (element.classList) {
                return element.classList.contains(className);
            } else {
                return new RegExp('(\\s|^)' + className + '(\\s|$)').test(element.className);
            }
        }
        return false;
    }

    // Element matches selector
    function _matches(element, selector) {
        var p = Element.prototype;

        var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {
            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
        };

        return f.call(element, selector);
    }

    // Bind along with custom handler
    function _proxyListener(element, eventName, userListener, defaultListener, useCapture) {
        _on(element, eventName, function (event) {
            if (userListener) {
                userListener.apply(element, [event]);
            }
            defaultListener.apply(element, [event]);
        }, useCapture);
    }

    // Toggle event listener
    function _toggleListener(element, events, callback, toggle, useCapture) {
        var eventList = events.split(' ');

        // Whether the listener is a capturing listener or not
        // Default to false
        if (!_is.boolean(useCapture)) {
            useCapture = false;
        }

        // If a nodelist is passed, call itself on each node
        if (element instanceof NodeList) {
            for (var x = 0; x < element.length; x++) {
                if (element[x] instanceof Node) {
                    _toggleListener(element[x], arguments[1], arguments[2], arguments[3]);
                }
            }
            return;
        }

        // If a single node is passed, bind the event listener
        for (var i = 0; i < eventList.length; i++) {
            element[toggle ? 'addEventListener' : 'removeEventListener'](eventList[i], callback, useCapture);
        }
    }

    // Bind event
    function _on(element, events, callback, useCapture) {
        if (element) {
            _toggleListener(element, events, callback, true, useCapture);
        }
    }

    // Unbind event
    /*function _off(element, events, callback, useCapture) {
        if (element) {
            _toggleListener(element, events, callback, false, useCapture);
        }
    }*/

    // Trigger event
    function _event(element, type, bubbles, properties) {
        // Bail if no element
        if (!element || !type) {
            return;
        }

        // Default bubbles to false
        if (!_is.boolean(bubbles)) {
            bubbles = false;
        }

        // Create and dispatch the event
        var event = new CustomEvent(type, {
            bubbles: bubbles,
            detail: properties
        });

        // Dispatch the event
        element.dispatchEvent(event);
    }

    // Toggle aria-pressed state on a toggle button
    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles
    function _toggleState(target, state) {
        // Bail if no target
        if (!target) {
            return;
        }

        // Get state
        state = _is.boolean(state) ? state : !target.getAttribute('aria-pressed');

        // Set the attribute on target
        target.setAttribute('aria-pressed', state);

        return state;
    }

    // Get percentage
    function _getPercentage(current, max) {
        if (current === 0 || max === 0 || isNaN(current) || isNaN(max)) {
            return 0;
        }
        return (current / max * 100).toFixed(2);
    }

    // Deep extend/merge destination object with N more objects
    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/
    // Removed call to arguments.callee (used explicit function name instead)
    function _extend() {
        // Get arguments
        var objects = arguments;

        // Bail if nothing to merge
        if (!objects.length) {
            return;
        }

        // Return first if specified but nothing to merge
        if (objects.length === 1) {
            return objects[0];
        }

        // First object is the destination
        var destination = Array.prototype.shift.call(objects),
            length = objects.length;

        // Loop through all objects to merge
        for (var i = 0; i < length; i++) {
            var source = objects[i];

            for (var property in source) {
                if (source[property] && source[property].constructor && source[property].constructor === Object) {
                    destination[property] = destination[property] || {};
                    _extend(destination[property], source[property]);
                } else {
                    destination[property] = source[property];
                }
            }
        }

        return destination;
    }

    // Check variable types
    var _is = {
        object: function (input) {
            return input !== null && typeof input === 'object';
        },
        array: function (input) {
            return input !== null && typeof input === 'object' && input.constructor === Array;
        },
        number: function (input) {
            return input !== null && (typeof input === 'number' && !isNaN(input - 0) || typeof input === 'object' && input.constructor === Number);
        },
        string: function (input) {
            return input !== null && (typeof input === 'string' || typeof input === 'object' && input.constructor === String);
        },
        boolean: function (input) {
            return input !== null && typeof input === 'boolean';
        },
        nodeList: function (input) {
            return input !== null && input instanceof NodeList;
        },
        htmlElement: function (input) {
            return input !== null && input instanceof HTMLElement;
        },
        function: function (input) {
            return input !== null && typeof input === 'function';
        },
        undefined: function (input) {
            return input !== null && typeof input === 'undefined';
        }
    };

    // Parse YouTube ID from url
    function _parseYouTubeId(url) {
        var regex = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
        return url.match(regex) ? RegExp.$2 : url;
    }

    // Parse Vimeo ID from url
    function _parseVimeoId(url) {
        var regex = /^.*(vimeo.com\/|video\/)(\d+).*/;
        return url.match(regex) ? RegExp.$2 : url;
    }

    // Fullscreen API
    function _fullscreen() {
        var fullscreen = {
            supportsFullScreen: false,
            isFullScreen: function () {
                return false;
            },
            requestFullScreen: function () {},
            cancelFullScreen: function () {},
            fullScreenEventName: '',
            element: null,
            prefix: ''
        },
            browserPrefixes = 'webkit o moz ms khtml'.split(' ');

        // Check for native support
        if (!_is.undefined(document.cancelFullScreen)) {
            fullscreen.supportsFullScreen = true;
        } else {
            // Check for fullscreen support by vendor prefix
            for (var i = 0, il = browserPrefixes.length; i < il; i++) {
                fullscreen.prefix = browserPrefixes[i];

                if (!_is.undefined(document[fullscreen.prefix + 'CancelFullScreen'])) {
                    fullscreen.supportsFullScreen = true;
                    break;
                } else if (!_is.undefined(document.msExitFullscreen) && document.msFullscreenEnabled) {
                    // Special case for MS (when isn't it?)
                    fullscreen.prefix = 'ms';
                    fullscreen.supportsFullScreen = true;
                    break;
                }
            }
        }

        // Update methods to do something useful
        if (fullscreen.supportsFullScreen) {
            // Yet again Microsoft awesomeness,
            // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes
            fullscreen.fullScreenEventName = fullscreen.prefix === 'ms' ? 'MSFullscreenChange' : fullscreen.prefix + 'fullscreenchange';

            fullscreen.isFullScreen = function (element) {
                if (_is.undefined(element)) {
                    element = document.body;
                }
                switch (this.prefix) {
                    case '':
                        return document.fullscreenElement === element;
                    case 'moz':
                        return document.mozFullScreenElement === element;
                    default:
                        return document[this.prefix + 'FullscreenElement'] === element;
                }
            };
            fullscreen.requestFullScreen = function (element) {
                if (_is.undefined(element)) {
                    element = document.body;
                }
                return this.prefix === '' ? element.requestFullScreen() : element[this.prefix + (this.prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();
            };
            fullscreen.cancelFullScreen = function () {
                return this.prefix === '' ? document.cancelFullScreen() : document[this.prefix + (this.prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();
            };
            fullscreen.element = function () {
                return this.prefix === '' ? document.fullscreenElement : document[this.prefix + 'FullscreenElement'];
            };
        }

        return fullscreen;
    }

    // Local storage
    var _storage = {
        supported: function () {
            if (!('localStorage' in window)) {
                return false;
            }

            // Try to use it (it might be disabled, e.g. user is in private/porn mode)
            // see: https://github.com/Selz/plyr/issues/131
            try {
                // Add test item
                window.localStorage.setItem('___test', 'OK');

                // Get the test item
                var result = window.localStorage.getItem('___test');

                // Clean up
                window.localStorage.removeItem('___test');

                // Check if value matches
                return result === 'OK';
            } catch (e) {
                return false;
            }

            return false;
        }()
    };

    // Player instance
    function Plyr(media, config) {
        var plyr = this,
            timers = {},
            api;

        // Set media
        plyr.media = media;
        var original = media.cloneNode(true);

        // Trigger events, with plyr instance passed
        function _triggerEvent(element, type, bubbles, properties) {
            _event(element, type, bubbles, _extend({}, properties, {
                plyr: api
            }));
        }

        // Debugging
        function _console(type, args) {
            if (config.debug && window.console) {
                args = Array.prototype.slice.call(args);

                if (_is.string(config.logPrefix) && config.logPrefix.length) {
                    args.unshift(config.logPrefix);
                }

                console[type].apply(console, args);
            }
        }
        var _log = function () {
            _console('log', arguments);
        },
            _warn = function () {
            _console('warn', arguments);
        };

        // Log config options
        _log('Config', config);

        // Get icon URL
        function _getIconUrl() {
            return {
                url: config.iconUrl,
                absolute: config.iconUrl.indexOf("http") === 0 || plyr.browser.isIE
            };
        }

        // Build the default HTML
        function _buildControls() {
            // Create html array
            var html = [],
                iconUrl = _getIconUrl(),
                iconPath = (!iconUrl.absolute ? iconUrl.url : '') + '#' + config.iconPrefix;

            // Larger overlaid play button
            if (_inArray(config.controls, 'play-large')) {
                html.push('<button type="button" data-plyr="play" class="plyr__play-large">', '<svg><use xlink:href="' + iconPath + '-play" /></svg>', '<span class="plyr__sr-only">' + config.i18n.play + '</span>', '</button>');
            }

            html.push('<div class="plyr__controls">');

            // Restart button
            if (_inArray(config.controls, 'restart')) {
                html.push('<button type="button" data-plyr="restart">', '<svg><use xlink:href="' + iconPath + '-restart" /></svg>', '<span class="plyr__sr-only">' + config.i18n.restart + '</span>', '</button>');
            }

            // Rewind button
            if (_inArray(config.controls, 'rewind')) {
                html.push('<button type="button" data-plyr="rewind">', '<svg><use xlink:href="' + iconPath + '-rewind" /></svg>', '<span class="plyr__sr-only">' + config.i18n.rewind + '</span>', '</button>');
            }

            // Play Pause button
            // TODO: This should be a toggle button really?
            if (_inArray(config.controls, 'play')) {
                html.push('<button type="button" data-plyr="play">', '<svg><use xlink:href="' + iconPath + '-play" /></svg>', '<span class="plyr__sr-only">' + config.i18n.play + '</span>', '</button>', '<button type="button" data-plyr="pause">', '<svg><use xlink:href="' + iconPath + '-pause" /></svg>', '<span class="plyr__sr-only">' + config.i18n.pause + '</span>', '</button>');
            }

            // Fast forward button
            if (_inArray(config.controls, 'fast-forward')) {
                html.push('<button type="button" data-plyr="fast-forward">', '<svg><use xlink:href="' + iconPath + '-fast-forward" /></svg>', '<span class="plyr__sr-only">' + config.i18n.forward + '</span>', '</button>');
            }

            // Progress
            if (_inArray(config.controls, 'progress')) {
                // Create progress
                html.push('<span class="plyr__progress">', '<label for="seek{id}" class="plyr__sr-only">Seek</label>', '<input id="seek{id}" class="plyr__progress--seek" type="range" min="0" max="100" step="0.1" value="0" data-plyr="seek">', '<progress class="plyr__progress--played" max="100" value="0" role="presentation"></progress>', '<progress class="plyr__progress--buffer" max="100" value="0">', '<span>0</span>% ' + config.i18n.buffered, '</progress>');

                // Seek tooltip
                if (config.tooltips.seek) {
                    html.push('<span class="plyr__tooltip">00:00</span>');
                }

                // Close
                html.push('</span>');
            }

            // Media current time display
            if (_inArray(config.controls, 'current-time')) {
                html.push('<span class="plyr__time">', '<span class="plyr__sr-only">' + config.i18n.currentTime + '</span>', '<span class="plyr__time--current">00:00</span>', '</span>');
            }

            // Media duration display
            if (_inArray(config.controls, 'duration')) {
                html.push('<span class="plyr__time">', '<span class="plyr__sr-only">' + config.i18n.duration + '</span>', '<span class="plyr__time--duration">00:00</span>', '</span>');
            }

            // Toggle mute button
            if (_inArray(config.controls, 'mute')) {
                html.push('<button type="button" data-plyr="mute">', '<svg class="icon--muted"><use xlink:href="' + iconPath + '-muted" /></svg>', '<svg><use xlink:href="' + iconPath + '-volume" /></svg>', '<span class="plyr__sr-only">' + config.i18n.toggleMute + '</span>', '</button>');
            }

            // Volume range control
            if (_inArray(config.controls, 'volume')) {
                html.push('<span class="plyr__volume">', '<label for="volume{id}" class="plyr__sr-only">' + config.i18n.volume + '</label>', '<input id="volume{id}" class="plyr__volume--input" type="range" min="' + config.volumeMin + '" max="' + config.volumeMax + '" value="' + config.volume + '" data-plyr="volume">', '<progress class="plyr__volume--display" max="' + config.volumeMax + '" value="' + config.volumeMin + '" role="presentation"></progress>', '</span>');
            }

            // Toggle captions button
            if (_inArray(config.controls, 'captions')) {
                html.push('<button type="button" data-plyr="captions">', '<svg class="icon--captions-on"><use xlink:href="' + iconPath + '-captions-on" /></svg>', '<svg><use xlink:href="' + iconPath + '-captions-off" /></svg>', '<span class="plyr__sr-only">' + config.i18n.toggleCaptions + '</span>', '</button>');
            }

            // Toggle fullscreen button
            if (_inArray(config.controls, 'fullscreen')) {
                html.push('<button type="button" data-plyr="fullscreen">', '<svg class="icon--exit-fullscreen"><use xlink:href="' + iconPath + '-exit-fullscreen" /></svg>', '<svg><use xlink:href="' + iconPath + '-enter-fullscreen" /></svg>', '<span class="plyr__sr-only">' + config.i18n.toggleFullscreen + '</span>', '</button>');
            }

            // Close everything
            html.push('</div>');

            return html.join('');
        }

        // Setup fullscreen
        function _setupFullscreen() {
            if (!plyr.supported.full) {
                return;
            }

            if ((plyr.type !== 'audio' || config.fullscreen.allowAudio) && config.fullscreen.enabled) {
                // Check for native support
                var nativeSupport = fullscreen.supportsFullScreen;

                if (nativeSupport || config.fullscreen.fallback && !_inFrame()) {
                    _log((nativeSupport ? 'Native' : 'Fallback') + ' fullscreen enabled');

                    // Add styling hook
                    _toggleClass(plyr.container, config.classes.fullscreen.enabled, true);
                } else {
                    _log('Fullscreen not supported and fallback disabled');
                }

                // Toggle state
                if (plyr.buttons && plyr.buttons.fullscreen) {
                    _toggleState(plyr.buttons.fullscreen, false);
                }

                // Setup focus trap
                _focusTrap();
            }
        }

        // Setup captions
        function _setupCaptions() {
            // Bail if not HTML5 video
            if (plyr.type !== 'video') {
                return;
            }

            // Inject the container
            if (!_getElement(config.selectors.captions)) {
                plyr.videoContainer.insertAdjacentHTML('afterbegin', '<div class="' + _getClassname(config.selectors.captions) + '"></div>');
            }

            // Determine if HTML5 textTracks is supported
            plyr.usingTextTracks = false;
            if (plyr.media.textTracks) {
                plyr.usingTextTracks = true;
            }

            // Get URL of caption file if exists
            var captionSrc = '',
                kind,
                children = plyr.media.childNodes;

            for (var i = 0; i < children.length; i++) {
                if (children[i].nodeName.toLowerCase() === 'track') {
                    kind = children[i].kind;
                    if (kind === 'captions' || kind === 'subtitles') {
                        captionSrc = children[i].getAttribute('src');
                    }
                }
            }

            // Record if caption file exists or not
            plyr.captionExists = true;
            if (captionSrc === '') {
                plyr.captionExists = false;
                _log('No caption track found');
            } else {
                _log('Caption track found; URI: ' + captionSrc);
            }

            // If no caption file exists, hide container for caption text
            if (!plyr.captionExists) {
                _toggleClass(plyr.container, config.classes.captions.enabled);
            } else {
                // Turn off native caption rendering to avoid double captions
                // This doesn't seem to work in Safari 7+, so the <track> elements are removed from the dom below
                var tracks = plyr.media.textTracks;
                for (var x = 0; x < tracks.length; x++) {
                    tracks[x].mode = 'hidden';
                }

                // Enable UI
                _showCaptions(plyr);

                // Disable unsupported browsers than report false positive
                // Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1033144
                if (plyr.browser.isIE && plyr.browser.version >= 10 || plyr.browser.isFirefox && plyr.browser.version >= 31) {

                    // Debugging
                    _log('Detected browser with known TextTrack issues - using manual fallback');

                    // Set to false so skips to 'manual' captioning
                    plyr.usingTextTracks = false;
                }

                // Rendering caption tracks
                // Native support required - http://caniuse.com/webvtt
                if (plyr.usingTextTracks) {
                    _log('TextTracks supported');

                    for (var y = 0; y < tracks.length; y++) {
                        var track = tracks[y];

                        if (track.kind === 'captions' || track.kind === 'subtitles') {
                            _on(track, 'cuechange', function () {
                                // Display a cue, if there is one
                                if (this.activeCues[0] && 'text' in this.activeCues[0]) {
                                    _setCaption(this.activeCues[0].getCueAsHTML());
                                } else {
                                    _setCaption();
                                }
                            });
                        }
                    }
                } else {
                    // Caption tracks not natively supported
                    _log('TextTracks not supported so rendering captions manually');

                    // Render captions from array at appropriate time
                    plyr.currentCaption = '';
                    plyr.captions = [];

                    if (captionSrc !== '') {
                        // Create XMLHttpRequest Object
                        var xhr = new XMLHttpRequest();

                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4) {
                                if (xhr.status === 200) {
                                    var captions = [],
                                        caption,
                                        req = xhr.responseText;

                                    //According to webvtt spec, line terminator consists of one of the following
                                    // CRLF (U+000D U+000A), LF (U+000A) or CR (U+000D)
                                    var lineSeparator = '\r\n';
                                    if (req.indexOf(lineSeparator + lineSeparator) === -1) {
                                        if (req.indexOf('\r\r') !== -1) {
                                            lineSeparator = '\r';
                                        } else {
                                            lineSeparator = '\n';
                                        }
                                    }

                                    captions = req.split(lineSeparator + lineSeparator);

                                    for (var r = 0; r < captions.length; r++) {
                                        caption = captions[r];
                                        plyr.captions[r] = [];

                                        // Get the parts of the captions
                                        var parts = caption.split(lineSeparator),
                                            index = 0;

                                        // Incase caption numbers are added
                                        if (parts[index].indexOf(":") === -1) {
                                            index = 1;
                                        }

                                        plyr.captions[r] = [parts[index], parts[index + 1]];
                                    }

                                    // Remove first element ('VTT')
                                    plyr.captions.shift();

                                    _log('Successfully loaded the caption file via AJAX');
                                } else {
                                    _warn(config.logPrefix + 'There was a problem loading the caption file via AJAX');
                                }
                            }
                        };

                        xhr.open('get', captionSrc, true);

                        xhr.send();
                    }
                }
            }
        }

        // Set the current caption
        function _setCaption(caption) {
            /* jshint unused:false */
            var container = _getElement(config.selectors.captions),
                content = document.createElement('span');

            // Empty the container
            container.innerHTML = '';

            // Default to empty
            if (_is.undefined(caption)) {
                caption = '';
            }

            // Set the span content
            if (_is.string(caption)) {
                content.innerHTML = caption.trim();
            } else {
                content.appendChild(caption);
            }

            // Set new caption text
            container.appendChild(content);

            // Force redraw (for Safari)
            var redraw = container.offsetHeight;
        }

        // Captions functions
        // Seek the manual caption time and update UI
        function _seekManualCaptions(time) {
            // Utilities for caption time codes
            function _timecodeCommon(tc, pos) {
                var tcpair = [];
                tcpair = tc.split(' --> ');
                for (var i = 0; i < tcpair.length; i++) {
                    // WebVTT allows for extra meta data after the timestamp line
                    // So get rid of this if it exists
                    tcpair[i] = tcpair[i].replace(/(\d+:\d+:\d+\.\d+).*/, "$1");
                }
                return _subTcSecs(tcpair[pos]);
            }
            function _timecodeMin(tc) {
                return _timecodeCommon(tc, 0);
            }
            function _timecodeMax(tc) {
                return _timecodeCommon(tc, 1);
            }
            function _subTcSecs(tc) {
                if (tc === null || tc === undefined) {
                    return 0;
                } else {
                    var tc1 = [],
                        tc2 = [],
                        seconds;
                    tc1 = tc.split(',');
                    tc2 = tc1[0].split(':');
                    seconds = Math.floor(tc2[0] * 60 * 60) + Math.floor(tc2[1] * 60) + Math.floor(tc2[2]);
                    return seconds;
                }
            }

            // If it's not video, or we're using textTracks, bail.
            if (plyr.usingTextTracks || plyr.type !== 'video' || !plyr.supported.full) {
                return;
            }

            // Reset subcount
            plyr.subcount = 0;

            // Check time is a number, if not use currentTime
            // IE has a bug where currentTime doesn't go to 0
            // https://twitter.com/Sam_Potts/status/573715746506731521
            time = _is.number(time) ? time : plyr.media.currentTime;

            // If there's no subs available, bail
            if (!plyr.captions[plyr.subcount]) {
                return;
            }

            while (_timecodeMax(plyr.captions[plyr.subcount][0]) < time.toFixed(1)) {
                plyr.subcount++;
                if (plyr.subcount > plyr.captions.length - 1) {
                    plyr.subcount = plyr.captions.length - 1;
                    break;
                }
            }

            // Check if the next caption is in the current time range
            if (plyr.media.currentTime.toFixed(1) >= _timecodeMin(plyr.captions[plyr.subcount][0]) && plyr.media.currentTime.toFixed(1) <= _timecodeMax(plyr.captions[plyr.subcount][0])) {
                plyr.currentCaption = plyr.captions[plyr.subcount][1];

                // Render the caption
                _setCaption(plyr.currentCaption);
            } else {
                _setCaption();
            }
        }

        // Display captions container and button (for initialization)
        function _showCaptions() {
            // If there's no caption toggle, bail
            if (!plyr.buttons.captions) {
                return;
            }

            _toggleClass(plyr.container, config.classes.captions.enabled, true);

            // Try to load the value from storage
            var active = plyr.storage.captionsEnabled;

            // Otherwise fall back to the default config
            if (!_is.boolean(active)) {
                active = config.captions.defaultActive;
            }

            if (active) {
                _toggleClass(plyr.container, config.classes.captions.active, true);
                _toggleState(plyr.buttons.captions, true);
            }
        }

        // Find all elements
        function _getElements(selector) {
            return plyr.container.querySelectorAll(selector);
        }

        // Find a single element
        function _getElement(selector) {
            return _getElements(selector)[0];
        }

        // Determine if we're in an iframe
        function _inFrame() {
            try {
                return window.self !== window.top;
            } catch (e) {
                return true;
            }
        }

        // Trap focus inside container
        function _focusTrap() {
            var tabbables = _getElements('input:not([disabled]), button:not([disabled])'),
                first = tabbables[0],
                last = tabbables[tabbables.length - 1];

            function _checkFocus(event) {
                // If it is TAB
                if (event.which === 9 && plyr.isFullscreen) {
                    if (event.target === last && !event.shiftKey) {
                        // Move focus to first element that can be tabbed if Shift isn't used
                        event.preventDefault();
                        first.focus();
                    } else if (event.target === first && event.shiftKey) {
                        // Move focus to last element that can be tabbed if Shift is used
                        event.preventDefault();
                        last.focus();
                    }
                }
            }

            // Bind the handler
            _on(plyr.container, 'keydown', _checkFocus);
        }

        // Add elements to HTML5 media (source, tracks, etc)
        function _insertChildElements(type, attributes) {
            if (_is.string(attributes)) {
                _insertElement(type, plyr.media, { src: attributes });
            } else if (attributes.constructor === Array) {
                for (var i = attributes.length - 1; i >= 0; i--) {
                    _insertElement(type, plyr.media, attributes[i]);
                }
            }
        }

        // Insert controls
        function _injectControls() {
            // Sprite
            if (config.loadSprite) {
                var iconUrl = _getIconUrl();

                // Only load external sprite using AJAX
                if (iconUrl.absolute) {
                    _log('AJAX loading absolute SVG sprite' + (plyr.browser.isIE ? ' (due to IE)' : ''));
                    loadSprite(iconUrl.url, "sprite-plyr");
                } else {
                    _log('Sprite will be used as external resource directly');
                }
            }

            // Make a copy of the html
            var html = config.html;

            // Insert custom video controls
            _log('Injecting custom controls');

            // If no controls are specified, create default
            if (!html) {
                html = _buildControls();
            }

            // Replace seek time instances
            html = _replaceAll(html, '{seektime}', config.seekTime);

            // Replace all id references with random numbers
            html = _replaceAll(html, '{id}', Math.floor(Math.random() * 10000));

            // Controls container
            var target;

            // Inject to custom location
            if (_is.string(config.selectors.controls.container)) {
                target = document.querySelector(config.selectors.controls.container);
            }

            // Inject into the container by default
            if (!_is.htmlElement(target)) {
                target = plyr.container;
            }

            // Inject controls HTML
            target.insertAdjacentHTML('beforeend', html);

            // Setup tooltips
            if (config.tooltips.controls) {
                var labels = _getElements([config.selectors.controls.wrapper, ' ', config.selectors.labels, ' .', config.classes.hidden].join(''));

                for (var i = labels.length - 1; i >= 0; i--) {
                    var label = labels[i];

                    _toggleClass(label, config.classes.hidden, false);
                    _toggleClass(label, config.classes.tooltip, true);
                }
            }
        }

        // Find the UI controls and store references
        function _findElements() {
            try {
                plyr.controls = _getElement(config.selectors.controls.wrapper);

                // Buttons
                plyr.buttons = {};
                plyr.buttons.seek = _getElement(config.selectors.buttons.seek);
                plyr.buttons.play = _getElements(config.selectors.buttons.play);
                plyr.buttons.pause = _getElement(config.selectors.buttons.pause);
                plyr.buttons.restart = _getElement(config.selectors.buttons.restart);
                plyr.buttons.rewind = _getElement(config.selectors.buttons.rewind);
                plyr.buttons.forward = _getElement(config.selectors.buttons.forward);
                plyr.buttons.fullscreen = _getElement(config.selectors.buttons.fullscreen);

                // Inputs
                plyr.buttons.mute = _getElement(config.selectors.buttons.mute);
                plyr.buttons.captions = _getElement(config.selectors.buttons.captions);

                // Progress
                plyr.progress = {};
                plyr.progress.container = _getElement(config.selectors.progress.container);

                // Progress - Buffering
                plyr.progress.buffer = {};
                plyr.progress.buffer.bar = _getElement(config.selectors.progress.buffer);
                plyr.progress.buffer.text = plyr.progress.buffer.bar && plyr.progress.buffer.bar.getElementsByTagName('span')[0];

                // Progress - Played
                plyr.progress.played = _getElement(config.selectors.progress.played);

                // Seek tooltip
                plyr.progress.tooltip = plyr.progress.container && plyr.progress.container.querySelector('.' + config.classes.tooltip);

                // Volume
                plyr.volume = {};
                plyr.volume.input = _getElement(config.selectors.volume.input);
                plyr.volume.display = _getElement(config.selectors.volume.display);

                // Timing
                plyr.duration = _getElement(config.selectors.duration);
                plyr.currentTime = _getElement(config.selectors.currentTime);
                plyr.seekTime = _getElements(config.selectors.seekTime);

                return true;
            } catch (e) {
                _warn('It looks like there is a problem with your controls HTML');

                // Restore native video controls
                _toggleNativeControls(true);

                return false;
            }
        }

        // Toggle style hook
        function _toggleStyleHook() {
            _toggleClass(plyr.container, config.selectors.container.replace('.', ''), plyr.supported.full);
        }

        // Toggle native controls
        function _toggleNativeControls(toggle) {
            if (toggle && _inArray(config.types.html5, plyr.type)) {
                plyr.media.setAttribute('controls', '');
            } else {
                plyr.media.removeAttribute('controls');
            }
        }

        // Setup aria attribute for play and iframe title
        function _setTitle(iframe) {
            // Find the current text
            var label = config.i18n.play;

            // If there's a media title set, use that for the label
            if (_is.string(config.title) && config.title.length) {
                label += ', ' + config.title;

                // Set container label
                plyr.container.setAttribute('aria-label', config.title);
            }

            // If there's a play button, set label
            if (plyr.supported.full && plyr.buttons.play) {
                for (var i = plyr.buttons.play.length - 1; i >= 0; i--) {
                    plyr.buttons.play[i].setAttribute('aria-label', label);
                }
            }

            // Set iframe title
            // https://github.com/Selz/plyr/issues/124
            if (_is.htmlElement(iframe)) {
                iframe.setAttribute('title', config.i18n.frameTitle.replace('{title}', config.title));
            }
        }

        // Setup localStorage
        function _setupStorage() {
            var value = null;
            plyr.storage = {};

            // Bail if we don't have localStorage support or it's disabled
            if (!_storage.supported || !config.storage.enabled) {
                return;
            }

            // Clean up old volume
            // https://github.com/Selz/plyr/issues/171
            window.localStorage.removeItem('plyr-volume');

            // load value from the current key
            value = window.localStorage.getItem(config.storage.key);

            if (!value) {
                // Key wasn't set (or had been cleared), move along
                return;
            } else if (/^\d+(\.\d+)?$/.test(value)) {
                // If value is a number, it's probably volume from an older
                // version of plyr. See: https://github.com/Selz/plyr/pull/313
                // Update the key to be JSON
                _updateStorage({ volume: parseFloat(value) });
            } else {
                // Assume it's JSON from this or a later version of plyr
                plyr.storage = JSON.parse(value);
            }
        }

        // Save a value back to local storage
        function _updateStorage(value) {
            // Bail if we don't have localStorage support or it's disabled
            if (!_storage.supported || !config.storage.enabled) {
                return;
            }

            // Update the working copy of the values
            _extend(plyr.storage, value);

            // Update storage
            window.localStorage.setItem(config.storage.key, JSON.stringify(plyr.storage));
        }

        // Setup media
        function _setupMedia() {
            // If there's no media, bail
            if (!plyr.media) {
                _warn('No media element found!');
                return;
            }

            if (plyr.supported.full) {
                // Add type class
                _toggleClass(plyr.container, config.classes.type.replace('{0}', plyr.type), true);

                // Add video class for embeds
                // This will require changes if audio embeds are added
                if (_inArray(config.types.embed, plyr.type)) {
                    _toggleClass(plyr.container, config.classes.type.replace('{0}', 'video'), true);
                }

                // If there's no autoplay attribute, assume the video is stopped and add state class
                _toggleClass(plyr.container, config.classes.stopped, config.autoplay);

                // Add iOS class
                _toggleClass(plyr.ontainer, config.classes.isIos, plyr.browser.isIos);

                // Add touch class
                _toggleClass(plyr.container, config.classes.isTouch, plyr.browser.isTouch);

                // Inject the player wrapper
                if (plyr.type === 'video') {
                    // Create the wrapper div
                    var wrapper = document.createElement('div');
                    wrapper.setAttribute('class', config.classes.videoWrapper);

                    // Wrap the video in a container
                    _wrap(plyr.media, wrapper);

                    // Cache the container
                    plyr.videoContainer = wrapper;
                }
            }

            // Embeds
            if (_inArray(config.types.embed, plyr.type)) {
                _setupEmbed();
            }
        }

        // Setup YouTube/Vimeo
        function _setupEmbed() {
            var container = document.createElement('div'),
                mediaId,
                id = plyr.type + '-' + Math.floor(Math.random() * 10000);

            // Parse IDs from URLs if supplied
            switch (plyr.type) {
                case 'youtube':
                    mediaId = _parseYouTubeId(plyr.embedId);
                    break;

                case 'vimeo':
                    mediaId = _parseVimeoId(plyr.embedId);
                    break;

                default:
                    mediaId = plyr.embedId;
            }

            // Remove old containers
            var containers = _getElements('[id^="' + plyr.type + '-"]');
            for (var i = containers.length - 1; i >= 0; i--) {
                _remove(containers[i]);
            }

            // Add embed class for responsive
            _toggleClass(plyr.media, config.classes.videoWrapper, true);
            _toggleClass(plyr.media, config.classes.embedWrapper, true);

            if (plyr.type === 'youtube') {
                // Create the YouTube container
                plyr.media.appendChild(container);

                // Set ID
                container.setAttribute('id', id);

                // Setup API
                if (_is.object(window.YT)) {
                    _youTubeReady(mediaId, container);
                } else {
                    // Load the API
                    _injectScript(config.urls.youtube.api);

                    // Setup callback for the API
                    window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];

                    // Add to queue
                    window.onYouTubeReadyCallbacks.push(function () {
                        _youTubeReady(mediaId, container);
                    });

                    // Set callback to process queue
                    window.onYouTubeIframeAPIReady = function () {
                        window.onYouTubeReadyCallbacks.forEach(function (callback) {
                            callback();
                        });
                    };
                }
            } else if (plyr.type === 'vimeo') {
                // Vimeo needs an extra div to hide controls on desktop (which has full support)
                if (plyr.supported.full) {
                    plyr.media.appendChild(container);
                } else {
                    container = plyr.media;
                }

                // Set ID
                container.setAttribute('id', id);

                // Load the API if not already
                if (!_is.object(window.Vimeo)) {
                    _injectScript(config.urls.vimeo.api);

                    // Wait for fragaloop load
                    var vimeoTimer = window.setInterval(function () {
                        if (_is.object(window.Vimeo)) {
                            window.clearInterval(vimeoTimer);
                            _vimeoReady(mediaId, container);
                        }
                    }, 50);
                } else {
                    _vimeoReady(mediaId, container);
                }
            } else if (plyr.type === 'soundcloud') {
                // TODO: Currently unsupported and undocumented
                // Inject the iframe
                var soundCloud = document.createElement('iframe');

                // Watch for iframe load
                soundCloud.loaded = false;
                _on(soundCloud, 'load', function () {
                    soundCloud.loaded = true;
                });

                _setAttributes(soundCloud, {
                    'src': 'https://w.soundcloud.com/player/?url=https://api.soundcloud.com/tracks/' + mediaId,
                    'id': id
                });

                container.appendChild(soundCloud);
                plyr.media.appendChild(container);

                // Load the API if not already
                if (!window.SC) {
                    _injectScript(config.urls.soundcloud.api);
                }

                // Wait for SC load
                var soundCloudTimer = window.setInterval(function () {
                    if (window.SC && soundCloud.loaded) {
                        window.clearInterval(soundCloudTimer);
                        _soundcloudReady.call(soundCloud);
                    }
                }, 50);
            }
        }

        // When embeds are ready
        function _embedReady() {
            // Setup the UI and call ready if full support
            if (plyr.supported.full) {
                _setupInterface();
                _ready();
            }

            // Set title
            _setTitle(_getElement('iframe'));
        }

        // Handle YouTube API ready
        function _youTubeReady(videoId, container) {
            // Setup instance
            // https://developers.google.com/youtube/iframe_api_reference
            plyr.embed = new window.YT.Player(container.id, {
                videoId: videoId,
                playerVars: {
                    autoplay: config.autoplay ? 1 : 0,
                    controls: plyr.supported.full ? 0 : 1,
                    rel: 0,
                    showinfo: 0,
                    iv_load_policy: 3,
                    cc_load_policy: config.captions.defaultActive ? 1 : 0,
                    cc_lang_pref: 'en',
                    wmode: 'transparent',
                    modestbranding: 1,
                    disablekb: 1,
                    origin: '*' // https://code.google.com/p/gdata-issues/issues/detail?id=5788#c45
                },
                events: {
                    'onError': function (event) {
                        _triggerEvent(plyr.container, 'error', true, {
                            code: event.data,
                            embed: event.target
                        });
                    },
                    'onReady': function (event) {
                        // Get the instance
                        var instance = event.target;

                        // Create a faux HTML5 API using the YouTube API
                        plyr.media.play = function () {
                            instance.playVideo();
                            plyr.media.paused = false;
                        };
                        plyr.media.pause = function () {
                            instance.pauseVideo();
                            plyr.media.paused = true;
                        };
                        plyr.media.stop = function () {
                            instance.stopVideo();
                            plyr.media.paused = true;
                        };
                        plyr.media.duration = instance.getDuration();
                        plyr.media.paused = true;
                        plyr.media.currentTime = 0;
                        plyr.media.muted = instance.isMuted();

                        // Set title
                        config.title = instance.getVideoData().title;

                        // Set the tabindex
                        if (plyr.supported.full) {
                            plyr.media.querySelector('iframe').setAttribute('tabindex', '-1');
                        }

                        // Update UI
                        _embedReady();

                        // Trigger timeupdate
                        _triggerEvent(plyr.media, 'timeupdate');

                        // Trigger timeupdate
                        _triggerEvent(plyr.media, 'durationchange');

                        // Reset timer
                        window.clearInterval(timers.buffering);

                        // Setup buffering
                        timers.buffering = window.setInterval(function () {
                            // Get loaded % from YouTube
                            plyr.media.buffered = instance.getVideoLoadedFraction();

                            // Trigger progress only when we actually buffer something
                            if (plyr.media.lastBuffered === null || plyr.media.lastBuffered < plyr.media.buffered) {
                                _triggerEvent(plyr.media, 'progress');
                            }

                            // Set last buffer point
                            plyr.media.lastBuffered = plyr.media.buffered;

                            // Bail if we're at 100%
                            if (plyr.media.buffered === 1) {
                                window.clearInterval(timers.buffering);

                                // Trigger event
                                _triggerEvent(plyr.media, 'canplaythrough');
                            }
                        }, 200);
                    },
                    'onStateChange': function (event) {
                        // Get the instance
                        var instance = event.target;

                        // Reset timer
                        window.clearInterval(timers.playing);

                        // Handle events
                        // -1   Unstarted
                        // 0    Ended
                        // 1    Playing
                        // 2    Paused
                        // 3    Buffering
                        // 5    Video cued
                        switch (event.data) {
                            case 0:
                                plyr.media.paused = true;
                                _triggerEvent(plyr.media, 'ended');
                                break;

                            case 1:
                                plyr.media.paused = false;

                                // If we were seeking, fire seeked event
                                if (plyr.media.seeking) {
                                    _triggerEvent(plyr.media, 'seeked');
                                }

                                plyr.media.seeking = false;
                                _triggerEvent(plyr.media, 'play');
                                _triggerEvent(plyr.media, 'playing');

                                // Poll to get playback progress
                                timers.playing = window.setInterval(function () {
                                    // Set the current time
                                    plyr.media.currentTime = instance.getCurrentTime();

                                    // Trigger timeupdate
                                    _triggerEvent(plyr.media, 'timeupdate');
                                }, 100);

                                // Check duration again due to YouTube bug
                                // https://github.com/Selz/plyr/issues/374
                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690
                                if (plyr.media.duration !== instance.getDuration()) {
                                    plyr.media.duration = instance.getDuration();
                                    _triggerEvent(plyr.media, 'durationchange');
                                }

                                break;

                            case 2:
                                plyr.media.paused = true;
                                _triggerEvent(plyr.media, 'pause');
                                break;
                        }

                        _triggerEvent(plyr.container, 'statechange', false, {
                            code: event.data
                        });
                    }
                }
            });
        }

        // Vimeo ready
        function _vimeoReady(mediaId, container) {
            // Setup instance
            // https://github.com/vimeo/player.js
            plyr.embed = new window.Vimeo.Player(container, {
                id: parseInt(mediaId),
                loop: config.loop,
                autoplay: config.autoplay,
                byline: false,
                portrait: false,
                title: false
            });

            // Create a faux HTML5 API using the Vimeo API
            plyr.media.play = function () {
                plyr.embed.play();
                plyr.media.paused = false;
            };
            plyr.media.pause = function () {
                plyr.embed.pause();
                plyr.media.paused = true;
            };
            plyr.media.stop = function () {
                plyr.embed.stop();
                plyr.media.paused = true;
            };

            plyr.media.paused = true;
            plyr.media.currentTime = 0;

            // Update UI
            _embedReady();

            plyr.embed.getCurrentTime().then(function (value) {
                plyr.media.currentTime = value;

                // Trigger timeupdate
                _triggerEvent(plyr.media, 'timeupdate');
            });

            plyr.embed.getDuration().then(function (value) {
                plyr.media.duration = value;

                // Trigger timeupdate
                _triggerEvent(plyr.media, 'durationchange');
            });

            // TODO: Captions
            /*if (config.captions.defaultActive) {
                plyr.embed.enableTextTrack('en');
            }*/

            plyr.embed.on('loaded', function () {
                // Fix keyboard focus issues
                // https://github.com/Selz/plyr/issues/317
                if (_is.htmlElement(plyr.embed.element) && plyr.supported.full) {
                    plyr.embed.element.setAttribute('tabindex', '-1');
                }
            });

            plyr.embed.on('play', function () {
                plyr.media.paused = false;
                _triggerEvent(plyr.media, 'play');
                _triggerEvent(plyr.media, 'playing');
            });

            plyr.embed.on('pause', function () {
                plyr.media.paused = true;
                _triggerEvent(plyr.media, 'pause');
            });

            plyr.embed.on('timeupdate', function (data) {
                plyr.media.seeking = false;
                plyr.media.currentTime = data.seconds;
                _triggerEvent(plyr.media, 'timeupdate');
            });

            plyr.embed.on('progress', function (data) {
                plyr.media.buffered = data.percent;
                _triggerEvent(plyr.media, 'progress');

                if (parseInt(data.percent) === 1) {
                    // Trigger event
                    _triggerEvent(plyr.media, 'canplaythrough');
                }
            });

            plyr.embed.on('seeked', function () {
                plyr.media.seeking = false;
                _triggerEvent(plyr.media, 'seeked');
                _triggerEvent(plyr.media, 'play');
            });

            plyr.embed.on('ended', function () {
                plyr.media.paused = true;
                _triggerEvent(plyr.media, 'ended');
            });
        }

        // Soundcloud ready
        function _soundcloudReady() {
            /* jshint validthis: true */
            plyr.embed = window.SC.Widget(this);

            // Setup on ready
            plyr.embed.bind(window.SC.Widget.Events.READY, function () {
                // Create a faux HTML5 API using the Soundcloud API
                plyr.media.play = function () {
                    plyr.embed.play();
                    plyr.media.paused = false;
                };
                plyr.media.pause = function () {
                    plyr.embed.pause();
                    plyr.media.paused = true;
                };
                plyr.media.stop = function () {
                    plyr.embed.seekTo(0);
                    plyr.embed.pause();
                    plyr.media.paused = true;
                };

                plyr.media.paused = true;
                plyr.media.currentTime = 0;

                plyr.embed.getDuration(function (value) {
                    plyr.media.duration = value / 1000;

                    // Update UI
                    _embedReady();
                });

                plyr.embed.getPosition(function (value) {
                    plyr.media.currentTime = value;

                    // Trigger timeupdate
                    _triggerEvent(plyr.media, 'timeupdate');
                });

                plyr.embed.bind(window.SC.Widget.Events.PLAY, function () {
                    plyr.media.paused = false;
                    _triggerEvent(plyr.media, 'play');
                    _triggerEvent(plyr.media, 'playing');
                });

                plyr.embed.bind(window.SC.Widget.Events.PAUSE, function () {
                    plyr.media.paused = true;
                    _triggerEvent(plyr.media, 'pause');
                });

                plyr.embed.bind(window.SC.Widget.Events.PLAY_PROGRESS, function (data) {
                    plyr.media.seeking = false;
                    plyr.media.currentTime = data.currentPosition / 1000;
                    _triggerEvent(plyr.media, 'timeupdate');
                });

                plyr.embed.bind(window.SC.Widget.Events.LOAD_PROGRESS, function (data) {
                    plyr.media.buffered = data.loadProgress;
                    _triggerEvent(plyr.media, 'progress');

                    if (parseInt(data.loadProgress) === 1) {
                        // Trigger event
                        _triggerEvent(plyr.media, 'canplaythrough');
                    }
                });

                plyr.embed.bind(window.SC.Widget.Events.FINISH, function () {
                    plyr.media.paused = true;
                    _triggerEvent(plyr.media, 'ended');
                });
            });
        }

        // Play media
        function _play() {
            if ('play' in plyr.media) {
                plyr.media.play();
            }
        }

        // Pause media
        function _pause() {
            if ('pause' in plyr.media) {
                plyr.media.pause();
            }
        }

        // Toggle playback
        function _togglePlay(toggle) {
            // True toggle
            if (!_is.boolean(toggle)) {
                toggle = plyr.media.paused;
            }

            if (toggle) {
                _play();
            } else {
                _pause();
            }

            return toggle;
        }

        // Rewind
        function _rewind(seekTime) {
            // Use default if needed
            if (!_is.number(seekTime)) {
                seekTime = config.seekTime;
            }
            _seek(plyr.media.currentTime - seekTime);
        }

        // Fast forward
        function _forward(seekTime) {
            // Use default if needed
            if (!_is.number(seekTime)) {
                seekTime = config.seekTime;
            }
            _seek(plyr.media.currentTime + seekTime);
        }

        // Seek to time
        // The input parameter can be an event or a number
        function _seek(input) {
            var targetTime = 0,
                paused = plyr.media.paused,
                duration = _getDuration();

            if (_is.number(input)) {
                targetTime = input;
            } else if (_is.object(input) && _inArray(['input', 'change'], input.type)) {
                // It's the seek slider
                // Seek to the selected time
                targetTime = input.target.value / input.target.max * duration;
            }

            // Normalise targetTime
            if (targetTime < 0) {
                targetTime = 0;
            } else if (targetTime > duration) {
                targetTime = duration;
            }

            // Update seek range and progress
            _updateSeekDisplay(targetTime);

            // Set the current time
            // Try/catch incase the media isn't set and we're calling seek() from source() and IE moans
            try {
                plyr.media.currentTime = targetTime.toFixed(4);
            } catch (e) {}

            // Embeds
            if (_inArray(config.types.embed, plyr.type)) {
                switch (plyr.type) {
                    case 'youtube':
                        plyr.embed.seekTo(targetTime);
                        break;

                    case 'vimeo':
                        // Round to nearest second for vimeo
                        plyr.embed.setCurrentTime(targetTime.toFixed(0));
                        break;

                    case 'soundcloud':
                        plyr.embed.seekTo(targetTime * 1000);
                        break;
                }

                if (paused) {
                    _pause();
                }

                // Trigger timeupdate
                _triggerEvent(plyr.media, 'timeupdate');

                // Set seeking flag
                plyr.media.seeking = true;

                // Trigger seeking
                _triggerEvent(plyr.media, 'seeking');
            }

            // Logging
            _log('Seeking to ' + plyr.media.currentTime + ' seconds');

            // Special handling for 'manual' captions
            _seekManualCaptions(targetTime);
        }

        // Get the duration (or custom if set)
        function _getDuration() {
            // It should be a number, but parse it just incase
            var duration = parseInt(config.duration),


            // True duration
            mediaDuration = 0;

            // Only if duration available
            if (plyr.media.duration !== null && !isNaN(plyr.media.duration)) {
                mediaDuration = plyr.media.duration;
            }

            // If custom duration is funky, use regular duration
            return isNaN(duration) ? mediaDuration : duration;
        }

        // Check playing state
        function _checkPlaying() {
            _toggleClass(plyr.container, config.classes.playing, !plyr.media.paused);

            _toggleClass(plyr.container, config.classes.stopped, plyr.media.paused);

            _toggleControls(plyr.media.paused);
        }

        // Save scroll position
        function _saveScrollPosition() {
            scroll = {
                x: window.pageXOffset || 0,
                y: window.pageYOffset || 0
            };
        }

        // Restore scroll position
        function _restoreScrollPosition() {
            window.scrollTo(scroll.x, scroll.y);
        }

        // Toggle fullscreen
        function _toggleFullscreen(event) {
            // Check for native support
            var nativeSupport = fullscreen.supportsFullScreen;

            if (nativeSupport) {
                // If it's a fullscreen change event, update the UI
                if (event && event.type === fullscreen.fullScreenEventName) {
                    plyr.isFullscreen = fullscreen.isFullScreen(plyr.container);
                } else {
                    // Else it's a user request to enter or exit
                    if (!fullscreen.isFullScreen(plyr.container)) {
                        // Save scroll position
                        _saveScrollPosition();

                        // Request full screen
                        fullscreen.requestFullScreen(plyr.container);
                    } else {
                        // Bail from fullscreen
                        fullscreen.cancelFullScreen();
                    }

                    // Check if we're actually full screen (it could fail)
                    plyr.isFullscreen = fullscreen.isFullScreen(plyr.container);

                    return;
                }
            } else {
                // Otherwise, it's a simple toggle
                plyr.isFullscreen = !plyr.isFullscreen;

                // Bind/unbind escape key
                document.body.style.overflow = plyr.isFullscreen ? 'hidden' : '';
            }

            // Set class hook
            _toggleClass(plyr.container, config.classes.fullscreen.active, plyr.isFullscreen);

            // Trap focus
            _focusTrap(plyr.isFullscreen);

            // Set button state
            if (plyr.buttons && plyr.buttons.fullscreen) {
                _toggleState(plyr.buttons.fullscreen, plyr.isFullscreen);
            }

            // Trigger an event
            _triggerEvent(plyr.container, plyr.isFullscreen ? 'enterfullscreen' : 'exitfullscreen', true);

            // Restore scroll position
            if (!plyr.isFullscreen && nativeSupport) {
                _restoreScrollPosition();
            }
        }

        // Mute
        function _toggleMute(muted) {
            // If the method is called without parameter, toggle based on current value
            if (!_is.boolean(muted)) {
                muted = !plyr.media.muted;
            }

            // Set button state
            _toggleState(plyr.buttons.mute, muted);

            // Set mute on the player
            plyr.media.muted = muted;

            // If volume is 0 after unmuting, set to default
            if (plyr.media.volume === 0) {
                _setVolume(config.volume);
            }

            // Embeds
            if (_inArray(config.types.embed, plyr.type)) {
                // YouTube
                switch (plyr.type) {
                    case 'youtube':
                        plyr.embed[plyr.media.muted ? 'mute' : 'unMute']();
                        break;

                    case 'vimeo':
                    case 'soundcloud':
                        plyr.embed.setVolume(plyr.media.muted ? 0 : parseFloat(config.volume / config.volumeMax));
                        break;
                }

                // Trigger volumechange for embeds
                _triggerEvent(plyr.media, 'volumechange');
            }
        }

        // Set volume
        function _setVolume(volume) {
            var max = config.volumeMax,
                min = config.volumeMin;

            // Load volume from storage if no value specified
            if (_is.undefined(volume)) {
                volume = plyr.storage.volume;
            }

            // Use config if all else fails
            if (volume === null || isNaN(volume)) {
                volume = config.volume;
            }

            // Maximum is volumeMax
            if (volume > max) {
                volume = max;
            }
            // Minimum is volumeMin
            if (volume < min) {
                volume = min;
            }

            // Set the player volume
            plyr.media.volume = parseFloat(volume / max);

            // Set the display
            if (plyr.volume.display) {
                plyr.volume.display.value = volume;
            }

            // Embeds
            if (_inArray(config.types.embed, plyr.type)) {
                switch (plyr.type) {
                    case 'youtube':
                        plyr.embed.setVolume(plyr.media.volume * 100);
                        break;

                    case 'vimeo':
                    case 'soundcloud':
                        plyr.embed.setVolume(plyr.media.volume);
                        break;
                }

                // Trigger volumechange for embeds
                _triggerEvent(plyr.media, 'volumechange');
            }

            // Toggle muted state
            if (volume === 0) {
                plyr.media.muted = true;
            } else if (plyr.media.muted && volume > 0) {
                _toggleMute();
            }
        }

        // Increase volume
        function _increaseVolume(step) {
            var volume = plyr.media.muted ? 0 : plyr.media.volume * config.volumeMax;

            if (!_is.number(step)) {
                step = config.volumeStep;
            }

            _setVolume(volume + step);
        }

        // Decrease volume
        function _decreaseVolume(step) {
            var volume = plyr.media.muted ? 0 : plyr.media.volume * config.volumeMax;

            if (!_is.number(step)) {
                step = config.volumeStep;
            }

            _setVolume(volume - step);
        }

        // Update volume UI and storage
        function _updateVolume() {
            // Get the current volume
            var volume = plyr.media.muted ? 0 : plyr.media.volume * config.volumeMax;

            // Update the <input type="range"> if present
            if (plyr.supported.full) {
                if (plyr.volume.input) {
                    plyr.volume.input.value = volume;
                }
                if (plyr.volume.display) {
                    plyr.volume.display.value = volume;
                }
            }

            // Update the volume in storage
            _updateStorage({ volume: volume });

            // Toggle class if muted
            _toggleClass(plyr.container, config.classes.muted, volume === 0);

            // Update checkbox for mute state
            if (plyr.supported.full && plyr.buttons.mute) {
                _toggleState(plyr.buttons.mute, volume === 0);
            }
        }

        // Toggle captions
        function _toggleCaptions(show) {
            // If there's no full support, or there's no caption toggle
            if (!plyr.supported.full || !plyr.buttons.captions) {
                return;
            }

            // If the method is called without parameter, toggle based on current value
            if (!_is.boolean(show)) {
                show = plyr.container.className.indexOf(config.classes.captions.active) === -1;
            }

            // Set global
            plyr.captionsEnabled = show;

            // Toggle state
            _toggleState(plyr.buttons.captions, plyr.captionsEnabled);

            // Add class hook
            _toggleClass(plyr.container, config.classes.captions.active, plyr.captionsEnabled);

            // Trigger an event
            _triggerEvent(plyr.container, plyr.captionsEnabled ? 'captionsenabled' : 'captionsdisabled', true);

            // Save captions state to localStorage
            _updateStorage({ captionsEnabled: plyr.captionsEnabled });
        }

        // Check if media is loading
        function _checkLoading(event) {
            var loading = event.type === 'waiting';

            // Clear timer
            clearTimeout(timers.loading);

            // Timer to prevent flicker when seeking
            timers.loading = setTimeout(function () {
                // Toggle container class hook
                _toggleClass(plyr.container, config.classes.loading, loading);

                // Show controls if loading, hide if done
                _toggleControls(loading);
            }, loading ? 250 : 0);
        }

        // Update <progress> elements
        function _updateProgress(event) {
            if (!plyr.supported.full) {
                return;
            }

            var progress = plyr.progress.played,
                value = 0,
                duration = _getDuration();

            if (event) {
                switch (event.type) {
                    // Video playing
                    case 'timeupdate':
                    case 'seeking':
                        if (plyr.controls.pressed) {
                            return;
                        }

                        value = _getPercentage(plyr.media.currentTime, duration);

                        // Set seek range value only if it's a 'natural' time event
                        if (event.type === 'timeupdate' && plyr.buttons.seek) {
                            plyr.buttons.seek.value = value;
                        }

                        break;

                    // Check buffer status
                    case 'playing':
                    case 'progress':
                        progress = plyr.progress.buffer;
                        value = function () {
                            var buffered = plyr.media.buffered;

                            if (buffered && buffered.length) {
                                // HTML5
                                return _getPercentage(buffered.end(0), duration);
                            } else if (_is.number(buffered)) {
                                // YouTube returns between 0 and 1
                                return buffered * 100;
                            }

                            return 0;
                        }();

                        break;
                }
            }

            // Set values
            _setProgress(progress, value);
        }

        // Set <progress> value
        function _setProgress(progress, value) {
            if (!plyr.supported.full) {
                return;
            }

            // Default to 0
            if (_is.undefined(value)) {
                value = 0;
            }
            // Default to buffer or bail
            if (_is.undefined(progress)) {
                if (plyr.progress && plyr.progress.buffer) {
                    progress = plyr.progress.buffer;
                } else {
                    return;
                }
            }

            // One progress element passed
            if (_is.htmlElement(progress)) {
                progress.value = value;
            } else if (progress) {
                // Object of progress + text element
                if (progress.bar) {
                    progress.bar.value = value;
                }
                if (progress.text) {
                    progress.text.innerHTML = value;
                }
            }
        }

        // Update the displayed time
        function _updateTimeDisplay(time, element) {
            // Bail if there's no duration display
            if (!element) {
                return;
            }

            // Fallback to 0
            if (isNaN(time)) {
                time = 0;
            }

            plyr.secs = parseInt(time % 60);
            plyr.mins = parseInt(time / 60 % 60);
            plyr.hours = parseInt(time / 60 / 60 % 60);

            // Do we need to display hours?
            var displayHours = parseInt(_getDuration() / 60 / 60 % 60) > 0;

            // Ensure it's two digits. For example, 03 rather than 3.
            plyr.secs = ('0' + plyr.secs).slice(-2);
            plyr.mins = ('0' + plyr.mins).slice(-2);

            // Render
            element.innerHTML = (displayHours ? plyr.hours + ':' : '') + plyr.mins + ':' + plyr.secs;
        }

        // Show the duration on metadataloaded
        function _displayDuration() {
            if (!plyr.supported.full) {
                return;
            }

            // Determine duration
            var duration = _getDuration() || 0;

            // If there's only one time display, display duration there
            if (!plyr.duration && config.displayDuration && plyr.media.paused) {
                _updateTimeDisplay(duration, plyr.currentTime);
            }

            // If there's a duration element, update content
            if (plyr.duration) {
                _updateTimeDisplay(duration, plyr.duration);
            }

            // Update the tooltip (if visible)
            _updateSeekTooltip();
        }

        // Handle time change event
        function _timeUpdate(event) {
            // Duration
            _updateTimeDisplay(plyr.media.currentTime, plyr.currentTime);

            // Ignore updates while seeking
            if (event && event.type === 'timeupdate' && plyr.media.seeking) {
                return;
            }

            // Playing progress
            _updateProgress(event);
        }

        // Update seek range and progress
        function _updateSeekDisplay(time) {
            // Default to 0
            if (!_is.number(time)) {
                time = 0;
            }

            var duration = _getDuration(),
                value = _getPercentage(time, duration);

            // Update progress
            if (plyr.progress && plyr.progress.played) {
                plyr.progress.played.value = value;
            }

            // Update seek range input
            if (plyr.buttons && plyr.buttons.seek) {
                plyr.buttons.seek.value = value;
            }
        }

        // Update hover tooltip for seeking
        function _updateSeekTooltip(event) {
            var duration = _getDuration();

            // Bail if setting not true
            if (!config.tooltips.seek || !plyr.progress.container || duration === 0) {
                return;
            }

            // Calculate percentage
            var clientRect = plyr.progress.container.getBoundingClientRect(),
                percent = 0,
                visible = config.classes.tooltip + '--visible';

            // Determine percentage, if already visible
            if (!event) {
                if (_hasClass(plyr.progress.tooltip, visible)) {
                    percent = plyr.progress.tooltip.style.left.replace('%', '');
                } else {
                    return;
                }
            } else {
                percent = 100 / clientRect.width * (event.pageX - clientRect.left);
            }

            // Set bounds
            if (percent < 0) {
                percent = 0;
            } else if (percent > 100) {
                percent = 100;
            }

            // Display the time a click would seek to
            _updateTimeDisplay(duration / 100 * percent, plyr.progress.tooltip);

            // Set position
            plyr.progress.tooltip.style.left = percent + "%";

            // Show/hide the tooltip
            // If the event is a moues in/out and percentage is inside bounds
            if (event && _inArray(['mouseenter', 'mouseleave'], event.type)) {
                _toggleClass(plyr.progress.tooltip, visible, event.type === 'mouseenter');
            }
        }

        // Show the player controls in fullscreen mode
        function _toggleControls(toggle) {
            // Don't hide if config says not to, it's audio, or not ready or loading
            if (!config.hideControls || plyr.type === 'audio') {
                return;
            }

            var delay = 0,
                isEnterFullscreen = false,
                show = toggle,
                loading = _hasClass(plyr.container, config.classes.loading);

            // Default to false if no boolean
            if (!_is.boolean(toggle)) {
                if (toggle && toggle.type) {
                    // Is the enter fullscreen event
                    isEnterFullscreen = toggle.type === 'enterfullscreen';

                    // Whether to show controls
                    show = _inArray(['mousemove', 'touchstart', 'mouseenter', 'focus'], toggle.type);

                    // Delay hiding on move events
                    if (_inArray(['mousemove', 'touchmove'], toggle.type)) {
                        delay = 2000;
                    }

                    // Delay a little more for keyboard users
                    if (toggle.type === 'focus') {
                        delay = 3000;
                    }
                } else {
                    show = _hasClass(plyr.container, config.classes.hideControls);
                }
            }

            // Clear timer every movement
            window.clearTimeout(timers.hover);

            // If the mouse is not over the controls, set a timeout to hide them
            if (show || plyr.media.paused || loading) {
                _toggleClass(plyr.container, config.classes.hideControls, false);

                // Always show controls when paused or if touch
                if (plyr.media.paused || loading) {
                    return;
                }

                // Delay for hiding on touch
                if (plyr.browser.isTouch) {
                    delay = 3000;
                }
            }

            // If toggle is false or if we're playing (regardless of toggle),
            // then set the timer to hide the controls
            if (!show || !plyr.media.paused) {
                timers.hover = window.setTimeout(function () {
                    // If the mouse is over the controls (and not entering fullscreen), bail
                    if ((plyr.controls.pressed || plyr.controls.hover) && !isEnterFullscreen) {
                        return;
                    }

                    _toggleClass(plyr.container, config.classes.hideControls, true);
                }, delay);
            }
        }

        // Add common function to retrieve media source
        function _source(source) {
            // If not null or undefined, parse it
            if (!_is.undefined(source)) {
                _updateSource(source);
                return;
            }

            // Return the current source
            var url;
            switch (plyr.type) {
                case 'youtube':
                    url = plyr.embed.getVideoUrl();
                    break;

                case 'vimeo':
                    plyr.embed.getVideoUrl.then(function (value) {
                        url = value;
                    });
                    break;

                case 'soundcloud':
                    plyr.embed.getCurrentSound(function (object) {
                        url = object.permalink_url;
                    });
                    break;

                default:
                    url = plyr.media.currentSrc;
                    break;
            }

            return url || '';
        }

        // Update source
        // Sources are not checked for support so be careful
        function _updateSource(source) {
            if (!_is.object(source) || !('sources' in source) || !source.sources.length) {
                _warn('Invalid source format');
                return;
            }

            // Remove ready class hook
            _toggleClass(plyr.container, config.classes.ready, false);

            // Pause playback
            _pause();

            // Update seek range and progress
            _updateSeekDisplay();

            // Reset buffer progress
            _setProgress();

            // Cancel current network requests
            _cancelRequests();

            // Setup new source
            function setup() {
                // Remove embed object
                plyr.embed = null;

                // Remove the old media
                _remove(plyr.media);

                // Remove video container
                if (plyr.type === 'video' && plyr.videoContainer) {
                    _remove(plyr.videoContainer);
                }

                // Reset class name
                if (plyr.container) {
                    plyr.container.removeAttribute('class');
                }

                // Set the type
                if ('type' in source) {
                    plyr.type = source.type;

                    // Get child type for video (it might be an embed)
                    if (plyr.type === 'video') {
                        var firstSource = source.sources[0];

                        if ('type' in firstSource && _inArray(config.types.embed, firstSource.type)) {
                            plyr.type = firstSource.type;
                        }
                    }
                }

                // Check for support
                plyr.supported = supported(plyr.type);

                // Create new markup
                switch (plyr.type) {
                    case 'video':
                        plyr.media = document.createElement('video');
                        break;

                    case 'audio':
                        plyr.media = document.createElement('audio');
                        break;

                    case 'youtube':
                    case 'vimeo':
                    case 'soundcloud':
                        plyr.media = document.createElement('div');
                        plyr.embedId = source.sources[0].src;
                        break;
                }

                // Inject the new element
                _prependChild(plyr.container, plyr.media);

                // Autoplay the new source?
                if (_is.boolean(source.autoplay)) {
                    config.autoplay = source.autoplay;
                }

                // Set attributes for audio and video
                if (_inArray(config.types.html5, plyr.type)) {
                    if (config.crossorigin) {
                        plyr.media.setAttribute('crossorigin', '');
                    }
                    if (config.autoplay) {
                        plyr.media.setAttribute('autoplay', '');
                    }
                    if ('poster' in source) {
                        plyr.media.setAttribute('poster', source.poster);
                    }
                    if (config.loop) {
                        plyr.media.setAttribute('loop', '');
                    }
                }

                // Restore class hooks
                _toggleClass(plyr.container, config.classes.fullscreen.active, plyr.isFullscreen);
                _toggleClass(plyr.container, config.classes.captions.active, plyr.captionsEnabled);
                _toggleStyleHook();

                // Set new sources for html5
                if (_inArray(config.types.html5, plyr.type)) {
                    _insertChildElements('source', source.sources);
                }

                // Set up from scratch
                _setupMedia();

                // HTML5 stuff
                if (_inArray(config.types.html5, plyr.type)) {
                    // Setup captions
                    if ('tracks' in source) {
                        _insertChildElements('track', source.tracks);
                    }

                    // Load HTML5 sources
                    plyr.media.load();
                }

                // If HTML5 or embed but not fully supported, setupInterface and call ready now
                if (_inArray(config.types.html5, plyr.type) || _inArray(config.types.embed, plyr.type) && !plyr.supported.full) {
                    // Setup interface
                    _setupInterface();

                    // Call ready
                    _ready();
                }

                // Set aria title and iframe title
                config.title = source.title;
                _setTitle();
            }

            // Destroy instance adn wait for callback
            // Vimeo throws a wobbly if you don't wait
            _destroy(setup, false);
        }

        // Update poster
        function _updatePoster(source) {
            if (plyr.type === 'video') {
                plyr.media.setAttribute('poster', source);
            }
        }

        // Listen for control events
        function _controlListeners() {
            // IE doesn't support input event, so we fallback to change
            var inputEvent = plyr.browser.isIE ? 'change' : 'input';

            // Click play/pause helper
            function togglePlay() {
                var play = _togglePlay();

                // Determine which buttons
                var trigger = plyr.buttons[play ? 'play' : 'pause'],
                    target = plyr.buttons[play ? 'pause' : 'play'];

                // Get the last play button to account for the large play button
                if (target && target.length > 1) {
                    target = target[target.length - 1];
                } else {
                    target = target[0];
                }

                // Setup focus and tab focus
                if (target) {
                    var hadTabFocus = _hasClass(trigger, config.classes.tabFocus);

                    setTimeout(function () {
                        target.focus();

                        if (hadTabFocus) {
                            _toggleClass(trigger, config.classes.tabFocus, false);
                            _toggleClass(target, config.classes.tabFocus, true);
                        }
                    }, 100);
                }
            }

            // Get the focused element
            function getFocusElement() {
                var focused = document.activeElement;

                if (!focused || focused === document.body) {
                    focused = null;
                } else {
                    focused = document.querySelector(':focus');
                }

                return focused;
            }

            // Get the key code for an event
            function getKeyCode(event) {
                return event.keyCode ? event.keyCode : event.which;
            }

            // Detect tab focus
            function checkTabFocus(focused) {
                for (var button in plyr.buttons) {
                    var element = plyr.buttons[button];

                    if (_is.nodeList(element)) {
                        for (var i = 0; i < element.length; i++) {
                            _toggleClass(element[i], config.classes.tabFocus, element[i] === focused);
                        }
                    } else {
                        _toggleClass(element, config.classes.tabFocus, element === focused);
                    }
                }
            }

            // Keyboard shortcuts
            if (config.keyboardShorcuts.focused) {
                var last = null;

                // Handle global presses
                if (config.keyboardShorcuts.global) {
                    _on(window, 'keydown keyup', function (event) {
                        var code = getKeyCode(event),
                            focused = getFocusElement(),
                            allowed = [48, 49, 50, 51, 52, 53, 54, 56, 57, 75, 77, 70, 67],
                            count = get().length;

                        // Only handle global key press if there's only one player
                        // and the key is in the allowed keys
                        // and if the focused element is not editable (e.g. text input)
                        // and any that accept key input http://webaim.org/techniques/keyboard/
                        if (count === 1 && _inArray(allowed, code) && (!_is.htmlElement(focused) || !_matches(focused, config.selectors.editable))) {
                            handleKey(event);
                        }
                    });
                }

                // Handle presses on focused
                _on(plyr.container, 'keydown keyup', handleKey);
            }

            function handleKey(event) {
                var code = getKeyCode(event),
                    pressed = event.type === 'keydown',
                    held = pressed && code === last;

                // If the event is bubbled from the media element
                // Firefox doesn't get the keycode for whatever reason
                if (!_is.number(code)) {
                    return;
                }

                // Seek by the number keys
                function seekByKey() {
                    // Get current duration
                    var duration = plyr.media.duration;

                    // Bail if we have no duration set
                    if (!_is.number(duration)) {
                        return;
                    }

                    // Divide the max duration into 10th's and times by the number value
                    _seek(duration / 10 * (code - 48));
                }

                // Handle the key on keydown
                // Reset on keyup
                if (pressed) {
                    // Which keycodes should we prevent default
                    var preventDefault = [48, 49, 50, 51, 52, 53, 54, 56, 57, 32, 75, 38, 40, 77, 39, 37, 70, 67];

                    // If the code is found prevent default (e.g. prevent scrolling for arrows)
                    if (_inArray(preventDefault, code)) {
                        event.preventDefault();
                        event.stopPropagation();
                    }

                    switch (code) {
                        // 0-9
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            if (!held) {
                                seekByKey();
                            }break;
                        // Space and K key
                        case 32:
                        case 75:
                            if (!held) {
                                _togglePlay();
                            }break;
                        // Arrow up
                        case 38:
                            _increaseVolume();break;
                        // Arrow down
                        case 40:
                            _decreaseVolume();break;
                        // M key
                        case 77:
                            if (!held) {
                                _toggleMute();
                            }break;
                        // Arrow forward
                        case 39:
                            _forward();break;
                        // Arrow back
                        case 37:
                            _rewind();break;
                        // F key
                        case 70:
                            _toggleFullscreen();break;
                        // C key
                        case 67:
                            if (!held) {
                                _toggleCaptions();
                            }break;
                    }

                    // Escape is handle natively when in full screen
                    // So we only need to worry about non native
                    if (!fullscreen.supportsFullScreen && plyr.isFullscreen && code === 27) {
                        _toggleFullscreen();
                    }

                    // Store last code for next cycle
                    last = code;
                } else {
                    last = null;
                }
            }

            // Focus/tab management
            _on(window, 'keyup', function (event) {
                var code = getKeyCode(event),
                    focused = getFocusElement();

                if (code === 9) {
                    checkTabFocus(focused);
                }
            });
            _on(document.body, 'click', function () {
                _toggleClass(_getElement('.' + config.classes.tabFocus), config.classes.tabFocus, false);
            });
            for (var button in plyr.buttons) {
                var element = plyr.buttons[button];

                _on(element, 'blur', function () {
                    _toggleClass(element, 'tab-focus', false);
                });
            }

            // Play
            _proxyListener(plyr.buttons.play, 'click', config.listeners.play, togglePlay);

            // Pause
            _proxyListener(plyr.buttons.pause, 'click', config.listeners.pause, togglePlay);

            // Restart
            _proxyListener(plyr.buttons.restart, 'click', config.listeners.restart, _seek);

            // Rewind
            _proxyListener(plyr.buttons.rewind, 'click', config.listeners.rewind, _rewind);

            // Fast forward
            _proxyListener(plyr.buttons.forward, 'click', config.listeners.forward, _forward);

            // Seek
            _proxyListener(plyr.buttons.seek, inputEvent, config.listeners.seek, _seek);

            // Set volume
            _proxyListener(plyr.volume.input, inputEvent, config.listeners.volume, function () {
                _setVolume(plyr.volume.input.value);
            });

            // Mute
            _proxyListener(plyr.buttons.mute, 'click', config.listeners.mute, _toggleMute);

            // Fullscreen
            _proxyListener(plyr.buttons.fullscreen, 'click', config.listeners.fullscreen, _toggleFullscreen);

            // Handle user exiting fullscreen by escaping etc
            if (fullscreen.supportsFullScreen) {
                _on(document, fullscreen.fullScreenEventName, _toggleFullscreen);
            }

            // Captions
            _on(plyr.buttons.captions, 'click', _toggleCaptions);

            // Seek tooltip
            _on(plyr.progress.container, 'mouseenter mouseleave mousemove', _updateSeekTooltip);

            // Toggle controls visibility based on mouse movement
            if (config.hideControls) {
                // Toggle controls on mouse events and entering fullscreen
                _on(plyr.container, 'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen', _toggleControls);

                // Watch for cursor over controls so they don't hide when trying to interact
                _on(plyr.controls, 'mouseenter mouseleave', function (event) {
                    plyr.controls.hover = event.type === 'mouseenter';
                });

                // Watch for cursor over controls so they don't hide when trying to interact
                _on(plyr.controls, 'mousedown mouseup touchstart touchend touchcancel', function (event) {
                    plyr.controls.pressed = _inArray(['mousedown', 'touchstart'], event.type);
                });

                // Focus in/out on controls
                _on(plyr.controls, 'focus blur', _toggleControls, true);
            }

            // Adjust volume on scroll
            _on(plyr.volume.input, 'wheel', function (event) {
                event.preventDefault();

                // Detect "natural" scroll - suppored on OS X Safari only
                // Other browsers on OS X will be inverted until support improves
                var inverted = event.webkitDirectionInvertedFromDevice,
                    step = config.volumeStep / 5;

                // Scroll down (or up on natural) to decrease
                if (event.deltaY < 0 || event.deltaX > 0) {
                    if (inverted) {
                        _decreaseVolume(step);
                    } else {
                        _increaseVolume(step);
                    }
                }

                // Scroll up (or down on natural) to increase
                if (event.deltaY > 0 || event.deltaX < 0) {
                    if (inverted) {
                        _increaseVolume(step);
                    } else {
                        _decreaseVolume(step);
                    }
                }
            });
        }

        // Listen for media events
        function _mediaListeners() {
            // Time change on media
            _on(plyr.media, 'timeupdate seeking', _timeUpdate);

            // Update manual captions
            _on(plyr.media, 'timeupdate', _seekManualCaptions);

            // Display duration
            _on(plyr.media, 'durationchange loadedmetadata', _displayDuration);

            // Handle the media finishing
            _on(plyr.media, 'ended', function () {
                // Show poster on end
                if (plyr.type === 'video' && config.showPosterOnEnd) {
                    // Clear
                    if (plyr.type === 'video') {
                        _setCaption();
                    }

                    // Restart
                    _seek();

                    // Re-load media
                    plyr.media.load();
                }
            });

            // Check for buffer progress
            _on(plyr.media, 'progress playing', _updateProgress);

            // Handle native mute
            _on(plyr.media, 'volumechange', _updateVolume);

            // Handle native play/pause
            _on(plyr.media, 'play pause ended', _checkPlaying);

            // Loading
            _on(plyr.media, 'waiting canplay seeked', _checkLoading);

            // Click video
            if (config.clickToPlay && plyr.type !== 'audio') {
                // Re-fetch the wrapper
                var wrapper = _getElement('.' + config.classes.videoWrapper);

                // Bail if there's no wrapper (this should never happen)
                if (!wrapper) {
                    return;
                }

                // Set cursor
                wrapper.style.cursor = "pointer";

                // On click play, pause ore restart
                _on(wrapper, 'click', function () {
                    // Touch devices will just show controls (if we're hiding controls)
                    if (config.hideControls && plyr.browser.isTouch && !plyr.media.paused) {
                        return;
                    }

                    if (plyr.media.paused) {
                        _play();
                    } else if (plyr.media.ended) {
                        _seek();
                        _play();
                    } else {
                        _pause();
                    }
                });
            }

            // Disable right click
            if (config.disableContextMenu) {
                _on(plyr.media, 'contextmenu', function (event) {
                    event.preventDefault();
                });
            }

            // Proxy events to container
            // Bubble up key events for Edge
            _on(plyr.media, config.events.concat(['keyup', 'keydown']).join(' '), function (event) {
                _triggerEvent(plyr.container, event.type, true);
            });
        }

        // Cancel current network requests
        // See https://github.com/Selz/plyr/issues/174
        function _cancelRequests() {
            if (!_inArray(config.types.html5, plyr.type)) {
                return;
            }

            // Remove child sources
            var sources = plyr.media.querySelectorAll('source');
            for (var i = 0; i < sources.length; i++) {
                _remove(sources[i]);
            }

            // Set blank video src attribute
            // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error
            // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection
            plyr.media.setAttribute('src', 'https://cdn.selz.com/plyr/blank.mp4');

            // Load the new empty source
            // This will cancel existing requests
            // See https://github.com/Selz/plyr/issues/174
            plyr.media.load();

            // Debugging
            _log('Cancelled network requests');
        }

        // Destroy an instance
        // Event listeners are removed when elements are removed
        // http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory
        function _destroy(callback, restore) {
            // Bail if the element is not initialized
            if (!plyr.init) {
                return null;
            }

            // Type specific stuff
            switch (plyr.type) {
                case 'youtube':
                    // Clear timers
                    window.clearInterval(timers.buffering);
                    window.clearInterval(timers.playing);

                    // Destroy YouTube API
                    plyr.embed.destroy();

                    // Clean up
                    cleanUp();

                    break;

                case 'vimeo':
                    // Destroy Vimeo API
                    // then clean up (wait, to prevent postmessage errors)
                    plyr.embed.unload().then(cleanUp);

                    // Vimeo does not always return
                    timers.cleanUp = window.setTimeout(cleanUp, 200);

                    break;

                case 'video':
                case 'audio':
                    // Restore native video controls
                    _toggleNativeControls(true);

                    // Clean up
                    cleanUp();

                    break;
            }

            function cleanUp() {
                clearTimeout(timers.cleanUp);

                // Default to restore original element
                if (!_is.boolean(restore)) {
                    restore = true;
                }

                // Callback
                if (_is.function(callback)) {
                    callback.call(original);
                }

                // Bail if we don't need to restore the original element
                if (!restore) {
                    return;
                }

                // Remove init flag
                plyr.init = false;

                // Replace the container with the original element provided
                plyr.container.parentNode.replaceChild(original, plyr.container);

                // Event
                _triggerEvent(original, 'destroyed', true);
            }
        }

        // Setup a player
        function _init() {
            // Bail if the element is initialized
            if (plyr.init) {
                return null;
            }

            // Setup the fullscreen api
            fullscreen = _fullscreen();

            // Sniff out the browser
            plyr.browser = _browserSniff();

            // Bail if nothing to setup
            if (!_is.htmlElement(plyr.media)) {
                return;
            }

            // Load saved settings from localStorage
            _setupStorage();

            // Set media type based on tag or data attribute
            // Supported: video, audio, vimeo, youtube
            var tagName = media.tagName.toLowerCase();
            if (tagName === 'div') {
                plyr.type = media.getAttribute('data-type');
                plyr.embedId = media.getAttribute('data-video-id');

                // Clean up
                media.removeAttribute('data-type');
                media.removeAttribute('data-video-id');
            } else {
                plyr.type = tagName;
                config.crossorigin = media.getAttribute('crossorigin') !== null;
                config.autoplay = config.autoplay || media.getAttribute('autoplay') !== null;
                config.loop = config.loop || media.getAttribute('loop') !== null;
            }

            // Check for support
            plyr.supported = supported(plyr.type);

            // If no native support, bail
            if (!plyr.supported.basic) {
                return;
            }

            // Wrap media
            plyr.container = _wrap(media, document.createElement('div'));

            // Allow focus to be captured
            plyr.container.setAttribute('tabindex', 0);

            // Add style hook
            _toggleStyleHook();

            // Debug info
            _log('' + plyr.browser.name + ' ' + plyr.browser.version);

            // Setup media
            _setupMedia();

            // Setup interface
            // If embed but not fully supported, setupInterface (to avoid flash of controls) and call ready now
            if (_inArray(config.types.html5, plyr.type) || _inArray(config.types.embed, plyr.type) && !plyr.supported.full) {
                // Setup UI
                _setupInterface();

                // Call ready
                _ready();

                // Set title on button and frame
                _setTitle();
            }

            // Successful setup
            plyr.init = true;
        }

        // Setup the UI
        function _setupInterface() {
            // Don't setup interface if no support
            if (!plyr.supported.full) {
                _warn('Basic support only', plyr.type);

                // Remove controls
                _remove(_getElement(config.selectors.controls.wrapper));

                // Remove large play
                _remove(_getElement(config.selectors.buttons.play));

                // Restore native controls
                _toggleNativeControls(true);

                // Bail
                return;
            }

            // Inject custom controls if not present
            var controlsMissing = !_getElements(config.selectors.controls.wrapper).length;
            if (controlsMissing) {
                // Inject custom controls
                _injectControls();
            }

            // Find the elements
            if (!_findElements()) {
                return;
            }

            // If the controls are injected, re-bind listeners for controls
            if (controlsMissing) {
                _controlListeners();
            }

            // Media element listeners
            _mediaListeners();

            // Remove native controls
            _toggleNativeControls();

            // Setup fullscreen
            _setupFullscreen();

            // Captions
            _setupCaptions();

            // Set volume
            _setVolume();
            _updateVolume();

            // Reset time display
            _timeUpdate();

            // Update the UI
            _checkPlaying();
        }

        api = {
            getOriginal: function () {
                return original;
            },
            getContainer: function () {
                return plyr.container;
            },
            getEmbed: function () {
                return plyr.embed;
            },
            getMedia: function () {
                return plyr.media;
            },
            getType: function () {
                return plyr.type;
            },
            getDuration: _getDuration,
            getCurrentTime: function () {
                return plyr.media.currentTime;
            },
            getVolume: function () {
                return plyr.media.volume;
            },
            isMuted: function () {
                return plyr.media.muted;
            },
            isReady: function () {
                return _hasClass(plyr.container, config.classes.ready);
            },
            isLoading: function () {
                return _hasClass(plyr.container, config.classes.loading);
            },
            isPaused: function () {
                return plyr.media.paused;
            },
            on: function (event, callback) {
                _on(plyr.container, event, callback);return this;
            },
            play: _play,
            pause: _pause,
            stop: function () {
                _pause();_seek();
            },
            restart: _seek,
            rewind: _rewind,
            forward: _forward,
            seek: _seek,
            source: _source,
            poster: _updatePoster,
            setVolume: _setVolume,
            togglePlay: _togglePlay,
            toggleMute: _toggleMute,
            toggleCaptions: _toggleCaptions,
            toggleFullscreen: _toggleFullscreen,
            toggleControls: _toggleControls,
            isFullscreen: function () {
                return plyr.isFullscreen || false;
            },
            support: function (mimeType) {
                return _supportMime(plyr, mimeType);
            },
            destroy: _destroy
        };

        // Everything done
        function _ready() {
            // Ready event at end of execution stack
            window.setTimeout(function () {
                _triggerEvent(plyr.media, 'ready');
            }, 0);

            // Set class hook on media element
            _toggleClass(plyr.media, defaults.classes.setup, true);

            // Set container class for ready
            _toggleClass(plyr.container, config.classes.ready, true);

            // Store a refernce to instance
            plyr.media.plyr = api;

            // Autoplay
            if (config.autoplay) {
                _play();
            }
        }

        // Initialize instance
        _init();

        // If init failed, return null
        if (!plyr.init) {
            return null;
        }

        return api;
    }

    // Load a sprite
    function loadSprite(url, id) {
        var x = new XMLHttpRequest();

        // If the id is set and sprite exists, bail
        if (_is.string(id) && _is.htmlElement(document.querySelector('#' + id))) {
            return;
        }

        // Create placeholder (to prevent loading twice)
        var container = document.createElement('div');
        container.setAttribute('hidden', '');
        if (_is.string(id)) {
            container.setAttribute('id', id);
        }
        document.body.insertBefore(container, document.body.childNodes[0]);

        // Check for CORS support
        if ('withCredentials' in x) {
            x.open('GET', url, true);
        } else {
            return;
        }

        // Inject hidden div with sprite on load
        x.onload = function () {
            container.innerHTML = x.responseText;
        };

        x.send();
    }

    // Check for support
    function supported(type) {
        var browser = _browserSniff(),
            isOldIE = browser.isIE && browser.version <= 9,
            isIos = browser.isIos,
            isIphone = /iPhone|iPod/i.test(navigator.userAgent),
            audio = !!document.createElement('audio').canPlayType,
            video = !!document.createElement('video').canPlayType,
            basic,
            full;

        switch (type) {
            case 'video':
                basic = video;
                full = basic && !isOldIE && !isIphone;
                break;

            case 'audio':
                basic = audio;
                full = basic && !isOldIE;
                break;

            case 'vimeo':
            case 'youtube':
            case 'soundcloud':
                basic = true;
                full = !isOldIE && !isIos;
                break;

            default:
                basic = audio && video;
                full = basic && !isOldIE;
        }

        return {
            basic: basic,
            full: full
        };
    }

    // Setup function
    function setup(targets, options) {
        // Get the players
        var players = [],
            instances = [],
            selector = [defaults.selectors.html5, defaults.selectors.embed].join(',');

        // Select the elements
        if (_is.string(targets)) {
            // String selector passed
            targets = document.querySelectorAll(targets);
        } else if (_is.htmlElement(targets)) {
            // Single HTMLElement passed
            targets = [targets];
        } else if (!_is.nodeList(targets) && !_is.array(targets) && !_is.string(targets)) {
            // No selector passed, possibly options as first argument
            // If options are the first argument
            if (_is.undefined(options) && _is.object(targets)) {
                options = targets;
            }

            // Use default selector
            targets = document.querySelectorAll(selector);
        }

        // Convert NodeList to array
        if (_is.nodeList(targets)) {
            targets = Array.prototype.slice.call(targets);
        }

        // Bail if disabled or no basic support
        // You may want to disable certain UAs etc
        if (!supported().basic || !targets.length) {
            return false;
        }

        // Add to container list
        function add(target, media) {
            if (!_hasClass(media, defaults.classes.hook)) {
                players.push({
                    // Always wrap in a <div> for styling
                    //container:  _wrap(media, document.createElement('div')),
                    // Could be a container or the media itself
                    target: target,
                    // This should be the <video>, <audio> or <div> (YouTube/Vimeo)
                    media: media
                });
            }
        }

        // Check if the targets have multiple media elements
        for (var i = 0; i < targets.length; i++) {
            var target = targets[i];

            // Get children
            var children = target.querySelectorAll(selector);

            // If there's more than one media element child, wrap them
            if (children.length) {
                for (var x = 0; x < children.length; x++) {
                    add(target, children[x]);
                }
            } else if (_matches(target, selector)) {
                // Target is media element
                add(target, target);
            }
        }

        // Create a player instance for each element
        players.forEach(function (player) {
            var element = player.target,
                media = player.media,
                match = false;

            // The target element can also be the media element
            if (media === element) {
                match = true;
            }

            // Setup a player instance and add to the element
            // Create instance-specific config
            var data = {};

            // Try parsing data attribute config
            try {
                data = JSON.parse(element.getAttribute('data-plyr'));
            } catch (e) {}

            var config = _extend({}, defaults, options, data);

            // Bail if not enabled
            if (!config.enabled) {
                return null;
            }

            // Create new instance
            var instance = new Plyr(media, config);

            // Go to next if setup failed
            if (!_is.object(instance)) {
                return;
            }

            // Listen for events if debugging
            if (config.debug) {
                var events = config.events.concat(['setup', 'statechange', 'enterfullscreen', 'exitfullscreen', 'captionsenabled', 'captionsdisabled']);

                _on(instance.getContainer(), events.join(' '), function (event) {
                    console.log([config.logPrefix, 'event:', event.type].join(' '), event.detail.plyr);
                });
            }

            // Callback
            _event(instance.getContainer(), 'setup', true, {
                plyr: instance
            });

            // Add to return array even if it's already setup
            instances.push(instance);
        });

        return instances;
    }

    // Get all instances within a provided container
    function get(container) {
        if (_is.string(container)) {
            // Get selector if string passed
            container = document.querySelector(container);
        } else if (_is.undefined(container)) {
            // Use body by default to get all on page
            container = document.body;
        }

        // If we have a HTML element
        if (_is.htmlElement(container)) {
            var elements = container.querySelectorAll('.' + defaults.classes.setup),
                instances = [];

            Array.prototype.slice.call(elements).forEach(function (element) {
                if (_is.object(element.plyr)) {
                    instances.push(element.plyr);
                }
            });

            return instances;
        }

        return [];
    }

    return {
        setup: setup,
        supported: supported,
        loadSprite: loadSprite,
        get: get
    };
});

// Custom event polyfill
// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
(function () {
    if (typeof window.CustomEvent === 'function') {
        return;
    }

    function CustomEvent(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
    }

    CustomEvent.prototype = window.Event.prototype;

    window.CustomEvent = CustomEvent;
})();
;/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.6.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
(function (factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }
})(function ($) {
    'use strict';

    var Slick = window.Slick || {};

    Slick = function () {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this,
                dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function (slider, i) {
                    return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

            _.registerBreakpoints();
            _.init(true);
        }

        return Slick;
    }();

    Slick.prototype.activateADA = function () {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });
    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {

        var _ = this;

        if (typeof index === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || index >= _.slideCount) {
            return false;
        }

        _.unload();

        if (typeof index === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.animateHeight = function () {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function (targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }
        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -_.currentLeft;
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function (now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' + now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' + now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function () {
                        if (callback) {
                            callback.call();
                        }
                    }
                });
            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function () {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }
            }
        }
    };

    Slick.prototype.getNavTarget = function () {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if (asNavFor && asNavFor !== null) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;
    };

    Slick.prototype.asNavFor = function (index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if (asNavFor !== null && typeof asNavFor === 'object') {
            asNavFor.each(function () {
                var target = $(this).slick('getSlick');
                if (!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }
    };

    Slick.prototype.applyTransition = function (slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.autoPlay = function () {

        var _ = this;

        _.autoPlayClear();

        if (_.slideCount > _.options.slidesToShow) {
            _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
        }
    };

    Slick.prototype.autoPlayClear = function () {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }
    };

    Slick.prototype.autoPlayIterator = function () {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if (!_.paused && !_.interrupted && !_.focussed) {

            if (_.options.infinite === false) {

                if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {
                    _.direction = 0;
                } else if (_.direction === 0) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if (_.currentSlide - 1 === 0) {
                        _.direction = 1;
                    }
                }
            }

            _.slideHandler(slideTo);
        }
    };

    Slick.prototype.buildArrows = function () {

        var _ = this;

        if (_.options.arrows === true) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if (_.slideCount > _.options.slidesToShow) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                }
            } else {

                _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({
                    'aria-disabled': 'true',
                    'tabindex': '-1'
                });
            }
        }
    };

    Slick.prototype.buildDots = function () {

        var _ = this,
            i,
            dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');
        }
    };

    Slick.prototype.buildOut = function () {

        var _ = this;

        _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }
    };

    Slick.prototype.buildRows = function () {

        var _ = this,
            a,
            b,
            c,
            newSlides,
            numOfSlides,
            originalSlides,
            slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if (_.options.rows > 1) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);

            for (a = 0; a < numOfSlides; a++) {
                var slide = document.createElement('div');
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children().css({
                'width': 100 / _.options.slidesPerRow + '%',
                'display': 'inline-block'
            });
        }
    };

    Slick.prototype.checkResponsive = function (initial, forceUpdate) {

        var _ = this,
            breakpoint,
            targetBreakpoint,
            respondToWidth,
            triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if (!initial && triggerBreakpoint !== false) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }
    };

    Slick.prototype.changeSlide = function (event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset,
            slideOffset,
            unevenOffset;

        // If target is a link, prevent default action.
        if ($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if (!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }
    };

    Slick.prototype.checkNavigable = function (index) {

        var _ = this,
            navigables,
            prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function () {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);
    };

    Slick.prototype.cleanUpSlideEvents = function () {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
    };

    Slick.prototype.cleanUpRows = function () {

        var _ = this,
            originalSlides;

        if (_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }
    };

    Slick.prototype.clickHandler = function (event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }
    };

    Slick.prototype.destroy = function (refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.$prevArrow.length) {

            _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }
        }

        if (_.$nextArrow && _.$nextArrow.length) {

            _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }
        }

        if (_.$slides) {

            _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {
                $(this).attr('style', $(this).data('originalStyling'));
            });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if (!refresh) {
            _.$slider.trigger('destroy', [_]);
        }
    };

    Slick.prototype.disableTransition = function (slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.fadeSlide = function (slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function () {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }
        }
    };

    Slick.prototype.fadeSlideOut = function (slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });
        }
    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.focusHandler = function () {

        var _ = this;

        _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*:not(.slick-arrow)', function (event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function () {

                if (_.options.pauseOnFocus) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }
            }, 0);
        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {

        var _ = this;
        return _.currentSlide;
    };

    Slick.prototype.getDotCount = function () {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if (!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        } else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;
    };

    Slick.prototype.getLeft = function (slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
                verticalOffset = verticalHeight * _.options.slidesToShow * -1;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
                        verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;
                    } else {
                        _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
                        verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
                verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
        } else {
            targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft = 0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft = 0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;
    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {

        var _ = this;

        return _.options[option];
    };

    Slick.prototype.getNavigableIndexes = function () {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;
    };

    Slick.prototype.getSlick = function () {

        return this;
    };

    Slick.prototype.getSlideCount = function () {

        var _ = this,
            slidesTraversed,
            swipedSlide,
            centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function (index, slide) {
                if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;
        } else {
            return _.options.slidesToScroll;
        }
    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);
    };

    Slick.prototype.init = function (creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();
        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if (_.options.autoplay) {

            _.paused = false;
            _.autoPlay();
        }
    };

    Slick.prototype.initADA = function () {
        var _ = this;
        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        _.$slideTrack.attr('role', 'listbox');

        _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {
            $(this).attr({
                'role': 'option',
                'aria-describedby': 'slick-slide' + _.instanceUid + i + ''
            });
        });

        if (_.$dots !== null) {
            _.$dots.attr('role', 'tablist').find('li').each(function (i) {
                $(this).attr({
                    'role': 'presentation',
                    'aria-selected': 'false',
                    'aria-controls': 'navigation' + _.instanceUid + i + '',
                    'id': 'slick-slide' + _.instanceUid + i + ''
                });
            }).first().attr('aria-selected', 'true').end().find('button').attr('role', 'button').end().closest('div').attr('role', 'toolbar');
        }
        _.activateADA();
    };

    Slick.prototype.initArrowEvents = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.off('click.slick').on('click.slick', {
                message: 'previous'
            }, _.changeSlide);
            _.$nextArrow.off('click.slick').on('click.slick', {
                message: 'next'
            }, _.changeSlide);
        }
    };

    Slick.prototype.initDotEvents = function () {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);
        }

        if (_.options.dots === true && _.options.pauseOnDotsHover === true) {

            $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initSlideEvents = function () {

        var _ = this;

        if (_.options.pauseOnHover) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initializeEvents = function () {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);
    };

    Slick.prototype.initUI = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();
        }
    };

    Slick.prototype.keyHandler = function (event) {

        var _ = this;
        //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' : 'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }
    };

    Slick.prototype.lazyLoad = function () {

        var _ = this,
            loadRange,
            cloneRange,
            rangeStart,
            rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function () {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function () {

                    image.animate({ opacity: 0 }, 100, function () {
                        image.attr('src', imageSource).animate({ opacity: 1 }, 200, function () {
                            image.removeAttr('data-lazy').removeClass('slick-loading');
                        });
                        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                    });
                };

                imageToLoad.onerror = function () {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);
                };

                imageToLoad.src = imageSource;
            });
        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }
    };

    Slick.prototype.loadSlider = function () {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }
    };

    Slick.prototype.next = Slick.prototype.slickNext = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });
    };

    Slick.prototype.orientationChange = function () {

        var _ = this;

        _.checkResponsive();
        _.setPosition();
    };

    Slick.prototype.pause = Slick.prototype.slickPause = function () {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;
    };

    Slick.prototype.play = Slick.prototype.slickPlay = function () {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;
    };

    Slick.prototype.postSlide = function (index) {

        var _ = this;

        if (!_.unslicked) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            _.setPosition();

            _.swipeLeft = null;

            if (_.options.autoplay) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();
            }
        }
    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });
    };

    Slick.prototype.preventDefault = function (event) {

        event.preventDefault();
    };

    Slick.prototype.progressiveLazyLoad = function (tryCount) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $('img[data-lazy]', _.$slider),
            image,
            imageSource,
            imageToLoad;

        if ($imgsToLoad.length) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function () {

                image.attr('src', imageSource).removeAttr('data-lazy').removeClass('slick-loading');

                if (_.options.adaptiveHeight === true) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                _.progressiveLazyLoad();
            };

            imageToLoad.onerror = function () {

                if (tryCount < 3) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout(function () {
                        _.progressiveLazyLoad(tryCount + 1);
                    }, 500);
                } else {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                    _.progressiveLazyLoad();
                }
            };

            imageToLoad.src = imageSource;
        } else {

            _.$slider.trigger('allImagesLoaded', [_]);
        }
    };

    Slick.prototype.refresh = function (initializing) {

        var _ = this,
            currentSlide,
            lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if (!initializing) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);
        }
    };

    Slick.prototype.registerBreakpoints = function () {

        var _ = this,
            breakpoint,
            currentBreakpoint,
            l,
            responsiveSettings = _.options.responsive || null;

        if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {

            _.respondTo = _.options.respondTo || 'window';

            for (breakpoint in responsiveSettings) {

                l = _.breakpoints.length - 1;
                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while (l >= 0) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
                }
            }

            _.breakpoints.sort(function (a, b) {
                return _.options.mobileFirst ? a - b : b - a;
            });
        }
    };

    Slick.prototype.reinit = function () {

        var _ = this;

        _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);
    };

    Slick.prototype.resize = function () {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function () {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) {
                    _.setPosition();
                }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {

        var _ = this;

        if (typeof index === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.setCSS = function (position) {

        var _ = this,
            positionProps = {},
            x,
            y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }
    };

    Slick.prototype.setDimensions = function () {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: '0px ' + _.options.centerPadding
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: _.options.centerPadding + ' 0px'
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();

        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));
        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
    };

    Slick.prototype.setFade = function () {

        var _ = this,
            targetLeft;

        _.$slides.each(function (index, element) {
            targetLeft = _.slideWidth * index * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });
    };

    Slick.prototype.setHeight = function () {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }
    };

    Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {

        /**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */

        var _ = this,
            l,
            item,
            option,
            value,
            refresh = false,
            type;

        if ($.type(arguments[0]) === 'object') {

            option = arguments[0];
            refresh = arguments[1];
            type = 'multiple';
        } else if ($.type(arguments[0]) === 'string') {

            option = arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {

                type = 'responsive';
            } else if (typeof arguments[1] !== 'undefined') {

                type = 'single';
            }
        }

        if (type === 'single') {

            _.options[option] = value;
        } else if (type === 'multiple') {

            $.each(option, function (opt, val) {

                _.options[opt] = val;
            });
        } else if (type === 'responsive') {

            for (item in value) {

                if ($.type(_.options.responsive) !== 'array') {

                    _.options.responsive = [value[item]];
                } else {

                    l = _.options.responsive.length - 1;

                    // loop through the responsive object and splice out duplicates.
                    while (l >= 0) {

                        if (_.options.responsive[l].breakpoint === value[item].breakpoint) {

                            _.options.responsive.splice(l, 1);
                        }

                        l--;
                    }

                    _.options.responsive.push(value[item]);
                }
            }
        }

        if (refresh) {

            _.unload();
            _.reinit();
        }
    };

    Slick.prototype.setPosition = function () {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);
    };

    Slick.prototype.setProps = function () {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if (_.options.fade) {
            if (typeof _.options.zIndex === 'number') {
                if (_.options.zIndex < 3) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;
    };

    Slick.prototype.setSlideClasses = function (index) {

        var _ = this,
            centerOffset,
            allSlides,
            indexOffset,
            remainder;

        allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');

        _.$slides.eq(index).addClass('slick-current');

        if (_.options.centerMode === true) {

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {

                    _.$slides.slice(index - centerOffset, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides.slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');
                }

                if (index === 0) {

                    allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');
                } else if (index === _.slideCount - 1) {

                    allSlides.eq(_.options.slidesToShow).addClass('slick-center');
                }
            }

            _.$slides.eq(index).addClass('slick-center');
        } else {

            if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {

                _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides.addClass('slick-active').attr('aria-hidden', 'false');
            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {

                    allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
                }
            }
        }

        if (_.options.lazyLoad === 'ondemand') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function () {

        var _ = this,
            i,
            slideIndex,
            infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
                    $(this).attr('id', '');
                });
            }
        }
    };

    Slick.prototype.interrupt = function (toggle) {

        var _ = this;

        if (!toggle) {
            _.autoPlay();
        }
        _.interrupted = toggle;
    };

    Slick.prototype.selectHandler = function (event) {

        var _ = this;

        var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.setSlideClasses(index);
            _.asNavFor(index);
            return;
        }

        _.slideHandler(index);
    };

    Slick.prototype.slideHandler = function (index, sync, dontAnimate) {

        var targetSlide,
            animSlide,
            oldSlide,
            slideLeft,
            targetLeft = null,
            _ = this,
            navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if (_.options.autoplay) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if (_.options.asNavFor) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if (navTarget.slideCount <= navTarget.options.slidesToShow) {
                navTarget.setSlideClasses(_.currentSlide);
            }
        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function () {
                    _.postSlide(animSlide);
                });
            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function () {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }
    };

    Slick.prototype.startLoad = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();
        }

        _.$slider.addClass('slick-loading');
    };

    Slick.prototype.swipeDirection = function () {

        var xDist,
            yDist,
            r,
            swipeAngle,
            _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return _.options.rtl === false ? 'right' : 'left';
        }
        if (_.options.verticalSwiping === true) {
            if (swipeAngle >= 35 && swipeAngle <= 135) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';
    };

    Slick.prototype.swipeEnd = function (event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.interrupted = false;
        _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;

        if (_.touchObject.curX === undefined) {
            return false;
        }

        if (_.touchObject.edgeHit === true) {
            _.$slider.trigger('edge', [_, _.swipeDirection()]);
        }

        if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {

            direction = _.swipeDirection();

            switch (direction) {

                case 'left':
                case 'down':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:

            }

            if (direction != 'vertical') {

                _.slideHandler(slideCount);
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction]);
            }
        } else {

            if (_.touchObject.startX !== _.touchObject.curX) {

                _.slideHandler(_.currentSlide);
                _.touchObject = {};
            }
        }
    };

    Slick.prototype.swipeHandler = function (event) {

        var _ = this;

        if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }
    };

    Slick.prototype.swipeMove = function (event) {

        var _ = this,
            edgeWasHit = false,
            curLeft,
            swipeDirection,
            swipeLength,
            positionOffset,
            touches;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
        }

        swipeDirection = _.swipeDirection();

        if (swipeDirection === 'vertical') {
            return;
        }

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }

        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);
    };

    Slick.prototype.swipeStart = function (event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;
    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.unload = function () {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');
    };

    Slick.prototype.unslick = function (fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();
    };

    Slick.prototype.updateArrows = function () {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            }
        }
    };

    Slick.prototype.updateDots = function () {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots.find('li').removeClass('slick-active').attr('aria-hidden', 'true');

            _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active').attr('aria-hidden', 'false');
        }
    };

    Slick.prototype.visibility = function () {

        var _ = this;

        if (_.options.autoplay) {

            if (document[_.hidden]) {

                _.interrupted = true;
            } else {

                _.interrupted = false;
            }
        }
    };

    $.fn.slick = function () {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };
});
;
$(window).bind(' load resize orientationChange ', function () {
  var footer = $("#footer-container");
  var pos = footer.position();
  var height = $(window).height();
  height = height - pos.top;
  height = height - footer.height() - 1;

  function stickyFooter() {
    footer.css({
      'margin-top': height + 'px'
    });
  }

  if (height > 0) {
    stickyFooter();
  }
});
;(function () {
  'use strict';

  var displayNoneMessage = ['You have a Waypoint element with display none. For more information on ', 'why this is a bad idea read ', 'http://imakewebthings.com/waypoints/guides/debugging/#display-none'].join('');
  var fixedMessage = ['You have a Waypoint element with fixed positioning. For more ', 'information on why this is a bad idea read ', 'http://imakewebthings.com/waypoints/guides/debugging/#fixed-position'].join('');

  function checkWaypointStyles() {
    var originalRefresh = window.Waypoint.Context.prototype.refresh;

    window.Waypoint.Context.prototype.refresh = function () {
      for (var axis in this.waypoints) {
        for (var key in this.waypoints[axis]) {
          var waypoint = this.waypoints[axis][key];
          var style = window.getComputedStyle(waypoint.element);
          if (!waypoint.enabled) {
            continue;
          }
          if (style && style.display === 'none') {
            console.error(displayNoneMessage);
          }
          if (style && style.position === 'fixed') {
            console.error(fixedMessage);
          }
        }
      }
      return originalRefresh.call(this);
    };
  }

  checkWaypointStyles();
})();
;/* ===================================================
 * wiawUniversalAjax.js v1.0
 * ===================================================
 */
!function ($) {

	$(function () {

		// Click the button!
		$(".archive__load-more a").click(function () {

			// alert('say whaaa?');

			var url = $(this).attr('href'),
			    split_url = url.slice(0, -1).split('/'),
			    page_num = split_url[split_url.length - 1],
			    vars = {};

			if (isNaN(page_num)) {
				page_num = split_url[split_url.length - 2];
			}

			// Set up the correct vars
			if ($("#wiaw_taxonomy").length >= 1) {
				vars.taxonomy = $("#wiaw_taxonomy").val();
				vars.term_id = $("#wiaw_term_id").val();
			} else {
				vars.post_type = $("#wiaw_post_type").val();
			}

			console.log(split_url);
			console.log(vars);
			console.log(page_num);

			wiaw_get_more_posts(page_num, vars);

			return false;
		});

		// Get Posts AJAX Call
		function wiaw_get_more_posts(page_num, vars) {

			// Show the ajax loader
			$(".ajax-spinner").show();
			// hide the next button
			$(".archive__load-more").hide();

			// make sure page_num is being read as an INT
			var page_num = parseInt(page_num);

			// Do the AJAX call
			$.ajax({
				url: js_vars.ajaxurl,
				type: 'post',
				data: {
					action: 'archive_load_more',
					page: page_num,
					data: vars
				},
				error: function (exception) {
					alert('Exeption:' + exception);
				},
				success: function (html) {

					// console.log(html);

					// If there were any results
					if (html != '') {

						// Update the next page URL
						var btn = $(".archive__load-more a"),
						    btn_url = btn.attr('href');

						btn_url = btn_url.slice(0, -1).split('/'), btn_url[btn_url.length - 1] = page_num + 1, btn_url = btn_url.join('/') + '/';

						btn.attr('href', btn_url);

						// Insert the HTML
						$("#ajax-before-me").before(html);

						// show the next button
						$(".archive__load-more").show();

						QuickLookInit(); // added this so that the quicklook works after load more. See app.js function called QuickLookInit

						// No results
					} else {

						// say no posts
						$("#ajax-before-me").before('<div class="alert alert-warning"><p>No further results.</p></div>');
					}

					// Hide the ajax loader
					$(".ajax-spinner").hide();
				}
			});
		};
	});
}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24uY29yZS5qcyIsImZvdW5kYXRpb24udXRpbC5ib3guanMiLCJmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmQuanMiLCJmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeS5qcyIsImZvdW5kYXRpb24udXRpbC5tb3Rpb24uanMiLCJmb3VuZGF0aW9uLnV0aWwubmVzdC5qcyIsImZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyLmpzIiwiZm91bmRhdGlvbi51dGlsLnRvdWNoLmpzIiwiZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzLmpzIiwid2hhdC1pbnB1dC5qcyIsImZvdW5kYXRpb24uYWJpZGUuanMiLCJmb3VuZGF0aW9uLmFjY29yZGlvbi5qcyIsImZvdW5kYXRpb24uYWNjb3JkaW9uTWVudS5qcyIsImZvdW5kYXRpb24uZHJpbGxkb3duLmpzIiwiZm91bmRhdGlvbi5kcm9wZG93bi5qcyIsImZvdW5kYXRpb24uZHJvcGRvd25NZW51LmpzIiwiZm91bmRhdGlvbi5lcXVhbGl6ZXIuanMiLCJmb3VuZGF0aW9uLmludGVyY2hhbmdlLmpzIiwiZm91bmRhdGlvbi5tYWdlbGxhbi5qcyIsImZvdW5kYXRpb24ub2ZmY2FudmFzLmpzIiwiZm91bmRhdGlvbi5vcmJpdC5qcyIsImZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnUuanMiLCJmb3VuZGF0aW9uLnJlc3BvbnNpdmVUb2dnbGUuanMiLCJmb3VuZGF0aW9uLnJldmVhbC5qcyIsImZvdW5kYXRpb24uc2xpZGVyLmpzIiwiZm91bmRhdGlvbi5zdGlja3kuanMiLCJmb3VuZGF0aW9uLnRhYnMuanMiLCJmb3VuZGF0aW9uLnRvZ2dsZXIuanMiLCJmb3VuZGF0aW9uLnRvb2x0aXAuanMiLCJtb3Rpb24tdWkuanMiLCJldmVudHNGdW5jdGlvbnMuanMiLCJmbGV4LXZpZGVvLmpzIiwiaW5pdC1mb3VuZGF0aW9uLmpzIiwiam95cmlkZS1kZW1vLmpzIiwianF1ZXJ5Lmludmlldy5qcyIsImpxdWVyeS5tYWduaWZpYy1wb3B1cC5qcyIsImpxdWVyeS53YXlwb2ludHMuanMiLCJvZmZDYW52YXMuanMiLCJwaG90b3N3aXBlLXVpLWRlZmF1bHQuanMiLCJwaG90b3N3aXBlLmpzIiwicGx5ci5qcyIsInNsaWNrLmpzIiwic3RpY2t5Zm9vdGVyLmpzIiwid2F5cG9pbnRzLmRlYnVnLmpzIiwid2lhd1VuaXZlcnNhbEFqYXguanMiXSwibmFtZXMiOlsiJCIsIkZPVU5EQVRJT05fVkVSU0lPTiIsIkZvdW5kYXRpb24iLCJ2ZXJzaW9uIiwiX3BsdWdpbnMiLCJfdXVpZHMiLCJydGwiLCJhdHRyIiwicGx1Z2luIiwibmFtZSIsImNsYXNzTmFtZSIsImZ1bmN0aW9uTmFtZSIsImF0dHJOYW1lIiwiaHlwaGVuYXRlIiwicmVnaXN0ZXJQbHVnaW4iLCJwbHVnaW5OYW1lIiwiY29uc3RydWN0b3IiLCJ0b0xvd2VyQ2FzZSIsInV1aWQiLCJHZXRZb0RpZ2l0cyIsIiRlbGVtZW50IiwiZGF0YSIsInRyaWdnZXIiLCJwdXNoIiwidW5yZWdpc3RlclBsdWdpbiIsInNwbGljZSIsImluZGV4T2YiLCJyZW1vdmVBdHRyIiwicmVtb3ZlRGF0YSIsInByb3AiLCJyZUluaXQiLCJwbHVnaW5zIiwiaXNKUSIsImVhY2giLCJfaW5pdCIsInR5cGUiLCJfdGhpcyIsImZucyIsInBsZ3MiLCJmb3JFYWNoIiwicCIsImZvdW5kYXRpb24iLCJPYmplY3QiLCJrZXlzIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwibGVuZ3RoIiwibmFtZXNwYWNlIiwiTWF0aCIsInJvdW5kIiwicG93IiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsInJlZmxvdyIsImVsZW0iLCJpIiwiJGVsZW0iLCJmaW5kIiwiYWRkQmFjayIsIiRlbCIsIm9wdHMiLCJ3YXJuIiwidGhpbmciLCJzcGxpdCIsImUiLCJvcHQiLCJtYXAiLCJlbCIsInRyaW0iLCJwYXJzZVZhbHVlIiwiZXIiLCJnZXRGbk5hbWUiLCJ0cmFuc2l0aW9uZW5kIiwidHJhbnNpdGlvbnMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJlbmQiLCJ0Iiwic3R5bGUiLCJzZXRUaW1lb3V0IiwidHJpZ2dlckhhbmRsZXIiLCJ1dGlsIiwidGhyb3R0bGUiLCJmdW5jIiwiZGVsYXkiLCJ0aW1lciIsImNvbnRleHQiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJtZXRob2QiLCIkbWV0YSIsIiRub0pTIiwiYXBwZW5kVG8iLCJoZWFkIiwicmVtb3ZlQ2xhc3MiLCJNZWRpYVF1ZXJ5IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjYWxsIiwicGx1Z0NsYXNzIiwidW5kZWZpbmVkIiwiUmVmZXJlbmNlRXJyb3IiLCJUeXBlRXJyb3IiLCJ3aW5kb3ciLCJmbiIsIkRhdGUiLCJub3ciLCJnZXRUaW1lIiwidmVuZG9ycyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInZwIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibGFzdFRpbWUiLCJjYWxsYmFjayIsIm5leHRUaW1lIiwibWF4IiwiY2xlYXJUaW1lb3V0IiwicGVyZm9ybWFuY2UiLCJzdGFydCIsIkZ1bmN0aW9uIiwiYmluZCIsIm9UaGlzIiwiYUFyZ3MiLCJmVG9CaW5kIiwiZk5PUCIsImZCb3VuZCIsImNvbmNhdCIsImZ1bmNOYW1lUmVnZXgiLCJyZXN1bHRzIiwiZXhlYyIsInN0ciIsImlzTmFOIiwicGFyc2VGbG9hdCIsInJlcGxhY2UiLCJqUXVlcnkiLCJCb3giLCJJbU5vdFRvdWNoaW5nWW91IiwiR2V0RGltZW5zaW9ucyIsIkdldE9mZnNldHMiLCJlbGVtZW50IiwicGFyZW50IiwibHJPbmx5IiwidGJPbmx5IiwiZWxlRGltcyIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInBhckRpbXMiLCJvZmZzZXQiLCJoZWlnaHQiLCJ3aWR0aCIsIndpbmRvd0RpbXMiLCJhbGxEaXJzIiwiRXJyb3IiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFyUmVjdCIsInBhcmVudE5vZGUiLCJ3aW5SZWN0IiwiYm9keSIsIndpblkiLCJwYWdlWU9mZnNldCIsIndpblgiLCJwYWdlWE9mZnNldCIsInBhcmVudERpbXMiLCJhbmNob3IiLCJwb3NpdGlvbiIsInZPZmZzZXQiLCJoT2Zmc2V0IiwiaXNPdmVyZmxvdyIsIiRlbGVEaW1zIiwiJGFuY2hvckRpbXMiLCJrZXlDb2RlcyIsImNvbW1hbmRzIiwiS2V5Ym9hcmQiLCJnZXRLZXlDb2RlcyIsInBhcnNlS2V5IiwiZXZlbnQiLCJrZXkiLCJ3aGljaCIsImtleUNvZGUiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ0b1VwcGVyQ2FzZSIsInNoaWZ0S2V5IiwiY3RybEtleSIsImFsdEtleSIsImhhbmRsZUtleSIsImNvbXBvbmVudCIsImZ1bmN0aW9ucyIsImNvbW1hbmRMaXN0IiwiY21kcyIsImNvbW1hbmQiLCJsdHIiLCJleHRlbmQiLCJyZXR1cm5WYWx1ZSIsImhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJmaW5kRm9jdXNhYmxlIiwiZmlsdGVyIiwiaXMiLCJyZWdpc3RlciIsImNvbXBvbmVudE5hbWUiLCJrY3MiLCJrIiwia2MiLCJkZWZhdWx0UXVlcmllcyIsImxhbmRzY2FwZSIsInBvcnRyYWl0IiwicmV0aW5hIiwicXVlcmllcyIsImN1cnJlbnQiLCJzZWxmIiwiZXh0cmFjdGVkU3R5bGVzIiwiY3NzIiwibmFtZWRRdWVyaWVzIiwicGFyc2VTdHlsZVRvT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJ2YWx1ZSIsIl9nZXRDdXJyZW50U2l6ZSIsIl93YXRjaGVyIiwiYXRMZWFzdCIsInNpemUiLCJxdWVyeSIsImdldCIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwibWF0Y2hlZCIsIm9uIiwibmV3U2l6ZSIsImN1cnJlbnRTaXplIiwic3R5bGVNZWRpYSIsIm1lZGlhIiwic2NyaXB0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbmZvIiwiaWQiLCJpbnNlcnRCZWZvcmUiLCJnZXRDb21wdXRlZFN0eWxlIiwiY3VycmVudFN0eWxlIiwibWF0Y2hNZWRpdW0iLCJ0ZXh0Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJ0ZXh0Q29udGVudCIsInN0eWxlT2JqZWN0IiwicmVkdWNlIiwicmV0IiwicGFyYW0iLCJwYXJ0cyIsInZhbCIsImRlY29kZVVSSUNvbXBvbmVudCIsImlzQXJyYXkiLCJpbml0Q2xhc3NlcyIsImFjdGl2ZUNsYXNzZXMiLCJNb3Rpb24iLCJhbmltYXRlSW4iLCJhbmltYXRpb24iLCJjYiIsImFuaW1hdGUiLCJhbmltYXRlT3V0IiwiTW92ZSIsImR1cmF0aW9uIiwiYW5pbSIsInByb2ciLCJtb3ZlIiwidHMiLCJpc0luIiwiZXEiLCJpbml0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInJlc2V0IiwiYWRkQ2xhc3MiLCJzaG93Iiwib2Zmc2V0V2lkdGgiLCJvbmUiLCJmaW5pc2giLCJoaWRlIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiTmVzdCIsIkZlYXRoZXIiLCJtZW51IiwiaXRlbXMiLCJzdWJNZW51Q2xhc3MiLCJzdWJJdGVtQ2xhc3MiLCJoYXNTdWJDbGFzcyIsIiRpdGVtIiwiJHN1YiIsImNoaWxkcmVuIiwiQnVybiIsIlRpbWVyIiwib3B0aW9ucyIsIm5hbWVTcGFjZSIsInJlbWFpbiIsImlzUGF1c2VkIiwicmVzdGFydCIsImluZmluaXRlIiwicGF1c2UiLCJvbkltYWdlc0xvYWRlZCIsImltYWdlcyIsInVubG9hZGVkIiwiY29tcGxldGUiLCJzaW5nbGVJbWFnZUxvYWRlZCIsIm5hdHVyYWxXaWR0aCIsInNwb3RTd2lwZSIsImVuYWJsZWQiLCJkb2N1bWVudEVsZW1lbnQiLCJwcmV2ZW50RGVmYXVsdCIsIm1vdmVUaHJlc2hvbGQiLCJ0aW1lVGhyZXNob2xkIiwic3RhcnRQb3NYIiwic3RhcnRQb3NZIiwic3RhcnRUaW1lIiwiZWxhcHNlZFRpbWUiLCJpc01vdmluZyIsIm9uVG91Y2hFbmQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25Ub3VjaE1vdmUiLCJ4IiwidG91Y2hlcyIsInBhZ2VYIiwieSIsInBhZ2VZIiwiZHgiLCJkeSIsImRpciIsImFicyIsIm9uVG91Y2hTdGFydCIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbml0IiwidGVhcmRvd24iLCJzcGVjaWFsIiwic3dpcGUiLCJzZXR1cCIsIm5vb3AiLCJhZGRUb3VjaCIsImhhbmRsZVRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJmaXJzdCIsImV2ZW50VHlwZXMiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJzaW11bGF0ZWRFdmVudCIsIk1vdXNlRXZlbnQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsInRhcmdldCIsImRpc3BhdGNoRXZlbnQiLCJNdXRhdGlvbk9ic2VydmVyIiwicHJlZml4ZXMiLCJ0cmlnZ2VycyIsInN0b3BQcm9wYWdhdGlvbiIsImZhZGVPdXQiLCJjaGVja0xpc3RlbmVycyIsImV2ZW50c0xpc3RlbmVyIiwicmVzaXplTGlzdGVuZXIiLCJzY3JvbGxMaXN0ZW5lciIsImNsb3NlbWVMaXN0ZW5lciIsInlldGlCb3hlcyIsInBsdWdOYW1lcyIsImxpc3RlbmVycyIsImpvaW4iLCJvZmYiLCJwbHVnaW5JZCIsIm5vdCIsImRlYm91bmNlIiwiJG5vZGVzIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiIsIm11dGF0aW9uUmVjb3Jkc0xpc3QiLCIkdGFyZ2V0IiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImF0dHJpYnV0ZUZpbHRlciIsIklIZWFyWW91Iiwid2hhdElucHV0IiwiYWN0aXZlS2V5cyIsImJ1ZmZlciIsImN1cnJlbnRJbnB1dCIsIm5vblR5cGluZ0lucHV0cyIsIm1vdXNlV2hlZWwiLCJkZXRlY3RXaGVlbCIsImlnbm9yZU1hcCIsImlucHV0TWFwIiwiaW5wdXRUeXBlcyIsImtleU1hcCIsInBvaW50ZXJNYXAiLCJldmVudEJ1ZmZlciIsImNsZWFyVGltZXIiLCJzZXRJbnB1dCIsImJ1ZmZlcmVkRXZlbnQiLCJ1bkJ1ZmZlcmVkRXZlbnQiLCJldmVudEtleSIsInBvaW50ZXJUeXBlIiwiZXZlbnRUYXJnZXQiLCJldmVudFRhcmdldE5vZGUiLCJub2RlTmFtZSIsImV2ZW50VGFyZ2V0VHlwZSIsImdldEF0dHJpYnV0ZSIsImhhc0F0dHJpYnV0ZSIsInN3aXRjaElucHV0IiwibG9nS2V5cyIsInN0cmluZyIsInNldEF0dHJpYnV0ZSIsInNyY0VsZW1lbnQiLCJ1bkxvZ0tleXMiLCJhcnJheVBvcyIsImJpbmRFdmVudHMiLCJQb2ludGVyRXZlbnQiLCJNU1BvaW50ZXJFdmVudCIsIm9ubW91c2V3aGVlbCIsImFzayIsInR5cGVzIiwic2V0IiwiQWJpZGUiLCJkZWZhdWx0cyIsIiRpbnB1dHMiLCJfZXZlbnRzIiwicmVzZXRGb3JtIiwidmFsaWRhdGVGb3JtIiwidmFsaWRhdGVPbiIsInZhbGlkYXRlSW5wdXQiLCJsaXZlVmFsaWRhdGUiLCJfcmVmbG93IiwicmVxdWlyZWRDaGVjayIsImlzR29vZCIsImNoZWNrZWQiLCJmaW5kRm9ybUVycm9yIiwiJGVycm9yIiwic2libGluZ3MiLCJmb3JtRXJyb3JTZWxlY3RvciIsImZpbmRMYWJlbCIsIiRsYWJlbCIsImNsb3Nlc3QiLCJmaW5kUmFkaW9MYWJlbHMiLCIkZWxzIiwibGFiZWxzIiwiYWRkRXJyb3JDbGFzc2VzIiwiJGZvcm1FcnJvciIsImxhYmVsRXJyb3JDbGFzcyIsImZvcm1FcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwicmVtb3ZlUmFkaW9FcnJvckNsYXNzZXMiLCJncm91cE5hbWUiLCIkbGFiZWxzIiwiJGZvcm1FcnJvcnMiLCJyZW1vdmVFcnJvckNsYXNzZXMiLCJjbGVhclJlcXVpcmUiLCJ2YWxpZGF0ZWQiLCJjdXN0b21WYWxpZGF0b3IiLCJ2YWxpZGF0b3IiLCJlcXVhbFRvIiwidmFsaWRhdGVSYWRpbyIsInZhbGlkYXRlVGV4dCIsIm1hdGNoVmFsaWRhdGlvbiIsInZhbGlkYXRvcnMiLCJnb29kVG9HbyIsIm1lc3NhZ2UiLCJhY2MiLCJub0Vycm9yIiwicGF0dGVybiIsImlucHV0VGV4dCIsInZhbGlkIiwicGF0dGVybnMiLCJSZWdFeHAiLCIkZ3JvdXAiLCJyZXF1aXJlZCIsImNsZWFyIiwidiIsIiRmb3JtIiwiZGVzdHJveSIsImFscGhhIiwiYWxwaGFfbnVtZXJpYyIsImludGVnZXIiLCJudW1iZXIiLCJjYXJkIiwiY3Z2IiwiZW1haWwiLCJ1cmwiLCJkb21haW4iLCJkYXRldGltZSIsImRhdGUiLCJ0aW1lIiwiZGF0ZUlTTyIsIm1vbnRoX2RheV95ZWFyIiwiZGF5X21vbnRoX3llYXIiLCJjb2xvciIsIkFjY29yZGlvbiIsIiR0YWJzIiwiaWR4IiwiJGNvbnRlbnQiLCJsaW5rSWQiLCIkaW5pdEFjdGl2ZSIsImRvd24iLCIkdGFiQ29udGVudCIsInRvZ2dsZSIsIm5leHQiLCIkYSIsImZvY3VzIiwibXVsdGlFeHBhbmQiLCJwcmV2aW91cyIsInByZXYiLCJoYXNDbGFzcyIsInVwIiwiZmlyc3RUaW1lIiwiJGN1cnJlbnRBY3RpdmUiLCJzbGlkZURvd24iLCJzbGlkZVNwZWVkIiwiJGF1bnRzIiwiYWxsb3dBbGxDbG9zZWQiLCJzbGlkZVVwIiwic3RvcCIsIkFjY29yZGlvbk1lbnUiLCJtdWx0aU9wZW4iLCIkbWVudUxpbmtzIiwic3ViSWQiLCJpc0FjdGl2ZSIsImluaXRQYW5lcyIsIiRzdWJtZW51IiwiJGVsZW1lbnRzIiwiJHByZXZFbGVtZW50IiwiJG5leHRFbGVtZW50IiwibWluIiwicGFyZW50cyIsIm9wZW4iLCJjbG9zZSIsImNsb3NlQWxsIiwiaGlkZUFsbCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInBhcmVudHNVbnRpbCIsImFkZCIsIiRtZW51cyIsIkRyaWxsZG93biIsIiRzdWJtZW51QW5jaG9ycyIsIiRzdWJtZW51cyIsIiRtZW51SXRlbXMiLCJfcHJlcGFyZU1lbnUiLCJfa2V5Ym9hcmRFdmVudHMiLCIkbGluayIsInBhcmVudExpbmsiLCJjbG9uZSIsInByZXBlbmRUbyIsIndyYXAiLCIkbWVudSIsIiRiYWNrIiwicHJlcGVuZCIsImJhY2tCdXR0b24iLCJfYmFjayIsIiR3cmFwcGVyIiwid3JhcHBlciIsIl9nZXRNYXhEaW1zIiwiX3Nob3ciLCJjbG9zZU9uQ2xpY2siLCIkYm9keSIsImNvbnRhaW5zIiwiX2hpZGVBbGwiLCJfaGlkZSIsInBhcmVudFN1Yk1lbnUiLCJfbWVudUxpbmtFdmVudHMiLCJibHVyIiwiYmlnZ2VzdCIsInJlc3VsdCIsInVud3JhcCIsInJlbW92ZSIsIkRyb3Bkb3duIiwiJGlkIiwiJGFuY2hvciIsInBvc2l0aW9uQ2xhc3MiLCJnZXRQb3NpdGlvbkNsYXNzIiwiY291bnRlciIsInVzZWRQb3NpdGlvbnMiLCJ2ZXJ0aWNhbFBvc2l0aW9uIiwibWF0Y2giLCJob3Jpem9udGFsUG9zaXRpb24iLCJfcmVwb3NpdGlvbiIsImNsYXNzQ2hhbmdlZCIsIl9zZXRQb3NpdGlvbiIsImRpcmVjdGlvbiIsImhvdmVyIiwidGltZW91dCIsImhvdmVyRGVsYXkiLCJob3ZlclBhbmUiLCJ2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMiLCJ0YWJfZm9yd2FyZCIsInRyYXBGb2N1cyIsInRhYl9iYWNrd2FyZCIsIl9hZGRCb2R5SGFuZGxlciIsImF1dG9Gb2N1cyIsIiRmb2N1c2FibGUiLCJjdXJQb3NpdGlvbkNsYXNzIiwiRHJvcGRvd25NZW51Iiwic3VicyIsInZlcnRpY2FsQ2xhc3MiLCJyaWdodENsYXNzIiwiYWxpZ25tZW50IiwiY2hhbmdlZCIsIl9pc1ZlcnRpY2FsIiwiaGFzVG91Y2giLCJvbnRvdWNoc3RhcnQiLCJwYXJDbGFzcyIsImhhbmRsZUNsaWNrRm4iLCJoYXNTdWIiLCJoYXNDbGlja2VkIiwiY2xpY2tPcGVuIiwiZm9yY2VGb2xsb3ciLCJjbG9zZU9uQ2xpY2tJbnNpZGUiLCJkaXNhYmxlSG92ZXIiLCJhdXRvY2xvc2UiLCJjbG9zaW5nVGltZSIsImlzVGFiIiwiaW5kZXgiLCJuZXh0U2libGluZyIsInByZXZTaWJsaW5nIiwib3BlblN1YiIsImNsb3NlU3ViIiwiJHNpYnMiLCJvbGRDbGFzcyIsIiRwYXJlbnRMaSIsIiR0b0Nsb3NlIiwic29tZXRoaW5nVG9DbG9zZSIsIkVxdWFsaXplciIsImVxSWQiLCIkd2F0Y2hlZCIsImhhc05lc3RlZCIsImlzTmVzdGVkIiwiaXNPbiIsIl9iaW5kSGFuZGxlciIsIm9uUmVzaXplTWVCb3VuZCIsIl9vblJlc2l6ZU1lIiwib25Qb3N0RXF1YWxpemVkQm91bmQiLCJfb25Qb3N0RXF1YWxpemVkIiwiaW1ncyIsInRvb1NtYWxsIiwiZXF1YWxpemVPbiIsIl9jaGVja01RIiwiX3BhdXNlRXZlbnRzIiwiX2tpbGxzd2l0Y2giLCJlcXVhbGl6ZU9uU3RhY2siLCJfaXNTdGFja2VkIiwiZXF1YWxpemVCeVJvdyIsImdldEhlaWdodHNCeVJvdyIsImFwcGx5SGVpZ2h0QnlSb3ciLCJnZXRIZWlnaHRzIiwiYXBwbHlIZWlnaHQiLCJoZWlnaHRzIiwibGVuIiwib2Zmc2V0SGVpZ2h0IiwibGFzdEVsVG9wT2Zmc2V0IiwiZ3JvdXBzIiwiZ3JvdXAiLCJlbE9mZnNldFRvcCIsImoiLCJsbiIsImdyb3Vwc0lMZW5ndGgiLCJsZW5KIiwiSW50ZXJjaGFuZ2UiLCJydWxlcyIsImN1cnJlbnRQYXRoIiwiX2FkZEJyZWFrcG9pbnRzIiwiX2dlbmVyYXRlUnVsZXMiLCJydWxlIiwicGF0aCIsIlNQRUNJQUxfUVVFUklFUyIsInJ1bGVzTGlzdCIsInJlc3BvbnNlIiwiaHRtbCIsIk1hZ2VsbGFuIiwiJHRhcmdldHMiLCIkbGlua3MiLCIkYWN0aXZlIiwic2Nyb2xsUG9zIiwicGFyc2VJbnQiLCJjYWxjUG9pbnRzIiwicG9pbnRzIiwid2luSGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJkb2NIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCIkdGFyIiwicHQiLCJ0aHJlc2hvbGQiLCJ0YXJnZXRQb2ludCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiZWFzaW5nIiwiYW5pbWF0aW9uRWFzaW5nIiwiZGVlcExpbmtpbmciLCJsb2NhdGlvbiIsImhhc2giLCJzY3JvbGxUb0xvYyIsIl91cGRhdGVBY3RpdmUiLCJhcnJpdmFsIiwibG9jIiwiYmFyT2Zmc2V0Iiwic2Nyb2xsVG9wIiwid2luUG9zIiwiY3VySWR4IiwiaXNEb3duIiwiY3VyVmlzaWJsZSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJPZmZDYW52YXMiLCIkbGFzdFRyaWdnZXIiLCIkdHJpZ2dlcnMiLCIkZXhpdGVyIiwiZXhpdGVyIiwiYXBwZW5kIiwiaXNSZXZlYWxlZCIsInJldmVhbENsYXNzIiwicmV2ZWFsT24iLCJfc2V0TVFDaGVja2VyIiwidHJhbnNpdGlvblRpbWUiLCJfaGFuZGxlS2V5Ym9hcmQiLCJyZXZlYWwiLCIkY2xvc2VyIiwiZm9yY2VUb3AiLCJfdHJhcEZvY3VzIiwiZm9jdXNhYmxlIiwibGFzdCIsIk9yYml0IiwiY29udGFpbmVyQ2xhc3MiLCIkc2xpZGVzIiwic2xpZGVDbGFzcyIsIiRpbWFnZXMiLCJpbml0QWN0aXZlIiwidXNlTVVJIiwiX3ByZXBhcmVGb3JPcmJpdCIsImJ1bGxldHMiLCJfbG9hZEJ1bGxldHMiLCJhdXRvUGxheSIsImdlb1N5bmMiLCJhY2Nlc3NpYmxlIiwiJGJ1bGxldHMiLCJib3hPZkJ1bGxldHMiLCJ0aW1lckRlbGF5IiwiY2hhbmdlU2xpZGUiLCJfc2V0V3JhcHBlckhlaWdodCIsIl9zZXRTbGlkZUhlaWdodCIsInRlbXAiLCJwYXVzZU9uSG92ZXIiLCJuYXZCdXR0b25zIiwiJGNvbnRyb2xzIiwibmV4dENsYXNzIiwicHJldkNsYXNzIiwiJHNsaWRlIiwiaXNMVFIiLCJjaG9zZW5TbGlkZSIsIiRjdXJTbGlkZSIsIiRmaXJzdFNsaWRlIiwiJGxhc3RTbGlkZSIsImRpckluIiwiZGlyT3V0IiwiJG5ld1NsaWRlIiwiaW5maW5pdGVXcmFwIiwiX3VwZGF0ZUJ1bGxldHMiLCIkb2xkQnVsbGV0Iiwic3BhbiIsImRldGFjaCIsIiRuZXdCdWxsZXQiLCJhbmltSW5Gcm9tUmlnaHQiLCJhbmltT3V0VG9SaWdodCIsImFuaW1JbkZyb21MZWZ0IiwiYW5pbU91dFRvTGVmdCIsIlJlc3BvbnNpdmVNZW51IiwiY3VycmVudE1xIiwiY3VycmVudFBsdWdpbiIsInJ1bGVzVHJlZSIsInJ1bGVTaXplIiwicnVsZVBsdWdpbiIsIk1lbnVQbHVnaW5zIiwiaXNFbXB0eU9iamVjdCIsIl9jaGVja01lZGlhUXVlcmllcyIsIm1hdGNoZWRNcSIsImNzc0NsYXNzIiwiZHJvcGRvd24iLCJkcmlsbGRvd24iLCJhY2NvcmRpb24iLCJSZXNwb25zaXZlVG9nZ2xlIiwidGFyZ2V0SUQiLCIkdGFyZ2V0TWVudSIsIiR0b2dnbGVyIiwiX3VwZGF0ZSIsIl91cGRhdGVNcUhhbmRsZXIiLCJ0b2dnbGVNZW51IiwiaGlkZUZvciIsIlJldmVhbCIsImNhY2hlZCIsIm1xIiwiaXNNb2JpbGUiLCJtb2JpbGVTbmlmZiIsImZ1bGxTY3JlZW4iLCJvdmVybGF5IiwiJG92ZXJsYXkiLCJfbWFrZU92ZXJsYXkiLCJkZWVwTGluayIsIl91cGRhdGVQb3NpdGlvbiIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIm1hcmdpbiIsIl9oYW5kbGVTdGF0ZSIsIm11bHRpcGxlT3BlbmVkIiwiYW5pbWF0aW9uSW4iLCJhZnRlckFuaW1hdGlvbkZvY3VzIiwiZm9jdXNhYmxlRWxlbWVudHMiLCJzaG93RGVsYXkiLCJvcmlnaW5hbFNjcm9sbFBvcyIsIl9leHRyYUhhbmRsZXJzIiwiY2xvc2VPbkVzYyIsImFuaW1hdGlvbk91dCIsImZpbmlzaFVwIiwiaGlkZURlbGF5IiwicmVzZXRPbkNsb3NlIiwicmVwbGFjZVN0YXRlIiwidGl0bGUiLCJwYXRobmFtZSIsImJ0bU9mZnNldFBjdCIsImlQaG9uZVNuaWZmIiwiYW5kcm9pZFNuaWZmIiwiU2xpZGVyIiwiaW5wdXRzIiwiaGFuZGxlcyIsIiRoYW5kbGUiLCIkaW5wdXQiLCIkZmlsbCIsInZlcnRpY2FsIiwiaXNEYmwiLCJkaXNhYmxlZCIsImRpc2FibGVkQ2xhc3MiLCJiaW5kaW5nIiwiX3NldEluaXRBdHRyIiwiZG91YmxlU2lkZWQiLCIkaGFuZGxlMiIsIiRpbnB1dDIiLCJfc2V0SGFuZGxlUG9zIiwiaW5pdGlhbFN0YXJ0IiwiaW5pdGlhbEVuZCIsIiRobmRsIiwibm9JbnZlcnQiLCJoMlZhbCIsInN0ZXAiLCJoMVZhbCIsInZlcnQiLCJoT3JXIiwibE9yVCIsImhhbmRsZURpbSIsImVsZW1EaW0iLCJwY3RPZkJhciIsInBlcmNlbnQiLCJ0b0ZpeGVkIiwicHhUb01vdmUiLCJtb3ZlbWVudCIsImRlY2ltYWwiLCJfc2V0VmFsdWVzIiwiaXNMZWZ0SG5kbCIsImRpbSIsImhhbmRsZVBjdCIsImhhbmRsZVBvcyIsIm1vdmVUaW1lIiwiY2hhbmdlZERlbGF5IiwiX2hhbmRsZUV2ZW50IiwiaGFzVmFsIiwiZXZlbnRPZmZzZXQiLCJoYWxmT2ZIYW5kbGUiLCJiYXJEaW0iLCJ3aW5kb3dTY3JvbGwiLCJzY3JvbGxMZWZ0IiwiZWxlbU9mZnNldCIsImV2ZW50RnJvbUJhciIsImJhclhZIiwib2Zmc2V0UGN0IiwiX2FkanVzdFZhbHVlIiwiZmlyc3RIbmRsUG9zIiwiYWJzUG9zaXRpb24iLCJzZWNuZEhuZGxQb3MiLCJkaXYiLCJwcmV2X3ZhbCIsIm5leHRfdmFsIiwiY3VySGFuZGxlIiwiY2xpY2tTZWxlY3QiLCJkcmFnZ2FibGUiLCJjdXJyZW50VGFyZ2V0IiwiXyRoYW5kbGUiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiZGVjcmVhc2UiLCJpbmNyZWFzZSIsImRlY3JlYXNlX2Zhc3QiLCJpbmNyZWFzZV9mYXN0IiwiaW52ZXJ0VmVydGljYWwiLCJmcmFjIiwibnVtIiwiY2xpY2tQb3MiLCJTdGlja3kiLCIkcGFyZW50Iiwid2FzV3JhcHBlZCIsIiRjb250YWluZXIiLCJjb250YWluZXIiLCJ3cmFwSW5uZXIiLCJzdGlja3lDbGFzcyIsInNjcm9sbENvdW50IiwiY2hlY2tFdmVyeSIsImlzU3R1Y2siLCJjb250YWluZXJIZWlnaHQiLCJlbGVtSGVpZ2h0IiwiX3BhcnNlUG9pbnRzIiwiX3NldFNpemVzIiwiX2NhbGMiLCJyZXZlcnNlIiwidG9wQW5jaG9yIiwiYnRtIiwiYnRtQW5jaG9yIiwicHRzIiwiYnJlYWtzIiwicGxhY2UiLCJjYW5TdGljayIsIl9wYXVzZUxpc3RlbmVycyIsImNoZWNrU2l6ZXMiLCJzY3JvbGwiLCJfcmVtb3ZlU3RpY2t5IiwidG9wUG9pbnQiLCJib3R0b21Qb2ludCIsIl9zZXRTdGlja3kiLCJzdGlja1RvIiwibXJnbiIsIm5vdFN0dWNrVG8iLCJpc1RvcCIsInN0aWNrVG9Ub3AiLCJhbmNob3JQdCIsImFuY2hvckhlaWdodCIsInRvcE9yQm90dG9tIiwic3RpY2t5T24iLCJuZXdFbGVtV2lkdGgiLCJjb21wIiwicGRuZyIsIm5ld0NvbnRhaW5lckhlaWdodCIsIl9zZXRCcmVha1BvaW50cyIsIm1Ub3AiLCJlbUNhbGMiLCJtYXJnaW5Ub3AiLCJtQnRtIiwibWFyZ2luQm90dG9tIiwiZW0iLCJmb250U2l6ZSIsIlRhYnMiLCIkdGFiVGl0bGVzIiwibGlua0NsYXNzIiwibWF0Y2hIZWlnaHQiLCJfc2V0SGVpZ2h0IiwiX2FkZEtleUhhbmRsZXIiLCJfYWRkQ2xpY2tIYW5kbGVyIiwiX3NldEhlaWdodE1xSGFuZGxlciIsIl9oYW5kbGVUYWJDaGFuZ2UiLCIkZmlyc3RUYWIiLCIkbGFzdFRhYiIsIndyYXBPbktleXMiLCIkdGFiTGluayIsIiR0YXJnZXRDb250ZW50IiwiJG9sZFRhYiIsInNlbGVjdFRhYiIsImlkU3RyIiwicGFuZWxDbGFzcyIsInBhbmVsIiwiY2hlY2tDbGFzcyIsIlRvZ2dsZXIiLCJpbnB1dCIsIl90b2dnbGVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiX3VwZGF0ZUFSSUEiLCJfdG9nZ2xlQW5pbWF0ZSIsIlRvb2x0aXAiLCJpc0NsaWNrIiwiZWxlbUlkIiwiX2dldFBvc2l0aW9uQ2xhc3MiLCJ0aXBUZXh0IiwidGVtcGxhdGUiLCJfYnVpbGRUZW1wbGF0ZSIsInRyaWdnZXJDbGFzcyIsInRlbXBsYXRlQ2xhc3NlcyIsInRvb2x0aXBDbGFzcyIsIiR0ZW1wbGF0ZSIsIiR0aXBEaW1zIiwic2hvd09uIiwiZmFkZUluIiwiZmFkZUluRHVyYXRpb24iLCJmYWRlT3V0RHVyYXRpb24iLCJpc0ZvY3VzIiwiZGlzYWJsZUZvclRvdWNoIiwidG91Y2hDbG9zZVRleHQiLCJlbmRFdmVudCIsIk1vdGlvblVJIiwicmVhZHkiLCJzZXJpYWxpemVBcnJheSIsImFqYXhfZGF0YSIsInBvc3QiLCJqc192YXJzIiwiYWpheHVybCIsInNlYXJjaCIsInBhZ2VfbnVtYmVyIiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiaW52aWV3T2JqZWN0cyIsInZpZXdwb3J0U2l6ZSIsInZpZXdwb3J0T2Zmc2V0IiwiZCIsInciLCJpbnZpZXciLCJzZXRJbnRlcnZhbCIsImNoZWNrSW5WaWV3IiwiaW52aWV3T2JqZWN0IiwiZ3VpZCIsImNsZWFySW50ZXJ2YWwiLCJnZXRWaWV3cG9ydFNpemUiLCJtb2RlIiwiZG9tT2JqZWN0IiwiaW5uZXJXaWR0aCIsImNvbXBhdE1vZGUiLCJzdXBwb3J0IiwiYm94TW9kZWwiLCJjbGllbnRXaWR0aCIsImdldFZpZXdwb3J0T2Zmc2V0Iiwic2VsZWN0b3IiLCJlbGVtZW50U2l6ZSIsImVsZW1lbnRPZmZzZXQiLCJpblZpZXciLCJhdHRhY2hFdmVudCIsIlplcHRvIiwiQ0xPU0VfRVZFTlQiLCJCRUZPUkVfQ0xPU0VfRVZFTlQiLCJBRlRFUl9DTE9TRV9FVkVOVCIsIkJFRk9SRV9BUFBFTkRfRVZFTlQiLCJNQVJLVVBfUEFSU0VfRVZFTlQiLCJPUEVOX0VWRU5UIiwiQ0hBTkdFX0VWRU5UIiwiTlMiLCJFVkVOVF9OUyIsIlJFQURZX0NMQVNTIiwiUkVNT1ZJTkdfQ0xBU1MiLCJQUkVWRU5UX0NMT1NFX0NMQVNTIiwibWZwIiwiTWFnbmlmaWNQb3B1cCIsIl9pc0pRIiwiX3ByZXZTdGF0dXMiLCJfd2luZG93IiwiX2RvY3VtZW50IiwiX3ByZXZDb250ZW50VHlwZSIsIl93cmFwQ2xhc3NlcyIsIl9jdXJyUG9wdXBUeXBlIiwiX21mcE9uIiwiZiIsImV2IiwiX2dldEVsIiwicmF3IiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJfbWZwVHJpZ2dlciIsInN0IiwiY2FsbGJhY2tzIiwiY2hhckF0IiwiX2dldENsb3NlQnRuIiwiY3VyclRlbXBsYXRlIiwiY2xvc2VCdG4iLCJjbG9zZU1hcmt1cCIsInRDbG9zZSIsIl9jaGVja0luc3RhbmNlIiwibWFnbmlmaWNQb3B1cCIsImluc3RhbmNlIiwic3VwcG9ydHNUcmFuc2l0aW9ucyIsInMiLCJwb3AiLCJhcHBWZXJzaW9uIiwiaXNMb3dJRSIsImlzSUU4IiwiYWxsIiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJzdXBwb3J0c1RyYW5zaXRpb24iLCJwcm9iYWJseU1vYmlsZSIsInBvcHVwc0NhY2hlIiwiaXNPYmoiLCJ0b0FycmF5IiwiaXRlbSIsInBhcnNlZCIsImlzT3BlbiIsInVwZGF0ZUl0ZW1IVE1MIiwibWFpbkVsIiwiZml4ZWRDb250ZW50UG9zIiwibW9kYWwiLCJjbG9zZU9uQ29udGVudENsaWNrIiwiY2xvc2VPbkJnQ2xpY2siLCJzaG93Q2xvc2VCdG4iLCJlbmFibGVFc2NhcGVLZXkiLCJiZ092ZXJsYXkiLCJfY2hlY2tJZkNsb3NlIiwiY29udGVudENvbnRhaW5lciIsInByZWxvYWRlciIsInRMb2FkaW5nIiwibW9kdWxlcyIsIm4iLCJjbG9zZUJ0bkluc2lkZSIsInZhbHVlcyIsImNsb3NlX3JlcGxhY2VXaXRoIiwiYWxpZ25Ub3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsImZpeGVkQmdQb3MiLCJ1cGRhdGVTaXplIiwid2luZG93SGVpZ2h0Iiwid0giLCJ3aW5kb3dTdHlsZXMiLCJfaGFzU2Nyb2xsQmFyIiwiX2dldFNjcm9sbGJhclNpemUiLCJtYXJnaW5SaWdodCIsImlzSUU3IiwiY2xhc3Nlc1RvYWRkIiwibWFpbkNsYXNzIiwiX2FkZENsYXNzVG9NRlAiLCJfbGFzdEZvY3VzZWRFbCIsImFjdGl2ZUVsZW1lbnQiLCJjb250ZW50IiwiX3NldEZvY3VzIiwiX29uRm9jdXNJbiIsInJlbW92YWxEZWxheSIsIl9jbG9zZSIsImNsYXNzZXNUb1JlbW92ZSIsImVtcHR5IiwiX3JlbW92ZUNsYXNzRnJvbU1GUCIsImN1cnJJdGVtIiwiYXV0b0ZvY3VzTGFzdCIsInByZXZIZWlnaHQiLCJ6b29tTGV2ZWwiLCJwYXJzZUVsIiwibWFya3VwIiwibmV3Q29udGVudCIsImFwcGVuZENvbnRlbnQiLCJwcmVsb2FkZWQiLCJ0YWdOYW1lIiwic3JjIiwiYWRkR3JvdXAiLCJlSGFuZGxlciIsIm1mcEVsIiwiX29wZW5DbGljayIsImVOYW1lIiwiZGVsZWdhdGUiLCJtaWRDbGljayIsIm1ldGFLZXkiLCJkaXNhYmxlT24iLCJpc0Z1bmN0aW9uIiwidXBkYXRlU3RhdHVzIiwic3RhdHVzIiwiY2xvc2VPbkNvbnRlbnQiLCJjbG9zZU9uQmciLCJjTmFtZSIsIl9wYXJzZU1hcmt1cCIsImFyciIsInJlcGxhY2VXaXRoIiwic2Nyb2xsYmFyU2l6ZSIsInNjcm9sbERpdiIsInJlbW92ZUNoaWxkIiwicHJvdG8iLCJyZWdpc3Rlck1vZHVsZSIsImpxRWwiLCJpdGVtT3B0cyIsIklOTElORV9OUyIsIl9oaWRkZW5DbGFzcyIsIl9pbmxpbmVQbGFjZWhvbGRlciIsIl9sYXN0SW5saW5lRWxlbWVudCIsIl9wdXRJbmxpbmVFbGVtZW50c0JhY2siLCJhZnRlciIsImhpZGRlbkNsYXNzIiwidE5vdEZvdW5kIiwiaW5pdElubGluZSIsImdldElubGluZSIsImlubGluZVN0IiwiaW5saW5lIiwiaW5saW5lRWxlbWVudCIsIkFKQVhfTlMiLCJfYWpheEN1ciIsIl9yZW1vdmVBamF4Q3Vyc29yIiwiX2Rlc3Ryb3lBamF4UmVxdWVzdCIsInJlcSIsImFib3J0Iiwic2V0dGluZ3MiLCJjdXJzb3IiLCJ0RXJyb3IiLCJpbml0QWpheCIsImFqYXgiLCJnZXRBamF4Iiwic3VjY2VzcyIsInRleHRTdGF0dXMiLCJqcVhIUiIsInhociIsImZpbmlzaGVkIiwibG9hZEVycm9yIiwiX2ltZ0ludGVydmFsIiwiX2dldFRpdGxlIiwiaW1hZ2UiLCJ0aXRsZVNyYyIsInZlcnRpY2FsRml0IiwiaW5pdEltYWdlIiwiaW1nU3QiLCJucyIsInJlc2l6ZUltYWdlIiwiaW1nIiwiZGVjciIsIl9vbkltYWdlSGFzU2l6ZSIsImhhc1NpemUiLCJpc0NoZWNraW5nSW1nU2l6ZSIsImltZ0hpZGRlbiIsImZpbmRJbWFnZVNpemUiLCJtZnBTZXRJbnRlcnZhbCIsImdldEltYWdlIiwiZ3VhcmQiLCJvbkxvYWRDb21wbGV0ZSIsImxvYWRlZCIsIm9uTG9hZEVycm9yIiwiYWx0IiwiaW1nX3JlcGxhY2VXaXRoIiwibG9hZGluZyIsImhhc01velRyYW5zZm9ybSIsImdldEhhc01velRyYW5zZm9ybSIsIk1velRyYW5zZm9ybSIsIm9wZW5lciIsImluaXRab29tIiwiem9vbVN0Iiwiem9vbSIsImdldEVsVG9BbmltYXRlIiwibmV3SW1nIiwidHJhbnNpdGlvbiIsImNzc09iaiIsInpJbmRleCIsInNob3dNYWluQ29udGVudCIsIm9wZW5UaW1lb3V0IiwiYW5pbWF0ZWRJbWciLCJfYWxsb3dab29tIiwiX2dldEl0ZW1Ub1pvb20iLCJfZ2V0T2Zmc2V0IiwiaXNMYXJnZSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwib2JqIiwiSUZSQU1FX05TIiwiX2VtcHR5UGFnZSIsIl9maXhJZnJhbWVCdWdzIiwiaXNTaG93aW5nIiwic3JjQWN0aW9uIiwieW91dHViZSIsInZpbWVvIiwiZ21hcHMiLCJpbml0SWZyYW1lIiwicHJldlR5cGUiLCJuZXdUeXBlIiwiZ2V0SWZyYW1lIiwiZW1iZWRTcmMiLCJpZnJhbWVTdCIsImlmcmFtZSIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwiZGF0YU9iaiIsIl9nZXRMb29wZWRJZCIsIm51bVNsaWRlcyIsIl9yZXBsYWNlQ3VyclRvdGFsIiwiY3VyciIsInRvdGFsIiwiYXJyb3dNYXJrdXAiLCJwcmVsb2FkIiwibmF2aWdhdGVCeUltZ0NsaWNrIiwiYXJyb3dzIiwidFByZXYiLCJ0TmV4dCIsInRDb3VudGVyIiwiaW5pdEdhbGxlcnkiLCJnU3QiLCJnYWxsZXJ5IiwibCIsImFycm93TGVmdCIsImFycm93UmlnaHQiLCJjbGljayIsIl9wcmVsb2FkVGltZW91dCIsInByZWxvYWROZWFyYnlJbWFnZXMiLCJnb1RvIiwibmV3SW5kZXgiLCJwcmVsb2FkQmVmb3JlIiwicHJlbG9hZEFmdGVyIiwiX3ByZWxvYWRJdGVtIiwiUkVUSU5BX05TIiwicmVwbGFjZVNyYyIsIm0iLCJyYXRpbyIsImluaXRSZXRpbmEiLCJkZXZpY2VQaXhlbFJhdGlvIiwia2V5Q291bnRlciIsImFsbFdheXBvaW50cyIsIldheXBvaW50IiwiaGFuZGxlciIsIkFkYXB0ZXIiLCJhZGFwdGVyIiwiYXhpcyIsImhvcml6b250YWwiLCJ0cmlnZ2VyUG9pbnQiLCJHcm91cCIsImZpbmRPckNyZWF0ZSIsIkNvbnRleHQiLCJmaW5kT3JDcmVhdGVCeUVsZW1lbnQiLCJvZmZzZXRBbGlhc2VzIiwicXVldWVUcmlnZ2VyIiwiZGlzYWJsZSIsImVuYWJsZSIsInJlZnJlc2giLCJpbnZva2VBbGwiLCJhbGxXYXlwb2ludHNBcnJheSIsIndheXBvaW50S2V5IiwiZGVzdHJveUFsbCIsImRpc2FibGVBbGwiLCJlbmFibGVBbGwiLCJyZWZyZXNoQWxsIiwidmlld3BvcnRIZWlnaHQiLCJ2aWV3cG9ydFdpZHRoIiwiYWRhcHRlcnMiLCJjb250aW51b3VzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lU2hpbSIsImNvbnRleHRzIiwib2xkV2luZG93TG9hZCIsIm9ubG9hZCIsImRpZFNjcm9sbCIsImRpZFJlc2l6ZSIsIm9sZFNjcm9sbCIsIndheXBvaW50cyIsIndheXBvaW50Q29udGV4dEtleSIsIndpbmRvd0NvbnRleHQiLCJjcmVhdGVUaHJvdHRsZWRTY3JvbGxIYW5kbGVyIiwiY3JlYXRlVGhyb3R0bGVkUmVzaXplSGFuZGxlciIsIndheXBvaW50IiwiY2hlY2tFbXB0eSIsImhvcml6b250YWxFbXB0eSIsInZlcnRpY2FsRW1wdHkiLCJpc1dpbmRvdyIsInJlc2l6ZUhhbmRsZXIiLCJoYW5kbGVSZXNpemUiLCJzY3JvbGxIYW5kbGVyIiwiaGFuZGxlU2Nyb2xsIiwiaXNUb3VjaCIsInRyaWdnZXJlZEdyb3VwcyIsImF4ZXMiLCJuZXdTY3JvbGwiLCJmb3J3YXJkIiwiYmFja3dhcmQiLCJheGlzS2V5IiwiaXNGb3J3YXJkIiwid2FzQmVmb3JlVHJpZ2dlclBvaW50Iiwibm93QWZ0ZXJUcmlnZ2VyUG9pbnQiLCJjcm9zc2VkRm9yd2FyZCIsImNyb3NzZWRCYWNrd2FyZCIsImdyb3VwS2V5IiwiZmx1c2hUcmlnZ2VycyIsImNvbnRleHRPZmZzZXQiLCJjb250ZXh0U2Nyb2xsIiwiY29udGV4dERpbWVuc2lvbiIsIm9mZnNldFByb3AiLCJhZGp1c3RtZW50Iiwib2xkVHJpZ2dlclBvaW50IiwiZnJlc2hXYXlwb2ludCIsImNvbnRleHRNb2RpZmllciIsIndhc0JlZm9yZVNjcm9sbCIsIm5vd0FmdGVyU2Nyb2xsIiwidHJpZ2dlcmVkQmFja3dhcmQiLCJ0cmlnZ2VyZWRGb3J3YXJkIiwiY2VpbCIsImZsb29yIiwiZmluZEJ5RWxlbWVudCIsImNvbnRleHRJZCIsInJlcXVlc3RGbiIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsImJ5VHJpZ2dlclBvaW50IiwiYSIsImIiLCJieVJldmVyc2VUcmlnZ2VyUG9pbnQiLCJjbGVhclRyaWdnZXJRdWV1ZXMiLCJ0cmlnZ2VyUXVldWVzIiwic29ydCIsImluQXJyYXkiLCJpc0xhc3QiLCJKUXVlcnlBZGFwdGVyIiwiY3JlYXRlRXh0ZW5zaW9uIiwiZnJhbWV3b3JrIiwib3ZlcnJpZGVzIiwicm9vdCIsIlBob3RvU3dpcGVVSV9EZWZhdWx0IiwicHN3cCIsInVpIiwiX292ZXJsYXlVSVVwZGF0ZWQiLCJfY29udHJvbHNWaXNpYmxlIiwiX2Z1bGxzY3JlbkFQSSIsIl9jb250cm9scyIsIl9jYXB0aW9uQ29udGFpbmVyIiwiX2Zha2VDYXB0aW9uQ29udGFpbmVyIiwiX2luZGV4SW5kaWNhdG9yIiwiX3NoYXJlQnV0dG9uIiwiX3NoYXJlTW9kYWwiLCJfc2hhcmVNb2RhbEhpZGRlbiIsIl9pbml0YWxDbG9zZU9uU2Nyb2xsVmFsdWUiLCJfaXNJZGxlIiwiX2xpc3RlbiIsIl9sb2FkaW5nSW5kaWNhdG9yIiwiX2xvYWRpbmdJbmRpY2F0b3JIaWRkZW4iLCJfbG9hZGluZ0luZGljYXRvclRpbWVvdXQiLCJfZ2FsbGVyeUhhc09uZVNsaWRlIiwiX29wdGlvbnMiLCJfZGVmYXVsdFVJT3B0aW9ucyIsImJhcnNTaXplIiwiY2xvc2VFbENsYXNzZXMiLCJ0aW1lVG9JZGxlIiwidGltZVRvSWRsZU91dHNpZGUiLCJsb2FkaW5nSW5kaWNhdG9yRGVsYXkiLCJhZGRDYXB0aW9uSFRNTEZuIiwiY2FwdGlvbkVsIiwiY2xvc2VFbCIsImZ1bGxzY3JlZW5FbCIsInpvb21FbCIsInNoYXJlRWwiLCJjb3VudGVyRWwiLCJhcnJvd0VsIiwicHJlbG9hZGVyRWwiLCJ0YXBUb0Nsb3NlIiwidGFwVG9Ub2dnbGVDb250cm9scyIsImNsaWNrVG9DbG9zZU5vblpvb21hYmxlIiwic2hhcmVCdXR0b25zIiwibGFiZWwiLCJkb3dubG9hZCIsImdldEltYWdlVVJMRm9yU2hhcmUiLCJnZXRQYWdlVVJMRm9yU2hhcmUiLCJocmVmIiwiZ2V0VGV4dEZvclNoYXJlIiwiaW5kZXhJbmRpY2F0b3JTZXAiLCJmaXRDb250cm9sc1dpZHRoIiwiX2Jsb2NrQ29udHJvbHNUYXAiLCJfYmxvY2tDb250cm9sc1RhcFRpbWVvdXQiLCJfb25Db250cm9sc1RhcCIsIm1vdXNlVXNlZCIsIl9vbklkbGVNb3VzZU1vdmUiLCJ1aUVsZW1lbnQiLCJjbGlja2VkQ2xhc3MiLCJmb3VuZCIsIl91aUVsZW1lbnRzIiwib25UYXAiLCJ0YXBEZWxheSIsImZlYXR1cmVzIiwiaXNPbGRBbmRyb2lkIiwiX2ZpdENvbnRyb2xzSW5WaWV3cG9ydCIsImxpa2VseVRvdWNoRGV2aWNlIiwic2NyZWVuIiwiX3RvZ2dsZVBzd3BDbGFzcyIsIl9jb3VudE51bUl0ZW1zIiwiaGFzT25lU2xpZGUiLCJnZXROdW1JdGVtc0ZuIiwiX3RvZ2dsZVNoYXJlTW9kYWxDbGFzcyIsIl90b2dnbGVTaGFyZU1vZGFsIiwiX3VwZGF0ZVNoYXJlVVJMcyIsIl9vcGVuV2luZG93UG9wdXAiLCJzaG91dCIsInNoYXJlQnV0dG9uT3V0Iiwic2hhcmVCdXR0b25EYXRhIiwic2hhcmVVUkwiLCJpbWFnZV91cmwiLCJwYWdlX3VybCIsInNoYXJlX3RleHQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJzZVNoYXJlQnV0dG9uT3V0Iiwib25jbGljayIsIl9oYXNDbG9zZUNsYXNzIiwiX2lkbGVJbnRlcnZhbCIsIl9pZGxlVGltZXIiLCJfaWRsZUluY3JlbWVudCIsInNldElkbGUiLCJfb25Nb3VzZUxlYXZlV2luZG93IiwiZnJvbSIsInJlbGF0ZWRUYXJnZXQiLCJ0b0VsZW1lbnQiLCJfc2V0dXBGdWxsc2NyZWVuQVBJIiwiZ2V0RnVsbHNjcmVlbkFQSSIsImV2ZW50SyIsInVwZGF0ZUZ1bGxzY3JlZW4iLCJfc2V0dXBMb2FkaW5nSW5kaWNhdG9yIiwiX3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IiLCJhbGxvd1Byb2dyZXNzaXZlSW1nIiwiX2FwcGx5TmF2QmFyR2FwcyIsImdhcCIsInZHYXAiLCJiYXJzIiwiY3JlYXRlRWwiLCJjYXB0aW9uU2l6ZSIsIl9zZXR1cElkbGUiLCJfc2V0dXBIaWRpbmdDb250cm9sc0R1cmluZ0dlc3R1cmVzIiwiaGlkZUNvbnRyb2xzIiwic2hvd0NvbnRyb2xzIiwicGluY2hDb250cm9sc0hpZGRlbiIsIm9wdGlvbiIsIm9uSW5pdCIsInRvZ2dsZURlc2t0b3Bab29tIiwiaXNGdWxsc2NyZWVuIiwiZXhpdCIsImVudGVyIiwiX3NldHVwVUlFbGVtZW50cyIsImNsYXNzQXR0ciIsImxvb3BUaHJvdWdoQ2hpbGRFbGVtZW50cyIsInNDaGlsZHJlbiIsInRvcEJhciIsImdldENoaWxkQnlDbGFzcyIsInNjcm9sbFdyYXAiLCJsaXN0ZW4iLCJ1cGRhdGUiLCJwb2ludCIsImluaXRpYWxab29tTGV2ZWwiLCJnZXRab29tTGV2ZWwiLCJ6b29tVG8iLCJnZXREb3VibGVUYXBab29tIiwicHJldmVudE9iaiIsInByZXZlbnQiLCJvbkdsb2JhbFRhcCIsIm9uTW91c2VPdmVyIiwidW5iaW5kIiwiaGlkZUFuaW1hdGlvbkR1cmF0aW9uIiwic2hvd0FuaW1hdGlvbkR1cmF0aW9uIiwiaXNJZGxlIiwidXBkYXRlSW5kZXhJbmRpY2F0b3IiLCJzZXRTY3JvbGxPZmZzZXQiLCJnZXRTY3JvbGxZIiwiZ2V0Q3VycmVudEluZGV4IiwiZGV0YWlsIiwiZml0UmF0aW8iLCJyZWxlYXNlUG9pbnQiLCJzdXBwb3J0c0Z1bGxzY3JlZW4iLCJleGl0RnVsbHNjcmVlbiIsIm1vekNhbmNlbEZ1bGxTY3JlZW4iLCJ3ZWJraXRFeGl0RnVsbHNjcmVlbiIsIm1zRXhpdEZ1bGxzY3JlZW4iLCJkRSIsImFwaSIsInRGIiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJlbnRlcksiLCJleGl0SyIsImVsZW1lbnRLIiwibW96UmVxdWVzdEZ1bGxTY3JlZW4iLCJ3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbiIsIm1zUmVxdWVzdEZ1bGxzY3JlZW4iLCJjbG9zZU9uU2Nyb2xsIiwiRWxlbWVudCIsIkFMTE9XX0tFWUJPQVJEX0lOUFVUIiwiUGhvdG9Td2lwZSIsIlVpQ2xhc3MiLCJsaXN0ZW5lciIsIm1ldGhvZE5hbWUiLCJjbGFzc2VzIiwidGFnIiwieU9mZnNldCIsInJlZyIsInBhcmVudEVsIiwiY2hpbGRDbGFzc05hbWUiLCJub2RlIiwiZmlyc3RDaGlsZCIsImFycmF5U2VhcmNoIiwiYXJyYXkiLCJvMSIsIm8yIiwicHJldmVudE92ZXJ3cml0ZSIsInNpbmUiLCJvdXQiLCJzaW4iLCJQSSIsImluT3V0IiwiY29zIiwiY3ViaWMiLCJkZXRlY3RGZWF0dXJlcyIsImhlbHBlckVsIiwiaGVscGVyU3R5bGUiLCJ2ZW5kb3IiLCJvbGRJRSIsInRvdWNoIiwicmFmIiwiY2FmIiwicG9pbnRlckV2ZW50IiwicG9pbnRlckVuYWJsZWQiLCJtc1BvaW50ZXJFbmFibGVkIiwidWEiLCJwbGF0Zm9ybSIsImlzT2xkSU9TUGhvbmUiLCJhbmRyb2lkdmVyc2lvbiIsImFuZHJvaWRWZXJzaW9uIiwiaXNNb2JpbGVPcGVyYSIsInN0eWxlQ2hlY2tzIiwic3R5bGVDaGVja0l0ZW0iLCJzdHlsZU5hbWUiLCJjdXJyVGltZSIsInRpbWVUb0NhbGwiLCJzdmciLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVTVkdSZWN0IiwiZXZOYW1lIiwiX2hhbmRsZUV2IiwiaGFuZGxlRXZlbnQiLCJET1VCTEVfVEFQX1JBRElVUyIsIk5VTV9IT0xERVJTIiwiYWxsb3dQYW5Ub05leHQiLCJzcGFjaW5nIiwiYmdPcGFjaXR5IiwibG9vcCIsInBpbmNoVG9DbG9zZSIsImNsb3NlT25WZXJ0aWNhbERyYWciLCJ2ZXJ0aWNhbERyYWdSYW5nZSIsInNob3dIaWRlT3BhY2l0eSIsImVzY0tleSIsImFycm93S2V5cyIsIm1haW5TY3JvbGxFbmRGcmljdGlvbiIsInBhbkVuZEZyaWN0aW9uIiwiaXNDbGlja2FibGVFbGVtZW50IiwiaXNNb3VzZUNsaWNrIiwibWF4U3ByZWFkWm9vbSIsInNjYWxlTW9kZSIsIl9nZXRFbXB0eVBvaW50IiwiX2lzT3BlbiIsIl9pc0Rlc3Ryb3lpbmciLCJfY2xvc2VkQnlTY3JvbGwiLCJfY3VycmVudEl0ZW1JbmRleCIsIl9jb250YWluZXJTdHlsZSIsIl9jb250YWluZXJTaGlmdEluZGV4IiwiX2N1cnJQYW5EaXN0IiwiX3N0YXJ0UGFuT2Zmc2V0IiwiX3Bhbk9mZnNldCIsIl91cE1vdmVFdmVudHMiLCJfZG93bkV2ZW50cyIsIl9nbG9iYWxFdmVudEhhbmRsZXJzIiwiX3ZpZXdwb3J0U2l6ZSIsIl9jdXJyWm9vbUxldmVsIiwiX3N0YXJ0Wm9vbUxldmVsIiwiX3RyYW5zbGF0ZVByZWZpeCIsIl90cmFuc2xhdGVTdWZpeCIsIl91cGRhdGVTaXplSW50ZXJ2YWwiLCJfaXRlbXNOZWVkVXBkYXRlIiwiX2N1cnJQb3NpdGlvbkluZGV4IiwiX29mZnNldCIsIl9zbGlkZVNpemUiLCJfaXRlbUhvbGRlcnMiLCJfcHJldkl0ZW1JbmRleCIsIl9pbmRleERpZmYiLCJfZHJhZ1N0YXJ0RXZlbnQiLCJfZHJhZ01vdmVFdmVudCIsIl9kcmFnRW5kRXZlbnQiLCJfZHJhZ0NhbmNlbEV2ZW50IiwiX3RyYW5zZm9ybUtleSIsIl9wb2ludGVyRXZlbnRFbmFibGVkIiwiX2lzRml4ZWRQb3NpdGlvbiIsIl9saWtlbHlUb3VjaERldmljZSIsIl9tb2R1bGVzIiwiX3JlcXVlc3RBRiIsIl9jYW5jZWxBRiIsIl9pbml0YWxDbGFzc05hbWUiLCJfaW5pdGFsV2luZG93U2Nyb2xsWSIsIl9vbGRJRSIsIl9jdXJyZW50V2luZG93U2Nyb2xsWSIsIl9mZWF0dXJlcyIsIl93aW5kb3dWaXNpYmxlU2l6ZSIsIl9yZW5kZXJNYXhSZXNvbHV0aW9uIiwiX3JlZ2lzdGVyTW9kdWxlIiwicHVibGljTWV0aG9kcyIsIl9nZXROdW1JdGVtcyIsIl9saXN0ZW5lcnMiLCJfc2hvdXQiLCJzaGlmdCIsIl9nZXRDdXJyZW50VGltZSIsIl9hcHBseUJnT3BhY2l0eSIsIm9wYWNpdHkiLCJfYmdPcGFjaXR5IiwiYmciLCJfYXBwbHlab29tVHJhbnNmb3JtIiwic3R5bGVPYmoiLCJfYXBwbHlDdXJyZW50Wm9vbVBhbiIsImFsbG93UmVuZGVyUmVzb2x1dGlvbiIsIl9jdXJyWm9vbUVsZW1lbnRTdHlsZSIsIl9zZXRJbWFnZVNpemUiLCJfYXBwbHlab29tUGFuVG9JdGVtIiwiaW5pdGlhbFBvc2l0aW9uIiwiX3NldFRyYW5zbGF0ZVgiLCJlbFN0eWxlIiwiX21vdmVNYWluU2Nyb2xsIiwiZHJhZ2dpbmciLCJuZXdTbGlkZUluZGV4T2Zmc2V0IiwiZGVsdGEiLCJfbWFpblNjcm9sbFBvcyIsIl9jYWxjdWxhdGVQYW5PZmZzZXQiLCJfbWlkWm9vbVBvaW50IiwiX2VxdWFsaXplUG9pbnRzIiwicDEiLCJwMiIsIl9yb3VuZFBvaW50IiwiX21vdXNlTW92ZVRpbWVvdXQiLCJfb25GaXJzdE1vdXNlTW92ZSIsIl9iaW5kRXZlbnRzIiwidHJhbnNmb3JtIiwiX3VuYmluZEV2ZW50cyIsIl9pc0RyYWdnaW5nIiwiX2NhbGN1bGF0ZVBhbkJvdW5kcyIsImJvdW5kcyIsIl9jYWxjdWxhdGVJdGVtU2l6ZSIsIl9jdXJyUGFuQm91bmRzIiwiX2dldE1pblpvb21MZXZlbCIsIl9nZXRNYXhab29tTGV2ZWwiLCJfbW9kaWZ5RGVzdFBhbk9mZnNldCIsImRlc3RQYW5Cb3VuZHMiLCJkZXN0UGFuT2Zmc2V0IiwiZGVzdFpvb21MZXZlbCIsIl9zZXR1cFRyYW5zZm9ybXMiLCJhbGxvdzNkVHJhbnNmb3JtIiwicGVyc3BlY3RpdmUiLCJ6b29tUmF0aW8iLCJoIiwiX29uS2V5RG93biIsImtleWRvd25BY3Rpb24iLCJfb25HbG9iYWxDbGljayIsIl9tb3ZlZCIsIl96b29tU3RhcnRlZCIsIl9tYWluU2Nyb2xsQW5pbWF0aW5nIiwiX3ZlcnRpY2FsRHJhZ0luaXRpYXRlZCIsIl91cGRhdGVQYWdlU2Nyb2xsT2Zmc2V0IiwiX2FuaW1hdGlvbnMiLCJfbnVtQW5pbWF0aW9ucyIsIl9zdG9wQW5pbWF0aW9uIiwiX3JlZ2lzdGVyU3RhcnRBbmltYXRpb24iLCJfc3RvcEFsbEFuaW1hdGlvbnMiLCJfYW5pbWF0ZVByb3AiLCJlbmRQcm9wIiwiZWFzaW5nRm4iLCJvblVwZGF0ZSIsIm9uQ29tcGxldGUiLCJzdGFydEFuaW1UaW1lIiwiYW5pbWxvb3AiLCJpc01haW5TY3JvbGxBbmltYXRpbmciLCJpc0RyYWdnaW5nIiwiaXNab29taW5nIiwiX2lzWm9vbWluZyIsImFwcGx5Wm9vbVBhbiIsInBhblgiLCJwYW5ZIiwiaXRlbUhvbGRlcnMiLCJkaXNwbGF5IiwicmVzaXplIiwia2V5ZG93biIsIm9sZFBob25lIiwiYW5pbWF0aW9uTmFtZSIsIl9nZXRJdGVtQXQiLCJyb290Q2xhc3NlcyIsInNldENvbnRlbnQiLCJ1cGRhdGVDdXJySXRlbSIsIl9zaG93T3JIaWRlIiwiX3Nob3dPckhpZGVUaW1lb3V0IiwiX3N0b3BEcmFnVXBkYXRlTG9vcCIsInBhblRvIiwiZm9yY2UiLCJkaWZmIiwidXBkYXRlQ3Vyclpvb21JdGVtIiwiZW11bGF0ZVNldENvbnRlbnQiLCJ6b29tRWxlbWVudCIsImNlbnRlciIsImludmFsaWRhdGVDdXJySXRlbXMiLCJuZWVkc1VwZGF0ZSIsImJlZm9yZUFuaW1hdGlvbiIsImRpZmZBYnMiLCJ0ZW1wSG9sZGVyIiwidW5zaGlmdCIsInByZXZJdGVtIiwid2luZG93U2Nyb2xsWSIsImhvbGRlciIsImhJbmRleCIsImNsZWFuU2xpZGUiLCJjZW50ZXJQb2ludCIsInNwZWVkIiwidXBkYXRlRm4iLCJpbml0aWFsUGFuT2Zmc2V0IiwiTUlOX1NXSVBFX0RJU1RBTkNFIiwiRElSRUNUSU9OX0NIRUNLX09GRlNFVCIsIl9nZXN0dXJlU3RhcnRUaW1lIiwiX2dlc3R1cmVDaGVja1NwZWVkVGltZSIsIl9jdXJyUG9pbnQiLCJfc3RhcnRQb2ludCIsIl9jdXJyUG9pbnRlcnMiLCJfc3RhcnRNYWluU2Nyb2xsUG9zIiwiX3JlbGVhc2VBbmltRGF0YSIsIl9wb3NQb2ludHMiLCJfdGVtcFBvaW50IiwiX2lzWm9vbWluZ0luIiwiX29sZEFuZHJvaWRUb3VjaEVuZFRpbWVvdXQiLCJfY3Vyclpvb21lZEl0ZW1JbmRleCIsIl9jZW50ZXJQb2ludCIsIl9sYXN0UmVsZWFzZVRpbWUiLCJfaXNNdWx0aXRvdWNoIiwiX2RyYWdBbmltRnJhbWUiLCJfbWFpblNjcm9sbFNoaWZ0ZWQiLCJfY3VycmVudFBvaW50cyIsIl9jdXJyUG9pbnRzRGlzdGFuY2UiLCJfc3RhcnRQb2ludHNEaXN0YW5jZSIsIl9jdXJyQ2VudGVyUG9pbnQiLCJfZGlyZWN0aW9uIiwiX2lzRmlyc3RNb3ZlIiwiX29wYWNpdHlDaGFuZ2VkIiwiX3dhc092ZXJJbml0aWFsWm9vbSIsIl9pc0VxdWFsUG9pbnRzIiwiX2lzTmVhcmJ5UG9pbnRzIiwidG91Y2gwIiwidG91Y2gxIiwiX2NhbGN1bGF0ZVBvaW50c0Rpc3RhbmNlIiwic3FydCIsIl9kcmFnVXBkYXRlTG9vcCIsIl9yZW5kZXJNb3ZlbWVudCIsIl9jYW5QYW4iLCJfY2xvc2VzdEVsZW1lbnQiLCJfcHJldmVudE9iaiIsIl9wcmV2ZW50RGVmYXVsdEV2ZW50QmVoYXZpb3VyIiwiX2NvbnZlcnRUb3VjaFRvUG9pbnQiLCJpZGVudGlmaWVyIiwiX2ZpbmRDZW50ZXJPZlBvaW50cyIsInBDZW50ZXIiLCJfcHVzaFBvc1BvaW50IiwibyIsIl9jYWxjdWxhdGVWZXJ0aWNhbERyYWdPcGFjaXR5UmF0aW8iLCJfZVBvaW50MSIsIl9lUG9pbnQyIiwiX3RlbXBQb2ludHNBcnIiLCJfdGVtcENvdW50ZXIiLCJfZ2V0VG91Y2hQb2ludHMiLCJfcGFuT3JNb3ZlTWFpblNjcm9sbCIsInBhbkZyaWN0aW9uIiwib3ZlckRpZmYiLCJuZXdPZmZzZXQiLCJzdGFydE92ZXJEaWZmIiwibmV3TWFpblNjcm9sbFBvc2l0aW9uIiwibWFpblNjcm9sbERpZmYiLCJuZXdQYW5Qb3MiLCJuZXdNYWluU2Nyb2xsUG9zIiwiX29uRHJhZ1N0YXJ0IiwiYnV0dG9uIiwiX2luaXRpYWxab29tUnVubmluZyIsInBvaW50ZXJJbmRleCIsInBvaW50ZXJJZCIsInN0YXJ0UG9pbnRzTGlzdCIsIm51bVBvaW50cyIsIl9vbkRyYWdNb3ZlIiwidG91Y2hlc0xpc3QiLCJwb2ludHNEaXN0YW5jZSIsIl9jYWxjdWxhdGVab29tTGV2ZWwiLCJ6b29tRnJpY3Rpb24iLCJtaW5ab29tTGV2ZWwiLCJtYXhab29tTGV2ZWwiLCJtaW51c0RpZmYiLCJvcGFjaXR5UmF0aW8iLCJtYWluU2Nyb2xsQ2hhbmdlZCIsIl9vbkRyYWdSZWxlYXNlIiwiTVNQT0lOVEVSX1RZUEVTIiwidG91Y2hMaXN0IiwiZ2VzdHVyZVR5cGUiLCJyZWxlYXNlVGltZURpZmYiLCJfaW5pdERyYWdSZWxlYXNlQW5pbWF0aW9uRGF0YSIsImNhbGN1bGF0ZVN3aXBlU3BlZWQiLCJpbml0YWxQYW5ZIiwiaW5pdGlhbEJnT3BhY2l0eSIsIml0ZW1DaGFuZ2VkIiwiX2ZpbmlzaFN3aXBlTWFpblNjcm9sbEdlc3R1cmUiLCJfY29tcGxldGVab29tR2VzdHVyZSIsIl9jb21wbGV0ZVBhbkdlc3R1cmUiLCJsYXN0RmxpY2tEdXJhdGlvbiIsInRlbXBSZWxlYXNlUG9zIiwibGFzdEZsaWNrT2Zmc2V0IiwibGFzdEZsaWNrRGlzdCIsImxhc3RGbGlja1NwZWVkIiwic2xvd0Rvd25SYXRpbyIsInNsb3dEb3duUmF0aW9SZXZlcnNlIiwic3BlZWREZWNlbGVyYXRpb25SYXRpbyIsInNwZWVkRGVjZWxlcmF0aW9uUmF0aW9BYnMiLCJkaXN0YW5jZU9mZnNldCIsImJhY2tBbmltRGVzdGluYXRpb24iLCJiYWNrQW5pbVN0YXJ0ZWQiLCJjYWxjdWxhdGVPdmVyQm91bmRzQW5pbU9mZnNldCIsInBvcyIsImNhbGN1bGF0ZUFuaW1PZmZzZXQiLCJ0aW1lRGlmZiIsInBhbkFuaW1Mb29wIiwiem9vbVBhbiIsImxhc3ROb3ciLCJhbmltRGF0YSIsIml0ZW1zRGlmZiIsInRvdGFsU2hpZnREaXN0IiwiaXNGYXN0TGFzdEZsaWNrIiwibmV4dENpcmNsZSIsImFuaW1hdGVUb1giLCJhbmltYXRlVG9EaXN0IiwiZmluaXNoQW5pbUR1cmF0aW9uIiwidG91Y2hlc0Rpc3RhbmNlIiwiZGVzdE9wYWNpdHkiLCJpbml0aWFsT3BhY2l0eSIsImluaXRHZXN0dXJlcyIsImFkZEV2ZW50TmFtZXMiLCJwcmVmIiwiY2FuY2VsIiwibWF4VG91Y2hQb2ludHMiLCJtc01heFRvdWNoUG9pbnRzIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsImNvbXBsZXRlRm4iLCJfaW5pdGlhbENvbnRlbnRTZXQiLCJ0aHVtYkJvdW5kcyIsImluaXRpYWxMYXlvdXQiLCJnZXRUaHVtYkJvdW5kc0ZuIiwicmVtb3ZlQXR0cmlidXRlIiwic3RhcnRBbmltYXRpb24iLCJjbG9zZVdpdGhSYWYiLCJmYWRlRXZlcnl0aGluZyIsIm1pbmlJbWciLCJ3ZWJraXRCYWNrZmFjZVZpc2liaWxpdHkiLCJpbml0YWxCZ09wYWNpdHkiLCJfaXRlbXMiLCJfdGVtcFBhbkFyZWFTaXplIiwiX2ltYWdlc1RvQXBwZW5kUG9vbCIsIl9jb250cm9sbGVyRGVmYXVsdE9wdGlvbnMiLCJlcnJvck1zZyIsImZvcmNlUHJvZ3Jlc3NpdmVMb2FkaW5nIiwiX2luaXRpYWxJc0xvb3AiLCJfZ2V0WmVyb0JvdW5kcyIsIl9jYWxjdWxhdGVTaW5nbGVJdGVtUGFuQm91bmRzIiwicmVhbFBhbkVsZW1lbnRXIiwicmVhbFBhbkVsZW1lbnRIIiwiaXNJbml0aWFsIiwiaFJhdGlvIiwidlJhdGlvIiwiX2FwcGVuZEltYWdlIiwiYmFzZURpdiIsInByZXZlbnRBbmltYXRpb24iLCJrZWVwUGxhY2Vob2xkZXIiLCJpbWFnZUFwcGVuZGVkIiwicGxhY2Vob2xkZXIiLCJfcHJlbG9hZEltYWdlIiwibG9hZENvbXBsZXRlIiwib25lcnJvciIsIl9jaGVja0ZvckVycm9yIiwiY2xlYW5VcCIsIm1heFJlcyIsImxhc3RDaGlsZCIsIl9hcHBlbmRJbWFnZXNQb29sIiwicG9vbEl0ZW0iLCJjbGVhclBsYWNlaG9sZGVyIiwibGF6eUxvYWRJdGVtIiwiaW5pdENvbnRyb2xsZXIiLCJnZXRJdGVtQXQiLCJpc05leHQiLCJwbGFjZWhvbGRlckNsYXNzTmFtZSIsIm1zcmMiLCJ0YXBUaW1lciIsInRhcFJlbGVhc2VQb2ludCIsIl9kaXNwYXRjaFRhcEV2ZW50Iiwib3JpZ0V2ZW50IiwiZURldGFpbCIsImluaXRDdXN0b21FdmVudCIsImluaXRUYXAiLCJvblRhcFN0YXJ0Iiwib25UYXBSZWxlYXNlIiwicDAiLCJjbGlja2VkVGFnTmFtZSIsIl93aGVlbERlbHRhIiwiaW5pdERlc2t0b3Bab29tIiwic2V0dXBEZXNrdG9wWm9vbSIsImV2ZW50cyIsImhhbmRsZU1vdXNlV2hlZWwiLCJtb3VzZVpvb21lZEluIiwiaGFzRHJhZ2dpbmdDbGFzcyIsInVwZGF0ZVpvb21hYmxlIiwicmVtb3ZlRHJhZ2dpbmdDbGFzcyIsImRlbHRhWSIsImRlbHRhTW9kZSIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwibmV3UGFuWCIsIm5ld1BhblkiLCJkb3VibGVUYXBab29tTGV2ZWwiLCJ6b29tT3V0IiwiX2hpc3RvcnlEZWZhdWx0T3B0aW9ucyIsImdhbGxlcnlVSUQiLCJfaGlzdG9yeVVwZGF0ZVRpbWVvdXQiLCJfaGFzaENoYW5nZVRpbWVvdXQiLCJfaGFzaEFuaW1DaGVja1RpbWVvdXQiLCJfaGFzaENoYW5nZWRCeVNjcmlwdCIsIl9oYXNoQ2hhbmdlZEJ5SGlzdG9yeSIsIl9oYXNoUmVzZXRlZCIsIl9pbml0aWFsSGFzaCIsIl9oaXN0b3J5Q2hhbmdlZCIsIl9jbG9zZWRGcm9tVVJMIiwiX3VybENoYW5nZWRPbmNlIiwiX3dpbmRvd0xvYyIsIl9zdXBwb3J0c1B1c2hTdGF0ZSIsIl9nZXRIYXNoIiwic3Vic3RyaW5nIiwiX2NsZWFuSGlzdG9yeVRpbWVvdXRzIiwiX3BhcnNlSXRlbUluZGV4RnJvbVVSTCIsInBhcmFtcyIsInZhcnMiLCJwYWlyIiwiZ2FsbGVyeVBJRHMiLCJzZWFyY2hmb3IiLCJwaWQiLCJfdXBkYXRlSGFzaCIsIm5ld0hhc2giLCJuZXdVUkwiLCJpbml0SGlzdG9yeSIsInVwZGF0ZVVSTCIsIm9uSGFzaENoYW5nZSIsInJldHVyblRvT3JpZ2luYWwiLCJiYWNrIiwicGx5ciIsImZ1bGxzY3JlZW4iLCJkZWJ1ZyIsImF1dG9wbGF5Iiwic2Vla1RpbWUiLCJ2b2x1bWUiLCJ2b2x1bWVNaW4iLCJ2b2x1bWVNYXgiLCJ2b2x1bWVTdGVwIiwiZGlzcGxheUR1cmF0aW9uIiwibG9hZFNwcml0ZSIsImljb25QcmVmaXgiLCJpY29uVXJsIiwiY2xpY2tUb1BsYXkiLCJzaG93UG9zdGVyT25FbmQiLCJkaXNhYmxlQ29udGV4dE1lbnUiLCJrZXlib2FyZFNob3JjdXRzIiwiZm9jdXNlZCIsImdsb2JhbCIsInRvb2x0aXBzIiwiY29udHJvbHMiLCJzZWVrIiwic2VsZWN0b3JzIiwiaHRtbDUiLCJlbWJlZCIsImVkaXRhYmxlIiwiYnV0dG9ucyIsInBsYXkiLCJyZXdpbmQiLCJtdXRlIiwiY2FwdGlvbnMiLCJwcm9ncmVzcyIsInBsYXllZCIsImN1cnJlbnRUaW1lIiwidmlkZW9XcmFwcGVyIiwiZW1iZWRXcmFwcGVyIiwic3RvcHBlZCIsInBsYXlpbmciLCJtdXRlZCIsInRvb2x0aXAiLCJoaWRkZW4iLCJpc0lvcyIsImFjdGl2ZSIsInRhYkZvY3VzIiwiZGVmYXVsdEFjdGl2ZSIsImZhbGxiYWNrIiwiYWxsb3dBdWRpbyIsInN0b3JhZ2UiLCJpMThuIiwiYnVmZmVyZWQiLCJ0b2dnbGVNdXRlIiwidG9nZ2xlQ2FwdGlvbnMiLCJ0b2dnbGVGdWxsc2NyZWVuIiwiZnJhbWVUaXRsZSIsInVybHMiLCJzb3VuZGNsb3VkIiwibG9nUHJlZml4IiwiX2Jyb3dzZXJTbmlmZiIsImFwcE5hbWUiLCJmdWxsVmVyc2lvbiIsIm1ham9yVmVyc2lvbiIsIm5hbWVPZmZzZXQiLCJ2ZXJPZmZzZXQiLCJpeCIsImlzSUUiLCJpc0ZpcmVmb3giLCJpc0Nocm9tZSIsImlzU2FmYXJpIiwiX3N1cHBvcnRNaW1lIiwibWltZVR5cGUiLCJjYW5QbGF5VHlwZSIsIl9pbmplY3RTY3JpcHQiLCJzb3VyY2UiLCJmaXJzdFNjcmlwdFRhZyIsIl9pbkFycmF5IiwiaGF5c3RhY2siLCJuZWVkbGUiLCJfcmVwbGFjZUFsbCIsIl93cmFwIiwiZWxlbWVudHMiLCJjaGlsZCIsImNsb25lTm9kZSIsInNpYmxpbmciLCJfcmVtb3ZlIiwiX3ByZXBlbmRDaGlsZCIsIl9zZXRBdHRyaWJ1dGVzIiwiX2lzIiwiYm9vbGVhbiIsIl9pbnNlcnRFbGVtZW50IiwiX2dldENsYXNzbmFtZSIsInN0YXRlIiwiY2xhc3NMaXN0IiwiX2hhc0NsYXNzIiwiX21hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIl9wcm94eUxpc3RlbmVyIiwiZXZlbnROYW1lIiwidXNlckxpc3RlbmVyIiwiZGVmYXVsdExpc3RlbmVyIiwidXNlQ2FwdHVyZSIsIl9vbiIsIl90b2dnbGVMaXN0ZW5lciIsImV2ZW50TGlzdCIsIk5vZGVMaXN0IiwiTm9kZSIsIl9ldmVudCIsImJ1YmJsZXMiLCJwcm9wZXJ0aWVzIiwiQ3VzdG9tRXZlbnQiLCJfdG9nZ2xlU3RhdGUiLCJfZ2V0UGVyY2VudGFnZSIsIl9leHRlbmQiLCJvYmplY3RzIiwiZGVzdGluYXRpb24iLCJwcm9wZXJ0eSIsIm9iamVjdCIsIk51bWJlciIsIm5vZGVMaXN0IiwiaHRtbEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImZ1bmN0aW9uIiwiX3BhcnNlWW91VHViZUlkIiwicmVnZXgiLCIkMiIsIl9wYXJzZVZpbWVvSWQiLCJfZnVsbHNjcmVlbiIsInN1cHBvcnRzRnVsbFNjcmVlbiIsImlzRnVsbFNjcmVlbiIsInJlcXVlc3RGdWxsU2NyZWVuIiwiY2FuY2VsRnVsbFNjcmVlbiIsImZ1bGxTY3JlZW5FdmVudE5hbWUiLCJwcmVmaXgiLCJicm93c2VyUHJlZml4ZXMiLCJpbCIsIm1zRnVsbHNjcmVlbkVuYWJsZWQiLCJmdWxsc2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW5FbGVtZW50IiwiX3N0b3JhZ2UiLCJzdXBwb3J0ZWQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJQbHlyIiwiY29uZmlnIiwidGltZXJzIiwib3JpZ2luYWwiLCJfdHJpZ2dlckV2ZW50IiwiX2NvbnNvbGUiLCJfbG9nIiwiX3dhcm4iLCJfZ2V0SWNvblVybCIsImFic29sdXRlIiwiYnJvd3NlciIsIl9idWlsZENvbnRyb2xzIiwiaWNvblBhdGgiLCJfc2V0dXBGdWxsc2NyZWVuIiwiZnVsbCIsIm5hdGl2ZVN1cHBvcnQiLCJfaW5GcmFtZSIsIl9mb2N1c1RyYXAiLCJfc2V0dXBDYXB0aW9ucyIsIl9nZXRFbGVtZW50IiwidmlkZW9Db250YWluZXIiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJ1c2luZ1RleHRUcmFja3MiLCJ0ZXh0VHJhY2tzIiwiY2FwdGlvblNyYyIsImtpbmQiLCJjaGlsZE5vZGVzIiwiY2FwdGlvbkV4aXN0cyIsInRyYWNrcyIsIl9zaG93Q2FwdGlvbnMiLCJ0cmFjayIsImFjdGl2ZUN1ZXMiLCJfc2V0Q2FwdGlvbiIsImdldEN1ZUFzSFRNTCIsImN1cnJlbnRDYXB0aW9uIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiY2FwdGlvbiIsInJlc3BvbnNlVGV4dCIsImxpbmVTZXBhcmF0b3IiLCJyIiwic2VuZCIsInJlZHJhdyIsIl9zZWVrTWFudWFsQ2FwdGlvbnMiLCJfdGltZWNvZGVDb21tb24iLCJ0YyIsInRjcGFpciIsIl9zdWJUY1NlY3MiLCJfdGltZWNvZGVNaW4iLCJfdGltZWNvZGVNYXgiLCJ0YzEiLCJ0YzIiLCJzZWNvbmRzIiwic3ViY291bnQiLCJjYXB0aW9uc0VuYWJsZWQiLCJfZ2V0RWxlbWVudHMiLCJ0YWJiYWJsZXMiLCJfY2hlY2tGb2N1cyIsIl9pbnNlcnRDaGlsZEVsZW1lbnRzIiwiX2luamVjdENvbnRyb2xzIiwicXVlcnlTZWxlY3RvciIsIl9maW5kRWxlbWVudHMiLCJiYXIiLCJfdG9nZ2xlTmF0aXZlQ29udHJvbHMiLCJfdG9nZ2xlU3R5bGVIb29rIiwiX3NldFRpdGxlIiwiX3NldHVwU3RvcmFnZSIsIl91cGRhdGVTdG9yYWdlIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiX3NldHVwTWVkaWEiLCJvbnRhaW5lciIsIl9zZXR1cEVtYmVkIiwibWVkaWFJZCIsImVtYmVkSWQiLCJjb250YWluZXJzIiwiWVQiLCJfeW91VHViZVJlYWR5Iiwib25Zb3VUdWJlUmVhZHlDYWxsYmFja3MiLCJvbllvdVR1YmVJZnJhbWVBUElSZWFkeSIsIlZpbWVvIiwidmltZW9UaW1lciIsIl92aW1lb1JlYWR5Iiwic291bmRDbG91ZCIsIlNDIiwic291bmRDbG91ZFRpbWVyIiwiX3NvdW5kY2xvdWRSZWFkeSIsIl9lbWJlZFJlYWR5IiwiX3NldHVwSW50ZXJmYWNlIiwiX3JlYWR5IiwidmlkZW9JZCIsIlBsYXllciIsInBsYXllclZhcnMiLCJyZWwiLCJzaG93aW5mbyIsIml2X2xvYWRfcG9saWN5IiwiY2NfbG9hZF9wb2xpY3kiLCJjY19sYW5nX3ByZWYiLCJ3bW9kZSIsIm1vZGVzdGJyYW5kaW5nIiwiZGlzYWJsZWtiIiwib3JpZ2luIiwiY29kZSIsInBsYXlWaWRlbyIsInBhdXNlZCIsInBhdXNlVmlkZW8iLCJzdG9wVmlkZW8iLCJnZXREdXJhdGlvbiIsImlzTXV0ZWQiLCJnZXRWaWRlb0RhdGEiLCJidWZmZXJpbmciLCJnZXRWaWRlb0xvYWRlZEZyYWN0aW9uIiwibGFzdEJ1ZmZlcmVkIiwic2Vla2luZyIsImdldEN1cnJlbnRUaW1lIiwiYnlsaW5lIiwidGhlbiIsIldpZGdldCIsIkV2ZW50cyIsIlJFQURZIiwic2Vla1RvIiwiZ2V0UG9zaXRpb24iLCJQTEFZIiwiUEFVU0UiLCJQTEFZX1BST0dSRVNTIiwiY3VycmVudFBvc2l0aW9uIiwiTE9BRF9QUk9HUkVTUyIsImxvYWRQcm9ncmVzcyIsIkZJTklTSCIsIl9wbGF5IiwiX3BhdXNlIiwiX3RvZ2dsZVBsYXkiLCJfcmV3aW5kIiwiX3NlZWsiLCJfZm9yd2FyZCIsInRhcmdldFRpbWUiLCJfZ2V0RHVyYXRpb24iLCJfdXBkYXRlU2Vla0Rpc3BsYXkiLCJzZXRDdXJyZW50VGltZSIsIm1lZGlhRHVyYXRpb24iLCJfY2hlY2tQbGF5aW5nIiwiX3RvZ2dsZUNvbnRyb2xzIiwiX3NhdmVTY3JvbGxQb3NpdGlvbiIsIl9yZXN0b3JlU2Nyb2xsUG9zaXRpb24iLCJzY3JvbGxUbyIsIl90b2dnbGVGdWxsc2NyZWVuIiwiX3RvZ2dsZU11dGUiLCJfc2V0Vm9sdW1lIiwic2V0Vm9sdW1lIiwiX2luY3JlYXNlVm9sdW1lIiwiX2RlY3JlYXNlVm9sdW1lIiwiX3VwZGF0ZVZvbHVtZSIsIl90b2dnbGVDYXB0aW9ucyIsIl9jaGVja0xvYWRpbmciLCJfdXBkYXRlUHJvZ3Jlc3MiLCJwcmVzc2VkIiwiX3NldFByb2dyZXNzIiwiX3VwZGF0ZVRpbWVEaXNwbGF5Iiwic2VjcyIsIm1pbnMiLCJob3VycyIsImRpc3BsYXlIb3VycyIsIl9kaXNwbGF5RHVyYXRpb24iLCJfdXBkYXRlU2Vla1Rvb2x0aXAiLCJfdGltZVVwZGF0ZSIsImNsaWVudFJlY3QiLCJ2aXNpYmxlIiwiaXNFbnRlckZ1bGxzY3JlZW4iLCJfc291cmNlIiwiX3VwZGF0ZVNvdXJjZSIsImdldFZpZGVvVXJsIiwiZ2V0Q3VycmVudFNvdW5kIiwicGVybWFsaW5rX3VybCIsImN1cnJlbnRTcmMiLCJzb3VyY2VzIiwiX2NhbmNlbFJlcXVlc3RzIiwiZmlyc3RTb3VyY2UiLCJjcm9zc29yaWdpbiIsInBvc3RlciIsImxvYWQiLCJfZGVzdHJveSIsIl91cGRhdGVQb3N0ZXIiLCJfY29udHJvbExpc3RlbmVycyIsImlucHV0RXZlbnQiLCJ0b2dnbGVQbGF5IiwiaGFkVGFiRm9jdXMiLCJnZXRGb2N1c0VsZW1lbnQiLCJnZXRLZXlDb2RlIiwiY2hlY2tUYWJGb2N1cyIsImFsbG93ZWQiLCJjb3VudCIsImhlbGQiLCJzZWVrQnlLZXkiLCJpbnZlcnRlZCIsIndlYmtpdERpcmVjdGlvbkludmVydGVkRnJvbURldmljZSIsIl9tZWRpYUxpc3RlbmVycyIsImVuZGVkIiwicmVzdG9yZSIsInVubG9hZCIsInJlcGxhY2VDaGlsZCIsImJhc2ljIiwiY29udHJvbHNNaXNzaW5nIiwiZ2V0T3JpZ2luYWwiLCJnZXRDb250YWluZXIiLCJnZXRFbWJlZCIsImdldE1lZGlhIiwiZ2V0VHlwZSIsImdldFZvbHVtZSIsImlzUmVhZHkiLCJpc0xvYWRpbmciLCJ0b2dnbGVDb250cm9scyIsImlzT2xkSUUiLCJpc0lwaG9uZSIsImF1ZGlvIiwidmlkZW8iLCJ0YXJnZXRzIiwicGxheWVycyIsImluc3RhbmNlcyIsImhvb2siLCJwbGF5ZXIiLCJsb2ciLCJjYW5jZWxhYmxlIiwiZXZ0IiwiRXZlbnQiLCJTbGljayIsImluc3RhbmNlVWlkIiwiXyIsImRhdGFTZXR0aW5ncyIsImFjY2Vzc2liaWxpdHkiLCJhZGFwdGl2ZUhlaWdodCIsImFwcGVuZEFycm93cyIsImFwcGVuZERvdHMiLCJhc05hdkZvciIsInByZXZBcnJvdyIsIm5leHRBcnJvdyIsImF1dG9wbGF5U3BlZWQiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsImNzc0Vhc2UiLCJjdXN0b21QYWdpbmciLCJzbGlkZXIiLCJkb3RzIiwiZG90c0NsYXNzIiwiZWRnZUZyaWN0aW9uIiwiZmFkZSIsImZvY3VzT25TZWxlY3QiLCJpbml0aWFsU2xpZGUiLCJsYXp5TG9hZCIsIm1vYmlsZUZpcnN0IiwicGF1c2VPbkZvY3VzIiwicGF1c2VPbkRvdHNIb3ZlciIsInJlc3BvbmRUbyIsInJlc3BvbnNpdmUiLCJyb3dzIiwic2xpZGUiLCJzbGlkZXNQZXJSb3ciLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsInN3aXBlVG9TbGlkZSIsInRvdWNoTW92ZSIsInRvdWNoVGhyZXNob2xkIiwidXNlQ1NTIiwidXNlVHJhbnNmb3JtIiwidmFyaWFibGVXaWR0aCIsInZlcnRpY2FsU3dpcGluZyIsIndhaXRGb3JBbmltYXRlIiwiaW5pdGlhbHMiLCJhbmltYXRpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwic2xpZGluZyIsInNsaWRlT2Zmc2V0Iiwic3dpcGVMZWZ0IiwiJGxpc3QiLCJ0b3VjaE9iamVjdCIsInRyYW5zZm9ybXNFbmFibGVkIiwidW5zbGlja2VkIiwiYWN0aXZlQnJlYWtwb2ludCIsImFuaW1UeXBlIiwiYW5pbVByb3AiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRTZXR0aW5ncyIsImNzc1RyYW5zaXRpb25zIiwiZm9jdXNzZWQiLCJpbnRlcnJ1cHRlZCIsInBvc2l0aW9uUHJvcCIsInJvd0NvdW50Iiwic2hvdWxkQ2xpY2siLCIkc2xpZGVyIiwiJHNsaWRlc0NhY2hlIiwidHJhbnNmb3JtVHlwZSIsInRyYW5zaXRpb25UeXBlIiwidmlzaWJpbGl0eUNoYW5nZSIsIndpbmRvd1dpZHRoIiwid2luZG93VGltZXIiLCJvcmlnaW5hbFNldHRpbmdzIiwibW96SGlkZGVuIiwid2Via2l0SGlkZGVuIiwicHJveHkiLCJhdXRvUGxheUNsZWFyIiwiYXV0b1BsYXlJdGVyYXRvciIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzZXRQb3NpdGlvbiIsInN3aXBlSGFuZGxlciIsImRyYWdIYW5kbGVyIiwia2V5SGFuZGxlciIsImh0bWxFeHByIiwicmVnaXN0ZXJCcmVha3BvaW50cyIsImFjdGl2YXRlQURBIiwiYWRkU2xpZGUiLCJzbGlja0FkZCIsImFkZEJlZm9yZSIsImluc2VydEFmdGVyIiwicmVpbml0IiwiYW5pbWF0ZUhlaWdodCIsInRhcmdldEhlaWdodCIsImFuaW1hdGVTbGlkZSIsInRhcmdldExlZnQiLCJhbmltUHJvcHMiLCJhbmltU3RhcnQiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsInNsaWNrIiwic2xpZGVIYW5kbGVyIiwic2xpZGVUbyIsImJ1aWxkQXJyb3dzIiwiYnVpbGREb3RzIiwiZG90IiwiZ2V0RG90Q291bnQiLCJidWlsZE91dCIsIndyYXBBbGwiLCJzZXR1cEluZmluaXRlIiwidXBkYXRlRG90cyIsInNldFNsaWRlQ2xhc3NlcyIsImJ1aWxkUm93cyIsImMiLCJuZXdTbGlkZXMiLCJudW1PZlNsaWRlcyIsIm9yaWdpbmFsU2xpZGVzIiwic2xpZGVzUGVyU2VjdGlvbiIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJyb3ciLCJjaGVja1Jlc3BvbnNpdmUiLCJpbml0aWFsIiwiZm9yY2VVcGRhdGUiLCJicmVha3BvaW50IiwidGFyZ2V0QnJlYWtwb2ludCIsInJlc3BvbmRUb1dpZHRoIiwidHJpZ2dlckJyZWFrcG9pbnQiLCJzbGlkZXJXaWR0aCIsInVuc2xpY2siLCJkb250QW5pbWF0ZSIsImluZGV4T2Zmc2V0IiwidW5ldmVuT2Zmc2V0IiwiY2hlY2tOYXZpZ2FibGUiLCJuYXZpZ2FibGVzIiwicHJldk5hdmlnYWJsZSIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJjbGVhblVwRXZlbnRzIiwiaW50ZXJydXB0IiwidmlzaWJpbGl0eSIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwiY2xlYW5VcFJvd3MiLCJmYWRlU2xpZGUiLCJzbGlkZUluZGV4IiwiZmFkZVNsaWRlT3V0IiwiZmlsdGVyU2xpZGVzIiwic2xpY2tGaWx0ZXIiLCJmb2N1c0hhbmRsZXIiLCIkc2YiLCJnZXRDdXJyZW50Iiwic2xpY2tDdXJyZW50U2xpZGUiLCJicmVha1BvaW50IiwicGFnZXJRdHkiLCJnZXRMZWZ0IiwidmVydGljYWxIZWlnaHQiLCJ2ZXJ0aWNhbE9mZnNldCIsInRhcmdldFNsaWRlIiwib2Zmc2V0TGVmdCIsImdldE9wdGlvbiIsInNsaWNrR2V0T3B0aW9uIiwiaW5kZXhlcyIsImdldFNsaWNrIiwiZ2V0U2xpZGVDb3VudCIsInNsaWRlc1RyYXZlcnNlZCIsInN3aXBlZFNsaWRlIiwiY2VudGVyT2Zmc2V0Iiwic2xpY2tHb1RvIiwiY3JlYXRpb24iLCJzZXRQcm9wcyIsInN0YXJ0TG9hZCIsImxvYWRTbGlkZXIiLCJpbml0aWFsaXplRXZlbnRzIiwidXBkYXRlQXJyb3dzIiwiaW5pdEFEQSIsImluaXRBcnJvd0V2ZW50cyIsImluaXREb3RFdmVudHMiLCJpbml0U2xpZGVFdmVudHMiLCJhY3Rpb24iLCJpbml0VUkiLCJsb2FkUmFuZ2UiLCJjbG9uZVJhbmdlIiwicmFuZ2VTdGFydCIsInJhbmdlRW5kIiwibG9hZEltYWdlcyIsImltYWdlc1Njb3BlIiwiaW1hZ2VTb3VyY2UiLCJpbWFnZVRvTG9hZCIsInByb2dyZXNzaXZlTGF6eUxvYWQiLCJzbGlja05leHQiLCJzbGlja1BhdXNlIiwic2xpY2tQbGF5IiwicG9zdFNsaWRlIiwic2xpY2tQcmV2IiwidHJ5Q291bnQiLCIkaW1nc1RvTG9hZCIsImluaXRpYWxpemluZyIsImxhc3RWaXNpYmxlSW5kZXgiLCJjdXJyZW50QnJlYWtwb2ludCIsInJlc3BvbnNpdmVTZXR0aW5ncyIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInJlbW92ZUJlZm9yZSIsInJlbW92ZUFsbCIsInNldENTUyIsInBvc2l0aW9uUHJvcHMiLCJzZXREaW1lbnNpb25zIiwicGFkZGluZyIsInNldEZhZGUiLCJzZXRIZWlnaHQiLCJzZXRPcHRpb24iLCJzbGlja1NldE9wdGlvbiIsImJvZHlTdHlsZSIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwibXNUcmFuc2l0aW9uIiwiT1RyYW5zZm9ybSIsInBlcnNwZWN0aXZlUHJvcGVydHkiLCJ3ZWJraXRQZXJzcGVjdGl2ZSIsIk1velBlcnNwZWN0aXZlIiwid2Via2l0VHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJhbGxTbGlkZXMiLCJyZW1haW5kZXIiLCJpbmZpbml0ZUNvdW50IiwidGFyZ2V0RWxlbWVudCIsInN5bmMiLCJhbmltU2xpZGUiLCJvbGRTbGlkZSIsInNsaWRlTGVmdCIsIm5hdlRhcmdldCIsInN3aXBlRGlyZWN0aW9uIiwieERpc3QiLCJ5RGlzdCIsInN3aXBlQW5nbGUiLCJzdGFydFgiLCJjdXJYIiwic3RhcnRZIiwiY3VyWSIsImF0YW4yIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50Iiwib3JpZ2luYWxFdmVudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJlZGdlV2FzSGl0IiwiY3VyTGVmdCIsInBvc2l0aW9uT2Zmc2V0IiwidW5maWx0ZXJTbGlkZXMiLCJzbGlja1VuZmlsdGVyIiwiZnJvbUJyZWFrcG9pbnQiLCJmb290ZXIiLCJzdGlja3lGb290ZXIiLCJkaXNwbGF5Tm9uZU1lc3NhZ2UiLCJmaXhlZE1lc3NhZ2UiLCJjaGVja1dheXBvaW50U3R5bGVzIiwib3JpZ2luYWxSZWZyZXNoIiwic3BsaXRfdXJsIiwicGFnZV9udW0iLCJ0YXhvbm9teSIsInRlcm1faWQiLCJwb3N0X3R5cGUiLCJ3aWF3X2dldF9tb3JlX3Bvc3RzIiwicGFnZSIsImV4Y2VwdGlvbiIsImFsZXJ0IiwiYnRuIiwiYnRuX3VybCIsImJlZm9yZSIsIlF1aWNrTG9va0luaXQiXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsVUFBU0EsQ0FBVCxFQUFZOztBQUViOztBQUVBLE1BQUlDLHFCQUFxQixPQUF6Qjs7QUFFQTtBQUNBO0FBQ0EsTUFBSUMsYUFBYTtBQUNmQyxhQUFTRixrQkFETTs7QUFHZjs7O0FBR0FHLGNBQVUsRUFOSzs7QUFRZjs7O0FBR0FDLFlBQVEsRUFYTzs7QUFhZjs7O0FBR0FDLFNBQUssWUFBVTtBQUNiLGFBQU9OLEVBQUUsTUFBRixFQUFVTyxJQUFWLENBQWUsS0FBZixNQUEwQixLQUFqQztBQUNELEtBbEJjO0FBbUJmOzs7O0FBSUFDLFlBQVEsVUFBU0EsTUFBVCxFQUFpQkMsSUFBakIsRUFBdUI7QUFDN0I7QUFDQTtBQUNBLFVBQUlDLFlBQWFELFFBQVFFLGFBQWFILE1BQWIsQ0FBekI7QUFDQTtBQUNBO0FBQ0EsVUFBSUksV0FBWUMsVUFBVUgsU0FBVixDQUFoQjs7QUFFQTtBQUNBLFdBQUtOLFFBQUwsQ0FBY1EsUUFBZCxJQUEwQixLQUFLRixTQUFMLElBQWtCRixNQUE1QztBQUNELEtBakNjO0FBa0NmOzs7Ozs7Ozs7QUFTQU0sb0JBQWdCLFVBQVNOLE1BQVQsRUFBaUJDLElBQWpCLEVBQXNCO0FBQ3BDLFVBQUlNLGFBQWFOLE9BQU9JLFVBQVVKLElBQVYsQ0FBUCxHQUF5QkUsYUFBYUgsT0FBT1EsV0FBcEIsRUFB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LGVBQUYsRUFBbUI0UixJQUFuQjtBQUNBO0FBaERLLElBQVA7QUFrREE7QUFDRCxFQXBHRDtBQXdHQSxDQTFHQSxDQTBHQ2xMLE9BQU9rQyxNQTFHUixDQUFEIiwiZmlsZSI6ImZvdW5kYXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oJCkge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIEZPVU5EQVRJT05fVkVSU0lPTiA9ICc2LjIuNCc7XG5cbi8vIEdsb2JhbCBGb3VuZGF0aW9uIG9iamVjdFxuLy8gVGhpcyBpcyBhdHRhY2hlZCB0byB0aGUgd2luZG93LCBvciB1c2VkIGFzIGEgbW9kdWxlIGZvciBBTUQvQnJvd3NlcmlmeVxudmFyIEZvdW5kYXRpb24gPSB7XG4gIHZlcnNpb246IEZPVU5EQVRJT05fVkVSU0lPTixcblxuICAvKipcbiAgICogU3RvcmVzIGluaXRpYWxpemVkIHBsdWdpbnMuXG4gICAqL1xuICBfcGx1Z2luczoge30sXG5cbiAgLyoqXG4gICAqIFN0b3JlcyBnZW5lcmF0ZWQgdW5pcXVlIGlkcyBmb3IgcGx1Z2luIGluc3RhbmNlc1xuICAgKi9cbiAgX3V1aWRzOiBbXSxcblxuICAvKipcbiAgICogUmV0dXJucyBhIGJvb2xlYW4gZm9yIFJUTCBzdXBwb3J0XG4gICAqL1xuICBydGw6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuICQoJ2h0bWwnKS5hdHRyKCdkaXInKSA9PT0gJ3J0bCc7XG4gIH0sXG4gIC8qKlxuICAgKiBEZWZpbmVzIGEgRm91bmRhdGlvbiBwbHVnaW4sIGFkZGluZyBpdCB0byB0aGUgYEZvdW5kYXRpb25gIG5hbWVzcGFjZSBhbmQgdGhlIGxpc3Qgb2YgcGx1Z2lucyB0byBpbml0aWFsaXplIHdoZW4gcmVmbG93aW5nLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gVGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBwbHVnaW4uXG4gICAqL1xuICBwbHVnaW46IGZ1bmN0aW9uKHBsdWdpbiwgbmFtZSkge1xuICAgIC8vIE9iamVjdCBrZXkgdG8gdXNlIHdoZW4gYWRkaW5nIHRvIGdsb2JhbCBGb3VuZGF0aW9uIG9iamVjdFxuICAgIC8vIEV4YW1wbGVzOiBGb3VuZGF0aW9uLlJldmVhbCwgRm91bmRhdGlvbi5PZmZDYW52YXNcbiAgICB2YXIgY2xhc3NOYW1lID0gKG5hbWUgfHwgZnVuY3Rpb25OYW1lKHBsdWdpbikpO1xuICAgIC8vIE9iamVjdCBrZXkgdG8gdXNlIHdoZW4gc3RvcmluZyB0aGUgcGx1Z2luLCBhbHNvIHVzZWQgdG8gY3JlYXRlIHRoZSBpZGVudGlmeWluZyBkYXRhIGF0dHJpYnV0ZSBmb3IgdGhlIHBsdWdpblxuICAgIC8vIEV4YW1wbGVzOiBkYXRhLXJldmVhbCwgZGF0YS1vZmYtY2FudmFzXG4gICAgdmFyIGF0dHJOYW1lICA9IGh5cGhlbmF0ZShjbGFzc05hbWUpO1xuXG4gICAgLy8gQWRkIHRvIHRoZSBGb3VuZGF0aW9uIG9iamVjdCBhbmQgdGhlIHBsdWdpbnMgbGlzdCAoZm9yIHJlZmxvd2luZylcbiAgICB0aGlzLl9wbHVnaW5zW2F0dHJOYW1lXSA9IHRoaXNbY2xhc3NOYW1lXSA9IHBsdWdpbjtcbiAgfSxcbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBQb3B1bGF0ZXMgdGhlIF91dWlkcyBhcnJheSB3aXRoIHBvaW50ZXJzIHRvIGVhY2ggaW5kaXZpZHVhbCBwbHVnaW4gaW5zdGFuY2UuXG4gICAqIEFkZHMgdGhlIGB6ZlBsdWdpbmAgZGF0YS1hdHRyaWJ1dGUgdG8gcHJvZ3JhbW1hdGljYWxseSBjcmVhdGVkIHBsdWdpbnMgdG8gYWxsb3cgdXNlIG9mICQoc2VsZWN0b3IpLmZvdW5kYXRpb24obWV0aG9kKSBjYWxscy5cbiAgICogQWxzbyBmaXJlcyB0aGUgaW5pdGlhbGl6YXRpb24gZXZlbnQgZm9yIGVhY2ggcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAtIHRoZSBuYW1lIG9mIHRoZSBwbHVnaW4sIHBhc3NlZCBhcyBhIGNhbWVsQ2FzZWQgc3RyaW5nLlxuICAgKiBAZmlyZXMgUGx1Z2luI2luaXRcbiAgICovXG4gIHJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbihwbHVnaW4sIG5hbWUpe1xuICAgIHZhciBwbHVnaW5OYW1lID0gbmFtZSA/IGh5cGhlbmF0ZShuYW1lKSA6IGZ1bmN0aW9uTmFtZShwbHVnaW4uY29uc3RydWN0b3IpLnRvTG93ZXJDYXNlKCk7XG4gICAgcGx1Z2luLnV1aWQgPSB0aGlzLkdldFlvRGlnaXRzKDYsIHBsdWdpbk5hbWUpO1xuXG4gICAgaWYoIXBsdWdpbi4kZWxlbWVudC5hdHRyKGBkYXRhLSR7cGx1Z2luTmFtZX1gKSl7IHBsdWdpbi4kZWxlbWVudC5hdHRyKGBkYXRhLSR7cGx1Z2luTmFtZX1gLCBwbHVnaW4udXVpZCk7IH1cbiAgICBpZighcGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykpeyBwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nLCBwbHVnaW4pOyB9XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgcGx1Z2luIGhhcyBpbml0aWFsaXplZC5cbiAgICAgICAgICAgKiBAZXZlbnQgUGx1Z2luI2luaXRcbiAgICAgICAgICAgKi9cbiAgICBwbHVnaW4uJGVsZW1lbnQudHJpZ2dlcihgaW5pdC56Zi4ke3BsdWdpbk5hbWV9YCk7XG5cbiAgICB0aGlzLl91dWlkcy5wdXNoKHBsdWdpbi51dWlkKTtcblxuICAgIHJldHVybjtcbiAgfSxcbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBSZW1vdmVzIHRoZSBwbHVnaW5zIHV1aWQgZnJvbSB0aGUgX3V1aWRzIGFycmF5LlxuICAgKiBSZW1vdmVzIHRoZSB6ZlBsdWdpbiBkYXRhIGF0dHJpYnV0ZSwgYXMgd2VsbCBhcyB0aGUgZGF0YS1wbHVnaW4tbmFtZSBhdHRyaWJ1dGUuXG4gICAqIEFsc28gZmlyZXMgdGhlIGRlc3Ryb3llZCBldmVudCBmb3IgdGhlIHBsdWdpbiwgY29uc29saWRhdGluZyByZXBldGl0aXZlIGNvZGUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBhbiBpbnN0YW5jZSBvZiBhIHBsdWdpbiwgdXN1YWxseSBgdGhpc2AgaW4gY29udGV4dC5cbiAgICogQGZpcmVzIFBsdWdpbiNkZXN0cm95ZWRcbiAgICovXG4gIHVucmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uKHBsdWdpbil7XG4gICAgdmFyIHBsdWdpbk5hbWUgPSBoeXBoZW5hdGUoZnVuY3Rpb25OYW1lKHBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpLmNvbnN0cnVjdG9yKSk7XG5cbiAgICB0aGlzLl91dWlkcy5zcGxpY2UodGhpcy5fdXVpZHMuaW5kZXhPZihwbHVnaW4udXVpZCksIDEpO1xuICAgIHBsdWdpbi4kZWxlbWVudC5yZW1vdmVBdHRyKGBkYXRhLSR7cGx1Z2luTmFtZX1gKS5yZW1vdmVEYXRhKCd6ZlBsdWdpbicpXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgcGx1Z2luIGhhcyBiZWVuIGRlc3Ryb3llZC5cbiAgICAgICAgICAgKiBAZXZlbnQgUGx1Z2luI2Rlc3Ryb3llZFxuICAgICAgICAgICAqL1xuICAgICAgICAgIC50cmlnZ2VyKGBkZXN0cm95ZWQuemYuJHtwbHVnaW5OYW1lfWApO1xuICAgIGZvcih2YXIgcHJvcCBpbiBwbHVnaW4pe1xuICAgICAgcGx1Z2luW3Byb3BdID0gbnVsbDsvL2NsZWFuIHVwIHNjcmlwdCB0byBwcmVwIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uXG4gICAgfVxuICAgIHJldHVybjtcbiAgfSxcblxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIENhdXNlcyBvbmUgb3IgbW9yZSBhY3RpdmUgcGx1Z2lucyB0byByZS1pbml0aWFsaXplLCByZXNldHRpbmcgZXZlbnQgbGlzdGVuZXJzLCByZWNhbGN1bGF0aW5nIHBvc2l0aW9ucywgZXRjLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGx1Z2lucyAtIG9wdGlvbmFsIHN0cmluZyBvZiBhbiBpbmRpdmlkdWFsIHBsdWdpbiBrZXksIGF0dGFpbmVkIGJ5IGNhbGxpbmcgYCQoZWxlbWVudCkuZGF0YSgncGx1Z2luTmFtZScpYCwgb3Igc3RyaW5nIG9mIGEgcGx1Z2luIGNsYXNzIGkuZS4gYCdkcm9wZG93bidgXG4gICAqIEBkZWZhdWx0IElmIG5vIGFyZ3VtZW50IGlzIHBhc3NlZCwgcmVmbG93IGFsbCBjdXJyZW50bHkgYWN0aXZlIHBsdWdpbnMuXG4gICAqL1xuICAgcmVJbml0OiBmdW5jdGlvbihwbHVnaW5zKXtcbiAgICAgdmFyIGlzSlEgPSBwbHVnaW5zIGluc3RhbmNlb2YgJDtcbiAgICAgdHJ5e1xuICAgICAgIGlmKGlzSlEpe1xuICAgICAgICAgcGx1Z2lucy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICQodGhpcykuZGF0YSgnemZQbHVnaW4nKS5faW5pdCgpO1xuICAgICAgICAgfSk7XG4gICAgICAgfWVsc2V7XG4gICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBwbHVnaW5zLFxuICAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgZm5zID0ge1xuICAgICAgICAgICAnb2JqZWN0JzogZnVuY3Rpb24ocGxncyl7XG4gICAgICAgICAgICAgcGxncy5mb3JFYWNoKGZ1bmN0aW9uKHApe1xuICAgICAgICAgICAgICAgcCA9IGh5cGhlbmF0ZShwKTtcbiAgICAgICAgICAgICAgICQoJ1tkYXRhLScrIHAgKyddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgJ3N0cmluZyc6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgcGx1Z2lucyA9IGh5cGhlbmF0ZShwbHVnaW5zKTtcbiAgICAgICAgICAgICAkKCdbZGF0YS0nKyBwbHVnaW5zICsnXScpLmZvdW5kYXRpb24oJ19pbml0Jyk7XG4gICAgICAgICAgIH0sXG4gICAgICAgICAgICd1bmRlZmluZWQnOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgIHRoaXNbJ29iamVjdCddKE9iamVjdC5rZXlzKF90aGlzLl9wbHVnaW5zKSk7XG4gICAgICAgICAgIH1cbiAgICAgICAgIH07XG4gICAgICAgICBmbnNbdHlwZV0ocGx1Z2lucyk7XG4gICAgICAgfVxuICAgICB9Y2F0Y2goZXJyKXtcbiAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgIH1maW5hbGx5e1xuICAgICAgIHJldHVybiBwbHVnaW5zO1xuICAgICB9XG4gICB9LFxuXG4gIC8qKlxuICAgKiByZXR1cm5zIGEgcmFuZG9tIGJhc2UtMzYgdWlkIHdpdGggbmFtZXNwYWNpbmdcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGggLSBudW1iZXIgb2YgcmFuZG9tIGJhc2UtMzYgZGlnaXRzIGRlc2lyZWQuIEluY3JlYXNlIGZvciBtb3JlIHJhbmRvbSBzdHJpbmdzLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIC0gbmFtZSBvZiBwbHVnaW4gdG8gYmUgaW5jb3Jwb3JhdGVkIGluIHVpZCwgb3B0aW9uYWwuXG4gICAqIEBkZWZhdWx0IHtTdHJpbmd9ICcnIC0gaWYgbm8gcGx1Z2luIG5hbWUgaXMgcHJvdmlkZWQsIG5vdGhpbmcgaXMgYXBwZW5kZWQgdG8gdGhlIHVpZC5cbiAgICogQHJldHVybnMge1N0cmluZ30gLSB1bmlxdWUgaWRcbiAgICovXG4gIEdldFlvRGlnaXRzOiBmdW5jdGlvbihsZW5ndGgsIG5hbWVzcGFjZSl7XG4gICAgbGVuZ3RoID0gbGVuZ3RoIHx8IDY7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoKE1hdGgucG93KDM2LCBsZW5ndGggKyAxKSAtIE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygzNiwgbGVuZ3RoKSkpLnRvU3RyaW5nKDM2KS5zbGljZSgxKSArIChuYW1lc3BhY2UgPyBgLSR7bmFtZXNwYWNlfWAgOiAnJyk7XG4gIH0sXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHBsdWdpbnMgb24gYW55IGVsZW1lbnRzIHdpdGhpbiBgZWxlbWAgKGFuZCBgZWxlbWAgaXRzZWxmKSB0aGF0IGFyZW4ndCBhbHJlYWR5IGluaXRpYWxpemVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbSAtIGpRdWVyeSBvYmplY3QgY29udGFpbmluZyB0aGUgZWxlbWVudCB0byBjaGVjayBpbnNpZGUuIEFsc28gY2hlY2tzIHRoZSBlbGVtZW50IGl0c2VsZiwgdW5sZXNzIGl0J3MgdGhlIGBkb2N1bWVudGAgb2JqZWN0LlxuICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gcGx1Z2lucyAtIEEgbGlzdCBvZiBwbHVnaW5zIHRvIGluaXRpYWxpemUuIExlYXZlIHRoaXMgb3V0IHRvIGluaXRpYWxpemUgZXZlcnl0aGluZy5cbiAgICovXG4gIHJlZmxvdzogZnVuY3Rpb24oZWxlbSwgcGx1Z2lucykge1xuXG4gICAgLy8gSWYgcGx1Z2lucyBpcyB1bmRlZmluZWQsIGp1c3QgZ3JhYiBldmVyeXRoaW5nXG4gICAgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcGx1Z2lucyA9IE9iamVjdC5rZXlzKHRoaXMuX3BsdWdpbnMpO1xuICAgIH1cbiAgICAvLyBJZiBwbHVnaW5zIGlzIGEgc3RyaW5nLCBjb252ZXJ0IGl0IHRvIGFuIGFycmF5IHdpdGggb25lIGl0ZW1cbiAgICBlbHNlIGlmICh0eXBlb2YgcGx1Z2lucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBsdWdpbnMgPSBbcGx1Z2luc107XG4gICAgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHBsdWdpblxuICAgICQuZWFjaChwbHVnaW5zLCBmdW5jdGlvbihpLCBuYW1lKSB7XG4gICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgcGx1Z2luXG4gICAgICB2YXIgcGx1Z2luID0gX3RoaXMuX3BsdWdpbnNbbmFtZV07XG5cbiAgICAgIC8vIExvY2FsaXplIHRoZSBzZWFyY2ggdG8gYWxsIGVsZW1lbnRzIGluc2lkZSBlbGVtLCBhcyB3ZWxsIGFzIGVsZW0gaXRzZWxmLCB1bmxlc3MgZWxlbSA9PT0gZG9jdW1lbnRcbiAgICAgIHZhciAkZWxlbSA9ICQoZWxlbSkuZmluZCgnW2RhdGEtJytuYW1lKyddJykuYWRkQmFjaygnW2RhdGEtJytuYW1lKyddJyk7XG5cbiAgICAgIC8vIEZvciBlYWNoIHBsdWdpbiBmb3VuZCwgaW5pdGlhbGl6ZSBpdFxuICAgICAgJGVsZW0uZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyICRlbCA9ICQodGhpcyksXG4gICAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgIC8vIERvbid0IGRvdWJsZS1kaXAgb24gcGx1Z2luc1xuICAgICAgICBpZiAoJGVsLmRhdGEoJ3pmUGx1Z2luJykpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcmllZCB0byBpbml0aWFsaXplIFwiK25hbWUrXCIgb24gYW4gZWxlbWVudCB0aGF0IGFscmVhZHkgaGFzIGEgRm91bmRhdGlvbiBwbHVnaW4uXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCRlbC5hdHRyKCdkYXRhLW9wdGlvbnMnKSl7XG4gICAgICAgICAgdmFyIHRoaW5nID0gJGVsLmF0dHIoJ2RhdGEtb3B0aW9ucycpLnNwbGl0KCc7JykuZm9yRWFjaChmdW5jdGlvbihlLCBpKXtcbiAgICAgICAgICAgIHZhciBvcHQgPSBlLnNwbGl0KCc6JykubWFwKGZ1bmN0aW9uKGVsKXsgcmV0dXJuIGVsLnRyaW0oKTsgfSk7XG4gICAgICAgICAgICBpZihvcHRbMF0pIG9wdHNbb3B0WzBdXSA9IHBhcnNlVmFsdWUob3B0WzFdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnl7XG4gICAgICAgICAgJGVsLmRhdGEoJ3pmUGx1Z2luJywgbmV3IHBsdWdpbigkKHRoaXMpLCBvcHRzKSk7XG4gICAgICAgIH1jYXRjaChlcil7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcik7XG4gICAgICAgIH1maW5hbGx5e1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIGdldEZuTmFtZTogZnVuY3Rpb25OYW1lLFxuICB0cmFuc2l0aW9uZW5kOiBmdW5jdGlvbigkZWxlbSl7XG4gICAgdmFyIHRyYW5zaXRpb25zID0ge1xuICAgICAgJ3RyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAnV2Via2l0VHJhbnNpdGlvbic6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgICdNb3pUcmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgJ09UcmFuc2l0aW9uJzogJ290cmFuc2l0aW9uZW5kJ1xuICAgIH07XG4gICAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgZW5kO1xuXG4gICAgZm9yICh2YXIgdCBpbiB0cmFuc2l0aW9ucyl7XG4gICAgICBpZiAodHlwZW9mIGVsZW0uc3R5bGVbdF0gIT09ICd1bmRlZmluZWQnKXtcbiAgICAgICAgZW5kID0gdHJhbnNpdGlvbnNbdF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmKGVuZCl7XG4gICAgICByZXR1cm4gZW5kO1xuICAgIH1lbHNle1xuICAgICAgZW5kID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAkZWxlbS50cmlnZ2VySGFuZGxlcigndHJhbnNpdGlvbmVuZCcsIFskZWxlbV0pO1xuICAgICAgfSwgMSk7XG4gICAgICByZXR1cm4gJ3RyYW5zaXRpb25lbmQnO1xuICAgIH1cbiAgfVxufTtcblxuRm91bmRhdGlvbi51dGlsID0ge1xuICAvKipcbiAgICogRnVuY3Rpb24gZm9yIGFwcGx5aW5nIGEgZGVib3VuY2UgZWZmZWN0IHRvIGEgZnVuY3Rpb24gY2FsbC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgLSBGdW5jdGlvbiB0byBiZSBjYWxsZWQgYXQgZW5kIG9mIHRpbWVvdXQuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkZWxheSAtIFRpbWUgaW4gbXMgdG8gZGVsYXkgdGhlIGNhbGwgb2YgYGZ1bmNgLlxuICAgKiBAcmV0dXJucyBmdW5jdGlvblxuICAgKi9cbiAgdGhyb3R0bGU6IGZ1bmN0aW9uIChmdW5jLCBkZWxheSkge1xuICAgIHZhciB0aW1lciA9IG51bGw7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgICBpZiAodGltZXIgPT09IG51bGwpIHtcbiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbi8vIFRPRE86IGNvbnNpZGVyIG5vdCBtYWtpbmcgdGhpcyBhIGpRdWVyeSBmdW5jdGlvblxuLy8gVE9ETzogbmVlZCB3YXkgdG8gcmVmbG93IHZzLiByZS1pbml0aWFsaXplXG4vKipcbiAqIFRoZSBGb3VuZGF0aW9uIGpRdWVyeSBtZXRob2QuXG4gKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gbWV0aG9kIC0gQW4gYWN0aW9uIHRvIHBlcmZvcm0gb24gdGhlIGN1cnJlbnQgalF1ZXJ5IG9iamVjdC5cbiAqL1xudmFyIGZvdW5kYXRpb24gPSBmdW5jdGlvbihtZXRob2QpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgbWV0aG9kLFxuICAgICAgJG1ldGEgPSAkKCdtZXRhLmZvdW5kYXRpb24tbXEnKSxcbiAgICAgICRub0pTID0gJCgnLm5vLWpzJyk7XG5cbiAgaWYoISRtZXRhLmxlbmd0aCl7XG4gICAgJCgnPG1ldGEgY2xhc3M9XCJmb3VuZGF0aW9uLW1xXCI+JykuYXBwZW5kVG8oZG9jdW1lbnQuaGVhZCk7XG4gIH1cbiAgaWYoJG5vSlMubGVuZ3RoKXtcbiAgICAkbm9KUy5yZW1vdmVDbGFzcygnbm8tanMnKTtcbiAgfVxuXG4gIGlmKHR5cGUgPT09ICd1bmRlZmluZWQnKXsvL25lZWRzIHRvIGluaXRpYWxpemUgdGhlIEZvdW5kYXRpb24gb2JqZWN0LCBvciBhbiBpbmRpdmlkdWFsIHBsdWdpbi5cbiAgICBGb3VuZGF0aW9uLk1lZGlhUXVlcnkuX2luaXQoKTtcbiAgICBGb3VuZGF0aW9uLnJlZmxvdyh0aGlzKTtcbiAgfWVsc2UgaWYodHlwZSA9PT0gJ3N0cmluZycpey8vYW4gaW5kaXZpZHVhbCBtZXRob2QgdG8gaW52b2tlIG9uIGEgcGx1Z2luIG9yIGdyb3VwIG9mIHBsdWdpbnNcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7Ly9jb2xsZWN0IGFsbCB0aGUgYXJndW1lbnRzLCBpZiBuZWNlc3NhcnlcbiAgICB2YXIgcGx1Z0NsYXNzID0gdGhpcy5kYXRhKCd6ZlBsdWdpbicpOy8vZGV0ZXJtaW5lIHRoZSBjbGFzcyBvZiBwbHVnaW5cblxuICAgIGlmKHBsdWdDbGFzcyAhPT0gdW5kZWZpbmVkICYmIHBsdWdDbGFzc1ttZXRob2RdICE9PSB1bmRlZmluZWQpey8vbWFrZSBzdXJlIGJvdGggdGhlIGNsYXNzIGFuZCBtZXRob2QgZXhpc3RcbiAgICAgIGlmKHRoaXMubGVuZ3RoID09PSAxKXsvL2lmIHRoZXJlJ3Mgb25seSBvbmUsIGNhbGwgaXQgZGlyZWN0bHkuXG4gICAgICAgICAgcGx1Z0NsYXNzW21ldGhvZF0uYXBwbHkocGx1Z0NsYXNzLCBhcmdzKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oaSwgZWwpey8vb3RoZXJ3aXNlIGxvb3AgdGhyb3VnaCB0aGUgalF1ZXJ5IGNvbGxlY3Rpb24gYW5kIGludm9rZSB0aGUgbWV0aG9kIG9uIGVhY2hcbiAgICAgICAgICBwbHVnQ2xhc3NbbWV0aG9kXS5hcHBseSgkKGVsKS5kYXRhKCd6ZlBsdWdpbicpLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfWVsc2V7Ly9lcnJvciBmb3Igbm8gY2xhc3Mgb3Igbm8gbWV0aG9kXG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJXZSdyZSBzb3JyeSwgJ1wiICsgbWV0aG9kICsgXCInIGlzIG5vdCBhbiBhdmFpbGFibGUgbWV0aG9kIGZvciBcIiArIChwbHVnQ2xhc3MgPyBmdW5jdGlvbk5hbWUocGx1Z0NsYXNzKSA6ICd0aGlzIGVsZW1lbnQnKSArICcuJyk7XG4gICAgfVxuICB9ZWxzZXsvL2Vycm9yIGZvciBpbnZhbGlkIGFyZ3VtZW50IHR5cGVcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBXZSdyZSBzb3JyeSwgJHt0eXBlfSBpcyBub3QgYSB2YWxpZCBwYXJhbWV0ZXIuIFlvdSBtdXN0IHVzZSBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG1ldGhvZCB5b3Ugd2lzaCB0byBpbnZva2UuYCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG53aW5kb3cuRm91bmRhdGlvbiA9IEZvdW5kYXRpb247XG4kLmZuLmZvdW5kYXRpb24gPSBmb3VuZGF0aW9uO1xuXG4vLyBQb2x5ZmlsbCBmb3IgcmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4oZnVuY3Rpb24oKSB7XG4gIGlmICghRGF0ZS5ub3cgfHwgIXdpbmRvdy5EYXRlLm5vdylcbiAgICB3aW5kb3cuRGF0ZS5ub3cgPSBEYXRlLm5vdyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH07XG5cbiAgdmFyIHZlbmRvcnMgPSBbJ3dlYmtpdCcsICdtb3onXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKytpKSB7XG4gICAgICB2YXIgdnAgPSB2ZW5kb3JzW2ldO1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2cCsnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAod2luZG93W3ZwKydDYW5jZWxBbmltYXRpb25GcmFtZSddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB3aW5kb3dbdnArJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddKTtcbiAgfVxuICBpZiAoL2lQKGFkfGhvbmV8b2QpLipPUyA2Ly50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICAgIHx8ICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8ICF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHtcbiAgICB2YXIgbGFzdFRpbWUgPSAwO1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIG5leHRUaW1lID0gTWF0aC5tYXgobGFzdFRpbWUgKyAxNiwgbm93KTtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNhbGxiYWNrKGxhc3RUaW1lID0gbmV4dFRpbWUpOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0VGltZSAtIG5vdyk7XG4gICAgfTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjbGVhclRpbWVvdXQ7XG4gIH1cbiAgLyoqXG4gICAqIFBvbHlmaWxsIGZvciBwZXJmb3JtYW5jZS5ub3csIHJlcXVpcmVkIGJ5IHJBRlxuICAgKi9cbiAgaWYoIXdpbmRvdy5wZXJmb3JtYW5jZSB8fCAhd2luZG93LnBlcmZvcm1hbmNlLm5vdyl7XG4gICAgd2luZG93LnBlcmZvcm1hbmNlID0ge1xuICAgICAgc3RhcnQ6IERhdGUubm93KCksXG4gICAgICBub3c6IGZ1bmN0aW9uKCl7IHJldHVybiBEYXRlLm5vdygpIC0gdGhpcy5zdGFydDsgfVxuICAgIH07XG4gIH1cbn0pKCk7XG5pZiAoIUZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKSB7XG4gIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24ob1RoaXMpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGNsb3Nlc3QgdGhpbmcgcG9zc2libGUgdG8gdGhlIEVDTUFTY3JpcHQgNVxuICAgICAgLy8gaW50ZXJuYWwgSXNDYWxsYWJsZSBmdW5jdGlvblxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgLSB3aGF0IGlzIHRyeWluZyB0byBiZSBib3VuZCBpcyBub3QgY2FsbGFibGUnKTtcbiAgICB9XG5cbiAgICB2YXIgYUFyZ3MgICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgIGZUb0JpbmQgPSB0aGlzLFxuICAgICAgICBmTk9QICAgID0gZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgZkJvdW5kICA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBmVG9CaW5kLmFwcGx5KHRoaXMgaW5zdGFuY2VvZiBmTk9QXG4gICAgICAgICAgICAgICAgID8gdGhpc1xuICAgICAgICAgICAgICAgICA6IG9UaGlzLFxuICAgICAgICAgICAgICAgICBhQXJncy5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgICB9O1xuXG4gICAgaWYgKHRoaXMucHJvdG90eXBlKSB7XG4gICAgICAvLyBuYXRpdmUgZnVuY3Rpb25zIGRvbid0IGhhdmUgYSBwcm90b3R5cGVcbiAgICAgIGZOT1AucHJvdG90eXBlID0gdGhpcy5wcm90b3R5cGU7XG4gICAgfVxuICAgIGZCb3VuZC5wcm90b3R5cGUgPSBuZXcgZk5PUCgpO1xuXG4gICAgcmV0dXJuIGZCb3VuZDtcbiAgfTtcbn1cbi8vIFBvbHlmaWxsIHRvIGdldCB0aGUgbmFtZSBvZiBhIGZ1bmN0aW9uIGluIElFOVxuZnVuY3Rpb24gZnVuY3Rpb25OYW1lKGZuKSB7XG4gIGlmIChGdW5jdGlvbi5wcm90b3R5cGUubmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGZ1bmNOYW1lUmVnZXggPSAvZnVuY3Rpb25cXHMoW14oXXsxLH0pXFwoLztcbiAgICB2YXIgcmVzdWx0cyA9IChmdW5jTmFtZVJlZ2V4KS5leGVjKChmbikudG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIChyZXN1bHRzICYmIHJlc3VsdHMubGVuZ3RoID4gMSkgPyByZXN1bHRzWzFdLnRyaW0oKSA6IFwiXCI7XG4gIH1cbiAgZWxzZSBpZiAoZm4ucHJvdG90eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZm4uY29uc3RydWN0b3IubmFtZTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gZm4ucHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlVmFsdWUoc3RyKXtcbiAgaWYoL3RydWUvLnRlc3Qoc3RyKSkgcmV0dXJuIHRydWU7XG4gIGVsc2UgaWYoL2ZhbHNlLy50ZXN0KHN0cikpIHJldHVybiBmYWxzZTtcbiAgZWxzZSBpZighaXNOYU4oc3RyICogMSkpIHJldHVybiBwYXJzZUZsb2F0KHN0cik7XG4gIHJldHVybiBzdHI7XG59XG4vLyBDb252ZXJ0IFBhc2NhbENhc2UgdG8ga2ViYWItY2FzZVxuLy8gVGhhbmsgeW91OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84OTU1NTgwXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbn1cblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5Gb3VuZGF0aW9uLkJveCA9IHtcbiAgSW1Ob3RUb3VjaGluZ1lvdTogSW1Ob3RUb3VjaGluZ1lvdSxcbiAgR2V0RGltZW5zaW9uczogR2V0RGltZW5zaW9ucyxcbiAgR2V0T2Zmc2V0czogR2V0T2Zmc2V0c1xufVxuXG4vKipcbiAqIENvbXBhcmVzIHRoZSBkaW1lbnNpb25zIG9mIGFuIGVsZW1lbnQgdG8gYSBjb250YWluZXIgYW5kIGRldGVybWluZXMgY29sbGlzaW9uIGV2ZW50cyB3aXRoIGNvbnRhaW5lci5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHRlc3QgZm9yIGNvbGxpc2lvbnMuXG4gKiBAcGFyYW0ge2pRdWVyeX0gcGFyZW50IC0galF1ZXJ5IG9iamVjdCB0byB1c2UgYXMgYm91bmRpbmcgY29udGFpbmVyLlxuICogQHBhcmFtIHtCb29sZWFufSBsck9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayBsZWZ0IGFuZCByaWdodCB2YWx1ZXMgb25seS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdGJPbmx5IC0gc2V0IHRvIHRydWUgdG8gY2hlY2sgdG9wIGFuZCBib3R0b20gdmFsdWVzIG9ubHkuXG4gKiBAZGVmYXVsdCBpZiBubyBwYXJlbnQgb2JqZWN0IHBhc3NlZCwgZGV0ZWN0cyBjb2xsaXNpb25zIHdpdGggYHdpbmRvd2AuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIGNvbGxpc2lvbiBmcmVlLCBmYWxzZSBpZiBhIGNvbGxpc2lvbiBpbiBhbnkgZGlyZWN0aW9uLlxuICovXG5mdW5jdGlvbiBJbU5vdFRvdWNoaW5nWW91KGVsZW1lbnQsIHBhcmVudCwgbHJPbmx5LCB0Yk9ubHkpIHtcbiAgdmFyIGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0O1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICB2YXIgcGFyRGltcyA9IEdldERpbWVuc2lvbnMocGFyZW50KTtcblxuICAgIGJvdHRvbSA9IChlbGVEaW1zLm9mZnNldC50b3AgKyBlbGVEaW1zLmhlaWdodCA8PSBwYXJEaW1zLmhlaWdodCArIHBhckRpbXMub2Zmc2V0LnRvcCk7XG4gICAgdG9wICAgID0gKGVsZURpbXMub2Zmc2V0LnRvcCA+PSBwYXJEaW1zLm9mZnNldC50b3ApO1xuICAgIGxlZnQgICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ID49IHBhckRpbXMub2Zmc2V0LmxlZnQpO1xuICAgIHJpZ2h0ICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ICsgZWxlRGltcy53aWR0aCA8PSBwYXJEaW1zLndpZHRoICsgcGFyRGltcy5vZmZzZXQubGVmdCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgYm90dG9tID0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0IDw9IGVsZURpbXMud2luZG93RGltcy5oZWlnaHQgKyBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCk7XG4gICAgdG9wICAgID0gKGVsZURpbXMub2Zmc2V0LnRvcCA+PSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCk7XG4gICAgbGVmdCAgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgPj0gZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0KTtcbiAgICByaWdodCAgPSAoZWxlRGltcy5vZmZzZXQubGVmdCArIGVsZURpbXMud2lkdGggPD0gZWxlRGltcy53aW5kb3dEaW1zLndpZHRoKTtcbiAgfVxuXG4gIHZhciBhbGxEaXJzID0gW2JvdHRvbSwgdG9wLCBsZWZ0LCByaWdodF07XG5cbiAgaWYgKGxyT25seSkge1xuICAgIHJldHVybiBsZWZ0ID09PSByaWdodCA9PT0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0Yk9ubHkpIHtcbiAgICByZXR1cm4gdG9wID09PSBib3R0b20gPT09IHRydWU7XG4gIH1cblxuICByZXR1cm4gYWxsRGlycy5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFVzZXMgbmF0aXZlIG1ldGhvZHMgdG8gcmV0dXJuIGFuIG9iamVjdCBvZiBkaW1lbnNpb24gdmFsdWVzLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeSB8fCBIVE1MfSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBvciBET00gZWxlbWVudCBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBkaW1lbnNpb25zLiBDYW4gYmUgYW55IGVsZW1lbnQgb3RoZXIgdGhhdCBkb2N1bWVudCBvciB3aW5kb3cuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAtIG5lc3RlZCBvYmplY3Qgb2YgaW50ZWdlciBwaXhlbCB2YWx1ZXNcbiAqIFRPRE8gLSBpZiBlbGVtZW50IGlzIHdpbmRvdywgcmV0dXJuIG9ubHkgdGhvc2UgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBHZXREaW1lbnNpb25zKGVsZW0sIHRlc3Qpe1xuICBlbGVtID0gZWxlbS5sZW5ndGggPyBlbGVtWzBdIDogZWxlbTtcblxuICBpZiAoZWxlbSA9PT0gd2luZG93IHx8IGVsZW0gPT09IGRvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSSdtIHNvcnJ5LCBEYXZlLiBJJ20gYWZyYWlkIEkgY2FuJ3QgZG8gdGhhdC5cIik7XG4gIH1cblxuICB2YXIgcmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBwYXJSZWN0ID0gZWxlbS5wYXJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgd2luUmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5ZID0gd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgd2luWCA9IHdpbmRvdy5wYWdlWE9mZnNldDtcblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgb2Zmc2V0OiB7XG4gICAgICB0b3A6IHJlY3QudG9wICsgd2luWSxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpblhcbiAgICB9LFxuICAgIHBhcmVudERpbXM6IHtcbiAgICAgIHdpZHRoOiBwYXJSZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0OiBwYXJSZWN0LmhlaWdodCxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICB0b3A6IHBhclJlY3QudG9wICsgd2luWSxcbiAgICAgICAgbGVmdDogcGFyUmVjdC5sZWZ0ICsgd2luWFxuICAgICAgfVxuICAgIH0sXG4gICAgd2luZG93RGltczoge1xuICAgICAgd2lkdGg6IHdpblJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHdpblJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogd2luWSxcbiAgICAgICAgbGVmdDogd2luWFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIHRvcCBhbmQgbGVmdCBpbnRlZ2VyIHBpeGVsIHZhbHVlcyBmb3IgZHluYW1pY2FsbHkgcmVuZGVyZWQgZWxlbWVudHMsXG4gKiBzdWNoIGFzOiBUb29sdGlwLCBSZXZlYWwsIGFuZCBEcm9wZG93blxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBlbGVtZW50IGJlaW5nIHBvc2l0aW9uZWQuXG4gKiBAcGFyYW0ge2pRdWVyeX0gYW5jaG9yIC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQncyBhbmNob3IgcG9pbnQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcG9zaXRpb24gLSBhIHN0cmluZyByZWxhdGluZyB0byB0aGUgZGVzaXJlZCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCwgcmVsYXRpdmUgdG8gaXQncyBhbmNob3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB2T2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIHZlcnRpY2FsIHNlcGFyYXRpb24gYmV0d2VlbiBhbmNob3IgYW5kIGVsZW1lbnQuXG4gKiBAcGFyYW0ge051bWJlcn0gaE9mZnNldCAtIGludGVnZXIgcGl4ZWwgdmFsdWUgb2YgZGVzaXJlZCBob3Jpem9udGFsIHNlcGFyYXRpb24gYmV0d2VlbiBhbmNob3IgYW5kIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzT3ZlcmZsb3cgLSBpZiBhIGNvbGxpc2lvbiBldmVudCBpcyBkZXRlY3RlZCwgc2V0cyB0byB0cnVlIHRvIGRlZmF1bHQgdGhlIGVsZW1lbnQgdG8gZnVsbCB3aWR0aCAtIGFueSBkZXNpcmVkIG9mZnNldC5cbiAqIFRPRE8gYWx0ZXIvcmV3cml0ZSB0byB3b3JrIHdpdGggYGVtYCB2YWx1ZXMgYXMgd2VsbC9pbnN0ZWFkIG9mIHBpeGVsc1xuICovXG5mdW5jdGlvbiBHZXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgcG9zaXRpb24sIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpIHtcbiAgdmFyICRlbGVEaW1zID0gR2V0RGltZW5zaW9ucyhlbGVtZW50KSxcbiAgICAgICRhbmNob3JEaW1zID0gYW5jaG9yID8gR2V0RGltZW5zaW9ucyhhbmNob3IpIDogbnVsbDtcblxuICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IChGb3VuZGF0aW9uLnJ0bCgpID8gJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgLSAkZWxlRGltcy53aWR0aCArICRhbmNob3JEaW1zLndpZHRoIDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgLSAoJGVsZURpbXMuaGVpZ2h0ICsgdk9mZnNldClcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgLSAoJGVsZURpbXMud2lkdGggKyBoT2Zmc2V0KSxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICRhbmNob3JEaW1zLndpZHRoICsgaE9mZnNldCxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgdG9wJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICgkYW5jaG9yRGltcy53aWR0aCAvIDIpKSAtICgkZWxlRGltcy53aWR0aCAvIDIpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgLSAoJGVsZURpbXMuaGVpZ2h0ICsgdk9mZnNldClcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciBib3R0b20nOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogaXNPdmVyZmxvdyA/IGhPZmZzZXQgOiAoKCRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgKCRhbmNob3JEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMikpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgbGVmdCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICgkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgKCRhbmNob3JEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyIHJpZ2h0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0ICsgMSxcbiAgICAgICAgdG9wOiAoJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICgkYW5jaG9yRGltcy5oZWlnaHQgLyAyKSkgLSAoJGVsZURpbXMuaGVpZ2h0IC8gMilcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAoJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQubGVmdCArICgkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMiksXG4gICAgICAgIHRvcDogKCRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCArICgkZWxlRGltcy53aW5kb3dEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmV2ZWFsJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC0gJGVsZURpbXMud2lkdGgpIC8gMixcbiAgICAgICAgdG9wOiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3AgKyB2T2Zmc2V0XG4gICAgICB9XG4gICAgY2FzZSAncmV2ZWFsIGZ1bGwnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQubGVmdCxcbiAgICAgICAgdG9wOiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xlZnQgYm90dG9tJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0LFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCBib3R0b20nOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAkYW5jaG9yRGltcy53aWR0aCArIGhPZmZzZXQgLSAkZWxlRGltcy53aWR0aCxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgJGFuY2hvckRpbXMuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IChGb3VuZGF0aW9uLnJ0bCgpID8gJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgLSAkZWxlRGltcy53aWR0aCArICRhbmNob3JEaW1zLndpZHRoIDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyBoT2Zmc2V0KSxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgJGFuY2hvckRpbXMuaGVpZ2h0ICsgdk9mZnNldFxuICAgICAgfVxuICB9XG59XG5cbn0oalF1ZXJ5KTtcbiIsIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogVGhpcyB1dGlsIHdhcyBjcmVhdGVkIGJ5IE1hcml1cyBPbGJlcnR6ICpcbiAqIFBsZWFzZSB0aGFuayBNYXJpdXMgb24gR2l0SHViIC9vd2xiZXJ0eiAqXG4gKiBvciB0aGUgd2ViIGh0dHA6Ly93d3cubWFyaXVzb2xiZXJ0ei5kZS8gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuY29uc3Qga2V5Q29kZXMgPSB7XG4gIDk6ICdUQUInLFxuICAxMzogJ0VOVEVSJyxcbiAgMjc6ICdFU0NBUEUnLFxuICAzMjogJ1NQQUNFJyxcbiAgMzc6ICdBUlJPV19MRUZUJyxcbiAgMzg6ICdBUlJPV19VUCcsXG4gIDM5OiAnQVJST1dfUklHSFQnLFxuICA0MDogJ0FSUk9XX0RPV04nXG59XG5cbnZhciBjb21tYW5kcyA9IHt9XG5cbnZhciBLZXlib2FyZCA9IHtcbiAga2V5czogZ2V0S2V5Q29kZXMoa2V5Q29kZXMpLFxuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIChrZXlib2FyZCkgZXZlbnQgYW5kIHJldHVybnMgYSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIGl0cyBrZXlcbiAgICogQ2FuIGJlIHVzZWQgbGlrZSBGb3VuZGF0aW9uLnBhcnNlS2V5KGV2ZW50KSA9PT0gRm91bmRhdGlvbi5rZXlzLlNQQUNFXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IGdlbmVyYXRlZCBieSB0aGUgZXZlbnQgaGFuZGxlclxuICAgKiBAcmV0dXJuIFN0cmluZyBrZXkgLSBTdHJpbmcgdGhhdCByZXByZXNlbnRzIHRoZSBrZXkgcHJlc3NlZFxuICAgKi9cbiAgcGFyc2VLZXkoZXZlbnQpIHtcbiAgICB2YXIga2V5ID0ga2V5Q29kZXNbZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZV0gfHwgU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC53aGljaCkudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIGtleSA9IGBTSElGVF8ke2tleX1gO1xuICAgIGlmIChldmVudC5jdHJsS2V5KSBrZXkgPSBgQ1RSTF8ke2tleX1gO1xuICAgIGlmIChldmVudC5hbHRLZXkpIGtleSA9IGBBTFRfJHtrZXl9YDtcbiAgICByZXR1cm4ga2V5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBnaXZlbiAoa2V5Ym9hcmQpIGV2ZW50XG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gdGhlIGV2ZW50IGdlbmVyYXRlZCBieSB0aGUgZXZlbnQgaGFuZGxlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQncyBuYW1lLCBlLmcuIFNsaWRlciBvciBSZXZlYWxcbiAgICogQHBhcmFtIHtPYmplY3RzfSBmdW5jdGlvbnMgLSBjb2xsZWN0aW9uIG9mIGZ1bmN0aW9ucyB0aGF0IGFyZSB0byBiZSBleGVjdXRlZFxuICAgKi9cbiAgaGFuZGxlS2V5KGV2ZW50LCBjb21wb25lbnQsIGZ1bmN0aW9ucykge1xuICAgIHZhciBjb21tYW5kTGlzdCA9IGNvbW1hbmRzW2NvbXBvbmVudF0sXG4gICAgICBrZXlDb2RlID0gdGhpcy5wYXJzZUtleShldmVudCksXG4gICAgICBjbWRzLFxuICAgICAgY29tbWFuZCxcbiAgICAgIGZuO1xuXG4gICAgaWYgKCFjb21tYW5kTGlzdCkgcmV0dXJuIGNvbnNvbGUud2FybignQ29tcG9uZW50IG5vdCBkZWZpbmVkIScpO1xuXG4gICAgaWYgKHR5cGVvZiBjb21tYW5kTGlzdC5sdHIgPT09ICd1bmRlZmluZWQnKSB7IC8vIHRoaXMgY29tcG9uZW50IGRvZXMgbm90IGRpZmZlcmVudGlhdGUgYmV0d2VlbiBsdHIgYW5kIHJ0bFxuICAgICAgICBjbWRzID0gY29tbWFuZExpc3Q7IC8vIHVzZSBwbGFpbiBsaXN0XG4gICAgfSBlbHNlIHsgLy8gbWVyZ2UgbHRyIGFuZCBydGw6IGlmIGRvY3VtZW50IGlzIHJ0bCwgcnRsIG92ZXJ3cml0ZXMgbHRyIGFuZCB2aWNlIHZlcnNhXG4gICAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpKSBjbWRzID0gJC5leHRlbmQoe30sIGNvbW1hbmRMaXN0Lmx0ciwgY29tbWFuZExpc3QucnRsKTtcblxuICAgICAgICBlbHNlIGNtZHMgPSAkLmV4dGVuZCh7fSwgY29tbWFuZExpc3QucnRsLCBjb21tYW5kTGlzdC5sdHIpO1xuICAgIH1cbiAgICBjb21tYW5kID0gY21kc1trZXlDb2RlXTtcblxuICAgIGZuID0gZnVuY3Rpb25zW2NvbW1hbmRdO1xuICAgIGlmIChmbiAmJiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHsgLy8gZXhlY3V0ZSBmdW5jdGlvbiAgaWYgZXhpc3RzXG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSBmbi5hcHBseSgpO1xuICAgICAgaWYgKGZ1bmN0aW9ucy5oYW5kbGVkIHx8IHR5cGVvZiBmdW5jdGlvbnMuaGFuZGxlZCA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGVjdXRlIGZ1bmN0aW9uIHdoZW4gZXZlbnQgd2FzIGhhbmRsZWRcbiAgICAgICAgICBmdW5jdGlvbnMuaGFuZGxlZChyZXR1cm5WYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChmdW5jdGlvbnMudW5oYW5kbGVkIHx8IHR5cGVvZiBmdW5jdGlvbnMudW5oYW5kbGVkID09PSAnZnVuY3Rpb24nKSB7IC8vIGV4ZWN1dGUgZnVuY3Rpb24gd2hlbiBldmVudCB3YXMgbm90IGhhbmRsZWRcbiAgICAgICAgICBmdW5jdGlvbnMudW5oYW5kbGVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiB0aGUgZ2l2ZW4gYCRlbGVtZW50YFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHNlYXJjaCB3aXRoaW5cbiAgICogQHJldHVybiB7alF1ZXJ5fSAkZm9jdXNhYmxlIC0gYWxsIGZvY3VzYWJsZSBlbGVtZW50cyB3aXRoaW4gYCRlbGVtZW50YFxuICAgKi9cbiAgZmluZEZvY3VzYWJsZSgkZWxlbWVudCkge1xuICAgIHJldHVybiAkZWxlbWVudC5maW5kKCdhW2hyZWZdLCBhcmVhW2hyZWZdLCBpbnB1dDpub3QoW2Rpc2FibGVkXSksIHNlbGVjdDpub3QoW2Rpc2FibGVkXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwgaWZyYW1lLCBvYmplY3QsIGVtYmVkLCAqW3RhYmluZGV4XSwgKltjb250ZW50ZWRpdGFibGVdJykuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCEkKHRoaXMpLmlzKCc6dmlzaWJsZScpIHx8ICQodGhpcykuYXR0cigndGFiaW5kZXgnKSA8IDApIHsgcmV0dXJuIGZhbHNlOyB9IC8vb25seSBoYXZlIHZpc2libGUgZWxlbWVudHMgYW5kIHRob3NlIHRoYXQgaGF2ZSBhIHRhYmluZGV4IGdyZWF0ZXIgb3IgZXF1YWwgMFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbXBvbmVudCBuYW1lIG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudCAtIEZvdW5kYXRpb24gY29tcG9uZW50LCBlLmcuIFNsaWRlciBvciBSZXZlYWxcbiAgICogQHJldHVybiBTdHJpbmcgY29tcG9uZW50TmFtZVxuICAgKi9cblxuICByZWdpc3Rlcihjb21wb25lbnROYW1lLCBjbWRzKSB7XG4gICAgY29tbWFuZHNbY29tcG9uZW50TmFtZV0gPSBjbWRzO1xuICB9XG59XG5cbi8qXG4gKiBDb25zdGFudHMgZm9yIGVhc2llciBjb21wYXJpbmcuXG4gKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAqL1xuZnVuY3Rpb24gZ2V0S2V5Q29kZXMoa2NzKSB7XG4gIHZhciBrID0ge307XG4gIGZvciAodmFyIGtjIGluIGtjcykga1trY3Nba2NdXSA9IGtjc1trY107XG4gIHJldHVybiBrO1xufVxuXG5Gb3VuZGF0aW9uLktleWJvYXJkID0gS2V5Ym9hcmQ7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLy8gRGVmYXVsdCBzZXQgb2YgbWVkaWEgcXVlcmllc1xuY29uc3QgZGVmYXVsdFF1ZXJpZXMgPSB7XG4gICdkZWZhdWx0JyA6ICdvbmx5IHNjcmVlbicsXG4gIGxhbmRzY2FwZSA6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgcG9ydHJhaXQgOiAnb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpJyxcbiAgcmV0aW5hIDogJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMiksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDE5MmRwaSksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cbnZhciBNZWRpYVF1ZXJ5ID0ge1xuICBxdWVyaWVzOiBbXSxcblxuICBjdXJyZW50OiAnJyxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG1lZGlhIHF1ZXJ5IGhlbHBlciwgYnkgZXh0cmFjdGluZyB0aGUgYnJlYWtwb2ludCBsaXN0IGZyb20gdGhlIENTUyBhbmQgYWN0aXZhdGluZyB0aGUgYnJlYWtwb2ludCB3YXRjaGVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgZXh0cmFjdGVkU3R5bGVzID0gJCgnLmZvdW5kYXRpb24tbXEnKS5jc3MoJ2ZvbnQtZmFtaWx5Jyk7XG4gICAgdmFyIG5hbWVkUXVlcmllcztcblxuICAgIG5hbWVkUXVlcmllcyA9IHBhcnNlU3R5bGVUb09iamVjdChleHRyYWN0ZWRTdHlsZXMpO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG5hbWVkUXVlcmllcykge1xuICAgICAgaWYobmFtZWRRdWVyaWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgc2VsZi5xdWVyaWVzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICB2YWx1ZTogYG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAke25hbWVkUXVlcmllc1trZXldfSlgXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY3VycmVudCA9IHRoaXMuX2dldEN1cnJlbnRTaXplKCk7XG5cbiAgICB0aGlzLl93YXRjaGVyKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgc2NyZWVuIGlzIGF0IGxlYXN0IGFzIHdpZGUgYXMgYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBicmVha3BvaW50IG1hdGNoZXMsIGBmYWxzZWAgaWYgaXQncyBzbWFsbGVyLlxuICAgKi9cbiAgYXRMZWFzdChzaXplKSB7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5nZXQoc2l6ZSk7XG5cbiAgICBpZiAocXVlcnkpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubWF0Y2hNZWRpYShxdWVyeSkubWF0Y2hlcztcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG1lZGlhIHF1ZXJ5IG9mIGEgYnJlYWtwb2ludC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBnZXQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd8bnVsbH0gLSBUaGUgbWVkaWEgcXVlcnkgb2YgdGhlIGJyZWFrcG9pbnQsIG9yIGBudWxsYCBpZiB0aGUgYnJlYWtwb2ludCBkb2Vzbid0IGV4aXN0LlxuICAgKi9cbiAgZ2V0KHNpemUpIHtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMucXVlcmllcykge1xuICAgICAgaWYodGhpcy5xdWVyaWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcmllc1tpXTtcbiAgICAgICAgaWYgKHNpemUgPT09IHF1ZXJ5Lm5hbWUpIHJldHVybiBxdWVyeS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBicmVha3BvaW50IG5hbWUgYnkgdGVzdGluZyBldmVyeSBicmVha3BvaW50IGFuZCByZXR1cm5pbmcgdGhlIGxhc3Qgb25lIHRvIG1hdGNoICh0aGUgYmlnZ2VzdCBvbmUpLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybnMge1N0cmluZ30gTmFtZSBvZiB0aGUgY3VycmVudCBicmVha3BvaW50LlxuICAgKi9cbiAgX2dldEN1cnJlbnRTaXplKCkge1xuICAgIHZhciBtYXRjaGVkO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnF1ZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcmllc1tpXTtcblxuICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5LnZhbHVlKS5tYXRjaGVzKSB7XG4gICAgICAgIG1hdGNoZWQgPSBxdWVyeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG1hdGNoZWQgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gbWF0Y2hlZC5uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyB0aGUgYnJlYWtwb2ludCB3YXRjaGVyLCB3aGljaCBmaXJlcyBhbiBldmVudCBvbiB0aGUgd2luZG93IHdoZW5ldmVyIHRoZSBicmVha3BvaW50IGNoYW5nZXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3dhdGNoZXIoKSB7XG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuemYubWVkaWFxdWVyeScsICgpID0+IHtcbiAgICAgIHZhciBuZXdTaXplID0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKSwgY3VycmVudFNpemUgPSB0aGlzLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChuZXdTaXplICE9PSBjdXJyZW50U2l6ZSkge1xuICAgICAgICAvLyBDaGFuZ2UgdGhlIGN1cnJlbnQgbWVkaWEgcXVlcnlcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbmV3U2l6ZTtcblxuICAgICAgICAvLyBCcm9hZGNhc3QgdGhlIG1lZGlhIHF1ZXJ5IGNoYW5nZSBvbiB0aGUgd2luZG93XG4gICAgICAgICQod2luZG93KS50cmlnZ2VyKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBbbmV3U2l6ZSwgY3VycmVudFNpemVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuRm91bmRhdGlvbi5NZWRpYVF1ZXJ5ID0gTWVkaWFRdWVyeTtcblxuLy8gbWF0Y2hNZWRpYSgpIHBvbHlmaWxsIC0gVGVzdCBhIENTUyBtZWRpYSB0eXBlL3F1ZXJ5IGluIEpTLlxuLy8gQXV0aG9ycyAmIGNvcHlyaWdodCAoYykgMjAxMjogU2NvdHQgSmVobCwgUGF1bCBJcmlzaCwgTmljaG9sYXMgWmFrYXMsIERhdmlkIEtuaWdodC4gRHVhbCBNSVQvQlNEIGxpY2Vuc2VcbndpbmRvdy5tYXRjaE1lZGlhIHx8ICh3aW5kb3cubWF0Y2hNZWRpYSA9IGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gRm9yIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCBtYXRjaE1lZGl1bSBhcGkgc3VjaCBhcyBJRSA5IGFuZCB3ZWJraXRcbiAgdmFyIHN0eWxlTWVkaWEgPSAod2luZG93LnN0eWxlTWVkaWEgfHwgd2luZG93Lm1lZGlhKTtcblxuICAvLyBGb3IgdGhvc2UgdGhhdCBkb24ndCBzdXBwb3J0IG1hdGNoTWVkaXVtXG4gIGlmICghc3R5bGVNZWRpYSkge1xuICAgIHZhciBzdHlsZSAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKSxcbiAgICBzY3JpcHQgICAgICA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXSxcbiAgICBpbmZvICAgICAgICA9IG51bGw7XG5cbiAgICBzdHlsZS50eXBlICA9ICd0ZXh0L2Nzcyc7XG4gICAgc3R5bGUuaWQgICAgPSAnbWF0Y2htZWRpYWpzLXRlc3QnO1xuXG4gICAgc2NyaXB0ICYmIHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzdHlsZSwgc2NyaXB0KTtcblxuICAgIC8vICdzdHlsZS5jdXJyZW50U3R5bGUnIGlzIHVzZWQgYnkgSUUgPD0gOCBhbmQgJ3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlJyBmb3IgYWxsIG90aGVyIGJyb3dzZXJzXG4gICAgaW5mbyA9ICgnZ2V0Q29tcHV0ZWRTdHlsZScgaW4gd2luZG93KSAmJiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzdHlsZSwgbnVsbCkgfHwgc3R5bGUuY3VycmVudFN0eWxlO1xuXG4gICAgc3R5bGVNZWRpYSA9IHtcbiAgICAgIG1hdGNoTWVkaXVtKG1lZGlhKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gYEBtZWRpYSAke21lZGlhfXsgI21hdGNobWVkaWFqcy10ZXN0IHsgd2lkdGg6IDFweDsgfSB9YDtcblxuICAgICAgICAvLyAnc3R5bGUuc3R5bGVTaGVldCcgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnc3R5bGUudGV4dENvbnRlbnQnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSB0ZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlc3QgaWYgbWVkaWEgcXVlcnkgaXMgdHJ1ZSBvciBmYWxzZVxuICAgICAgICByZXR1cm4gaW5mby53aWR0aCA9PT0gJzFweCc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG1lZGlhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1hdGNoZXM6IHN0eWxlTWVkaWEubWF0Y2hNZWRpdW0obWVkaWEgfHwgJ2FsbCcpLFxuICAgICAgbWVkaWE6IG1lZGlhIHx8ICdhbGwnXG4gICAgfTtcbiAgfVxufSgpKTtcblxuLy8gVGhhbmsgeW91OiBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZ1xuZnVuY3Rpb24gcGFyc2VTdHlsZVRvT2JqZWN0KHN0cikge1xuICB2YXIgc3R5bGVPYmplY3QgPSB7fTtcblxuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHIgPSBzdHIudHJpbSgpLnNsaWNlKDEsIC0xKTsgLy8gYnJvd3NlcnMgcmUtcXVvdGUgc3RyaW5nIHN0eWxlIHZhbHVlc1xuXG4gIGlmICghc3RyKSB7XG4gICAgcmV0dXJuIHN0eWxlT2JqZWN0O1xuICB9XG5cbiAgc3R5bGVPYmplY3QgPSBzdHIuc3BsaXQoJyYnKS5yZWR1Y2UoZnVuY3Rpb24ocmV0LCBwYXJhbSkge1xuICAgIHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG4gICAgdmFyIGtleSA9IHBhcnRzWzBdO1xuICAgIHZhciB2YWwgPSBwYXJ0c1sxXTtcbiAgICBrZXkgPSBkZWNvZGVVUklDb21wb25lbnQoa2V5KTtcblxuICAgIC8vIG1pc3NpbmcgYD1gIHNob3VsZCBiZSBgbnVsbGA6XG4gICAgLy8gaHR0cDovL3czLm9yZy9UUi8yMDEyL1dELXVybC0yMDEyMDUyNC8jY29sbGVjdC11cmwtcGFyYW1ldGVyc1xuICAgIHZhbCA9IHZhbCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlY29kZVVSSUNvbXBvbmVudCh2YWwpO1xuXG4gICAgaWYgKCFyZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0W2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJldFtrZXldKSkge1xuICAgICAgcmV0W2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXRba2V5XSA9IFtyZXRba2V5XSwgdmFsXTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfSwge30pO1xuXG4gIHJldHVybiBzdHlsZU9iamVjdDtcbn1cblxuRm91bmRhdGlvbi5NZWRpYVF1ZXJ5ID0gTWVkaWFRdWVyeTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE1vdGlvbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubW90aW9uXG4gKi9cblxuY29uc3QgaW5pdENsYXNzZXMgICA9IFsnbXVpLWVudGVyJywgJ211aS1sZWF2ZSddO1xuY29uc3QgYWN0aXZlQ2xhc3NlcyA9IFsnbXVpLWVudGVyLWFjdGl2ZScsICdtdWktbGVhdmUtYWN0aXZlJ107XG5cbmNvbnN0IE1vdGlvbiA9IHtcbiAgYW5pbWF0ZUluOiBmdW5jdGlvbihlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gICAgYW5pbWF0ZSh0cnVlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfSxcblxuICBhbmltYXRlT3V0OiBmdW5jdGlvbihlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gICAgYW5pbWF0ZShmYWxzZSwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYik7XG4gIH1cbn1cblxuZnVuY3Rpb24gTW92ZShkdXJhdGlvbiwgZWxlbSwgZm4pe1xuICB2YXIgYW5pbSwgcHJvZywgc3RhcnQgPSBudWxsO1xuICAvLyBjb25zb2xlLmxvZygnY2FsbGVkJyk7XG5cbiAgZnVuY3Rpb24gbW92ZSh0cyl7XG4gICAgaWYoIXN0YXJ0KSBzdGFydCA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAvLyBjb25zb2xlLmxvZyhzdGFydCwgdHMpO1xuICAgIHByb2cgPSB0cyAtIHN0YXJ0O1xuICAgIGZuLmFwcGx5KGVsZW0pO1xuXG4gICAgaWYocHJvZyA8IGR1cmF0aW9uKXsgYW5pbSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZSwgZWxlbSk7IH1cbiAgICBlbHNle1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW0pO1xuICAgICAgZWxlbS50cmlnZ2VyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKS50cmlnZ2VySGFuZGxlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSk7XG4gICAgfVxuICB9XG4gIGFuaW0gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1vdmUpO1xufVxuXG4vKipcbiAqIEFuaW1hdGVzIGFuIGVsZW1lbnQgaW4gb3Igb3V0IHVzaW5nIGEgQ1NTIHRyYW5zaXRpb24gY2xhc3MuXG4gKiBAZnVuY3Rpb25cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW4gLSBEZWZpbmVzIGlmIHRoZSBhbmltYXRpb24gaXMgaW4gb3Igb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb3IgSFRNTCBvYmplY3QgdG8gYW5pbWF0ZS5cbiAqIEBwYXJhbSB7U3RyaW5nfSBhbmltYXRpb24gLSBDU1MgY2xhc3MgdG8gdXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBDYWxsYmFjayB0byBydW4gd2hlbiBhbmltYXRpb24gaXMgZmluaXNoZWQuXG4gKi9cbmZ1bmN0aW9uIGFuaW1hdGUoaXNJbiwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYikge1xuICBlbGVtZW50ID0gJChlbGVtZW50KS5lcSgwKTtcblxuICBpZiAoIWVsZW1lbnQubGVuZ3RoKSByZXR1cm47XG5cbiAgdmFyIGluaXRDbGFzcyA9IGlzSW4gPyBpbml0Q2xhc3Nlc1swXSA6IGluaXRDbGFzc2VzWzFdO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0luID8gYWN0aXZlQ2xhc3Nlc1swXSA6IGFjdGl2ZUNsYXNzZXNbMV07XG5cbiAgLy8gU2V0IHVwIHRoZSBhbmltYXRpb25cbiAgcmVzZXQoKTtcblxuICBlbGVtZW50XG4gICAgLmFkZENsYXNzKGFuaW1hdGlvbilcbiAgICAuY3NzKCd0cmFuc2l0aW9uJywgJ25vbmUnKTtcblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIGVsZW1lbnQuYWRkQ2xhc3MoaW5pdENsYXNzKTtcbiAgICBpZiAoaXNJbikgZWxlbWVudC5zaG93KCk7XG4gIH0pO1xuXG4gIC8vIFN0YXJ0IHRoZSBhbmltYXRpb25cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBlbGVtZW50WzBdLm9mZnNldFdpZHRoO1xuICAgIGVsZW1lbnRcbiAgICAgIC5jc3MoJ3RyYW5zaXRpb24nLCAnJylcbiAgICAgIC5hZGRDbGFzcyhhY3RpdmVDbGFzcyk7XG4gIH0pO1xuXG4gIC8vIENsZWFuIHVwIHRoZSBhbmltYXRpb24gd2hlbiBpdCBmaW5pc2hlc1xuICBlbGVtZW50Lm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoZWxlbWVudCksIGZpbmlzaCk7XG5cbiAgLy8gSGlkZXMgdGhlIGVsZW1lbnQgKGZvciBvdXQgYW5pbWF0aW9ucyksIHJlc2V0cyB0aGUgZWxlbWVudCwgYW5kIHJ1bnMgYSBjYWxsYmFja1xuICBmdW5jdGlvbiBmaW5pc2goKSB7XG4gICAgaWYgKCFpc0luKSBlbGVtZW50LmhpZGUoKTtcbiAgICByZXNldCgpO1xuICAgIGlmIChjYikgY2IuYXBwbHkoZWxlbWVudCk7XG4gIH1cblxuICAvLyBSZXNldHMgdHJhbnNpdGlvbnMgYW5kIHJlbW92ZXMgbW90aW9uLXNwZWNpZmljIGNsYXNzZXNcbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgZWxlbWVudFswXS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAwO1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoYCR7aW5pdENsYXNzfSAke2FjdGl2ZUNsYXNzfSAke2FuaW1hdGlvbn1gKTtcbiAgfVxufVxuXG5Gb3VuZGF0aW9uLk1vdmUgPSBNb3ZlO1xuRm91bmRhdGlvbi5Nb3Rpb24gPSBNb3Rpb247XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuY29uc3QgTmVzdCA9IHtcbiAgRmVhdGhlcihtZW51LCB0eXBlID0gJ3pmJykge1xuICAgIG1lbnUuYXR0cigncm9sZScsICdtZW51YmFyJyk7XG5cbiAgICB2YXIgaXRlbXMgPSBtZW51LmZpbmQoJ2xpJykuYXR0cih7J3JvbGUnOiAnbWVudWl0ZW0nfSksXG4gICAgICAgIHN1Yk1lbnVDbGFzcyA9IGBpcy0ke3R5cGV9LXN1Ym1lbnVgLFxuICAgICAgICBzdWJJdGVtQ2xhc3MgPSBgJHtzdWJNZW51Q2xhc3N9LWl0ZW1gLFxuICAgICAgICBoYXNTdWJDbGFzcyA9IGBpcy0ke3R5cGV9LXN1Ym1lbnUtcGFyZW50YDtcblxuICAgIG1lbnUuZmluZCgnYTpmaXJzdCcpLmF0dHIoJ3RhYmluZGV4JywgMCk7XG5cbiAgICBpdGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICRpdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAkc3ViID0gJGl0ZW0uY2hpbGRyZW4oJ3VsJyk7XG5cbiAgICAgIGlmICgkc3ViLmxlbmd0aCkge1xuICAgICAgICAkaXRlbVxuICAgICAgICAgIC5hZGRDbGFzcyhoYXNTdWJDbGFzcylcbiAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlLFxuICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiAkaXRlbS5jaGlsZHJlbignYTpmaXJzdCcpLnRleHQoKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICRzdWJcbiAgICAgICAgICAuYWRkQ2xhc3MoYHN1Ym1lbnUgJHtzdWJNZW51Q2xhc3N9YClcbiAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAnZGF0YS1zdWJtZW51JzogJycsXG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICAgICAgJ3JvbGUnOiAnbWVudSdcbiAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCRpdGVtLnBhcmVudCgnW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpIHtcbiAgICAgICAgJGl0ZW0uYWRkQ2xhc3MoYGlzLXN1Ym1lbnUtaXRlbSAke3N1Ykl0ZW1DbGFzc31gKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybjtcbiAgfSxcblxuICBCdXJuKG1lbnUsIHR5cGUpIHtcbiAgICB2YXIgaXRlbXMgPSBtZW51LmZpbmQoJ2xpJykucmVtb3ZlQXR0cigndGFiaW5kZXgnKSxcbiAgICAgICAgc3ViTWVudUNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudWAsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IGAke3N1Yk1lbnVDbGFzc30taXRlbWAsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudS1wYXJlbnRgO1xuXG4gICAgbWVudVxuICAgICAgLmZpbmQoJz5saSwgLm1lbnUsIC5tZW51ID4gbGknKVxuICAgICAgLnJlbW92ZUNsYXNzKGAke3N1Yk1lbnVDbGFzc30gJHtzdWJJdGVtQ2xhc3N9ICR7aGFzU3ViQ2xhc3N9IGlzLXN1Ym1lbnUtaXRlbSBzdWJtZW51IGlzLWFjdGl2ZWApXG4gICAgICAucmVtb3ZlQXR0cignZGF0YS1zdWJtZW51JykuY3NzKCdkaXNwbGF5JywgJycpO1xuXG4gICAgLy8gY29uc29sZS5sb2coICAgICAgbWVudS5maW5kKCcuJyArIHN1Yk1lbnVDbGFzcyArICcsIC4nICsgc3ViSXRlbUNsYXNzICsgJywgLmhhcy1zdWJtZW51LCAuaXMtc3VibWVudS1pdGVtLCAuc3VibWVudSwgW2RhdGEtc3VibWVudV0nKVxuICAgIC8vICAgICAgICAgICAucmVtb3ZlQ2xhc3Moc3ViTWVudUNsYXNzICsgJyAnICsgc3ViSXRlbUNsYXNzICsgJyBoYXMtc3VibWVudSBpcy1zdWJtZW51LWl0ZW0gc3VibWVudScpXG4gICAgLy8gICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKSk7XG4gICAgLy8gaXRlbXMuZWFjaChmdW5jdGlvbigpe1xuICAgIC8vICAgdmFyICRpdGVtID0gJCh0aGlzKSxcbiAgICAvLyAgICAgICAkc3ViID0gJGl0ZW0uY2hpbGRyZW4oJ3VsJyk7XG4gICAgLy8gICBpZigkaXRlbS5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKXtcbiAgICAvLyAgICAgJGl0ZW0ucmVtb3ZlQ2xhc3MoJ2lzLXN1Ym1lbnUtaXRlbSAnICsgc3ViSXRlbUNsYXNzKTtcbiAgICAvLyAgIH1cbiAgICAvLyAgIGlmKCRzdWIubGVuZ3RoKXtcbiAgICAvLyAgICAgJGl0ZW0ucmVtb3ZlQ2xhc3MoJ2hhcy1zdWJtZW51Jyk7XG4gICAgLy8gICAgICRzdWIucmVtb3ZlQ2xhc3MoJ3N1Ym1lbnUgJyArIHN1Yk1lbnVDbGFzcykucmVtb3ZlQXR0cignZGF0YS1zdWJtZW51Jyk7XG4gICAgLy8gICB9XG4gICAgLy8gfSk7XG4gIH1cbn1cblxuRm91bmRhdGlvbi5OZXN0ID0gTmVzdDtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5mdW5jdGlvbiBUaW1lcihlbGVtLCBvcHRpb25zLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLC8vb3B0aW9ucyBpcyBhbiBvYmplY3QgZm9yIGVhc2lseSBhZGRpbmcgZmVhdHVyZXMgbGF0ZXIuXG4gICAgICBuYW1lU3BhY2UgPSBPYmplY3Qua2V5cyhlbGVtLmRhdGEoKSlbMF0gfHwgJ3RpbWVyJyxcbiAgICAgIHJlbWFpbiA9IC0xLFxuICAgICAgc3RhcnQsXG4gICAgICB0aW1lcjtcblxuICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG5cbiAgdGhpcy5yZXN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmVtYWluID0gLTE7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICB0aGlzLnN0YXJ0KCk7XG4gIH1cblxuICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgIC8vIGlmKCFlbGVtLmRhdGEoJ3BhdXNlZCcpKXsgcmV0dXJuIGZhbHNlOyB9Ly9tYXliZSBpbXBsZW1lbnQgdGhpcyBzYW5pdHkgY2hlY2sgaWYgdXNlZCBmb3Igb3RoZXIgdGhpbmdzLlxuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgcmVtYWluID0gcmVtYWluIDw9IDAgPyBkdXJhdGlvbiA6IHJlbWFpbjtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIGZhbHNlKTtcbiAgICBzdGFydCA9IERhdGUubm93KCk7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBpZihvcHRpb25zLmluZmluaXRlKXtcbiAgICAgICAgX3RoaXMucmVzdGFydCgpOy8vcmVydW4gdGhlIHRpbWVyLlxuICAgICAgfVxuICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gICAgfSwgcmVtYWluKTtcbiAgICBlbGVtLnRyaWdnZXIoYHRpbWVyc3RhcnQuemYuJHtuYW1lU3BhY2V9YCk7XG4gIH1cblxuICB0aGlzLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7XG4gICAgLy9pZihlbGVtLmRhdGEoJ3BhdXNlZCcpKXsgcmV0dXJuIGZhbHNlOyB9Ly9tYXliZSBpbXBsZW1lbnQgdGhpcyBzYW5pdHkgY2hlY2sgaWYgdXNlZCBmb3Igb3RoZXIgdGhpbmdzLlxuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgZWxlbS5kYXRhKCdwYXVzZWQnLCB0cnVlKTtcbiAgICB2YXIgZW5kID0gRGF0ZS5ub3coKTtcbiAgICByZW1haW4gPSByZW1haW4gLSAoZW5kIC0gc3RhcnQpO1xuICAgIGVsZW0udHJpZ2dlcihgdGltZXJwYXVzZWQuemYuJHtuYW1lU3BhY2V9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSdW5zIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBpbWFnZXMgYXJlIGZ1bGx5IGxvYWRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBpbWFnZXMgLSBJbWFnZShzKSB0byBjaGVjayBpZiBsb2FkZWQuXG4gKiBAcGFyYW0ge0Z1bmN9IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIGltYWdlIGlzIGZ1bGx5IGxvYWRlZC5cbiAqL1xuZnVuY3Rpb24gb25JbWFnZXNMb2FkZWQoaW1hZ2VzLCBjYWxsYmFjayl7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIHVubG9hZGVkID0gaW1hZ2VzLmxlbmd0aDtcblxuICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG5cbiAgaW1hZ2VzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuY29tcGxldGUpIHtcbiAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLm5hdHVyYWxXaWR0aCAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5uYXR1cmFsV2lkdGggPiAwKSB7XG4gICAgICBzaW5nbGVJbWFnZUxvYWRlZCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICQodGhpcykub25lKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHNpbmdsZUltYWdlTG9hZGVkKCkge1xuICAgIHVubG9hZGVkLS07XG4gICAgaWYgKHVubG9hZGVkID09PSAwKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfVxufVxuXG5Gb3VuZGF0aW9uLlRpbWVyID0gVGltZXI7XG5Gb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkID0gb25JbWFnZXNMb2FkZWQ7XG5cbn0oalF1ZXJ5KTtcbiIsIi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipXb3JrIGluc3BpcmVkIGJ5IG11bHRpcGxlIGpxdWVyeSBzd2lwZSBwbHVnaW5zKipcbi8vKipEb25lIGJ5IFlvaGFpIEFyYXJhdCAqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbihmdW5jdGlvbigkKSB7XG5cbiAgJC5zcG90U3dpcGUgPSB7XG4gICAgdmVyc2lvbjogJzEuMC4wJyxcbiAgICBlbmFibGVkOiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgcHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICAgIG1vdmVUaHJlc2hvbGQ6IDc1LFxuICAgIHRpbWVUaHJlc2hvbGQ6IDIwMFxuICB9O1xuXG4gIHZhciAgIHN0YXJ0UG9zWCxcbiAgICAgICAgc3RhcnRQb3NZLFxuICAgICAgICBzdGFydFRpbWUsXG4gICAgICAgIGVsYXBzZWRUaW1lLFxuICAgICAgICBpc01vdmluZyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgLy8gIGFsZXJ0KHRoaXMpO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaE1vdmUpO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoRW5kKTtcbiAgICBpc01vdmluZyA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZSkge1xuICAgIGlmICgkLnNwb3RTd2lwZS5wcmV2ZW50RGVmYXVsdCkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICBpZihpc01vdmluZykge1xuICAgICAgdmFyIHggPSBlLnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICB2YXIgeSA9IGUudG91Y2hlc1swXS5wYWdlWTtcbiAgICAgIHZhciBkeCA9IHN0YXJ0UG9zWCAtIHg7XG4gICAgICB2YXIgZHkgPSBzdGFydFBvc1kgLSB5O1xuICAgICAgdmFyIGRpcjtcbiAgICAgIGVsYXBzZWRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydFRpbWU7XG4gICAgICBpZihNYXRoLmFicyhkeCkgPj0gJC5zcG90U3dpcGUubW92ZVRocmVzaG9sZCAmJiBlbGFwc2VkVGltZSA8PSAkLnNwb3RTd2lwZS50aW1lVGhyZXNob2xkKSB7XG4gICAgICAgIGRpciA9IGR4ID4gMCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICB9XG4gICAgICAvLyBlbHNlIGlmKE1hdGguYWJzKGR5KSA+PSAkLnNwb3RTd2lwZS5tb3ZlVGhyZXNob2xkICYmIGVsYXBzZWRUaW1lIDw9ICQuc3BvdFN3aXBlLnRpbWVUaHJlc2hvbGQpIHtcbiAgICAgIC8vICAgZGlyID0gZHkgPiAwID8gJ2Rvd24nIDogJ3VwJztcbiAgICAgIC8vIH1cbiAgICAgIGlmKGRpcikge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG9uVG91Y2hFbmQuY2FsbCh0aGlzKTtcbiAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCdzd2lwZScsIGRpcikudHJpZ2dlcihgc3dpcGUke2Rpcn1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZSkge1xuICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID09IDEpIHtcbiAgICAgIHN0YXJ0UG9zWCA9IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIHN0YXJ0UG9zWSA9IGUudG91Y2hlc1swXS5wYWdlWTtcbiAgICAgIGlzTW92aW5nID0gdHJ1ZTtcbiAgICAgIHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSwgZmFsc2UpO1xuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciAmJiB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRlYXJkb3duKCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCk7XG4gIH1cblxuICAkLmV2ZW50LnNwZWNpYWwuc3dpcGUgPSB7IHNldHVwOiBpbml0IH07XG5cbiAgJC5lYWNoKFsnbGVmdCcsICd1cCcsICdkb3duJywgJ3JpZ2h0J10sIGZ1bmN0aW9uICgpIHtcbiAgICAkLmV2ZW50LnNwZWNpYWxbYHN3aXBlJHt0aGlzfWBdID0geyBzZXR1cDogZnVuY3Rpb24oKXtcbiAgICAgICQodGhpcykub24oJ3N3aXBlJywgJC5ub29wKTtcbiAgICB9IH07XG4gIH0pO1xufSkoalF1ZXJ5KTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBNZXRob2QgZm9yIGFkZGluZyBwc3VlZG8gZHJhZyBldmVudHMgdG8gZWxlbWVudHMgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiFmdW5jdGlvbigkKXtcbiAgJC5mbi5hZGRUb3VjaCA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGksZWwpe1xuICAgICAgJChlbCkuYmluZCgndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnLGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vd2UgcGFzcyB0aGUgb3JpZ2luYWwgZXZlbnQgb2JqZWN0IGJlY2F1c2UgdGhlIGpRdWVyeSBldmVudFxuICAgICAgICAvL29iamVjdCBpcyBub3JtYWxpemVkIHRvIHczYyBzcGVjcyBhbmQgZG9lcyBub3QgcHJvdmlkZSB0aGUgVG91Y2hMaXN0XG4gICAgICAgIGhhbmRsZVRvdWNoKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGhhbmRsZVRvdWNoID0gZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICBmaXJzdCA9IHRvdWNoZXNbMF0sXG4gICAgICAgICAgZXZlbnRUeXBlcyA9IHtcbiAgICAgICAgICAgIHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuICAgICAgICAgICAgdG91Y2htb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgICAgICAgICAgIHRvdWNoZW5kOiAnbW91c2V1cCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHR5cGUgPSBldmVudFR5cGVzW2V2ZW50LnR5cGVdLFxuICAgICAgICAgIHNpbXVsYXRlZEV2ZW50XG4gICAgICAgIDtcblxuICAgICAgaWYoJ01vdXNlRXZlbnQnIGluIHdpbmRvdyAmJiB0eXBlb2Ygd2luZG93Lk1vdXNlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc2ltdWxhdGVkRXZlbnQgPSBuZXcgd2luZG93Lk1vdXNlRXZlbnQodHlwZSwge1xuICAgICAgICAgICdidWJibGVzJzogdHJ1ZSxcbiAgICAgICAgICAnY2FuY2VsYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3NjcmVlblgnOiBmaXJzdC5zY3JlZW5YLFxuICAgICAgICAgICdzY3JlZW5ZJzogZmlyc3Quc2NyZWVuWSxcbiAgICAgICAgICAnY2xpZW50WCc6IGZpcnN0LmNsaWVudFgsXG4gICAgICAgICAgJ2NsaWVudFknOiBmaXJzdC5jbGllbnRZXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2ltdWxhdGVkRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICAgICAgICBzaW11bGF0ZWRFdmVudC5pbml0TW91c2VFdmVudCh0eXBlLCB0cnVlLCB0cnVlLCB3aW5kb3csIDEsIGZpcnN0LnNjcmVlblgsIGZpcnN0LnNjcmVlblksIGZpcnN0LmNsaWVudFgsIGZpcnN0LmNsaWVudFksIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLypsZWZ0Ki8sIG51bGwpO1xuICAgICAgfVxuICAgICAgZmlyc3QudGFyZ2V0LmRpc3BhdGNoRXZlbnQoc2ltdWxhdGVkRXZlbnQpO1xuICAgIH07XG4gIH07XG59KGpRdWVyeSk7XG5cblxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyoqRnJvbSB0aGUgalF1ZXJ5IE1vYmlsZSBMaWJyYXJ5Kipcbi8vKipuZWVkIHRvIHJlY3JlYXRlIGZ1bmN0aW9uYWxpdHkqKlxuLy8qKmFuZCB0cnkgdG8gaW1wcm92ZSBpZiBwb3NzaWJsZSoqXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuLyogUmVtb3ZpbmcgdGhlIGpRdWVyeSBmdW5jdGlvbiAqKioqXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuKGZ1bmN0aW9uKCAkLCB3aW5kb3csIHVuZGVmaW5lZCApIHtcblxuXHR2YXIgJGRvY3VtZW50ID0gJCggZG9jdW1lbnQgKSxcblx0XHQvLyBzdXBwb3J0VG91Y2ggPSAkLm1vYmlsZS5zdXBwb3J0LnRvdWNoLFxuXHRcdHRvdWNoU3RhcnRFdmVudCA9ICd0b3VjaHN0YXJ0Jy8vc3VwcG9ydFRvdWNoID8gXCJ0b3VjaHN0YXJ0XCIgOiBcIm1vdXNlZG93blwiLFxuXHRcdHRvdWNoU3RvcEV2ZW50ID0gJ3RvdWNoZW5kJy8vc3VwcG9ydFRvdWNoID8gXCJ0b3VjaGVuZFwiIDogXCJtb3VzZXVwXCIsXG5cdFx0dG91Y2hNb3ZlRXZlbnQgPSAndG91Y2htb3ZlJy8vc3VwcG9ydFRvdWNoID8gXCJ0b3VjaG1vdmVcIiA6IFwibW91c2Vtb3ZlXCI7XG5cblx0Ly8gc2V0dXAgbmV3IGV2ZW50IHNob3J0Y3V0c1xuXHQkLmVhY2goICggXCJ0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCBcIiArXG5cdFx0XCJzd2lwZSBzd2lwZWxlZnQgc3dpcGVyaWdodFwiICkuc3BsaXQoIFwiIFwiICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdFx0JC5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0cmV0dXJuIGZuID8gdGhpcy5iaW5kKCBuYW1lLCBmbiApIDogdGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblxuXHRcdC8vIGpRdWVyeSA8IDEuOFxuXHRcdGlmICggJC5hdHRyRm4gKSB7XG5cdFx0XHQkLmF0dHJGblsgbmFtZSBdID0gdHJ1ZTtcblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIHRyaWdnZXJDdXN0b21FdmVudCggb2JqLCBldmVudFR5cGUsIGV2ZW50LCBidWJibGUgKSB7XG5cdFx0dmFyIG9yaWdpbmFsVHlwZSA9IGV2ZW50LnR5cGU7XG5cdFx0ZXZlbnQudHlwZSA9IGV2ZW50VHlwZTtcblx0XHRpZiAoIGJ1YmJsZSApIHtcblx0XHRcdCQuZXZlbnQudHJpZ2dlciggZXZlbnQsIHVuZGVmaW5lZCwgb2JqICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCQuZXZlbnQuZGlzcGF0Y2guY2FsbCggb2JqLCBldmVudCApO1xuXHRcdH1cblx0XHRldmVudC50eXBlID0gb3JpZ2luYWxUeXBlO1xuXHR9XG5cblx0Ly8gYWxzbyBoYW5kbGVzIHRhcGhvbGRcblxuXHQvLyBBbHNvIGhhbmRsZXMgc3dpcGVsZWZ0LCBzd2lwZXJpZ2h0XG5cdCQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHtcblxuXHRcdC8vIE1vcmUgdGhhbiB0aGlzIGhvcml6b250YWwgZGlzcGxhY2VtZW50LCBhbmQgd2Ugd2lsbCBzdXBwcmVzcyBzY3JvbGxpbmcuXG5cdFx0c2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZDogMzAsXG5cblx0XHQvLyBNb3JlIHRpbWUgdGhhbiB0aGlzLCBhbmQgaXQgaXNuJ3QgYSBzd2lwZS5cblx0XHRkdXJhdGlvblRocmVzaG9sZDogMTAwMCxcblxuXHRcdC8vIFN3aXBlIGhvcml6b250YWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbW9yZSB0aGFuIHRoaXMuXG5cdFx0aG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+PSAyID8gMTUgOiAzMCxcblxuXHRcdC8vIFN3aXBlIHZlcnRpY2FsIGRpc3BsYWNlbWVudCBtdXN0IGJlIGxlc3MgdGhhbiB0aGlzLlxuXHRcdHZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQ6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID49IDIgPyAxNSA6IDMwLFxuXG5cdFx0Z2V0TG9jYXRpb246IGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cdFx0XHR2YXIgd2luUGFnZVggPSB3aW5kb3cucGFnZVhPZmZzZXQsXG5cdFx0XHRcdHdpblBhZ2VZID0gd2luZG93LnBhZ2VZT2Zmc2V0LFxuXHRcdFx0XHR4ID0gZXZlbnQuY2xpZW50WCxcblx0XHRcdFx0eSA9IGV2ZW50LmNsaWVudFk7XG5cblx0XHRcdGlmICggZXZlbnQucGFnZVkgPT09IDAgJiYgTWF0aC5mbG9vciggeSApID4gTWF0aC5mbG9vciggZXZlbnQucGFnZVkgKSB8fFxuXHRcdFx0XHRldmVudC5wYWdlWCA9PT0gMCAmJiBNYXRoLmZsb29yKCB4ICkgPiBNYXRoLmZsb29yKCBldmVudC5wYWdlWCApICkge1xuXG5cdFx0XHRcdC8vIGlPUzQgY2xpZW50WC9jbGllbnRZIGhhdmUgdGhlIHZhbHVlIHRoYXQgc2hvdWxkIGhhdmUgYmVlblxuXHRcdFx0XHQvLyBpbiBwYWdlWC9wYWdlWS4gV2hpbGUgcGFnZVgvcGFnZS8gaGF2ZSB0aGUgdmFsdWUgMFxuXHRcdFx0XHR4ID0geCAtIHdpblBhZ2VYO1xuXHRcdFx0XHR5ID0geSAtIHdpblBhZ2VZO1xuXHRcdFx0fSBlbHNlIGlmICggeSA8ICggZXZlbnQucGFnZVkgLSB3aW5QYWdlWSkgfHwgeCA8ICggZXZlbnQucGFnZVggLSB3aW5QYWdlWCApICkge1xuXG5cdFx0XHRcdC8vIFNvbWUgQW5kcm9pZCBicm93c2VycyBoYXZlIHRvdGFsbHkgYm9ndXMgdmFsdWVzIGZvciBjbGllbnRYL1lcblx0XHRcdFx0Ly8gd2hlbiBzY3JvbGxpbmcvem9vbWluZyBhIHBhZ2UuIERldGVjdGFibGUgc2luY2UgY2xpZW50WC9jbGllbnRZXG5cdFx0XHRcdC8vIHNob3VsZCBuZXZlciBiZSBzbWFsbGVyIHRoYW4gcGFnZVgvcGFnZVkgbWludXMgcGFnZSBzY3JvbGxcblx0XHRcdFx0eCA9IGV2ZW50LnBhZ2VYIC0gd2luUGFnZVg7XG5cdFx0XHRcdHkgPSBldmVudC5wYWdlWSAtIHdpblBhZ2VZO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR4OiB4LFxuXHRcdFx0XHR5OiB5XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRzdGFydDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIGRhdGEgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgP1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1sgMCBdIDogZXZlbnQsXG5cdFx0XHRcdGxvY2F0aW9uID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmdldExvY2F0aW9uKCBkYXRhICk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dGltZTogKCBuZXcgRGF0ZSgpICkuZ2V0VGltZSgpLFxuXHRcdFx0XHRcdFx0Y29vcmRzOiBbIGxvY2F0aW9uLngsIGxvY2F0aW9uLnkgXSxcblx0XHRcdFx0XHRcdG9yaWdpbjogJCggZXZlbnQudGFyZ2V0IClcblx0XHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRzdG9wOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZGF0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA/XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCxcblx0XHRcdFx0bG9jYXRpb24gPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZ2V0TG9jYXRpb24oIGRhdGEgKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksXG5cdFx0XHRcdFx0XHRjb29yZHM6IFsgbG9jYXRpb24ueCwgbG9jYXRpb24ueSBdXG5cdFx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0aGFuZGxlU3dpcGU6IGZ1bmN0aW9uKCBzdGFydCwgc3RvcCwgdGhpc09iamVjdCwgb3JpZ1RhcmdldCApIHtcblx0XHRcdGlmICggc3RvcC50aW1lIC0gc3RhcnQudGltZSA8ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5kdXJhdGlvblRocmVzaG9sZCAmJlxuXHRcdFx0XHRNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuaG9yaXpvbnRhbERpc3RhbmNlVGhyZXNob2xkICYmXG5cdFx0XHRcdE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDEgXSAtIHN0b3AuY29vcmRzWyAxIF0gKSA8ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS52ZXJ0aWNhbERpc3RhbmNlVGhyZXNob2xkICkge1xuXHRcdFx0XHR2YXIgZGlyZWN0aW9uID0gc3RhcnQuY29vcmRzWzBdID4gc3RvcC5jb29yZHNbIDAgXSA/IFwic3dpcGVsZWZ0XCIgOiBcInN3aXBlcmlnaHRcIjtcblxuXHRcdFx0XHR0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsIFwic3dpcGVcIiwgJC5FdmVudCggXCJzd2lwZVwiLCB7IHRhcmdldDogb3JpZ1RhcmdldCwgc3dpcGVzdGFydDogc3RhcnQsIHN3aXBlc3RvcDogc3RvcCB9KSwgdHJ1ZSApO1xuXHRcdFx0XHR0cmlnZ2VyQ3VzdG9tRXZlbnQoIHRoaXNPYmplY3QsIGRpcmVjdGlvbiwkLkV2ZW50KCBkaXJlY3Rpb24sIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0LCBzd2lwZXN0YXJ0OiBzdGFydCwgc3dpcGVzdG9wOiBzdG9wIH0gKSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH0sXG5cblx0XHQvLyBUaGlzIHNlcnZlcyBhcyBhIGZsYWcgdG8gZW5zdXJlIHRoYXQgYXQgbW9zdCBvbmUgc3dpcGUgZXZlbnQgZXZlbnQgaXNcblx0XHQvLyBpbiB3b3JrIGF0IGFueSBnaXZlbiB0aW1lXG5cdFx0ZXZlbnRJblByb2dyZXNzOiBmYWxzZSxcblxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBldmVudHMsXG5cdFx0XHRcdHRoaXNPYmplY3QgPSB0aGlzLFxuXHRcdFx0XHQkdGhpcyA9ICQoIHRoaXNPYmplY3QgKSxcblx0XHRcdFx0Y29udGV4dCA9IHt9O1xuXG5cdFx0XHQvLyBSZXRyaWV2ZSB0aGUgZXZlbnRzIGRhdGEgZm9yIHRoaXMgZWxlbWVudCBhbmQgYWRkIHRoZSBzd2lwZSBjb250ZXh0XG5cdFx0XHRldmVudHMgPSAkLmRhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRpZiAoICFldmVudHMgKSB7XG5cdFx0XHRcdGV2ZW50cyA9IHsgbGVuZ3RoOiAwIH07XG5cdFx0XHRcdCQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIsIGV2ZW50cyApO1xuXHRcdFx0fVxuXHRcdFx0ZXZlbnRzLmxlbmd0aCsrO1xuXHRcdFx0ZXZlbnRzLnN3aXBlID0gY29udGV4dDtcblxuXHRcdFx0Y29udGV4dC5zdGFydCA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBCYWlsIGlmIHdlJ3JlIGFscmVhZHkgd29ya2luZyBvbiBhIHN3aXBlIGV2ZW50XG5cdFx0XHRcdGlmICggJC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IHRydWU7XG5cblx0XHRcdFx0dmFyIHN0b3AsXG5cdFx0XHRcdFx0c3RhcnQgPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc3RhcnQoIGV2ZW50ICksXG5cdFx0XHRcdFx0b3JpZ1RhcmdldCA9IGV2ZW50LnRhcmdldCxcblx0XHRcdFx0XHRlbWl0dGVkID0gZmFsc2U7XG5cblx0XHRcdFx0Y29udGV4dC5tb3ZlID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdGlmICggIXN0YXJ0IHx8IGV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHN0b3AgPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc3RvcCggZXZlbnQgKTtcblx0XHRcdFx0XHRpZiAoICFlbWl0dGVkICkge1xuXHRcdFx0XHRcdFx0ZW1pdHRlZCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5oYW5kbGVTd2lwZSggc3RhcnQsIHN0b3AsIHRoaXNPYmplY3QsIG9yaWdUYXJnZXQgKTtcblx0XHRcdFx0XHRcdGlmICggZW1pdHRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXNldCB0aGUgY29udGV4dCB0byBtYWtlIHdheSBmb3IgdGhlIG5leHQgc3dpcGUgZXZlbnRcblx0XHRcdFx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBwcmV2ZW50IHNjcm9sbGluZ1xuXHRcdFx0XHRcdGlmICggTWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMCBdIC0gc3RvcC5jb29yZHNbIDAgXSApID4gJC5ldmVudC5zcGVjaWFsLnN3aXBlLnNjcm9sbFN1cHJlc3Npb25UaHJlc2hvbGQgKSB7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRjb250ZXh0LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGVtaXR0ZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHQvLyBSZXNldCB0aGUgY29udGV4dCB0byBtYWtlIHdheSBmb3IgdGhlIG5leHQgc3dpcGUgZXZlbnRcblx0XHRcdFx0XHRcdCQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ldmVudEluUHJvZ3Jlc3MgPSBmYWxzZTtcblx0XHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKTtcblx0XHRcdFx0XHRcdGNvbnRleHQubW92ZSA9IG51bGw7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0JGRvY3VtZW50Lm9uKCB0b3VjaE1vdmVFdmVudCwgY29udGV4dC5tb3ZlIClcblx0XHRcdFx0XHQub25lKCB0b3VjaFN0b3BFdmVudCwgY29udGV4dC5zdG9wICk7XG5cdFx0XHR9O1xuXHRcdFx0JHRoaXMub24oIHRvdWNoU3RhcnRFdmVudCwgY29udGV4dC5zdGFydCApO1xuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZXZlbnRzLCBjb250ZXh0O1xuXG5cdFx0XHRldmVudHMgPSAkLmRhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdFx0Y29udGV4dCA9IGV2ZW50cy5zd2lwZTtcblx0XHRcdFx0ZGVsZXRlIGV2ZW50cy5zd2lwZTtcblx0XHRcdFx0ZXZlbnRzLmxlbmd0aC0tO1xuXHRcdFx0XHRpZiAoIGV2ZW50cy5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRcdFx0JC5yZW1vdmVEYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggY29udGV4dCApIHtcblx0XHRcdFx0aWYgKCBjb250ZXh0LnN0YXJ0ICkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5vZmYoIHRvdWNoU3RhcnRFdmVudCwgY29udGV4dC5zdGFydCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggY29udGV4dC5tb3ZlICkge1xuXHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGNvbnRleHQuc3RvcCApIHtcblx0XHRcdFx0XHQkZG9jdW1lbnQub2ZmKCB0b3VjaFN0b3BFdmVudCwgY29udGV4dC5zdG9wICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdCQuZWFjaCh7XG5cdFx0c3dpcGVsZWZ0OiBcInN3aXBlLmxlZnRcIixcblx0XHRzd2lwZXJpZ2h0OiBcInN3aXBlLnJpZ2h0XCJcblx0fSwgZnVuY3Rpb24oIGV2ZW50LCBzb3VyY2VFdmVudCApIHtcblxuXHRcdCQuZXZlbnQuc3BlY2lhbFsgZXZlbnQgXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLmJpbmQoIHNvdXJjZUV2ZW50LCAkLm5vb3AgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCQoIHRoaXMgKS51bmJpbmQoIHNvdXJjZUV2ZW50ICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG59KSggalF1ZXJ5LCB0aGlzICk7XG4qL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBNdXRhdGlvbk9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHByZWZpeGVzID0gWydXZWJLaXQnLCAnTW96JywgJ08nLCAnTXMnLCAnJ107XG4gIGZvciAodmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGAke3ByZWZpeGVzW2ldfU11dGF0aW9uT2JzZXJ2ZXJgIGluIHdpbmRvdykge1xuICAgICAgcmV0dXJuIHdpbmRvd1tgJHtwcmVmaXhlc1tpXX1NdXRhdGlvbk9ic2VydmVyYF07XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn0oKSk7XG5cbmNvbnN0IHRyaWdnZXJzID0gKGVsLCB0eXBlKSA9PiB7XG4gIGVsLmRhdGEodHlwZSkuc3BsaXQoJyAnKS5mb3JFYWNoKGlkID0+IHtcbiAgICAkKGAjJHtpZH1gKVsgdHlwZSA9PT0gJ2Nsb3NlJyA/ICd0cmlnZ2VyJyA6ICd0cmlnZ2VySGFuZGxlciddKGAke3R5cGV9LnpmLnRyaWdnZXJgLCBbZWxdKTtcbiAgfSk7XG59O1xuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1vcGVuXSB3aWxsIHJldmVhbCBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbiQoZG9jdW1lbnQpLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLW9wZW5dJywgZnVuY3Rpb24oKSB7XG4gIHRyaWdnZXJzKCQodGhpcyksICdvcGVuJyk7XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zZV0gd2lsbCBjbG9zZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbi8vIElmIHVzZWQgd2l0aG91dCBhIHZhbHVlIG9uIFtkYXRhLWNsb3NlXSwgdGhlIGV2ZW50IHdpbGwgYnViYmxlLCBhbGxvd2luZyBpdCB0byBjbG9zZSBhIHBhcmVudCBjb21wb25lbnQuXG4kKGRvY3VtZW50KS5vbignY2xpY2suemYudHJpZ2dlcicsICdbZGF0YS1jbG9zZV0nLCBmdW5jdGlvbigpIHtcbiAgbGV0IGlkID0gJCh0aGlzKS5kYXRhKCdjbG9zZScpO1xuICBpZiAoaWQpIHtcbiAgICB0cmlnZ2VycygkKHRoaXMpLCAnY2xvc2UnKTtcbiAgfVxuICBlbHNlIHtcbiAgICAkKHRoaXMpLnRyaWdnZXIoJ2Nsb3NlLnpmLnRyaWdnZXInKTtcbiAgfVxufSk7XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtdG9nZ2xlXSB3aWxsIHRvZ2dsZSBhIHBsdWdpbiB0aGF0IHN1cHBvcnRzIGl0IHdoZW4gY2xpY2tlZC5cbiQoZG9jdW1lbnQpLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZV0nLCBmdW5jdGlvbigpIHtcbiAgdHJpZ2dlcnMoJCh0aGlzKSwgJ3RvZ2dsZScpO1xufSk7XG5cbi8vIEVsZW1lbnRzIHdpdGggW2RhdGEtY2xvc2FibGVdIHdpbGwgcmVzcG9uZCB0byBjbG9zZS56Zi50cmlnZ2VyIGV2ZW50cy5cbiQoZG9jdW1lbnQpLm9uKCdjbG9zZS56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NhYmxlXScsIGZ1bmN0aW9uKGUpe1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICBsZXQgYW5pbWF0aW9uID0gJCh0aGlzKS5kYXRhKCdjbG9zYWJsZScpO1xuXG4gIGlmKGFuaW1hdGlvbiAhPT0gJycpe1xuICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQoJCh0aGlzKSwgYW5pbWF0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgICQodGhpcykudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gICAgfSk7XG4gIH1lbHNle1xuICAgICQodGhpcykuZmFkZU91dCgpLnRyaWdnZXIoJ2Nsb3NlZC56ZicpO1xuICB9XG59KTtcblxuJChkb2N1bWVudCkub24oJ2ZvY3VzLnpmLnRyaWdnZXIgYmx1ci56Zi50cmlnZ2VyJywgJ1tkYXRhLXRvZ2dsZS1mb2N1c10nLCBmdW5jdGlvbigpIHtcbiAgbGV0IGlkID0gJCh0aGlzKS5kYXRhKCd0b2dnbGUtZm9jdXMnKTtcbiAgJChgIyR7aWR9YCkudHJpZ2dlckhhbmRsZXIoJ3RvZ2dsZS56Zi50cmlnZ2VyJywgWyQodGhpcyldKTtcbn0pO1xuXG4vKipcbiogRmlyZXMgb25jZSBhZnRlciBhbGwgb3RoZXIgc2NyaXB0cyBoYXZlIGxvYWRlZFxuKiBAZnVuY3Rpb25cbiogQHByaXZhdGVcbiovXG4kKHdpbmRvdykub24oJ2xvYWQnLCAoKSA9PiB7XG4gIGNoZWNrTGlzdGVuZXJzKCk7XG59KTtcblxuZnVuY3Rpb24gY2hlY2tMaXN0ZW5lcnMoKSB7XG4gIGV2ZW50c0xpc3RlbmVyKCk7XG4gIHJlc2l6ZUxpc3RlbmVyKCk7XG4gIHNjcm9sbExpc3RlbmVyKCk7XG4gIGNsb3NlbWVMaXN0ZW5lcigpO1xufVxuXG4vLyoqKioqKioqIG9ubHkgZmlyZXMgdGhpcyBmdW5jdGlvbiBvbmNlIG9uIGxvYWQsIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIHRvIHdhdGNoICoqKioqKioqXG5mdW5jdGlvbiBjbG9zZW1lTGlzdGVuZXIocGx1Z2luTmFtZSkge1xuICB2YXIgeWV0aUJveGVzID0gJCgnW2RhdGEteWV0aS1ib3hdJyksXG4gICAgICBwbHVnTmFtZXMgPSBbJ2Ryb3Bkb3duJywgJ3Rvb2x0aXAnLCAncmV2ZWFsJ107XG5cbiAgaWYocGx1Z2luTmFtZSl7XG4gICAgaWYodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdzdHJpbmcnKXtcbiAgICAgIHBsdWdOYW1lcy5wdXNoKHBsdWdpbk5hbWUpO1xuICAgIH1lbHNlIGlmKHR5cGVvZiBwbHVnaW5OYW1lID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcGx1Z2luTmFtZVswXSA9PT0gJ3N0cmluZycpe1xuICAgICAgcGx1Z05hbWVzLmNvbmNhdChwbHVnaW5OYW1lKTtcbiAgICB9ZWxzZXtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1BsdWdpbiBuYW1lcyBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gIH1cbiAgaWYoeWV0aUJveGVzLmxlbmd0aCl7XG4gICAgbGV0IGxpc3RlbmVycyA9IHBsdWdOYW1lcy5tYXAoKG5hbWUpID0+IHtcbiAgICAgIHJldHVybiBgY2xvc2VtZS56Zi4ke25hbWV9YDtcbiAgICB9KS5qb2luKCcgJyk7XG5cbiAgICAkKHdpbmRvdykub2ZmKGxpc3RlbmVycykub24obGlzdGVuZXJzLCBmdW5jdGlvbihlLCBwbHVnaW5JZCl7XG4gICAgICBsZXQgcGx1Z2luID0gZS5uYW1lc3BhY2Uuc3BsaXQoJy4nKVswXTtcbiAgICAgIGxldCBwbHVnaW5zID0gJChgW2RhdGEtJHtwbHVnaW59XWApLm5vdChgW2RhdGEteWV0aS1ib3g9XCIke3BsdWdpbklkfVwiXWApO1xuXG4gICAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgbGV0IF90aGlzID0gJCh0aGlzKTtcblxuICAgICAgICBfdGhpcy50cmlnZ2VySGFuZGxlcignY2xvc2UuemYudHJpZ2dlcicsIFtfdGhpc10pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzaXplTGlzdGVuZXIoZGVib3VuY2Upe1xuICBsZXQgdGltZXIsXG4gICAgICAkbm9kZXMgPSAkKCdbZGF0YS1yZXNpemVdJyk7XG4gIGlmKCRub2Rlcy5sZW5ndGgpe1xuICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS56Zi50cmlnZ2VyJylcbiAgICAub24oJ3Jlc2l6ZS56Zi50cmlnZ2VyJywgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKHRpbWVyKSB7IGNsZWFyVGltZW91dCh0aW1lcik7IH1cblxuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgaWYoIU11dGF0aW9uT2JzZXJ2ZXIpey8vZmFsbGJhY2sgZm9yIElFIDlcbiAgICAgICAgICAkbm9kZXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSByZXNpemUgZXZlbnRcbiAgICAgICAgJG5vZGVzLmF0dHIoJ2RhdGEtZXZlbnRzJywgXCJyZXNpemVcIik7XG4gICAgICB9LCBkZWJvdW5jZSB8fCAxMCk7Ly9kZWZhdWx0IHRpbWUgdG8gZW1pdCByZXNpemUgZXZlbnRcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzY3JvbGxMaXN0ZW5lcihkZWJvdW5jZSl7XG4gIGxldCB0aW1lcixcbiAgICAgICRub2RlcyA9ICQoJ1tkYXRhLXNjcm9sbF0nKTtcbiAgaWYoJG5vZGVzLmxlbmd0aCl7XG4gICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsLnpmLnRyaWdnZXInKVxuICAgIC5vbignc2Nyb2xsLnpmLnRyaWdnZXInLCBmdW5jdGlvbihlKXtcbiAgICAgIGlmKHRpbWVyKXsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgfVxuXG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblxuICAgICAgICBpZighTXV0YXRpb25PYnNlcnZlcil7Ly9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHNjcm9sbCBldmVudFxuICAgICAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInNjcm9sbFwiKTtcbiAgICAgIH0sIGRlYm91bmNlIHx8IDEwKTsvL2RlZmF1bHQgdGltZSB0byBlbWl0IHNjcm9sbCBldmVudFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV2ZW50c0xpc3RlbmVyKCkge1xuICBpZighTXV0YXRpb25PYnNlcnZlcil7IHJldHVybiBmYWxzZTsgfVxuICBsZXQgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1yZXNpemVdLCBbZGF0YS1zY3JvbGxdLCBbZGF0YS1tdXRhdGVdJyk7XG5cbiAgLy9lbGVtZW50IGNhbGxiYWNrXG4gIHZhciBsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uID0gZnVuY3Rpb24obXV0YXRpb25SZWNvcmRzTGlzdCkge1xuICAgIHZhciAkdGFyZ2V0ID0gJChtdXRhdGlvblJlY29yZHNMaXN0WzBdLnRhcmdldCk7XG4gICAgLy90cmlnZ2VyIHRoZSBldmVudCBoYW5kbGVyIGZvciB0aGUgZWxlbWVudCBkZXBlbmRpbmcgb24gdHlwZVxuICAgIHN3aXRjaCAoJHRhcmdldC5hdHRyKFwiZGF0YS1ldmVudHNcIikpIHtcblxuICAgICAgY2FzZSBcInJlc2l6ZVwiIDpcbiAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBbJHRhcmdldF0pO1xuICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJzY3JvbGxcIiA6XG4gICAgICAkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdzY3JvbGxtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXQsIHdpbmRvdy5wYWdlWU9mZnNldF0pO1xuICAgICAgYnJlYWs7XG5cbiAgICAgIC8vIGNhc2UgXCJtdXRhdGVcIiA6XG4gICAgICAvLyBjb25zb2xlLmxvZygnbXV0YXRlJywgJHRhcmdldCk7XG4gICAgICAvLyAkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdtdXRhdGUuemYudHJpZ2dlcicpO1xuICAgICAgLy9cbiAgICAgIC8vIC8vbWFrZSBzdXJlIHdlIGRvbid0IGdldCBzdHVjayBpbiBhbiBpbmZpbml0ZSBsb29wIGZyb20gc2xvcHB5IGNvZGVpbmdcbiAgICAgIC8vIGlmICgkdGFyZ2V0LmluZGV4KCdbZGF0YS1tdXRhdGVdJykgPT0gJChcIltkYXRhLW11dGF0ZV1cIikubGVuZ3RoLTEpIHtcbiAgICAgIC8vICAgZG9tTXV0YXRpb25PYnNlcnZlcigpO1xuICAgICAgLy8gfVxuICAgICAgLy8gYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQgOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLy9ub3RoaW5nXG4gICAgfVxuICB9XG5cbiAgaWYobm9kZXMubGVuZ3RoKXtcbiAgICAvL2ZvciBlYWNoIGVsZW1lbnQgdGhhdCBuZWVkcyB0byBsaXN0ZW4gZm9yIHJlc2l6aW5nLCBzY3JvbGxpbmcsIChvciBjb21pbmcgc29vbiBtdXRhdGlvbikgYWRkIGEgc2luZ2xlIG9ic2VydmVyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbm9kZXMubGVuZ3RoLTE7IGkrKykge1xuICAgICAgbGV0IGVsZW1lbnRPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24pO1xuICAgICAgZWxlbWVudE9ic2VydmVyLm9ic2VydmUobm9kZXNbaV0sIHsgYXR0cmlidXRlczogdHJ1ZSwgY2hpbGRMaXN0OiBmYWxzZSwgY2hhcmFjdGVyRGF0YTogZmFsc2UsIHN1YnRyZWU6ZmFsc2UsIGF0dHJpYnV0ZUZpbHRlcjpbXCJkYXRhLWV2ZW50c1wiXX0pO1xuICAgIH1cbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gW1BIXVxuLy8gRm91bmRhdGlvbi5DaGVja1dhdGNoZXJzID0gY2hlY2tXYXRjaGVycztcbkZvdW5kYXRpb24uSUhlYXJZb3UgPSBjaGVja0xpc3RlbmVycztcbi8vIEZvdW5kYXRpb24uSVNlZVlvdSA9IHNjcm9sbExpc3RlbmVyO1xuLy8gRm91bmRhdGlvbi5JRmVlbFlvdSA9IGNsb3NlbWVMaXN0ZW5lcjtcblxufShqUXVlcnkpO1xuXG4vLyBmdW5jdGlvbiBkb21NdXRhdGlvbk9ic2VydmVyKGRlYm91bmNlKSB7XG4vLyAgIC8vICEhISBUaGlzIGlzIGNvbWluZyBzb29uIGFuZCBuZWVkcyBtb3JlIHdvcms7IG5vdCBhY3RpdmUgICEhISAvL1xuLy8gICB2YXIgdGltZXIsXG4vLyAgIG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtbXV0YXRlXScpO1xuLy8gICAvL1xuLy8gICBpZiAobm9kZXMubGVuZ3RoKSB7XG4vLyAgICAgLy8gdmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuLy8gICAgIC8vICAgdmFyIHByZWZpeGVzID0gWydXZWJLaXQnLCAnTW96JywgJ08nLCAnTXMnLCAnJ107XG4vLyAgICAgLy8gICBmb3IgKHZhciBpPTA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuLy8gICAgIC8vICAgICBpZiAocHJlZml4ZXNbaV0gKyAnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4vLyAgICAgLy8gICAgICAgcmV0dXJuIHdpbmRvd1twcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJ107XG4vLyAgICAgLy8gICAgIH1cbi8vICAgICAvLyAgIH1cbi8vICAgICAvLyAgIHJldHVybiBmYWxzZTtcbi8vICAgICAvLyB9KCkpO1xuLy9cbi8vXG4vLyAgICAgLy9mb3IgdGhlIGJvZHksIHdlIG5lZWQgdG8gbGlzdGVuIGZvciBhbGwgY2hhbmdlcyBlZmZlY3RpbmcgdGhlIHN0eWxlIGFuZCBjbGFzcyBhdHRyaWJ1dGVzXG4vLyAgICAgdmFyIGJvZHlPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGJvZHlNdXRhdGlvbik7XG4vLyAgICAgYm9keU9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIGNoYXJhY3RlckRhdGE6IGZhbHNlLCBzdWJ0cmVlOnRydWUsIGF0dHJpYnV0ZUZpbHRlcjpbXCJzdHlsZVwiLCBcImNsYXNzXCJdfSk7XG4vL1xuLy9cbi8vICAgICAvL2JvZHkgY2FsbGJhY2tcbi8vICAgICBmdW5jdGlvbiBib2R5TXV0YXRpb24obXV0YXRlKSB7XG4vLyAgICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgbXV0YXRpb24gZXZlbnRcbi8vICAgICAgIGlmICh0aW1lcikgeyBjbGVhclRpbWVvdXQodGltZXIpOyB9XG4vL1xuLy8gICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICBib2R5T2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuLy8gICAgICAgICAkKCdbZGF0YS1tdXRhdGVdJykuYXR0cignZGF0YS1ldmVudHMnLFwibXV0YXRlXCIpO1xuLy8gICAgICAgfSwgZGVib3VuY2UgfHwgMTUwKTtcbi8vICAgICB9XG4vLyAgIH1cbi8vIH1cbiIsIndpbmRvdy53aGF0SW5wdXQgPSAoZnVuY3Rpb24oKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICAgdmFyaWFibGVzXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICovXG5cbiAgLy8gYXJyYXkgb2YgYWN0aXZlbHkgcHJlc3NlZCBrZXlzXG4gIHZhciBhY3RpdmVLZXlzID0gW107XG5cbiAgLy8gY2FjaGUgZG9jdW1lbnQuYm9keVxuICB2YXIgYm9keTtcblxuICAvLyBib29sZWFuOiB0cnVlIGlmIHRvdWNoIGJ1ZmZlciB0aW1lciBpcyBydW5uaW5nXG4gIHZhciBidWZmZXIgPSBmYWxzZTtcblxuICAvLyB0aGUgbGFzdCB1c2VkIGlucHV0IHR5cGVcbiAgdmFyIGN1cnJlbnRJbnB1dCA9IG51bGw7XG5cbiAgLy8gYGlucHV0YCB0eXBlcyB0aGF0IGRvbid0IGFjY2VwdCB0ZXh0XG4gIHZhciBub25UeXBpbmdJbnB1dHMgPSBbXG4gICAgJ2J1dHRvbicsXG4gICAgJ2NoZWNrYm94JyxcbiAgICAnZmlsZScsXG4gICAgJ2ltYWdlJyxcbiAgICAncmFkaW8nLFxuICAgICdyZXNldCcsXG4gICAgJ3N1Ym1pdCdcbiAgXTtcblxuICAvLyBkZXRlY3QgdmVyc2lvbiBvZiBtb3VzZSB3aGVlbCBldmVudCB0byB1c2VcbiAgLy8gdmlhIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy93aGVlbFxuICB2YXIgbW91c2VXaGVlbCA9IGRldGVjdFdoZWVsKCk7XG5cbiAgLy8gbGlzdCBvZiBtb2RpZmllciBrZXlzIGNvbW1vbmx5IHVzZWQgd2l0aCB0aGUgbW91c2UgYW5kXG4gIC8vIGNhbiBiZSBzYWZlbHkgaWdub3JlZCB0byBwcmV2ZW50IGZhbHNlIGtleWJvYXJkIGRldGVjdGlvblxuICB2YXIgaWdub3JlTWFwID0gW1xuICAgIDE2LCAvLyBzaGlmdFxuICAgIDE3LCAvLyBjb250cm9sXG4gICAgMTgsIC8vIGFsdFxuICAgIDkxLCAvLyBXaW5kb3dzIGtleSAvIGxlZnQgQXBwbGUgY21kXG4gICAgOTMgIC8vIFdpbmRvd3MgbWVudSAvIHJpZ2h0IEFwcGxlIGNtZFxuICBdO1xuXG4gIC8vIG1hcHBpbmcgb2YgZXZlbnRzIHRvIGlucHV0IHR5cGVzXG4gIHZhciBpbnB1dE1hcCA9IHtcbiAgICAna2V5ZG93bic6ICdrZXlib2FyZCcsXG4gICAgJ2tleXVwJzogJ2tleWJvYXJkJyxcbiAgICAnbW91c2Vkb3duJzogJ21vdXNlJyxcbiAgICAnbW91c2Vtb3ZlJzogJ21vdXNlJyxcbiAgICAnTVNQb2ludGVyRG93bic6ICdwb2ludGVyJyxcbiAgICAnTVNQb2ludGVyTW92ZSc6ICdwb2ludGVyJyxcbiAgICAncG9pbnRlcmRvd24nOiAncG9pbnRlcicsXG4gICAgJ3BvaW50ZXJtb3ZlJzogJ3BvaW50ZXInLFxuICAgICd0b3VjaHN0YXJ0JzogJ3RvdWNoJ1xuICB9O1xuXG4gIC8vIGFkZCBjb3JyZWN0IG1vdXNlIHdoZWVsIGV2ZW50IG1hcHBpbmcgdG8gYGlucHV0TWFwYFxuICBpbnB1dE1hcFtkZXRlY3RXaGVlbCgpXSA9ICdtb3VzZSc7XG5cbiAgLy8gYXJyYXkgb2YgYWxsIHVzZWQgaW5wdXQgdHlwZXNcbiAgdmFyIGlucHV0VHlwZXMgPSBbXTtcblxuICAvLyBtYXBwaW5nIG9mIGtleSBjb2RlcyB0byBhIGNvbW1vbiBuYW1lXG4gIHZhciBrZXlNYXAgPSB7XG4gICAgOTogJ3RhYicsXG4gICAgMTM6ICdlbnRlcicsXG4gICAgMTY6ICdzaGlmdCcsXG4gICAgMjc6ICdlc2MnLFxuICAgIDMyOiAnc3BhY2UnLFxuICAgIDM3OiAnbGVmdCcsXG4gICAgMzg6ICd1cCcsXG4gICAgMzk6ICdyaWdodCcsXG4gICAgNDA6ICdkb3duJ1xuICB9O1xuXG4gIC8vIG1hcCBvZiBJRSAxMCBwb2ludGVyIGV2ZW50c1xuICB2YXIgcG9pbnRlck1hcCA9IHtcbiAgICAyOiAndG91Y2gnLFxuICAgIDM6ICd0b3VjaCcsIC8vIHRyZWF0IHBlbiBsaWtlIHRvdWNoXG4gICAgNDogJ21vdXNlJ1xuICB9O1xuXG4gIC8vIHRvdWNoIGJ1ZmZlciB0aW1lclxuICB2YXIgdGltZXI7XG5cblxuICAvKlxuICAgIC0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uc1xuICAgIC0tLS0tLS0tLS0tLS0tLVxuICAqL1xuXG4gIC8vIGFsbG93cyBldmVudHMgdGhhdCBhcmUgYWxzbyB0cmlnZ2VyZWQgdG8gYmUgZmlsdGVyZWQgb3V0IGZvciBgdG91Y2hzdGFydGBcbiAgZnVuY3Rpb24gZXZlbnRCdWZmZXIoKSB7XG4gICAgY2xlYXJUaW1lcigpO1xuICAgIHNldElucHV0KGV2ZW50KTtcblxuICAgIGJ1ZmZlciA9IHRydWU7XG4gICAgdGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGJ1ZmZlciA9IGZhbHNlO1xuICAgIH0sIDY1MCk7XG4gIH1cblxuICBmdW5jdGlvbiBidWZmZXJlZEV2ZW50KGV2ZW50KSB7XG4gICAgaWYgKCFidWZmZXIpIHNldElucHV0KGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuQnVmZmVyZWRFdmVudChldmVudCkge1xuICAgIGNsZWFyVGltZXIoKTtcbiAgICBzZXRJbnB1dChldmVudCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhclRpbWVyKCkge1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW5wdXQoZXZlbnQpIHtcbiAgICB2YXIgZXZlbnRLZXkgPSBrZXkoZXZlbnQpO1xuICAgIHZhciB2YWx1ZSA9IGlucHV0TWFwW2V2ZW50LnR5cGVdO1xuICAgIGlmICh2YWx1ZSA9PT0gJ3BvaW50ZXInKSB2YWx1ZSA9IHBvaW50ZXJUeXBlKGV2ZW50KTtcblxuICAgIC8vIGRvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBtYXRjaGVzIHRoZSBpbnB1dCB0eXBlIGFscmVhZHkgc2V0XG4gICAgaWYgKGN1cnJlbnRJbnB1dCAhPT0gdmFsdWUpIHtcbiAgICAgIHZhciBldmVudFRhcmdldCA9IHRhcmdldChldmVudCk7XG4gICAgICB2YXIgZXZlbnRUYXJnZXROb2RlID0gZXZlbnRUYXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciBldmVudFRhcmdldFR5cGUgPSAoZXZlbnRUYXJnZXROb2RlID09PSAnaW5wdXQnKSA/IGV2ZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgndHlwZScpIDogbnVsbDtcblxuICAgICAgaWYgKFxuICAgICAgICAoLy8gb25seSBpZiB0aGUgdXNlciBmbGFnIHRvIGFsbG93IHR5cGluZyBpbiBmb3JtIGZpZWxkcyBpc24ndCBzZXRcbiAgICAgICAgIWJvZHkuaGFzQXR0cmlidXRlKCdkYXRhLXdoYXRpbnB1dC1mb3JtdHlwaW5nJykgJiZcblxuICAgICAgICAvLyBvbmx5IGlmIGN1cnJlbnRJbnB1dCBoYXMgYSB2YWx1ZVxuICAgICAgICBjdXJyZW50SW5wdXQgJiZcblxuICAgICAgICAvLyBvbmx5IGlmIHRoZSBpbnB1dCBpcyBga2V5Ym9hcmRgXG4gICAgICAgIHZhbHVlID09PSAna2V5Ym9hcmQnICYmXG5cbiAgICAgICAgLy8gbm90IGlmIHRoZSBrZXkgaXMgYFRBQmBcbiAgICAgICAga2V5TWFwW2V2ZW50S2V5XSAhPT0gJ3RhYicgJiZcblxuICAgICAgICAvLyBvbmx5IGlmIHRoZSB0YXJnZXQgaXMgYSBmb3JtIGlucHV0IHRoYXQgYWNjZXB0cyB0ZXh0XG4gICAgICAgIChcbiAgICAgICAgICAgZXZlbnRUYXJnZXROb2RlID09PSAndGV4dGFyZWEnIHx8XG4gICAgICAgICAgIGV2ZW50VGFyZ2V0Tm9kZSA9PT0gJ3NlbGVjdCcgfHxcbiAgICAgICAgICAgKGV2ZW50VGFyZ2V0Tm9kZSA9PT0gJ2lucHV0JyAmJiBub25UeXBpbmdJbnB1dHMuaW5kZXhPZihldmVudFRhcmdldFR5cGUpIDwgMClcbiAgICAgICAgKSkgfHwgKFxuICAgICAgICAgIC8vIGlnbm9yZSBtb2RpZmllciBrZXlzXG4gICAgICAgICAgaWdub3JlTWFwLmluZGV4T2YoZXZlbnRLZXkpID4gLTFcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIC8vIGlnbm9yZSBrZXlib2FyZCB0eXBpbmdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXRjaElucHV0KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPT09ICdrZXlib2FyZCcpIGxvZ0tleXMoZXZlbnRLZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3dpdGNoSW5wdXQoc3RyaW5nKSB7XG4gICAgY3VycmVudElucHV0ID0gc3RyaW5nO1xuICAgIGJvZHkuc2V0QXR0cmlidXRlKCdkYXRhLXdoYXRpbnB1dCcsIGN1cnJlbnRJbnB1dCk7XG5cbiAgICBpZiAoaW5wdXRUeXBlcy5pbmRleE9mKGN1cnJlbnRJbnB1dCkgPT09IC0xKSBpbnB1dFR5cGVzLnB1c2goY3VycmVudElucHV0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGtleShldmVudCkge1xuICAgIHJldHVybiAoZXZlbnQua2V5Q29kZSkgPyBldmVudC5rZXlDb2RlIDogZXZlbnQud2hpY2g7XG4gIH1cblxuICBmdW5jdGlvbiB0YXJnZXQoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBwb2ludGVyVHlwZShldmVudCkge1xuICAgIGlmICh0eXBlb2YgZXZlbnQucG9pbnRlclR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gcG9pbnRlck1hcFtldmVudC5wb2ludGVyVHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoZXZlbnQucG9pbnRlclR5cGUgPT09ICdwZW4nKSA/ICd0b3VjaCcgOiBldmVudC5wb2ludGVyVHlwZTsgLy8gdHJlYXQgcGVuIGxpa2UgdG91Y2hcbiAgICB9XG4gIH1cblxuICAvLyBrZXlib2FyZCBsb2dnaW5nXG4gIGZ1bmN0aW9uIGxvZ0tleXMoZXZlbnRLZXkpIHtcbiAgICBpZiAoYWN0aXZlS2V5cy5pbmRleE9mKGtleU1hcFtldmVudEtleV0pID09PSAtMSAmJiBrZXlNYXBbZXZlbnRLZXldKSBhY3RpdmVLZXlzLnB1c2goa2V5TWFwW2V2ZW50S2V5XSk7XG4gIH1cblxuICBmdW5jdGlvbiB1bkxvZ0tleXMoZXZlbnQpIHtcbiAgICB2YXIgZXZlbnRLZXkgPSBrZXkoZXZlbnQpO1xuICAgIHZhciBhcnJheVBvcyA9IGFjdGl2ZUtleXMuaW5kZXhPZihrZXlNYXBbZXZlbnRLZXldKTtcblxuICAgIGlmIChhcnJheVBvcyAhPT0gLTEpIGFjdGl2ZUtleXMuc3BsaWNlKGFycmF5UG9zLCAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpbmRFdmVudHMoKSB7XG4gICAgYm9keSA9IGRvY3VtZW50LmJvZHk7XG5cbiAgICAvLyBwb2ludGVyIGV2ZW50cyAobW91c2UsIHBlbiwgdG91Y2gpXG4gICAgaWYgKHdpbmRvdy5Qb2ludGVyRXZlbnQpIHtcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBidWZmZXJlZEV2ZW50KTtcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBidWZmZXJlZEV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5NU1BvaW50ZXJFdmVudCkge1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdNU1BvaW50ZXJEb3duJywgYnVmZmVyZWRFdmVudCk7XG4gICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ01TUG9pbnRlck1vdmUnLCBidWZmZXJlZEV2ZW50KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyBtb3VzZSBldmVudHNcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgYnVmZmVyZWRFdmVudCk7XG4gICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGJ1ZmZlcmVkRXZlbnQpO1xuXG4gICAgICAvLyB0b3VjaCBldmVudHNcbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpIHtcbiAgICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZXZlbnRCdWZmZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIG1vdXNlIHdoZWVsXG4gICAgYm9keS5hZGRFdmVudExpc3RlbmVyKG1vdXNlV2hlZWwsIGJ1ZmZlcmVkRXZlbnQpO1xuXG4gICAgLy8ga2V5Ym9hcmQgZXZlbnRzXG4gICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdW5CdWZmZXJlZEV2ZW50KTtcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdW5CdWZmZXJlZEV2ZW50KTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHVuTG9nS2V5cyk7XG4gIH1cblxuXG4gIC8qXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICAgdXRpbGl0aWVzXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICovXG5cbiAgLy8gZGV0ZWN0IHZlcnNpb24gb2YgbW91c2Ugd2hlZWwgZXZlbnQgdG8gdXNlXG4gIC8vIHZpYSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvd2hlZWxcbiAgZnVuY3Rpb24gZGV0ZWN0V2hlZWwoKSB7XG4gICAgcmV0dXJuIG1vdXNlV2hlZWwgPSAnb253aGVlbCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgP1xuICAgICAgJ3doZWVsJyA6IC8vIE1vZGVybiBicm93c2VycyBzdXBwb3J0IFwid2hlZWxcIlxuXG4gICAgICBkb2N1bWVudC5vbm1vdXNld2hlZWwgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgICdtb3VzZXdoZWVsJyA6IC8vIFdlYmtpdCBhbmQgSUUgc3VwcG9ydCBhdCBsZWFzdCBcIm1vdXNld2hlZWxcIlxuICAgICAgICAnRE9NTW91c2VTY3JvbGwnOyAvLyBsZXQncyBhc3N1bWUgdGhhdCByZW1haW5pbmcgYnJvd3NlcnMgYXJlIG9sZGVyIEZpcmVmb3hcbiAgfVxuXG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICBpbml0XG5cbiAgICBkb24ndCBzdGFydCBzY3JpcHQgdW5sZXNzIGJyb3dzZXIgY3V0cyB0aGUgbXVzdGFyZCxcbiAgICBhbHNvIHBhc3NlcyBpZiBwb2x5ZmlsbHMgYXJlIHVzZWRcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICBpZiAoXG4gICAgJ2FkZEV2ZW50TGlzdGVuZXInIGluIHdpbmRvdyAmJlxuICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mXG4gICkge1xuXG4gICAgLy8gaWYgdGhlIGRvbSBpcyBhbHJlYWR5IHJlYWR5IGFscmVhZHkgKHNjcmlwdCB3YXMgcGxhY2VkIGF0IGJvdHRvbSBvZiA8Ym9keT4pXG4gICAgaWYgKGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIGJpbmRFdmVudHMoKTtcblxuICAgIC8vIG90aGVyd2lzZSB3YWl0IGZvciB0aGUgZG9tIHRvIGxvYWQgKHNjcmlwdCB3YXMgcGxhY2VkIGluIHRoZSA8aGVhZD4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBiaW5kRXZlbnRzKTtcbiAgICB9XG4gIH1cblxuXG4gIC8qXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICAgYXBpXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICovXG5cbiAgcmV0dXJuIHtcblxuICAgIC8vIHJldHVybnMgc3RyaW5nOiB0aGUgY3VycmVudCBpbnB1dCB0eXBlXG4gICAgYXNrOiBmdW5jdGlvbigpIHsgcmV0dXJuIGN1cnJlbnRJbnB1dDsgfSxcblxuICAgIC8vIHJldHVybnMgYXJyYXk6IGN1cnJlbnRseSBwcmVzc2VkIGtleXNcbiAgICBrZXlzOiBmdW5jdGlvbigpIHsgcmV0dXJuIGFjdGl2ZUtleXM7IH0sXG5cbiAgICAvLyByZXR1cm5zIGFycmF5OiBhbGwgdGhlIGRldGVjdGVkIGlucHV0IHR5cGVzXG4gICAgdHlwZXM6IGZ1bmN0aW9uKCkgeyByZXR1cm4gaW5wdXRUeXBlczsgfSxcblxuICAgIC8vIGFjY2VwdHMgc3RyaW5nOiBtYW51YWxseSBzZXQgdGhlIGlucHV0IHR5cGVcbiAgICBzZXQ6IHN3aXRjaElucHV0XG4gIH07XG5cbn0oKSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogQWJpZGUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFiaWRlXG4gKi9cblxuY2xhc3MgQWJpZGUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBBYmlkZS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBBYmlkZSNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgQWJpZGUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0FiaWRlJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEFiaWRlIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBBYmlkZSBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kaW5wdXRzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpO1xuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBBYmlkZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy5hYmlkZScpXG4gICAgICAub24oJ3Jlc2V0LnpmLmFiaWRlJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnJlc2V0Rm9ybSgpO1xuICAgICAgfSlcbiAgICAgIC5vbignc3VibWl0LnpmLmFiaWRlJywgKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUZvcm0oKTtcbiAgICAgIH0pO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy52YWxpZGF0ZU9uID09PSAnZmllbGRDaGFuZ2UnKSB7XG4gICAgICB0aGlzLiRpbnB1dHNcbiAgICAgICAgLm9mZignY2hhbmdlLnpmLmFiaWRlJylcbiAgICAgICAgLm9uKCdjaGFuZ2UuemYuYWJpZGUnLCAoZSkgPT4ge1xuICAgICAgICAgIHRoaXMudmFsaWRhdGVJbnB1dCgkKGUudGFyZ2V0KSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMubGl2ZVZhbGlkYXRlKSB7XG4gICAgICB0aGlzLiRpbnB1dHNcbiAgICAgICAgLm9mZignaW5wdXQuemYuYWJpZGUnKVxuICAgICAgICAub24oJ2lucHV0LnpmLmFiaWRlJywgKGUpID0+IHtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXQoJChlLnRhcmdldCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgQWJpZGUgdXBvbiBET00gY2hhbmdlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVmbG93KCkge1xuICAgIHRoaXMuX2luaXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgYSBmb3JtIGVsZW1lbnQgaGFzIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUgYW5kIGlmIGl0J3MgY2hlY2tlZCBvciBub3RcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgKi9cbiAgcmVxdWlyZWRDaGVjaygkZWwpIHtcbiAgICBpZiAoISRlbC5hdHRyKCdyZXF1aXJlZCcpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZhciBpc0dvb2QgPSB0cnVlO1xuXG4gICAgc3dpdGNoICgkZWxbMF0udHlwZSkge1xuICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICBpc0dvb2QgPSAkZWxbMF0uY2hlY2tlZDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBjYXNlICdzZWxlY3Qtb25lJzpcbiAgICAgIGNhc2UgJ3NlbGVjdC1tdWx0aXBsZSc6XG4gICAgICAgIHZhciBvcHQgPSAkZWwuZmluZCgnb3B0aW9uOnNlbGVjdGVkJyk7XG4gICAgICAgIGlmICghb3B0Lmxlbmd0aCB8fCAhb3B0LnZhbCgpKSBpc0dvb2QgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmKCEkZWwudmFsKCkgfHwgISRlbC52YWwoKS5sZW5ndGgpIGlzR29vZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBpc0dvb2Q7XG4gIH1cblxuICAvKipcbiAgICogQmFzZWQgb24gJGVsLCBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgd2l0aCBzZWxlY3RvciBpbiB0aGlzIG9yZGVyOlxuICAgKiAxLiBUaGUgZWxlbWVudCdzIGRpcmVjdCBzaWJsaW5nKCdzKS5cbiAgICogMy4gVGhlIGVsZW1lbnQncyBwYXJlbnQncyBjaGlsZHJlbi5cbiAgICpcbiAgICogVGhpcyBhbGxvd3MgZm9yIG11bHRpcGxlIGZvcm0gZXJyb3JzIHBlciBpbnB1dCwgdGhvdWdoIGlmIG5vbmUgYXJlIGZvdW5kLCBubyBmb3JtIGVycm9ycyB3aWxsIGJlIHNob3duLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IG9iamVjdCB0byB1c2UgYXMgcmVmZXJlbmNlIHRvIGZpbmQgdGhlIGZvcm0gZXJyb3Igc2VsZWN0b3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGpRdWVyeSBvYmplY3Qgd2l0aCB0aGUgc2VsZWN0b3IuXG4gICAqL1xuICBmaW5kRm9ybUVycm9yKCRlbCkge1xuICAgIHZhciAkZXJyb3IgPSAkZWwuc2libGluZ3ModGhpcy5vcHRpb25zLmZvcm1FcnJvclNlbGVjdG9yKTtcblxuICAgIGlmICghJGVycm9yLmxlbmd0aCkge1xuICAgICAgJGVycm9yID0gJGVsLnBhcmVudCgpLmZpbmQodGhpcy5vcHRpb25zLmZvcm1FcnJvclNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJGVycm9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGlzIG9yZGVyOlxuICAgKiAyLiBUaGUgPGxhYmVsPiB3aXRoIHRoZSBhdHRyaWJ1dGUgYFtmb3I9XCJzb21lSW5wdXRJZFwiXWBcbiAgICogMy4gVGhlIGAuY2xvc2VzdCgpYCA8bGFiZWw+XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgKi9cbiAgZmluZExhYmVsKCRlbCkge1xuICAgIHZhciBpZCA9ICRlbFswXS5pZDtcbiAgICB2YXIgJGxhYmVsID0gdGhpcy4kZWxlbWVudC5maW5kKGBsYWJlbFtmb3I9XCIke2lkfVwiXWApO1xuXG4gICAgaWYgKCEkbGFiZWwubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gJGVsLmNsb3Nlc3QoJ2xhYmVsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICRsYWJlbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNldCBvZiBsYWJlbHMgYXNzb2NpYXRlZCB3aXRoIGEgc2V0IG9mIHJhZGlvIGVscyBpbiB0aGlzIG9yZGVyXG4gICAqIDIuIFRoZSA8bGFiZWw+IHdpdGggdGhlIGF0dHJpYnV0ZSBgW2Zvcj1cInNvbWVJbnB1dElkXCJdYFxuICAgKiAzLiBUaGUgYC5jbG9zZXN0KClgIDxsYWJlbD5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gY2hlY2sgZm9yIHJlcXVpcmVkIGF0dHJpYnV0ZVxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhbiB2YWx1ZSBkZXBlbmRzIG9uIHdoZXRoZXIgb3Igbm90IGF0dHJpYnV0ZSBpcyBjaGVja2VkIG9yIGVtcHR5XG4gICAqL1xuICBmaW5kUmFkaW9MYWJlbHMoJGVscykge1xuICAgIHZhciBsYWJlbHMgPSAkZWxzLm1hcCgoaSwgZWwpID0+IHtcbiAgICAgIHZhciBpZCA9IGVsLmlkO1xuICAgICAgdmFyICRsYWJlbCA9IHRoaXMuJGVsZW1lbnQuZmluZChgbGFiZWxbZm9yPVwiJHtpZH1cIl1gKTtcblxuICAgICAgaWYgKCEkbGFiZWwubGVuZ3RoKSB7XG4gICAgICAgICRsYWJlbCA9ICQoZWwpLmNsb3Nlc3QoJ2xhYmVsJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJGxhYmVsWzBdO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuICQobGFiZWxzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBDU1MgZXJyb3IgY2xhc3MgYXMgc3BlY2lmaWVkIGJ5IHRoZSBBYmlkZSBzZXR0aW5ncyB0byB0aGUgbGFiZWwsIGlucHV0LCBhbmQgdGhlIGZvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSBjbGFzcyB0b1xuICAgKi9cbiAgYWRkRXJyb3JDbGFzc2VzKCRlbCkge1xuICAgIHZhciAkbGFiZWwgPSB0aGlzLmZpbmRMYWJlbCgkZWwpO1xuICAgIHZhciAkZm9ybUVycm9yID0gdGhpcy5maW5kRm9ybUVycm9yKCRlbCk7XG5cbiAgICBpZiAoJGxhYmVsLmxlbmd0aCkge1xuICAgICAgJGxhYmVsLmFkZENsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkZm9ybUVycm9yLmxlbmd0aCkge1xuICAgICAgJGZvcm1FcnJvci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5hdHRyKCdkYXRhLWludmFsaWQnLCAnJyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIENTUyBlcnJvciBjbGFzc2VzIGV0YyBmcm9tIGFuIGVudGlyZSByYWRpbyBidXR0b24gZ3JvdXBcbiAgICogQHBhcmFtIHtTdHJpbmd9IGdyb3VwTmFtZSAtIEEgc3RyaW5nIHRoYXQgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIGEgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqXG4gICAqL1xuXG4gIHJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzKGdyb3VwTmFtZSkge1xuICAgIHZhciAkZWxzID0gdGhpcy4kZWxlbWVudC5maW5kKGA6cmFkaW9bbmFtZT1cIiR7Z3JvdXBOYW1lfVwiXWApO1xuICAgIHZhciAkbGFiZWxzID0gdGhpcy5maW5kUmFkaW9MYWJlbHMoJGVscyk7XG4gICAgdmFyICRmb3JtRXJyb3JzID0gdGhpcy5maW5kRm9ybUVycm9yKCRlbHMpO1xuXG4gICAgaWYgKCRsYWJlbHMubGVuZ3RoKSB7XG4gICAgICAkbGFiZWxzLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkZm9ybUVycm9ycy5sZW5ndGgpIHtcbiAgICAgICRmb3JtRXJyb3JzLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVscy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuaW5wdXRFcnJvckNsYXNzKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcblxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgQ1NTIGVycm9yIGNsYXNzIGFzIHNwZWNpZmllZCBieSB0aGUgQWJpZGUgc2V0dGluZ3MgZnJvbSB0aGUgbGFiZWwsIGlucHV0LCBhbmQgdGhlIGZvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gcmVtb3ZlIHRoZSBjbGFzcyBmcm9tXG4gICAqL1xuICByZW1vdmVFcnJvckNsYXNzZXMoJGVsKSB7XG4gICAgLy8gcmFkaW9zIG5lZWQgdG8gY2xlYXIgYWxsIG9mIHRoZSBlbHNcbiAgICBpZigkZWxbMF0udHlwZSA9PSAncmFkaW8nKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW1vdmVSYWRpb0Vycm9yQ2xhc3NlcygkZWwuYXR0cignbmFtZScpKTtcbiAgICB9XG5cbiAgICB2YXIgJGxhYmVsID0gdGhpcy5maW5kTGFiZWwoJGVsKTtcbiAgICB2YXIgJGZvcm1FcnJvciA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWwpO1xuXG4gICAgaWYgKCRsYWJlbC5sZW5ndGgpIHtcbiAgICAgICRsYWJlbC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvci5sZW5ndGgpIHtcbiAgICAgICRmb3JtRXJyb3IucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmZvcm1FcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gIH1cblxuICAvKipcbiAgICogR29lcyB0aHJvdWdoIGEgZm9ybSB0byBmaW5kIGlucHV0cyBhbmQgcHJvY2VlZHMgdG8gdmFsaWRhdGUgdGhlbSBpbiB3YXlzIHNwZWNpZmljIHRvIHRoZWlyIHR5cGVcbiAgICogQGZpcmVzIEFiaWRlI2ludmFsaWRcbiAgICogQGZpcmVzIEFiaWRlI3ZhbGlkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byB2YWxpZGF0ZSwgc2hvdWxkIGJlIGFuIEhUTUwgaW5wdXRcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGdvb2RUb0dvIC0gSWYgdGhlIGlucHV0IGlzIHZhbGlkIG9yIG5vdC5cbiAgICovXG4gIHZhbGlkYXRlSW5wdXQoJGVsKSB7XG4gICAgdmFyIGNsZWFyUmVxdWlyZSA9IHRoaXMucmVxdWlyZWRDaGVjaygkZWwpLFxuICAgICAgICB2YWxpZGF0ZWQgPSBmYWxzZSxcbiAgICAgICAgY3VzdG9tVmFsaWRhdG9yID0gdHJ1ZSxcbiAgICAgICAgdmFsaWRhdG9yID0gJGVsLmF0dHIoJ2RhdGEtdmFsaWRhdG9yJyksXG4gICAgICAgIGVxdWFsVG8gPSB0cnVlO1xuXG4gICAgLy8gZG9uJ3QgdmFsaWRhdGUgaWdub3JlZCBpbnB1dHMgb3IgaGlkZGVuIGlucHV0c1xuICAgIGlmICgkZWwuaXMoJ1tkYXRhLWFiaWRlLWlnbm9yZV0nKSB8fCAkZWwuaXMoJ1t0eXBlPVwiaGlkZGVuXCJdJykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHN3aXRjaCAoJGVsWzBdLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3JhZGlvJzpcbiAgICAgICAgdmFsaWRhdGVkID0gdGhpcy52YWxpZGF0ZVJhZGlvKCRlbC5hdHRyKCduYW1lJykpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICB2YWxpZGF0ZWQgPSBjbGVhclJlcXVpcmU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgY2FzZSAnc2VsZWN0LW9uZSc6XG4gICAgICBjYXNlICdzZWxlY3QtbXVsdGlwbGUnOlxuICAgICAgICB2YWxpZGF0ZWQgPSBjbGVhclJlcXVpcmU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YWxpZGF0ZWQgPSB0aGlzLnZhbGlkYXRlVGV4dCgkZWwpO1xuICAgIH1cblxuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGN1c3RvbVZhbGlkYXRvciA9IHRoaXMubWF0Y2hWYWxpZGF0aW9uKCRlbCwgdmFsaWRhdG9yLCAkZWwuYXR0cigncmVxdWlyZWQnKSk7XG4gICAgfVxuXG4gICAgaWYgKCRlbC5hdHRyKCdkYXRhLWVxdWFsdG8nKSkge1xuICAgICAgZXF1YWxUbyA9IHRoaXMub3B0aW9ucy52YWxpZGF0b3JzLmVxdWFsVG8oJGVsKTtcbiAgICB9XG5cblxuICAgIHZhciBnb29kVG9HbyA9IFtjbGVhclJlcXVpcmUsIHZhbGlkYXRlZCwgY3VzdG9tVmFsaWRhdG9yLCBlcXVhbFRvXS5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG4gICAgdmFyIG1lc3NhZ2UgPSAoZ29vZFRvR28gPyAndmFsaWQnIDogJ2ludmFsaWQnKSArICcuemYuYWJpZGUnO1xuXG4gICAgdGhpc1tnb29kVG9HbyA/ICdyZW1vdmVFcnJvckNsYXNzZXMnIDogJ2FkZEVycm9yQ2xhc3NlcyddKCRlbCk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBpbnB1dCBpcyBkb25lIGNoZWNraW5nIGZvciB2YWxpZGF0aW9uLiBFdmVudCB0cmlnZ2VyIGlzIGVpdGhlciBgdmFsaWQuemYuYWJpZGVgIG9yIGBpbnZhbGlkLnpmLmFiaWRlYFxuICAgICAqIFRyaWdnZXIgaW5jbHVkZXMgdGhlIERPTSBlbGVtZW50IG9mIHRoZSBpbnB1dC5cbiAgICAgKiBAZXZlbnQgQWJpZGUjdmFsaWRcbiAgICAgKiBAZXZlbnQgQWJpZGUjaW52YWxpZFxuICAgICAqL1xuICAgICRlbC50cmlnZ2VyKG1lc3NhZ2UsIFskZWxdKTtcblxuICAgIHJldHVybiBnb29kVG9HbztcbiAgfVxuXG4gIC8qKlxuICAgKiBHb2VzIHRocm91Z2ggYSBmb3JtIGFuZCBpZiB0aGVyZSBhcmUgYW55IGludmFsaWQgaW5wdXRzLCBpdCB3aWxsIGRpc3BsYXkgdGhlIGZvcm0gZXJyb3IgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gbm9FcnJvciAtIHRydWUgaWYgbm8gZXJyb3JzIHdlcmUgZGV0ZWN0ZWQuLi5cbiAgICogQGZpcmVzIEFiaWRlI2Zvcm12YWxpZFxuICAgKiBAZmlyZXMgQWJpZGUjZm9ybWludmFsaWRcbiAgICovXG4gIHZhbGlkYXRlRm9ybSgpIHtcbiAgICB2YXIgYWNjID0gW107XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJGlucHV0cy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgYWNjLnB1c2goX3RoaXMudmFsaWRhdGVJbnB1dCgkKHRoaXMpKSk7XG4gICAgfSk7XG5cbiAgICB2YXIgbm9FcnJvciA9IGFjYy5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG5cbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpLmNzcygnZGlzcGxheScsIChub0Vycm9yID8gJ25vbmUnIDogJ2Jsb2NrJykpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZm9ybSBpcyBmaW5pc2hlZCB2YWxpZGF0aW5nLiBFdmVudCB0cmlnZ2VyIGlzIGVpdGhlciBgZm9ybXZhbGlkLnpmLmFiaWRlYCBvciBgZm9ybWludmFsaWQuemYuYWJpZGVgLlxuICAgICAqIFRyaWdnZXIgaW5jbHVkZXMgdGhlIGVsZW1lbnQgb2YgdGhlIGZvcm0uXG4gICAgICogQGV2ZW50IEFiaWRlI2Zvcm12YWxpZFxuICAgICAqIEBldmVudCBBYmlkZSNmb3JtaW52YWxpZFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigobm9FcnJvciA/ICdmb3JtdmFsaWQnIDogJ2Zvcm1pbnZhbGlkJykgKyAnLnpmLmFiaWRlJywgW3RoaXMuJGVsZW1lbnRdKTtcblxuICAgIHJldHVybiBub0Vycm9yO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBhIG5vdCBhIHRleHQgaW5wdXQgaXMgdmFsaWQgYmFzZWQgb24gdGhlIHBhdHRlcm4gc3BlY2lmaWVkIGluIHRoZSBhdHRyaWJ1dGUuIElmIG5vIG1hdGNoaW5nIHBhdHRlcm4gaXMgZm91bmQsIHJldHVybnMgdHJ1ZS5cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gdmFsaWRhdGUsIHNob3VsZCBiZSBhIHRleHQgaW5wdXQgSFRNTCBlbGVtZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXR0ZXJuIC0gc3RyaW5nIHZhbHVlIG9mIG9uZSBvZiB0aGUgUmVnRXggcGF0dGVybnMgaW4gQWJpZGUub3B0aW9ucy5wYXR0ZXJuc1xuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhbiB2YWx1ZSBkZXBlbmRzIG9uIHdoZXRoZXIgb3Igbm90IHRoZSBpbnB1dCB2YWx1ZSBtYXRjaGVzIHRoZSBwYXR0ZXJuIHNwZWNpZmllZFxuICAgKi9cbiAgdmFsaWRhdGVUZXh0KCRlbCwgcGF0dGVybikge1xuICAgIC8vIEEgcGF0dGVybiBjYW4gYmUgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgYmUgaW5mZXJlZCBmcm9tIHRoZSBpbnB1dCdzIFwicGF0dGVyblwiIGF0dHJpYnV0ZSwgb3IgaXQncyBcInR5cGVcIiBhdHRyaWJ1dGVcbiAgICBwYXR0ZXJuID0gKHBhdHRlcm4gfHwgJGVsLmF0dHIoJ3BhdHRlcm4nKSB8fCAkZWwuYXR0cigndHlwZScpKTtcbiAgICB2YXIgaW5wdXRUZXh0ID0gJGVsLnZhbCgpO1xuICAgIHZhciB2YWxpZCA9IGZhbHNlO1xuXG4gICAgaWYgKGlucHV0VGV4dC5sZW5ndGgpIHtcbiAgICAgIC8vIElmIHRoZSBwYXR0ZXJuIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpcyBpbiBBYmlkZSdzIGxpc3Qgb2YgcGF0dGVybnMsIHRoZW4gdGVzdCB0aGF0IHJlZ2V4cFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5wYXR0ZXJucy5oYXNPd25Qcm9wZXJ0eShwYXR0ZXJuKSkge1xuICAgICAgICB2YWxpZCA9IHRoaXMub3B0aW9ucy5wYXR0ZXJuc1twYXR0ZXJuXS50ZXN0KGlucHV0VGV4dCk7XG4gICAgICB9XG4gICAgICAvLyBJZiB0aGUgcGF0dGVybiBuYW1lIGlzbid0IGFsc28gdGhlIHR5cGUgYXR0cmlidXRlIG9mIHRoZSBmaWVsZCwgdGhlbiB0ZXN0IGl0IGFzIGEgcmVnZXhwXG4gICAgICBlbHNlIGlmIChwYXR0ZXJuICE9PSAkZWwuYXR0cigndHlwZScpKSB7XG4gICAgICAgIHZhbGlkID0gbmV3IFJlZ0V4cChwYXR0ZXJuKS50ZXN0KGlucHV0VGV4dCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBBbiBlbXB0eSBmaWVsZCBpcyB2YWxpZCBpZiBpdCdzIG5vdCByZXF1aXJlZFxuICAgIGVsc2UgaWYgKCEkZWwucHJvcCgncmVxdWlyZWQnKSkge1xuICAgICAgdmFsaWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZDtcbiAgIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIGEgbm90IGEgcmFkaW8gaW5wdXQgaXMgdmFsaWQgYmFzZWQgb24gd2hldGhlciBvciBub3QgaXQgaXMgcmVxdWlyZWQgYW5kIHNlbGVjdGVkLiBBbHRob3VnaCB0aGUgZnVuY3Rpb24gdGFyZ2V0cyBhIHNpbmdsZSBgPGlucHV0PmAsIGl0IHZhbGlkYXRlcyBieSBjaGVja2luZyB0aGUgYHJlcXVpcmVkYCBhbmQgYGNoZWNrZWRgIHByb3BlcnRpZXMgb2YgYWxsIHJhZGlvIGJ1dHRvbnMgaW4gaXRzIGdyb3VwLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZ3JvdXBOYW1lIC0gQSBzdHJpbmcgdGhhdCBzcGVjaWZpZXMgdGhlIG5hbWUgb2YgYSByYWRpbyBidXR0b24gZ3JvdXBcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdCBsZWFzdCBvbmUgcmFkaW8gaW5wdXQgaGFzIGJlZW4gc2VsZWN0ZWQgKGlmIGl0J3MgcmVxdWlyZWQpXG4gICAqL1xuICB2YWxpZGF0ZVJhZGlvKGdyb3VwTmFtZSkge1xuICAgIC8vIElmIGF0IGxlYXN0IG9uZSByYWRpbyBpbiB0aGUgZ3JvdXAgaGFzIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZSwgdGhlIGdyb3VwIGlzIGNvbnNpZGVyZWQgcmVxdWlyZWRcbiAgICAvLyBQZXIgVzNDIHNwZWMsIGFsbCByYWRpbyBidXR0b25zIGluIGEgZ3JvdXAgc2hvdWxkIGhhdmUgYHJlcXVpcmVkYCwgYnV0IHdlJ3JlIGJlaW5nIG5pY2VcbiAgICB2YXIgJGdyb3VwID0gdGhpcy4kZWxlbWVudC5maW5kKGA6cmFkaW9bbmFtZT1cIiR7Z3JvdXBOYW1lfVwiXWApO1xuICAgIHZhciB2YWxpZCA9IGZhbHNlLCByZXF1aXJlZCA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIHRoZSBncm91cCB0byBiZSByZXF1aXJlZCwgYXQgbGVhc3Qgb25lIHJhZGlvIG5lZWRzIHRvIGJlIHJlcXVpcmVkXG4gICAgJGdyb3VwLmVhY2goKGksIGUpID0+IHtcbiAgICAgIGlmICgkKGUpLmF0dHIoJ3JlcXVpcmVkJykpIHtcbiAgICAgICAgcmVxdWlyZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKCFyZXF1aXJlZCkgdmFsaWQ9dHJ1ZTtcblxuICAgIGlmICghdmFsaWQpIHtcbiAgICAgIC8vIEZvciB0aGUgZ3JvdXAgdG8gYmUgdmFsaWQsIGF0IGxlYXN0IG9uZSByYWRpbyBuZWVkcyB0byBiZSBjaGVja2VkXG4gICAgICAkZ3JvdXAuZWFjaCgoaSwgZSkgPT4ge1xuICAgICAgICBpZiAoJChlKS5wcm9wKCdjaGVja2VkJykpIHtcbiAgICAgICAgICB2YWxpZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gdmFsaWQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhIHNlbGVjdGVkIGlucHV0IHBhc3NlcyBhIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9uLiBNdWx0aXBsZSB2YWxpZGF0aW9ucyBjYW4gYmUgdXNlZCwgaWYgcGFzc2VkIHRvIHRoZSBlbGVtZW50IHdpdGggYGRhdGEtdmFsaWRhdG9yPVwiZm9vIGJhciBiYXpcImAgaW4gYSBzcGFjZSBzZXBhcmF0ZWQgbGlzdGVkLlxuICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWxpZGF0b3JzIC0gYSBzdHJpbmcgb2YgZnVuY3Rpb24gbmFtZXMgbWF0Y2hpbmcgZnVuY3Rpb25zIGluIHRoZSBBYmlkZS5vcHRpb25zLnZhbGlkYXRvcnMgb2JqZWN0LlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlcXVpcmVkIC0gc2VsZiBleHBsYW5hdG9yeT9cbiAgICogQHJldHVybnMge0Jvb2xlYW59IC0gdHJ1ZSBpZiB2YWxpZGF0aW9ucyBwYXNzZWQuXG4gICAqL1xuICBtYXRjaFZhbGlkYXRpb24oJGVsLCB2YWxpZGF0b3JzLCByZXF1aXJlZCkge1xuICAgIHJlcXVpcmVkID0gcmVxdWlyZWQgPyB0cnVlIDogZmFsc2U7XG5cbiAgICB2YXIgY2xlYXIgPSB2YWxpZGF0b3JzLnNwbGl0KCcgJykubWFwKCh2KSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnZhbGlkYXRvcnNbdl0oJGVsLCByZXF1aXJlZCwgJGVsLnBhcmVudCgpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gY2xlYXIuaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyBmb3JtIGlucHV0cyBhbmQgc3R5bGVzXG4gICAqIEBmaXJlcyBBYmlkZSNmb3JtcmVzZXRcbiAgICovXG4gIHJlc2V0Rm9ybSgpIHtcbiAgICB2YXIgJGZvcm0gPSB0aGlzLiRlbGVtZW50LFxuICAgICAgICBvcHRzID0gdGhpcy5vcHRpb25zO1xuXG4gICAgJChgLiR7b3B0cy5sYWJlbEVycm9yQ2xhc3N9YCwgJGZvcm0pLm5vdCgnc21hbGwnKS5yZW1vdmVDbGFzcyhvcHRzLmxhYmVsRXJyb3JDbGFzcyk7XG4gICAgJChgLiR7b3B0cy5pbnB1dEVycm9yQ2xhc3N9YCwgJGZvcm0pLm5vdCgnc21hbGwnKS5yZW1vdmVDbGFzcyhvcHRzLmlucHV0RXJyb3JDbGFzcyk7XG4gICAgJChgJHtvcHRzLmZvcm1FcnJvclNlbGVjdG9yfS4ke29wdHMuZm9ybUVycm9yQ2xhc3N9YCkucmVtb3ZlQ2xhc3Mob3B0cy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgJGZvcm0uZmluZCgnW2RhdGEtYWJpZGUtZXJyb3JdJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAkKCc6aW5wdXQnLCAkZm9ybSkubm90KCc6YnV0dG9uLCA6c3VibWl0LCA6cmVzZXQsIDpoaWRkZW4sIDpyYWRpbywgOmNoZWNrYm94LCBbZGF0YS1hYmlkZS1pZ25vcmVdJykudmFsKCcnKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcbiAgICAkKCc6aW5wdXQ6cmFkaW8nLCAkZm9ybSkubm90KCdbZGF0YS1hYmlkZS1pZ25vcmVdJykucHJvcCgnY2hlY2tlZCcsZmFsc2UpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICAgICQoJzppbnB1dDpjaGVja2JveCcsICRmb3JtKS5ub3QoJ1tkYXRhLWFiaWRlLWlnbm9yZV0nKS5wcm9wKCdjaGVja2VkJyxmYWxzZSkucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZm9ybSBoYXMgYmVlbiByZXNldC5cbiAgICAgKiBAZXZlbnQgQWJpZGUjZm9ybXJlc2V0XG4gICAgICovXG4gICAgJGZvcm0udHJpZ2dlcignZm9ybXJlc2V0LnpmLmFiaWRlJywgWyRmb3JtXSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgQWJpZGUuXG4gICAqIFJlbW92ZXMgZXJyb3Igc3R5bGVzIGFuZCBjbGFzc2VzIGZyb20gZWxlbWVudHMsIHdpdGhvdXQgcmVzZXR0aW5nIHRoZWlyIHZhbHVlcy5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub2ZmKCcuYWJpZGUnKVxuICAgICAgLmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpXG4gICAgICAgIC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgdGhpcy4kaW5wdXRzXG4gICAgICAub2ZmKCcuYWJpZGUnKVxuICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLnJlbW92ZUVycm9yQ2xhc3NlcygkKHRoaXMpKTtcbiAgICAgIH0pO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cbkFiaWRlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogVGhlIGRlZmF1bHQgZXZlbnQgdG8gdmFsaWRhdGUgaW5wdXRzLiBDaGVja2JveGVzIGFuZCByYWRpb3MgdmFsaWRhdGUgaW1tZWRpYXRlbHkuXG4gICAqIFJlbW92ZSBvciBjaGFuZ2UgdGhpcyB2YWx1ZSBmb3IgbWFudWFsIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2ZpZWxkQ2hhbmdlJ1xuICAgKi9cbiAgdmFsaWRhdGVPbjogJ2ZpZWxkQ2hhbmdlJyxcblxuICAvKipcbiAgICogQ2xhc3MgdG8gYmUgYXBwbGllZCB0byBpbnB1dCBsYWJlbHMgb24gZmFpbGVkIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2lzLWludmFsaWQtbGFiZWwnXG4gICAqL1xuICBsYWJlbEVycm9yQ2xhc3M6ICdpcy1pbnZhbGlkLWxhYmVsJyxcblxuICAvKipcbiAgICogQ2xhc3MgdG8gYmUgYXBwbGllZCB0byBpbnB1dHMgb24gZmFpbGVkIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2lzLWludmFsaWQtaW5wdXQnXG4gICAqL1xuICBpbnB1dEVycm9yQ2xhc3M6ICdpcy1pbnZhbGlkLWlucHV0JyxcblxuICAvKipcbiAgICogQ2xhc3Mgc2VsZWN0b3IgdG8gdXNlIHRvIHRhcmdldCBGb3JtIEVycm9ycyBmb3Igc2hvdy9oaWRlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICcuZm9ybS1lcnJvcidcbiAgICovXG4gIGZvcm1FcnJvclNlbGVjdG9yOiAnLmZvcm0tZXJyb3InLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhZGRlZCB0byBGb3JtIEVycm9ycyBvbiBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnaXMtdmlzaWJsZSdcbiAgICovXG4gIGZvcm1FcnJvckNsYXNzOiAnaXMtdmlzaWJsZScsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIHRvIHZhbGlkYXRlIHRleHQgaW5wdXRzIG9uIGFueSB2YWx1ZSBjaGFuZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGxpdmVWYWxpZGF0ZTogZmFsc2UsXG5cbiAgcGF0dGVybnM6IHtcbiAgICBhbHBoYSA6IC9eW2EtekEtWl0rJC8sXG4gICAgYWxwaGFfbnVtZXJpYyA6IC9eW2EtekEtWjAtOV0rJC8sXG4gICAgaW50ZWdlciA6IC9eWy0rXT9cXGQrJC8sXG4gICAgbnVtYmVyIDogL15bLStdP1xcZCooPzpbXFwuXFwsXVxcZCspPyQvLFxuXG4gICAgLy8gYW1leCwgdmlzYSwgZGluZXJzXG4gICAgY2FyZCA6IC9eKD86NFswLTldezEyfSg/OlswLTldezN9KT98NVsxLTVdWzAtOV17MTR9fDYoPzowMTF8NVswLTldWzAtOV0pWzAtOV17MTJ9fDNbNDddWzAtOV17MTN9fDMoPzowWzAtNV18WzY4XVswLTldKVswLTldezExfXwoPzoyMTMxfDE4MDB8MzVcXGR7M30pXFxkezExfSkkLyxcbiAgICBjdnYgOiAvXihbMC05XSl7Myw0fSQvLFxuXG4gICAgLy8gaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2Uvc3RhdGVzLW9mLXRoZS10eXBlLWF0dHJpYnV0ZS5odG1sI3ZhbGlkLWUtbWFpbC1hZGRyZXNzXG4gICAgZW1haWwgOiAvXlthLXpBLVowLTkuISMkJSYnKitcXC89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSskLyxcblxuICAgIHVybCA6IC9eKGh0dHBzP3xmdHB8ZmlsZXxzc2gpOlxcL1xcLygoKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6KSpAKT8oKChcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSkpfCgoKFthLXpBLVpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16QS1aXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLj8pKDpcXGQqKT8pKFxcLygoKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkrKFxcLygoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKSopKik/KT8oXFw/KCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxbXFx1RTAwMC1cXHVGOEZGXXxcXC98XFw/KSopPyhcXCMoKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApfFxcL3xcXD8pKik/JC8sXG4gICAgLy8gYWJjLmRlXG4gICAgZG9tYWluIDogL14oW2EtekEtWjAtOV0oW2EtekEtWjAtOVxcLV17MCw2MX1bYS16QS1aMC05XSk/XFwuKStbYS16QS1aXXsyLDh9JC8sXG5cbiAgICBkYXRldGltZSA6IC9eKFswLTJdWzAtOV17M30pXFwtKFswLTFdWzAtOV0pXFwtKFswLTNdWzAtOV0pVChbMC01XVswLTldKVxcOihbMC01XVswLTldKVxcOihbMC01XVswLTldKShafChbXFwtXFwrXShbMC0xXVswLTldKVxcOjAwKSkkLyxcbiAgICAvLyBZWVlZLU1NLUREXG4gICAgZGF0ZSA6IC8oPzoxOXwyMClbMC05XXsyfS0oPzooPzowWzEtOV18MVswLTJdKS0oPzowWzEtOV18MVswLTldfDJbMC05XSl8KD86KD8hMDIpKD86MFsxLTldfDFbMC0yXSktKD86MzApKXwoPzooPzowWzEzNTc4XXwxWzAyXSktMzEpKSQvLFxuICAgIC8vIEhIOk1NOlNTXG4gICAgdGltZSA6IC9eKDBbMC05XXwxWzAtOV18MlswLTNdKSg6WzAtNV1bMC05XSl7Mn0kLyxcbiAgICBkYXRlSVNPIDogL15cXGR7NH1bXFwvXFwtXVxcZHsxLDJ9W1xcL1xcLV1cXGR7MSwyfSQvLFxuICAgIC8vIE1NL0REL1lZWVlcbiAgICBtb250aF9kYXlfeWVhciA6IC9eKDBbMS05XXwxWzAxMl0pWy0gXFwvLl0oMFsxLTldfFsxMl1bMC05XXwzWzAxXSlbLSBcXC8uXVxcZHs0fSQvLFxuICAgIC8vIEREL01NL1lZWVlcbiAgICBkYXlfbW9udGhfeWVhciA6IC9eKDBbMS05XXxbMTJdWzAtOV18M1swMV0pWy0gXFwvLl0oMFsxLTldfDFbMDEyXSlbLSBcXC8uXVxcZHs0fSQvLFxuXG4gICAgLy8gI0ZGRiBvciAjRkZGRkZGXG4gICAgY29sb3IgOiAvXiM/KFthLWZBLUYwLTldezZ9fFthLWZBLUYwLTldezN9KSQvXG4gIH0sXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIHZhbGlkYXRpb24gZnVuY3Rpb25zIHRvIGJlIHVzZWQuIGBlcXVhbFRvYCBiZWluZyB0aGUgb25seSBkZWZhdWx0IGluY2x1ZGVkIGZ1bmN0aW9uLlxuICAgKiBGdW5jdGlvbnMgc2hvdWxkIHJldHVybiBvbmx5IGEgYm9vbGVhbiBpZiB0aGUgaW5wdXQgaXMgdmFsaWQgb3Igbm90LiBGdW5jdGlvbnMgYXJlIGdpdmVuIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICAgKiBlbCA6IFRoZSBqUXVlcnkgZWxlbWVudCB0byB2YWxpZGF0ZS5cbiAgICogcmVxdWlyZWQgOiBCb29sZWFuIHZhbHVlIG9mIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUgYmUgcHJlc2VudCBvciBub3QuXG4gICAqIHBhcmVudCA6IFRoZSBkaXJlY3QgcGFyZW50IG9mIHRoZSBpbnB1dC5cbiAgICogQG9wdGlvblxuICAgKi9cbiAgdmFsaWRhdG9yczoge1xuICAgIGVxdWFsVG86IGZ1bmN0aW9uIChlbCwgcmVxdWlyZWQsIHBhcmVudCkge1xuICAgICAgcmV0dXJuICQoYCMke2VsLmF0dHIoJ2RhdGEtZXF1YWx0bycpfWApLnZhbCgpID09PSBlbC52YWwoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEFiaWRlLCAnQWJpZGUnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFjY29yZGlvbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uYWNjb3JkaW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICovXG5cbmNsYXNzIEFjY29yZGlvbiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGFuIGFjY29yZGlvbi5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBBY2NvcmRpb24jaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBhIHBsYWluIG9iamVjdCB3aXRoIHNldHRpbmdzIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFjY29yZGlvbi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnQWNjb3JkaW9uJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignQWNjb3JkaW9uJywge1xuICAgICAgJ0VOVEVSJzogJ3RvZ2dsZScsXG4gICAgICAnU1BBQ0UnOiAndG9nZ2xlJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3ByZXZpb3VzJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBhY2NvcmRpb24gYnkgYW5pbWF0aW5nIHRoZSBwcmVzZXQgYWN0aXZlIHBhbmUocykuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ3JvbGUnLCAndGFibGlzdCcpO1xuICAgIHRoaXMuJHRhYnMgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCdsaSwgW2RhdGEtYWNjb3JkaW9uLWl0ZW1dJyk7XG5cbiAgICB0aGlzLiR0YWJzLmVhY2goZnVuY3Rpb24oaWR4LCBlbCkge1xuICAgICAgdmFyICRlbCA9ICQoZWwpLFxuICAgICAgICAgICRjb250ZW50ID0gJGVsLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKSxcbiAgICAgICAgICBpZCA9ICRjb250ZW50WzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjY29yZGlvbicpLFxuICAgICAgICAgIGxpbmtJZCA9IGVsLmlkIHx8IGAke2lkfS1sYWJlbGA7XG5cbiAgICAgICRlbC5maW5kKCdhOmZpcnN0JykuYXR0cih7XG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogaWQsXG4gICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICdpZCc6IGxpbmtJZCxcbiAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSxcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgICRjb250ZW50LmF0dHIoeydyb2xlJzogJ3RhYnBhbmVsJywgJ2FyaWEtbGFiZWxsZWRieSc6IGxpbmtJZCwgJ2FyaWEtaGlkZGVuJzogdHJ1ZSwgJ2lkJzogaWR9KTtcbiAgICB9KTtcbiAgICB2YXIgJGluaXRBY3RpdmUgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY3RpdmUnKS5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyk7XG4gICAgaWYoJGluaXRBY3RpdmUubGVuZ3RoKXtcbiAgICAgIHRoaXMuZG93bigkaW5pdEFjdGl2ZSwgdHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgYWNjb3JkaW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICRlbGVtID0gJCh0aGlzKTtcbiAgICAgIHZhciAkdGFiQ29udGVudCA9ICRlbGVtLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgIGlmICgkdGFiQ29udGVudC5sZW5ndGgpIHtcbiAgICAgICAgJGVsZW0uY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbiBrZXlkb3duLnpmLmFjY29yZGlvbicpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnpmLmFjY29yZGlvbicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMudG9nZ2xlKCR0YWJDb250ZW50KTtcbiAgICAgICAgfSkub24oJ2tleWRvd24uemYuYWNjb3JkaW9uJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ0FjY29yZGlvbicsIHtcbiAgICAgICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIF90aGlzLnRvZ2dsZSgkdGFiQ29udGVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciAkYSA9ICRlbGVtLm5leHQoKS5maW5kKCdhJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgJGEudHJpZ2dlcignY2xpY2suemYuYWNjb3JkaW9uJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyICRhID0gJGVsZW0ucHJldigpLmZpbmQoJ2EnKS5mb2N1cygpO1xuICAgICAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQpIHtcbiAgICAgICAgICAgICAgICAkYS50cmlnZ2VyKCdjbGljay56Zi5hY2NvcmRpb24nKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgc2VsZWN0ZWQgY29udGVudCBwYW5lJ3Mgb3Blbi9jbG9zZSBzdGF0ZS5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBqUXVlcnkgb2JqZWN0IG9mIHRoZSBwYW5lIHRvIHRvZ2dsZSAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgkdGFyZ2V0KSB7XG4gICAgaWYoJHRhcmdldC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgIHRoaXMudXAoJHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG93bigkdGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIGFjY29yZGlvbiB0YWIgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQWNjb3JkaW9uIHBhbmUgdG8gb3BlbiAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGZpcnN0VGltZSAtIGZsYWcgdG8gZGV0ZXJtaW5lIGlmIHJlZmxvdyBzaG91bGQgaGFwcGVuLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uI2Rvd25cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkb3duKCR0YXJnZXQsIGZpcnN0VGltZSkge1xuICAgICR0YXJnZXRcbiAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKVxuICAgICAgLnBhcmVudCgnW2RhdGEtdGFiLWNvbnRlbnRdJylcbiAgICAgIC5hZGRCYWNrKClcbiAgICAgIC5wYXJlbnQoKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tdWx0aUV4cGFuZCAmJiAhZmlyc3RUaW1lKSB7XG4gICAgICB2YXIgJGN1cnJlbnRBY3RpdmUgPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuaXMtYWN0aXZlJykuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgICAgaWYgKCRjdXJyZW50QWN0aXZlLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnVwKCRjdXJyZW50QWN0aXZlLm5vdCgkdGFyZ2V0KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHRhcmdldC5zbGlkZURvd24odGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsICgpID0+IHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgdGFiIGlzIGRvbmUgb3BlbmluZy5cbiAgICAgICAqIEBldmVudCBBY2NvcmRpb24jZG93blxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Rvd24uemYuYWNjb3JkaW9uJywgWyR0YXJnZXRdKTtcbiAgICB9KTtcblxuICAgICQoYCMkeyR0YXJnZXQuYXR0cignYXJpYS1sYWJlbGxlZGJ5Jyl9YCkuYXR0cih7XG4gICAgICAnYXJpYS1leHBhbmRlZCc6IHRydWUsXG4gICAgICAnYXJpYS1zZWxlY3RlZCc6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHRhYiBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBBY2NvcmRpb24gdGFiIHRvIGNsb3NlIChgLmFjY29yZGlvbi1jb250ZW50YCkuXG4gICAqIEBmaXJlcyBBY2NvcmRpb24jdXBcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB1cCgkdGFyZ2V0KSB7XG4gICAgdmFyICRhdW50cyA9ICR0YXJnZXQucGFyZW50KCkuc2libGluZ3MoKSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYoKCF0aGlzLm9wdGlvbnMuYWxsb3dBbGxDbG9zZWQgJiYgISRhdW50cy5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHx8ICEkdGFyZ2V0LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEZvdW5kYXRpb24uTW92ZSh0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgJHRhcmdldCwgZnVuY3Rpb24oKXtcbiAgICAgICR0YXJnZXQuc2xpZGVVcChfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHRhYiBpcyBkb25lIGNvbGxhcHNpbmcgdXAuXG4gICAgICAgICAqIEBldmVudCBBY2NvcmRpb24jdXBcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwLnpmLmFjY29yZGlvbicsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcbiAgICAvLyB9KTtcblxuICAgICR0YXJnZXQuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKVxuICAgICAgICAgICAucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgJChgIyR7JHRhcmdldC5hdHRyKCdhcmlhLWxhYmVsbGVkYnknKX1gKS5hdHRyKHtcbiAgICAgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSxcbiAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBmYWxzZVxuICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uI2Rlc3Ryb3llZFxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS10YWItY29udGVudF0nKS5zdG9wKHRydWUpLnNsaWRlVXAoMCkuY3NzKCdkaXNwbGF5JywgJycpO1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnYScpLm9mZignLnpmLmFjY29yZGlvbicpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbkFjY29yZGlvbi5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGFuaW1hdGUgdGhlIG9wZW5pbmcgb2YgYW4gYWNjb3JkaW9uIHBhbmUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjUwXG4gICAqL1xuICBzbGlkZVNwZWVkOiAyNTAsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgYWNjb3JkaW9uIHRvIGhhdmUgbXVsdGlwbGUgb3BlbiBwYW5lcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgbXVsdGlFeHBhbmQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIGFjY29yZGlvbiB0byBjbG9zZSBhbGwgcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGFsbG93QWxsQ2xvc2VkOiBmYWxzZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEFjY29yZGlvbiwgJ0FjY29yZGlvbicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogQWNjb3JkaW9uTWVudSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uYWNjb3JkaW9uTWVudVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubmVzdFxuICovXG5cbmNsYXNzIEFjY29yZGlvbk1lbnUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24gbWVudS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24gbWVudS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBY2NvcmRpb25NZW51LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICBGb3VuZGF0aW9uLk5lc3QuRmVhdGhlcih0aGlzLiRlbGVtZW50LCAnYWNjb3JkaW9uJyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdBY2NvcmRpb25NZW51Jyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignQWNjb3JkaW9uTWVudScsIHtcbiAgICAgICdFTlRFUic6ICd0b2dnbGUnLFxuICAgICAgJ1NQQUNFJzogJ3RvZ2dsZScsXG4gICAgICAnQVJST1dfUklHSFQnOiAnb3BlbicsXG4gICAgICAnQVJST1dfVVAnOiAndXAnLFxuICAgICAgJ0FSUk9XX0RPV04nOiAnZG93bicsXG4gICAgICAnQVJST1dfTEVGVCc6ICdjbG9zZScsXG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlQWxsJ1xuICAgIH0pO1xuICB9XG5cblxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIG1lbnUgYnkgaGlkaW5nIGFsbCBuZXN0ZWQgbWVudXMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykubm90KCcuaXMtYWN0aXZlJykuc2xpZGVVcCgwKTsvLy5maW5kKCdhJykuY3NzKCdwYWRkaW5nLWxlZnQnLCAnMXJlbScpO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAncm9sZSc6ICdtZW51JyxcbiAgICAgICdhcmlhLW11bHRpc2VsZWN0YWJsZSc6IHRoaXMub3B0aW9ucy5tdWx0aU9wZW5cbiAgICB9KTtcblxuICAgIHRoaXMuJG1lbnVMaW5rcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpO1xuICAgIHRoaXMuJG1lbnVMaW5rcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgbGlua0lkID0gdGhpcy5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdhY2MtbWVudS1saW5rJyksXG4gICAgICAgICAgJGVsZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICRzdWIgPSAkZWxlbS5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKSxcbiAgICAgICAgICBzdWJJZCA9ICRzdWJbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnYWNjLW1lbnUnKSxcbiAgICAgICAgICBpc0FjdGl2ZSA9ICRzdWIuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgJGVsZW0uYXR0cih7XG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogc3ViSWQsXG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogaXNBY3RpdmUsXG4gICAgICAgICdyb2xlJzogJ21lbnVpdGVtJyxcbiAgICAgICAgJ2lkJzogbGlua0lkXG4gICAgICB9KTtcbiAgICAgICRzdWIuYXR0cih7XG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWQsXG4gICAgICAgICdhcmlhLWhpZGRlbic6ICFpc0FjdGl2ZSxcbiAgICAgICAgJ3JvbGUnOiAnbWVudScsXG4gICAgICAgICdpZCc6IHN1YklkXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB2YXIgaW5pdFBhbmVzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJyk7XG4gICAgaWYoaW5pdFBhbmVzLmxlbmd0aCl7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgaW5pdFBhbmVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgX3RoaXMuZG93bigkKHRoaXMpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIG1lbnUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkc3VibWVudSA9ICQodGhpcykuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyk7XG5cbiAgICAgIGlmICgkc3VibWVudS5sZW5ndGgpIHtcbiAgICAgICAgJCh0aGlzKS5jaGlsZHJlbignYScpLm9mZignY2xpY2suemYuYWNjb3JkaW9uTWVudScpLm9uKCdjbGljay56Zi5hY2NvcmRpb25NZW51JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIF90aGlzLnRvZ2dsZSgkc3VibWVudSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pLm9uKCdrZXlkb3duLnpmLmFjY29yZGlvbm1lbnUnLCBmdW5jdGlvbihlKXtcbiAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyksXG4gICAgICAgICAgJGVsZW1lbnRzID0gJGVsZW1lbnQucGFyZW50KCd1bCcpLmNoaWxkcmVuKCdsaScpLFxuICAgICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgICAkbmV4dEVsZW1lbnQsXG4gICAgICAgICAgJHRhcmdldCA9ICRlbGVtZW50LmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuXG4gICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1heCgwLCBpLTEpKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSsxLCAkZWxlbWVudHMubGVuZ3RoLTEpKS5maW5kKCdhJykuZmlyc3QoKTtcblxuICAgICAgICAgIGlmICgkKHRoaXMpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XTp2aXNpYmxlJykubGVuZ3RoKSB7IC8vIGhhcyBvcGVuIHN1YiBtZW51XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudC5maW5kKCdsaTpmaXJzdC1jaGlsZCcpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJCh0aGlzKS5pcygnOmZpcnN0LWNoaWxkJykpIHsgLy8gaXMgZmlyc3QgZWxlbWVudCBvZiBzdWIgbWVudVxuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnQucGFyZW50cygnbGknKS5maXJzdCgpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJHByZXZFbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkgeyAvLyBpZiBwcmV2aW91cyBlbGVtZW50IGhhcyBvcGVuIHN1YiBtZW51XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkcHJldkVsZW1lbnQucGFyZW50cygnbGknKS5maW5kKCdsaTpsYXN0LWNoaWxkJykuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6bGFzdC1jaGlsZCcpKSB7IC8vIGlzIGxhc3QgZWxlbWVudCBvZiBzdWIgbWVudVxuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnQucGFyZW50cygnbGknKS5maXJzdCgpLm5leHQoJ2xpJykuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ0FjY29yZGlvbk1lbnUnLCB7XG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkdGFyZ2V0LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgICAgIF90aGlzLmRvd24oJHRhcmdldCk7XG4gICAgICAgICAgICAkdGFyZ2V0LmZpbmQoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkdGFyZ2V0Lmxlbmd0aCAmJiAhJHRhcmdldC5pcygnOmhpZGRlbicpKSB7IC8vIGNsb3NlIGFjdGl2ZSBzdWIgb2YgdGhpcyBpdGVtXG4gICAgICAgICAgICBfdGhpcy51cCgkdGFyZ2V0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRlbGVtZW50LnBhcmVudCgnW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpIHsgLy8gY2xvc2UgY3VycmVudGx5IG9wZW4gc3ViXG4gICAgICAgICAgICBfdGhpcy51cCgkZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50cygnbGknKS5maXJzdCgpLmZpbmQoJ2EnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHByZXZFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRuZXh0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIF90aGlzLnRvZ2dsZSgkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjbG9zZUFsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuaGlkZUFsbCgpO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbihwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTsvLy5hdHRyKCd0YWJpbmRleCcsIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyBhbGwgcGFuZXMgb2YgdGhlIG1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgaGlkZUFsbCgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVVcCh0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCk7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgb3Blbi9jbG9zZSBzdGF0ZSBvZiBhIHN1Ym1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIHRoZSBzdWJtZW51IHRvIHRvZ2dsZVxuICAgKi9cbiAgdG9nZ2xlKCR0YXJnZXQpe1xuICAgIGlmKCEkdGFyZ2V0LmlzKCc6YW5pbWF0ZWQnKSkge1xuICAgICAgaWYgKCEkdGFyZ2V0LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgICAgdGhpcy51cCgkdGFyZ2V0KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmRvd24oJHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBzdWItbWVudSBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBTdWItbWVudSB0byBvcGVuLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSNkb3duXG4gICAqL1xuICBkb3duKCR0YXJnZXQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYoIXRoaXMub3B0aW9ucy5tdWx0aU9wZW4pIHtcbiAgICAgIHRoaXMudXAodGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJykubm90KCR0YXJnZXQucGFyZW50c1VudGlsKHRoaXMuJGVsZW1lbnQpLmFkZCgkdGFyZ2V0KSkpO1xuICAgIH1cblxuICAgICR0YXJnZXQuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLmF0dHIoeydhcmlhLWhpZGRlbic6IGZhbHNlfSlcbiAgICAgIC5wYXJlbnQoJy5pcy1hY2NvcmRpb24tc3VibWVudS1wYXJlbnQnKS5hdHRyKHsnYXJpYS1leHBhbmRlZCc6IHRydWV9KTtcblxuICAgICAgLy9Gb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsICR0YXJnZXQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAkdGFyZ2V0LnNsaWRlRG93bihfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtZW51IGlzIGRvbmUgb3BlbmluZy5cbiAgICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uTWVudSNkb3duXG4gICAgICAgICAgICovXG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignZG93bi56Zi5hY2NvcmRpb25NZW51JywgWyR0YXJnZXRdKTtcbiAgICAgICAgfSk7XG4gICAgICAvL30pO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgc3ViLW1lbnUgZGVmaW5lZCBieSBgJHRhcmdldGAuIEFsbCBzdWItbWVudXMgaW5zaWRlIHRoZSB0YXJnZXQgd2lsbCBiZSBjbG9zZWQgYXMgd2VsbC5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBTdWItbWVudSB0byBjbG9zZS5cbiAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjdXBcbiAgICovXG4gIHVwKCR0YXJnZXQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8vRm91bmRhdGlvbi5Nb3ZlKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAkdGFyZ2V0LCBmdW5jdGlvbigpe1xuICAgICAgJHRhcmdldC5zbGlkZVVwKF90aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBkb25lIGNvbGxhcHNpbmcgdXAuXG4gICAgICAgICAqIEBldmVudCBBY2NvcmRpb25NZW51I3VwXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cC56Zi5hY2NvcmRpb25NZW51JywgWyR0YXJnZXRdKTtcbiAgICAgIH0pO1xuICAgIC8vfSk7XG5cbiAgICB2YXIgJG1lbnVzID0gJHRhcmdldC5maW5kKCdbZGF0YS1zdWJtZW51XScpLnNsaWRlVXAoMCkuYWRkQmFjaygpLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAkbWVudXMucGFyZW50KCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50JykuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBhY2NvcmRpb24gbWVudS5cbiAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjZGVzdHJveWVkXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc3VibWVudV0nKS5zbGlkZURvd24oMCkuY3NzKCdkaXNwbGF5JywgJycpO1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnYScpLm9mZignY2xpY2suemYuYWNjb3JkaW9uTWVudScpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkJ1cm4odGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5BY2NvcmRpb25NZW51LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gYW5pbWF0ZSB0aGUgb3BlbmluZyBvZiBhIHN1Ym1lbnUgaW4gbXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjUwXG4gICAqL1xuICBzbGlkZVNwZWVkOiAyNTAsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgbWVudSB0byBoYXZlIG11bHRpcGxlIG9wZW4gcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgbXVsdGlPcGVuOiB0cnVlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oQWNjb3JkaW9uTWVudSwgJ0FjY29yZGlvbk1lbnUnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIERyaWxsZG93biBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uZHJpbGxkb3duXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gKi9cblxuY2xhc3MgRHJpbGxkb3duIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBkcmlsbGRvd24gbWVudS5cbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgRHJpbGxkb3duLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICBGb3VuZGF0aW9uLk5lc3QuRmVhdGhlcih0aGlzLiRlbGVtZW50LCAnZHJpbGxkb3duJyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdEcmlsbGRvd24nKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdEcmlsbGRvd24nLCB7XG4gICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAnQVJST1dfVVAnOiAndXAnLFxuICAgICAgJ0FSUk9XX0RPV04nOiAnZG93bicsXG4gICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cycsXG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJyxcbiAgICAgICdUQUInOiAnZG93bicsXG4gICAgICAnU0hJRlRfVEFCJzogJ3VwJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBkcmlsbGRvd24gYnkgY3JlYXRpbmcgalF1ZXJ5IGNvbGxlY3Rpb25zIG9mIGVsZW1lbnRzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLiRzdWJtZW51QW5jaG9ycyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnbGkuaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50JykuY2hpbGRyZW4oJ2EnKTtcbiAgICB0aGlzLiRzdWJtZW51cyA9IHRoaXMuJHN1Ym1lbnVBbmNob3JzLnBhcmVudCgnbGknKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKTtcbiAgICB0aGlzLiRtZW51SXRlbXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpJykubm90KCcuanMtZHJpbGxkb3duLWJhY2snKS5hdHRyKCdyb2xlJywgJ21lbnVpdGVtJykuZmluZCgnYScpO1xuXG4gICAgdGhpcy5fcHJlcGFyZU1lbnUoKTtcblxuICAgIHRoaXMuX2tleWJvYXJkRXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogcHJlcGFyZXMgZHJpbGxkb3duIG1lbnUgYnkgc2V0dGluZyBhdHRyaWJ1dGVzIHRvIGxpbmtzIGFuZCBlbGVtZW50c1xuICAgKiBzZXRzIGEgbWluIGhlaWdodCB0byBwcmV2ZW50IGNvbnRlbnQganVtcGluZ1xuICAgKiB3cmFwcyB0aGUgZWxlbWVudCBpZiBub3QgYWxyZWFkeSB3cmFwcGVkXG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX3ByZXBhcmVNZW51KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgLy8gaWYoIXRoaXMub3B0aW9ucy5ob2xkT3Blbil7XG4gICAgLy8gICB0aGlzLl9tZW51TGlua0V2ZW50cygpO1xuICAgIC8vIH1cbiAgICB0aGlzLiRzdWJtZW51QW5jaG9ycy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJGxpbmsgPSAkKHRoaXMpO1xuICAgICAgdmFyICRzdWIgPSAkbGluay5wYXJlbnQoKTtcbiAgICAgIGlmKF90aGlzLm9wdGlvbnMucGFyZW50TGluayl7XG4gICAgICAgICRsaW5rLmNsb25lKCkucHJlcGVuZFRvKCRzdWIuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykpLndyYXAoJzxsaSBjbGFzcz1cImlzLXN1Ym1lbnUtcGFyZW50LWl0ZW0gaXMtc3VibWVudS1pdGVtIGlzLWRyaWxsZG93bi1zdWJtZW51LWl0ZW1cIiByb2xlPVwibWVudS1pdGVtXCI+PC9saT4nKTtcbiAgICAgIH1cbiAgICAgICRsaW5rLmRhdGEoJ3NhdmVkSHJlZicsICRsaW5rLmF0dHIoJ2hyZWYnKSkucmVtb3ZlQXR0cignaHJlZicpLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgICAkbGluay5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAwLFxuICAgICAgICAgICAgJ3JvbGUnOiAnbWVudSdcbiAgICAgICAgICB9KTtcbiAgICAgIF90aGlzLl9ldmVudHMoJGxpbmspO1xuICAgIH0pO1xuICAgIHRoaXMuJHN1Ym1lbnVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIHZhciAkbWVudSA9ICQodGhpcyksXG4gICAgICAgICAgJGJhY2sgPSAkbWVudS5maW5kKCcuanMtZHJpbGxkb3duLWJhY2snKTtcbiAgICAgIGlmKCEkYmFjay5sZW5ndGgpe1xuICAgICAgICAkbWVudS5wcmVwZW5kKF90aGlzLm9wdGlvbnMuYmFja0J1dHRvbik7XG4gICAgICB9XG4gICAgICBfdGhpcy5fYmFjaygkbWVudSk7XG4gICAgfSk7XG4gICAgaWYoIXRoaXMuJGVsZW1lbnQucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWRyaWxsZG93bicpKXtcbiAgICAgIHRoaXMuJHdyYXBwZXIgPSAkKHRoaXMub3B0aW9ucy53cmFwcGVyKS5hZGRDbGFzcygnaXMtZHJpbGxkb3duJyk7XG4gICAgICB0aGlzLiR3cmFwcGVyID0gdGhpcy4kZWxlbWVudC53cmFwKHRoaXMuJHdyYXBwZXIpLnBhcmVudCgpLmNzcyh0aGlzLl9nZXRNYXhEaW1zKCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIGVsZW1lbnRzIGluIHRoZSBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgbWVudSBpdGVtIHRvIGFkZCBoYW5kbGVycyB0by5cbiAgICovXG4gIF9ldmVudHMoJGVsZW0pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJGVsZW0ub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKVxuICAgIC5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICBpZigkKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgJ2xpJykuaGFzQ2xhc3MoJ2lzLWRyaWxsZG93bi1zdWJtZW51LXBhcmVudCcpKXtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBpZihlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0LmZpcnN0RWxlbWVudENoaWxkKXtcbiAgICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gfVxuICAgICAgX3RoaXMuX3Nob3coJGVsZW0ucGFyZW50KCdsaScpKTtcblxuICAgICAgaWYoX3RoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spe1xuICAgICAgICB2YXIgJGJvZHkgPSAkKCdib2R5Jyk7XG4gICAgICAgICRib2R5Lm9mZignLnpmLmRyaWxsZG93bicpLm9uKCdjbGljay56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8ICQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSkgeyByZXR1cm47IH1cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuX2hpZGVBbGwoKTtcbiAgICAgICAgICAkYm9keS5vZmYoJy56Zi5kcmlsbGRvd24nKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBrZXlkb3duIGV2ZW50IGxpc3RlbmVyIHRvIGBsaWAncyBpbiB0aGUgbWVudS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9rZXlib2FyZEV2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kbWVudUl0ZW1zLmFkZCh0aGlzLiRlbGVtZW50LmZpbmQoJy5qcy1kcmlsbGRvd24tYmFjayA+IGEnKSkub24oJ2tleWRvd24uemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG5cbiAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyksXG4gICAgICAgICAgJGVsZW1lbnRzID0gJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKS5jaGlsZHJlbignYScpLFxuICAgICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgICAkbmV4dEVsZW1lbnQ7XG5cbiAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgaWYgKCQodGhpcykuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWF4KDAsIGktMSkpO1xuICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1pbihpKzEsICRlbGVtZW50cy5sZW5ndGgtMSkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdEcmlsbGRvd24nLCB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkZWxlbWVudC5pcyhfdGhpcy4kc3VibWVudUFuY2hvcnMpKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2hvdygkZWxlbWVudC5wYXJlbnQoJ2xpJykpO1xuICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW1lbnQpLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykuZmluZCgndWwgbGkgYScpLmZpbHRlcihfdGhpcy4kbWVudUl0ZW1zKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykpO1xuICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkZWxlbWVudCksIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKS5jaGlsZHJlbignYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICB1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHByZXZFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRuZXh0RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuX2JhY2soKTtcbiAgICAgICAgICAvL190aGlzLiRtZW51SXRlbXMuZmlyc3QoKS5mb2N1cygpOyAvLyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghJGVsZW1lbnQuaXMoX3RoaXMuJG1lbnVJdGVtcykpIHsgLy8gbm90IG1lbnUgaXRlbSBtZWFucyBiYWNrIGJ1dHRvblxuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKSk7XG4gICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW1lbnQpLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykucGFyZW50KCdsaScpLmNoaWxkcmVuKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7ICAgICAgICAgICAgXG4gICAgICAgICAgfSBlbHNlIGlmICgkZWxlbWVudC5pcyhfdGhpcy4kc3VibWVudUFuY2hvcnMpKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2hvdygkZWxlbWVudC5wYXJlbnQoJ2xpJykpO1xuICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW1lbnQpLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykuZmluZCgndWwgbGkgYScpLmZpbHRlcihfdGhpcy4kbWVudUl0ZW1zKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24ocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7IC8vIGVuZCBrZXlib2FyZEFjY2Vzc1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlcyBhbGwgb3BlbiBlbGVtZW50cywgYW5kIHJldHVybnMgdG8gcm9vdCBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyaWxsZG93biNjbG9zZWRcbiAgICovXG4gIF9oaWRlQWxsKCkge1xuICAgIHZhciAkZWxlbSA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWRyaWxsZG93bi1zdWJtZW51LmlzLWFjdGl2ZScpLmFkZENsYXNzKCdpcy1jbG9zaW5nJyk7XG4gICAgJGVsZW0ub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkZWxlbSksIGZ1bmN0aW9uKGUpe1xuICAgICAgJGVsZW0ucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZSBpcy1jbG9zaW5nJyk7XG4gICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtZW51IGlzIGZ1bGx5IGNsb3NlZC5cbiAgICAgICAgICogQGV2ZW50IERyaWxsZG93biNjbG9zZWRcbiAgICAgICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZWQuemYuZHJpbGxkb3duJyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lciBmb3IgZWFjaCBgYmFja2AgYnV0dG9uLCBhbmQgY2xvc2VzIG9wZW4gbWVudXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJpbGxkb3duI2JhY2tcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgc3ViLW1lbnUgdG8gYWRkIGBiYWNrYCBldmVudC5cbiAgICovXG4gIF9iYWNrKCRlbGVtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAkZWxlbS5vZmYoJ2NsaWNrLnpmLmRyaWxsZG93bicpO1xuICAgICRlbGVtLmNoaWxkcmVuKCcuanMtZHJpbGxkb3duLWJhY2snKVxuICAgICAgLm9uKCdjbGljay56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ21vdXNldXAgb24gYmFjaycpO1xuICAgICAgICBfdGhpcy5faGlkZSgkZWxlbSk7XG5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBwYXJlbnQgc3VibWVudSwgY2FsbCBzaG93XG4gICAgICAgIGxldCBwYXJlbnRTdWJNZW51ID0gJGVsZW0ucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJyk7XG4gICAgICAgIGlmIChwYXJlbnRTdWJNZW51Lmxlbmd0aCkgeyBcbiAgICAgICAgICBfdGhpcy5fc2hvdyhwYXJlbnRTdWJNZW51KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lciB0byBtZW51IGl0ZW1zIHcvbyBzdWJtZW51cyB0byBjbG9zZSBvcGVuIG1lbnVzIG9uIGNsaWNrLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tZW51TGlua0V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuJG1lbnVJdGVtcy5ub3QoJy5pcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnQnKVxuICAgICAgICAub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKVxuICAgICAgICAub24oJ2NsaWNrLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIC8vIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgX3RoaXMuX2hpZGVBbGwoKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIGEgc3VibWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcmlsbGRvd24jb3BlblxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSB0aGUgY3VycmVudCBlbGVtZW50IHdpdGggYSBzdWJtZW51IHRvIG9wZW4sIGkuZS4gdGhlIGBsaWAgdGFnLlxuICAgKi9cbiAgX3Nob3coJGVsZW0pIHtcbiAgICAkZWxlbS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgZmFsc2UpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHN1Ym1lbnUgaGFzIG9wZW5lZC5cbiAgICAgKiBAZXZlbnQgRHJpbGxkb3duI29wZW5cbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29wZW4uemYuZHJpbGxkb3duJywgWyRlbGVtXSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhpZGVzIGEgc3VibWVudVxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyaWxsZG93biNoaWRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IHN1Yi1tZW51IHRvIGhpZGUsIGkuZS4gdGhlIGB1bGAgdGFnLlxuICAgKi9cbiAgX2hpZGUoJGVsZW0pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICRlbGVtLnBhcmVudCgnbGknKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICRlbGVtLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSkuYWRkQ2xhc3MoJ2lzLWNsb3NpbmcnKVxuICAgICAgICAgLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW0pLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAkZWxlbS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWNsb3NpbmcnKTtcbiAgICAgICAgICAgJGVsZW0uYmx1cigpO1xuICAgICAgICAgfSk7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgc3VibWVudSBoYXMgY2xvc2VkLlxuICAgICAqIEBldmVudCBEcmlsbGRvd24jaGlkZVxuICAgICAqL1xuICAgICRlbGVtLnRyaWdnZXIoJ2hpZGUuemYuZHJpbGxkb3duJywgWyRlbGVtXSk7XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZXMgdGhyb3VnaCB0aGUgbmVzdGVkIG1lbnVzIHRvIGNhbGN1bGF0ZSB0aGUgbWluLWhlaWdodCwgYW5kIG1heC13aWR0aCBmb3IgdGhlIG1lbnUuXG4gICAqIFByZXZlbnRzIGNvbnRlbnQganVtcGluZy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0TWF4RGltcygpIHtcbiAgICB2YXIgYmlnZ2VzdCA9IDBcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICB0aGlzLiRzdWJtZW51cy5hZGQodGhpcy4kZWxlbWVudCkuZWFjaCgoaSwgZWxlbSkgPT4ge1xuICAgICAgdmFyIGhlaWdodCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgaWYgKGhlaWdodCA+IGJpZ2dlc3QpIGJpZ2dlc3QgPSBoZWlnaHQ7XG4gICAgfSk7XG5cbiAgICByZXN1bHRbJ21pbi1oZWlnaHQnXSA9IGAke2JpZ2dlc3R9cHhgO1xuICAgIHJlc3VsdFsnbWF4LXdpZHRoJ10gPSBgJHt0aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRofXB4YDtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIERyaWxsZG93biBNZW51XG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9oaWRlQWxsKCk7XG4gICAgRm91bmRhdGlvbi5OZXN0LkJ1cm4odGhpcy4kZWxlbWVudCwgJ2RyaWxsZG93bicpO1xuICAgIHRoaXMuJGVsZW1lbnQudW53cmFwKClcbiAgICAgICAgICAgICAgICAgLmZpbmQoJy5qcy1kcmlsbGRvd24tYmFjaywgLmlzLXN1Ym1lbnUtcGFyZW50LWl0ZW0nKS5yZW1vdmUoKVxuICAgICAgICAgICAgICAgICAuZW5kKCkuZmluZCgnLmlzLWFjdGl2ZSwgLmlzLWNsb3NpbmcsIC5pcy1kcmlsbGRvd24tc3VibWVudScpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZyBpcy1kcmlsbGRvd24tc3VibWVudScpXG4gICAgICAgICAgICAgICAgIC5lbmQoKS5maW5kKCdbZGF0YS1zdWJtZW51XScpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4IHJvbGUnKTtcbiAgICB0aGlzLiRzdWJtZW51QW5jaG9ycy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS5vZmYoJy56Zi5kcmlsbGRvd24nKTtcbiAgICB9KTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJGxpbmsgPSAkKHRoaXMpO1xuICAgICAgJGxpbmsucmVtb3ZlQXR0cigndGFiaW5kZXgnKTtcbiAgICAgIGlmKCRsaW5rLmRhdGEoJ3NhdmVkSHJlZicpKXtcbiAgICAgICAgJGxpbmsuYXR0cignaHJlZicsICRsaW5rLmRhdGEoJ3NhdmVkSHJlZicpKS5yZW1vdmVEYXRhKCdzYXZlZEhyZWYnKTtcbiAgICAgIH1lbHNleyByZXR1cm47IH1cbiAgICB9KTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH07XG59XG5cbkRyaWxsZG93bi5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIE1hcmt1cCB1c2VkIGZvciBKUyBnZW5lcmF0ZWQgYmFjayBidXR0b24uIFByZXBlbmRlZCB0byBzdWJtZW51IGxpc3RzIGFuZCBkZWxldGVkIG9uIGBkZXN0cm95YCBtZXRob2QsICdqcy1kcmlsbGRvd24tYmFjaycgY2xhc3MgcmVxdWlyZWQuIFJlbW92ZSB0aGUgYmFja3NsYXNoIChgXFxgKSBpZiBjb3B5IGFuZCBwYXN0aW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICc8XFxsaT48XFxhPkJhY2s8XFwvYT48XFwvbGk+J1xuICAgKi9cbiAgYmFja0J1dHRvbjogJzxsaSBjbGFzcz1cImpzLWRyaWxsZG93bi1iYWNrXCI+PGEgdGFiaW5kZXg9XCIwXCI+QmFjazwvYT48L2xpPicsXG4gIC8qKlxuICAgKiBNYXJrdXAgdXNlZCB0byB3cmFwIGRyaWxsZG93biBtZW51LiBVc2UgYSBjbGFzcyBuYW1lIGZvciBpbmRlcGVuZGVudCBzdHlsaW5nOyB0aGUgSlMgYXBwbGllZCBjbGFzczogYGlzLWRyaWxsZG93bmAgaXMgcmVxdWlyZWQuIFJlbW92ZSB0aGUgYmFja3NsYXNoIChgXFxgKSBpZiBjb3B5IGFuZCBwYXN0aW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICc8XFxkaXYgY2xhc3M9XCJpcy1kcmlsbGRvd25cIj48XFwvZGl2PidcbiAgICovXG4gIHdyYXBwZXI6ICc8ZGl2PjwvZGl2PicsXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBwYXJlbnQgbGluayB0byB0aGUgc3VibWVudS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgcGFyZW50TGluazogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgbWVudSB0byByZXR1cm4gdG8gcm9vdCBsaXN0IG9uIGJvZHkgY2xpY2suXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGNsb3NlT25DbGljazogZmFsc2VcbiAgLy8gaG9sZE9wZW46IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRHJpbGxkb3duLCAnRHJpbGxkb3duJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBEcm9wZG93biBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uZHJvcGRvd25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKi9cblxuY2xhc3MgRHJvcGRvd24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGRyb3Bkb3duLlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhIGRyb3Bkb3duLlxuICAgKiAgICAgICAgT2JqZWN0IHNob3VsZCBiZSBvZiB0aGUgZHJvcGRvd24gcGFuZWwsIHJhdGhlciB0aGFuIGl0cyBhbmNob3IuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgRHJvcGRvd24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdEcm9wZG93bicpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0Ryb3Bkb3duJywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZScsXG4gICAgICAnVEFCJzogJ3RhYl9mb3J3YXJkJyxcbiAgICAgICdTSElGVF9UQUInOiAndGFiX2JhY2t3YXJkJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4gYnkgc2V0dGluZy9jaGVja2luZyBvcHRpb25zIGFuZCBhdHRyaWJ1dGVzLCBhZGRpbmcgaGVscGVyIHZhcmlhYmxlcywgYW5kIHNhdmluZyB0aGUgYW5jaG9yLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciAkaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICB0aGlzLiRhbmNob3IgPSAkKGBbZGF0YS10b2dnbGU9XCIkeyRpZH1cIl1gKS5sZW5ndGggPyAkKGBbZGF0YS10b2dnbGU9XCIkeyRpZH1cIl1gKSA6ICQoYFtkYXRhLW9wZW49XCIkeyRpZH1cIl1gKTtcbiAgICB0aGlzLiRhbmNob3IuYXR0cih7XG4gICAgICAnYXJpYS1jb250cm9scyc6ICRpZCxcbiAgICAgICdkYXRhLWlzLWZvY3VzJzogZmFsc2UsXG4gICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2VcblxuICAgIH0pO1xuXG4gICAgdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgPSB0aGlzLmdldFBvc2l0aW9uQ2xhc3MoKTtcbiAgICB0aGlzLmNvdW50ZXIgPSA0O1xuICAgIHRoaXMudXNlZFBvc2l0aW9ucyA9IFtdO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICdkYXRhLXJlc2l6ZSc6ICRpZCxcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiB0aGlzLiRhbmNob3JbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnZGQtYW5jaG9yJylcbiAgICB9KTtcbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGN1cnJlbnQgb3JpZW50YXRpb24gb2YgZHJvcGRvd24gcGFuZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHBvc2l0aW9uIC0gc3RyaW5nIHZhbHVlIG9mIGEgcG9zaXRpb24gY2xhc3MuXG4gICAqL1xuICBnZXRQb3NpdGlvbkNsYXNzKCkge1xuICAgIHZhciB2ZXJ0aWNhbFBvc2l0aW9uID0gdGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goLyh0b3B8bGVmdHxyaWdodHxib3R0b20pL2cpO1xuICAgICAgICB2ZXJ0aWNhbFBvc2l0aW9uID0gdmVydGljYWxQb3NpdGlvbiA/IHZlcnRpY2FsUG9zaXRpb25bMF0gOiAnJztcbiAgICB2YXIgaG9yaXpvbnRhbFBvc2l0aW9uID0gL2Zsb2F0LShcXFMrKS8uZXhlYyh0aGlzLiRhbmNob3JbMF0uY2xhc3NOYW1lKTtcbiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uID0gaG9yaXpvbnRhbFBvc2l0aW9uID8gaG9yaXpvbnRhbFBvc2l0aW9uWzFdIDogJyc7XG4gICAgdmFyIHBvc2l0aW9uID0gaG9yaXpvbnRhbFBvc2l0aW9uID8gaG9yaXpvbnRhbFBvc2l0aW9uICsgJyAnICsgdmVydGljYWxQb3NpdGlvbiA6IHZlcnRpY2FsUG9zaXRpb247XG5cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cblxuICAvKipcbiAgICogQWRqdXN0cyB0aGUgZHJvcGRvd24gcGFuZXMgb3JpZW50YXRpb24gYnkgYWRkaW5nL3JlbW92aW5nIHBvc2l0aW9uaW5nIGNsYXNzZXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gcG9zaXRpb24gLSBwb3NpdGlvbiBjbGFzcyB0byByZW1vdmUuXG4gICAqL1xuICBfcmVwb3NpdGlvbihwb3NpdGlvbikge1xuICAgIHRoaXMudXNlZFBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uID8gcG9zaXRpb24gOiAnYm90dG9tJyk7XG4gICAgLy9kZWZhdWx0LCB0cnkgc3dpdGNoaW5nIHRvIG9wcG9zaXRlIHNpZGVcbiAgICBpZighcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ3RvcCcpO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAndG9wJyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2JvdHRvbScpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygncmlnaHQnKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfVxuXG4gICAgLy9pZiBkZWZhdWx0IGNoYW5nZSBkaWRuJ3Qgd29yaywgdHJ5IGJvdHRvbSBvciBsZWZ0IGZpcnN0XG4gICAgZWxzZSBpZighcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2xlZnQnKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAncmlnaHQnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignbGVmdCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgLy9pZiBub3RoaW5nIGNsZWFyZWQsIHNldCB0byBib3R0b21cbiAgICBlbHNle1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIHRoaXMuY2xhc3NDaGFuZ2VkID0gdHJ1ZTtcbiAgICB0aGlzLmNvdW50ZXItLTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBhbmQgb3JpZW50YXRpb24gb2YgdGhlIGRyb3Bkb3duIHBhbmUsIGNoZWNrcyBmb3IgY29sbGlzaW9ucy5cbiAgICogUmVjdXJzaXZlbHkgY2FsbHMgaXRzZWxmIGlmIGEgY29sbGlzaW9uIGlzIGRldGVjdGVkLCB3aXRoIGEgbmV3IHBvc2l0aW9uIGNsYXNzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRQb3NpdGlvbigpIHtcbiAgICBpZih0aGlzLiRhbmNob3IuYXR0cignYXJpYS1leHBhbmRlZCcpID09PSAnZmFsc2UnKXsgcmV0dXJuIGZhbHNlOyB9XG4gICAgdmFyIHBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbkNsYXNzKCksXG4gICAgICAgICRlbGVEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRlbGVtZW50KSxcbiAgICAgICAgJGFuY2hvckRpbXMgPSBGb3VuZGF0aW9uLkJveC5HZXREaW1lbnNpb25zKHRoaXMuJGFuY2hvciksXG4gICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgZGlyZWN0aW9uID0gKHBvc2l0aW9uID09PSAnbGVmdCcgPyAnbGVmdCcgOiAoKHBvc2l0aW9uID09PSAncmlnaHQnKSA/ICdsZWZ0JyA6ICd0b3AnKSksXG4gICAgICAgIHBhcmFtID0gKGRpcmVjdGlvbiA9PT0gJ3RvcCcpID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBvZmZzZXQgPSAocGFyYW0gPT09ICdoZWlnaHQnKSA/IHRoaXMub3B0aW9ucy52T2Zmc2V0IDogdGhpcy5vcHRpb25zLmhPZmZzZXQ7XG5cblxuXG4gICAgaWYoKCRlbGVEaW1zLndpZHRoID49ICRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGgpIHx8ICghdGhpcy5jb3VudGVyICYmICFGb3VuZGF0aW9uLkJveC5JbU5vdFRvdWNoaW5nWW91KHRoaXMuJGVsZW1lbnQpKSl7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJGFuY2hvciwgJ2NlbnRlciBib3R0b20nLCB0aGlzLm9wdGlvbnMudk9mZnNldCwgdGhpcy5vcHRpb25zLmhPZmZzZXQsIHRydWUpKS5jc3Moe1xuICAgICAgICAnd2lkdGgnOiAkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC0gKHRoaXMub3B0aW9ucy5oT2Zmc2V0ICogMiksXG4gICAgICAgICdoZWlnaHQnOiAnYXV0bydcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jbGFzc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub2Zmc2V0KEZvdW5kYXRpb24uQm94LkdldE9mZnNldHModGhpcy4kZWxlbWVudCwgdGhpcy4kYW5jaG9yLCBwb3NpdGlvbiwgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0KSk7XG5cbiAgICB3aGlsZSghRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLiRlbGVtZW50LCBmYWxzZSwgdHJ1ZSkgJiYgdGhpcy5jb3VudGVyKXtcbiAgICAgIHRoaXMuX3JlcG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgdGhpcy5fc2V0UG9zaXRpb24oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGVsZW1lbnQgdXRpbGl6aW5nIHRoZSB0cmlnZ2VycyB1dGlsaXR5IGxpYnJhcnkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgJ2Nsb3NlLnpmLnRyaWdnZXInOiB0aGlzLmNsb3NlLmJpbmQodGhpcyksXG4gICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLl9zZXRQb3NpdGlvbi5iaW5kKHRoaXMpXG4gICAgfSk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuaG92ZXIpe1xuICAgICAgdGhpcy4kYW5jaG9yLm9mZignbW91c2VlbnRlci56Zi5kcm9wZG93biBtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJylcbiAgICAgIC5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZigkKCdib2R5W2RhdGEtd2hhdGlucHV0PVwibW91c2VcIl0nKS5pcygnKicpKSB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicsIHRydWUpO1xuICAgICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZGF0YSgnaG92ZXInLCBmYWxzZSk7XG4gICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgICAgIH0pO1xuICAgICAgaWYodGhpcy5vcHRpb25zLmhvdmVyUGFuZSl7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3duIG1vdXNlbGVhdmUuemYuZHJvcGRvd24nKVxuICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYuZHJvcGRvd24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmRhdGEoJ2hvdmVyJywgZmFsc2UpO1xuICAgICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuJGFuY2hvci5hZGQodGhpcy4kZWxlbWVudCkub24oJ2tleWRvd24uemYuZHJvcGRvd24nLCBmdW5jdGlvbihlKSB7XG5cbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKSxcbiAgICAgICAgdmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzID0gRm91bmRhdGlvbi5LZXlib2FyZC5maW5kRm9jdXNhYmxlKF90aGlzLiRlbGVtZW50KTtcblxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ0Ryb3Bkb3duJywge1xuICAgICAgICB0YWJfZm9yd2FyZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmZpbmQoJzpmb2N1cycpLmlzKHZpc2libGVGb2N1c2FibGVFbGVtZW50cy5lcSgtMSkpKSB7IC8vIGxlZnQgbW9kYWwgZG93bndhcmRzLCBzZXR0aW5nIGZvY3VzIHRvIGZpcnN0IGVsZW1lbnRcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnRyYXBGb2N1cykgeyAvLyBpZiBmb2N1cyBzaGFsbCBiZSB0cmFwcGVkXG4gICAgICAgICAgICAgIHZpc2libGVGb2N1c2FibGVFbGVtZW50cy5lcSgwKS5mb2N1cygpO1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiBmb2N1cyBpcyBub3QgdHJhcHBlZCwgY2xvc2UgZHJvcGRvd24gb24gZm9jdXMgb3V0XG4gICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0YWJfYmFja3dhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyh2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoMCkpIHx8IF90aGlzLiRlbGVtZW50LmlzKCc6Zm9jdXMnKSkgeyAvLyBsZWZ0IG1vZGFsIHVwd2FyZHMsIHNldHRpbmcgZm9jdXMgdG8gbGFzdCBlbGVtZW50XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy50cmFwRm9jdXMpIHsgLy8gaWYgZm9jdXMgc2hhbGwgYmUgdHJhcHBlZFxuICAgICAgICAgICAgICB2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIGZvY3VzIGlzIG5vdCB0cmFwcGVkLCBjbG9zZSBkcm9wZG93biBvbiBmb2N1cyBvdXRcbiAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkdGFyZ2V0LmlzKF90aGlzLiRhbmNob3IpKSB7XG4gICAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIC0xKS5mb2N1cygpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgX3RoaXMuJGFuY2hvci5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICAgdmFyICRib2R5ID0gJChkb2N1bWVudC5ib2R5KS5ub3QodGhpcy4kZWxlbWVudCksXG4gICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICRib2R5Lm9mZignY2xpY2suemYuZHJvcGRvd24nKVxuICAgICAgICAgIC5vbignY2xpY2suemYuZHJvcGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGlmKF90aGlzLiRhbmNob3IuaXMoZS50YXJnZXQpIHx8IF90aGlzLiRhbmNob3IuZmluZChlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKF90aGlzLiRlbGVtZW50LmZpbmQoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgJGJvZHkub2ZmKCdjbGljay56Zi5kcm9wZG93bicpO1xuICAgICAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBkcm9wZG93biBwYW5lLCBhbmQgZmlyZXMgYSBidWJibGluZyBldmVudCB0byBjbG9zZSBvdGhlciBkcm9wZG93bnMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJvcGRvd24jY2xvc2VtZVxuICAgKiBAZmlyZXMgRHJvcGRvd24jc2hvd1xuICAgKi9cbiAgb3BlbigpIHtcbiAgICAvLyB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHRvIGNsb3NlIG90aGVyIG9wZW4gZHJvcGRvd25zXG4gICAgICogQGV2ZW50IERyb3Bkb3duI2Nsb3NlbWVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYuZHJvcGRvd24nLCB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgIHRoaXMuJGFuY2hvci5hZGRDbGFzcygnaG92ZXInKVxuICAgICAgICAuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG4gICAgLy8gdGhpcy4kZWxlbWVudC8qLnNob3coKSovO1xuICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnaXMtb3BlbicpXG4gICAgICAgIC5hdHRyKHsnYXJpYS1oaWRkZW4nOiBmYWxzZX0pO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmF1dG9Gb2N1cyl7XG4gICAgICB2YXIgJGZvY3VzYWJsZSA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcbiAgICAgIGlmKCRmb2N1c2FibGUubGVuZ3RoKXtcbiAgICAgICAgJGZvY3VzYWJsZS5lcSgwKS5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2speyB0aGlzLl9hZGRCb2R5SGFuZGxlcigpOyB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyBvbmNlIHRoZSBkcm9wZG93biBpcyB2aXNpYmxlLlxuICAgICAqIEBldmVudCBEcm9wZG93biNzaG93XG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzaG93LnpmLmRyb3Bkb3duJywgW3RoaXMuJGVsZW1lbnRdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG9wZW4gZHJvcGRvd24gcGFuZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcm9wZG93biNoaWRlXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZighdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpXG4gICAgICAgIC5hdHRyKHsnYXJpYS1oaWRkZW4nOiB0cnVlfSk7XG5cbiAgICB0aGlzLiRhbmNob3IucmVtb3ZlQ2xhc3MoJ2hvdmVyJylcbiAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG5cbiAgICBpZih0aGlzLmNsYXNzQ2hhbmdlZCl7XG4gICAgICB2YXIgY3VyUG9zaXRpb25DbGFzcyA9IHRoaXMuZ2V0UG9zaXRpb25DbGFzcygpO1xuICAgICAgaWYoY3VyUG9zaXRpb25DbGFzcyl7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoY3VyUG9zaXRpb25DbGFzcyk7XG4gICAgICB9XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzKVxuICAgICAgICAgIC8qLmhpZGUoKSovLmNzcyh7aGVpZ2h0OiAnJywgd2lkdGg6ICcnfSk7XG4gICAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5jb3VudGVyID0gNDtcbiAgICAgIHRoaXMudXNlZFBvc2l0aW9ucy5sZW5ndGggPSAwO1xuICAgIH1cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYuZHJvcGRvd24nLCBbdGhpcy4kZWxlbWVudF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIGRyb3Bkb3duIHBhbmUncyB2aXNpYmlsaXR5LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZih0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpe1xuICAgICAgaWYodGhpcy4kYW5jaG9yLmRhdGEoJ2hvdmVyJykpIHJldHVybjtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgZHJvcGRvd24uXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXInKS5oaWRlKCk7XG4gICAgdGhpcy4kYW5jaG9yLm9mZignLnpmLmRyb3Bkb3duJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuRHJvcGRvd24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBkZWxheSBvcGVuaW5nIGEgc3VibWVudSBvbiBob3ZlciBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAyNTBcbiAgICovXG4gIGhvdmVyRGVsYXk6IDI1MCxcbiAgLyoqXG4gICAqIEFsbG93IHN1Ym1lbnVzIHRvIG9wZW4gb24gaG92ZXIgZXZlbnRzXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIERvbid0IGNsb3NlIGRyb3Bkb3duIHdoZW4gaG92ZXJpbmcgb3ZlciBkcm9wZG93biBwYW5lXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgaG92ZXJQYW5lOiBmYWxzZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgYmV0d2VlbiB0aGUgZHJvcGRvd24gcGFuZSBhbmQgdGhlIHRyaWdnZXJpbmcgZWxlbWVudCBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDFcbiAgICovXG4gIHZPZmZzZXQ6IDEsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIGJldHdlZW4gdGhlIGRyb3Bkb3duIHBhbmUgYW5kIHRoZSB0cmlnZ2VyaW5nIGVsZW1lbnQgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxXG4gICAqL1xuICBoT2Zmc2V0OiAxLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBhZGp1c3Qgb3BlbiBwb3NpdGlvbi4gSlMgd2lsbCB0ZXN0IGFuZCBmaWxsIHRoaXMgaW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3RvcCdcbiAgICovXG4gIHBvc2l0aW9uQ2xhc3M6ICcnLFxuICAvKipcbiAgICogQWxsb3cgdGhlIHBsdWdpbiB0byB0cmFwIGZvY3VzIHRvIHRoZSBkcm9wZG93biBwYW5lIGlmIG9wZW5lZCB3aXRoIGtleWJvYXJkIGNvbW1hbmRzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICB0cmFwRm9jdXM6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIHBsdWdpbiB0byBzZXQgZm9jdXMgdG8gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IHdpdGhpbiB0aGUgcGFuZSwgcmVnYXJkbGVzcyBvZiBtZXRob2Qgb2Ygb3BlbmluZy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIGEgY2xpY2sgb24gdGhlIGJvZHkgdG8gY2xvc2UgdGhlIGRyb3Bkb3duLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IGZhbHNlXG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihEcm9wZG93biwgJ0Ryb3Bkb3duJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBEcm9wZG93bk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyb3Bkb3duLW1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG5jbGFzcyBEcm9wZG93bk1lbnUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBEcm9wZG93bk1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgRHJvcGRvd25NZW51I2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhIGRyb3Bkb3duIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgRHJvcGRvd25NZW51LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICBGb3VuZGF0aW9uLk5lc3QuRmVhdGhlcih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdEcm9wZG93bk1lbnUnKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdEcm9wZG93bk1lbnUnLCB7XG4gICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAnQVJST1dfVVAnOiAndXAnLFxuICAgICAgJ0FSUk9XX0RPV04nOiAnZG93bicsXG4gICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cycsXG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4sIGFuZCBjYWxscyBfcHJlcGFyZU1lbnVcbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgc3VicyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKTtcbiAgICB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKS5hZGRDbGFzcygnZmlyc3Qtc3ViJyk7XG5cbiAgICB0aGlzLiRtZW51SXRlbXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tyb2xlPVwibWVudWl0ZW1cIl0nKTtcbiAgICB0aGlzLiR0YWJzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignW3JvbGU9XCJtZW51aXRlbVwiXScpO1xuICAgIHRoaXMuJHRhYnMuZmluZCgndWwuaXMtZHJvcGRvd24tc3VibWVudScpLmFkZENsYXNzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbENsYXNzKTtcblxuICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMub3B0aW9ucy5yaWdodENsYXNzKSB8fCB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAncmlnaHQnIHx8IEZvdW5kYXRpb24ucnRsKCkgfHwgdGhpcy4kZWxlbWVudC5wYXJlbnRzKCcudG9wLWJhci1yaWdodCcpLmlzKCcqJykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPSAncmlnaHQnO1xuICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtbGVmdCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJzLmFkZENsYXNzKCdvcGVucy1yaWdodCcpO1xuICAgIH1cbiAgICB0aGlzLmNoYW5nZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfTtcblxuICBfaXNWZXJ0aWNhbCgpIHtcbiAgICByZXR1cm4gdGhpcy4kdGFicy5jc3MoJ2Rpc3BsYXknKSA9PT0gJ2Jsb2NrJztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byBlbGVtZW50cyB3aXRoaW4gdGhlIG1lbnVcbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGhhc1RvdWNoID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8ICh0eXBlb2Ygd2luZG93Lm9udG91Y2hzdGFydCAhPT0gJ3VuZGVmaW5lZCcpLFxuICAgICAgICBwYXJDbGFzcyA9ICdpcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCc7XG5cbiAgICAvLyB1c2VkIGZvciBvbkNsaWNrIGFuZCBpbiB0aGUga2V5Ym9hcmQgaGFuZGxlcnNcbiAgICB2YXIgaGFuZGxlQ2xpY2tGbiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkZWxlbSA9ICQoZS50YXJnZXQpLnBhcmVudHNVbnRpbCgndWwnLCBgLiR7cGFyQ2xhc3N9YCksXG4gICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpLFxuICAgICAgICAgIGhhc0NsaWNrZWQgPSAkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyxcbiAgICAgICAgICAkc3ViID0gJGVsZW0uY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51Jyk7XG5cbiAgICAgIGlmIChoYXNTdWIpIHtcbiAgICAgICAgaWYgKGhhc0NsaWNrZWQpIHtcbiAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrIHx8ICghX3RoaXMub3B0aW9ucy5jbGlja09wZW4gJiYgIWhhc1RvdWNoKSB8fCAoX3RoaXMub3B0aW9ucy5mb3JjZUZvbGxvdyAmJiBoYXNUb3VjaCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBfdGhpcy5fc2hvdygkc3ViKTtcbiAgICAgICAgICAkZWxlbS5hZGQoJGVsZW0ucGFyZW50c1VudGlsKF90aGlzLiRlbGVtZW50LCBgLiR7cGFyQ2xhc3N9YCkpLmF0dHIoJ2RhdGEtaXMtY2xpY2snLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYoX3RoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2tJbnNpZGUpe1xuICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tPcGVuIHx8IGhhc1RvdWNoKSB7XG4gICAgICB0aGlzLiRtZW51SXRlbXMub24oJ2NsaWNrLnpmLmRyb3Bkb3dubWVudSB0b3VjaHN0YXJ0LnpmLmRyb3Bkb3dubWVudScsIGhhbmRsZUNsaWNrRm4pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVIb3Zlcikge1xuICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKTtcblxuICAgICAgICBpZiAoaGFzU3ViKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmRlbGF5KTtcbiAgICAgICAgICBfdGhpcy5kZWxheSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2hvdygkZWxlbS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKSk7XG4gICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpO1xuICAgICAgICBpZiAoaGFzU3ViICYmIF90aGlzLm9wdGlvbnMuYXV0b2Nsb3NlKSB7XG4gICAgICAgICAgaWYgKCRlbGVtLmF0dHIoJ2RhdGEtaXMtY2xpY2snKSA9PT0gJ3RydWUnICYmIF90aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmRlbGF5KTtcbiAgICAgICAgICBfdGhpcy5kZWxheSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbSk7XG4gICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5jbG9zaW5nVGltZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLiRtZW51SXRlbXMub24oJ2tleWRvd24uemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyICRlbGVtZW50ID0gJChlLnRhcmdldCkucGFyZW50c1VudGlsKCd1bCcsICdbcm9sZT1cIm1lbnVpdGVtXCJdJyksXG4gICAgICAgICAgaXNUYWIgPSBfdGhpcy4kdGFicy5pbmRleCgkZWxlbWVudCkgPiAtMSxcbiAgICAgICAgICAkZWxlbWVudHMgPSBpc1RhYiA/IF90aGlzLiR0YWJzIDogJGVsZW1lbnQuc2libGluZ3MoJ2xpJykuYWRkKCRlbGVtZW50KSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShpLTEpO1xuICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50cy5lcShpKzEpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBuZXh0U2libGluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoISRlbGVtZW50LmlzKCc6bGFzdC1jaGlsZCcpKSB7XG4gICAgICAgICAgJG5leHRFbGVtZW50LmNoaWxkcmVuKCdhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHByZXZTaWJsaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRwcmV2RWxlbWVudC5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0sIG9wZW5TdWIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyICRzdWIgPSAkZWxlbWVudC5jaGlsZHJlbigndWwuaXMtZHJvcGRvd24tc3VibWVudScpO1xuICAgICAgICBpZiAoJHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgICBfdGhpcy5fc2hvdygkc3ViKTtcbiAgICAgICAgICAkZWxlbWVudC5maW5kKCdsaSA+IGE6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIHsgcmV0dXJuOyB9XG4gICAgICB9LCBjbG9zZVN1YiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL2lmICgkZWxlbWVudC5pcygnOmZpcnN0LWNoaWxkJykpIHtcbiAgICAgICAgdmFyIGNsb3NlID0gJGVsZW1lbnQucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKTtcbiAgICAgICAgY2xvc2UuY2hpbGRyZW4oJ2E6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICBfdGhpcy5faGlkZShjbG9zZSk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy99XG4gICAgICB9O1xuICAgICAgdmFyIGZ1bmN0aW9ucyA9IHtcbiAgICAgICAgb3Blbjogb3BlblN1YixcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLl9oaWRlKF90aGlzLiRlbGVtZW50KTtcbiAgICAgICAgICBfdGhpcy4kbWVudUl0ZW1zLmZpbmQoJ2E6Zmlyc3QnKS5mb2N1cygpOyAvLyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAoaXNUYWIpIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc1ZlcnRpY2FsKCkpIHsgLy8gdmVydGljYWwgbWVudVxuICAgICAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpKSB7IC8vIHJpZ2h0IGFsaWduZWRcbiAgICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBuZXh0OiBjbG9zZVN1YixcbiAgICAgICAgICAgICAgcHJldmlvdXM6IG9wZW5TdWJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7IC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICB1cDogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgIG5leHQ6IG9wZW5TdWIsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBjbG9zZVN1YlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgeyAvLyBob3Jpem9udGFsIG1lbnVcbiAgICAgICAgICBpZiAoRm91bmRhdGlvbi5ydGwoKSkgeyAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgbmV4dDogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgZG93bjogb3BlblN1YixcbiAgICAgICAgICAgICAgdXA6IGNsb3NlU3ViXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgeyAvLyBsZWZ0IGFsaWduZWRcbiAgICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBuZXh0OiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgcHJldmlvdXM6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBkb3duOiBvcGVuU3ViLFxuICAgICAgICAgICAgICB1cDogY2xvc2VTdWJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLy8gbm90IHRhYnMgLT4gb25lIHN1YlxuICAgICAgICBpZiAoRm91bmRhdGlvbi5ydGwoKSkgeyAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICBuZXh0OiBjbG9zZVN1YixcbiAgICAgICAgICAgIHByZXZpb3VzOiBvcGVuU3ViLFxuICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICB1cDogcHJldlNpYmxpbmdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHsgLy8gbGVmdCBhbGlnbmVkXG4gICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICBuZXh0OiBvcGVuU3ViLFxuICAgICAgICAgICAgcHJldmlvdXM6IGNsb3NlU3ViLFxuICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICB1cDogcHJldlNpYmxpbmdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ0Ryb3Bkb3duTWVudScsIGZ1bmN0aW9ucyk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICB2YXIgJGJvZHkgPSAkKGRvY3VtZW50LmJvZHkpLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgJGJvZHkub2ZmKCdtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnUnKVxuICAgICAgICAgLm9uKCdtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgIHZhciAkbGluayA9IF90aGlzLiRlbGVtZW50LmZpbmQoZS50YXJnZXQpO1xuICAgICAgICAgICBpZiAoJGxpbmsubGVuZ3RoKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgIF90aGlzLl9oaWRlKCk7XG4gICAgICAgICAgICRib2R5Lm9mZignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51Jyk7XG4gICAgICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIGRyb3Bkb3duIHBhbmUsIGFuZCBjaGVja3MgZm9yIGNvbGxpc2lvbnMgZmlyc3QuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkc3ViIC0gdWwgZWxlbWVudCB0aGF0IGlzIGEgc3VibWVudSB0byBzaG93XG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZmlyZXMgRHJvcGRvd25NZW51I3Nob3dcbiAgICovXG4gIF9zaG93KCRzdWIpIHtcbiAgICB2YXIgaWR4ID0gdGhpcy4kdGFicy5pbmRleCh0aGlzLiR0YWJzLmZpbHRlcihmdW5jdGlvbihpLCBlbCkge1xuICAgICAgcmV0dXJuICQoZWwpLmZpbmQoJHN1YikubGVuZ3RoID4gMDtcbiAgICB9KSk7XG4gICAgdmFyICRzaWJzID0gJHN1Yi5wYXJlbnQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jykuc2libGluZ3MoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgdGhpcy5faGlkZSgkc2licywgaWR4KTtcbiAgICAkc3ViLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKS5hZGRDbGFzcygnanMtZHJvcGRvd24tYWN0aXZlJykuYXR0cih7J2FyaWEtaGlkZGVuJzogZmFsc2V9KVxuICAgICAgICAucGFyZW50KCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLmFkZENsYXNzKCdpcy1hY3RpdmUnKVxuICAgICAgICAuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG4gICAgdmFyIGNsZWFyID0gRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSgkc3ViLCBudWxsLCB0cnVlKTtcbiAgICBpZiAoIWNsZWFyKSB7XG4gICAgICB2YXIgb2xkQ2xhc3MgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnbGVmdCcgPyAnLXJpZ2h0JyA6ICctbGVmdCcsXG4gICAgICAgICAgJHBhcmVudExpID0gJHN1Yi5wYXJlbnQoJy5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpO1xuICAgICAgJHBhcmVudExpLnJlbW92ZUNsYXNzKGBvcGVucyR7b2xkQ2xhc3N9YCkuYWRkQ2xhc3MoYG9wZW5zLSR7dGhpcy5vcHRpb25zLmFsaWdubWVudH1gKTtcbiAgICAgIGNsZWFyID0gRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSgkc3ViLCBudWxsLCB0cnVlKTtcbiAgICAgIGlmICghY2xlYXIpIHtcbiAgICAgICAgJHBhcmVudExpLnJlbW92ZUNsYXNzKGBvcGVucy0ke3RoaXMub3B0aW9ucy5hbGlnbm1lbnR9YCkuYWRkQ2xhc3MoJ29wZW5zLWlubmVyJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgICAkc3ViLmNzcygndmlzaWJpbGl0eScsICcnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykgeyB0aGlzLl9hZGRCb2R5SGFuZGxlcigpOyB9XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgbmV3IGRyb3Bkb3duIHBhbmUgaXMgdmlzaWJsZS5cbiAgICAgKiBAZXZlbnQgRHJvcGRvd25NZW51I3Nob3dcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Nob3cuemYuZHJvcGRvd25tZW51JywgWyRzdWJdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyBhIHNpbmdsZSwgY3VycmVudGx5IG9wZW4gZHJvcGRvd24gcGFuZSwgaWYgcGFzc2VkIGEgcGFyYW1ldGVyLCBvdGhlcndpc2UsIGhpZGVzIGV2ZXJ5dGhpbmcuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSBlbGVtZW50IHdpdGggYSBzdWJtZW51IHRvIGhpZGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIGluZGV4IG9mIHRoZSAkdGFicyBjb2xsZWN0aW9uIHRvIGhpZGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9oaWRlKCRlbGVtLCBpZHgpIHtcbiAgICB2YXIgJHRvQ2xvc2U7XG4gICAgaWYgKCRlbGVtICYmICRlbGVtLmxlbmd0aCkge1xuICAgICAgJHRvQ2xvc2UgPSAkZWxlbTtcbiAgICB9IGVsc2UgaWYgKGlkeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAkdG9DbG9zZSA9IHRoaXMuJHRhYnMubm90KGZ1bmN0aW9uKGksIGVsKSB7XG4gICAgICAgIHJldHVybiBpID09PSBpZHg7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAkdG9DbG9zZSA9IHRoaXMuJGVsZW1lbnQ7XG4gICAgfVxuICAgIHZhciBzb21ldGhpbmdUb0Nsb3NlID0gJHRvQ2xvc2UuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpIHx8ICR0b0Nsb3NlLmZpbmQoJy5pcy1hY3RpdmUnKS5sZW5ndGggPiAwO1xuXG4gICAgaWYgKHNvbWV0aGluZ1RvQ2xvc2UpIHtcbiAgICAgICR0b0Nsb3NlLmZpbmQoJ2xpLmlzLWFjdGl2ZScpLmFkZCgkdG9DbG9zZSkuYXR0cih7XG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICdkYXRhLWlzLWNsaWNrJzogZmFsc2VcbiAgICAgIH0pLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICAgJHRvQ2xvc2UuZmluZCgndWwuanMtZHJvcGRvd24tYWN0aXZlJykuYXR0cih7XG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWVcbiAgICAgIH0pLnJlbW92ZUNsYXNzKCdqcy1kcm9wZG93bi1hY3RpdmUnKTtcblxuICAgICAgaWYgKHRoaXMuY2hhbmdlZCB8fCAkdG9DbG9zZS5maW5kKCdvcGVucy1pbm5lcicpLmxlbmd0aCkge1xuICAgICAgICB2YXIgb2xkQ2xhc3MgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnbGVmdCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICAkdG9DbG9zZS5maW5kKCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLmFkZCgkdG9DbG9zZSlcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoYG9wZW5zLWlubmVyIG9wZW5zLSR7dGhpcy5vcHRpb25zLmFsaWdubWVudH1gKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgb3BlbnMtJHtvbGRDbGFzc31gKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG9wZW4gbWVudXMgYXJlIGNsb3NlZC5cbiAgICAgICAqIEBldmVudCBEcm9wZG93bk1lbnUjaGlkZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYuZHJvcGRvd25tZW51JywgWyR0b0Nsb3NlXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRtZW51SXRlbXMub2ZmKCcuemYuZHJvcGRvd25tZW51JykucmVtb3ZlQXR0cignZGF0YS1pcy1jbGljaycpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnaXMtcmlnaHQtYXJyb3cgaXMtbGVmdC1hcnJvdyBpcy1kb3duLWFycm93IG9wZW5zLXJpZ2h0IG9wZW5zLWxlZnQgb3BlbnMtaW5uZXInKTtcbiAgICAkKGRvY3VtZW50LmJvZHkpLm9mZignLnpmLmRyb3Bkb3dubWVudScpO1xuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdkcm9wZG93bicpO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5Ecm9wZG93bk1lbnUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBEaXNhbGxvd3MgaG92ZXIgZXZlbnRzIGZyb20gb3BlbmluZyBzdWJtZW51c1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSG92ZXI6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgYSBzdWJtZW51IHRvIGF1dG9tYXRpY2FsbHkgY2xvc2Ugb24gYSBtb3VzZWxlYXZlIGV2ZW50LCBpZiBub3QgY2xpY2tlZCBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGF1dG9jbG9zZTogdHJ1ZSxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IG9wZW5pbmcgYSBzdWJtZW51IG9uIGhvdmVyIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwXG4gICAqL1xuICBob3ZlckRlbGF5OiA1MCxcbiAgLyoqXG4gICAqIEFsbG93IGEgc3VibWVudSB0byBvcGVuL3JlbWFpbiBvcGVuIG9uIHBhcmVudCBjbGljayBldmVudC4gQWxsb3dzIGN1cnNvciB0byBtb3ZlIGF3YXkgZnJvbSBtZW51LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrT3BlbjogZmFsc2UsXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBkZWxheSBjbG9zaW5nIGEgc3VibWVudSBvbiBhIG1vdXNlbGVhdmUgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuXG4gIGNsb3NpbmdUaW1lOiA1MDAsXG4gIC8qKlxuICAgKiBQb3NpdGlvbiBvZiB0aGUgbWVudSByZWxhdGl2ZSB0byB3aGF0IGRpcmVjdGlvbiB0aGUgc3VibWVudXMgc2hvdWxkIG9wZW4uIEhhbmRsZWQgYnkgSlMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2xlZnQnXG4gICAqL1xuICBhbGlnbm1lbnQ6ICdsZWZ0JyxcbiAgLyoqXG4gICAqIEFsbG93IGNsaWNrcyBvbiB0aGUgYm9keSB0byBjbG9zZSBhbnkgb3BlbiBzdWJtZW51cy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvdyBjbGlja3Mgb24gbGVhZiBhbmNob3IgbGlua3MgdG8gY2xvc2UgYW55IG9wZW4gc3VibWVudXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrSW5zaWRlOiB0cnVlLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB2ZXJ0aWNhbCBvcmllbnRlZCBtZW51cywgRm91bmRhdGlvbiBkZWZhdWx0IGlzIGB2ZXJ0aWNhbGAuIFVwZGF0ZSB0aGlzIGlmIHVzaW5nIHlvdXIgb3duIGNsYXNzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd2ZXJ0aWNhbCdcbiAgICovXG4gIHZlcnRpY2FsQ2xhc3M6ICd2ZXJ0aWNhbCcsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHJpZ2h0LXNpZGUgb3JpZW50ZWQgbWVudXMsIEZvdW5kYXRpb24gZGVmYXVsdCBpcyBgYWxpZ24tcmlnaHRgLiBVcGRhdGUgdGhpcyBpZiB1c2luZyB5b3VyIG93biBjbGFzcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnYWxpZ24tcmlnaHQnXG4gICAqL1xuICByaWdodENsYXNzOiAnYWxpZ24tcmlnaHQnLFxuICAvKipcbiAgICogQm9vbGVhbiB0byBmb3JjZSBvdmVyaWRlIHRoZSBjbGlja2luZyBvZiBsaW5rcyB0byBwZXJmb3JtIGRlZmF1bHQgYWN0aW9uLCBvbiBzZWNvbmQgdG91Y2ggZXZlbnQgZm9yIG1vYmlsZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZm9yY2VGb2xsb3c6IHRydWVcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihEcm9wZG93bk1lbnUsICdEcm9wZG93bk1lbnUnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEVxdWFsaXplciBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uZXF1YWxpemVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlciBpZiBlcXVhbGl6ZXIgY29udGFpbnMgaW1hZ2VzXG4gKi9cblxuY2xhc3MgRXF1YWxpemVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgRXF1YWxpemVyLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIEVxdWFsaXplciNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpe1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgRXF1YWxpemVyLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdFcXVhbGl6ZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgRXF1YWxpemVyIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBlcXVhbGl6ZXIgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBlcUlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLWVxdWFsaXplcicpIHx8ICcnO1xuICAgIHZhciAkd2F0Y2hlZCA9IHRoaXMuJGVsZW1lbnQuZmluZChgW2RhdGEtZXF1YWxpemVyLXdhdGNoPVwiJHtlcUlkfVwiXWApO1xuXG4gICAgdGhpcy4kd2F0Y2hlZCA9ICR3YXRjaGVkLmxlbmd0aCA/ICR3YXRjaGVkIDogdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1lcXVhbGl6ZXItd2F0Y2hdJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLXJlc2l6ZScsIChlcUlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2VxJykpKTtcblxuICAgIHRoaXMuaGFzTmVzdGVkID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1lcXVhbGl6ZXJdJykubGVuZ3RoID4gMDtcbiAgICB0aGlzLmlzTmVzdGVkID0gdGhpcy4kZWxlbWVudC5wYXJlbnRzVW50aWwoZG9jdW1lbnQuYm9keSwgJ1tkYXRhLWVxdWFsaXplcl0nKS5sZW5ndGggPiAwO1xuICAgIHRoaXMuaXNPbiA9IGZhbHNlO1xuICAgIHRoaXMuX2JpbmRIYW5kbGVyID0ge1xuICAgICAgb25SZXNpemVNZUJvdW5kOiB0aGlzLl9vblJlc2l6ZU1lLmJpbmQodGhpcyksXG4gICAgICBvblBvc3RFcXVhbGl6ZWRCb3VuZDogdGhpcy5fb25Qb3N0RXF1YWxpemVkLmJpbmQodGhpcylcbiAgICB9O1xuXG4gICAgdmFyIGltZ3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2ltZycpO1xuICAgIHZhciB0b29TbWFsbDtcbiAgICBpZih0aGlzLm9wdGlvbnMuZXF1YWxpemVPbil7XG4gICAgICB0b29TbWFsbCA9IHRoaXMuX2NoZWNrTVEoKTtcbiAgICAgICQod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fY2hlY2tNUS5iaW5kKHRoaXMpKTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cbiAgICBpZigodG9vU21hbGwgIT09IHVuZGVmaW5lZCAmJiB0b29TbWFsbCA9PT0gZmFsc2UpIHx8IHRvb1NtYWxsID09PSB1bmRlZmluZWQpe1xuICAgICAgaWYoaW1ncy5sZW5ndGgpe1xuICAgICAgICBGb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkKGltZ3MsIHRoaXMuX3JlZmxvdy5iaW5kKHRoaXMpKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB0aGlzLl9yZWZsb3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMgaWYgdGhlIGJyZWFrcG9pbnQgaXMgdG9vIHNtYWxsLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhdXNlRXZlbnRzKCkge1xuICAgIHRoaXMuaXNPbiA9IGZhbHNlO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKHtcbiAgICAgICcuemYuZXF1YWxpemVyJzogdGhpcy5fYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmQsXG4gICAgICAncmVzaXplbWUuemYudHJpZ2dlcic6IHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGZ1bmN0aW9uIHRvIGhhbmRsZSAkZWxlbWVudHMgcmVzaXplbWUuemYudHJpZ2dlciwgd2l0aCBib3VuZCB0aGlzIG9uIF9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblJlc2l6ZU1lKGUpIHtcbiAgICB0aGlzLl9yZWZsb3coKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBoYW5kbGUgJGVsZW1lbnRzIHBvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyLCB3aXRoIGJvdW5kIHRoaXMgb24gX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Qb3N0RXF1YWxpemVkKGUpIHtcbiAgICBpZihlLnRhcmdldCAhPT0gdGhpcy4kZWxlbWVudFswXSl7IHRoaXMuX3JlZmxvdygpOyB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBFcXVhbGl6ZXIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5fcGF1c2VFdmVudHMoKTtcbiAgICBpZih0aGlzLmhhc05lc3RlZCl7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplcicsIHRoaXMuX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kKTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmQpO1xuICAgIH1cbiAgICB0aGlzLmlzT24gPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgY3VycmVudCBicmVha3BvaW50IHRvIHRoZSBtaW5pbXVtIHJlcXVpcmVkIHNpemUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY2hlY2tNUSgpIHtcbiAgICB2YXIgdG9vU21hbGwgPSAhRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLmVxdWFsaXplT24pO1xuICAgIGlmKHRvb1NtYWxsKXtcbiAgICAgIGlmKHRoaXMuaXNPbil7XG4gICAgICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgaWYoIXRoaXMuaXNPbil7XG4gICAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG9vU21hbGw7XG4gIH1cblxuICAvKipcbiAgICogQSBub29wIHZlcnNpb24gZm9yIHRoZSBwbHVnaW5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9raWxsc3dpdGNoKCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBFcXVhbGl6ZXIgdXBvbiBET00gY2hhbmdlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVmbG93KCkge1xuICAgIGlmKCF0aGlzLm9wdGlvbnMuZXF1YWxpemVPblN0YWNrKXtcbiAgICAgIGlmKHRoaXMuX2lzU3RhY2tlZCgpKXtcbiAgICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lcXVhbGl6ZUJ5Um93KSB7XG4gICAgICB0aGlzLmdldEhlaWdodHNCeVJvdyh0aGlzLmFwcGx5SGVpZ2h0QnlSb3cuYmluZCh0aGlzKSk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLmdldEhlaWdodHModGhpcy5hcHBseUhlaWdodC5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWFudWFsbHkgZGV0ZXJtaW5lcyBpZiB0aGUgZmlyc3QgMiBlbGVtZW50cyBhcmUgKk5PVCogc3RhY2tlZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pc1N0YWNrZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHdhdGNoZWRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICE9PSB0aGlzLiR3YXRjaGVkWzFdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgb3V0ZXIgaGVpZ2h0cyBvZiBjaGlsZHJlbiBjb250YWluZWQgd2l0aGluIGFuIEVxdWFsaXplciBwYXJlbnQgYW5kIHJldHVybnMgdGhlbSBpbiBhbiBhcnJheVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIEEgbm9uLW9wdGlvbmFsIGNhbGxiYWNrIHRvIHJldHVybiB0aGUgaGVpZ2h0cyBhcnJheSB0by5cbiAgICogQHJldHVybnMge0FycmF5fSBoZWlnaHRzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lclxuICAgKi9cbiAgZ2V0SGVpZ2h0cyhjYikge1xuICAgIHZhciBoZWlnaHRzID0gW107XG4gICAgZm9yKHZhciBpID0gMCwgbGVuID0gdGhpcy4kd2F0Y2hlZC5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICB0aGlzLiR3YXRjaGVkW2ldLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgIGhlaWdodHMucHVzaCh0aGlzLiR3YXRjaGVkW2ldLm9mZnNldEhlaWdodCk7XG4gICAgfVxuICAgIGNiKGhlaWdodHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBvdXRlciBoZWlnaHRzIG9mIGNoaWxkcmVuIGNvbnRhaW5lZCB3aXRoaW4gYW4gRXF1YWxpemVyIHBhcmVudCBhbmQgcmV0dXJucyB0aGVtIGluIGFuIGFycmF5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gQSBub24tb3B0aW9uYWwgY2FsbGJhY2sgdG8gcmV0dXJuIHRoZSBoZWlnaHRzIGFycmF5IHRvLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGdyb3VwcyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXIgZ3JvdXBlZCBieSByb3cgd2l0aCBlbGVtZW50LGhlaWdodCBhbmQgbWF4IGFzIGxhc3QgY2hpbGRcbiAgICovXG4gIGdldEhlaWdodHNCeVJvdyhjYikge1xuICAgIHZhciBsYXN0RWxUb3BPZmZzZXQgPSAodGhpcy4kd2F0Y2hlZC5sZW5ndGggPyB0aGlzLiR3YXRjaGVkLmZpcnN0KCkub2Zmc2V0KCkudG9wIDogMCksXG4gICAgICAgIGdyb3VwcyA9IFtdLFxuICAgICAgICBncm91cCA9IDA7XG4gICAgLy9ncm91cCBieSBSb3dcbiAgICBncm91cHNbZ3JvdXBdID0gW107XG4gICAgZm9yKHZhciBpID0gMCwgbGVuID0gdGhpcy4kd2F0Y2hlZC5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICB0aGlzLiR3YXRjaGVkW2ldLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgIC8vbWF5YmUgY291bGQgdXNlIHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0VG9wXG4gICAgICB2YXIgZWxPZmZzZXRUb3AgPSAkKHRoaXMuJHdhdGNoZWRbaV0pLm9mZnNldCgpLnRvcDtcbiAgICAgIGlmIChlbE9mZnNldFRvcCE9bGFzdEVsVG9wT2Zmc2V0KSB7XG4gICAgICAgIGdyb3VwKys7XG4gICAgICAgIGdyb3Vwc1tncm91cF0gPSBbXTtcbiAgICAgICAgbGFzdEVsVG9wT2Zmc2V0PWVsT2Zmc2V0VG9wO1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2dyb3VwXS5wdXNoKFt0aGlzLiR3YXRjaGVkW2ldLHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0SGVpZ2h0XSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDAsIGxuID0gZ3JvdXBzLmxlbmd0aDsgaiA8IGxuOyBqKyspIHtcbiAgICAgIHZhciBoZWlnaHRzID0gJChncm91cHNbal0pLm1hcChmdW5jdGlvbigpeyByZXR1cm4gdGhpc1sxXTsgfSkuZ2V0KCk7XG4gICAgICB2YXIgbWF4ICAgICAgICAgPSBNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKTtcbiAgICAgIGdyb3Vwc1tqXS5wdXNoKG1heCk7XG4gICAgfVxuICAgIGNiKGdyb3Vwcyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlcyB0aGUgQ1NTIGhlaWdodCBwcm9wZXJ0eSBvZiBlYWNoIGNoaWxkIGluIGFuIEVxdWFsaXplciBwYXJlbnQgdG8gbWF0Y2ggdGhlIHRhbGxlc3RcbiAgICogQHBhcmFtIHthcnJheX0gaGVpZ2h0cyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXJcbiAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICogQGZpcmVzIEVxdWFsaXplciNwb3N0ZXF1YWxpemVkXG4gICAqL1xuICBhcHBseUhlaWdodChoZWlnaHRzKSB7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBhcmUgYXBwbGllZFxuICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG5cbiAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgbWF4KTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICAgKi9cbiAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIENTUyBoZWlnaHQgcHJvcGVydHkgb2YgZWFjaCBjaGlsZCBpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IHRvIG1hdGNoIHRoZSB0YWxsZXN0IGJ5IHJvd1xuICAgKiBAcGFyYW0ge2FycmF5fSBncm91cHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyIGdyb3VwZWQgYnkgcm93IHdpdGggZWxlbWVudCxoZWlnaHQgYW5kIG1heCBhcyBsYXN0IGNoaWxkXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkUm93XG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFJvd1xuICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICovXG4gIGFwcGx5SGVpZ2h0QnlSb3coZ3JvdXBzKSB7XG4gICAgLyoqXG4gICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIGFyZSBhcHBsaWVkXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsZW4gOyBpKyspIHtcbiAgICAgIHZhciBncm91cHNJTGVuZ3RoID0gZ3JvdXBzW2ldLmxlbmd0aCxcbiAgICAgICAgICBtYXggPSBncm91cHNbaV1bZ3JvdXBzSUxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGdyb3Vwc0lMZW5ndGg8PTIpIHtcbiAgICAgICAgJChncm91cHNbaV1bMF1bMF0pLmNzcyh7J2hlaWdodCc6J2F1dG8nfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIHBlciByb3cgYXJlIGFwcGxpZWRcbiAgICAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3ByZWVxdWFsaXplZFJvd1xuICAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWRyb3cuemYuZXF1YWxpemVyJyk7XG4gICAgICBmb3IgKHZhciBqID0gMCwgbGVuSiA9IChncm91cHNJTGVuZ3RoLTEpOyBqIDwgbGVuSiA7IGorKykge1xuICAgICAgICAkKGdyb3Vwc1tpXVtqXVswXSkuY3NzKHsnaGVpZ2h0JzptYXh9KTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgcGVyIHJvdyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFJvd1xuICAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkcm93LnpmLmVxdWFsaXplcicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBFcXVhbGl6ZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cbkVxdWFsaXplci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEVuYWJsZSBoZWlnaHQgZXF1YWxpemF0aW9uIHdoZW4gc3RhY2tlZCBvbiBzbWFsbGVyIHNjcmVlbnMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgZXF1YWxpemVPblN0YWNrOiBmYWxzZSxcbiAgLyoqXG4gICAqIEVuYWJsZSBoZWlnaHQgZXF1YWxpemF0aW9uIHJvdyBieSByb3cuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGVxdWFsaXplQnlSb3c6IGZhbHNlLFxuICAvKipcbiAgICogU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWluaW11bSBicmVha3BvaW50IHNpemUgdGhlIHBsdWdpbiBzaG91bGQgZXF1YWxpemUgaGVpZ2h0cyBvbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnbWVkaXVtJ1xuICAgKi9cbiAgZXF1YWxpemVPbjogJydcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihFcXVhbGl6ZXIsICdFcXVhbGl6ZXInKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEludGVyY2hhbmdlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5pbnRlcmNoYW5nZVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRpbWVyQW5kSW1hZ2VMb2FkZXJcbiAqL1xuXG5jbGFzcyBJbnRlcmNoYW5nZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEludGVyY2hhbmdlLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIEludGVyY2hhbmdlI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBJbnRlcmNoYW5nZS5kZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdGhpcy5ydWxlcyA9IFtdO1xuICAgIHRoaXMuY3VycmVudFBhdGggPSAnJztcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0ludGVyY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEludGVyY2hhbmdlIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBpbnRlcmNoYW5nZSBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuX2FkZEJyZWFrcG9pbnRzKCk7XG4gICAgdGhpcy5fZ2VuZXJhdGVSdWxlcygpO1xuICAgIHRoaXMuX3JlZmxvdygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgSW50ZXJjaGFuZ2UuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5pbnRlcmNoYW5nZScsIEZvdW5kYXRpb24udXRpbC50aHJvdHRsZSh0aGlzLl9yZWZsb3cuYmluZCh0aGlzKSwgNTApKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBJbnRlcmNoYW5nZSB1cG9uIERPTSBjaGFuZ2VcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVmbG93KCkge1xuICAgIHZhciBtYXRjaDtcblxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHJ1bGUsIGJ1dCBvbmx5IHNhdmUgdGhlIGxhc3QgbWF0Y2hcbiAgICBmb3IgKHZhciBpIGluIHRoaXMucnVsZXMpIHtcbiAgICAgIGlmKHRoaXMucnVsZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzW2ldO1xuXG4gICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShydWxlLnF1ZXJ5KS5tYXRjaGVzKSB7XG4gICAgICAgICAgbWF0Y2ggPSBydWxlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB0aGlzLnJlcGxhY2UobWF0Y2gucGF0aCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIEZvdW5kYXRpb24gYnJlYWtwb2ludHMgYW5kIGFkZHMgdGhlbSB0byB0aGUgSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTIG9iamVjdC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQnJlYWtwb2ludHMoKSB7XG4gICAgZm9yICh2YXIgaSBpbiBGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllcykge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5xdWVyaWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IEZvdW5kYXRpb24uTWVkaWFRdWVyeS5xdWVyaWVzW2ldO1xuICAgICAgICBJbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVNbcXVlcnkubmFtZV0gPSBxdWVyeS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBJbnRlcmNoYW5nZSBlbGVtZW50IGZvciB0aGUgcHJvdmlkZWQgbWVkaWEgcXVlcnkgKyBjb250ZW50IHBhaXJpbmdzXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdGhhdCBpcyBhbiBJbnRlcmNoYW5nZSBpbnN0YW5jZVxuICAgKiBAcmV0dXJucyB7QXJyYXl9IHNjZW5hcmlvcyAtIEFycmF5IG9mIG9iamVjdHMgdGhhdCBoYXZlICdtcScgYW5kICdwYXRoJyBrZXlzIHdpdGggY29ycmVzcG9uZGluZyBrZXlzXG4gICAqL1xuICBfZ2VuZXJhdGVSdWxlcyhlbGVtZW50KSB7XG4gICAgdmFyIHJ1bGVzTGlzdCA9IFtdO1xuICAgIHZhciBydWxlcztcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucnVsZXMpIHtcbiAgICAgIHJ1bGVzID0gdGhpcy5vcHRpb25zLnJ1bGVzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJ1bGVzID0gdGhpcy4kZWxlbWVudC5kYXRhKCdpbnRlcmNoYW5nZScpLm1hdGNoKC9cXFsuKj9cXF0vZyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSBpbiBydWxlcykge1xuICAgICAgaWYocnVsZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tpXS5zbGljZSgxLCAtMSkuc3BsaXQoJywgJyk7XG4gICAgICAgIHZhciBwYXRoID0gcnVsZS5zbGljZSgwLCAtMSkuam9pbignJyk7XG4gICAgICAgIHZhciBxdWVyeSA9IHJ1bGVbcnVsZS5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAoSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5XSkge1xuICAgICAgICAgIHF1ZXJ5ID0gSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bGVzTGlzdC5wdXNoKHtcbiAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gcnVsZXNMaXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYHNyY2AgcHJvcGVydHkgb2YgYW4gaW1hZ2UsIG9yIGNoYW5nZSB0aGUgSFRNTCBvZiBhIGNvbnRhaW5lciwgdG8gdGhlIHNwZWNpZmllZCBwYXRoLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGggLSBQYXRoIHRvIHRoZSBpbWFnZSBvciBIVE1MIHBhcnRpYWwuXG4gICAqIEBmaXJlcyBJbnRlcmNoYW5nZSNyZXBsYWNlZFxuICAgKi9cbiAgcmVwbGFjZShwYXRoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFBhdGggPT09IHBhdGgpIHJldHVybjtcblxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHRyaWdnZXIgPSAncmVwbGFjZWQuemYuaW50ZXJjaGFuZ2UnO1xuXG4gICAgLy8gUmVwbGFjaW5nIGltYWdlc1xuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdLm5vZGVOYW1lID09PSAnSU1HJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdzcmMnLCBwYXRoKS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5jdXJyZW50UGF0aCA9IHBhdGg7XG4gICAgICB9KVxuICAgICAgLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgfVxuICAgIC8vIFJlcGxhY2luZyBiYWNrZ3JvdW5kIGltYWdlc1xuICAgIGVsc2UgaWYgKHBhdGgubWF0Y2goL1xcLihnaWZ8anBnfGpwZWd8cG5nfHN2Z3x0aWZmKShbPyNdLiopPy9pKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5jc3MoeyAnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoJytwYXRoKycpJyB9KVxuICAgICAgICAgIC50cmlnZ2VyKHRyaWdnZXIpO1xuICAgIH1cbiAgICAvLyBSZXBsYWNpbmcgSFRNTFxuICAgIGVsc2Uge1xuICAgICAgJC5nZXQocGF0aCwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgX3RoaXMuJGVsZW1lbnQuaHRtbChyZXNwb25zZSlcbiAgICAgICAgICAgICAudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICAgICAgJChyZXNwb25zZSkuZm91bmRhdGlvbigpO1xuICAgICAgICBfdGhpcy5jdXJyZW50UGF0aCA9IHBhdGg7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIGNvbnRlbnQgaW4gYW4gSW50ZXJjaGFuZ2UgZWxlbWVudCBpcyBkb25lIGJlaW5nIGxvYWRlZC5cbiAgICAgKiBAZXZlbnQgSW50ZXJjaGFuZ2UjcmVwbGFjZWRcbiAgICAgKi9cbiAgICAvLyB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgaW50ZXJjaGFuZ2UuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICAvL1RPRE8gdGhpcy5cbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5JbnRlcmNoYW5nZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFJ1bGVzIHRvIGJlIGFwcGxpZWQgdG8gSW50ZXJjaGFuZ2UgZWxlbWVudHMuIFNldCB3aXRoIHRoZSBgZGF0YS1pbnRlcmNoYW5nZWAgYXJyYXkgbm90YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICovXG4gIHJ1bGVzOiBudWxsXG59O1xuXG5JbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVMgPSB7XG4gICdsYW5kc2NhcGUnOiAnc2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSknLFxuICAncG9ydHJhaXQnOiAnc2NyZWVuIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KScsXG4gICdyZXRpbmEnOiAnb25seSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMi8xKSwgb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwgb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMmRwcHgpJ1xufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEludGVyY2hhbmdlLCAnSW50ZXJjaGFuZ2UnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE1hZ2VsbGFuIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tYWdlbGxhblxuICovXG5cbmNsYXNzIE1hZ2VsbGFuIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgTWFnZWxsYW4uXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgTWFnZWxsYW4jaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zICA9ICQuZXh0ZW5kKHt9LCBNYWdlbGxhbi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnTWFnZWxsYW4nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgTWFnZWxsYW4gcGx1Z2luIGFuZCBjYWxscyBmdW5jdGlvbnMgdG8gZ2V0IGVxdWFsaXplciBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdtYWdlbGxhbicpO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy4kdGFyZ2V0cyA9ICQoJ1tkYXRhLW1hZ2VsbGFuLXRhcmdldF0nKTtcbiAgICB0aGlzLiRsaW5rcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnYScpO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAnZGF0YS1yZXNpemUnOiBpZCxcbiAgICAgICdkYXRhLXNjcm9sbCc6IGlkLFxuICAgICAgJ2lkJzogaWRcbiAgICB9KTtcbiAgICB0aGlzLiRhY3RpdmUgPSAkKCk7XG4gICAgdGhpcy5zY3JvbGxQb3MgPSBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQsIDEwKTtcblxuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYW4gYXJyYXkgb2YgcGl4ZWwgdmFsdWVzIHRoYXQgYXJlIHRoZSBkZW1hcmNhdGlvbiBsaW5lcyBiZXR3ZWVuIGxvY2F0aW9ucyBvbiB0aGUgcGFnZS5cbiAgICogQ2FuIGJlIGludm9rZWQgaWYgbmV3IGVsZW1lbnRzIGFyZSBhZGRlZCBvciB0aGUgc2l6ZSBvZiBhIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgY2FsY1BvaW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBib2R5ID0gZG9jdW1lbnQuYm9keSxcbiAgICAgICAgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgIHRoaXMucG9pbnRzID0gW107XG4gICAgdGhpcy53aW5IZWlnaHQgPSBNYXRoLnJvdW5kKE1hdGgubWF4KHdpbmRvdy5pbm5lckhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQpKTtcbiAgICB0aGlzLmRvY0hlaWdodCA9IE1hdGgucm91bmQoTWF0aC5tYXgoYm9keS5zY3JvbGxIZWlnaHQsIGJvZHkub2Zmc2V0SGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwub2Zmc2V0SGVpZ2h0KSk7XG5cbiAgICB0aGlzLiR0YXJnZXRzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgIHZhciAkdGFyID0gJCh0aGlzKSxcbiAgICAgICAgICBwdCA9IE1hdGgucm91bmQoJHRhci5vZmZzZXQoKS50b3AgLSBfdGhpcy5vcHRpb25zLnRocmVzaG9sZCk7XG4gICAgICAkdGFyLnRhcmdldFBvaW50ID0gcHQ7XG4gICAgICBfdGhpcy5wb2ludHMucHVzaChwdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBNYWdlbGxhbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgJGJvZHkgPSAkKCdodG1sLCBib2R5JyksXG4gICAgICAgIG9wdHMgPSB7XG4gICAgICAgICAgZHVyYXRpb246IF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICAgICAgZWFzaW5nOiAgIF90aGlzLm9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nXG4gICAgICAgIH07XG4gICAgJCh3aW5kb3cpLm9uZSgnbG9hZCcsIGZ1bmN0aW9uKCl7XG4gICAgICBpZihfdGhpcy5vcHRpb25zLmRlZXBMaW5raW5nKXtcbiAgICAgICAgaWYobG9jYXRpb24uaGFzaCl7XG4gICAgICAgICAgX3RoaXMuc2Nyb2xsVG9Mb2MobG9jYXRpb24uaGFzaCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzLmNhbGNQb2ludHMoKTtcbiAgICAgIF90aGlzLl91cGRhdGVBY3RpdmUoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLnJlZmxvdy5iaW5kKHRoaXMpLFxuICAgICAgJ3Njcm9sbG1lLnpmLnRyaWdnZXInOiB0aGlzLl91cGRhdGVBY3RpdmUuYmluZCh0aGlzKVxuICAgIH0pLm9uKCdjbGljay56Zi5tYWdlbGxhbicsICdhW2hyZWZePVwiI1wiXScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgYXJyaXZhbCAgID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgICAgX3RoaXMuc2Nyb2xsVG9Mb2MoYXJyaXZhbCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdG8gc2Nyb2xsIHRvIGEgZ2l2ZW4gbG9jYXRpb24gb24gdGhlIHBhZ2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBsb2MgLSBhIHByb3Blcmx5IGZvcm1hdHRlZCBqUXVlcnkgaWQgc2VsZWN0b3IuIEV4YW1wbGU6ICcjZm9vJ1xuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHNjcm9sbFRvTG9jKGxvYykge1xuICAgIC8vIERvIG5vdGhpbmcgaWYgdGFyZ2V0IGRvZXMgbm90IGV4aXN0IHRvIHByZXZlbnQgZXJyb3JzXG4gICAgaWYgKCEkKGxvYykubGVuZ3RoKSB7cmV0dXJuIGZhbHNlO31cbiAgICB2YXIgc2Nyb2xsUG9zID0gTWF0aC5yb3VuZCgkKGxvYykub2Zmc2V0KCkudG9wIC0gdGhpcy5vcHRpb25zLnRocmVzaG9sZCAvIDIgLSB0aGlzLm9wdGlvbnMuYmFyT2Zmc2V0KTtcblxuICAgICQoJ2h0bWwsIGJvZHknKS5zdG9wKHRydWUpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IHNjcm9sbFBvcyB9LCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sIHRoaXMub3B0aW9ucy5hbmltYXRpb25FYXNpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIE1hZ2VsbGFuIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHJlZmxvdygpIHtcbiAgICB0aGlzLmNhbGNQb2ludHMoKTtcbiAgICB0aGlzLl91cGRhdGVBY3RpdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB2aXNpYmlsaXR5IG9mIGFuIGFjdGl2ZSBsb2NhdGlvbiBsaW5rLCBhbmQgdXBkYXRlcyB0aGUgdXJsIGhhc2ggZm9yIHRoZSBwYWdlLCBpZiBkZWVwTGlua2luZyBlbmFibGVkLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIE1hZ2VsbGFuI3VwZGF0ZVxuICAgKi9cbiAgX3VwZGF0ZUFjdGl2ZSgvKmV2dCwgZWxlbSwgc2Nyb2xsUG9zKi8pIHtcbiAgICB2YXIgd2luUG9zID0gLypzY3JvbGxQb3MgfHwqLyBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQsIDEwKSxcbiAgICAgICAgY3VySWR4O1xuXG4gICAgaWYod2luUG9zICsgdGhpcy53aW5IZWlnaHQgPT09IHRoaXMuZG9jSGVpZ2h0KXsgY3VySWR4ID0gdGhpcy5wb2ludHMubGVuZ3RoIC0gMTsgfVxuICAgIGVsc2UgaWYod2luUG9zIDwgdGhpcy5wb2ludHNbMF0peyBjdXJJZHggPSAwOyB9XG4gICAgZWxzZXtcbiAgICAgIHZhciBpc0Rvd24gPSB0aGlzLnNjcm9sbFBvcyA8IHdpblBvcyxcbiAgICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgY3VyVmlzaWJsZSA9IHRoaXMucG9pbnRzLmZpbHRlcihmdW5jdGlvbihwLCBpKXtcbiAgICAgICAgICAgIHJldHVybiBpc0Rvd24gPyBwIC0gX3RoaXMub3B0aW9ucy5iYXJPZmZzZXQgPD0gd2luUG9zIDogcCAtIF90aGlzLm9wdGlvbnMuYmFyT2Zmc2V0IC0gX3RoaXMub3B0aW9ucy50aHJlc2hvbGQgPD0gd2luUG9zO1xuICAgICAgICAgIH0pO1xuICAgICAgY3VySWR4ID0gY3VyVmlzaWJsZS5sZW5ndGggPyBjdXJWaXNpYmxlLmxlbmd0aCAtIDEgOiAwO1xuICAgIH1cblxuICAgIHRoaXMuJGFjdGl2ZS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xuICAgIHRoaXMuJGFjdGl2ZSA9IHRoaXMuJGxpbmtzLmZpbHRlcignW2hyZWY9XCIjJyArIHRoaXMuJHRhcmdldHMuZXEoY3VySWR4KS5kYXRhKCdtYWdlbGxhbi10YXJnZXQnKSArICdcIl0nKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmRlZXBMaW5raW5nKXtcbiAgICAgIHZhciBoYXNoID0gdGhpcy4kYWN0aXZlWzBdLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgaWYod2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKXtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGhhc2gpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNjcm9sbFBvcyA9IHdpblBvcztcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIG1hZ2VsbGFuIGlzIGZpbmlzaGVkIHVwZGF0aW5nIHRvIHRoZSBuZXcgYWN0aXZlIGVsZW1lbnQuXG4gICAgICogQGV2ZW50IE1hZ2VsbGFuI3VwZGF0ZVxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigndXBkYXRlLnpmLm1hZ2VsbGFuJywgW3RoaXMuJGFjdGl2ZV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIE1hZ2VsbGFuIGFuZCByZXNldHMgdGhlIHVybCBvZiB0aGUgd2luZG93LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyIC56Zi5tYWdlbGxhbicpXG4gICAgICAgIC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3N9YCkucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICB2YXIgaGFzaCA9IHRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoaGFzaCwgJycpO1xuICAgIH1cblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5NYWdlbGxhbi5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgdGhlIGFuaW1hdGVkIHNjcm9sbGluZyBzaG91bGQgdGFrZSBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSA1MDBcbiAgICovXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiA1MDAsXG4gIC8qKlxuICAgKiBBbmltYXRpb24gc3R5bGUgdG8gdXNlIHdoZW4gc2Nyb2xsaW5nIGJldHdlZW4gbG9jYXRpb25zLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdlYXNlLWluLW91dCdcbiAgICovXG4gIGFuaW1hdGlvbkVhc2luZzogJ2xpbmVhcicsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIHRvIHVzZSBhcyBhIG1hcmtlciBmb3IgbG9jYXRpb24gY2hhbmdlcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSA1MFxuICAgKi9cbiAgdGhyZXNob2xkOiA1MCxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGFjdGl2ZSBsb2NhdGlvbnMgbGluayBvbiB0aGUgbWFnZWxsYW4gY29udGFpbmVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdhY3RpdmUnXG4gICAqL1xuICBhY3RpdmVDbGFzczogJ2FjdGl2ZScsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHNjcmlwdCB0byBtYW5pcHVsYXRlIHRoZSB1cmwgb2YgdGhlIGN1cnJlbnQgcGFnZSwgYW5kIGlmIHN1cHBvcnRlZCwgYWx0ZXIgdGhlIGhpc3RvcnkuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgZGVlcExpbmtpbmc6IGZhbHNlLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyB0byBvZmZzZXQgdGhlIHNjcm9sbCBvZiB0aGUgcGFnZSBvbiBpdGVtIGNsaWNrIGlmIHVzaW5nIGEgc3RpY2t5IG5hdiBiYXIuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjVcbiAgICovXG4gIGJhck9mZnNldDogMFxufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oTWFnZWxsYW4sICdNYWdlbGxhbicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogT2ZmQ2FudmFzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5vZmZjYW52YXNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqL1xuXG5jbGFzcyBPZmZDYW52YXMge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBvZmYtY2FudmFzIHdyYXBwZXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgT2ZmQ2FudmFzI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGluaXRpYWxpemUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgT2ZmQ2FudmFzLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy4kbGFzdFRyaWdnZXIgPSAkKCk7XG4gICAgdGhpcy4kdHJpZ2dlcnMgPSAkKCk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdPZmZDYW52YXMnKVxuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ09mZkNhbnZhcycsIHtcbiAgICAgICdFU0NBUEUnOiAnY2xvc2UnXG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgb2ZmLWNhbnZhcyB3cmFwcGVyIGJ5IGFkZGluZyB0aGUgZXhpdCBvdmVybGF5IChpZiBuZWVkZWQpLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignaWQnKTtcblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgLy8gRmluZCB0cmlnZ2VycyB0aGF0IGFmZmVjdCB0aGlzIGVsZW1lbnQgYW5kIGFkZCBhcmlhLWV4cGFuZGVkIHRvIHRoZW1cbiAgICB0aGlzLiR0cmlnZ2VycyA9ICQoZG9jdW1lbnQpXG4gICAgICAuZmluZCgnW2RhdGEtb3Blbj1cIicraWQrJ1wiXSwgW2RhdGEtY2xvc2U9XCInK2lkKydcIl0sIFtkYXRhLXRvZ2dsZT1cIicraWQrJ1wiXScpXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpXG4gICAgICAuYXR0cignYXJpYS1jb250cm9scycsIGlkKTtcblxuICAgIC8vIEFkZCBhIGNsb3NlIHRyaWdnZXIgb3ZlciB0aGUgYm9keSBpZiBuZWNlc3NhcnlcbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgaWYgKCQoJy5qcy1vZmYtY2FudmFzLWV4aXQnKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy4kZXhpdGVyID0gJCgnLmpzLW9mZi1jYW52YXMtZXhpdCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGV4aXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBleGl0ZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsICdqcy1vZmYtY2FudmFzLWV4aXQnKTtcbiAgICAgICAgJCgnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLmFwcGVuZChleGl0ZXIpO1xuXG4gICAgICAgIHRoaXMuJGV4aXRlciA9ICQoZXhpdGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCA9IHRoaXMub3B0aW9ucy5pc1JldmVhbGVkIHx8IG5ldyBSZWdFeHAodGhpcy5vcHRpb25zLnJldmVhbENsYXNzLCAnZycpLnRlc3QodGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5pc1JldmVhbGVkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMucmV2ZWFsT24gPSB0aGlzLm9wdGlvbnMucmV2ZWFsT24gfHwgdGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goLyhyZXZlYWwtZm9yLW1lZGl1bXxyZXZlYWwtZm9yLWxhcmdlKS9nKVswXS5zcGxpdCgnLScpWzJdO1xuICAgICAgdGhpcy5fc2V0TVFDaGVja2VyKCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lKSB7XG4gICAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvblRpbWUgPSBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCQoJ1tkYXRhLW9mZi1jYW52YXMtd3JhcHBlcl0nKVswXSkudHJhbnNpdGlvbkR1cmF0aW9uKSAqIDEwMDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIG9mZi1jYW52YXMgd3JhcHBlciBhbmQgdGhlIGV4aXQgb3ZlcmxheS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYub2ZmY2FudmFzJykub24oe1xuICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgJ2Nsb3NlLnpmLnRyaWdnZXInOiB0aGlzLmNsb3NlLmJpbmQodGhpcyksXG4gICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgJ2tleWRvd24uemYub2ZmY2FudmFzJzogdGhpcy5faGFuZGxlS2V5Ym9hcmQuYmluZCh0aGlzKVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgJiYgdGhpcy4kZXhpdGVyLmxlbmd0aCkge1xuICAgICAgdGhpcy4kZXhpdGVyLm9uKHsnY2xpY2suemYub2ZmY2FudmFzJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgZXZlbnQgbGlzdGVuZXIgZm9yIGVsZW1lbnRzIHRoYXQgd2lsbCByZXZlYWwgYXQgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRNUUNoZWNrZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICQod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QoX3RoaXMub3B0aW9ucy5yZXZlYWxPbikpIHtcbiAgICAgICAgX3RoaXMucmV2ZWFsKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMucmV2ZWFsKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KS5vbmUoJ2xvYWQuemYub2ZmY2FudmFzJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QoX3RoaXMub3B0aW9ucy5yZXZlYWxPbikpIHtcbiAgICAgICAgX3RoaXMucmV2ZWFsKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIHJldmVhbGluZy9oaWRpbmcgdGhlIG9mZi1jYW52YXMgYXQgYnJlYWtwb2ludHMsIG5vdCB0aGUgc2FtZSBhcyBvcGVuLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmV2ZWFsZWQgLSB0cnVlIGlmIGVsZW1lbnQgc2hvdWxkIGJlIHJldmVhbGVkLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHJldmVhbChpc1JldmVhbGVkKSB7XG4gICAgdmFyICRjbG9zZXIgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWNsb3NlXScpO1xuICAgIGlmIChpc1JldmVhbGVkKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICB0aGlzLmlzUmV2ZWFsZWQgPSB0cnVlO1xuICAgICAgLy8gaWYgKCF0aGlzLm9wdGlvbnMuZm9yY2VUb3ApIHtcbiAgICAgIC8vICAgdmFyIHNjcm9sbFBvcyA9IHBhcnNlSW50KHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAvLyAgIHRoaXMuJGVsZW1lbnRbMF0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBzY3JvbGxQb3MgKyAncHgpJztcbiAgICAgIC8vIH1cbiAgICAgIC8vIGlmICh0aGlzLm9wdGlvbnMuaXNTdGlja3kpIHsgdGhpcy5fc3RpY2soKTsgfVxuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ29wZW4uemYudHJpZ2dlciB0b2dnbGUuemYudHJpZ2dlcicpO1xuICAgICAgaWYgKCRjbG9zZXIubGVuZ3RoKSB7ICRjbG9zZXIuaGlkZSgpOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNSZXZlYWxlZCA9IGZhbHNlO1xuICAgICAgLy8gaWYgKHRoaXMub3B0aW9ucy5pc1N0aWNreSB8fCAhdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgICAvLyAgIHRoaXMuJGVsZW1lbnRbMF0uc3R5bGUudHJhbnNmb3JtID0gJyc7XG4gICAgICAvLyAgICQod2luZG93KS5vZmYoJ3Njcm9sbC56Zi5vZmZjYW52YXMnKTtcbiAgICAgIC8vIH1cbiAgICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgICAnb3Blbi56Zi50cmlnZ2VyJzogdGhpcy5vcGVuLmJpbmQodGhpcyksXG4gICAgICAgICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcylcbiAgICAgIH0pO1xuICAgICAgaWYgKCRjbG9zZXIubGVuZ3RoKSB7XG4gICAgICAgICRjbG9zZXIuc2hvdygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgb2ZmLWNhbnZhcyBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gRXZlbnQgb2JqZWN0IHBhc3NlZCBmcm9tIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gdHJpZ2dlciAtIGVsZW1lbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIG9mZi1jYW52YXMgdG8gb3Blbi5cbiAgICogQGZpcmVzIE9mZkNhbnZhcyNvcGVuZWRcbiAgICovXG4gIG9wZW4oZXZlbnQsIHRyaWdnZXIpIHtcbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpIHx8IHRoaXMuaXNSZXZlYWxlZCkgeyByZXR1cm47IH1cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAkYm9keSA9ICQoZG9jdW1lbnQuYm9keSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgICAkKCdib2R5Jykuc2Nyb2xsVG9wKDApO1xuICAgIH1cbiAgICAvLyB3aW5kb3cucGFnZVlPZmZzZXQgPSAwO1xuXG4gICAgLy8gaWYgKCF0aGlzLm9wdGlvbnMuZm9yY2VUb3ApIHtcbiAgICAvLyAgIHZhciBzY3JvbGxQb3MgPSBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgIC8vICAgdGhpcy4kZWxlbWVudFswXS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHNjcm9sbFBvcyArICdweCknO1xuICAgIC8vICAgaWYgKHRoaXMuJGV4aXRlci5sZW5ndGgpIHtcbiAgICAvLyAgICAgdGhpcy4kZXhpdGVyWzBdLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMCwnICsgc2Nyb2xsUG9zICsgJ3B4KSc7XG4gICAgLy8gICB9XG4gICAgLy8gfVxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIG9mZi1jYW52YXMgbWVudSBvcGVucy5cbiAgICAgKiBAZXZlbnQgT2ZmQ2FudmFzI29wZW5lZFxuICAgICAqL1xuXG4gICAgdmFyICR3cmFwcGVyID0gJCgnW2RhdGEtb2ZmLWNhbnZhcy13cmFwcGVyXScpO1xuICAgICR3cmFwcGVyLmFkZENsYXNzKCdpcy1vZmYtY2FudmFzLW9wZW4gaXMtb3Blbi0nKyBfdGhpcy5vcHRpb25zLnBvc2l0aW9uKTtcblxuICAgIF90aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy1vcGVuJylcblxuICAgICAgLy8gaWYgKF90aGlzLm9wdGlvbnMuaXNTdGlja3kpIHtcbiAgICAgIC8vICAgX3RoaXMuX3N0aWNrKCk7XG4gICAgICAvLyB9XG5cbiAgICB0aGlzLiR0cmlnZ2Vycy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJylcbiAgICAgICAgLnRyaWdnZXIoJ29wZW5lZC56Zi5vZmZjYW52YXMnKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gICAgICB0aGlzLiRleGl0ZXIuYWRkQ2xhc3MoJ2lzLXZpc2libGUnKTtcbiAgICB9XG5cbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgdGhpcy4kbGFzdFRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzKSB7XG4gICAgICAkd3JhcHBlci5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCR3cmFwcGVyKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmKF90aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpIHsgLy8gaGFuZGxlIGRvdWJsZSBjbGlja3NcbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMudHJhcEZvY3VzKSB7XG4gICAgICAkd3JhcHBlci5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCR3cmFwcGVyKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmKF90aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpIHsgLy8gaGFuZGxlIGRvdWJsZSBjbGlja3NcbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgICAgIF90aGlzLnRyYXBGb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJhcHMgZm9jdXMgd2l0aGluIHRoZSBvZmZjYW52YXMgb24gb3Blbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF90cmFwRm9jdXMoKSB7XG4gICAgdmFyIGZvY3VzYWJsZSA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KSxcbiAgICAgICAgZmlyc3QgPSBmb2N1c2FibGUuZXEoMCksXG4gICAgICAgIGxhc3QgPSBmb2N1c2FibGUuZXEoLTEpO1xuXG4gICAgZm9jdXNhYmxlLm9mZignLnpmLm9mZmNhbnZhcycpLm9uKCdrZXlkb3duLnpmLm9mZmNhbnZhcycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBrZXkgPSBGb3VuZGF0aW9uLktleWJvYXJkLnBhcnNlS2V5KGUpO1xuICAgICAgaWYgKGtleSA9PT0gJ1RBQicgJiYgZS50YXJnZXQgPT09IGxhc3RbMF0pIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBmaXJzdC5mb2N1cygpO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ1NISUZUX1RBQicgJiYgZS50YXJnZXQgPT09IGZpcnN0WzBdKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGFzdC5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgb2ZmY2FudmFzIHRvIGFwcGVhciBzdGlja3kgdXRpbGl6aW5nIHRyYW5zbGF0ZSBwcm9wZXJ0aWVzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgLy8gT2ZmQ2FudmFzLnByb3RvdHlwZS5fc3RpY2sgPSBmdW5jdGlvbigpIHtcbiAgLy8gICB2YXIgZWxTdHlsZSA9IHRoaXMuJGVsZW1lbnRbMF0uc3R5bGU7XG4gIC8vXG4gIC8vICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgLy8gICAgIHZhciBleGl0U3R5bGUgPSB0aGlzLiRleGl0ZXJbMF0uc3R5bGU7XG4gIC8vICAgfVxuICAvL1xuICAvLyAgICQod2luZG93KS5vbignc2Nyb2xsLnpmLm9mZmNhbnZhcycsIGZ1bmN0aW9uKGUpIHtcbiAgLy8gICAgIGNvbnNvbGUubG9nKGUpO1xuICAvLyAgICAgdmFyIHBhZ2VZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAvLyAgICAgZWxTdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHBhZ2VZICsgJ3B4KSc7XG4gIC8vICAgICBpZiAoZXhpdFN0eWxlICE9PSB1bmRlZmluZWQpIHsgZXhpdFN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMCwnICsgcGFnZVkgKyAncHgpJzsgfVxuICAvLyAgIH0pO1xuICAvLyAgIC8vIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc3R1Y2suemYub2ZmY2FudmFzJyk7XG4gIC8vIH07XG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gb3B0aW9uYWwgY2IgdG8gZmlyZSBhZnRlciBjbG9zdXJlLlxuICAgKiBAZmlyZXMgT2ZmQ2FudmFzI2Nsb3NlZFxuICAgKi9cbiAgY2xvc2UoY2IpIHtcbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHsgcmV0dXJuOyB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gIEZvdW5kYXRpb24uTW92ZSh0aGlzLm9wdGlvbnMudHJhbnNpdGlvblRpbWUsIHRoaXMuJGVsZW1lbnQsIGZ1bmN0aW9uKCkge1xuICAgICQoJ1tkYXRhLW9mZi1jYW52YXMtd3JhcHBlcl0nKS5yZW1vdmVDbGFzcyhgaXMtb2ZmLWNhbnZhcy1vcGVuIGlzLW9wZW4tJHtfdGhpcy5vcHRpb25zLnBvc2l0aW9ufWApO1xuICAgIF90aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG4gICAgICAvLyBGb3VuZGF0aW9uLl9yZWZsb3coKTtcbiAgICAvLyB9KTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbnMuXG4gICAgICAgKiBAZXZlbnQgT2ZmQ2FudmFzI2Nsb3NlZFxuICAgICAgICovXG4gICAgICAgIC50cmlnZ2VyKCdjbG9zZWQuemYub2ZmY2FudmFzJyk7XG4gICAgLy8gaWYgKF90aGlzLm9wdGlvbnMuaXNTdGlja3kgfHwgIV90aGlzLm9wdGlvbnMuZm9yY2VUb3ApIHtcbiAgICAvLyAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgLy8gICAgIF90aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgIC8vICAgICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYub2ZmY2FudmFzJyk7XG4gICAgLy8gICB9LCB0aGlzLm9wdGlvbnMudHJhbnNpdGlvblRpbWUpO1xuICAgIC8vIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgdGhpcy4kZXhpdGVyLnJlbW92ZUNsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgfVxuXG4gICAgdGhpcy4kdHJpZ2dlcnMuYXR0cignYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMudHJhcEZvY3VzKSB7XG4gICAgICAkKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykucmVtb3ZlQXR0cigndGFiaW5kZXgnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgb2ZmLWNhbnZhcyBtZW51IG9wZW4gb3IgY2xvc2VkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gRXZlbnQgb2JqZWN0IHBhc3NlZCBmcm9tIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gdHJpZ2dlciAtIGVsZW1lbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIG9mZi1jYW52YXMgdG8gb3Blbi5cbiAgICovXG4gIHRvZ2dsZShldmVudCwgdHJpZ2dlcikge1xuICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpIHtcbiAgICAgIHRoaXMuY2xvc2UoZXZlbnQsIHRyaWdnZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMub3BlbihldmVudCwgdHJpZ2dlcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMga2V5Ym9hcmQgaW5wdXQgd2hlbiBkZXRlY3RlZC4gV2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLCB0aGUgb2ZmLWNhbnZhcyBtZW51IGNsb3NlcywgYW5kIGZvY3VzIGlzIHJlc3RvcmVkIHRvIHRoZSBlbGVtZW50IHRoYXQgb3BlbmVkIHRoZSBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9oYW5kbGVLZXlib2FyZChlKSB7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ09mZkNhbnZhcycsIHtcbiAgICAgIGNsb3NlOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgdGhpcy4kbGFzdFRyaWdnZXIuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgICAgaGFuZGxlZDogKCkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIG9mZmNhbnZhcyBwbHVnaW4uXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmNsb3NlKCk7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyIC56Zi5vZmZjYW52YXMnKTtcbiAgICB0aGlzLiRleGl0ZXIub2ZmKCcuemYub2ZmY2FudmFzJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuT2ZmQ2FudmFzLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQWxsb3cgdGhlIHVzZXIgdG8gY2xpY2sgb3V0c2lkZSBvZiB0aGUgbWVudSB0byBjbG9zZSBpdC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG5cbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIGluIG1zIHRoZSBvcGVuIGFuZCBjbG9zZSB0cmFuc2l0aW9uIHJlcXVpcmVzLiBJZiBub25lIHNlbGVjdGVkLCBwdWxscyBmcm9tIGJvZHkgc3R5bGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuICB0cmFuc2l0aW9uVGltZTogMCxcblxuICAvKipcbiAgICogRGlyZWN0aW9uIHRoZSBvZmZjYW52YXMgb3BlbnMgZnJvbS4gRGV0ZXJtaW5lcyBjbGFzcyBhcHBsaWVkIHRvIGJvZHkuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgbGVmdFxuICAgKi9cbiAgcG9zaXRpb246ICdsZWZ0JyxcblxuICAvKipcbiAgICogRm9yY2UgdGhlIHBhZ2UgdG8gc2Nyb2xsIHRvIHRvcCBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGZvcmNlVG9wOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgb2ZmY2FudmFzIHRvIHJlbWFpbiBvcGVuIGZvciBjZXJ0YWluIGJyZWFrcG9pbnRzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBpc1JldmVhbGVkOiBmYWxzZSxcblxuICAvKipcbiAgICogQnJlYWtwb2ludCBhdCB3aGljaCB0byByZXZlYWwuIEpTIHdpbGwgdXNlIGEgUmVnRXhwIHRvIHRhcmdldCBzdGFuZGFyZCBjbGFzc2VzLCBpZiBjaGFuZ2luZyBjbGFzc25hbWVzLCBwYXNzIHlvdXIgY2xhc3Mgd2l0aCB0aGUgYHJldmVhbENsYXNzYCBvcHRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgcmV2ZWFsLWZvci1sYXJnZVxuICAgKi9cbiAgcmV2ZWFsT246IG51bGwsXG5cbiAgLyoqXG4gICAqIEZvcmNlIGZvY3VzIHRvIHRoZSBvZmZjYW52YXMgb24gb3Blbi4gSWYgdHJ1ZSwgd2lsbCBmb2N1cyB0aGUgb3BlbmluZyB0cmlnZ2VyIG9uIGNsb3NlLiBTZXRzIHRhYmluZGV4IG9mIFtkYXRhLW9mZi1jYW52YXMtY29udGVudF0gdG8gLTEgZm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBDbGFzcyB1c2VkIHRvIGZvcmNlIGFuIG9mZmNhbnZhcyB0byByZW1haW4gb3Blbi4gRm91bmRhdGlvbiBkZWZhdWx0cyBmb3IgdGhpcyBhcmUgYHJldmVhbC1mb3ItbGFyZ2VgICYgYHJldmVhbC1mb3ItbWVkaXVtYC5cbiAgICogQG9wdGlvblxuICAgKiBUT0RPIGltcHJvdmUgdGhlIHJlZ2V4IHRlc3RpbmcgZm9yIHRoaXMuXG4gICAqIEBleGFtcGxlIHJldmVhbC1mb3ItbGFyZ2VcbiAgICovXG4gIHJldmVhbENsYXNzOiAncmV2ZWFsLWZvci0nLFxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBvcHRpb25hbCBmb2N1cyB0cmFwcGluZyB3aGVuIG9wZW5pbmcgYW4gb2ZmY2FudmFzLiBTZXRzIHRhYmluZGV4IG9mIFtkYXRhLW9mZi1jYW52YXMtY29udGVudF0gdG8gLTEgZm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgdHJhcEZvY3VzOiBmYWxzZVxufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oT2ZmQ2FudmFzLCAnT2ZmQ2FudmFzJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBPcmJpdCBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ub3JiaXRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRpbWVyQW5kSW1hZ2VMb2FkZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudG91Y2hcbiAqL1xuXG5jbGFzcyBPcmJpdCB7XG4gIC8qKlxuICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gb3JiaXQgY2Fyb3VzZWwuXG4gICogQGNsYXNzXG4gICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBPcmJpdCBDYXJvdXNlbC5cbiAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpe1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBPcmJpdC5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnT3JiaXQnKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdPcmJpdCcsIHtcbiAgICAgICdsdHInOiB7XG4gICAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnXG4gICAgICB9LFxuICAgICAgJ3J0bCc6IHtcbiAgICAgICAgJ0FSUk9XX0xFRlQnOiAnbmV4dCcsXG4gICAgICAgICdBUlJPV19SSUdIVCc6ICdwcmV2aW91cydcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4gYnkgY3JlYXRpbmcgalF1ZXJ5IGNvbGxlY3Rpb25zLCBzZXR0aW5nIGF0dHJpYnV0ZXMsIGFuZCBzdGFydGluZyB0aGUgYW5pbWF0aW9uLlxuICAqIEBmdW5jdGlvblxuICAqIEBwcml2YXRlXG4gICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuJHdyYXBwZXIgPSB0aGlzLiRlbGVtZW50LmZpbmQoYC4ke3RoaXMub3B0aW9ucy5jb250YWluZXJDbGFzc31gKTtcbiAgICB0aGlzLiRzbGlkZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoYC4ke3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzfWApO1xuICAgIHZhciAkaW1hZ2VzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKSxcbiAgICBpbml0QWN0aXZlID0gdGhpcy4kc2xpZGVzLmZpbHRlcignLmlzLWFjdGl2ZScpO1xuXG4gICAgaWYgKCFpbml0QWN0aXZlLmxlbmd0aCkge1xuICAgICAgdGhpcy4kc2xpZGVzLmVxKDApLmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy51c2VNVUkpIHtcbiAgICAgIHRoaXMuJHNsaWRlcy5hZGRDbGFzcygnbm8tbW90aW9udWknKTtcbiAgICB9XG5cbiAgICBpZiAoJGltYWdlcy5sZW5ndGgpIHtcbiAgICAgIEZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQoJGltYWdlcywgdGhpcy5fcHJlcGFyZUZvck9yYml0LmJpbmQodGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wcmVwYXJlRm9yT3JiaXQoKTsvL2hlaGVcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmJ1bGxldHMpIHtcbiAgICAgIHRoaXMuX2xvYWRCdWxsZXRzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9QbGF5ICYmIHRoaXMuJHNsaWRlcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLmdlb1N5bmMoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmFjY2Vzc2libGUpIHsgLy8gYWxsb3cgd3JhcHBlciB0byBiZSBmb2N1c2FibGUgdG8gZW5hYmxlIGFycm93IG5hdmlnYXRpb25cbiAgICAgIHRoaXMuJHdyYXBwZXIuYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBDcmVhdGVzIGEgalF1ZXJ5IGNvbGxlY3Rpb24gb2YgYnVsbGV0cywgaWYgdGhleSBhcmUgYmVpbmcgdXNlZC5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICBfbG9hZEJ1bGxldHMoKSB7XG4gICAgdGhpcy4kYnVsbGV0cyA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLmJveE9mQnVsbGV0c31gKS5maW5kKCdidXR0b24nKTtcbiAgfVxuXG4gIC8qKlxuICAqIFNldHMgYSBgdGltZXJgIG9iamVjdCBvbiB0aGUgb3JiaXQsIGFuZCBzdGFydHMgdGhlIGNvdW50ZXIgZm9yIHRoZSBuZXh0IHNsaWRlLlxuICAqIEBmdW5jdGlvblxuICAqL1xuICBnZW9TeW5jKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy50aW1lciA9IG5ldyBGb3VuZGF0aW9uLlRpbWVyKFxuICAgICAgdGhpcy4kZWxlbWVudCxcbiAgICAgIHtcbiAgICAgICAgZHVyYXRpb246IHRoaXMub3B0aW9ucy50aW1lckRlbGF5LFxuICAgICAgICBpbmZpbml0ZTogZmFsc2VcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB0aGlzLnRpbWVyLnN0YXJ0KCk7XG4gIH1cblxuICAvKipcbiAgKiBTZXRzIHdyYXBwZXIgYW5kIHNsaWRlIGhlaWdodHMgZm9yIHRoZSBvcmJpdC5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICBfcHJlcGFyZUZvck9yYml0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5fc2V0V3JhcHBlckhlaWdodChmdW5jdGlvbihtYXgpe1xuICAgICAgX3RoaXMuX3NldFNsaWRlSGVpZ2h0KG1heCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBDYWx1bGF0ZXMgdGhlIGhlaWdodCBvZiBlYWNoIHNsaWRlIGluIHRoZSBjb2xsZWN0aW9uLCBhbmQgdXNlcyB0aGUgdGFsbGVzdCBvbmUgZm9yIHRoZSB3cmFwcGVyIGhlaWdodC5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIHdoZW4gY29tcGxldGUuXG4gICovXG4gIF9zZXRXcmFwcGVySGVpZ2h0KGNiKSB7Ly9yZXdyaXRlIHRoaXMgdG8gYGZvcmAgbG9vcFxuICAgIHZhciBtYXggPSAwLCB0ZW1wLCBjb3VudGVyID0gMDtcblxuICAgIHRoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdGVtcCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgJCh0aGlzKS5hdHRyKCdkYXRhLXNsaWRlJywgY291bnRlcik7XG5cbiAgICAgIGlmIChjb3VudGVyKSB7Ly9pZiBub3QgdGhlIGZpcnN0IHNsaWRlLCBzZXQgY3NzIHBvc2l0aW9uIGFuZCBkaXNwbGF5IHByb3BlcnR5XG4gICAgICAgICQodGhpcykuY3NzKHsncG9zaXRpb24nOiAncmVsYXRpdmUnLCAnZGlzcGxheSc6ICdub25lJ30pO1xuICAgICAgfVxuICAgICAgbWF4ID0gdGVtcCA+IG1heCA/IHRlbXAgOiBtYXg7XG4gICAgICBjb3VudGVyKys7XG4gICAgfSk7XG5cbiAgICBpZiAoY291bnRlciA9PT0gdGhpcy4kc2xpZGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy4kd3JhcHBlci5jc3MoeydoZWlnaHQnOiBtYXh9KTsgLy9vbmx5IGNoYW5nZSB0aGUgd3JhcHBlciBoZWlnaHQgcHJvcGVydHkgb25jZS5cbiAgICAgIGNiKG1heCk7IC8vZmlyZSBjYWxsYmFjayB3aXRoIG1heCBoZWlnaHQgZGltZW5zaW9uLlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIFNldHMgdGhlIG1heC1oZWlnaHQgb2YgZWFjaCBzbGlkZS5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICBfc2V0U2xpZGVIZWlnaHQoaGVpZ2h0KSB7XG4gICAgdGhpcy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAkKHRoaXMpLmNzcygnbWF4LWhlaWdodCcsIGhlaWdodCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byBiYXNpY2FsbHkgZXZlcnl0aGluZyB3aXRoaW4gdGhlIGVsZW1lbnQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAvLyoqTm93IHVzaW5nIGN1c3RvbSBldmVudCAtIHRoYW5rcyB0bzoqKlxuICAgIC8vKiogICAgICBZb2hhaSBBcmFyYXQgb2YgVG9yb250byAgICAgICoqXG4gICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgICBpZiAodGhpcy4kc2xpZGVzLmxlbmd0aCA+IDEpIHtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zd2lwZSkge1xuICAgICAgICB0aGlzLiRzbGlkZXMub2ZmKCdzd2lwZWxlZnQuemYub3JiaXQgc3dpcGVyaWdodC56Zi5vcmJpdCcpXG4gICAgICAgIC5vbignc3dpcGVsZWZ0LnpmLm9yYml0JywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHRydWUpO1xuICAgICAgICB9KS5vbignc3dpcGVyaWdodC56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSkge1xuICAgICAgICB0aGlzLiRzbGlkZXMub24oJ2NsaWNrLnpmLm9yYml0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuZGF0YSgnY2xpY2tlZE9uJywgX3RoaXMuJGVsZW1lbnQuZGF0YSgnY2xpY2tlZE9uJykgPyBmYWxzZSA6IHRydWUpO1xuICAgICAgICAgIF90aGlzLnRpbWVyW190aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpID8gJ3BhdXNlJyA6ICdzdGFydCddKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucGF1c2VPbkhvdmVyKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2VlbnRlci56Zi5vcmJpdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMudGltZXIucGF1c2UoKTtcbiAgICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5vcmJpdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy4kZWxlbWVudC5kYXRhKCdjbGlja2VkT24nKSkge1xuICAgICAgICAgICAgICBfdGhpcy50aW1lci5zdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubmF2QnV0dG9ucykge1xuICAgICAgICB2YXIgJGNvbnRyb2xzID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMubmV4dENsYXNzfSwgLiR7dGhpcy5vcHRpb25zLnByZXZDbGFzc31gKTtcbiAgICAgICAgJGNvbnRyb2xzLmF0dHIoJ3RhYmluZGV4JywgMClcbiAgICAgICAgLy9hbHNvIG5lZWQgdG8gaGFuZGxlIGVudGVyL3JldHVybiBhbmQgc3BhY2ViYXIga2V5IHByZXNzZXNcbiAgICAgICAgLm9uKCdjbGljay56Zi5vcmJpdCB0b3VjaGVuZC56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpe1xuXHQgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSgkKHRoaXMpLmhhc0NsYXNzKF90aGlzLm9wdGlvbnMubmV4dENsYXNzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmJ1bGxldHMpIHtcbiAgICAgICAgdGhpcy4kYnVsbGV0cy5vbignY2xpY2suemYub3JiaXQgdG91Y2hlbmQuemYub3JiaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoL2lzLWFjdGl2ZS9nLnRlc3QodGhpcy5jbGFzc05hbWUpKSB7IHJldHVybiBmYWxzZTsgfS8vaWYgdGhpcyBpcyBhY3RpdmUsIGtpY2sgb3V0IG9mIGZ1bmN0aW9uLlxuICAgICAgICAgIHZhciBpZHggPSAkKHRoaXMpLmRhdGEoJ3NsaWRlJyksXG4gICAgICAgICAgbHRyID0gaWR4ID4gX3RoaXMuJHNsaWRlcy5maWx0ZXIoJy5pcy1hY3RpdmUnKS5kYXRhKCdzbGlkZScpLFxuICAgICAgICAgICRzbGlkZSA9IF90aGlzLiRzbGlkZXMuZXEoaWR4KTtcblxuICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKGx0ciwgJHNsaWRlLCBpZHgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hY2Nlc3NpYmxlKSB7XG4gICAgICAgIHRoaXMuJHdyYXBwZXIuYWRkKHRoaXMuJGJ1bGxldHMpLm9uKCdrZXlkb3duLnpmLm9yYml0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnT3JiaXQnLCB7XG4gICAgICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUodHJ1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShmYWxzZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7IC8vIGlmIGJ1bGxldCBpcyBmb2N1c2VkLCBtYWtlIHN1cmUgZm9jdXMgbW92ZXNcbiAgICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKF90aGlzLiRidWxsZXRzKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLiRidWxsZXRzLmZpbHRlcignLmlzLWFjdGl2ZScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogQ2hhbmdlcyB0aGUgY3VycmVudCBzbGlkZSB0byBhIG5ldyBvbmUuXG4gICogQGZ1bmN0aW9uXG4gICogQHBhcmFtIHtCb29sZWFufSBpc0xUUiAtIGZsYWcgaWYgdGhlIHNsaWRlIHNob3VsZCBtb3ZlIGxlZnQgdG8gcmlnaHQuXG4gICogQHBhcmFtIHtqUXVlcnl9IGNob3NlblNsaWRlIC0gdGhlIGpRdWVyeSBlbGVtZW50IG9mIHRoZSBzbGlkZSB0byBzaG93IG5leHQsIGlmIG9uZSBpcyBzZWxlY3RlZC5cbiAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gdGhlIGluZGV4IG9mIHRoZSBuZXcgc2xpZGUgaW4gaXRzIGNvbGxlY3Rpb24sIGlmIG9uZSBjaG9zZW4uXG4gICogQGZpcmVzIE9yYml0I3NsaWRlY2hhbmdlXG4gICovXG4gIGNoYW5nZVNsaWRlKGlzTFRSLCBjaG9zZW5TbGlkZSwgaWR4KSB7XG4gICAgdmFyICRjdXJTbGlkZSA9IHRoaXMuJHNsaWRlcy5maWx0ZXIoJy5pcy1hY3RpdmUnKS5lcSgwKTtcblxuICAgIGlmICgvbXVpL2cudGVzdCgkY3VyU2xpZGVbMF0uY2xhc3NOYW1lKSkgeyByZXR1cm4gZmFsc2U7IH0gLy9pZiB0aGUgc2xpZGUgaXMgY3VycmVudGx5IGFuaW1hdGluZywga2ljayBvdXQgb2YgdGhlIGZ1bmN0aW9uXG5cbiAgICB2YXIgJGZpcnN0U2xpZGUgPSB0aGlzLiRzbGlkZXMuZmlyc3QoKSxcbiAgICAkbGFzdFNsaWRlID0gdGhpcy4kc2xpZGVzLmxhc3QoKSxcbiAgICBkaXJJbiA9IGlzTFRSID8gJ1JpZ2h0JyA6ICdMZWZ0JyxcbiAgICBkaXJPdXQgPSBpc0xUUiA/ICdMZWZ0JyA6ICdSaWdodCcsXG4gICAgX3RoaXMgPSB0aGlzLFxuICAgICRuZXdTbGlkZTtcblxuICAgIGlmICghY2hvc2VuU2xpZGUpIHsgLy9tb3N0IG9mIHRoZSB0aW1lLCB0aGlzIHdpbGwgYmUgYXV0byBwbGF5ZWQgb3IgY2xpY2tlZCBmcm9tIHRoZSBuYXZCdXR0b25zLlxuICAgICAgJG5ld1NsaWRlID0gaXNMVFIgPyAvL2lmIHdyYXBwaW5nIGVuYWJsZWQsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBpcyBhIGBuZXh0YCBvciBgcHJldmAgc2libGluZywgaWYgbm90LCBzZWxlY3QgdGhlIGZpcnN0IG9yIGxhc3Qgc2xpZGUgdG8gZmlsbCBpbi4gaWYgd3JhcHBpbmcgbm90IGVuYWJsZWQsIGF0dGVtcHQgdG8gc2VsZWN0IGBuZXh0YCBvciBgcHJldmAsIGlmIHRoZXJlJ3Mgbm90aGluZyB0aGVyZSwgdGhlIGZ1bmN0aW9uIHdpbGwga2ljayBvdXQgb24gbmV4dCBzdGVwLiBDUkFaWSBORVNURUQgVEVSTkFSSUVTISEhISFcbiAgICAgICh0aGlzLm9wdGlvbnMuaW5maW5pdGVXcmFwID8gJGN1clNsaWRlLm5leHQoYC4ke3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzfWApLmxlbmd0aCA/ICRjdXJTbGlkZS5uZXh0KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKSA6ICRmaXJzdFNsaWRlIDogJGN1clNsaWRlLm5leHQoYC4ke3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzfWApKS8vcGljayBuZXh0IHNsaWRlIGlmIG1vdmluZyBsZWZ0IHRvIHJpZ2h0XG4gICAgICA6XG4gICAgICAodGhpcy5vcHRpb25zLmluZmluaXRlV3JhcCA/ICRjdXJTbGlkZS5wcmV2KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKS5sZW5ndGggPyAkY3VyU2xpZGUucHJldihgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkgOiAkbGFzdFNsaWRlIDogJGN1clNsaWRlLnByZXYoYC4ke3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzfWApKTsvL3BpY2sgcHJldiBzbGlkZSBpZiBtb3ZpbmcgcmlnaHQgdG8gbGVmdFxuICAgIH0gZWxzZSB7XG4gICAgICAkbmV3U2xpZGUgPSBjaG9zZW5TbGlkZTtcbiAgICB9XG5cbiAgICBpZiAoJG5ld1NsaWRlLmxlbmd0aCkge1xuICAgICAgLyoqXG4gICAgICAqIFRyaWdnZXJzIGJlZm9yZSB0aGUgbmV4dCBzbGlkZSBzdGFydHMgYW5pbWF0aW5nIGluIGFuZCBvbmx5IGlmIGEgbmV4dCBzbGlkZSBoYXMgYmVlbiBmb3VuZC5cbiAgICAgICogQGV2ZW50IE9yYml0I2JlZm9yZXNsaWRlY2hhbmdlXG4gICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdiZWZvcmVzbGlkZWNoYW5nZS56Zi5vcmJpdCcsIFskY3VyU2xpZGUsICRuZXdTbGlkZV0pO1xuICAgICAgXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmJ1bGxldHMpIHtcbiAgICAgICAgaWR4ID0gaWR4IHx8IHRoaXMuJHNsaWRlcy5pbmRleCgkbmV3U2xpZGUpOyAvL2dyYWIgaW5kZXggdG8gdXBkYXRlIGJ1bGxldHNcbiAgICAgICAgdGhpcy5fdXBkYXRlQnVsbGV0cyhpZHgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnVzZU1VSSkge1xuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4oXG4gICAgICAgICAgJG5ld1NsaWRlLmFkZENsYXNzKCdpcy1hY3RpdmUnKS5jc3Moeydwb3NpdGlvbic6ICdhYnNvbHV0ZScsICd0b3AnOiAwfSksXG4gICAgICAgICAgdGhpcy5vcHRpb25zW2BhbmltSW5Gcm9tJHtkaXJJbn1gXSxcbiAgICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgICAgJG5ld1NsaWRlLmNzcyh7J3Bvc2l0aW9uJzogJ3JlbGF0aXZlJywgJ2Rpc3BsYXknOiAnYmxvY2snfSlcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQoXG4gICAgICAgICAgJGN1clNsaWRlLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKSxcbiAgICAgICAgICB0aGlzLm9wdGlvbnNbYGFuaW1PdXRUbyR7ZGlyT3V0fWBdLFxuICAgICAgICAgIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkY3VyU2xpZGUucmVtb3ZlQXR0cignYXJpYS1saXZlJyk7XG4gICAgICAgICAgICBpZihfdGhpcy5vcHRpb25zLmF1dG9QbGF5ICYmICFfdGhpcy50aW1lci5pc1BhdXNlZCl7XG4gICAgICAgICAgICAgIF90aGlzLnRpbWVyLnJlc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vZG8gc3R1ZmY/XG4gICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkY3VyU2xpZGUucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZSBpcy1pbicpLnJlbW92ZUF0dHIoJ2FyaWEtbGl2ZScpLmhpZGUoKTtcbiAgICAgICAgJG5ld1NsaWRlLmFkZENsYXNzKCdpcy1hY3RpdmUgaXMtaW4nKS5hdHRyKCdhcmlhLWxpdmUnLCAncG9saXRlJykuc2hvdygpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9QbGF5ICYmICF0aGlzLnRpbWVyLmlzUGF1c2VkKSB7XG4gICAgICAgICAgdGhpcy50aW1lci5yZXN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAvKipcbiAgICAqIFRyaWdnZXJzIHdoZW4gdGhlIHNsaWRlIGhhcyBmaW5pc2hlZCBhbmltYXRpbmcgaW4uXG4gICAgKiBAZXZlbnQgT3JiaXQjc2xpZGVjaGFuZ2VcbiAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzbGlkZWNoYW5nZS56Zi5vcmJpdCcsIFskbmV3U2xpZGVdKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBVcGRhdGVzIHRoZSBhY3RpdmUgc3RhdGUgb2YgdGhlIGJ1bGxldHMsIGlmIGRpc3BsYXllZC5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqIEBwYXJhbSB7TnVtYmVyfSBpZHggLSB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgc2xpZGUuXG4gICovXG4gIF91cGRhdGVCdWxsZXRzKGlkeCkge1xuICAgIHZhciAkb2xkQnVsbGV0ID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuYm94T2ZCdWxsZXRzfWApXG4gICAgLmZpbmQoJy5pcy1hY3RpdmUnKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJykuYmx1cigpLFxuICAgIHNwYW4gPSAkb2xkQnVsbGV0LmZpbmQoJ3NwYW46bGFzdCcpLmRldGFjaCgpLFxuICAgICRuZXdCdWxsZXQgPSB0aGlzLiRidWxsZXRzLmVxKGlkeCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLmFwcGVuZChzcGFuKTtcbiAgfVxuXG4gIC8qKlxuICAqIERlc3Ryb3lzIHRoZSBjYXJvdXNlbCBhbmQgaGlkZXMgdGhlIGVsZW1lbnQuXG4gICogQGZ1bmN0aW9uXG4gICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5vcmJpdCcpLmZpbmQoJyonKS5vZmYoJy56Zi5vcmJpdCcpLmVuZCgpLmhpZGUoKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuT3JiaXQuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAqIFRlbGxzIHRoZSBKUyB0byBsb29rIGZvciBhbmQgbG9hZEJ1bGxldHMuXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgYnVsbGV0czogdHJ1ZSxcbiAgLyoqXG4gICogVGVsbHMgdGhlIEpTIHRvIGFwcGx5IGV2ZW50IGxpc3RlbmVycyB0byBuYXYgYnV0dG9uc1xuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIG5hdkJ1dHRvbnM6IHRydWUsXG4gIC8qKlxuICAqIG1vdGlvbi11aSBhbmltYXRpb24gY2xhc3MgdG8gYXBwbHlcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ3NsaWRlLWluLXJpZ2h0J1xuICAqL1xuICBhbmltSW5Gcm9tUmlnaHQ6ICdzbGlkZS1pbi1yaWdodCcsXG4gIC8qKlxuICAqIG1vdGlvbi11aSBhbmltYXRpb24gY2xhc3MgdG8gYXBwbHlcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ3NsaWRlLW91dC1yaWdodCdcbiAgKi9cbiAgYW5pbU91dFRvUmlnaHQ6ICdzbGlkZS1vdXQtcmlnaHQnLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdzbGlkZS1pbi1sZWZ0J1xuICAqXG4gICovXG4gIGFuaW1JbkZyb21MZWZ0OiAnc2xpZGUtaW4tbGVmdCcsXG4gIC8qKlxuICAqIG1vdGlvbi11aSBhbmltYXRpb24gY2xhc3MgdG8gYXBwbHlcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ3NsaWRlLW91dC1sZWZ0J1xuICAqL1xuICBhbmltT3V0VG9MZWZ0OiAnc2xpZGUtb3V0LWxlZnQnLFxuICAvKipcbiAgKiBBbGxvd3MgT3JiaXQgdG8gYXV0b21hdGljYWxseSBhbmltYXRlIG9uIHBhZ2UgbG9hZC5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICBhdXRvUGxheTogdHJ1ZSxcbiAgLyoqXG4gICogQW1vdW50IG9mIHRpbWUsIGluIG1zLCBiZXR3ZWVuIHNsaWRlIHRyYW5zaXRpb25zXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIDUwMDBcbiAgKi9cbiAgdGltZXJEZWxheTogNTAwMCxcbiAgLyoqXG4gICogQWxsb3dzIE9yYml0IHRvIGluZmluaXRlbHkgbG9vcCB0aHJvdWdoIHRoZSBzbGlkZXNcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICBpbmZpbml0ZVdyYXA6IHRydWUsXG4gIC8qKlxuICAqIEFsbG93cyB0aGUgT3JiaXQgc2xpZGVzIHRvIGJpbmQgdG8gc3dpcGUgZXZlbnRzIGZvciBtb2JpbGUsIHJlcXVpcmVzIGFuIGFkZGl0aW9uYWwgdXRpbCBsaWJyYXJ5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgc3dpcGU6IHRydWUsXG4gIC8qKlxuICAqIEFsbG93cyB0aGUgdGltaW5nIGZ1bmN0aW9uIHRvIHBhdXNlIGFuaW1hdGlvbiBvbiBob3Zlci5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gIC8qKlxuICAqIEFsbG93cyBPcmJpdCB0byBiaW5kIGtleWJvYXJkIGV2ZW50cyB0byB0aGUgc2xpZGVyLCB0byBhbmltYXRlIGZyYW1lcyB3aXRoIGFycm93IGtleXNcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICBhY2Nlc3NpYmxlOiB0cnVlLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIgb2YgT3JiaXRcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LWNvbnRhaW5lcidcbiAgKi9cbiAgY29udGFpbmVyQ2xhc3M6ICdvcmJpdC1jb250YWluZXInLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIGluZGl2aWR1YWwgc2xpZGVzLlxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnb3JiaXQtc2xpZGUnXG4gICovXG4gIHNsaWRlQ2xhc3M6ICdvcmJpdC1zbGlkZScsXG4gIC8qKlxuICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGJ1bGxldCBjb250YWluZXIuIFlvdSdyZSB3ZWxjb21lLlxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnb3JiaXQtYnVsbGV0cydcbiAgKi9cbiAgYm94T2ZCdWxsZXRzOiAnb3JiaXQtYnVsbGV0cycsXG4gIC8qKlxuICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGBuZXh0YCBuYXZpZ2F0aW9uIGJ1dHRvbi5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LW5leHQnXG4gICovXG4gIG5leHRDbGFzczogJ29yYml0LW5leHQnLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBgcHJldmlvdXNgIG5hdmlnYXRpb24gYnV0dG9uLlxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnb3JiaXQtcHJldmlvdXMnXG4gICovXG4gIHByZXZDbGFzczogJ29yYml0LXByZXZpb3VzJyxcbiAgLyoqXG4gICogQm9vbGVhbiB0byBmbGFnIHRoZSBqcyB0byB1c2UgbW90aW9uIHVpIGNsYXNzZXMgb3Igbm90LiBEZWZhdWx0IHRvIHRydWUgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXR5LlxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIHVzZU1VSTogdHJ1ZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE9yYml0LCAnT3JiaXQnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFJlc3BvbnNpdmVNZW51IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlTWVudVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmFjY29yZGlvbk1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuZHJpbGxkb3duXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmRyb3Bkb3duLW1lbnVcbiAqL1xuXG5jbGFzcyBSZXNwb25zaXZlTWVudSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgcmVzcG9uc2l2ZSBtZW51LlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIFJlc3BvbnNpdmVNZW51I2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhIGRyb3Bkb3duIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLnJ1bGVzID0gdGhpcy4kZWxlbWVudC5kYXRhKCdyZXNwb25zaXZlLW1lbnUnKTtcbiAgICB0aGlzLmN1cnJlbnRNcSA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbnVsbDtcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1Jlc3BvbnNpdmVNZW51Jyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIE1lbnUgYnkgcGFyc2luZyB0aGUgY2xhc3NlcyBmcm9tIHRoZSAnZGF0YS1SZXNwb25zaXZlTWVudScgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIC8vIFRoZSBmaXJzdCB0aW1lIGFuIEludGVyY2hhbmdlIHBsdWdpbiBpcyBpbml0aWFsaXplZCwgdGhpcy5ydWxlcyBpcyBjb252ZXJ0ZWQgZnJvbSBhIHN0cmluZyBvZiBcImNsYXNzZXNcIiB0byBhbiBvYmplY3Qgb2YgcnVsZXNcbiAgICBpZiAodHlwZW9mIHRoaXMucnVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBsZXQgcnVsZXNUcmVlID0ge307XG5cbiAgICAgIC8vIFBhcnNlIHJ1bGVzIGZyb20gXCJjbGFzc2VzXCIgcHVsbGVkIGZyb20gZGF0YSBhdHRyaWJ1dGVcbiAgICAgIGxldCBydWxlcyA9IHRoaXMucnVsZXMuc3BsaXQoJyAnKTtcblxuICAgICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGV2ZXJ5IHJ1bGUgZm91bmRcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHJ1bGUgPSBydWxlc1tpXS5zcGxpdCgnLScpO1xuICAgICAgICBsZXQgcnVsZVNpemUgPSBydWxlLmxlbmd0aCA+IDEgPyBydWxlWzBdIDogJ3NtYWxsJztcbiAgICAgICAgbGV0IHJ1bGVQbHVnaW4gPSBydWxlLmxlbmd0aCA+IDEgPyBydWxlWzFdIDogcnVsZVswXTtcblxuICAgICAgICBpZiAoTWVudVBsdWdpbnNbcnVsZVBsdWdpbl0gIT09IG51bGwpIHtcbiAgICAgICAgICBydWxlc1RyZWVbcnVsZVNpemVdID0gTWVudVBsdWdpbnNbcnVsZVBsdWdpbl07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5ydWxlcyA9IHJ1bGVzVHJlZTtcbiAgICB9XG5cbiAgICBpZiAoISQuaXNFbXB0eU9iamVjdCh0aGlzLnJ1bGVzKSkge1xuICAgICAgdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciB0aGUgTWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uKCkge1xuICAgICAgX3RoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgfSk7XG4gICAgLy8gJCh3aW5kb3cpLm9uKCdyZXNpemUuemYuUmVzcG9uc2l2ZU1lbnUnLCBmdW5jdGlvbigpIHtcbiAgICAvLyAgIF90aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIC8vIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgY3VycmVudCBzY3JlZW4gd2lkdGggYWdhaW5zdCBhdmFpbGFibGUgbWVkaWEgcXVlcmllcy4gSWYgdGhlIG1lZGlhIHF1ZXJ5IGhhcyBjaGFuZ2VkLCBhbmQgdGhlIHBsdWdpbiBuZWVkZWQgaGFzIGNoYW5nZWQsIHRoZSBwbHVnaW5zIHdpbGwgc3dhcCBvdXQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrTWVkaWFRdWVyaWVzKCkge1xuICAgIHZhciBtYXRjaGVkTXEsIF90aGlzID0gdGhpcztcbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlIGFuZCBmaW5kIHRoZSBsYXN0IG1hdGNoaW5nIHJ1bGVcbiAgICAkLmVhY2godGhpcy5ydWxlcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3Qoa2V5KSkge1xuICAgICAgICBtYXRjaGVkTXEgPSBrZXk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBObyBtYXRjaD8gTm8gZGljZVxuICAgIGlmICghbWF0Y2hlZE1xKSByZXR1cm47XG5cbiAgICAvLyBQbHVnaW4gYWxyZWFkeSBpbml0aWFsaXplZD8gV2UgZ29vZFxuICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4gaW5zdGFuY2VvZiB0aGlzLnJ1bGVzW21hdGNoZWRNcV0ucGx1Z2luKSByZXR1cm47XG5cbiAgICAvLyBSZW1vdmUgZXhpc3RpbmcgcGx1Z2luLXNwZWNpZmljIENTUyBjbGFzc2VzXG4gICAgJC5lYWNoKE1lbnVQbHVnaW5zLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh2YWx1ZS5jc3NDbGFzcyk7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgdGhlIENTUyBjbGFzcyBmb3IgdGhlIG5ldyBwbHVnaW5cbiAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5jc3NDbGFzcyk7XG5cbiAgICAvLyBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG5ldyBwbHVnaW5cbiAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luKSB0aGlzLmN1cnJlbnRQbHVnaW4uZGVzdHJveSgpO1xuICAgIHRoaXMuY3VycmVudFBsdWdpbiA9IG5ldyB0aGlzLnJ1bGVzW21hdGNoZWRNcV0ucGx1Z2luKHRoaXMuJGVsZW1lbnQsIHt9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgaW5zdGFuY2Ugb2YgdGhlIGN1cnJlbnQgcGx1Z2luIG9uIHRoaXMgZWxlbWVudCwgYXMgd2VsbCBhcyB0aGUgd2luZG93IHJlc2l6ZSBoYW5kbGVyIHRoYXQgc3dpdGNoZXMgdGhlIHBsdWdpbnMgb3V0LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKTtcbiAgICAkKHdpbmRvdykub2ZmKCcuemYuUmVzcG9uc2l2ZU1lbnUnKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuUmVzcG9uc2l2ZU1lbnUuZGVmYXVsdHMgPSB7fTtcblxuLy8gVGhlIHBsdWdpbiBtYXRjaGVzIHRoZSBwbHVnaW4gY2xhc3NlcyB3aXRoIHRoZXNlIHBsdWdpbiBpbnN0YW5jZXMuXG52YXIgTWVudVBsdWdpbnMgPSB7XG4gIGRyb3Bkb3duOiB7XG4gICAgY3NzQ2xhc3M6ICdkcm9wZG93bicsXG4gICAgcGx1Z2luOiBGb3VuZGF0aW9uLl9wbHVnaW5zWydkcm9wZG93bi1tZW51J10gfHwgbnVsbFxuICB9LFxuIGRyaWxsZG93bjoge1xuICAgIGNzc0NsYXNzOiAnZHJpbGxkb3duJyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnNbJ2RyaWxsZG93biddIHx8IG51bGxcbiAgfSxcbiAgYWNjb3JkaW9uOiB7XG4gICAgY3NzQ2xhc3M6ICdhY2NvcmRpb24tbWVudScsXG4gICAgcGx1Z2luOiBGb3VuZGF0aW9uLl9wbHVnaW5zWydhY2NvcmRpb24tbWVudSddIHx8IG51bGxcbiAgfVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFJlc3BvbnNpdmVNZW51LCAnUmVzcG9uc2l2ZU1lbnUnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFJlc3BvbnNpdmVUb2dnbGUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnJlc3BvbnNpdmVUb2dnbGVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICovXG5cbmNsYXNzIFJlc3BvbnNpdmVUb2dnbGUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBUYWIgQmFyLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIFJlc3BvbnNpdmVUb2dnbGUjaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYXR0YWNoIHRhYiBiYXIgZnVuY3Rpb25hbGl0eSB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBSZXNwb25zaXZlVG9nZ2xlLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdSZXNwb25zaXZlVG9nZ2xlJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHRhYiBiYXIgYnkgZmluZGluZyB0aGUgdGFyZ2V0IGVsZW1lbnQsIHRvZ2dsaW5nIGVsZW1lbnQsIGFuZCBydW5uaW5nIHVwZGF0ZSgpLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciB0YXJnZXRJRCA9IHRoaXMuJGVsZW1lbnQuZGF0YSgncmVzcG9uc2l2ZS10b2dnbGUnKTtcbiAgICBpZiAoIXRhcmdldElEKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdZb3VyIHRhYiBiYXIgbmVlZHMgYW4gSUQgb2YgYSBNZW51IGFzIHRoZSB2YWx1ZSBvZiBkYXRhLXRhYi1iYXIuJyk7XG4gICAgfVxuXG4gICAgdGhpcy4kdGFyZ2V0TWVudSA9ICQoYCMke3RhcmdldElEfWApO1xuICAgIHRoaXMuJHRvZ2dsZXIgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXRvZ2dsZV0nKTtcblxuICAgIHRoaXMuX3VwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgbmVjZXNzYXJ5IGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgdGFiIGJhciB0byB3b3JrLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuX3VwZGF0ZU1xSGFuZGxlciA9IHRoaXMuX3VwZGF0ZS5iaW5kKHRoaXMpO1xuICAgIFxuICAgICQod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fdXBkYXRlTXFIYW5kbGVyKTtcblxuICAgIHRoaXMuJHRvZ2dsZXIub24oJ2NsaWNrLnpmLnJlc3BvbnNpdmVUb2dnbGUnLCB0aGlzLnRvZ2dsZU1lbnUuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBjdXJyZW50IG1lZGlhIHF1ZXJ5IHRvIGRldGVybWluZSBpZiB0aGUgdGFiIGJhciBzaG91bGQgYmUgdmlzaWJsZSBvciBoaWRkZW4uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZSgpIHtcbiAgICAvLyBNb2JpbGVcbiAgICBpZiAoIUZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5oaWRlRm9yKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5zaG93KCk7XG4gICAgICB0aGlzLiR0YXJnZXRNZW51LmhpZGUoKTtcbiAgICB9XG5cbiAgICAvLyBEZXNrdG9wXG4gICAgZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmhpZGUoKTtcbiAgICAgIHRoaXMuJHRhcmdldE1lbnUuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBlbGVtZW50IGF0dGFjaGVkIHRvIHRoZSB0YWIgYmFyLiBUaGUgdG9nZ2xlIG9ubHkgaGFwcGVucyBpZiB0aGUgc2NyZWVuIGlzIHNtYWxsIGVub3VnaCB0byBhbGxvdyBpdC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlVG9nZ2xlI3RvZ2dsZWRcbiAgICovXG4gIHRvZ2dsZU1lbnUoKSB7ICAgXG4gICAgaWYgKCFGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuaGlkZUZvcikpIHtcbiAgICAgIHRoaXMuJHRhcmdldE1lbnUudG9nZ2xlKDApO1xuXG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGVsZW1lbnQgYXR0YWNoZWQgdG8gdGhlIHRhYiBiYXIgdG9nZ2xlcy5cbiAgICAgICAqIEBldmVudCBSZXNwb25zaXZlVG9nZ2xlI3RvZ2dsZWRcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd0b2dnbGVkLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcbiAgICB9XG4gIH07XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcbiAgICB0aGlzLiR0b2dnbGVyLm9mZignLnpmLnJlc3BvbnNpdmVUb2dnbGUnKTtcbiAgICBcbiAgICAkKHdpbmRvdykub2ZmKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl91cGRhdGVNcUhhbmRsZXIpO1xuICAgIFxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5SZXNwb25zaXZlVG9nZ2xlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogVGhlIGJyZWFrcG9pbnQgYWZ0ZXIgd2hpY2ggdGhlIG1lbnUgaXMgYWx3YXlzIHNob3duLCBhbmQgdGhlIHRhYiBiYXIgaXMgaGlkZGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdtZWRpdW0nXG4gICAqL1xuICBoaWRlRm9yOiAnbWVkaXVtJ1xufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFJlc3BvbnNpdmVUb2dnbGUsICdSZXNwb25zaXZlVG9nZ2xlJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBSZXZlYWwgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnJldmVhbFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb24gaWYgdXNpbmcgYW5pbWF0aW9uc1xuICovXG5cbmNsYXNzIFJldmVhbCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFJldmVhbC5cbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byB1c2UgZm9yIHRoZSBtb2RhbC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25hbCBwYXJhbWV0ZXJzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBSZXZlYWwuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdSZXZlYWwnKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdSZXZlYWwnLCB7XG4gICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJyxcbiAgICAgICdUQUInOiAndGFiX2ZvcndhcmQnLFxuICAgICAgJ1NISUZUX1RBQic6ICd0YWJfYmFja3dhcmQnXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG1vZGFsIGJ5IGFkZGluZyB0aGUgb3ZlcmxheSBhbmQgY2xvc2UgYnV0dG9ucywgKGlmIHNlbGVjdGVkKS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuY2FjaGVkID0ge21xOiBGb3VuZGF0aW9uLk1lZGlhUXVlcnkuY3VycmVudH07XG4gICAgdGhpcy5pc01vYmlsZSA9IG1vYmlsZVNuaWZmKCk7XG5cbiAgICB0aGlzLiRhbmNob3IgPSAkKGBbZGF0YS1vcGVuPVwiJHt0aGlzLmlkfVwiXWApLmxlbmd0aCA/ICQoYFtkYXRhLW9wZW49XCIke3RoaXMuaWR9XCJdYCkgOiAkKGBbZGF0YS10b2dnbGU9XCIke3RoaXMuaWR9XCJdYCk7XG4gICAgdGhpcy4kYW5jaG9yLmF0dHIoe1xuICAgICAgJ2FyaWEtY29udHJvbHMnOiB0aGlzLmlkLFxuICAgICAgJ2FyaWEtaGFzcG9wdXAnOiB0cnVlLFxuICAgICAgJ3RhYmluZGV4JzogMFxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5mdWxsU2NyZWVuIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2Z1bGwnKSkge1xuICAgICAgdGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgdGhpcy5vcHRpb25zLm92ZXJsYXkgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5ICYmICF0aGlzLiRvdmVybGF5KSB7XG4gICAgICB0aGlzLiRvdmVybGF5ID0gdGhpcy5fbWFrZU92ZXJsYXkodGhpcy5pZCk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAnZGlhbG9nJyxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgICAgJ2RhdGEteWV0aS1ib3gnOiB0aGlzLmlkLFxuICAgICAgICAnZGF0YS1yZXNpemUnOiB0aGlzLmlkXG4gICAgfSk7XG5cbiAgICBpZih0aGlzLiRvdmVybGF5KSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmRldGFjaCgpLmFwcGVuZFRvKHRoaXMuJG92ZXJsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmRldGFjaCgpLmFwcGVuZFRvKCQoJ2JvZHknKSk7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCd3aXRob3V0LW92ZXJsYXknKTtcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluayAmJiB3aW5kb3cubG9jYXRpb24uaGFzaCA9PT0gKCBgIyR7dGhpcy5pZH1gKSkge1xuICAgICAgJCh3aW5kb3cpLm9uZSgnbG9hZC56Zi5yZXZlYWwnLCB0aGlzLm9wZW4uYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gb3ZlcmxheSBkaXYgdG8gZGlzcGxheSBiZWhpbmQgdGhlIG1vZGFsLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX21ha2VPdmVybGF5KGlkKSB7XG4gICAgdmFyICRvdmVybGF5ID0gJCgnPGRpdj48L2Rpdj4nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3JldmVhbC1vdmVybGF5JylcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKCdib2R5Jyk7XG4gICAgcmV0dXJuICRvdmVybGF5O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgcG9zaXRpb24gb2YgbW9kYWxcbiAgICogVE9ETzogIEZpZ3VyZSBvdXQgaWYgd2UgYWN0dWFsbHkgbmVlZCB0byBjYWNoZSB0aGVzZSB2YWx1ZXMgb3IgaWYgaXQgZG9lc24ndCBtYXR0ZXJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGVQb3NpdGlvbigpIHtcbiAgICB2YXIgd2lkdGggPSB0aGlzLiRlbGVtZW50Lm91dGVyV2lkdGgoKTtcbiAgICB2YXIgb3V0ZXJXaWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xuICAgIHZhciBoZWlnaHQgPSB0aGlzLiRlbGVtZW50Lm91dGVySGVpZ2h0KCk7XG4gICAgdmFyIG91dGVySGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICAgIHZhciBsZWZ0LCB0b3A7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5oT2Zmc2V0ID09PSAnYXV0bycpIHtcbiAgICAgIGxlZnQgPSBwYXJzZUludCgob3V0ZXJXaWR0aCAtIHdpZHRoKSAvIDIsIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IHBhcnNlSW50KHRoaXMub3B0aW9ucy5oT2Zmc2V0LCAxMCk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMudk9mZnNldCA9PT0gJ2F1dG8nKSB7XG4gICAgICBpZiAoaGVpZ2h0ID4gb3V0ZXJIZWlnaHQpIHtcbiAgICAgICAgdG9wID0gcGFyc2VJbnQoTWF0aC5taW4oMTAwLCBvdXRlckhlaWdodCAvIDEwKSwgMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9wID0gcGFyc2VJbnQoKG91dGVySGVpZ2h0IC0gaGVpZ2h0KSAvIDQsIDEwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gcGFyc2VJbnQodGhpcy5vcHRpb25zLnZPZmZzZXQsIDEwKTtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe3RvcDogdG9wICsgJ3B4J30pO1xuICAgIC8vIG9ubHkgd29ycnkgYWJvdXQgbGVmdCBpZiB3ZSBkb24ndCBoYXZlIGFuIG92ZXJsYXkgb3Igd2UgaGF2ZWEgIGhvcml6b250YWwgb2Zmc2V0LFxuICAgIC8vIG90aGVyd2lzZSB3ZSdyZSBwZXJmZWN0bHkgaW4gdGhlIG1pZGRsZVxuICAgIGlmKCF0aGlzLiRvdmVybGF5IHx8ICh0aGlzLm9wdGlvbnMuaE9mZnNldCAhPT0gJ2F1dG8nKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5jc3Moe2xlZnQ6IGxlZnQgKyAncHgnfSk7XG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7bWFyZ2luOiAnMHB4J30pO1xuICAgIH1cblxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBtb2RhbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgJ2Nsb3NlLnpmLnRyaWdnZXInOiAoZXZlbnQsICRlbGVtZW50KSA9PiB7XG4gICAgICAgIGlmICgoZXZlbnQudGFyZ2V0ID09PSBfdGhpcy4kZWxlbWVudFswXSkgfHxcbiAgICAgICAgICAgICgkKGV2ZW50LnRhcmdldCkucGFyZW50cygnW2RhdGEtY2xvc2FibGVdJylbMF0gPT09ICRlbGVtZW50KSkgeyAvLyBvbmx5IGNsb3NlIHJldmVhbCB3aGVuIGl0J3MgZXhwbGljaXRseSBjYWxsZWRcbiAgICAgICAgICByZXR1cm4gdGhpcy5jbG9zZS5hcHBseSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICd0b2dnbGUuemYudHJpZ2dlcic6IHRoaXMudG9nZ2xlLmJpbmQodGhpcyksXG4gICAgICAncmVzaXplbWUuemYudHJpZ2dlcic6IGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5fdXBkYXRlUG9zaXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICh0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRhbmNob3Iub24oJ2tleWRvd24uemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS53aGljaCA9PT0gMTMgfHwgZS53aGljaCA9PT0gMzIpIHtcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrICYmIHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICB0aGlzLiRvdmVybGF5Lm9mZignLnpmLnJldmVhbCcpLm9uKCdjbGljay56Zi5yZXZlYWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHwgXG4gICAgICAgICAgJC5jb250YWlucyhfdGhpcy4kZWxlbWVudFswXSwgZS50YXJnZXQpIHx8IFxuICAgICAgICAgICAgISQuY29udGFpbnMoZG9jdW1lbnQsIGUudGFyZ2V0KSkgeyBcbiAgICAgICAgICAgICAgcmV0dXJuOyBcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICQod2luZG93KS5vbihgcG9wc3RhdGUuemYucmV2ZWFsOiR7dGhpcy5pZH1gLCB0aGlzLl9oYW5kbGVTdGF0ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBtb2RhbCBtZXRob2RzIG9uIGJhY2svZm9yd2FyZCBidXR0b24gY2xpY2tzIG9yIGFueSBvdGhlciBldmVudCB0aGF0IHRyaWdnZXJzIHBvcHN0YXRlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2hhbmRsZVN0YXRlKGUpIHtcbiAgICBpZih3aW5kb3cubG9jYXRpb24uaGFzaCA9PT0gKCAnIycgKyB0aGlzLmlkKSAmJiAhdGhpcy5pc0FjdGl2ZSl7IHRoaXMub3BlbigpOyB9XG4gICAgZWxzZXsgdGhpcy5jbG9zZSgpOyB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgbW9kYWwgY29udHJvbGxlZCBieSBgdGhpcy4kYW5jaG9yYCwgYW5kIGNsb3NlcyBhbGwgb3RoZXJzIGJ5IGRlZmF1bHQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgUmV2ZWFsI2Nsb3NlbWVcbiAgICogQGZpcmVzIFJldmVhbCNvcGVuXG4gICAqL1xuICBvcGVuKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgIHZhciBoYXNoID0gYCMke3RoaXMuaWR9YDtcblxuICAgICAgaWYgKHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgaGFzaCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG5cbiAgICAvLyBNYWtlIGVsZW1lbnRzIGludmlzaWJsZSwgYnV0IHJlbW92ZSBkaXNwbGF5OiBub25lIHNvIHdlIGNhbiBnZXQgc2l6ZSBhbmQgcG9zaXRpb25pbmdcbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5jc3MoeyAndmlzaWJpbGl0eSc6ICdoaWRkZW4nIH0pXG4gICAgICAgIC5zaG93KClcbiAgICAgICAgLnNjcm9sbFRvcCgwKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIHRoaXMuJG92ZXJsYXkuY3NzKHsndmlzaWJpbGl0eSc6ICdoaWRkZW4nfSkuc2hvdygpO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuaGlkZSgpXG4gICAgICAuY3NzKHsgJ3Zpc2liaWxpdHknOiAnJyB9KTtcblxuICAgIGlmKHRoaXMuJG92ZXJsYXkpIHtcbiAgICAgIHRoaXMuJG92ZXJsYXkuY3NzKHsndmlzaWJpbGl0eSc6ICcnfSkuaGlkZSgpO1xuICAgICAgaWYodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFzdCcpKSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoJ2Zhc3QnKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnc2xvdycpKSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoJ3Nsb3cnKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGlmICghdGhpcy5vcHRpb25zLm11bHRpcGxlT3BlbmVkKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgbW9kYWwgb3BlbnMuXG4gICAgICAgKiBDbG9zZXMgYW55IG90aGVyIG1vZGFscyB0aGF0IGFyZSBjdXJyZW50bHkgb3BlblxuICAgICAgICogQGV2ZW50IFJldmVhbCNjbG9zZW1lXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VtZS56Zi5yZXZlYWwnLCB0aGlzLmlkKTtcbiAgICB9XG4gICAgLy8gTW90aW9uIFVJIG1ldGhvZCBvZiByZXZlYWxcbiAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbkluKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gYWZ0ZXJBbmltYXRpb25Gb2N1cygpe1xuICAgICAgICBfdGhpcy4kZWxlbWVudFxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IGZhbHNlLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogLTFcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5mb2N1cygpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbih0aGlzLiRvdmVybGF5LCAnZmFkZS1pbicpO1xuICAgICAgfVxuICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKHRoaXMuJGVsZW1lbnQsIHRoaXMub3B0aW9ucy5hbmltYXRpb25JbiwgKCkgPT4ge1xuICAgICAgICB0aGlzLmZvY3VzYWJsZUVsZW1lbnRzID0gRm91bmRhdGlvbi5LZXlib2FyZC5maW5kRm9jdXNhYmxlKHRoaXMuJGVsZW1lbnQpO1xuICAgICAgICBhZnRlckFuaW1hdGlvbkZvY3VzKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8galF1ZXJ5IG1ldGhvZCBvZiByZXZlYWxcbiAgICBlbHNlIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LnNob3coMCk7XG4gICAgICB9XG4gICAgICB0aGlzLiRlbGVtZW50LnNob3codGhpcy5vcHRpb25zLnNob3dEZWxheSk7XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIGFjY2Vzc2liaWxpdHlcbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuYXR0cih7XG4gICAgICAgICdhcmlhLWhpZGRlbic6IGZhbHNlLFxuICAgICAgICAndGFiaW5kZXgnOiAtMVxuICAgICAgfSlcbiAgICAgIC5mb2N1cygpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgbW9kYWwgaGFzIHN1Y2Nlc3NmdWxseSBvcGVuZWQuXG4gICAgICogQGV2ZW50IFJldmVhbCNvcGVuXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvcGVuLnpmLnJldmVhbCcpO1xuXG4gICAgaWYgKHRoaXMuaXNNb2JpbGUpIHtcbiAgICAgIHRoaXMub3JpZ2luYWxTY3JvbGxQb3MgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAkKCdodG1sLCBib2R5JykuYWRkQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5fZXh0cmFIYW5kbGVycygpO1xuICAgIH0sIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXh0cmEgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBib2R5IGFuZCB3aW5kb3cgaWYgbmVjZXNzYXJ5LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V4dHJhSGFuZGxlcnMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLmZvY3VzYWJsZUVsZW1lbnRzID0gRm91bmRhdGlvbi5LZXlib2FyZC5maW5kRm9jdXNhYmxlKHRoaXMuJGVsZW1lbnQpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiB0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrICYmICF0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbikge1xuICAgICAgJCgnYm9keScpLm9uKCdjbGljay56Zi5yZXZlYWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHwgXG4gICAgICAgICAgJC5jb250YWlucyhfdGhpcy4kZWxlbWVudFswXSwgZS50YXJnZXQpIHx8IFxuICAgICAgICAgICAgISQuY29udGFpbnMoZG9jdW1lbnQsIGUudGFyZ2V0KSkgeyByZXR1cm47IH1cbiAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgJCh3aW5kb3cpLm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1JldmVhbCcsIHtcbiAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5jbG9zZU9uRXNjKSB7XG4gICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gbG9jayBmb2N1cyB3aXRoaW4gbW9kYWwgd2hpbGUgdGFiYmluZ1xuICAgIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyICR0YXJnZXQgPSAkKHRoaXMpO1xuICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1JldmVhbCcsIHtcbiAgICAgICAgdGFiX2ZvcndhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzID0gRm91bmRhdGlvbi5LZXlib2FyZC5maW5kRm9jdXNhYmxlKF90aGlzLiRlbGVtZW50KTtcbiAgICAgICAgICBpZiAoX3RoaXMuJGVsZW1lbnQuZmluZCgnOmZvY3VzJykuaXMoX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpKSkgeyAvLyBsZWZ0IG1vZGFsIGRvd253YXJkcywgc2V0dGluZyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgICBfdGhpcy5mb2N1c2FibGVFbGVtZW50cy5lcSgwKS5mb2N1cygpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChfdGhpcy5mb2N1c2FibGVFbGVtZW50cy5sZW5ndGggPT09IDApIHsgLy8gbm8gZm9jdXNhYmxlIGVsZW1lbnRzIGluc2lkZSB0aGUgbW9kYWwgYXQgYWxsLCBwcmV2ZW50IHRhYmJpbmcgaW4gZ2VuZXJhbFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0YWJfYmFja3dhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzID0gRm91bmRhdGlvbi5LZXlib2FyZC5maW5kRm9jdXNhYmxlKF90aGlzLiRlbGVtZW50KTtcbiAgICAgICAgICBpZiAoX3RoaXMuJGVsZW1lbnQuZmluZCgnOmZvY3VzJykuaXMoX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMuZXEoMCkpIHx8IF90aGlzLiRlbGVtZW50LmlzKCc6Zm9jdXMnKSkgeyAvLyBsZWZ0IG1vZGFsIHVwd2FyZHMsIHNldHRpbmcgZm9jdXMgdG8gbGFzdCBlbGVtZW50XG4gICAgICAgICAgICBfdGhpcy5mb2N1c2FibGVFbGVtZW50cy5lcSgtMSkuZm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoID09PSAwKSB7IC8vIG5vIGZvY3VzYWJsZSBlbGVtZW50cyBpbnNpZGUgdGhlIG1vZGFsIGF0IGFsbCwgcHJldmVudCB0YWJiaW5nIGluIGdlbmVyYWxcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmZpbmQoJzpmb2N1cycpLmlzKF90aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWNsb3NlXScpKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgLy8gc2V0IGZvY3VzIGJhY2sgdG8gYW5jaG9yIGlmIGNsb3NlIGJ1dHRvbiBoYXMgYmVlbiBhY3RpdmF0ZWRcbiAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvci5mb2N1cygpO1xuICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkdGFyZ2V0LmlzKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzKSkgeyAvLyBkb250J3QgdHJpZ2dlciBpZiBhY3VhbCBlbGVtZW50IGhhcyBmb2N1cyAoaS5lLiBpbnB1dHMsIGxpbmtzLCAuLi4pXG4gICAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG1vZGFsLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFJldmVhbCNjbG9zZWRcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIGlmICghdGhpcy5pc0FjdGl2ZSB8fCAhdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gTW90aW9uIFVJIG1ldGhvZCBvZiBoaWRpbmdcbiAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbk91dCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQodGhpcy4kb3ZlcmxheSwgJ2ZhZGUtb3V0JywgZmluaXNoVXApO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZpbmlzaFVwKCk7XG4gICAgICB9XG5cbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQodGhpcy4kZWxlbWVudCwgdGhpcy5vcHRpb25zLmFuaW1hdGlvbk91dCk7XG4gICAgfVxuICAgIC8vIGpRdWVyeSBtZXRob2Qgb2YgaGlkaW5nXG4gICAgZWxzZSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5oaWRlKDAsIGZpbmlzaFVwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmaW5pc2hVcCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLiRlbGVtZW50LmhpZGUodGhpcy5vcHRpb25zLmhpZGVEZWxheSk7XG4gICAgfVxuXG4gICAgLy8gQ29uZGl0aW9uYWxzIHRvIHJlbW92ZSBleHRyYSBldmVudCBsaXN0ZW5lcnMgYWRkZWQgb24gb3BlblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgJCh3aW5kb3cpLm9mZigna2V5ZG93bi56Zi5yZXZlYWwnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5vdmVybGF5ICYmIHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgICQoJ2JvZHknKS5vZmYoJ2NsaWNrLnpmLnJldmVhbCcpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdrZXlkb3duLnpmLnJldmVhbCcpO1xuXG4gICAgZnVuY3Rpb24gZmluaXNoVXAoKSB7XG4gICAgICBpZiAoX3RoaXMuaXNNb2JpbGUpIHtcbiAgICAgICAgJCgnaHRtbCwgYm9keScpLnJlbW92ZUNsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgICBpZihfdGhpcy5vcmlnaW5hbFNjcm9sbFBvcykge1xuICAgICAgICAgICQoJ2JvZHknKS5zY3JvbGxUb3AoX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpO1xuICAgICAgICAgIF90aGlzLm9yaWdpbmFsU2Nyb2xsUG9zID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgLyoqXG4gICAgICAqIEZpcmVzIHdoZW4gdGhlIG1vZGFsIGlzIGRvbmUgY2xvc2luZy5cbiAgICAgICogQGV2ZW50IFJldmVhbCNjbG9zZWRcbiAgICAgICovXG4gICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZWQuemYucmV2ZWFsJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZXNldHMgdGhlIG1vZGFsIGNvbnRlbnRcbiAgICAqIFRoaXMgcHJldmVudHMgYSBydW5uaW5nIHZpZGVvIHRvIGtlZXAgZ29pbmcgaW4gdGhlIGJhY2tncm91bmRcbiAgICAqL1xuICAgIGlmICh0aGlzLm9wdGlvbnMucmVzZXRPbkNsb3NlKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lmh0bWwodGhpcy4kZWxlbWVudC5odG1sKCkpO1xuICAgIH1cblxuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgaWYgKF90aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICBpZiAod2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoXCJcIiwgZG9jdW1lbnQudGl0bGUsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICAgfSBlbHNlIHtcbiAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgICAgfVxuICAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgb3Blbi9jbG9zZWQgc3RhdGUgb2YgYSBtb2RhbC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYgKHRoaXMuaXNBY3RpdmUpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBhIG1vZGFsLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmFwcGVuZFRvKCQoJ2JvZHknKSk7IC8vIG1vdmUgJGVsZW1lbnQgb3V0c2lkZSBvZiAkb3ZlcmxheSB0byBwcmV2ZW50IGVycm9yIHVucmVnaXN0ZXJQbHVnaW4oKVxuICAgICAgdGhpcy4kb3ZlcmxheS5oaWRlKCkub2ZmKCkucmVtb3ZlKCk7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpLm9mZigpO1xuICAgIHRoaXMuJGFuY2hvci5vZmYoJy56ZicpO1xuICAgICQod2luZG93KS5vZmYoYC56Zi5yZXZlYWw6JHt0aGlzLmlkfWApO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9O1xufVxuXG5SZXZlYWwuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBNb3Rpb24tVUkgY2xhc3MgdG8gdXNlIGZvciBhbmltYXRlZCBlbGVtZW50cy4gSWYgbm9uZSB1c2VkLCBkZWZhdWx0cyB0byBzaW1wbGUgc2hvdy9oaWRlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdzbGlkZS1pbi1sZWZ0J1xuICAgKi9cbiAgYW5pbWF0aW9uSW46ICcnLFxuICAvKipcbiAgICogTW90aW9uLVVJIGNsYXNzIHRvIHVzZSBmb3IgYW5pbWF0ZWQgZWxlbWVudHMuIElmIG5vbmUgdXNlZCwgZGVmYXVsdHMgdG8gc2ltcGxlIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnc2xpZGUtb3V0LXJpZ2h0J1xuICAgKi9cbiAgYW5pbWF0aW9uT3V0OiAnJyxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCB0byBkZWxheSB0aGUgb3BlbmluZyBvZiBhIG1vZGFsIGFmdGVyIGEgY2xpY2sgaWYgbm8gYW5pbWF0aW9uIHVzZWQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTBcbiAgICovXG4gIHNob3dEZWxheTogMCxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCB0byBkZWxheSB0aGUgY2xvc2luZyBvZiBhIG1vZGFsIGFmdGVyIGEgY2xpY2sgaWYgbm8gYW5pbWF0aW9uIHVzZWQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTBcbiAgICovXG4gIGhpZGVEZWxheTogMCxcbiAgLyoqXG4gICAqIEFsbG93cyBhIGNsaWNrIG9uIHRoZSBib2R5L292ZXJsYXkgdG8gY2xvc2UgdGhlIG1vZGFsLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsb3NlT25DbGljazogdHJ1ZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gY2xvc2UgaWYgdGhlIHVzZXIgcHJlc3NlcyB0aGUgYEVTQ0FQRWAga2V5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsb3NlT25Fc2M6IHRydWUsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBhbGxvd3MgbXVsdGlwbGUgbW9kYWxzIHRvIGJlIGRpc3BsYXllZCBhdCBvbmNlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBtdWx0aXBsZU9wZW5lZDogZmFsc2UsXG4gIC8qKlxuICAgKiBEaXN0YW5jZSwgaW4gcGl4ZWxzLCB0aGUgbW9kYWwgc2hvdWxkIHB1c2ggZG93biBmcm9tIHRoZSB0b3Agb2YgdGhlIHNjcmVlbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBhdXRvXG4gICAqL1xuICB2T2Zmc2V0OiAnYXV0bycsXG4gIC8qKlxuICAgKiBEaXN0YW5jZSwgaW4gcGl4ZWxzLCB0aGUgbW9kYWwgc2hvdWxkIHB1c2ggaW4gZnJvbSB0aGUgc2lkZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGF1dG9cbiAgICovXG4gIGhPZmZzZXQ6ICdhdXRvJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gYmUgZnVsbHNjcmVlbiwgY29tcGxldGVseSBibG9ja2luZyBvdXQgdGhlIHJlc3Qgb2YgdGhlIHZpZXcuIEpTIGNoZWNrcyBmb3IgdGhpcyBhcyB3ZWxsLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBmdWxsU2NyZWVuOiBmYWxzZSxcbiAgLyoqXG4gICAqIFBlcmNlbnRhZ2Ugb2Ygc2NyZWVuIGhlaWdodCB0aGUgbW9kYWwgc2hvdWxkIHB1c2ggdXAgZnJvbSB0aGUgYm90dG9tIG9mIHRoZSB2aWV3LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICBidG1PZmZzZXRQY3Q6IDEwLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byBnZW5lcmF0ZSBhbiBvdmVybGF5IGRpdiwgd2hpY2ggd2lsbCBjb3ZlciB0aGUgdmlldyB3aGVuIG1vZGFsIG9wZW5zLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIG92ZXJsYXk6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIHJlbW92ZSBhbmQgcmVpbmplY3QgbWFya3VwIG9uIGNsb3NlLiBTaG91bGQgYmUgdHJ1ZSBpZiB1c2luZyB2aWRlbyBlbGVtZW50cyB3L28gdXNpbmcgcHJvdmlkZXIncyBhcGksIG90aGVyd2lzZSwgdmlkZW9zIHdpbGwgY29udGludWUgdG8gcGxheSBpbiB0aGUgYmFja2dyb3VuZC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgcmVzZXRPbkNsb3NlOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gYWx0ZXIgdGhlIHVybCBvbiBvcGVuL2Nsb3NlLCBhbmQgYWxsb3dzIHRoZSB1c2Ugb2YgdGhlIGBiYWNrYCBidXR0b24gdG8gY2xvc2UgbW9kYWxzLiBBTFNPLCBhbGxvd3MgYSBtb2RhbCB0byBhdXRvLW1hbmlhY2FsbHkgb3BlbiBvbiBwYWdlIGxvYWQgSUYgdGhlIGhhc2ggPT09IHRoZSBtb2RhbCdzIHVzZXItc2V0IGlkLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBkZWVwTGluazogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXZlYWwsICdSZXZlYWwnKTtcblxuZnVuY3Rpb24gaVBob25lU25pZmYoKSB7XG4gIHJldHVybiAvaVAoYWR8aG9uZXxvZCkuKk9TLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbn1cblxuZnVuY3Rpb24gYW5kcm9pZFNuaWZmKCkge1xuICByZXR1cm4gL0FuZHJvaWQvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xufVxuXG5mdW5jdGlvbiBtb2JpbGVTbmlmZigpIHtcbiAgcmV0dXJuIGlQaG9uZVNuaWZmKCkgfHwgYW5kcm9pZFNuaWZmKCk7XG59XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBTbGlkZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnNsaWRlclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudG91Y2hcbiAqL1xuXG5jbGFzcyBTbGlkZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGRyaWxsZG93biBtZW51LlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24gbWVudS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBTbGlkZXIuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1NsaWRlcicpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ1NsaWRlcicsIHtcbiAgICAgICdsdHInOiB7XG4gICAgICAgICdBUlJPV19SSUdIVCc6ICdpbmNyZWFzZScsXG4gICAgICAgICdBUlJPV19VUCc6ICdpbmNyZWFzZScsXG4gICAgICAgICdBUlJPV19ET1dOJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgJ0FSUk9XX0xFRlQnOiAnZGVjcmVhc2UnLFxuICAgICAgICAnU0hJRlRfQVJST1dfUklHSFQnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICdTSElGVF9BUlJPV19VUCc6ICdpbmNyZWFzZV9mYXN0JyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX0RPV04nOiAnZGVjcmVhc2VfZmFzdCcsXG4gICAgICAgICdTSElGVF9BUlJPV19MRUZUJzogJ2RlY3JlYXNlX2Zhc3QnXG4gICAgICB9LFxuICAgICAgJ3J0bCc6IHtcbiAgICAgICAgJ0FSUk9XX0xFRlQnOiAnaW5jcmVhc2UnLFxuICAgICAgICAnQVJST1dfUklHSFQnOiAnZGVjcmVhc2UnLFxuICAgICAgICAnU0hJRlRfQVJST1dfTEVGVCc6ICdpbmNyZWFzZV9mYXN0JyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX1JJR0hUJzogJ2RlY3JlYXNlX2Zhc3QnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlsaXplcyB0aGUgcGx1Z2luIGJ5IHJlYWRpbmcvc2V0dGluZyBhdHRyaWJ1dGVzLCBjcmVhdGluZyBjb2xsZWN0aW9ucyBhbmQgc2V0dGluZyB0aGUgaW5pdGlhbCBwb3NpdGlvbiBvZiB0aGUgaGFuZGxlKHMpLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuaW5wdXRzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbnB1dCcpO1xuICAgIHRoaXMuaGFuZGxlcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc2xpZGVyLWhhbmRsZV0nKTtcblxuICAgIHRoaXMuJGhhbmRsZSA9IHRoaXMuaGFuZGxlcy5lcSgwKTtcbiAgICB0aGlzLiRpbnB1dCA9IHRoaXMuaW5wdXRzLmxlbmd0aCA/IHRoaXMuaW5wdXRzLmVxKDApIDogJChgIyR7dGhpcy4kaGFuZGxlLmF0dHIoJ2FyaWEtY29udHJvbHMnKX1gKTtcbiAgICB0aGlzLiRmaWxsID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zbGlkZXItZmlsbF0nKS5jc3ModGhpcy5vcHRpb25zLnZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnLCAwKTtcblxuICAgIHZhciBpc0RibCA9IGZhbHNlLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlZCB8fCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMub3B0aW9ucy5kaXNhYmxlZENsYXNzKSkge1xuICAgICAgdGhpcy5vcHRpb25zLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmRpc2FibGVkQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaW5wdXRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5pbnB1dHMgPSAkKCkuYWRkKHRoaXMuJGlucHV0KTtcbiAgICAgIHRoaXMub3B0aW9ucy5iaW5kaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5fc2V0SW5pdEF0dHIoMCk7XG4gICAgdGhpcy5fZXZlbnRzKHRoaXMuJGhhbmRsZSk7XG5cbiAgICBpZiAodGhpcy5oYW5kbGVzWzFdKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQgPSB0cnVlO1xuICAgICAgdGhpcy4kaGFuZGxlMiA9IHRoaXMuaGFuZGxlcy5lcSgxKTtcbiAgICAgIHRoaXMuJGlucHV0MiA9IHRoaXMuaW5wdXRzLmxlbmd0aCA+IDEgPyB0aGlzLmlucHV0cy5lcSgxKSA6ICQoYCMke3RoaXMuJGhhbmRsZTIuYXR0cignYXJpYS1jb250cm9scycpfWApO1xuXG4gICAgICBpZiAoIXRoaXMuaW5wdXRzWzFdKSB7XG4gICAgICAgIHRoaXMuaW5wdXRzID0gdGhpcy5pbnB1dHMuYWRkKHRoaXMuJGlucHV0Mik7XG4gICAgICB9XG4gICAgICBpc0RibCA9IHRydWU7XG5cbiAgICAgIHRoaXMuX3NldEhhbmRsZVBvcyh0aGlzLiRoYW5kbGUsIHRoaXMub3B0aW9ucy5pbml0aWFsU3RhcnQsIHRydWUsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIF90aGlzLl9zZXRIYW5kbGVQb3MoX3RoaXMuJGhhbmRsZTIsIF90aGlzLm9wdGlvbnMuaW5pdGlhbEVuZCwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICAgIC8vIHRoaXMuJGhhbmRsZS50cmlnZ2VySGFuZGxlcignY2xpY2suemYuc2xpZGVyJyk7XG4gICAgICB0aGlzLl9zZXRJbml0QXR0cigxKTtcbiAgICAgIHRoaXMuX2V2ZW50cyh0aGlzLiRoYW5kbGUyKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzRGJsKSB7XG4gICAgICB0aGlzLl9zZXRIYW5kbGVQb3ModGhpcy4kaGFuZGxlLCB0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0LCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIHNlbGVjdGVkIGhhbmRsZSBhbmQgZmlsbCBiYXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhuZGwgLSB0aGUgc2VsZWN0ZWQgaGFuZGxlIHRvIG1vdmUuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBsb2NhdGlvbiAtIGZsb2F0aW5nIHBvaW50IGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgdmFsdWVzIG9mIHRoZSBzbGlkZXIgYmFyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgb24gY29tcGxldGlvbi5cbiAgICogQGZpcmVzIFNsaWRlciNtb3ZlZFxuICAgKiBAZmlyZXMgU2xpZGVyI2NoYW5nZWRcbiAgICovXG4gIF9zZXRIYW5kbGVQb3MoJGhuZGwsIGxvY2F0aW9uLCBub0ludmVydCwgY2IpIHtcbiAgICAvLyBkb24ndCBtb3ZlIGlmIHRoZSBzbGlkZXIgaGFzIGJlZW4gZGlzYWJsZWQgc2luY2UgaXRzIGluaXRpYWxpemF0aW9uXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3ModGhpcy5vcHRpb25zLmRpc2FibGVkQ2xhc3MpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vbWlnaHQgbmVlZCB0byBhbHRlciB0aGF0IHNsaWdodGx5IGZvciBiYXJzIHRoYXQgd2lsbCBoYXZlIG9kZCBudW1iZXIgc2VsZWN0aW9ucy5cbiAgICBsb2NhdGlvbiA9IHBhcnNlRmxvYXQobG9jYXRpb24pOy8vb24gaW5wdXQgY2hhbmdlIGV2ZW50cywgY29udmVydCBzdHJpbmcgdG8gbnVtYmVyLi4uZ3J1bWJsZS5cblxuICAgIC8vIHByZXZlbnQgc2xpZGVyIGZyb20gcnVubmluZyBvdXQgb2YgYm91bmRzLCBpZiB2YWx1ZSBleGNlZWRzIHRoZSBsaW1pdHMgc2V0IHRocm91Z2ggb3B0aW9ucywgb3ZlcnJpZGUgdGhlIHZhbHVlIHRvIG1pbi9tYXhcbiAgICBpZiAobG9jYXRpb24gPCB0aGlzLm9wdGlvbnMuc3RhcnQpIHsgbG9jYXRpb24gPSB0aGlzLm9wdGlvbnMuc3RhcnQ7IH1cbiAgICBlbHNlIGlmIChsb2NhdGlvbiA+IHRoaXMub3B0aW9ucy5lbmQpIHsgbG9jYXRpb24gPSB0aGlzLm9wdGlvbnMuZW5kOyB9XG5cbiAgICB2YXIgaXNEYmwgPSB0aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQ7XG5cbiAgICBpZiAoaXNEYmwpIHsgLy90aGlzIGJsb2NrIGlzIHRvIHByZXZlbnQgMiBoYW5kbGVzIGZyb20gY3Jvc3NpbmcgZWFjaG90aGVyLiBDb3VsZC9zaG91bGQgYmUgaW1wcm92ZWQuXG4gICAgICBpZiAodGhpcy5oYW5kbGVzLmluZGV4KCRobmRsKSA9PT0gMCkge1xuICAgICAgICB2YXIgaDJWYWwgPSBwYXJzZUZsb2F0KHRoaXMuJGhhbmRsZTIuYXR0cignYXJpYS12YWx1ZW5vdycpKTtcbiAgICAgICAgbG9jYXRpb24gPSBsb2NhdGlvbiA+PSBoMlZhbCA/IGgyVmFsIC0gdGhpcy5vcHRpb25zLnN0ZXAgOiBsb2NhdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBoMVZhbCA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlLmF0dHIoJ2FyaWEtdmFsdWVub3cnKSk7XG4gICAgICAgIGxvY2F0aW9uID0gbG9jYXRpb24gPD0gaDFWYWwgPyBoMVZhbCArIHRoaXMub3B0aW9ucy5zdGVwIDogbG9jYXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy90aGlzIGlzIGZvciBzaW5nbGUtaGFuZGxlZCB2ZXJ0aWNhbCBzbGlkZXJzLCBpdCBhZGp1c3RzIHRoZSB2YWx1ZSB0byBhY2NvdW50IGZvciB0aGUgc2xpZGVyIGJlaW5nIFwidXBzaWRlLWRvd25cIlxuICAgIC8vZm9yIGNsaWNrIGFuZCBkcmFnIGV2ZW50cywgaXQncyB3ZWlyZCBkdWUgdG8gdGhlIHNjYWxlKC0xLCAxKSBjc3MgcHJvcGVydHlcbiAgICBpZiAodGhpcy5vcHRpb25zLnZlcnRpY2FsICYmICFub0ludmVydCkge1xuICAgICAgbG9jYXRpb24gPSB0aGlzLm9wdGlvbnMuZW5kIC0gbG9jYXRpb247XG4gICAgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgdmVydCA9IHRoaXMub3B0aW9ucy52ZXJ0aWNhbCxcbiAgICAgICAgaE9yVyA9IHZlcnQgPyAnaGVpZ2h0JyA6ICd3aWR0aCcsXG4gICAgICAgIGxPclQgPSB2ZXJ0ID8gJ3RvcCcgOiAnbGVmdCcsXG4gICAgICAgIGhhbmRsZURpbSA9ICRobmRsWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2hPclddLFxuICAgICAgICBlbGVtRGltID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtoT3JXXSxcbiAgICAgICAgLy9wZXJjZW50YWdlIG9mIGJhciBtaW4vbWF4IHZhbHVlIGJhc2VkIG9uIGNsaWNrIG9yIGRyYWcgcG9pbnRcbiAgICAgICAgcGN0T2ZCYXIgPSBwZXJjZW50KGxvY2F0aW9uIC0gdGhpcy5vcHRpb25zLnN0YXJ0LCB0aGlzLm9wdGlvbnMuZW5kIC0gdGhpcy5vcHRpb25zLnN0YXJ0KS50b0ZpeGVkKDIpLFxuICAgICAgICAvL251bWJlciBvZiBhY3R1YWwgcGl4ZWxzIHRvIHNoaWZ0IHRoZSBoYW5kbGUsIGJhc2VkIG9uIHRoZSBwZXJjZW50YWdlIG9idGFpbmVkIGFib3ZlXG4gICAgICAgIHB4VG9Nb3ZlID0gKGVsZW1EaW0gLSBoYW5kbGVEaW0pICogcGN0T2ZCYXIsXG4gICAgICAgIC8vcGVyY2VudGFnZSBvZiBiYXIgdG8gc2hpZnQgdGhlIGhhbmRsZVxuICAgICAgICBtb3ZlbWVudCA9IChwZXJjZW50KHB4VG9Nb3ZlLCBlbGVtRGltKSAqIDEwMCkudG9GaXhlZCh0aGlzLm9wdGlvbnMuZGVjaW1hbCk7XG4gICAgICAgIC8vZml4aW5nIHRoZSBkZWNpbWFsIHZhbHVlIGZvciB0aGUgbG9jYXRpb24gbnVtYmVyLCBpcyBwYXNzZWQgdG8gb3RoZXIgbWV0aG9kcyBhcyBhIGZpeGVkIGZsb2F0aW5nLXBvaW50IHZhbHVlXG4gICAgICAgIGxvY2F0aW9uID0gcGFyc2VGbG9hdChsb2NhdGlvbi50b0ZpeGVkKHRoaXMub3B0aW9ucy5kZWNpbWFsKSk7XG4gICAgICAgIC8vIGRlY2xhcmUgZW1wdHkgb2JqZWN0IGZvciBjc3MgYWRqdXN0bWVudHMsIG9ubHkgdXNlZCB3aXRoIDIgaGFuZGxlZC1zbGlkZXJzXG4gICAgdmFyIGNzcyA9IHt9O1xuXG4gICAgdGhpcy5fc2V0VmFsdWVzKCRobmRsLCBsb2NhdGlvbik7XG5cbiAgICAvLyBUT0RPIHVwZGF0ZSB0byBjYWxjdWxhdGUgYmFzZWQgb24gdmFsdWVzIHNldCB0byByZXNwZWN0aXZlIGlucHV0cz8/XG4gICAgaWYgKGlzRGJsKSB7XG4gICAgICB2YXIgaXNMZWZ0SG5kbCA9IHRoaXMuaGFuZGxlcy5pbmRleCgkaG5kbCkgPT09IDAsXG4gICAgICAgICAgLy9lbXB0eSB2YXJpYWJsZSwgd2lsbCBiZSB1c2VkIGZvciBtaW4taGVpZ2h0L3dpZHRoIGZvciBmaWxsIGJhclxuICAgICAgICAgIGRpbSxcbiAgICAgICAgICAvL3BlcmNlbnRhZ2Ugdy9oIG9mIHRoZSBoYW5kbGUgY29tcGFyZWQgdG8gdGhlIHNsaWRlciBiYXJcbiAgICAgICAgICBoYW5kbGVQY3QgPSAgfn4ocGVyY2VudChoYW5kbGVEaW0sIGVsZW1EaW0pICogMTAwKTtcbiAgICAgIC8vaWYgbGVmdCBoYW5kbGUsIHRoZSBtYXRoIGlzIHNsaWdodGx5IGRpZmZlcmVudCB0aGFuIGlmIGl0J3MgdGhlIHJpZ2h0IGhhbmRsZSwgYW5kIHRoZSBsZWZ0L3RvcCBwcm9wZXJ0eSBuZWVkcyB0byBiZSBjaGFuZ2VkIGZvciB0aGUgZmlsbCBiYXJcbiAgICAgIGlmIChpc0xlZnRIbmRsKSB7XG4gICAgICAgIC8vbGVmdCBvciB0b3AgcGVyY2VudGFnZSB2YWx1ZSB0byBhcHBseSB0byB0aGUgZmlsbCBiYXIuXG4gICAgICAgIGNzc1tsT3JUXSA9IGAke21vdmVtZW50fSVgO1xuICAgICAgICAvL2NhbGN1bGF0ZSB0aGUgbmV3IG1pbi1oZWlnaHQvd2lkdGggZm9yIHRoZSBmaWxsIGJhci5cbiAgICAgICAgZGltID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGUyWzBdLnN0eWxlW2xPclRdKSAtIG1vdmVtZW50ICsgaGFuZGxlUGN0O1xuICAgICAgICAvL3RoaXMgY2FsbGJhY2sgaXMgbmVjZXNzYXJ5IHRvIHByZXZlbnQgZXJyb3JzIGFuZCBhbGxvdyB0aGUgcHJvcGVyIHBsYWNlbWVudCBhbmQgaW5pdGlhbGl6YXRpb24gb2YgYSAyLWhhbmRsZWQgc2xpZGVyXG4gICAgICAgIC8vcGx1cywgaXQgbWVhbnMgd2UgZG9uJ3QgY2FyZSBpZiAnZGltJyBpc05hTiBvbiBpbml0LCBpdCB3b24ndCBiZSBpbiB0aGUgZnV0dXJlLlxuICAgICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH0vL3RoaXMgaXMgb25seSBuZWVkZWQgZm9yIHRoZSBpbml0aWFsaXphdGlvbiBvZiAyIGhhbmRsZWQgc2xpZGVyc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9qdXN0IGNhY2hpbmcgdGhlIHZhbHVlIG9mIHRoZSBsZWZ0L2JvdHRvbSBoYW5kbGUncyBsZWZ0L3RvcCBwcm9wZXJ0eVxuICAgICAgICB2YXIgaGFuZGxlUG9zID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGVbMF0uc3R5bGVbbE9yVF0pO1xuICAgICAgICAvL2NhbGN1bGF0ZSB0aGUgbmV3IG1pbi1oZWlnaHQvd2lkdGggZm9yIHRoZSBmaWxsIGJhci4gVXNlIGlzTmFOIHRvIHByZXZlbnQgZmFsc2UgcG9zaXRpdmVzIGZvciBudW1iZXJzIDw9IDBcbiAgICAgICAgLy9iYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBvZiBtb3ZlbWVudCBvZiB0aGUgaGFuZGxlIGJlaW5nIG1hbmlwdWxhdGVkLCBsZXNzIHRoZSBvcHBvc2luZyBoYW5kbGUncyBsZWZ0L3RvcCBwb3NpdGlvbiwgcGx1cyB0aGUgcGVyY2VudGFnZSB3L2ggb2YgdGhlIGhhbmRsZSBpdHNlbGZcbiAgICAgICAgZGltID0gbW92ZW1lbnQgLSAoaXNOYU4oaGFuZGxlUG9zKSA/IHRoaXMub3B0aW9ucy5pbml0aWFsU3RhcnQvKCh0aGlzLm9wdGlvbnMuZW5kLXRoaXMub3B0aW9ucy5zdGFydCkvMTAwKSA6IGhhbmRsZVBvcykgKyBoYW5kbGVQY3Q7XG4gICAgICB9XG4gICAgICAvLyBhc3NpZ24gdGhlIG1pbi1oZWlnaHQvd2lkdGggdG8gb3VyIGNzcyBvYmplY3RcbiAgICAgIGNzc1tgbWluLSR7aE9yV31gXSA9IGAke2RpbX0lYDtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uZSgnZmluaXNoZWQuemYuYW5pbWF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgaGFuZGxlIGlzIGRvbmUgbW92aW5nLlxuICAgICAgICAgICAgICAgICAgICAgKiBAZXZlbnQgU2xpZGVyI21vdmVkXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdtb3ZlZC56Zi5zbGlkZXInLCBbJGhuZGxdKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgIC8vYmVjYXVzZSB3ZSBkb24ndCBrbm93IGV4YWN0bHkgaG93IHRoZSBoYW5kbGUgd2lsbCBiZSBtb3ZlZCwgY2hlY2sgdGhlIGFtb3VudCBvZiB0aW1lIGl0IHNob3VsZCB0YWtlIHRvIG1vdmUuXG4gICAgdmFyIG1vdmVUaW1lID0gdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycpID8gMTAwMC82MCA6IHRoaXMub3B0aW9ucy5tb3ZlVGltZTtcblxuICAgIEZvdW5kYXRpb24uTW92ZShtb3ZlVGltZSwgJGhuZGwsIGZ1bmN0aW9uKCkge1xuICAgICAgLy9hZGp1c3RpbmcgdGhlIGxlZnQvdG9wIHByb3BlcnR5IG9mIHRoZSBoYW5kbGUsIGJhc2VkIG9uIHRoZSBwZXJjZW50YWdlIGNhbGN1bGF0ZWQgYWJvdmVcbiAgICAgICRobmRsLmNzcyhsT3JULCBgJHttb3ZlbWVudH0lYCk7XG5cbiAgICAgIGlmICghX3RoaXMub3B0aW9ucy5kb3VibGVTaWRlZCkge1xuICAgICAgICAvL2lmIHNpbmdsZS1oYW5kbGVkLCBhIHNpbXBsZSBtZXRob2QgdG8gZXhwYW5kIHRoZSBmaWxsIGJhclxuICAgICAgICBfdGhpcy4kZmlsbC5jc3MoaE9yVywgYCR7cGN0T2ZCYXIgKiAxMDB9JWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9vdGhlcndpc2UsIHVzZSB0aGUgY3NzIG9iamVjdCB3ZSBjcmVhdGVkIGFib3ZlXG4gICAgICAgIF90aGlzLiRmaWxsLmNzcyhjc3MpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdmFsdWUgaGFzIG5vdCBiZWVuIGNoYW5nZSBmb3IgYSBnaXZlbiB0aW1lLlxuICAgICAqIEBldmVudCBTbGlkZXIjY2hhbmdlZFxuICAgICAqL1xuICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignY2hhbmdlZC56Zi5zbGlkZXInLCBbJGhuZGxdKTtcbiAgICB9LCBfdGhpcy5vcHRpb25zLmNoYW5nZWREZWxheSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgaW5pdGlhbCBhdHRyaWJ1dGUgZm9yIHRoZSBzbGlkZXIgZWxlbWVudC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZHggLSBpbmRleCBvZiB0aGUgY3VycmVudCBoYW5kbGUvaW5wdXQgdG8gdXNlLlxuICAgKi9cbiAgX3NldEluaXRBdHRyKGlkeCkge1xuICAgIHZhciBpZCA9IHRoaXMuaW5wdXRzLmVxKGlkeCkuYXR0cignaWQnKSB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdzbGlkZXInKTtcbiAgICB0aGlzLmlucHV0cy5lcShpZHgpLmF0dHIoe1xuICAgICAgJ2lkJzogaWQsXG4gICAgICAnbWF4JzogdGhpcy5vcHRpb25zLmVuZCxcbiAgICAgICdtaW4nOiB0aGlzLm9wdGlvbnMuc3RhcnQsXG4gICAgICAnc3RlcCc6IHRoaXMub3B0aW9ucy5zdGVwXG4gICAgfSk7XG4gICAgdGhpcy5oYW5kbGVzLmVxKGlkeCkuYXR0cih7XG4gICAgICAncm9sZSc6ICdzbGlkZXInLFxuICAgICAgJ2FyaWEtY29udHJvbHMnOiBpZCxcbiAgICAgICdhcmlhLXZhbHVlbWF4JzogdGhpcy5vcHRpb25zLmVuZCxcbiAgICAgICdhcmlhLXZhbHVlbWluJzogdGhpcy5vcHRpb25zLnN0YXJ0LFxuICAgICAgJ2FyaWEtdmFsdWVub3cnOiBpZHggPT09IDAgPyB0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0IDogdGhpcy5vcHRpb25zLmluaXRpYWxFbmQsXG4gICAgICAnYXJpYS1vcmllbnRhdGlvbic6IHRoaXMub3B0aW9ucy52ZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcsXG4gICAgICAndGFiaW5kZXgnOiAwXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgaW5wdXQgYW5kIGBhcmlhLXZhbHVlbm93YCB2YWx1ZXMgZm9yIHRoZSBzbGlkZXIgZWxlbWVudC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlIC0gdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBoYW5kbGUuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWwgLSBmbG9hdGluZyBwb2ludCBvZiB0aGUgbmV3IHZhbHVlLlxuICAgKi9cbiAgX3NldFZhbHVlcygkaGFuZGxlLCB2YWwpIHtcbiAgICB2YXIgaWR4ID0gdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkID8gdGhpcy5oYW5kbGVzLmluZGV4KCRoYW5kbGUpIDogMDtcbiAgICB0aGlzLmlucHV0cy5lcShpZHgpLnZhbCh2YWwpO1xuICAgICRoYW5kbGUuYXR0cignYXJpYS12YWx1ZW5vdycsIHZhbCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBldmVudHMgb24gdGhlIHNsaWRlciBlbGVtZW50LlxuICAgKiBDYWxjdWxhdGVzIHRoZSBuZXcgbG9jYXRpb24gb2YgdGhlIGN1cnJlbnQgaGFuZGxlLlxuICAgKiBJZiB0aGVyZSBhcmUgdHdvIGhhbmRsZXMgYW5kIHRoZSBiYXIgd2FzIGNsaWNrZWQsIGl0IGRldGVybWluZXMgd2hpY2ggaGFuZGxlIHRvIG1vdmUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZSAtIHRoZSBgZXZlbnRgIG9iamVjdCBwYXNzZWQgZnJvbSB0aGUgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlIC0gdGhlIGN1cnJlbnQgaGFuZGxlIHRvIGNhbGN1bGF0ZSBmb3IsIGlmIHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsIC0gZmxvYXRpbmcgcG9pbnQgbnVtYmVyIGZvciB0aGUgbmV3IHZhbHVlIG9mIHRoZSBzbGlkZXIuXG4gICAqIFRPRE8gY2xlYW4gdGhpcyB1cCwgdGhlcmUncyBhIGxvdCBvZiByZXBlYXRlZCBjb2RlIGJldHdlZW4gdGhpcyBhbmQgdGhlIF9zZXRIYW5kbGVQb3MgZm4uXG4gICAqL1xuICBfaGFuZGxlRXZlbnQoZSwgJGhhbmRsZSwgdmFsKSB7XG4gICAgdmFyIHZhbHVlLCBoYXNWYWw7XG4gICAgaWYgKCF2YWwpIHsvL2NsaWNrIG9yIGRyYWcgZXZlbnRzXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIHZlcnRpY2FsID0gdGhpcy5vcHRpb25zLnZlcnRpY2FsLFxuICAgICAgICAgIHBhcmFtID0gdmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCcsXG4gICAgICAgICAgZGlyZWN0aW9uID0gdmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JyxcbiAgICAgICAgICBldmVudE9mZnNldCA9IHZlcnRpY2FsID8gZS5wYWdlWSA6IGUucGFnZVgsXG4gICAgICAgICAgaGFsZk9mSGFuZGxlID0gdGhpcy4kaGFuZGxlWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW3BhcmFtXSAvIDIsXG4gICAgICAgICAgYmFyRGltID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtwYXJhbV0sXG4gICAgICAgICAgd2luZG93U2Nyb2xsID0gdmVydGljYWwgPyAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgOiAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpO1xuXG5cbiAgICAgIHZhciBlbGVtT2Zmc2V0ID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVtkaXJlY3Rpb25dO1xuXG4gICAgICAvLyB0b3VjaCBldmVudHMgZW11bGF0ZWQgYnkgdGhlIHRvdWNoIHV0aWwgZ2l2ZSBwb3NpdGlvbiByZWxhdGl2ZSB0byBzY3JlZW4sIGFkZCB3aW5kb3cuc2Nyb2xsIHRvIGV2ZW50IGNvb3JkaW5hdGVzLi4uXG4gICAgICAvLyBiZXN0IHdheSB0byBndWVzcyB0aGlzIGlzIHNpbXVsYXRlZCBpcyBpZiBjbGllbnRZID09IHBhZ2VZXG4gICAgICBpZiAoZS5jbGllbnRZID09PSBlLnBhZ2VZKSB7IGV2ZW50T2Zmc2V0ID0gZXZlbnRPZmZzZXQgKyB3aW5kb3dTY3JvbGw7IH1cbiAgICAgIHZhciBldmVudEZyb21CYXIgPSBldmVudE9mZnNldCAtIGVsZW1PZmZzZXQ7XG4gICAgICB2YXIgYmFyWFk7XG4gICAgICBpZiAoZXZlbnRGcm9tQmFyIDwgMCkge1xuICAgICAgICBiYXJYWSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50RnJvbUJhciA+IGJhckRpbSkge1xuICAgICAgICBiYXJYWSA9IGJhckRpbTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhclhZID0gZXZlbnRGcm9tQmFyO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldFBjdCA9IHBlcmNlbnQoYmFyWFksIGJhckRpbSk7XG5cbiAgICAgIHZhbHVlID0gKHRoaXMub3B0aW9ucy5lbmQgLSB0aGlzLm9wdGlvbnMuc3RhcnQpICogb2Zmc2V0UGN0ICsgdGhpcy5vcHRpb25zLnN0YXJ0O1xuXG4gICAgICAvLyB0dXJuIGV2ZXJ5dGhpbmcgYXJvdW5kIGZvciBSVEwsIHlheSBtYXRoIVxuICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkgJiYgIXRoaXMub3B0aW9ucy52ZXJ0aWNhbCkge3ZhbHVlID0gdGhpcy5vcHRpb25zLmVuZCAtIHZhbHVlO31cblxuICAgICAgdmFsdWUgPSBfdGhpcy5fYWRqdXN0VmFsdWUobnVsbCwgdmFsdWUpO1xuICAgICAgLy9ib29sZWFuIGZsYWcgZm9yIHRoZSBzZXRIYW5kbGVQb3MgZm4sIHNwZWNpZmljYWxseSBmb3IgdmVydGljYWwgc2xpZGVyc1xuICAgICAgaGFzVmFsID0gZmFsc2U7XG5cbiAgICAgIGlmICghJGhhbmRsZSkgey8vZmlndXJlIG91dCB3aGljaCBoYW5kbGUgaXQgaXMsIHBhc3MgaXQgdG8gdGhlIG5leHQgZnVuY3Rpb24uXG4gICAgICAgIHZhciBmaXJzdEhuZGxQb3MgPSBhYnNQb3NpdGlvbih0aGlzLiRoYW5kbGUsIGRpcmVjdGlvbiwgYmFyWFksIHBhcmFtKSxcbiAgICAgICAgICAgIHNlY25kSG5kbFBvcyA9IGFic1Bvc2l0aW9uKHRoaXMuJGhhbmRsZTIsIGRpcmVjdGlvbiwgYmFyWFksIHBhcmFtKTtcbiAgICAgICAgICAgICRoYW5kbGUgPSBmaXJzdEhuZGxQb3MgPD0gc2VjbmRIbmRsUG9zID8gdGhpcy4kaGFuZGxlIDogdGhpcy4kaGFuZGxlMjtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7Ly9jaGFuZ2UgZXZlbnQgb24gaW5wdXRcbiAgICAgIHZhbHVlID0gdGhpcy5fYWRqdXN0VmFsdWUobnVsbCwgdmFsKTtcbiAgICAgIGhhc1ZhbCA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0SGFuZGxlUG9zKCRoYW5kbGUsIHZhbHVlLCBoYXNWYWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkanVzdGVzIHZhbHVlIGZvciBoYW5kbGUgaW4gcmVnYXJkIHRvIHN0ZXAgdmFsdWUuIHJldHVybnMgYWRqdXN0ZWQgdmFsdWVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkaGFuZGxlIC0gdGhlIHNlbGVjdGVkIGhhbmRsZS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gYWRqdXN0LiB1c2VkIGlmICRoYW5kbGUgaXMgZmFsc3lcbiAgICovXG4gIF9hZGp1c3RWYWx1ZSgkaGFuZGxlLCB2YWx1ZSkge1xuICAgIHZhciB2YWwsXG4gICAgICBzdGVwID0gdGhpcy5vcHRpb25zLnN0ZXAsXG4gICAgICBkaXYgPSBwYXJzZUZsb2F0KHN0ZXAvMiksXG4gICAgICBsZWZ0LCBwcmV2X3ZhbCwgbmV4dF92YWw7XG4gICAgaWYgKCEhJGhhbmRsZSkge1xuICAgICAgdmFsID0gcGFyc2VGbG9hdCgkaGFuZGxlLmF0dHIoJ2FyaWEtdmFsdWVub3cnKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFsID0gdmFsdWU7XG4gICAgfVxuICAgIGxlZnQgPSB2YWwgJSBzdGVwO1xuICAgIHByZXZfdmFsID0gdmFsIC0gbGVmdDtcbiAgICBuZXh0X3ZhbCA9IHByZXZfdmFsICsgc3RlcDtcbiAgICBpZiAobGVmdCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgdmFsID0gdmFsID49IHByZXZfdmFsICsgZGl2ID8gbmV4dF92YWwgOiBwcmV2X3ZhbDtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzbGlkZXIgZWxlbWVudHMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBjdXJyZW50IGhhbmRsZSB0byBhcHBseSBsaXN0ZW5lcnMgdG8uXG4gICAqL1xuICBfZXZlbnRzKCRoYW5kbGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBjdXJIYW5kbGUsXG4gICAgICAgIHRpbWVyO1xuXG4gICAgICB0aGlzLmlucHV0cy5vZmYoJ2NoYW5nZS56Zi5zbGlkZXInKS5vbignY2hhbmdlLnpmLnNsaWRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGlkeCA9IF90aGlzLmlucHV0cy5pbmRleCgkKHRoaXMpKTtcbiAgICAgICAgX3RoaXMuX2hhbmRsZUV2ZW50KGUsIF90aGlzLmhhbmRsZXMuZXEoaWR4KSwgJCh0aGlzKS52YWwoKSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGlja1NlbGVjdCkge1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignY2xpY2suemYuc2xpZGVyJykub24oJ2NsaWNrLnpmLnNsaWRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuJGVsZW1lbnQuZGF0YSgnZHJhZ2dpbmcnKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgICAgICAgIGlmICghJChlLnRhcmdldCkuaXMoJ1tkYXRhLXNsaWRlci1oYW5kbGVdJykpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkKSB7XG4gICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBfdGhpcy4kaGFuZGxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kcmFnZ2FibGUpIHtcbiAgICAgIHRoaXMuaGFuZGxlcy5hZGRUb3VjaCgpO1xuXG4gICAgICB2YXIgJGJvZHkgPSAkKCdib2R5Jyk7XG4gICAgICAkaGFuZGxlXG4gICAgICAgIC5vZmYoJ21vdXNlZG93bi56Zi5zbGlkZXInKVxuICAgICAgICAub24oJ21vdXNlZG93bi56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgJGhhbmRsZS5hZGRDbGFzcygnaXMtZHJhZ2dpbmcnKTtcbiAgICAgICAgICBfdGhpcy4kZmlsbC5hZGRDbGFzcygnaXMtZHJhZ2dpbmcnKTsvL1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJywgdHJ1ZSk7XG5cbiAgICAgICAgICBjdXJIYW5kbGUgPSAkKGUuY3VycmVudFRhcmdldCk7XG5cbiAgICAgICAgICAkYm9keS5vbignbW91c2Vtb3ZlLnpmLnNsaWRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBjdXJIYW5kbGUpO1xuXG4gICAgICAgICAgfSkub24oJ21vdXNldXAuemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgX3RoaXMuX2hhbmRsZUV2ZW50KGUsIGN1ckhhbmRsZSk7XG5cbiAgICAgICAgICAgICRoYW5kbGUucmVtb3ZlQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICBfdGhpcy4kZmlsbC5yZW1vdmVDbGFzcygnaXMtZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgIF90aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJywgZmFsc2UpO1xuXG4gICAgICAgICAgICAkYm9keS5vZmYoJ21vdXNlbW92ZS56Zi5zbGlkZXIgbW91c2V1cC56Zi5zbGlkZXInKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAvLyBwcmV2ZW50IGV2ZW50cyB0cmlnZ2VyZWQgYnkgdG91Y2hcbiAgICAgIC5vbignc2VsZWN0c3RhcnQuemYuc2xpZGVyIHRvdWNobW92ZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgICRoYW5kbGUub2ZmKCdrZXlkb3duLnpmLnNsaWRlcicpLm9uKCdrZXlkb3duLnpmLnNsaWRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBfJGhhbmRsZSA9ICQodGhpcyksXG4gICAgICAgICAgaWR4ID0gX3RoaXMub3B0aW9ucy5kb3VibGVTaWRlZCA/IF90aGlzLmhhbmRsZXMuaW5kZXgoXyRoYW5kbGUpIDogMCxcbiAgICAgICAgICBvbGRWYWx1ZSA9IHBhcnNlRmxvYXQoX3RoaXMuaW5wdXRzLmVxKGlkeCkudmFsKCkpLFxuICAgICAgICAgIG5ld1ZhbHVlO1xuXG4gICAgICAvLyBoYW5kbGUga2V5Ym9hcmQgZXZlbnQgd2l0aCBrZXlib2FyZCB1dGlsXG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnU2xpZGVyJywge1xuICAgICAgICBkZWNyZWFzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvbGRWYWx1ZSAtIF90aGlzLm9wdGlvbnMuc3RlcDtcbiAgICAgICAgfSxcbiAgICAgICAgaW5jcmVhc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgKyBfdGhpcy5vcHRpb25zLnN0ZXA7XG4gICAgICAgIH0sXG4gICAgICAgIGRlY3JlYXNlX2Zhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgLSBfdGhpcy5vcHRpb25zLnN0ZXAgKiAxMDtcbiAgICAgICAgfSxcbiAgICAgICAgaW5jcmVhc2VfZmFzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBvbGRWYWx1ZSArIF90aGlzLm9wdGlvbnMuc3RlcCAqIDEwO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbigpIHsgLy8gb25seSBzZXQgaGFuZGxlIHBvcyB3aGVuIGV2ZW50IHdhcyBoYW5kbGVkIHNwZWNpYWxseVxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF8kaGFuZGxlLCBuZXdWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLyppZiAobmV3VmFsdWUpIHsgLy8gaWYgcHJlc3NlZCBrZXkgaGFzIHNwZWNpYWwgZnVuY3Rpb24sIHVwZGF0ZSB2YWx1ZVxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLl9zZXRIYW5kbGVQb3MoXyRoYW5kbGUsIG5ld1ZhbHVlKTtcbiAgICAgIH0qL1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBzbGlkZXIgcGx1Z2luLlxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmhhbmRsZXMub2ZmKCcuemYuc2xpZGVyJyk7XG4gICAgdGhpcy5pbnB1dHMub2ZmKCcuemYuc2xpZGVyJyk7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5zbGlkZXInKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5TbGlkZXIuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBNaW5pbXVtIHZhbHVlIGZvciB0aGUgc2xpZGVyIHNjYWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDBcbiAgICovXG4gIHN0YXJ0OiAwLFxuICAvKipcbiAgICogTWF4aW11bSB2YWx1ZSBmb3IgdGhlIHNsaWRlciBzY2FsZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMDBcbiAgICovXG4gIGVuZDogMTAwLFxuICAvKipcbiAgICogTWluaW11bSB2YWx1ZSBjaGFuZ2UgcGVyIGNoYW5nZSBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxXG4gICAqL1xuICBzdGVwOiAxLFxuICAvKipcbiAgICogVmFsdWUgYXQgd2hpY2ggdGhlIGhhbmRsZS9pbnB1dCAqKGxlZnQgaGFuZGxlL2ZpcnN0IGlucHV0KSogc2hvdWxkIGJlIHNldCB0byBvbiBpbml0aWFsaXphdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAwXG4gICAqL1xuICBpbml0aWFsU3RhcnQ6IDAsXG4gIC8qKlxuICAgKiBWYWx1ZSBhdCB3aGljaCB0aGUgcmlnaHQgaGFuZGxlL3NlY29uZCBpbnB1dCBzaG91bGQgYmUgc2V0IHRvIG9uIGluaXRpYWxpemF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwMFxuICAgKi9cbiAgaW5pdGlhbEVuZDogMTAwLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBpbnB1dCB0byBiZSBsb2NhdGVkIG91dHNpZGUgdGhlIGNvbnRhaW5lciBhbmQgdmlzaWJsZS4gU2V0IHRvIGJ5IHRoZSBKU1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBiaW5kaW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdXNlciB0byBjbGljay90YXAgb24gdGhlIHNsaWRlciBiYXIgdG8gc2VsZWN0IGEgdmFsdWUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xpY2tTZWxlY3Q6IHRydWUsXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSBhbmQgdXNlIHRoZSBgdmVydGljYWxgIGNsYXNzIHRvIGNoYW5nZSBhbGlnbm1lbnQgdG8gdmVydGljYWwuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIHZlcnRpY2FsOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdXNlciB0byBkcmFnIHRoZSBzbGlkZXIgaGFuZGxlKHMpIHRvIHNlbGVjdCBhIHZhbHVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGRyYWdnYWJsZTogdHJ1ZSxcbiAgLyoqXG4gICAqIERpc2FibGVzIHRoZSBzbGlkZXIgYW5kIHByZXZlbnRzIGV2ZW50IGxpc3RlbmVycyBmcm9tIGJlaW5nIGFwcGxpZWQuIERvdWJsZSBjaGVja2VkIGJ5IEpTIHdpdGggYGRpc2FibGVkQ2xhc3NgLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHVzZSBvZiB0d28gaGFuZGxlcy4gRG91YmxlIGNoZWNrZWQgYnkgdGhlIEpTLiBDaGFuZ2VzIHNvbWUgbG9naWMgaGFuZGxpbmcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGRvdWJsZVNpZGVkOiBmYWxzZSxcbiAgLyoqXG4gICAqIFBvdGVudGlhbCBmdXR1cmUgZmVhdHVyZS5cbiAgICovXG4gIC8vIHN0ZXBzOiAxMDAsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdGhlIHBsdWdpbiBzaG91bGQgZ28gdG8gZm9yIGZsb2F0aW5nIHBvaW50IHByZWNpc2lvbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAyXG4gICAqL1xuICBkZWNpbWFsOiAyLFxuICAvKipcbiAgICogVGltZSBkZWxheSBmb3IgZHJhZ2dlZCBlbGVtZW50cy5cbiAgICovXG4gIC8vIGRyYWdEZWxheTogMCxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCB0byBhbmltYXRlIHRoZSBtb3ZlbWVudCBvZiBhIHNsaWRlciBoYW5kbGUgaWYgdXNlciBjbGlja3MvdGFwcyBvbiB0aGUgYmFyLiBOZWVkcyB0byBiZSBtYW51YWxseSBzZXQgaWYgdXBkYXRpbmcgdGhlIHRyYW5zaXRpb24gdGltZSBpbiB0aGUgU2FzcyBzZXR0aW5ncy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAyMDBcbiAgICovXG4gIG1vdmVUaW1lOiAyMDAsLy91cGRhdGUgdGhpcyBpZiBjaGFuZ2luZyB0aGUgdHJhbnNpdGlvbiB0aW1lIGluIHRoZSBzYXNzXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIGRpc2FibGVkIHNsaWRlcnMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2Rpc2FibGVkJ1xuICAgKi9cbiAgZGlzYWJsZWRDbGFzczogJ2Rpc2FibGVkJyxcbiAgLyoqXG4gICAqIFdpbGwgaW52ZXJ0IHRoZSBkZWZhdWx0IGxheW91dCBmb3IgYSB2ZXJ0aWNhbDxzcGFuIGRhdGEtdG9vbHRpcCB0aXRsZT1cIndobyB3b3VsZCBkbyB0aGlzPz8/XCI+IDwvc3Bhbj5zbGlkZXIuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGludmVydFZlcnRpY2FsOiBmYWxzZSxcbiAgLyoqXG4gICAqIE1pbGxpc2Vjb25kcyBiZWZvcmUgdGhlIGBjaGFuZ2VkLnpmLXNsaWRlcmAgZXZlbnQgaXMgdHJpZ2dlcmVkIGFmdGVyIHZhbHVlIGNoYW5nZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSA1MDBcbiAgICovXG4gIGNoYW5nZWREZWxheTogNTAwXG59O1xuXG5mdW5jdGlvbiBwZXJjZW50KGZyYWMsIG51bSkge1xuICByZXR1cm4gKGZyYWMgLyBudW0pO1xufVxuZnVuY3Rpb24gYWJzUG9zaXRpb24oJGhhbmRsZSwgZGlyLCBjbGlja1BvcywgcGFyYW0pIHtcbiAgcmV0dXJuIE1hdGguYWJzKCgkaGFuZGxlLnBvc2l0aW9uKClbZGlyXSArICgkaGFuZGxlW3BhcmFtXSgpIC8gMikpIC0gY2xpY2tQb3MpO1xufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oU2xpZGVyLCAnU2xpZGVyJyk7XG5cbn0oalF1ZXJ5KTtcblxuLy8qKioqKioqKip0aGlzIGlzIGluIGNhc2Ugd2UgZ28gdG8gc3RhdGljLCBhYnNvbHV0ZSBwb3NpdGlvbnMgaW5zdGVhZCBvZiBkeW5hbWljIHBvc2l0aW9uaW5nKioqKioqKipcbi8vIHRoaXMuc2V0U3RlcHMoZnVuY3Rpb24oKSB7XG4vLyAgIF90aGlzLl9ldmVudHMoKTtcbi8vICAgdmFyIGluaXRTdGFydCA9IF90aGlzLm9wdGlvbnMucG9zaXRpb25zW190aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0IC0gMV0gfHwgbnVsbDtcbi8vICAgdmFyIGluaXRFbmQgPSBfdGhpcy5vcHRpb25zLmluaXRpYWxFbmQgPyBfdGhpcy5vcHRpb25zLnBvc2l0aW9uW190aGlzLm9wdGlvbnMuaW5pdGlhbEVuZCAtIDFdIDogbnVsbDtcbi8vICAgaWYgKGluaXRTdGFydCB8fCBpbml0RW5kKSB7XG4vLyAgICAgX3RoaXMuX2hhbmRsZUV2ZW50KGluaXRTdGFydCwgaW5pdEVuZCk7XG4vLyAgIH1cbi8vIH0pO1xuXG4vLyoqKioqKioqKioqdGhlIG90aGVyIHBhcnQgb2YgYWJzb2x1dGUgcG9zaXRpb25zKioqKioqKioqKioqKlxuLy8gU2xpZGVyLnByb3RvdHlwZS5zZXRTdGVwcyA9IGZ1bmN0aW9uKGNiKSB7XG4vLyAgIHZhciBwb3NDaGFuZ2UgPSB0aGlzLiRlbGVtZW50Lm91dGVyV2lkdGgoKSAvIHRoaXMub3B0aW9ucy5zdGVwcztcbi8vICAgdmFyIGNvdW50ZXIgPSAwXG4vLyAgIHdoaWxlKGNvdW50ZXIgPCB0aGlzLm9wdGlvbnMuc3RlcHMpIHtcbi8vICAgICBpZiAoY291bnRlcikge1xuLy8gICAgICAgdGhpcy5vcHRpb25zLnBvc2l0aW9ucy5wdXNoKHRoaXMub3B0aW9ucy5wb3NpdGlvbnNbY291bnRlciAtIDFdICsgcG9zQ2hhbmdlKTtcbi8vICAgICB9IGVsc2Uge1xuLy8gICAgICAgdGhpcy5vcHRpb25zLnBvc2l0aW9ucy5wdXNoKHBvc0NoYW5nZSk7XG4vLyAgICAgfVxuLy8gICAgIGNvdW50ZXIrKztcbi8vICAgfVxuLy8gICBjYigpO1xuLy8gfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBTdGlja3kgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnN0aWNreVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxuY2xhc3MgU3RpY2t5IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBzdGlja3kgdGhpbmcuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBzdGlja3kuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyBvYmplY3QgcGFzc2VkIHdoZW4gY3JlYXRpbmcgdGhlIGVsZW1lbnQgcHJvZ3JhbW1hdGljYWxseS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgU3RpY2t5LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdTdGlja3knKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgc3RpY2t5IGVsZW1lbnQgYnkgYWRkaW5nIGNsYXNzZXMsIGdldHRpbmcvc2V0dGluZyBkaW1lbnNpb25zLCBicmVha3BvaW50cyBhbmQgYXR0cmlidXRlc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN0aWNreS1jb250YWluZXJdJyksXG4gICAgICAgIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdzdGlja3knKSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCEkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgdGhpcy53YXNXcmFwcGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy4kY29udGFpbmVyID0gJHBhcmVudC5sZW5ndGggPyAkcGFyZW50IDogJCh0aGlzLm9wdGlvbnMuY29udGFpbmVyKS53cmFwSW5uZXIodGhpcy4kZWxlbWVudCk7XG4gICAgdGhpcy4kY29udGFpbmVyLmFkZENsYXNzKHRoaXMub3B0aW9ucy5jb250YWluZXJDbGFzcyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5zdGlja3lDbGFzcylcbiAgICAgICAgICAgICAgICAgLmF0dHIoeydkYXRhLXJlc2l6ZSc6IGlkfSk7XG5cbiAgICB0aGlzLnNjcm9sbENvdW50ID0gdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgdGhpcy5pc1N0dWNrID0gZmFsc2U7XG4gICAgJCh3aW5kb3cpLm9uZSgnbG9hZC56Zi5zdGlja3knLCBmdW5jdGlvbigpe1xuICAgICAgLy9XZSBjYWxjdWxhdGUgdGhlIGNvbnRhaW5lciBoZWlnaHQgdG8gaGF2ZSBjb3JyZWN0IHZhbHVlcyBmb3IgYW5jaG9yIHBvaW50cyBvZmZzZXQgY2FsY3VsYXRpb24uXG4gICAgICBfdGhpcy5jb250YWluZXJIZWlnaHQgPSBfdGhpcy4kZWxlbWVudC5jc3MoXCJkaXNwbGF5XCIpID09IFwibm9uZVwiID8gMCA6IF90aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgIF90aGlzLiRjb250YWluZXIuY3NzKCdoZWlnaHQnLCBfdGhpcy5jb250YWluZXJIZWlnaHQpO1xuICAgICAgX3RoaXMuZWxlbUhlaWdodCA9IF90aGlzLmNvbnRhaW5lckhlaWdodDtcbiAgICAgIGlmKF90aGlzLm9wdGlvbnMuYW5jaG9yICE9PSAnJyl7XG4gICAgICAgIF90aGlzLiRhbmNob3IgPSAkKCcjJyArIF90aGlzLm9wdGlvbnMuYW5jaG9yKTtcbiAgICAgIH1lbHNle1xuICAgICAgICBfdGhpcy5fcGFyc2VQb2ludHMoKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX3NldFNpemVzKGZ1bmN0aW9uKCl7XG4gICAgICAgIF90aGlzLl9jYWxjKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgICAgX3RoaXMuX2V2ZW50cyhpZC5zcGxpdCgnLScpLnJldmVyc2UoKS5qb2luKCctJykpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHVzaW5nIG11bHRpcGxlIGVsZW1lbnRzIGFzIGFuY2hvcnMsIGNhbGN1bGF0ZXMgdGhlIHRvcCBhbmQgYm90dG9tIHBpeGVsIHZhbHVlcyB0aGUgc3RpY2t5IHRoaW5nIHNob3VsZCBzdGljayBhbmQgdW5zdGljayBvbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcGFyc2VQb2ludHMoKSB7XG4gICAgdmFyIHRvcCA9IHRoaXMub3B0aW9ucy50b3BBbmNob3IgPT0gXCJcIiA/IDEgOiB0aGlzLm9wdGlvbnMudG9wQW5jaG9yLFxuICAgICAgICBidG0gPSB0aGlzLm9wdGlvbnMuYnRtQW5jaG9yPT0gXCJcIiA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQgOiB0aGlzLm9wdGlvbnMuYnRtQW5jaG9yLFxuICAgICAgICBwdHMgPSBbdG9wLCBidG1dLFxuICAgICAgICBicmVha3MgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcHRzLmxlbmd0aDsgaSA8IGxlbiAmJiBwdHNbaV07IGkrKykge1xuICAgICAgdmFyIHB0O1xuICAgICAgaWYgKHR5cGVvZiBwdHNbaV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHB0ID0gcHRzW2ldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBsYWNlID0gcHRzW2ldLnNwbGl0KCc6JyksXG4gICAgICAgICAgICBhbmNob3IgPSAkKGAjJHtwbGFjZVswXX1gKTtcblxuICAgICAgICBwdCA9IGFuY2hvci5vZmZzZXQoKS50b3A7XG4gICAgICAgIGlmIChwbGFjZVsxXSAmJiBwbGFjZVsxXS50b0xvd2VyQ2FzZSgpID09PSAnYm90dG9tJykge1xuICAgICAgICAgIHB0ICs9IGFuY2hvclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrc1tpXSA9IHB0O1xuICAgIH1cblxuXG4gICAgdGhpcy5wb2ludHMgPSBicmVha3M7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBzY3JvbGxpbmcgZWxlbWVudC5cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gcHN1ZWRvLXJhbmRvbSBpZCBmb3IgdW5pcXVlIHNjcm9sbCBldmVudCBsaXN0ZW5lci5cbiAgICovXG4gIF9ldmVudHMoaWQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBzY3JvbGxMaXN0ZW5lciA9IHRoaXMuc2Nyb2xsTGlzdGVuZXIgPSBgc2Nyb2xsLnpmLiR7aWR9YDtcbiAgICBpZiAodGhpcy5pc09uKSB7IHJldHVybjsgfVxuICAgIGlmICh0aGlzLmNhblN0aWNrKSB7XG4gICAgICB0aGlzLmlzT24gPSB0cnVlO1xuICAgICAgJCh3aW5kb3cpLm9mZihzY3JvbGxMaXN0ZW5lcilcbiAgICAgICAgICAgICAgIC5vbihzY3JvbGxMaXN0ZW5lciwgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc2Nyb2xsQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxDb3VudCA9IF90aGlzLm9wdGlvbnMuY2hlY2tFdmVyeTtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgIF90aGlzLl9jYWxjKGZhbHNlLCB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJylcbiAgICAgICAgICAgICAgICAgLm9uKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgZnVuY3Rpb24oZSwgZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY2FuU3RpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmlzT24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9ldmVudHMoaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5pc09uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3BhdXNlTGlzdGVuZXJzKHNjcm9sbExpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBldmVudCBoYW5kbGVycyBmb3Igc2Nyb2xsIGFuZCBjaGFuZ2UgZXZlbnRzIG9uIGFuY2hvci5cbiAgICogQGZpcmVzIFN0aWNreSNwYXVzZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2Nyb2xsTGlzdGVuZXIgLSB1bmlxdWUsIG5hbWVzcGFjZWQgc2Nyb2xsIGxpc3RlbmVyIGF0dGFjaGVkIHRvIGB3aW5kb3dgXG4gICAqL1xuICBfcGF1c2VMaXN0ZW5lcnMoc2Nyb2xsTGlzdGVuZXIpIHtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICAkKHdpbmRvdykub2ZmKHNjcm9sbExpc3RlbmVyKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBpcyBwYXVzZWQgZHVlIHRvIHJlc2l6ZSBldmVudCBzaHJpbmtpbmcgdGhlIHZpZXcuXG4gICAgICogQGV2ZW50IFN0aWNreSNwYXVzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncGF1c2UuemYuc3RpY2t5Jyk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGV2ZXJ5IGBzY3JvbGxgIGV2ZW50IGFuZCBvbiBgX2luaXRgXG4gICAqIGZpcmVzIGZ1bmN0aW9ucyBiYXNlZCBvbiBib29sZWFucyBhbmQgY2FjaGVkIHZhbHVlc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrU2l6ZXMgLSB0cnVlIGlmIHBsdWdpbiBzaG91bGQgcmVjYWxjdWxhdGUgc2l6ZXMgYW5kIGJyZWFrcG9pbnRzLlxuICAgKiBAcGFyYW0ge051bWJlcn0gc2Nyb2xsIC0gY3VycmVudCBzY3JvbGwgcG9zaXRpb24gcGFzc2VkIGZyb20gc2Nyb2xsIGV2ZW50IGNiIGZ1bmN0aW9uLiBJZiBub3QgcGFzc2VkLCBkZWZhdWx0cyB0byBgd2luZG93LnBhZ2VZT2Zmc2V0YC5cbiAgICovXG4gIF9jYWxjKGNoZWNrU2l6ZXMsIHNjcm9sbCkge1xuICAgIGlmIChjaGVja1NpemVzKSB7IHRoaXMuX3NldFNpemVzKCk7IH1cblxuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzY3JvbGwpIHsgc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0OyB9XG5cbiAgICBpZiAoc2Nyb2xsID49IHRoaXMudG9wUG9pbnQpIHtcbiAgICAgIGlmIChzY3JvbGwgPD0gdGhpcy5ib3R0b21Qb2ludCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3NldFN0aWNreSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2F1c2VzIHRoZSAkZWxlbWVudCB0byBiZWNvbWUgc3R1Y2suXG4gICAqIEFkZHMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBmaXJlcyBTdGlja3kjc3R1Y2t0b1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRTdGlja3koKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc3RpY2tUbyA9IHRoaXMub3B0aW9ucy5zdGlja1RvLFxuICAgICAgICBtcmduID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnYm90dG9tJyA6ICd0b3AnLFxuICAgICAgICBjc3MgPSB7fTtcblxuICAgIGNzc1ttcmduXSA9IGAke3RoaXMub3B0aW9uc1ttcmduXX1lbWA7XG4gICAgY3NzW3N0aWNrVG9dID0gMDtcbiAgICBjc3Nbbm90U3R1Y2tUb10gPSAnYXV0byc7XG4gICAgY3NzWydsZWZ0J10gPSB0aGlzLiRjb250YWluZXIub2Zmc2V0KCkubGVmdCArIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuJGNvbnRhaW5lclswXSlbXCJwYWRkaW5nLWxlZnRcIl0sIDEwKTtcbiAgICB0aGlzLmlzU3R1Y2sgPSB0cnVlO1xuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYGlzLWFuY2hvcmVkIGlzLWF0LSR7bm90U3R1Y2tUb31gKVxuICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYGlzLXN0dWNrIGlzLWF0LSR7c3RpY2tUb31gKVxuICAgICAgICAgICAgICAgICAuY3NzKGNzcylcbiAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlICRlbGVtZW50IGhhcyBiZWNvbWUgYHBvc2l0aW9uOiBmaXhlZDtgXG4gICAgICAgICAgICAgICAgICAqIE5hbWVzcGFjZWQgdG8gYHRvcGAgb3IgYGJvdHRvbWAsIGUuZy4gYHN0aWNreS56Zi5zdHVja3RvOnRvcGBcbiAgICAgICAgICAgICAgICAgICogQGV2ZW50IFN0aWNreSNzdHVja3RvXG4gICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAudHJpZ2dlcihgc3RpY2t5LnpmLnN0dWNrdG86JHtzdGlja1RvfWApO1xuICAgIHRoaXMuJGVsZW1lbnQub24oXCJ0cmFuc2l0aW9uZW5kIHdlYmtpdFRyYW5zaXRpb25FbmQgb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQgTVNUcmFuc2l0aW9uRW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgX3RoaXMuX3NldFNpemVzKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2F1c2VzIHRoZSAkZWxlbWVudCB0byBiZWNvbWUgdW5zdHVjay5cbiAgICogUmVtb3ZlcyBgcG9zaXRpb246IGZpeGVkO2AsIGFuZCBoZWxwZXIgY2xhc3Nlcy5cbiAgICogQWRkcyBvdGhlciBoZWxwZXIgY2xhc3Nlcy5cbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1RvcCAtIHRlbGxzIHRoZSBmdW5jdGlvbiBpZiB0aGUgJGVsZW1lbnQgc2hvdWxkIGFuY2hvciB0byB0aGUgdG9wIG9yIGJvdHRvbSBvZiBpdHMgJGFuY2hvciBlbGVtZW50LlxuICAgKiBAZmlyZXMgU3RpY2t5I3Vuc3R1Y2tmcm9tXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVtb3ZlU3RpY2t5KGlzVG9wKSB7XG4gICAgdmFyIHN0aWNrVG8gPSB0aGlzLm9wdGlvbnMuc3RpY2tUbyxcbiAgICAgICAgc3RpY2tUb1RvcCA9IHN0aWNrVG8gPT09ICd0b3AnLFxuICAgICAgICBjc3MgPSB7fSxcbiAgICAgICAgYW5jaG9yUHQgPSAodGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSAtIHRoaXMucG9pbnRzWzBdIDogdGhpcy5hbmNob3JIZWlnaHQpIC0gdGhpcy5lbGVtSGVpZ2h0LFxuICAgICAgICBtcmduID0gc3RpY2tUb1RvcCA/ICdtYXJnaW5Ub3AnIDogJ21hcmdpbkJvdHRvbScsXG4gICAgICAgIG5vdFN0dWNrVG8gPSBzdGlja1RvVG9wID8gJ2JvdHRvbScgOiAndG9wJyxcbiAgICAgICAgdG9wT3JCb3R0b20gPSBpc1RvcCA/ICd0b3AnIDogJ2JvdHRvbSc7XG5cbiAgICBjc3NbbXJnbl0gPSAwO1xuXG4gICAgY3NzWydib3R0b20nXSA9ICdhdXRvJztcbiAgICBpZihpc1RvcCkge1xuICAgICAgY3NzWyd0b3AnXSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1sndG9wJ10gPSBhbmNob3JQdDtcbiAgICB9XG5cbiAgICBjc3NbJ2xlZnQnXSA9ICcnO1xuICAgIHRoaXMuaXNTdHVjayA9IGZhbHNlO1xuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYGlzLXN0dWNrIGlzLWF0LSR7c3RpY2tUb31gKVxuICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYGlzLWFuY2hvcmVkIGlzLWF0LSR7dG9wT3JCb3R0b219YClcbiAgICAgICAgICAgICAgICAgLmNzcyhjc3MpXG4gICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSAkZWxlbWVudCBoYXMgYmVjb21lIGFuY2hvcmVkLlxuICAgICAgICAgICAgICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYudW5zdHVja2Zyb206Ym90dG9tYFxuICAgICAgICAgICAgICAgICAgKiBAZXZlbnQgU3RpY2t5I3Vuc3R1Y2tmcm9tXG4gICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAudHJpZ2dlcihgc3RpY2t5LnpmLnVuc3R1Y2tmcm9tOiR7dG9wT3JCb3R0b219YCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgJGVsZW1lbnQgYW5kICRjb250YWluZXIgc2l6ZXMgZm9yIHBsdWdpbi5cbiAgICogQ2FsbHMgYF9zZXRCcmVha1BvaW50c2AuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSBvbiBjb21wbGV0aW9uIG9mIGBfc2V0QnJlYWtQb2ludHNgLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFNpemVzKGNiKSB7XG4gICAgdGhpcy5jYW5TdGljayA9IEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5zdGlja3lPbik7XG4gICAgaWYgKCF0aGlzLmNhblN0aWNrKSB7XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgbmV3RWxlbVdpZHRoID0gdGhpcy4kY29udGFpbmVyWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLFxuICAgICAgICBjb21wID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy4kY29udGFpbmVyWzBdKSxcbiAgICAgICAgcGRuZyA9IHBhcnNlSW50KGNvbXBbJ3BhZGRpbmctcmlnaHQnXSwgMTApO1xuXG4gICAgaWYgKHRoaXMuJGFuY2hvciAmJiB0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFuY2hvckhlaWdodCA9IHRoaXMuJGFuY2hvclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcnNlUG9pbnRzKCk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgJ21heC13aWR0aCc6IGAke25ld0VsZW1XaWR0aCAtIHBkbmd9cHhgXG4gICAgfSk7XG5cbiAgICB2YXIgbmV3Q29udGFpbmVySGVpZ2h0ID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgfHwgdGhpcy5jb250YWluZXJIZWlnaHQ7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIikge1xuICAgICAgbmV3Q29udGFpbmVySGVpZ2h0ID0gMDtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXJIZWlnaHQgPSBuZXdDb250YWluZXJIZWlnaHQ7XG4gICAgdGhpcy4kY29udGFpbmVyLmNzcyh7XG4gICAgICBoZWlnaHQ6IG5ld0NvbnRhaW5lckhlaWdodFxuICAgIH0pO1xuICAgIHRoaXMuZWxlbUhlaWdodCA9IG5ld0NvbnRhaW5lckhlaWdodDtcblxuICAgIGlmICh0aGlzLmlzU3R1Y2spIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcImxlZnRcIjp0aGlzLiRjb250YWluZXIub2Zmc2V0KCkubGVmdCArIHBhcnNlSW50KGNvbXBbJ3BhZGRpbmctbGVmdCddLCAxMCl9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLWF0LWJvdHRvbScpKSB7XG4gICAgICAgIHZhciBhbmNob3JQdCA9ICh0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzFdIC0gdGhpcy4kY29udGFpbmVyLm9mZnNldCgpLnRvcCA6IHRoaXMuYW5jaG9ySGVpZ2h0KSAtIHRoaXMuZWxlbUhlaWdodDtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5jc3MoJ3RvcCcsIGFuY2hvclB0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9zZXRCcmVha1BvaW50cyhuZXdDb250YWluZXJIZWlnaHQsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdXBwZXIgYW5kIGxvd2VyIGJyZWFrcG9pbnRzIGZvciB0aGUgZWxlbWVudCB0byBiZWNvbWUgc3RpY2t5L3Vuc3RpY2t5LlxuICAgKiBAcGFyYW0ge051bWJlcn0gZWxlbUhlaWdodCAtIHB4IHZhbHVlIGZvciBzdGlja3kuJGVsZW1lbnQgaGVpZ2h0LCBjYWxjdWxhdGVkIGJ5IGBfc2V0U2l6ZXNgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBvbiBjb21wbGV0aW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldEJyZWFrUG9pbnRzKGVsZW1IZWlnaHQsIGNiKSB7XG4gICAgaWYgKCF0aGlzLmNhblN0aWNrKSB7XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICAgIGVsc2UgeyByZXR1cm4gZmFsc2U7IH1cbiAgICB9XG4gICAgdmFyIG1Ub3AgPSBlbUNhbGModGhpcy5vcHRpb25zLm1hcmdpblRvcCksXG4gICAgICAgIG1CdG0gPSBlbUNhbGModGhpcy5vcHRpb25zLm1hcmdpbkJvdHRvbSksXG4gICAgICAgIHRvcFBvaW50ID0gdGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1swXSA6IHRoaXMuJGFuY2hvci5vZmZzZXQoKS50b3AsXG4gICAgICAgIGJvdHRvbVBvaW50ID0gdGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSA6IHRvcFBvaW50ICsgdGhpcy5hbmNob3JIZWlnaHQsXG4gICAgICAgIC8vIHRvcFBvaW50ID0gdGhpcy4kYW5jaG9yLm9mZnNldCgpLnRvcCB8fCB0aGlzLnBvaW50c1swXSxcbiAgICAgICAgLy8gYm90dG9tUG9pbnQgPSB0b3BQb2ludCArIHRoaXMuYW5jaG9ySGVpZ2h0IHx8IHRoaXMucG9pbnRzWzFdLFxuICAgICAgICB3aW5IZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnN0aWNrVG8gPT09ICd0b3AnKSB7XG4gICAgICB0b3BQb2ludCAtPSBtVG9wO1xuICAgICAgYm90dG9tUG9pbnQgLT0gKGVsZW1IZWlnaHQgKyBtVG9wKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zdGlja1RvID09PSAnYm90dG9tJykge1xuICAgICAgdG9wUG9pbnQgLT0gKHdpbkhlaWdodCAtIChlbGVtSGVpZ2h0ICsgbUJ0bSkpO1xuICAgICAgYm90dG9tUG9pbnQgLT0gKHdpbkhlaWdodCAtIG1CdG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvL3RoaXMgd291bGQgYmUgdGhlIHN0aWNrVG86IGJvdGggb3B0aW9uLi4uIHRyaWNreVxuICAgIH1cblxuICAgIHRoaXMudG9wUG9pbnQgPSB0b3BQb2ludDtcbiAgICB0aGlzLmJvdHRvbVBvaW50ID0gYm90dG9tUG9pbnQ7XG5cbiAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgY3VycmVudCBzdGlja3kgZWxlbWVudC5cbiAgICogUmVzZXRzIHRoZSBlbGVtZW50IHRvIHRoZSB0b3AgcG9zaXRpb24gZmlyc3QuXG4gICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzLCBKUy1hZGRlZCBjc3MgcHJvcGVydGllcyBhbmQgY2xhc3NlcywgYW5kIHVud3JhcHMgdGhlICRlbGVtZW50IGlmIHRoZSBKUyBhZGRlZCB0aGUgJGNvbnRhaW5lci5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcblxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYCR7dGhpcy5vcHRpb25zLnN0aWNreUNsYXNzfSBpcy1hbmNob3JlZCBpcy1hdC10b3BgKVxuICAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcnLFxuICAgICAgICAgICAgICAgICAgIHRvcDogJycsXG4gICAgICAgICAgICAgICAgICAgYm90dG9tOiAnJyxcbiAgICAgICAgICAgICAgICAgICAnbWF4LXdpZHRoJzogJydcbiAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgLm9mZigncmVzaXplbWUuemYudHJpZ2dlcicpO1xuICAgIGlmICh0aGlzLiRhbmNob3IgJiYgdGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgdGhpcy4kYW5jaG9yLm9mZignY2hhbmdlLnpmLnN0aWNreScpO1xuICAgIH1cbiAgICAkKHdpbmRvdykub2ZmKHRoaXMuc2Nyb2xsTGlzdGVuZXIpO1xuXG4gICAgaWYgKHRoaXMud2FzV3JhcHBlZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC51bndyYXAoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5jb250YWluZXJDbGFzcylcbiAgICAgICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcnXG4gICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblN0aWNreS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEN1c3RvbWl6YWJsZSBjb250YWluZXIgdGVtcGxhdGUuIEFkZCB5b3VyIG93biBjbGFzc2VzIGZvciBzdHlsaW5nIGFuZCBzaXppbmcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJyZsdDtkaXYgZGF0YS1zdGlja3ktY29udGFpbmVyIGNsYXNzPVwic21hbGwtNiBjb2x1bW5zXCImZ3Q7Jmx0Oy9kaXYmZ3Q7J1xuICAgKi9cbiAgY29udGFpbmVyOiAnPGRpdiBkYXRhLXN0aWNreS1jb250YWluZXI+PC9kaXY+JyxcbiAgLyoqXG4gICAqIExvY2F0aW9uIGluIHRoZSB2aWV3IHRoZSBlbGVtZW50IHN0aWNrcyB0by5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndG9wJ1xuICAgKi9cbiAgc3RpY2tUbzogJ3RvcCcsXG4gIC8qKlxuICAgKiBJZiBhbmNob3JlZCB0byBhIHNpbmdsZSBlbGVtZW50LCB0aGUgaWQgb2YgdGhhdCBlbGVtZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdleGFtcGxlSWQnXG4gICAqL1xuICBhbmNob3I6ICcnLFxuICAvKipcbiAgICogSWYgdXNpbmcgbW9yZSB0aGFuIG9uZSBlbGVtZW50IGFzIGFuY2hvciBwb2ludHMsIHRoZSBpZCBvZiB0aGUgdG9wIGFuY2hvci5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZXhhbXBsZUlkOnRvcCdcbiAgICovXG4gIHRvcEFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtb3JlIHRoYW4gb25lIGVsZW1lbnQgYXMgYW5jaG9yIHBvaW50cywgdGhlIGlkIG9mIHRoZSBib3R0b20gYW5jaG9yLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdleGFtcGxlSWQ6Ym90dG9tJ1xuICAgKi9cbiAgYnRtQW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIE1hcmdpbiwgaW4gYGVtYCdzIHRvIGFwcGx5IHRvIHRoZSB0b3Agb2YgdGhlIGVsZW1lbnQgd2hlbiBpdCBiZWNvbWVzIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxXG4gICAqL1xuICBtYXJnaW5Ub3A6IDEsXG4gIC8qKlxuICAgKiBNYXJnaW4sIGluIGBlbWAncyB0byBhcHBseSB0byB0aGUgYm90dG9tIG9mIHRoZSBlbGVtZW50IHdoZW4gaXQgYmVjb21lcyBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgbWFyZ2luQm90dG9tOiAxLFxuICAvKipcbiAgICogQnJlYWtwb2ludCBzdHJpbmcgdGhhdCBpcyB0aGUgbWluaW11bSBzY3JlZW4gc2l6ZSBhbiBlbGVtZW50IHNob3VsZCBiZWNvbWUgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdtZWRpdW0nXG4gICAqL1xuICBzdGlja3lPbjogJ21lZGl1bScsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHN0aWNreSBlbGVtZW50LCBhbmQgcmVtb3ZlZCBvbiBkZXN0cnVjdGlvbi4gRm91bmRhdGlvbiBkZWZhdWx0cyB0byBgc3RpY2t5YC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnc3RpY2t5J1xuICAgKi9cbiAgc3RpY2t5Q2xhc3M6ICdzdGlja3knLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBzdGlja3kgY29udGFpbmVyLiBGb3VuZGF0aW9uIGRlZmF1bHRzIHRvIGBzdGlja3ktY29udGFpbmVyYC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnc3RpY2t5LWNvbnRhaW5lcidcbiAgICovXG4gIGNvbnRhaW5lckNsYXNzOiAnc3RpY2t5LWNvbnRhaW5lcicsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygc2Nyb2xsIGV2ZW50cyBiZXR3ZWVuIHRoZSBwbHVnaW4ncyByZWNhbGN1bGF0aW5nIHN0aWNreSBwb2ludHMuIFNldHRpbmcgaXQgdG8gYDBgIHdpbGwgY2F1c2UgaXQgdG8gcmVjYWxjIGV2ZXJ5IHNjcm9sbCBldmVudCwgc2V0dGluZyBpdCB0byBgLTFgIHdpbGwgcHJldmVudCByZWNhbGMgb24gc2Nyb2xsLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwXG4gICAqL1xuICBjaGVja0V2ZXJ5OiAtMVxufTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIGVtIHZhbHVlc1xuICogQHBhcmFtIE51bWJlciB7ZW19IC0gbnVtYmVyIG9mIGVtJ3MgdG8gY2FsY3VsYXRlIGludG8gcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIGVtQ2FsYyhlbSkge1xuICByZXR1cm4gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSwgbnVsbCkuZm9udFNpemUsIDEwKSAqIGVtO1xufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oU3RpY2t5LCAnU3RpY2t5Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBUYWJzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi50YWJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRpbWVyQW5kSW1hZ2VMb2FkZXIgaWYgdGFicyBjb250YWluIGltYWdlc1xuICovXG5cbmNsYXNzIFRhYnMge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiB0YWJzLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIFRhYnMjaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIHRhYnMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVGFicy5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1RhYnMnKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdUYWJzJywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3ByZXZpb3VzJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnXG4gICAgICAvLyAnVEFCJzogJ25leHQnLFxuICAgICAgLy8gJ1NISUZUX1RBQic6ICdwcmV2aW91cydcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgdGFicyBieSBzaG93aW5nIGFuZCBmb2N1c2luZyAoaWYgYXV0b0ZvY3VzPXRydWUpIHRoZSBwcmVzZXQgYWN0aXZlIHRhYi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiR0YWJUaXRsZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9YCk7XG4gICAgdGhpcy4kdGFiQ29udGVudCA9ICQoYFtkYXRhLXRhYnMtY29udGVudD1cIiR7dGhpcy4kZWxlbWVudFswXS5pZH1cIl1gKTtcblxuICAgIHRoaXMuJHRhYlRpdGxlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICRsaW5rID0gJGVsZW0uZmluZCgnYScpLFxuICAgICAgICAgIGlzQWN0aXZlID0gJGVsZW0uaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpLFxuICAgICAgICAgIGhhc2ggPSAkbGlua1swXS5oYXNoLnNsaWNlKDEpLFxuICAgICAgICAgIGxpbmtJZCA9ICRsaW5rWzBdLmlkID8gJGxpbmtbMF0uaWQgOiBgJHtoYXNofS1sYWJlbGAsXG4gICAgICAgICAgJHRhYkNvbnRlbnQgPSAkKGAjJHtoYXNofWApO1xuXG4gICAgICAkZWxlbS5hdHRyKHsncm9sZSc6ICdwcmVzZW50YXRpb24nfSk7XG5cbiAgICAgICRsaW5rLmF0dHIoe1xuICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAnYXJpYS1jb250cm9scyc6IGhhc2gsXG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogaXNBY3RpdmUsXG4gICAgICAgICdpZCc6IGxpbmtJZFxuICAgICAgfSk7XG5cbiAgICAgICR0YWJDb250ZW50LmF0dHIoe1xuICAgICAgICAncm9sZSc6ICd0YWJwYW5lbCcsXG4gICAgICAgICdhcmlhLWhpZGRlbic6ICFpc0FjdGl2ZSxcbiAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGxpbmtJZFxuICAgICAgfSk7XG5cbiAgICAgIGlmKGlzQWN0aXZlICYmIF90aGlzLm9wdGlvbnMuYXV0b0ZvY3VzKXtcbiAgICAgICAgJGxpbmsuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5tYXRjaEhlaWdodCkge1xuICAgICAgdmFyICRpbWFnZXMgPSB0aGlzLiR0YWJDb250ZW50LmZpbmQoJ2ltZycpO1xuXG4gICAgICBpZiAoJGltYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZCgkaW1hZ2VzLCB0aGlzLl9zZXRIZWlnaHQuYmluZCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZXRIZWlnaHQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIHRhYnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuX2FkZEtleUhhbmRsZXIoKTtcbiAgICB0aGlzLl9hZGRDbGlja0hhbmRsZXIoKTtcbiAgICB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIgPSBudWxsO1xuICAgIFxuICAgIGlmICh0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpIHtcbiAgICAgIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlciA9IHRoaXMuX3NldEhlaWdodC5iaW5kKHRoaXMpO1xuICAgICAgXG4gICAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgY2xpY2sgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRDbGlja0hhbmRsZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vZmYoJ2NsaWNrLnpmLnRhYnMnKVxuICAgICAgLm9uKCdjbGljay56Zi50YWJzJywgYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9YCwgZnVuY3Rpb24oZSl7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJCh0aGlzKSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGtleWJvYXJkIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIHRhYnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkS2V5SGFuZGxlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciAkZmlyc3RUYWIgPSBfdGhpcy4kZWxlbWVudC5maW5kKCdsaTpmaXJzdC1vZi10eXBlJyk7XG4gICAgdmFyICRsYXN0VGFiID0gX3RoaXMuJGVsZW1lbnQuZmluZCgnbGk6bGFzdC1vZi10eXBlJyk7XG5cbiAgICB0aGlzLiR0YWJUaXRsZXMub2ZmKCdrZXlkb3duLnpmLnRhYnMnKS5vbigna2V5ZG93bi56Zi50YWJzJywgZnVuY3Rpb24oZSl7XG4gICAgICBpZiAoZS53aGljaCA9PT0gOSkgcmV0dXJuO1xuICAgICAgXG5cbiAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyksXG4gICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgJHByZXZFbGVtZW50LFxuICAgICAgICAkbmV4dEVsZW1lbnQ7XG5cbiAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgaWYgKCQodGhpcykuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMud3JhcE9uS2V5cykge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gaSA9PT0gMCA/ICRlbGVtZW50cy5sYXN0KCkgOiAkZWxlbWVudHMuZXEoaS0xKTtcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9IGkgPT09ICRlbGVtZW50cy5sZW5ndGggLTEgPyAkZWxlbWVudHMuZmlyc3QoKSA6ICRlbGVtZW50cy5lcShpKzEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaS0xKSk7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSsxLCAkZWxlbWVudHMubGVuZ3RoLTEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1RhYnMnLCB7XG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRlbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCRlbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5maW5kKCdbcm9sZT1cInRhYlwiXScpLmZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkcHJldkVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpO1xuICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJG5leHRFbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSB0YWIgYCR0YXJnZXRDb250ZW50YCBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBUYWIgdG8gb3Blbi5cbiAgICogQGZpcmVzIFRhYnMjY2hhbmdlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX2hhbmRsZVRhYkNoYW5nZSgkdGFyZ2V0KSB7XG4gICAgdmFyICR0YWJMaW5rID0gJHRhcmdldC5maW5kKCdbcm9sZT1cInRhYlwiXScpLFxuICAgICAgICBoYXNoID0gJHRhYkxpbmtbMF0uaGFzaCxcbiAgICAgICAgJHRhcmdldENvbnRlbnQgPSB0aGlzLiR0YWJDb250ZW50LmZpbmQoaGFzaCksXG4gICAgICAgICRvbGRUYWIgPSB0aGlzLiRlbGVtZW50LlxuICAgICAgICAgIGZpbmQoYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9LmlzLWFjdGl2ZWApXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKVxuICAgICAgICAgIC5maW5kKCdbcm9sZT1cInRhYlwiXScpXG4gICAgICAgICAgLmF0dHIoeyAnYXJpYS1zZWxlY3RlZCc6ICdmYWxzZScgfSk7XG5cbiAgICAkKGAjJHskb2xkVGFiLmF0dHIoJ2FyaWEtY29udHJvbHMnKX1gKVxuICAgICAgLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKVxuICAgICAgLmF0dHIoeyAnYXJpYS1oaWRkZW4nOiAndHJ1ZScgfSk7XG5cbiAgICAkdGFyZ2V0LmFkZENsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICR0YWJMaW5rLmF0dHIoeydhcmlhLXNlbGVjdGVkJzogJ3RydWUnfSk7XG5cbiAgICAkdGFyZ2V0Q29udGVudFxuICAgICAgLmFkZENsYXNzKCdpcy1hY3RpdmUnKVxuICAgICAgLmF0dHIoeydhcmlhLWhpZGRlbic6ICdmYWxzZSd9KTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgc3VjY2Vzc2Z1bGx5IGNoYW5nZWQgdGFicy5cbiAgICAgKiBAZXZlbnQgVGFicyNjaGFuZ2VcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZS56Zi50YWJzJywgWyR0YXJnZXRdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgbWV0aG9kIGZvciBzZWxlY3RpbmcgYSBjb250ZW50IHBhbmUgdG8gZGlzcGxheS5cbiAgICogQHBhcmFtIHtqUXVlcnkgfCBTdHJpbmd9IGVsZW0gLSBqUXVlcnkgb2JqZWN0IG9yIHN0cmluZyBvZiB0aGUgaWQgb2YgdGhlIHBhbmUgdG8gZGlzcGxheS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzZWxlY3RUYWIoZWxlbSkge1xuICAgIHZhciBpZFN0cjtcblxuICAgIGlmICh0eXBlb2YgZWxlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlkU3RyID0gZWxlbVswXS5pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWRTdHIgPSBlbGVtO1xuICAgIH1cblxuICAgIGlmIChpZFN0ci5pbmRleE9mKCcjJykgPCAwKSB7XG4gICAgICBpZFN0ciA9IGAjJHtpZFN0cn1gO1xuICAgIH1cblxuICAgIHZhciAkdGFyZ2V0ID0gdGhpcy4kdGFiVGl0bGVzLmZpbmQoYFtocmVmPVwiJHtpZFN0cn1cIl1gKS5wYXJlbnQoYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9YCk7XG5cbiAgICB0aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJHRhcmdldCk7XG4gIH07XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBoZWlnaHQgb2YgZWFjaCBwYW5lbCB0byB0aGUgaGVpZ2h0IG9mIHRoZSB0YWxsZXN0IHBhbmVsLlxuICAgKiBJZiBlbmFibGVkIGluIG9wdGlvbnMsIGdldHMgY2FsbGVkIG9uIG1lZGlhIHF1ZXJ5IGNoYW5nZS5cbiAgICogSWYgbG9hZGluZyBjb250ZW50IHZpYSBleHRlcm5hbCBzb3VyY2UsIGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgb3Igd2l0aCBfcmVmbG93LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRIZWlnaHQoKSB7XG4gICAgdmFyIG1heCA9IDA7XG4gICAgdGhpcy4kdGFiQ29udGVudFxuICAgICAgLmZpbmQoYC4ke3RoaXMub3B0aW9ucy5wYW5lbENsYXNzfWApXG4gICAgICAuY3NzKCdoZWlnaHQnLCAnJylcbiAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcGFuZWwgPSAkKHRoaXMpLFxuICAgICAgICAgICAgaXNBY3RpdmUgPSBwYW5lbC5oYXNDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAgICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgICAgIHBhbmVsLmNzcyh7J3Zpc2liaWxpdHknOiAnaGlkZGVuJywgJ2Rpc3BsYXknOiAnYmxvY2snfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGVtcCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXG4gICAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgICBwYW5lbC5jc3Moe1xuICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiAnJyxcbiAgICAgICAgICAgICdkaXNwbGF5JzogJydcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1heCA9IHRlbXAgPiBtYXggPyB0ZW1wIDogbWF4O1xuICAgICAgfSlcbiAgICAgIC5jc3MoJ2hlaWdodCcsIGAke21heH1weGApO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFuIHRhYnMuXG4gICAqIEBmaXJlcyBUYWJzI2Rlc3Ryb3llZFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLmxpbmtDbGFzc31gKVxuICAgICAgLm9mZignLnpmLnRhYnMnKS5oaWRlKCkuZW5kKClcbiAgICAgIC5maW5kKGAuJHt0aGlzLm9wdGlvbnMucGFuZWxDbGFzc31gKVxuICAgICAgLmhpZGUoKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpIHtcbiAgICAgIGlmICh0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgJCh3aW5kb3cpLm9mZignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVGFicy5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgd2luZG93IHRvIHNjcm9sbCB0byBjb250ZW50IG9mIGFjdGl2ZSBwYW5lIG9uIGxvYWQgaWYgc2V0IHRvIHRydWUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGF1dG9Gb2N1czogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEFsbG93cyBrZXlib2FyZCBpbnB1dCB0byAnd3JhcCcgYXJvdW5kIHRoZSB0YWIgbGlua3MuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgd3JhcE9uS2V5czogdHJ1ZSxcblxuICAvKipcbiAgICogQWxsb3dzIHRoZSB0YWIgY29udGVudCBwYW5lcyB0byBtYXRjaCBoZWlnaHRzIGlmIHNldCB0byB0cnVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBtYXRjaEhlaWdodDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gYGxpYCdzIGluIHRhYiBsaW5rIGxpc3QuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3RhYnMtdGl0bGUnXG4gICAqL1xuICBsaW5rQ2xhc3M6ICd0YWJzLXRpdGxlJyxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgY29udGVudCBjb250YWluZXJzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0YWJzLXBhbmVsJ1xuICAgKi9cbiAgcGFuZWxDbGFzczogJ3RhYnMtcGFuZWwnXG59O1xuXG5mdW5jdGlvbiBjaGVja0NsYXNzKCRlbGVtKXtcbiAgcmV0dXJuICRlbGVtLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFRhYnMsICdUYWJzJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBUb2dnbGVyIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi50b2dnbGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbmNsYXNzIFRvZ2dsZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBUb2dnbGVyLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIFRvZ2dsZXIjaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFRvZ2dsZXIuZGVmYXVsdHMsIGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICB0aGlzLmNsYXNzTmFtZSA9ICcnO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnVG9nZ2xlcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBUb2dnbGVyIHBsdWdpbiBieSBwYXJzaW5nIHRoZSB0b2dnbGUgY2xhc3MgZnJvbSBkYXRhLXRvZ2dsZXIsIG9yIGFuaW1hdGlvbiBjbGFzc2VzIGZyb20gZGF0YS1hbmltYXRlLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBpbnB1dDtcbiAgICAvLyBQYXJzZSBhbmltYXRpb24gY2xhc3NlcyBpZiB0aGV5IHdlcmUgc2V0XG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRlKSB7XG4gICAgICBpbnB1dCA9IHRoaXMub3B0aW9ucy5hbmltYXRlLnNwbGl0KCcgJyk7XG5cbiAgICAgIHRoaXMuYW5pbWF0aW9uSW4gPSBpbnB1dFswXTtcbiAgICAgIHRoaXMuYW5pbWF0aW9uT3V0ID0gaW5wdXRbMV0gfHwgbnVsbDtcbiAgICB9XG4gICAgLy8gT3RoZXJ3aXNlLCBwYXJzZSB0b2dnbGUgY2xhc3NcbiAgICBlbHNlIHtcbiAgICAgIGlucHV0ID0gdGhpcy4kZWxlbWVudC5kYXRhKCd0b2dnbGVyJyk7XG4gICAgICAvLyBBbGxvdyBmb3IgYSAuIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHN0cmluZ1xuICAgICAgdGhpcy5jbGFzc05hbWUgPSBpbnB1dFswXSA9PT0gJy4nID8gaW5wdXQuc2xpY2UoMSkgOiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBBZGQgQVJJQSBhdHRyaWJ1dGVzIHRvIHRyaWdnZXJzXG4gICAgdmFyIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZDtcbiAgICAkKGBbZGF0YS1vcGVuPVwiJHtpZH1cIl0sIFtkYXRhLWNsb3NlPVwiJHtpZH1cIl0sIFtkYXRhLXRvZ2dsZT1cIiR7aWR9XCJdYClcbiAgICAgIC5hdHRyKCdhcmlhLWNvbnRyb2xzJywgaWQpO1xuICAgIC8vIElmIHRoZSB0YXJnZXQgaXMgaGlkZGVuLCBhZGQgYXJpYS1oaWRkZW5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykgPyBmYWxzZSA6IHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIHRvZ2dsZSB0cmlnZ2VyLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJ3RvZ2dsZS56Zi50cmlnZ2VyJykub24oJ3RvZ2dsZS56Zi50cmlnZ2VyJywgdGhpcy50b2dnbGUuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgdGFyZ2V0IGNsYXNzIG9uIHRoZSB0YXJnZXQgZWxlbWVudC4gQW4gZXZlbnQgaXMgZmlyZWQgZnJvbSB0aGUgb3JpZ2luYWwgdHJpZ2dlciBkZXBlbmRpbmcgb24gaWYgdGhlIHJlc3VsdGFudCBzdGF0ZSB3YXMgXCJvblwiIG9yIFwib2ZmXCIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgVG9nZ2xlciNvblxuICAgKiBAZmlyZXMgVG9nZ2xlciNvZmZcbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICB0aGlzWyB0aGlzLm9wdGlvbnMuYW5pbWF0ZSA/ICdfdG9nZ2xlQW5pbWF0ZScgOiAnX3RvZ2dsZUNsYXNzJ10oKTtcbiAgfVxuXG4gIF90b2dnbGVDbGFzcygpIHtcbiAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuY2xhc3NOYW1lKTtcblxuICAgIHZhciBpc09uID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLmNsYXNzTmFtZSk7XG4gICAgaWYgKGlzT24pIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgaWYgdGhlIHRhcmdldCBlbGVtZW50IGhhcyB0aGUgY2xhc3MgYWZ0ZXIgYSB0b2dnbGUuXG4gICAgICAgKiBAZXZlbnQgVG9nZ2xlciNvblxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29uLnpmLnRvZ2dsZXInKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBkb2VzIG5vdCBoYXZlIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAqIEBldmVudCBUb2dnbGVyI29mZlxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ29mZi56Zi50b2dnbGVyJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlQVJJQShpc09uKTtcbiAgfVxuXG4gIF90b2dnbGVBbmltYXRlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5pcygnOmhpZGRlbicpKSB7XG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kZWxlbWVudCwgdGhpcy5hbmltYXRpb25JbiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLl91cGRhdGVBUklBKHRydWUpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ29uLnpmLnRvZ2dsZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQodGhpcy4kZWxlbWVudCwgdGhpcy5hbmltYXRpb25PdXQsIGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5fdXBkYXRlQVJJQShmYWxzZSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignb2ZmLnpmLnRvZ2dsZXInKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIF91cGRhdGVBUklBKGlzT24pIHtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09uID8gdHJ1ZSA6IGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgaW5zdGFuY2Ugb2YgVG9nZ2xlciBvbiB0aGUgZWxlbWVudC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudG9nZ2xlcicpO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5Ub2dnbGVyLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogVGVsbHMgdGhlIHBsdWdpbiBpZiB0aGUgZWxlbWVudCBzaG91bGQgYW5pbWF0ZWQgd2hlbiB0b2dnbGVkLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBhbmltYXRlOiBmYWxzZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFRvZ2dsZXIsICdUb2dnbGVyJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBUb29sdGlwIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi50b29sdGlwXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKi9cblxuY2xhc3MgVG9vbHRpcCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgVG9vbHRpcC5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBUb29sdGlwI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGF0dGFjaCBhIHRvb2x0aXAgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb2JqZWN0IHRvIGV4dGVuZCB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBUb29sdGlwLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnVG9vbHRpcCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSB0b29sdGlwIGJ5IHNldHRpbmcgdGhlIGNyZWF0aW5nIHRoZSB0aXAgZWxlbWVudCwgYWRkaW5nIGl0J3MgdGV4dCwgc2V0dGluZyBwcml2YXRlIHZhcmlhYmxlcyBhbmQgc2V0dGluZyBhdHRyaWJ1dGVzIG9uIHRoZSBhbmNob3IuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgZWxlbUlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JykgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAndG9vbHRpcCcpO1xuXG4gICAgdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcyB8fCB0aGlzLl9nZXRQb3NpdGlvbkNsYXNzKHRoaXMuJGVsZW1lbnQpO1xuICAgIHRoaXMub3B0aW9ucy50aXBUZXh0ID0gdGhpcy5vcHRpb25zLnRpcFRleHQgfHwgdGhpcy4kZWxlbWVudC5hdHRyKCd0aXRsZScpO1xuICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLm9wdGlvbnMudGVtcGxhdGUgPyAkKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSkgOiB0aGlzLl9idWlsZFRlbXBsYXRlKGVsZW1JZCk7XG5cbiAgICB0aGlzLnRlbXBsYXRlLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpXG4gICAgICAgIC50ZXh0KHRoaXMub3B0aW9ucy50aXBUZXh0KVxuICAgICAgICAuaGlkZSgpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICd0aXRsZSc6ICcnLFxuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBlbGVtSWQsXG4gICAgICAnZGF0YS15ZXRpLWJveCc6IGVsZW1JZCxcbiAgICAgICdkYXRhLXRvZ2dsZSc6IGVsZW1JZCxcbiAgICAgICdkYXRhLXJlc2l6ZSc6IGVsZW1JZFxuICAgIH0pLmFkZENsYXNzKHRoaXMub3B0aW9ucy50cmlnZ2VyQ2xhc3MpO1xuXG4gICAgLy9oZWxwZXIgdmFyaWFibGVzIHRvIHRyYWNrIG1vdmVtZW50IG9uIGNvbGxpc2lvbnNcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMgPSBbXTtcbiAgICB0aGlzLmNvdW50ZXIgPSA0O1xuICAgIHRoaXMuY2xhc3NDaGFuZ2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHcmFicyB0aGUgY3VycmVudCBwb3NpdGlvbmluZyBjbGFzcywgaWYgcHJlc2VudCwgYW5kIHJldHVybnMgdGhlIHZhbHVlIG9yIGFuIGVtcHR5IHN0cmluZy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRQb3NpdGlvbkNsYXNzKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHsgcmV0dXJuICcnOyB9XG4gICAgLy8gdmFyIHBvc2l0aW9uID0gZWxlbWVudC5hdHRyKCdjbGFzcycpLm1hdGNoKC90b3B8bGVmdHxyaWdodC9nKTtcbiAgICB2YXIgcG9zaXRpb24gPSBlbGVtZW50WzBdLmNsYXNzTmFtZS5tYXRjaCgvXFxiKHRvcHxsZWZ0fHJpZ2h0KVxcYi9nKTtcbiAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA/IHBvc2l0aW9uWzBdIDogJyc7XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9O1xuICAvKipcbiAgICogYnVpbGRzIHRoZSB0b29sdGlwIGVsZW1lbnQsIGFkZHMgYXR0cmlidXRlcywgYW5kIHJldHVybnMgdGhlIHRlbXBsYXRlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2J1aWxkVGVtcGxhdGUoaWQpIHtcbiAgICB2YXIgdGVtcGxhdGVDbGFzc2VzID0gKGAke3RoaXMub3B0aW9ucy50b29sdGlwQ2xhc3N9ICR7dGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3N9ICR7dGhpcy5vcHRpb25zLnRlbXBsYXRlQ2xhc3Nlc31gKS50cmltKCk7XG4gICAgdmFyICR0ZW1wbGF0ZSA9ICAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKHRlbXBsYXRlQ2xhc3NlcykuYXR0cih7XG4gICAgICAncm9sZSc6ICd0b29sdGlwJyxcbiAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAnZGF0YS1pcy1hY3RpdmUnOiBmYWxzZSxcbiAgICAgICdkYXRhLWlzLWZvY3VzJzogZmFsc2UsXG4gICAgICAnaWQnOiBpZFxuICAgIH0pO1xuICAgIHJldHVybiAkdGVtcGxhdGU7XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBpZiBhIGNvbGxpc2lvbiBldmVudCBpcyBkZXRlY3RlZC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBvc2l0aW9uIC0gcG9zaXRpb25pbmcgY2xhc3MgdG8gdHJ5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVwb3NpdGlvbihwb3NpdGlvbikge1xuICAgIHRoaXMudXNlZFBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uID8gcG9zaXRpb24gOiAnYm90dG9tJyk7XG5cbiAgICAvL2RlZmF1bHQsIHRyeSBzd2l0Y2hpbmcgdG8gb3Bwb3NpdGUgc2lkZVxuICAgIGlmICghcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLmFkZENsYXNzKCd0b3AnKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAndG9wJyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2JvdHRvbScpIDwgMCkpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbilcbiAgICAgICAgICAuYWRkQ2xhc3MoJ3JpZ2h0Jyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH1cblxuICAgIC8vaWYgZGVmYXVsdCBjaGFuZ2UgZGlkbid0IHdvcmssIHRyeSBib3R0b20gb3IgbGVmdCBmaXJzdFxuICAgIGVsc2UgaWYgKCFwb3NpdGlvbiAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3RvcCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignbGVmdCcpIDwgMCkpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUuYWRkQ2xhc3MoJ2xlZnQnKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAndG9wJyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2JvdHRvbScpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignbGVmdCcpIDwgMCkpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigncmlnaHQnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2JvdHRvbScpIDwgMCkpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgLy9pZiBub3RoaW5nIGNsZWFyZWQsIHNldCB0byBib3R0b21cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1cbiAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IHRydWU7XG4gICAgdGhpcy5jb3VudGVyLS07XG4gIH1cblxuICAvKipcbiAgICogc2V0cyB0aGUgcG9zaXRpb24gY2xhc3Mgb2YgYW4gZWxlbWVudCBhbmQgcmVjdXJzaXZlbHkgY2FsbHMgaXRzZWxmIHVudGlsIHRoZXJlIGFyZSBubyBtb3JlIHBvc3NpYmxlIHBvc2l0aW9ucyB0byBhdHRlbXB0LCBvciB0aGUgdG9vbHRpcCBlbGVtZW50IGlzIG5vIGxvbmdlciBjb2xsaWRpbmcuXG4gICAqIGlmIHRoZSB0b29sdGlwIGlzIGxhcmdlciB0aGFuIHRoZSBzY3JlZW4gd2lkdGgsIGRlZmF1bHQgdG8gZnVsbCB3aWR0aCAtIGFueSB1c2VyIHNlbGVjdGVkIG1hcmdpblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFBvc2l0aW9uKCkge1xuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuX2dldFBvc2l0aW9uQ2xhc3ModGhpcy50ZW1wbGF0ZSksXG4gICAgICAgICR0aXBEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLnRlbXBsYXRlKSxcbiAgICAgICAgJGFuY2hvckRpbXMgPSBGb3VuZGF0aW9uLkJveC5HZXREaW1lbnNpb25zKHRoaXMuJGVsZW1lbnQpLFxuICAgICAgICBkaXJlY3Rpb24gPSAocG9zaXRpb24gPT09ICdsZWZ0JyA/ICdsZWZ0JyA6ICgocG9zaXRpb24gPT09ICdyaWdodCcpID8gJ2xlZnQnIDogJ3RvcCcpKSxcbiAgICAgICAgcGFyYW0gPSAoZGlyZWN0aW9uID09PSAndG9wJykgPyAnaGVpZ2h0JyA6ICd3aWR0aCcsXG4gICAgICAgIG9mZnNldCA9IChwYXJhbSA9PT0gJ2hlaWdodCcpID8gdGhpcy5vcHRpb25zLnZPZmZzZXQgOiB0aGlzLm9wdGlvbnMuaE9mZnNldCxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCgkdGlwRGltcy53aWR0aCA+PSAkdGlwRGltcy53aW5kb3dEaW1zLndpZHRoKSB8fCAoIXRoaXMuY291bnRlciAmJiAhRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLnRlbXBsYXRlKSkpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUub2Zmc2V0KEZvdW5kYXRpb24uQm94LkdldE9mZnNldHModGhpcy50ZW1wbGF0ZSwgdGhpcy4kZWxlbWVudCwgJ2NlbnRlciBib3R0b20nLCB0aGlzLm9wdGlvbnMudk9mZnNldCwgdGhpcy5vcHRpb25zLmhPZmZzZXQsIHRydWUpKS5jc3Moe1xuICAgICAgLy8gdGhpcy4kZWxlbWVudC5vZmZzZXQoRm91bmRhdGlvbi5HZXRPZmZzZXRzKHRoaXMudGVtcGxhdGUsIHRoaXMuJGVsZW1lbnQsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0LCB0cnVlKSkuY3NzKHtcbiAgICAgICAgJ3dpZHRoJzogJGFuY2hvckRpbXMud2luZG93RGltcy53aWR0aCAtICh0aGlzLm9wdGlvbnMuaE9mZnNldCAqIDIpLFxuICAgICAgICAnaGVpZ2h0JzogJ2F1dG8nXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnRlbXBsYXRlLm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMudGVtcGxhdGUsIHRoaXMuJGVsZW1lbnQsJ2NlbnRlciAnICsgKHBvc2l0aW9uIHx8ICdib3R0b20nKSwgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0KSk7XG5cbiAgICB3aGlsZSghRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLnRlbXBsYXRlKSAmJiB0aGlzLmNvdW50ZXIpIHtcbiAgICAgIHRoaXMuX3JlcG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgdGhpcy5fc2V0UG9zaXRpb24oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogcmV2ZWFscyB0aGUgdG9vbHRpcCwgYW5kIGZpcmVzIGFuIGV2ZW50IHRvIGNsb3NlIGFueSBvdGhlciBvcGVuIHRvb2x0aXBzIG9uIHRoZSBwYWdlXG4gICAqIEBmaXJlcyBUb29sdGlwI2Nsb3NlbWVcbiAgICogQGZpcmVzIFRvb2x0aXAjc2hvd1xuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zaG93T24gIT09ICdhbGwnICYmICFGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuc2hvd09uKSkge1xuICAgICAgLy8gY29uc29sZS5lcnJvcignVGhlIHNjcmVlbiBpcyB0b28gc21hbGwgdG8gZGlzcGxheSB0aGlzIHRvb2x0aXAnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMudGVtcGxhdGUuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpLnNob3coKTtcbiAgICB0aGlzLl9zZXRQb3NpdGlvbigpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgdG8gY2xvc2UgYWxsIG90aGVyIG9wZW4gdG9vbHRpcHMgb24gdGhlIHBhZ2VcbiAgICAgKiBAZXZlbnQgQ2xvc2VtZSN0b29sdGlwXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZW1lLnpmLnRvb2x0aXAnLCB0aGlzLnRlbXBsYXRlLmF0dHIoJ2lkJykpO1xuXG5cbiAgICB0aGlzLnRlbXBsYXRlLmF0dHIoe1xuICAgICAgJ2RhdGEtaXMtYWN0aXZlJzogdHJ1ZSxcbiAgICAgICdhcmlhLWhpZGRlbic6IGZhbHNlXG4gICAgfSk7XG4gICAgX3RoaXMuaXNBY3RpdmUgPSB0cnVlO1xuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudGVtcGxhdGUpO1xuICAgIHRoaXMudGVtcGxhdGUuc3RvcCgpLmhpZGUoKS5jc3MoJ3Zpc2liaWxpdHknLCAnJykuZmFkZUluKHRoaXMub3B0aW9ucy5mYWRlSW5EdXJhdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICAvL21heWJlIGRvIHN0dWZmP1xuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHRvb2x0aXAgaXMgc2hvd25cbiAgICAgKiBAZXZlbnQgVG9vbHRpcCNzaG93XG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzaG93LnpmLnRvb2x0aXAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyB0aGUgY3VycmVudCB0b29sdGlwLCBhbmQgcmVzZXRzIHRoZSBwb3NpdGlvbmluZyBjbGFzcyBpZiBpdCB3YXMgY2hhbmdlZCBkdWUgdG8gY29sbGlzaW9uXG4gICAqIEBmaXJlcyBUb29sdGlwI2hpZGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBoaWRlKCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdoaWRpbmcnLCB0aGlzLiRlbGVtZW50LmRhdGEoJ3lldGktYm94JykpO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy50ZW1wbGF0ZS5zdG9wKCkuYXR0cih7XG4gICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgJ2RhdGEtaXMtYWN0aXZlJzogZmFsc2VcbiAgICB9KS5mYWRlT3V0KHRoaXMub3B0aW9ucy5mYWRlT3V0RHVyYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgX3RoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIF90aGlzLmlzQ2xpY2sgPSBmYWxzZTtcbiAgICAgIGlmIChfdGhpcy5jbGFzc0NoYW5nZWQpIHtcbiAgICAgICAgX3RoaXMudGVtcGxhdGVcbiAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoX3RoaXMuX2dldFBvc2l0aW9uQ2xhc3MoX3RoaXMudGVtcGxhdGUpKVxuICAgICAgICAgICAgIC5hZGRDbGFzcyhfdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MpO1xuXG4gICAgICAgX3RoaXMudXNlZFBvc2l0aW9ucyA9IFtdO1xuICAgICAgIF90aGlzLmNvdW50ZXIgPSA0O1xuICAgICAgIF90aGlzLmNsYXNzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIGZpcmVzIHdoZW4gdGhlIHRvb2x0aXAgaXMgaGlkZGVuXG4gICAgICogQGV2ZW50IFRvb2x0aXAjaGlkZVxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaGlkZS56Zi50b29sdGlwJyk7XG4gIH1cblxuICAvKipcbiAgICogYWRkcyBldmVudCBsaXN0ZW5lcnMgZm9yIHRoZSB0b29sdGlwIGFuZCBpdHMgYW5jaG9yXG4gICAqIFRPRE8gY29tYmluZSBzb21lIG9mIHRoZSBsaXN0ZW5lcnMgbGlrZSBmb2N1cyBhbmQgbW91c2VlbnRlciwgZXRjLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciAkdGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlO1xuICAgIHZhciBpc0ZvY3VzID0gZmFsc2U7XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIpIHtcblxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uKCdtb3VzZWVudGVyLnpmLnRvb2x0aXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghX3RoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLnNob3coKTtcbiAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLm9uKCdtb3VzZWxlYXZlLnpmLnRvb2x0aXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgaWYgKCFpc0ZvY3VzIHx8IChfdGhpcy5pc0NsaWNrICYmICFfdGhpcy5vcHRpb25zLmNsaWNrT3BlbikpIHtcbiAgICAgICAgICBfdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdtb3VzZWRvd24uemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgaWYgKF90aGlzLmlzQ2xpY2spIHtcbiAgICAgICAgICAvL190aGlzLmhpZGUoKTtcbiAgICAgICAgICAvLyBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuaXNDbGljayA9IHRydWU7XG4gICAgICAgICAgaWYgKChfdGhpcy5vcHRpb25zLmRpc2FibGVIb3ZlciB8fCAhX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnKSkgJiYgIV90aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICBfdGhpcy5zaG93KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2Vkb3duLnpmLnRvb2x0aXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIF90aGlzLmlzQ2xpY2sgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZGlzYWJsZUZvclRvdWNoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub24oJ3RhcC56Zi50b29sdGlwIHRvdWNoZW5kLnpmLnRvb2x0aXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIF90aGlzLmlzQWN0aXZlID8gX3RoaXMuaGlkZSgpIDogX3RoaXMuc2hvdygpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5vbih7XG4gICAgICAvLyAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgLy8gJ2Nsb3NlLnpmLnRyaWdnZXInOiB0aGlzLmhpZGUuYmluZCh0aGlzKVxuICAgICAgJ2Nsb3NlLnpmLnRyaWdnZXInOiB0aGlzLmhpZGUuYmluZCh0aGlzKVxuICAgIH0pO1xuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uKCdmb2N1cy56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpc0ZvY3VzID0gdHJ1ZTtcbiAgICAgICAgaWYgKF90aGlzLmlzQ2xpY2spIHtcbiAgICAgICAgICAvLyBJZiB3ZSdyZSBub3Qgc2hvd2luZyBvcGVuIG9uIGNsaWNrcywgd2UgbmVlZCB0byBwcmV0ZW5kIGEgY2xpY2stbGF1bmNoZWQgZm9jdXMgaXNuJ3RcbiAgICAgICAgICAvLyBhIHJlYWwgZm9jdXMsIG90aGVyd2lzZSBvbiBob3ZlciBhbmQgY29tZSBiYWNrIHdlIGdldCBiYWQgYmVoYXZpb3JcbiAgICAgICAgICBpZighX3RoaXMub3B0aW9ucy5jbGlja09wZW4pIHsgaXNGb2N1cyA9IGZhbHNlOyB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgLm9uKCdmb2N1c291dC56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpc0ZvY3VzID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGlkZSgpO1xuICAgICAgfSlcblxuICAgICAgLm9uKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChfdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgIF90aGlzLl9zZXRQb3NpdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhZGRzIGEgdG9nZ2xlIG1ldGhvZCwgaW4gYWRkaXRpb24gdG8gdGhlIHN0YXRpYyBzaG93KCkgJiBoaWRlKCkgZnVuY3Rpb25zXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIHRvb2x0aXAsIHJlbW92ZXMgdGVtcGxhdGUgZWxlbWVudCBmcm9tIHRoZSB2aWV3LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCd0aXRsZScsIHRoaXMudGVtcGxhdGUudGV4dCgpKVxuICAgICAgICAgICAgICAgICAub2ZmKCcuemYudHJpZ2dlciAuemYudG9vdGlwJylcbiAgICAgICAgICAgICAgICAvLyAgLnJlbW92ZUNsYXNzKCdoYXMtdGlwJylcbiAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknKVxuICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS15ZXRpLWJveCcpXG4gICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXRvZ2dsZScpXG4gICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXJlc2l6ZScpO1xuXG4gICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmUoKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5Ub29sdGlwLmRlZmF1bHRzID0ge1xuICBkaXNhYmxlRm9yVG91Y2g6IGZhbHNlLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIGJlZm9yZSBhIHRvb2x0aXAgc2hvdWxkIG9wZW4gb24gaG92ZXIuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjAwXG4gICAqL1xuICBob3ZlckRlbGF5OiAyMDAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgYSB0b29sdGlwIHNob3VsZCB0YWtlIHRvIGZhZGUgaW50byB2aWV3LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDE1MFxuICAgKi9cbiAgZmFkZUluRHVyYXRpb246IDE1MCxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCBhIHRvb2x0aXAgc2hvdWxkIHRha2UgdG8gZmFkZSBvdXQgb2Ygdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxNTBcbiAgICovXG4gIGZhZGVPdXREdXJhdGlvbjogMTUwLFxuICAvKipcbiAgICogRGlzYWJsZXMgaG92ZXIgZXZlbnRzIGZyb20gb3BlbmluZyB0aGUgdG9vbHRpcCBpZiBzZXQgdG8gdHJ1ZVxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSG92ZXI6IGZhbHNlLFxuICAvKipcbiAgICogT3B0aW9uYWwgYWRkdGlvbmFsIGNsYXNzZXMgdG8gYXBwbHkgdG8gdGhlIHRvb2x0aXAgdGVtcGxhdGUgb24gaW5pdC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnbXktY29vbC10aXAtY2xhc3MnXG4gICAqL1xuICB0ZW1wbGF0ZUNsYXNzZXM6ICcnLFxuICAvKipcbiAgICogTm9uLW9wdGlvbmFsIGNsYXNzIGFkZGVkIHRvIHRvb2x0aXAgdGVtcGxhdGVzLiBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgJ3Rvb2x0aXAnLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b29sdGlwJ1xuICAgKi9cbiAgdG9vbHRpcENsYXNzOiAndG9vbHRpcCcsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIGFuY2hvciBlbGVtZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdoYXMtdGlwJ1xuICAgKi9cbiAgdHJpZ2dlckNsYXNzOiAnaGFzLXRpcCcsXG4gIC8qKlxuICAgKiBNaW5pbXVtIGJyZWFrcG9pbnQgc2l6ZSBhdCB3aGljaCB0byBvcGVuIHRoZSB0b29sdGlwLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdzbWFsbCdcbiAgICovXG4gIHNob3dPbjogJ3NtYWxsJyxcbiAgLyoqXG4gICAqIEN1c3RvbSB0ZW1wbGF0ZSB0byBiZSB1c2VkIHRvIGdlbmVyYXRlIG1hcmt1cCBmb3IgdG9vbHRpcC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnJmx0O2RpdiBjbGFzcz1cInRvb2x0aXBcIiZndDsmbHQ7L2RpdiZndDsnXG4gICAqL1xuICB0ZW1wbGF0ZTogJycsXG4gIC8qKlxuICAgKiBUZXh0IGRpc3BsYXllZCBpbiB0aGUgdG9vbHRpcCB0ZW1wbGF0ZSBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdTb21lIGNvb2wgc3BhY2UgZmFjdCBoZXJlLidcbiAgICovXG4gIHRpcFRleHQ6ICcnLFxuICB0b3VjaENsb3NlVGV4dDogJ1RhcCB0byBjbG9zZS4nLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB0b29sdGlwIHRvIHJlbWFpbiBvcGVuIGlmIHRyaWdnZXJlZCB3aXRoIGEgY2xpY2sgb3IgdG91Y2ggZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xpY2tPcGVuOiB0cnVlLFxuICAvKipcbiAgICogQWRkaXRpb25hbCBwb3NpdGlvbmluZyBjbGFzc2VzLCBzZXQgYnkgdGhlIEpTXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3RvcCdcbiAgICovXG4gIHBvc2l0aW9uQ2xhc3M6ICcnLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIHRlbXBsYXRlIHNob3VsZCBwdXNoIGF3YXkgZnJvbSB0aGUgYW5jaG9yIG9uIHRoZSBZIGF4aXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTBcbiAgICovXG4gIHZPZmZzZXQ6IDEwLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIHRlbXBsYXRlIHNob3VsZCBwdXNoIGF3YXkgZnJvbSB0aGUgYW5jaG9yIG9uIHRoZSBYIGF4aXMsIGlmIGFsaWduZWQgdG8gYSBzaWRlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEyXG4gICAqL1xuICBoT2Zmc2V0OiAxMlxufTtcblxuLyoqXG4gKiBUT0RPIHV0aWxpemUgcmVzaXplIGV2ZW50IHRyaWdnZXJcbiAqL1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oVG9vbHRpcCwgJ1Rvb2x0aXAnKTtcblxufShqUXVlcnkpOyIsIid1c2Ugc3RyaWN0JztcblxuLy8gUG9seWZpbGwgZm9yIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuKGZ1bmN0aW9uKCkge1xuICBpZiAoIURhdGUubm93KVxuICAgIERhdGUubm93ID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcblxuICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcbiAgICAgIHZhciB2cCA9IHZlbmRvcnNbaV07XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZwKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9ICh3aW5kb3dbdnArJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvd1t2cCsnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ10pO1xuICB9XG4gIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sobGFzdFRpbWUgPSBuZXh0VGltZSk7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUaW1lIC0gbm93KTtcbiAgICB9O1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgfVxufSkoKTtcblxudmFyIGluaXRDbGFzc2VzICAgPSBbJ211aS1lbnRlcicsICdtdWktbGVhdmUnXTtcbnZhciBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuLy8gRmluZCB0aGUgcmlnaHQgXCJ0cmFuc2l0aW9uZW5kXCIgZXZlbnQgZm9yIHRoaXMgYnJvd3NlclxudmFyIGVuZEV2ZW50ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgJ3RyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgJ1dlYmtpdFRyYW5zaXRpb24nOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgJ09UcmFuc2l0aW9uJzogJ290cmFuc2l0aW9uZW5kJ1xuICB9XG4gIHZhciBlbGVtID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIGZvciAodmFyIHQgaW4gdHJhbnNpdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIGVsZW0uc3R5bGVbdF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvbnNbdF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59KSgpO1xuXG5mdW5jdGlvbiBhbmltYXRlKGlzSW4sIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgZWxlbWVudCA9ICQoZWxlbWVudCkuZXEoMCk7XG5cbiAgaWYgKCFlbGVtZW50Lmxlbmd0aCkgcmV0dXJuO1xuXG4gIGlmIChlbmRFdmVudCA9PT0gbnVsbCkge1xuICAgIGlzSW4gPyBlbGVtZW50LnNob3coKSA6IGVsZW1lbnQuaGlkZSgpO1xuICAgIGNiKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGluaXRDbGFzcyA9IGlzSW4gPyBpbml0Q2xhc3Nlc1swXSA6IGluaXRDbGFzc2VzWzFdO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0luID8gYWN0aXZlQ2xhc3Nlc1swXSA6IGFjdGl2ZUNsYXNzZXNbMV07XG5cbiAgLy8gU2V0IHVwIHRoZSBhbmltYXRpb25cbiAgcmVzZXQoKTtcbiAgZWxlbWVudC5hZGRDbGFzcyhhbmltYXRpb24pO1xuICBlbGVtZW50LmNzcygndHJhbnNpdGlvbicsICdub25lJyk7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50LmFkZENsYXNzKGluaXRDbGFzcyk7XG4gICAgaWYgKGlzSW4pIGVsZW1lbnQuc2hvdygpO1xuICB9KTtcblxuICAvLyBTdGFydCB0aGUgYW5pbWF0aW9uXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50WzBdLm9mZnNldFdpZHRoO1xuICAgIGVsZW1lbnQuY3NzKCd0cmFuc2l0aW9uJywgJycpO1xuICAgIGVsZW1lbnQuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpO1xuICB9KTtcblxuICAvLyBDbGVhbiB1cCB0aGUgYW5pbWF0aW9uIHdoZW4gaXQgZmluaXNoZXNcbiAgZWxlbWVudC5vbmUoJ3RyYW5zaXRpb25lbmQnLCBmaW5pc2gpO1xuXG4gIC8vIEhpZGVzIHRoZSBlbGVtZW50IChmb3Igb3V0IGFuaW1hdGlvbnMpLCByZXNldHMgdGhlIGVsZW1lbnQsIGFuZCBydW5zIGEgY2FsbGJhY2tcbiAgZnVuY3Rpb24gZmluaXNoKCkge1xuICAgIGlmICghaXNJbikgZWxlbWVudC5oaWRlKCk7XG4gICAgcmVzZXQoKTtcbiAgICBpZiAoY2IpIGNiLmFwcGx5KGVsZW1lbnQpO1xuICB9XG5cbiAgLy8gUmVzZXRzIHRyYW5zaXRpb25zIGFuZCByZW1vdmVzIG1vdGlvbi1zcGVjaWZpYyBjbGFzc2VzXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGVsZW1lbnRbMF0uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gMDtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGluaXRDbGFzcyArICcgJyArIGFjdGl2ZUNsYXNzICsgJyAnICsgYW5pbWF0aW9uKTtcbiAgfVxufVxuXG52YXIgTW90aW9uVUkgPSB7XG4gIGFuaW1hdGVJbjogZnVuY3Rpb24oZWxlbWVudCwgYW5pbWF0aW9uLCBjYikge1xuICAgIGFuaW1hdGUodHJ1ZSwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYik7XG4gIH0sXG5cbiAgYW5pbWF0ZU91dDogZnVuY3Rpb24oZWxlbWVudCwgYW5pbWF0aW9uLCBjYikge1xuICAgIGFuaW1hdGUoZmFsc2UsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9XG59XG4iLCIhZnVuY3Rpb24oJCkge1xuXG5cdCQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgXG4gICAgICAgIC8vIHN1Ym1pdCBldmVudHMgZm9ybVxuICAgICAgICAkKCcjZXZlbnRzLWZvcm0nKS5vbignc3VibWl0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICQoJyNldmVudHMtcmVzdWx0cy1zcGlubmVyJykuc2hvdygpO1xuICAgICAgICAgICAgJCgnI2xvYWQtbW9yZS1ldmVudHMnKS5oaWRlKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHJlc2V0IHBhZ2UgbnVtYmVyXG4gICAgICAgICAgICAkKCdpbnB1dFtuYW1lPVwicGFnZV9udW1iZXJcIl0nKS52YWwoIDEgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgJCgnI2V2ZW50cy1yZXN1bHRzJykuaHRtbCggJycgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGRhdGEgPSAkKFwiI2V2ZW50cy1mb3JtXCIpLnNlcmlhbGl6ZUFycmF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBhamF4X2RhdGEgPSB7XG4gICAgICAgICAgICAgICAgJ2FjdGlvbic6ICdldmVudHNfYWpheF9nZXRfZXZlbnRzJyxcbiAgICAgICAgICAgICAgICAnZGF0YSc6IGRhdGEsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBqUXVlcnkucG9zdCgganNfdmFycy5hamF4dXJsK3dpbmRvdy5sb2NhdGlvbi5zZWFyY2gsIGFqYXhfZGF0YSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgZXZlbnRzIGxpc3RcbiAgICAgICAgICAgICAgICAkKCcjZXZlbnRzLXJlc3VsdHMtc3Bpbm5lcicpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAkKCcjZXZlbnRzLXJlc3VsdHMnKS5odG1sKCByZXNwb25zZSApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKCByZXNwb25zZS5pbmRleE9mKFwiYWNjb3JkaW9uXCIpID49IDAgKXtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFzIHJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICQoJyNsb2FkLW1vcmUtZXZlbnRzJykuc2hvdygpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyAgcGFnZSBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXRbbmFtZT1cInBhZ2VfbnVtYmVyXCJdJykudmFsKCAyICk7IFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVjYWxjIGFjY29yZGlhbnNcbiAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkuZm91bmRhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL25vIHJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvLyBsb2FkIG1vcmVcbiAgICAgICAgJCgnI2xvYWQtbW9yZS1ldmVudHMnKS5vbiggJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkKCcjbG9hZC1tb3JlLWV2ZW50cycpLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTsgICAgICAgXG4gICAgICAgICAgICAkKCcjbG9hZC1tb3JlLWV2ZW50cy1zcGlubmVyJykuc2hvdygpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZGF0YSA9ICQoXCIjZXZlbnRzLWZvcm1cIikuc2VyaWFsaXplQXJyYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGFqYXhfZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAnYWN0aW9uJzogJ2V2ZW50c19hamF4X2dldF9ldmVudHMnLFxuICAgICAgICAgICAgICAgICdkYXRhJzogZGF0YSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGpRdWVyeS5wb3N0KCBqc192YXJzLmFqYXh1cmwrd2luZG93LmxvY2F0aW9uLnNlYXJjaCwgYWpheF9kYXRhLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICQoJyNsb2FkLW1vcmUtZXZlbnRzJykucHJvcChcImRpc2FibGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAkKCcjbG9hZC1tb3JlLWV2ZW50cy1zcGlubmVyJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgZXZlbnRzIGxpc3RcbiAgICAgICAgICAgICAgICAkKCcjZXZlbnRzLXJlc3VsdHMnKS5hcHBlbmQoIHJlc3BvbnNlICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHJlc3BvbnNlLmluZGV4T2YoXCJhY2NvcmRpb25cIikgPj0gMCApe1xuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgcmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgJCgnI2xvYWQtbW9yZS1ldmVudHMnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBpbmNyZWFzZSBwYWdlIG51bWJlclxuICAgICAgICAgICAgICAgICAgICBwYWdlX251bWJlciA9IHBhcnNlSW50KCAkKCdpbnB1dFtuYW1lPVwicGFnZV9udW1iZXJcIl0nKS52YWwoKSApO1xuICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFtuYW1lPVwicGFnZV9udW1iZXJcIl0nKS52YWwoIHBhZ2VfbnVtYmVyKzEgKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY2FsYyBhY2NvcmRpYW5zXG4gICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLmZvdW5kYXRpb24oKTsgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9ubyByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgICQoJyNsb2FkLW1vcmUtZXZlbnRzJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcblxuXG5cbiAgICAgICAgICAgIH0pOyAgICAgICAgICAgIFxuICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgfSk7XG4gICAgXG59KHdpbmRvdy5qUXVlcnkpOyIsImpRdWVyeSggJ2lmcmFtZVtzcmMqPVwieW91dHViZS5jb21cIl0nKS53cmFwKFwiPGRpdiBjbGFzcz0nZmxleC12aWRlbyB3aWRlc2NyZWVuJy8+XCIpO1xualF1ZXJ5KCAnaWZyYW1lW3NyYyo9XCJ2aW1lby5jb21cIl0nKS53cmFwKFwiPGRpdiBjbGFzcz0nZmxleC12aWRlbyB3aWRlc2NyZWVuIHZpbWVvJy8+XCIpO1xuIiwialF1ZXJ5KGRvY3VtZW50KS5mb3VuZGF0aW9uKCk7XG4iLCIvLyBKb3lyaWRlIGRlbW9cbiQoJyNzdGFydC1qcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAkKGRvY3VtZW50KS5mb3VuZGF0aW9uKCdqb3lyaWRlJywnc3RhcnQnKTtcbn0pOyIsIi8qKlxuICogYXV0aG9yIENocmlzdG9waGVyIEJsdW1cbiAqICAgIC0gYmFzZWQgb24gdGhlIGlkZWEgb2YgUmVteSBTaGFycCwgaHR0cDovL3JlbXlzaGFycC5jb20vMjAwOS8wMS8yNi9lbGVtZW50LWluLXZpZXctZXZlbnQtcGx1Z2luL1xuICogICAgLSBmb3JrZWQgZnJvbSBodHRwOi8vZ2l0aHViLmNvbS96dWsvanF1ZXJ5Lmludmlldy9cbiAqL1xuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBOb2RlLCBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gIH0gZWxzZSB7XG4gICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBmYWN0b3J5KGpRdWVyeSk7XG4gIH1cbn0oZnVuY3Rpb24gKCQpIHtcblxuICB2YXIgaW52aWV3T2JqZWN0cyA9IFtdLCB2aWV3cG9ydFNpemUsIHZpZXdwb3J0T2Zmc2V0LFxuICAgICAgZCA9IGRvY3VtZW50LCB3ID0gd2luZG93LCBkb2N1bWVudEVsZW1lbnQgPSBkLmRvY3VtZW50RWxlbWVudCwgdGltZXI7XG5cbiAgJC5ldmVudC5zcGVjaWFsLmludmlldyA9IHtcbiAgICBhZGQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGludmlld09iamVjdHMucHVzaCh7IGRhdGE6IGRhdGEsICRlbGVtZW50OiAkKHRoaXMpLCBlbGVtZW50OiB0aGlzIH0pO1xuICAgICAgLy8gVXNlIHNldEludGVydmFsIGluIG9yZGVyIHRvIGFsc28gbWFrZSBzdXJlIHRoaXMgY2FwdHVyZXMgZWxlbWVudHMgd2l0aGluXG4gICAgICAvLyBcIm92ZXJmbG93OnNjcm9sbFwiIGVsZW1lbnRzIG9yIGVsZW1lbnRzIHRoYXQgYXBwZWFyZWQgaW4gdGhlIGRvbSB0cmVlIGR1ZSB0b1xuICAgICAgLy8gZG9tIG1hbmlwdWxhdGlvbiBhbmQgcmVmbG93XG4gICAgICAvLyBvbGQ6ICQod2luZG93KS5zY3JvbGwoY2hlY2tJblZpZXcpO1xuICAgICAgLy9cbiAgICAgIC8vIEJ5IHRoZSB3YXksIGlPUyAoaVBhZCwgaVBob25lLCAuLi4pIHNlZW1zIHRvIG5vdCBleGVjdXRlLCBvciBhdCBsZWFzdCBkZWxheXNcbiAgICAgIC8vIGludGVydmFscyB3aGlsZSB0aGUgdXNlciBzY3JvbGxzLiBUaGVyZWZvcmUgdGhlIGludmlldyBldmVudCBtaWdodCBmaXJlIGEgYml0IGxhdGUgdGhlcmVcbiAgICAgIC8vXG4gICAgICAvLyBEb24ndCB3YXN0ZSBjeWNsZXMgd2l0aCBhbiBpbnRlcnZhbCB1bnRpbCB3ZSBnZXQgYXQgbGVhc3Qgb25lIGVsZW1lbnQgdGhhdFxuICAgICAgLy8gaGFzIGJvdW5kIHRvIHRoZSBpbnZpZXcgZXZlbnQuXG4gICAgICBpZiAoIXRpbWVyICYmIGludmlld09iamVjdHMubGVuZ3RoKSB7XG4gICAgICAgICB0aW1lciA9IHNldEludGVydmFsKGNoZWNrSW5WaWV3LCAyNTApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGZvciAodmFyIGk9MDsgaTxpbnZpZXdPYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpbnZpZXdPYmplY3QgPSBpbnZpZXdPYmplY3RzW2ldO1xuICAgICAgICBpZiAoaW52aWV3T2JqZWN0LmVsZW1lbnQgPT09IHRoaXMgJiYgaW52aWV3T2JqZWN0LmRhdGEuZ3VpZCA9PT0gZGF0YS5ndWlkKSB7XG4gICAgICAgICAgaW52aWV3T2JqZWN0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYXIgaW50ZXJ2YWwgd2hlbiB3ZSBubyBsb25nZXIgaGF2ZSBhbnkgZWxlbWVudHMgbGlzdGVuaW5nXG4gICAgICBpZiAoIWludmlld09iamVjdHMubGVuZ3RoKSB7XG4gICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0Vmlld3BvcnRTaXplKCkge1xuICAgIHZhciBtb2RlLCBkb21PYmplY3QsIHNpemUgPSB7IGhlaWdodDogdy5pbm5lckhlaWdodCwgd2lkdGg6IHcuaW5uZXJXaWR0aCB9O1xuXG4gICAgLy8gaWYgdGhpcyBpcyBjb3JyZWN0IHRoZW4gcmV0dXJuIGl0LiBpUGFkIGhhcyBjb21wYXQgTW9kZSwgc28gd2lsbFxuICAgIC8vIGdvIGludG8gY2hlY2sgY2xpZW50SGVpZ2h0L2NsaWVudFdpZHRoICh3aGljaCBoYXMgdGhlIHdyb25nIHZhbHVlKS5cbiAgICBpZiAoIXNpemUuaGVpZ2h0KSB7XG4gICAgICBtb2RlID0gZC5jb21wYXRNb2RlO1xuICAgICAgaWYgKG1vZGUgfHwgISQuc3VwcG9ydC5ib3hNb2RlbCkgeyAvLyBJRSwgR2Vja29cbiAgICAgICAgZG9tT2JqZWN0ID0gbW9kZSA9PT0gJ0NTUzFDb21wYXQnID9cbiAgICAgICAgICBkb2N1bWVudEVsZW1lbnQgOiAvLyBTdGFuZGFyZHNcbiAgICAgICAgICBkLmJvZHk7IC8vIFF1aXJrc1xuICAgICAgICBzaXplID0ge1xuICAgICAgICAgIGhlaWdodDogZG9tT2JqZWN0LmNsaWVudEhlaWdodCxcbiAgICAgICAgICB3aWR0aDogIGRvbU9iamVjdC5jbGllbnRXaWR0aFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaXplO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogIHcucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCAgIHx8IGQuYm9keS5zY3JvbGxUb3AsXG4gICAgICBsZWZ0OiB3LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0ICB8fCBkLmJvZHkuc2Nyb2xsTGVmdFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0luVmlldygpIHtcbiAgICBpZiAoIWludmlld09iamVjdHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGkgPSAwLCAkZWxlbWVudHMgPSAkLm1hcChpbnZpZXdPYmplY3RzLCBmdW5jdGlvbihpbnZpZXdPYmplY3QpIHtcbiAgICAgIHZhciBzZWxlY3RvciAgPSBpbnZpZXdPYmplY3QuZGF0YS5zZWxlY3RvcixcbiAgICAgICAgICAkZWxlbWVudCAgPSBpbnZpZXdPYmplY3QuJGVsZW1lbnQ7XG4gICAgICByZXR1cm4gc2VsZWN0b3IgPyAkZWxlbWVudC5maW5kKHNlbGVjdG9yKSA6ICRlbGVtZW50O1xuICAgIH0pO1xuXG4gICAgdmlld3BvcnRTaXplICAgPSB2aWV3cG9ydFNpemUgICB8fCBnZXRWaWV3cG9ydFNpemUoKTtcbiAgICB2aWV3cG9ydE9mZnNldCA9IHZpZXdwb3J0T2Zmc2V0IHx8IGdldFZpZXdwb3J0T2Zmc2V0KCk7XG5cbiAgICBmb3IgKDsgaTxpbnZpZXdPYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBJZ25vcmUgZWxlbWVudHMgdGhhdCBhcmUgbm90IGluIHRoZSBET00gdHJlZVxuICAgICAgaWYgKCEkLmNvbnRhaW5zKGRvY3VtZW50RWxlbWVudCwgJGVsZW1lbnRzW2ldWzBdKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyICRlbGVtZW50ICAgICAgPSAkKCRlbGVtZW50c1tpXSksXG4gICAgICAgICAgZWxlbWVudFNpemUgICA9IHsgaGVpZ2h0OiAkZWxlbWVudFswXS5vZmZzZXRIZWlnaHQsIHdpZHRoOiAkZWxlbWVudFswXS5vZmZzZXRXaWR0aCB9LFxuICAgICAgICAgIGVsZW1lbnRPZmZzZXQgPSAkZWxlbWVudC5vZmZzZXQoKSxcbiAgICAgICAgICBpblZpZXcgICAgICAgID0gJGVsZW1lbnQuZGF0YSgnaW52aWV3Jyk7XG5cbiAgICAgIC8vIERvbid0IGFzayBtZSB3aHkgYmVjYXVzZSBJIGhhdmVuJ3QgZmlndXJlZCBvdXQgeWV0OlxuICAgICAgLy8gdmlld3BvcnRPZmZzZXQgYW5kIHZpZXdwb3J0U2l6ZSBhcmUgc29tZXRpbWVzIHN1ZGRlbmx5IG51bGwgaW4gRmlyZWZveCA1LlxuICAgICAgLy8gRXZlbiB0aG91Z2ggaXQgc291bmRzIHdlaXJkOlxuICAgICAgLy8gSXQgc2VlbXMgdGhhdCB0aGUgZXhlY3V0aW9uIG9mIHRoaXMgZnVuY3Rpb24gaXMgaW50ZXJmZXJyZWQgYnkgdGhlIG9ucmVzaXplL29uc2Nyb2xsIGV2ZW50XG4gICAgICAvLyB3aGVyZSB2aWV3cG9ydE9mZnNldCBhbmQgdmlld3BvcnRTaXplIGFyZSB1bnNldFxuICAgICAgaWYgKCF2aWV3cG9ydE9mZnNldCB8fCAhdmlld3BvcnRTaXplKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnRPZmZzZXQudG9wICsgZWxlbWVudFNpemUuaGVpZ2h0ID4gdmlld3BvcnRPZmZzZXQudG9wICYmXG4gICAgICAgICAgZWxlbWVudE9mZnNldC50b3AgPCB2aWV3cG9ydE9mZnNldC50b3AgKyB2aWV3cG9ydFNpemUuaGVpZ2h0ICYmXG4gICAgICAgICAgZWxlbWVudE9mZnNldC5sZWZ0ICsgZWxlbWVudFNpemUud2lkdGggPiB2aWV3cG9ydE9mZnNldC5sZWZ0ICYmXG4gICAgICAgICAgZWxlbWVudE9mZnNldC5sZWZ0IDwgdmlld3BvcnRPZmZzZXQubGVmdCArIHZpZXdwb3J0U2l6ZS53aWR0aCkge1xuICAgICAgICBpZiAoIWluVmlldykge1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoJ2ludmlldycsIHRydWUpLnRyaWdnZXIoJ2ludmlldycsIFt0cnVlXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaW5WaWV3KSB7XG4gICAgICAgICRlbGVtZW50LmRhdGEoJ2ludmlldycsIGZhbHNlKS50cmlnZ2VyKCdpbnZpZXcnLCBbZmFsc2VdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAkKHcpLm9uKFwic2Nyb2xsIHJlc2l6ZSBzY3JvbGxzdG9wXCIsIGZ1bmN0aW9uKCkge1xuICAgIHZpZXdwb3J0U2l6ZSA9IHZpZXdwb3J0T2Zmc2V0ID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gSUUgPCA5IHNjcm9sbHMgdG8gZm9jdXNlZCBlbGVtZW50cyB3aXRob3V0IGZpcmluZyB0aGUgXCJzY3JvbGxcIiBldmVudFxuICBpZiAoIWRvY3VtZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyICYmIGRvY3VtZW50RWxlbWVudC5hdHRhY2hFdmVudCkge1xuICAgIGRvY3VtZW50RWxlbWVudC5hdHRhY2hFdmVudChcIm9uZm9jdXNpblwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHZpZXdwb3J0T2Zmc2V0ID0gbnVsbDtcbiAgICB9KTtcbiAgfVxufSkpOyIsIi8qISBNYWduaWZpYyBQb3B1cCAtIHYxLjEuMCAtIDIwMTYtMDItMjBcbiogaHR0cDovL2RpbXNlbWVub3YuY29tL3BsdWdpbnMvbWFnbmlmaWMtcG9wdXAvXG4qIENvcHlyaWdodCAoYykgMjAxNiBEbWl0cnkgU2VtZW5vdjsgKi9cbjsoZnVuY3Rpb24gKGZhY3RvcnkpIHsgXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7IFxuIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS4gXG4gZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpOyBcbiB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykgeyBcbiAvLyBOb2RlL0NvbW1vbkpTIFxuIGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpOyBcbiB9IGVsc2UgeyBcbiAvLyBCcm93c2VyIGdsb2JhbHMgXG4gZmFjdG9yeSh3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0byk7IFxuIH0gXG4gfShmdW5jdGlvbigkKSB7IFxuXG4vKj4+Y29yZSovXG4vKipcbiAqIFxuICogTWFnbmlmaWMgUG9wdXAgQ29yZSBKUyBmaWxlXG4gKiBcbiAqL1xuXG5cbi8qKlxuICogUHJpdmF0ZSBzdGF0aWMgY29uc3RhbnRzXG4gKi9cbnZhciBDTE9TRV9FVkVOVCA9ICdDbG9zZScsXG5cdEJFRk9SRV9DTE9TRV9FVkVOVCA9ICdCZWZvcmVDbG9zZScsXG5cdEFGVEVSX0NMT1NFX0VWRU5UID0gJ0FmdGVyQ2xvc2UnLFxuXHRCRUZPUkVfQVBQRU5EX0VWRU5UID0gJ0JlZm9yZUFwcGVuZCcsXG5cdE1BUktVUF9QQVJTRV9FVkVOVCA9ICdNYXJrdXBQYXJzZScsXG5cdE9QRU5fRVZFTlQgPSAnT3BlbicsXG5cdENIQU5HRV9FVkVOVCA9ICdDaGFuZ2UnLFxuXHROUyA9ICdtZnAnLFxuXHRFVkVOVF9OUyA9ICcuJyArIE5TLFxuXHRSRUFEWV9DTEFTUyA9ICdtZnAtcmVhZHknLFxuXHRSRU1PVklOR19DTEFTUyA9ICdtZnAtcmVtb3ZpbmcnLFxuXHRQUkVWRU5UX0NMT1NFX0NMQVNTID0gJ21mcC1wcmV2ZW50LWNsb3NlJztcblxuXG4vKipcbiAqIFByaXZhdGUgdmFycyBcbiAqL1xuLypqc2hpbnQgLVcwNzkgKi9cbnZhciBtZnAsIC8vIEFzIHdlIGhhdmUgb25seSBvbmUgaW5zdGFuY2Ugb2YgTWFnbmlmaWNQb3B1cCBvYmplY3QsIHdlIGRlZmluZSBpdCBsb2NhbGx5IHRvIG5vdCB0byB1c2UgJ3RoaXMnXG5cdE1hZ25pZmljUG9wdXAgPSBmdW5jdGlvbigpe30sXG5cdF9pc0pRID0gISEod2luZG93LmpRdWVyeSksXG5cdF9wcmV2U3RhdHVzLFxuXHRfd2luZG93ID0gJCh3aW5kb3cpLFxuXHRfZG9jdW1lbnQsXG5cdF9wcmV2Q29udGVudFR5cGUsXG5cdF93cmFwQ2xhc3Nlcyxcblx0X2N1cnJQb3B1cFR5cGU7XG5cblxuLyoqXG4gKiBQcml2YXRlIGZ1bmN0aW9uc1xuICovXG52YXIgX21mcE9uID0gZnVuY3Rpb24obmFtZSwgZikge1xuXHRcdG1mcC5ldi5vbihOUyArIG5hbWUgKyBFVkVOVF9OUywgZik7XG5cdH0sXG5cdF9nZXRFbCA9IGZ1bmN0aW9uKGNsYXNzTmFtZSwgYXBwZW5kVG8sIGh0bWwsIHJhdykge1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdGVsLmNsYXNzTmFtZSA9ICdtZnAtJytjbGFzc05hbWU7XG5cdFx0aWYoaHRtbCkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gaHRtbDtcblx0XHR9XG5cdFx0aWYoIXJhdykge1xuXHRcdFx0ZWwgPSAkKGVsKTtcblx0XHRcdGlmKGFwcGVuZFRvKSB7XG5cdFx0XHRcdGVsLmFwcGVuZFRvKGFwcGVuZFRvKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYoYXBwZW5kVG8pIHtcblx0XHRcdGFwcGVuZFRvLmFwcGVuZENoaWxkKGVsKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsO1xuXHR9LFxuXHRfbWZwVHJpZ2dlciA9IGZ1bmN0aW9uKGUsIGRhdGEpIHtcblx0XHRtZnAuZXYudHJpZ2dlckhhbmRsZXIoTlMgKyBlLCBkYXRhKTtcblxuXHRcdGlmKG1mcC5zdC5jYWxsYmFja3MpIHtcblx0XHRcdC8vIGNvbnZlcnRzIFwibWZwRXZlbnROYW1lXCIgdG8gXCJldmVudE5hbWVcIiBjYWxsYmFjayBhbmQgdHJpZ2dlcnMgaXQgaWYgaXQncyBwcmVzZW50XG5cdFx0XHRlID0gZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIGUuc2xpY2UoMSk7XG5cdFx0XHRpZihtZnAuc3QuY2FsbGJhY2tzW2VdKSB7XG5cdFx0XHRcdG1mcC5zdC5jYWxsYmFja3NbZV0uYXBwbHkobWZwLCAkLmlzQXJyYXkoZGF0YSkgPyBkYXRhIDogW2RhdGFdKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdF9nZXRDbG9zZUJ0biA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRpZih0eXBlICE9PSBfY3VyclBvcHVwVHlwZSB8fCAhbWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bikge1xuXHRcdFx0bWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0biA9ICQoIG1mcC5zdC5jbG9zZU1hcmt1cC5yZXBsYWNlKCcldGl0bGUlJywgbWZwLnN0LnRDbG9zZSApICk7XG5cdFx0XHRfY3VyclBvcHVwVHlwZSA9IHR5cGU7XG5cdFx0fVxuXHRcdHJldHVybiBtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuO1xuXHR9LFxuXHQvLyBJbml0aWFsaXplIE1hZ25pZmljIFBvcHVwIG9ubHkgd2hlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRfY2hlY2tJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCEkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UpIHtcblx0XHRcdC8qanNoaW50IC1XMDIwICovXG5cdFx0XHRtZnAgPSBuZXcgTWFnbmlmaWNQb3B1cCgpO1xuXHRcdFx0bWZwLmluaXQoKTtcblx0XHRcdCQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSA9IG1mcDtcblx0XHR9XG5cdH0sXG5cdC8vIENTUyB0cmFuc2l0aW9uIGRldGVjdGlvbiwgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MjY0ODk5L2RldGVjdC1jc3MtdHJhbnNpdGlvbnMtdXNpbmctamF2YXNjcmlwdC1hbmQtd2l0aG91dC1tb2Rlcm5penJcblx0c3VwcG9ydHNUcmFuc2l0aW9ucyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlLCAvLyAncycgZm9yIHN0eWxlLiBiZXR0ZXIgdG8gY3JlYXRlIGFuIGVsZW1lbnQgaWYgYm9keSB5ZXQgdG8gZXhpc3Rcblx0XHRcdHYgPSBbJ21zJywnTycsJ01veicsJ1dlYmtpdCddOyAvLyAndicgZm9yIHZlbmRvclxuXG5cdFx0aWYoIHNbJ3RyYW5zaXRpb24nXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIHRydWU7IFxuXHRcdH1cblx0XHRcdFxuXHRcdHdoaWxlKCB2Lmxlbmd0aCApIHtcblx0XHRcdGlmKCB2LnBvcCgpICsgJ1RyYW5zaXRpb24nIGluIHMgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cblxuLyoqXG4gKiBQdWJsaWMgZnVuY3Rpb25zXG4gKi9cbk1hZ25pZmljUG9wdXAucHJvdG90eXBlID0ge1xuXG5cdGNvbnN0cnVjdG9yOiBNYWduaWZpY1BvcHVwLFxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyBNYWduaWZpYyBQb3B1cCBwbHVnaW4uIFxuXHQgKiBUaGlzIGZ1bmN0aW9uIGlzIHRyaWdnZXJlZCBvbmx5IG9uY2Ugd2hlbiAkLmZuLm1hZ25pZmljUG9wdXAgb3IgJC5tYWduaWZpY1BvcHVwIGlzIGV4ZWN1dGVkXG5cdCAqL1xuXHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYXBwVmVyc2lvbiA9IG5hdmlnYXRvci5hcHBWZXJzaW9uO1xuXHRcdG1mcC5pc0xvd0lFID0gbWZwLmlzSUU4ID0gZG9jdW1lbnQuYWxsICYmICFkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyO1xuXHRcdG1mcC5pc0FuZHJvaWQgPSAoL2FuZHJvaWQvZ2kpLnRlc3QoYXBwVmVyc2lvbik7XG5cdFx0bWZwLmlzSU9TID0gKC9pcGhvbmV8aXBhZHxpcG9kL2dpKS50ZXN0KGFwcFZlcnNpb24pO1xuXHRcdG1mcC5zdXBwb3J0c1RyYW5zaXRpb24gPSBzdXBwb3J0c1RyYW5zaXRpb25zKCk7XG5cblx0XHQvLyBXZSBkaXNhYmxlIGZpeGVkIHBvc2l0aW9uZWQgbGlnaHRib3ggb24gZGV2aWNlcyB0aGF0IGRvbid0IGhhbmRsZSBpdCBuaWNlbHkuXG5cdFx0Ly8gSWYgeW91IGtub3cgYSBiZXR0ZXIgd2F5IG9mIGRldGVjdGluZyB0aGlzIC0gbGV0IG1lIGtub3cuXG5cdFx0bWZwLnByb2JhYmx5TW9iaWxlID0gKG1mcC5pc0FuZHJvaWQgfHwgbWZwLmlzSU9TIHx8IC8oT3BlcmEgTWluaSl8S2luZGxlfHdlYk9TfEJsYWNrQmVycnl8KE9wZXJhIE1vYmkpfChXaW5kb3dzIFBob25lKXxJRU1vYmlsZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgKTtcblx0XHRfZG9jdW1lbnQgPSAkKGRvY3VtZW50KTtcblxuXHRcdG1mcC5wb3B1cHNDYWNoZSA9IHt9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBPcGVucyBwb3B1cFxuXHQgKiBAcGFyYW0gIGRhdGEgW2Rlc2NyaXB0aW9uXVxuXHQgKi9cblx0b3BlbjogZnVuY3Rpb24oZGF0YSkge1xuXG5cdFx0dmFyIGk7XG5cblx0XHRpZihkYXRhLmlzT2JqID09PSBmYWxzZSkgeyBcblx0XHRcdC8vIGNvbnZlcnQgalF1ZXJ5IGNvbGxlY3Rpb24gdG8gYXJyYXkgdG8gYXZvaWQgY29uZmxpY3RzIGxhdGVyXG5cdFx0XHRtZnAuaXRlbXMgPSBkYXRhLml0ZW1zLnRvQXJyYXkoKTtcblxuXHRcdFx0bWZwLmluZGV4ID0gMDtcblx0XHRcdHZhciBpdGVtcyA9IGRhdGEuaXRlbXMsXG5cdFx0XHRcdGl0ZW07XG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpdGVtID0gaXRlbXNbaV07XG5cdFx0XHRcdGlmKGl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRcdFx0aXRlbSA9IGl0ZW0uZWxbMF07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoaXRlbSA9PT0gZGF0YS5lbFswXSkge1xuXHRcdFx0XHRcdG1mcC5pbmRleCA9IGk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLml0ZW1zID0gJC5pc0FycmF5KGRhdGEuaXRlbXMpID8gZGF0YS5pdGVtcyA6IFtkYXRhLml0ZW1zXTtcblx0XHRcdG1mcC5pbmRleCA9IGRhdGEuaW5kZXggfHwgMDtcblx0XHR9XG5cblx0XHQvLyBpZiBwb3B1cCBpcyBhbHJlYWR5IG9wZW5lZCAtIHdlIGp1c3QgdXBkYXRlIHRoZSBjb250ZW50XG5cdFx0aWYobWZwLmlzT3Blbikge1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdG1mcC50eXBlcyA9IFtdOyBcblx0XHRfd3JhcENsYXNzZXMgPSAnJztcblx0XHRpZihkYXRhLm1haW5FbCAmJiBkYXRhLm1haW5FbC5sZW5ndGgpIHtcblx0XHRcdG1mcC5ldiA9IGRhdGEubWFpbkVsLmVxKDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuZXYgPSBfZG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0aWYoZGF0YS5rZXkpIHtcblx0XHRcdGlmKCFtZnAucG9wdXBzQ2FjaGVbZGF0YS5rZXldKSB7XG5cdFx0XHRcdG1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV0gPSB7fTtcblx0XHRcdH1cblx0XHRcdG1mcC5jdXJyVGVtcGxhdGUgPSBtZnAucG9wdXBzQ2FjaGVbZGF0YS5rZXldO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuY3VyclRlbXBsYXRlID0ge307XG5cdFx0fVxuXG5cblxuXHRcdG1mcC5zdCA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHMsIGRhdGEgKTsgXG5cdFx0bWZwLmZpeGVkQ29udGVudFBvcyA9IG1mcC5zdC5maXhlZENvbnRlbnRQb3MgPT09ICdhdXRvJyA/ICFtZnAucHJvYmFibHlNb2JpbGUgOiBtZnAuc3QuZml4ZWRDb250ZW50UG9zO1xuXG5cdFx0aWYobWZwLnN0Lm1vZGFsKSB7XG5cdFx0XHRtZnAuc3QuY2xvc2VPbkNvbnRlbnRDbGljayA9IGZhbHNlO1xuXHRcdFx0bWZwLnN0LmNsb3NlT25CZ0NsaWNrID0gZmFsc2U7XG5cdFx0XHRtZnAuc3Quc2hvd0Nsb3NlQnRuID0gZmFsc2U7XG5cdFx0XHRtZnAuc3QuZW5hYmxlRXNjYXBlS2V5ID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXG5cdFx0Ly8gQnVpbGRpbmcgbWFya3VwXG5cdFx0Ly8gbWFpbiBjb250YWluZXJzIGFyZSBjcmVhdGVkIG9ubHkgb25jZVxuXHRcdGlmKCFtZnAuYmdPdmVybGF5KSB7XG5cblx0XHRcdC8vIERhcmsgb3ZlcmxheVxuXHRcdFx0bWZwLmJnT3ZlcmxheSA9IF9nZXRFbCgnYmcnKS5vbignY2xpY2snK0VWRU5UX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0bWZwLmNsb3NlKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0bWZwLndyYXAgPSBfZ2V0RWwoJ3dyYXAnKS5hdHRyKCd0YWJpbmRleCcsIC0xKS5vbignY2xpY2snK0VWRU5UX05TLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmKG1mcC5fY2hlY2tJZkNsb3NlKGUudGFyZ2V0KSkge1xuXHRcdFx0XHRcdG1mcC5jbG9zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0bWZwLmNvbnRhaW5lciA9IF9nZXRFbCgnY29udGFpbmVyJywgbWZwLndyYXApO1xuXHRcdH1cblxuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyID0gX2dldEVsKCdjb250ZW50Jyk7XG5cdFx0aWYobWZwLnN0LnByZWxvYWRlcikge1xuXHRcdFx0bWZwLnByZWxvYWRlciA9IF9nZXRFbCgncHJlbG9hZGVyJywgbWZwLmNvbnRhaW5lciwgbWZwLnN0LnRMb2FkaW5nKTtcblx0XHR9XG5cblxuXHRcdC8vIEluaXRpYWxpemluZyBtb2R1bGVzXG5cdFx0dmFyIG1vZHVsZXMgPSAkLm1hZ25pZmljUG9wdXAubW9kdWxlcztcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgbiA9IG1vZHVsZXNbaV07XG5cdFx0XHRuID0gbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG4uc2xpY2UoMSk7XG5cdFx0XHRtZnBbJ2luaXQnK25dLmNhbGwobWZwKTtcblx0XHR9XG5cdFx0X21mcFRyaWdnZXIoJ0JlZm9yZU9wZW4nKTtcblxuXG5cdFx0aWYobWZwLnN0LnNob3dDbG9zZUJ0bikge1xuXHRcdFx0Ly8gQ2xvc2UgYnV0dG9uXG5cdFx0XHRpZighbWZwLnN0LmNsb3NlQnRuSW5zaWRlKSB7XG5cdFx0XHRcdG1mcC53cmFwLmFwcGVuZCggX2dldENsb3NlQnRuKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9tZnBPbihNQVJLVVBfUEFSU0VfRVZFTlQsIGZ1bmN0aW9uKGUsIHRlbXBsYXRlLCB2YWx1ZXMsIGl0ZW0pIHtcblx0XHRcdFx0XHR2YWx1ZXMuY2xvc2VfcmVwbGFjZVdpdGggPSBfZ2V0Q2xvc2VCdG4oaXRlbS50eXBlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdF93cmFwQ2xhc3NlcyArPSAnIG1mcC1jbG9zZS1idG4taW4nO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKG1mcC5zdC5hbGlnblRvcCkge1xuXHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWFsaWduLXRvcCc7XG5cdFx0fVxuXG5cdFxuXG5cdFx0aWYobWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0bWZwLndyYXAuY3NzKHtcblx0XHRcdFx0b3ZlcmZsb3c6IG1mcC5zdC5vdmVyZmxvd1ksXG5cdFx0XHRcdG92ZXJmbG93WDogJ2hpZGRlbicsXG5cdFx0XHRcdG92ZXJmbG93WTogbWZwLnN0Lm92ZXJmbG93WVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC53cmFwLmNzcyh7IFxuXHRcdFx0XHR0b3A6IF93aW5kb3cuc2Nyb2xsVG9wKCksXG5cdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYoIG1mcC5zdC5maXhlZEJnUG9zID09PSBmYWxzZSB8fCAobWZwLnN0LmZpeGVkQmdQb3MgPT09ICdhdXRvJyAmJiAhbWZwLmZpeGVkQ29udGVudFBvcykgKSB7XG5cdFx0XHRtZnAuYmdPdmVybGF5LmNzcyh7XG5cdFx0XHRcdGhlaWdodDogX2RvY3VtZW50LmhlaWdodCgpLFxuXHRcdFx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0XG5cblx0XHRpZihtZnAuc3QuZW5hYmxlRXNjYXBlS2V5KSB7XG5cdFx0XHQvLyBDbG9zZSBvbiBFU0Mga2V5XG5cdFx0XHRfZG9jdW1lbnQub24oJ2tleXVwJyArIEVWRU5UX05TLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmKGUua2V5Q29kZSA9PT0gMjcpIHtcblx0XHRcdFx0XHRtZnAuY2xvc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0X3dpbmRvdy5vbigncmVzaXplJyArIEVWRU5UX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC51cGRhdGVTaXplKCk7XG5cdFx0fSk7XG5cblxuXHRcdGlmKCFtZnAuc3QuY2xvc2VPbkNvbnRlbnRDbGljaykge1xuXHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWF1dG8tY3Vyc29yJztcblx0XHR9XG5cdFx0XG5cdFx0aWYoX3dyYXBDbGFzc2VzKVxuXHRcdFx0bWZwLndyYXAuYWRkQ2xhc3MoX3dyYXBDbGFzc2VzKTtcblxuXG5cdFx0Ly8gdGhpcyB0cmlnZ2VycyByZWNhbGN1bGF0aW9uIG9mIGxheW91dCwgc28gd2UgZ2V0IGl0IG9uY2UgdG8gbm90IHRvIHRyaWdnZXIgdHdpY2Vcblx0XHR2YXIgd2luZG93SGVpZ2h0ID0gbWZwLndIID0gX3dpbmRvdy5oZWlnaHQoKTtcblxuXHRcdFxuXHRcdHZhciB3aW5kb3dTdHlsZXMgPSB7fTtcblxuXHRcdGlmKCBtZnAuZml4ZWRDb250ZW50UG9zICkge1xuICAgICAgICAgICAgaWYobWZwLl9oYXNTY3JvbGxCYXIod2luZG93SGVpZ2h0KSl7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBtZnAuX2dldFNjcm9sbGJhclNpemUoKTtcbiAgICAgICAgICAgICAgICBpZihzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd1N0eWxlcy5tYXJnaW5SaWdodCA9IHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblx0XHRpZihtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHRpZighbWZwLmlzSUU3KSB7XG5cdFx0XHRcdHdpbmRvd1N0eWxlcy5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gaWU3IGRvdWJsZS1zY3JvbGwgYnVnXG5cdFx0XHRcdCQoJ2JvZHksIGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdFxuXHRcdFxuXHRcdHZhciBjbGFzc2VzVG9hZGQgPSBtZnAuc3QubWFpbkNsYXNzO1xuXHRcdGlmKG1mcC5pc0lFNykge1xuXHRcdFx0Y2xhc3Nlc1RvYWRkICs9ICcgbWZwLWllNyc7XG5cdFx0fVxuXHRcdGlmKGNsYXNzZXNUb2FkZCkge1xuXHRcdFx0bWZwLl9hZGRDbGFzc1RvTUZQKCBjbGFzc2VzVG9hZGQgKTtcblx0XHR9XG5cblx0XHQvLyBhZGQgY29udGVudFxuXHRcdG1mcC51cGRhdGVJdGVtSFRNTCgpO1xuXG5cdFx0X21mcFRyaWdnZXIoJ0J1aWxkQ29udHJvbHMnKTtcblxuXHRcdC8vIHJlbW92ZSBzY3JvbGxiYXIsIGFkZCBtYXJnaW4gZS50LmNcblx0XHQkKCdodG1sJykuY3NzKHdpbmRvd1N0eWxlcyk7XG5cdFx0XG5cdFx0Ly8gYWRkIGV2ZXJ5dGhpbmcgdG8gRE9NXG5cdFx0bWZwLmJnT3ZlcmxheS5hZGQobWZwLndyYXApLnByZXBlbmRUbyggbWZwLnN0LnByZXBlbmRUbyB8fCAkKGRvY3VtZW50LmJvZHkpICk7XG5cblx0XHQvLyBTYXZlIGxhc3QgZm9jdXNlZCBlbGVtZW50XG5cdFx0bWZwLl9sYXN0Rm9jdXNlZEVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0XHRcblx0XHQvLyBXYWl0IGZvciBuZXh0IGN5Y2xlIHRvIGFsbG93IENTUyB0cmFuc2l0aW9uXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFxuXHRcdFx0aWYobWZwLmNvbnRlbnQpIHtcblx0XHRcdFx0bWZwLl9hZGRDbGFzc1RvTUZQKFJFQURZX0NMQVNTKTtcblx0XHRcdFx0bWZwLl9zZXRGb2N1cygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gaWYgY29udGVudCBpcyBub3QgZGVmaW5lZCAobm90IGxvYWRlZCBlLnQuYykgd2UgYWRkIGNsYXNzIG9ubHkgZm9yIEJHXG5cdFx0XHRcdG1mcC5iZ092ZXJsYXkuYWRkQ2xhc3MoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBUcmFwIHRoZSBmb2N1cyBpbiBwb3B1cFxuXHRcdFx0X2RvY3VtZW50Lm9uKCdmb2N1c2luJyArIEVWRU5UX05TLCBtZnAuX29uRm9jdXNJbik7XG5cblx0XHR9LCAxNik7XG5cblx0XHRtZnAuaXNPcGVuID0gdHJ1ZTtcblx0XHRtZnAudXBkYXRlU2l6ZSh3aW5kb3dIZWlnaHQpO1xuXHRcdF9tZnBUcmlnZ2VyKE9QRU5fRVZFTlQpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENsb3NlcyB0aGUgcG9wdXBcblx0ICovXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRpZighbWZwLmlzT3BlbikgcmV0dXJuO1xuXHRcdF9tZnBUcmlnZ2VyKEJFRk9SRV9DTE9TRV9FVkVOVCk7XG5cblx0XHRtZnAuaXNPcGVuID0gZmFsc2U7XG5cdFx0Ly8gZm9yIENTUzMgYW5pbWF0aW9uXG5cdFx0aWYobWZwLnN0LnJlbW92YWxEZWxheSAmJiAhbWZwLmlzTG93SUUgJiYgbWZwLnN1cHBvcnRzVHJhbnNpdGlvbiApICB7XG5cdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoUkVNT1ZJTkdfQ0xBU1MpO1xuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0bWZwLl9jbG9zZSgpO1xuXHRcdFx0fSwgbWZwLnN0LnJlbW92YWxEZWxheSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5fY2xvc2UoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEhlbHBlciBmb3IgY2xvc2UoKSBmdW5jdGlvblxuXHQgKi9cblx0X2Nsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRfbWZwVHJpZ2dlcihDTE9TRV9FVkVOVCk7XG5cblx0XHR2YXIgY2xhc3Nlc1RvUmVtb3ZlID0gUkVNT1ZJTkdfQ0xBU1MgKyAnICcgKyBSRUFEWV9DTEFTUyArICcgJztcblxuXHRcdG1mcC5iZ092ZXJsYXkuZGV0YWNoKCk7XG5cdFx0bWZwLndyYXAuZGV0YWNoKCk7XG5cdFx0bWZwLmNvbnRhaW5lci5lbXB0eSgpO1xuXG5cdFx0aWYobWZwLnN0Lm1haW5DbGFzcykge1xuXHRcdFx0Y2xhc3Nlc1RvUmVtb3ZlICs9IG1mcC5zdC5tYWluQ2xhc3MgKyAnICc7XG5cdFx0fVxuXG5cdFx0bWZwLl9yZW1vdmVDbGFzc0Zyb21NRlAoY2xhc3Nlc1RvUmVtb3ZlKTtcblxuXHRcdGlmKG1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdHZhciB3aW5kb3dTdHlsZXMgPSB7bWFyZ2luUmlnaHQ6ICcnfTtcblx0XHRcdGlmKG1mcC5pc0lFNykge1xuXHRcdFx0XHQkKCdib2R5LCBodG1sJykuY3NzKCdvdmVyZmxvdycsICcnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1N0eWxlcy5vdmVyZmxvdyA9ICcnO1xuXHRcdFx0fVxuXHRcdFx0JCgnaHRtbCcpLmNzcyh3aW5kb3dTdHlsZXMpO1xuXHRcdH1cblx0XHRcblx0XHRfZG9jdW1lbnQub2ZmKCdrZXl1cCcgKyBFVkVOVF9OUyArICcgZm9jdXNpbicgKyBFVkVOVF9OUyk7XG5cdFx0bWZwLmV2Lm9mZihFVkVOVF9OUyk7XG5cblx0XHQvLyBjbGVhbiB1cCBET00gZWxlbWVudHMgdGhhdCBhcmVuJ3QgcmVtb3ZlZFxuXHRcdG1mcC53cmFwLmF0dHIoJ2NsYXNzJywgJ21mcC13cmFwJykucmVtb3ZlQXR0cignc3R5bGUnKTtcblx0XHRtZnAuYmdPdmVybGF5LmF0dHIoJ2NsYXNzJywgJ21mcC1iZycpO1xuXHRcdG1mcC5jb250YWluZXIuYXR0cignY2xhc3MnLCAnbWZwLWNvbnRhaW5lcicpO1xuXG5cdFx0Ly8gcmVtb3ZlIGNsb3NlIGJ1dHRvbiBmcm9tIHRhcmdldCBlbGVtZW50XG5cdFx0aWYobWZwLnN0LnNob3dDbG9zZUJ0biAmJlxuXHRcdCghbWZwLnN0LmNsb3NlQnRuSW5zaWRlIHx8IG1mcC5jdXJyVGVtcGxhdGVbbWZwLmN1cnJJdGVtLnR5cGVdID09PSB0cnVlKSkge1xuXHRcdFx0aWYobWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bilcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bi5kZXRhY2goKTtcblx0XHR9XG5cblxuXHRcdGlmKG1mcC5zdC5hdXRvRm9jdXNMYXN0ICYmIG1mcC5fbGFzdEZvY3VzZWRFbCkge1xuXHRcdFx0JChtZnAuX2xhc3RGb2N1c2VkRWwpLmZvY3VzKCk7IC8vIHB1dCB0YWIgZm9jdXMgYmFja1xuXHRcdH1cblx0XHRtZnAuY3Vyckl0ZW0gPSBudWxsO1x0XG5cdFx0bWZwLmNvbnRlbnQgPSBudWxsO1xuXHRcdG1mcC5jdXJyVGVtcGxhdGUgPSBudWxsO1xuXHRcdG1mcC5wcmV2SGVpZ2h0ID0gMDtcblxuXHRcdF9tZnBUcmlnZ2VyKEFGVEVSX0NMT1NFX0VWRU5UKTtcblx0fSxcblx0XG5cdHVwZGF0ZVNpemU6IGZ1bmN0aW9uKHdpbkhlaWdodCkge1xuXG5cdFx0aWYobWZwLmlzSU9TKSB7XG5cdFx0XHQvLyBmaXhlcyBpT1MgbmF2IGJhcnMgaHR0cHM6Ly9naXRodWIuY29tL2RpbXNlbWVub3YvTWFnbmlmaWMtUG9wdXAvaXNzdWVzLzJcblx0XHRcdHZhciB6b29tTGV2ZWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aDtcblx0XHRcdHZhciBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiB6b29tTGV2ZWw7XG5cdFx0XHRtZnAud3JhcC5jc3MoJ2hlaWdodCcsIGhlaWdodCk7XG5cdFx0XHRtZnAud0ggPSBoZWlnaHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC53SCA9IHdpbkhlaWdodCB8fCBfd2luZG93LmhlaWdodCgpO1xuXHRcdH1cblx0XHQvLyBGaXhlcyAjODQ6IHBvcHVwIGluY29ycmVjdGx5IHBvc2l0aW9uZWQgd2l0aCBwb3NpdGlvbjpyZWxhdGl2ZSBvbiBib2R5XG5cdFx0aWYoIW1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdG1mcC53cmFwLmNzcygnaGVpZ2h0JywgbWZwLndIKTtcblx0XHR9XG5cblx0XHRfbWZwVHJpZ2dlcignUmVzaXplJyk7XG5cblx0fSxcblxuXHQvKipcblx0ICogU2V0IGNvbnRlbnQgb2YgcG9wdXAgYmFzZWQgb24gY3VycmVudCBpbmRleFxuXHQgKi9cblx0dXBkYXRlSXRlbUhUTUw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpdGVtID0gbWZwLml0ZW1zW21mcC5pbmRleF07XG5cblx0XHQvLyBEZXRhY2ggYW5kIHBlcmZvcm0gbW9kaWZpY2F0aW9uc1xuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyLmRldGFjaCgpO1xuXG5cdFx0aWYobWZwLmNvbnRlbnQpXG5cdFx0XHRtZnAuY29udGVudC5kZXRhY2goKTtcblxuXHRcdGlmKCFpdGVtLnBhcnNlZCkge1xuXHRcdFx0aXRlbSA9IG1mcC5wYXJzZUVsKCBtZnAuaW5kZXggKTtcblx0XHR9XG5cblx0XHR2YXIgdHlwZSA9IGl0ZW0udHlwZTtcblxuXHRcdF9tZnBUcmlnZ2VyKCdCZWZvcmVDaGFuZ2UnLCBbbWZwLmN1cnJJdGVtID8gbWZwLmN1cnJJdGVtLnR5cGUgOiAnJywgdHlwZV0pO1xuXHRcdC8vIEJlZm9yZUNoYW5nZSBldmVudCB3b3JrcyBsaWtlIHNvOlxuXHRcdC8vIF9tZnBPbignQmVmb3JlQ2hhbmdlJywgZnVuY3Rpb24oZSwgcHJldlR5cGUsIG5ld1R5cGUpIHsgfSk7XG5cblx0XHRtZnAuY3Vyckl0ZW0gPSBpdGVtO1xuXG5cdFx0aWYoIW1mcC5jdXJyVGVtcGxhdGVbdHlwZV0pIHtcblx0XHRcdHZhciBtYXJrdXAgPSBtZnAuc3RbdHlwZV0gPyBtZnAuc3RbdHlwZV0ubWFya3VwIDogZmFsc2U7XG5cblx0XHRcdC8vIGFsbG93cyB0byBtb2RpZnkgbWFya3VwXG5cdFx0XHRfbWZwVHJpZ2dlcignRmlyc3RNYXJrdXBQYXJzZScsIG1hcmt1cCk7XG5cblx0XHRcdGlmKG1hcmt1cCkge1xuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlW3R5cGVdID0gJChtYXJrdXApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gaWYgdGhlcmUgaXMgbm8gbWFya3VwIGZvdW5kIHdlIGp1c3QgZGVmaW5lIHRoYXQgdGVtcGxhdGUgaXMgcGFyc2VkXG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKF9wcmV2Q29udGVudFR5cGUgJiYgX3ByZXZDb250ZW50VHlwZSAhPT0gaXRlbS50eXBlKSB7XG5cdFx0XHRtZnAuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdtZnAtJytfcHJldkNvbnRlbnRUeXBlKyctaG9sZGVyJyk7XG5cdFx0fVxuXG5cdFx0dmFyIG5ld0NvbnRlbnQgPSBtZnBbJ2dldCcgKyB0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHlwZS5zbGljZSgxKV0oaXRlbSwgbWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSk7XG5cdFx0bWZwLmFwcGVuZENvbnRlbnQobmV3Q29udGVudCwgdHlwZSk7XG5cblx0XHRpdGVtLnByZWxvYWRlZCA9IHRydWU7XG5cblx0XHRfbWZwVHJpZ2dlcihDSEFOR0VfRVZFTlQsIGl0ZW0pO1xuXHRcdF9wcmV2Q29udGVudFR5cGUgPSBpdGVtLnR5cGU7XG5cblx0XHQvLyBBcHBlbmQgY29udGFpbmVyIGJhY2sgYWZ0ZXIgaXRzIGNvbnRlbnQgY2hhbmdlZFxuXHRcdG1mcC5jb250YWluZXIucHJlcGVuZChtZnAuY29udGVudENvbnRhaW5lcik7XG5cblx0XHRfbWZwVHJpZ2dlcignQWZ0ZXJDaGFuZ2UnKTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBTZXQgSFRNTCBjb250ZW50IG9mIHBvcHVwXG5cdCAqL1xuXHRhcHBlbmRDb250ZW50OiBmdW5jdGlvbihuZXdDb250ZW50LCB0eXBlKSB7XG5cdFx0bWZwLmNvbnRlbnQgPSBuZXdDb250ZW50O1xuXG5cdFx0aWYobmV3Q29udGVudCkge1xuXHRcdFx0aWYobWZwLnN0LnNob3dDbG9zZUJ0biAmJiBtZnAuc3QuY2xvc2VCdG5JbnNpZGUgJiZcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBtYXJrdXAsIHdlIGp1c3QgYXBwZW5kIGNsb3NlIGJ1dHRvbiBlbGVtZW50IGluc2lkZVxuXHRcdFx0XHRpZighbWZwLmNvbnRlbnQuZmluZCgnLm1mcC1jbG9zZScpLmxlbmd0aCkge1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmFwcGVuZChfZ2V0Q2xvc2VCdG4oKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1mcC5jb250ZW50ID0gbmV3Q29udGVudDtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLmNvbnRlbnQgPSAnJztcblx0XHR9XG5cblx0XHRfbWZwVHJpZ2dlcihCRUZPUkVfQVBQRU5EX0VWRU5UKTtcblx0XHRtZnAuY29udGFpbmVyLmFkZENsYXNzKCdtZnAtJyt0eXBlKyctaG9sZGVyJyk7XG5cblx0XHRtZnAuY29udGVudENvbnRhaW5lci5hcHBlbmQobWZwLmNvbnRlbnQpO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgTWFnbmlmaWMgUG9wdXAgZGF0YSBvYmplY3QgYmFzZWQgb24gZ2l2ZW4gZGF0YVxuXHQgKiBAcGFyYW0gIHtpbnR9IGluZGV4IEluZGV4IG9mIGl0ZW0gdG8gcGFyc2Vcblx0ICovXG5cdHBhcnNlRWw6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbaW5kZXhdLFxuXHRcdFx0dHlwZTtcblxuXHRcdGlmKGl0ZW0udGFnTmFtZSkge1xuXHRcdFx0aXRlbSA9IHsgZWw6ICQoaXRlbSkgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dHlwZSA9IGl0ZW0udHlwZTtcblx0XHRcdGl0ZW0gPSB7IGRhdGE6IGl0ZW0sIHNyYzogaXRlbS5zcmMgfTtcblx0XHR9XG5cblx0XHRpZihpdGVtLmVsKSB7XG5cdFx0XHR2YXIgdHlwZXMgPSBtZnAudHlwZXM7XG5cblx0XHRcdC8vIGNoZWNrIGZvciAnbWZwLVRZUEUnIGNsYXNzXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYoIGl0ZW0uZWwuaGFzQ2xhc3MoJ21mcC0nK3R5cGVzW2ldKSApIHtcblx0XHRcdFx0XHR0eXBlID0gdHlwZXNbaV07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aXRlbS5zcmMgPSBpdGVtLmVsLmF0dHIoJ2RhdGEtbWZwLXNyYycpO1xuXHRcdFx0aWYoIWl0ZW0uc3JjKSB7XG5cdFx0XHRcdGl0ZW0uc3JjID0gaXRlbS5lbC5hdHRyKCdocmVmJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aXRlbS50eXBlID0gdHlwZSB8fCBtZnAuc3QudHlwZSB8fCAnaW5saW5lJztcblx0XHRpdGVtLmluZGV4ID0gaW5kZXg7XG5cdFx0aXRlbS5wYXJzZWQgPSB0cnVlO1xuXHRcdG1mcC5pdGVtc1tpbmRleF0gPSBpdGVtO1xuXHRcdF9tZnBUcmlnZ2VyKCdFbGVtZW50UGFyc2UnLCBpdGVtKTtcblxuXHRcdHJldHVybiBtZnAuaXRlbXNbaW5kZXhdO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHNpbmdsZSBwb3B1cCBvciBhIGdyb3VwIG9mIHBvcHVwc1xuXHQgKi9cblx0YWRkR3JvdXA6IGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XG5cdFx0dmFyIGVIYW5kbGVyID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0ZS5tZnBFbCA9IHRoaXM7XG5cdFx0XHRtZnAuX29wZW5DbGljayhlLCBlbCwgb3B0aW9ucyk7XG5cdFx0fTtcblxuXHRcdGlmKCFvcHRpb25zKSB7XG5cdFx0XHRvcHRpb25zID0ge307XG5cdFx0fVxuXG5cdFx0dmFyIGVOYW1lID0gJ2NsaWNrLm1hZ25pZmljUG9wdXAnO1xuXHRcdG9wdGlvbnMubWFpbkVsID0gZWw7XG5cblx0XHRpZihvcHRpb25zLml0ZW1zKSB7XG5cdFx0XHRvcHRpb25zLmlzT2JqID0gdHJ1ZTtcblx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIGVIYW5kbGVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3B0aW9ucy5pc09iaiA9IGZhbHNlO1xuXHRcdFx0aWYob3B0aW9ucy5kZWxlZ2F0ZSkge1xuXHRcdFx0XHRlbC5vZmYoZU5hbWUpLm9uKGVOYW1lLCBvcHRpb25zLmRlbGVnYXRlICwgZUhhbmRsZXIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0aW9ucy5pdGVtcyA9IGVsO1xuXHRcdFx0XHRlbC5vZmYoZU5hbWUpLm9uKGVOYW1lLCBlSGFuZGxlcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRfb3BlbkNsaWNrOiBmdW5jdGlvbihlLCBlbCwgb3B0aW9ucykge1xuXHRcdHZhciBtaWRDbGljayA9IG9wdGlvbnMubWlkQ2xpY2sgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubWlkQ2xpY2sgOiAkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHMubWlkQ2xpY2s7XG5cblxuXHRcdGlmKCFtaWRDbGljayAmJiAoIGUud2hpY2ggPT09IDIgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLnNoaWZ0S2V5ICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGRpc2FibGVPbiA9IG9wdGlvbnMuZGlzYWJsZU9uICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRpc2FibGVPbiA6ICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cy5kaXNhYmxlT247XG5cblx0XHRpZihkaXNhYmxlT24pIHtcblx0XHRcdGlmKCQuaXNGdW5jdGlvbihkaXNhYmxlT24pKSB7XG5cdFx0XHRcdGlmKCAhZGlzYWJsZU9uLmNhbGwobWZwKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHsgLy8gZWxzZSBpdCdzIG51bWJlclxuXHRcdFx0XHRpZiggX3dpbmRvdy53aWR0aCgpIDwgZGlzYWJsZU9uICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoZS50eXBlKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdC8vIFRoaXMgd2lsbCBwcmV2ZW50IHBvcHVwIGZyb20gY2xvc2luZyBpZiBlbGVtZW50IGlzIGluc2lkZSBhbmQgcG9wdXAgaXMgYWxyZWFkeSBvcGVuZWRcblx0XHRcdGlmKG1mcC5pc09wZW4pIHtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRvcHRpb25zLmVsID0gJChlLm1mcEVsKTtcblx0XHRpZihvcHRpb25zLmRlbGVnYXRlKSB7XG5cdFx0XHRvcHRpb25zLml0ZW1zID0gZWwuZmluZChvcHRpb25zLmRlbGVnYXRlKTtcblx0XHR9XG5cdFx0bWZwLm9wZW4ob3B0aW9ucyk7XG5cdH0sXG5cblxuXHQvKipcblx0ICogVXBkYXRlcyB0ZXh0IG9uIHByZWxvYWRlclxuXHQgKi9cblx0dXBkYXRlU3RhdHVzOiBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcblxuXHRcdGlmKG1mcC5wcmVsb2FkZXIpIHtcblx0XHRcdGlmKF9wcmV2U3RhdHVzICE9PSBzdGF0dXMpIHtcblx0XHRcdFx0bWZwLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnbWZwLXMtJytfcHJldlN0YXR1cyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCF0ZXh0ICYmIHN0YXR1cyA9PT0gJ2xvYWRpbmcnKSB7XG5cdFx0XHRcdHRleHQgPSBtZnAuc3QudExvYWRpbmc7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkYXRhID0ge1xuXHRcdFx0XHRzdGF0dXM6IHN0YXR1cyxcblx0XHRcdFx0dGV4dDogdGV4dFxuXHRcdFx0fTtcblx0XHRcdC8vIGFsbG93cyB0byBtb2RpZnkgc3RhdHVzXG5cdFx0XHRfbWZwVHJpZ2dlcignVXBkYXRlU3RhdHVzJywgZGF0YSk7XG5cblx0XHRcdHN0YXR1cyA9IGRhdGEuc3RhdHVzO1xuXHRcdFx0dGV4dCA9IGRhdGEudGV4dDtcblxuXHRcdFx0bWZwLnByZWxvYWRlci5odG1sKHRleHQpO1xuXG5cdFx0XHRtZnAucHJlbG9hZGVyLmZpbmQoJ2EnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0bWZwLmNvbnRhaW5lci5hZGRDbGFzcygnbWZwLXMtJytzdGF0dXMpO1xuXHRcdFx0X3ByZXZTdGF0dXMgPSBzdGF0dXM7XG5cdFx0fVxuXHR9LFxuXG5cblx0Lypcblx0XHRcIlByaXZhdGVcIiBoZWxwZXJzIHRoYXQgYXJlbid0IHByaXZhdGUgYXQgYWxsXG5cdCAqL1xuXHQvLyBDaGVjayB0byBjbG9zZSBwb3B1cCBvciBub3Rcblx0Ly8gXCJ0YXJnZXRcIiBpcyBhbiBlbGVtZW50IHRoYXQgd2FzIGNsaWNrZWRcblx0X2NoZWNrSWZDbG9zZTogZnVuY3Rpb24odGFyZ2V0KSB7XG5cblx0XHRpZigkKHRhcmdldCkuaGFzQ2xhc3MoUFJFVkVOVF9DTE9TRV9DTEFTUykpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgY2xvc2VPbkNvbnRlbnQgPSBtZnAuc3QuY2xvc2VPbkNvbnRlbnRDbGljaztcblx0XHR2YXIgY2xvc2VPbkJnID0gbWZwLnN0LmNsb3NlT25CZ0NsaWNrO1xuXG5cdFx0aWYoY2xvc2VPbkNvbnRlbnQgJiYgY2xvc2VPbkJnKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBXZSBjbG9zZSB0aGUgcG9wdXAgaWYgY2xpY2sgaXMgb24gY2xvc2UgYnV0dG9uIG9yIG9uIHByZWxvYWRlci4gT3IgaWYgdGhlcmUgaXMgbm8gY29udGVudC5cblx0XHRcdGlmKCFtZnAuY29udGVudCB8fCAkKHRhcmdldCkuaGFzQ2xhc3MoJ21mcC1jbG9zZScpIHx8IChtZnAucHJlbG9hZGVyICYmIHRhcmdldCA9PT0gbWZwLnByZWxvYWRlclswXSkgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBpZiBjbGljayBpcyBvdXRzaWRlIHRoZSBjb250ZW50XG5cdFx0XHRpZiggICh0YXJnZXQgIT09IG1mcC5jb250ZW50WzBdICYmICEkLmNvbnRhaW5zKG1mcC5jb250ZW50WzBdLCB0YXJnZXQpKSAgKSB7XG5cdFx0XHRcdGlmKGNsb3NlT25CZykge1xuXHRcdFx0XHRcdC8vIGxhc3QgY2hlY2ssIGlmIHRoZSBjbGlja2VkIGVsZW1lbnQgaXMgaW4gRE9NLCAoaW4gY2FzZSBpdCdzIHJlbW92ZWQgb25jbGljaylcblx0XHRcdFx0XHRpZiggJC5jb250YWlucyhkb2N1bWVudCwgdGFyZ2V0KSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmKGNsb3NlT25Db250ZW50KSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblx0X2FkZENsYXNzVG9NRlA6IGZ1bmN0aW9uKGNOYW1lKSB7XG5cdFx0bWZwLmJnT3ZlcmxheS5hZGRDbGFzcyhjTmFtZSk7XG5cdFx0bWZwLndyYXAuYWRkQ2xhc3MoY05hbWUpO1xuXHR9LFxuXHRfcmVtb3ZlQ2xhc3NGcm9tTUZQOiBmdW5jdGlvbihjTmFtZSkge1xuXHRcdHRoaXMuYmdPdmVybGF5LnJlbW92ZUNsYXNzKGNOYW1lKTtcblx0XHRtZnAud3JhcC5yZW1vdmVDbGFzcyhjTmFtZSk7XG5cdH0sXG5cdF9oYXNTY3JvbGxCYXI6IGZ1bmN0aW9uKHdpbkhlaWdodCkge1xuXHRcdHJldHVybiAoICAobWZwLmlzSUU3ID8gX2RvY3VtZW50LmhlaWdodCgpIDogZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpID4gKHdpbkhlaWdodCB8fCBfd2luZG93LmhlaWdodCgpKSApO1xuXHR9LFxuXHRfc2V0Rm9jdXM6IGZ1bmN0aW9uKCkge1xuXHRcdChtZnAuc3QuZm9jdXMgPyBtZnAuY29udGVudC5maW5kKG1mcC5zdC5mb2N1cykuZXEoMCkgOiBtZnAud3JhcCkuZm9jdXMoKTtcblx0fSxcblx0X29uRm9jdXNJbjogZnVuY3Rpb24oZSkge1xuXHRcdGlmKCBlLnRhcmdldCAhPT0gbWZwLndyYXBbMF0gJiYgISQuY29udGFpbnMobWZwLndyYXBbMF0sIGUudGFyZ2V0KSApIHtcblx0XHRcdG1mcC5fc2V0Rm9jdXMoKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH0sXG5cdF9wYXJzZU1hcmt1cDogZnVuY3Rpb24odGVtcGxhdGUsIHZhbHVlcywgaXRlbSkge1xuXHRcdHZhciBhcnI7XG5cdFx0aWYoaXRlbS5kYXRhKSB7XG5cdFx0XHR2YWx1ZXMgPSAkLmV4dGVuZChpdGVtLmRhdGEsIHZhbHVlcyk7XG5cdFx0fVxuXHRcdF9tZnBUcmlnZ2VyKE1BUktVUF9QQVJTRV9FVkVOVCwgW3RlbXBsYXRlLCB2YWx1ZXMsIGl0ZW1dICk7XG5cblx0XHQkLmVhY2godmFsdWVzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdFx0XHRpZih2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGFyciA9IGtleS5zcGxpdCgnXycpO1xuXHRcdFx0aWYoYXJyLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0dmFyIGVsID0gdGVtcGxhdGUuZmluZChFVkVOVF9OUyArICctJythcnJbMF0pO1xuXG5cdFx0XHRcdGlmKGVsLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgYXR0ciA9IGFyclsxXTtcblx0XHRcdFx0XHRpZihhdHRyID09PSAncmVwbGFjZVdpdGgnKSB7XG5cdFx0XHRcdFx0XHRpZihlbFswXSAhPT0gdmFsdWVbMF0pIHtcblx0XHRcdFx0XHRcdFx0ZWwucmVwbGFjZVdpdGgodmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZihhdHRyID09PSAnaW1nJykge1xuXHRcdFx0XHRcdFx0aWYoZWwuaXMoJ2ltZycpKSB7XG5cdFx0XHRcdFx0XHRcdGVsLmF0dHIoJ3NyYycsIHZhbHVlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVsLnJlcGxhY2VXaXRoKCAkKCc8aW1nPicpLmF0dHIoJ3NyYycsIHZhbHVlKS5hdHRyKCdjbGFzcycsIGVsLmF0dHIoJ2NsYXNzJykpICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsLmF0dHIoYXJyWzFdLCB2YWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRlbXBsYXRlLmZpbmQoRVZFTlRfTlMgKyAnLScra2V5KS5odG1sKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRfZ2V0U2Nyb2xsYmFyU2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0Ly8gdGh4IERhdmlkXG5cdFx0aWYobWZwLnNjcm9sbGJhclNpemUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRzY3JvbGxEaXYuc3R5bGUuY3NzVGV4dCA9ICd3aWR0aDogOTlweDsgaGVpZ2h0OiA5OXB4OyBvdmVyZmxvdzogc2Nyb2xsOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTk5OTlweDsnO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuXHRcdFx0bWZwLnNjcm9sbGJhclNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG5cdFx0fVxuXHRcdHJldHVybiBtZnAuc2Nyb2xsYmFyU2l6ZTtcblx0fVxuXG59OyAvKiBNYWduaWZpY1BvcHVwIGNvcmUgcHJvdG90eXBlIGVuZCAqL1xuXG5cblxuXG4vKipcbiAqIFB1YmxpYyBzdGF0aWMgZnVuY3Rpb25zXG4gKi9cbiQubWFnbmlmaWNQb3B1cCA9IHtcblx0aW5zdGFuY2U6IG51bGwsXG5cdHByb3RvOiBNYWduaWZpY1BvcHVwLnByb3RvdHlwZSxcblx0bW9kdWxlczogW10sXG5cblx0b3BlbjogZnVuY3Rpb24ob3B0aW9ucywgaW5kZXgpIHtcblx0XHRfY2hlY2tJbnN0YW5jZSgpO1xuXG5cdFx0aWYoIW9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRvcHRpb25zLmlzT2JqID0gdHJ1ZTtcblx0XHRvcHRpb25zLmluZGV4ID0gaW5kZXggfHwgMDtcblx0XHRyZXR1cm4gdGhpcy5pbnN0YW5jZS5vcGVuKG9wdGlvbnMpO1xuXHR9LFxuXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gJC5tYWduaWZpY1BvcHVwLmluc3RhbmNlICYmICQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZS5jbG9zZSgpO1xuXHR9LFxuXG5cdHJlZ2lzdGVyTW9kdWxlOiBmdW5jdGlvbihuYW1lLCBtb2R1bGUpIHtcblx0XHRpZihtb2R1bGUub3B0aW9ucykge1xuXHRcdFx0JC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzW25hbWVdID0gbW9kdWxlLm9wdGlvbnM7XG5cdFx0fVxuXHRcdCQuZXh0ZW5kKHRoaXMucHJvdG8sIG1vZHVsZS5wcm90byk7XG5cdFx0dGhpcy5tb2R1bGVzLnB1c2gobmFtZSk7XG5cdH0sXG5cblx0ZGVmYXVsdHM6IHtcblxuXHRcdC8vIEluZm8gYWJvdXQgb3B0aW9ucyBpcyBpbiBkb2NzOlxuXHRcdC8vIGh0dHA6Ly9kaW1zZW1lbm92LmNvbS9wbHVnaW5zL21hZ25pZmljLXBvcHVwL2RvY3VtZW50YXRpb24uaHRtbCNvcHRpb25zXG5cblx0XHRkaXNhYmxlT246IDAsXG5cblx0XHRrZXk6IG51bGwsXG5cblx0XHRtaWRDbGljazogZmFsc2UsXG5cblx0XHRtYWluQ2xhc3M6ICcnLFxuXG5cdFx0cHJlbG9hZGVyOiB0cnVlLFxuXG5cdFx0Zm9jdXM6ICcnLCAvLyBDU1Mgc2VsZWN0b3Igb2YgaW5wdXQgdG8gZm9jdXMgYWZ0ZXIgcG9wdXAgaXMgb3BlbmVkXG5cblx0XHRjbG9zZU9uQ29udGVudENsaWNrOiBmYWxzZSxcblxuXHRcdGNsb3NlT25CZ0NsaWNrOiB0cnVlLFxuXG5cdFx0Y2xvc2VCdG5JbnNpZGU6IHRydWUsXG5cblx0XHRzaG93Q2xvc2VCdG46IHRydWUsXG5cblx0XHRlbmFibGVFc2NhcGVLZXk6IHRydWUsXG5cblx0XHRtb2RhbDogZmFsc2UsXG5cblx0XHRhbGlnblRvcDogZmFsc2UsXG5cblx0XHRyZW1vdmFsRGVsYXk6IDAsXG5cblx0XHRwcmVwZW5kVG86IG51bGwsXG5cblx0XHRmaXhlZENvbnRlbnRQb3M6ICdhdXRvJyxcblxuXHRcdGZpeGVkQmdQb3M6ICdhdXRvJyxcblxuXHRcdG92ZXJmbG93WTogJ2F1dG8nLFxuXG5cdFx0Y2xvc2VNYXJrdXA6ICc8YnV0dG9uIHRpdGxlPVwiJXRpdGxlJVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIm1mcC1jbG9zZVwiPiYjMjE1OzwvYnV0dG9uPicsXG5cblx0XHR0Q2xvc2U6ICdDbG9zZSAoRXNjKScsXG5cblx0XHR0TG9hZGluZzogJ0xvYWRpbmcuLi4nLFxuXG5cdFx0YXV0b0ZvY3VzTGFzdDogdHJ1ZVxuXG5cdH1cbn07XG5cblxuXG4kLmZuLm1hZ25pZmljUG9wdXAgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdF9jaGVja0luc3RhbmNlKCk7XG5cblx0dmFyIGpxRWwgPSAkKHRoaXMpO1xuXG5cdC8vIFdlIGNhbGwgc29tZSBBUEkgbWV0aG9kIG9mIGZpcnN0IHBhcmFtIGlzIGEgc3RyaW5nXG5cdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdGlmKG9wdGlvbnMgPT09ICdvcGVuJykge1xuXHRcdFx0dmFyIGl0ZW1zLFxuXHRcdFx0XHRpdGVtT3B0cyA9IF9pc0pRID8ganFFbC5kYXRhKCdtYWduaWZpY1BvcHVwJykgOiBqcUVsWzBdLm1hZ25pZmljUG9wdXAsXG5cdFx0XHRcdGluZGV4ID0gcGFyc2VJbnQoYXJndW1lbnRzWzFdLCAxMCkgfHwgMDtcblxuXHRcdFx0aWYoaXRlbU9wdHMuaXRlbXMpIHtcblx0XHRcdFx0aXRlbXMgPSBpdGVtT3B0cy5pdGVtc1tpbmRleF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpdGVtcyA9IGpxRWw7XG5cdFx0XHRcdGlmKGl0ZW1PcHRzLmRlbGVnYXRlKSB7XG5cdFx0XHRcdFx0aXRlbXMgPSBpdGVtcy5maW5kKGl0ZW1PcHRzLmRlbGVnYXRlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmVxKCBpbmRleCApO1xuXHRcdFx0fVxuXHRcdFx0bWZwLl9vcGVuQ2xpY2soe21mcEVsOml0ZW1zfSwganFFbCwgaXRlbU9wdHMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZihtZnAuaXNPcGVuKVxuXHRcdFx0XHRtZnBbb3B0aW9uc10uYXBwbHkobWZwLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblx0XHQvLyBjbG9uZSBvcHRpb25zIG9ialxuXHRcdG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0aW9ucyk7XG5cblx0XHQvKlxuXHRcdCAqIEFzIFplcHRvIGRvZXNuJ3Qgc3VwcG9ydCAuZGF0YSgpIG1ldGhvZCBmb3Igb2JqZWN0c1xuXHRcdCAqIGFuZCBpdCB3b3JrcyBvbmx5IGluIG5vcm1hbCBicm93c2Vyc1xuXHRcdCAqIHdlIGFzc2lnbiBcIm9wdGlvbnNcIiBvYmplY3QgZGlyZWN0bHkgdG8gdGhlIERPTSBlbGVtZW50LiBGVFchXG5cdFx0ICovXG5cdFx0aWYoX2lzSlEpIHtcblx0XHRcdGpxRWwuZGF0YSgnbWFnbmlmaWNQb3B1cCcsIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcUVsWzBdLm1hZ25pZmljUG9wdXAgPSBvcHRpb25zO1xuXHRcdH1cblxuXHRcdG1mcC5hZGRHcm91cChqcUVsLCBvcHRpb25zKTtcblxuXHR9XG5cdHJldHVybiBqcUVsO1xufTtcblxuLyo+PmNvcmUqL1xuXG4vKj4+aW5saW5lKi9cblxudmFyIElOTElORV9OUyA9ICdpbmxpbmUnLFxuXHRfaGlkZGVuQ2xhc3MsXG5cdF9pbmxpbmVQbGFjZWhvbGRlcixcblx0X2xhc3RJbmxpbmVFbGVtZW50LFxuXHRfcHV0SW5saW5lRWxlbWVudHNCYWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoX2xhc3RJbmxpbmVFbGVtZW50KSB7XG5cdFx0XHRfaW5saW5lUGxhY2Vob2xkZXIuYWZ0ZXIoIF9sYXN0SW5saW5lRWxlbWVudC5hZGRDbGFzcyhfaGlkZGVuQ2xhc3MpICkuZGV0YWNoKCk7XG5cdFx0XHRfbGFzdElubGluZUVsZW1lbnQgPSBudWxsO1xuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKElOTElORV9OUywge1xuXHRvcHRpb25zOiB7XG5cdFx0aGlkZGVuQ2xhc3M6ICdoaWRlJywgLy8gd2lsbCBiZSBhcHBlbmRlZCB3aXRoIGBtZnAtYCBwcmVmaXhcblx0XHRtYXJrdXA6ICcnLFxuXHRcdHROb3RGb3VuZDogJ0NvbnRlbnQgbm90IGZvdW5kJ1xuXHR9LFxuXHRwcm90bzoge1xuXG5cdFx0aW5pdElubGluZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRtZnAudHlwZXMucHVzaChJTkxJTkVfTlMpO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrJy4nK0lOTElORV9OUywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9wdXRJbmxpbmVFbGVtZW50c0JhY2soKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRnZXRJbmxpbmU6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cblx0XHRcdF9wdXRJbmxpbmVFbGVtZW50c0JhY2soKTtcblxuXHRcdFx0aWYoaXRlbS5zcmMpIHtcblx0XHRcdFx0dmFyIGlubGluZVN0ID0gbWZwLnN0LmlubGluZSxcblx0XHRcdFx0XHRlbCA9ICQoaXRlbS5zcmMpO1xuXG5cdFx0XHRcdGlmKGVsLmxlbmd0aCkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGFyZ2V0IGVsZW1lbnQgaGFzIHBhcmVudCAtIHdlIHJlcGxhY2UgaXQgd2l0aCBwbGFjZWhvbGRlciBhbmQgcHV0IGl0IGJhY2sgYWZ0ZXIgcG9wdXAgaXMgY2xvc2VkXG5cdFx0XHRcdFx0dmFyIHBhcmVudCA9IGVsWzBdLnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0aWYocGFyZW50ICYmIHBhcmVudC50YWdOYW1lKSB7XG5cdFx0XHRcdFx0XHRpZighX2lubGluZVBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdFx0XHRcdF9oaWRkZW5DbGFzcyA9IGlubGluZVN0LmhpZGRlbkNsYXNzO1xuXHRcdFx0XHRcdFx0XHRfaW5saW5lUGxhY2Vob2xkZXIgPSBfZ2V0RWwoX2hpZGRlbkNsYXNzKTtcblx0XHRcdFx0XHRcdFx0X2hpZGRlbkNsYXNzID0gJ21mcC0nK19oaWRkZW5DbGFzcztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIHJlcGxhY2UgdGFyZ2V0IGlubGluZSBlbGVtZW50IHdpdGggcGxhY2Vob2xkZXJcblx0XHRcdFx0XHRcdF9sYXN0SW5saW5lRWxlbWVudCA9IGVsLmFmdGVyKF9pbmxpbmVQbGFjZWhvbGRlcikuZGV0YWNoKCkucmVtb3ZlQ2xhc3MoX2hpZGRlbkNsYXNzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgaW5saW5lU3QudE5vdEZvdW5kKTtcblx0XHRcdFx0XHRlbCA9ICQoJzxkaXY+Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtLmlubGluZUVsZW1lbnQgPSBlbDtcblx0XHRcdFx0cmV0dXJuIGVsO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwge30sIGl0ZW0pO1xuXHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5pbmxpbmUqL1xuXG4vKj4+YWpheCovXG52YXIgQUpBWF9OUyA9ICdhamF4Jyxcblx0X2FqYXhDdXIsXG5cdF9yZW1vdmVBamF4Q3Vyc29yID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoX2FqYXhDdXIpIHtcblx0XHRcdCQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoX2FqYXhDdXIpO1xuXHRcdH1cblx0fSxcblx0X2Rlc3Ryb3lBamF4UmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuXHRcdF9yZW1vdmVBamF4Q3Vyc29yKCk7XG5cdFx0aWYobWZwLnJlcSkge1xuXHRcdFx0bWZwLnJlcS5hYm9ydCgpO1xuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKEFKQVhfTlMsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0c2V0dGluZ3M6IG51bGwsXG5cdFx0Y3Vyc29yOiAnbWZwLWFqYXgtY3VyJyxcblx0XHR0RXJyb3I6ICc8YSBocmVmPVwiJXVybCVcIj5UaGUgY29udGVudDwvYT4gY291bGQgbm90IGJlIGxvYWRlZC4nXG5cdH0sXG5cblx0cHJvdG86IHtcblx0XHRpbml0QWpheDogZnVuY3Rpb24oKSB7XG5cdFx0XHRtZnAudHlwZXMucHVzaChBSkFYX05TKTtcblx0XHRcdF9hamF4Q3VyID0gbWZwLnN0LmFqYXguY3Vyc29yO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrJy4nK0FKQVhfTlMsIF9kZXN0cm95QWpheFJlcXVlc3QpO1xuXHRcdFx0X21mcE9uKCdCZWZvcmVDaGFuZ2UuJyArIEFKQVhfTlMsIF9kZXN0cm95QWpheFJlcXVlc3QpO1xuXHRcdH0sXG5cdFx0Z2V0QWpheDogZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHRpZihfYWpheEN1cikge1xuXHRcdFx0XHQkKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKF9hamF4Q3VyKTtcblx0XHRcdH1cblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnbG9hZGluZycpO1xuXG5cdFx0XHR2YXIgb3B0cyA9ICQuZXh0ZW5kKHtcblx0XHRcdFx0dXJsOiBpdGVtLnNyYyxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcblx0XHRcdFx0XHR2YXIgdGVtcCA9IHtcblx0XHRcdFx0XHRcdGRhdGE6ZGF0YSxcblx0XHRcdFx0XHRcdHhocjpqcVhIUlxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignUGFyc2VBamF4JywgdGVtcCk7XG5cblx0XHRcdFx0XHRtZnAuYXBwZW5kQ29udGVudCggJCh0ZW1wLmRhdGEpLCBBSkFYX05TICk7XG5cblx0XHRcdFx0XHRpdGVtLmZpbmlzaGVkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdF9yZW1vdmVBamF4Q3Vyc29yKCk7XG5cblx0XHRcdFx0XHRtZnAuX3NldEZvY3VzKCk7XG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLndyYXAuYWRkQ2xhc3MoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0XHRcdH0sIDE2KTtcblxuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignQWpheENvbnRlbnRBZGRlZCcpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRlcnJvcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblx0XHRcdFx0XHRpdGVtLmZpbmlzaGVkID0gaXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgbWZwLnN0LmFqYXgudEVycm9yLnJlcGxhY2UoJyV1cmwlJywgaXRlbS5zcmMpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgbWZwLnN0LmFqYXguc2V0dGluZ3MpO1xuXG5cdFx0XHRtZnAucmVxID0gJC5hamF4KG9wdHMpO1xuXG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmFqYXgqL1xuXG4vKj4+aW1hZ2UqL1xudmFyIF9pbWdJbnRlcnZhbCxcblx0X2dldFRpdGxlID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdGlmKGl0ZW0uZGF0YSAmJiBpdGVtLmRhdGEudGl0bGUgIT09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiBpdGVtLmRhdGEudGl0bGU7XG5cblx0XHR2YXIgc3JjID0gbWZwLnN0LmltYWdlLnRpdGxlU3JjO1xuXG5cdFx0aWYoc3JjKSB7XG5cdFx0XHRpZigkLmlzRnVuY3Rpb24oc3JjKSkge1xuXHRcdFx0XHRyZXR1cm4gc3JjLmNhbGwobWZwLCBpdGVtKTtcblx0XHRcdH0gZWxzZSBpZihpdGVtLmVsKSB7XG5cdFx0XHRcdHJldHVybiBpdGVtLmVsLmF0dHIoc3JjKSB8fCAnJztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuICcnO1xuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoJ2ltYWdlJywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRtYXJrdXA6ICc8ZGl2IGNsYXNzPVwibWZwLWZpZ3VyZVwiPicrXG5cdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtY2xvc2VcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdCc8ZmlndXJlPicrXG5cdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1pbWdcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0JzxmaWdjYXB0aW9uPicrXG5cdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWJvdHRvbS1iYXJcIj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLXRpdGxlXCI+PC9kaXY+Jytcblx0XHRcdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jb3VudGVyXCI+PC9kaXY+Jytcblx0XHRcdFx0XHRcdFx0JzwvZGl2PicrXG5cdFx0XHRcdFx0XHQnPC9maWdjYXB0aW9uPicrXG5cdFx0XHRcdFx0JzwvZmlndXJlPicrXG5cdFx0XHRcdCc8L2Rpdj4nLFxuXHRcdGN1cnNvcjogJ21mcC16b29tLW91dC1jdXInLFxuXHRcdHRpdGxlU3JjOiAndGl0bGUnLFxuXHRcdHZlcnRpY2FsRml0OiB0cnVlLFxuXHRcdHRFcnJvcjogJzxhIGhyZWY9XCIldXJsJVwiPlRoZSBpbWFnZTwvYT4gY291bGQgbm90IGJlIGxvYWRlZC4nXG5cdH0sXG5cblx0cHJvdG86IHtcblx0XHRpbml0SW1hZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGltZ1N0ID0gbWZwLnN0LmltYWdlLFxuXHRcdFx0XHRucyA9ICcuaW1hZ2UnO1xuXG5cdFx0XHRtZnAudHlwZXMucHVzaCgnaW1hZ2UnKTtcblxuXHRcdFx0X21mcE9uKE9QRU5fRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuY3Vyckl0ZW0udHlwZSA9PT0gJ2ltYWdlJyAmJiBpbWdTdC5jdXJzb3IpIHtcblx0XHRcdFx0XHQkKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKGltZ1N0LmN1cnNvcik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihpbWdTdC5jdXJzb3IpIHtcblx0XHRcdFx0XHQkKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKGltZ1N0LmN1cnNvcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3dpbmRvdy5vZmYoJ3Jlc2l6ZScgKyBFVkVOVF9OUyk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdSZXNpemUnK25zLCBtZnAucmVzaXplSW1hZ2UpO1xuXHRcdFx0aWYobWZwLmlzTG93SUUpIHtcblx0XHRcdFx0X21mcE9uKCdBZnRlckNoYW5nZScsIG1mcC5yZXNpemVJbWFnZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZXNpemVJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1mcC5jdXJySXRlbTtcblx0XHRcdGlmKCFpdGVtIHx8ICFpdGVtLmltZykgcmV0dXJuO1xuXG5cdFx0XHRpZihtZnAuc3QuaW1hZ2UudmVydGljYWxGaXQpIHtcblx0XHRcdFx0dmFyIGRlY3IgPSAwO1xuXHRcdFx0XHQvLyBmaXggYm94LXNpemluZyBpbiBpZTcvOFxuXHRcdFx0XHRpZihtZnAuaXNMb3dJRSkge1xuXHRcdFx0XHRcdGRlY3IgPSBwYXJzZUludChpdGVtLmltZy5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKSArIHBhcnNlSW50KGl0ZW0uaW1nLmNzcygncGFkZGluZy1ib3R0b20nKSwxMCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aXRlbS5pbWcuY3NzKCdtYXgtaGVpZ2h0JywgbWZwLndILWRlY3IpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X29uSW1hZ2VIYXNTaXplOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRpZihpdGVtLmltZykge1xuXG5cdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cblx0XHRcdFx0aWYoX2ltZ0ludGVydmFsKSB7XG5cdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aXRlbS5pc0NoZWNraW5nSW1nU2l6ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdF9tZnBUcmlnZ2VyKCdJbWFnZUhhc1NpemUnLCBpdGVtKTtcblxuXHRcdFx0XHRpZihpdGVtLmltZ0hpZGRlbikge1xuXHRcdFx0XHRcdGlmKG1mcC5jb250ZW50KVxuXHRcdFx0XHRcdFx0bWZwLmNvbnRlbnQucmVtb3ZlQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cblx0XHRcdFx0XHRpdGVtLmltZ0hpZGRlbiA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRnVuY3Rpb24gdGhhdCBsb29wcyB1bnRpbCB0aGUgaW1hZ2UgaGFzIHNpemUgdG8gZGlzcGxheSBlbGVtZW50cyB0aGF0IHJlbHkgb24gaXQgYXNhcFxuXHRcdCAqL1xuXHRcdGZpbmRJbWFnZVNpemU6IGZ1bmN0aW9uKGl0ZW0pIHtcblxuXHRcdFx0dmFyIGNvdW50ZXIgPSAwLFxuXHRcdFx0XHRpbWcgPSBpdGVtLmltZ1swXSxcblx0XHRcdFx0bWZwU2V0SW50ZXJ2YWwgPSBmdW5jdGlvbihkZWxheSkge1xuXG5cdFx0XHRcdFx0aWYoX2ltZ0ludGVydmFsKSB7XG5cdFx0XHRcdFx0XHRjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGRlY2VsZXJhdGluZyBpbnRlcnZhbCB0aGF0IGNoZWNrcyBmb3Igc2l6ZSBvZiBhbiBpbWFnZVxuXHRcdFx0XHRcdF9pbWdJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYoaW1nLm5hdHVyYWxXaWR0aCA+IDApIHtcblx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZihjb3VudGVyID4gMjAwKSB7XG5cdFx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y291bnRlcisrO1xuXHRcdFx0XHRcdFx0aWYoY291bnRlciA9PT0gMykge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCgxMCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY291bnRlciA9PT0gNDApIHtcblx0XHRcdFx0XHRcdFx0bWZwU2V0SW50ZXJ2YWwoNTApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGNvdW50ZXIgPT09IDEwMCkge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCg1MDApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sIGRlbGF5KTtcblx0XHRcdFx0fTtcblxuXHRcdFx0bWZwU2V0SW50ZXJ2YWwoMSk7XG5cdFx0fSxcblxuXHRcdGdldEltYWdlOiBmdW5jdGlvbihpdGVtLCB0ZW1wbGF0ZSkge1xuXG5cdFx0XHR2YXIgZ3VhcmQgPSAwLFxuXG5cdFx0XHRcdC8vIGltYWdlIGxvYWQgY29tcGxldGUgaGFuZGxlclxuXHRcdFx0XHRvbkxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKGl0ZW0pIHtcblx0XHRcdFx0XHRcdGlmIChpdGVtLmltZ1swXS5jb21wbGV0ZSkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmltZy5vZmYoJy5tZnBsb2FkZXInKTtcblxuXHRcdFx0XHRcdFx0XHRpZihpdGVtID09PSBtZnAuY3Vyckl0ZW0pe1xuXHRcdFx0XHRcdFx0XHRcdG1mcC5fb25JbWFnZUhhc1NpemUoaXRlbSk7XG5cblx0XHRcdFx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0aXRlbS5sb2FkZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdJbWFnZUxvYWRDb21wbGV0ZScpO1xuXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gaWYgaW1hZ2UgY29tcGxldGUgY2hlY2sgZmFpbHMgMjAwIHRpbWVzICgyMCBzZWMpLCB3ZSBhc3N1bWUgdGhhdCB0aGVyZSB3YXMgYW4gZXJyb3IuXG5cdFx0XHRcdFx0XHRcdGd1YXJkKys7XG5cdFx0XHRcdFx0XHRcdGlmKGd1YXJkIDwgMjAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0VGltZW91dChvbkxvYWRDb21wbGV0ZSwxMDApO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdG9uTG9hZEVycm9yKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gaW1hZ2UgZXJyb3IgaGFuZGxlclxuXHRcdFx0XHRvbkxvYWRFcnJvciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKGl0ZW0pIHtcblx0XHRcdFx0XHRcdGl0ZW0uaW1nLm9mZignLm1mcGxvYWRlcicpO1xuXHRcdFx0XHRcdFx0aWYoaXRlbSA9PT0gbWZwLmN1cnJJdGVtKXtcblx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblx0XHRcdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBpbWdTdC50RXJyb3IucmVwbGFjZSgnJXVybCUnLCBpdGVtLnNyYykgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGl0ZW0ubG9hZGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGltZ1N0ID0gbWZwLnN0LmltYWdlO1xuXG5cblx0XHRcdHZhciBlbCA9IHRlbXBsYXRlLmZpbmQoJy5tZnAtaW1nJyk7XG5cdFx0XHRpZihlbC5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXHRcdFx0XHRpbWcuY2xhc3NOYW1lID0gJ21mcC1pbWcnO1xuXHRcdFx0XHRpZihpdGVtLmVsICYmIGl0ZW0uZWwuZmluZCgnaW1nJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0aW1nLmFsdCA9IGl0ZW0uZWwuZmluZCgnaW1nJykuYXR0cignYWx0Jyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aXRlbS5pbWcgPSAkKGltZykub24oJ2xvYWQubWZwbG9hZGVyJywgb25Mb2FkQ29tcGxldGUpLm9uKCdlcnJvci5tZnBsb2FkZXInLCBvbkxvYWRFcnJvcik7XG5cdFx0XHRcdGltZy5zcmMgPSBpdGVtLnNyYztcblxuXHRcdFx0XHQvLyB3aXRob3V0IGNsb25lKCkgXCJlcnJvclwiIGV2ZW50IGlzIG5vdCBmaXJpbmcgd2hlbiBJTUcgaXMgcmVwbGFjZWQgYnkgbmV3IElNR1xuXHRcdFx0XHQvLyBUT0RPOiBmaW5kIGEgd2F5IHRvIGF2b2lkIHN1Y2ggY2xvbmluZ1xuXHRcdFx0XHRpZihlbC5pcygnaW1nJykpIHtcblx0XHRcdFx0XHRpdGVtLmltZyA9IGl0ZW0uaW1nLmNsb25lKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbWcgPSBpdGVtLmltZ1swXTtcblx0XHRcdFx0aWYoaW1nLm5hdHVyYWxXaWR0aCA+IDApIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2UgaWYoIWltZy53aWR0aCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG1mcC5fcGFyc2VNYXJrdXAodGVtcGxhdGUsIHtcblx0XHRcdFx0dGl0bGU6IF9nZXRUaXRsZShpdGVtKSxcblx0XHRcdFx0aW1nX3JlcGxhY2VXaXRoOiBpdGVtLmltZ1xuXHRcdFx0fSwgaXRlbSk7XG5cblx0XHRcdG1mcC5yZXNpemVJbWFnZSgpO1xuXG5cdFx0XHRpZihpdGVtLmhhc1NpemUpIHtcblx0XHRcdFx0aWYoX2ltZ0ludGVydmFsKSBjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cblx0XHRcdFx0aWYoaXRlbS5sb2FkRXJyb3IpIHtcblx0XHRcdFx0XHR0ZW1wbGF0ZS5hZGRDbGFzcygnbWZwLWxvYWRpbmcnKTtcblx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIGltZ1N0LnRFcnJvci5yZXBsYWNlKCcldXJsJScsIGl0ZW0uc3JjKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRlbXBsYXRlLnJlbW92ZUNsYXNzKCdtZnAtbG9hZGluZycpO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdsb2FkaW5nJyk7XG5cdFx0XHRpdGVtLmxvYWRpbmcgPSB0cnVlO1xuXG5cdFx0XHRpZighaXRlbS5oYXNTaXplKSB7XG5cdFx0XHRcdGl0ZW0uaW1nSGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0dGVtcGxhdGUuYWRkQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cdFx0XHRcdG1mcC5maW5kSW1hZ2VTaXplKGl0ZW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmltYWdlKi9cblxuLyo+Pnpvb20qL1xudmFyIGhhc01velRyYW5zZm9ybSxcblx0Z2V0SGFzTW96VHJhbnNmb3JtID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoaGFzTW96VHJhbnNmb3JtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGhhc01velRyYW5zZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKS5zdHlsZS5Nb3pUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0cmV0dXJuIGhhc01velRyYW5zZm9ybTtcblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKCd6b29tJywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRlYXNpbmc6ICdlYXNlLWluLW91dCcsXG5cdFx0ZHVyYXRpb246IDMwMCxcblx0XHRvcGVuZXI6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiBlbGVtZW50LmlzKCdpbWcnKSA/IGVsZW1lbnQgOiBlbGVtZW50LmZpbmQoJ2ltZycpO1xuXHRcdH1cblx0fSxcblxuXHRwcm90bzoge1xuXG5cdFx0aW5pdFpvb206IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHpvb21TdCA9IG1mcC5zdC56b29tLFxuXHRcdFx0XHRucyA9ICcuem9vbScsXG5cdFx0XHRcdGltYWdlO1xuXG5cdFx0XHRpZighem9vbVN0LmVuYWJsZWQgfHwgIW1mcC5zdXBwb3J0c1RyYW5zaXRpb24pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZHVyYXRpb24gPSB6b29tU3QuZHVyYXRpb24sXG5cdFx0XHRcdGdldEVsVG9BbmltYXRlID0gZnVuY3Rpb24oaW1hZ2UpIHtcblx0XHRcdFx0XHR2YXIgbmV3SW1nID0gaW1hZ2UuY2xvbmUoKS5yZW1vdmVBdHRyKCdzdHlsZScpLnJlbW92ZUF0dHIoJ2NsYXNzJykuYWRkQ2xhc3MoJ21mcC1hbmltYXRlZC1pbWFnZScpLFxuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbiA9ICdhbGwgJysoem9vbVN0LmR1cmF0aW9uLzEwMDApKydzICcgKyB6b29tU3QuZWFzaW5nLFxuXHRcdFx0XHRcdFx0Y3NzT2JqID0ge1xuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogJ2ZpeGVkJyxcblx0XHRcdFx0XHRcdFx0ekluZGV4OiA5OTk5LFxuXHRcdFx0XHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHRcdCctd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHknOiAnaGlkZGVuJ1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHQgPSAndHJhbnNpdGlvbic7XG5cblx0XHRcdFx0XHRjc3NPYmpbJy13ZWJraXQtJyt0XSA9IGNzc09ialsnLW1vei0nK3RdID0gY3NzT2JqWyctby0nK3RdID0gY3NzT2JqW3RdID0gdHJhbnNpdGlvbjtcblxuXHRcdFx0XHRcdG5ld0ltZy5jc3MoY3NzT2JqKTtcblx0XHRcdFx0XHRyZXR1cm4gbmV3SW1nO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzaG93TWFpbkNvbnRlbnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZnAuY29udGVudC5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvcGVuVGltZW91dCxcblx0XHRcdFx0YW5pbWF0ZWRJbWc7XG5cblx0XHRcdF9tZnBPbignQnVpbGRDb250cm9scycrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuX2FsbG93Wm9vbSgpKSB7XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQob3BlblRpbWVvdXQpO1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblxuXHRcdFx0XHRcdC8vIEJhc2ljYWxseSwgYWxsIGNvZGUgYmVsb3cgZG9lcyBpcyBjbG9uZXMgZXhpc3RpbmcgaW1hZ2UsIHB1dHMgaW4gb24gdG9wIG9mIHRoZSBjdXJyZW50IG9uZSBhbmQgYW5pbWF0ZWQgaXRcblxuXHRcdFx0XHRcdGltYWdlID0gbWZwLl9nZXRJdGVtVG9ab29tKCk7XG5cblx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdHNob3dNYWluQ29udGVudCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGFuaW1hdGVkSW1nID0gZ2V0RWxUb0FuaW1hdGUoaW1hZ2UpO1xuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCgpICk7XG5cblx0XHRcdFx0XHRtZnAud3JhcC5hcHBlbmQoYW5pbWF0ZWRJbWcpO1xuXG5cdFx0XHRcdFx0b3BlblRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCggdHJ1ZSApICk7XG5cdFx0XHRcdFx0XHRvcGVuVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdFx0c2hvd01haW5Db250ZW50KCk7XG5cblx0XHRcdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRhbmltYXRlZEltZy5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdFx0XHRpbWFnZSA9IGFuaW1hdGVkSW1nID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0XHRfbWZwVHJpZ2dlcignWm9vbUFuaW1hdGlvbkVuZGVkJyk7XG5cdFx0XHRcdFx0XHRcdH0sIDE2KTsgLy8gYXZvaWQgYmxpbmsgd2hlbiBzd2l0Y2hpbmcgaW1hZ2VzXG5cblx0XHRcdFx0XHRcdH0sIGR1cmF0aW9uKTsgLy8gdGhpcyB0aW1lb3V0IGVxdWFscyBhbmltYXRpb24gZHVyYXRpb25cblxuXHRcdFx0XHRcdH0sIDE2KTsgLy8gYnkgYWRkaW5nIHRoaXMgdGltZW91dCB3ZSBhdm9pZCBzaG9ydCBnbGl0Y2ggYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb25cblxuXG5cdFx0XHRcdFx0Ly8gTG90cyBvZiB0aW1lb3V0cy4uLlxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdF9tZnBPbihCRUZPUkVfQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuX2FsbG93Wm9vbSgpKSB7XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQob3BlblRpbWVvdXQpO1xuXG5cdFx0XHRcdFx0bWZwLnN0LnJlbW92YWxEZWxheSA9IGR1cmF0aW9uO1xuXG5cdFx0XHRcdFx0aWYoIWltYWdlKSB7XG5cdFx0XHRcdFx0XHRpbWFnZSA9IG1mcC5fZ2V0SXRlbVRvWm9vbSgpO1xuXHRcdFx0XHRcdFx0aWYoIWltYWdlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nID0gZ2V0RWxUb0FuaW1hdGUoaW1hZ2UpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQodHJ1ZSkgKTtcblx0XHRcdFx0XHRtZnAud3JhcC5hcHBlbmQoYW5pbWF0ZWRJbWcpO1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCkgKTtcblx0XHRcdFx0XHR9LCAxNik7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblx0XHRcdFx0XHRzaG93TWFpbkNvbnRlbnQoKTtcblx0XHRcdFx0XHRpZihhbmltYXRlZEltZykge1xuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcucmVtb3ZlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGltYWdlID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdF9hbGxvd1pvb206IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIG1mcC5jdXJySXRlbS50eXBlID09PSAnaW1hZ2UnO1xuXHRcdH0sXG5cblx0XHRfZ2V0SXRlbVRvWm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihtZnAuY3Vyckl0ZW0uaGFzU2l6ZSkge1xuXHRcdFx0XHRyZXR1cm4gbWZwLmN1cnJJdGVtLmltZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gR2V0IGVsZW1lbnQgcG9zdGlvbiByZWxhdGl2ZSB0byB2aWV3cG9ydFxuXHRcdF9nZXRPZmZzZXQ6IGZ1bmN0aW9uKGlzTGFyZ2UpIHtcblx0XHRcdHZhciBlbDtcblx0XHRcdGlmKGlzTGFyZ2UpIHtcblx0XHRcdFx0ZWwgPSBtZnAuY3Vyckl0ZW0uaW1nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWwgPSBtZnAuc3Quem9vbS5vcGVuZXIobWZwLmN1cnJJdGVtLmVsIHx8IG1mcC5jdXJySXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBvZmZzZXQgPSBlbC5vZmZzZXQoKTtcblx0XHRcdHZhciBwYWRkaW5nVG9wID0gcGFyc2VJbnQoZWwuY3NzKCdwYWRkaW5nLXRvcCcpLDEwKTtcblx0XHRcdHZhciBwYWRkaW5nQm90dG9tID0gcGFyc2VJbnQoZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpLDEwKTtcblx0XHRcdG9mZnNldC50b3AgLT0gKCAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgLSBwYWRkaW5nVG9wICk7XG5cblxuXHRcdFx0LypcblxuXHRcdFx0QW5pbWF0aW5nIGxlZnQgKyB0b3AgKyB3aWR0aC9oZWlnaHQgbG9va3MgZ2xpdGNoeSBpbiBGaXJlZm94LCBidXQgcGVyZmVjdCBpbiBDaHJvbWUuIEFuZCB2aWNlLXZlcnNhLlxuXG5cdFx0XHQgKi9cblx0XHRcdHZhciBvYmogPSB7XG5cdFx0XHRcdHdpZHRoOiBlbC53aWR0aCgpLFxuXHRcdFx0XHQvLyBmaXggWmVwdG8gaGVpZ2h0K3BhZGRpbmcgaXNzdWVcblx0XHRcdFx0aGVpZ2h0OiAoX2lzSlEgPyBlbC5pbm5lckhlaWdodCgpIDogZWxbMF0ub2Zmc2V0SGVpZ2h0KSAtIHBhZGRpbmdCb3R0b20gLSBwYWRkaW5nVG9wXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBJIGhhdGUgdG8gZG8gdGhpcywgYnV0IHRoZXJlIGlzIG5vIGFub3RoZXIgb3B0aW9uXG5cdFx0XHRpZiggZ2V0SGFzTW96VHJhbnNmb3JtKCkgKSB7XG5cdFx0XHRcdG9ialsnLW1vei10cmFuc2Zvcm0nXSA9IG9ialsndHJhbnNmb3JtJ10gPSAndHJhbnNsYXRlKCcgKyBvZmZzZXQubGVmdCArICdweCwnICsgb2Zmc2V0LnRvcCArICdweCknO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b2JqLmxlZnQgPSBvZmZzZXQubGVmdDtcblx0XHRcdFx0b2JqLnRvcCA9IG9mZnNldC50b3A7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gb2JqO1xuXHRcdH1cblxuXHR9XG59KTtcblxuXG5cbi8qPj56b29tKi9cblxuLyo+PmlmcmFtZSovXG5cbnZhciBJRlJBTUVfTlMgPSAnaWZyYW1lJyxcblx0X2VtcHR5UGFnZSA9ICcvL2Fib3V0OmJsYW5rJyxcblxuXHRfZml4SWZyYW1lQnVncyA9IGZ1bmN0aW9uKGlzU2hvd2luZykge1xuXHRcdGlmKG1mcC5jdXJyVGVtcGxhdGVbSUZSQU1FX05TXSkge1xuXHRcdFx0dmFyIGVsID0gbWZwLmN1cnJUZW1wbGF0ZVtJRlJBTUVfTlNdLmZpbmQoJ2lmcmFtZScpO1xuXHRcdFx0aWYoZWwubGVuZ3RoKSB7XG5cdFx0XHRcdC8vIHJlc2V0IHNyYyBhZnRlciB0aGUgcG9wdXAgaXMgY2xvc2VkIHRvIGF2b2lkIFwidmlkZW8ga2VlcHMgcGxheWluZyBhZnRlciBwb3B1cCBpcyBjbG9zZWRcIiBidWdcblx0XHRcdFx0aWYoIWlzU2hvd2luZykge1xuXHRcdFx0XHRcdGVsWzBdLnNyYyA9IF9lbXB0eVBhZ2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJRTggYmxhY2sgc2NyZWVuIGJ1ZyBmaXhcblx0XHRcdFx0aWYobWZwLmlzSUU4KSB7XG5cdFx0XHRcdFx0ZWwuY3NzKCdkaXNwbGF5JywgaXNTaG93aW5nID8gJ2Jsb2NrJyA6ICdub25lJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShJRlJBTUVfTlMsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0bWFya3VwOiAnPGRpdiBjbGFzcz1cIm1mcC1pZnJhbWUtc2NhbGVyXCI+Jytcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jbG9zZVwiPjwvZGl2PicrXG5cdFx0XHRcdFx0JzxpZnJhbWUgY2xhc3M9XCJtZnAtaWZyYW1lXCIgc3JjPVwiLy9hYm91dDpibGFua1wiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nK1xuXHRcdFx0XHQnPC9kaXY+JyxcblxuXHRcdHNyY0FjdGlvbjogJ2lmcmFtZV9zcmMnLFxuXG5cdFx0Ly8gd2UgZG9uJ3QgY2FyZSBhbmQgc3VwcG9ydCBvbmx5IG9uZSBkZWZhdWx0IHR5cGUgb2YgVVJMIGJ5IGRlZmF1bHRcblx0XHRwYXR0ZXJuczoge1xuXHRcdFx0eW91dHViZToge1xuXHRcdFx0XHRpbmRleDogJ3lvdXR1YmUuY29tJyxcblx0XHRcdFx0aWQ6ICd2PScsXG5cdFx0XHRcdHNyYzogJy8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyVpZCU/YXV0b3BsYXk9MSdcblx0XHRcdH0sXG5cdFx0XHR2aW1lbzoge1xuXHRcdFx0XHRpbmRleDogJ3ZpbWVvLmNvbS8nLFxuXHRcdFx0XHRpZDogJy8nLFxuXHRcdFx0XHRzcmM6ICcvL3BsYXllci52aW1lby5jb20vdmlkZW8vJWlkJT9hdXRvcGxheT0xJ1xuXHRcdFx0fSxcblx0XHRcdGdtYXBzOiB7XG5cdFx0XHRcdGluZGV4OiAnLy9tYXBzLmdvb2dsZS4nLFxuXHRcdFx0XHRzcmM6ICclaWQlJm91dHB1dD1lbWJlZCdcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvdG86IHtcblx0XHRpbml0SWZyYW1lOiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKElGUkFNRV9OUyk7XG5cblx0XHRcdF9tZnBPbignQmVmb3JlQ2hhbmdlJywgZnVuY3Rpb24oZSwgcHJldlR5cGUsIG5ld1R5cGUpIHtcblx0XHRcdFx0aWYocHJldlR5cGUgIT09IG5ld1R5cGUpIHtcblx0XHRcdFx0XHRpZihwcmV2VHlwZSA9PT0gSUZSQU1FX05TKSB7XG5cdFx0XHRcdFx0XHRfZml4SWZyYW1lQnVncygpOyAvLyBpZnJhbWUgaWYgcmVtb3ZlZFxuXHRcdFx0XHRcdH0gZWxzZSBpZihuZXdUeXBlID09PSBJRlJBTUVfTlMpIHtcblx0XHRcdFx0XHRcdF9maXhJZnJhbWVCdWdzKHRydWUpOyAvLyBpZnJhbWUgaXMgc2hvd2luZ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fS8vIGVsc2Uge1xuXHRcdFx0XHRcdC8vIGlmcmFtZSBzb3VyY2UgaXMgc3dpdGNoZWQsIGRvbid0IGRvIGFueXRoaW5nXG5cdFx0XHRcdC8vfVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCArICcuJyArIElGUkFNRV9OUywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9maXhJZnJhbWVCdWdzKCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Z2V0SWZyYW1lOiBmdW5jdGlvbihpdGVtLCB0ZW1wbGF0ZSkge1xuXHRcdFx0dmFyIGVtYmVkU3JjID0gaXRlbS5zcmM7XG5cdFx0XHR2YXIgaWZyYW1lU3QgPSBtZnAuc3QuaWZyYW1lO1xuXG5cdFx0XHQkLmVhY2goaWZyYW1lU3QucGF0dGVybnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihlbWJlZFNyYy5pbmRleE9mKCB0aGlzLmluZGV4ICkgPiAtMSkge1xuXHRcdFx0XHRcdGlmKHRoaXMuaWQpIHtcblx0XHRcdFx0XHRcdGlmKHR5cGVvZiB0aGlzLmlkID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0XHRlbWJlZFNyYyA9IGVtYmVkU3JjLnN1YnN0cihlbWJlZFNyYy5sYXN0SW5kZXhPZih0aGlzLmlkKSt0aGlzLmlkLmxlbmd0aCwgZW1iZWRTcmMubGVuZ3RoKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVtYmVkU3JjID0gdGhpcy5pZC5jYWxsKCB0aGlzLCBlbWJlZFNyYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbWJlZFNyYyA9IHRoaXMuc3JjLnJlcGxhY2UoJyVpZCUnLCBlbWJlZFNyYyApO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTsgLy8gYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR2YXIgZGF0YU9iaiA9IHt9O1xuXHRcdFx0aWYoaWZyYW1lU3Quc3JjQWN0aW9uKSB7XG5cdFx0XHRcdGRhdGFPYmpbaWZyYW1lU3Quc3JjQWN0aW9uXSA9IGVtYmVkU3JjO1xuXHRcdFx0fVxuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwgZGF0YU9iaiwgaXRlbSk7XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cblx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG5cblxuLyo+PmlmcmFtZSovXG5cbi8qPj5nYWxsZXJ5Ki9cbi8qKlxuICogR2V0IGxvb3BlZCBpbmRleCBkZXBlbmRpbmcgb24gbnVtYmVyIG9mIHNsaWRlc1xuICovXG52YXIgX2dldExvb3BlZElkID0gZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgbnVtU2xpZGVzID0gbWZwLml0ZW1zLmxlbmd0aDtcblx0XHRpZihpbmRleCA+IG51bVNsaWRlcyAtIDEpIHtcblx0XHRcdHJldHVybiBpbmRleCAtIG51bVNsaWRlcztcblx0XHR9IGVsc2UgIGlmKGluZGV4IDwgMCkge1xuXHRcdFx0cmV0dXJuIG51bVNsaWRlcyArIGluZGV4O1xuXHRcdH1cblx0XHRyZXR1cm4gaW5kZXg7XG5cdH0sXG5cdF9yZXBsYWNlQ3VyclRvdGFsID0gZnVuY3Rpb24odGV4dCwgY3VyciwgdG90YWwpIHtcblx0XHRyZXR1cm4gdGV4dC5yZXBsYWNlKC8lY3VyciUvZ2ksIGN1cnIgKyAxKS5yZXBsYWNlKC8ldG90YWwlL2dpLCB0b3RhbCk7XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZSgnZ2FsbGVyeScsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0ZW5hYmxlZDogZmFsc2UsXG5cdFx0YXJyb3dNYXJrdXA6ICc8YnV0dG9uIHRpdGxlPVwiJXRpdGxlJVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIm1mcC1hcnJvdyBtZnAtYXJyb3ctJWRpciVcIj48L2J1dHRvbj4nLFxuXHRcdHByZWxvYWQ6IFswLDJdLFxuXHRcdG5hdmlnYXRlQnlJbWdDbGljazogdHJ1ZSxcblx0XHRhcnJvd3M6IHRydWUsXG5cblx0XHR0UHJldjogJ1ByZXZpb3VzIChMZWZ0IGFycm93IGtleSknLFxuXHRcdHROZXh0OiAnTmV4dCAoUmlnaHQgYXJyb3cga2V5KScsXG5cdFx0dENvdW50ZXI6ICclY3VyciUgb2YgJXRvdGFsJSdcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRHYWxsZXJ5OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIGdTdCA9IG1mcC5zdC5nYWxsZXJ5LFxuXHRcdFx0XHRucyA9ICcubWZwLWdhbGxlcnknO1xuXG5cdFx0XHRtZnAuZGlyZWN0aW9uID0gdHJ1ZTsgLy8gdHJ1ZSAtIG5leHQsIGZhbHNlIC0gcHJldlxuXG5cdFx0XHRpZighZ1N0IHx8ICFnU3QuZW5hYmxlZCApIHJldHVybiBmYWxzZTtcblxuXHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWdhbGxlcnknO1xuXG5cdFx0XHRfbWZwT24oT1BFTl9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0aWYoZ1N0Lm5hdmlnYXRlQnlJbWdDbGljaykge1xuXHRcdFx0XHRcdG1mcC53cmFwLm9uKCdjbGljaycrbnMsICcubWZwLWltZycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYobWZwLml0ZW1zLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2RvY3VtZW50Lm9uKCdrZXlkb3duJytucywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdGlmIChlLmtleUNvZGUgPT09IDM3KSB7XG5cdFx0XHRcdFx0XHRtZnAucHJldigpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAzOSkge1xuXHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbignVXBkYXRlU3RhdHVzJytucywgZnVuY3Rpb24oZSwgZGF0YSkge1xuXHRcdFx0XHRpZihkYXRhLnRleHQpIHtcblx0XHRcdFx0XHRkYXRhLnRleHQgPSBfcmVwbGFjZUN1cnJUb3RhbChkYXRhLnRleHQsIG1mcC5jdXJySXRlbS5pbmRleCwgbWZwLml0ZW1zLmxlbmd0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oTUFSS1VQX1BBUlNFX0VWRU5UK25zLCBmdW5jdGlvbihlLCBlbGVtZW50LCB2YWx1ZXMsIGl0ZW0pIHtcblx0XHRcdFx0dmFyIGwgPSBtZnAuaXRlbXMubGVuZ3RoO1xuXHRcdFx0XHR2YWx1ZXMuY291bnRlciA9IGwgPiAxID8gX3JlcGxhY2VDdXJyVG90YWwoZ1N0LnRDb3VudGVyLCBpdGVtLmluZGV4LCBsKSA6ICcnO1xuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbignQnVpbGRDb250cm9scycgKyBucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5pdGVtcy5sZW5ndGggPiAxICYmIGdTdC5hcnJvd3MgJiYgIW1mcC5hcnJvd0xlZnQpIHtcblx0XHRcdFx0XHR2YXIgbWFya3VwID0gZ1N0LmFycm93TWFya3VwLFxuXHRcdFx0XHRcdFx0YXJyb3dMZWZ0ID0gbWZwLmFycm93TGVmdCA9ICQoIG1hcmt1cC5yZXBsYWNlKC8ldGl0bGUlL2dpLCBnU3QudFByZXYpLnJlcGxhY2UoLyVkaXIlL2dpLCAnbGVmdCcpICkuYWRkQ2xhc3MoUFJFVkVOVF9DTE9TRV9DTEFTUyksXG5cdFx0XHRcdFx0XHRhcnJvd1JpZ2h0ID0gbWZwLmFycm93UmlnaHQgPSAkKCBtYXJrdXAucmVwbGFjZSgvJXRpdGxlJS9naSwgZ1N0LnROZXh0KS5yZXBsYWNlKC8lZGlyJS9naSwgJ3JpZ2h0JykgKS5hZGRDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKTtcblxuXHRcdFx0XHRcdGFycm93TGVmdC5jbGljayhmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdG1mcC5wcmV2KCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YXJyb3dSaWdodC5jbGljayhmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdG1mcC5uZXh0KCk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRtZnAuY29udGFpbmVyLmFwcGVuZChhcnJvd0xlZnQuYWRkKGFycm93UmlnaHQpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDSEFOR0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuX3ByZWxvYWRUaW1lb3V0KSBjbGVhclRpbWVvdXQobWZwLl9wcmVsb2FkVGltZW91dCk7XG5cblx0XHRcdFx0bWZwLl9wcmVsb2FkVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bWZwLnByZWxvYWROZWFyYnlJbWFnZXMoKTtcblx0XHRcdFx0XHRtZnAuX3ByZWxvYWRUaW1lb3V0ID0gbnVsbDtcblx0XHRcdFx0fSwgMTYpO1xuXHRcdFx0fSk7XG5cblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2RvY3VtZW50Lm9mZihucyk7XG5cdFx0XHRcdG1mcC53cmFwLm9mZignY2xpY2snK25zKTtcblx0XHRcdFx0bWZwLmFycm93UmlnaHQgPSBtZnAuYXJyb3dMZWZ0ID0gbnVsbDtcblx0XHRcdH0pO1xuXG5cdFx0fSxcblx0XHRuZXh0OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC5kaXJlY3Rpb24gPSB0cnVlO1xuXHRcdFx0bWZwLmluZGV4ID0gX2dldExvb3BlZElkKG1mcC5pbmRleCArIDEpO1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRwcmV2OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC5kaXJlY3Rpb24gPSBmYWxzZTtcblx0XHRcdG1mcC5pbmRleCA9IF9nZXRMb29wZWRJZChtZnAuaW5kZXggLSAxKTtcblx0XHRcdG1mcC51cGRhdGVJdGVtSFRNTCgpO1xuXHRcdH0sXG5cdFx0Z29UbzogZnVuY3Rpb24obmV3SW5kZXgpIHtcblx0XHRcdG1mcC5kaXJlY3Rpb24gPSAobmV3SW5kZXggPj0gbWZwLmluZGV4KTtcblx0XHRcdG1mcC5pbmRleCA9IG5ld0luZGV4O1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRwcmVsb2FkTmVhcmJ5SW1hZ2VzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwID0gbWZwLnN0LmdhbGxlcnkucHJlbG9hZCxcblx0XHRcdFx0cHJlbG9hZEJlZm9yZSA9IE1hdGgubWluKHBbMF0sIG1mcC5pdGVtcy5sZW5ndGgpLFxuXHRcdFx0XHRwcmVsb2FkQWZ0ZXIgPSBNYXRoLm1pbihwWzFdLCBtZnAuaXRlbXMubGVuZ3RoKSxcblx0XHRcdFx0aTtcblxuXHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChtZnAuZGlyZWN0aW9uID8gcHJlbG9hZEFmdGVyIDogcHJlbG9hZEJlZm9yZSk7IGkrKykge1xuXHRcdFx0XHRtZnAuX3ByZWxvYWRJdGVtKG1mcC5pbmRleCtpKTtcblx0XHRcdH1cblx0XHRcdGZvcihpID0gMTsgaSA8PSAobWZwLmRpcmVjdGlvbiA/IHByZWxvYWRCZWZvcmUgOiBwcmVsb2FkQWZ0ZXIpOyBpKyspIHtcblx0XHRcdFx0bWZwLl9wcmVsb2FkSXRlbShtZnAuaW5kZXgtaSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfcHJlbG9hZEl0ZW06IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0XHRpbmRleCA9IF9nZXRMb29wZWRJZChpbmRleCk7XG5cblx0XHRcdGlmKG1mcC5pdGVtc1tpbmRleF0ucHJlbG9hZGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbaW5kZXhdO1xuXHRcdFx0aWYoIWl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRcdGl0ZW0gPSBtZnAucGFyc2VFbCggaW5kZXggKTtcblx0XHRcdH1cblxuXHRcdFx0X21mcFRyaWdnZXIoJ0xhenlMb2FkJywgaXRlbSk7XG5cblx0XHRcdGlmKGl0ZW0udHlwZSA9PT0gJ2ltYWdlJykge1xuXHRcdFx0XHRpdGVtLmltZyA9ICQoJzxpbWcgY2xhc3M9XCJtZnAtaW1nXCIgLz4nKS5vbignbG9hZC5tZnBsb2FkZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHR9KS5vbignZXJyb3IubWZwbG9hZGVyJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0XHRpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0X21mcFRyaWdnZXIoJ0xhenlMb2FkRXJyb3InLCBpdGVtKTtcblx0XHRcdFx0fSkuYXR0cignc3JjJywgaXRlbS5zcmMpO1xuXHRcdFx0fVxuXG5cblx0XHRcdGl0ZW0ucHJlbG9hZGVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+Z2FsbGVyeSovXG5cbi8qPj5yZXRpbmEqL1xuXG52YXIgUkVUSU5BX05TID0gJ3JldGluYSc7XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShSRVRJTkFfTlMsIHtcblx0b3B0aW9uczoge1xuXHRcdHJlcGxhY2VTcmM6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdHJldHVybiBpdGVtLnNyYy5yZXBsYWNlKC9cXC5cXHcrJC8sIGZ1bmN0aW9uKG0pIHsgcmV0dXJuICdAMngnICsgbTsgfSk7XG5cdFx0fSxcblx0XHRyYXRpbzogMSAvLyBGdW5jdGlvbiBvciBudW1iZXIuICBTZXQgdG8gMSB0byBkaXNhYmxlLlxuXHR9LFxuXHRwcm90bzoge1xuXHRcdGluaXRSZXRpbmE6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYod2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxKSB7XG5cblx0XHRcdFx0dmFyIHN0ID0gbWZwLnN0LnJldGluYSxcblx0XHRcdFx0XHRyYXRpbyA9IHN0LnJhdGlvO1xuXG5cdFx0XHRcdHJhdGlvID0gIWlzTmFOKHJhdGlvKSA/IHJhdGlvIDogcmF0aW8oKTtcblxuXHRcdFx0XHRpZihyYXRpbyA+IDEpIHtcblx0XHRcdFx0XHRfbWZwT24oJ0ltYWdlSGFzU2l6ZScgKyAnLicgKyBSRVRJTkFfTlMsIGZ1bmN0aW9uKGUsIGl0ZW0pIHtcblx0XHRcdFx0XHRcdGl0ZW0uaW1nLmNzcyh7XG5cdFx0XHRcdFx0XHRcdCdtYXgtd2lkdGgnOiBpdGVtLmltZ1swXS5uYXR1cmFsV2lkdGggLyByYXRpbyxcblx0XHRcdFx0XHRcdFx0J3dpZHRoJzogJzEwMCUnXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRfbWZwT24oJ0VsZW1lbnRQYXJzZScgKyAnLicgKyBSRVRJTkFfTlMsIGZ1bmN0aW9uKGUsIGl0ZW0pIHtcblx0XHRcdFx0XHRcdGl0ZW0uc3JjID0gc3QucmVwbGFjZVNyYyhpdGVtLCByYXRpbyk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5yZXRpbmEqL1xuIF9jaGVja0luc3RhbmNlKCk7IH0pKTsiLCIvKiFcbldheXBvaW50cyAtIDQuMC4xXG5Db3B5cmlnaHQgwqkgMjAxMS0yMDE2IENhbGViIFRyb3VnaHRvblxuTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaHR0cHM6Ly9naXRodWIuY29tL2ltYWtld2VidGhpbmdzL3dheXBvaW50cy9ibG9iL21hc3Rlci9saWNlbnNlcy50eHRcbiovXG4oZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIHZhciBrZXlDb3VudGVyID0gMFxuICB2YXIgYWxsV2F5cG9pbnRzID0ge31cblxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvd2F5cG9pbnQgKi9cbiAgZnVuY3Rpb24gV2F5cG9pbnQob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBvcHRpb25zIHBhc3NlZCB0byBXYXlwb2ludCBjb25zdHJ1Y3RvcicpXG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5lbGVtZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGVsZW1lbnQgb3B0aW9uIHBhc3NlZCB0byBXYXlwb2ludCBjb25zdHJ1Y3RvcicpXG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5oYW5kbGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGhhbmRsZXIgb3B0aW9uIHBhc3NlZCB0byBXYXlwb2ludCBjb25zdHJ1Y3RvcicpXG4gICAgfVxuXG4gICAgdGhpcy5rZXkgPSAnd2F5cG9pbnQtJyArIGtleUNvdW50ZXJcbiAgICB0aGlzLm9wdGlvbnMgPSBXYXlwb2ludC5BZGFwdGVyLmV4dGVuZCh7fSwgV2F5cG9pbnQuZGVmYXVsdHMsIG9wdGlvbnMpXG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy5vcHRpb25zLmVsZW1lbnRcbiAgICB0aGlzLmFkYXB0ZXIgPSBuZXcgV2F5cG9pbnQuQWRhcHRlcih0aGlzLmVsZW1lbnQpXG4gICAgdGhpcy5jYWxsYmFjayA9IG9wdGlvbnMuaGFuZGxlclxuICAgIHRoaXMuYXhpcyA9IHRoaXMub3B0aW9ucy5ob3Jpem9udGFsID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJ1xuICAgIHRoaXMuZW5hYmxlZCA9IHRoaXMub3B0aW9ucy5lbmFibGVkXG4gICAgdGhpcy50cmlnZ2VyUG9pbnQgPSBudWxsXG4gICAgdGhpcy5ncm91cCA9IFdheXBvaW50Lkdyb3VwLmZpbmRPckNyZWF0ZSh7XG4gICAgICBuYW1lOiB0aGlzLm9wdGlvbnMuZ3JvdXAsXG4gICAgICBheGlzOiB0aGlzLmF4aXNcbiAgICB9KVxuICAgIHRoaXMuY29udGV4dCA9IFdheXBvaW50LkNvbnRleHQuZmluZE9yQ3JlYXRlQnlFbGVtZW50KHRoaXMub3B0aW9ucy5jb250ZXh0KVxuXG4gICAgaWYgKFdheXBvaW50Lm9mZnNldEFsaWFzZXNbdGhpcy5vcHRpb25zLm9mZnNldF0pIHtcbiAgICAgIHRoaXMub3B0aW9ucy5vZmZzZXQgPSBXYXlwb2ludC5vZmZzZXRBbGlhc2VzW3RoaXMub3B0aW9ucy5vZmZzZXRdXG4gICAgfVxuICAgIHRoaXMuZ3JvdXAuYWRkKHRoaXMpXG4gICAgdGhpcy5jb250ZXh0LmFkZCh0aGlzKVxuICAgIGFsbFdheXBvaW50c1t0aGlzLmtleV0gPSB0aGlzXG4gICAga2V5Q291bnRlciArPSAxXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIFdheXBvaW50LnByb3RvdHlwZS5xdWV1ZVRyaWdnZXIgPSBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICB0aGlzLmdyb3VwLnF1ZXVlVHJpZ2dlcih0aGlzLCBkaXJlY3Rpb24pXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIFdheXBvaW50LnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24oYXJncykge1xuICAgIGlmICghdGhpcy5lbmFibGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHRoaXMuY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuY2FsbGJhY2suYXBwbHkodGhpcywgYXJncylcbiAgICB9XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2Rlc3Ryb3kgKi9cbiAgV2F5cG9pbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbnRleHQucmVtb3ZlKHRoaXMpXG4gICAgdGhpcy5ncm91cC5yZW1vdmUodGhpcylcbiAgICBkZWxldGUgYWxsV2F5cG9pbnRzW3RoaXMua2V5XVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9kaXNhYmxlICovXG4gIFdheXBvaW50LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2VcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9lbmFibGUgKi9cbiAgV2F5cG9pbnQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY29udGV4dC5yZWZyZXNoKClcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvbmV4dCAqL1xuICBXYXlwb2ludC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdyb3VwLm5leHQodGhpcylcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvcHJldmlvdXMgKi9cbiAgV2F5cG9pbnQucHJvdG90eXBlLnByZXZpb3VzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ3JvdXAucHJldmlvdXModGhpcylcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgV2F5cG9pbnQuaW52b2tlQWxsID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgdmFyIGFsbFdheXBvaW50c0FycmF5ID0gW11cbiAgICBmb3IgKHZhciB3YXlwb2ludEtleSBpbiBhbGxXYXlwb2ludHMpIHtcbiAgICAgIGFsbFdheXBvaW50c0FycmF5LnB1c2goYWxsV2F5cG9pbnRzW3dheXBvaW50S2V5XSlcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IGFsbFdheXBvaW50c0FycmF5Lmxlbmd0aDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICBhbGxXYXlwb2ludHNBcnJheVtpXVttZXRob2RdKClcbiAgICB9XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2Rlc3Ryb3ktYWxsICovXG4gIFdheXBvaW50LmRlc3Ryb3lBbGwgPSBmdW5jdGlvbigpIHtcbiAgICBXYXlwb2ludC5pbnZva2VBbGwoJ2Rlc3Ryb3knKVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9kaXNhYmxlLWFsbCAqL1xuICBXYXlwb2ludC5kaXNhYmxlQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgV2F5cG9pbnQuaW52b2tlQWxsKCdkaXNhYmxlJylcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZW5hYmxlLWFsbCAqL1xuICBXYXlwb2ludC5lbmFibGVBbGwgPSBmdW5jdGlvbigpIHtcbiAgICBXYXlwb2ludC5Db250ZXh0LnJlZnJlc2hBbGwoKVxuICAgIGZvciAodmFyIHdheXBvaW50S2V5IGluIGFsbFdheXBvaW50cykge1xuICAgICAgYWxsV2F5cG9pbnRzW3dheXBvaW50S2V5XS5lbmFibGVkID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9yZWZyZXNoLWFsbCAqL1xuICBXYXlwb2ludC5yZWZyZXNoQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgV2F5cG9pbnQuQ29udGV4dC5yZWZyZXNoQWxsKClcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvdmlld3BvcnQtaGVpZ2h0ICovXG4gIFdheXBvaW50LnZpZXdwb3J0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL3ZpZXdwb3J0LXdpZHRoICovXG4gIFdheXBvaW50LnZpZXdwb3J0V2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoXG4gIH1cblxuICBXYXlwb2ludC5hZGFwdGVycyA9IFtdXG5cbiAgV2F5cG9pbnQuZGVmYXVsdHMgPSB7XG4gICAgY29udGV4dDogd2luZG93LFxuICAgIGNvbnRpbnVvdXM6IHRydWUsXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBncm91cDogJ2RlZmF1bHQnLFxuICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgIG9mZnNldDogMFxuICB9XG5cbiAgV2F5cG9pbnQub2Zmc2V0QWxpYXNlcyA9IHtcbiAgICAnYm90dG9tLWluLXZpZXcnOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHQuaW5uZXJIZWlnaHQoKSAtIHRoaXMuYWRhcHRlci5vdXRlckhlaWdodCgpXG4gICAgfSxcbiAgICAncmlnaHQtaW4tdmlldyc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5pbm5lcldpZHRoKCkgLSB0aGlzLmFkYXB0ZXIub3V0ZXJXaWR0aCgpXG4gICAgfVxuICB9XG5cbiAgd2luZG93LldheXBvaW50ID0gV2F5cG9pbnRcbn0oKSlcbjsoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIGZ1bmN0aW9uIHJlcXVlc3RBbmltYXRpb25GcmFtZVNoaW0oY2FsbGJhY2spIHtcbiAgICB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKVxuICB9XG5cbiAgdmFyIGtleUNvdW50ZXIgPSAwXG4gIHZhciBjb250ZXh0cyA9IHt9XG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxuICB2YXIgb2xkV2luZG93TG9hZCA9IHdpbmRvdy5vbmxvYWRcblxuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvY29udGV4dCAqL1xuICBmdW5jdGlvbiBDb250ZXh0KGVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50XG4gICAgdGhpcy5BZGFwdGVyID0gV2F5cG9pbnQuQWRhcHRlclxuICAgIHRoaXMuYWRhcHRlciA9IG5ldyB0aGlzLkFkYXB0ZXIoZWxlbWVudClcbiAgICB0aGlzLmtleSA9ICd3YXlwb2ludC1jb250ZXh0LScgKyBrZXlDb3VudGVyXG4gICAgdGhpcy5kaWRTY3JvbGwgPSBmYWxzZVxuICAgIHRoaXMuZGlkUmVzaXplID0gZmFsc2VcbiAgICB0aGlzLm9sZFNjcm9sbCA9IHtcbiAgICAgIHg6IHRoaXMuYWRhcHRlci5zY3JvbGxMZWZ0KCksXG4gICAgICB5OiB0aGlzLmFkYXB0ZXIuc2Nyb2xsVG9wKClcbiAgICB9XG4gICAgdGhpcy53YXlwb2ludHMgPSB7XG4gICAgICB2ZXJ0aWNhbDoge30sXG4gICAgICBob3Jpem9udGFsOiB7fVxuICAgIH1cblxuICAgIGVsZW1lbnQud2F5cG9pbnRDb250ZXh0S2V5ID0gdGhpcy5rZXlcbiAgICBjb250ZXh0c1tlbGVtZW50LndheXBvaW50Q29udGV4dEtleV0gPSB0aGlzXG4gICAga2V5Q291bnRlciArPSAxXG4gICAgaWYgKCFXYXlwb2ludC53aW5kb3dDb250ZXh0KSB7XG4gICAgICBXYXlwb2ludC53aW5kb3dDb250ZXh0ID0gdHJ1ZVxuICAgICAgV2F5cG9pbnQud2luZG93Q29udGV4dCA9IG5ldyBDb250ZXh0KHdpbmRvdylcbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZVRocm90dGxlZFNjcm9sbEhhbmRsZXIoKVxuICAgIHRoaXMuY3JlYXRlVGhyb3R0bGVkUmVzaXplSGFuZGxlcigpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XG4gICAgdmFyIGF4aXMgPSB3YXlwb2ludC5vcHRpb25zLmhvcml6b250YWwgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnXG4gICAgdGhpcy53YXlwb2ludHNbYXhpc11bd2F5cG9pbnQua2V5XSA9IHdheXBvaW50XG4gICAgdGhpcy5yZWZyZXNoKClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuY2hlY2tFbXB0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBob3Jpem9udGFsRW1wdHkgPSB0aGlzLkFkYXB0ZXIuaXNFbXB0eU9iamVjdCh0aGlzLndheXBvaW50cy5ob3Jpem9udGFsKVxuICAgIHZhciB2ZXJ0aWNhbEVtcHR5ID0gdGhpcy5BZGFwdGVyLmlzRW1wdHlPYmplY3QodGhpcy53YXlwb2ludHMudmVydGljYWwpXG4gICAgdmFyIGlzV2luZG93ID0gdGhpcy5lbGVtZW50ID09IHRoaXMuZWxlbWVudC53aW5kb3dcbiAgICBpZiAoaG9yaXpvbnRhbEVtcHR5ICYmIHZlcnRpY2FsRW1wdHkgJiYgIWlzV2luZG93KSB7XG4gICAgICB0aGlzLmFkYXB0ZXIub2ZmKCcud2F5cG9pbnRzJylcbiAgICAgIGRlbGV0ZSBjb250ZXh0c1t0aGlzLmtleV1cbiAgICB9XG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucHJvdG90eXBlLmNyZWF0ZVRocm90dGxlZFJlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcblxuICAgIGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLmhhbmRsZVJlc2l6ZSgpXG4gICAgICBzZWxmLmRpZFJlc2l6ZSA9IGZhbHNlXG4gICAgfVxuXG4gICAgdGhpcy5hZGFwdGVyLm9uKCdyZXNpemUud2F5cG9pbnRzJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXNlbGYuZGlkUmVzaXplKSB7XG4gICAgICAgIHNlbGYuZGlkUmVzaXplID0gdHJ1ZVxuICAgICAgICBXYXlwb2ludC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzaXplSGFuZGxlcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5jcmVhdGVUaHJvdHRsZWRTY3JvbGxIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgZnVuY3Rpb24gc2Nyb2xsSGFuZGxlcigpIHtcbiAgICAgIHNlbGYuaGFuZGxlU2Nyb2xsKClcbiAgICAgIHNlbGYuZGlkU2Nyb2xsID0gZmFsc2VcbiAgICB9XG5cbiAgICB0aGlzLmFkYXB0ZXIub24oJ3Njcm9sbC53YXlwb2ludHMnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghc2VsZi5kaWRTY3JvbGwgfHwgV2F5cG9pbnQuaXNUb3VjaCkge1xuICAgICAgICBzZWxmLmRpZFNjcm9sbCA9IHRydWVcbiAgICAgICAgV2F5cG9pbnQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNjcm9sbEhhbmRsZXIpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaGFuZGxlUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gICAgV2F5cG9pbnQuQ29udGV4dC5yZWZyZXNoQWxsKClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaGFuZGxlU2Nyb2xsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRyaWdnZXJlZEdyb3VwcyA9IHt9XG4gICAgdmFyIGF4ZXMgPSB7XG4gICAgICBob3Jpem9udGFsOiB7XG4gICAgICAgIG5ld1Njcm9sbDogdGhpcy5hZGFwdGVyLnNjcm9sbExlZnQoKSxcbiAgICAgICAgb2xkU2Nyb2xsOiB0aGlzLm9sZFNjcm9sbC54LFxuICAgICAgICBmb3J3YXJkOiAncmlnaHQnLFxuICAgICAgICBiYWNrd2FyZDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgdmVydGljYWw6IHtcbiAgICAgICAgbmV3U2Nyb2xsOiB0aGlzLmFkYXB0ZXIuc2Nyb2xsVG9wKCksXG4gICAgICAgIG9sZFNjcm9sbDogdGhpcy5vbGRTY3JvbGwueSxcbiAgICAgICAgZm9yd2FyZDogJ2Rvd24nLFxuICAgICAgICBiYWNrd2FyZDogJ3VwJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGF4aXNLZXkgaW4gYXhlcykge1xuICAgICAgdmFyIGF4aXMgPSBheGVzW2F4aXNLZXldXG4gICAgICB2YXIgaXNGb3J3YXJkID0gYXhpcy5uZXdTY3JvbGwgPiBheGlzLm9sZFNjcm9sbFxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzRm9yd2FyZCA/IGF4aXMuZm9yd2FyZCA6IGF4aXMuYmFja3dhcmRcblxuICAgICAgZm9yICh2YXIgd2F5cG9pbnRLZXkgaW4gdGhpcy53YXlwb2ludHNbYXhpc0tleV0pIHtcbiAgICAgICAgdmFyIHdheXBvaW50ID0gdGhpcy53YXlwb2ludHNbYXhpc0tleV1bd2F5cG9pbnRLZXldXG4gICAgICAgIGlmICh3YXlwb2ludC50cmlnZ2VyUG9pbnQgPT09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIHZhciB3YXNCZWZvcmVUcmlnZ2VyUG9pbnQgPSBheGlzLm9sZFNjcm9sbCA8IHdheXBvaW50LnRyaWdnZXJQb2ludFxuICAgICAgICB2YXIgbm93QWZ0ZXJUcmlnZ2VyUG9pbnQgPSBheGlzLm5ld1Njcm9sbCA+PSB3YXlwb2ludC50cmlnZ2VyUG9pbnRcbiAgICAgICAgdmFyIGNyb3NzZWRGb3J3YXJkID0gd2FzQmVmb3JlVHJpZ2dlclBvaW50ICYmIG5vd0FmdGVyVHJpZ2dlclBvaW50XG4gICAgICAgIHZhciBjcm9zc2VkQmFja3dhcmQgPSAhd2FzQmVmb3JlVHJpZ2dlclBvaW50ICYmICFub3dBZnRlclRyaWdnZXJQb2ludFxuICAgICAgICBpZiAoY3Jvc3NlZEZvcndhcmQgfHwgY3Jvc3NlZEJhY2t3YXJkKSB7XG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGRpcmVjdGlvbilcbiAgICAgICAgICB0cmlnZ2VyZWRHcm91cHNbd2F5cG9pbnQuZ3JvdXAuaWRdID0gd2F5cG9pbnQuZ3JvdXBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGdyb3VwS2V5IGluIHRyaWdnZXJlZEdyb3Vwcykge1xuICAgICAgdHJpZ2dlcmVkR3JvdXBzW2dyb3VwS2V5XS5mbHVzaFRyaWdnZXJzKClcbiAgICB9XG5cbiAgICB0aGlzLm9sZFNjcm9sbCA9IHtcbiAgICAgIHg6IGF4ZXMuaG9yaXpvbnRhbC5uZXdTY3JvbGwsXG4gICAgICB5OiBheGVzLnZlcnRpY2FsLm5ld1Njcm9sbFxuICAgIH1cbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaW5uZXJIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuICAgIGlmICh0aGlzLmVsZW1lbnQgPT0gdGhpcy5lbGVtZW50LndpbmRvdykge1xuICAgICAgcmV0dXJuIFdheXBvaW50LnZpZXdwb3J0SGVpZ2h0KClcbiAgICB9XG4gICAgLyplc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuaW5uZXJIZWlnaHQoKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbih3YXlwb2ludCkge1xuICAgIGRlbGV0ZSB0aGlzLndheXBvaW50c1t3YXlwb2ludC5heGlzXVt3YXlwb2ludC5rZXldXG4gICAgdGhpcy5jaGVja0VtcHR5KClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuaW5uZXJXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIC8qZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG4gICAgaWYgKHRoaXMuZWxlbWVudCA9PSB0aGlzLmVsZW1lbnQud2luZG93KSB7XG4gICAgICByZXR1cm4gV2F5cG9pbnQudmlld3BvcnRXaWR0aCgpXG4gICAgfVxuICAgIC8qZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmlubmVyV2lkdGgoKVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9jb250ZXh0LWRlc3Ryb3kgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbGxXYXlwb2ludHMgPSBbXVxuICAgIGZvciAodmFyIGF4aXMgaW4gdGhpcy53YXlwb2ludHMpIHtcbiAgICAgIGZvciAodmFyIHdheXBvaW50S2V5IGluIHRoaXMud2F5cG9pbnRzW2F4aXNdKSB7XG4gICAgICAgIGFsbFdheXBvaW50cy5wdXNoKHRoaXMud2F5cG9pbnRzW2F4aXNdW3dheXBvaW50S2V5XSlcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IGFsbFdheXBvaW50cy5sZW5ndGg7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgYWxsV2F5cG9pbnRzW2ldLmRlc3Ryb3koKVxuICAgIH1cbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvY29udGV4dC1yZWZyZXNoICovXG4gIENvbnRleHQucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuICAgIHZhciBpc1dpbmRvdyA9IHRoaXMuZWxlbWVudCA9PSB0aGlzLmVsZW1lbnQud2luZG93XG4gICAgLyplc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuICAgIHZhciBjb250ZXh0T2Zmc2V0ID0gaXNXaW5kb3cgPyB1bmRlZmluZWQgOiB0aGlzLmFkYXB0ZXIub2Zmc2V0KClcbiAgICB2YXIgdHJpZ2dlcmVkR3JvdXBzID0ge31cbiAgICB2YXIgYXhlc1xuXG4gICAgdGhpcy5oYW5kbGVTY3JvbGwoKVxuICAgIGF4ZXMgPSB7XG4gICAgICBob3Jpem9udGFsOiB7XG4gICAgICAgIGNvbnRleHRPZmZzZXQ6IGlzV2luZG93ID8gMCA6IGNvbnRleHRPZmZzZXQubGVmdCxcbiAgICAgICAgY29udGV4dFNjcm9sbDogaXNXaW5kb3cgPyAwIDogdGhpcy5vbGRTY3JvbGwueCxcbiAgICAgICAgY29udGV4dERpbWVuc2lvbjogdGhpcy5pbm5lcldpZHRoKCksXG4gICAgICAgIG9sZFNjcm9sbDogdGhpcy5vbGRTY3JvbGwueCxcbiAgICAgICAgZm9yd2FyZDogJ3JpZ2h0JyxcbiAgICAgICAgYmFja3dhcmQ6ICdsZWZ0JyxcbiAgICAgICAgb2Zmc2V0UHJvcDogJ2xlZnQnXG4gICAgICB9LFxuICAgICAgdmVydGljYWw6IHtcbiAgICAgICAgY29udGV4dE9mZnNldDogaXNXaW5kb3cgPyAwIDogY29udGV4dE9mZnNldC50b3AsXG4gICAgICAgIGNvbnRleHRTY3JvbGw6IGlzV2luZG93ID8gMCA6IHRoaXMub2xkU2Nyb2xsLnksXG4gICAgICAgIGNvbnRleHREaW1lbnNpb246IHRoaXMuaW5uZXJIZWlnaHQoKSxcbiAgICAgICAgb2xkU2Nyb2xsOiB0aGlzLm9sZFNjcm9sbC55LFxuICAgICAgICBmb3J3YXJkOiAnZG93bicsXG4gICAgICAgIGJhY2t3YXJkOiAndXAnLFxuICAgICAgICBvZmZzZXRQcm9wOiAndG9wJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGF4aXNLZXkgaW4gYXhlcykge1xuICAgICAgdmFyIGF4aXMgPSBheGVzW2F4aXNLZXldXG4gICAgICBmb3IgKHZhciB3YXlwb2ludEtleSBpbiB0aGlzLndheXBvaW50c1theGlzS2V5XSkge1xuICAgICAgICB2YXIgd2F5cG9pbnQgPSB0aGlzLndheXBvaW50c1theGlzS2V5XVt3YXlwb2ludEtleV1cbiAgICAgICAgdmFyIGFkanVzdG1lbnQgPSB3YXlwb2ludC5vcHRpb25zLm9mZnNldFxuICAgICAgICB2YXIgb2xkVHJpZ2dlclBvaW50ID0gd2F5cG9pbnQudHJpZ2dlclBvaW50XG4gICAgICAgIHZhciBlbGVtZW50T2Zmc2V0ID0gMFxuICAgICAgICB2YXIgZnJlc2hXYXlwb2ludCA9IG9sZFRyaWdnZXJQb2ludCA9PSBudWxsXG4gICAgICAgIHZhciBjb250ZXh0TW9kaWZpZXIsIHdhc0JlZm9yZVNjcm9sbCwgbm93QWZ0ZXJTY3JvbGxcbiAgICAgICAgdmFyIHRyaWdnZXJlZEJhY2t3YXJkLCB0cmlnZ2VyZWRGb3J3YXJkXG5cbiAgICAgICAgaWYgKHdheXBvaW50LmVsZW1lbnQgIT09IHdheXBvaW50LmVsZW1lbnQud2luZG93KSB7XG4gICAgICAgICAgZWxlbWVudE9mZnNldCA9IHdheXBvaW50LmFkYXB0ZXIub2Zmc2V0KClbYXhpcy5vZmZzZXRQcm9wXVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhZGp1c3RtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgYWRqdXN0bWVudCA9IGFkanVzdG1lbnQuYXBwbHkod2F5cG9pbnQpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFkanVzdG1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYWRqdXN0bWVudCA9IHBhcnNlRmxvYXQoYWRqdXN0bWVudClcbiAgICAgICAgICBpZiAod2F5cG9pbnQub3B0aW9ucy5vZmZzZXQuaW5kZXhPZignJScpID4gLSAxKSB7XG4gICAgICAgICAgICBhZGp1c3RtZW50ID0gTWF0aC5jZWlsKGF4aXMuY29udGV4dERpbWVuc2lvbiAqIGFkanVzdG1lbnQgLyAxMDApXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dE1vZGlmaWVyID0gYXhpcy5jb250ZXh0U2Nyb2xsIC0gYXhpcy5jb250ZXh0T2Zmc2V0XG4gICAgICAgIHdheXBvaW50LnRyaWdnZXJQb2ludCA9IE1hdGguZmxvb3IoZWxlbWVudE9mZnNldCArIGNvbnRleHRNb2RpZmllciAtIGFkanVzdG1lbnQpXG4gICAgICAgIHdhc0JlZm9yZVNjcm9sbCA9IG9sZFRyaWdnZXJQb2ludCA8IGF4aXMub2xkU2Nyb2xsXG4gICAgICAgIG5vd0FmdGVyU2Nyb2xsID0gd2F5cG9pbnQudHJpZ2dlclBvaW50ID49IGF4aXMub2xkU2Nyb2xsXG4gICAgICAgIHRyaWdnZXJlZEJhY2t3YXJkID0gd2FzQmVmb3JlU2Nyb2xsICYmIG5vd0FmdGVyU2Nyb2xsXG4gICAgICAgIHRyaWdnZXJlZEZvcndhcmQgPSAhd2FzQmVmb3JlU2Nyb2xsICYmICFub3dBZnRlclNjcm9sbFxuXG4gICAgICAgIGlmICghZnJlc2hXYXlwb2ludCAmJiB0cmlnZ2VyZWRCYWNrd2FyZCkge1xuICAgICAgICAgIHdheXBvaW50LnF1ZXVlVHJpZ2dlcihheGlzLmJhY2t3YXJkKVxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFmcmVzaFdheXBvaW50ICYmIHRyaWdnZXJlZEZvcndhcmQpIHtcbiAgICAgICAgICB3YXlwb2ludC5xdWV1ZVRyaWdnZXIoYXhpcy5mb3J3YXJkKVxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZyZXNoV2F5cG9pbnQgJiYgYXhpcy5vbGRTY3JvbGwgPj0gd2F5cG9pbnQudHJpZ2dlclBvaW50KSB7XG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGF4aXMuZm9yd2FyZClcbiAgICAgICAgICB0cmlnZ2VyZWRHcm91cHNbd2F5cG9pbnQuZ3JvdXAuaWRdID0gd2F5cG9pbnQuZ3JvdXBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIFdheXBvaW50LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGdyb3VwS2V5IGluIHRyaWdnZXJlZEdyb3Vwcykge1xuICAgICAgICB0cmlnZ2VyZWRHcm91cHNbZ3JvdXBLZXldLmZsdXNoVHJpZ2dlcnMoKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LmZpbmRPckNyZWF0ZUJ5RWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gQ29udGV4dC5maW5kQnlFbGVtZW50KGVsZW1lbnQpIHx8IG5ldyBDb250ZXh0KGVsZW1lbnQpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucmVmcmVzaEFsbCA9IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIGNvbnRleHRJZCBpbiBjb250ZXh0cykge1xuICAgICAgY29udGV4dHNbY29udGV4dElkXS5yZWZyZXNoKClcbiAgICB9XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2NvbnRleHQtZmluZC1ieS1lbGVtZW50ICovXG4gIENvbnRleHQuZmluZEJ5RWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gY29udGV4dHNbZWxlbWVudC53YXlwb2ludENvbnRleHRLZXldXG4gIH1cblxuICB3aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKG9sZFdpbmRvd0xvYWQpIHtcbiAgICAgIG9sZFdpbmRvd0xvYWQoKVxuICAgIH1cbiAgICBDb250ZXh0LnJlZnJlc2hBbGwoKVxuICB9XG5cblxuICBXYXlwb2ludC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciByZXF1ZXN0Rm4gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWVTaGltXG4gICAgcmVxdWVzdEZuLmNhbGwod2luZG93LCBjYWxsYmFjaylcbiAgfVxuICBXYXlwb2ludC5Db250ZXh0ID0gQ29udGV4dFxufSgpKVxuOyhmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgZnVuY3Rpb24gYnlUcmlnZ2VyUG9pbnQoYSwgYikge1xuICAgIHJldHVybiBhLnRyaWdnZXJQb2ludCAtIGIudHJpZ2dlclBvaW50XG4gIH1cblxuICBmdW5jdGlvbiBieVJldmVyc2VUcmlnZ2VyUG9pbnQoYSwgYikge1xuICAgIHJldHVybiBiLnRyaWdnZXJQb2ludCAtIGEudHJpZ2dlclBvaW50XG4gIH1cblxuICB2YXIgZ3JvdXBzID0ge1xuICAgIHZlcnRpY2FsOiB7fSxcbiAgICBob3Jpem9udGFsOiB7fVxuICB9XG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxuXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9ncm91cCAqL1xuICBmdW5jdGlvbiBHcm91cChvcHRpb25zKSB7XG4gICAgdGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lXG4gICAgdGhpcy5heGlzID0gb3B0aW9ucy5heGlzXG4gICAgdGhpcy5pZCA9IHRoaXMubmFtZSArICctJyArIHRoaXMuYXhpc1xuICAgIHRoaXMud2F5cG9pbnRzID0gW11cbiAgICB0aGlzLmNsZWFyVHJpZ2dlclF1ZXVlcygpXG4gICAgZ3JvdXBzW3RoaXMuYXhpc11bdGhpcy5uYW1lXSA9IHRoaXNcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgR3JvdXAucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XG4gICAgdGhpcy53YXlwb2ludHMucHVzaCh3YXlwb2ludClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgR3JvdXAucHJvdG90eXBlLmNsZWFyVHJpZ2dlclF1ZXVlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudHJpZ2dlclF1ZXVlcyA9IHtcbiAgICAgIHVwOiBbXSxcbiAgICAgIGRvd246IFtdLFxuICAgICAgbGVmdDogW10sXG4gICAgICByaWdodDogW11cbiAgICB9XG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLnByb3RvdHlwZS5mbHVzaFRyaWdnZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgZGlyZWN0aW9uIGluIHRoaXMudHJpZ2dlclF1ZXVlcykge1xuICAgICAgdmFyIHdheXBvaW50cyA9IHRoaXMudHJpZ2dlclF1ZXVlc1tkaXJlY3Rpb25dXG4gICAgICB2YXIgcmV2ZXJzZSA9IGRpcmVjdGlvbiA9PT0gJ3VwJyB8fCBkaXJlY3Rpb24gPT09ICdsZWZ0J1xuICAgICAgd2F5cG9pbnRzLnNvcnQocmV2ZXJzZSA/IGJ5UmV2ZXJzZVRyaWdnZXJQb2ludCA6IGJ5VHJpZ2dlclBvaW50KVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGVuZCA9IHdheXBvaW50cy5sZW5ndGg7IGkgPCBlbmQ7IGkgKz0gMSkge1xuICAgICAgICB2YXIgd2F5cG9pbnQgPSB3YXlwb2ludHNbaV1cbiAgICAgICAgaWYgKHdheXBvaW50Lm9wdGlvbnMuY29udGludW91cyB8fCBpID09PSB3YXlwb2ludHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHdheXBvaW50LnRyaWdnZXIoW2RpcmVjdGlvbl0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jbGVhclRyaWdnZXJRdWV1ZXMoKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XG4gICAgdGhpcy53YXlwb2ludHMuc29ydChieVRyaWdnZXJQb2ludClcbiAgICB2YXIgaW5kZXggPSBXYXlwb2ludC5BZGFwdGVyLmluQXJyYXkod2F5cG9pbnQsIHRoaXMud2F5cG9pbnRzKVxuICAgIHZhciBpc0xhc3QgPSBpbmRleCA9PT0gdGhpcy53YXlwb2ludHMubGVuZ3RoIC0gMVxuICAgIHJldHVybiBpc0xhc3QgPyBudWxsIDogdGhpcy53YXlwb2ludHNbaW5kZXggKyAxXVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5wcm90b3R5cGUucHJldmlvdXMgPSBmdW5jdGlvbih3YXlwb2ludCkge1xuICAgIHRoaXMud2F5cG9pbnRzLnNvcnQoYnlUcmlnZ2VyUG9pbnQpXG4gICAgdmFyIGluZGV4ID0gV2F5cG9pbnQuQWRhcHRlci5pbkFycmF5KHdheXBvaW50LCB0aGlzLndheXBvaW50cylcbiAgICByZXR1cm4gaW5kZXggPyB0aGlzLndheXBvaW50c1tpbmRleCAtIDFdIDogbnVsbFxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5wcm90b3R5cGUucXVldWVUcmlnZ2VyID0gZnVuY3Rpb24od2F5cG9pbnQsIGRpcmVjdGlvbikge1xuICAgIHRoaXMudHJpZ2dlclF1ZXVlc1tkaXJlY3Rpb25dLnB1c2god2F5cG9pbnQpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbih3YXlwb2ludCkge1xuICAgIHZhciBpbmRleCA9IFdheXBvaW50LkFkYXB0ZXIuaW5BcnJheSh3YXlwb2ludCwgdGhpcy53YXlwb2ludHMpXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMud2F5cG9pbnRzLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2ZpcnN0ICovXG4gIEdyb3VwLnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLndheXBvaW50c1swXVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9sYXN0ICovXG4gIEdyb3VwLnByb3RvdHlwZS5sYXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMud2F5cG9pbnRzW3RoaXMud2F5cG9pbnRzLmxlbmd0aCAtIDFdXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLmZpbmRPckNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ3JvdXBzW29wdGlvbnMuYXhpc11bb3B0aW9ucy5uYW1lXSB8fCBuZXcgR3JvdXAob3B0aW9ucylcbiAgfVxuXG4gIFdheXBvaW50Lkdyb3VwID0gR3JvdXBcbn0oKSlcbjsoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIHZhciAkID0gd2luZG93LmpRdWVyeVxuICB2YXIgV2F5cG9pbnQgPSB3aW5kb3cuV2F5cG9pbnRcblxuICBmdW5jdGlvbiBKUXVlcnlBZGFwdGVyKGVsZW1lbnQpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KVxuICB9XG5cbiAgJC5lYWNoKFtcbiAgICAnaW5uZXJIZWlnaHQnLFxuICAgICdpbm5lcldpZHRoJyxcbiAgICAnb2ZmJyxcbiAgICAnb2Zmc2V0JyxcbiAgICAnb24nLFxuICAgICdvdXRlckhlaWdodCcsXG4gICAgJ291dGVyV2lkdGgnLFxuICAgICdzY3JvbGxMZWZ0JyxcbiAgICAnc2Nyb2xsVG9wJ1xuICBdLCBmdW5jdGlvbihpLCBtZXRob2QpIHtcbiAgICBKUXVlcnlBZGFwdGVyLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cylcbiAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50W21ldGhvZF0uYXBwbHkodGhpcy4kZWxlbWVudCwgYXJncylcbiAgICB9XG4gIH0pXG5cbiAgJC5lYWNoKFtcbiAgICAnZXh0ZW5kJyxcbiAgICAnaW5BcnJheScsXG4gICAgJ2lzRW1wdHlPYmplY3QnXG4gIF0sIGZ1bmN0aW9uKGksIG1ldGhvZCkge1xuICAgIEpRdWVyeUFkYXB0ZXJbbWV0aG9kXSA9ICRbbWV0aG9kXVxuICB9KVxuXG4gIFdheXBvaW50LmFkYXB0ZXJzLnB1c2goe1xuICAgIG5hbWU6ICdqcXVlcnknLFxuICAgIEFkYXB0ZXI6IEpRdWVyeUFkYXB0ZXJcbiAgfSlcbiAgV2F5cG9pbnQuQWRhcHRlciA9IEpRdWVyeUFkYXB0ZXJcbn0oKSlcbjsoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUV4dGVuc2lvbihmcmFtZXdvcmspIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgd2F5cG9pbnRzID0gW11cbiAgICAgIHZhciBvdmVycmlkZXMgPSBhcmd1bWVudHNbMF1cblxuICAgICAgaWYgKGZyYW1ld29yay5pc0Z1bmN0aW9uKGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgb3ZlcnJpZGVzID0gZnJhbWV3b3JrLmV4dGVuZCh7fSwgYXJndW1lbnRzWzFdKVxuICAgICAgICBvdmVycmlkZXMuaGFuZGxlciA9IGFyZ3VtZW50c1swXVxuICAgICAgfVxuXG4gICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gZnJhbWV3b3JrLmV4dGVuZCh7fSwgb3ZlcnJpZGVzLCB7XG4gICAgICAgICAgZWxlbWVudDogdGhpc1xuICAgICAgICB9KVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY29udGV4dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBvcHRpb25zLmNvbnRleHQgPSBmcmFtZXdvcmsodGhpcykuY2xvc2VzdChvcHRpb25zLmNvbnRleHQpWzBdXG4gICAgICAgIH1cbiAgICAgICAgd2F5cG9pbnRzLnB1c2gobmV3IFdheXBvaW50KG9wdGlvbnMpKVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIHdheXBvaW50c1xuICAgIH1cbiAgfVxuXG4gIGlmICh3aW5kb3cualF1ZXJ5KSB7XG4gICAgd2luZG93LmpRdWVyeS5mbi53YXlwb2ludCA9IGNyZWF0ZUV4dGVuc2lvbih3aW5kb3cualF1ZXJ5KVxuICB9XG4gIGlmICh3aW5kb3cuWmVwdG8pIHtcbiAgICB3aW5kb3cuWmVwdG8uZm4ud2F5cG9pbnQgPSBjcmVhdGVFeHRlbnNpb24od2luZG93LlplcHRvKVxuICB9XG59KCkpXG47IiwiIiwiLyohIFBob3RvU3dpcGUgRGVmYXVsdCBVSSAtIDQuMS4xIC0gMjAxNS0xMi0yNFxuKiBodHRwOi8vcGhvdG9zd2lwZS5jb21cbiogQ29weXJpZ2h0IChjKSAyMDE1IERtaXRyeSBTZW1lbm92OyAqL1xuLyoqXG4qXG4qIFVJIG9uIHRvcCBvZiBtYWluIHNsaWRpbmcgYXJlYSAoY2FwdGlvbiwgYXJyb3dzLCBjbG9zZSBidXR0b24sIGV0Yy4pLlxuKiBCdWlsdCBqdXN0IHVzaW5nIHB1YmxpYyBtZXRob2RzL3Byb3BlcnRpZXMgb2YgUGhvdG9Td2lwZS5cbiogXG4qL1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7IFxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9IGVsc2Uge1xuXHRcdHJvb3QuUGhvdG9Td2lwZVVJX0RlZmF1bHQgPSBmYWN0b3J5KCk7XG5cdH1cbn0pKHRoaXMsIGZ1bmN0aW9uICgpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cblxuXG52YXIgUGhvdG9Td2lwZVVJX0RlZmF1bHQgPVxuIGZ1bmN0aW9uKHBzd3AsIGZyYW1ld29yaykge1xuXG5cdHZhciB1aSA9IHRoaXM7XG5cdHZhciBfb3ZlcmxheVVJVXBkYXRlZCA9IGZhbHNlLFxuXHRcdF9jb250cm9sc1Zpc2libGUgPSB0cnVlLFxuXHRcdF9mdWxsc2NyZW5BUEksXG5cdFx0X2NvbnRyb2xzLFxuXHRcdF9jYXB0aW9uQ29udGFpbmVyLFxuXHRcdF9mYWtlQ2FwdGlvbkNvbnRhaW5lcixcblx0XHRfaW5kZXhJbmRpY2F0b3IsXG5cdFx0X3NoYXJlQnV0dG9uLFxuXHRcdF9zaGFyZU1vZGFsLFxuXHRcdF9zaGFyZU1vZGFsSGlkZGVuID0gdHJ1ZSxcblx0XHRfaW5pdGFsQ2xvc2VPblNjcm9sbFZhbHVlLFxuXHRcdF9pc0lkbGUsXG5cdFx0X2xpc3RlbixcblxuXHRcdF9sb2FkaW5nSW5kaWNhdG9yLFxuXHRcdF9sb2FkaW5nSW5kaWNhdG9ySGlkZGVuLFxuXHRcdF9sb2FkaW5nSW5kaWNhdG9yVGltZW91dCxcblxuXHRcdF9nYWxsZXJ5SGFzT25lU2xpZGUsXG5cblx0XHRfb3B0aW9ucyxcblx0XHRfZGVmYXVsdFVJT3B0aW9ucyA9IHtcblx0XHRcdGJhcnNTaXplOiB7dG9wOjQ0LCBib3R0b206J2F1dG8nfSxcblx0XHRcdGNsb3NlRWxDbGFzc2VzOiBbJ2l0ZW0nLCAnY2FwdGlvbicsICd6b29tLXdyYXAnLCAndWknLCAndG9wLWJhciddLCBcblx0XHRcdHRpbWVUb0lkbGU6IDQwMDAsIFxuXHRcdFx0dGltZVRvSWRsZU91dHNpZGU6IDEwMDAsXG5cdFx0XHRsb2FkaW5nSW5kaWNhdG9yRGVsYXk6IDEwMDAsIC8vIDJzXG5cdFx0XHRcblx0XHRcdGFkZENhcHRpb25IVE1MRm46IGZ1bmN0aW9uKGl0ZW0sIGNhcHRpb25FbCAvKiwgaXNGYWtlICovKSB7XG5cdFx0XHRcdGlmKCFpdGVtLnRpdGxlKSB7XG5cdFx0XHRcdFx0Y2FwdGlvbkVsLmNoaWxkcmVuWzBdLmlubmVySFRNTCA9ICcnO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjYXB0aW9uRWwuY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gaXRlbS50aXRsZTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHRjbG9zZUVsOnRydWUsXG5cdFx0XHRjYXB0aW9uRWw6IHRydWUsXG5cdFx0XHRmdWxsc2NyZWVuRWw6IHRydWUsXG5cdFx0XHR6b29tRWw6IHRydWUsXG5cdFx0XHRzaGFyZUVsOiB0cnVlLFxuXHRcdFx0Y291bnRlckVsOiB0cnVlLFxuXHRcdFx0YXJyb3dFbDogdHJ1ZSxcblx0XHRcdHByZWxvYWRlckVsOiB0cnVlLFxuXG5cdFx0XHR0YXBUb0Nsb3NlOiBmYWxzZSxcblx0XHRcdHRhcFRvVG9nZ2xlQ29udHJvbHM6IHRydWUsXG5cblx0XHRcdGNsaWNrVG9DbG9zZU5vblpvb21hYmxlOiB0cnVlLFxuXG5cdFx0XHRzaGFyZUJ1dHRvbnM6IFtcblx0XHRcdFx0e2lkOidmYWNlYm9vaycsIGxhYmVsOidTaGFyZSBvbiBGYWNlYm9vaycsIHVybDonaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9e3t1cmx9fSd9LFxuXHRcdFx0XHR7aWQ6J3R3aXR0ZXInLCBsYWJlbDonVHdlZXQnLCB1cmw6J2h0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3RleHQ9e3t0ZXh0fX0mdXJsPXt7dXJsfX0nfSxcblx0XHRcdFx0e2lkOidwaW50ZXJlc3QnLCBsYWJlbDonUGluIGl0JywgdXJsOidodHRwOi8vd3d3LnBpbnRlcmVzdC5jb20vcGluL2NyZWF0ZS9idXR0b24vJytcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Jz91cmw9e3t1cmx9fSZtZWRpYT17e2ltYWdlX3VybH19JmRlc2NyaXB0aW9uPXt7dGV4dH19J30sXG5cdFx0XHRcdHtpZDonZG93bmxvYWQnLCBsYWJlbDonRG93bmxvYWQgaW1hZ2UnLCB1cmw6J3t7cmF3X2ltYWdlX3VybH19JywgZG93bmxvYWQ6dHJ1ZX1cblx0XHRcdF0sXG5cdFx0XHRnZXRJbWFnZVVSTEZvclNoYXJlOiBmdW5jdGlvbiggLyogc2hhcmVCdXR0b25EYXRhICovICkge1xuXHRcdFx0XHRyZXR1cm4gcHN3cC5jdXJySXRlbS5zcmMgfHwgJyc7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0UGFnZVVSTEZvclNoYXJlOiBmdW5jdGlvbiggLyogc2hhcmVCdXR0b25EYXRhICovICkge1xuXHRcdFx0XHRyZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0VGV4dEZvclNoYXJlOiBmdW5jdGlvbiggLyogc2hhcmVCdXR0b25EYXRhICovICkge1xuXHRcdFx0XHRyZXR1cm4gcHN3cC5jdXJySXRlbS50aXRsZSB8fCAnJztcblx0XHRcdH0sXG5cdFx0XHRcdFxuXHRcdFx0aW5kZXhJbmRpY2F0b3JTZXA6ICcgLyAnLFxuXHRcdFx0Zml0Q29udHJvbHNXaWR0aDogMTIwMFxuXG5cdFx0fSxcblx0XHRfYmxvY2tDb250cm9sc1RhcCxcblx0XHRfYmxvY2tDb250cm9sc1RhcFRpbWVvdXQ7XG5cblxuXG5cdHZhciBfb25Db250cm9sc1RhcCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmKF9ibG9ja0NvbnRyb2xzVGFwKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cblx0XHRcdGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcblxuXHRcdFx0aWYoX29wdGlvbnMudGltZVRvSWRsZSAmJiBfb3B0aW9ucy5tb3VzZVVzZWQgJiYgIV9pc0lkbGUpIHtcblx0XHRcdFx0Ly8gcmVzZXQgaWRsZSB0aW1lclxuXHRcdFx0XHRfb25JZGxlTW91c2VNb3ZlKCk7XG5cdFx0XHR9XG5cblxuXHRcdFx0dmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCxcblx0XHRcdFx0dWlFbGVtZW50LFxuXHRcdFx0XHRjbGlja2VkQ2xhc3MgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnLFxuXHRcdFx0XHRmb3VuZDtcblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IF91aUVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHVpRWxlbWVudCA9IF91aUVsZW1lbnRzW2ldO1xuXHRcdFx0XHRpZih1aUVsZW1lbnQub25UYXAgJiYgY2xpY2tlZENsYXNzLmluZGV4T2YoJ3Bzd3BfXycgKyB1aUVsZW1lbnQubmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0dWlFbGVtZW50Lm9uVGFwKCk7XG5cdFx0XHRcdFx0Zm91bmQgPSB0cnVlO1xuXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoZm91bmQpIHtcblx0XHRcdFx0aWYoZS5zdG9wUHJvcGFnYXRpb24pIHtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9ibG9ja0NvbnRyb2xzVGFwID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBTb21lIHZlcnNpb25zIG9mIEFuZHJvaWQgZG9uJ3QgcHJldmVudCBnaG9zdCBjbGljayBldmVudCBcblx0XHRcdFx0Ly8gd2hlbiBwcmV2ZW50RGVmYXVsdCgpIHdhcyBjYWxsZWQgb24gdG91Y2hzdGFydCBhbmQvb3IgdG91Y2hlbmQuXG5cdFx0XHRcdC8vIFxuXHRcdFx0XHQvLyBUaGlzIGhhcHBlbnMgb24gdjQuMywgNC4yLCA0LjEsIFxuXHRcdFx0XHQvLyBvbGRlciB2ZXJzaW9ucyBzdHJhbmdlbHkgd29yayBjb3JyZWN0bHksIFxuXHRcdFx0XHQvLyBidXQganVzdCBpbiBjYXNlIHdlIGFkZCBkZWxheSBvbiBhbGwgb2YgdGhlbSlcdFxuXHRcdFx0XHR2YXIgdGFwRGVsYXkgPSBmcmFtZXdvcmsuZmVhdHVyZXMuaXNPbGRBbmRyb2lkID8gNjAwIDogMzA7XG5cdFx0XHRcdF9ibG9ja0NvbnRyb2xzVGFwVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0X2Jsb2NrQ29udHJvbHNUYXAgPSBmYWxzZTtcblx0XHRcdFx0fSwgdGFwRGVsYXkpO1xuXHRcdFx0fVxuXG5cdFx0fSxcblx0XHRfZml0Q29udHJvbHNJblZpZXdwb3J0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gIXBzd3AubGlrZWx5VG91Y2hEZXZpY2UgfHwgX29wdGlvbnMubW91c2VVc2VkIHx8IHNjcmVlbi53aWR0aCA+IF9vcHRpb25zLmZpdENvbnRyb2xzV2lkdGg7XG5cdFx0fSxcblx0XHRfdG9nZ2xlUHN3cENsYXNzID0gZnVuY3Rpb24oZWwsIGNOYW1lLCBhZGQpIHtcblx0XHRcdGZyYW1ld29ya1sgKGFkZCA/ICdhZGQnIDogJ3JlbW92ZScpICsgJ0NsYXNzJyBdKGVsLCAncHN3cF9fJyArIGNOYW1lKTtcblx0XHR9LFxuXG5cdFx0Ly8gYWRkIGNsYXNzIHdoZW4gdGhlcmUgaXMganVzdCBvbmUgaXRlbSBpbiB0aGUgZ2FsbGVyeVxuXHRcdC8vIChieSBkZWZhdWx0IGl0IGhpZGVzIGxlZnQvcmlnaHQgYXJyb3dzIGFuZCAxb2ZYIGNvdW50ZXIpXG5cdFx0X2NvdW50TnVtSXRlbXMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBoYXNPbmVTbGlkZSA9IChfb3B0aW9ucy5nZXROdW1JdGVtc0ZuKCkgPT09IDEpO1xuXG5cdFx0XHRpZihoYXNPbmVTbGlkZSAhPT0gX2dhbGxlcnlIYXNPbmVTbGlkZSkge1xuXHRcdFx0XHRfdG9nZ2xlUHN3cENsYXNzKF9jb250cm9scywgJ3VpLS1vbmUtc2xpZGUnLCBoYXNPbmVTbGlkZSk7XG5cdFx0XHRcdF9nYWxsZXJ5SGFzT25lU2xpZGUgPSBoYXNPbmVTbGlkZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF90b2dnbGVTaGFyZU1vZGFsQ2xhc3MgPSBmdW5jdGlvbigpIHtcblx0XHRcdF90b2dnbGVQc3dwQ2xhc3MoX3NoYXJlTW9kYWwsICdzaGFyZS1tb2RhbC0taGlkZGVuJywgX3NoYXJlTW9kYWxIaWRkZW4pO1xuXHRcdH0sXG5cdFx0X3RvZ2dsZVNoYXJlTW9kYWwgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0X3NoYXJlTW9kYWxIaWRkZW4gPSAhX3NoYXJlTW9kYWxIaWRkZW47XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0aWYoIV9zaGFyZU1vZGFsSGlkZGVuKSB7XG5cdFx0XHRcdF90b2dnbGVTaGFyZU1vZGFsQ2xhc3MoKTtcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZighX3NoYXJlTW9kYWxIaWRkZW4pIHtcblx0XHRcdFx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyhfc2hhcmVNb2RhbCwgJ3Bzd3BfX3NoYXJlLW1vZGFsLS1mYWRlLWluJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCAzMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoX3NoYXJlTW9kYWwsICdwc3dwX19zaGFyZS1tb2RhbC0tZmFkZS1pbicpO1xuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKF9zaGFyZU1vZGFsSGlkZGVuKSB7XG5cdFx0XHRcdFx0XHRfdG9nZ2xlU2hhcmVNb2RhbENsYXNzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCAzMDApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZighX3NoYXJlTW9kYWxIaWRkZW4pIHtcblx0XHRcdFx0X3VwZGF0ZVNoYXJlVVJMcygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cblx0XHRfb3BlbldpbmRvd1BvcHVwID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0ZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXHRcdFx0dmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcblxuXHRcdFx0cHN3cC5zaG91dCgnc2hhcmVMaW5rQ2xpY2snLCBlLCB0YXJnZXQpO1xuXG5cdFx0XHRpZighdGFyZ2V0LmhyZWYpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiggdGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZG93bmxvYWQnKSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdHdpbmRvdy5vcGVuKHRhcmdldC5ocmVmLCAncHN3cF9zaGFyZScsICdzY3JvbGxiYXJzPXllcyxyZXNpemFibGU9eWVzLHRvb2xiYXI9bm8sJytcblx0XHRcdFx0XHRcdFx0XHRcdFx0J2xvY2F0aW9uPXllcyx3aWR0aD01NTAsaGVpZ2h0PTQyMCx0b3A9MTAwLGxlZnQ9JyArIFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQod2luZG93LnNjcmVlbiA/IE1hdGgucm91bmQoc2NyZWVuLndpZHRoIC8gMiAtIDI3NSkgOiAxMDApICApO1xuXG5cdFx0XHRpZighX3NoYXJlTW9kYWxIaWRkZW4pIHtcblx0XHRcdFx0X3RvZ2dsZVNoYXJlTW9kYWwoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0X3VwZGF0ZVNoYXJlVVJMcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNoYXJlQnV0dG9uT3V0ID0gJycsXG5cdFx0XHRcdHNoYXJlQnV0dG9uRGF0YSxcblx0XHRcdFx0c2hhcmVVUkwsXG5cdFx0XHRcdGltYWdlX3VybCxcblx0XHRcdFx0cGFnZV91cmwsXG5cdFx0XHRcdHNoYXJlX3RleHQ7XG5cblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBfb3B0aW9ucy5zaGFyZUJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0c2hhcmVCdXR0b25EYXRhID0gX29wdGlvbnMuc2hhcmVCdXR0b25zW2ldO1xuXG5cdFx0XHRcdGltYWdlX3VybCA9IF9vcHRpb25zLmdldEltYWdlVVJMRm9yU2hhcmUoc2hhcmVCdXR0b25EYXRhKTtcblx0XHRcdFx0cGFnZV91cmwgPSBfb3B0aW9ucy5nZXRQYWdlVVJMRm9yU2hhcmUoc2hhcmVCdXR0b25EYXRhKTtcblx0XHRcdFx0c2hhcmVfdGV4dCA9IF9vcHRpb25zLmdldFRleHRGb3JTaGFyZShzaGFyZUJ1dHRvbkRhdGEpO1xuXG5cdFx0XHRcdHNoYXJlVVJMID0gc2hhcmVCdXR0b25EYXRhLnVybC5yZXBsYWNlKCd7e3VybH19JywgZW5jb2RlVVJJQ29tcG9uZW50KHBhZ2VfdXJsKSApXG5cdFx0XHRcdFx0XHRcdFx0XHQucmVwbGFjZSgne3tpbWFnZV91cmx9fScsIGVuY29kZVVSSUNvbXBvbmVudChpbWFnZV91cmwpIClcblx0XHRcdFx0XHRcdFx0XHRcdC5yZXBsYWNlKCd7e3Jhd19pbWFnZV91cmx9fScsIGltYWdlX3VybCApXG5cdFx0XHRcdFx0XHRcdFx0XHQucmVwbGFjZSgne3t0ZXh0fX0nLCBlbmNvZGVVUklDb21wb25lbnQoc2hhcmVfdGV4dCkgKTtcblxuXHRcdFx0XHRzaGFyZUJ1dHRvbk91dCArPSAnPGEgaHJlZj1cIicgKyBzaGFyZVVSTCArICdcIiB0YXJnZXQ9XCJfYmxhbmtcIiAnK1xuXHRcdFx0XHRcdFx0XHRcdFx0J2NsYXNzPVwicHN3cF9fc2hhcmUtLScgKyBzaGFyZUJ1dHRvbkRhdGEuaWQgKyAnXCInICtcblx0XHRcdFx0XHRcdFx0XHRcdChzaGFyZUJ1dHRvbkRhdGEuZG93bmxvYWQgPyAnZG93bmxvYWQnIDogJycpICsgJz4nICsgXG5cdFx0XHRcdFx0XHRcdFx0XHRzaGFyZUJ1dHRvbkRhdGEubGFiZWwgKyAnPC9hPic7XG5cblx0XHRcdFx0aWYoX29wdGlvbnMucGFyc2VTaGFyZUJ1dHRvbk91dCkge1xuXHRcdFx0XHRcdHNoYXJlQnV0dG9uT3V0ID0gX29wdGlvbnMucGFyc2VTaGFyZUJ1dHRvbk91dChzaGFyZUJ1dHRvbkRhdGEsIHNoYXJlQnV0dG9uT3V0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0X3NoYXJlTW9kYWwuY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gc2hhcmVCdXR0b25PdXQ7XG5cdFx0XHRfc2hhcmVNb2RhbC5jaGlsZHJlblswXS5vbmNsaWNrID0gX29wZW5XaW5kb3dQb3B1cDtcblxuXHRcdH0sXG5cdFx0X2hhc0Nsb3NlQ2xhc3MgPSBmdW5jdGlvbih0YXJnZXQpIHtcblx0XHRcdGZvcih2YXIgIGkgPSAwOyBpIDwgX29wdGlvbnMuY2xvc2VFbENsYXNzZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYoIGZyYW1ld29yay5oYXNDbGFzcyh0YXJnZXQsICdwc3dwX18nICsgX29wdGlvbnMuY2xvc2VFbENsYXNzZXNbaV0pICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfaWRsZUludGVydmFsLFxuXHRcdF9pZGxlVGltZXIsXG5cdFx0X2lkbGVJbmNyZW1lbnQgPSAwLFxuXHRcdF9vbklkbGVNb3VzZU1vdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdGNsZWFyVGltZW91dChfaWRsZVRpbWVyKTtcblx0XHRcdF9pZGxlSW5jcmVtZW50ID0gMDtcblx0XHRcdGlmKF9pc0lkbGUpIHtcblx0XHRcdFx0dWkuc2V0SWRsZShmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfb25Nb3VzZUxlYXZlV2luZG93ID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0ZSA9IGUgPyBlIDogd2luZG93LmV2ZW50O1xuXHRcdFx0dmFyIGZyb20gPSBlLnJlbGF0ZWRUYXJnZXQgfHwgZS50b0VsZW1lbnQ7XG5cdFx0XHRpZiAoIWZyb20gfHwgZnJvbS5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dChfaWRsZVRpbWVyKTtcblx0XHRcdFx0X2lkbGVUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0dWkuc2V0SWRsZSh0cnVlKTtcblx0XHRcdFx0fSwgX29wdGlvbnMudGltZVRvSWRsZU91dHNpZGUpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3NldHVwRnVsbHNjcmVlbkFQSSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoX29wdGlvbnMuZnVsbHNjcmVlbkVsICYmICFmcmFtZXdvcmsuZmVhdHVyZXMuaXNPbGRBbmRyb2lkKSB7XG5cdFx0XHRcdGlmKCFfZnVsbHNjcmVuQVBJKSB7XG5cdFx0XHRcdFx0X2Z1bGxzY3JlbkFQSSA9IHVpLmdldEZ1bGxzY3JlZW5BUEkoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihfZnVsbHNjcmVuQVBJKSB7XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLmJpbmQoZG9jdW1lbnQsIF9mdWxsc2NyZW5BUEkuZXZlbnRLLCB1aS51cGRhdGVGdWxsc2NyZWVuKTtcblx0XHRcdFx0XHR1aS51cGRhdGVGdWxsc2NyZWVuKCk7XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKHBzd3AudGVtcGxhdGUsICdwc3dwLS1zdXBwb3J0cy1mcycpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyhwc3dwLnRlbXBsYXRlLCAncHN3cC0tc3VwcG9ydHMtZnMnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3NldHVwTG9hZGluZ0luZGljYXRvciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gU2V0dXAgbG9hZGluZyBpbmRpY2F0b3Jcblx0XHRcdGlmKF9vcHRpb25zLnByZWxvYWRlckVsKSB7XG5cdFx0XHRcblx0XHRcdFx0X3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7XG5cblx0XHRcdFx0X2xpc3RlbignYmVmb3JlQ2hhbmdlJywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoX2xvYWRpbmdJbmRpY2F0b3JUaW1lb3V0KTtcblxuXHRcdFx0XHRcdC8vIGRpc3BsYXkgbG9hZGluZyBpbmRpY2F0b3Igd2l0aCBkZWxheVxuXHRcdFx0XHRcdF9sb2FkaW5nSW5kaWNhdG9yVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdGlmKHBzd3AuY3Vyckl0ZW0gJiYgcHN3cC5jdXJySXRlbS5sb2FkaW5nKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYoICFwc3dwLmFsbG93UHJvZ3Jlc3NpdmVJbWcoKSB8fCAocHN3cC5jdXJySXRlbS5pbWcgJiYgIXBzd3AuY3Vyckl0ZW0uaW1nLm5hdHVyYWxXaWR0aCkgICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIHNob3cgcHJlbG9hZGVyIGlmIHByb2dyZXNzaXZlIGxvYWRpbmcgaXMgbm90IGVuYWJsZWQsIFxuXHRcdFx0XHRcdFx0XHRcdC8vIG9yIGltYWdlIHdpZHRoIGlzIG5vdCBkZWZpbmVkIHlldCAoYmVjYXVzZSBvZiBzbG93IGNvbm5lY3Rpb24pXG5cdFx0XHRcdFx0XHRcdFx0X3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IoZmFsc2UpOyBcblx0XHRcdFx0XHRcdFx0XHQvLyBpdGVtcy1jb250cm9sbGVyLmpzIGZ1bmN0aW9uIGFsbG93UHJvZ3Jlc3NpdmVJbWdcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdF90b2dnbGVMb2FkaW5nSW5kaWNhdG9yKHRydWUpOyAvLyBoaWRlIHByZWxvYWRlclxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSwgX29wdGlvbnMubG9hZGluZ0luZGljYXRvckRlbGF5KTtcblx0XHRcdFx0XHRcblx0XHRcdFx0fSk7XG5cdFx0XHRcdF9saXN0ZW4oJ2ltYWdlTG9hZENvbXBsZXRlJywgZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcblx0XHRcdFx0XHRpZihwc3dwLmN1cnJJdGVtID09PSBpdGVtKSB7XG5cdFx0XHRcdFx0XHRfdG9nZ2xlTG9hZGluZ0luZGljYXRvcih0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdG9nZ2xlTG9hZGluZ0luZGljYXRvciA9IGZ1bmN0aW9uKGhpZGUpIHtcblx0XHRcdGlmKCBfbG9hZGluZ0luZGljYXRvckhpZGRlbiAhPT0gaGlkZSApIHtcblx0XHRcdFx0X3RvZ2dsZVBzd3BDbGFzcyhfbG9hZGluZ0luZGljYXRvciwgJ3ByZWxvYWRlci0tYWN0aXZlJywgIWhpZGUpO1xuXHRcdFx0XHRfbG9hZGluZ0luZGljYXRvckhpZGRlbiA9IGhpZGU7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfYXBwbHlOYXZCYXJHYXBzID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0dmFyIGdhcCA9IGl0ZW0udkdhcDtcblxuXHRcdFx0aWYoIF9maXRDb250cm9sc0luVmlld3BvcnQoKSApIHtcblx0XHRcdFx0XG5cdFx0XHRcdHZhciBiYXJzID0gX29wdGlvbnMuYmFyc1NpemU7IFxuXHRcdFx0XHRpZihfb3B0aW9ucy5jYXB0aW9uRWwgJiYgYmFycy5ib3R0b20gPT09ICdhdXRvJykge1xuXHRcdFx0XHRcdGlmKCFfZmFrZUNhcHRpb25Db250YWluZXIpIHtcblx0XHRcdFx0XHRcdF9mYWtlQ2FwdGlvbkNvbnRhaW5lciA9IGZyYW1ld29yay5jcmVhdGVFbCgncHN3cF9fY2FwdGlvbiBwc3dwX19jYXB0aW9uLS1mYWtlJyk7XG5cdFx0XHRcdFx0XHRfZmFrZUNhcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoIGZyYW1ld29yay5jcmVhdGVFbCgncHN3cF9fY2FwdGlvbl9fY2VudGVyJykgKTtcblx0XHRcdFx0XHRcdF9jb250cm9scy5pbnNlcnRCZWZvcmUoX2Zha2VDYXB0aW9uQ29udGFpbmVyLCBfY2FwdGlvbkNvbnRhaW5lcik7XG5cdFx0XHRcdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3MoX2NvbnRyb2xzLCAncHN3cF9fdWktLWZpdCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiggX29wdGlvbnMuYWRkQ2FwdGlvbkhUTUxGbihpdGVtLCBfZmFrZUNhcHRpb25Db250YWluZXIsIHRydWUpICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgY2FwdGlvblNpemUgPSBfZmFrZUNhcHRpb25Db250YWluZXIuY2xpZW50SGVpZ2h0O1xuXHRcdFx0XHRcdFx0Z2FwLmJvdHRvbSA9IHBhcnNlSW50KGNhcHRpb25TaXplLDEwKSB8fCA0NDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Z2FwLmJvdHRvbSA9IGJhcnMudG9wOyAvLyBpZiBubyBjYXB0aW9uLCBzZXQgc2l6ZSBvZiBib3R0b20gZ2FwIHRvIHNpemUgb2YgdG9wXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGdhcC5ib3R0b20gPSBiYXJzLmJvdHRvbSA9PT0gJ2F1dG8nID8gMCA6IGJhcnMuYm90dG9tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBoZWlnaHQgb2YgdG9wIGJhciBpcyBzdGF0aWMsIG5vIG5lZWQgdG8gY2FsY3VsYXRlIGl0XG5cdFx0XHRcdGdhcC50b3AgPSBiYXJzLnRvcDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGdhcC50b3AgPSBnYXAuYm90dG9tID0gMDtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9zZXR1cElkbGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdC8vIEhpZGUgY29udHJvbHMgd2hlbiBtb3VzZSBpcyB1c2VkXG5cdFx0XHRpZihfb3B0aW9ucy50aW1lVG9JZGxlKSB7XG5cdFx0XHRcdF9saXN0ZW4oJ21vdXNlVXNlZCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGZyYW1ld29yay5iaW5kKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgX29uSWRsZU1vdXNlTW92ZSk7XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLmJpbmQoZG9jdW1lbnQsICdtb3VzZW91dCcsIF9vbk1vdXNlTGVhdmVXaW5kb3cpO1xuXG5cdFx0XHRcdFx0X2lkbGVJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0X2lkbGVJbmNyZW1lbnQrKztcblx0XHRcdFx0XHRcdGlmKF9pZGxlSW5jcmVtZW50ID09PSAyKSB7XG5cdFx0XHRcdFx0XHRcdHVpLnNldElkbGUodHJ1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgX29wdGlvbnMudGltZVRvSWRsZSAvIDIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9zZXR1cEhpZGluZ0NvbnRyb2xzRHVyaW5nR2VzdHVyZXMgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSGlkZSBjb250cm9scyBvbiB2ZXJ0aWNhbCBkcmFnXG5cdFx0XHRfbGlzdGVuKCdvblZlcnRpY2FsRHJhZycsIGZ1bmN0aW9uKG5vdykge1xuXHRcdFx0XHRpZihfY29udHJvbHNWaXNpYmxlICYmIG5vdyA8IDAuOTUpIHtcblx0XHRcdFx0XHR1aS5oaWRlQ29udHJvbHMoKTtcblx0XHRcdFx0fSBlbHNlIGlmKCFfY29udHJvbHNWaXNpYmxlICYmIG5vdyA+PSAwLjk1KSB7XG5cdFx0XHRcdFx0dWkuc2hvd0NvbnRyb2xzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBIaWRlIGNvbnRyb2xzIHdoZW4gcGluY2hpbmcgdG8gY2xvc2Vcblx0XHRcdHZhciBwaW5jaENvbnRyb2xzSGlkZGVuO1xuXHRcdFx0X2xpc3Rlbignb25QaW5jaENsb3NlJyAsIGZ1bmN0aW9uKG5vdykge1xuXHRcdFx0XHRpZihfY29udHJvbHNWaXNpYmxlICYmIG5vdyA8IDAuOSkge1xuXHRcdFx0XHRcdHVpLmhpZGVDb250cm9scygpO1xuXHRcdFx0XHRcdHBpbmNoQ29udHJvbHNIaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2UgaWYocGluY2hDb250cm9sc0hpZGRlbiAmJiAhX2NvbnRyb2xzVmlzaWJsZSAmJiBub3cgPiAwLjkpIHtcblx0XHRcdFx0XHR1aS5zaG93Q29udHJvbHMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9saXN0ZW4oJ3pvb21HZXN0dXJlRW5kZWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cGluY2hDb250cm9sc0hpZGRlbiA9IGZhbHNlO1xuXHRcdFx0XHRpZihwaW5jaENvbnRyb2xzSGlkZGVuICYmICFfY29udHJvbHNWaXNpYmxlKSB7XG5cdFx0XHRcdFx0dWkuc2hvd0NvbnRyb2xzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0fTtcblxuXG5cblx0dmFyIF91aUVsZW1lbnRzID0gW1xuXHRcdHsgXG5cdFx0XHRuYW1lOiAnY2FwdGlvbicsIFxuXHRcdFx0b3B0aW9uOiAnY2FwdGlvbkVsJyxcblx0XHRcdG9uSW5pdDogZnVuY3Rpb24oZWwpIHsgIFxuXHRcdFx0XHRfY2FwdGlvbkNvbnRhaW5lciA9IGVsOyBcblx0XHRcdH0gXG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ3NoYXJlLW1vZGFsJywgXG5cdFx0XHRvcHRpb246ICdzaGFyZUVsJyxcblx0XHRcdG9uSW5pdDogZnVuY3Rpb24oZWwpIHsgIFxuXHRcdFx0XHRfc2hhcmVNb2RhbCA9IGVsO1xuXHRcdFx0fSxcblx0XHRcdG9uVGFwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3RvZ2dsZVNoYXJlTW9kYWwoKTtcblx0XHRcdH0gXG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2J1dHRvbi0tc2hhcmUnLCBcblx0XHRcdG9wdGlvbjogJ3NoYXJlRWwnLFxuXHRcdFx0b25Jbml0OiBmdW5jdGlvbihlbCkgeyBcblx0XHRcdFx0X3NoYXJlQnV0dG9uID0gZWw7XG5cdFx0XHR9LFxuXHRcdFx0b25UYXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfdG9nZ2xlU2hhcmVNb2RhbCgpO1xuXHRcdFx0fSBcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnYnV0dG9uLS16b29tJywgXG5cdFx0XHRvcHRpb246ICd6b29tRWwnLFxuXHRcdFx0b25UYXA6IHBzd3AudG9nZ2xlRGVza3RvcFpvb21cblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnY291bnRlcicsIFxuXHRcdFx0b3B0aW9uOiAnY291bnRlckVsJyxcblx0XHRcdG9uSW5pdDogZnVuY3Rpb24oZWwpIHsgIFxuXHRcdFx0XHRfaW5kZXhJbmRpY2F0b3IgPSBlbDtcblx0XHRcdH0gXG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2J1dHRvbi0tY2xvc2UnLCBcblx0XHRcdG9wdGlvbjogJ2Nsb3NlRWwnLFxuXHRcdFx0b25UYXA6IHBzd3AuY2xvc2Vcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnYnV0dG9uLS1hcnJvdy0tbGVmdCcsIFxuXHRcdFx0b3B0aW9uOiAnYXJyb3dFbCcsXG5cdFx0XHRvblRhcDogcHN3cC5wcmV2XG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2J1dHRvbi0tYXJyb3ctLXJpZ2h0JywgXG5cdFx0XHRvcHRpb246ICdhcnJvd0VsJyxcblx0XHRcdG9uVGFwOiBwc3dwLm5leHRcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnYnV0dG9uLS1mcycsIFxuXHRcdFx0b3B0aW9uOiAnZnVsbHNjcmVlbkVsJyxcblx0XHRcdG9uVGFwOiBmdW5jdGlvbigpIHsgIFxuXHRcdFx0XHRpZihfZnVsbHNjcmVuQVBJLmlzRnVsbHNjcmVlbigpKSB7XG5cdFx0XHRcdFx0X2Z1bGxzY3JlbkFQSS5leGl0KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X2Z1bGxzY3JlbkFQSS5lbnRlcigpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IFxuXHRcdH0sXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdwcmVsb2FkZXInLCBcblx0XHRcdG9wdGlvbjogJ3ByZWxvYWRlckVsJyxcblx0XHRcdG9uSW5pdDogZnVuY3Rpb24oZWwpIHsgIFxuXHRcdFx0XHRfbG9hZGluZ0luZGljYXRvciA9IGVsO1xuXHRcdFx0fSBcblx0XHR9XG5cblx0XTtcblxuXHR2YXIgX3NldHVwVUlFbGVtZW50cyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpdGVtLFxuXHRcdFx0Y2xhc3NBdHRyLFxuXHRcdFx0dWlFbGVtZW50O1xuXG5cdFx0dmFyIGxvb3BUaHJvdWdoQ2hpbGRFbGVtZW50cyA9IGZ1bmN0aW9uKHNDaGlsZHJlbikge1xuXHRcdFx0aWYoIXNDaGlsZHJlbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBsID0gc0NoaWxkcmVuLmxlbmd0aDtcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0aXRlbSA9IHNDaGlsZHJlbltpXTtcblx0XHRcdFx0Y2xhc3NBdHRyID0gaXRlbS5jbGFzc05hbWU7XG5cblx0XHRcdFx0Zm9yKHZhciBhID0gMDsgYSA8IF91aUVsZW1lbnRzLmxlbmd0aDsgYSsrKSB7XG5cdFx0XHRcdFx0dWlFbGVtZW50ID0gX3VpRWxlbWVudHNbYV07XG5cblx0XHRcdFx0XHRpZihjbGFzc0F0dHIuaW5kZXhPZigncHN3cF9fJyArIHVpRWxlbWVudC5uYW1lKSA+IC0xICApIHtcblxuXHRcdFx0XHRcdFx0aWYoIF9vcHRpb25zW3VpRWxlbWVudC5vcHRpb25dICkgeyAvLyBpZiBlbGVtZW50IGlzIG5vdCBkaXNhYmxlZCBmcm9tIG9wdGlvbnNcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyhpdGVtLCAncHN3cF9fZWxlbWVudC0tZGlzYWJsZWQnKTtcblx0XHRcdFx0XHRcdFx0aWYodWlFbGVtZW50Lm9uSW5pdCkge1xuXHRcdFx0XHRcdFx0XHRcdHVpRWxlbWVudC5vbkluaXQoaXRlbSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdC8vaXRlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyhpdGVtLCAncHN3cF9fZWxlbWVudC0tZGlzYWJsZWQnKTtcblx0XHRcdFx0XHRcdFx0Ly9pdGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRsb29wVGhyb3VnaENoaWxkRWxlbWVudHMoX2NvbnRyb2xzLmNoaWxkcmVuKTtcblxuXHRcdHZhciB0b3BCYXIgPSAgZnJhbWV3b3JrLmdldENoaWxkQnlDbGFzcyhfY29udHJvbHMsICdwc3dwX190b3AtYmFyJyk7XG5cdFx0aWYodG9wQmFyKSB7XG5cdFx0XHRsb29wVGhyb3VnaENoaWxkRWxlbWVudHMoIHRvcEJhci5jaGlsZHJlbiApO1xuXHRcdH1cblx0fTtcblxuXG5cdFxuXG5cdHVpLmluaXQgPSBmdW5jdGlvbigpIHtcblxuXHRcdC8vIGV4dGVuZCBvcHRpb25zXG5cdFx0ZnJhbWV3b3JrLmV4dGVuZChwc3dwLm9wdGlvbnMsIF9kZWZhdWx0VUlPcHRpb25zLCB0cnVlKTtcblxuXHRcdC8vIGNyZWF0ZSBsb2NhbCBsaW5rIGZvciBmYXN0IGFjY2Vzc1xuXHRcdF9vcHRpb25zID0gcHN3cC5vcHRpb25zO1xuXG5cdFx0Ly8gZmluZCBwc3dwX191aSBlbGVtZW50XG5cdFx0X2NvbnRyb2xzID0gZnJhbWV3b3JrLmdldENoaWxkQnlDbGFzcyhwc3dwLnNjcm9sbFdyYXAsICdwc3dwX191aScpO1xuXG5cdFx0Ly8gY3JlYXRlIGxvY2FsIGxpbmtcblx0XHRfbGlzdGVuID0gcHN3cC5saXN0ZW47XG5cblxuXHRcdF9zZXR1cEhpZGluZ0NvbnRyb2xzRHVyaW5nR2VzdHVyZXMoKTtcblxuXHRcdC8vIHVwZGF0ZSBjb250cm9scyB3aGVuIHNsaWRlcyBjaGFuZ2Vcblx0XHRfbGlzdGVuKCdiZWZvcmVDaGFuZ2UnLCB1aS51cGRhdGUpO1xuXG5cdFx0Ly8gdG9nZ2xlIHpvb20gb24gZG91YmxlLXRhcFxuXHRcdF9saXN0ZW4oJ2RvdWJsZVRhcCcsIGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0XHR2YXIgaW5pdGlhbFpvb21MZXZlbCA9IHBzd3AuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbDtcblx0XHRcdGlmKHBzd3AuZ2V0Wm9vbUxldmVsKCkgIT09IGluaXRpYWxab29tTGV2ZWwpIHtcblx0XHRcdFx0cHN3cC56b29tVG8oaW5pdGlhbFpvb21MZXZlbCwgcG9pbnQsIDMzMyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwc3dwLnpvb21Ubyhfb3B0aW9ucy5nZXREb3VibGVUYXBab29tKGZhbHNlLCBwc3dwLmN1cnJJdGVtKSwgcG9pbnQsIDMzMyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBBbGxvdyB0ZXh0IHNlbGVjdGlvbiBpbiBjYXB0aW9uXG5cdFx0X2xpc3RlbigncHJldmVudERyYWdFdmVudCcsIGZ1bmN0aW9uKGUsIGlzRG93biwgcHJldmVudE9iaikge1xuXHRcdFx0dmFyIHQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG5cdFx0XHRpZihcblx0XHRcdFx0dCAmJiBcblx0XHRcdFx0dC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgJiYgZS50eXBlLmluZGV4T2YoJ21vdXNlJykgPiAtMSAmJiBcblx0XHRcdFx0KCB0LmdldEF0dHJpYnV0ZSgnY2xhc3MnKS5pbmRleE9mKCdfX2NhcHRpb24nKSA+IDAgfHwgKC8oU01BTEx8U1RST05HfEVNKS9pKS50ZXN0KHQudGFnTmFtZSkgKSBcblx0XHRcdCkge1xuXHRcdFx0XHRwcmV2ZW50T2JqLnByZXZlbnQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIGJpbmQgZXZlbnRzIGZvciBVSVxuXHRcdF9saXN0ZW4oJ2JpbmRFdmVudHMnLCBmdW5jdGlvbigpIHtcblx0XHRcdGZyYW1ld29yay5iaW5kKF9jb250cm9scywgJ3Bzd3BUYXAgY2xpY2snLCBfb25Db250cm9sc1RhcCk7XG5cdFx0XHRmcmFtZXdvcmsuYmluZChwc3dwLnNjcm9sbFdyYXAsICdwc3dwVGFwJywgdWkub25HbG9iYWxUYXApO1xuXG5cdFx0XHRpZighcHN3cC5saWtlbHlUb3VjaERldmljZSkge1xuXHRcdFx0XHRmcmFtZXdvcmsuYmluZChwc3dwLnNjcm9sbFdyYXAsICdtb3VzZW92ZXInLCB1aS5vbk1vdXNlT3Zlcik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyB1bmJpbmQgZXZlbnRzIGZvciBVSVxuXHRcdF9saXN0ZW4oJ3VuYmluZEV2ZW50cycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoIV9zaGFyZU1vZGFsSGlkZGVuKSB7XG5cdFx0XHRcdF90b2dnbGVTaGFyZU1vZGFsKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKF9pZGxlSW50ZXJ2YWwpIHtcblx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaWRsZUludGVydmFsKTtcblx0XHRcdH1cblx0XHRcdGZyYW1ld29yay51bmJpbmQoZG9jdW1lbnQsICdtb3VzZW91dCcsIF9vbk1vdXNlTGVhdmVXaW5kb3cpO1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChkb2N1bWVudCwgJ21vdXNlbW92ZScsIF9vbklkbGVNb3VzZU1vdmUpO1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChfY29udHJvbHMsICdwc3dwVGFwIGNsaWNrJywgX29uQ29udHJvbHNUYXApO1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChwc3dwLnNjcm9sbFdyYXAsICdwc3dwVGFwJywgdWkub25HbG9iYWxUYXApO1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChwc3dwLnNjcm9sbFdyYXAsICdtb3VzZW92ZXInLCB1aS5vbk1vdXNlT3Zlcik7XG5cblx0XHRcdGlmKF9mdWxsc2NyZW5BUEkpIHtcblx0XHRcdFx0ZnJhbWV3b3JrLnVuYmluZChkb2N1bWVudCwgX2Z1bGxzY3JlbkFQSS5ldmVudEssIHVpLnVwZGF0ZUZ1bGxzY3JlZW4pO1xuXHRcdFx0XHRpZihfZnVsbHNjcmVuQVBJLmlzRnVsbHNjcmVlbigpKSB7XG5cdFx0XHRcdFx0X29wdGlvbnMuaGlkZUFuaW1hdGlvbkR1cmF0aW9uID0gMDtcblx0XHRcdFx0XHRfZnVsbHNjcmVuQVBJLmV4aXQoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfZnVsbHNjcmVuQVBJID0gbnVsbDtcblx0XHRcdH1cblx0XHR9KTtcblxuXG5cdFx0Ly8gY2xlYW4gdXAgdGhpbmdzIHdoZW4gZ2FsbGVyeSBpcyBkZXN0cm95ZWRcblx0XHRfbGlzdGVuKCdkZXN0cm95JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihfb3B0aW9ucy5jYXB0aW9uRWwpIHtcblx0XHRcdFx0aWYoX2Zha2VDYXB0aW9uQ29udGFpbmVyKSB7XG5cdFx0XHRcdFx0X2NvbnRyb2xzLnJlbW92ZUNoaWxkKF9mYWtlQ2FwdGlvbkNvbnRhaW5lcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKF9jYXB0aW9uQ29udGFpbmVyLCAncHN3cF9fY2FwdGlvbi0tZW1wdHknKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoX3NoYXJlTW9kYWwpIHtcblx0XHRcdFx0X3NoYXJlTW9kYWwuY2hpbGRyZW5bMF0ub25jbGljayA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoX2NvbnRyb2xzLCAncHN3cF9fdWktLW92ZXItY2xvc2UnKTtcblx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyggX2NvbnRyb2xzLCAncHN3cF9fdWktLWhpZGRlbicpO1xuXHRcdFx0dWkuc2V0SWRsZShmYWxzZSk7XG5cdFx0fSk7XG5cdFx0XG5cblx0XHRpZighX29wdGlvbnMuc2hvd0FuaW1hdGlvbkR1cmF0aW9uKSB7XG5cdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoIF9jb250cm9scywgJ3Bzd3BfX3VpLS1oaWRkZW4nKTtcblx0XHR9XG5cdFx0X2xpc3RlbignaW5pdGlhbFpvb21JbicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoX29wdGlvbnMuc2hvd0FuaW1hdGlvbkR1cmF0aW9uKSB7XG5cdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyggX2NvbnRyb2xzLCAncHN3cF9fdWktLWhpZGRlbicpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdF9saXN0ZW4oJ2luaXRpYWxab29tT3V0JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3MoIF9jb250cm9scywgJ3Bzd3BfX3VpLS1oaWRkZW4nKTtcblx0XHR9KTtcblxuXHRcdF9saXN0ZW4oJ3BhcnNlVmVydGljYWxNYXJnaW4nLCBfYXBwbHlOYXZCYXJHYXBzKTtcblx0XHRcblx0XHRfc2V0dXBVSUVsZW1lbnRzKCk7XG5cblx0XHRpZihfb3B0aW9ucy5zaGFyZUVsICYmIF9zaGFyZUJ1dHRvbiAmJiBfc2hhcmVNb2RhbCkge1xuXHRcdFx0X3NoYXJlTW9kYWxIaWRkZW4gPSB0cnVlO1xuXHRcdH1cblxuXHRcdF9jb3VudE51bUl0ZW1zKCk7XG5cblx0XHRfc2V0dXBJZGxlKCk7XG5cblx0XHRfc2V0dXBGdWxsc2NyZWVuQVBJKCk7XG5cblx0XHRfc2V0dXBMb2FkaW5nSW5kaWNhdG9yKCk7XG5cdH07XG5cblx0dWkuc2V0SWRsZSA9IGZ1bmN0aW9uKGlzSWRsZSkge1xuXHRcdF9pc0lkbGUgPSBpc0lkbGU7XG5cdFx0X3RvZ2dsZVBzd3BDbGFzcyhfY29udHJvbHMsICd1aS0taWRsZScsIGlzSWRsZSk7XG5cdH07XG5cblx0dWkudXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gRG9uJ3QgdXBkYXRlIFVJIGlmIGl0J3MgaGlkZGVuXG5cdFx0aWYoX2NvbnRyb2xzVmlzaWJsZSAmJiBwc3dwLmN1cnJJdGVtKSB7XG5cdFx0XHRcblx0XHRcdHVpLnVwZGF0ZUluZGV4SW5kaWNhdG9yKCk7XG5cblx0XHRcdGlmKF9vcHRpb25zLmNhcHRpb25FbCkge1xuXHRcdFx0XHRfb3B0aW9ucy5hZGRDYXB0aW9uSFRNTEZuKHBzd3AuY3Vyckl0ZW0sIF9jYXB0aW9uQ29udGFpbmVyKTtcblxuXHRcdFx0XHRfdG9nZ2xlUHN3cENsYXNzKF9jYXB0aW9uQ29udGFpbmVyLCAnY2FwdGlvbi0tZW1wdHknLCAhcHN3cC5jdXJySXRlbS50aXRsZSk7XG5cdFx0XHR9XG5cblx0XHRcdF9vdmVybGF5VUlVcGRhdGVkID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRfb3ZlcmxheVVJVXBkYXRlZCA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmKCFfc2hhcmVNb2RhbEhpZGRlbikge1xuXHRcdFx0X3RvZ2dsZVNoYXJlTW9kYWwoKTtcblx0XHR9XG5cblx0XHRfY291bnROdW1JdGVtcygpO1xuXHR9O1xuXG5cdHVpLnVwZGF0ZUZ1bGxzY3JlZW4gPSBmdW5jdGlvbihlKSB7XG5cblx0XHRpZihlKSB7XG5cdFx0XHQvLyBzb21lIGJyb3dzZXJzIGNoYW5nZSB3aW5kb3cgc2Nyb2xsIHBvc2l0aW9uIGR1cmluZyB0aGUgZnVsbHNjcmVlblxuXHRcdFx0Ly8gc28gUGhvdG9Td2lwZSB1cGRhdGVzIGl0IGp1c3QgaW4gY2FzZVxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0cHN3cC5zZXRTY3JvbGxPZmZzZXQoIDAsIGZyYW1ld29yay5nZXRTY3JvbGxZKCkgKTtcblx0XHRcdH0sIDUwKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gdG9vZ2xlIHBzd3AtLWZzIGNsYXNzIG9uIHJvb3QgZWxlbWVudFxuXHRcdGZyYW1ld29ya1sgKF9mdWxsc2NyZW5BUEkuaXNGdWxsc2NyZWVuKCkgPyAnYWRkJyA6ICdyZW1vdmUnKSArICdDbGFzcycgXShwc3dwLnRlbXBsYXRlLCAncHN3cC0tZnMnKTtcblx0fTtcblxuXHR1aS51cGRhdGVJbmRleEluZGljYXRvciA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKF9vcHRpb25zLmNvdW50ZXJFbCkge1xuXHRcdFx0X2luZGV4SW5kaWNhdG9yLmlubmVySFRNTCA9IChwc3dwLmdldEN1cnJlbnRJbmRleCgpKzEpICsgXG5cdFx0XHRcdFx0XHRcdFx0XHRcdF9vcHRpb25zLmluZGV4SW5kaWNhdG9yU2VwICsgXG5cdFx0XHRcdFx0XHRcdFx0XHRcdF9vcHRpb25zLmdldE51bUl0ZW1zRm4oKTtcblx0XHR9XG5cdH07XG5cdFxuXHR1aS5vbkdsb2JhbFRhcCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG5cdFx0dmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcblxuXHRcdGlmKF9ibG9ja0NvbnRyb2xzVGFwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYoZS5kZXRhaWwgJiYgZS5kZXRhaWwucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHtcblxuXHRcdFx0Ly8gY2xvc2UgZ2FsbGVyeSBpZiBjbGlja2VkIG91dHNpZGUgb2YgdGhlIGltYWdlXG5cdFx0XHRpZihfaGFzQ2xvc2VDbGFzcyh0YXJnZXQpKSB7XG5cdFx0XHRcdHBzd3AuY2xvc2UoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihmcmFtZXdvcmsuaGFzQ2xhc3ModGFyZ2V0LCAncHN3cF9faW1nJykpIHtcblx0XHRcdFx0aWYocHN3cC5nZXRab29tTGV2ZWwoKSA9PT0gMSAmJiBwc3dwLmdldFpvb21MZXZlbCgpIDw9IHBzd3AuY3Vyckl0ZW0uZml0UmF0aW8pIHtcblx0XHRcdFx0XHRpZihfb3B0aW9ucy5jbGlja1RvQ2xvc2VOb25ab29tYWJsZSkge1xuXHRcdFx0XHRcdFx0cHN3cC5jbG9zZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwc3dwLnRvZ2dsZURlc2t0b3Bab29tKGUuZGV0YWlsLnJlbGVhc2VQb2ludCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIHRhcCBhbnl3aGVyZSAoZXhjZXB0IGJ1dHRvbnMpIHRvIHRvZ2dsZSB2aXNpYmlsaXR5IG9mIGNvbnRyb2xzXG5cdFx0XHRpZihfb3B0aW9ucy50YXBUb1RvZ2dsZUNvbnRyb2xzKSB7XG5cdFx0XHRcdGlmKF9jb250cm9sc1Zpc2libGUpIHtcblx0XHRcdFx0XHR1aS5oaWRlQ29udHJvbHMoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR1aS5zaG93Q29udHJvbHMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyB0YXAgdG8gY2xvc2UgZ2FsbGVyeVxuXHRcdFx0aWYoX29wdGlvbnMudGFwVG9DbG9zZSAmJiAoZnJhbWV3b3JrLmhhc0NsYXNzKHRhcmdldCwgJ3Bzd3BfX2ltZycpIHx8IF9oYXNDbG9zZUNsYXNzKHRhcmdldCkpICkge1xuXHRcdFx0XHRwc3dwLmNsb3NlKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdFxuXHRcdH1cblx0fTtcblx0dWkub25Nb3VzZU92ZXIgPSBmdW5jdGlvbihlKSB7XG5cdFx0ZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXHRcdHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG5cblx0XHQvLyBhZGQgY2xhc3Mgd2hlbiBtb3VzZSBpcyBvdmVyIGFuIGVsZW1lbnQgdGhhdCBzaG91bGQgY2xvc2UgdGhlIGdhbGxlcnlcblx0XHRfdG9nZ2xlUHN3cENsYXNzKF9jb250cm9scywgJ3VpLS1vdmVyLWNsb3NlJywgX2hhc0Nsb3NlQ2xhc3ModGFyZ2V0KSk7XG5cdH07XG5cblx0dWkuaGlkZUNvbnRyb2xzID0gZnVuY3Rpb24oKSB7XG5cdFx0ZnJhbWV3b3JrLmFkZENsYXNzKF9jb250cm9scywncHN3cF9fdWktLWhpZGRlbicpO1xuXHRcdF9jb250cm9sc1Zpc2libGUgPSBmYWxzZTtcblx0fTtcblxuXHR1aS5zaG93Q29udHJvbHMgPSBmdW5jdGlvbigpIHtcblx0XHRfY29udHJvbHNWaXNpYmxlID0gdHJ1ZTtcblx0XHRpZighX292ZXJsYXlVSVVwZGF0ZWQpIHtcblx0XHRcdHVpLnVwZGF0ZSgpO1xuXHRcdH1cblx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoX2NvbnRyb2xzLCdwc3dwX191aS0taGlkZGVuJyk7XG5cdH07XG5cblx0dWkuc3VwcG9ydHNGdWxsc2NyZWVuID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGQgPSBkb2N1bWVudDtcblx0XHRyZXR1cm4gISEoZC5leGl0RnVsbHNjcmVlbiB8fCBkLm1vekNhbmNlbEZ1bGxTY3JlZW4gfHwgZC53ZWJraXRFeGl0RnVsbHNjcmVlbiB8fCBkLm1zRXhpdEZ1bGxzY3JlZW4pO1xuXHR9O1xuXG5cdHVpLmdldEZ1bGxzY3JlZW5BUEkgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZEUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG5cdFx0XHRhcGksXG5cdFx0XHR0RiA9ICdmdWxsc2NyZWVuY2hhbmdlJztcblxuXHRcdGlmIChkRS5yZXF1ZXN0RnVsbHNjcmVlbikge1xuXHRcdFx0YXBpID0ge1xuXHRcdFx0XHRlbnRlcks6ICdyZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdGV4aXRLOiAnZXhpdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRlbGVtZW50SzogJ2Z1bGxzY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0ZXZlbnRLOiB0RlxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSBpZihkRS5tb3pSZXF1ZXN0RnVsbFNjcmVlbiApIHtcblx0XHRcdGFwaSA9IHtcblx0XHRcdFx0ZW50ZXJLOiAnbW96UmVxdWVzdEZ1bGxTY3JlZW4nLFxuXHRcdFx0XHRleGl0SzogJ21vekNhbmNlbEZ1bGxTY3JlZW4nLFxuXHRcdFx0XHRlbGVtZW50SzogJ21vekZ1bGxTY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0ZXZlbnRLOiAnbW96JyArIHRGXG5cdFx0XHR9O1xuXG5cdFx0XHRcblxuXHRcdH0gZWxzZSBpZihkRS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikge1xuXHRcdFx0YXBpID0ge1xuXHRcdFx0XHRlbnRlcks6ICd3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdGV4aXRLOiAnd2Via2l0RXhpdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRlbGVtZW50SzogJ3dlYmtpdEZ1bGxzY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0ZXZlbnRLOiAnd2Via2l0JyArIHRGXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIGlmKGRFLm1zUmVxdWVzdEZ1bGxzY3JlZW4pIHtcblx0XHRcdGFwaSA9IHtcblx0XHRcdFx0ZW50ZXJLOiAnbXNSZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdGV4aXRLOiAnbXNFeGl0RnVsbHNjcmVlbicsXG5cdFx0XHRcdGVsZW1lbnRLOiAnbXNGdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdGV2ZW50SzogJ01TRnVsbHNjcmVlbkNoYW5nZSdcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYoYXBpKSB7XG5cdFx0XHRhcGkuZW50ZXIgPSBmdW5jdGlvbigpIHsgXG5cdFx0XHRcdC8vIGRpc2FibGUgY2xvc2Utb24tc2Nyb2xsIGluIGZ1bGxzY3JlZW5cblx0XHRcdFx0X2luaXRhbENsb3NlT25TY3JvbGxWYWx1ZSA9IF9vcHRpb25zLmNsb3NlT25TY3JvbGw7IFxuXHRcdFx0XHRfb3B0aW9ucy5jbG9zZU9uU2Nyb2xsID0gZmFsc2U7IFxuXG5cdFx0XHRcdGlmKHRoaXMuZW50ZXJLID09PSAnd2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4nKSB7XG5cdFx0XHRcdFx0cHN3cC50ZW1wbGF0ZVt0aGlzLmVudGVyS10oIEVsZW1lbnQuQUxMT1dfS0VZQk9BUkRfSU5QVVQgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gcHN3cC50ZW1wbGF0ZVt0aGlzLmVudGVyS10oKTsgXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRhcGkuZXhpdCA9IGZ1bmN0aW9uKCkgeyBcblx0XHRcdFx0X29wdGlvbnMuY2xvc2VPblNjcm9sbCA9IF9pbml0YWxDbG9zZU9uU2Nyb2xsVmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50W3RoaXMuZXhpdEtdKCk7IFxuXG5cdFx0XHR9O1xuXHRcdFx0YXBpLmlzRnVsbHNjcmVlbiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZG9jdW1lbnRbdGhpcy5lbGVtZW50S107IH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFwaTtcblx0fTtcblxuXG5cbn07XG5yZXR1cm4gUGhvdG9Td2lwZVVJX0RlZmF1bHQ7XG5cblxufSk7XG4iLCIvKiEgUGhvdG9Td2lwZSAtIHY0LjEuMSAtIDIwMTUtMTItMjRcbiogaHR0cDovL3Bob3Rvc3dpcGUuY29tXG4qIENvcHlyaWdodCAoYykgMjAxNSBEbWl0cnkgU2VtZW5vdjsgKi9cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkgeyBcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShmYWN0b3J5KTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0fSBlbHNlIHtcblx0XHRyb290LlBob3RvU3dpcGUgPSBmYWN0b3J5KCk7XG5cdH1cbn0pKHRoaXMsIGZ1bmN0aW9uICgpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciBQaG90b1N3aXBlID0gZnVuY3Rpb24odGVtcGxhdGUsIFVpQ2xhc3MsIGl0ZW1zLCBvcHRpb25zKXtcblxuLyo+PmZyYW1ld29yay1icmlkZ2UqL1xuLyoqXG4gKlxuICogU2V0IG9mIGdlbmVyaWMgZnVuY3Rpb25zIHVzZWQgYnkgZ2FsbGVyeS5cbiAqIFxuICogWW91J3JlIGZyZWUgdG8gbW9kaWZ5IGFueXRoaW5nIGhlcmUgYXMgbG9uZyBhcyBmdW5jdGlvbmFsaXR5IGlzIGtlcHQuXG4gKiBcbiAqL1xudmFyIGZyYW1ld29yayA9IHtcblx0ZmVhdHVyZXM6IG51bGwsXG5cdGJpbmQ6IGZ1bmN0aW9uKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHVuYmluZCkge1xuXHRcdHZhciBtZXRob2ROYW1lID0gKHVuYmluZCA/ICdyZW1vdmUnIDogJ2FkZCcpICsgJ0V2ZW50TGlzdGVuZXInO1xuXHRcdHR5cGUgPSB0eXBlLnNwbGl0KCcgJyk7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmKHR5cGVbaV0pIHtcblx0XHRcdFx0dGFyZ2V0W21ldGhvZE5hbWVdKCB0eXBlW2ldLCBsaXN0ZW5lciwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aXNBcnJheTogZnVuY3Rpb24ob2JqKSB7XG5cdFx0cmV0dXJuIChvYmogaW5zdGFuY2VvZiBBcnJheSk7XG5cdH0sXG5cdGNyZWF0ZUVsOiBmdW5jdGlvbihjbGFzc2VzLCB0YWcpIHtcblx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyB8fCAnZGl2Jyk7XG5cdFx0aWYoY2xhc3Nlcykge1xuXHRcdFx0ZWwuY2xhc3NOYW1lID0gY2xhc3Nlcztcblx0XHR9XG5cdFx0cmV0dXJuIGVsO1xuXHR9LFxuXHRnZXRTY3JvbGxZOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgeU9mZnNldCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcblx0XHRyZXR1cm4geU9mZnNldCAhPT0gdW5kZWZpbmVkID8geU9mZnNldCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24odGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikge1xuXHRcdGZyYW1ld29yay5iaW5kKHRhcmdldCx0eXBlLGxpc3RlbmVyLHRydWUpO1xuXHR9LFxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oZWwsIGNsYXNzTmFtZSkge1xuXHRcdHZhciByZWcgPSBuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgY2xhc3NOYW1lICsgJyhcXFxcc3wkKScpO1xuXHRcdGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKHJlZywgJyAnKS5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKS5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTsgXG5cdH0sXG5cdGFkZENsYXNzOiBmdW5jdGlvbihlbCwgY2xhc3NOYW1lKSB7XG5cdFx0aWYoICFmcmFtZXdvcmsuaGFzQ2xhc3MoZWwsY2xhc3NOYW1lKSApIHtcblx0XHRcdGVsLmNsYXNzTmFtZSArPSAoZWwuY2xhc3NOYW1lID8gJyAnIDogJycpICsgY2xhc3NOYW1lO1xuXHRcdH1cblx0fSxcblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKGVsLCBjbGFzc05hbWUpIHtcblx0XHRyZXR1cm4gZWwuY2xhc3NOYW1lICYmIG5ldyBSZWdFeHAoJyhefFxcXFxzKScgKyBjbGFzc05hbWUgKyAnKFxcXFxzfCQpJykudGVzdChlbC5jbGFzc05hbWUpO1xuXHR9LFxuXHRnZXRDaGlsZEJ5Q2xhc3M6IGZ1bmN0aW9uKHBhcmVudEVsLCBjaGlsZENsYXNzTmFtZSkge1xuXHRcdHZhciBub2RlID0gcGFyZW50RWwuZmlyc3RDaGlsZDtcblx0XHR3aGlsZShub2RlKSB7XG5cdFx0XHRpZiggZnJhbWV3b3JrLmhhc0NsYXNzKG5vZGUsIGNoaWxkQ2xhc3NOYW1lKSApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGU7XG5cdFx0XHR9XG5cdFx0XHRub2RlID0gbm9kZS5uZXh0U2libGluZztcblx0XHR9XG5cdH0sXG5cdGFycmF5U2VhcmNoOiBmdW5jdGlvbihhcnJheSwgdmFsdWUsIGtleSkge1xuXHRcdHZhciBpID0gYXJyYXkubGVuZ3RoO1xuXHRcdHdoaWxlKGktLSkge1xuXHRcdFx0aWYoYXJyYXlbaV1ba2V5XSA9PT0gdmFsdWUpIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9IFxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cdGV4dGVuZDogZnVuY3Rpb24obzEsIG8yLCBwcmV2ZW50T3ZlcndyaXRlKSB7XG5cdFx0Zm9yICh2YXIgcHJvcCBpbiBvMikge1xuXHRcdFx0aWYgKG8yLmhhc093blByb3BlcnR5KHByb3ApKSB7XG5cdFx0XHRcdGlmKHByZXZlbnRPdmVyd3JpdGUgJiYgbzEuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRvMVtwcm9wXSA9IG8yW3Byb3BdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0ZWFzaW5nOiB7XG5cdFx0c2luZToge1xuXHRcdFx0b3V0OiBmdW5jdGlvbihrKSB7XG5cdFx0XHRcdHJldHVybiBNYXRoLnNpbihrICogKE1hdGguUEkgLyAyKSk7XG5cdFx0XHR9LFxuXHRcdFx0aW5PdXQ6IGZ1bmN0aW9uKGspIHtcblx0XHRcdFx0cmV0dXJuIC0gKE1hdGguY29zKE1hdGguUEkgKiBrKSAtIDEpIC8gMjtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGN1YmljOiB7XG5cdFx0XHRvdXQ6IGZ1bmN0aW9uKGspIHtcblx0XHRcdFx0cmV0dXJuIC0tayAqIGsgKiBrICsgMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Lypcblx0XHRcdGVsYXN0aWM6IHtcblx0XHRcdFx0b3V0OiBmdW5jdGlvbiAoIGsgKSB7XG5cblx0XHRcdFx0XHR2YXIgcywgYSA9IDAuMSwgcCA9IDAuNDtcblx0XHRcdFx0XHRpZiAoIGsgPT09IDAgKSByZXR1cm4gMDtcblx0XHRcdFx0XHRpZiAoIGsgPT09IDEgKSByZXR1cm4gMTtcblx0XHRcdFx0XHRpZiAoICFhIHx8IGEgPCAxICkgeyBhID0gMTsgcyA9IHAgLyA0OyB9XG5cdFx0XHRcdFx0ZWxzZSBzID0gcCAqIE1hdGguYXNpbiggMSAvIGEgKSAvICggMiAqIE1hdGguUEkgKTtcblx0XHRcdFx0XHRyZXR1cm4gKCBhICogTWF0aC5wb3coIDIsIC0gMTAgKiBrKSAqIE1hdGguc2luKCAoIGsgLSBzICkgKiAoIDIgKiBNYXRoLlBJICkgLyBwICkgKyAxICk7XG5cblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHRiYWNrOiB7XG5cdFx0XHRcdG91dDogZnVuY3Rpb24gKCBrICkge1xuXHRcdFx0XHRcdHZhciBzID0gMS43MDE1ODtcblx0XHRcdFx0XHRyZXR1cm4gLS1rICogayAqICggKCBzICsgMSApICogayArIHMgKSArIDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQqL1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBcblx0ICogQHJldHVybiB7b2JqZWN0fVxuXHQgKiBcblx0ICoge1xuXHQgKiAgcmFmIDogcmVxdWVzdCBhbmltYXRpb24gZnJhbWUgZnVuY3Rpb25cblx0ICogIGNhZiA6IGNhbmNlbCBhbmltYXRpb24gZnJhbWUgZnVuY3Rpb25cblx0ICogIHRyYW5zZnJvbSA6IHRyYW5zZm9ybSBwcm9wZXJ0eSBrZXkgKHdpdGggdmVuZG9yKSwgb3IgbnVsbCBpZiBub3Qgc3VwcG9ydGVkXG5cdCAqICBvbGRJRSA6IElFOCBvciBiZWxvd1xuXHQgKiB9XG5cdCAqIFxuXHQgKi9cblx0ZGV0ZWN0RmVhdHVyZXM6IGZ1bmN0aW9uKCkge1xuXHRcdGlmKGZyYW1ld29yay5mZWF0dXJlcykge1xuXHRcdFx0cmV0dXJuIGZyYW1ld29yay5mZWF0dXJlcztcblx0XHR9XG5cdFx0dmFyIGhlbHBlckVsID0gZnJhbWV3b3JrLmNyZWF0ZUVsKCksXG5cdFx0XHRoZWxwZXJTdHlsZSA9IGhlbHBlckVsLnN0eWxlLFxuXHRcdFx0dmVuZG9yID0gJycsXG5cdFx0XHRmZWF0dXJlcyA9IHt9O1xuXG5cdFx0Ly8gSUU4IGFuZCBiZWxvd1xuXHRcdGZlYXR1cmVzLm9sZElFID0gZG9jdW1lbnQuYWxsICYmICFkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyO1xuXG5cdFx0ZmVhdHVyZXMudG91Y2ggPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3c7XG5cblx0XHRpZih3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG5cdFx0XHRmZWF0dXJlcy5yYWYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXHRcdFx0ZmVhdHVyZXMuY2FmID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1xuXHRcdH1cblxuXHRcdGZlYXR1cmVzLnBvaW50ZXJFdmVudCA9IG5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCB8fCBuYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZDtcblxuXHRcdC8vIGZpeCBmYWxzZS1wb3NpdGl2ZSBkZXRlY3Rpb24gb2Ygb2xkIEFuZHJvaWQgaW4gbmV3IElFXG5cdFx0Ly8gKElFMTEgdWEgc3RyaW5nIGNvbnRhaW5zIFwiQW5kcm9pZCA0LjBcIilcblx0XHRcblx0XHRpZighZmVhdHVyZXMucG9pbnRlckV2ZW50KSB7IFxuXG5cdFx0XHR2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuXG5cdFx0XHQvLyBEZXRlY3QgaWYgZGV2aWNlIGlzIGlQaG9uZSBvciBpUG9kIGFuZCBpZiBpdCdzIG9sZGVyIHRoYW4gaU9TIDhcblx0XHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE0MjIzOTIwXG5cdFx0XHQvLyBcblx0XHRcdC8vIFRoaXMgZGV0ZWN0aW9uIGlzIG1hZGUgYmVjYXVzZSBvZiBidWdneSB0b3AvYm90dG9tIHRvb2xiYXJzXG5cdFx0XHQvLyB0aGF0IGRvbid0IHRyaWdnZXIgd2luZG93LnJlc2l6ZSBldmVudC5cblx0XHRcdC8vIEZvciBtb3JlIGluZm8gcmVmZXIgdG8gX2lzRml4ZWRQb3NpdGlvbiB2YXJpYWJsZSBpbiBjb3JlLmpzXG5cblx0XHRcdGlmICgvaVAoaG9uZXxvZCkvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSkge1xuXHRcdFx0XHR2YXIgdiA9IChuYXZpZ2F0b3IuYXBwVmVyc2lvbikubWF0Y2goL09TIChcXGQrKV8oXFxkKylfPyhcXGQrKT8vKTtcblx0XHRcdFx0aWYodiAmJiB2Lmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2ID0gcGFyc2VJbnQodlsxXSwgMTApO1xuXHRcdFx0XHRcdGlmKHYgPj0gMSAmJiB2IDwgOCApIHtcblx0XHRcdFx0XHRcdGZlYXR1cmVzLmlzT2xkSU9TUGhvbmUgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXRlY3Qgb2xkIEFuZHJvaWQgKGJlZm9yZSBLaXRLYXQpXG5cdFx0XHQvLyBkdWUgdG8gYnVncyByZWxhdGVkIHRvIHBvc2l0aW9uOmZpeGVkXG5cdFx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzcxODQ1NzMvcGljay11cC10aGUtYW5kcm9pZC12ZXJzaW9uLWluLXRoZS1icm93c2VyLWJ5LWphdmFzY3JpcHRcblx0XHRcdFxuXHRcdFx0dmFyIG1hdGNoID0gdWEubWF0Y2goL0FuZHJvaWRcXHMoWzAtOVxcLl0qKS8pO1xuXHRcdFx0dmFyIGFuZHJvaWR2ZXJzaW9uID0gIG1hdGNoID8gbWF0Y2hbMV0gOiAwO1xuXHRcdFx0YW5kcm9pZHZlcnNpb24gPSBwYXJzZUZsb2F0KGFuZHJvaWR2ZXJzaW9uKTtcblx0XHRcdGlmKGFuZHJvaWR2ZXJzaW9uID49IDEgKSB7XG5cdFx0XHRcdGlmKGFuZHJvaWR2ZXJzaW9uIDwgNC40KSB7XG5cdFx0XHRcdFx0ZmVhdHVyZXMuaXNPbGRBbmRyb2lkID0gdHJ1ZTsgLy8gZm9yIGZpeGVkIHBvc2l0aW9uIGJ1ZyAmIHBlcmZvcm1hbmNlXG5cdFx0XHRcdH1cblx0XHRcdFx0ZmVhdHVyZXMuYW5kcm9pZFZlcnNpb24gPSBhbmRyb2lkdmVyc2lvbjsgLy8gZm9yIHRvdWNoZW5kIGJ1Z1xuXHRcdFx0fVx0XG5cdFx0XHRmZWF0dXJlcy5pc01vYmlsZU9wZXJhID0gL29wZXJhIG1pbml8b3BlcmEgbW9iaS9pLnRlc3QodWEpO1xuXG5cdFx0XHQvLyBwLnMuIHllcywgeWVzLCBVQSBzbmlmZmluZyBpcyBiYWQsIHByb3Bvc2UgeW91ciBzb2x1dGlvbiBmb3IgYWJvdmUgYnVncy5cblx0XHR9XG5cdFx0XG5cdFx0dmFyIHN0eWxlQ2hlY2tzID0gWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnLCAnYW5pbWF0aW9uTmFtZSddLFxuXHRcdFx0dmVuZG9ycyA9IFsnJywgJ3dlYmtpdCcsJ01veicsJ21zJywnTyddLFxuXHRcdFx0c3R5bGVDaGVja0l0ZW0sXG5cdFx0XHRzdHlsZU5hbWU7XG5cblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHR2ZW5kb3IgPSB2ZW5kb3JzW2ldO1xuXG5cdFx0XHRmb3IodmFyIGEgPSAwOyBhIDwgMzsgYSsrKSB7XG5cdFx0XHRcdHN0eWxlQ2hlY2tJdGVtID0gc3R5bGVDaGVja3NbYV07XG5cblx0XHRcdFx0Ly8gdXBwZXJjYXNlIGZpcnN0IGxldHRlciBvZiBwcm9wZXJ0eSBuYW1lLCBpZiB2ZW5kb3IgaXMgcHJlc2VudFxuXHRcdFx0XHRzdHlsZU5hbWUgPSB2ZW5kb3IgKyAodmVuZG9yID8gXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHN0eWxlQ2hlY2tJdGVtLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3R5bGVDaGVja0l0ZW0uc2xpY2UoMSkgOiBcblx0XHRcdFx0XHRcdFx0XHRcdFx0c3R5bGVDaGVja0l0ZW0pO1xuXHRcdFx0XG5cdFx0XHRcdGlmKCFmZWF0dXJlc1tzdHlsZUNoZWNrSXRlbV0gJiYgc3R5bGVOYW1lIGluIGhlbHBlclN0eWxlICkge1xuXHRcdFx0XHRcdGZlYXR1cmVzW3N0eWxlQ2hlY2tJdGVtXSA9IHN0eWxlTmFtZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZih2ZW5kb3IgJiYgIWZlYXR1cmVzLnJhZikge1xuXHRcdFx0XHR2ZW5kb3IgPSB2ZW5kb3IudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0ZmVhdHVyZXMucmFmID0gd2luZG93W3ZlbmRvcisnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG5cdFx0XHRcdGlmKGZlYXR1cmVzLnJhZikge1xuXHRcdFx0XHRcdGZlYXR1cmVzLmNhZiA9IHdpbmRvd1t2ZW5kb3IrJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ10gfHwgXG5cdFx0XHRcdFx0XHRcdFx0XHR3aW5kb3dbdmVuZG9yKydDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcdFxuXHRcdGlmKCFmZWF0dXJlcy5yYWYpIHtcblx0XHRcdHZhciBsYXN0VGltZSA9IDA7XG5cdFx0XHRmZWF0dXJlcy5yYWYgPSBmdW5jdGlvbihmbikge1xuXHRcdFx0XHR2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblx0XHRcdFx0dmFyIHRpbWVUb0NhbGwgPSBNYXRoLm1heCgwLCAxNiAtIChjdXJyVGltZSAtIGxhc3RUaW1lKSk7XG5cdFx0XHRcdHZhciBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBmbihjdXJyVGltZSArIHRpbWVUb0NhbGwpOyB9LCB0aW1lVG9DYWxsKTtcblx0XHRcdFx0bGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XG5cdFx0XHRcdHJldHVybiBpZDtcblx0XHRcdH07XG5cdFx0XHRmZWF0dXJlcy5jYWYgPSBmdW5jdGlvbihpZCkgeyBjbGVhclRpbWVvdXQoaWQpOyB9O1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBTVkcgc3VwcG9ydFxuXHRcdGZlYXR1cmVzLnN2ZyA9ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TICYmIFxuXHRcdFx0XHRcdFx0ISFkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpLmNyZWF0ZVNWR1JlY3Q7XG5cblx0XHRmcmFtZXdvcmsuZmVhdHVyZXMgPSBmZWF0dXJlcztcblxuXHRcdHJldHVybiBmZWF0dXJlcztcblx0fVxufTtcblxuZnJhbWV3b3JrLmRldGVjdEZlYXR1cmVzKCk7XG5cbi8vIE92ZXJyaWRlIGFkZEV2ZW50TGlzdGVuZXIgZm9yIG9sZCB2ZXJzaW9ucyBvZiBJRVxuaWYoZnJhbWV3b3JrLmZlYXR1cmVzLm9sZElFKSB7XG5cblx0ZnJhbWV3b3JrLmJpbmQgPSBmdW5jdGlvbih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCB1bmJpbmQpIHtcblx0XHRcblx0XHR0eXBlID0gdHlwZS5zcGxpdCgnICcpO1xuXG5cdFx0dmFyIG1ldGhvZE5hbWUgPSAodW5iaW5kID8gJ2RldGFjaCcgOiAnYXR0YWNoJykgKyAnRXZlbnQnLFxuXHRcdFx0ZXZOYW1lLFxuXHRcdFx0X2hhbmRsZUV2ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxpc3RlbmVyLmhhbmRsZUV2ZW50LmNhbGwobGlzdGVuZXIpO1xuXHRcdFx0fTtcblxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRldk5hbWUgPSB0eXBlW2ldO1xuXHRcdFx0aWYoZXZOYW1lKSB7XG5cblx0XHRcdFx0aWYodHlwZW9mIGxpc3RlbmVyID09PSAnb2JqZWN0JyAmJiBsaXN0ZW5lci5oYW5kbGVFdmVudCkge1xuXHRcdFx0XHRcdGlmKCF1bmJpbmQpIHtcblx0XHRcdFx0XHRcdGxpc3RlbmVyWydvbGRJRScgKyBldk5hbWVdID0gX2hhbmRsZUV2O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZighbGlzdGVuZXJbJ29sZElFJyArIGV2TmFtZV0pIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRhcmdldFttZXRob2ROYW1lXSggJ29uJyArIGV2TmFtZSwgbGlzdGVuZXJbJ29sZElFJyArIGV2TmFtZV0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRhcmdldFttZXRob2ROYW1lXSggJ29uJyArIGV2TmFtZSwgbGlzdGVuZXIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdFxufVxuXG4vKj4+ZnJhbWV3b3JrLWJyaWRnZSovXG5cbi8qPj5jb3JlKi9cbi8vZnVuY3Rpb24odGVtcGxhdGUsIFVpQ2xhc3MsIGl0ZW1zLCBvcHRpb25zKVxuXG52YXIgc2VsZiA9IHRoaXM7XG5cbi8qKlxuICogU3RhdGljIHZhcnMsIGRvbid0IGNoYW5nZSB1bmxlc3MgeW91IGtub3cgd2hhdCB5b3UncmUgZG9pbmcuXG4gKi9cbnZhciBET1VCTEVfVEFQX1JBRElVUyA9IDI1LCBcblx0TlVNX0hPTERFUlMgPSAzO1xuXG4vKipcbiAqIE9wdGlvbnNcbiAqL1xudmFyIF9vcHRpb25zID0ge1xuXHRhbGxvd1BhblRvTmV4dDp0cnVlLFxuXHRzcGFjaW5nOiAwLjEyLFxuXHRiZ09wYWNpdHk6IDEsXG5cdG1vdXNlVXNlZDogZmFsc2UsXG5cdGxvb3A6IHRydWUsXG5cdHBpbmNoVG9DbG9zZTogdHJ1ZSxcblx0Y2xvc2VPblNjcm9sbDogdHJ1ZSxcblx0Y2xvc2VPblZlcnRpY2FsRHJhZzogdHJ1ZSxcblx0dmVydGljYWxEcmFnUmFuZ2U6IDAuNzUsXG5cdGhpZGVBbmltYXRpb25EdXJhdGlvbjogMzMzLFxuXHRzaG93QW5pbWF0aW9uRHVyYXRpb246IDMzMyxcblx0c2hvd0hpZGVPcGFjaXR5OiBmYWxzZSxcblx0Zm9jdXM6IHRydWUsXG5cdGVzY0tleTogdHJ1ZSxcblx0YXJyb3dLZXlzOiB0cnVlLFxuXHRtYWluU2Nyb2xsRW5kRnJpY3Rpb246IDAuMzUsXG5cdHBhbkVuZEZyaWN0aW9uOiAwLjM1LFxuXHRpc0NsaWNrYWJsZUVsZW1lbnQ6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIHJldHVybiBlbC50YWdOYW1lID09PSAnQSc7XG4gICAgfSxcbiAgICBnZXREb3VibGVUYXBab29tOiBmdW5jdGlvbihpc01vdXNlQ2xpY2ssIGl0ZW0pIHtcbiAgICBcdGlmKGlzTW91c2VDbGljaykge1xuICAgIFx0XHRyZXR1cm4gMTtcbiAgICBcdH0gZWxzZSB7XG4gICAgXHRcdHJldHVybiBpdGVtLmluaXRpYWxab29tTGV2ZWwgPCAwLjcgPyAxIDogMS4zMztcbiAgICBcdH1cbiAgICB9LFxuICAgIG1heFNwcmVhZFpvb206IDEuMzMsXG5cdG1vZGFsOiB0cnVlLFxuXG5cdC8vIG5vdCBmdWxseSBpbXBsZW1lbnRlZCB5ZXRcblx0c2NhbGVNb2RlOiAnZml0JyAvLyBUT0RPXG59O1xuZnJhbWV3b3JrLmV4dGVuZChfb3B0aW9ucywgb3B0aW9ucyk7XG5cblxuLyoqXG4gKiBQcml2YXRlIGhlbHBlciB2YXJpYWJsZXMgJiBmdW5jdGlvbnNcbiAqL1xuXG52YXIgX2dldEVtcHR5UG9pbnQgPSBmdW5jdGlvbigpIHsgXG5cdFx0cmV0dXJuIHt4OjAseTowfTsgXG5cdH07XG5cbnZhciBfaXNPcGVuLFxuXHRfaXNEZXN0cm95aW5nLFxuXHRfY2xvc2VkQnlTY3JvbGwsXG5cdF9jdXJyZW50SXRlbUluZGV4LFxuXHRfY29udGFpbmVyU3R5bGUsXG5cdF9jb250YWluZXJTaGlmdEluZGV4LFxuXHRfY3VyclBhbkRpc3QgPSBfZ2V0RW1wdHlQb2ludCgpLFxuXHRfc3RhcnRQYW5PZmZzZXQgPSBfZ2V0RW1wdHlQb2ludCgpLFxuXHRfcGFuT2Zmc2V0ID0gX2dldEVtcHR5UG9pbnQoKSxcblx0X3VwTW92ZUV2ZW50cywgLy8gZHJhZyBtb3ZlLCBkcmFnIGVuZCAmIGRyYWcgY2FuY2VsIGV2ZW50cyBhcnJheVxuXHRfZG93bkV2ZW50cywgLy8gZHJhZyBzdGFydCBldmVudHMgYXJyYXlcblx0X2dsb2JhbEV2ZW50SGFuZGxlcnMsXG5cdF92aWV3cG9ydFNpemUgPSB7fSxcblx0X2N1cnJab29tTGV2ZWwsXG5cdF9zdGFydFpvb21MZXZlbCxcblx0X3RyYW5zbGF0ZVByZWZpeCxcblx0X3RyYW5zbGF0ZVN1Zml4LFxuXHRfdXBkYXRlU2l6ZUludGVydmFsLFxuXHRfaXRlbXNOZWVkVXBkYXRlLFxuXHRfY3VyclBvc2l0aW9uSW5kZXggPSAwLFxuXHRfb2Zmc2V0ID0ge30sXG5cdF9zbGlkZVNpemUgPSBfZ2V0RW1wdHlQb2ludCgpLCAvLyBzaXplIG9mIHNsaWRlIGFyZWEsIGluY2x1ZGluZyBzcGFjaW5nXG5cdF9pdGVtSG9sZGVycyxcblx0X3ByZXZJdGVtSW5kZXgsXG5cdF9pbmRleERpZmYgPSAwLCAvLyBkaWZmZXJlbmNlIG9mIGluZGV4ZXMgc2luY2UgbGFzdCBjb250ZW50IHVwZGF0ZVxuXHRfZHJhZ1N0YXJ0RXZlbnQsXG5cdF9kcmFnTW92ZUV2ZW50LFxuXHRfZHJhZ0VuZEV2ZW50LFxuXHRfZHJhZ0NhbmNlbEV2ZW50LFxuXHRfdHJhbnNmb3JtS2V5LFxuXHRfcG9pbnRlckV2ZW50RW5hYmxlZCxcblx0X2lzRml4ZWRQb3NpdGlvbiA9IHRydWUsXG5cdF9saWtlbHlUb3VjaERldmljZSxcblx0X21vZHVsZXMgPSBbXSxcblx0X3JlcXVlc3RBRixcblx0X2NhbmNlbEFGLFxuXHRfaW5pdGFsQ2xhc3NOYW1lLFxuXHRfaW5pdGFsV2luZG93U2Nyb2xsWSxcblx0X29sZElFLFxuXHRfY3VycmVudFdpbmRvd1Njcm9sbFksXG5cdF9mZWF0dXJlcyxcblx0X3dpbmRvd1Zpc2libGVTaXplID0ge30sXG5cdF9yZW5kZXJNYXhSZXNvbHV0aW9uID0gZmFsc2UsXG5cblx0Ly8gUmVnaXN0ZXJzIFBob3RvU1dpcGUgbW9kdWxlIChIaXN0b3J5LCBDb250cm9sbGVyIC4uLilcblx0X3JlZ2lzdGVyTW9kdWxlID0gZnVuY3Rpb24obmFtZSwgbW9kdWxlKSB7XG5cdFx0ZnJhbWV3b3JrLmV4dGVuZChzZWxmLCBtb2R1bGUucHVibGljTWV0aG9kcyk7XG5cdFx0X21vZHVsZXMucHVzaChuYW1lKTtcblx0fSxcblxuXHRfZ2V0TG9vcGVkSWQgPSBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBudW1TbGlkZXMgPSBfZ2V0TnVtSXRlbXMoKTtcblx0XHRpZihpbmRleCA+IG51bVNsaWRlcyAtIDEpIHtcblx0XHRcdHJldHVybiBpbmRleCAtIG51bVNsaWRlcztcblx0XHR9IGVsc2UgIGlmKGluZGV4IDwgMCkge1xuXHRcdFx0cmV0dXJuIG51bVNsaWRlcyArIGluZGV4O1xuXHRcdH1cblx0XHRyZXR1cm4gaW5kZXg7XG5cdH0sXG5cdFxuXHQvLyBNaWNybyBiaW5kL3RyaWdnZXJcblx0X2xpc3RlbmVycyA9IHt9LFxuXHRfbGlzdGVuID0gZnVuY3Rpb24obmFtZSwgZm4pIHtcblx0XHRpZighX2xpc3RlbmVyc1tuYW1lXSkge1xuXHRcdFx0X2xpc3RlbmVyc1tuYW1lXSA9IFtdO1xuXHRcdH1cblx0XHRyZXR1cm4gX2xpc3RlbmVyc1tuYW1lXS5wdXNoKGZuKTtcblx0fSxcblx0X3Nob3V0ID0gZnVuY3Rpb24obmFtZSkge1xuXHRcdHZhciBsaXN0ZW5lcnMgPSBfbGlzdGVuZXJzW25hbWVdO1xuXG5cdFx0aWYobGlzdGVuZXJzKSB7XG5cdFx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0XHRhcmdzLnNoaWZ0KCk7XG5cblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0bGlzdGVuZXJzW2ldLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRfZ2V0Q3VycmVudFRpbWUgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdH0sXG5cdF9hcHBseUJnT3BhY2l0eSA9IGZ1bmN0aW9uKG9wYWNpdHkpIHtcblx0XHRfYmdPcGFjaXR5ID0gb3BhY2l0eTtcblx0XHRzZWxmLmJnLnN0eWxlLm9wYWNpdHkgPSBvcGFjaXR5ICogX29wdGlvbnMuYmdPcGFjaXR5O1xuXHR9LFxuXG5cdF9hcHBseVpvb21UcmFuc2Zvcm0gPSBmdW5jdGlvbihzdHlsZU9iaix4LHksem9vbSxpdGVtKSB7XG5cdFx0aWYoIV9yZW5kZXJNYXhSZXNvbHV0aW9uIHx8IChpdGVtICYmIGl0ZW0gIT09IHNlbGYuY3Vyckl0ZW0pICkge1xuXHRcdFx0em9vbSA9IHpvb20gLyAoaXRlbSA/IGl0ZW0uZml0UmF0aW8gOiBzZWxmLmN1cnJJdGVtLmZpdFJhdGlvKTtcdFxuXHRcdH1cblx0XHRcdFxuXHRcdHN0eWxlT2JqW190cmFuc2Zvcm1LZXldID0gX3RyYW5zbGF0ZVByZWZpeCArIHggKyAncHgsICcgKyB5ICsgJ3B4JyArIF90cmFuc2xhdGVTdWZpeCArICcgc2NhbGUoJyArIHpvb20gKyAnKSc7XG5cdH0sXG5cdF9hcHBseUN1cnJlbnRab29tUGFuID0gZnVuY3Rpb24oIGFsbG93UmVuZGVyUmVzb2x1dGlvbiApIHtcblx0XHRpZihfY3Vyclpvb21FbGVtZW50U3R5bGUpIHtcblxuXHRcdFx0aWYoYWxsb3dSZW5kZXJSZXNvbHV0aW9uKSB7XG5cdFx0XHRcdGlmKF9jdXJyWm9vbUxldmVsID4gc2VsZi5jdXJySXRlbS5maXRSYXRpbykge1xuXHRcdFx0XHRcdGlmKCFfcmVuZGVyTWF4UmVzb2x1dGlvbikge1xuXHRcdFx0XHRcdFx0X3NldEltYWdlU2l6ZShzZWxmLmN1cnJJdGVtLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRfcmVuZGVyTWF4UmVzb2x1dGlvbiA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmKF9yZW5kZXJNYXhSZXNvbHV0aW9uKSB7XG5cdFx0XHRcdFx0XHRfc2V0SW1hZ2VTaXplKHNlbGYuY3Vyckl0ZW0pO1xuXHRcdFx0XHRcdFx0X3JlbmRlck1heFJlc29sdXRpb24gPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXG5cdFx0XHRfYXBwbHlab29tVHJhbnNmb3JtKF9jdXJyWm9vbUVsZW1lbnRTdHlsZSwgX3Bhbk9mZnNldC54LCBfcGFuT2Zmc2V0LnksIF9jdXJyWm9vbUxldmVsKTtcblx0XHR9XG5cdH0sXG5cdF9hcHBseVpvb21QYW5Ub0l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYoaXRlbS5jb250YWluZXIpIHtcblxuXHRcdFx0X2FwcGx5Wm9vbVRyYW5zZm9ybShpdGVtLmNvbnRhaW5lci5zdHlsZSwgXG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5pbml0aWFsUG9zaXRpb24ueCwgXG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5pbml0aWFsUG9zaXRpb24ueSwgXG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5pbml0aWFsWm9vbUxldmVsLFxuXHRcdFx0XHRcdFx0XHRcdGl0ZW0pO1xuXHRcdH1cblx0fSxcblx0X3NldFRyYW5zbGF0ZVggPSBmdW5jdGlvbih4LCBlbFN0eWxlKSB7XG5cdFx0ZWxTdHlsZVtfdHJhbnNmb3JtS2V5XSA9IF90cmFuc2xhdGVQcmVmaXggKyB4ICsgJ3B4LCAwcHgnICsgX3RyYW5zbGF0ZVN1Zml4O1xuXHR9LFxuXHRfbW92ZU1haW5TY3JvbGwgPSBmdW5jdGlvbih4LCBkcmFnZ2luZykge1xuXG5cdFx0aWYoIV9vcHRpb25zLmxvb3AgJiYgZHJhZ2dpbmcpIHtcblx0XHRcdHZhciBuZXdTbGlkZUluZGV4T2Zmc2V0ID0gX2N1cnJlbnRJdGVtSW5kZXggKyAoX3NsaWRlU2l6ZS54ICogX2N1cnJQb3NpdGlvbkluZGV4IC0geCkgLyBfc2xpZGVTaXplLngsXG5cdFx0XHRcdGRlbHRhID0gTWF0aC5yb3VuZCh4IC0gX21haW5TY3JvbGxQb3MueCk7XG5cblx0XHRcdGlmKCAobmV3U2xpZGVJbmRleE9mZnNldCA8IDAgJiYgZGVsdGEgPiAwKSB8fCBcblx0XHRcdFx0KG5ld1NsaWRlSW5kZXhPZmZzZXQgPj0gX2dldE51bUl0ZW1zKCkgLSAxICYmIGRlbHRhIDwgMCkgKSB7XG5cdFx0XHRcdHggPSBfbWFpblNjcm9sbFBvcy54ICsgZGVsdGEgKiBfb3B0aW9ucy5tYWluU2Nyb2xsRW5kRnJpY3Rpb247XG5cdFx0XHR9IFxuXHRcdH1cblx0XHRcblx0XHRfbWFpblNjcm9sbFBvcy54ID0geDtcblx0XHRfc2V0VHJhbnNsYXRlWCh4LCBfY29udGFpbmVyU3R5bGUpO1xuXHR9LFxuXHRfY2FsY3VsYXRlUGFuT2Zmc2V0ID0gZnVuY3Rpb24oYXhpcywgem9vbUxldmVsKSB7XG5cdFx0dmFyIG0gPSBfbWlkWm9vbVBvaW50W2F4aXNdIC0gX29mZnNldFtheGlzXTtcblx0XHRyZXR1cm4gX3N0YXJ0UGFuT2Zmc2V0W2F4aXNdICsgX2N1cnJQYW5EaXN0W2F4aXNdICsgbSAtIG0gKiAoIHpvb21MZXZlbCAvIF9zdGFydFpvb21MZXZlbCApO1xuXHR9LFxuXHRcblx0X2VxdWFsaXplUG9pbnRzID0gZnVuY3Rpb24ocDEsIHAyKSB7XG5cdFx0cDEueCA9IHAyLng7XG5cdFx0cDEueSA9IHAyLnk7XG5cdFx0aWYocDIuaWQpIHtcblx0XHRcdHAxLmlkID0gcDIuaWQ7XG5cdFx0fVxuXHR9LFxuXHRfcm91bmRQb2ludCA9IGZ1bmN0aW9uKHApIHtcblx0XHRwLnggPSBNYXRoLnJvdW5kKHAueCk7XG5cdFx0cC55ID0gTWF0aC5yb3VuZChwLnkpO1xuXHR9LFxuXG5cdF9tb3VzZU1vdmVUaW1lb3V0ID0gbnVsbCxcblx0X29uRmlyc3RNb3VzZU1vdmUgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBXYWl0IHVudGlsIG1vdXNlIG1vdmUgZXZlbnQgaXMgZmlyZWQgYXQgbGVhc3QgdHdpY2UgZHVyaW5nIDEwMG1zXG5cdFx0Ly8gV2UgZG8gdGhpcywgYmVjYXVzZSBzb21lIG1vYmlsZSBicm93c2VycyB0cmlnZ2VyIGl0IG9uIHRvdWNoc3RhcnRcblx0XHRpZihfbW91c2VNb3ZlVGltZW91dCApIHsgXG5cdFx0XHRmcmFtZXdvcmsudW5iaW5kKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgX29uRmlyc3RNb3VzZU1vdmUpO1xuXHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKHRlbXBsYXRlLCAncHN3cC0taGFzX21vdXNlJyk7XG5cdFx0XHRfb3B0aW9ucy5tb3VzZVVzZWQgPSB0cnVlO1xuXHRcdFx0X3Nob3V0KCdtb3VzZVVzZWQnKTtcblx0XHR9XG5cdFx0X21vdXNlTW92ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0X21vdXNlTW92ZVRpbWVvdXQgPSBudWxsO1xuXHRcdH0sIDEwMCk7XG5cdH0sXG5cblx0X2JpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcblx0XHRmcmFtZXdvcmsuYmluZChkb2N1bWVudCwgJ2tleWRvd24nLCBzZWxmKTtcblxuXHRcdGlmKF9mZWF0dXJlcy50cmFuc2Zvcm0pIHtcblx0XHRcdC8vIGRvbid0IGJpbmQgY2xpY2sgZXZlbnQgaW4gYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHRyYW5zZm9ybSAobW9zdGx5IElFOClcblx0XHRcdGZyYW1ld29yay5iaW5kKHNlbGYuc2Nyb2xsV3JhcCwgJ2NsaWNrJywgc2VsZik7XG5cdFx0fVxuXHRcdFxuXG5cdFx0aWYoIV9vcHRpb25zLm1vdXNlVXNlZCkge1xuXHRcdFx0ZnJhbWV3b3JrLmJpbmQoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfb25GaXJzdE1vdXNlTW92ZSk7XG5cdFx0fVxuXG5cdFx0ZnJhbWV3b3JrLmJpbmQod2luZG93LCAncmVzaXplIHNjcm9sbCcsIHNlbGYpO1xuXG5cdFx0X3Nob3V0KCdiaW5kRXZlbnRzJyk7XG5cdH0sXG5cblx0X3VuYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXHRcdGZyYW1ld29yay51bmJpbmQod2luZG93LCAncmVzaXplJywgc2VsZik7XG5cdFx0ZnJhbWV3b3JrLnVuYmluZCh3aW5kb3csICdzY3JvbGwnLCBfZ2xvYmFsRXZlbnRIYW5kbGVycy5zY3JvbGwpO1xuXHRcdGZyYW1ld29yay51bmJpbmQoZG9jdW1lbnQsICdrZXlkb3duJywgc2VsZik7XG5cdFx0ZnJhbWV3b3JrLnVuYmluZChkb2N1bWVudCwgJ21vdXNlbW92ZScsIF9vbkZpcnN0TW91c2VNb3ZlKTtcblxuXHRcdGlmKF9mZWF0dXJlcy50cmFuc2Zvcm0pIHtcblx0XHRcdGZyYW1ld29yay51bmJpbmQoc2VsZi5zY3JvbGxXcmFwLCAnY2xpY2snLCBzZWxmKTtcblx0XHR9XG5cblx0XHRpZihfaXNEcmFnZ2luZykge1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZCh3aW5kb3csIF91cE1vdmVFdmVudHMsIHNlbGYpO1xuXHRcdH1cblxuXHRcdF9zaG91dCgndW5iaW5kRXZlbnRzJyk7XG5cdH0sXG5cdFxuXHRfY2FsY3VsYXRlUGFuQm91bmRzID0gZnVuY3Rpb24oem9vbUxldmVsLCB1cGRhdGUpIHtcblx0XHR2YXIgYm91bmRzID0gX2NhbGN1bGF0ZUl0ZW1TaXplKCBzZWxmLmN1cnJJdGVtLCBfdmlld3BvcnRTaXplLCB6b29tTGV2ZWwgKTtcblx0XHRpZih1cGRhdGUpIHtcblx0XHRcdF9jdXJyUGFuQm91bmRzID0gYm91bmRzO1xuXHRcdH1cblx0XHRyZXR1cm4gYm91bmRzO1xuXHR9LFxuXHRcblx0X2dldE1pblpvb21MZXZlbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRpZighaXRlbSkge1xuXHRcdFx0aXRlbSA9IHNlbGYuY3Vyckl0ZW07XG5cdFx0fVxuXHRcdHJldHVybiBpdGVtLmluaXRpYWxab29tTGV2ZWw7XG5cdH0sXG5cdF9nZXRNYXhab29tTGV2ZWwgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYoIWl0ZW0pIHtcblx0XHRcdGl0ZW0gPSBzZWxmLmN1cnJJdGVtO1xuXHRcdH1cblx0XHRyZXR1cm4gaXRlbS53ID4gMCA/IF9vcHRpb25zLm1heFNwcmVhZFpvb20gOiAxO1xuXHR9LFxuXG5cdC8vIFJldHVybiB0cnVlIGlmIG9mZnNldCBpcyBvdXQgb2YgdGhlIGJvdW5kc1xuXHRfbW9kaWZ5RGVzdFBhbk9mZnNldCA9IGZ1bmN0aW9uKGF4aXMsIGRlc3RQYW5Cb3VuZHMsIGRlc3RQYW5PZmZzZXQsIGRlc3Rab29tTGV2ZWwpIHtcblx0XHRpZihkZXN0Wm9vbUxldmVsID09PSBzZWxmLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWwpIHtcblx0XHRcdGRlc3RQYW5PZmZzZXRbYXhpc10gPSBzZWxmLmN1cnJJdGVtLmluaXRpYWxQb3NpdGlvbltheGlzXTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0UGFuT2Zmc2V0W2F4aXNdID0gX2NhbGN1bGF0ZVBhbk9mZnNldChheGlzLCBkZXN0Wm9vbUxldmVsKTsgXG5cblx0XHRcdGlmKGRlc3RQYW5PZmZzZXRbYXhpc10gPiBkZXN0UGFuQm91bmRzLm1pbltheGlzXSkge1xuXHRcdFx0XHRkZXN0UGFuT2Zmc2V0W2F4aXNdID0gZGVzdFBhbkJvdW5kcy5taW5bYXhpc107XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBlbHNlIGlmKGRlc3RQYW5PZmZzZXRbYXhpc10gPCBkZXN0UGFuQm91bmRzLm1heFtheGlzXSApIHtcblx0XHRcdFx0ZGVzdFBhbk9mZnNldFtheGlzXSA9IGRlc3RQYW5Cb3VuZHMubWF4W2F4aXNdO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdF9zZXR1cFRyYW5zZm9ybXMgPSBmdW5jdGlvbigpIHtcblxuXHRcdGlmKF90cmFuc2Zvcm1LZXkpIHtcblx0XHRcdC8vIHNldHVwIDNkIHRyYW5zZm9ybXNcblx0XHRcdHZhciBhbGxvdzNkVHJhbnNmb3JtID0gX2ZlYXR1cmVzLnBlcnNwZWN0aXZlICYmICFfbGlrZWx5VG91Y2hEZXZpY2U7XG5cdFx0XHRfdHJhbnNsYXRlUHJlZml4ID0gJ3RyYW5zbGF0ZScgKyAoYWxsb3czZFRyYW5zZm9ybSA/ICczZCgnIDogJygnKTtcblx0XHRcdF90cmFuc2xhdGVTdWZpeCA9IF9mZWF0dXJlcy5wZXJzcGVjdGl2ZSA/ICcsIDBweCknIDogJyknO1x0XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT3ZlcnJpZGUgem9vbS9wYW4vbW92ZSBmdW5jdGlvbnMgaW4gY2FzZSBvbGQgYnJvd3NlciBpcyB1c2VkIChtb3N0IGxpa2VseSBJRSlcblx0XHQvLyAoc28gdGhleSB1c2UgbGVmdC90b3Avd2lkdGgvaGVpZ2h0LCBpbnN0ZWFkIG9mIENTUyB0cmFuc2Zvcm0pXG5cdFxuXHRcdF90cmFuc2Zvcm1LZXkgPSAnbGVmdCc7XG5cdFx0ZnJhbWV3b3JrLmFkZENsYXNzKHRlbXBsYXRlLCAncHN3cC0taWUnKTtcblxuXHRcdF9zZXRUcmFuc2xhdGVYID0gZnVuY3Rpb24oeCwgZWxTdHlsZSkge1xuXHRcdFx0ZWxTdHlsZS5sZWZ0ID0geCArICdweCc7XG5cdFx0fTtcblx0XHRfYXBwbHlab29tUGFuVG9JdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHR2YXIgem9vbVJhdGlvID0gaXRlbS5maXRSYXRpbyA+IDEgPyAxIDogaXRlbS5maXRSYXRpbyxcblx0XHRcdFx0cyA9IGl0ZW0uY29udGFpbmVyLnN0eWxlLFxuXHRcdFx0XHR3ID0gem9vbVJhdGlvICogaXRlbS53LFxuXHRcdFx0XHRoID0gem9vbVJhdGlvICogaXRlbS5oO1xuXG5cdFx0XHRzLndpZHRoID0gdyArICdweCc7XG5cdFx0XHRzLmhlaWdodCA9IGggKyAncHgnO1xuXHRcdFx0cy5sZWZ0ID0gaXRlbS5pbml0aWFsUG9zaXRpb24ueCArICdweCc7XG5cdFx0XHRzLnRvcCA9IGl0ZW0uaW5pdGlhbFBvc2l0aW9uLnkgKyAncHgnO1xuXG5cdFx0fTtcblx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoX2N1cnJab29tRWxlbWVudFN0eWxlKSB7XG5cblx0XHRcdFx0dmFyIHMgPSBfY3Vyclpvb21FbGVtZW50U3R5bGUsXG5cdFx0XHRcdFx0aXRlbSA9IHNlbGYuY3Vyckl0ZW0sXG5cdFx0XHRcdFx0em9vbVJhdGlvID0gaXRlbS5maXRSYXRpbyA+IDEgPyAxIDogaXRlbS5maXRSYXRpbyxcblx0XHRcdFx0XHR3ID0gem9vbVJhdGlvICogaXRlbS53LFxuXHRcdFx0XHRcdGggPSB6b29tUmF0aW8gKiBpdGVtLmg7XG5cblx0XHRcdFx0cy53aWR0aCA9IHcgKyAncHgnO1xuXHRcdFx0XHRzLmhlaWdodCA9IGggKyAncHgnO1xuXG5cblx0XHRcdFx0cy5sZWZ0ID0gX3Bhbk9mZnNldC54ICsgJ3B4Jztcblx0XHRcdFx0cy50b3AgPSBfcGFuT2Zmc2V0LnkgKyAncHgnO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fTtcblx0fSxcblxuXHRfb25LZXlEb3duID0gZnVuY3Rpb24oZSkge1xuXHRcdHZhciBrZXlkb3duQWN0aW9uID0gJyc7XG5cdFx0aWYoX29wdGlvbnMuZXNjS2V5ICYmIGUua2V5Q29kZSA9PT0gMjcpIHsgXG5cdFx0XHRrZXlkb3duQWN0aW9uID0gJ2Nsb3NlJztcblx0XHR9IGVsc2UgaWYoX29wdGlvbnMuYXJyb3dLZXlzKSB7XG5cdFx0XHRpZihlLmtleUNvZGUgPT09IDM3KSB7XG5cdFx0XHRcdGtleWRvd25BY3Rpb24gPSAncHJldic7XG5cdFx0XHR9IGVsc2UgaWYoZS5rZXlDb2RlID09PSAzOSkgeyBcblx0XHRcdFx0a2V5ZG93bkFjdGlvbiA9ICduZXh0Jztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihrZXlkb3duQWN0aW9uKSB7XG5cdFx0XHQvLyBkb24ndCBkbyBhbnl0aGluZyBpZiBzcGVjaWFsIGtleSBwcmVzc2VkIHRvIHByZXZlbnQgZnJvbSBvdmVycmlkaW5nIGRlZmF1bHQgYnJvd3NlciBhY3Rpb25zXG5cdFx0XHQvLyBlLmcuIGluIENocm9tZSBvbiBNYWMgY21kK2Fycm93LWxlZnQgcmV0dXJucyB0byBwcmV2aW91cyBwYWdlXG5cdFx0XHRpZiggIWUuY3RybEtleSAmJiAhZS5hbHRLZXkgJiYgIWUuc2hpZnRLZXkgJiYgIWUubWV0YUtleSApIHtcblx0XHRcdFx0aWYoZS5wcmV2ZW50RGVmYXVsdCkge1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlLnJldHVyblZhbHVlID0gZmFsc2U7XG5cdFx0XHRcdH0gXG5cdFx0XHRcdHNlbGZba2V5ZG93bkFjdGlvbl0oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0X29uR2xvYmFsQ2xpY2sgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYoIWUpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBkb24ndCBhbGxvdyBjbGljayBldmVudCB0byBwYXNzIHRocm91Z2ggd2hlbiB0cmlnZ2VyaW5nIGFmdGVyIGRyYWcgb3Igc29tZSBvdGhlciBnZXN0dXJlXG5cdFx0aWYoX21vdmVkIHx8IF96b29tU3RhcnRlZCB8fCBfbWFpblNjcm9sbEFuaW1hdGluZyB8fCBfdmVydGljYWxEcmFnSW5pdGlhdGVkKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblxuXHRfdXBkYXRlUGFnZVNjcm9sbE9mZnNldCA9IGZ1bmN0aW9uKCkge1xuXHRcdHNlbGYuc2V0U2Nyb2xsT2Zmc2V0KDAsIGZyYW1ld29yay5nZXRTY3JvbGxZKCkpO1x0XHRcblx0fTtcblx0XG5cblxuXHRcblxuXG5cbi8vIE1pY3JvIGFuaW1hdGlvbiBlbmdpbmVcbnZhciBfYW5pbWF0aW9ucyA9IHt9LFxuXHRfbnVtQW5pbWF0aW9ucyA9IDAsXG5cdF9zdG9wQW5pbWF0aW9uID0gZnVuY3Rpb24obmFtZSkge1xuXHRcdGlmKF9hbmltYXRpb25zW25hbWVdKSB7XG5cdFx0XHRpZihfYW5pbWF0aW9uc1tuYW1lXS5yYWYpIHtcblx0XHRcdFx0X2NhbmNlbEFGKCBfYW5pbWF0aW9uc1tuYW1lXS5yYWYgKTtcblx0XHRcdH1cblx0XHRcdF9udW1BbmltYXRpb25zLS07XG5cdFx0XHRkZWxldGUgX2FuaW1hdGlvbnNbbmFtZV07XG5cdFx0fVxuXHR9LFxuXHRfcmVnaXN0ZXJTdGFydEFuaW1hdGlvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRpZihfYW5pbWF0aW9uc1tuYW1lXSkge1xuXHRcdFx0X3N0b3BBbmltYXRpb24obmFtZSk7XG5cdFx0fVxuXHRcdGlmKCFfYW5pbWF0aW9uc1tuYW1lXSkge1xuXHRcdFx0X251bUFuaW1hdGlvbnMrKztcblx0XHRcdF9hbmltYXRpb25zW25hbWVdID0ge307XG5cdFx0fVxuXHR9LFxuXHRfc3RvcEFsbEFuaW1hdGlvbnMgPSBmdW5jdGlvbigpIHtcblx0XHRmb3IgKHZhciBwcm9wIGluIF9hbmltYXRpb25zKSB7XG5cblx0XHRcdGlmKCBfYW5pbWF0aW9ucy5oYXNPd25Qcm9wZXJ0eSggcHJvcCApICkge1xuXHRcdFx0XHRfc3RvcEFuaW1hdGlvbihwcm9wKTtcblx0XHRcdH0gXG5cdFx0XHRcblx0XHR9XG5cdH0sXG5cdF9hbmltYXRlUHJvcCA9IGZ1bmN0aW9uKG5hbWUsIGIsIGVuZFByb3AsIGQsIGVhc2luZ0ZuLCBvblVwZGF0ZSwgb25Db21wbGV0ZSkge1xuXHRcdHZhciBzdGFydEFuaW1UaW1lID0gX2dldEN1cnJlbnRUaW1lKCksIHQ7XG5cdFx0X3JlZ2lzdGVyU3RhcnRBbmltYXRpb24obmFtZSk7XG5cblx0XHR2YXIgYW5pbWxvb3AgPSBmdW5jdGlvbigpe1xuXHRcdFx0aWYgKCBfYW5pbWF0aW9uc1tuYW1lXSApIHtcblx0XHRcdFx0XG5cdFx0XHRcdHQgPSBfZ2V0Q3VycmVudFRpbWUoKSAtIHN0YXJ0QW5pbVRpbWU7IC8vIHRpbWUgZGlmZlxuXHRcdFx0XHQvL2IgLSBiZWdpbm5pbmcgKHN0YXJ0IHByb3ApXG5cdFx0XHRcdC8vZCAtIGFuaW0gZHVyYXRpb25cblxuXHRcdFx0XHRpZiAoIHQgPj0gZCApIHtcblx0XHRcdFx0XHRfc3RvcEFuaW1hdGlvbihuYW1lKTtcblx0XHRcdFx0XHRvblVwZGF0ZShlbmRQcm9wKTtcblx0XHRcdFx0XHRpZihvbkNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHRvbkNvbXBsZXRlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRvblVwZGF0ZSggKGVuZFByb3AgLSBiKSAqIGVhc2luZ0ZuKHQvZCkgKyBiICk7XG5cblx0XHRcdFx0X2FuaW1hdGlvbnNbbmFtZV0ucmFmID0gX3JlcXVlc3RBRihhbmltbG9vcCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRhbmltbG9vcCgpO1xuXHR9O1xuXHRcblxuXG52YXIgcHVibGljTWV0aG9kcyA9IHtcblxuXHQvLyBtYWtlIGEgZmV3IGxvY2FsIHZhcmlhYmxlcyBhbmQgZnVuY3Rpb25zIHB1YmxpY1xuXHRzaG91dDogX3Nob3V0LFxuXHRsaXN0ZW46IF9saXN0ZW4sXG5cdHZpZXdwb3J0U2l6ZTogX3ZpZXdwb3J0U2l6ZSxcblx0b3B0aW9uczogX29wdGlvbnMsXG5cblx0aXNNYWluU2Nyb2xsQW5pbWF0aW5nOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gX21haW5TY3JvbGxBbmltYXRpbmc7XG5cdH0sXG5cdGdldFpvb21MZXZlbDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIF9jdXJyWm9vbUxldmVsO1xuXHR9LFxuXHRnZXRDdXJyZW50SW5kZXg6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBfY3VycmVudEl0ZW1JbmRleDtcblx0fSxcblx0aXNEcmFnZ2luZzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIF9pc0RyYWdnaW5nO1xuXHR9LFx0XG5cdGlzWm9vbWluZzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIF9pc1pvb21pbmc7XG5cdH0sXG5cdHNldFNjcm9sbE9mZnNldDogZnVuY3Rpb24oeCx5KSB7XG5cdFx0X29mZnNldC54ID0geDtcblx0XHRfY3VycmVudFdpbmRvd1Njcm9sbFkgPSBfb2Zmc2V0LnkgPSB5O1xuXHRcdF9zaG91dCgndXBkYXRlU2Nyb2xsT2Zmc2V0JywgX29mZnNldCk7XG5cdH0sXG5cdGFwcGx5Wm9vbVBhbjogZnVuY3Rpb24oem9vbUxldmVsLHBhblgscGFuWSxhbGxvd1JlbmRlclJlc29sdXRpb24pIHtcblx0XHRfcGFuT2Zmc2V0LnggPSBwYW5YO1xuXHRcdF9wYW5PZmZzZXQueSA9IHBhblk7XG5cdFx0X2N1cnJab29tTGV2ZWwgPSB6b29tTGV2ZWw7XG5cdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oIGFsbG93UmVuZGVyUmVzb2x1dGlvbiApO1xuXHR9LFxuXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYoX2lzT3BlbiB8fCBfaXNEZXN0cm95aW5nKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGk7XG5cblx0XHRzZWxmLmZyYW1ld29yayA9IGZyYW1ld29yazsgLy8gYmFzaWMgZnVuY3Rpb25hbGl0eVxuXHRcdHNlbGYudGVtcGxhdGUgPSB0ZW1wbGF0ZTsgLy8gcm9vdCBET00gZWxlbWVudCBvZiBQaG90b1N3aXBlXG5cdFx0c2VsZi5iZyA9IGZyYW1ld29yay5nZXRDaGlsZEJ5Q2xhc3ModGVtcGxhdGUsICdwc3dwX19iZycpO1xuXG5cdFx0X2luaXRhbENsYXNzTmFtZSA9IHRlbXBsYXRlLmNsYXNzTmFtZTtcblx0XHRfaXNPcGVuID0gdHJ1ZTtcblx0XHRcdFx0XG5cdFx0X2ZlYXR1cmVzID0gZnJhbWV3b3JrLmRldGVjdEZlYXR1cmVzKCk7XG5cdFx0X3JlcXVlc3RBRiA9IF9mZWF0dXJlcy5yYWY7XG5cdFx0X2NhbmNlbEFGID0gX2ZlYXR1cmVzLmNhZjtcblx0XHRfdHJhbnNmb3JtS2V5ID0gX2ZlYXR1cmVzLnRyYW5zZm9ybTtcblx0XHRfb2xkSUUgPSBfZmVhdHVyZXMub2xkSUU7XG5cdFx0XG5cdFx0c2VsZi5zY3JvbGxXcmFwID0gZnJhbWV3b3JrLmdldENoaWxkQnlDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3BfX3Njcm9sbC13cmFwJyk7XG5cdFx0c2VsZi5jb250YWluZXIgPSBmcmFtZXdvcmsuZ2V0Q2hpbGRCeUNsYXNzKHNlbGYuc2Nyb2xsV3JhcCwgJ3Bzd3BfX2NvbnRhaW5lcicpO1xuXG5cdFx0X2NvbnRhaW5lclN0eWxlID0gc2VsZi5jb250YWluZXIuc3R5bGU7IC8vIGZvciBmYXN0IGFjY2Vzc1xuXG5cdFx0Ly8gT2JqZWN0cyB0aGF0IGhvbGQgc2xpZGVzICh0aGVyZSBhcmUgb25seSAzIGluIERPTSlcblx0XHRzZWxmLml0ZW1Ib2xkZXJzID0gX2l0ZW1Ib2xkZXJzID0gW1xuXHRcdFx0e2VsOnNlbGYuY29udGFpbmVyLmNoaWxkcmVuWzBdICwgd3JhcDowLCBpbmRleDogLTF9LFxuXHRcdFx0e2VsOnNlbGYuY29udGFpbmVyLmNoaWxkcmVuWzFdICwgd3JhcDowLCBpbmRleDogLTF9LFxuXHRcdFx0e2VsOnNlbGYuY29udGFpbmVyLmNoaWxkcmVuWzJdICwgd3JhcDowLCBpbmRleDogLTF9XG5cdFx0XTtcblxuXHRcdC8vIGhpZGUgbmVhcmJ5IGl0ZW0gaG9sZGVycyB1bnRpbCBpbml0aWFsIHpvb20gYW5pbWF0aW9uIGZpbmlzaGVzICh0byBhdm9pZCBleHRyYSBQYWludHMpXG5cdFx0X2l0ZW1Ib2xkZXJzWzBdLmVsLnN0eWxlLmRpc3BsYXkgPSBfaXRlbUhvbGRlcnNbMl0uZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuXHRcdF9zZXR1cFRyYW5zZm9ybXMoKTtcblxuXHRcdC8vIFNldHVwIGdsb2JhbCBldmVudHNcblx0XHRfZ2xvYmFsRXZlbnRIYW5kbGVycyA9IHtcblx0XHRcdHJlc2l6ZTogc2VsZi51cGRhdGVTaXplLFxuXHRcdFx0c2Nyb2xsOiBfdXBkYXRlUGFnZVNjcm9sbE9mZnNldCxcblx0XHRcdGtleWRvd246IF9vbktleURvd24sXG5cdFx0XHRjbGljazogX29uR2xvYmFsQ2xpY2tcblx0XHR9O1xuXG5cdFx0Ly8gZGlzYWJsZSBzaG93L2hpZGUgZWZmZWN0cyBvbiBvbGQgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IENTUyBhbmltYXRpb25zIG9yIHRyYW5zZm9ybXMsIFxuXHRcdC8vIG9sZCBJT1MsIEFuZHJvaWQgYW5kIE9wZXJhIG1vYmlsZS4gQmxhY2tiZXJyeSBzZWVtcyB0byB3b3JrIGZpbmUsIGV2ZW4gb2xkZXIgbW9kZWxzLlxuXHRcdHZhciBvbGRQaG9uZSA9IF9mZWF0dXJlcy5pc09sZElPU1Bob25lIHx8IF9mZWF0dXJlcy5pc09sZEFuZHJvaWQgfHwgX2ZlYXR1cmVzLmlzTW9iaWxlT3BlcmE7XG5cdFx0aWYoIV9mZWF0dXJlcy5hbmltYXRpb25OYW1lIHx8ICFfZmVhdHVyZXMudHJhbnNmb3JtIHx8IG9sZFBob25lKSB7XG5cdFx0XHRfb3B0aW9ucy5zaG93QW5pbWF0aW9uRHVyYXRpb24gPSBfb3B0aW9ucy5oaWRlQW5pbWF0aW9uRHVyYXRpb24gPSAwO1xuXHRcdH1cblxuXHRcdC8vIGluaXQgbW9kdWxlc1xuXHRcdGZvcihpID0gMDsgaSA8IF9tb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRzZWxmWydpbml0JyArIF9tb2R1bGVzW2ldXSgpO1xuXHRcdH1cblx0XHRcblx0XHQvLyBpbml0XG5cdFx0aWYoVWlDbGFzcykge1xuXHRcdFx0dmFyIHVpID0gc2VsZi51aSA9IG5ldyBVaUNsYXNzKHNlbGYsIGZyYW1ld29yayk7XG5cdFx0XHR1aS5pbml0KCk7XG5cdFx0fVxuXG5cdFx0X3Nob3V0KCdmaXJzdFVwZGF0ZScpO1xuXHRcdF9jdXJyZW50SXRlbUluZGV4ID0gX2N1cnJlbnRJdGVtSW5kZXggfHwgX29wdGlvbnMuaW5kZXggfHwgMDtcblx0XHQvLyB2YWxpZGF0ZSBpbmRleFxuXHRcdGlmKCBpc05hTihfY3VycmVudEl0ZW1JbmRleCkgfHwgX2N1cnJlbnRJdGVtSW5kZXggPCAwIHx8IF9jdXJyZW50SXRlbUluZGV4ID49IF9nZXROdW1JdGVtcygpICkge1xuXHRcdFx0X2N1cnJlbnRJdGVtSW5kZXggPSAwO1xuXHRcdH1cblx0XHRzZWxmLmN1cnJJdGVtID0gX2dldEl0ZW1BdCggX2N1cnJlbnRJdGVtSW5kZXggKTtcblxuXHRcdFxuXHRcdGlmKF9mZWF0dXJlcy5pc09sZElPU1Bob25lIHx8IF9mZWF0dXJlcy5pc09sZEFuZHJvaWQpIHtcblx0XHRcdF9pc0ZpeGVkUG9zaXRpb24gPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0dGVtcGxhdGUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXHRcdGlmKF9vcHRpb25zLm1vZGFsKSB7XG5cdFx0XHRpZighX2lzRml4ZWRQb3NpdGlvbikge1xuXHRcdFx0XHR0ZW1wbGF0ZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0XHRcdHRlbXBsYXRlLnN0eWxlLnRvcCA9IGZyYW1ld29yay5nZXRTY3JvbGxZKCkgKyAncHgnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGVtcGxhdGUuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKF9jdXJyZW50V2luZG93U2Nyb2xsWSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRfc2hvdXQoJ2luaXRpYWxMYXlvdXQnKTtcblx0XHRcdF9jdXJyZW50V2luZG93U2Nyb2xsWSA9IF9pbml0YWxXaW5kb3dTY3JvbGxZID0gZnJhbWV3b3JrLmdldFNjcm9sbFkoKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gYWRkIGNsYXNzZXMgdG8gcm9vdCBlbGVtZW50IG9mIFBob3RvU3dpcGVcblx0XHR2YXIgcm9vdENsYXNzZXMgPSAncHN3cC0tb3BlbiAnO1xuXHRcdGlmKF9vcHRpb25zLm1haW5DbGFzcykge1xuXHRcdFx0cm9vdENsYXNzZXMgKz0gX29wdGlvbnMubWFpbkNsYXNzICsgJyAnO1xuXHRcdH1cblx0XHRpZihfb3B0aW9ucy5zaG93SGlkZU9wYWNpdHkpIHtcblx0XHRcdHJvb3RDbGFzc2VzICs9ICdwc3dwLS1hbmltYXRlX29wYWNpdHkgJztcblx0XHR9XG5cdFx0cm9vdENsYXNzZXMgKz0gX2xpa2VseVRvdWNoRGV2aWNlID8gJ3Bzd3AtLXRvdWNoJyA6ICdwc3dwLS1ub3RvdWNoJztcblx0XHRyb290Q2xhc3NlcyArPSBfZmVhdHVyZXMuYW5pbWF0aW9uTmFtZSA/ICcgcHN3cC0tY3NzX2FuaW1hdGlvbicgOiAnJztcblx0XHRyb290Q2xhc3NlcyArPSBfZmVhdHVyZXMuc3ZnID8gJyBwc3dwLS1zdmcnIDogJyc7XG5cdFx0ZnJhbWV3b3JrLmFkZENsYXNzKHRlbXBsYXRlLCByb290Q2xhc3Nlcyk7XG5cblx0XHRzZWxmLnVwZGF0ZVNpemUoKTtcblxuXHRcdC8vIGluaXRpYWwgdXBkYXRlXG5cdFx0X2NvbnRhaW5lclNoaWZ0SW5kZXggPSAtMTtcblx0XHRfaW5kZXhEaWZmID0gbnVsbDtcblx0XHRmb3IoaSA9IDA7IGkgPCBOVU1fSE9MREVSUzsgaSsrKSB7XG5cdFx0XHRfc2V0VHJhbnNsYXRlWCggKGkrX2NvbnRhaW5lclNoaWZ0SW5kZXgpICogX3NsaWRlU2l6ZS54LCBfaXRlbUhvbGRlcnNbaV0uZWwuc3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKCFfb2xkSUUpIHtcblx0XHRcdGZyYW1ld29yay5iaW5kKHNlbGYuc2Nyb2xsV3JhcCwgX2Rvd25FdmVudHMsIHNlbGYpOyAvLyBubyBkcmFnZ2luZyBmb3Igb2xkIElFXG5cdFx0fVx0XG5cblx0XHRfbGlzdGVuKCdpbml0aWFsWm9vbUluRW5kJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRzZWxmLnNldENvbnRlbnQoX2l0ZW1Ib2xkZXJzWzBdLCBfY3VycmVudEl0ZW1JbmRleC0xKTtcblx0XHRcdHNlbGYuc2V0Q29udGVudChfaXRlbUhvbGRlcnNbMl0sIF9jdXJyZW50SXRlbUluZGV4KzEpO1xuXG5cdFx0XHRfaXRlbUhvbGRlcnNbMF0uZWwuc3R5bGUuZGlzcGxheSA9IF9pdGVtSG9sZGVyc1syXS5lbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuXHRcdFx0aWYoX29wdGlvbnMuZm9jdXMpIHtcblx0XHRcdFx0Ly8gZm9jdXMgY2F1c2VzIGxheW91dCwgXG5cdFx0XHRcdC8vIHdoaWNoIGNhdXNlcyBsYWcgZHVyaW5nIHRoZSBhbmltYXRpb24sIFxuXHRcdFx0XHQvLyB0aGF0J3Mgd2h5IHdlIGRlbGF5IGl0IHVudGlsbCB0aGUgaW5pdGlhbCB6b29tIHRyYW5zaXRpb24gZW5kc1xuXHRcdFx0XHR0ZW1wbGF0ZS5mb2N1cygpO1xuXHRcdFx0fVxuXHRcdFx0IFxuXG5cdFx0XHRfYmluZEV2ZW50cygpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gc2V0IGNvbnRlbnQgZm9yIGNlbnRlciBzbGlkZSAoZmlyc3QgdGltZSlcblx0XHRzZWxmLnNldENvbnRlbnQoX2l0ZW1Ib2xkZXJzWzFdLCBfY3VycmVudEl0ZW1JbmRleCk7XG5cdFx0XG5cdFx0c2VsZi51cGRhdGVDdXJySXRlbSgpO1xuXG5cdFx0X3Nob3V0KCdhZnRlckluaXQnKTtcblxuXHRcdGlmKCFfaXNGaXhlZFBvc2l0aW9uKSB7XG5cblx0XHRcdC8vIE9uIGFsbCB2ZXJzaW9ucyBvZiBpT1MgbG93ZXIgdGhhbiA4LjAsIHdlIGNoZWNrIHNpemUgb2Ygdmlld3BvcnQgZXZlcnkgc2Vjb25kLlxuXHRcdFx0Ly8gXG5cdFx0XHQvLyBUaGlzIGlzIGRvbmUgdG8gZGV0ZWN0IHdoZW4gU2FmYXJpIHRvcCAmIGJvdHRvbSBiYXJzIGFwcGVhciwgXG5cdFx0XHQvLyBhcyB0aGlzIGFjdGlvbiBkb2Vzbid0IHRyaWdnZXIgYW55IGV2ZW50cyAobGlrZSByZXNpemUpLiBcblx0XHRcdC8vIFxuXHRcdFx0Ly8gT24gaU9TOCB0aGV5IGZpeGVkIHRoaXMuXG5cdFx0XHQvLyBcblx0XHRcdC8vIDEwIE5vdiAyMDE0OiBpT1MgNyB1c2FnZSB+NDAlLiBpT1MgOCB1c2FnZSA1NiUuXG5cdFx0XHRcblx0XHRcdF91cGRhdGVTaXplSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoIV9udW1BbmltYXRpb25zICYmICFfaXNEcmFnZ2luZyAmJiAhX2lzWm9vbWluZyAmJiAoX2N1cnJab29tTGV2ZWwgPT09IHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbCkgICkge1xuXHRcdFx0XHRcdHNlbGYudXBkYXRlU2l6ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCAxMDAwKTtcblx0XHR9XG5cblx0XHRmcmFtZXdvcmsuYWRkQ2xhc3ModGVtcGxhdGUsICdwc3dwLS12aXNpYmxlJyk7XG5cdH0sXG5cblx0Ly8gQ2xvc2UgdGhlIGdhbGxlcnksIHRoZW4gZGVzdHJveSBpdFxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdFx0aWYoIV9pc09wZW4pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRfaXNPcGVuID0gZmFsc2U7XG5cdFx0X2lzRGVzdHJveWluZyA9IHRydWU7XG5cdFx0X3Nob3V0KCdjbG9zZScpO1xuXHRcdF91bmJpbmRFdmVudHMoKTtcblxuXHRcdF9zaG93T3JIaWRlKHNlbGYuY3Vyckl0ZW0sIG51bGwsIHRydWUsIHNlbGYuZGVzdHJveSk7XG5cdH0sXG5cblx0Ly8gZGVzdHJveXMgdGhlIGdhbGxlcnkgKHVuYmluZHMgZXZlbnRzLCBjbGVhbnMgdXAgaW50ZXJ2YWxzIGFuZCB0aW1lb3V0cyB0byBhdm9pZCBtZW1vcnkgbGVha3MpXG5cdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdF9zaG91dCgnZGVzdHJveScpO1xuXG5cdFx0aWYoX3Nob3dPckhpZGVUaW1lb3V0KSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoX3Nob3dPckhpZGVUaW1lb3V0KTtcblx0XHR9XG5cdFx0XG5cdFx0dGVtcGxhdGUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cdFx0dGVtcGxhdGUuY2xhc3NOYW1lID0gX2luaXRhbENsYXNzTmFtZTtcblxuXHRcdGlmKF91cGRhdGVTaXplSW50ZXJ2YWwpIHtcblx0XHRcdGNsZWFySW50ZXJ2YWwoX3VwZGF0ZVNpemVJbnRlcnZhbCk7XG5cdFx0fVxuXG5cdFx0ZnJhbWV3b3JrLnVuYmluZChzZWxmLnNjcm9sbFdyYXAsIF9kb3duRXZlbnRzLCBzZWxmKTtcblxuXHRcdC8vIHdlIHVuYmluZCBzY3JvbGwgZXZlbnQgYXQgdGhlIGVuZCwgYXMgY2xvc2luZyBhbmltYXRpb24gbWF5IGRlcGVuZCBvbiBpdFxuXHRcdGZyYW1ld29yay51bmJpbmQod2luZG93LCAnc2Nyb2xsJywgc2VsZik7XG5cblx0XHRfc3RvcERyYWdVcGRhdGVMb29wKCk7XG5cblx0XHRfc3RvcEFsbEFuaW1hdGlvbnMoKTtcblxuXHRcdF9saXN0ZW5lcnMgPSBudWxsO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBQYW4gaW1hZ2UgdG8gcG9zaXRpb25cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHggICAgIFxuXHQgKiBAcGFyYW0ge051bWJlcn0geSAgICAgXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gZm9yY2UgV2lsbCBpZ25vcmUgYm91bmRzIGlmIHNldCB0byB0cnVlLlxuXHQgKi9cblx0cGFuVG86IGZ1bmN0aW9uKHgseSxmb3JjZSkge1xuXHRcdGlmKCFmb3JjZSkge1xuXHRcdFx0aWYoeCA+IF9jdXJyUGFuQm91bmRzLm1pbi54KSB7XG5cdFx0XHRcdHggPSBfY3VyclBhbkJvdW5kcy5taW4ueDtcblx0XHRcdH0gZWxzZSBpZih4IDwgX2N1cnJQYW5Cb3VuZHMubWF4LngpIHtcblx0XHRcdFx0eCA9IF9jdXJyUGFuQm91bmRzLm1heC54O1xuXHRcdFx0fVxuXG5cdFx0XHRpZih5ID4gX2N1cnJQYW5Cb3VuZHMubWluLnkpIHtcblx0XHRcdFx0eSA9IF9jdXJyUGFuQm91bmRzLm1pbi55O1xuXHRcdFx0fSBlbHNlIGlmKHkgPCBfY3VyclBhbkJvdW5kcy5tYXgueSkge1xuXHRcdFx0XHR5ID0gX2N1cnJQYW5Cb3VuZHMubWF4Lnk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdF9wYW5PZmZzZXQueCA9IHg7XG5cdFx0X3Bhbk9mZnNldC55ID0geTtcblx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXHR9LFxuXHRcblx0aGFuZGxlRXZlbnQ6IGZ1bmN0aW9uIChlKSB7XG5cdFx0ZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXHRcdGlmKF9nbG9iYWxFdmVudEhhbmRsZXJzW2UudHlwZV0pIHtcblx0XHRcdF9nbG9iYWxFdmVudEhhbmRsZXJzW2UudHlwZV0oZSk7XG5cdFx0fVxuXHR9LFxuXG5cblx0Z29UbzogZnVuY3Rpb24oaW5kZXgpIHtcblxuXHRcdGluZGV4ID0gX2dldExvb3BlZElkKGluZGV4KTtcblxuXHRcdHZhciBkaWZmID0gaW5kZXggLSBfY3VycmVudEl0ZW1JbmRleDtcblx0XHRfaW5kZXhEaWZmID0gZGlmZjtcblxuXHRcdF9jdXJyZW50SXRlbUluZGV4ID0gaW5kZXg7XG5cdFx0c2VsZi5jdXJySXRlbSA9IF9nZXRJdGVtQXQoIF9jdXJyZW50SXRlbUluZGV4ICk7XG5cdFx0X2N1cnJQb3NpdGlvbkluZGV4IC09IGRpZmY7XG5cdFx0XG5cdFx0X21vdmVNYWluU2Nyb2xsKF9zbGlkZVNpemUueCAqIF9jdXJyUG9zaXRpb25JbmRleCk7XG5cdFx0XG5cblx0XHRfc3RvcEFsbEFuaW1hdGlvbnMoKTtcblx0XHRfbWFpblNjcm9sbEFuaW1hdGluZyA9IGZhbHNlO1xuXG5cdFx0c2VsZi51cGRhdGVDdXJySXRlbSgpO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbigpIHtcblx0XHRzZWxmLmdvVG8oIF9jdXJyZW50SXRlbUluZGV4ICsgMSk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCkge1xuXHRcdHNlbGYuZ29UbyggX2N1cnJlbnRJdGVtSW5kZXggLSAxKTtcblx0fSxcblxuXHQvLyB1cGRhdGUgY3VycmVudCB6b29tL3BhbiBvYmplY3RzXG5cdHVwZGF0ZUN1cnJab29tSXRlbTogZnVuY3Rpb24oZW11bGF0ZVNldENvbnRlbnQpIHtcblx0XHRpZihlbXVsYXRlU2V0Q29udGVudCkge1xuXHRcdFx0X3Nob3V0KCdiZWZvcmVDaGFuZ2UnLCAwKTtcblx0XHR9XG5cblx0XHQvLyBpdGVtSG9sZGVyWzFdIGlzIG1pZGRsZSAoY3VycmVudCkgaXRlbVxuXHRcdGlmKF9pdGVtSG9sZGVyc1sxXS5lbC5jaGlsZHJlbi5sZW5ndGgpIHtcblx0XHRcdHZhciB6b29tRWxlbWVudCA9IF9pdGVtSG9sZGVyc1sxXS5lbC5jaGlsZHJlblswXTtcblx0XHRcdGlmKCBmcmFtZXdvcmsuaGFzQ2xhc3Moem9vbUVsZW1lbnQsICdwc3dwX196b29tLXdyYXAnKSApIHtcblx0XHRcdFx0X2N1cnJab29tRWxlbWVudFN0eWxlID0gem9vbUVsZW1lbnQuc3R5bGU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfY3Vyclpvb21FbGVtZW50U3R5bGUgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRfY3Vyclpvb21FbGVtZW50U3R5bGUgPSBudWxsO1xuXHRcdH1cblx0XHRcblx0XHRfY3VyclBhbkJvdW5kcyA9IHNlbGYuY3Vyckl0ZW0uYm91bmRzO1x0XG5cdFx0X3N0YXJ0Wm9vbUxldmVsID0gX2N1cnJab29tTGV2ZWwgPSBzZWxmLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWw7XG5cblx0XHRfcGFuT2Zmc2V0LnggPSBfY3VyclBhbkJvdW5kcy5jZW50ZXIueDtcblx0XHRfcGFuT2Zmc2V0LnkgPSBfY3VyclBhbkJvdW5kcy5jZW50ZXIueTtcblxuXHRcdGlmKGVtdWxhdGVTZXRDb250ZW50KSB7XG5cdFx0XHRfc2hvdXQoJ2FmdGVyQ2hhbmdlJyk7XG5cdFx0fVxuXHR9LFxuXG5cblx0aW52YWxpZGF0ZUN1cnJJdGVtczogZnVuY3Rpb24oKSB7XG5cdFx0X2l0ZW1zTmVlZFVwZGF0ZSA9IHRydWU7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IE5VTV9IT0xERVJTOyBpKyspIHtcblx0XHRcdGlmKCBfaXRlbUhvbGRlcnNbaV0uaXRlbSApIHtcblx0XHRcdFx0X2l0ZW1Ib2xkZXJzW2ldLml0ZW0ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHR1cGRhdGVDdXJySXRlbTogZnVuY3Rpb24oYmVmb3JlQW5pbWF0aW9uKSB7XG5cblx0XHRpZihfaW5kZXhEaWZmID09PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGRpZmZBYnMgPSBNYXRoLmFicyhfaW5kZXhEaWZmKSxcblx0XHRcdHRlbXBIb2xkZXI7XG5cblx0XHRpZihiZWZvcmVBbmltYXRpb24gJiYgZGlmZkFicyA8IDIpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblxuXHRcdHNlbGYuY3Vyckl0ZW0gPSBfZ2V0SXRlbUF0KCBfY3VycmVudEl0ZW1JbmRleCApO1xuXHRcdF9yZW5kZXJNYXhSZXNvbHV0aW9uID0gZmFsc2U7XG5cdFx0XG5cdFx0X3Nob3V0KCdiZWZvcmVDaGFuZ2UnLCBfaW5kZXhEaWZmKTtcblxuXHRcdGlmKGRpZmZBYnMgPj0gTlVNX0hPTERFUlMpIHtcblx0XHRcdF9jb250YWluZXJTaGlmdEluZGV4ICs9IF9pbmRleERpZmYgKyAoX2luZGV4RGlmZiA+IDAgPyAtTlVNX0hPTERFUlMgOiBOVU1fSE9MREVSUyk7XG5cdFx0XHRkaWZmQWJzID0gTlVNX0hPTERFUlM7XG5cdFx0fVxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkaWZmQWJzOyBpKyspIHtcblx0XHRcdGlmKF9pbmRleERpZmYgPiAwKSB7XG5cdFx0XHRcdHRlbXBIb2xkZXIgPSBfaXRlbUhvbGRlcnMuc2hpZnQoKTtcblx0XHRcdFx0X2l0ZW1Ib2xkZXJzW05VTV9IT0xERVJTLTFdID0gdGVtcEhvbGRlcjsgLy8gbW92ZSBmaXJzdCB0byBsYXN0XG5cblx0XHRcdFx0X2NvbnRhaW5lclNoaWZ0SW5kZXgrKztcblx0XHRcdFx0X3NldFRyYW5zbGF0ZVgoIChfY29udGFpbmVyU2hpZnRJbmRleCsyKSAqIF9zbGlkZVNpemUueCwgdGVtcEhvbGRlci5lbC5zdHlsZSk7XG5cdFx0XHRcdHNlbGYuc2V0Q29udGVudCh0ZW1wSG9sZGVyLCBfY3VycmVudEl0ZW1JbmRleCAtIGRpZmZBYnMgKyBpICsgMSArIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGVtcEhvbGRlciA9IF9pdGVtSG9sZGVycy5wb3AoKTtcblx0XHRcdFx0X2l0ZW1Ib2xkZXJzLnVuc2hpZnQoIHRlbXBIb2xkZXIgKTsgLy8gbW92ZSBsYXN0IHRvIGZpcnN0XG5cblx0XHRcdFx0X2NvbnRhaW5lclNoaWZ0SW5kZXgtLTtcblx0XHRcdFx0X3NldFRyYW5zbGF0ZVgoIF9jb250YWluZXJTaGlmdEluZGV4ICogX3NsaWRlU2l6ZS54LCB0ZW1wSG9sZGVyLmVsLnN0eWxlKTtcblx0XHRcdFx0c2VsZi5zZXRDb250ZW50KHRlbXBIb2xkZXIsIF9jdXJyZW50SXRlbUluZGV4ICsgZGlmZkFicyAtIGkgLSAxIC0gMSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9XG5cblx0XHQvLyByZXNldCB6b29tL3BhbiBvbiBwcmV2aW91cyBpdGVtXG5cdFx0aWYoX2N1cnJab29tRWxlbWVudFN0eWxlICYmIE1hdGguYWJzKF9pbmRleERpZmYpID09PSAxKSB7XG5cblx0XHRcdHZhciBwcmV2SXRlbSA9IF9nZXRJdGVtQXQoX3ByZXZJdGVtSW5kZXgpO1xuXHRcdFx0aWYocHJldkl0ZW0uaW5pdGlhbFpvb21MZXZlbCAhPT0gX2N1cnJab29tTGV2ZWwpIHtcblx0XHRcdFx0X2NhbGN1bGF0ZUl0ZW1TaXplKHByZXZJdGVtICwgX3ZpZXdwb3J0U2l6ZSApO1xuXHRcdFx0XHRfc2V0SW1hZ2VTaXplKHByZXZJdGVtKTtcblx0XHRcdFx0X2FwcGx5Wm9vbVBhblRvSXRlbSggcHJldkl0ZW0gKTsgXHRcdFx0XHRcblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHJlc2V0IGRpZmYgYWZ0ZXIgdXBkYXRlXG5cdFx0X2luZGV4RGlmZiA9IDA7XG5cblx0XHRzZWxmLnVwZGF0ZUN1cnJab29tSXRlbSgpO1xuXG5cdFx0X3ByZXZJdGVtSW5kZXggPSBfY3VycmVudEl0ZW1JbmRleDtcblxuXHRcdF9zaG91dCgnYWZ0ZXJDaGFuZ2UnKTtcblx0XHRcblx0fSxcblxuXG5cblx0dXBkYXRlU2l6ZTogZnVuY3Rpb24oZm9yY2UpIHtcblx0XHRcblx0XHRpZighX2lzRml4ZWRQb3NpdGlvbiAmJiBfb3B0aW9ucy5tb2RhbCkge1xuXHRcdFx0dmFyIHdpbmRvd1Njcm9sbFkgPSBmcmFtZXdvcmsuZ2V0U2Nyb2xsWSgpO1xuXHRcdFx0aWYoX2N1cnJlbnRXaW5kb3dTY3JvbGxZICE9PSB3aW5kb3dTY3JvbGxZKSB7XG5cdFx0XHRcdHRlbXBsYXRlLnN0eWxlLnRvcCA9IHdpbmRvd1Njcm9sbFkgKyAncHgnO1xuXHRcdFx0XHRfY3VycmVudFdpbmRvd1Njcm9sbFkgPSB3aW5kb3dTY3JvbGxZO1xuXHRcdFx0fVxuXHRcdFx0aWYoIWZvcmNlICYmIF93aW5kb3dWaXNpYmxlU2l6ZS54ID09PSB3aW5kb3cuaW5uZXJXaWR0aCAmJiBfd2luZG93VmlzaWJsZVNpemUueSA9PT0gd2luZG93LmlubmVySGVpZ2h0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdF93aW5kb3dWaXNpYmxlU2l6ZS54ID0gd2luZG93LmlubmVyV2lkdGg7XG5cdFx0XHRfd2luZG93VmlzaWJsZVNpemUueSA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuXHRcdFx0Ly90ZW1wbGF0ZS5zdHlsZS53aWR0aCA9IF93aW5kb3dWaXNpYmxlU2l6ZS54ICsgJ3B4Jztcblx0XHRcdHRlbXBsYXRlLnN0eWxlLmhlaWdodCA9IF93aW5kb3dWaXNpYmxlU2l6ZS55ICsgJ3B4Jztcblx0XHR9XG5cblxuXG5cdFx0X3ZpZXdwb3J0U2l6ZS54ID0gc2VsZi5zY3JvbGxXcmFwLmNsaWVudFdpZHRoO1xuXHRcdF92aWV3cG9ydFNpemUueSA9IHNlbGYuc2Nyb2xsV3JhcC5jbGllbnRIZWlnaHQ7XG5cblx0XHRfdXBkYXRlUGFnZVNjcm9sbE9mZnNldCgpO1xuXG5cdFx0X3NsaWRlU2l6ZS54ID0gX3ZpZXdwb3J0U2l6ZS54ICsgTWF0aC5yb3VuZChfdmlld3BvcnRTaXplLnggKiBfb3B0aW9ucy5zcGFjaW5nKTtcblx0XHRfc2xpZGVTaXplLnkgPSBfdmlld3BvcnRTaXplLnk7XG5cblx0XHRfbW92ZU1haW5TY3JvbGwoX3NsaWRlU2l6ZS54ICogX2N1cnJQb3NpdGlvbkluZGV4KTtcblxuXHRcdF9zaG91dCgnYmVmb3JlUmVzaXplJyk7IC8vIGV2ZW4gbWF5IGJlIHVzZWQgZm9yIGV4YW1wbGUgdG8gc3dpdGNoIGltYWdlIHNvdXJjZXNcblxuXG5cdFx0Ly8gZG9uJ3QgcmUtY2FsY3VsYXRlIHNpemUgb24gaW5pdGFsIHNpemUgdXBkYXRlXG5cdFx0aWYoX2NvbnRhaW5lclNoaWZ0SW5kZXggIT09IHVuZGVmaW5lZCkge1xuXG5cdFx0XHR2YXIgaG9sZGVyLFxuXHRcdFx0XHRpdGVtLFxuXHRcdFx0XHRoSW5kZXg7XG5cblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBOVU1fSE9MREVSUzsgaSsrKSB7XG5cdFx0XHRcdGhvbGRlciA9IF9pdGVtSG9sZGVyc1tpXTtcblx0XHRcdFx0X3NldFRyYW5zbGF0ZVgoIChpK19jb250YWluZXJTaGlmdEluZGV4KSAqIF9zbGlkZVNpemUueCwgaG9sZGVyLmVsLnN0eWxlKTtcblxuXHRcdFx0XHRoSW5kZXggPSBfY3VycmVudEl0ZW1JbmRleCtpLTE7XG5cblx0XHRcdFx0aWYoX29wdGlvbnMubG9vcCAmJiBfZ2V0TnVtSXRlbXMoKSA+IDIpIHtcblx0XHRcdFx0XHRoSW5kZXggPSBfZ2V0TG9vcGVkSWQoaEluZGV4KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHVwZGF0ZSB6b29tIGxldmVsIG9uIGl0ZW1zIGFuZCByZWZyZXNoIHNvdXJjZSAoaWYgbmVlZHNVcGRhdGUpXG5cdFx0XHRcdGl0ZW0gPSBfZ2V0SXRlbUF0KCBoSW5kZXggKTtcblxuXHRcdFx0XHQvLyByZS1yZW5kZXIgZ2FsbGVyeSBpdGVtIGlmIGBuZWVkc1VwZGF0ZWAsXG5cdFx0XHRcdC8vIG9yIGRvZXNuJ3QgaGF2ZSBgYm91bmRzYCAoZW50aXJlbHkgbmV3IHNsaWRlIG9iamVjdClcblx0XHRcdFx0aWYoIGl0ZW0gJiYgKF9pdGVtc05lZWRVcGRhdGUgfHwgaXRlbS5uZWVkc1VwZGF0ZSB8fCAhaXRlbS5ib3VuZHMpICkge1xuXG5cdFx0XHRcdFx0c2VsZi5jbGVhblNsaWRlKCBpdGVtICk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0c2VsZi5zZXRDb250ZW50KCBob2xkZXIsIGhJbmRleCApO1xuXG5cdFx0XHRcdFx0Ly8gaWYgXCJjZW50ZXJcIiBzbGlkZVxuXHRcdFx0XHRcdGlmKGkgPT09IDEpIHtcblx0XHRcdFx0XHRcdHNlbGYuY3Vyckl0ZW0gPSBpdGVtO1xuXHRcdFx0XHRcdFx0c2VsZi51cGRhdGVDdXJyWm9vbUl0ZW0odHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aXRlbS5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdH0gZWxzZSBpZihob2xkZXIuaW5kZXggPT09IC0xICYmIGhJbmRleCA+PSAwKSB7XG5cdFx0XHRcdFx0Ly8gYWRkIGNvbnRlbnQgZmlyc3QgdGltZVxuXHRcdFx0XHRcdHNlbGYuc2V0Q29udGVudCggaG9sZGVyLCBoSW5kZXggKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihpdGVtICYmIGl0ZW0uY29udGFpbmVyKSB7XG5cdFx0XHRcdFx0X2NhbGN1bGF0ZUl0ZW1TaXplKGl0ZW0sIF92aWV3cG9ydFNpemUpO1xuXHRcdFx0XHRcdF9zZXRJbWFnZVNpemUoaXRlbSk7XG5cdFx0XHRcdFx0X2FwcGx5Wm9vbVBhblRvSXRlbSggaXRlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0X2l0ZW1zTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdH1cdFxuXG5cdFx0X3N0YXJ0Wm9vbUxldmVsID0gX2N1cnJab29tTGV2ZWwgPSBzZWxmLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWw7XG5cdFx0X2N1cnJQYW5Cb3VuZHMgPSBzZWxmLmN1cnJJdGVtLmJvdW5kcztcblxuXHRcdGlmKF9jdXJyUGFuQm91bmRzKSB7XG5cdFx0XHRfcGFuT2Zmc2V0LnggPSBfY3VyclBhbkJvdW5kcy5jZW50ZXIueDtcblx0XHRcdF9wYW5PZmZzZXQueSA9IF9jdXJyUGFuQm91bmRzLmNlbnRlci55O1xuXHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oIHRydWUgKTtcblx0XHR9XG5cdFx0XG5cdFx0X3Nob3V0KCdyZXNpemUnKTtcblx0fSxcblx0XG5cdC8vIFpvb20gY3VycmVudCBpdGVtIHRvXG5cdHpvb21UbzogZnVuY3Rpb24oZGVzdFpvb21MZXZlbCwgY2VudGVyUG9pbnQsIHNwZWVkLCBlYXNpbmdGbiwgdXBkYXRlRm4pIHtcblx0XHQvKlxuXHRcdFx0aWYoZGVzdFpvb21MZXZlbCA9PT0gJ2ZpdCcpIHtcblx0XHRcdFx0ZGVzdFpvb21MZXZlbCA9IHNlbGYuY3Vyckl0ZW0uZml0UmF0aW87XG5cdFx0XHR9IGVsc2UgaWYoZGVzdFpvb21MZXZlbCA9PT0gJ2ZpbGwnKSB7XG5cdFx0XHRcdGRlc3Rab29tTGV2ZWwgPSBzZWxmLmN1cnJJdGVtLmZpbGxSYXRpbztcblx0XHRcdH1cblx0XHQqL1xuXG5cdFx0aWYoY2VudGVyUG9pbnQpIHtcblx0XHRcdF9zdGFydFpvb21MZXZlbCA9IF9jdXJyWm9vbUxldmVsO1xuXHRcdFx0X21pZFpvb21Qb2ludC54ID0gTWF0aC5hYnMoY2VudGVyUG9pbnQueCkgLSBfcGFuT2Zmc2V0LnggO1xuXHRcdFx0X21pZFpvb21Qb2ludC55ID0gTWF0aC5hYnMoY2VudGVyUG9pbnQueSkgLSBfcGFuT2Zmc2V0LnkgO1xuXHRcdFx0X2VxdWFsaXplUG9pbnRzKF9zdGFydFBhbk9mZnNldCwgX3Bhbk9mZnNldCk7XG5cdFx0fVxuXG5cdFx0dmFyIGRlc3RQYW5Cb3VuZHMgPSBfY2FsY3VsYXRlUGFuQm91bmRzKGRlc3Rab29tTGV2ZWwsIGZhbHNlKSxcblx0XHRcdGRlc3RQYW5PZmZzZXQgPSB7fTtcblxuXHRcdF9tb2RpZnlEZXN0UGFuT2Zmc2V0KCd4JywgZGVzdFBhbkJvdW5kcywgZGVzdFBhbk9mZnNldCwgZGVzdFpvb21MZXZlbCk7XG5cdFx0X21vZGlmeURlc3RQYW5PZmZzZXQoJ3knLCBkZXN0UGFuQm91bmRzLCBkZXN0UGFuT2Zmc2V0LCBkZXN0Wm9vbUxldmVsKTtcblxuXHRcdHZhciBpbml0aWFsWm9vbUxldmVsID0gX2N1cnJab29tTGV2ZWw7XG5cdFx0dmFyIGluaXRpYWxQYW5PZmZzZXQgPSB7XG5cdFx0XHR4OiBfcGFuT2Zmc2V0LngsXG5cdFx0XHR5OiBfcGFuT2Zmc2V0Lnlcblx0XHR9O1xuXG5cdFx0X3JvdW5kUG9pbnQoZGVzdFBhbk9mZnNldCk7XG5cblx0XHR2YXIgb25VcGRhdGUgPSBmdW5jdGlvbihub3cpIHtcblx0XHRcdGlmKG5vdyA9PT0gMSkge1xuXHRcdFx0XHRfY3Vyclpvb21MZXZlbCA9IGRlc3Rab29tTGV2ZWw7XG5cdFx0XHRcdF9wYW5PZmZzZXQueCA9IGRlc3RQYW5PZmZzZXQueDtcblx0XHRcdFx0X3Bhbk9mZnNldC55ID0gZGVzdFBhbk9mZnNldC55O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X2N1cnJab29tTGV2ZWwgPSAoZGVzdFpvb21MZXZlbCAtIGluaXRpYWxab29tTGV2ZWwpICogbm93ICsgaW5pdGlhbFpvb21MZXZlbDtcblx0XHRcdFx0X3Bhbk9mZnNldC54ID0gKGRlc3RQYW5PZmZzZXQueCAtIGluaXRpYWxQYW5PZmZzZXQueCkgKiBub3cgKyBpbml0aWFsUGFuT2Zmc2V0Lng7XG5cdFx0XHRcdF9wYW5PZmZzZXQueSA9IChkZXN0UGFuT2Zmc2V0LnkgLSBpbml0aWFsUGFuT2Zmc2V0LnkpICogbm93ICsgaW5pdGlhbFBhbk9mZnNldC55O1xuXHRcdFx0fVxuXG5cdFx0XHRpZih1cGRhdGVGbikge1xuXHRcdFx0XHR1cGRhdGVGbihub3cpO1xuXHRcdFx0fVxuXG5cdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbiggbm93ID09PSAxICk7XG5cdFx0fTtcblxuXHRcdGlmKHNwZWVkKSB7XG5cdFx0XHRfYW5pbWF0ZVByb3AoJ2N1c3RvbVpvb21UbycsIDAsIDEsIHNwZWVkLCBlYXNpbmdGbiB8fCBmcmFtZXdvcmsuZWFzaW5nLnNpbmUuaW5PdXQsIG9uVXBkYXRlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b25VcGRhdGUoMSk7XG5cdFx0fVxuXHR9XG5cblxufTtcblxuXG4vKj4+Y29yZSovXG5cbi8qPj5nZXN0dXJlcyovXG4vKipcbiAqIE1vdXNlL3RvdWNoL3BvaW50ZXIgZXZlbnQgaGFuZGxlcnMuXG4gKiBcbiAqIHNlcGFyYXRlZCBmcm9tIEBjb3JlLmpzIGZvciByZWFkYWJpbGl0eVxuICovXG5cbnZhciBNSU5fU1dJUEVfRElTVEFOQ0UgPSAzMCxcblx0RElSRUNUSU9OX0NIRUNLX09GRlNFVCA9IDEwOyAvLyBhbW91bnQgb2YgcGl4ZWxzIHRvIGRyYWcgdG8gZGV0ZXJtaW5lIGRpcmVjdGlvbiBvZiBzd2lwZVxuXG52YXIgX2dlc3R1cmVTdGFydFRpbWUsXG5cdF9nZXN0dXJlQ2hlY2tTcGVlZFRpbWUsXG5cblx0Ly8gcG9vbCBvZiBvYmplY3RzIHRoYXQgYXJlIHVzZWQgZHVyaW5nIGRyYWdnaW5nIG9mIHpvb21pbmdcblx0cCA9IHt9LCAvLyBmaXJzdCBwb2ludFxuXHRwMiA9IHt9LCAvLyBzZWNvbmQgcG9pbnQgKGZvciB6b29tIGdlc3R1cmUpXG5cdGRlbHRhID0ge30sXG5cdF9jdXJyUG9pbnQgPSB7fSxcblx0X3N0YXJ0UG9pbnQgPSB7fSxcblx0X2N1cnJQb2ludGVycyA9IFtdLFxuXHRfc3RhcnRNYWluU2Nyb2xsUG9zID0ge30sXG5cdF9yZWxlYXNlQW5pbURhdGEsXG5cdF9wb3NQb2ludHMgPSBbXSwgLy8gYXJyYXkgb2YgcG9pbnRzIGR1cmluZyBkcmFnZ2luZywgdXNlZCB0byBkZXRlcm1pbmUgdHlwZSBvZiBnZXN0dXJlXG5cdF90ZW1wUG9pbnQgPSB7fSxcblxuXHRfaXNab29taW5nSW4sXG5cdF92ZXJ0aWNhbERyYWdJbml0aWF0ZWQsXG5cdF9vbGRBbmRyb2lkVG91Y2hFbmRUaW1lb3V0LFxuXHRfY3Vyclpvb21lZEl0ZW1JbmRleCA9IDAsXG5cdF9jZW50ZXJQb2ludCA9IF9nZXRFbXB0eVBvaW50KCksXG5cdF9sYXN0UmVsZWFzZVRpbWUgPSAwLFxuXHRfaXNEcmFnZ2luZywgLy8gYXQgbGVhc3Qgb25lIHBvaW50ZXIgaXMgZG93blxuXHRfaXNNdWx0aXRvdWNoLCAvLyBhdCBsZWFzdCB0d28gX3BvaW50ZXJzIGFyZSBkb3duXG5cdF96b29tU3RhcnRlZCwgLy8gem9vbSBsZXZlbCBjaGFuZ2VkIGR1cmluZyB6b29tIGdlc3R1cmVcblx0X21vdmVkLFxuXHRfZHJhZ0FuaW1GcmFtZSxcblx0X21haW5TY3JvbGxTaGlmdGVkLFxuXHRfY3VycmVudFBvaW50cywgLy8gYXJyYXkgb2YgY3VycmVudCB0b3VjaCBwb2ludHNcblx0X2lzWm9vbWluZyxcblx0X2N1cnJQb2ludHNEaXN0YW5jZSxcblx0X3N0YXJ0UG9pbnRzRGlzdGFuY2UsXG5cdF9jdXJyUGFuQm91bmRzLFxuXHRfbWFpblNjcm9sbFBvcyA9IF9nZXRFbXB0eVBvaW50KCksXG5cdF9jdXJyWm9vbUVsZW1lbnRTdHlsZSxcblx0X21haW5TY3JvbGxBbmltYXRpbmcsIC8vIHRydWUsIGlmIGFuaW1hdGlvbiBhZnRlciBzd2lwZSBnZXN0dXJlIGlzIHJ1bm5pbmdcblx0X21pZFpvb21Qb2ludCA9IF9nZXRFbXB0eVBvaW50KCksXG5cdF9jdXJyQ2VudGVyUG9pbnQgPSBfZ2V0RW1wdHlQb2ludCgpLFxuXHRfZGlyZWN0aW9uLFxuXHRfaXNGaXJzdE1vdmUsXG5cdF9vcGFjaXR5Q2hhbmdlZCxcblx0X2JnT3BhY2l0eSxcblx0X3dhc092ZXJJbml0aWFsWm9vbSxcblxuXHRfaXNFcXVhbFBvaW50cyA9IGZ1bmN0aW9uKHAxLCBwMikge1xuXHRcdHJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7XG5cdH0sXG5cdF9pc05lYXJieVBvaW50cyA9IGZ1bmN0aW9uKHRvdWNoMCwgdG91Y2gxKSB7XG5cdFx0cmV0dXJuIE1hdGguYWJzKHRvdWNoMC54IC0gdG91Y2gxLngpIDwgRE9VQkxFX1RBUF9SQURJVVMgJiYgTWF0aC5hYnModG91Y2gwLnkgLSB0b3VjaDEueSkgPCBET1VCTEVfVEFQX1JBRElVUztcblx0fSxcblx0X2NhbGN1bGF0ZVBvaW50c0Rpc3RhbmNlID0gZnVuY3Rpb24ocDEsIHAyKSB7XG5cdFx0X3RlbXBQb2ludC54ID0gTWF0aC5hYnMoIHAxLnggLSBwMi54ICk7XG5cdFx0X3RlbXBQb2ludC55ID0gTWF0aC5hYnMoIHAxLnkgLSBwMi55ICk7XG5cdFx0cmV0dXJuIE1hdGguc3FydChfdGVtcFBvaW50LnggKiBfdGVtcFBvaW50LnggKyBfdGVtcFBvaW50LnkgKiBfdGVtcFBvaW50LnkpO1xuXHR9LFxuXHRfc3RvcERyYWdVcGRhdGVMb29wID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoX2RyYWdBbmltRnJhbWUpIHtcblx0XHRcdF9jYW5jZWxBRihfZHJhZ0FuaW1GcmFtZSk7XG5cdFx0XHRfZHJhZ0FuaW1GcmFtZSA9IG51bGw7XG5cdFx0fVxuXHR9LFxuXHRfZHJhZ1VwZGF0ZUxvb3AgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfaXNEcmFnZ2luZykge1xuXHRcdFx0X2RyYWdBbmltRnJhbWUgPSBfcmVxdWVzdEFGKF9kcmFnVXBkYXRlTG9vcCk7XG5cdFx0XHRfcmVuZGVyTW92ZW1lbnQoKTtcblx0XHR9XG5cdH0sXG5cdF9jYW5QYW4gPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gIShfb3B0aW9ucy5zY2FsZU1vZGUgPT09ICdmaXQnICYmIF9jdXJyWm9vbUxldmVsID09PSAgc2VsZi5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsKTtcblx0fSxcblx0XG5cdC8vIGZpbmQgdGhlIGNsb3Nlc3QgcGFyZW50IERPTSBlbGVtZW50XG5cdF9jbG9zZXN0RWxlbWVudCA9IGZ1bmN0aW9uKGVsLCBmbikge1xuXHQgIFx0aWYoIWVsIHx8IGVsID09PSBkb2N1bWVudCkge1xuXHQgIFx0XHRyZXR1cm4gZmFsc2U7XG5cdCAgXHR9XG5cblx0ICBcdC8vIGRvbid0IHNlYXJjaCBlbGVtZW50cyBhYm92ZSBwc3dwX19zY3JvbGwtd3JhcFxuXHQgIFx0aWYoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpICYmIGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKS5pbmRleE9mKCdwc3dwX19zY3JvbGwtd3JhcCcpID4gLTEgKSB7XG5cdCAgXHRcdHJldHVybiBmYWxzZTtcblx0ICBcdH1cblxuXHQgIFx0aWYoIGZuKGVsKSApIHtcblx0ICBcdFx0cmV0dXJuIGVsO1xuXHQgIFx0fVxuXG5cdCAgXHRyZXR1cm4gX2Nsb3Nlc3RFbGVtZW50KGVsLnBhcmVudE5vZGUsIGZuKTtcblx0fSxcblxuXHRfcHJldmVudE9iaiA9IHt9LFxuXHRfcHJldmVudERlZmF1bHRFdmVudEJlaGF2aW91ciA9IGZ1bmN0aW9uKGUsIGlzRG93bikge1xuXHQgICAgX3ByZXZlbnRPYmoucHJldmVudCA9ICFfY2xvc2VzdEVsZW1lbnQoZS50YXJnZXQsIF9vcHRpb25zLmlzQ2xpY2thYmxlRWxlbWVudCk7XG5cblx0XHRfc2hvdXQoJ3ByZXZlbnREcmFnRXZlbnQnLCBlLCBpc0Rvd24sIF9wcmV2ZW50T2JqKTtcblx0XHRyZXR1cm4gX3ByZXZlbnRPYmoucHJldmVudDtcblxuXHR9LFxuXHRfY29udmVydFRvdWNoVG9Qb2ludCA9IGZ1bmN0aW9uKHRvdWNoLCBwKSB7XG5cdFx0cC54ID0gdG91Y2gucGFnZVg7XG5cdFx0cC55ID0gdG91Y2gucGFnZVk7XG5cdFx0cC5pZCA9IHRvdWNoLmlkZW50aWZpZXI7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdF9maW5kQ2VudGVyT2ZQb2ludHMgPSBmdW5jdGlvbihwMSwgcDIsIHBDZW50ZXIpIHtcblx0XHRwQ2VudGVyLnggPSAocDEueCArIHAyLngpICogMC41O1xuXHRcdHBDZW50ZXIueSA9IChwMS55ICsgcDIueSkgKiAwLjU7XG5cdH0sXG5cdF9wdXNoUG9zUG9pbnQgPSBmdW5jdGlvbih0aW1lLCB4LCB5KSB7XG5cdFx0aWYodGltZSAtIF9nZXN0dXJlQ2hlY2tTcGVlZFRpbWUgPiA1MCkge1xuXHRcdFx0dmFyIG8gPSBfcG9zUG9pbnRzLmxlbmd0aCA+IDIgPyBfcG9zUG9pbnRzLnNoaWZ0KCkgOiB7fTtcblx0XHRcdG8ueCA9IHg7XG5cdFx0XHRvLnkgPSB5OyBcblx0XHRcdF9wb3NQb2ludHMucHVzaChvKTtcblx0XHRcdF9nZXN0dXJlQ2hlY2tTcGVlZFRpbWUgPSB0aW1lO1xuXHRcdH1cblx0fSxcblxuXHRfY2FsY3VsYXRlVmVydGljYWxEcmFnT3BhY2l0eVJhdGlvID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHlPZmZzZXQgPSBfcGFuT2Zmc2V0LnkgLSBzZWxmLmN1cnJJdGVtLmluaXRpYWxQb3NpdGlvbi55OyAvLyBkaWZmZXJlbmNlIGJldHdlZW4gaW5pdGlhbCBhbmQgY3VycmVudCBwb3NpdGlvblxuXHRcdHJldHVybiAxIC0gIE1hdGguYWJzKCB5T2Zmc2V0IC8gKF92aWV3cG9ydFNpemUueSAvIDIpICApO1xuXHR9LFxuXG5cdFxuXHQvLyBwb2ludHMgcG9vbCwgcmV1c2VkIGR1cmluZyB0b3VjaCBldmVudHNcblx0X2VQb2ludDEgPSB7fSxcblx0X2VQb2ludDIgPSB7fSxcblx0X3RlbXBQb2ludHNBcnIgPSBbXSxcblx0X3RlbXBDb3VudGVyLFxuXHRfZ2V0VG91Y2hQb2ludHMgPSBmdW5jdGlvbihlKSB7XG5cdFx0Ly8gY2xlYW4gdXAgcHJldmlvdXMgcG9pbnRzLCB3aXRob3V0IHJlY3JlYXRpbmcgYXJyYXlcblx0XHR3aGlsZShfdGVtcFBvaW50c0Fyci5sZW5ndGggPiAwKSB7XG5cdFx0XHRfdGVtcFBvaW50c0Fyci5wb3AoKTtcblx0XHR9XG5cblx0XHRpZighX3BvaW50ZXJFdmVudEVuYWJsZWQpIHtcblx0XHRcdGlmKGUudHlwZS5pbmRleE9mKCd0b3VjaCcpID4gLTEpIHtcblxuXHRcdFx0XHRpZihlLnRvdWNoZXMgJiYgZS50b3VjaGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRfdGVtcFBvaW50c0FyclswXSA9IF9jb252ZXJ0VG91Y2hUb1BvaW50KGUudG91Y2hlc1swXSwgX2VQb2ludDEpO1xuXHRcdFx0XHRcdGlmKGUudG91Y2hlcy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0XHRfdGVtcFBvaW50c0FyclsxXSA9IF9jb252ZXJ0VG91Y2hUb1BvaW50KGUudG91Y2hlc1sxXSwgX2VQb2ludDIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9lUG9pbnQxLnggPSBlLnBhZ2VYO1xuXHRcdFx0XHRfZVBvaW50MS55ID0gZS5wYWdlWTtcblx0XHRcdFx0X2VQb2ludDEuaWQgPSAnJztcblx0XHRcdFx0X3RlbXBQb2ludHNBcnJbMF0gPSBfZVBvaW50MTsvL19lUG9pbnQxO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRfdGVtcENvdW50ZXIgPSAwO1xuXHRcdFx0Ly8gd2UgY2FuIHVzZSBmb3JFYWNoLCBhcyBwb2ludGVyIGV2ZW50cyBhcmUgc3VwcG9ydGVkIG9ubHkgaW4gbW9kZXJuIGJyb3dzZXJzXG5cdFx0XHRfY3VyclBvaW50ZXJzLmZvckVhY2goZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRpZihfdGVtcENvdW50ZXIgPT09IDApIHtcblx0XHRcdFx0XHRfdGVtcFBvaW50c0FyclswXSA9IHA7XG5cdFx0XHRcdH0gZWxzZSBpZihfdGVtcENvdW50ZXIgPT09IDEpIHtcblx0XHRcdFx0XHRfdGVtcFBvaW50c0FyclsxXSA9IHA7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3RlbXBDb3VudGVyKys7XG5cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gX3RlbXBQb2ludHNBcnI7XG5cdH0sXG5cblx0X3Bhbk9yTW92ZU1haW5TY3JvbGwgPSBmdW5jdGlvbihheGlzLCBkZWx0YSkge1xuXG5cdFx0dmFyIHBhbkZyaWN0aW9uLFxuXHRcdFx0b3ZlckRpZmYgPSAwLFxuXHRcdFx0bmV3T2Zmc2V0ID0gX3Bhbk9mZnNldFtheGlzXSArIGRlbHRhW2F4aXNdLFxuXHRcdFx0c3RhcnRPdmVyRGlmZixcblx0XHRcdGRpciA9IGRlbHRhW2F4aXNdID4gMCxcblx0XHRcdG5ld01haW5TY3JvbGxQb3NpdGlvbiA9IF9tYWluU2Nyb2xsUG9zLnggKyBkZWx0YS54LFxuXHRcdFx0bWFpblNjcm9sbERpZmYgPSBfbWFpblNjcm9sbFBvcy54IC0gX3N0YXJ0TWFpblNjcm9sbFBvcy54LFxuXHRcdFx0bmV3UGFuUG9zLFxuXHRcdFx0bmV3TWFpblNjcm9sbFBvcztcblxuXHRcdC8vIGNhbGN1bGF0ZSBmZGlzdGFuY2Ugb3ZlciB0aGUgYm91bmRzIGFuZCBmcmljdGlvblxuXHRcdGlmKG5ld09mZnNldCA+IF9jdXJyUGFuQm91bmRzLm1pbltheGlzXSB8fCBuZXdPZmZzZXQgPCBfY3VyclBhbkJvdW5kcy5tYXhbYXhpc10pIHtcblx0XHRcdHBhbkZyaWN0aW9uID0gX29wdGlvbnMucGFuRW5kRnJpY3Rpb247XG5cdFx0XHQvLyBMaW5lYXIgaW5jcmVhc2luZyBvZiBmcmljdGlvbiwgc28gYXQgMS80IG9mIHZpZXdwb3J0IGl0J3MgYXQgbWF4IHZhbHVlLiBcblx0XHRcdC8vIExvb2tzIG5vdCBhcyBuaWNlIGFzIHdhcyBleHBlY3RlZC4gTGVmdCBmb3IgaGlzdG9yeS5cblx0XHRcdC8vIHBhbkZyaWN0aW9uID0gKDEgLSAoX3Bhbk9mZnNldFtheGlzXSArIGRlbHRhW2F4aXNdICsgcGFuQm91bmRzLm1pbltheGlzXSkgLyAoX3ZpZXdwb3J0U2l6ZVtheGlzXSAvIDQpICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBhbkZyaWN0aW9uID0gMTtcblx0XHR9XG5cdFx0XG5cdFx0bmV3T2Zmc2V0ID0gX3Bhbk9mZnNldFtheGlzXSArIGRlbHRhW2F4aXNdICogcGFuRnJpY3Rpb247XG5cblx0XHQvLyBtb3ZlIG1haW4gc2Nyb2xsIG9yIHN0YXJ0IHBhbm5pbmdcblx0XHRpZihfb3B0aW9ucy5hbGxvd1BhblRvTmV4dCB8fCBfY3Vyclpvb21MZXZlbCA9PT0gc2VsZi5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsKSB7XG5cblxuXHRcdFx0aWYoIV9jdXJyWm9vbUVsZW1lbnRTdHlsZSkge1xuXHRcdFx0XHRcblx0XHRcdFx0bmV3TWFpblNjcm9sbFBvcyA9IG5ld01haW5TY3JvbGxQb3NpdGlvbjtcblxuXHRcdFx0fSBlbHNlIGlmKF9kaXJlY3Rpb24gPT09ICdoJyAmJiBheGlzID09PSAneCcgJiYgIV96b29tU3RhcnRlZCApIHtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGRpcikge1xuXHRcdFx0XHRcdGlmKG5ld09mZnNldCA+IF9jdXJyUGFuQm91bmRzLm1pbltheGlzXSkge1xuXHRcdFx0XHRcdFx0cGFuRnJpY3Rpb24gPSBfb3B0aW9ucy5wYW5FbmRGcmljdGlvbjtcblx0XHRcdFx0XHRcdG92ZXJEaWZmID0gX2N1cnJQYW5Cb3VuZHMubWluW2F4aXNdIC0gbmV3T2Zmc2V0O1xuXHRcdFx0XHRcdFx0c3RhcnRPdmVyRGlmZiA9IF9jdXJyUGFuQm91bmRzLm1pbltheGlzXSAtIF9zdGFydFBhbk9mZnNldFtheGlzXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gZHJhZyByaWdodFxuXHRcdFx0XHRcdGlmKCAoc3RhcnRPdmVyRGlmZiA8PSAwIHx8IG1haW5TY3JvbGxEaWZmIDwgMCkgJiYgX2dldE51bUl0ZW1zKCkgPiAxICkge1xuXHRcdFx0XHRcdFx0bmV3TWFpblNjcm9sbFBvcyA9IG5ld01haW5TY3JvbGxQb3NpdGlvbjtcblx0XHRcdFx0XHRcdGlmKG1haW5TY3JvbGxEaWZmIDwgMCAmJiBuZXdNYWluU2Nyb2xsUG9zaXRpb24gPiBfc3RhcnRNYWluU2Nyb2xsUG9zLngpIHtcblx0XHRcdFx0XHRcdFx0bmV3TWFpblNjcm9sbFBvcyA9IF9zdGFydE1haW5TY3JvbGxQb3MueDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYoX2N1cnJQYW5Cb3VuZHMubWluLnggIT09IF9jdXJyUGFuQm91bmRzLm1heC54KSB7XG5cdFx0XHRcdFx0XHRcdG5ld1BhblBvcyA9IG5ld09mZnNldDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYobmV3T2Zmc2V0IDwgX2N1cnJQYW5Cb3VuZHMubWF4W2F4aXNdICkge1xuXHRcdFx0XHRcdFx0cGFuRnJpY3Rpb24gPV9vcHRpb25zLnBhbkVuZEZyaWN0aW9uO1xuXHRcdFx0XHRcdFx0b3ZlckRpZmYgPSBuZXdPZmZzZXQgLSBfY3VyclBhbkJvdW5kcy5tYXhbYXhpc107XG5cdFx0XHRcdFx0XHRzdGFydE92ZXJEaWZmID0gX3N0YXJ0UGFuT2Zmc2V0W2F4aXNdIC0gX2N1cnJQYW5Cb3VuZHMubWF4W2F4aXNdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKCAoc3RhcnRPdmVyRGlmZiA8PSAwIHx8IG1haW5TY3JvbGxEaWZmID4gMCkgJiYgX2dldE51bUl0ZW1zKCkgPiAxICkge1xuXHRcdFx0XHRcdFx0bmV3TWFpblNjcm9sbFBvcyA9IG5ld01haW5TY3JvbGxQb3NpdGlvbjtcblxuXHRcdFx0XHRcdFx0aWYobWFpblNjcm9sbERpZmYgPiAwICYmIG5ld01haW5TY3JvbGxQb3NpdGlvbiA8IF9zdGFydE1haW5TY3JvbGxQb3MueCkge1xuXHRcdFx0XHRcdFx0XHRuZXdNYWluU2Nyb2xsUG9zID0gX3N0YXJ0TWFpblNjcm9sbFBvcy54O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmKF9jdXJyUGFuQm91bmRzLm1pbi54ICE9PSBfY3VyclBhbkJvdW5kcy5tYXgueCkge1xuXHRcdFx0XHRcdFx0XHRuZXdQYW5Qb3MgPSBuZXdPZmZzZXQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXG5cdFx0XHRcdC8vXG5cdFx0XHR9XG5cblx0XHRcdGlmKGF4aXMgPT09ICd4Jykge1xuXG5cdFx0XHRcdGlmKG5ld01haW5TY3JvbGxQb3MgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdF9tb3ZlTWFpblNjcm9sbChuZXdNYWluU2Nyb2xsUG9zLCB0cnVlKTtcblx0XHRcdFx0XHRpZihuZXdNYWluU2Nyb2xsUG9zID09PSBfc3RhcnRNYWluU2Nyb2xsUG9zLngpIHtcblx0XHRcdFx0XHRcdF9tYWluU2Nyb2xsU2hpZnRlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRfbWFpblNjcm9sbFNoaWZ0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKF9jdXJyUGFuQm91bmRzLm1pbi54ICE9PSBfY3VyclBhbkJvdW5kcy5tYXgueCkge1xuXHRcdFx0XHRcdGlmKG5ld1BhblBvcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRfcGFuT2Zmc2V0LnggPSBuZXdQYW5Qb3M7XG5cdFx0XHRcdFx0fSBlbHNlIGlmKCFfbWFpblNjcm9sbFNoaWZ0ZWQpIHtcblx0XHRcdFx0XHRcdF9wYW5PZmZzZXQueCArPSBkZWx0YS54ICogcGFuRnJpY3Rpb247XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG5ld01haW5TY3JvbGxQb3MgIT09IHVuZGVmaW5lZDtcblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmKCFfbWFpblNjcm9sbEFuaW1hdGluZykge1xuXHRcdFx0XG5cdFx0XHRpZighX21haW5TY3JvbGxTaGlmdGVkKSB7XG5cdFx0XHRcdGlmKF9jdXJyWm9vbUxldmVsID4gc2VsZi5jdXJySXRlbS5maXRSYXRpbykge1xuXHRcdFx0XHRcdF9wYW5PZmZzZXRbYXhpc10gKz0gZGVsdGFbYXhpc10gKiBwYW5GcmljdGlvbjtcblx0XHRcdFx0XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0XG5cdFx0fVxuXHRcdFxuXHR9LFxuXG5cdC8vIFBvaW50ZXJkb3duL3RvdWNoc3RhcnQvbW91c2Vkb3duIGhhbmRsZXJcblx0X29uRHJhZ1N0YXJ0ID0gZnVuY3Rpb24oZSkge1xuXG5cdFx0Ly8gQWxsb3cgZHJhZ2dpbmcgb25seSB2aWEgbGVmdCBtb3VzZSBidXR0b24uXG5cdFx0Ly8gQXMgdGhpcyBoYW5kbGVyIGlzIG5vdCBhZGRlZCBpbiBJRTggLSB3ZSBpZ25vcmUgZS53aGljaFxuXHRcdC8vIFxuXHRcdC8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZXZlbnRzX3Byb3BlcnRpZXMuaHRtbFxuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9ldmVudC5idXR0b25cblx0XHRpZihlLnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGUuYnV0dG9uID4gMCAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYoX2luaXRpYWxab29tUnVubmluZykge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmKF9vbGRBbmRyb2lkVG91Y2hFbmRUaW1lb3V0ICYmIGUudHlwZSA9PT0gJ21vdXNlZG93bicpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZihfcHJldmVudERlZmF1bHRFdmVudEJlaGF2aW91cihlLCB0cnVlKSkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblxuXG5cblx0XHRfc2hvdXQoJ3BvaW50ZXJEb3duJyk7XG5cblx0XHRpZihfcG9pbnRlckV2ZW50RW5hYmxlZCkge1xuXHRcdFx0dmFyIHBvaW50ZXJJbmRleCA9IGZyYW1ld29yay5hcnJheVNlYXJjaChfY3VyclBvaW50ZXJzLCBlLnBvaW50ZXJJZCwgJ2lkJyk7XG5cdFx0XHRpZihwb2ludGVySW5kZXggPCAwKSB7XG5cdFx0XHRcdHBvaW50ZXJJbmRleCA9IF9jdXJyUG9pbnRlcnMubGVuZ3RoO1xuXHRcdFx0fVxuXHRcdFx0X2N1cnJQb2ludGVyc1twb2ludGVySW5kZXhdID0ge3g6ZS5wYWdlWCwgeTplLnBhZ2VZLCBpZDogZS5wb2ludGVySWR9O1xuXHRcdH1cblx0XHRcblxuXG5cdFx0dmFyIHN0YXJ0UG9pbnRzTGlzdCA9IF9nZXRUb3VjaFBvaW50cyhlKSxcblx0XHRcdG51bVBvaW50cyA9IHN0YXJ0UG9pbnRzTGlzdC5sZW5ndGg7XG5cblx0XHRfY3VycmVudFBvaW50cyA9IG51bGw7XG5cblx0XHRfc3RvcEFsbEFuaW1hdGlvbnMoKTtcblxuXHRcdC8vIGluaXQgZHJhZ1xuXHRcdGlmKCFfaXNEcmFnZ2luZyB8fCBudW1Qb2ludHMgPT09IDEpIHtcblxuXHRcdFx0XG5cblx0XHRcdF9pc0RyYWdnaW5nID0gX2lzRmlyc3RNb3ZlID0gdHJ1ZTtcblx0XHRcdGZyYW1ld29yay5iaW5kKHdpbmRvdywgX3VwTW92ZUV2ZW50cywgc2VsZik7XG5cblx0XHRcdF9pc1pvb21pbmdJbiA9IFxuXHRcdFx0XHRfd2FzT3ZlckluaXRpYWxab29tID0gXG5cdFx0XHRcdF9vcGFjaXR5Q2hhbmdlZCA9IFxuXHRcdFx0XHRfdmVydGljYWxEcmFnSW5pdGlhdGVkID0gXG5cdFx0XHRcdF9tYWluU2Nyb2xsU2hpZnRlZCA9IFxuXHRcdFx0XHRfbW92ZWQgPSBcblx0XHRcdFx0X2lzTXVsdGl0b3VjaCA9IFxuXHRcdFx0XHRfem9vbVN0YXJ0ZWQgPSBmYWxzZTtcblxuXHRcdFx0X2RpcmVjdGlvbiA9IG51bGw7XG5cblx0XHRcdF9zaG91dCgnZmlyc3RUb3VjaFN0YXJ0Jywgc3RhcnRQb2ludHNMaXN0KTtcblxuXHRcdFx0X2VxdWFsaXplUG9pbnRzKF9zdGFydFBhbk9mZnNldCwgX3Bhbk9mZnNldCk7XG5cblx0XHRcdF9jdXJyUGFuRGlzdC54ID0gX2N1cnJQYW5EaXN0LnkgPSAwO1xuXHRcdFx0X2VxdWFsaXplUG9pbnRzKF9jdXJyUG9pbnQsIHN0YXJ0UG9pbnRzTGlzdFswXSk7XG5cdFx0XHRfZXF1YWxpemVQb2ludHMoX3N0YXJ0UG9pbnQsIF9jdXJyUG9pbnQpO1xuXG5cdFx0XHQvL19lcXVhbGl6ZVBvaW50cyhfc3RhcnRNYWluU2Nyb2xsUG9zLCBfbWFpblNjcm9sbFBvcyk7XG5cdFx0XHRfc3RhcnRNYWluU2Nyb2xsUG9zLnggPSBfc2xpZGVTaXplLnggKiBfY3VyclBvc2l0aW9uSW5kZXg7XG5cblx0XHRcdF9wb3NQb2ludHMgPSBbe1xuXHRcdFx0XHR4OiBfY3VyclBvaW50LngsXG5cdFx0XHRcdHk6IF9jdXJyUG9pbnQueVxuXHRcdFx0fV07XG5cblx0XHRcdF9nZXN0dXJlQ2hlY2tTcGVlZFRpbWUgPSBfZ2VzdHVyZVN0YXJ0VGltZSA9IF9nZXRDdXJyZW50VGltZSgpO1xuXG5cdFx0XHQvL19tYWluU2Nyb2xsQW5pbWF0aW9uRW5kKHRydWUpO1xuXHRcdFx0X2NhbGN1bGF0ZVBhbkJvdW5kcyggX2N1cnJab29tTGV2ZWwsIHRydWUgKTtcblx0XHRcdFxuXHRcdFx0Ly8gU3RhcnQgcmVuZGVyaW5nXG5cdFx0XHRfc3RvcERyYWdVcGRhdGVMb29wKCk7XG5cdFx0XHRfZHJhZ1VwZGF0ZUxvb3AoKTtcblx0XHRcdFxuXHRcdH1cblxuXHRcdC8vIGluaXQgem9vbVxuXHRcdGlmKCFfaXNab29taW5nICYmIG51bVBvaW50cyA+IDEgJiYgIV9tYWluU2Nyb2xsQW5pbWF0aW5nICYmICFfbWFpblNjcm9sbFNoaWZ0ZWQpIHtcblx0XHRcdF9zdGFydFpvb21MZXZlbCA9IF9jdXJyWm9vbUxldmVsO1xuXHRcdFx0X3pvb21TdGFydGVkID0gZmFsc2U7IC8vIHRydWUgaWYgem9vbSBjaGFuZ2VkIGF0IGxlYXN0IG9uY2VcblxuXHRcdFx0X2lzWm9vbWluZyA9IF9pc011bHRpdG91Y2ggPSB0cnVlO1xuXHRcdFx0X2N1cnJQYW5EaXN0LnkgPSBfY3VyclBhbkRpc3QueCA9IDA7XG5cblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhfc3RhcnRQYW5PZmZzZXQsIF9wYW5PZmZzZXQpO1xuXG5cdFx0XHRfZXF1YWxpemVQb2ludHMocCwgc3RhcnRQb2ludHNMaXN0WzBdKTtcblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhwMiwgc3RhcnRQb2ludHNMaXN0WzFdKTtcblxuXHRcdFx0X2ZpbmRDZW50ZXJPZlBvaW50cyhwLCBwMiwgX2N1cnJDZW50ZXJQb2ludCk7XG5cblx0XHRcdF9taWRab29tUG9pbnQueCA9IE1hdGguYWJzKF9jdXJyQ2VudGVyUG9pbnQueCkgLSBfcGFuT2Zmc2V0Lng7XG5cdFx0XHRfbWlkWm9vbVBvaW50LnkgPSBNYXRoLmFicyhfY3VyckNlbnRlclBvaW50LnkpIC0gX3Bhbk9mZnNldC55O1xuXHRcdFx0X2N1cnJQb2ludHNEaXN0YW5jZSA9IF9zdGFydFBvaW50c0Rpc3RhbmNlID0gX2NhbGN1bGF0ZVBvaW50c0Rpc3RhbmNlKHAsIHAyKTtcblx0XHR9XG5cblxuXHR9LFxuXG5cdC8vIFBvaW50ZXJtb3ZlL3RvdWNobW92ZS9tb3VzZW1vdmUgaGFuZGxlclxuXHRfb25EcmFnTW92ZSA9IGZ1bmN0aW9uKGUpIHtcblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGlmKF9wb2ludGVyRXZlbnRFbmFibGVkKSB7XG5cdFx0XHR2YXIgcG9pbnRlckluZGV4ID0gZnJhbWV3b3JrLmFycmF5U2VhcmNoKF9jdXJyUG9pbnRlcnMsIGUucG9pbnRlcklkLCAnaWQnKTtcblx0XHRcdGlmKHBvaW50ZXJJbmRleCA+IC0xKSB7XG5cdFx0XHRcdHZhciBwID0gX2N1cnJQb2ludGVyc1twb2ludGVySW5kZXhdO1xuXHRcdFx0XHRwLnggPSBlLnBhZ2VYO1xuXHRcdFx0XHRwLnkgPSBlLnBhZ2VZOyBcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihfaXNEcmFnZ2luZykge1xuXHRcdFx0dmFyIHRvdWNoZXNMaXN0ID0gX2dldFRvdWNoUG9pbnRzKGUpO1xuXHRcdFx0aWYoIV9kaXJlY3Rpb24gJiYgIV9tb3ZlZCAmJiAhX2lzWm9vbWluZykge1xuXG5cdFx0XHRcdGlmKF9tYWluU2Nyb2xsUG9zLnggIT09IF9zbGlkZVNpemUueCAqIF9jdXJyUG9zaXRpb25JbmRleCkge1xuXHRcdFx0XHRcdC8vIGlmIG1haW4gc2Nyb2xsIHBvc2l0aW9uIGlzIHNoaWZ0ZWQg4oCTIGRpcmVjdGlvbiBpcyBhbHdheXMgaG9yaXpvbnRhbFxuXHRcdFx0XHRcdF9kaXJlY3Rpb24gPSAnaCc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIGRpZmYgPSBNYXRoLmFicyh0b3VjaGVzTGlzdFswXS54IC0gX2N1cnJQb2ludC54KSAtIE1hdGguYWJzKHRvdWNoZXNMaXN0WzBdLnkgLSBfY3VyclBvaW50LnkpO1xuXHRcdFx0XHRcdC8vIGNoZWNrIHRoZSBkaXJlY3Rpb24gb2YgbW92ZW1lbnRcblx0XHRcdFx0XHRpZihNYXRoLmFicyhkaWZmKSA+PSBESVJFQ1RJT05fQ0hFQ0tfT0ZGU0VUKSB7XG5cdFx0XHRcdFx0XHRfZGlyZWN0aW9uID0gZGlmZiA+IDAgPyAnaCcgOiAndic7XG5cdFx0XHRcdFx0XHRfY3VycmVudFBvaW50cyA9IHRvdWNoZXNMaXN0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9jdXJyZW50UG9pbnRzID0gdG91Y2hlc0xpc3Q7XG5cdFx0XHR9XG5cdFx0fVx0XG5cdH0sXG5cdC8vIFxuXHRfcmVuZGVyTW92ZW1lbnQgPSAgZnVuY3Rpb24oKSB7XG5cblx0XHRpZighX2N1cnJlbnRQb2ludHMpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgbnVtUG9pbnRzID0gX2N1cnJlbnRQb2ludHMubGVuZ3RoO1xuXG5cdFx0aWYobnVtUG9pbnRzID09PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0X2VxdWFsaXplUG9pbnRzKHAsIF9jdXJyZW50UG9pbnRzWzBdKTtcblxuXHRcdGRlbHRhLnggPSBwLnggLSBfY3VyclBvaW50Lng7XG5cdFx0ZGVsdGEueSA9IHAueSAtIF9jdXJyUG9pbnQueTtcblxuXHRcdGlmKF9pc1pvb21pbmcgJiYgbnVtUG9pbnRzID4gMSkge1xuXHRcdFx0Ly8gSGFuZGxlIGJlaGF2aW91ciBmb3IgbW9yZSB0aGFuIDEgcG9pbnRcblxuXHRcdFx0X2N1cnJQb2ludC54ID0gcC54O1xuXHRcdFx0X2N1cnJQb2ludC55ID0gcC55O1xuXHRcdFxuXHRcdFx0Ly8gY2hlY2sgaWYgb25lIG9mIHR3byBwb2ludHMgY2hhbmdlZFxuXHRcdFx0aWYoICFkZWx0YS54ICYmICFkZWx0YS55ICYmIF9pc0VxdWFsUG9pbnRzKF9jdXJyZW50UG9pbnRzWzFdLCBwMikgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0X2VxdWFsaXplUG9pbnRzKHAyLCBfY3VycmVudFBvaW50c1sxXSk7XG5cblxuXHRcdFx0aWYoIV96b29tU3RhcnRlZCkge1xuXHRcdFx0XHRfem9vbVN0YXJ0ZWQgPSB0cnVlO1xuXHRcdFx0XHRfc2hvdXQoJ3pvb21HZXN0dXJlU3RhcnRlZCcpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBEaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHNcblx0XHRcdHZhciBwb2ludHNEaXN0YW5jZSA9IF9jYWxjdWxhdGVQb2ludHNEaXN0YW5jZShwLHAyKTtcblxuXHRcdFx0dmFyIHpvb21MZXZlbCA9IF9jYWxjdWxhdGVab29tTGV2ZWwocG9pbnRzRGlzdGFuY2UpO1xuXG5cdFx0XHQvLyBzbGlnaHRseSBvdmVyIHRoZSBvZiBpbml0aWFsIHpvb20gbGV2ZWxcblx0XHRcdGlmKHpvb21MZXZlbCA+IHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbCArIHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbCAvIDE1KSB7XG5cdFx0XHRcdF93YXNPdmVySW5pdGlhbFpvb20gPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBcHBseSB0aGUgZnJpY3Rpb24gaWYgem9vbSBsZXZlbCBpcyBvdXQgb2YgdGhlIGJvdW5kc1xuXHRcdFx0dmFyIHpvb21GcmljdGlvbiA9IDEsXG5cdFx0XHRcdG1pblpvb21MZXZlbCA9IF9nZXRNaW5ab29tTGV2ZWwoKSxcblx0XHRcdFx0bWF4Wm9vbUxldmVsID0gX2dldE1heFpvb21MZXZlbCgpO1xuXG5cdFx0XHRpZiAoIHpvb21MZXZlbCA8IG1pblpvb21MZXZlbCApIHtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKF9vcHRpb25zLnBpbmNoVG9DbG9zZSAmJiAhX3dhc092ZXJJbml0aWFsWm9vbSAmJiBfc3RhcnRab29tTGV2ZWwgPD0gc2VsZi5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsKSB7XG5cdFx0XHRcdFx0Ly8gZmFkZSBvdXQgYmFja2dyb3VuZCBpZiB6b29taW5nIG91dFxuXHRcdFx0XHRcdHZhciBtaW51c0RpZmYgPSBtaW5ab29tTGV2ZWwgLSB6b29tTGV2ZWw7XG5cdFx0XHRcdFx0dmFyIHBlcmNlbnQgPSAxIC0gbWludXNEaWZmIC8gKG1pblpvb21MZXZlbCAvIDEuMik7XG5cblx0XHRcdFx0XHRfYXBwbHlCZ09wYWNpdHkocGVyY2VudCk7XG5cdFx0XHRcdFx0X3Nob3V0KCdvblBpbmNoQ2xvc2UnLCBwZXJjZW50KTtcblx0XHRcdFx0XHRfb3BhY2l0eUNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHpvb21GcmljdGlvbiA9IChtaW5ab29tTGV2ZWwgLSB6b29tTGV2ZWwpIC8gbWluWm9vbUxldmVsO1xuXHRcdFx0XHRcdGlmKHpvb21GcmljdGlvbiA+IDEpIHtcblx0XHRcdFx0XHRcdHpvb21GcmljdGlvbiA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHpvb21MZXZlbCA9IG1pblpvb21MZXZlbCAtIHpvb21GcmljdGlvbiAqIChtaW5ab29tTGV2ZWwgLyAzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH0gZWxzZSBpZiAoIHpvb21MZXZlbCA+IG1heFpvb21MZXZlbCApIHtcblx0XHRcdFx0Ly8gMS41IC0gZXh0cmEgem9vbSBsZXZlbCBhYm92ZSB0aGUgbWF4LiBFLmcuIGlmIG1heCBpcyB4NiwgcmVhbCBtYXggNiArIDEuNSA9IDcuNVxuXHRcdFx0XHR6b29tRnJpY3Rpb24gPSAoem9vbUxldmVsIC0gbWF4Wm9vbUxldmVsKSAvICggbWluWm9vbUxldmVsICogNiApO1xuXHRcdFx0XHRpZih6b29tRnJpY3Rpb24gPiAxKSB7XG5cdFx0XHRcdFx0em9vbUZyaWN0aW9uID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHR6b29tTGV2ZWwgPSBtYXhab29tTGV2ZWwgKyB6b29tRnJpY3Rpb24gKiBtaW5ab29tTGV2ZWw7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHpvb21GcmljdGlvbiA8IDApIHtcblx0XHRcdFx0em9vbUZyaWN0aW9uID0gMDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZGlzdGFuY2UgYmV0d2VlbiB0b3VjaCBwb2ludHMgYWZ0ZXIgZnJpY3Rpb24gaXMgYXBwbGllZFxuXHRcdFx0X2N1cnJQb2ludHNEaXN0YW5jZSA9IHBvaW50c0Rpc3RhbmNlO1xuXG5cdFx0XHQvLyBfY2VudGVyUG9pbnQgLSBUaGUgcG9pbnQgaW4gdGhlIG1pZGRsZSBvZiB0d28gcG9pbnRlcnNcblx0XHRcdF9maW5kQ2VudGVyT2ZQb2ludHMocCwgcDIsIF9jZW50ZXJQb2ludCk7XG5cdFx0XG5cdFx0XHQvLyBwYW5pbmcgd2l0aCB0d28gcG9pbnRlcnMgcHJlc3NlZFxuXHRcdFx0X2N1cnJQYW5EaXN0LnggKz0gX2NlbnRlclBvaW50LnggLSBfY3VyckNlbnRlclBvaW50Lng7XG5cdFx0XHRfY3VyclBhbkRpc3QueSArPSBfY2VudGVyUG9pbnQueSAtIF9jdXJyQ2VudGVyUG9pbnQueTtcblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhfY3VyckNlbnRlclBvaW50LCBfY2VudGVyUG9pbnQpO1xuXG5cdFx0XHRfcGFuT2Zmc2V0LnggPSBfY2FsY3VsYXRlUGFuT2Zmc2V0KCd4Jywgem9vbUxldmVsKTtcblx0XHRcdF9wYW5PZmZzZXQueSA9IF9jYWxjdWxhdGVQYW5PZmZzZXQoJ3knLCB6b29tTGV2ZWwpO1xuXG5cdFx0XHRfaXNab29taW5nSW4gPSB6b29tTGV2ZWwgPiBfY3Vyclpvb21MZXZlbDtcblx0XHRcdF9jdXJyWm9vbUxldmVsID0gem9vbUxldmVsO1xuXHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGhhbmRsZSBiZWhhdmlvdXIgZm9yIG9uZSBwb2ludCAoZHJhZ2dpbmcgb3IgcGFubmluZylcblxuXHRcdFx0aWYoIV9kaXJlY3Rpb24pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihfaXNGaXJzdE1vdmUpIHtcblx0XHRcdFx0X2lzRmlyc3RNb3ZlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gc3VidHJhY3QgZHJhZyBkaXN0YW5jZSB0aGF0IHdhcyB1c2VkIGR1cmluZyB0aGUgZGV0ZWN0aW9uIGRpcmVjdGlvbiAgXG5cblx0XHRcdFx0aWYoIE1hdGguYWJzKGRlbHRhLngpID49IERJUkVDVElPTl9DSEVDS19PRkZTRVQpIHtcblx0XHRcdFx0XHRkZWx0YS54IC09IF9jdXJyZW50UG9pbnRzWzBdLnggLSBfc3RhcnRQb2ludC54O1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiggTWF0aC5hYnMoZGVsdGEueSkgPj0gRElSRUNUSU9OX0NIRUNLX09GRlNFVCkge1xuXHRcdFx0XHRcdGRlbHRhLnkgLT0gX2N1cnJlbnRQb2ludHNbMF0ueSAtIF9zdGFydFBvaW50Lnk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0X2N1cnJQb2ludC54ID0gcC54O1xuXHRcdFx0X2N1cnJQb2ludC55ID0gcC55O1xuXG5cdFx0XHQvLyBkbyBub3RoaW5nIGlmIHBvaW50ZXJzIHBvc2l0aW9uIGhhc24ndCBjaGFuZ2VkXG5cdFx0XHRpZihkZWx0YS54ID09PSAwICYmIGRlbHRhLnkgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihfZGlyZWN0aW9uID09PSAndicgJiYgX29wdGlvbnMuY2xvc2VPblZlcnRpY2FsRHJhZykge1xuXHRcdFx0XHRpZighX2NhblBhbigpKSB7XG5cdFx0XHRcdFx0X2N1cnJQYW5EaXN0LnkgKz0gZGVsdGEueTtcblx0XHRcdFx0XHRfcGFuT2Zmc2V0LnkgKz0gZGVsdGEueTtcblxuXHRcdFx0XHRcdHZhciBvcGFjaXR5UmF0aW8gPSBfY2FsY3VsYXRlVmVydGljYWxEcmFnT3BhY2l0eVJhdGlvKCk7XG5cblx0XHRcdFx0XHRfdmVydGljYWxEcmFnSW5pdGlhdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRfc2hvdXQoJ29uVmVydGljYWxEcmFnJywgb3BhY2l0eVJhdGlvKTtcblxuXHRcdFx0XHRcdF9hcHBseUJnT3BhY2l0eShvcGFjaXR5UmF0aW8pO1xuXHRcdFx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cdFx0XHRcdFx0cmV0dXJuIDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRfcHVzaFBvc1BvaW50KF9nZXRDdXJyZW50VGltZSgpLCBwLngsIHAueSk7XG5cblx0XHRcdF9tb3ZlZCA9IHRydWU7XG5cdFx0XHRfY3VyclBhbkJvdW5kcyA9IHNlbGYuY3Vyckl0ZW0uYm91bmRzO1xuXHRcdFx0XG5cdFx0XHR2YXIgbWFpblNjcm9sbENoYW5nZWQgPSBfcGFuT3JNb3ZlTWFpblNjcm9sbCgneCcsIGRlbHRhKTtcblx0XHRcdGlmKCFtYWluU2Nyb2xsQ2hhbmdlZCkge1xuXHRcdFx0XHRfcGFuT3JNb3ZlTWFpblNjcm9sbCgneScsIGRlbHRhKTtcblxuXHRcdFx0XHRfcm91bmRQb2ludChfcGFuT2Zmc2V0KTtcblx0XHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXHRcblx0Ly8gUG9pbnRlcnVwL3BvaW50ZXJjYW5jZWwvdG91Y2hlbmQvdG91Y2hjYW5jZWwvbW91c2V1cCBldmVudCBoYW5kbGVyXG5cdF9vbkRyYWdSZWxlYXNlID0gZnVuY3Rpb24oZSkge1xuXG5cdFx0aWYoX2ZlYXR1cmVzLmlzT2xkQW5kcm9pZCApIHtcblxuXHRcdFx0aWYoX29sZEFuZHJvaWRUb3VjaEVuZFRpbWVvdXQgJiYgZS50eXBlID09PSAnbW91c2V1cCcpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBvbiBBbmRyb2lkICh2NC4xLCA0LjIsIDQuMyAmIHBvc3NpYmx5IG9sZGVyKSBcblx0XHRcdC8vIGdob3N0IG1vdXNlZG93bi91cCBldmVudCBpc24ndCBwcmV2ZW50YWJsZSB2aWEgZS5wcmV2ZW50RGVmYXVsdCxcblx0XHRcdC8vIHdoaWNoIGNhdXNlcyBmYWtlIG1vdXNlZG93biBldmVudFxuXHRcdFx0Ly8gc28gd2UgYmxvY2sgbW91c2Vkb3duL3VwIGZvciA2MDBtc1xuXHRcdFx0aWYoIGUudHlwZS5pbmRleE9mKCd0b3VjaCcpID4gLTEgKSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dChfb2xkQW5kcm9pZFRvdWNoRW5kVGltZW91dCk7XG5cdFx0XHRcdF9vbGRBbmRyb2lkVG91Y2hFbmRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRfb2xkQW5kcm9pZFRvdWNoRW5kVGltZW91dCA9IDA7XG5cdFx0XHRcdH0sIDYwMCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9XG5cblx0XHRfc2hvdXQoJ3BvaW50ZXJVcCcpO1xuXG5cdFx0aWYoX3ByZXZlbnREZWZhdWx0RXZlbnRCZWhhdmlvdXIoZSwgZmFsc2UpKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlbGVhc2VQb2ludDtcblxuXHRcdGlmKF9wb2ludGVyRXZlbnRFbmFibGVkKSB7XG5cdFx0XHR2YXIgcG9pbnRlckluZGV4ID0gZnJhbWV3b3JrLmFycmF5U2VhcmNoKF9jdXJyUG9pbnRlcnMsIGUucG9pbnRlcklkLCAnaWQnKTtcblx0XHRcdFxuXHRcdFx0aWYocG9pbnRlckluZGV4ID4gLTEpIHtcblx0XHRcdFx0cmVsZWFzZVBvaW50ID0gX2N1cnJQb2ludGVycy5zcGxpY2UocG9pbnRlckluZGV4LCAxKVswXTtcblxuXHRcdFx0XHRpZihuYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQpIHtcblx0XHRcdFx0XHRyZWxlYXNlUG9pbnQudHlwZSA9IGUucG9pbnRlclR5cGUgfHwgJ21vdXNlJztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgTVNQT0lOVEVSX1RZUEVTID0ge1xuXHRcdFx0XHRcdFx0NDogJ21vdXNlJywgLy8gZXZlbnQuTVNQT0lOVEVSX1RZUEVfTU9VU0Vcblx0XHRcdFx0XHRcdDI6ICd0b3VjaCcsIC8vIGV2ZW50Lk1TUE9JTlRFUl9UWVBFX1RPVUNIIFxuXHRcdFx0XHRcdFx0MzogJ3BlbicgLy8gZXZlbnQuTVNQT0lOVEVSX1RZUEVfUEVOXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRyZWxlYXNlUG9pbnQudHlwZSA9IE1TUE9JTlRFUl9UWVBFU1tlLnBvaW50ZXJUeXBlXTtcblxuXHRcdFx0XHRcdGlmKCFyZWxlYXNlUG9pbnQudHlwZSkge1xuXHRcdFx0XHRcdFx0cmVsZWFzZVBvaW50LnR5cGUgPSBlLnBvaW50ZXJUeXBlIHx8ICdtb3VzZSc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgdG91Y2hMaXN0ID0gX2dldFRvdWNoUG9pbnRzKGUpLFxuXHRcdFx0Z2VzdHVyZVR5cGUsXG5cdFx0XHRudW1Qb2ludHMgPSB0b3VjaExpc3QubGVuZ3RoO1xuXG5cdFx0aWYoZS50eXBlID09PSAnbW91c2V1cCcpIHtcblx0XHRcdG51bVBvaW50cyA9IDA7XG5cdFx0fVxuXG5cdFx0Ly8gRG8gbm90aGluZyBpZiB0aGVyZSB3ZXJlIDMgdG91Y2ggcG9pbnRzIG9yIG1vcmVcblx0XHRpZihudW1Qb2ludHMgPT09IDIpIHtcblx0XHRcdF9jdXJyZW50UG9pbnRzID0gbnVsbDtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIGlmIHNlY29uZCBwb2ludGVyIHJlbGVhc2VkXG5cdFx0aWYobnVtUG9pbnRzID09PSAxKSB7XG5cdFx0XHRfZXF1YWxpemVQb2ludHMoX3N0YXJ0UG9pbnQsIHRvdWNoTGlzdFswXSk7XG5cdFx0fVx0XHRcdFx0XG5cblxuXHRcdC8vIHBvaW50ZXIgaGFzbid0IG1vdmVkLCBzZW5kIFwidGFwIHJlbGVhc2VcIiBwb2ludFxuXHRcdGlmKG51bVBvaW50cyA9PT0gMCAmJiAhX2RpcmVjdGlvbiAmJiAhX21haW5TY3JvbGxBbmltYXRpbmcpIHtcblx0XHRcdGlmKCFyZWxlYXNlUG9pbnQpIHtcblx0XHRcdFx0aWYoZS50eXBlID09PSAnbW91c2V1cCcpIHtcblx0XHRcdFx0XHRyZWxlYXNlUG9pbnQgPSB7eDogZS5wYWdlWCwgeTogZS5wYWdlWSwgdHlwZTonbW91c2UnfTtcblx0XHRcdFx0fSBlbHNlIGlmKGUuY2hhbmdlZFRvdWNoZXMgJiYgZS5jaGFuZ2VkVG91Y2hlc1swXSkge1xuXHRcdFx0XHRcdHJlbGVhc2VQb2ludCA9IHt4OiBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYLCB5OiBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZLCB0eXBlOid0b3VjaCd9O1xuXHRcdFx0XHR9XHRcdFxuXHRcdFx0fVxuXG5cdFx0XHRfc2hvdXQoJ3RvdWNoUmVsZWFzZScsIGUsIHJlbGVhc2VQb2ludCk7XG5cdFx0fVxuXG5cdFx0Ly8gRGlmZmVyZW5jZSBpbiB0aW1lIGJldHdlZW4gcmVsZWFzaW5nIG9mIHR3byBsYXN0IHRvdWNoIHBvaW50cyAoem9vbSBnZXN0dXJlKVxuXHRcdHZhciByZWxlYXNlVGltZURpZmYgPSAtMTtcblxuXHRcdC8vIEdlc3R1cmUgY29tcGxldGVkLCBubyBwb2ludGVycyBsZWZ0XG5cdFx0aWYobnVtUG9pbnRzID09PSAwKSB7XG5cdFx0XHRfaXNEcmFnZ2luZyA9IGZhbHNlO1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZCh3aW5kb3csIF91cE1vdmVFdmVudHMsIHNlbGYpO1xuXG5cdFx0XHRfc3RvcERyYWdVcGRhdGVMb29wKCk7XG5cblx0XHRcdGlmKF9pc1pvb21pbmcpIHtcblx0XHRcdFx0Ly8gVHdvIHBvaW50cyByZWxlYXNlZCBhdCB0aGUgc2FtZSB0aW1lXG5cdFx0XHRcdHJlbGVhc2VUaW1lRGlmZiA9IDA7XG5cdFx0XHR9IGVsc2UgaWYoX2xhc3RSZWxlYXNlVGltZSAhPT0gLTEpIHtcblx0XHRcdFx0cmVsZWFzZVRpbWVEaWZmID0gX2dldEN1cnJlbnRUaW1lKCkgLSBfbGFzdFJlbGVhc2VUaW1lO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRfbGFzdFJlbGVhc2VUaW1lID0gbnVtUG9pbnRzID09PSAxID8gX2dldEN1cnJlbnRUaW1lKCkgOiAtMTtcblx0XHRcblx0XHRpZihyZWxlYXNlVGltZURpZmYgIT09IC0xICYmIHJlbGVhc2VUaW1lRGlmZiA8IDE1MCkge1xuXHRcdFx0Z2VzdHVyZVR5cGUgPSAnem9vbSc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGdlc3R1cmVUeXBlID0gJ3N3aXBlJztcblx0XHR9XG5cblx0XHRpZihfaXNab29taW5nICYmIG51bVBvaW50cyA8IDIpIHtcblx0XHRcdF9pc1pvb21pbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gT25seSBzZWNvbmQgcG9pbnQgcmVsZWFzZWRcblx0XHRcdGlmKG51bVBvaW50cyA9PT0gMSkge1xuXHRcdFx0XHRnZXN0dXJlVHlwZSA9ICd6b29tUG9pbnRlclVwJztcblx0XHRcdH1cblx0XHRcdF9zaG91dCgnem9vbUdlc3R1cmVFbmRlZCcpO1xuXHRcdH1cblxuXHRcdF9jdXJyZW50UG9pbnRzID0gbnVsbDtcblx0XHRpZighX21vdmVkICYmICFfem9vbVN0YXJ0ZWQgJiYgIV9tYWluU2Nyb2xsQW5pbWF0aW5nICYmICFfdmVydGljYWxEcmFnSW5pdGlhdGVkKSB7XG5cdFx0XHQvLyBub3RoaW5nIHRvIGFuaW1hdGVcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdF9zdG9wQWxsQW5pbWF0aW9ucygpO1xuXG5cdFx0XG5cdFx0aWYoIV9yZWxlYXNlQW5pbURhdGEpIHtcblx0XHRcdF9yZWxlYXNlQW5pbURhdGEgPSBfaW5pdERyYWdSZWxlYXNlQW5pbWF0aW9uRGF0YSgpO1xuXHRcdH1cblx0XHRcblx0XHRfcmVsZWFzZUFuaW1EYXRhLmNhbGN1bGF0ZVN3aXBlU3BlZWQoJ3gnKTtcblxuXG5cdFx0aWYoX3ZlcnRpY2FsRHJhZ0luaXRpYXRlZCkge1xuXG5cdFx0XHR2YXIgb3BhY2l0eVJhdGlvID0gX2NhbGN1bGF0ZVZlcnRpY2FsRHJhZ09wYWNpdHlSYXRpbygpO1xuXG5cdFx0XHRpZihvcGFjaXR5UmF0aW8gPCBfb3B0aW9ucy52ZXJ0aWNhbERyYWdSYW5nZSkge1xuXHRcdFx0XHRzZWxmLmNsb3NlKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgaW5pdGFsUGFuWSA9IF9wYW5PZmZzZXQueSxcblx0XHRcdFx0XHRpbml0aWFsQmdPcGFjaXR5ID0gX2JnT3BhY2l0eTtcblxuXHRcdFx0XHRfYW5pbWF0ZVByb3AoJ3ZlcnRpY2FsRHJhZycsIDAsIDEsIDMwMCwgZnJhbWV3b3JrLmVhc2luZy5jdWJpYy5vdXQsIGZ1bmN0aW9uKG5vdykge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdF9wYW5PZmZzZXQueSA9IChzZWxmLmN1cnJJdGVtLmluaXRpYWxQb3NpdGlvbi55IC0gaW5pdGFsUGFuWSkgKiBub3cgKyBpbml0YWxQYW5ZO1xuXG5cdFx0XHRcdFx0X2FwcGx5QmdPcGFjaXR5KCAgKDEgLSBpbml0aWFsQmdPcGFjaXR5KSAqIG5vdyArIGluaXRpYWxCZ09wYWNpdHkgKTtcblx0XHRcdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRfc2hvdXQoJ29uVmVydGljYWxEcmFnJywgMSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblxuXHRcdC8vIG1haW4gc2Nyb2xsIFxuXHRcdGlmKCAgKF9tYWluU2Nyb2xsU2hpZnRlZCB8fCBfbWFpblNjcm9sbEFuaW1hdGluZykgJiYgbnVtUG9pbnRzID09PSAwKSB7XG5cdFx0XHR2YXIgaXRlbUNoYW5nZWQgPSBfZmluaXNoU3dpcGVNYWluU2Nyb2xsR2VzdHVyZShnZXN0dXJlVHlwZSwgX3JlbGVhc2VBbmltRGF0YSk7XG5cdFx0XHRpZihpdGVtQ2hhbmdlZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRnZXN0dXJlVHlwZSA9ICd6b29tUG9pbnRlclVwJztcblx0XHR9XG5cblx0XHQvLyBwcmV2ZW50IHpvb20vcGFuIGFuaW1hdGlvbiB3aGVuIG1haW4gc2Nyb2xsIGFuaW1hdGlvbiBydW5zXG5cdFx0aWYoX21haW5TY3JvbGxBbmltYXRpbmcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gQ29tcGxldGUgc2ltcGxlIHpvb20gZ2VzdHVyZSAocmVzZXQgem9vbSBsZXZlbCBpZiBpdCdzIG91dCBvZiB0aGUgYm91bmRzKSAgXG5cdFx0aWYoZ2VzdHVyZVR5cGUgIT09ICdzd2lwZScpIHtcblx0XHRcdF9jb21wbGV0ZVpvb21HZXN0dXJlKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHQvLyBDb21wbGV0ZSBwYW4gZ2VzdHVyZSBpZiBtYWluIHNjcm9sbCBpcyBub3Qgc2hpZnRlZCwgYW5kIGl0J3MgcG9zc2libGUgdG8gcGFuIGN1cnJlbnQgaW1hZ2Vcblx0XHRpZighX21haW5TY3JvbGxTaGlmdGVkICYmIF9jdXJyWm9vbUxldmVsID4gc2VsZi5jdXJySXRlbS5maXRSYXRpbykge1xuXHRcdFx0X2NvbXBsZXRlUGFuR2VzdHVyZShfcmVsZWFzZUFuaW1EYXRhKTtcblx0XHR9XG5cdH0sXG5cblxuXHQvLyBSZXR1cm5zIG9iamVjdCB3aXRoIGRhdGEgYWJvdXQgZ2VzdHVyZVxuXHQvLyBJdCdzIGNyZWF0ZWQgb25seSBvbmNlIGFuZCB0aGVuIHJldXNlZFxuXHRfaW5pdERyYWdSZWxlYXNlQW5pbWF0aW9uRGF0YSAgPSBmdW5jdGlvbigpIHtcblx0XHQvLyB0ZW1wIGxvY2FsIHZhcnNcblx0XHR2YXIgbGFzdEZsaWNrRHVyYXRpb24sXG5cdFx0XHR0ZW1wUmVsZWFzZVBvcztcblxuXHRcdC8vIHMgPSB0aGlzXG5cdFx0dmFyIHMgPSB7XG5cdFx0XHRsYXN0RmxpY2tPZmZzZXQ6IHt9LFxuXHRcdFx0bGFzdEZsaWNrRGlzdDoge30sXG5cdFx0XHRsYXN0RmxpY2tTcGVlZDoge30sXG5cdFx0XHRzbG93RG93blJhdGlvOiAge30sXG5cdFx0XHRzbG93RG93blJhdGlvUmV2ZXJzZTogIHt9LFxuXHRcdFx0c3BlZWREZWNlbGVyYXRpb25SYXRpbzogIHt9LFxuXHRcdFx0c3BlZWREZWNlbGVyYXRpb25SYXRpb0FiczogIHt9LFxuXHRcdFx0ZGlzdGFuY2VPZmZzZXQ6ICB7fSxcblx0XHRcdGJhY2tBbmltRGVzdGluYXRpb246IHt9LFxuXHRcdFx0YmFja0FuaW1TdGFydGVkOiB7fSxcblx0XHRcdGNhbGN1bGF0ZVN3aXBlU3BlZWQ6IGZ1bmN0aW9uKGF4aXMpIHtcblx0XHRcdFx0XG5cblx0XHRcdFx0aWYoIF9wb3NQb2ludHMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdGxhc3RGbGlja0R1cmF0aW9uID0gX2dldEN1cnJlbnRUaW1lKCkgLSBfZ2VzdHVyZUNoZWNrU3BlZWRUaW1lICsgNTA7XG5cdFx0XHRcdFx0dGVtcFJlbGVhc2VQb3MgPSBfcG9zUG9pbnRzW19wb3NQb2ludHMubGVuZ3RoLTJdW2F4aXNdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxhc3RGbGlja0R1cmF0aW9uID0gX2dldEN1cnJlbnRUaW1lKCkgLSBfZ2VzdHVyZVN0YXJ0VGltZTsgLy8gdG90YWwgZ2VzdHVyZSBkdXJhdGlvblxuXHRcdFx0XHRcdHRlbXBSZWxlYXNlUG9zID0gX3N0YXJ0UG9pbnRbYXhpc107XG5cdFx0XHRcdH1cblx0XHRcdFx0cy5sYXN0RmxpY2tPZmZzZXRbYXhpc10gPSBfY3VyclBvaW50W2F4aXNdIC0gdGVtcFJlbGVhc2VQb3M7XG5cdFx0XHRcdHMubGFzdEZsaWNrRGlzdFtheGlzXSA9IE1hdGguYWJzKHMubGFzdEZsaWNrT2Zmc2V0W2F4aXNdKTtcblx0XHRcdFx0aWYocy5sYXN0RmxpY2tEaXN0W2F4aXNdID4gMjApIHtcblx0XHRcdFx0XHRzLmxhc3RGbGlja1NwZWVkW2F4aXNdID0gcy5sYXN0RmxpY2tPZmZzZXRbYXhpc10gLyBsYXN0RmxpY2tEdXJhdGlvbjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzLmxhc3RGbGlja1NwZWVkW2F4aXNdID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiggTWF0aC5hYnMocy5sYXN0RmxpY2tTcGVlZFtheGlzXSkgPCAwLjEgKSB7XG5cdFx0XHRcdFx0cy5sYXN0RmxpY2tTcGVlZFtheGlzXSA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHMuc2xvd0Rvd25SYXRpb1theGlzXSA9IDAuOTU7XG5cdFx0XHRcdHMuc2xvd0Rvd25SYXRpb1JldmVyc2VbYXhpc10gPSAxIC0gcy5zbG93RG93blJhdGlvW2F4aXNdO1xuXHRcdFx0XHRzLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9bYXhpc10gPSAxO1xuXHRcdFx0fSxcblxuXHRcdFx0Y2FsY3VsYXRlT3ZlckJvdW5kc0FuaW1PZmZzZXQ6IGZ1bmN0aW9uKGF4aXMsIHNwZWVkKSB7XG5cdFx0XHRcdGlmKCFzLmJhY2tBbmltU3RhcnRlZFtheGlzXSkge1xuXG5cdFx0XHRcdFx0aWYoX3Bhbk9mZnNldFtheGlzXSA+IF9jdXJyUGFuQm91bmRzLm1pbltheGlzXSkge1xuXHRcdFx0XHRcdFx0cy5iYWNrQW5pbURlc3RpbmF0aW9uW2F4aXNdID0gX2N1cnJQYW5Cb3VuZHMubWluW2F4aXNdO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fSBlbHNlIGlmKF9wYW5PZmZzZXRbYXhpc10gPCBfY3VyclBhbkJvdW5kcy5tYXhbYXhpc10pIHtcblx0XHRcdFx0XHRcdHMuYmFja0FuaW1EZXN0aW5hdGlvbltheGlzXSA9IF9jdXJyUGFuQm91bmRzLm1heFtheGlzXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZihzLmJhY2tBbmltRGVzdGluYXRpb25bYXhpc10gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0cy5zbG93RG93blJhdGlvW2F4aXNdID0gMC43O1xuXHRcdFx0XHRcdFx0cy5zbG93RG93blJhdGlvUmV2ZXJzZVtheGlzXSA9IDEgLSBzLnNsb3dEb3duUmF0aW9bYXhpc107XG5cdFx0XHRcdFx0XHRpZihzLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9BYnNbYXhpc10gPCAwLjA1KSB7XG5cblx0XHRcdFx0XHRcdFx0cy5sYXN0RmxpY2tTcGVlZFtheGlzXSA9IDA7XG5cdFx0XHRcdFx0XHRcdHMuYmFja0FuaW1TdGFydGVkW2F4aXNdID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0XHRfYW5pbWF0ZVByb3AoJ2JvdW5jZVpvb21QYW4nK2F4aXMsX3Bhbk9mZnNldFtheGlzXSwgXG5cdFx0XHRcdFx0XHRcdFx0cy5iYWNrQW5pbURlc3RpbmF0aW9uW2F4aXNdLCBcblx0XHRcdFx0XHRcdFx0XHRzcGVlZCB8fCAzMDAsIFxuXHRcdFx0XHRcdFx0XHRcdGZyYW1ld29yay5lYXNpbmcuc2luZS5vdXQsIFxuXHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKHBvcykge1xuXHRcdFx0XHRcdFx0XHRcdFx0X3Bhbk9mZnNldFtheGlzXSA9IHBvcztcblx0XHRcdFx0XHRcdFx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZWR1Y2VzIHRoZSBzcGVlZCBieSBzbG93RG93blJhdGlvIChwZXIgMTBtcylcblx0XHRcdGNhbGN1bGF0ZUFuaW1PZmZzZXQ6IGZ1bmN0aW9uKGF4aXMpIHtcblx0XHRcdFx0aWYoIXMuYmFja0FuaW1TdGFydGVkW2F4aXNdKSB7XG5cdFx0XHRcdFx0cy5zcGVlZERlY2VsZXJhdGlvblJhdGlvW2F4aXNdID0gcy5zcGVlZERlY2VsZXJhdGlvblJhdGlvW2F4aXNdICogKHMuc2xvd0Rvd25SYXRpb1theGlzXSArIFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cy5zbG93RG93blJhdGlvUmV2ZXJzZVtheGlzXSAtIFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cy5zbG93RG93blJhdGlvUmV2ZXJzZVtheGlzXSAqIHMudGltZURpZmYgLyAxMCk7XG5cblx0XHRcdFx0XHRzLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9BYnNbYXhpc10gPSBNYXRoLmFicyhzLmxhc3RGbGlja1NwZWVkW2F4aXNdICogcy5zcGVlZERlY2VsZXJhdGlvblJhdGlvW2F4aXNdKTtcblx0XHRcdFx0XHRzLmRpc3RhbmNlT2Zmc2V0W2F4aXNdID0gcy5sYXN0RmxpY2tTcGVlZFtheGlzXSAqIHMuc3BlZWREZWNlbGVyYXRpb25SYXRpb1theGlzXSAqIHMudGltZURpZmY7XG5cdFx0XHRcdFx0X3Bhbk9mZnNldFtheGlzXSArPSBzLmRpc3RhbmNlT2Zmc2V0W2F4aXNdO1xuXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdHBhbkFuaW1Mb29wOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBfYW5pbWF0aW9ucy56b29tUGFuICkge1xuXHRcdFx0XHRcdF9hbmltYXRpb25zLnpvb21QYW4ucmFmID0gX3JlcXVlc3RBRihzLnBhbkFuaW1Mb29wKTtcblxuXHRcdFx0XHRcdHMubm93ID0gX2dldEN1cnJlbnRUaW1lKCk7XG5cdFx0XHRcdFx0cy50aW1lRGlmZiA9IHMubm93IC0gcy5sYXN0Tm93O1xuXHRcdFx0XHRcdHMubGFzdE5vdyA9IHMubm93O1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHMuY2FsY3VsYXRlQW5pbU9mZnNldCgneCcpO1xuXHRcdFx0XHRcdHMuY2FsY3VsYXRlQW5pbU9mZnNldCgneScpO1xuXG5cdFx0XHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzLmNhbGN1bGF0ZU92ZXJCb3VuZHNBbmltT2Zmc2V0KCd4Jyk7XG5cdFx0XHRcdFx0cy5jYWxjdWxhdGVPdmVyQm91bmRzQW5pbU9mZnNldCgneScpO1xuXG5cblx0XHRcdFx0XHRpZiAocy5zcGVlZERlY2VsZXJhdGlvblJhdGlvQWJzLnggPCAwLjA1ICYmIHMuc3BlZWREZWNlbGVyYXRpb25SYXRpb0Ficy55IDwgMC4wNSkge1xuXG5cdFx0XHRcdFx0XHQvLyByb3VuZCBwYW4gcG9zaXRpb25cblx0XHRcdFx0XHRcdF9wYW5PZmZzZXQueCA9IE1hdGgucm91bmQoX3Bhbk9mZnNldC54KTtcblx0XHRcdFx0XHRcdF9wYW5PZmZzZXQueSA9IE1hdGgucm91bmQoX3Bhbk9mZnNldC55KTtcblx0XHRcdFx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdF9zdG9wQW5pbWF0aW9uKCd6b29tUGFuJyk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHR9O1xuXHRcdHJldHVybiBzO1xuXHR9LFxuXG5cdF9jb21wbGV0ZVBhbkdlc3R1cmUgPSBmdW5jdGlvbihhbmltRGF0YSkge1xuXHRcdC8vIGNhbGN1bGF0ZSBzd2lwZSBzcGVlZCBmb3IgWSBheGlzIChwYWFubmluZylcblx0XHRhbmltRGF0YS5jYWxjdWxhdGVTd2lwZVNwZWVkKCd5Jyk7XG5cblx0XHRfY3VyclBhbkJvdW5kcyA9IHNlbGYuY3Vyckl0ZW0uYm91bmRzO1xuXHRcdFxuXHRcdGFuaW1EYXRhLmJhY2tBbmltRGVzdGluYXRpb24gPSB7fTtcblx0XHRhbmltRGF0YS5iYWNrQW5pbVN0YXJ0ZWQgPSB7fTtcblxuXHRcdC8vIEF2b2lkIGFjY2VsZXJhdGlvbiBhbmltYXRpb24gaWYgc3BlZWQgaXMgdG9vIGxvd1xuXHRcdGlmKE1hdGguYWJzKGFuaW1EYXRhLmxhc3RGbGlja1NwZWVkLngpIDw9IDAuMDUgJiYgTWF0aC5hYnMoYW5pbURhdGEubGFzdEZsaWNrU3BlZWQueSkgPD0gMC4wNSApIHtcblx0XHRcdGFuaW1EYXRhLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9BYnMueCA9IGFuaW1EYXRhLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9BYnMueSA9IDA7XG5cblx0XHRcdC8vIFJ1biBwYW4gZHJhZyByZWxlYXNlIGFuaW1hdGlvbi4gRS5nLiBpZiB5b3UgZHJhZyBpbWFnZSBhbmQgcmVsZWFzZSBmaW5nZXIgd2l0aG91dCBtb21lbnR1bS5cblx0XHRcdGFuaW1EYXRhLmNhbGN1bGF0ZU92ZXJCb3VuZHNBbmltT2Zmc2V0KCd4Jyk7XG5cdFx0XHRhbmltRGF0YS5jYWxjdWxhdGVPdmVyQm91bmRzQW5pbU9mZnNldCgneScpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0aW9uIGxvb3AgdGhhdCBjb250cm9scyB0aGUgYWNjZWxlcmF0aW9uIGFmdGVyIHBhbiBnZXN0dXJlIGVuZHNcblx0XHRfcmVnaXN0ZXJTdGFydEFuaW1hdGlvbignem9vbVBhbicpO1xuXHRcdGFuaW1EYXRhLmxhc3ROb3cgPSBfZ2V0Q3VycmVudFRpbWUoKTtcblx0XHRhbmltRGF0YS5wYW5BbmltTG9vcCgpO1xuXHR9LFxuXG5cblx0X2ZpbmlzaFN3aXBlTWFpblNjcm9sbEdlc3R1cmUgPSBmdW5jdGlvbihnZXN0dXJlVHlwZSwgX3JlbGVhc2VBbmltRGF0YSkge1xuXHRcdHZhciBpdGVtQ2hhbmdlZDtcblx0XHRpZighX21haW5TY3JvbGxBbmltYXRpbmcpIHtcblx0XHRcdF9jdXJyWm9vbWVkSXRlbUluZGV4ID0gX2N1cnJlbnRJdGVtSW5kZXg7XG5cdFx0fVxuXG5cblx0XHRcblx0XHR2YXIgaXRlbXNEaWZmO1xuXG5cdFx0aWYoZ2VzdHVyZVR5cGUgPT09ICdzd2lwZScpIHtcblx0XHRcdHZhciB0b3RhbFNoaWZ0RGlzdCA9IF9jdXJyUG9pbnQueCAtIF9zdGFydFBvaW50LngsXG5cdFx0XHRcdGlzRmFzdExhc3RGbGljayA9IF9yZWxlYXNlQW5pbURhdGEubGFzdEZsaWNrRGlzdC54IDwgMTA7XG5cblx0XHRcdC8vIGlmIGNvbnRhaW5lciBpcyBzaGlmdGVkIGZvciBtb3JlIHRoYW4gTUlOX1NXSVBFX0RJU1RBTkNFLCBcblx0XHRcdC8vIGFuZCBsYXN0IGZsaWNrIGdlc3R1cmUgd2FzIGluIHJpZ2h0IGRpcmVjdGlvblxuXHRcdFx0aWYodG90YWxTaGlmdERpc3QgPiBNSU5fU1dJUEVfRElTVEFOQ0UgJiYgXG5cdFx0XHRcdChpc0Zhc3RMYXN0RmxpY2sgfHwgX3JlbGVhc2VBbmltRGF0YS5sYXN0RmxpY2tPZmZzZXQueCA+IDIwKSApIHtcblx0XHRcdFx0Ly8gZ28gdG8gcHJldiBpdGVtXG5cdFx0XHRcdGl0ZW1zRGlmZiA9IC0xO1xuXHRcdFx0fSBlbHNlIGlmKHRvdGFsU2hpZnREaXN0IDwgLU1JTl9TV0lQRV9ESVNUQU5DRSAmJiBcblx0XHRcdFx0KGlzRmFzdExhc3RGbGljayB8fCBfcmVsZWFzZUFuaW1EYXRhLmxhc3RGbGlja09mZnNldC54IDwgLTIwKSApIHtcblx0XHRcdFx0Ly8gZ28gdG8gbmV4dCBpdGVtXG5cdFx0XHRcdGl0ZW1zRGlmZiA9IDE7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIG5leHRDaXJjbGU7XG5cblx0XHRpZihpdGVtc0RpZmYpIHtcblx0XHRcdFxuXHRcdFx0X2N1cnJlbnRJdGVtSW5kZXggKz0gaXRlbXNEaWZmO1xuXG5cdFx0XHRpZihfY3VycmVudEl0ZW1JbmRleCA8IDApIHtcblx0XHRcdFx0X2N1cnJlbnRJdGVtSW5kZXggPSBfb3B0aW9ucy5sb29wID8gX2dldE51bUl0ZW1zKCktMSA6IDA7XG5cdFx0XHRcdG5leHRDaXJjbGUgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIGlmKF9jdXJyZW50SXRlbUluZGV4ID49IF9nZXROdW1JdGVtcygpKSB7XG5cdFx0XHRcdF9jdXJyZW50SXRlbUluZGV4ID0gX29wdGlvbnMubG9vcCA/IDAgOiBfZ2V0TnVtSXRlbXMoKS0xO1xuXHRcdFx0XHRuZXh0Q2lyY2xlID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIW5leHRDaXJjbGUgfHwgX29wdGlvbnMubG9vcCkge1xuXHRcdFx0XHRfaW5kZXhEaWZmICs9IGl0ZW1zRGlmZjtcblx0XHRcdFx0X2N1cnJQb3NpdGlvbkluZGV4IC09IGl0ZW1zRGlmZjtcblx0XHRcdFx0aXRlbUNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0XG5cblx0XHRcdFxuXHRcdH1cblxuXHRcdHZhciBhbmltYXRlVG9YID0gX3NsaWRlU2l6ZS54ICogX2N1cnJQb3NpdGlvbkluZGV4O1xuXHRcdHZhciBhbmltYXRlVG9EaXN0ID0gTWF0aC5hYnMoIGFuaW1hdGVUb1ggLSBfbWFpblNjcm9sbFBvcy54ICk7XG5cdFx0dmFyIGZpbmlzaEFuaW1EdXJhdGlvbjtcblxuXG5cdFx0aWYoIWl0ZW1DaGFuZ2VkICYmIGFuaW1hdGVUb1ggPiBfbWFpblNjcm9sbFBvcy54ICE9PSBfcmVsZWFzZUFuaW1EYXRhLmxhc3RGbGlja1NwZWVkLnggPiAwKSB7XG5cdFx0XHQvLyBcInJldHVybiB0byBjdXJyZW50XCIgZHVyYXRpb24sIGUuZy4gd2hlbiBkcmFnZ2luZyBmcm9tIHNsaWRlIDAgdG8gLTFcblx0XHRcdGZpbmlzaEFuaW1EdXJhdGlvbiA9IDMzMzsgXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZpbmlzaEFuaW1EdXJhdGlvbiA9IE1hdGguYWJzKF9yZWxlYXNlQW5pbURhdGEubGFzdEZsaWNrU3BlZWQueCkgPiAwID8gXG5cdFx0XHRcdFx0XHRcdFx0XHRhbmltYXRlVG9EaXN0IC8gTWF0aC5hYnMoX3JlbGVhc2VBbmltRGF0YS5sYXN0RmxpY2tTcGVlZC54KSA6IFxuXHRcdFx0XHRcdFx0XHRcdFx0MzMzO1xuXG5cdFx0XHRmaW5pc2hBbmltRHVyYXRpb24gPSBNYXRoLm1pbihmaW5pc2hBbmltRHVyYXRpb24sIDQwMCk7XG5cdFx0XHRmaW5pc2hBbmltRHVyYXRpb24gPSBNYXRoLm1heChmaW5pc2hBbmltRHVyYXRpb24sIDI1MCk7XG5cdFx0fVxuXG5cdFx0aWYoX2N1cnJab29tZWRJdGVtSW5kZXggPT09IF9jdXJyZW50SXRlbUluZGV4KSB7XG5cdFx0XHRpdGVtQ2hhbmdlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHRfbWFpblNjcm9sbEFuaW1hdGluZyA9IHRydWU7XG5cdFx0XG5cdFx0X3Nob3V0KCdtYWluU2Nyb2xsQW5pbVN0YXJ0Jyk7XG5cblx0XHRfYW5pbWF0ZVByb3AoJ21haW5TY3JvbGwnLCBfbWFpblNjcm9sbFBvcy54LCBhbmltYXRlVG9YLCBmaW5pc2hBbmltRHVyYXRpb24sIGZyYW1ld29yay5lYXNpbmcuY3ViaWMub3V0LCBcblx0XHRcdF9tb3ZlTWFpblNjcm9sbCxcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfc3RvcEFsbEFuaW1hdGlvbnMoKTtcblx0XHRcdFx0X21haW5TY3JvbGxBbmltYXRpbmcgPSBmYWxzZTtcblx0XHRcdFx0X2N1cnJab29tZWRJdGVtSW5kZXggPSAtMTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKGl0ZW1DaGFuZ2VkIHx8IF9jdXJyWm9vbWVkSXRlbUluZGV4ICE9PSBfY3VycmVudEl0ZW1JbmRleCkge1xuXHRcdFx0XHRcdHNlbGYudXBkYXRlQ3Vyckl0ZW0oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0X3Nob3V0KCdtYWluU2Nyb2xsQW5pbUNvbXBsZXRlJyk7XG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGlmKGl0ZW1DaGFuZ2VkKSB7XG5cdFx0XHRzZWxmLnVwZGF0ZUN1cnJJdGVtKHRydWUpO1xuXHRcdH1cblxuXHRcdHJldHVybiBpdGVtQ2hhbmdlZDtcblx0fSxcblxuXHRfY2FsY3VsYXRlWm9vbUxldmVsID0gZnVuY3Rpb24odG91Y2hlc0Rpc3RhbmNlKSB7XG5cdFx0cmV0dXJuICAxIC8gX3N0YXJ0UG9pbnRzRGlzdGFuY2UgKiB0b3VjaGVzRGlzdGFuY2UgKiBfc3RhcnRab29tTGV2ZWw7XG5cdH0sXG5cblx0Ly8gUmVzZXRzIHpvb20gaWYgaXQncyBvdXQgb2YgYm91bmRzXG5cdF9jb21wbGV0ZVpvb21HZXN0dXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGRlc3Rab29tTGV2ZWwgPSBfY3Vyclpvb21MZXZlbCxcblx0XHRcdG1pblpvb21MZXZlbCA9IF9nZXRNaW5ab29tTGV2ZWwoKSxcblx0XHRcdG1heFpvb21MZXZlbCA9IF9nZXRNYXhab29tTGV2ZWwoKTtcblxuXHRcdGlmICggX2N1cnJab29tTGV2ZWwgPCBtaW5ab29tTGV2ZWwgKSB7XG5cdFx0XHRkZXN0Wm9vbUxldmVsID0gbWluWm9vbUxldmVsO1xuXHRcdH0gZWxzZSBpZiAoIF9jdXJyWm9vbUxldmVsID4gbWF4Wm9vbUxldmVsICkge1xuXHRcdFx0ZGVzdFpvb21MZXZlbCA9IG1heFpvb21MZXZlbDtcblx0XHR9XG5cblx0XHR2YXIgZGVzdE9wYWNpdHkgPSAxLFxuXHRcdFx0b25VcGRhdGUsXG5cdFx0XHRpbml0aWFsT3BhY2l0eSA9IF9iZ09wYWNpdHk7XG5cblx0XHRpZihfb3BhY2l0eUNoYW5nZWQgJiYgIV9pc1pvb21pbmdJbiAmJiAhX3dhc092ZXJJbml0aWFsWm9vbSAmJiBfY3Vyclpvb21MZXZlbCA8IG1pblpvb21MZXZlbCkge1xuXHRcdFx0Ly9fY2xvc2VkQnlTY3JvbGwgPSB0cnVlO1xuXHRcdFx0c2VsZi5jbG9zZSgpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0aWYoX29wYWNpdHlDaGFuZ2VkKSB7XG5cdFx0XHRvblVwZGF0ZSA9IGZ1bmN0aW9uKG5vdykge1xuXHRcdFx0XHRfYXBwbHlCZ09wYWNpdHkoICAoZGVzdE9wYWNpdHkgLSBpbml0aWFsT3BhY2l0eSkgKiBub3cgKyBpbml0aWFsT3BhY2l0eSApO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRzZWxmLnpvb21UbyhkZXN0Wm9vbUxldmVsLCAwLCAyMDAsICBmcmFtZXdvcmsuZWFzaW5nLmN1YmljLm91dCwgb25VcGRhdGUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cbl9yZWdpc3Rlck1vZHVsZSgnR2VzdHVyZXMnLCB7XG5cdHB1YmxpY01ldGhvZHM6IHtcblxuXHRcdGluaXRHZXN0dXJlczogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIGhlbHBlciBmdW5jdGlvbiB0aGF0IGJ1aWxkcyB0b3VjaC9wb2ludGVyL21vdXNlIGV2ZW50c1xuXHRcdFx0dmFyIGFkZEV2ZW50TmFtZXMgPSBmdW5jdGlvbihwcmVmLCBkb3duLCBtb3ZlLCB1cCwgY2FuY2VsKSB7XG5cdFx0XHRcdF9kcmFnU3RhcnRFdmVudCA9IHByZWYgKyBkb3duO1xuXHRcdFx0XHRfZHJhZ01vdmVFdmVudCA9IHByZWYgKyBtb3ZlO1xuXHRcdFx0XHRfZHJhZ0VuZEV2ZW50ID0gcHJlZiArIHVwO1xuXHRcdFx0XHRpZihjYW5jZWwpIHtcblx0XHRcdFx0XHRfZHJhZ0NhbmNlbEV2ZW50ID0gcHJlZiArIGNhbmNlbDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfZHJhZ0NhbmNlbEV2ZW50ID0gJyc7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdF9wb2ludGVyRXZlbnRFbmFibGVkID0gX2ZlYXR1cmVzLnBvaW50ZXJFdmVudDtcblx0XHRcdGlmKF9wb2ludGVyRXZlbnRFbmFibGVkICYmIF9mZWF0dXJlcy50b3VjaCkge1xuXHRcdFx0XHQvLyB3ZSBkb24ndCBuZWVkIHRvdWNoIGV2ZW50cywgaWYgYnJvd3NlciBzdXBwb3J0cyBwb2ludGVyIGV2ZW50c1xuXHRcdFx0XHRfZmVhdHVyZXMudG91Y2ggPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYoX3BvaW50ZXJFdmVudEVuYWJsZWQpIHtcblx0XHRcdFx0aWYobmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkKSB7XG5cdFx0XHRcdFx0YWRkRXZlbnROYW1lcygncG9pbnRlcicsICdkb3duJywgJ21vdmUnLCAndXAnLCAnY2FuY2VsJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gSUUxMCBwb2ludGVyIGV2ZW50cyBhcmUgY2FzZS1zZW5zaXRpdmVcblx0XHRcdFx0XHRhZGRFdmVudE5hbWVzKCdNU1BvaW50ZXInLCAnRG93bicsICdNb3ZlJywgJ1VwJywgJ0NhbmNlbCcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYoX2ZlYXR1cmVzLnRvdWNoKSB7XG5cdFx0XHRcdGFkZEV2ZW50TmFtZXMoJ3RvdWNoJywgJ3N0YXJ0JywgJ21vdmUnLCAnZW5kJywgJ2NhbmNlbCcpO1xuXHRcdFx0XHRfbGlrZWx5VG91Y2hEZXZpY2UgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YWRkRXZlbnROYW1lcygnbW91c2UnLCAnZG93bicsICdtb3ZlJywgJ3VwJyk7XHRcblx0XHRcdH1cblxuXHRcdFx0X3VwTW92ZUV2ZW50cyA9IF9kcmFnTW92ZUV2ZW50ICsgJyAnICsgX2RyYWdFbmRFdmVudCAgKyAnICcgKyAgX2RyYWdDYW5jZWxFdmVudDtcblx0XHRcdF9kb3duRXZlbnRzID0gX2RyYWdTdGFydEV2ZW50O1xuXG5cdFx0XHRpZihfcG9pbnRlckV2ZW50RW5hYmxlZCAmJiAhX2xpa2VseVRvdWNoRGV2aWNlKSB7XG5cdFx0XHRcdF9saWtlbHlUb3VjaERldmljZSA9IChuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxKSB8fCAobmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgPiAxKTtcblx0XHRcdH1cblx0XHRcdC8vIG1ha2UgdmFyaWFibGUgcHVibGljXG5cdFx0XHRzZWxmLmxpa2VseVRvdWNoRGV2aWNlID0gX2xpa2VseVRvdWNoRGV2aWNlOyBcblx0XHRcdFxuXHRcdFx0X2dsb2JhbEV2ZW50SGFuZGxlcnNbX2RyYWdTdGFydEV2ZW50XSA9IF9vbkRyYWdTdGFydDtcblx0XHRcdF9nbG9iYWxFdmVudEhhbmRsZXJzW19kcmFnTW92ZUV2ZW50XSA9IF9vbkRyYWdNb3ZlO1xuXHRcdFx0X2dsb2JhbEV2ZW50SGFuZGxlcnNbX2RyYWdFbmRFdmVudF0gPSBfb25EcmFnUmVsZWFzZTsgLy8gdGhlIEtyYWtlblxuXG5cdFx0XHRpZihfZHJhZ0NhbmNlbEV2ZW50KSB7XG5cdFx0XHRcdF9nbG9iYWxFdmVudEhhbmRsZXJzW19kcmFnQ2FuY2VsRXZlbnRdID0gX2dsb2JhbEV2ZW50SGFuZGxlcnNbX2RyYWdFbmRFdmVudF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJpbmQgbW91c2UgZXZlbnRzIG9uIGRldmljZSB3aXRoIGRldGVjdGVkIGhhcmR3YXJlIHRvdWNoIHN1cHBvcnQsIGluIGNhc2UgaXQgc3VwcG9ydHMgbXVsdGlwbGUgdHlwZXMgb2YgaW5wdXQuXG5cdFx0XHRpZihfZmVhdHVyZXMudG91Y2gpIHtcblx0XHRcdFx0X2Rvd25FdmVudHMgKz0gJyBtb3VzZWRvd24nO1xuXHRcdFx0XHRfdXBNb3ZlRXZlbnRzICs9ICcgbW91c2Vtb3ZlIG1vdXNldXAnO1xuXHRcdFx0XHRfZ2xvYmFsRXZlbnRIYW5kbGVycy5tb3VzZWRvd24gPSBfZ2xvYmFsRXZlbnRIYW5kbGVyc1tfZHJhZ1N0YXJ0RXZlbnRdO1xuXHRcdFx0XHRfZ2xvYmFsRXZlbnRIYW5kbGVycy5tb3VzZW1vdmUgPSBfZ2xvYmFsRXZlbnRIYW5kbGVyc1tfZHJhZ01vdmVFdmVudF07XG5cdFx0XHRcdF9nbG9iYWxFdmVudEhhbmRsZXJzLm1vdXNldXAgPSBfZ2xvYmFsRXZlbnRIYW5kbGVyc1tfZHJhZ0VuZEV2ZW50XTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIV9saWtlbHlUb3VjaERldmljZSkge1xuXHRcdFx0XHQvLyBkb24ndCBhbGxvdyBwYW4gdG8gbmV4dCBzbGlkZSBmcm9tIHpvb21lZCBzdGF0ZSBvbiBEZXNrdG9wXG5cdFx0XHRcdF9vcHRpb25zLmFsbG93UGFuVG9OZXh0ID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdH1cbn0pO1xuXG5cbi8qPj5nZXN0dXJlcyovXG5cbi8qPj5zaG93LWhpZGUtdHJhbnNpdGlvbiovXG4vKipcbiAqIHNob3ctaGlkZS10cmFuc2l0aW9uLmpzOlxuICpcbiAqIE1hbmFnZXMgaW5pdGlhbCBvcGVuaW5nIG9yIGNsb3NpbmcgdHJhbnNpdGlvbi5cbiAqXG4gKiBJZiB5b3UncmUgbm90IHBsYW5uaW5nIHRvIHVzZSB0cmFuc2l0aW9uIGZvciBnYWxsZXJ5IGF0IGFsbCxcbiAqIHlvdSBtYXkgc2V0IG9wdGlvbnMgaGlkZUFuaW1hdGlvbkR1cmF0aW9uIGFuZCBzaG93QW5pbWF0aW9uRHVyYXRpb24gdG8gMCxcbiAqIGFuZCBqdXN0IGRlbGV0ZSBzdGFydEFuaW1hdGlvbiBmdW5jdGlvbi5cbiAqIFxuICovXG5cblxudmFyIF9zaG93T3JIaWRlVGltZW91dCxcblx0X3Nob3dPckhpZGUgPSBmdW5jdGlvbihpdGVtLCBpbWcsIG91dCwgY29tcGxldGVGbikge1xuXG5cdFx0aWYoX3Nob3dPckhpZGVUaW1lb3V0KSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoX3Nob3dPckhpZGVUaW1lb3V0KTtcblx0XHR9XG5cblx0XHRfaW5pdGlhbFpvb21SdW5uaW5nID0gdHJ1ZTtcblx0XHRfaW5pdGlhbENvbnRlbnRTZXQgPSB0cnVlO1xuXHRcdFxuXHRcdC8vIGRpbWVuc2lvbnMgb2Ygc21hbGwgdGh1bWJuYWlsIHt4Oix5Oix3On0uXG5cdFx0Ly8gSGVpZ2h0IGlzIG9wdGlvbmFsLCBhcyBjYWxjdWxhdGVkIGJhc2VkIG9uIGxhcmdlIGltYWdlLlxuXHRcdHZhciB0aHVtYkJvdW5kczsgXG5cdFx0aWYoaXRlbS5pbml0aWFsTGF5b3V0KSB7XG5cdFx0XHR0aHVtYkJvdW5kcyA9IGl0ZW0uaW5pdGlhbExheW91dDtcblx0XHRcdGl0ZW0uaW5pdGlhbExheW91dCA9IG51bGw7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRodW1iQm91bmRzID0gX29wdGlvbnMuZ2V0VGh1bWJCb3VuZHNGbiAmJiBfb3B0aW9ucy5nZXRUaHVtYkJvdW5kc0ZuKF9jdXJyZW50SXRlbUluZGV4KTtcblx0XHR9XG5cblx0XHR2YXIgZHVyYXRpb24gPSBvdXQgPyBfb3B0aW9ucy5oaWRlQW5pbWF0aW9uRHVyYXRpb24gOiBfb3B0aW9ucy5zaG93QW5pbWF0aW9uRHVyYXRpb247XG5cblx0XHR2YXIgb25Db21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0X3N0b3BBbmltYXRpb24oJ2luaXRpYWxab29tJyk7XG5cdFx0XHRpZighb3V0KSB7XG5cdFx0XHRcdF9hcHBseUJnT3BhY2l0eSgxKTtcblx0XHRcdFx0aWYoaW1nKSB7XG5cdFx0XHRcdFx0aW1nLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLWFuaW1hdGVkLWluJyk7XG5cdFx0XHRcdF9zaG91dCgnaW5pdGlhbFpvb20nICsgKG91dCA/ICdPdXRFbmQnIDogJ0luRW5kJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi50ZW1wbGF0ZS5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG5cdFx0XHRcdHNlbGYuYmcucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihjb21wbGV0ZUZuKSB7XG5cdFx0XHRcdGNvbXBsZXRlRm4oKTtcblx0XHRcdH1cblx0XHRcdF9pbml0aWFsWm9vbVJ1bm5pbmcgPSBmYWxzZTtcblx0XHR9O1xuXG5cdFx0Ly8gaWYgYm91bmRzIGFyZW4ndCBwcm92aWRlZCwganVzdCBvcGVuIGdhbGxlcnkgd2l0aG91dCBhbmltYXRpb25cblx0XHRpZighZHVyYXRpb24gfHwgIXRodW1iQm91bmRzIHx8IHRodW1iQm91bmRzLnggPT09IHVuZGVmaW5lZCkge1xuXG5cdFx0XHRfc2hvdXQoJ2luaXRpYWxab29tJyArIChvdXQgPyAnT3V0JyA6ICdJbicpICk7XG5cblx0XHRcdF9jdXJyWm9vbUxldmVsID0gaXRlbS5pbml0aWFsWm9vbUxldmVsO1xuXHRcdFx0X2VxdWFsaXplUG9pbnRzKF9wYW5PZmZzZXQsICBpdGVtLmluaXRpYWxQb3NpdGlvbiApO1xuXHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblxuXHRcdFx0dGVtcGxhdGUuc3R5bGUub3BhY2l0eSA9IG91dCA/IDAgOiAxO1xuXHRcdFx0X2FwcGx5QmdPcGFjaXR5KDEpO1xuXG5cdFx0XHRpZihkdXJhdGlvbikge1xuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG9uQ29tcGxldGUoKTtcblx0XHRcdFx0fSwgZHVyYXRpb24pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b25Db21wbGV0ZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIHN0YXJ0QW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xvc2VXaXRoUmFmID0gX2Nsb3NlZEJ5U2Nyb2xsLFxuXHRcdFx0XHRmYWRlRXZlcnl0aGluZyA9ICFzZWxmLmN1cnJJdGVtLnNyYyB8fCBzZWxmLmN1cnJJdGVtLmxvYWRFcnJvciB8fCBfb3B0aW9ucy5zaG93SGlkZU9wYWNpdHk7XG5cdFx0XHRcblx0XHRcdC8vIGFwcGx5IGh3LWFjY2VsZXJhdGlvbiB0byBpbWFnZVxuXHRcdFx0aWYoaXRlbS5taW5pSW1nKSB7XG5cdFx0XHRcdGl0ZW0ubWluaUltZy5zdHlsZS53ZWJraXRCYWNrZmFjZVZpc2liaWxpdHkgPSAnaGlkZGVuJztcblx0XHRcdH1cblxuXHRcdFx0aWYoIW91dCkge1xuXHRcdFx0XHRfY3Vyclpvb21MZXZlbCA9IHRodW1iQm91bmRzLncgLyBpdGVtLnc7XG5cdFx0XHRcdF9wYW5PZmZzZXQueCA9IHRodW1iQm91bmRzLng7XG5cdFx0XHRcdF9wYW5PZmZzZXQueSA9IHRodW1iQm91bmRzLnkgLSBfaW5pdGFsV2luZG93U2Nyb2xsWTtcblxuXHRcdFx0XHRzZWxmW2ZhZGVFdmVyeXRoaW5nID8gJ3RlbXBsYXRlJyA6ICdiZyddLnN0eWxlLm9wYWNpdHkgPSAwLjAwMTtcblx0XHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblx0XHRcdH1cblxuXHRcdFx0X3JlZ2lzdGVyU3RhcnRBbmltYXRpb24oJ2luaXRpYWxab29tJyk7XG5cdFx0XHRcblx0XHRcdGlmKG91dCAmJiAhY2xvc2VXaXRoUmFmKSB7XG5cdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLWFuaW1hdGVkLWluJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKGZhZGVFdmVyeXRoaW5nKSB7XG5cdFx0XHRcdGlmKG91dCkge1xuXHRcdFx0XHRcdGZyYW1ld29ya1sgKGNsb3NlV2l0aFJhZiA/ICdyZW1vdmUnIDogJ2FkZCcpICsgJ0NsYXNzJyBdKHRlbXBsYXRlLCAncHN3cC0tYW5pbWF0ZV9vcGFjaXR5Jyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLWFuaW1hdGVfb3BhY2l0eScpO1xuXHRcdFx0XHRcdH0sIDMwKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRfc2hvd09ySGlkZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdF9zaG91dCgnaW5pdGlhbFpvb20nICsgKG91dCA/ICdPdXQnIDogJ0luJykgKTtcblx0XHRcdFx0XG5cblx0XHRcdFx0aWYoIW91dCkge1xuXG5cdFx0XHRcdFx0Ly8gXCJpblwiIGFuaW1hdGlvbiBhbHdheXMgdXNlcyBDU1MgdHJhbnNpdGlvbnMgKGluc3RlYWQgb2YgckFGKS5cblx0XHRcdFx0XHQvLyBDU1MgdHJhbnNpdGlvbiB3b3JrIGZhc3RlciBoZXJlLCBcblx0XHRcdFx0XHQvLyBhcyBkZXZlbG9wZXIgbWF5IGFsc28gd2FudCB0byBhbmltYXRlIG90aGVyIHRoaW5ncywgXG5cdFx0XHRcdFx0Ly8gbGlrZSB1aSBvbiB0b3Agb2Ygc2xpZGluZyBhcmVhLCB3aGljaCBjYW4gYmUgYW5pbWF0ZWQganVzdCB2aWEgQ1NTXG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0X2N1cnJab29tTGV2ZWwgPSBpdGVtLmluaXRpYWxab29tTGV2ZWw7XG5cdFx0XHRcdFx0X2VxdWFsaXplUG9pbnRzKF9wYW5PZmZzZXQsICBpdGVtLmluaXRpYWxQb3NpdGlvbiApO1xuXHRcdFx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cdFx0XHRcdFx0X2FwcGx5QmdPcGFjaXR5KDEpO1xuXG5cdFx0XHRcdFx0aWYoZmFkZUV2ZXJ5dGhpbmcpIHtcblx0XHRcdFx0XHRcdHRlbXBsYXRlLnN0eWxlLm9wYWNpdHkgPSAxO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRfYXBwbHlCZ09wYWNpdHkoMSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0X3Nob3dPckhpZGVUaW1lb3V0ID0gc2V0VGltZW91dChvbkNvbXBsZXRlLCBkdXJhdGlvbiArIDIwKTtcblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIFwib3V0XCIgYW5pbWF0aW9uIHVzZXMgckFGIG9ubHkgd2hlbiBQaG90b1N3aXBlIGlzIGNsb3NlZCBieSBicm93c2VyIHNjcm9sbCwgdG8gcmVjYWxjdWxhdGUgcG9zaXRpb25cblx0XHRcdFx0XHR2YXIgZGVzdFpvb21MZXZlbCA9IHRodW1iQm91bmRzLncgLyBpdGVtLncsXG5cdFx0XHRcdFx0XHRpbml0aWFsUGFuT2Zmc2V0ID0ge1xuXHRcdFx0XHRcdFx0XHR4OiBfcGFuT2Zmc2V0LngsXG5cdFx0XHRcdFx0XHRcdHk6IF9wYW5PZmZzZXQueVxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGluaXRpYWxab29tTGV2ZWwgPSBfY3Vyclpvb21MZXZlbCxcblx0XHRcdFx0XHRcdGluaXRhbEJnT3BhY2l0eSA9IF9iZ09wYWNpdHksXG5cdFx0XHRcdFx0XHRvblVwZGF0ZSA9IGZ1bmN0aW9uKG5vdykge1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYobm93ID09PSAxKSB7XG5cdFx0XHRcdFx0XHRcdFx0X2N1cnJab29tTGV2ZWwgPSBkZXN0Wm9vbUxldmVsO1xuXHRcdFx0XHRcdFx0XHRcdF9wYW5PZmZzZXQueCA9IHRodW1iQm91bmRzLng7XG5cdFx0XHRcdFx0XHRcdFx0X3Bhbk9mZnNldC55ID0gdGh1bWJCb3VuZHMueSAgLSBfY3VycmVudFdpbmRvd1Njcm9sbFk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0X2N1cnJab29tTGV2ZWwgPSAoZGVzdFpvb21MZXZlbCAtIGluaXRpYWxab29tTGV2ZWwpICogbm93ICsgaW5pdGlhbFpvb21MZXZlbDtcblx0XHRcdFx0XHRcdFx0XHRfcGFuT2Zmc2V0LnggPSAodGh1bWJCb3VuZHMueCAtIGluaXRpYWxQYW5PZmZzZXQueCkgKiBub3cgKyBpbml0aWFsUGFuT2Zmc2V0Lng7XG5cdFx0XHRcdFx0XHRcdFx0X3Bhbk9mZnNldC55ID0gKHRodW1iQm91bmRzLnkgLSBfY3VycmVudFdpbmRvd1Njcm9sbFkgLSBpbml0aWFsUGFuT2Zmc2V0LnkpICogbm93ICsgaW5pdGlhbFBhbk9mZnNldC55O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXHRcdFx0XHRcdFx0XHRpZihmYWRlRXZlcnl0aGluZykge1xuXHRcdFx0XHRcdFx0XHRcdHRlbXBsYXRlLnN0eWxlLm9wYWNpdHkgPSAxIC0gbm93O1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdF9hcHBseUJnT3BhY2l0eSggaW5pdGFsQmdPcGFjaXR5IC0gbm93ICogaW5pdGFsQmdPcGFjaXR5ICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRpZihjbG9zZVdpdGhSYWYpIHtcblx0XHRcdFx0XHRcdF9hbmltYXRlUHJvcCgnaW5pdGlhbFpvb20nLCAwLCAxLCBkdXJhdGlvbiwgZnJhbWV3b3JrLmVhc2luZy5jdWJpYy5vdXQsIG9uVXBkYXRlLCBvbkNvbXBsZXRlKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0b25VcGRhdGUoMSk7XG5cdFx0XHRcdFx0XHRfc2hvd09ySGlkZVRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uQ29tcGxldGUsIGR1cmF0aW9uICsgMjApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR9LCBvdXQgPyAyNSA6IDkwKTsgLy8gTWFpbiBwdXJwb3NlIG9mIHRoaXMgZGVsYXkgaXMgdG8gZ2l2ZSBicm93c2VyIHRpbWUgdG8gcGFpbnQgYW5kXG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGNvbXBvc2l0ZSBsYXllcnMgb2YgUGhvdG9Td2lwZSBVSSBwYXJ0cyAoYmFja2dyb3VuZCwgY29udHJvbHMsIGNhcHRpb24sIGFycm93cykuXG5cdFx0XHRcdFx0Ly8gV2hpY2ggYXZvaWRzIGxhZyBhdCB0aGUgYmVnaW5uaW5nIG9mIHNjYWxlIHRyYW5zaXRpb24uXG5cdFx0fTtcblx0XHRzdGFydEFuaW1hdGlvbigpO1xuXG5cdFx0XG5cdH07XG5cbi8qPj5zaG93LWhpZGUtdHJhbnNpdGlvbiovXG5cbi8qPj5pdGVtcy1jb250cm9sbGVyKi9cbi8qKlxuKlxuKiBDb250cm9sbGVyIG1hbmFnZXMgZ2FsbGVyeSBpdGVtcywgdGhlaXIgZGltZW5zaW9ucywgYW5kIHRoZWlyIGNvbnRlbnQuXG4qIFxuKi9cblxudmFyIF9pdGVtcyxcblx0X3RlbXBQYW5BcmVhU2l6ZSA9IHt9LFxuXHRfaW1hZ2VzVG9BcHBlbmRQb29sID0gW10sXG5cdF9pbml0aWFsQ29udGVudFNldCxcblx0X2luaXRpYWxab29tUnVubmluZyxcblx0X2NvbnRyb2xsZXJEZWZhdWx0T3B0aW9ucyA9IHtcblx0XHRpbmRleDogMCxcblx0XHRlcnJvck1zZzogJzxkaXYgY2xhc3M9XCJwc3dwX19lcnJvci1tc2dcIj48YSBocmVmPVwiJXVybCVcIiB0YXJnZXQ9XCJfYmxhbmtcIj5UaGUgaW1hZ2U8L2E+IGNvdWxkIG5vdCBiZSBsb2FkZWQuPC9kaXY+Jyxcblx0XHRmb3JjZVByb2dyZXNzaXZlTG9hZGluZzogZmFsc2UsIC8vIFRPRE9cblx0XHRwcmVsb2FkOiBbMSwxXSxcblx0XHRnZXROdW1JdGVtc0ZuOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBfaXRlbXMubGVuZ3RoO1xuXHRcdH1cblx0fTtcblxuXG52YXIgX2dldEl0ZW1BdCxcblx0X2dldE51bUl0ZW1zLFxuXHRfaW5pdGlhbElzTG9vcCxcblx0X2dldFplcm9Cb3VuZHMgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y2VudGVyOnt4OjAseTowfSwgXG5cdFx0XHRtYXg6e3g6MCx5OjB9LCBcblx0XHRcdG1pbjp7eDowLHk6MH1cblx0XHR9O1xuXHR9LFxuXHRfY2FsY3VsYXRlU2luZ2xlSXRlbVBhbkJvdW5kcyA9IGZ1bmN0aW9uKGl0ZW0sIHJlYWxQYW5FbGVtZW50VywgcmVhbFBhbkVsZW1lbnRIICkge1xuXHRcdHZhciBib3VuZHMgPSBpdGVtLmJvdW5kcztcblxuXHRcdC8vIHBvc2l0aW9uIG9mIGVsZW1lbnQgd2hlbiBpdCdzIGNlbnRlcmVkXG5cdFx0Ym91bmRzLmNlbnRlci54ID0gTWF0aC5yb3VuZCgoX3RlbXBQYW5BcmVhU2l6ZS54IC0gcmVhbFBhbkVsZW1lbnRXKSAvIDIpO1xuXHRcdGJvdW5kcy5jZW50ZXIueSA9IE1hdGgucm91bmQoKF90ZW1wUGFuQXJlYVNpemUueSAtIHJlYWxQYW5FbGVtZW50SCkgLyAyKSArIGl0ZW0udkdhcC50b3A7XG5cblx0XHQvLyBtYXhpbXVtIHBhbiBwb3NpdGlvblxuXHRcdGJvdW5kcy5tYXgueCA9IChyZWFsUGFuRWxlbWVudFcgPiBfdGVtcFBhbkFyZWFTaXplLngpID8gXG5cdFx0XHRcdFx0XHRcdE1hdGgucm91bmQoX3RlbXBQYW5BcmVhU2l6ZS54IC0gcmVhbFBhbkVsZW1lbnRXKSA6IFxuXHRcdFx0XHRcdFx0XHRib3VuZHMuY2VudGVyLng7XG5cdFx0XG5cdFx0Ym91bmRzLm1heC55ID0gKHJlYWxQYW5FbGVtZW50SCA+IF90ZW1wUGFuQXJlYVNpemUueSkgPyBcblx0XHRcdFx0XHRcdFx0TWF0aC5yb3VuZChfdGVtcFBhbkFyZWFTaXplLnkgLSByZWFsUGFuRWxlbWVudEgpICsgaXRlbS52R2FwLnRvcCA6IFxuXHRcdFx0XHRcdFx0XHRib3VuZHMuY2VudGVyLnk7XG5cdFx0XG5cdFx0Ly8gbWluaW11bSBwYW4gcG9zaXRpb25cblx0XHRib3VuZHMubWluLnggPSAocmVhbFBhbkVsZW1lbnRXID4gX3RlbXBQYW5BcmVhU2l6ZS54KSA/IDAgOiBib3VuZHMuY2VudGVyLng7XG5cdFx0Ym91bmRzLm1pbi55ID0gKHJlYWxQYW5FbGVtZW50SCA+IF90ZW1wUGFuQXJlYVNpemUueSkgPyBpdGVtLnZHYXAudG9wIDogYm91bmRzLmNlbnRlci55O1xuXHR9LFxuXHRfY2FsY3VsYXRlSXRlbVNpemUgPSBmdW5jdGlvbihpdGVtLCB2aWV3cG9ydFNpemUsIHpvb21MZXZlbCkge1xuXG5cdFx0aWYgKGl0ZW0uc3JjICYmICFpdGVtLmxvYWRFcnJvcikge1xuXHRcdFx0dmFyIGlzSW5pdGlhbCA9ICF6b29tTGV2ZWw7XG5cdFx0XHRcblx0XHRcdGlmKGlzSW5pdGlhbCkge1xuXHRcdFx0XHRpZighaXRlbS52R2FwKSB7XG5cdFx0XHRcdFx0aXRlbS52R2FwID0ge3RvcDowLGJvdHRvbTowfTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBhbGxvd3Mgb3ZlcnJpZGluZyB2ZXJ0aWNhbCBtYXJnaW4gZm9yIGluZGl2aWR1YWwgaXRlbXNcblx0XHRcdFx0X3Nob3V0KCdwYXJzZVZlcnRpY2FsTWFyZ2luJywgaXRlbSk7XG5cdFx0XHR9XG5cblxuXHRcdFx0X3RlbXBQYW5BcmVhU2l6ZS54ID0gdmlld3BvcnRTaXplLng7XG5cdFx0XHRfdGVtcFBhbkFyZWFTaXplLnkgPSB2aWV3cG9ydFNpemUueSAtIGl0ZW0udkdhcC50b3AgLSBpdGVtLnZHYXAuYm90dG9tO1xuXG5cdFx0XHRpZiAoaXNJbml0aWFsKSB7XG5cdFx0XHRcdHZhciBoUmF0aW8gPSBfdGVtcFBhbkFyZWFTaXplLnggLyBpdGVtLnc7XG5cdFx0XHRcdHZhciB2UmF0aW8gPSBfdGVtcFBhbkFyZWFTaXplLnkgLyBpdGVtLmg7XG5cblx0XHRcdFx0aXRlbS5maXRSYXRpbyA9IGhSYXRpbyA8IHZSYXRpbyA/IGhSYXRpbyA6IHZSYXRpbztcblx0XHRcdFx0Ly9pdGVtLmZpbGxSYXRpbyA9IGhSYXRpbyA+IHZSYXRpbyA/IGhSYXRpbyA6IHZSYXRpbztcblxuXHRcdFx0XHR2YXIgc2NhbGVNb2RlID0gX29wdGlvbnMuc2NhbGVNb2RlO1xuXG5cdFx0XHRcdGlmIChzY2FsZU1vZGUgPT09ICdvcmlnJykge1xuXHRcdFx0XHRcdHpvb21MZXZlbCA9IDE7XG5cdFx0XHRcdH0gZWxzZSBpZiAoc2NhbGVNb2RlID09PSAnZml0Jykge1xuXHRcdFx0XHRcdHpvb21MZXZlbCA9IGl0ZW0uZml0UmF0aW87XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoem9vbUxldmVsID4gMSkge1xuXHRcdFx0XHRcdHpvb21MZXZlbCA9IDE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtLmluaXRpYWxab29tTGV2ZWwgPSB6b29tTGV2ZWw7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZighaXRlbS5ib3VuZHMpIHtcblx0XHRcdFx0XHQvLyByZXVzZSBib3VuZHMgb2JqZWN0XG5cdFx0XHRcdFx0aXRlbS5ib3VuZHMgPSBfZ2V0WmVyb0JvdW5kcygpOyBcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZighem9vbUxldmVsKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0X2NhbGN1bGF0ZVNpbmdsZUl0ZW1QYW5Cb3VuZHMoaXRlbSwgaXRlbS53ICogem9vbUxldmVsLCBpdGVtLmggKiB6b29tTGV2ZWwpO1xuXG5cdFx0XHRpZiAoaXNJbml0aWFsICYmIHpvb21MZXZlbCA9PT0gaXRlbS5pbml0aWFsWm9vbUxldmVsKSB7XG5cdFx0XHRcdGl0ZW0uaW5pdGlhbFBvc2l0aW9uID0gaXRlbS5ib3VuZHMuY2VudGVyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaXRlbS5ib3VuZHM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGl0ZW0udyA9IGl0ZW0uaCA9IDA7XG5cdFx0XHRpdGVtLmluaXRpYWxab29tTGV2ZWwgPSBpdGVtLmZpdFJhdGlvID0gMTtcblx0XHRcdGl0ZW0uYm91bmRzID0gX2dldFplcm9Cb3VuZHMoKTtcblx0XHRcdGl0ZW0uaW5pdGlhbFBvc2l0aW9uID0gaXRlbS5ib3VuZHMuY2VudGVyO1xuXG5cdFx0XHQvLyBpZiBpdCdzIG5vdCBpbWFnZSwgd2UgcmV0dXJuIHplcm8gYm91bmRzIChjb250ZW50IGlzIG5vdCB6b29tYWJsZSlcblx0XHRcdHJldHVybiBpdGVtLmJvdW5kcztcblx0XHR9XG5cdFx0XG5cdH0sXG5cblx0XG5cblxuXHRfYXBwZW5kSW1hZ2UgPSBmdW5jdGlvbihpbmRleCwgaXRlbSwgYmFzZURpdiwgaW1nLCBwcmV2ZW50QW5pbWF0aW9uLCBrZWVwUGxhY2Vob2xkZXIpIHtcblx0XHRcblxuXHRcdGlmKGl0ZW0ubG9hZEVycm9yKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYoaW1nKSB7XG5cblx0XHRcdGl0ZW0uaW1hZ2VBcHBlbmRlZCA9IHRydWU7XG5cdFx0XHRfc2V0SW1hZ2VTaXplKGl0ZW0sIGltZywgKGl0ZW0gPT09IHNlbGYuY3Vyckl0ZW0gJiYgX3JlbmRlck1heFJlc29sdXRpb24pICk7XG5cdFx0XHRcblx0XHRcdGJhc2VEaXYuYXBwZW5kQ2hpbGQoaW1nKTtcblxuXHRcdFx0aWYoa2VlcFBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSAmJiBpdGVtLmxvYWRlZCAmJiBpdGVtLnBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdFx0XHRpdGVtLnBsYWNlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHRcdFx0XHRpdGVtLnBsYWNlaG9sZGVyID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIDUwMCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRcblxuXG5cdF9wcmVsb2FkSW1hZ2UgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aXRlbS5sb2FkaW5nID0gdHJ1ZTtcblx0XHRpdGVtLmxvYWRlZCA9IGZhbHNlO1xuXHRcdHZhciBpbWcgPSBpdGVtLmltZyA9IGZyYW1ld29yay5jcmVhdGVFbCgncHN3cF9faW1nJywgJ2ltZycpO1xuXHRcdHZhciBvbkNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpdGVtLmxvYWRpbmcgPSBmYWxzZTtcblx0XHRcdGl0ZW0ubG9hZGVkID0gdHJ1ZTtcblxuXHRcdFx0aWYoaXRlbS5sb2FkQ29tcGxldGUpIHtcblx0XHRcdFx0aXRlbS5sb2FkQ29tcGxldGUoaXRlbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpdGVtLmltZyA9IG51bGw7IC8vIG5vIG5lZWQgdG8gc3RvcmUgaW1hZ2Ugb2JqZWN0XG5cdFx0XHR9XG5cdFx0XHRpbWcub25sb2FkID0gaW1nLm9uZXJyb3IgPSBudWxsO1xuXHRcdFx0aW1nID0gbnVsbDtcblx0XHR9O1xuXHRcdGltZy5vbmxvYWQgPSBvbkNvbXBsZXRlO1xuXHRcdGltZy5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRvbkNvbXBsZXRlKCk7XG5cdFx0fTtcdFx0XG5cblx0XHRpbWcuc3JjID0gaXRlbS5zcmM7Ly8gKyAnP2E9JyArIE1hdGgucmFuZG9tKCk7XG5cblx0XHRyZXR1cm4gaW1nO1xuXHR9LFxuXHRfY2hlY2tGb3JFcnJvciA9IGZ1bmN0aW9uKGl0ZW0sIGNsZWFuVXApIHtcblx0XHRpZihpdGVtLnNyYyAmJiBpdGVtLmxvYWRFcnJvciAmJiBpdGVtLmNvbnRhaW5lcikge1xuXG5cdFx0XHRpZihjbGVhblVwKSB7XG5cdFx0XHRcdGl0ZW0uY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuXHRcdFx0fVxuXG5cdFx0XHRpdGVtLmNvbnRhaW5lci5pbm5lckhUTUwgPSBfb3B0aW9ucy5lcnJvck1zZy5yZXBsYWNlKCcldXJsJScsICBpdGVtLnNyYyApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcblx0XHR9XG5cdH0sXG5cdF9zZXRJbWFnZVNpemUgPSBmdW5jdGlvbihpdGVtLCBpbWcsIG1heFJlcykge1xuXHRcdGlmKCFpdGVtLnNyYykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmKCFpbWcpIHtcblx0XHRcdGltZyA9IGl0ZW0uY29udGFpbmVyLmxhc3RDaGlsZDtcblx0XHR9XG5cblx0XHR2YXIgdyA9IG1heFJlcyA/IGl0ZW0udyA6IE1hdGgucm91bmQoaXRlbS53ICogaXRlbS5maXRSYXRpbyksXG5cdFx0XHRoID0gbWF4UmVzID8gaXRlbS5oIDogTWF0aC5yb3VuZChpdGVtLmggKiBpdGVtLmZpdFJhdGlvKTtcblx0XHRcblx0XHRpZihpdGVtLnBsYWNlaG9sZGVyICYmICFpdGVtLmxvYWRlZCkge1xuXHRcdFx0aXRlbS5wbGFjZWhvbGRlci5zdHlsZS53aWR0aCA9IHcgKyAncHgnO1xuXHRcdFx0aXRlbS5wbGFjZWhvbGRlci5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4Jztcblx0XHR9XG5cblx0XHRpbWcuc3R5bGUud2lkdGggPSB3ICsgJ3B4Jztcblx0XHRpbWcuc3R5bGUuaGVpZ2h0ID0gaCArICdweCc7XG5cdH0sXG5cdF9hcHBlbmRJbWFnZXNQb29sID0gZnVuY3Rpb24oKSB7XG5cblx0XHRpZihfaW1hZ2VzVG9BcHBlbmRQb29sLmxlbmd0aCkge1xuXHRcdFx0dmFyIHBvb2xJdGVtO1xuXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgX2ltYWdlc1RvQXBwZW5kUG9vbC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRwb29sSXRlbSA9IF9pbWFnZXNUb0FwcGVuZFBvb2xbaV07XG5cdFx0XHRcdGlmKCBwb29sSXRlbS5ob2xkZXIuaW5kZXggPT09IHBvb2xJdGVtLmluZGV4ICkge1xuXHRcdFx0XHRcdF9hcHBlbmRJbWFnZShwb29sSXRlbS5pbmRleCwgcG9vbEl0ZW0uaXRlbSwgcG9vbEl0ZW0uYmFzZURpdiwgcG9vbEl0ZW0uaW1nLCBmYWxzZSwgcG9vbEl0ZW0uY2xlYXJQbGFjZWhvbGRlcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdF9pbWFnZXNUb0FwcGVuZFBvb2wgPSBbXTtcblx0XHR9XG5cdH07XG5cdFxuXG5cbl9yZWdpc3Rlck1vZHVsZSgnQ29udHJvbGxlcicsIHtcblxuXHRwdWJsaWNNZXRob2RzOiB7XG5cblx0XHRsYXp5TG9hZEl0ZW06IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0XHRpbmRleCA9IF9nZXRMb29wZWRJZChpbmRleCk7XG5cdFx0XHR2YXIgaXRlbSA9IF9nZXRJdGVtQXQoaW5kZXgpO1xuXG5cdFx0XHRpZighaXRlbSB8fCAoKGl0ZW0ubG9hZGVkIHx8IGl0ZW0ubG9hZGluZykgJiYgIV9pdGVtc05lZWRVcGRhdGUpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0X3Nob3V0KCdnZXR0aW5nRGF0YScsIGluZGV4LCBpdGVtKTtcblxuXHRcdFx0aWYgKCFpdGVtLnNyYykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdF9wcmVsb2FkSW1hZ2UoaXRlbSk7XG5cdFx0fSxcblx0XHRpbml0Q29udHJvbGxlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRmcmFtZXdvcmsuZXh0ZW5kKF9vcHRpb25zLCBfY29udHJvbGxlckRlZmF1bHRPcHRpb25zLCB0cnVlKTtcblx0XHRcdHNlbGYuaXRlbXMgPSBfaXRlbXMgPSBpdGVtcztcblx0XHRcdF9nZXRJdGVtQXQgPSBzZWxmLmdldEl0ZW1BdDtcblx0XHRcdF9nZXROdW1JdGVtcyA9IF9vcHRpb25zLmdldE51bUl0ZW1zRm47IC8vc2VsZi5nZXROdW1JdGVtcztcblxuXG5cblx0XHRcdF9pbml0aWFsSXNMb29wID0gX29wdGlvbnMubG9vcDtcblx0XHRcdGlmKF9nZXROdW1JdGVtcygpIDwgMykge1xuXHRcdFx0XHRfb3B0aW9ucy5sb29wID0gZmFsc2U7IC8vIGRpc2FibGUgbG9vcCBpZiBsZXNzIHRoZW4gMyBpdGVtc1xuXHRcdFx0fVxuXG5cdFx0XHRfbGlzdGVuKCdiZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihkaWZmKSB7XG5cblx0XHRcdFx0dmFyIHAgPSBfb3B0aW9ucy5wcmVsb2FkLFxuXHRcdFx0XHRcdGlzTmV4dCA9IGRpZmYgPT09IG51bGwgPyB0cnVlIDogKGRpZmYgPj0gMCksXG5cdFx0XHRcdFx0cHJlbG9hZEJlZm9yZSA9IE1hdGgubWluKHBbMF0sIF9nZXROdW1JdGVtcygpICksXG5cdFx0XHRcdFx0cHJlbG9hZEFmdGVyID0gTWF0aC5taW4ocFsxXSwgX2dldE51bUl0ZW1zKCkgKSxcblx0XHRcdFx0XHRpO1xuXG5cblx0XHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChpc05leHQgPyBwcmVsb2FkQWZ0ZXIgOiBwcmVsb2FkQmVmb3JlKTsgaSsrKSB7XG5cdFx0XHRcdFx0c2VsZi5sYXp5TG9hZEl0ZW0oX2N1cnJlbnRJdGVtSW5kZXgraSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChpc05leHQgPyBwcmVsb2FkQmVmb3JlIDogcHJlbG9hZEFmdGVyKTsgaSsrKSB7XG5cdFx0XHRcdFx0c2VsZi5sYXp5TG9hZEl0ZW0oX2N1cnJlbnRJdGVtSW5kZXgtaSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRfbGlzdGVuKCdpbml0aWFsTGF5b3V0JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuY3Vyckl0ZW0uaW5pdGlhbExheW91dCA9IF9vcHRpb25zLmdldFRodW1iQm91bmRzRm4gJiYgX29wdGlvbnMuZ2V0VGh1bWJCb3VuZHNGbihfY3VycmVudEl0ZW1JbmRleCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X2xpc3RlbignbWFpblNjcm9sbEFuaW1Db21wbGV0ZScsIF9hcHBlbmRJbWFnZXNQb29sKTtcblx0XHRcdF9saXN0ZW4oJ2luaXRpYWxab29tSW5FbmQnLCBfYXBwZW5kSW1hZ2VzUG9vbCk7XG5cblxuXG5cdFx0XHRfbGlzdGVuKCdkZXN0cm95JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBpdGVtO1xuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgX2l0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aXRlbSA9IF9pdGVtc1tpXTtcblx0XHRcdFx0XHQvLyByZW1vdmUgcmVmZXJlbmNlIHRvIERPTSBlbGVtZW50cywgZm9yIEdDXG5cdFx0XHRcdFx0aWYoaXRlbS5jb250YWluZXIpIHtcblx0XHRcdFx0XHRcdGl0ZW0uY29udGFpbmVyID0gbnVsbDsgXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGl0ZW0ucGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRcdGl0ZW0ucGxhY2Vob2xkZXIgPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihpdGVtLmltZykge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcgPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihpdGVtLnByZWxvYWRlcikge1xuXHRcdFx0XHRcdFx0aXRlbS5wcmVsb2FkZXIgPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihpdGVtLmxvYWRFcnJvcikge1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkZWQgPSBpdGVtLmxvYWRFcnJvciA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRfaW1hZ2VzVG9BcHBlbmRQb29sID0gbnVsbDtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblxuXHRcdGdldEl0ZW1BdDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdGlmIChpbmRleCA+PSAwKSB7XG5cdFx0XHRcdHJldHVybiBfaXRlbXNbaW5kZXhdICE9PSB1bmRlZmluZWQgPyBfaXRlbXNbaW5kZXhdIDogZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblxuXHRcdGFsbG93UHJvZ3Jlc3NpdmVJbWc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gMS4gUHJvZ3Jlc3NpdmUgaW1hZ2UgbG9hZGluZyBpc24ndCB3b3JraW5nIG9uIHdlYmtpdC9ibGluayBcblx0XHRcdC8vICAgIHdoZW4gaHctYWNjZWxlcmF0aW9uIChlLmcuIHRyYW5zbGF0ZVopIGlzIGFwcGxpZWQgdG8gSU1HIGVsZW1lbnQuXG5cdFx0XHQvLyAgICBUaGF0J3Mgd2h5IGluIFBob3RvU3dpcGUgcGFyZW50IGVsZW1lbnQgZ2V0cyB6b29tIHRyYW5zZm9ybSwgbm90IGltYWdlIGl0c2VsZi5cblx0XHRcdC8vICAgIFxuXHRcdFx0Ly8gMi4gUHJvZ3Jlc3NpdmUgaW1hZ2UgbG9hZGluZyBzb21ldGltZXMgYmxpbmtzIGluIHdlYmtpdC9ibGluayB3aGVuIGFwcGx5aW5nIGFuaW1hdGlvbiB0byBwYXJlbnQgZWxlbWVudC5cblx0XHRcdC8vICAgIFRoYXQncyB3aHkgaXQncyBkaXNhYmxlZCBvbiB0b3VjaCBkZXZpY2VzIChtYWlubHkgYmVjYXVzZSBvZiBzd2lwZSB0cmFuc2l0aW9uKVxuXHRcdFx0Ly8gICAgXG5cdFx0XHQvLyAzLiBQcm9ncmVzc2l2ZSBpbWFnZSBsb2FkaW5nIHNvbWV0aW1lcyBkb2Vzbid0IHdvcmsgaW4gSUUgKHVwIHRvIDExKS5cblxuXHRcdFx0Ly8gRG9uJ3QgYWxsb3cgcHJvZ3Jlc3NpdmUgbG9hZGluZyBvbiBub24tbGFyZ2UgdG91Y2ggZGV2aWNlc1xuXHRcdFx0cmV0dXJuIF9vcHRpb25zLmZvcmNlUHJvZ3Jlc3NpdmVMb2FkaW5nIHx8ICFfbGlrZWx5VG91Y2hEZXZpY2UgfHwgX29wdGlvbnMubW91c2VVc2VkIHx8IHNjcmVlbi53aWR0aCA+IDEyMDA7IFxuXHRcdFx0Ly8gMTIwMCAtIHRvIGVsaW1pbmF0ZSB0b3VjaCBkZXZpY2VzIHdpdGggbGFyZ2Ugc2NyZWVuIChsaWtlIENocm9tZWJvb2sgUGl4ZWwpXG5cdFx0fSxcblxuXHRcdHNldENvbnRlbnQ6IGZ1bmN0aW9uKGhvbGRlciwgaW5kZXgpIHtcblxuXHRcdFx0aWYoX29wdGlvbnMubG9vcCkge1xuXHRcdFx0XHRpbmRleCA9IF9nZXRMb29wZWRJZChpbmRleCk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBwcmV2SXRlbSA9IHNlbGYuZ2V0SXRlbUF0KGhvbGRlci5pbmRleCk7XG5cdFx0XHRpZihwcmV2SXRlbSkge1xuXHRcdFx0XHRwcmV2SXRlbS5jb250YWluZXIgPSBudWxsO1xuXHRcdFx0fVxuXHRcblx0XHRcdHZhciBpdGVtID0gc2VsZi5nZXRJdGVtQXQoaW5kZXgpLFxuXHRcdFx0XHRpbWc7XG5cdFx0XHRcblx0XHRcdGlmKCFpdGVtKSB7XG5cdFx0XHRcdGhvbGRlci5lbC5pbm5lckhUTUwgPSAnJztcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBhbGxvdyB0byBvdmVycmlkZSBkYXRhXG5cdFx0XHRfc2hvdXQoJ2dldHRpbmdEYXRhJywgaW5kZXgsIGl0ZW0pO1xuXG5cdFx0XHRob2xkZXIuaW5kZXggPSBpbmRleDtcblx0XHRcdGhvbGRlci5pdGVtID0gaXRlbTtcblxuXHRcdFx0Ly8gYmFzZSBjb250YWluZXIgRElWIGlzIGNyZWF0ZWQgb25seSBvbmNlIGZvciBlYWNoIG9mIDMgaG9sZGVyc1xuXHRcdFx0dmFyIGJhc2VEaXYgPSBpdGVtLmNvbnRhaW5lciA9IGZyYW1ld29yay5jcmVhdGVFbCgncHN3cF9fem9vbS13cmFwJyk7IFxuXG5cdFx0XHRcblxuXHRcdFx0aWYoIWl0ZW0uc3JjICYmIGl0ZW0uaHRtbCkge1xuXHRcdFx0XHRpZihpdGVtLmh0bWwudGFnTmFtZSkge1xuXHRcdFx0XHRcdGJhc2VEaXYuYXBwZW5kQ2hpbGQoaXRlbS5odG1sKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRiYXNlRGl2LmlubmVySFRNTCA9IGl0ZW0uaHRtbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRfY2hlY2tGb3JFcnJvcihpdGVtKTtcblxuXHRcdFx0X2NhbGN1bGF0ZUl0ZW1TaXplKGl0ZW0sIF92aWV3cG9ydFNpemUpO1xuXHRcdFx0XG5cdFx0XHRpZihpdGVtLnNyYyAmJiAhaXRlbS5sb2FkRXJyb3IgJiYgIWl0ZW0ubG9hZGVkKSB7XG5cblx0XHRcdFx0aXRlbS5sb2FkQ29tcGxldGUgPSBmdW5jdGlvbihpdGVtKSB7XG5cblx0XHRcdFx0XHQvLyBnYWxsZXJ5IGNsb3NlZCBiZWZvcmUgaW1hZ2UgZmluaXNoZWQgbG9hZGluZ1xuXHRcdFx0XHRcdGlmKCFfaXNPcGVuKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gY2hlY2sgaWYgaG9sZGVyIGhhc24ndCBjaGFuZ2VkIHdoaWxlIGltYWdlIHdhcyBsb2FkaW5nXG5cdFx0XHRcdFx0aWYoaG9sZGVyICYmIGhvbGRlci5pbmRleCA9PT0gaW5kZXggKSB7XG5cdFx0XHRcdFx0XHRpZiggX2NoZWNrRm9yRXJyb3IoaXRlbSwgdHJ1ZSkgKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0ubG9hZENvbXBsZXRlID0gaXRlbS5pbWcgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRfY2FsY3VsYXRlSXRlbVNpemUoaXRlbSwgX3ZpZXdwb3J0U2l6ZSk7XG5cdFx0XHRcdFx0XHRcdF9hcHBseVpvb21QYW5Ub0l0ZW0oaXRlbSk7XG5cblx0XHRcdFx0XHRcdFx0aWYoaG9sZGVyLmluZGV4ID09PSBfY3VycmVudEl0ZW1JbmRleCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIHJlY2FsY3VsYXRlIGRpbWVuc2lvbnNcblx0XHRcdFx0XHRcdFx0XHRzZWxmLnVwZGF0ZUN1cnJab29tSXRlbSgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmKCAhaXRlbS5pbWFnZUFwcGVuZGVkICkge1xuXHRcdFx0XHRcdFx0XHRpZihfZmVhdHVyZXMudHJhbnNmb3JtICYmIChfbWFpblNjcm9sbEFuaW1hdGluZyB8fCBfaW5pdGlhbFpvb21SdW5uaW5nKSApIHtcblx0XHRcdFx0XHRcdFx0XHRfaW1hZ2VzVG9BcHBlbmRQb29sLnB1c2goe1xuXHRcdFx0XHRcdFx0XHRcdFx0aXRlbTppdGVtLFxuXHRcdFx0XHRcdFx0XHRcdFx0YmFzZURpdjpiYXNlRGl2LFxuXHRcdFx0XHRcdFx0XHRcdFx0aW1nOml0ZW0uaW1nLFxuXHRcdFx0XHRcdFx0XHRcdFx0aW5kZXg6aW5kZXgsXG5cdFx0XHRcdFx0XHRcdFx0XHRob2xkZXI6aG9sZGVyLFxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xlYXJQbGFjZWhvbGRlcjp0cnVlXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0X2FwcGVuZEltYWdlKGluZGV4LCBpdGVtLCBiYXNlRGl2LCBpdGVtLmltZywgX21haW5TY3JvbGxBbmltYXRpbmcgfHwgX2luaXRpYWxab29tUnVubmluZywgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIHJlbW92ZSBwcmVsb2FkZXIgJiBtaW5pLWltZ1xuXHRcdFx0XHRcdFx0XHRpZighX2luaXRpYWxab29tUnVubmluZyAmJiBpdGVtLnBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5wbGFjZWhvbGRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0XHRcdFx0XHRcdGl0ZW0ucGxhY2Vob2xkZXIgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aXRlbS5sb2FkQ29tcGxldGUgPSBudWxsO1xuXHRcdFx0XHRcdGl0ZW0uaW1nID0gbnVsbDsgLy8gbm8gbmVlZCB0byBzdG9yZSBpbWFnZSBlbGVtZW50IGFmdGVyIGl0J3MgYWRkZWRcblxuXHRcdFx0XHRcdF9zaG91dCgnaW1hZ2VMb2FkQ29tcGxldGUnLCBpbmRleCwgaXRlbSk7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0aWYoZnJhbWV3b3JrLmZlYXR1cmVzLnRyYW5zZm9ybSkge1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHZhciBwbGFjZWhvbGRlckNsYXNzTmFtZSA9ICdwc3dwX19pbWcgcHN3cF9faW1nLS1wbGFjZWhvbGRlcic7IFxuXHRcdFx0XHRcdHBsYWNlaG9sZGVyQ2xhc3NOYW1lICs9IChpdGVtLm1zcmMgPyAnJyA6ICcgcHN3cF9faW1nLS1wbGFjZWhvbGRlci0tYmxhbmsnKTtcblxuXHRcdFx0XHRcdHZhciBwbGFjZWhvbGRlciA9IGZyYW1ld29yay5jcmVhdGVFbChwbGFjZWhvbGRlckNsYXNzTmFtZSwgaXRlbS5tc3JjID8gJ2ltZycgOiAnJyk7XG5cdFx0XHRcdFx0aWYoaXRlbS5tc3JjKSB7XG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlci5zcmMgPSBpdGVtLm1zcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdF9zZXRJbWFnZVNpemUoaXRlbSwgcGxhY2Vob2xkZXIpO1xuXG5cdFx0XHRcdFx0YmFzZURpdi5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcik7XG5cdFx0XHRcdFx0aXRlbS5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuXG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cblx0XHRcdFx0XG5cblx0XHRcdFx0aWYoIWl0ZW0ubG9hZGluZykge1xuXHRcdFx0XHRcdF9wcmVsb2FkSW1hZ2UoaXRlbSk7XG5cdFx0XHRcdH1cblxuXG5cdFx0XHRcdGlmKCBzZWxmLmFsbG93UHJvZ3Jlc3NpdmVJbWcoKSApIHtcblx0XHRcdFx0XHQvLyBqdXN0IGFwcGVuZCBpbWFnZVxuXHRcdFx0XHRcdGlmKCFfaW5pdGlhbENvbnRlbnRTZXQgJiYgX2ZlYXR1cmVzLnRyYW5zZm9ybSkge1xuXHRcdFx0XHRcdFx0X2ltYWdlc1RvQXBwZW5kUG9vbC5wdXNoKHtcblx0XHRcdFx0XHRcdFx0aXRlbTppdGVtLCBcblx0XHRcdFx0XHRcdFx0YmFzZURpdjpiYXNlRGl2LCBcblx0XHRcdFx0XHRcdFx0aW1nOml0ZW0uaW1nLCBcblx0XHRcdFx0XHRcdFx0aW5kZXg6aW5kZXgsIFxuXHRcdFx0XHRcdFx0XHRob2xkZXI6aG9sZGVyXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0X2FwcGVuZEltYWdlKGluZGV4LCBpdGVtLCBiYXNlRGl2LCBpdGVtLmltZywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fSBlbHNlIGlmKGl0ZW0uc3JjICYmICFpdGVtLmxvYWRFcnJvcikge1xuXHRcdFx0XHQvLyBpbWFnZSBvYmplY3QgaXMgY3JlYXRlZCBldmVyeSB0aW1lLCBkdWUgdG8gYnVncyBvZiBpbWFnZSBsb2FkaW5nICYgZGVsYXkgd2hlbiBzd2l0Y2hpbmcgaW1hZ2VzXG5cdFx0XHRcdGltZyA9IGZyYW1ld29yay5jcmVhdGVFbCgncHN3cF9faW1nJywgJ2ltZycpO1xuXHRcdFx0XHRpbWcuc3R5bGUub3BhY2l0eSA9IDE7XG5cdFx0XHRcdGltZy5zcmMgPSBpdGVtLnNyYztcblx0XHRcdFx0X3NldEltYWdlU2l6ZShpdGVtLCBpbWcpO1xuXHRcdFx0XHRfYXBwZW5kSW1hZ2UoaW5kZXgsIGl0ZW0sIGJhc2VEaXYsIGltZywgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRcblxuXHRcdFx0aWYoIV9pbml0aWFsQ29udGVudFNldCAmJiBpbmRleCA9PT0gX2N1cnJlbnRJdGVtSW5kZXgpIHtcblx0XHRcdFx0X2N1cnJab29tRWxlbWVudFN0eWxlID0gYmFzZURpdi5zdHlsZTtcblx0XHRcdFx0X3Nob3dPckhpZGUoaXRlbSwgKGltZyB8fGl0ZW0uaW1nKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X2FwcGx5Wm9vbVBhblRvSXRlbShpdGVtKTtcblx0XHRcdH1cblxuXHRcdFx0aG9sZGVyLmVsLmlubmVySFRNTCA9ICcnO1xuXHRcdFx0aG9sZGVyLmVsLmFwcGVuZENoaWxkKGJhc2VEaXYpO1xuXHRcdH0sXG5cblx0XHRjbGVhblNsaWRlOiBmdW5jdGlvbiggaXRlbSApIHtcblx0XHRcdGlmKGl0ZW0uaW1nICkge1xuXHRcdFx0XHRpdGVtLmltZy5vbmxvYWQgPSBpdGVtLmltZy5vbmVycm9yID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdGl0ZW0ubG9hZGVkID0gaXRlbS5sb2FkaW5nID0gaXRlbS5pbWcgPSBpdGVtLmltYWdlQXBwZW5kZWQgPSBmYWxzZTtcblx0XHR9XG5cblx0fVxufSk7XG5cbi8qPj5pdGVtcy1jb250cm9sbGVyKi9cblxuLyo+PnRhcCovXG4vKipcbiAqIHRhcC5qczpcbiAqXG4gKiBEaXNwbGF0Y2hlcyB0YXAgYW5kIGRvdWJsZS10YXAgZXZlbnRzLlxuICogXG4gKi9cblxudmFyIHRhcFRpbWVyLFxuXHR0YXBSZWxlYXNlUG9pbnQgPSB7fSxcblx0X2Rpc3BhdGNoVGFwRXZlbnQgPSBmdW5jdGlvbihvcmlnRXZlbnQsIHJlbGVhc2VQb2ludCwgcG9pbnRlclR5cGUpIHtcdFx0XG5cdFx0dmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCggJ0N1c3RvbUV2ZW50JyApLFxuXHRcdFx0ZURldGFpbCA9IHtcblx0XHRcdFx0b3JpZ0V2ZW50Om9yaWdFdmVudCwgXG5cdFx0XHRcdHRhcmdldDpvcmlnRXZlbnQudGFyZ2V0LCBcblx0XHRcdFx0cmVsZWFzZVBvaW50OiByZWxlYXNlUG9pbnQsIFxuXHRcdFx0XHRwb2ludGVyVHlwZTpwb2ludGVyVHlwZSB8fCAndG91Y2gnXG5cdFx0XHR9O1xuXG5cdFx0ZS5pbml0Q3VzdG9tRXZlbnQoICdwc3dwVGFwJywgdHJ1ZSwgdHJ1ZSwgZURldGFpbCApO1xuXHRcdG9yaWdFdmVudC50YXJnZXQuZGlzcGF0Y2hFdmVudChlKTtcblx0fTtcblxuX3JlZ2lzdGVyTW9kdWxlKCdUYXAnLCB7XG5cdHB1YmxpY01ldGhvZHM6IHtcblx0XHRpbml0VGFwOiBmdW5jdGlvbigpIHtcblx0XHRcdF9saXN0ZW4oJ2ZpcnN0VG91Y2hTdGFydCcsIHNlbGYub25UYXBTdGFydCk7XG5cdFx0XHRfbGlzdGVuKCd0b3VjaFJlbGVhc2UnLCBzZWxmLm9uVGFwUmVsZWFzZSk7XG5cdFx0XHRfbGlzdGVuKCdkZXN0cm95JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRhcFJlbGVhc2VQb2ludCA9IHt9O1xuXHRcdFx0XHR0YXBUaW1lciA9IG51bGw7XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdG9uVGFwU3RhcnQ6IGZ1bmN0aW9uKHRvdWNoTGlzdCkge1xuXHRcdFx0aWYodG91Y2hMaXN0Lmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRhcFRpbWVyKTtcblx0XHRcdFx0dGFwVGltZXIgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b25UYXBSZWxlYXNlOiBmdW5jdGlvbihlLCByZWxlYXNlUG9pbnQpIHtcblx0XHRcdGlmKCFyZWxlYXNlUG9pbnQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighX21vdmVkICYmICFfaXNNdWx0aXRvdWNoICYmICFfbnVtQW5pbWF0aW9ucykge1xuXHRcdFx0XHR2YXIgcDAgPSByZWxlYXNlUG9pbnQ7XG5cdFx0XHRcdGlmKHRhcFRpbWVyKSB7XG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRhcFRpbWVyKTtcblx0XHRcdFx0XHR0YXBUaW1lciA9IG51bGw7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBpZiB0YXBlZCBvbiB0aGUgc2FtZSBwbGFjZVxuXHRcdFx0XHRcdGlmICggX2lzTmVhcmJ5UG9pbnRzKHAwLCB0YXBSZWxlYXNlUG9pbnQpICkge1xuXHRcdFx0XHRcdFx0X3Nob3V0KCdkb3VibGVUYXAnLCBwMCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYocmVsZWFzZVBvaW50LnR5cGUgPT09ICdtb3VzZScpIHtcblx0XHRcdFx0XHRfZGlzcGF0Y2hUYXBFdmVudChlLCByZWxlYXNlUG9pbnQsICdtb3VzZScpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBjbGlja2VkVGFnTmFtZSA9IGUudGFyZ2V0LnRhZ05hbWUudG9VcHBlckNhc2UoKTtcblx0XHRcdFx0Ly8gYXZvaWQgZG91YmxlIHRhcCBkZWxheSBvbiBidXR0b25zIGFuZCBlbGVtZW50cyB0aGF0IGhhdmUgY2xhc3MgcHN3cF9fc2luZ2xlLXRhcFxuXHRcdFx0XHRpZihjbGlja2VkVGFnTmFtZSA9PT0gJ0JVVFRPTicgfHwgZnJhbWV3b3JrLmhhc0NsYXNzKGUudGFyZ2V0LCAncHN3cF9fc2luZ2xlLXRhcCcpICkge1xuXHRcdFx0XHRcdF9kaXNwYXRjaFRhcEV2ZW50KGUsIHJlbGVhc2VQb2ludCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2VxdWFsaXplUG9pbnRzKHRhcFJlbGVhc2VQb2ludCwgcDApO1xuXG5cdFx0XHRcdHRhcFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRfZGlzcGF0Y2hUYXBFdmVudChlLCByZWxlYXNlUG9pbnQpO1xuXHRcdFx0XHRcdHRhcFRpbWVyID0gbnVsbDtcblx0XHRcdFx0fSwgMzAwKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+dGFwKi9cblxuLyo+PmRlc2t0b3Atem9vbSovXG4vKipcbiAqXG4gKiBkZXNrdG9wLXpvb20uanM6XG4gKlxuICogLSBCaW5kcyBtb3VzZXdoZWVsIGV2ZW50IGZvciBwYW5pbmcgem9vbWVkIGltYWdlLlxuICogLSBNYW5hZ2VzIFwiZHJhZ2dpbmdcIiwgXCJ6b29tZWQtaW5cIiwgXCJ6b29tLW91dFwiIGNsYXNzZXMuXG4gKiAgICh3aGljaCBhcmUgdXNlZCBmb3IgY3Vyc29ycyBhbmQgem9vbSBpY29uKVxuICogLSBBZGRzIHRvZ2dsZURlc2t0b3Bab29tIGZ1bmN0aW9uLlxuICogXG4gKi9cblxudmFyIF93aGVlbERlbHRhO1xuXHRcbl9yZWdpc3Rlck1vZHVsZSgnRGVza3RvcFpvb20nLCB7XG5cblx0cHVibGljTWV0aG9kczoge1xuXG5cdFx0aW5pdERlc2t0b3Bab29tOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0aWYoX29sZElFKSB7XG5cdFx0XHRcdC8vIG5vIHpvb20gZm9yIG9sZCBJRSAoPD04KVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmKF9saWtlbHlUb3VjaERldmljZSkge1xuXHRcdFx0XHQvLyBpZiBkZXRlY3RlZCBoYXJkd2FyZSB0b3VjaCBzdXBwb3J0LCB3ZSB3YWl0IHVudGlsIG1vdXNlIGlzIHVzZWQsXG5cdFx0XHRcdC8vIGFuZCBvbmx5IHRoZW4gYXBwbHkgZGVza3RvcC16b29tIGZlYXR1cmVzXG5cdFx0XHRcdF9saXN0ZW4oJ21vdXNlVXNlZCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHNlbGYuc2V0dXBEZXNrdG9wWm9vbSgpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuc2V0dXBEZXNrdG9wWm9vbSh0cnVlKTtcblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHRzZXR1cERlc2t0b3Bab29tOiBmdW5jdGlvbihvbkluaXQpIHtcblxuXHRcdFx0X3doZWVsRGVsdGEgPSB7fTtcblxuXHRcdFx0dmFyIGV2ZW50cyA9ICd3aGVlbCBtb3VzZXdoZWVsIERPTU1vdXNlU2Nyb2xsJztcblx0XHRcdFxuXHRcdFx0X2xpc3RlbignYmluZEV2ZW50cycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmcmFtZXdvcmsuYmluZCh0ZW1wbGF0ZSwgZXZlbnRzLCAgc2VsZi5oYW5kbGVNb3VzZVdoZWVsKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRfbGlzdGVuKCd1bmJpbmRFdmVudHMnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoX3doZWVsRGVsdGEpIHtcblx0XHRcdFx0XHRmcmFtZXdvcmsudW5iaW5kKHRlbXBsYXRlLCBldmVudHMsIHNlbGYuaGFuZGxlTW91c2VXaGVlbCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRzZWxmLm1vdXNlWm9vbWVkSW4gPSBmYWxzZTtcblxuXHRcdFx0dmFyIGhhc0RyYWdnaW5nQ2xhc3MsXG5cdFx0XHRcdHVwZGF0ZVpvb21hYmxlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoc2VsZi5tb3VzZVpvb21lZEluKSB7XG5cdFx0XHRcdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3ModGVtcGxhdGUsICdwc3dwLS16b29tZWQtaW4nKTtcblx0XHRcdFx0XHRcdHNlbGYubW91c2Vab29tZWRJbiA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihfY3Vyclpvb21MZXZlbCA8IDEpIHtcblx0XHRcdFx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLXpvb20tYWxsb3dlZCcpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3ModGVtcGxhdGUsICdwc3dwLS16b29tLWFsbG93ZWQnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmVtb3ZlRHJhZ2dpbmdDbGFzcygpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRyZW1vdmVEcmFnZ2luZ0NsYXNzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaGFzRHJhZ2dpbmdDbGFzcykge1xuXHRcdFx0XHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKHRlbXBsYXRlLCAncHN3cC0tZHJhZ2dpbmcnKTtcblx0XHRcdFx0XHRcdGhhc0RyYWdnaW5nQ2xhc3MgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cblx0XHRcdF9saXN0ZW4oJ3Jlc2l6ZScgLCB1cGRhdGVab29tYWJsZSk7XG5cdFx0XHRfbGlzdGVuKCdhZnRlckNoYW5nZScgLCB1cGRhdGVab29tYWJsZSk7XG5cdFx0XHRfbGlzdGVuKCdwb2ludGVyRG93bicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihzZWxmLm1vdXNlWm9vbWVkSW4pIHtcblx0XHRcdFx0XHRoYXNEcmFnZ2luZ0NsYXNzID0gdHJ1ZTtcblx0XHRcdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3ModGVtcGxhdGUsICdwc3dwLS1kcmFnZ2luZycpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdF9saXN0ZW4oJ3BvaW50ZXJVcCcsIHJlbW92ZURyYWdnaW5nQ2xhc3MpO1xuXG5cdFx0XHRpZighb25Jbml0KSB7XG5cdFx0XHRcdHVwZGF0ZVpvb21hYmxlKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9LFxuXG5cdFx0aGFuZGxlTW91c2VXaGVlbDogZnVuY3Rpb24oZSkge1xuXG5cdFx0XHRpZihfY3Vyclpvb21MZXZlbCA8PSBzZWxmLmN1cnJJdGVtLmZpdFJhdGlvKSB7XG5cdFx0XHRcdGlmKCBfb3B0aW9ucy5tb2RhbCApIHtcblxuXHRcdFx0XHRcdGlmICghX29wdGlvbnMuY2xvc2VPblNjcm9sbCB8fCBfbnVtQW5pbWF0aW9ucyB8fCBfaXNEcmFnZ2luZykge1xuXHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZihfdHJhbnNmb3JtS2V5ICYmIE1hdGguYWJzKGUuZGVsdGFZKSA+IDIpIHtcblx0XHRcdFx0XHRcdC8vIGNsb3NlIFBob3RvU3dpcGVcblx0XHRcdFx0XHRcdC8vIGlmIGJyb3dzZXIgc3VwcG9ydHMgdHJhbnNmb3JtcyAmIHNjcm9sbCBjaGFuZ2VkIGVub3VnaFxuXHRcdFx0XHRcdFx0X2Nsb3NlZEJ5U2Nyb2xsID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYWxsb3cganVzdCBvbmUgZXZlbnQgdG8gZmlyZVxuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuXHRcdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3doZWVsXG5cdFx0XHRfd2hlZWxEZWx0YS54ID0gMDtcblxuXHRcdFx0aWYoJ2RlbHRhWCcgaW4gZSkge1xuXHRcdFx0XHRpZihlLmRlbHRhTW9kZSA9PT0gMSAvKiBET01fREVMVEFfTElORSAqLykge1xuXHRcdFx0XHRcdC8vIDE4IC0gYXZlcmFnZSBsaW5lIGhlaWdodFxuXHRcdFx0XHRcdF93aGVlbERlbHRhLnggPSBlLmRlbHRhWCAqIDE4O1xuXHRcdFx0XHRcdF93aGVlbERlbHRhLnkgPSBlLmRlbHRhWSAqIDE4O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF93aGVlbERlbHRhLnggPSBlLmRlbHRhWDtcblx0XHRcdFx0XHRfd2hlZWxEZWx0YS55ID0gZS5kZWx0YVk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZignd2hlZWxEZWx0YScgaW4gZSkge1xuXHRcdFx0XHRpZihlLndoZWVsRGVsdGFYKSB7XG5cdFx0XHRcdFx0X3doZWVsRGVsdGEueCA9IC0wLjE2ICogZS53aGVlbERlbHRhWDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihlLndoZWVsRGVsdGFZKSB7XG5cdFx0XHRcdFx0X3doZWVsRGVsdGEueSA9IC0wLjE2ICogZS53aGVlbERlbHRhWTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfd2hlZWxEZWx0YS55ID0gLTAuMTYgKiBlLndoZWVsRGVsdGE7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZignZGV0YWlsJyBpbiBlKSB7XG5cdFx0XHRcdF93aGVlbERlbHRhLnkgPSBlLmRldGFpbDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0X2NhbGN1bGF0ZVBhbkJvdW5kcyhfY3Vyclpvb21MZXZlbCwgdHJ1ZSk7XG5cblx0XHRcdHZhciBuZXdQYW5YID0gX3Bhbk9mZnNldC54IC0gX3doZWVsRGVsdGEueCxcblx0XHRcdFx0bmV3UGFuWSA9IF9wYW5PZmZzZXQueSAtIF93aGVlbERlbHRhLnk7XG5cblx0XHRcdC8vIG9ubHkgcHJldmVudCBzY3JvbGxpbmcgaW4gbm9ubW9kYWwgbW9kZSB3aGVuIG5vdCBhdCBlZGdlc1xuXHRcdFx0aWYgKF9vcHRpb25zLm1vZGFsIHx8XG5cdFx0XHRcdChcblx0XHRcdFx0bmV3UGFuWCA8PSBfY3VyclBhbkJvdW5kcy5taW4ueCAmJiBuZXdQYW5YID49IF9jdXJyUGFuQm91bmRzLm1heC54ICYmXG5cdFx0XHRcdG5ld1BhblkgPD0gX2N1cnJQYW5Cb3VuZHMubWluLnkgJiYgbmV3UGFuWSA+PSBfY3VyclBhbkJvdW5kcy5tYXgueVxuXHRcdFx0XHQpICkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRPRE86IHVzZSByQUYgaW5zdGVhZCBvZiBtb3VzZXdoZWVsP1xuXHRcdFx0c2VsZi5wYW5UbyhuZXdQYW5YLCBuZXdQYW5ZKTtcblx0XHR9LFxuXG5cdFx0dG9nZ2xlRGVza3RvcFpvb206IGZ1bmN0aW9uKGNlbnRlclBvaW50KSB7XG5cdFx0XHRjZW50ZXJQb2ludCA9IGNlbnRlclBvaW50IHx8IHt4Ol92aWV3cG9ydFNpemUueC8yICsgX29mZnNldC54LCB5Ol92aWV3cG9ydFNpemUueS8yICsgX29mZnNldC55IH07XG5cblx0XHRcdHZhciBkb3VibGVUYXBab29tTGV2ZWwgPSBfb3B0aW9ucy5nZXREb3VibGVUYXBab29tKHRydWUsIHNlbGYuY3Vyckl0ZW0pO1xuXHRcdFx0dmFyIHpvb21PdXQgPSBfY3Vyclpvb21MZXZlbCA9PT0gZG91YmxlVGFwWm9vbUxldmVsO1xuXHRcdFx0XG5cdFx0XHRzZWxmLm1vdXNlWm9vbWVkSW4gPSAhem9vbU91dDtcblxuXHRcdFx0c2VsZi56b29tVG8oem9vbU91dCA/IHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbCA6IGRvdWJsZVRhcFpvb21MZXZlbCwgY2VudGVyUG9pbnQsIDMzMyk7XG5cdFx0XHRmcmFtZXdvcmtbICghem9vbU91dCA/ICdhZGQnIDogJ3JlbW92ZScpICsgJ0NsYXNzJ10odGVtcGxhdGUsICdwc3dwLS16b29tZWQtaW4nKTtcblx0XHR9XG5cblx0fVxufSk7XG5cblxuLyo+PmRlc2t0b3Atem9vbSovXG5cbi8qPj5oaXN0b3J5Ki9cbi8qKlxuICpcbiAqIGhpc3RvcnkuanM6XG4gKlxuICogLSBCYWNrIGJ1dHRvbiB0byBjbG9zZSBnYWxsZXJ5LlxuICogXG4gKiAtIFVuaXF1ZSBVUkwgZm9yIGVhY2ggc2xpZGU6IGV4YW1wbGUuY29tLyZwaWQ9MSZnaWQ9M1xuICogICAod2hlcmUgUElEIGlzIHBpY3R1cmUgaW5kZXgsIGFuZCBHSUQgYW5kIGdhbGxlcnkgaW5kZXgpXG4gKiAgIFxuICogLSBTd2l0Y2ggVVJMIHdoZW4gc2xpZGVzIGNoYW5nZS5cbiAqIFxuICovXG5cblxudmFyIF9oaXN0b3J5RGVmYXVsdE9wdGlvbnMgPSB7XG5cdGhpc3Rvcnk6IHRydWUsXG5cdGdhbGxlcnlVSUQ6IDFcbn07XG5cbnZhciBfaGlzdG9yeVVwZGF0ZVRpbWVvdXQsXG5cdF9oYXNoQ2hhbmdlVGltZW91dCxcblx0X2hhc2hBbmltQ2hlY2tUaW1lb3V0LFxuXHRfaGFzaENoYW5nZWRCeVNjcmlwdCxcblx0X2hhc2hDaGFuZ2VkQnlIaXN0b3J5LFxuXHRfaGFzaFJlc2V0ZWQsXG5cdF9pbml0aWFsSGFzaCxcblx0X2hpc3RvcnlDaGFuZ2VkLFxuXHRfY2xvc2VkRnJvbVVSTCxcblx0X3VybENoYW5nZWRPbmNlLFxuXHRfd2luZG93TG9jLFxuXG5cdF9zdXBwb3J0c1B1c2hTdGF0ZSxcblxuXHRfZ2V0SGFzaCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBfd2luZG93TG9jLmhhc2guc3Vic3RyaW5nKDEpO1xuXHR9LFxuXHRfY2xlYW5IaXN0b3J5VGltZW91dHMgPSBmdW5jdGlvbigpIHtcblxuXHRcdGlmKF9oaXN0b3J5VXBkYXRlVGltZW91dCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KF9oaXN0b3J5VXBkYXRlVGltZW91dCk7XG5cdFx0fVxuXG5cdFx0aWYoX2hhc2hBbmltQ2hlY2tUaW1lb3V0KSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoX2hhc2hBbmltQ2hlY2tUaW1lb3V0KTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gcGlkIC0gUGljdHVyZSBpbmRleFxuXHQvLyBnaWQgLSBHYWxsZXJ5IGluZGV4XG5cdF9wYXJzZUl0ZW1JbmRleEZyb21VUkwgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaGFzaCA9IF9nZXRIYXNoKCksXG5cdFx0XHRwYXJhbXMgPSB7fTtcblxuXHRcdGlmKGhhc2gubGVuZ3RoIDwgNSkgeyAvLyBwaWQ9MVxuXHRcdFx0cmV0dXJuIHBhcmFtcztcblx0XHR9XG5cblx0XHR2YXIgaSwgdmFycyA9IGhhc2guc3BsaXQoJyYnKTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgdmFycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYoIXZhcnNbaV0pIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcGFpciA9IHZhcnNbaV0uc3BsaXQoJz0nKTtcdFxuXHRcdFx0aWYocGFpci5sZW5ndGggPCAyKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0cGFyYW1zW3BhaXJbMF1dID0gcGFpclsxXTtcblx0XHR9XG5cdFx0aWYoX29wdGlvbnMuZ2FsbGVyeVBJRHMpIHtcblx0XHRcdC8vIGRldGVjdCBjdXN0b20gcGlkIGluIGhhc2ggYW5kIHNlYXJjaCBmb3IgaXQgYW1vbmcgdGhlIGl0ZW1zIGNvbGxlY3Rpb25cblx0XHRcdHZhciBzZWFyY2hmb3IgPSBwYXJhbXMucGlkO1xuXHRcdFx0cGFyYW1zLnBpZCA9IDA7IC8vIGlmIGN1c3RvbSBwaWQgY2Fubm90IGJlIGZvdW5kLCBmYWxsYmFjayB0byB0aGUgZmlyc3QgaXRlbVxuXHRcdFx0Zm9yKGkgPSAwOyBpIDwgX2l0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmKF9pdGVtc1tpXS5waWQgPT09IHNlYXJjaGZvcikge1xuXHRcdFx0XHRcdHBhcmFtcy5waWQgPSBpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBhcmFtcy5waWQgPSBwYXJzZUludChwYXJhbXMucGlkLDEwKS0xO1xuXHRcdH1cblx0XHRpZiggcGFyYW1zLnBpZCA8IDAgKSB7XG5cdFx0XHRwYXJhbXMucGlkID0gMDtcblx0XHR9XG5cdFx0cmV0dXJuIHBhcmFtcztcblx0fSxcblx0X3VwZGF0ZUhhc2ggPSBmdW5jdGlvbigpIHtcblxuXHRcdGlmKF9oYXNoQW5pbUNoZWNrVGltZW91dCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KF9oYXNoQW5pbUNoZWNrVGltZW91dCk7XG5cdFx0fVxuXG5cblx0XHRpZihfbnVtQW5pbWF0aW9ucyB8fCBfaXNEcmFnZ2luZykge1xuXHRcdFx0Ly8gY2hhbmdpbmcgYnJvd3NlciBVUkwgZm9yY2VzIGxheW91dC9wYWludCBpbiBzb21lIGJyb3dzZXJzLCB3aGljaCBjYXVzZXMgbm90aWNhYmxlIGxhZyBkdXJpbmcgYW5pbWF0aW9uXG5cdFx0XHQvLyB0aGF0J3Mgd2h5IHdlIHVwZGF0ZSBoYXNoIG9ubHkgd2hlbiBubyBhbmltYXRpb25zIHJ1bm5pbmdcblx0XHRcdF9oYXNoQW5pbUNoZWNrVGltZW91dCA9IHNldFRpbWVvdXQoX3VwZGF0ZUhhc2gsIDUwMCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdGlmKF9oYXNoQ2hhbmdlZEJ5U2NyaXB0KSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoX2hhc2hDaGFuZ2VUaW1lb3V0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0X2hhc2hDaGFuZ2VkQnlTY3JpcHQgPSB0cnVlO1xuXHRcdH1cblxuXG5cdFx0dmFyIHBpZCA9IChfY3VycmVudEl0ZW1JbmRleCArIDEpO1xuXHRcdHZhciBpdGVtID0gX2dldEl0ZW1BdCggX2N1cnJlbnRJdGVtSW5kZXggKTtcblx0XHRpZihpdGVtLmhhc093blByb3BlcnR5KCdwaWQnKSkge1xuXHRcdFx0Ly8gY2FycnkgZm9yd2FyZCBhbnkgY3VzdG9tIHBpZCBhc3NpZ25lZCB0byB0aGUgaXRlbVxuXHRcdFx0cGlkID0gaXRlbS5waWQ7XG5cdFx0fVxuXHRcdHZhciBuZXdIYXNoID0gX2luaXRpYWxIYXNoICsgJyYnICArICAnZ2lkPScgKyBfb3B0aW9ucy5nYWxsZXJ5VUlEICsgJyYnICsgJ3BpZD0nICsgcGlkO1xuXG5cdFx0aWYoIV9oaXN0b3J5Q2hhbmdlZCkge1xuXHRcdFx0aWYoX3dpbmRvd0xvYy5oYXNoLmluZGV4T2YobmV3SGFzaCkgPT09IC0xKSB7XG5cdFx0XHRcdF91cmxDaGFuZ2VkT25jZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHQvLyBmaXJzdCB0aW1lIC0gYWRkIG5ldyBoaXNvcnkgcmVjb3JkLCB0aGVuIGp1c3QgcmVwbGFjZVxuXHRcdH1cblxuXHRcdHZhciBuZXdVUkwgPSBfd2luZG93TG9jLmhyZWYuc3BsaXQoJyMnKVswXSArICcjJyArICBuZXdIYXNoO1xuXG5cdFx0aWYoIF9zdXBwb3J0c1B1c2hTdGF0ZSApIHtcblxuXHRcdFx0aWYoJyMnICsgbmV3SGFzaCAhPT0gd2luZG93LmxvY2F0aW9uLmhhc2gpIHtcblx0XHRcdFx0aGlzdG9yeVtfaGlzdG9yeUNoYW5nZWQgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXSgnJywgZG9jdW1lbnQudGl0bGUsIG5ld1VSTCk7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYoX2hpc3RvcnlDaGFuZ2VkKSB7XG5cdFx0XHRcdF93aW5kb3dMb2MucmVwbGFjZSggbmV3VVJMICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfd2luZG93TG9jLmhhc2ggPSBuZXdIYXNoO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRcblxuXHRcdF9oaXN0b3J5Q2hhbmdlZCA9IHRydWU7XG5cdFx0X2hhc2hDaGFuZ2VUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdF9oYXNoQ2hhbmdlZEJ5U2NyaXB0ID0gZmFsc2U7XG5cdFx0fSwgNjApO1xuXHR9O1xuXG5cblxuXHRcblxuX3JlZ2lzdGVyTW9kdWxlKCdIaXN0b3J5Jywge1xuXG5cdFxuXG5cdHB1YmxpY01ldGhvZHM6IHtcblx0XHRpbml0SGlzdG9yeTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdGZyYW1ld29yay5leHRlbmQoX29wdGlvbnMsIF9oaXN0b3J5RGVmYXVsdE9wdGlvbnMsIHRydWUpO1xuXG5cdFx0XHRpZiggIV9vcHRpb25zLmhpc3RvcnkgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXG5cdFx0XHRfd2luZG93TG9jID0gd2luZG93LmxvY2F0aW9uO1xuXHRcdFx0X3VybENoYW5nZWRPbmNlID0gZmFsc2U7XG5cdFx0XHRfY2xvc2VkRnJvbVVSTCA9IGZhbHNlO1xuXHRcdFx0X2hpc3RvcnlDaGFuZ2VkID0gZmFsc2U7XG5cdFx0XHRfaW5pdGlhbEhhc2ggPSBfZ2V0SGFzaCgpO1xuXHRcdFx0X3N1cHBvcnRzUHVzaFN0YXRlID0gKCdwdXNoU3RhdGUnIGluIGhpc3RvcnkpO1xuXG5cblx0XHRcdGlmKF9pbml0aWFsSGFzaC5pbmRleE9mKCdnaWQ9JykgPiAtMSkge1xuXHRcdFx0XHRfaW5pdGlhbEhhc2ggPSBfaW5pdGlhbEhhc2guc3BsaXQoJyZnaWQ9JylbMF07XG5cdFx0XHRcdF9pbml0aWFsSGFzaCA9IF9pbml0aWFsSGFzaC5zcGxpdCgnP2dpZD0nKVswXTtcblx0XHRcdH1cblx0XHRcdFxuXG5cdFx0XHRfbGlzdGVuKCdhZnRlckNoYW5nZScsIHNlbGYudXBkYXRlVVJMKTtcblx0XHRcdF9saXN0ZW4oJ3VuYmluZEV2ZW50cycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmcmFtZXdvcmsudW5iaW5kKHdpbmRvdywgJ2hhc2hjaGFuZ2UnLCBzZWxmLm9uSGFzaENoYW5nZSk7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHR2YXIgcmV0dXJuVG9PcmlnaW5hbCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfaGFzaFJlc2V0ZWQgPSB0cnVlO1xuXHRcdFx0XHRpZighX2Nsb3NlZEZyb21VUkwpIHtcblxuXHRcdFx0XHRcdGlmKF91cmxDaGFuZ2VkT25jZSkge1xuXHRcdFx0XHRcdFx0aGlzdG9yeS5iYWNrKCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYoX2luaXRpYWxIYXNoKSB7XG5cdFx0XHRcdFx0XHRcdF93aW5kb3dMb2MuaGFzaCA9IF9pbml0aWFsSGFzaDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGlmIChfc3VwcG9ydHNQdXNoU3RhdGUpIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIHJlbW92ZSBoYXNoIGZyb20gdXJsIHdpdGhvdXQgcmVmcmVzaGluZyBpdCBvciBzY3JvbGxpbmcgdG8gdG9wXG5cdFx0XHRcdFx0XHRcdFx0aGlzdG9yeS5wdXNoU3RhdGUoJycsIGRvY3VtZW50LnRpdGxlLCAgX3dpbmRvd0xvYy5wYXRobmFtZSArIF93aW5kb3dMb2Muc2VhcmNoICk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0X3dpbmRvd0xvYy5oYXNoID0gJyc7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfY2xlYW5IaXN0b3J5VGltZW91dHMoKTtcblx0XHRcdH07XG5cblxuXHRcdFx0X2xpc3RlbigndW5iaW5kRXZlbnRzJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKF9jbG9zZWRCeVNjcm9sbCkge1xuXHRcdFx0XHRcdC8vIGlmIFBob3RvU3dpcGUgaXMgY2xvc2VkIGJ5IHNjcm9sbCwgd2UgZ28gXCJiYWNrXCIgYmVmb3JlIHRoZSBjbG9zaW5nIGFuaW1hdGlvbiBzdGFydHNcblx0XHRcdFx0XHQvLyB0aGlzIGlzIGRvbmUgdG8ga2VlcCB0aGUgc2Nyb2xsIHBvc2l0aW9uXG5cdFx0XHRcdFx0cmV0dXJuVG9PcmlnaW5hbCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdF9saXN0ZW4oJ2Rlc3Ryb3knLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoIV9oYXNoUmVzZXRlZCkge1xuXHRcdFx0XHRcdHJldHVyblRvT3JpZ2luYWwoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRfbGlzdGVuKCdmaXJzdFVwZGF0ZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfY3VycmVudEl0ZW1JbmRleCA9IF9wYXJzZUl0ZW1JbmRleEZyb21VUkwoKS5waWQ7XG5cdFx0XHR9KTtcblxuXHRcdFx0XG5cblx0XHRcdFxuXHRcdFx0dmFyIGluZGV4ID0gX2luaXRpYWxIYXNoLmluZGV4T2YoJ3BpZD0nKTtcblx0XHRcdGlmKGluZGV4ID4gLTEpIHtcblx0XHRcdFx0X2luaXRpYWxIYXNoID0gX2luaXRpYWxIYXNoLnN1YnN0cmluZygwLCBpbmRleCk7XG5cdFx0XHRcdGlmKF9pbml0aWFsSGFzaC5zbGljZSgtMSkgPT09ICcmJykge1xuXHRcdFx0XHRcdF9pbml0aWFsSGFzaCA9IF9pbml0aWFsSGFzaC5zbGljZSgwLCAtMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihfaXNPcGVuKSB7IC8vIGhhc24ndCBkZXN0cm95ZWQgeWV0XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLmJpbmQod2luZG93LCAnaGFzaGNoYW5nZScsIHNlbGYub25IYXNoQ2hhbmdlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgNDApO1xuXHRcdFx0XG5cdFx0fSxcblx0XHRvbkhhc2hDaGFuZ2U6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZihfZ2V0SGFzaCgpID09PSBfaW5pdGlhbEhhc2gpIHtcblxuXHRcdFx0XHRfY2xvc2VkRnJvbVVSTCA9IHRydWU7XG5cdFx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYoIV9oYXNoQ2hhbmdlZEJ5U2NyaXB0KSB7XG5cblx0XHRcdFx0X2hhc2hDaGFuZ2VkQnlIaXN0b3J5ID0gdHJ1ZTtcblx0XHRcdFx0c2VsZi5nb1RvKCBfcGFyc2VJdGVtSW5kZXhGcm9tVVJMKCkucGlkICk7XG5cdFx0XHRcdF9oYXNoQ2hhbmdlZEJ5SGlzdG9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fSxcblx0XHR1cGRhdGVVUkw6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEZWxheSB0aGUgdXBkYXRlIG9mIFVSTCwgdG8gYXZvaWQgbGFnIGR1cmluZyB0cmFuc2l0aW9uLCBcblx0XHRcdC8vIGFuZCB0byBub3QgdG8gdHJpZ2dlciBhY3Rpb25zIGxpa2UgXCJyZWZyZXNoIHBhZ2Ugc291bmRcIiBvciBcImJsaW5raW5nIGZhdmljb25cIiB0byBvZnRlblxuXHRcdFx0XG5cdFx0XHRfY2xlYW5IaXN0b3J5VGltZW91dHMoKTtcblx0XHRcdFxuXG5cdFx0XHRpZihfaGFzaENoYW5nZWRCeUhpc3RvcnkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighX2hpc3RvcnlDaGFuZ2VkKSB7XG5cdFx0XHRcdF91cGRhdGVIYXNoKCk7IC8vIGZpcnN0IHRpbWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9oaXN0b3J5VXBkYXRlVGltZW91dCA9IHNldFRpbWVvdXQoX3VwZGF0ZUhhc2gsIDgwMCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0fVxufSk7XG5cblxuLyo+Pmhpc3RvcnkqL1xuXHRmcmFtZXdvcmsuZXh0ZW5kKHNlbGYsIHB1YmxpY01ldGhvZHMpOyB9O1xuXHRyZXR1cm4gUGhvdG9Td2lwZTtcbn0pOyIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBQbHlyXG4vLyBwbHlyLmpzIHYyLjAuMTBcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWx6L3BseXJcbi8vIExpY2Vuc2U6IFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIENyZWRpdHM6IGh0dHA6Ly9wYXlwYWwuZ2l0aHViLmlvL2FjY2Vzc2libGUtaHRtbDUtdmlkZW8tcGxheWVyL1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuOyhmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8qZ2xvYmFsIGRlZmluZSxtb2R1bGUqL1xuXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZSwgQ29tbW9uSlMtbGlrZVxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnkocm9vdCwgZG9jdW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRFxuICAgICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhY3Rvcnkocm9vdCwgZG9jdW1lbnQpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgICAgICByb290LnBseXIgPSBmYWN0b3J5KHJvb3QsIGRvY3VtZW50KTtcbiAgICB9XG59KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIEdsb2JhbHNcbiAgICB2YXIgZnVsbHNjcmVlbixcbiAgICBzY3JvbGwgPSB7IHg6IDAsIHk6IDAgfSxcblxuICAgIC8vIERlZmF1bHQgY29uZmlnXG4gICAgZGVmYXVsdHMgPSB7XG4gICAgICAgIGVuYWJsZWQ6ICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGRlYnVnOiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICBhdXRvcGxheTogICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgbG9vcDogICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgIHNlZWtUaW1lOiAgICAgICAgICAgICAgIDEwLFxuICAgICAgICB2b2x1bWU6ICAgICAgICAgICAgICAgICAxMCxcbiAgICAgICAgdm9sdW1lTWluOiAgICAgICAgICAgICAgMCxcbiAgICAgICAgdm9sdW1lTWF4OiAgICAgICAgICAgICAgMTAsXG4gICAgICAgIHZvbHVtZVN0ZXA6ICAgICAgICAgICAgIDEsXG4gICAgICAgIGR1cmF0aW9uOiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgIGRpc3BsYXlEdXJhdGlvbjogICAgICAgIHRydWUsXG4gICAgICAgIGxvYWRTcHJpdGU6ICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGljb25QcmVmaXg6ICAgICAgICAgICAgICdwbHlyJyxcbiAgICAgICAgaWNvblVybDogICAgICAgICAgICAgICAgJ2h0dHBzOi8vY2RuLnBseXIuaW8vMi4wLjEwL3BseXIuc3ZnJyxcbiAgICAgICAgY2xpY2tUb1BsYXk6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgaGlkZUNvbnRyb2xzOiAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgc2hvd1Bvc3Rlck9uRW5kOiAgICAgICAgZmFsc2UsXG4gICAgICAgIGRpc2FibGVDb250ZXh0TWVudTogICAgIHRydWUsXG4gICAgICAgIGtleWJvYXJkU2hvcmN1dHM6ICAgICAgIHtcbiAgICAgICAgICAgIGZvY3VzZWQ6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGdsb2JhbDogICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgIGNvbnRyb2xzOiAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBzZWVrOiAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICBodG1sNTogICAgICAgICAgICAgICd2aWRlbywgYXVkaW8nLFxuICAgICAgICAgICAgZW1iZWQ6ICAgICAgICAgICAgICAnW2RhdGEtdHlwZV0nLFxuICAgICAgICAgICAgZWRpdGFibGU6ICAgICAgICAgICAnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIFtjb250ZW50ZWRpdGFibGVdJyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogICAgICAgICAgJy5wbHlyJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgd3JhcHBlcjogICAgICAgICcucGx5cl9fY29udHJvbHMnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFiZWxzOiAgICAgICAgICAgICAnW2RhdGEtcGx5cl0nLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgIHNlZWs6ICAgICAgICAgICAnW2RhdGEtcGx5cj1cInNlZWtcIl0nLFxuICAgICAgICAgICAgICAgIHBsYXk6ICAgICAgICAgICAnW2RhdGEtcGx5cj1cInBsYXlcIl0nLFxuICAgICAgICAgICAgICAgIHBhdXNlOiAgICAgICAgICAnW2RhdGEtcGx5cj1cInBhdXNlXCJdJyxcbiAgICAgICAgICAgICAgICByZXN0YXJ0OiAgICAgICAgJ1tkYXRhLXBseXI9XCJyZXN0YXJ0XCJdJyxcbiAgICAgICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgJ1tkYXRhLXBseXI9XCJyZXdpbmRcIl0nLFxuICAgICAgICAgICAgICAgIGZvcndhcmQ6ICAgICAgICAnW2RhdGEtcGx5cj1cImZhc3QtZm9yd2FyZFwiXScsXG4gICAgICAgICAgICAgICAgbXV0ZTogICAgICAgICAgICdbZGF0YS1wbHlyPVwibXV0ZVwiXScsXG4gICAgICAgICAgICAgICAgY2FwdGlvbnM6ICAgICAgICdbZGF0YS1wbHlyPVwiY2FwdGlvbnNcIl0nLFxuICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW46ICAgICAnW2RhdGEtcGx5cj1cImZ1bGxzY3JlZW5cIl0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdm9sdW1lOiB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6ICAgICAgICAgICdbZGF0YS1wbHlyPVwidm9sdW1lXCJdJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAgICAgICAgJy5wbHlyX192b2x1bWUtLWRpc3BsYXknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgICAgICAgICBjb250YWluZXI6ICAgICAgJy5wbHlyX19wcm9ncmVzcycsXG4gICAgICAgICAgICAgICAgYnVmZmVyOiAgICAgICAgICcucGx5cl9fcHJvZ3Jlc3MtLWJ1ZmZlcicsXG4gICAgICAgICAgICAgICAgcGxheWVkOiAgICAgICAgICcucGx5cl9fcHJvZ3Jlc3MtLXBsYXllZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXB0aW9uczogICAgICAgICAgICcucGx5cl9fY2FwdGlvbnMnLFxuICAgICAgICAgICAgY3VycmVudFRpbWU6ICAgICAgICAnLnBseXJfX3RpbWUtLWN1cnJlbnQnLFxuICAgICAgICAgICAgZHVyYXRpb246ICAgICAgICAgICAnLnBseXJfX3RpbWUtLWR1cmF0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICBjbGFzc2VzOiB7XG4gICAgICAgICAgICBzZXR1cDogICAgICAgICAgICAgICdwbHlyLS1zZXR1cCcsXG4gICAgICAgICAgICByZWFkeTogICAgICAgICAgICAgICdwbHlyLS1yZWFkeScsXG4gICAgICAgICAgICB2aWRlb1dyYXBwZXI6ICAgICAgICdwbHlyX192aWRlby13cmFwcGVyJyxcbiAgICAgICAgICAgIGVtYmVkV3JhcHBlcjogICAgICAgJ3BseXJfX3ZpZGVvLWVtYmVkJyxcbiAgICAgICAgICAgIHR5cGU6ICAgICAgICAgICAgICAgJ3BseXItLXswfScsXG4gICAgICAgICAgICBzdG9wcGVkOiAgICAgICAgICAgICdwbHlyLS1zdG9wcGVkJyxcbiAgICAgICAgICAgIHBsYXlpbmc6ICAgICAgICAgICAgJ3BseXItLXBsYXlpbmcnLFxuICAgICAgICAgICAgbXV0ZWQ6ICAgICAgICAgICAgICAncGx5ci0tbXV0ZWQnLFxuICAgICAgICAgICAgbG9hZGluZzogICAgICAgICAgICAncGx5ci0tbG9hZGluZycsXG4gICAgICAgICAgICBob3ZlcjogICAgICAgICAgICAgICdwbHlyLS1ob3ZlcicsXG4gICAgICAgICAgICB0b29sdGlwOiAgICAgICAgICAgICdwbHlyX190b29sdGlwJyxcbiAgICAgICAgICAgIGhpZGRlbjogICAgICAgICAgICAgJ3BseXJfX3NyLW9ubHknLFxuICAgICAgICAgICAgaGlkZUNvbnRyb2xzOiAgICAgICAncGx5ci0taGlkZS1jb250cm9scycsXG4gICAgICAgICAgICBpc0lvczogICAgICAgICAgICAgICdwbHlyLS1pcy1pb3MnLFxuICAgICAgICAgICAgaXNUb3VjaDogICAgICAgICAgICAncGx5ci0taXMtdG91Y2gnLFxuICAgICAgICAgICAgY2FwdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiAgICAgICAgJ3BseXItLWNhcHRpb25zLWVuYWJsZWQnLFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogICAgICAgICAncGx5ci0tY2FwdGlvbnMtYWN0aXZlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiAgICAgICAgJ3BseXItLWZ1bGxzY3JlZW4tZW5hYmxlZCcsXG4gICAgICAgICAgICAgICAgYWN0aXZlOiAgICAgICAgICdwbHlyLS1mdWxsc2NyZWVuLWFjdGl2ZSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWJGb2N1czogICAgICAgICAgICd0YWItZm9jdXMnXG4gICAgICAgIH0sXG4gICAgICAgIGNhcHRpb25zOiB7XG4gICAgICAgICAgICBkZWZhdWx0QWN0aXZlOiAgICAgIGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxzY3JlZW46IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbGxiYWNrOiAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGFsbG93QXVkaW86ICAgICAgICAgZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc3RvcmFnZToge1xuICAgICAgICAgICAgZW5hYmxlZDogICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAga2V5OiAgICAgICAgICAgICAgICAncGx5cidcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbHM6ICAgICAgICAgICAgICAgWydwbGF5LWxhcmdlJywgJ3BsYXknLCAncHJvZ3Jlc3MnLCAnY3VycmVudC10aW1lJywgJ211dGUnLCAndm9sdW1lJywgJ2NhcHRpb25zJywgJ2Z1bGxzY3JlZW4nXSxcbiAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgcmVzdGFydDogICAgICAgICAgICAnUmVzdGFydCcsXG4gICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgICAgICdSZXdpbmQge3NlZWt0aW1lfSBzZWNzJyxcbiAgICAgICAgICAgIHBsYXk6ICAgICAgICAgICAgICAgJ1BsYXknLFxuICAgICAgICAgICAgcGF1c2U6ICAgICAgICAgICAgICAnUGF1c2UnLFxuICAgICAgICAgICAgZm9yd2FyZDogICAgICAgICAgICAnRm9yd2FyZCB7c2Vla3RpbWV9IHNlY3MnLFxuICAgICAgICAgICAgcGxheWVkOiAgICAgICAgICAgICAncGxheWVkJyxcbiAgICAgICAgICAgIGJ1ZmZlcmVkOiAgICAgICAgICAgJ2J1ZmZlcmVkJyxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiAgICAgICAgJ0N1cnJlbnQgdGltZScsXG4gICAgICAgICAgICBkdXJhdGlvbjogICAgICAgICAgICdEdXJhdGlvbicsXG4gICAgICAgICAgICB2b2x1bWU6ICAgICAgICAgICAgICdWb2x1bWUnLFxuICAgICAgICAgICAgdG9nZ2xlTXV0ZTogICAgICAgICAnVG9nZ2xlIE11dGUnLFxuICAgICAgICAgICAgdG9nZ2xlQ2FwdGlvbnM6ICAgICAnVG9nZ2xlIENhcHRpb25zJyxcbiAgICAgICAgICAgIHRvZ2dsZUZ1bGxzY3JlZW46ICAgJ1RvZ2dsZSBGdWxsc2NyZWVuJyxcbiAgICAgICAgICAgIGZyYW1lVGl0bGU6ICAgICAgICAgJ1BsYXllciBmb3Ige3RpdGxlfSdcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZXM6IHtcbiAgICAgICAgICAgIGVtYmVkOiAgICAgICAgICAgICAgWyd5b3V0dWJlJywgJ3ZpbWVvJywgJ3NvdW5kY2xvdWQnXSxcbiAgICAgICAgICAgIGh0bWw1OiAgICAgICAgICAgICAgWyd2aWRlbycsICdhdWRpbyddXG4gICAgICAgIH0sXG4gICAgICAgIC8vIFVSTHNcbiAgICAgICAgdXJsczoge1xuICAgICAgICAgICAgdmltZW86IHtcbiAgICAgICAgICAgICAgICBhcGk6ICAgICAgICAgICAgJ2h0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS9hcGkvcGxheWVyLmpzJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5b3V0dWJlOiB7XG4gICAgICAgICAgICAgICAgYXBpOiAgICAgICAgICAgICdodHRwczovL3d3dy55b3V0dWJlLmNvbS9pZnJhbWVfYXBpJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNvdW5kY2xvdWQ6IHtcbiAgICAgICAgICAgICAgICBhcGk6ICAgICAgICAgICAgJ2h0dHBzOi8vdy5zb3VuZGNsb3VkLmNvbS9wbGF5ZXIvYXBpLmpzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBDdXN0b20gY29udHJvbCBsaXN0ZW5lcnNcbiAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgICBzZWVrOiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwbGF5OiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwYXVzZTogICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICByZXN0YXJ0OiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBmb3J3YXJkOiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBtdXRlOiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB2b2x1bWU6ICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBjYXB0aW9uczogICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiAgICAgICAgIG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gRXZlbnRzIHRvIHdhdGNoIG9uIEhUTUw1IG1lZGlhIGVsZW1lbnRzXG4gICAgICAgIGV2ZW50czogICAgICAgICAgICAgICAgIFsncmVhZHknLCAnZW5kZWQnLCAncHJvZ3Jlc3MnLCAnc3RhbGxlZCcsICdwbGF5aW5nJywgJ3dhaXRpbmcnLCAnY2FucGxheScsICdjYW5wbGF5dGhyb3VnaCcsICdsb2Fkc3RhcnQnLCAnbG9hZGVkZGF0YScsICdsb2FkZWRtZXRhZGF0YScsICd0aW1ldXBkYXRlJywgJ3ZvbHVtZWNoYW5nZScsICdwbGF5JywgJ3BhdXNlJywgJ2Vycm9yJywgJ3NlZWtpbmcnLCAnc2Vla2VkJywgJ2VtcHRpZWQnXSxcbiAgICAgICAgLy8gTG9nZ2luZ1xuICAgICAgICBsb2dQcmVmaXg6ICAgICAgICAgICAgICAnW1BseXJdJ1xuICAgIH07XG5cbiAgICAvLyBDcmVkaXRzOiBodHRwOi8vcGF5cGFsLmdpdGh1Yi5pby9hY2Nlc3NpYmxlLWh0bWw1LXZpZGVvLXBsYXllci9cbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCBkdWUgdG8gbWl4ZWQgc3VwcG9ydCwgVUEgc25pZmZpbmcgaXMgcmVxdWlyZWRcbiAgICBmdW5jdGlvbiBfYnJvd3NlclNuaWZmKCkge1xuICAgICAgICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgbmFtZSA9IG5hdmlnYXRvci5hcHBOYW1lLFxuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSAnJyArIHBhcnNlRmxvYXQobmF2aWdhdG9yLmFwcFZlcnNpb24pLFxuICAgICAgICAgICAgbWFqb3JWZXJzaW9uID0gcGFyc2VJbnQobmF2aWdhdG9yLmFwcFZlcnNpb24sIDEwKSxcbiAgICAgICAgICAgIG5hbWVPZmZzZXQsXG4gICAgICAgICAgICB2ZXJPZmZzZXQsXG4gICAgICAgICAgICBpeCxcbiAgICAgICAgICAgIGlzSUUgPSBmYWxzZSxcbiAgICAgICAgICAgIGlzRmlyZWZveCA9IGZhbHNlLFxuICAgICAgICAgICAgaXNDaHJvbWUgPSBmYWxzZSxcbiAgICAgICAgICAgIGlzU2FmYXJpID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdXaW5kb3dzIE5UJykgIT09IC0xKSAmJiAobmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZigncnY6MTEnKSAhPT0gLTEpKSB7XG4gICAgICAgICAgICAvLyBNU0lFIDExXG4gICAgICAgICAgICBpc0lFID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnSUUnO1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSAnMTEnO1xuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdNU0lFJykpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gTVNJRVxuICAgICAgICAgICAgaXNJRSA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gJ0lFJztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDUpO1xuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdDaHJvbWUnKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBDaHJvbWVcbiAgICAgICAgICAgIGlzQ2hyb21lID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnQ2hyb21lJztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDcpO1xuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdTYWZhcmknKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBTYWZhcmlcbiAgICAgICAgICAgIGlzU2FmYXJpID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnU2FmYXJpJztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDcpO1xuICAgICAgICAgICAgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdWZXJzaW9uJykpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdGaXJlZm94JykpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gRmlyZWZveFxuICAgICAgICAgICAgaXNGaXJlZm94ID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnRmlyZWZveCc7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9IHVhLnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA4KTtcbiAgICAgICAgfSBlbHNlIGlmICgobmFtZU9mZnNldCA9IHVhLmxhc3RJbmRleE9mKCcgJykgKyAxKSA8ICh2ZXJPZmZzZXQgPSB1YS5sYXN0SW5kZXhPZignLycpKSkge1xuICAgICAgICAgICAgLy8gSW4gbW9zdCBvdGhlciBicm93c2VycywgJ25hbWUvdmVyc2lvbicgaXMgYXQgdGhlIGVuZCBvZiB1c2VyQWdlbnRcbiAgICAgICAgICAgIG5hbWUgPSB1YS5zdWJzdHJpbmcobmFtZU9mZnNldCx2ZXJPZmZzZXQpO1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSB1YS5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgMSk7XG5cbiAgICAgICAgICAgIGlmIChuYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBuYXZpZ2F0b3IuYXBwTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyaW0gdGhlIGZ1bGxWZXJzaW9uIHN0cmluZyBhdCBzZW1pY29sb24vc3BhY2UgaWYgcHJlc2VudFxuICAgICAgICBpZiAoKGl4ID0gZnVsbFZlcnNpb24uaW5kZXhPZignOycpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gZnVsbFZlcnNpb24uc3Vic3RyaW5nKDAsIGl4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGl4ID0gZnVsbFZlcnNpb24uaW5kZXhPZignICcpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gZnVsbFZlcnNpb24uc3Vic3RyaW5nKDAsIGl4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBtYWpvciB2ZXJzaW9uXG4gICAgICAgIG1ham9yVmVyc2lvbiA9IHBhcnNlSW50KCcnICsgZnVsbFZlcnNpb24sIDEwKTtcbiAgICAgICAgaWYgKGlzTmFOKG1ham9yVmVyc2lvbikpIHtcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gJycgKyBwYXJzZUZsb2F0KG5hdmlnYXRvci5hcHBWZXJzaW9uKTtcbiAgICAgICAgICAgIG1ham9yVmVyc2lvbiA9IHBhcnNlSW50KG5hdmlnYXRvci5hcHBWZXJzaW9uLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gZGF0YVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogICAgICAgbmFtZSxcbiAgICAgICAgICAgIHZlcnNpb246ICAgIG1ham9yVmVyc2lvbixcbiAgICAgICAgICAgIGlzSUU6ICAgICAgIGlzSUUsXG4gICAgICAgICAgICBpc0ZpcmVmb3g6ICBpc0ZpcmVmb3gsXG4gICAgICAgICAgICBpc0Nocm9tZTogICBpc0Nocm9tZSxcbiAgICAgICAgICAgIGlzU2FmYXJpOiAgIGlzU2FmYXJpLFxuICAgICAgICAgICAgaXNJb3M6ICAgICAgLyhpUGFkfGlQaG9uZXxpUG9kKS9nLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSxcbiAgICAgICAgICAgIGlzVG91Y2g6ICAgICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBtaW1lIHR5cGUgc3VwcG9ydCBhZ2FpbnN0IGEgcGxheWVyIGluc3RhbmNlXG4gICAgLy8gQ3JlZGl0czogaHR0cDovL2RpdmVpbnRvaHRtbDUuaW5mby9ldmVyeXRoaW5nLmh0bWxcbiAgICAvLyBSZWxhdGVkOiBodHRwOi8vd3d3LmxlYW5iYWNrcGx5ci5jb20vdGVzdC9oNW10Lmh0bWxcbiAgICBmdW5jdGlvbiBfc3VwcG9ydE1pbWUocGx5ciwgbWltZVR5cGUpIHtcbiAgICAgICAgdmFyIG1lZGlhID0gcGx5ci5tZWRpYTtcblxuICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAvLyBDaGVjayB0eXBlXG4gICAgICAgICAgICBzd2l0Y2ggKG1pbWVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndmlkZW8vd2VibSc6ICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCd2aWRlby93ZWJtOyBjb2RlY3M9XCJ2cDgsIHZvcmJpc1wiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvL21wNCc6ICAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgndmlkZW8vbXA0OyBjb2RlY3M9XCJhdmMxLjQyRTAxRSwgbXA0YS40MC4yXCInKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAndmlkZW8vb2dnJzogICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCd2aWRlby9vZ2c7IGNvZGVjcz1cInRoZW9yYVwiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBseXIudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgLy8gQ2hlY2sgdHlwZVxuICAgICAgICAgICAgc3dpdGNoIChtaW1lVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvL21wZWcnOiAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgnYXVkaW8vbXBlZzsnKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXVkaW8vb2dnJzogICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCdhdWRpby9vZ2c7IGNvZGVjcz1cInZvcmJpc1wiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvL3dhdic6ICAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgnYXVkaW8vd2F2OyBjb2RlY3M9XCIxXCInKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB3ZSBnb3QgdGhpcyBmYXIsIHdlJ3JlIHN0dWZmZWRcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEluamVjdCBhIHNjcmlwdFxuICAgIGZ1bmN0aW9uIF9pbmplY3RTY3JpcHQoc291cmNlKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHRbc3JjPVwiJyArIHNvdXJjZSArICdcIl0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgdGFnLnNyYyA9IHNvdXJjZTtcbiAgICAgICAgdmFyIGZpcnN0U2NyaXB0VGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICAgICAgICBmaXJzdFNjcmlwdFRhZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0YWcsIGZpcnN0U2NyaXB0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBFbGVtZW50IGV4aXN0cyBpbiBhbiBhcnJheVxuICAgIGZ1bmN0aW9uIF9pbkFycmF5KGhheXN0YWNrLCBuZWVkbGUpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mICYmIChoYXlzdGFjay5pbmRleE9mKG5lZWRsZSkgIT09IC0xKTtcbiAgICB9XG5cbiAgICAvLyBSZXBsYWNlIGFsbFxuICAgIGZ1bmN0aW9uIF9yZXBsYWNlQWxsKHN0cmluZywgZmluZCwgcmVwbGFjZSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChmaW5kLnJlcGxhY2UoLyhbLiorP1xcXj0hOiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyksICdnJyksIHJlcGxhY2UpO1xuICAgIH1cblxuICAgIC8vIFdyYXAgYW4gZWxlbWVudFxuICAgIGZ1bmN0aW9uIF93cmFwKGVsZW1lbnRzLCB3cmFwcGVyKSB7XG4gICAgICAgIC8vIENvbnZlcnQgYGVsZW1lbnRzYCB0byBhbiBhcnJheSwgaWYgbmVjZXNzYXJ5LlxuICAgICAgICBpZiAoIWVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9vcHMgYmFja3dhcmRzIHRvIHByZXZlbnQgaGF2aW5nIHRvIGNsb25lIHRoZSB3cmFwcGVyIG9uIHRoZVxuICAgICAgICAvLyBmaXJzdCBlbGVtZW50IChzZWUgYGNoaWxkYCBiZWxvdykuXG4gICAgICAgIGZvciAodmFyIGkgPSBlbGVtZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIGNoaWxkICAgPSAoaSA+IDApID8gd3JhcHBlci5jbG9uZU5vZGUodHJ1ZSkgOiB3cmFwcGVyO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcblxuICAgICAgICAgICAgLy8gQ2FjaGUgdGhlIGN1cnJlbnQgcGFyZW50IGFuZCBzaWJsaW5nLlxuICAgICAgICAgICAgdmFyIHBhcmVudCAgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICB2YXIgc2libGluZyA9IGVsZW1lbnQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgIC8vIFdyYXAgdGhlIGVsZW1lbnQgKGlzIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBmcm9tIGl0cyBjdXJyZW50XG4gICAgICAgICAgICAvLyBwYXJlbnQpLlxuICAgICAgICAgICAgY2hpbGQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBlbGVtZW50IGhhZCBhIHNpYmxpbmcsIGluc2VydCB0aGUgd3JhcHBlciBiZWZvcmVcbiAgICAgICAgICAgIC8vIHRoZSBzaWJsaW5nIHRvIG1haW50YWluIHRoZSBIVE1MIHN0cnVjdHVyZTsgb3RoZXJ3aXNlLCBqdXN0XG4gICAgICAgICAgICAvLyBhcHBlbmQgaXQgdG8gdGhlIHBhcmVudC5cbiAgICAgICAgICAgIGlmIChzaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgc2libGluZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVud3JhcCBhbiBlbGVtZW50XG4gICAgLy8gaHR0cDovL3BsYWluanMuY29tL2phdmFzY3JpcHQvbWFuaXB1bGF0aW9uL3Vud3JhcC1hLWRvbS1lbGVtZW50LTM1L1xuICAgIC8qZnVuY3Rpb24gX3Vud3JhcCh3cmFwcGVyKSB7XG4gICAgICAgIC8vIEdldCB0aGUgZWxlbWVudCdzIHBhcmVudCBub2RlXG4gICAgICAgIHZhciBwYXJlbnQgPSB3cmFwcGVyLnBhcmVudE5vZGU7XG5cbiAgICAgICAgLy8gTW92ZSBhbGwgY2hpbGRyZW4gb3V0IG9mIHRoZSBlbGVtZW50XG4gICAgICAgIHdoaWxlICh3cmFwcGVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUod3JhcHBlci5maXJzdENoaWxkLCB3cmFwcGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZW1wdHkgZWxlbWVudFxuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQod3JhcHBlcik7XG4gICAgfSovXG5cbiAgICAvLyBSZW1vdmUgYW4gZWxlbWVudFxuICAgIGZ1bmN0aW9uIF9yZW1vdmUoZWxlbWVudCkge1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gUHJlcGVuZCBjaGlsZFxuICAgIGZ1bmN0aW9uIF9wcmVwZW5kQ2hpbGQocGFyZW50LCBlbGVtZW50KSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZWxlbWVudCwgcGFyZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIC8vIFNldCBhdHRyaWJ1dGVzXG4gICAgZnVuY3Rpb24gX3NldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCAoX2lzLmJvb2xlYW4oYXR0cmlidXRlc1trZXldKSAmJiBhdHRyaWJ1dGVzW2tleV0pID8gJycgOiBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5zZXJ0IGEgSFRNTCBlbGVtZW50XG4gICAgZnVuY3Rpb24gX2luc2VydEVsZW1lbnQodHlwZSwgcGFyZW50LCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyA8ZWxlbWVudD5cbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuXG4gICAgICAgIC8vIFNldCBhbGwgcGFzc2VkIGF0dHJpYnV0ZXNcbiAgICAgICAgX3NldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcyk7XG5cbiAgICAgICAgLy8gSW5qZWN0IHRoZSBuZXcgZWxlbWVudFxuICAgICAgICBfcHJlcGVuZENoaWxkKHBhcmVudCwgZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gR2V0IGEgY2xhc3NuYW1lIGZyb20gc2VsZWN0b3JcbiAgICBmdW5jdGlvbiBfZ2V0Q2xhc3NuYW1lKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5yZXBsYWNlKCcuJywgJycpO1xuICAgIH1cblxuICAgIC8vIFRvZ2dsZSBjbGFzcyBvbiBhbiBlbGVtZW50XG4gICAgZnVuY3Rpb24gX3RvZ2dsZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0W3N0YXRlID8gJ2FkZCcgOiAncmVtb3ZlJ10oY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAoJyAnICsgZWxlbWVudC5jbGFzc05hbWUgKyAnICcpLnJlcGxhY2UoL1xccysvZywgJyAnKS5yZXBsYWNlKCcgJyArIGNsYXNzTmFtZSArICcgJywgJycpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gbmFtZSArIChzdGF0ZSA/ICcgJyArIGNsYXNzTmFtZSA6ICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhcyBjbGFzcyBuYW1lXG4gICAgZnVuY3Rpb24gX2hhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgY2xhc3NOYW1lICsgJyhcXFxcc3wkKScpLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBFbGVtZW50IG1hdGNoZXMgc2VsZWN0b3JcbiAgICBmdW5jdGlvbiBfbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcCA9IEVsZW1lbnQucHJvdG90eXBlO1xuXG4gICAgICAgIHZhciBmID0gcC5tYXRjaGVzIHx8IHAud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IHAubW96TWF0Y2hlc1NlbGVjdG9yIHx8IHAubXNNYXRjaGVzU2VsZWN0b3IgfHwgZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgcmV0dXJuIFtdLmluZGV4T2YuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpLCB0aGlzKSAhPT0gLTE7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGYuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgLy8gQmluZCBhbG9uZyB3aXRoIGN1c3RvbSBoYW5kbGVyXG4gICAgZnVuY3Rpb24gX3Byb3h5TGlzdGVuZXIoZWxlbWVudCwgZXZlbnROYW1lLCB1c2VyTGlzdGVuZXIsIGRlZmF1bHRMaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xuICAgICAgICBfb24oZWxlbWVudCwgZXZlbnROYW1lLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKHVzZXJMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIHVzZXJMaXN0ZW5lci5hcHBseShlbGVtZW50LCBbZXZlbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHRMaXN0ZW5lci5hcHBseShlbGVtZW50LCBbZXZlbnRdKTtcbiAgICAgICAgfSwgdXNlQ2FwdHVyZSk7XG4gICAgfVxuXG4gICAgLy8gVG9nZ2xlIGV2ZW50IGxpc3RlbmVyXG4gICAgZnVuY3Rpb24gX3RvZ2dsZUxpc3RlbmVyKGVsZW1lbnQsIGV2ZW50cywgY2FsbGJhY2ssIHRvZ2dsZSwgdXNlQ2FwdHVyZSkge1xuICAgICAgICB2YXIgZXZlbnRMaXN0ID0gZXZlbnRzLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgLy8gV2hldGhlciB0aGUgbGlzdGVuZXIgaXMgYSBjYXB0dXJpbmcgbGlzdGVuZXIgb3Igbm90XG4gICAgICAgIC8vIERlZmF1bHQgdG8gZmFsc2VcbiAgICAgICAgaWYgKCFfaXMuYm9vbGVhbih1c2VDYXB0dXJlKSkge1xuICAgICAgICAgICAgdXNlQ2FwdHVyZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYSBub2RlbGlzdCBpcyBwYXNzZWQsIGNhbGwgaXRzZWxmIG9uIGVhY2ggbm9kZVxuICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGVsZW1lbnQubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFt4XSBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUxpc3RlbmVyKGVsZW1lbnRbeF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGEgc2luZ2xlIG5vZGUgaXMgcGFzc2VkLCBiaW5kIHRoZSBldmVudCBsaXN0ZW5lclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZWxlbWVudFt0b2dnbGUgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lciddKGV2ZW50TGlzdFtpXSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQmluZCBldmVudFxuICAgIGZ1bmN0aW9uIF9vbihlbGVtZW50LCBldmVudHMsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKSB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBfdG9nZ2xlTGlzdGVuZXIoZWxlbWVudCwgZXZlbnRzLCBjYWxsYmFjaywgdHJ1ZSwgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVbmJpbmQgZXZlbnRcbiAgICAvKmZ1bmN0aW9uIF9vZmYoZWxlbWVudCwgZXZlbnRzLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgX3RvZ2dsZUxpc3RlbmVyKGVsZW1lbnQsIGV2ZW50cywgY2FsbGJhY2ssIGZhbHNlLCB1c2VDYXB0dXJlKTtcbiAgICAgICAgfVxuICAgIH0qL1xuXG4gICAgLy8gVHJpZ2dlciBldmVudFxuICAgIGZ1bmN0aW9uIF9ldmVudChlbGVtZW50LCB0eXBlLCBidWJibGVzLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIC8vIEJhaWwgaWYgbm8gZWxlbWVudFxuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIXR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgYnViYmxlcyB0byBmYWxzZVxuICAgICAgICBpZiAoIV9pcy5ib29sZWFuKGJ1YmJsZXMpKSB7XG4gICAgICAgICAgICBidWJibGVzID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYW5kIGRpc3BhdGNoIHRoZSBldmVudFxuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQodHlwZSwge1xuICAgICAgICAgICAgYnViYmxlczogICAgYnViYmxlcyxcbiAgICAgICAgICAgIGRldGFpbDogICAgIHByb3BlcnRpZXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV2ZW50XG4gICAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuXG4gICAgLy8gVG9nZ2xlIGFyaWEtcHJlc3NlZCBzdGF0ZSBvbiBhIHRvZ2dsZSBidXR0b25cbiAgICAvLyBodHRwOi8vd3d3LnNzYmJhcnRncm91cC5jb20vYmxvZy9ob3ctbm90LXRvLW1pc3VzZS1hcmlhLXN0YXRlcy1wcm9wZXJ0aWVzLWFuZC1yb2xlc1xuICAgIGZ1bmN0aW9uIF90b2dnbGVTdGF0ZSh0YXJnZXQsIHN0YXRlKSB7XG4gICAgICAgIC8vIEJhaWwgaWYgbm8gdGFyZ2V0XG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgc3RhdGVcbiAgICAgICAgc3RhdGUgPSAoX2lzLmJvb2xlYW4oc3RhdGUpID8gc3RhdGUgOiAhdGFyZ2V0LmdldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJykpO1xuXG4gICAgICAgIC8vIFNldCB0aGUgYXR0cmlidXRlIG9uIHRhcmdldFxuICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCBzdGF0ZSk7XG5cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIC8vIEdldCBwZXJjZW50YWdlXG4gICAgZnVuY3Rpb24gX2dldFBlcmNlbnRhZ2UoY3VycmVudCwgbWF4KSB7XG4gICAgICAgIGlmIChjdXJyZW50ID09PSAwIHx8IG1heCA9PT0gMCB8fCBpc05hTihjdXJyZW50KSB8fCBpc05hTihtYXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKChjdXJyZW50IC8gbWF4KSAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICB9XG5cbiAgICAvLyBEZWVwIGV4dGVuZC9tZXJnZSBkZXN0aW5hdGlvbiBvYmplY3Qgd2l0aCBOIG1vcmUgb2JqZWN0c1xuICAgIC8vIGh0dHA6Ly9hbmRyZXdkdXBvbnQubmV0LzIwMDkvMDgvMjgvZGVlcC1leHRlbmRpbmctb2JqZWN0cy1pbi1qYXZhc2NyaXB0L1xuICAgIC8vIFJlbW92ZWQgY2FsbCB0byBhcmd1bWVudHMuY2FsbGVlICh1c2VkIGV4cGxpY2l0IGZ1bmN0aW9uIG5hbWUgaW5zdGVhZClcbiAgICBmdW5jdGlvbiBfZXh0ZW5kKCkge1xuICAgICAgICAvLyBHZXQgYXJndW1lbnRzXG4gICAgICAgIHZhciBvYmplY3RzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIC8vIEJhaWwgaWYgbm90aGluZyB0byBtZXJnZVxuICAgICAgICBpZiAoIW9iamVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gZmlyc3QgaWYgc3BlY2lmaWVkIGJ1dCBub3RoaW5nIHRvIG1lcmdlXG4gICAgICAgIGlmIChvYmplY3RzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdHNbMF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJzdCBvYmplY3QgaXMgdGhlIGRlc3RpbmF0aW9uXG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IEFycmF5LnByb3RvdHlwZS5zaGlmdC5jYWxsKG9iamVjdHMpLFxuICAgICAgICAgICAgbGVuZ3RoICAgICAgPSBvYmplY3RzLmxlbmd0aDtcblxuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIG9iamVjdHMgdG8gbWVyZ2VcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IG9iamVjdHNbaV07XG5cbiAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VbcHJvcGVydHldICYmIHNvdXJjZVtwcm9wZXJ0eV0uY29uc3RydWN0b3IgJiYgc291cmNlW3Byb3BlcnR5XS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IGRlc3RpbmF0aW9uW3Byb3BlcnR5XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgX2V4dGVuZChkZXN0aW5hdGlvbltwcm9wZXJ0eV0sIHNvdXJjZVtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHZhcmlhYmxlIHR5cGVzXG4gICAgdmFyIF9pcyA9IHtcbiAgICAgICAgb2JqZWN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZihpbnB1dCkgPT09ICdvYmplY3QnO1xuICAgICAgICB9LFxuICAgICAgICBhcnJheTogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiAodHlwZW9mKGlucHV0KSA9PT0gJ29iamVjdCcgJiYgaW5wdXQuY29uc3RydWN0b3IgPT09IEFycmF5KTtcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmICh0eXBlb2YoaW5wdXQpID09PSAnbnVtYmVyJyAmJiAhaXNOYU4oaW5wdXQgLSAwKSB8fCAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dC5jb25zdHJ1Y3RvciA9PT0gTnVtYmVyKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0cmluZzogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJvb2xlYW46IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbic7XG4gICAgICAgIH0sXG4gICAgICAgIG5vZGVMaXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIGlucHV0IGluc3RhbmNlb2YgTm9kZUxpc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGh0bWxFbGVtZW50OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIGlucHV0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgfSxcbiAgICAgICAgdW5kZWZpbmVkOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUGFyc2UgWW91VHViZSBJRCBmcm9tIHVybFxuICAgIGZ1bmN0aW9uIF9wYXJzZVlvdVR1YmVJZCh1cmwpIHtcbiAgICAgICAgdmFyIHJlZ2V4ID0gL14uKih5b3V0dS5iZVxcL3x2XFwvfHVcXC9cXHdcXC98ZW1iZWRcXC98d2F0Y2hcXD92PXxcXCZ2PSkoW14jXFwmXFw/XSopLiovO1xuICAgICAgICByZXR1cm4gKHVybC5tYXRjaChyZWdleCkpID8gUmVnRXhwLiQyIDogdXJsO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIFZpbWVvIElEIGZyb20gdXJsXG4gICAgZnVuY3Rpb24gX3BhcnNlVmltZW9JZCh1cmwpIHtcbiAgICAgICAgdmFyIHJlZ2V4ID0gL14uKih2aW1lby5jb21cXC98dmlkZW9cXC8pKFxcZCspLiovO1xuICAgICAgICByZXR1cm4gKHVybC5tYXRjaChyZWdleCkpID8gUmVnRXhwLiQyIDogdXJsO1xuICAgIH1cblxuICAgIC8vIEZ1bGxzY3JlZW4gQVBJXG4gICAgZnVuY3Rpb24gX2Z1bGxzY3JlZW4oKSB7XG4gICAgICAgIHZhciBmdWxsc2NyZWVuID0ge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRzRnVsbFNjcmVlbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNGdWxsU2NyZWVuOiBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIHJlcXVlc3RGdWxsU2NyZWVuOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgIGNhbmNlbEZ1bGxTY3JlZW46IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgZnVsbFNjcmVlbkV2ZW50TmFtZTogJycsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgICAgICAgICAgICBwcmVmaXg6ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnJvd3NlclByZWZpeGVzID0gJ3dlYmtpdCBvIG1veiBtcyBraHRtbCcuc3BsaXQoJyAnKTtcblxuICAgICAgICAvLyBDaGVjayBmb3IgbmF0aXZlIHN1cHBvcnRcbiAgICAgICAgaWYgKCFfaXMudW5kZWZpbmVkKGRvY3VtZW50LmNhbmNlbEZ1bGxTY3JlZW4pKSB7XG4gICAgICAgICAgICBmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgZnVsbHNjcmVlbiBzdXBwb3J0IGJ5IHZlbmRvciBwcmVmaXhcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGJyb3dzZXJQcmVmaXhlcy5sZW5ndGg7IGkgPCBpbDsgaSsrICkge1xuICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4ucHJlZml4ID0gYnJvd3NlclByZWZpeGVzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFfaXMudW5kZWZpbmVkKGRvY3VtZW50W2Z1bGxzY3JlZW4ucHJlZml4ICsgJ0NhbmNlbEZ1bGxTY3JlZW4nXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFfaXMudW5kZWZpbmVkKGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4pICYmIGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBNUyAod2hlbiBpc24ndCBpdD8pXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4ucHJlZml4ID0gJ21zJztcbiAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgbWV0aG9kcyB0byBkbyBzb21ldGhpbmcgdXNlZnVsXG4gICAgICAgIGlmIChmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgLy8gWWV0IGFnYWluIE1pY3Jvc29mdCBhd2Vzb21lbmVzcyxcbiAgICAgICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgcHJlZml4IGlzICdtcycsIHNvbWV0aW1lcyAnTVMnIHRvIGtlZXAgeW91IG9uIHlvdXIgdG9lc1xuICAgICAgICAgICAgZnVsbHNjcmVlbi5mdWxsU2NyZWVuRXZlbnROYW1lID0gKGZ1bGxzY3JlZW4ucHJlZml4ID09PSAnbXMnID8gJ01TRnVsbHNjcmVlbkNoYW5nZScgOiBmdWxsc2NyZWVuLnByZWZpeCArICdmdWxsc2NyZWVuY2hhbmdlJyk7XG5cbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uaXNGdWxsU2NyZWVuID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMucHJlZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJyc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgPT09IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21veic6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgPT09IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnRbdGhpcy5wcmVmaXggKyAnRnVsbHNjcmVlbkVsZW1lbnQnXSA9PT0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZnVsbHNjcmVlbi5yZXF1ZXN0RnVsbFNjcmVlbiA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnByZWZpeCA9PT0gJycpID8gZWxlbWVudC5yZXF1ZXN0RnVsbFNjcmVlbigpIDogZWxlbWVudFt0aGlzLnByZWZpeCArICh0aGlzLnByZWZpeCA9PT0gJ21zJyA/ICdSZXF1ZXN0RnVsbHNjcmVlbicgOiAnUmVxdWVzdEZ1bGxTY3JlZW4nKV0oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmdWxsc2NyZWVuLmNhbmNlbEZ1bGxTY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucHJlZml4ID09PSAnJykgPyBkb2N1bWVudC5jYW5jZWxGdWxsU2NyZWVuKCkgOiBkb2N1bWVudFt0aGlzLnByZWZpeCArICh0aGlzLnByZWZpeCA9PT0gJ21zJyA/ICdFeGl0RnVsbHNjcmVlbicgOiAnQ2FuY2VsRnVsbFNjcmVlbicpXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uZWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5wcmVmaXggPT09ICcnKSA/IGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IDogZG9jdW1lbnRbdGhpcy5wcmVmaXggKyAnRnVsbHNjcmVlbkVsZW1lbnQnXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVsbHNjcmVlbjtcbiAgICB9XG5cbiAgICAvLyBMb2NhbCBzdG9yYWdlXG4gICAgdmFyIF9zdG9yYWdlID0ge1xuICAgICAgICBzdXBwb3J0ZWQ6IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghKCdsb2NhbFN0b3JhZ2UnIGluIHdpbmRvdykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRyeSB0byB1c2UgaXQgKGl0IG1pZ2h0IGJlIGRpc2FibGVkLCBlLmcuIHVzZXIgaXMgaW4gcHJpdmF0ZS9wb3JuIG1vZGUpXG4gICAgICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzEzMVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgdGVzdCBpdGVtXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdfX190ZXN0JywgJ09LJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRlc3QgaXRlbVxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ19fX3Rlc3QnKTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdfX190ZXN0Jyk7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB2YWx1ZSBtYXRjaGVzXG4gICAgICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQgPT09ICdPSycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSkoKVxuICAgIH07XG5cbiAgICAvLyBQbGF5ZXIgaW5zdGFuY2VcbiAgICBmdW5jdGlvbiBQbHlyKG1lZGlhLCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBseXIgPSB0aGlzLFxuICAgICAgICB0aW1lcnMgPSB7fSxcbiAgICAgICAgYXBpO1xuXG4gICAgICAgIC8vIFNldCBtZWRpYVxuICAgICAgICBwbHlyLm1lZGlhID0gbWVkaWE7XG4gICAgICAgIHZhciBvcmlnaW5hbCA9IG1lZGlhLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAvLyBUcmlnZ2VyIGV2ZW50cywgd2l0aCBwbHlyIGluc3RhbmNlIHBhc3NlZFxuICAgICAgICBmdW5jdGlvbiBfdHJpZ2dlckV2ZW50KGVsZW1lbnQsIHR5cGUsIGJ1YmJsZXMsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIF9ldmVudChlbGVtZW50LCB0eXBlLCBidWJibGVzLCBfZXh0ZW5kKHt9LCBwcm9wZXJ0aWVzLCB7XG4gICAgICAgICAgICAgICAgcGx5cjogYXBpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWJ1Z2dpbmdcbiAgICAgICAgZnVuY3Rpb24gX2NvbnNvbGUodHlwZSwgYXJncykge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSkge1xuICAgICAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcblxuICAgICAgICAgICAgICAgIGlmIChfaXMuc3RyaW5nKGNvbmZpZy5sb2dQcmVmaXgpICYmIGNvbmZpZy5sb2dQcmVmaXgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MudW5zaGlmdChjb25maWcubG9nUHJlZml4KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlW3R5cGVdLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBfbG9nID0gZnVuY3Rpb24oKSB7IF9jb25zb2xlKCdsb2cnLCBhcmd1bWVudHMpIH0sXG4gICAgICAgICAgICBfd2FybiA9IGZ1bmN0aW9uKCkgeyBfY29uc29sZSgnd2FybicsIGFyZ3VtZW50cykgfTtcblxuICAgICAgICAvLyBMb2cgY29uZmlnIG9wdGlvbnNcbiAgICAgICAgX2xvZygnQ29uZmlnJywgY29uZmlnKTtcblxuICAgICAgICAvLyBHZXQgaWNvbiBVUkxcbiAgICAgICAgZnVuY3Rpb24gX2dldEljb25VcmwoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogICAgICAgIGNvbmZpZy5pY29uVXJsLFxuICAgICAgICAgICAgICAgIGFic29sdXRlOiAgIChjb25maWcuaWNvblVybC5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkgfHwgcGx5ci5icm93c2VyLmlzSUVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCdWlsZCB0aGUgZGVmYXVsdCBIVE1MXG4gICAgICAgIGZ1bmN0aW9uIF9idWlsZENvbnRyb2xzKCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGh0bWwgYXJyYXlcbiAgICAgICAgICAgIHZhciBodG1sICAgICAgICA9IFtdLFxuICAgICAgICAgICAgICAgIGljb25VcmwgICAgID0gX2dldEljb25VcmwoKSxcbiAgICAgICAgICAgICAgICBpY29uUGF0aCAgICA9ICghaWNvblVybC5hYnNvbHV0ZSA/IGljb25VcmwudXJsIDogJycpICsgJyMnICsgY29uZmlnLmljb25QcmVmaXg7XG5cbiAgICAgICAgICAgIC8vIExhcmdlciBvdmVybGFpZCBwbGF5IGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ3BsYXktbGFyZ2UnKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cInBsYXlcIiBjbGFzcz1cInBseXJfX3BsYXktbGFyZ2VcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1wbGF5XCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5wbGF5ICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGh0bWwucHVzaCgnPGRpdiBjbGFzcz1cInBseXJfX2NvbnRyb2xzXCI+Jyk7XG5cbiAgICAgICAgICAgIC8vIFJlc3RhcnQgYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncmVzdGFydCcpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicmVzdGFydFwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLXJlc3RhcnRcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnJlc3RhcnQgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmV3aW5kIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ3Jld2luZCcpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicmV3aW5kXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctcmV3aW5kXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5yZXdpbmQgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUGxheSBQYXVzZSBidXR0b25cbiAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIGJlIGEgdG9nZ2xlIGJ1dHRvbiByZWFsbHk/XG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncGxheScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicGxheVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLXBsYXlcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnBsYXkgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicGF1c2VcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1wYXVzZVwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4ucGF1c2UgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmFzdCBmb3J3YXJkIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2Zhc3QtZm9yd2FyZCcpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwiZmFzdC1mb3J3YXJkXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctZmFzdC1mb3J3YXJkXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5mb3J3YXJkICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFByb2dyZXNzXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncHJvZ3Jlc3MnKSkge1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBwcm9ncmVzc1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHNwYW4gY2xhc3M9XCJwbHlyX19wcm9ncmVzc1wiPicsXG4gICAgICAgICAgICAgICAgICAgICc8bGFiZWwgZm9yPVwic2Vla3tpZH1cIiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj5TZWVrPC9sYWJlbD4nLFxuICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGlkPVwic2Vla3tpZH1cIiBjbGFzcz1cInBseXJfX3Byb2dyZXNzLS1zZWVrXCIgdHlwZT1cInJhbmdlXCIgbWluPVwiMFwiIG1heD1cIjEwMFwiIHN0ZXA9XCIwLjFcIiB2YWx1ZT1cIjBcIiBkYXRhLXBseXI9XCJzZWVrXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxwcm9ncmVzcyBjbGFzcz1cInBseXJfX3Byb2dyZXNzLS1wbGF5ZWRcIiBtYXg9XCIxMDBcIiB2YWx1ZT1cIjBcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+PC9wcm9ncmVzcz4nLFxuICAgICAgICAgICAgICAgICAgICAnPHByb2dyZXNzIGNsYXNzPVwicGx5cl9fcHJvZ3Jlc3MtLWJ1ZmZlclwiIG1heD1cIjEwMFwiIHZhbHVlPVwiMFwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4+MDwvc3Bhbj4lICcgKyBjb25maWcuaTE4bi5idWZmZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgJzwvcHJvZ3Jlc3M+Jyk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZWVrIHRvb2x0aXBcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnRvb2x0aXBzLnNlZWspIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8c3BhbiBjbGFzcz1cInBseXJfX3Rvb2x0aXBcIj4wMDowMDwvc3Bhbj4nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDbG9zZVxuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPC9zcGFuPicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNZWRpYSBjdXJyZW50IHRpbWUgZGlzcGxheVxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2N1cnJlbnQtdGltZScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX190aW1lXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4uY3VycmVudFRpbWUgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX190aW1lLS1jdXJyZW50XCI+MDA6MDA8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWVkaWEgZHVyYXRpb24gZGlzcGxheVxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2R1cmF0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3RpbWVcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5kdXJhdGlvbiArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3RpbWUtLWR1cmF0aW9uXCI+MDA6MDA8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVG9nZ2xlIG11dGUgYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAnbXV0ZScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwibXV0ZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyBjbGFzcz1cImljb24tLW11dGVkXCI+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1tdXRlZFwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctdm9sdW1lXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi50b2dnbGVNdXRlICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFZvbHVtZSByYW5nZSBjb250cm9sXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAndm9sdW1lJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3ZvbHVtZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGZvcj1cInZvbHVtZXtpZH1cIiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4udm9sdW1lICsgJzwvbGFiZWw+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8aW5wdXQgaWQ9XCJ2b2x1bWV7aWR9XCIgY2xhc3M9XCJwbHlyX192b2x1bWUtLWlucHV0XCIgdHlwZT1cInJhbmdlXCIgbWluPVwiJyArIGNvbmZpZy52b2x1bWVNaW4gKyAnXCIgbWF4PVwiJyArIGNvbmZpZy52b2x1bWVNYXggKyAnXCIgdmFsdWU9XCInICsgY29uZmlnLnZvbHVtZSArICdcIiBkYXRhLXBseXI9XCJ2b2x1bWVcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxwcm9ncmVzcyBjbGFzcz1cInBseXJfX3ZvbHVtZS0tZGlzcGxheVwiIG1heD1cIicgKyBjb25maWcudm9sdW1lTWF4ICsgJ1wiIHZhbHVlPVwiJyArIGNvbmZpZy52b2x1bWVNaW4gKyAnXCIgcm9sZT1cInByZXNlbnRhdGlvblwiPjwvcHJvZ3Jlc3M+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGNhcHRpb25zIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2NhcHRpb25zJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJjYXB0aW9uc1wiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyBjbGFzcz1cImljb24tLWNhcHRpb25zLW9uXCI+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1jYXB0aW9ucy1vblwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCsgJy1jYXB0aW9ucy1vZmZcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnRvZ2dsZUNhcHRpb25zICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRvZ2dsZSBmdWxsc2NyZWVuIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2Z1bGxzY3JlZW4nKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cImZ1bGxzY3JlZW5cIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmcgY2xhc3M9XCJpY29uLS1leGl0LWZ1bGxzY3JlZW5cIj48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLWV4aXQtZnVsbHNjcmVlblwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctZW50ZXItZnVsbHNjcmVlblwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4udG9nZ2xlRnVsbHNjcmVlbiArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbG9zZSBldmVyeXRoaW5nXG4gICAgICAgICAgICBodG1sLnB1c2goJzwvZGl2PicpO1xuXG4gICAgICAgICAgICByZXR1cm4gaHRtbC5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGZ1bGxzY3JlZW5cbiAgICAgICAgZnVuY3Rpb24gX3NldHVwRnVsbHNjcmVlbigpIHtcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKChwbHlyLnR5cGUgIT09ICdhdWRpbycgfHwgY29uZmlnLmZ1bGxzY3JlZW4uYWxsb3dBdWRpbykgJiYgY29uZmlnLmZ1bGxzY3JlZW4uZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBuYXRpdmUgc3VwcG9ydFxuICAgICAgICAgICAgICAgIHZhciBuYXRpdmVTdXBwb3J0ID0gZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW47XG5cbiAgICAgICAgICAgICAgICBpZiAobmF0aXZlU3VwcG9ydCB8fCAoY29uZmlnLmZ1bGxzY3JlZW4uZmFsbGJhY2sgJiYgIV9pbkZyYW1lKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2coKG5hdGl2ZVN1cHBvcnQgPyAnTmF0aXZlJyA6ICdGYWxsYmFjaycpICsgJyBmdWxsc2NyZWVuIGVuYWJsZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgc3R5bGluZyBob29rXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuZnVsbHNjcmVlbi5lbmFibGVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfbG9nKCdGdWxsc2NyZWVuIG5vdCBzdXBwb3J0ZWQgYW5kIGZhbGxiYWNrIGRpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVG9nZ2xlIHN0YXRlXG4gICAgICAgICAgICAgICAgaWYgKHBseXIuYnV0dG9ucyAmJiBwbHlyLmJ1dHRvbnMuZnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLmZ1bGxzY3JlZW4sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXR1cCBmb2N1cyB0cmFwXG4gICAgICAgICAgICAgICAgX2ZvY3VzVHJhcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgY2FwdGlvbnNcbiAgICAgICAgZnVuY3Rpb24gX3NldHVwQ2FwdGlvbnMoKSB7XG4gICAgICAgICAgICAvLyBCYWlsIGlmIG5vdCBIVE1MNSB2aWRlb1xuICAgICAgICAgICAgaWYgKHBseXIudHlwZSAhPT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5qZWN0IHRoZSBjb250YWluZXJcbiAgICAgICAgICAgIGlmICghX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jYXB0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnZpZGVvQ29udGFpbmVyLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsICc8ZGl2IGNsYXNzPVwiJyArIF9nZXRDbGFzc25hbWUoY29uZmlnLnNlbGVjdG9ycy5jYXB0aW9ucykgKyAnXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERldGVybWluZSBpZiBIVE1MNSB0ZXh0VHJhY2tzIGlzIHN1cHBvcnRlZFxuICAgICAgICAgICAgcGx5ci51c2luZ1RleHRUcmFja3MgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnRleHRUcmFja3MpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnVzaW5nVGV4dFRyYWNrcyA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCBVUkwgb2YgY2FwdGlvbiBmaWxlIGlmIGV4aXN0c1xuICAgICAgICAgICAgdmFyIGNhcHRpb25TcmMgPSAnJyxcbiAgICAgICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gcGx5ci5tZWRpYS5jaGlsZE5vZGVzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2ldLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0cmFjaycpIHtcbiAgICAgICAgICAgICAgICAgICAga2luZCA9IGNoaWxkcmVuW2ldLmtpbmQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChraW5kID09PSAnY2FwdGlvbnMnIHx8IGtpbmQgPT09ICdzdWJ0aXRsZXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uU3JjID0gY2hpbGRyZW5baV0uZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVjb3JkIGlmIGNhcHRpb24gZmlsZSBleGlzdHMgb3Igbm90XG4gICAgICAgICAgICBwbHlyLmNhcHRpb25FeGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGNhcHRpb25TcmMgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5jYXB0aW9uRXhpc3RzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX2xvZygnTm8gY2FwdGlvbiB0cmFjayBmb3VuZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfbG9nKCdDYXB0aW9uIHRyYWNrIGZvdW5kOyBVUkk6ICcgKyBjYXB0aW9uU3JjKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FwdGlvbiBmaWxlIGV4aXN0cywgaGlkZSBjb250YWluZXIgZm9yIGNhcHRpb24gdGV4dFxuICAgICAgICAgICAgaWYgKCFwbHlyLmNhcHRpb25FeGlzdHMpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmVuYWJsZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUdXJuIG9mZiBuYXRpdmUgY2FwdGlvbiByZW5kZXJpbmcgdG8gYXZvaWQgZG91YmxlIGNhcHRpb25zXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBkb2Vzbid0IHNlZW0gdG8gd29yayBpbiBTYWZhcmkgNyssIHNvIHRoZSA8dHJhY2s+IGVsZW1lbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIGRvbSBiZWxvd1xuICAgICAgICAgICAgICAgIHZhciB0cmFja3MgPSBwbHlyLm1lZGlhLnRleHRUcmFja3M7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0cmFja3MubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tzW3hdLm1vZGUgPSAnaGlkZGVuJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFbmFibGUgVUlcbiAgICAgICAgICAgICAgICBfc2hvd0NhcHRpb25zKHBseXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gRGlzYWJsZSB1bnN1cHBvcnRlZCBicm93c2VycyB0aGFuIHJlcG9ydCBmYWxzZSBwb3NpdGl2ZVxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggYnVnOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDMzMTQ0XG4gICAgICAgICAgICAgICAgaWYgKChwbHlyLmJyb3dzZXIuaXNJRSAmJiBwbHlyLmJyb3dzZXIudmVyc2lvbiA+PSAxMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHBseXIuYnJvd3Nlci5pc0ZpcmVmb3ggJiYgcGx5ci5icm93c2VyLnZlcnNpb24gPj0gMzEpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVidWdnaW5nXG4gICAgICAgICAgICAgICAgICAgIF9sb2coJ0RldGVjdGVkIGJyb3dzZXIgd2l0aCBrbm93biBUZXh0VHJhY2sgaXNzdWVzIC0gdXNpbmcgbWFudWFsIGZhbGxiYWNrJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRvIGZhbHNlIHNvIHNraXBzIHRvICdtYW51YWwnIGNhcHRpb25pbmdcbiAgICAgICAgICAgICAgICAgICAgcGx5ci51c2luZ1RleHRUcmFja3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZW5kZXJpbmcgY2FwdGlvbiB0cmFja3NcbiAgICAgICAgICAgICAgICAvLyBOYXRpdmUgc3VwcG9ydCByZXF1aXJlZCAtIGh0dHA6Ly9jYW5pdXNlLmNvbS93ZWJ2dHRcbiAgICAgICAgICAgICAgICBpZiAocGx5ci51c2luZ1RleHRUcmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvZygnVGV4dFRyYWNrcyBzdXBwb3J0ZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRyYWNrcy5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW3ldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2sua2luZCA9PT0gJ2NhcHRpb25zJyB8fCB0cmFjay5raW5kID09PSAnc3VidGl0bGVzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vbih0cmFjaywgJ2N1ZWNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IGEgY3VlLCBpZiB0aGVyZSBpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ3Vlc1swXSAmJiAndGV4dCcgaW4gdGhpcy5hY3RpdmVDdWVzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbih0aGlzLmFjdGl2ZUN1ZXNbMF0uZ2V0Q3VlQXNIVE1MKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldENhcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FwdGlvbiB0cmFja3Mgbm90IG5hdGl2ZWx5IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgICAgICBfbG9nKCdUZXh0VHJhY2tzIG5vdCBzdXBwb3J0ZWQgc28gcmVuZGVyaW5nIGNhcHRpb25zIG1hbnVhbGx5Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVuZGVyIGNhcHRpb25zIGZyb20gYXJyYXkgYXQgYXBwcm9wcmlhdGUgdGltZVxuICAgICAgICAgICAgICAgICAgICBwbHlyLmN1cnJlbnRDYXB0aW9uID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY2FwdGlvbnMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FwdGlvblNyYyAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBYTUxIdHRwUmVxdWVzdCBPYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FwdGlvbnMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IHhoci5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQWNjb3JkaW5nIHRvIHdlYnZ0dCBzcGVjLCBsaW5lIHRlcm1pbmF0b3IgY29uc2lzdHMgb2Ygb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENSTEYgKFUrMDAwRCBVKzAwMEEpLCBMRiAoVSswMDBBKSBvciBDUiAoVSswMDBEKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVTZXBhcmF0b3IgPSAnXFxyXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlcS5pbmRleE9mKGxpbmVTZXBhcmF0b3IrbGluZVNlcGFyYXRvcikgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVxLmluZGV4T2YoJ1xcclxccicpICE9PSAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTZXBhcmF0b3IgPSAnXFxyJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU2VwYXJhdG9yID0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9ucyA9IHJlcS5zcGxpdChsaW5lU2VwYXJhdG9yK2xpbmVTZXBhcmF0b3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IGNhcHRpb25zLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdGlvbiA9IGNhcHRpb25zW3JdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuY2FwdGlvbnNbcl0gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcGFydHMgb2YgdGhlIGNhcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gY2FwdGlvbi5zcGxpdChsaW5lU2VwYXJhdG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5jYXNlIGNhcHRpb24gbnVtYmVycyBhcmUgYWRkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydHNbaW5kZXhdLmluZGV4T2YoXCI6XCIpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5jYXB0aW9uc1tyXSA9IFtwYXJ0c1tpbmRleF0sIHBhcnRzW2luZGV4ICsgMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZmlyc3QgZWxlbWVudCAoJ1ZUVCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmNhcHRpb25zLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2coJ1N1Y2Nlc3NmdWxseSBsb2FkZWQgdGhlIGNhcHRpb24gZmlsZSB2aWEgQUpBWCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dhcm4oY29uZmlnLmxvZ1ByZWZpeCArICdUaGVyZSB3YXMgYSBwcm9ibGVtIGxvYWRpbmcgdGhlIGNhcHRpb24gZmlsZSB2aWEgQUpBWCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oJ2dldCcsIGNhcHRpb25TcmMsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSBjdXJyZW50IGNhcHRpb25cbiAgICAgICAgZnVuY3Rpb24gX3NldENhcHRpb24oY2FwdGlvbikge1xuICAgICAgICAgICAgLyoganNoaW50IHVudXNlZDpmYWxzZSAqL1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuY2FwdGlvbnMpLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cbiAgICAgICAgICAgIC8vIEVtcHR5IHRoZSBjb250YWluZXJcbiAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBlbXB0eVxuICAgICAgICAgICAgaWYgKF9pcy51bmRlZmluZWQoY2FwdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjYXB0aW9uID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgc3BhbiBjb250ZW50XG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhjYXB0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MID0gY2FwdGlvbi50cmltKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoY2FwdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBuZXcgY2FwdGlvbiB0ZXh0XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGVudCk7XG5cbiAgICAgICAgICAgIC8vIEZvcmNlIHJlZHJhdyAoZm9yIFNhZmFyaSlcbiAgICAgICAgICAgIHZhciByZWRyYXcgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FwdGlvbnMgZnVuY3Rpb25zXG4gICAgICAgIC8vIFNlZWsgdGhlIG1hbnVhbCBjYXB0aW9uIHRpbWUgYW5kIHVwZGF0ZSBVSVxuICAgICAgICBmdW5jdGlvbiBfc2Vla01hbnVhbENhcHRpb25zKHRpbWUpIHtcbiAgICAgICAgICAgIC8vIFV0aWxpdGllcyBmb3IgY2FwdGlvbiB0aW1lIGNvZGVzXG4gICAgICAgICAgICBmdW5jdGlvbiBfdGltZWNvZGVDb21tb24odGMsIHBvcykge1xuICAgICAgICAgICAgICAgIHZhciB0Y3BhaXIgPSBbXTtcbiAgICAgICAgICAgICAgICB0Y3BhaXIgPSB0Yy5zcGxpdCgnIC0tPiAnKTtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGNwYWlyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlYlZUVCBhbGxvd3MgZm9yIGV4dHJhIG1ldGEgZGF0YSBhZnRlciB0aGUgdGltZXN0YW1wIGxpbmVcbiAgICAgICAgICAgICAgICAgICAgLy8gU28gZ2V0IHJpZCBvZiB0aGlzIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICB0Y3BhaXJbaV0gPSB0Y3BhaXJbaV0ucmVwbGFjZSgvKFxcZCs6XFxkKzpcXGQrXFwuXFxkKykuKi8sIFwiJDFcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfc3ViVGNTZWNzKHRjcGFpcltwb3NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIF90aW1lY29kZU1pbih0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGltZWNvZGVDb21tb24odGMsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gX3RpbWVjb2RlTWF4KHRjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aW1lY29kZUNvbW1vbih0YywgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBfc3ViVGNTZWNzKHRjKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRjID09PSBudWxsIHx8IHRjID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRjMSA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGMyID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzO1xuICAgICAgICAgICAgICAgICAgICB0YzEgPSB0Yy5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICB0YzIgPSB0YzFbMF0uc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IE1hdGguZmxvb3IodGMyWzBdKjYwKjYwKSArIE1hdGguZmxvb3IodGMyWzFdKjYwKSArIE1hdGguZmxvb3IodGMyWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlY29uZHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBpdCdzIG5vdCB2aWRlbywgb3Igd2UncmUgdXNpbmcgdGV4dFRyYWNrcywgYmFpbC5cbiAgICAgICAgICAgIGlmIChwbHlyLnVzaW5nVGV4dFRyYWNrcyB8fCBwbHlyLnR5cGUgIT09ICd2aWRlbycgfHwgIXBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IHN1YmNvdW50XG4gICAgICAgICAgICBwbHlyLnN1YmNvdW50ID0gMDtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgdGltZSBpcyBhIG51bWJlciwgaWYgbm90IHVzZSBjdXJyZW50VGltZVxuICAgICAgICAgICAgLy8gSUUgaGFzIGEgYnVnIHdoZXJlIGN1cnJlbnRUaW1lIGRvZXNuJ3QgZ28gdG8gMFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly90d2l0dGVyLmNvbS9TYW1fUG90dHMvc3RhdHVzLzU3MzcxNTc0NjUwNjczMTUyMVxuICAgICAgICAgICAgdGltZSA9IF9pcy5udW1iZXIodGltZSkgPyB0aW1lIDogcGx5ci5tZWRpYS5jdXJyZW50VGltZTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBzdWJzIGF2YWlsYWJsZSwgYmFpbFxuICAgICAgICAgICAgaWYgKCFwbHlyLmNhcHRpb25zW3BseXIuc3ViY291bnRdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGlsZSAoX3RpbWVjb2RlTWF4KHBseXIuY2FwdGlvbnNbcGx5ci5zdWJjb3VudF1bMF0pIDwgdGltZS50b0ZpeGVkKDEpKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5zdWJjb3VudCsrO1xuICAgICAgICAgICAgICAgIGlmIChwbHlyLnN1YmNvdW50ID4gcGx5ci5jYXB0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuc3ViY291bnQgPSBwbHlyLmNhcHRpb25zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIG5leHQgY2FwdGlvbiBpcyBpbiB0aGUgY3VycmVudCB0aW1lIHJhbmdlXG4gICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5jdXJyZW50VGltZS50b0ZpeGVkKDEpID49IF90aW1lY29kZU1pbihwbHlyLmNhcHRpb25zW3BseXIuc3ViY291bnRdWzBdKSAmJlxuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUudG9GaXhlZCgxKSA8PSBfdGltZWNvZGVNYXgocGx5ci5jYXB0aW9uc1twbHlyLnN1YmNvdW50XVswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5jdXJyZW50Q2FwdGlvbiA9IHBseXIuY2FwdGlvbnNbcGx5ci5zdWJjb3VudF1bMV07XG5cbiAgICAgICAgICAgICAgICAvLyBSZW5kZXIgdGhlIGNhcHRpb25cbiAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbihwbHlyLmN1cnJlbnRDYXB0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3NldENhcHRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc3BsYXkgY2FwdGlvbnMgY29udGFpbmVyIGFuZCBidXR0b24gKGZvciBpbml0aWFsaXphdGlvbilcbiAgICAgICAgZnVuY3Rpb24gX3Nob3dDYXB0aW9ucygpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gY2FwdGlvbiB0b2dnbGUsIGJhaWxcbiAgICAgICAgICAgIGlmICghcGx5ci5idXR0b25zLmNhcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmVuYWJsZWQsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBUcnkgdG8gbG9hZCB0aGUgdmFsdWUgZnJvbSBzdG9yYWdlXG4gICAgICAgICAgICB2YXIgYWN0aXZlID0gcGx5ci5zdG9yYWdlLmNhcHRpb25zRW5hYmxlZDtcblxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGZhbGwgYmFjayB0byB0aGUgZGVmYXVsdCBjb25maWdcbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4oYWN0aXZlKSkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGNvbmZpZy5jYXB0aW9ucy5kZWZhdWx0QWN0aXZlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5jYXB0aW9ucy5hY3RpdmUsIHRydWUpO1xuICAgICAgICAgICAgICAgIF90b2dnbGVTdGF0ZShwbHlyLmJ1dHRvbnMuY2FwdGlvbnMsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZCBhbGwgZWxlbWVudHNcbiAgICAgICAgZnVuY3Rpb24gX2dldEVsZW1lbnRzKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcGx5ci5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIGEgc2luZ2xlIGVsZW1lbnRcbiAgICAgICAgZnVuY3Rpb24gX2dldEVsZW1lbnQoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBfZ2V0RWxlbWVudHMoc2VsZWN0b3IpWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHdlJ3JlIGluIGFuIGlmcmFtZVxuICAgICAgICBmdW5jdGlvbiBfaW5GcmFtZSgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYXAgZm9jdXMgaW5zaWRlIGNvbnRhaW5lclxuICAgICAgICBmdW5jdGlvbiBfZm9jdXNUcmFwKCkge1xuICAgICAgICAgICAgdmFyIHRhYmJhYmxlcyAgID0gX2dldEVsZW1lbnRzKCdpbnB1dDpub3QoW2Rpc2FibGVkXSksIGJ1dHRvbjpub3QoW2Rpc2FibGVkXSknKSxcbiAgICAgICAgICAgICAgICBmaXJzdCAgICAgICA9IHRhYmJhYmxlc1swXSxcbiAgICAgICAgICAgICAgICBsYXN0ICAgICAgICA9IHRhYmJhYmxlc1t0YWJiYWJsZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9jaGVja0ZvY3VzKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQgaXMgVEFCXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSA5ICYmIHBseXIuaXNGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGxhc3QgJiYgIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIGZvY3VzIHRvIGZpcnN0IGVsZW1lbnQgdGhhdCBjYW4gYmUgdGFiYmVkIGlmIFNoaWZ0IGlzbid0IHVzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldCA9PT0gZmlyc3QgJiYgZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgZm9jdXMgdG8gbGFzdCBlbGVtZW50IHRoYXQgY2FuIGJlIHRhYmJlZCBpZiBTaGlmdCBpcyB1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBCaW5kIHRoZSBoYW5kbGVyXG4gICAgICAgICAgICBfb24ocGx5ci5jb250YWluZXIsICdrZXlkb3duJywgX2NoZWNrRm9jdXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGVsZW1lbnRzIHRvIEhUTUw1IG1lZGlhIChzb3VyY2UsIHRyYWNrcywgZXRjKVxuICAgICAgICBmdW5jdGlvbiBfaW5zZXJ0Q2hpbGRFbGVtZW50cyh0eXBlLCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhhdHRyaWJ1dGVzKSkge1xuICAgICAgICAgICAgICAgX2luc2VydEVsZW1lbnQodHlwZSwgcGx5ci5tZWRpYSwgeyBzcmM6IGF0dHJpYnV0ZXMgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZXMuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgX2luc2VydEVsZW1lbnQodHlwZSwgcGx5ci5tZWRpYSwgYXR0cmlidXRlc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5zZXJ0IGNvbnRyb2xzXG4gICAgICAgIGZ1bmN0aW9uIF9pbmplY3RDb250cm9scygpIHtcbiAgICAgICAgICAgIC8vIFNwcml0ZVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5sb2FkU3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGljb25VcmwgPSBfZ2V0SWNvblVybCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBsb2FkIGV4dGVybmFsIHNwcml0ZSB1c2luZyBBSkFYXG4gICAgICAgICAgICAgICAgaWYgKGljb25VcmwuYWJzb2x1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvZygnQUpBWCBsb2FkaW5nIGFic29sdXRlIFNWRyBzcHJpdGUnICsgKHBseXIuYnJvd3Nlci5pc0lFID8gJyAoZHVlIHRvIElFKScgOiAnJykpO1xuICAgICAgICAgICAgICAgICAgICBsb2FkU3ByaXRlKGljb25VcmwudXJsLCBcInNwcml0ZS1wbHlyXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2coJ1Nwcml0ZSB3aWxsIGJlIHVzZWQgYXMgZXh0ZXJuYWwgcmVzb3VyY2UgZGlyZWN0bHknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1ha2UgYSBjb3B5IG9mIHRoZSBodG1sXG4gICAgICAgICAgICB2YXIgaHRtbCA9IGNvbmZpZy5odG1sO1xuXG4gICAgICAgICAgICAvLyBJbnNlcnQgY3VzdG9tIHZpZGVvIGNvbnRyb2xzXG4gICAgICAgICAgICBfbG9nKCdJbmplY3RpbmcgY3VzdG9tIGNvbnRyb2xzJyk7XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNvbnRyb2xzIGFyZSBzcGVjaWZpZWQsIGNyZWF0ZSBkZWZhdWx0XG4gICAgICAgICAgICBpZiAoIWh0bWwpIHtcbiAgICAgICAgICAgICAgICBodG1sID0gX2J1aWxkQ29udHJvbHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVwbGFjZSBzZWVrIHRpbWUgaW5zdGFuY2VzXG4gICAgICAgICAgICBodG1sID0gX3JlcGxhY2VBbGwoaHRtbCwgJ3tzZWVrdGltZX0nLCBjb25maWcuc2Vla1RpbWUpO1xuXG4gICAgICAgICAgICAvLyBSZXBsYWNlIGFsbCBpZCByZWZlcmVuY2VzIHdpdGggcmFuZG9tIG51bWJlcnNcbiAgICAgICAgICAgIGh0bWwgPSBfcmVwbGFjZUFsbChodG1sLCAne2lkfScsIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAwMCkpKTtcblxuICAgICAgICAgICAgLy8gQ29udHJvbHMgY29udGFpbmVyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0O1xuXG4gICAgICAgICAgICAvLyBJbmplY3QgdG8gY3VzdG9tIGxvY2F0aW9uXG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLmNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5zZWxlY3RvcnMuY29udHJvbHMuY29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5qZWN0IGludG8gdGhlIGNvbnRhaW5lciBieSBkZWZhdWx0XG4gICAgICAgICAgICBpZiAoIV9pcy5odG1sRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gcGx5ci5jb250YWluZXJcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5qZWN0IGNvbnRyb2xzIEhUTUxcbiAgICAgICAgICAgIHRhcmdldC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGh0bWwpO1xuXG4gICAgICAgICAgICAvLyBTZXR1cCB0b29sdGlwc1xuICAgICAgICAgICAgaWYgKGNvbmZpZy50b29sdGlwcy5jb250cm9scykge1xuICAgICAgICAgICAgICAgIHZhciBsYWJlbHMgPSBfZ2V0RWxlbWVudHMoW2NvbmZpZy5zZWxlY3RvcnMuY29udHJvbHMud3JhcHBlciwgJyAnLCBjb25maWcuc2VsZWN0b3JzLmxhYmVscywgJyAuJywgY29uZmlnLmNsYXNzZXMuaGlkZGVuXS5qb2luKCcnKSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gbGFiZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IGxhYmVsc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MobGFiZWwsIGNvbmZpZy5jbGFzc2VzLmhpZGRlbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MobGFiZWwsIGNvbmZpZy5jbGFzc2VzLnRvb2x0aXAsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmQgdGhlIFVJIGNvbnRyb2xzIGFuZCBzdG9yZSByZWZlcmVuY2VzXG4gICAgICAgIGZ1bmN0aW9uIF9maW5kRWxlbWVudHMoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBseXIuY29udHJvbHMgICAgICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jb250cm9scy53cmFwcGVyKTtcblxuICAgICAgICAgICAgICAgIC8vIEJ1dHRvbnNcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuc2VlayAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5zZWVrKTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMucGxheSAgICAgICAgICAgICA9IF9nZXRFbGVtZW50cyhjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucGxheSk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnBhdXNlICAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucGF1c2UpO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5yZXN0YXJ0ICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLnJlc3RhcnQpO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5yZXdpbmQgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLnJld2luZCk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLmZvcndhcmQgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMuZm9yd2FyZCk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLmZ1bGxzY3JlZW4gICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMuZnVsbHNjcmVlbik7XG5cbiAgICAgICAgICAgICAgICAvLyBJbnB1dHNcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMubXV0ZSAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5tdXRlKTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuY2FwdGlvbnMgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5jYXB0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAvLyBQcm9ncmVzc1xuICAgICAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MgPSB7fTtcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLmNvbnRhaW5lciAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMucHJvZ3Jlc3MuY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIFByb2dyZXNzIC0gQnVmZmVyaW5nXG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5idWZmZXIgICAgICAgICAgPSB7fTtcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLmJ1ZmZlci5iYXIgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMucHJvZ3Jlc3MuYnVmZmVyKTtcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLmJ1ZmZlci50ZXh0ICAgICA9IHBseXIucHJvZ3Jlc3MuYnVmZmVyLmJhciAmJiBwbHlyLnByb2dyZXNzLmJ1ZmZlci5iYXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NwYW4nKVswXTtcblxuICAgICAgICAgICAgICAgIC8vIFByb2dyZXNzIC0gUGxheWVkXG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5wbGF5ZWQgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLnByb2dyZXNzLnBsYXllZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZWVrIHRvb2x0aXBcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLnRvb2x0aXAgICAgICAgICA9IHBseXIucHJvZ3Jlc3MuY29udGFpbmVyICYmIHBseXIucHJvZ3Jlc3MuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLmNsYXNzZXMudG9vbHRpcCk7XG5cbiAgICAgICAgICAgICAgICAvLyBWb2x1bWVcbiAgICAgICAgICAgICAgICBwbHlyLnZvbHVtZSAgICAgICAgICAgICAgICAgICA9IHt9O1xuICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmlucHV0ICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy52b2x1bWUuaW5wdXQpO1xuICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmRpc3BsYXkgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy52b2x1bWUuZGlzcGxheSk7XG5cbiAgICAgICAgICAgICAgICAvLyBUaW1pbmdcbiAgICAgICAgICAgICAgICBwbHlyLmR1cmF0aW9uICAgICAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIHBseXIuY3VycmVudFRpbWUgICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgcGx5ci5zZWVrVGltZSAgICAgICAgICAgICAgICAgPSBfZ2V0RWxlbWVudHMoY29uZmlnLnNlbGVjdG9ycy5zZWVrVGltZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICBfd2FybignSXQgbG9va3MgbGlrZSB0aGVyZSBpcyBhIHByb2JsZW0gd2l0aCB5b3VyIGNvbnRyb2xzIEhUTUwnKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgbmF0aXZlIHZpZGVvIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX3RvZ2dsZU5hdGl2ZUNvbnRyb2xzKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG9nZ2xlIHN0eWxlIGhvb2tcbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZVN0eWxlSG9vaygpIHtcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLnNlbGVjdG9ycy5jb250YWluZXIucmVwbGFjZSgnLicsICcnKSwgcGx5ci5zdXBwb3J0ZWQuZnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUb2dnbGUgbmF0aXZlIGNvbnRyb2xzXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVOYXRpdmVDb250cm9scyh0b2dnbGUpIHtcbiAgICAgICAgICAgIGlmICh0b2dnbGUgJiYgX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ2NvbnRyb2xzJywgJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnY29udHJvbHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGFyaWEgYXR0cmlidXRlIGZvciBwbGF5IGFuZCBpZnJhbWUgdGl0bGVcbiAgICAgICAgZnVuY3Rpb24gX3NldFRpdGxlKGlmcmFtZSkge1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgY3VycmVudCB0ZXh0XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBjb25maWcuaTE4bi5wbGF5O1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGEgbWVkaWEgdGl0bGUgc2V0LCB1c2UgdGhhdCBmb3IgdGhlIGxhYmVsXG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhjb25maWcudGl0bGUpICYmIGNvbmZpZy50aXRsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsYWJlbCArPSAnLCAnICsgY29uZmlnLnRpdGxlO1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0IGNvbnRhaW5lciBsYWJlbFxuICAgICAgICAgICAgICAgIHBseXIuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGNvbmZpZy50aXRsZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBwbGF5IGJ1dHRvbiwgc2V0IGxhYmVsXG4gICAgICAgICAgICBpZiAocGx5ci5zdXBwb3J0ZWQuZnVsbCAmJiBwbHlyLmJ1dHRvbnMucGxheSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBwbHlyLmJ1dHRvbnMucGxheS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMucGxheVtpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgaWZyYW1lIHRpdGxlXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xMjRcbiAgICAgICAgICAgIGlmIChfaXMuaHRtbEVsZW1lbnQoaWZyYW1lKSkge1xuICAgICAgICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgY29uZmlnLmkxOG4uZnJhbWVUaXRsZS5yZXBsYWNlKCd7dGl0bGV9JywgY29uZmlnLnRpdGxlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBsb2NhbFN0b3JhZ2VcbiAgICAgICAgZnVuY3Rpb24gX3NldHVwU3RvcmFnZSgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICBwbHlyLnN0b3JhZ2UgPSB7fTtcblxuICAgICAgICAgICAgLy8gQmFpbCBpZiB3ZSBkb24ndCBoYXZlIGxvY2FsU3RvcmFnZSBzdXBwb3J0IG9yIGl0J3MgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmICghX3N0b3JhZ2Uuc3VwcG9ydGVkIHx8ICFjb25maWcuc3RvcmFnZS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBvbGQgdm9sdW1lXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xNzFcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgncGx5ci12b2x1bWUnKTtcblxuICAgICAgICAgICAgLy8gbG9hZCB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGtleVxuICAgICAgICAgICAgdmFsdWUgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oY29uZmlnLnN0b3JhZ2Uua2V5KTtcblxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIEtleSB3YXNuJ3Qgc2V0IChvciBoYWQgYmVlbiBjbGVhcmVkKSwgbW92ZSBhbG9uZ1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL15cXGQrKFxcLlxcZCspPyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdmFsdWUgaXMgYSBudW1iZXIsIGl0J3MgcHJvYmFibHkgdm9sdW1lIGZyb20gYW4gb2xkZXJcbiAgICAgICAgICAgICAgICAvLyB2ZXJzaW9uIG9mIHBseXIuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9wdWxsLzMxM1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUga2V5IHRvIGJlIEpTT05cbiAgICAgICAgICAgICAgICBfdXBkYXRlU3RvcmFnZSh7dm9sdW1lOiBwYXJzZUZsb2F0KHZhbHVlKX0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBBc3N1bWUgaXQncyBKU09OIGZyb20gdGhpcyBvciBhIGxhdGVyIHZlcnNpb24gb2YgcGx5clxuICAgICAgICAgICAgICAgIHBseXIuc3RvcmFnZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2F2ZSBhIHZhbHVlIGJhY2sgdG8gbG9jYWwgc3RvcmFnZVxuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlU3RvcmFnZSh2YWx1ZSkge1xuICAgICAgICAgICAgLy8gQmFpbCBpZiB3ZSBkb24ndCBoYXZlIGxvY2FsU3RvcmFnZSBzdXBwb3J0IG9yIGl0J3MgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmICghX3N0b3JhZ2Uuc3VwcG9ydGVkIHx8ICFjb25maWcuc3RvcmFnZS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHdvcmtpbmcgY29weSBvZiB0aGUgdmFsdWVzXG4gICAgICAgICAgICBfZXh0ZW5kKHBseXIuc3RvcmFnZSwgdmFsdWUpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgc3RvcmFnZVxuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGNvbmZpZy5zdG9yYWdlLmtleSwgSlNPTi5zdHJpbmdpZnkocGx5ci5zdG9yYWdlKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBtZWRpYVxuICAgICAgICBmdW5jdGlvbiBfc2V0dXBNZWRpYSgpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gbWVkaWEsIGJhaWxcbiAgICAgICAgICAgIGlmICghcGx5ci5tZWRpYSkge1xuICAgICAgICAgICAgICAgIF93YXJuKCdObyBtZWRpYSBlbGVtZW50IGZvdW5kIScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgdHlwZSBjbGFzc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMudHlwZS5yZXBsYWNlKCd7MH0nLCBwbHlyLnR5cGUpLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCB2aWRlbyBjbGFzcyBmb3IgZW1iZWRzXG4gICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHJlcXVpcmUgY2hhbmdlcyBpZiBhdWRpbyBlbWJlZHMgYXJlIGFkZGVkXG4gICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnR5cGUucmVwbGFjZSgnezB9JywgJ3ZpZGVvJyksIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gYXV0b3BsYXkgYXR0cmlidXRlLCBhc3N1bWUgdGhlIHZpZGVvIGlzIHN0b3BwZWQgYW5kIGFkZCBzdGF0ZSBjbGFzc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuc3RvcHBlZCwgY29uZmlnLmF1dG9wbGF5KTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCBpT1MgY2xhc3NcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5vbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuaXNJb3MsIHBseXIuYnJvd3Nlci5pc0lvcyk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdG91Y2ggY2xhc3NcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmlzVG91Y2gsIHBseXIuYnJvd3Nlci5pc1RvdWNoKTtcblxuICAgICAgICAgICAgICAgIC8vIEluamVjdCB0aGUgcGxheWVyIHdyYXBwZXJcbiAgICAgICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgd3JhcHBlciBkaXZcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY29uZmlnLmNsYXNzZXMudmlkZW9XcmFwcGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXcmFwIHRoZSB2aWRlbyBpbiBhIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICBfd3JhcChwbHlyLm1lZGlhLCB3cmFwcGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWNoZSB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIHBseXIudmlkZW9Db250YWluZXIgPSB3cmFwcGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW1iZWRzXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmVtYmVkLCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgX3NldHVwRW1iZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIFlvdVR1YmUvVmltZW9cbiAgICAgICAgZnVuY3Rpb24gX3NldHVwRW1iZWQoKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgICAgICAgbWVkaWFJZCxcbiAgICAgICAgICAgICAgICBpZCA9IHBseXIudHlwZSArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAwMCkpO1xuXG4gICAgICAgICAgICAvLyBQYXJzZSBJRHMgZnJvbSBVUkxzIGlmIHN1cHBsaWVkXG4gICAgICAgICAgICBzd2l0Y2ggKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICBtZWRpYUlkID0gX3BhcnNlWW91VHViZUlkKHBseXIuZW1iZWRJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICBtZWRpYUlkID0gX3BhcnNlVmltZW9JZChwbHlyLmVtYmVkSWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhSWQgPSBwbHlyLmVtYmVkSWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBvbGQgY29udGFpbmVyc1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lcnMgPSBfZ2V0RWxlbWVudHMoJ1tpZF49XCInICsgcGx5ci50eXBlICsgJy1cIl0nKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgX3JlbW92ZShjb250YWluZXJzW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWRkIGVtYmVkIGNsYXNzIGZvciByZXNwb25zaXZlXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5tZWRpYSwgY29uZmlnLmNsYXNzZXMudmlkZW9XcmFwcGVyLCB0cnVlKTtcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLm1lZGlhLCBjb25maWcuY2xhc3Nlcy5lbWJlZFdyYXBwZXIsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAneW91dHViZScpIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIFlvdVR1YmUgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0IElEXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXR1cCBBUElcbiAgICAgICAgICAgICAgICBpZiAoX2lzLm9iamVjdCh3aW5kb3cuWVQpKSB7XG4gICAgICAgICAgICAgICAgICAgIF95b3VUdWJlUmVhZHkobWVkaWFJZCwgY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBMb2FkIHRoZSBBUElcbiAgICAgICAgICAgICAgICAgICAgX2luamVjdFNjcmlwdChjb25maWcudXJscy55b3V0dWJlLmFwaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgY2FsbGJhY2sgZm9yIHRoZSBBUElcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9uWW91VHViZVJlYWR5Q2FsbGJhY2tzID0gd2luZG93Lm9uWW91VHViZVJlYWR5Q2FsbGJhY2tzIHx8IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byBxdWV1ZVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25Zb3VUdWJlUmVhZHlDYWxsYmFja3MucHVzaChmdW5jdGlvbigpIHsgX3lvdVR1YmVSZWFkeShtZWRpYUlkLCBjb250YWluZXIpOyB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgY2FsbGJhY2sgdG8gcHJvY2VzcyBxdWV1ZVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25Zb3VUdWJlUmVhZHlDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykgeyBjYWxsYmFjaygpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBseXIudHlwZSA9PT0gJ3ZpbWVvJykge1xuICAgICAgICAgICAgICAgIC8vIFZpbWVvIG5lZWRzIGFuIGV4dHJhIGRpdiB0byBoaWRlIGNvbnRyb2xzIG9uIGRlc2t0b3AgKHdoaWNoIGhhcyBmdWxsIHN1cHBvcnQpXG4gICAgICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHBseXIubWVkaWE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IElEXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBMb2FkIHRoZSBBUEkgaWYgbm90IGFscmVhZHlcbiAgICAgICAgICAgICAgICBpZiAoIV9pcy5vYmplY3Qod2luZG93LlZpbWVvKSkge1xuICAgICAgICAgICAgICAgICAgICBfaW5qZWN0U2NyaXB0KGNvbmZpZy51cmxzLnZpbWVvLmFwaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgZnJhZ2Fsb29wIGxvYWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpbWVvVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzLm9iamVjdCh3aW5kb3cuVmltZW8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodmltZW9UaW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZpbWVvUmVhZHkobWVkaWFJZCwgY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF92aW1lb1JlYWR5KG1lZGlhSWQsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwbHlyLnR5cGUgPT09ICdzb3VuZGNsb3VkJykge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEN1cnJlbnRseSB1bnN1cHBvcnRlZCBhbmQgdW5kb2N1bWVudGVkXG4gICAgICAgICAgICAgICAgLy8gSW5qZWN0IHRoZSBpZnJhbWVcbiAgICAgICAgICAgICAgICB2YXIgc291bmRDbG91ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV2F0Y2ggZm9yIGlmcmFtZSBsb2FkXG4gICAgICAgICAgICAgICAgc291bmRDbG91ZC5sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfb24oc291bmRDbG91ZCwgJ2xvYWQnLCBmdW5jdGlvbigpIHsgc291bmRDbG91ZC5sb2FkZWQgPSB0cnVlOyB9KTtcblxuICAgICAgICAgICAgICAgIF9zZXRBdHRyaWJ1dGVzKHNvdW5kQ2xvdWQsIHtcbiAgICAgICAgICAgICAgICAgICAgJ3NyYyc6ICAnaHR0cHM6Ly93LnNvdW5kY2xvdWQuY29tL3BsYXllci8/dXJsPWh0dHBzOi8vYXBpLnNvdW5kY2xvdWQuY29tL3RyYWNrcy8nICsgbWVkaWFJZCxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogICBpZFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNvdW5kQ2xvdWQpO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIExvYWQgdGhlIEFQSSBpZiBub3QgYWxyZWFkeVxuICAgICAgICAgICAgICAgIGlmICghd2luZG93LlNDKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pbmplY3RTY3JpcHQoY29uZmlnLnVybHMuc291bmRjbG91ZC5hcGkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFdhaXQgZm9yIFNDIGxvYWRcbiAgICAgICAgICAgICAgICB2YXIgc291bmRDbG91ZFRpbWVyID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LlNDICYmIHNvdW5kQ2xvdWQubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChzb3VuZENsb3VkVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NvdW5kY2xvdWRSZWFkeS5jYWxsKHNvdW5kQ2xvdWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2hlbiBlbWJlZHMgYXJlIHJlYWR5XG4gICAgICAgIGZ1bmN0aW9uIF9lbWJlZFJlYWR5KCkge1xuICAgICAgICAgICAgLy8gU2V0dXAgdGhlIFVJIGFuZCBjYWxsIHJlYWR5IGlmIGZ1bGwgc3VwcG9ydFxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICBfc2V0dXBJbnRlcmZhY2UoKTtcbiAgICAgICAgICAgICAgICBfcmVhZHkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRpdGxlXG4gICAgICAgICAgICBfc2V0VGl0bGUoX2dldEVsZW1lbnQoJ2lmcmFtZScpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBZb3VUdWJlIEFQSSByZWFkeVxuICAgICAgICBmdW5jdGlvbiBfeW91VHViZVJlYWR5KHZpZGVvSWQsIGNvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gU2V0dXAgaW5zdGFuY2VcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvaWZyYW1lX2FwaV9yZWZlcmVuY2VcbiAgICAgICAgICAgIHBseXIuZW1iZWQgPSBuZXcgd2luZG93LllULlBsYXllcihjb250YWluZXIuaWQsIHtcbiAgICAgICAgICAgICAgICB2aWRlb0lkOiB2aWRlb0lkLFxuICAgICAgICAgICAgICAgIHBsYXllclZhcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6ICAgICAgIChjb25maWcuYXV0b3BsYXkgPyAxIDogMCksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzOiAgICAgICAocGx5ci5zdXBwb3J0ZWQuZnVsbCA/IDAgOiAxKSxcbiAgICAgICAgICAgICAgICAgICAgcmVsOiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHNob3dpbmZvOiAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICBpdl9sb2FkX3BvbGljeTogMyxcbiAgICAgICAgICAgICAgICAgICAgY2NfbG9hZF9wb2xpY3k6IChjb25maWcuY2FwdGlvbnMuZGVmYXVsdEFjdGl2ZSA/IDEgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgY2NfbGFuZ19wcmVmOiAgICdlbicsXG4gICAgICAgICAgICAgICAgICAgIHdtb2RlOiAgICAgICAgICAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgICAgICAgICBtb2Rlc3RicmFuZGluZzogMSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWtiOiAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbjogICAgICAgICAnKicgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9nZGF0YS1pc3N1ZXMvaXNzdWVzL2RldGFpbD9pZD01Nzg4I2M0NVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICdvbkVycm9yJzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsICdlcnJvcicsIHRydWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAgIGV2ZW50LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWQ6ICBldmVudC50YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnb25SZWFkeSc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGZhdXggSFRNTDUgQVBJIHVzaW5nIHRoZSBZb3VUdWJlIEFQSVxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UucGxheVZpZGVvKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UucGF1c2VWaWRlbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5zdG9wVmlkZW8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5kdXJhdGlvbiA9IGluc3RhbmNlLmdldER1cmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEubXV0ZWQgPSBpbnN0YW5jZS5pc011dGVkKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnRpdGxlID0gaW5zdGFuY2UuZ2V0VmlkZW9EYXRhKCkudGl0bGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgdGFiaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBVSVxuICAgICAgICAgICAgICAgICAgICAgICAgX2VtYmVkUmVhZHkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZHVyYXRpb25jaGFuZ2UnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgdGltZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5idWZmZXJpbmcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXR1cCBidWZmZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVycy5idWZmZXJpbmcgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGxvYWRlZCAlIGZyb20gWW91VHViZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYnVmZmVyZWQgPSBpbnN0YW5jZS5nZXRWaWRlb0xvYWRlZEZyYWN0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHByb2dyZXNzIG9ubHkgd2hlbiB3ZSBhY3R1YWxseSBidWZmZXIgc29tZXRoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIubWVkaWEubGFzdEJ1ZmZlcmVkID09PSBudWxsIHx8IHBseXIubWVkaWEubGFzdEJ1ZmZlcmVkIDwgcGx5ci5tZWRpYS5idWZmZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwcm9ncmVzcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBsYXN0IGJ1ZmZlciBwb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEubGFzdEJ1ZmZlcmVkID0gcGx5ci5tZWRpYS5idWZmZXJlZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhaWwgaWYgd2UncmUgYXQgMTAwJVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLmJ1ZmZlcmVkID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5idWZmZXJpbmcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnb25TdGF0ZUNoYW5nZSc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRpbWVyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcnMucGxheWluZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0xICAgVW5zdGFydGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwICAgIEVuZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAxICAgIFBsYXlpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIgICAgUGF1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAzICAgIEJ1ZmZlcmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNSAgICBWaWRlbyBjdWVkXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZW5kZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2Ugd2VyZSBzZWVraW5nLCBmaXJlIHNlZWtlZCBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5zZWVraW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdzZWVrZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2Vla2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXlpbmcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQb2xsIHRvIGdldCBwbGF5YmFjayBwcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lcnMucGxheWluZyA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gaW5zdGFuY2UuZ2V0Q3VycmVudFRpbWUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZHVyYXRpb24gYWdhaW4gZHVlIHRvIFlvdVR1YmUgYnVnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzM3NFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2dkYXRhLWlzc3Vlcy9pc3N1ZXMvZGV0YWlsP2lkPTg2OTBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIubWVkaWEuZHVyYXRpb24gIT09IGluc3RhbmNlLmdldER1cmF0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuZHVyYXRpb24gPSBpbnN0YW5jZS5nZXREdXJhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZHVyYXRpb25jaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BhdXNlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIuY29udGFpbmVyLCAnc3RhdGVjaGFuZ2UnLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGV2ZW50LmRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWaW1lbyByZWFkeVxuICAgICAgICBmdW5jdGlvbiBfdmltZW9SZWFkeShtZWRpYUlkLCBjb250YWluZXIpIHtcbiAgICAgICAgICAgIC8vIFNldHVwIGluc3RhbmNlXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdmltZW8vcGxheWVyLmpzXG4gICAgICAgICAgICBwbHlyLmVtYmVkID0gbmV3IHdpbmRvdy5WaW1lby5QbGF5ZXIoY29udGFpbmVyLCB7XG4gICAgICAgICAgICAgICAgaWQ6ICAgICAgICAgcGFyc2VJbnQobWVkaWFJZCksXG4gICAgICAgICAgICAgICAgbG9vcDogICAgICAgY29uZmlnLmxvb3AsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6ICAgY29uZmlnLmF1dG9wbGF5LFxuICAgICAgICAgICAgICAgIGJ5bGluZTogICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHBvcnRyYWl0OiAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAgICAgIGZhbHNlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgZmF1eCBIVE1MNSBBUEkgdXNpbmcgdGhlIFZpbWVvIEFQSVxuICAgICAgICAgICAgcGx5ci5tZWRpYS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wbGF5KCk7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwbHlyLm1lZGlhLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnN0b3AoKTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gMDtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIFVJXG4gICAgICAgICAgICBfZW1iZWRSZWFkeSgpO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLmdldEN1cnJlbnRUaW1lKCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLmdldER1cmF0aW9uKCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuZHVyYXRpb24gPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2R1cmF0aW9uY2hhbmdlJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVE9ETzogQ2FwdGlvbnNcbiAgICAgICAgICAgIC8qaWYgKGNvbmZpZy5jYXB0aW9ucy5kZWZhdWx0QWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5lbmFibGVUZXh0VHJhY2soJ2VuJyk7XG4gICAgICAgICAgICB9Ki9cblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbignbG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gRml4IGtleWJvYXJkIGZvY3VzIGlzc3Vlc1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzMxN1xuICAgICAgICAgICAgICAgIGlmIChfaXMuaHRtbEVsZW1lbnQocGx5ci5lbWJlZC5lbGVtZW50KSAmJiBwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ3BsYXknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXknKTtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5aW5nJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbigncGF1c2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGF1c2UnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLm9uKCd0aW1ldXBkYXRlJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2Vla2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSBkYXRhLnNlY29uZHM7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndGltZXVwZGF0ZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ3Byb2dyZXNzJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYnVmZmVyZWQgPSBkYXRhLnBlcmNlbnQ7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncHJvZ3Jlc3MnKTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChkYXRhLnBlcmNlbnQpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbignc2Vla2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnc2Vla2VkJyk7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ2VuZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2VuZGVkJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvdW5kY2xvdWQgcmVhZHlcbiAgICAgICAgZnVuY3Rpb24gX3NvdW5kY2xvdWRSZWFkeSgpIHtcbiAgICAgICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgICAgIHBseXIuZW1iZWQgPSB3aW5kb3cuU0MuV2lkZ2V0KHRoaXMpO1xuXG4gICAgICAgICAgICAvLyBTZXR1cCBvbiByZWFkeVxuICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLlJFQURZLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBmYXV4IEhUTUw1IEFQSSB1c2luZyB0aGUgU291bmRjbG91ZCBBUElcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQucGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2Vla1RvKDApO1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSAwO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5nZXREdXJhdGlvbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmR1cmF0aW9uID0gdmFsdWUvMTAwMDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgVUlcbiAgICAgICAgICAgICAgICAgICAgX2VtYmVkUmVhZHkoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZ2V0UG9zaXRpb24oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmJpbmQod2luZG93LlNDLldpZGdldC5FdmVudHMuUExBWSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXknKTtcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheWluZycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLlBBVVNFLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwYXVzZScpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLlBMQVlfUFJPR1JFU1MsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSBkYXRhLmN1cnJlbnRQb3NpdGlvbi8xMDAwO1xuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmJpbmQod2luZG93LlNDLldpZGdldC5FdmVudHMuTE9BRF9QUk9HUkVTUywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmJ1ZmZlcmVkID0gZGF0YS5sb2FkUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3Byb2dyZXNzJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGRhdGEubG9hZFByb2dyZXNzKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLkZJTklTSCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZW5kZWQnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGxheSBtZWRpYVxuICAgICAgICBmdW5jdGlvbiBfcGxheSgpIHtcbiAgICAgICAgICAgIGlmICgncGxheScgaW4gcGx5ci5tZWRpYSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGF1c2UgbWVkaWFcbiAgICAgICAgZnVuY3Rpb24gX3BhdXNlKCkge1xuICAgICAgICAgICAgaWYgKCdwYXVzZScgaW4gcGx5ci5tZWRpYSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBwbGF5YmFja1xuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlUGxheSh0b2dnbGUpIHtcbiAgICAgICAgICAgIC8vIFRydWUgdG9nZ2xlXG4gICAgICAgICAgICBpZiAoIV9pcy5ib29sZWFuKHRvZ2dsZSkpIHtcbiAgICAgICAgICAgICAgICB0b2dnbGUgPSBwbHlyLm1lZGlhLnBhdXNlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRvZ2dsZSkge1xuICAgICAgICAgICAgICAgIF9wbGF5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9wYXVzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdG9nZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV3aW5kXG4gICAgICAgIGZ1bmN0aW9uIF9yZXdpbmQoc2Vla1RpbWUpIHtcbiAgICAgICAgICAgIC8vIFVzZSBkZWZhdWx0IGlmIG5lZWRlZFxuICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKHNlZWtUaW1lKSkge1xuICAgICAgICAgICAgICAgIHNlZWtUaW1lID0gY29uZmlnLnNlZWtUaW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3NlZWsocGx5ci5tZWRpYS5jdXJyZW50VGltZSAtIHNlZWtUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZhc3QgZm9yd2FyZFxuICAgICAgICBmdW5jdGlvbiBfZm9yd2FyZChzZWVrVGltZSkge1xuICAgICAgICAgICAgLy8gVXNlIGRlZmF1bHQgaWYgbmVlZGVkXG4gICAgICAgICAgICBpZiAoIV9pcy5udW1iZXIoc2Vla1RpbWUpKSB7XG4gICAgICAgICAgICAgICAgc2Vla1RpbWUgPSBjb25maWcuc2Vla1RpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfc2VlayhwbHlyLm1lZGlhLmN1cnJlbnRUaW1lICsgc2Vla1RpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VlayB0byB0aW1lXG4gICAgICAgIC8vIFRoZSBpbnB1dCBwYXJhbWV0ZXIgY2FuIGJlIGFuIGV2ZW50IG9yIGEgbnVtYmVyXG4gICAgICAgIGZ1bmN0aW9uIF9zZWVrKGlucHV0KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0VGltZSAgPSAwLFxuICAgICAgICAgICAgICAgIHBhdXNlZCAgICAgID0gcGx5ci5tZWRpYS5wYXVzZWQsXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gICAgPSBfZ2V0RHVyYXRpb24oKTtcblxuICAgICAgICAgICAgaWYgKF9pcy5udW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0VGltZSA9IGlucHV0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfaXMub2JqZWN0KGlucHV0KSAmJiBfaW5BcnJheShbJ2lucHV0JywgJ2NoYW5nZSddLCBpbnB1dC50eXBlKSkge1xuICAgICAgICAgICAgICAgIC8vIEl0J3MgdGhlIHNlZWsgc2xpZGVyXG4gICAgICAgICAgICAgICAgLy8gU2VlayB0byB0aGUgc2VsZWN0ZWQgdGltZVxuICAgICAgICAgICAgICAgIHRhcmdldFRpbWUgPSAoKGlucHV0LnRhcmdldC52YWx1ZSAvIGlucHV0LnRhcmdldC5tYXgpICogZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3JtYWxpc2UgdGFyZ2V0VGltZVxuICAgICAgICAgICAgaWYgKHRhcmdldFRpbWUgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0VGltZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFRpbWUgPiBkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRhcmdldFRpbWUgPSBkdXJhdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHNlZWsgcmFuZ2UgYW5kIHByb2dyZXNzXG4gICAgICAgICAgICBfdXBkYXRlU2Vla0Rpc3BsYXkodGFyZ2V0VGltZSk7XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgICAgICAvLyBUcnkvY2F0Y2ggaW5jYXNlIHRoZSBtZWRpYSBpc24ndCBzZXQgYW5kIHdlJ3JlIGNhbGxpbmcgc2VlaygpIGZyb20gc291cmNlKCkgYW5kIElFIG1vYW5zXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSB0YXJnZXRUaW1lLnRvRml4ZWQoNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaChlKSB7fVxuXG4gICAgICAgICAgICAvLyBFbWJlZHNcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZWVrVG8odGFyZ2V0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSb3VuZCB0byBuZWFyZXN0IHNlY29uZCBmb3IgdmltZW9cbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2V0Q3VycmVudFRpbWUodGFyZ2V0VGltZS50b0ZpeGVkKDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZWVrVG8odGFyZ2V0VGltZSAqIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICBfcGF1c2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRpbWV1cGRhdGVcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgc2Vla2luZyBmbGFnXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgc2Vla2luZ1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3NlZWtpbmcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9nZ2luZ1xuICAgICAgICAgICAgX2xvZygnU2Vla2luZyB0byAnICsgcGx5ci5tZWRpYS5jdXJyZW50VGltZSArICcgc2Vjb25kcycpO1xuXG4gICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciAnbWFudWFsJyBjYXB0aW9uc1xuICAgICAgICAgICAgX3NlZWtNYW51YWxDYXB0aW9ucyh0YXJnZXRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCB0aGUgZHVyYXRpb24gKG9yIGN1c3RvbSBpZiBzZXQpXG4gICAgICAgIGZ1bmN0aW9uIF9nZXREdXJhdGlvbigpIHtcbiAgICAgICAgICAgIC8vIEl0IHNob3VsZCBiZSBhIG51bWJlciwgYnV0IHBhcnNlIGl0IGp1c3QgaW5jYXNlXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBwYXJzZUludChjb25maWcuZHVyYXRpb24pLFxuXG4gICAgICAgICAgICAvLyBUcnVlIGR1cmF0aW9uXG4gICAgICAgICAgICBtZWRpYUR1cmF0aW9uID0gMDtcblxuICAgICAgICAgICAgLy8gT25seSBpZiBkdXJhdGlvbiBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLmR1cmF0aW9uICE9PSBudWxsICYmICFpc05hTihwbHlyLm1lZGlhLmR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIG1lZGlhRHVyYXRpb24gPSBwbHlyLm1lZGlhLmR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBjdXN0b20gZHVyYXRpb24gaXMgZnVua3ksIHVzZSByZWd1bGFyIGR1cmF0aW9uXG4gICAgICAgICAgICByZXR1cm4gKGlzTmFOKGR1cmF0aW9uKSA/IG1lZGlhRHVyYXRpb24gOiBkdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBwbGF5aW5nIHN0YXRlXG4gICAgICAgIGZ1bmN0aW9uIF9jaGVja1BsYXlpbmcoKSB7XG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnBsYXlpbmcsICFwbHlyLm1lZGlhLnBhdXNlZCk7XG5cbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuc3RvcHBlZCwgcGx5ci5tZWRpYS5wYXVzZWQpO1xuXG4gICAgICAgICAgICBfdG9nZ2xlQ29udHJvbHMocGx5ci5tZWRpYS5wYXVzZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2F2ZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgZnVuY3Rpb24gX3NhdmVTY3JvbGxQb3NpdGlvbigpIHtcbiAgICAgICAgICAgIHNjcm9sbCA9IHtcbiAgICAgICAgICAgICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQgfHwgMCxcbiAgICAgICAgICAgICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICAgIGZ1bmN0aW9uIF9yZXN0b3JlU2Nyb2xsUG9zaXRpb24oKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oc2Nyb2xsLngsIHNjcm9sbC55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBmdWxsc2NyZWVuXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVGdWxsc2NyZWVuKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgbmF0aXZlIHN1cHBvcnRcbiAgICAgICAgICAgIHZhciBuYXRpdmVTdXBwb3J0ID0gZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW47XG5cbiAgICAgICAgICAgIGlmIChuYXRpdmVTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQncyBhIGZ1bGxzY3JlZW4gY2hhbmdlIGV2ZW50LCB1cGRhdGUgdGhlIFVJXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09IGZ1bGxzY3JlZW4uZnVsbFNjcmVlbkV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmlzRnVsbHNjcmVlbiA9IGZ1bGxzY3JlZW4uaXNGdWxsU2NyZWVuKHBseXIuY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBFbHNlIGl0J3MgYSB1c2VyIHJlcXVlc3QgdG8gZW50ZXIgb3IgZXhpdFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZ1bGxzY3JlZW4uaXNGdWxsU2NyZWVuKHBseXIuY29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F2ZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIF9zYXZlU2Nyb2xsUG9zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVxdWVzdCBmdWxsIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5yZXF1ZXN0RnVsbFNjcmVlbihwbHlyLmNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIGZyb20gZnVsbHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5jYW5jZWxGdWxsU2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSBmdWxsIHNjcmVlbiAoaXQgY291bGQgZmFpbClcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5pc0Z1bGxzY3JlZW4gPSBmdWxsc2NyZWVuLmlzRnVsbFNjcmVlbihwbHlyLmNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdCdzIGEgc2ltcGxlIHRvZ2dsZVxuICAgICAgICAgICAgICAgIHBseXIuaXNGdWxsc2NyZWVuID0gIXBseXIuaXNGdWxsc2NyZWVuO1xuXG4gICAgICAgICAgICAgICAgLy8gQmluZC91bmJpbmQgZXNjYXBlIGtleVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBwbHlyLmlzRnVsbHNjcmVlbiA/ICdoaWRkZW4nIDogJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBjbGFzcyBob29rXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmZ1bGxzY3JlZW4uYWN0aXZlLCBwbHlyLmlzRnVsbHNjcmVlbik7XG5cbiAgICAgICAgICAgIC8vIFRyYXAgZm9jdXNcbiAgICAgICAgICAgIF9mb2N1c1RyYXAocGx5ci5pc0Z1bGxzY3JlZW4pO1xuXG4gICAgICAgICAgICAvLyBTZXQgYnV0dG9uIHN0YXRlXG4gICAgICAgICAgICBpZiAocGx5ci5idXR0b25zICYmIHBseXIuYnV0dG9ucy5mdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZVN0YXRlKHBseXIuYnV0dG9ucy5mdWxsc2NyZWVuLCBwbHlyLmlzRnVsbHNjcmVlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYW4gZXZlbnRcbiAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsIHBseXIuaXNGdWxsc2NyZWVuID8gJ2VudGVyZnVsbHNjcmVlbicgOiAnZXhpdGZ1bGxzY3JlZW4nLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gUmVzdG9yZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgICAgIGlmICghcGx5ci5pc0Z1bGxzY3JlZW4gJiYgbmF0aXZlU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgIF9yZXN0b3JlU2Nyb2xsUG9zaXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE11dGVcbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZU11dGUobXV0ZWQpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBtZXRob2QgaXMgY2FsbGVkIHdpdGhvdXQgcGFyYW1ldGVyLCB0b2dnbGUgYmFzZWQgb24gY3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgaWYgKCFfaXMuYm9vbGVhbihtdXRlZCkpIHtcbiAgICAgICAgICAgICAgICBtdXRlZCA9ICFwbHlyLm1lZGlhLm11dGVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgYnV0dG9uIHN0YXRlXG4gICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLm11dGUsIG11dGVkKTtcblxuICAgICAgICAgICAgLy8gU2V0IG11dGUgb24gdGhlIHBsYXllclxuICAgICAgICAgICAgcGx5ci5tZWRpYS5tdXRlZCA9IG11dGVkO1xuXG4gICAgICAgICAgICAvLyBJZiB2b2x1bWUgaXMgMCBhZnRlciB1bm11dGluZywgc2V0IHRvIGRlZmF1bHRcbiAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnZvbHVtZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIF9zZXRWb2x1bWUoY29uZmlnLnZvbHVtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVtYmVkc1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgIC8vIFlvdVR1YmVcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZFtwbHlyLm1lZGlhLm11dGVkID8gJ211dGUnIDogJ3VuTXV0ZSddKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZXRWb2x1bWUocGx5ci5tZWRpYS5tdXRlZCA/IDAgOiBwYXJzZUZsb2F0KGNvbmZpZy52b2x1bWUgLyBjb25maWcudm9sdW1lTWF4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHZvbHVtZWNoYW5nZSBmb3IgZW1iZWRzXG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndm9sdW1lY2hhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdm9sdW1lXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRWb2x1bWUodm9sdW1lKSB7XG4gICAgICAgICAgICB2YXIgbWF4ID0gY29uZmlnLnZvbHVtZU1heCxcbiAgICAgICAgICAgICAgICBtaW4gPSBjb25maWcudm9sdW1lTWluO1xuXG4gICAgICAgICAgICAvLyBMb2FkIHZvbHVtZSBmcm9tIHN0b3JhZ2UgaWYgbm8gdmFsdWUgc3BlY2lmaWVkXG4gICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZCh2b2x1bWUpKSB7XG4gICAgICAgICAgICAgICAgdm9sdW1lID0gcGx5ci5zdG9yYWdlLnZvbHVtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIGNvbmZpZyBpZiBhbGwgZWxzZSBmYWlsc1xuICAgICAgICAgICAgaWYgKHZvbHVtZSA9PT0gbnVsbCB8fCBpc05hTih2b2x1bWUpKSB7XG4gICAgICAgICAgICAgICAgdm9sdW1lID0gY29uZmlnLnZvbHVtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWF4aW11bSBpcyB2b2x1bWVNYXhcbiAgICAgICAgICAgIGlmICh2b2x1bWUgPiBtYXgpIHtcbiAgICAgICAgICAgICAgICB2b2x1bWUgPSBtYXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNaW5pbXVtIGlzIHZvbHVtZU1pblxuICAgICAgICAgICAgaWYgKHZvbHVtZSA8IG1pbikge1xuICAgICAgICAgICAgICAgIHZvbHVtZSA9IG1pbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBwbGF5ZXIgdm9sdW1lXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnZvbHVtZSA9IHBhcnNlRmxvYXQodm9sdW1lIC8gbWF4KTtcblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBkaXNwbGF5XG4gICAgICAgICAgICBpZiAocGx5ci52b2x1bWUuZGlzcGxheSkge1xuICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmRpc3BsYXkudmFsdWUgPSB2b2x1bWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVtYmVkc1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaChwbHlyLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnNldFZvbHVtZShwbHlyLm1lZGlhLnZvbHVtZSAqIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZXRWb2x1bWUocGx5ci5tZWRpYS52b2x1bWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB2b2x1bWVjaGFuZ2UgZm9yIGVtYmVkc1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3ZvbHVtZWNoYW5nZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUb2dnbGUgbXV0ZWQgc3RhdGVcbiAgICAgICAgICAgIGlmICh2b2x1bWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLm11dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGx5ci5tZWRpYS5tdXRlZCAmJiB2b2x1bWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZU11dGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluY3JlYXNlIHZvbHVtZVxuICAgICAgICBmdW5jdGlvbiBfaW5jcmVhc2VWb2x1bWUoc3RlcCkge1xuICAgICAgICAgICAgdmFyIHZvbHVtZSA9IHBseXIubWVkaWEubXV0ZWQgPyAwIDogKHBseXIubWVkaWEudm9sdW1lICogY29uZmlnLnZvbHVtZU1heCk7XG5cbiAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihzdGVwKSkge1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBjb25maWcudm9sdW1lU3RlcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3NldFZvbHVtZSh2b2x1bWUgKyBzdGVwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlY3JlYXNlIHZvbHVtZVxuICAgICAgICBmdW5jdGlvbiBfZGVjcmVhc2VWb2x1bWUoc3RlcCkge1xuICAgICAgICAgICAgdmFyIHZvbHVtZSA9IHBseXIubWVkaWEubXV0ZWQgPyAwIDogKHBseXIubWVkaWEudm9sdW1lICogY29uZmlnLnZvbHVtZU1heCk7XG5cbiAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihzdGVwKSkge1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBjb25maWcudm9sdW1lU3RlcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3NldFZvbHVtZSh2b2x1bWUgLSBzdGVwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB2b2x1bWUgVUkgYW5kIHN0b3JhZ2VcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVZvbHVtZSgpIHtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCB2b2x1bWVcbiAgICAgICAgICAgIHZhciB2b2x1bWUgPSBwbHlyLm1lZGlhLm11dGVkID8gMCA6IChwbHlyLm1lZGlhLnZvbHVtZSAqIGNvbmZpZy52b2x1bWVNYXgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIDxpbnB1dCB0eXBlPVwicmFuZ2VcIj4gaWYgcHJlc2VudFxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAocGx5ci52b2x1bWUuaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci52b2x1bWUuaW5wdXQudmFsdWUgPSB2b2x1bWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnZvbHVtZS5kaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmRpc3BsYXkudmFsdWUgPSB2b2x1bWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHZvbHVtZSBpbiBzdG9yYWdlXG4gICAgICAgICAgICBfdXBkYXRlU3RvcmFnZSh7dm9sdW1lOiB2b2x1bWV9KTtcblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGNsYXNzIGlmIG11dGVkXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLm11dGVkLCAodm9sdW1lID09PSAwKSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBjaGVja2JveCBmb3IgbXV0ZSBzdGF0ZVxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwgJiYgcGx5ci5idXR0b25zLm11dGUpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLm11dGUsICh2b2x1bWUgPT09IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBjYXB0aW9uc1xuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlQ2FwdGlvbnMoc2hvdykge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBmdWxsIHN1cHBvcnQsIG9yIHRoZXJlJ3Mgbm8gY2FwdGlvbiB0b2dnbGVcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCB8fCAhcGx5ci5idXR0b25zLmNhcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbWV0aG9kIGlzIGNhbGxlZCB3aXRob3V0IHBhcmFtZXRlciwgdG9nZ2xlIGJhc2VkIG9uIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4oc2hvdykpIHtcbiAgICAgICAgICAgICAgICBzaG93ID0gKHBseXIuY29udGFpbmVyLmNsYXNzTmFtZS5pbmRleE9mKGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmFjdGl2ZSkgPT09IC0xKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IGdsb2JhbFxuICAgICAgICAgICAgcGx5ci5jYXB0aW9uc0VuYWJsZWQgPSBzaG93O1xuXG4gICAgICAgICAgICAvLyBUb2dnbGUgc3RhdGVcbiAgICAgICAgICAgIF90b2dnbGVTdGF0ZShwbHlyLmJ1dHRvbnMuY2FwdGlvbnMsIHBseXIuY2FwdGlvbnNFbmFibGVkKTtcblxuICAgICAgICAgICAgLy8gQWRkIGNsYXNzIGhvb2tcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuY2FwdGlvbnMuYWN0aXZlLCBwbHlyLmNhcHRpb25zRW5hYmxlZCk7XG5cbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYW4gZXZlbnRcbiAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsIHBseXIuY2FwdGlvbnNFbmFibGVkID8gJ2NhcHRpb25zZW5hYmxlZCcgOiAnY2FwdGlvbnNkaXNhYmxlZCcsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBTYXZlIGNhcHRpb25zIHN0YXRlIHRvIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgX3VwZGF0ZVN0b3JhZ2Uoe2NhcHRpb25zRW5hYmxlZDogcGx5ci5jYXB0aW9uc0VuYWJsZWR9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIG1lZGlhIGlzIGxvYWRpbmdcbiAgICAgICAgZnVuY3Rpb24gX2NoZWNrTG9hZGluZyhldmVudCkge1xuICAgICAgICAgICAgdmFyIGxvYWRpbmcgPSAoZXZlbnQudHlwZSA9PT0gJ3dhaXRpbmcnKTtcblxuICAgICAgICAgICAgLy8gQ2xlYXIgdGltZXJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcnMubG9hZGluZyk7XG5cbiAgICAgICAgICAgIC8vIFRpbWVyIHRvIHByZXZlbnQgZmxpY2tlciB3aGVuIHNlZWtpbmdcbiAgICAgICAgICAgIHRpbWVycy5sb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBUb2dnbGUgY29udGFpbmVyIGNsYXNzIGhvb2tcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmxvYWRpbmcsIGxvYWRpbmcpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2hvdyBjb250cm9scyBpZiBsb2FkaW5nLCBoaWRlIGlmIGRvbmVcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ29udHJvbHMobG9hZGluZyk7XG4gICAgICAgICAgICB9LCAobG9hZGluZyA/IDI1MCA6IDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSA8cHJvZ3Jlc3M+IGVsZW1lbnRzXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVQcm9ncmVzcyhldmVudCkge1xuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgICAgPSBwbHlyLnByb2dyZXNzLnBsYXllZCxcbiAgICAgICAgICAgICAgICB2YWx1ZSAgICAgICA9IDAsXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gICAgPSBfZ2V0RHVyYXRpb24oKTtcblxuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFZpZGVvIHBsYXlpbmdcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGltZXVwZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NlZWtpbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIuY29udHJvbHMucHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBfZ2V0UGVyY2VudGFnZShwbHlyLm1lZGlhLmN1cnJlbnRUaW1lLCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBzZWVrIHJhbmdlIHZhbHVlIG9ubHkgaWYgaXQncyBhICduYXR1cmFsJyB0aW1lIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RpbWV1cGRhdGUnICYmIHBseXIuYnV0dG9ucy5zZWVrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnNlZWsudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgYnVmZmVyIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwbGF5aW5nJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJvZ3Jlc3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MgICAgPSBwbHlyLnByb2dyZXNzLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICAgICAgID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZCA9IHBseXIubWVkaWEuYnVmZmVyZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyZWQgJiYgYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhUTUw1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0UGVyY2VudGFnZShidWZmZXJlZC5lbmQoMCksIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF9pcy5udW1iZXIoYnVmZmVyZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFlvdVR1YmUgcmV0dXJucyBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChidWZmZXJlZCAqIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB2YWx1ZXNcbiAgICAgICAgICAgIF9zZXRQcm9ncmVzcyhwcm9ncmVzcywgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IDxwcm9ncmVzcz4gdmFsdWVcbiAgICAgICAgZnVuY3Rpb24gX3NldFByb2dyZXNzKHByb2dyZXNzLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIDBcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gYnVmZmVyIG9yIGJhaWxcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKHByb2dyZXNzKSkge1xuICAgICAgICAgICAgICAgIGlmIChwbHlyLnByb2dyZXNzICYmIHBseXIucHJvZ3Jlc3MuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gcGx5ci5wcm9ncmVzcy5idWZmZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT25lIHByb2dyZXNzIGVsZW1lbnQgcGFzc2VkXG4gICAgICAgICAgICBpZiAoX2lzLmh0bWxFbGVtZW50KHByb2dyZXNzKSkge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgLy8gT2JqZWN0IG9mIHByb2dyZXNzICsgdGV4dCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzLmJhcikge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcy5iYXIudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzLnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MudGV4dC5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgdGhlIGRpc3BsYXllZCB0aW1lXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVUaW1lRGlzcGxheSh0aW1lLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBCYWlsIGlmIHRoZXJlJ3Mgbm8gZHVyYXRpb24gZGlzcGxheVxuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGYWxsYmFjayB0byAwXG4gICAgICAgICAgICBpZiAoaXNOYU4odGltZSkpIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGx5ci5zZWNzID0gcGFyc2VJbnQodGltZSAlIDYwKTtcbiAgICAgICAgICAgIHBseXIubWlucyA9IHBhcnNlSW50KCh0aW1lIC8gNjApICUgNjApO1xuICAgICAgICAgICAgcGx5ci5ob3VycyA9IHBhcnNlSW50KCgodGltZSAvIDYwKSAvIDYwKSAlIDYwKTtcblxuICAgICAgICAgICAgLy8gRG8gd2UgbmVlZCB0byBkaXNwbGF5IGhvdXJzP1xuICAgICAgICAgICAgdmFyIGRpc3BsYXlIb3VycyA9IChwYXJzZUludCgoKF9nZXREdXJhdGlvbigpIC8gNjApIC8gNjApICUgNjApID4gMCk7XG5cbiAgICAgICAgICAgIC8vIEVuc3VyZSBpdCdzIHR3byBkaWdpdHMuIEZvciBleGFtcGxlLCAwMyByYXRoZXIgdGhhbiAzLlxuICAgICAgICAgICAgcGx5ci5zZWNzID0gKCcwJyArIHBseXIuc2Vjcykuc2xpY2UoLTIpO1xuICAgICAgICAgICAgcGx5ci5taW5zID0gKCcwJyArIHBseXIubWlucykuc2xpY2UoLTIpO1xuXG4gICAgICAgICAgICAvLyBSZW5kZXJcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gKGRpc3BsYXlIb3VycyA/IHBseXIuaG91cnMgKyAnOicgOiAnJykgKyBwbHlyLm1pbnMgKyAnOicgKyBwbHlyLnNlY3M7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IHRoZSBkdXJhdGlvbiBvbiBtZXRhZGF0YWxvYWRlZFxuICAgICAgICBmdW5jdGlvbiBfZGlzcGxheUR1cmF0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgZHVyYXRpb25cbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IF9nZXREdXJhdGlvbigpIHx8IDA7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgb25seSBvbmUgdGltZSBkaXNwbGF5LCBkaXNwbGF5IGR1cmF0aW9uIHRoZXJlXG4gICAgICAgICAgICBpZiAoIXBseXIuZHVyYXRpb24gJiYgY29uZmlnLmRpc3BsYXlEdXJhdGlvbiAmJiBwbHlyLm1lZGlhLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgIF91cGRhdGVUaW1lRGlzcGxheShkdXJhdGlvbiwgcGx5ci5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBkdXJhdGlvbiBlbGVtZW50LCB1cGRhdGUgY29udGVudFxuICAgICAgICAgICAgaWYgKHBseXIuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBfdXBkYXRlVGltZURpc3BsYXkoZHVyYXRpb24sIHBseXIuZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHRvb2x0aXAgKGlmIHZpc2libGUpXG4gICAgICAgICAgICBfdXBkYXRlU2Vla1Rvb2x0aXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSB0aW1lIGNoYW5nZSBldmVudFxuICAgICAgICBmdW5jdGlvbiBfdGltZVVwZGF0ZShldmVudCkge1xuICAgICAgICAgICAgLy8gRHVyYXRpb25cbiAgICAgICAgICAgIF91cGRhdGVUaW1lRGlzcGxheShwbHlyLm1lZGlhLmN1cnJlbnRUaW1lLCBwbHlyLmN1cnJlbnRUaW1lKTtcblxuICAgICAgICAgICAgLy8gSWdub3JlIHVwZGF0ZXMgd2hpbGUgc2Vla2luZ1xuICAgICAgICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICd0aW1ldXBkYXRlJyAmJiBwbHlyLm1lZGlhLnNlZWtpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFBsYXlpbmcgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF91cGRhdGVQcm9ncmVzcyhldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgc2VlayByYW5nZSBhbmQgcHJvZ3Jlc3NcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVNlZWtEaXNwbGF5KHRpbWUpIHtcbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gMFxuICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKHRpbWUpKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiAgICA9IF9nZXREdXJhdGlvbigpLFxuICAgICAgICAgICAgICAgIHZhbHVlICAgICAgID0gX2dldFBlcmNlbnRhZ2UodGltZSwgZHVyYXRpb24pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgICAgICAgICAgIGlmIChwbHlyLnByb2dyZXNzICYmIHBseXIucHJvZ3Jlc3MucGxheWVkKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5wbGF5ZWQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHNlZWsgcmFuZ2UgaW5wdXRcbiAgICAgICAgICAgIGlmIChwbHlyLmJ1dHRvbnMgJiYgcGx5ci5idXR0b25zLnNlZWspIHtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuc2Vlay52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGhvdmVyIHRvb2x0aXAgZm9yIHNlZWtpbmdcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVNlZWtUb29sdGlwKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBfZ2V0RHVyYXRpb24oKTtcblxuICAgICAgICAgICAgLy8gQmFpbCBpZiBzZXR0aW5nIG5vdCB0cnVlXG4gICAgICAgICAgICBpZiAoIWNvbmZpZy50b29sdGlwcy5zZWVrIHx8ICFwbHlyLnByb2dyZXNzLmNvbnRhaW5lciB8fCBkdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBlcmNlbnRhZ2VcbiAgICAgICAgICAgIHZhciBjbGllbnRSZWN0ICA9IHBseXIucHJvZ3Jlc3MuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICAgIHBlcmNlbnQgICAgID0gMCxcbiAgICAgICAgICAgICAgICB2aXNpYmxlICAgICA9IGNvbmZpZy5jbGFzc2VzLnRvb2x0aXAgKyAnLS12aXNpYmxlJztcblxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHBlcmNlbnRhZ2UsIGlmIGFscmVhZHkgdmlzaWJsZVxuICAgICAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfaGFzQ2xhc3MocGx5ci5wcm9ncmVzcy50b29sdGlwLCB2aXNpYmxlKSkge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gcGx5ci5wcm9ncmVzcy50b29sdGlwLnN0eWxlLmxlZnQucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gKCgxMDAgLyBjbGllbnRSZWN0LndpZHRoKSAqIChldmVudC5wYWdlWCAtIGNsaWVudFJlY3QubGVmdCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgYm91bmRzXG4gICAgICAgICAgICBpZiAocGVyY2VudCA8IDApIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGVyY2VudCA+IDEwMCkge1xuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAxMDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERpc3BsYXkgdGhlIHRpbWUgYSBjbGljayB3b3VsZCBzZWVrIHRvXG4gICAgICAgICAgICBfdXBkYXRlVGltZURpc3BsYXkoKChkdXJhdGlvbiAvIDEwMCkgKiBwZXJjZW50KSwgcGx5ci5wcm9ncmVzcy50b29sdGlwKTtcblxuICAgICAgICAgICAgLy8gU2V0IHBvc2l0aW9uXG4gICAgICAgICAgICBwbHlyLnByb2dyZXNzLnRvb2x0aXAuc3R5bGUubGVmdCA9IHBlcmNlbnQgKyBcIiVcIjtcblxuICAgICAgICAgICAgLy8gU2hvdy9oaWRlIHRoZSB0b29sdGlwXG4gICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgaXMgYSBtb3VlcyBpbi9vdXQgYW5kIHBlcmNlbnRhZ2UgaXMgaW5zaWRlIGJvdW5kc1xuICAgICAgICAgICAgaWYgKGV2ZW50ICYmIF9pbkFycmF5KFsnbW91c2VlbnRlcicsICdtb3VzZWxlYXZlJ10sIGV2ZW50LnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIucHJvZ3Jlc3MudG9vbHRpcCwgdmlzaWJsZSwgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hvdyB0aGUgcGxheWVyIGNvbnRyb2xzIGluIGZ1bGxzY3JlZW4gbW9kZVxuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlQ29udHJvbHModG9nZ2xlKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBoaWRlIGlmIGNvbmZpZyBzYXlzIG5vdCB0bywgaXQncyBhdWRpbywgb3Igbm90IHJlYWR5IG9yIGxvYWRpbmdcbiAgICAgICAgICAgIGlmICghY29uZmlnLmhpZGVDb250cm9scyB8fCBwbHlyLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkZWxheSA9IDAsXG4gICAgICAgICAgICAgICAgaXNFbnRlckZ1bGxzY3JlZW4gPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93ID0gdG9nZ2xlLFxuICAgICAgICAgICAgICAgIGxvYWRpbmcgPSBfaGFzQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmxvYWRpbmcpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGZhbHNlIGlmIG5vIGJvb2xlYW5cbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4odG9nZ2xlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0b2dnbGUgJiYgdG9nZ2xlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXMgdGhlIGVudGVyIGZ1bGxzY3JlZW4gZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaXNFbnRlckZ1bGxzY3JlZW4gPSAodG9nZ2xlLnR5cGUgPT09ICdlbnRlcmZ1bGxzY3JlZW4nKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXaGV0aGVyIHRvIHNob3cgY29udHJvbHNcbiAgICAgICAgICAgICAgICAgICAgc2hvdyA9IF9pbkFycmF5KFsnbW91c2Vtb3ZlJywgJ3RvdWNoc3RhcnQnLCAnbW91c2VlbnRlcicsICdmb2N1cyddLCB0b2dnbGUudHlwZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVsYXkgaGlkaW5nIG9uIG1vdmUgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShbJ21vdXNlbW92ZScsICd0b3VjaG1vdmUnXSwgdG9nZ2xlLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheSA9IDIwMDA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBEZWxheSBhIGxpdHRsZSBtb3JlIGZvciBrZXlib2FyZCB1c2Vyc1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9nZ2xlLnR5cGUgPT09ICdmb2N1cycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMzAwMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3cgPSBfaGFzQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmhpZGVDb250cm9scyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbGVhciB0aW1lciBldmVyeSBtb3ZlbWVudFxuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lcnMuaG92ZXIpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbW91c2UgaXMgbm90IG92ZXIgdGhlIGNvbnRyb2xzLCBzZXQgYSB0aW1lb3V0IHRvIGhpZGUgdGhlbVxuICAgICAgICAgICAgaWYgKHNob3cgfHwgcGx5ci5tZWRpYS5wYXVzZWQgfHwgbG9hZGluZykge1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuaGlkZUNvbnRyb2xzLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBbHdheXMgc2hvdyBjb250cm9scyB3aGVuIHBhdXNlZCBvciBpZiB0b3VjaFxuICAgICAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnBhdXNlZCB8fCBsb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEZWxheSBmb3IgaGlkaW5nIG9uIHRvdWNoXG4gICAgICAgICAgICAgICAgaWYgKHBseXIuYnJvd3Nlci5pc1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMzAwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRvZ2dsZSBpcyBmYWxzZSBvciBpZiB3ZSdyZSBwbGF5aW5nIChyZWdhcmRsZXNzIG9mIHRvZ2dsZSksXG4gICAgICAgICAgICAvLyB0aGVuIHNldCB0aGUgdGltZXIgdG8gaGlkZSB0aGUgY29udHJvbHNcbiAgICAgICAgICAgIGlmICghc2hvdyB8fCAhcGx5ci5tZWRpYS5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICB0aW1lcnMuaG92ZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG1vdXNlIGlzIG92ZXIgdGhlIGNvbnRyb2xzIChhbmQgbm90IGVudGVyaW5nIGZ1bGxzY3JlZW4pLCBiYWlsXG4gICAgICAgICAgICAgICAgICAgIGlmICgocGx5ci5jb250cm9scy5wcmVzc2VkIHx8IHBseXIuY29udHJvbHMuaG92ZXIpICYmICFpc0VudGVyRnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5oaWRlQ29udHJvbHMsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBjb21tb24gZnVuY3Rpb24gdG8gcmV0cmlldmUgbWVkaWEgc291cmNlXG4gICAgICAgIGZ1bmN0aW9uIF9zb3VyY2Uoc291cmNlKSB7XG4gICAgICAgICAgICAvLyBJZiBub3QgbnVsbCBvciB1bmRlZmluZWQsIHBhcnNlIGl0XG4gICAgICAgICAgICBpZiAoIV9pcy51bmRlZmluZWQoc291cmNlKSkge1xuICAgICAgICAgICAgICAgIF91cGRhdGVTb3VyY2Uoc291cmNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgY3VycmVudCBzb3VyY2VcbiAgICAgICAgICAgIHZhciB1cmw7XG4gICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IHBseXIuZW1iZWQuZ2V0VmlkZW9VcmwoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZ2V0VmlkZW9VcmwudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5nZXRDdXJyZW50U291bmQoZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBvYmplY3QucGVybWFsaW5rX3VybDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gcGx5ci5tZWRpYS5jdXJyZW50U3JjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVybCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBzb3VyY2VcbiAgICAgICAgLy8gU291cmNlcyBhcmUgbm90IGNoZWNrZWQgZm9yIHN1cHBvcnQgc28gYmUgY2FyZWZ1bFxuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlU291cmNlKHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKCFfaXMub2JqZWN0KHNvdXJjZSkgfHwgISgnc291cmNlcycgaW4gc291cmNlKSB8fCAhc291cmNlLnNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgX3dhcm4oJ0ludmFsaWQgc291cmNlIGZvcm1hdCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVtb3ZlIHJlYWR5IGNsYXNzIGhvb2tcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMucmVhZHksIGZhbHNlKTtcblxuICAgICAgICAgICAgLy8gUGF1c2UgcGxheWJhY2tcbiAgICAgICAgICAgIF9wYXVzZSgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgc2VlayByYW5nZSBhbmQgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF91cGRhdGVTZWVrRGlzcGxheSgpO1xuXG4gICAgICAgICAgICAvLyBSZXNldCBidWZmZXIgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF9zZXRQcm9ncmVzcygpO1xuXG4gICAgICAgICAgICAvLyBDYW5jZWwgY3VycmVudCBuZXR3b3JrIHJlcXVlc3RzXG4gICAgICAgICAgICBfY2FuY2VsUmVxdWVzdHMoKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgbmV3IHNvdXJjZVxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGVtYmVkIG9iamVjdFxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBvbGQgbWVkaWFcbiAgICAgICAgICAgICAgICBfcmVtb3ZlKHBseXIubWVkaWEpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHZpZGVvIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycgJiYgcGx5ci52aWRlb0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICBfcmVtb3ZlKHBseXIudmlkZW9Db250YWluZXIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IGNsYXNzIG5hbWVcbiAgICAgICAgICAgICAgICBpZiAocGx5ci5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5jb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgdHlwZVxuICAgICAgICAgICAgICAgIGlmICgndHlwZScgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIudHlwZSA9IHNvdXJjZS50eXBlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBjaGlsZCB0eXBlIGZvciB2aWRlbyAoaXQgbWlnaHQgYmUgYW4gZW1iZWQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdFNvdXJjZSA9IHNvdXJjZS5zb3VyY2VzWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ3R5cGUnIGluIGZpcnN0U291cmNlICYmIF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgZmlyc3RTb3VyY2UudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLnR5cGUgPSBmaXJzdFNvdXJjZS50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHN1cHBvcnRcbiAgICAgICAgICAgICAgICBwbHlyLnN1cHBvcnRlZCA9IHN1cHBvcnRlZChwbHlyLnR5cGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBtYXJrdXBcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWRJZCA9IHNvdXJjZS5zb3VyY2VzWzBdLnNyYztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEluamVjdCB0aGUgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBfcHJlcGVuZENoaWxkKHBseXIuY29udGFpbmVyLCBwbHlyLm1lZGlhKTtcblxuICAgICAgICAgICAgICAgIC8vIEF1dG9wbGF5IHRoZSBuZXcgc291cmNlP1xuICAgICAgICAgICAgICAgIGlmIChfaXMuYm9vbGVhbihzb3VyY2UuYXV0b3BsYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5hdXRvcGxheSA9IHNvdXJjZS5hdXRvcGxheTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgYXR0cmlidXRlcyBmb3IgYXVkaW8gYW5kIHZpZGVvXG4gICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5odG1sNSwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmNyb3Nzb3JpZ2luKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgnY3Jvc3NvcmlnaW4nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5hdXRvcGxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ2F1dG9wbGF5JywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgncG9zdGVyJyBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdwb3N0ZXInLCBzb3VyY2UucG9zdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmxvb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdsb29wJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBjbGFzcyBob29rc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuZnVsbHNjcmVlbi5hY3RpdmUsIHBseXIuaXNGdWxsc2NyZWVuKTtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmFjdGl2ZSwgcGx5ci5jYXB0aW9uc0VuYWJsZWQpO1xuICAgICAgICAgICAgICAgIF90b2dnbGVTdHlsZUhvb2soKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCBuZXcgc291cmNlcyBmb3IgaHRtbDVcbiAgICAgICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pbnNlcnRDaGlsZEVsZW1lbnRzKCdzb3VyY2UnLCBzb3VyY2Uuc291cmNlcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IHVwIGZyb20gc2NyYXRjaFxuICAgICAgICAgICAgICAgIF9zZXR1cE1lZGlhKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBIVE1MNSBzdHVmZlxuICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgY2FwdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCd0cmFja3MnIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2luc2VydENoaWxkRWxlbWVudHMoJ3RyYWNrJywgc291cmNlLnRyYWNrcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBMb2FkIEhUTUw1IHNvdXJjZXNcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgSFRNTDUgb3IgZW1iZWQgYnV0IG5vdCBmdWxseSBzdXBwb3J0ZWQsIHNldHVwSW50ZXJmYWNlIGFuZCBjYWxsIHJlYWR5IG5vd1xuICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkgfHwgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSAmJiAhcGx5ci5zdXBwb3J0ZWQuZnVsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgaW50ZXJmYWNlXG4gICAgICAgICAgICAgICAgICAgIF9zZXR1cEludGVyZmFjZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgcmVhZHlcbiAgICAgICAgICAgICAgICAgICAgX3JlYWR5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IGFyaWEgdGl0bGUgYW5kIGlmcmFtZSB0aXRsZVxuICAgICAgICAgICAgICAgIGNvbmZpZy50aXRsZSA9IHNvdXJjZS50aXRsZTtcbiAgICAgICAgICAgICAgICBfc2V0VGl0bGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGVzdHJveSBpbnN0YW5jZSBhZG4gd2FpdCBmb3IgY2FsbGJhY2tcbiAgICAgICAgICAgIC8vIFZpbWVvIHRocm93cyBhIHdvYmJseSBpZiB5b3UgZG9uJ3Qgd2FpdFxuICAgICAgICAgICAgX2Rlc3Ryb3koc2V0dXAsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBwb3N0ZXJcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVBvc3Rlcihzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgncG9zdGVyJywgc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExpc3RlbiBmb3IgY29udHJvbCBldmVudHNcbiAgICAgICAgZnVuY3Rpb24gX2NvbnRyb2xMaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5wdXQgZXZlbnQsIHNvIHdlIGZhbGxiYWNrIHRvIGNoYW5nZVxuICAgICAgICAgICAgdmFyIGlucHV0RXZlbnQgPSAocGx5ci5icm93c2VyLmlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCcpO1xuXG4gICAgICAgICAgICAvLyBDbGljayBwbGF5L3BhdXNlIGhlbHBlclxuICAgICAgICAgICAgZnVuY3Rpb24gdG9nZ2xlUGxheSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGxheSA9IF90b2dnbGVQbGF5KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgd2hpY2ggYnV0dG9uc1xuICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gcGx5ci5idXR0b25zW3BsYXkgPyAncGxheScgOiAncGF1c2UnXSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gcGx5ci5idXR0b25zW3BsYXkgPyAncGF1c2UnIDogJ3BsYXknXTtcblxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgbGFzdCBwbGF5IGJ1dHRvbiB0byBhY2NvdW50IGZvciB0aGUgbGFyZ2UgcGxheSBidXR0b25cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldFt0YXJnZXQubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0WzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldHVwIGZvY3VzIGFuZCB0YWIgZm9jdXNcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYWRUYWJGb2N1cyA9IF9oYXNDbGFzcyh0cmlnZ2VyLCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5mb2N1cygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFkVGFiRm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3ModHJpZ2dlciwgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3ModGFyZ2V0LCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGZvY3VzZWQgZWxlbWVudFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Rm9jdXNFbGVtZW50KCkge1xuICAgICAgICAgICAgICAgIHZhciBmb2N1c2VkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICAgICAgICAgICAgICAgIGlmICghZm9jdXNlZCB8fCBmb2N1c2VkID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCc6Zm9jdXMnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZm9jdXNlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBrZXkgY29kZSBmb3IgYW4gZXZlbnRcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEtleUNvZGUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQua2V5Q29kZSA/IGV2ZW50LmtleUNvZGUgOiBldmVudC53aGljaDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGV0ZWN0IHRhYiBmb2N1c1xuICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tUYWJGb2N1cyhmb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYnV0dG9uIGluIHBseXIuYnV0dG9ucykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHBseXIuYnV0dG9uc1tidXR0b25dO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaXMubm9kZUxpc3QoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhlbGVtZW50W2ldLCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgKGVsZW1lbnRbaV0gPT09IGZvY3VzZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhlbGVtZW50LCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgKGVsZW1lbnQgPT09IGZvY3VzZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2V5Ym9hcmQgc2hvcnRjdXRzXG4gICAgICAgICAgICBpZiAoY29uZmlnLmtleWJvYXJkU2hvcmN1dHMuZm9jdXNlZCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBnbG9iYWwgcHJlc3Nlc1xuICAgICAgICAgICAgICAgIGlmIChjb25maWcua2V5Ym9hcmRTaG9yY3V0cy5nbG9iYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgX29uKHdpbmRvdywgJ2tleWRvd24ga2V5dXAnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBnZXRLZXlDb2RlKGV2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBnZXRGb2N1c0VsZW1lbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZWQgPSBbNDgsNDksNTAsNTEsNTIsNTMsNTQsNTYsNTcsNzUsNzcsNzAsNjddLFxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgICA9IGdldCgpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBoYW5kbGUgZ2xvYmFsIGtleSBwcmVzcyBpZiB0aGVyZSdzIG9ubHkgb25lIHBsYXllclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHRoZSBrZXkgaXMgaW4gdGhlIGFsbG93ZWQga2V5c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGlmIHRoZSBmb2N1c2VkIGVsZW1lbnQgaXMgbm90IGVkaXRhYmxlIChlLmcuIHRleHQgaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgYW55IHRoYXQgYWNjZXB0IGtleSBpbnB1dCBodHRwOi8vd2ViYWltLm9yZy90ZWNobmlxdWVzL2tleWJvYXJkL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAxICYmIF9pbkFycmF5KGFsbG93ZWQsIGNvZGUpICYmICghX2lzLmh0bWxFbGVtZW50KGZvY3VzZWQpIHx8ICFfbWF0Y2hlcyhmb2N1c2VkLCBjb25maWcuc2VsZWN0b3JzLmVkaXRhYmxlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVLZXkoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgcHJlc3NlcyBvbiBmb2N1c2VkXG4gICAgICAgICAgICAgICAgX29uKHBseXIuY29udGFpbmVyLCAna2V5ZG93biBrZXl1cCcsIGhhbmRsZUtleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZUtleShldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZ2V0S2V5Q29kZShldmVudCksXG4gICAgICAgICAgICAgICAgICAgIHByZXNzZWQgPSBldmVudC50eXBlID09PSAna2V5ZG93bicsXG4gICAgICAgICAgICAgICAgICAgIGhlbGQgPSBwcmVzc2VkICYmIGNvZGUgPT09IGxhc3Q7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgaXMgYnViYmxlZCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCBkb2Vzbid0IGdldCB0aGUga2V5Y29kZSBmb3Igd2hhdGV2ZXIgcmVhc29uXG4gICAgICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKGNvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZWVrIGJ5IHRoZSBudW1iZXIga2V5c1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNlZWtCeUtleSgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGN1cnJlbnQgZHVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gcGx5ci5tZWRpYS5kdXJhdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIGlmIHdlIGhhdmUgbm8gZHVyYXRpb24gc2V0XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihkdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERpdmlkZSB0aGUgbWF4IGR1cmF0aW9uIGludG8gMTB0aCdzIGFuZCB0aW1lcyBieSB0aGUgbnVtYmVyIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIF9zZWVrKChkdXJhdGlvbiAvIDEwKSAqIChjb2RlIC0gNDgpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGtleSBvbiBrZXlkb3duXG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgb24ga2V5dXBcbiAgICAgICAgICAgICAgICBpZiAocHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGljaCBrZXljb2RlcyBzaG91bGQgd2UgcHJldmVudCBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IFs0OCw0OSw1MCw1MSw1Miw1Myw1NCw1Niw1NywzMiw3NSwzOCw0MCw3NywzOSwzNyw3MCw2N107XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGNvZGUgaXMgZm91bmQgcHJldmVudCBkZWZhdWx0IChlLmcuIHByZXZlbnQgc2Nyb2xsaW5nIGZvciBhcnJvd3MpXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShwcmV2ZW50RGVmYXVsdCwgY29kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaChjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwLTlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDg6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ5OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1MDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDUyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1MzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1NjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTc6IGlmICghaGVsZCkgeyBzZWVrQnlLZXkoKTsgfSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNwYWNlIGFuZCBLIGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzU6IGlmICghaGVsZCkgeyBfdG9nZ2xlUGxheSgpOyB9IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJyb3cgdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzg6IF9pbmNyZWFzZVZvbHVtZSgpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFycm93IGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDA6IF9kZWNyZWFzZVZvbHVtZSgpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE0ga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc3OiBpZiAoIWhlbGQpIHsgX3RvZ2dsZU11dGUoKSB9IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJyb3cgZm9yd2FyZFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOTogX2ZvcndhcmQoKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcnJvdyBiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM3OiBfcmV3aW5kKCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRiBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzA6IF90b2dnbGVGdWxsc2NyZWVuKCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQyBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjc6IGlmICghaGVsZCkgeyBfdG9nZ2xlQ2FwdGlvbnMoKTsgfSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEVzY2FwZSBpcyBoYW5kbGUgbmF0aXZlbHkgd2hlbiBpbiBmdWxsIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAvLyBTbyB3ZSBvbmx5IG5lZWQgdG8gd29ycnkgYWJvdXQgbm9uIG5hdGl2ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsU2NyZWVuICYmIHBseXIuaXNGdWxsc2NyZWVuICYmIGNvZGUgPT09IDI3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlRnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgbGFzdCBjb2RlIGZvciBuZXh0IGN5Y2xlXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBjb2RlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRm9jdXMvdGFiIG1hbmFnZW1lbnRcbiAgICAgICAgICAgIF9vbih3aW5kb3csICdrZXl1cCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBnZXRLZXlDb2RlKGV2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IGdldEZvY3VzRWxlbWVudCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tUYWJGb2N1cyhmb2N1c2VkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF9vbihkb2N1bWVudC5ib2R5LCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MoX2dldEVsZW1lbnQoJy4nICsgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMpLCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKHZhciBidXR0b24gaW4gcGx5ci5idXR0b25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBwbHlyLmJ1dHRvbnNbYnV0dG9uXTtcblxuICAgICAgICAgICAgICAgIF9vbihlbGVtZW50LCAnYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MoZWxlbWVudCwgJ3RhYi1mb2N1cycsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUGxheVxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnBsYXksICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMucGxheSwgdG9nZ2xlUGxheSk7XG5cbiAgICAgICAgICAgIC8vIFBhdXNlXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMucGF1c2UsICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMucGF1c2UsIHRvZ2dsZVBsYXkpO1xuXG4gICAgICAgICAgICAvLyBSZXN0YXJ0XG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMucmVzdGFydCwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5yZXN0YXJ0LCBfc2Vlayk7XG5cbiAgICAgICAgICAgIC8vIFJld2luZFxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnJld2luZCwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5yZXdpbmQsIF9yZXdpbmQpO1xuXG4gICAgICAgICAgICAvLyBGYXN0IGZvcndhcmRcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5mb3J3YXJkLCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLmZvcndhcmQsIF9mb3J3YXJkKTtcblxuICAgICAgICAgICAgLy8gU2Vla1xuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnNlZWssIGlucHV0RXZlbnQsIGNvbmZpZy5saXN0ZW5lcnMuc2VlaywgX3NlZWspO1xuXG4gICAgICAgICAgICAvLyBTZXQgdm9sdW1lXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLnZvbHVtZS5pbnB1dCwgaW5wdXRFdmVudCwgY29uZmlnLmxpc3RlbmVycy52b2x1bWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9zZXRWb2x1bWUocGx5ci52b2x1bWUuaW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIE11dGVcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5tdXRlLCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLm11dGUsIF90b2dnbGVNdXRlKTtcblxuICAgICAgICAgICAgLy8gRnVsbHNjcmVlblxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLmZ1bGxzY3JlZW4sICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMuZnVsbHNjcmVlbiwgX3RvZ2dsZUZ1bGxzY3JlZW4pO1xuXG4gICAgICAgICAgICAvLyBIYW5kbGUgdXNlciBleGl0aW5nIGZ1bGxzY3JlZW4gYnkgZXNjYXBpbmcgZXRjXG4gICAgICAgICAgICBpZiAoZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgICAgICBfb24oZG9jdW1lbnQsIGZ1bGxzY3JlZW4uZnVsbFNjcmVlbkV2ZW50TmFtZSwgX3RvZ2dsZUZ1bGxzY3JlZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYXB0aW9uc1xuICAgICAgICAgICAgX29uKHBseXIuYnV0dG9ucy5jYXB0aW9ucywgJ2NsaWNrJywgX3RvZ2dsZUNhcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gU2VlayB0b29sdGlwXG4gICAgICAgICAgICBfb24ocGx5ci5wcm9ncmVzcy5jb250YWluZXIsICdtb3VzZWVudGVyIG1vdXNlbGVhdmUgbW91c2Vtb3ZlJywgX3VwZGF0ZVNlZWtUb29sdGlwKTtcblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGNvbnRyb2xzIHZpc2liaWxpdHkgYmFzZWQgb24gbW91c2UgbW92ZW1lbnRcbiAgICAgICAgICAgIGlmIChjb25maWcuaGlkZUNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgLy8gVG9nZ2xlIGNvbnRyb2xzIG9uIG1vdXNlIGV2ZW50cyBhbmQgZW50ZXJpbmcgZnVsbHNjcmVlblxuICAgICAgICAgICAgICAgIF9vbihwbHlyLmNvbnRhaW5lciwgJ21vdXNlZW50ZXIgbW91c2VsZWF2ZSBtb3VzZW1vdmUgdG91Y2hzdGFydCB0b3VjaGVuZCB0b3VjaGNhbmNlbCB0b3VjaG1vdmUgZW50ZXJmdWxsc2NyZWVuJywgX3RvZ2dsZUNvbnRyb2xzKTtcblxuICAgICAgICAgICAgICAgIC8vIFdhdGNoIGZvciBjdXJzb3Igb3ZlciBjb250cm9scyBzbyB0aGV5IGRvbid0IGhpZGUgd2hlbiB0cnlpbmcgdG8gaW50ZXJhY3RcbiAgICAgICAgICAgICAgICBfb24ocGx5ci5jb250cm9scywgJ21vdXNlZW50ZXIgbW91c2VsZWF2ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY29udHJvbHMuaG92ZXIgPSBldmVudC50eXBlID09PSAnbW91c2VlbnRlcic7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgLy8gV2F0Y2ggZm9yIGN1cnNvciBvdmVyIGNvbnRyb2xzIHNvIHRoZXkgZG9uJ3QgaGlkZSB3aGVuIHRyeWluZyB0byBpbnRlcmFjdFxuICAgICAgICAgICAgICAgIF9vbihwbHlyLmNvbnRyb2xzLCAnbW91c2Vkb3duIG1vdXNldXAgdG91Y2hzdGFydCB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY29udHJvbHMucHJlc3NlZCA9IF9pbkFycmF5KFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXSwgZXZlbnQudHlwZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGb2N1cyBpbi9vdXQgb24gY29udHJvbHNcbiAgICAgICAgICAgICAgICBfb24ocGx5ci5jb250cm9scywgJ2ZvY3VzIGJsdXInLCBfdG9nZ2xlQ29udHJvbHMsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGp1c3Qgdm9sdW1lIG9uIHNjcm9sbFxuICAgICAgICAgICAgX29uKHBseXIudm9sdW1lLmlucHV0LCAnd2hlZWwnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBEZXRlY3QgXCJuYXR1cmFsXCIgc2Nyb2xsIC0gc3VwcG9yZWQgb24gT1MgWCBTYWZhcmkgb25seVxuICAgICAgICAgICAgICAgIC8vIE90aGVyIGJyb3dzZXJzIG9uIE9TIFggd2lsbCBiZSBpbnZlcnRlZCB1bnRpbCBzdXBwb3J0IGltcHJvdmVzXG4gICAgICAgICAgICAgICAgdmFyIGludmVydGVkID0gZXZlbnQud2Via2l0RGlyZWN0aW9uSW52ZXJ0ZWRGcm9tRGV2aWNlLFxuICAgICAgICAgICAgICAgICAgICBzdGVwID0gKGNvbmZpZy52b2x1bWVTdGVwIC8gNSk7XG5cbiAgICAgICAgICAgICAgICAvLyBTY3JvbGwgZG93biAob3IgdXAgb24gbmF0dXJhbCkgdG8gZGVjcmVhc2VcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGVsdGFZIDwgMCB8fCBldmVudC5kZWx0YVggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnZlcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RlY3JlYXNlVm9sdW1lKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2luY3JlYXNlVm9sdW1lKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2Nyb2xsIHVwIChvciBkb3duIG9uIG5hdHVyYWwpIHRvIGluY3JlYXNlXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDAgfHwgZXZlbnQuZGVsdGFYIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW52ZXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbmNyZWFzZVZvbHVtZShzdGVwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kZWNyZWFzZVZvbHVtZShzdGVwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTGlzdGVuIGZvciBtZWRpYSBldmVudHNcbiAgICAgICAgZnVuY3Rpb24gX21lZGlhTGlzdGVuZXJzKCkge1xuICAgICAgICAgICAgLy8gVGltZSBjaGFuZ2Ugb24gbWVkaWFcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAndGltZXVwZGF0ZSBzZWVraW5nJywgX3RpbWVVcGRhdGUpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgbWFudWFsIGNhcHRpb25zXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnLCBfc2Vla01hbnVhbENhcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gRGlzcGxheSBkdXJhdGlvblxuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICdkdXJhdGlvbmNoYW5nZSBsb2FkZWRtZXRhZGF0YScsIF9kaXNwbGF5RHVyYXRpb24pO1xuXG4gICAgICAgICAgICAvLyBIYW5kbGUgdGhlIG1lZGlhIGZpbmlzaGluZ1xuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICdlbmRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIFNob3cgcG9zdGVyIG9uIGVuZFxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycgJiYgY29uZmlnLnNob3dQb3N0ZXJPbkVuZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhclxuICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzdGFydFxuICAgICAgICAgICAgICAgICAgICBfc2VlaygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlLWxvYWQgbWVkaWFcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBidWZmZXIgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAncHJvZ3Jlc3MgcGxheWluZycsIF91cGRhdGVQcm9ncmVzcyk7XG5cbiAgICAgICAgICAgIC8vIEhhbmRsZSBuYXRpdmUgbXV0ZVxuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICd2b2x1bWVjaGFuZ2UnLCBfdXBkYXRlVm9sdW1lKTtcblxuICAgICAgICAgICAgLy8gSGFuZGxlIG5hdGl2ZSBwbGF5L3BhdXNlXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ3BsYXkgcGF1c2UgZW5kZWQnLCBfY2hlY2tQbGF5aW5nKTtcblxuICAgICAgICAgICAgLy8gTG9hZGluZ1xuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICd3YWl0aW5nIGNhbnBsYXkgc2Vla2VkJywgX2NoZWNrTG9hZGluZyk7XG5cbiAgICAgICAgICAgIC8vIENsaWNrIHZpZGVvXG4gICAgICAgICAgICBpZiAoY29uZmlnLmNsaWNrVG9QbGF5ICYmIHBseXIudHlwZSAhPT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgICAgIC8vIFJlLWZldGNoIHRoZSB3cmFwcGVyXG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBfZ2V0RWxlbWVudCgnLicgKyBjb25maWcuY2xhc3Nlcy52aWRlb1dyYXBwZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gQmFpbCBpZiB0aGVyZSdzIG5vIHdyYXBwZXIgKHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbilcbiAgICAgICAgICAgICAgICBpZiAoIXdyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldCBjdXJzb3JcbiAgICAgICAgICAgICAgICB3cmFwcGVyLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuXG4gICAgICAgICAgICAgICAgLy8gT24gY2xpY2sgcGxheSwgcGF1c2Ugb3JlIHJlc3RhcnRcbiAgICAgICAgICAgICAgICBfb24od3JhcHBlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRvdWNoIGRldmljZXMgd2lsbCBqdXN0IHNob3cgY29udHJvbHMgKGlmIHdlJ3JlIGhpZGluZyBjb250cm9scylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5oaWRlQ29udHJvbHMgJiYgcGx5ci5icm93c2VyLmlzVG91Y2ggJiYgIXBseXIubWVkaWEucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGx5ci5tZWRpYS5lbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NlZWsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEaXNhYmxlIHJpZ2h0IGNsaWNrXG4gICAgICAgICAgICBpZiAoY29uZmlnLmRpc2FibGVDb250ZXh0TWVudSkge1xuICAgICAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAnY29udGV4dG1lbnUnLCBmdW5jdGlvbihldmVudCkgeyBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUHJveHkgZXZlbnRzIHRvIGNvbnRhaW5lclxuICAgICAgICAgICAgLy8gQnViYmxlIHVwIGtleSBldmVudHMgZm9yIEVkZ2VcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCBjb25maWcuZXZlbnRzLmNvbmNhdChbJ2tleXVwJywgJ2tleWRvd24nXSkuam9pbignICcpLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsIGV2ZW50LnR5cGUsIHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYW5jZWwgY3VycmVudCBuZXR3b3JrIHJlcXVlc3RzXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xNzRcbiAgICAgICAgZnVuY3Rpb24gX2NhbmNlbFJlcXVlc3RzKCkge1xuICAgICAgICAgICAgaWYgKCFfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBjaGlsZCBzb3VyY2VzXG4gICAgICAgICAgICB2YXIgc291cmNlcyA9IHBseXIubWVkaWEucXVlcnlTZWxlY3RvckFsbCgnc291cmNlJyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBfcmVtb3ZlKHNvdXJjZXNbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgYmxhbmsgdmlkZW8gc3JjIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy8gVGhpcyBpcyB0byBwcmV2ZW50IGEgTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEIGVycm9yXG4gICAgICAgICAgICAvLyBJbmZvOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMyMjMxNTc5L2hvdy10by1wcm9wZXJseS1kaXNwb3NlLW9mLWFuLWh0bWw1LXZpZGVvLWFuZC1jbG9zZS1zb2NrZXQtb3ItY29ubmVjdGlvblxuICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ3NyYycsICdodHRwczovL2Nkbi5zZWx6LmNvbS9wbHlyL2JsYW5rLm1wNCcpO1xuXG4gICAgICAgICAgICAvLyBMb2FkIHRoZSBuZXcgZW1wdHkgc291cmNlXG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgY2FuY2VsIGV4aXN0aW5nIHJlcXVlc3RzXG4gICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9pc3N1ZXMvMTc0XG4gICAgICAgICAgICBwbHlyLm1lZGlhLmxvYWQoKTtcblxuICAgICAgICAgICAgLy8gRGVidWdnaW5nXG4gICAgICAgICAgICBfbG9nKCdDYW5jZWxsZWQgbmV0d29yayByZXF1ZXN0cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVzdHJveSBhbiBpbnN0YW5jZVxuICAgICAgICAvLyBFdmVudCBsaXN0ZW5lcnMgYXJlIHJlbW92ZWQgd2hlbiBlbGVtZW50cyBhcmUgcmVtb3ZlZFxuICAgICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyNTI4MDQ5L2lmLWEtZG9tLWVsZW1lbnQtaXMtcmVtb3ZlZC1hcmUtaXRzLWxpc3RlbmVycy1hbHNvLXJlbW92ZWQtZnJvbS1tZW1vcnlcbiAgICAgICAgZnVuY3Rpb24gX2Rlc3Ryb3koY2FsbGJhY2ssIHJlc3RvcmUpIHtcbiAgICAgICAgICAgIC8vIEJhaWwgaWYgdGhlIGVsZW1lbnQgaXMgbm90IGluaXRpYWxpemVkXG4gICAgICAgICAgICBpZiAoIXBseXIuaW5pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUeXBlIHNwZWNpZmljIHN0dWZmXG4gICAgICAgICAgICBzd2l0Y2ggKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciB0aW1lcnNcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXJzLmJ1ZmZlcmluZyk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5wbGF5aW5nKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEZXN0cm95IFlvdVR1YmUgQVBJXG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuVXAoKTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpbWVvJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVzdHJveSBWaW1lbyBBUElcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiBjbGVhbiB1cCAod2FpdCwgdG8gcHJldmVudCBwb3N0bWVzc2FnZSBlcnJvcnMpXG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQudW5sb2FkKCkudGhlbihjbGVhblVwKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBWaW1lbyBkb2VzIG5vdCBhbHdheXMgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIHRpbWVycy5jbGVhblVwID0gd2luZG93LnNldFRpbWVvdXQoY2xlYW5VcCwgMjAwKTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgbmF0aXZlIHZpZGVvIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVOYXRpdmVDb250cm9scyh0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICAgICAgICAgICAgICBjbGVhblVwKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFuVXAoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVycy5jbGVhblVwKTtcblxuICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gcmVzdG9yZSBvcmlnaW5hbCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKCFfaXMuYm9vbGVhbihyZXN0b3JlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN0b3JlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICAgICAgICAgIGlmIChfaXMuZnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwob3JpZ2luYWwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEJhaWwgaWYgd2UgZG9uJ3QgbmVlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN0b3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgaW5pdCBmbGFnXG4gICAgICAgICAgICAgICAgcGx5ci5pbml0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBjb250YWluZXIgd2l0aCB0aGUgb3JpZ2luYWwgZWxlbWVudCBwcm92aWRlZFxuICAgICAgICAgICAgICAgIHBseXIuY29udGFpbmVyLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG9yaWdpbmFsLCBwbHlyLmNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAvLyBFdmVudFxuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQob3JpZ2luYWwsICdkZXN0cm95ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGEgcGxheWVyXG4gICAgICAgIGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgICAgICAgLy8gQmFpbCBpZiB0aGUgZWxlbWVudCBpcyBpbml0aWFsaXplZFxuICAgICAgICAgICAgaWYgKHBseXIuaW5pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXR1cCB0aGUgZnVsbHNjcmVlbiBhcGlcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4gPSBfZnVsbHNjcmVlbigpO1xuXG4gICAgICAgICAgICAvLyBTbmlmZiBvdXQgdGhlIGJyb3dzZXJcbiAgICAgICAgICAgIHBseXIuYnJvd3NlciA9IF9icm93c2VyU25pZmYoKTtcblxuICAgICAgICAgICAgLy8gQmFpbCBpZiBub3RoaW5nIHRvIHNldHVwXG4gICAgICAgICAgICBpZiAoIV9pcy5odG1sRWxlbWVudChwbHlyLm1lZGlhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9hZCBzYXZlZCBzZXR0aW5ncyBmcm9tIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgX3NldHVwU3RvcmFnZSgpO1xuXG4gICAgICAgICAgICAvLyBTZXQgbWVkaWEgdHlwZSBiYXNlZCBvbiB0YWcgb3IgZGF0YSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vIFN1cHBvcnRlZDogdmlkZW8sIGF1ZGlvLCB2aW1lbywgeW91dHViZVxuICAgICAgICAgICAgdmFyIHRhZ05hbWUgPSBtZWRpYS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAodGFnTmFtZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnR5cGUgICAgID0gbWVkaWEuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKTtcbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkSWQgID0gbWVkaWEuZ2V0QXR0cmlidXRlKCdkYXRhLXZpZGVvLWlkJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICAgICAgICAgIG1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XG4gICAgICAgICAgICAgICAgbWVkaWEucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZpZGVvLWlkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBseXIudHlwZSAgICAgICAgICAgPSB0YWdOYW1lO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5jcm9zc29yaWdpbiAgPSAobWVkaWEuZ2V0QXR0cmlidXRlKCdjcm9zc29yaWdpbicpICE9PSBudWxsKTtcbiAgICAgICAgICAgICAgICBjb25maWcuYXV0b3BsYXkgICAgID0gKGNvbmZpZy5hdXRvcGxheSB8fCAobWVkaWEuZ2V0QXR0cmlidXRlKCdhdXRvcGxheScpICE9PSBudWxsKSk7XG4gICAgICAgICAgICAgICAgY29uZmlnLmxvb3AgICAgICAgICA9IChjb25maWcubG9vcCB8fCAobWVkaWEuZ2V0QXR0cmlidXRlKCdsb29wJykgIT09IG51bGwpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHN1cHBvcnRcbiAgICAgICAgICAgIHBseXIuc3VwcG9ydGVkID0gc3VwcG9ydGVkKHBseXIudHlwZSk7XG5cbiAgICAgICAgICAgIC8vIElmIG5vIG5hdGl2ZSBzdXBwb3J0LCBiYWlsXG4gICAgICAgICAgICBpZiAoIXBseXIuc3VwcG9ydGVkLmJhc2ljKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXcmFwIG1lZGlhXG4gICAgICAgICAgICBwbHlyLmNvbnRhaW5lciA9IF93cmFwKG1lZGlhLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG5cbiAgICAgICAgICAgIC8vIEFsbG93IGZvY3VzIHRvIGJlIGNhcHR1cmVkXG4gICAgICAgICAgICBwbHlyLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XG5cbiAgICAgICAgICAgIC8vIEFkZCBzdHlsZSBob29rXG4gICAgICAgICAgICBfdG9nZ2xlU3R5bGVIb29rKCk7XG5cbiAgICAgICAgICAgIC8vIERlYnVnIGluZm9cbiAgICAgICAgICAgIF9sb2coJycgKyBwbHlyLmJyb3dzZXIubmFtZSArICcgJyArIHBseXIuYnJvd3Nlci52ZXJzaW9uKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgbWVkaWFcbiAgICAgICAgICAgIF9zZXR1cE1lZGlhKCk7XG5cbiAgICAgICAgICAgIC8vIFNldHVwIGludGVyZmFjZVxuICAgICAgICAgICAgLy8gSWYgZW1iZWQgYnV0IG5vdCBmdWxseSBzdXBwb3J0ZWQsIHNldHVwSW50ZXJmYWNlICh0byBhdm9pZCBmbGFzaCBvZiBjb250cm9scykgYW5kIGNhbGwgcmVhZHkgbm93XG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpIHx8IChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkgJiYgIXBseXIuc3VwcG9ydGVkLmZ1bGwpKSB7XG4gICAgICAgICAgICAgICAgLy8gU2V0dXAgVUlcbiAgICAgICAgICAgICAgICBfc2V0dXBJbnRlcmZhY2UoKTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGwgcmVhZHlcbiAgICAgICAgICAgICAgICBfcmVhZHkoKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCB0aXRsZSBvbiBidXR0b24gYW5kIGZyYW1lXG4gICAgICAgICAgICAgICAgX3NldFRpdGxlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN1Y2Nlc3NmdWwgc2V0dXBcbiAgICAgICAgICAgIHBseXIuaW5pdCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCB0aGUgVUlcbiAgICAgICAgZnVuY3Rpb24gX3NldHVwSW50ZXJmYWNlKCkge1xuICAgICAgICAgICAgLy8gRG9uJ3Qgc2V0dXAgaW50ZXJmYWNlIGlmIG5vIHN1cHBvcnRcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIF93YXJuKCdCYXNpYyBzdXBwb3J0IG9ubHknLCBwbHlyLnR5cGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX3JlbW92ZShfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLndyYXBwZXIpKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBsYXJnZSBwbGF5XG4gICAgICAgICAgICAgICAgX3JlbW92ZShfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucGxheSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBuYXRpdmUgY29udHJvbHNcbiAgICAgICAgICAgICAgICBfdG9nZ2xlTmF0aXZlQ29udHJvbHModHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBCYWlsXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbmplY3QgY3VzdG9tIGNvbnRyb2xzIGlmIG5vdCBwcmVzZW50XG4gICAgICAgICAgICB2YXIgY29udHJvbHNNaXNzaW5nID0gIV9nZXRFbGVtZW50cyhjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLndyYXBwZXIpLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChjb250cm9sc01pc3NpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBJbmplY3QgY3VzdG9tIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX2luamVjdENvbnRyb2xzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGVsZW1lbnRzXG4gICAgICAgICAgICBpZiAoIV9maW5kRWxlbWVudHMoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIGNvbnRyb2xzIGFyZSBpbmplY3RlZCwgcmUtYmluZCBsaXN0ZW5lcnMgZm9yIGNvbnRyb2xzXG4gICAgICAgICAgICBpZiAoY29udHJvbHNNaXNzaW5nKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRyb2xMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWVkaWEgZWxlbWVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIF9tZWRpYUxpc3RlbmVycygpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgbmF0aXZlIGNvbnRyb2xzXG4gICAgICAgICAgICBfdG9nZ2xlTmF0aXZlQ29udHJvbHMoKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgZnVsbHNjcmVlblxuICAgICAgICAgICAgX3NldHVwRnVsbHNjcmVlbigpO1xuXG4gICAgICAgICAgICAvLyBDYXB0aW9uc1xuICAgICAgICAgICAgX3NldHVwQ2FwdGlvbnMoKTtcblxuICAgICAgICAgICAgLy8gU2V0IHZvbHVtZVxuICAgICAgICAgICAgX3NldFZvbHVtZSgpO1xuICAgICAgICAgICAgX3VwZGF0ZVZvbHVtZSgpO1xuXG4gICAgICAgICAgICAvLyBSZXNldCB0aW1lIGRpc3BsYXlcbiAgICAgICAgICAgIF90aW1lVXBkYXRlKCk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgVUlcbiAgICAgICAgICAgIF9jaGVja1BsYXlpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwaSA9IHtcbiAgICAgICAgICAgIGdldE9yaWdpbmFsOiAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBvcmlnaW5hbDsgfSxcbiAgICAgICAgICAgIGdldENvbnRhaW5lcjogICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLmNvbnRhaW5lciB9LFxuICAgICAgICAgICAgZ2V0RW1iZWQ6ICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIuZW1iZWQ7IH0sXG4gICAgICAgICAgICBnZXRNZWRpYTogICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5tZWRpYTsgfSxcbiAgICAgICAgICAgIGdldFR5cGU6ICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLnR5cGU7IH0sXG4gICAgICAgICAgICBnZXREdXJhdGlvbjogICAgICAgIF9nZXREdXJhdGlvbixcbiAgICAgICAgICAgIGdldEN1cnJlbnRUaW1lOiAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lOyB9LFxuICAgICAgICAgICAgZ2V0Vm9sdW1lOiAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIubWVkaWEudm9sdW1lOyB9LFxuICAgICAgICAgICAgaXNNdXRlZDogICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIubWVkaWEubXV0ZWQ7IH0sXG4gICAgICAgICAgICBpc1JlYWR5OiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gX2hhc0NsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5yZWFkeSk7IH0sXG4gICAgICAgICAgICBpc0xvYWRpbmc6ICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gX2hhc0NsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5sb2FkaW5nKTsgfSxcbiAgICAgICAgICAgIGlzUGF1c2VkOiAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLm1lZGlhLnBhdXNlZDsgfSxcbiAgICAgICAgICAgIG9uOiAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKSB7IF9vbihwbHlyLmNvbnRhaW5lciwgZXZlbnQsIGNhbGxiYWNrKTsgcmV0dXJuIHRoaXM7IH0sXG4gICAgICAgICAgICBwbGF5OiAgICAgICAgICAgICAgIF9wbGF5LFxuICAgICAgICAgICAgcGF1c2U6ICAgICAgICAgICAgICBfcGF1c2UsXG4gICAgICAgICAgICBzdG9wOiAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyBfcGF1c2UoKTsgX3NlZWsoKTsgfSxcbiAgICAgICAgICAgIHJlc3RhcnQ6ICAgICAgICAgICAgX3NlZWssXG4gICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgICAgIF9yZXdpbmQsXG4gICAgICAgICAgICBmb3J3YXJkOiAgICAgICAgICAgIF9mb3J3YXJkLFxuICAgICAgICAgICAgc2VlazogICAgICAgICAgICAgICBfc2VlayxcbiAgICAgICAgICAgIHNvdXJjZTogICAgICAgICAgICAgX3NvdXJjZSxcbiAgICAgICAgICAgIHBvc3RlcjogICAgICAgICAgICAgX3VwZGF0ZVBvc3RlcixcbiAgICAgICAgICAgIHNldFZvbHVtZTogICAgICAgICAgX3NldFZvbHVtZSxcbiAgICAgICAgICAgIHRvZ2dsZVBsYXk6ICAgICAgICAgX3RvZ2dsZVBsYXksXG4gICAgICAgICAgICB0b2dnbGVNdXRlOiAgICAgICAgIF90b2dnbGVNdXRlLFxuICAgICAgICAgICAgdG9nZ2xlQ2FwdGlvbnM6ICAgICBfdG9nZ2xlQ2FwdGlvbnMsXG4gICAgICAgICAgICB0b2dnbGVGdWxsc2NyZWVuOiAgIF90b2dnbGVGdWxsc2NyZWVuLFxuICAgICAgICAgICAgdG9nZ2xlQ29udHJvbHM6ICAgICBfdG9nZ2xlQ29udHJvbHMsXG4gICAgICAgICAgICBpc0Z1bGxzY3JlZW46ICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5pc0Z1bGxzY3JlZW4gfHwgZmFsc2U7IH0sXG4gICAgICAgICAgICBzdXBwb3J0OiAgICAgICAgICAgIGZ1bmN0aW9uKG1pbWVUeXBlKSB7IHJldHVybiBfc3VwcG9ydE1pbWUocGx5ciwgbWltZVR5cGUpOyB9LFxuICAgICAgICAgICAgZGVzdHJveTogICAgICAgICAgICBfZGVzdHJveVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEV2ZXJ5dGhpbmcgZG9uZVxuICAgICAgICBmdW5jdGlvbiBfcmVhZHkoKSB7XG4gICAgICAgICAgICAvLyBSZWFkeSBldmVudCBhdCBlbmQgb2YgZXhlY3V0aW9uIHN0YWNrXG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdyZWFkeScpO1xuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgICAgIC8vIFNldCBjbGFzcyBob29rIG9uIG1lZGlhIGVsZW1lbnRcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLm1lZGlhLCBkZWZhdWx0cy5jbGFzc2VzLnNldHVwLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gU2V0IGNvbnRhaW5lciBjbGFzcyBmb3IgcmVhZHlcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMucmVhZHksIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBTdG9yZSBhIHJlZmVybmNlIHRvIGluc3RhbmNlXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnBseXIgPSBhcGk7XG5cbiAgICAgICAgICAgIC8vIEF1dG9wbGF5XG4gICAgICAgICAgICBpZiAoY29uZmlnLmF1dG9wbGF5KSB7XG4gICAgICAgICAgICAgICAgX3BsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemUgaW5zdGFuY2VcbiAgICAgICAgX2luaXQoKTtcblxuICAgICAgICAvLyBJZiBpbml0IGZhaWxlZCwgcmV0dXJuIG51bGxcbiAgICAgICAgaWYgKCFwbHlyLmluaXQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFwaTtcbiAgICB9XG5cbiAgICAvLyBMb2FkIGEgc3ByaXRlXG4gICAgZnVuY3Rpb24gbG9hZFNwcml0ZSh1cmwsIGlkKSB7XG4gICAgICAgIHZhciB4ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgLy8gSWYgdGhlIGlkIGlzIHNldCBhbmQgc3ByaXRlIGV4aXN0cywgYmFpbFxuICAgICAgICBpZiAoX2lzLnN0cmluZyhpZCkgJiYgX2lzLmh0bWxFbGVtZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgaWQpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIHBsYWNlaG9sZGVyICh0byBwcmV2ZW50IGxvYWRpbmcgdHdpY2UpXG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuICAgICAgICBpZiAoX2lzLnN0cmluZyhpZCkpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgZG9jdW1lbnQuYm9keS5jaGlsZE5vZGVzWzBdKTtcblxuICAgICAgICAvLyBDaGVjayBmb3IgQ09SUyBzdXBwb3J0XG4gICAgICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4KSB7XG4gICAgICAgICAgICB4Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmplY3QgaGlkZGVuIGRpdiB3aXRoIHNwcml0ZSBvbiBsb2FkXG4gICAgICAgIHgub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0geC5yZXNwb25zZVRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICB4LnNlbmQoKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3Igc3VwcG9ydFxuICAgIGZ1bmN0aW9uIHN1cHBvcnRlZCh0eXBlKSB7XG4gICAgICAgIHZhciBicm93c2VyICAgICA9IF9icm93c2VyU25pZmYoKSxcbiAgICAgICAgICAgIGlzT2xkSUUgICAgID0gKGJyb3dzZXIuaXNJRSAmJiBicm93c2VyLnZlcnNpb24gPD0gOSksXG4gICAgICAgICAgICBpc0lvcyAgICAgICA9IGJyb3dzZXIuaXNJb3MsXG4gICAgICAgICAgICBpc0lwaG9uZSAgICA9IC9pUGhvbmV8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXG4gICAgICAgICAgICBhdWRpbyAgICAgICA9ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKS5jYW5QbGF5VHlwZSxcbiAgICAgICAgICAgIHZpZGVvICAgICAgID0gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpLmNhblBsYXlUeXBlLFxuICAgICAgICAgICAgYmFzaWMsIGZ1bGw7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAgICAgICAgYmFzaWMgPSB2aWRlbztcbiAgICAgICAgICAgICAgICBmdWxsICA9IChiYXNpYyAmJiAoIWlzT2xkSUUgJiYgIWlzSXBob25lKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgICAgICAgICBiYXNpYyA9IGF1ZGlvO1xuICAgICAgICAgICAgICAgIGZ1bGwgID0gKGJhc2ljICYmICFpc09sZElFKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICBiYXNpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZnVsbCAgPSAoIWlzT2xkSUUgJiYgIWlzSW9zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBiYXNpYyA9IChhdWRpbyAmJiB2aWRlbyk7XG4gICAgICAgICAgICAgICAgZnVsbCAgPSAoYmFzaWMgJiYgIWlzT2xkSUUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2ljOiAgYmFzaWMsXG4gICAgICAgICAgICBmdWxsOiAgIGZ1bGxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBTZXR1cCBmdW5jdGlvblxuICAgIGZ1bmN0aW9uIHNldHVwKHRhcmdldHMsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBwbGF5ZXJzXG4gICAgICAgIHZhciBwbGF5ZXJzICAgICA9IFtdLFxuICAgICAgICAgICAgaW5zdGFuY2VzICAgPSBbXSxcbiAgICAgICAgICAgIHNlbGVjdG9yICAgID0gW2RlZmF1bHRzLnNlbGVjdG9ycy5odG1sNSwgZGVmYXVsdHMuc2VsZWN0b3JzLmVtYmVkXS5qb2luKCcsJyk7XG5cbiAgICAgICAgLy8gU2VsZWN0IHRoZSBlbGVtZW50c1xuICAgICAgICBpZiAoX2lzLnN0cmluZyh0YXJnZXRzKSkge1xuICAgICAgICAgICAgLy8gU3RyaW5nIHNlbGVjdG9yIHBhc3NlZFxuICAgICAgICAgICAgdGFyZ2V0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0cyk7XG4gICAgICAgIH0gIGVsc2UgaWYgKF9pcy5odG1sRWxlbWVudCh0YXJnZXRzKSkge1xuICAgICAgICAgICAgLy8gU2luZ2xlIEhUTUxFbGVtZW50IHBhc3NlZFxuICAgICAgICAgICAgdGFyZ2V0cyA9IFt0YXJnZXRzXTtcbiAgICAgICAgfSAgZWxzZSBpZiAoIV9pcy5ub2RlTGlzdCh0YXJnZXRzKSAmJiAhX2lzLmFycmF5KHRhcmdldHMpICYmICFfaXMuc3RyaW5nKHRhcmdldHMpKSAge1xuICAgICAgICAgICAgLy8gTm8gc2VsZWN0b3IgcGFzc2VkLCBwb3NzaWJseSBvcHRpb25zIGFzIGZpcnN0IGFyZ3VtZW50XG4gICAgICAgICAgICAvLyBJZiBvcHRpb25zIGFyZSB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKG9wdGlvbnMpICYmIF9pcy5vYmplY3QodGFyZ2V0cykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGFyZ2V0cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIGRlZmF1bHQgc2VsZWN0b3JcbiAgICAgICAgICAgIHRhcmdldHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgTm9kZUxpc3QgdG8gYXJyYXlcbiAgICAgICAgaWYgKF9pcy5ub2RlTGlzdCh0YXJnZXRzKSkge1xuICAgICAgICAgICAgdGFyZ2V0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRhcmdldHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmFpbCBpZiBkaXNhYmxlZCBvciBubyBiYXNpYyBzdXBwb3J0XG4gICAgICAgIC8vIFlvdSBtYXkgd2FudCB0byBkaXNhYmxlIGNlcnRhaW4gVUFzIGV0Y1xuICAgICAgICBpZiAoIXN1cHBvcnRlZCgpLmJhc2ljIHx8ICF0YXJnZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHRvIGNvbnRhaW5lciBsaXN0XG4gICAgICAgIGZ1bmN0aW9uIGFkZCh0YXJnZXQsIG1lZGlhKSB7XG4gICAgICAgICAgICBpZiAoIV9oYXNDbGFzcyhtZWRpYSwgZGVmYXVsdHMuY2xhc3Nlcy5ob29rKSkge1xuICAgICAgICAgICAgICAgIHBsYXllcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFsd2F5cyB3cmFwIGluIGEgPGRpdj4gZm9yIHN0eWxpbmdcbiAgICAgICAgICAgICAgICAgICAgLy9jb250YWluZXI6ICBfd3JhcChtZWRpYSwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLFxuICAgICAgICAgICAgICAgICAgICAvLyBDb3VsZCBiZSBhIGNvbnRhaW5lciBvciB0aGUgbWVkaWEgaXRzZWxmXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgdGhlIDx2aWRlbz4sIDxhdWRpbz4gb3IgPGRpdj4gKFlvdVR1YmUvVmltZW8pXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhOiAgICAgIG1lZGlhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgdGFyZ2V0cyBoYXZlIG11bHRpcGxlIG1lZGlhIGVsZW1lbnRzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRhcmdldHNbaV07XG5cbiAgICAgICAgICAgIC8vIEdldCBjaGlsZHJlblxuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG1vcmUgdGhhbiBvbmUgbWVkaWEgZWxlbWVudCBjaGlsZCwgd3JhcCB0aGVtXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBjaGlsZHJlbi5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgICAgICBhZGQodGFyZ2V0LCBjaGlsZHJlblt4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChfbWF0Y2hlcyh0YXJnZXQsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIC8vIFRhcmdldCBpcyBtZWRpYSBlbGVtZW50XG4gICAgICAgICAgICAgICAgYWRkKHRhcmdldCwgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIHBsYXllciBpbnN0YW5jZSBmb3IgZWFjaCBlbGVtZW50XG4gICAgICAgIHBsYXllcnMuZm9yRWFjaChmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ICAgICA9IHBsYXllci50YXJnZXQsXG4gICAgICAgICAgICAgICAgbWVkaWEgICAgICAgPSBwbGF5ZXIubWVkaWEsXG4gICAgICAgICAgICAgICAgbWF0Y2ggICAgICAgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gVGhlIHRhcmdldCBlbGVtZW50IGNhbiBhbHNvIGJlIHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICAgICAgICBpZiAobWVkaWEgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldHVwIGEgcGxheWVyIGluc3RhbmNlIGFuZCBhZGQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIENyZWF0ZSBpbnN0YW5jZS1zcGVjaWZpYyBjb25maWdcbiAgICAgICAgICAgIHZhciBkYXRhID0ge307XG5cbiAgICAgICAgICAgIC8vIFRyeSBwYXJzaW5nIGRhdGEgYXR0cmlidXRlIGNvbmZpZ1xuICAgICAgICAgICAgdHJ5IHsgZGF0YSA9IEpTT04ucGFyc2UoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGx5cicpKTsgfVxuICAgICAgICAgICAgY2F0Y2goZSkgeyB9XG5cbiAgICAgICAgICAgIHZhciBjb25maWcgPSBfZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucywgZGF0YSk7XG5cbiAgICAgICAgICAgIC8vIEJhaWwgaWYgbm90IGVuYWJsZWRcbiAgICAgICAgICAgIGlmICghY29uZmlnLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBpbnN0YW5jZVxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFBseXIobWVkaWEsIGNvbmZpZyk7XG5cbiAgICAgICAgICAgIC8vIEdvIHRvIG5leHQgaWYgc2V0dXAgZmFpbGVkXG4gICAgICAgICAgICBpZiAoIV9pcy5vYmplY3QoaW5zdGFuY2UpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGV2ZW50cyBpZiBkZWJ1Z2dpbmdcbiAgICAgICAgICAgIGlmIChjb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gY29uZmlnLmV2ZW50cy5jb25jYXQoWydzZXR1cCcsICdzdGF0ZWNoYW5nZScsICdlbnRlcmZ1bGxzY3JlZW4nLCAnZXhpdGZ1bGxzY3JlZW4nLCAnY2FwdGlvbnNlbmFibGVkJywgJ2NhcHRpb25zZGlzYWJsZWQnXSk7XG5cbiAgICAgICAgICAgICAgICBfb24oaW5zdGFuY2UuZ2V0Q29udGFpbmVyKCksIGV2ZW50cy5qb2luKCcgJyksIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFtjb25maWcubG9nUHJlZml4LCAnZXZlbnQ6JywgZXZlbnQudHlwZV0uam9pbignICcpLCBldmVudC5kZXRhaWwucGx5cik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgICAgICBfZXZlbnQoaW5zdGFuY2UuZ2V0Q29udGFpbmVyKCksICdzZXR1cCcsIHRydWUsIHtcbiAgICAgICAgICAgICAgICBwbHlyOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEFkZCB0byByZXR1cm4gYXJyYXkgZXZlbiBpZiBpdCdzIGFscmVhZHkgc2V0dXBcbiAgICAgICAgICAgIGluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlcztcbiAgICB9XG5cbiAgICAvLyBHZXQgYWxsIGluc3RhbmNlcyB3aXRoaW4gYSBwcm92aWRlZCBjb250YWluZXJcbiAgICBmdW5jdGlvbiBnZXQoY29udGFpbmVyKSB7XG4gICAgICAgIGlmIChfaXMuc3RyaW5nKGNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgIC8vIEdldCBzZWxlY3RvciBpZiBzdHJpbmcgcGFzc2VkXG4gICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSBpZiAoX2lzLnVuZGVmaW5lZChjb250YWluZXIpKSB7XG4gICAgICAgICAgICAvLyBVc2UgYm9keSBieSBkZWZhdWx0IHRvIGdldCBhbGwgb24gcGFnZVxuICAgICAgICAgICAgY29udGFpbmVyID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBIVE1MIGVsZW1lbnRcbiAgICAgICAgaWYgKF9pcy5odG1sRWxlbWVudChjb250YWluZXIpKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLicgKyBkZWZhdWx0cy5jbGFzc2VzLnNldHVwKSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZXMgPSBbXTtcblxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfaXMub2JqZWN0KGVsZW1lbnQucGx5cikpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzLnB1c2goZWxlbWVudC5wbHlyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZXR1cDogICAgICBzZXR1cCxcbiAgICAgICAgc3VwcG9ydGVkOiAgc3VwcG9ydGVkLFxuICAgICAgICBsb2FkU3ByaXRlOiBsb2FkU3ByaXRlLFxuICAgICAgICBnZXQ6ICAgICAgICBnZXRcbiAgICB9O1xufSkpO1xuXG4vLyBDdXN0b20gZXZlbnQgcG9seWZpbGxcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudC9DdXN0b21FdmVudFxuKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwgeyBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkIH07XG4gICAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgICAgcmV0dXJuIGV2dDtcbiAgICB9XG5cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuXG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gQ3VzdG9tRXZlbnQ7XG59KSgpO1xuIiwiLypcbiAgICAgXyBfICAgICAgXyAgICAgICBfXG4gX19ffCAoXykgX19ffCB8IF9fICAoXylfX19cbi8gX198IHwgfC8gX198IHwvIC8gIHwgLyBfX3xcblxcX18gXFwgfCB8IChfX3wgICA8IF8gfCBcXF9fIFxcXG58X19fL198X3xcXF9fX3xffFxcXyhfKS8gfF9fXy9cbiAgICAgICAgICAgICAgICAgICB8X18vXG5cbiBWZXJzaW9uOiAxLjYuMFxuICBBdXRob3I6IEtlbiBXaGVlbGVyXG4gV2Vic2l0ZTogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvXG4gICAgRG9jczogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvL3NsaWNrXG4gICAgUmVwbzogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGlja1xuICBJc3N1ZXM6IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2svaXNzdWVzXG5cbiAqL1xuLyogZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQsIGRlZmluZSwgalF1ZXJ5LCBzZXRJbnRlcnZhbCwgY2xlYXJJbnRlcnZhbCAqL1xuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxuXG59KGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFNsaWNrID0gd2luZG93LlNsaWNrIHx8IHt9O1xuXG4gICAgU2xpY2sgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGluc3RhbmNlVWlkID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBTbGljayhlbGVtZW50LCBzZXR0aW5ncykge1xuXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMsIGRhdGFTZXR0aW5ncztcblxuICAgICAgICAgICAgXy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhcHBlbmRBcnJvd3M6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXBwZW5kRG90czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgYXNOYXZGb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJldkFycm93OiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHRhYmluZGV4PVwiMFwiIHJvbGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgbmV4dEFycm93OiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdGFiaW5kZXg9XCIwXCIgcm9sZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICc1MHB4JyxcbiAgICAgICAgICAgICAgICBjc3NFYXNlOiAnZWFzZScsXG4gICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nOiBmdW5jdGlvbihzbGlkZXIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcm9sZT1cIm5vbmVcIiByb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCIwXCIgLz4nKS50ZXh0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRvdHNDbGFzczogJ3NsaWNrLWRvdHMnLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgICAgICAgICAgICAgICBmYWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgbGF6eUxvYWQ6ICdvbmRlbWFuZCcsXG4gICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzcG9uZFRvOiAnd2luZG93JyxcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgcnRsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZTogJycsXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxuICAgICAgICAgICAgICAgIHN3aXBlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdG91Y2hNb3ZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoVGhyZXNob2xkOiA1LFxuICAgICAgICAgICAgICAgIHVzZUNTUzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FpdEZvckFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxMDAwXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfLmluaXRpYWxzID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9QbGF5VGltZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbjogMCxcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAxLFxuICAgICAgICAgICAgICAgICRkb3RzOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0SGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgICAgIGxvYWRJbmRleDogMCxcbiAgICAgICAgICAgICAgICAkbmV4dEFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgICRwcmV2QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGVDb3VudDogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkZVdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZVRyYWNrOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZXM6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgc3dpcGVMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgICRsaXN0OiBudWxsLFxuICAgICAgICAgICAgICAgIHRvdWNoT2JqZWN0OiB7fSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5zbGlja2VkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscyk7XG5cbiAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5icmVha3BvaW50cyA9IFtdO1xuICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3MgPSBbXTtcbiAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaGlkZGVuID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IG51bGw7XG4gICAgICAgICAgICBfLnJvd0NvdW50ID0gMTtcbiAgICAgICAgICAgIF8uc2hvdWxkQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgXy4kc2xpZGVyID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAwO1xuICAgICAgICAgICAgXy53aW5kb3dUaW1lciA9IG51bGw7XG5cbiAgICAgICAgICAgIGRhdGFTZXR0aW5ncyA9ICQoZWxlbWVudCkuZGF0YSgnc2xpY2snKSB8fCB7fTtcblxuICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8uZGVmYXVsdHMsIHNldHRpbmdzLCBkYXRhU2V0dGluZ3MpO1xuXG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG5cbiAgICAgICAgICAgIF8ub3JpZ2luYWxTZXR0aW5ncyA9IF8ub3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnbW96SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnbW96dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnd2Via2l0SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYXV0b1BsYXkgPSAkLnByb3h5KF8uYXV0b1BsYXksIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUNsZWFyID0gJC5wcm94eShfLmF1dG9QbGF5Q2xlYXIsIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUl0ZXJhdG9yID0gJC5wcm94eShfLmF1dG9QbGF5SXRlcmF0b3IsIF8pO1xuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSA9ICQucHJveHkoXy5jaGFuZ2VTbGlkZSwgXyk7XG4gICAgICAgICAgICBfLmNsaWNrSGFuZGxlciA9ICQucHJveHkoXy5jbGlja0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZWxlY3RIYW5kbGVyID0gJC5wcm94eShfLnNlbGVjdEhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZXRQb3NpdGlvbiA9ICQucHJveHkoXy5zZXRQb3NpdGlvbiwgXyk7XG4gICAgICAgICAgICBfLnN3aXBlSGFuZGxlciA9ICQucHJveHkoXy5zd2lwZUhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5kcmFnSGFuZGxlciA9ICQucHJveHkoXy5kcmFnSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmtleUhhbmRsZXIgPSAkLnByb3h5KF8ua2V5SGFuZGxlciwgXyk7XG5cbiAgICAgICAgICAgIF8uaW5zdGFuY2VVaWQgPSBpbnN0YW5jZVVpZCsrO1xuXG4gICAgICAgICAgICAvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuICAgICAgICAgICAgLy8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKG11c3Qgc3RhcnQgd2l0aCA8KVxuICAgICAgICAgICAgLy8gRXh0cmFjdGVkIGZyb20galF1ZXJ5IHYxLjExIHNvdXJjZVxuICAgICAgICAgICAgXy5odG1sRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKikkLztcblxuXG4gICAgICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcbiAgICAgICAgICAgIF8uaW5pdCh0cnVlKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNsaWNrO1xuXG4gICAgfSgpKTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hY3RpdmF0ZUFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stYWN0aXZlJykuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAnZmFsc2UnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hZGRTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0FkZCA9IGZ1bmN0aW9uKG1hcmt1cCwgaW5kZXgsIGFkZEJlZm9yZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBhZGRCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA8IDAgfHwgKGluZGV4ID49IF8uc2xpZGVDb3VudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgXy4kc2xpZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEJlZm9yZShfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEFmdGVyKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFkZEJlZm9yZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEgJiYgXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgXy4kbGlzdC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRhcmdldEhlaWdodFxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlID0gZnVuY3Rpb24odGFyZ2V0TGVmdCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgYW5pbVByb3BzID0ge30sXG4gICAgICAgICAgICBfID0gdGhpcztcblxuICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gLXRhcmdldExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50TGVmdCA9IC0oXy5jdXJyZW50TGVmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IF8uY3VycmVudExlZnRcbiAgICAgICAgICAgICAgICB9KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogXy5vcHRpb25zLnNwZWVkLFxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IF8ub3B0aW9ucy5lYXNpbmcsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uKG5vdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gTWF0aC5jZWlsKG5vdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgwcHgsJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gTWF0aC5jZWlsKHRhcmdldExlZnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgwcHgsJyArIHRhcmdldExlZnQgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLm9wdGlvbnMuYXNOYXZGb3I7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAmJiBhc05hdkZvciAhPT0gbnVsbCApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gJChhc05hdkZvcikubm90KF8uJHNsaWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNOYXZGb3I7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFzTmF2Rm9yID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAhPT0gbnVsbCAmJiB0eXBlb2YgYXNOYXZGb3IgPT09ICdvYmplY3QnICkge1xuICAgICAgICAgICAgYXNOYXZGb3IuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKS5zbGljaygnZ2V0U2xpY2snKTtcbiAgICAgICAgICAgICAgICBpZighdGFyZ2V0LnVuc2xpY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc2xpZGVIYW5kbGVyKGluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb24gPSBmdW5jdGlvbihzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gXy50cmFuc2Zvcm1UeXBlICsgJyAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnb3BhY2l0eSAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheVRpbWVyID0gc2V0SW50ZXJ2YWwoIF8uYXV0b1BsYXlJdGVyYXRvciwgXy5vcHRpb25zLmF1dG9wbGF5U3BlZWQgKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUNsZWFyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmF1dG9QbGF5VGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIGlmICggIV8ucGF1c2VkICYmICFfLmludGVycnVwdGVkICYmICFfLmZvY3Vzc2VkICkge1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8uZGlyZWN0aW9uID09PSAxICYmICggXy5jdXJyZW50U2xpZGUgKyAxICkgPT09ICggXy5zbGlkZUNvdW50IC0gMSApKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbHNlIGlmICggXy5kaXJlY3Rpb24gPT09IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggXy5jdXJyZW50U2xpZGUgLSAxID09PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlVG8gKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgPSAkKF8ub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ID0gJChfLm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcblxuICAgICAgICAgICAgaWYoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucHJlcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkKCBfLiRuZXh0QXJyb3cgKVxuXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZERvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBpLCBkb3Q7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICAgICAgZG90ID0gJCgnPHVsIC8+JykuYWRkQ2xhc3MoXy5vcHRpb25zLmRvdHNDbGFzcyk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPD0gXy5nZXREb3RDb3VudCgpOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBkb3QuYXBwZW5kKCQoJzxsaSAvPicpLmFwcGVuZChfLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcywgXywgaSkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kZG90cyA9IGRvdC5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kRG90cyk7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuZmluZCgnbGknKS5maXJzdCgpLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRPdXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbiggXy5vcHRpb25zLnNsaWRlICsgJzpub3QoLnNsaWNrLWNsb25lZCknKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleClcbiAgICAgICAgICAgICAgICAuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJywgJChlbGVtZW50KS5hdHRyKCdzdHlsZScpIHx8ICcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1zbGlkZXInKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrID0gKF8uc2xpZGVDb3VudCA9PT0gMCkgP1xuICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLmFwcGVuZFRvKF8uJHNsaWRlcikgOlxuICAgICAgICAgICAgXy4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICBfLiRsaXN0ID0gXy4kc2xpZGVUcmFjay53cmFwKFxuICAgICAgICAgICAgJzxkaXYgYXJpYS1saXZlPVwicG9saXRlXCIgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpO1xuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcygnb3BhY2l0eScsIDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIpLm5vdCgnW3NyY10nKS5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuXG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcblxuICAgICAgICBfLmJ1aWxkRG90cygpO1xuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuXG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3QuYWRkQ2xhc3MoJ2RyYWdnYWJsZScpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYSwgYiwgYywgbmV3U2xpZGVzLCBudW1PZlNsaWRlcywgb3JpZ2luYWxTbGlkZXMsc2xpZGVzUGVyU2VjdGlvbjtcblxuICAgICAgICBuZXdTbGlkZXMgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVyLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAxKSB7XG5cbiAgICAgICAgICAgIHNsaWRlc1BlclNlY3Rpb24gPSBfLm9wdGlvbnMuc2xpZGVzUGVyUm93ICogXy5vcHRpb25zLnJvd3M7XG4gICAgICAgICAgICBudW1PZlNsaWRlcyA9IE1hdGguY2VpbChcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5sZW5ndGggLyBzbGlkZXNQZXJTZWN0aW9uXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IoYSA9IDA7IGEgPCBudW1PZlNsaWRlczsgYSsrKXtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBmb3IoYiA9IDA7IGIgPCBfLm9wdGlvbnMucm93czsgYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGMgPSAwOyBjIDwgXy5vcHRpb25zLnNsaWRlc1BlclJvdzsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gKGEgKiBzbGlkZXNQZXJTZWN0aW9uICsgKChiICogXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyBjKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld1NsaWRlcy5hcHBlbmRDaGlsZChzbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChuZXdTbGlkZXMpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCc6KDEwMCAvIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmUgPSBmdW5jdGlvbihpbml0aWFsLCBmb3JjZVVwZGF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrcG9pbnQsIHRhcmdldEJyZWFrcG9pbnQsIHJlc3BvbmRUb1dpZHRoLCB0cmlnZ2VyQnJlYWtwb2ludCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2xpZGVyV2lkdGggPSBfLiRzbGlkZXIud2lkdGgoKTtcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgJCh3aW5kb3cpLndpZHRoKCk7XG5cbiAgICAgICAgaWYgKF8ucmVzcG9uZFRvID09PSAnd2luZG93Jykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3NsaWRlcicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gc2xpZGVyV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdtaW4nKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IE1hdGgubWluKHdpbmRvd1dpZHRoLCBzbGlkZXJXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5yZXNwb25zaXZlICYmXG4gICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGggJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBmb3IgKGJyZWFrcG9pbnQgaW4gXy5icmVha3BvaW50cykge1xuICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPCBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPiBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gXy5hY3RpdmVCcmVha3BvaW50IHx8IGZvcmNlVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYnJlYWtwb2ludHMgZHVyaW5nIGFuIGFjdHVhbCBicmVhay4gbm90IG9uIGluaXRpYWxpemUuXG4gICAgICAgICAgICBpZiggIWluaXRpYWwgJiYgdHJpZ2dlckJyZWFrcG9pbnQgIT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdicmVha3BvaW50JywgW18sIHRyaWdnZXJCcmVha3BvaW50XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hhbmdlU2xpZGUgPSBmdW5jdGlvbihldmVudCwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgIGluZGV4T2Zmc2V0LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0O1xuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBhIGxpbmssIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgIGlmKCR0YXJnZXQuaXMoJ2EnKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBub3QgdGhlIDxsaT4gZWxlbWVudCAoaWU6IGEgY2hpbGQpLCBmaW5kIHRoZSA8bGk+LlxuICAgICAgICBpZighJHRhcmdldC5pcygnbGknKSkge1xuICAgICAgICAgICAgJHRhcmdldCA9ICR0YXJnZXQuY2xvc2VzdCgnbGknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuZXZlbk9mZnNldCA9IChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApO1xuICAgICAgICBpbmRleE9mZnNldCA9IHVuZXZlbk9mZnNldCA/IDAgOiAoXy5zbGlkZUNvdW50IC0gXy5jdXJyZW50U2xpZGUpICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5tZXNzYWdlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIGluZGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgKyBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2luZGV4JzpcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5kYXRhLmluZGV4ID09PSAwID8gMCA6XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXggfHwgJHRhcmdldC5pbmRleCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jaGVja05hdmlnYWJsZShpbmRleCksIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgJHRhcmdldC5jaGlsZHJlbigpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBuYXZpZ2FibGVzLCBwcmV2TmF2aWdhYmxlO1xuXG4gICAgICAgIG5hdmlnYWJsZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKTtcbiAgICAgICAgcHJldk5hdmlnYWJsZSA9IDA7XG4gICAgICAgIGlmIChpbmRleCA+IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuIGluIG5hdmlnYWJsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZOYXZpZ2FibGUgPSBuYXZpZ2FibGVzW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgJiYgXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihfLnZpc2liaWxpdHlDaGFuZ2UsIF8udmlzaWJpbGl0eSk7XG5cbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ub3JpZW50YXRpb25DaGFuZ2UpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5yZXNpemUpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub2ZmKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcbiAgICAgICAgJChkb2N1bWVudCkub2ZmKCdyZWFkeS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgb3JpZ2luYWxTbGlkZXM7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAxKSB7XG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlcy5jaGlsZHJlbigpLmNoaWxkcmVuKCk7XG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG9yaWdpbmFsU2xpZGVzKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGlja0hhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5zaG91bGRDbGljayA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihyZWZyZXNoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICBfLmNsZWFuVXBFdmVudHMoKTtcblxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5kZXRhY2goKTtcblxuICAgICAgICBpZiAoXy4kZG90cykge1xuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKCBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywnJyk7XG5cbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMucHJldkFycm93ICkpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5uZXh0QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoXy4kc2xpZGVzKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKVxuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdpbmFsU3R5bGluZycpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRsaXN0LmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYXBwZW5kKF8uJHNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfLmNsZWFuVXBSb3dzKCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZXInKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgIF8udW5zbGlja2VkID0gdHJ1ZTtcblxuICAgICAgICBpZighcmVmcmVzaCkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2Rlc3Ryb3knLCBbX10pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICcnO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlID0gZnVuY3Rpb24oc2xpZGVJbmRleCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGVPdXQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrRmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChmaWx0ZXIgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuZmlsdGVyKGZpbHRlcikuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mb2N1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJylcbiAgICAgICAgICAgIC5vbignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycsXG4gICAgICAgICAgICAgICAgJyo6bm90KC5zbGljay1hcnJvdyknLCBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHZhciAkc2YgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy5wYXVzZU9uRm9jdXMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9jdXNzZWQgPSAkc2YuaXMoJzpmb2N1cycpO1xuICAgICAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldEN1cnJlbnQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tDdXJyZW50U2xpZGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBfLmN1cnJlbnRTbGlkZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0RG90Q291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGJyZWFrUG9pbnQgPSAwO1xuICAgICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICAgIHZhciBwYWdlclF0eSA9IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIGlmKCFfLm9wdGlvbnMuYXNOYXZGb3IpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gMSArIE1hdGguY2VpbCgoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnZXJRdHkgLSAxO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRMZWZ0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQsXG4gICAgICAgICAgICB2ZXJ0aWNhbEhlaWdodCxcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIHRhcmdldFNsaWRlO1xuXG4gICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICB2ZXJ0aWNhbEhlaWdodCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IChfLnNsaWRlV2lkdGggKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKHZlcnRpY2FsSGVpZ2h0ICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA+IF8uc2xpZGVDb3VudCAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogXy5zbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogdmVydGljYWxIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSAtIF8uc2xpZGVXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiBfLnNsaWRlV2lkdGgpICogLTEpICsgXy5zbGlkZU9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMSkgKyB2ZXJ0aWNhbE9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCArPSAoXy4kbGlzdC53aWR0aCgpIC0gdGFyZ2V0U2xpZGUub3V0ZXJXaWR0aCgpKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0TGVmdDtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0T3B0aW9uID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBfLm9wdGlvbnNbb3B0aW9uXTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSAwLFxuICAgICAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgICBtYXg7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcbiAgICAgICAgICAgIGNvdW50ZXIgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudCAqIDI7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IG1heCkge1xuICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGJyZWFrUG9pbnQpO1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleGVzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGlkZUNvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkLCBzd2lwZWRTbGlkZSwgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlID8gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgOiAwO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1zbGlkZScpLmVhY2goZnVuY3Rpb24oaW5kZXgsIHNsaWRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlLm9mZnNldExlZnQgLSBjZW50ZXJPZmZzZXQgKyAoJChzbGlkZSkub3V0ZXJXaWR0aCgpIC8gMikgPiAoXy5zd2lwZUxlZnQgKiAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVkU2xpZGUgPSBzbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQgPSBNYXRoLmFicygkKHN3aXBlZFNsaWRlKS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykgLSBfLmN1cnJlbnRTbGlkZSkgfHwgMTtcblxuICAgICAgICAgICAgcmV0dXJuIHNsaWRlc1RyYXZlcnNlZDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nb1RvID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR29UbyA9IGZ1bmN0aW9uKHNsaWRlLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgIGluZGV4OiBwYXJzZUludChzbGlkZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZG9udEFuaW1hdGUpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oY3JlYXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCEkKF8uJHNsaWRlcikuaGFzQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJykpIHtcblxuICAgICAgICAgICAgJChfLiRzbGlkZXIpLmFkZENsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuXG4gICAgICAgICAgICBfLmJ1aWxkUm93cygpO1xuICAgICAgICAgICAgXy5idWlsZE91dCgpO1xuICAgICAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICAgICAgXy5zdGFydExvYWQoKTtcbiAgICAgICAgICAgIF8ubG9hZFNsaWRlcigpO1xuICAgICAgICAgICAgXy5pbml0aWFsaXplRXZlbnRzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSh0cnVlKTtcbiAgICAgICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcmVhdGlvbikge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2luaXQnLCBbX10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLmluaXRBREEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIF8uJHNsaWRlcy5hZGQoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hdHRyKCdyb2xlJywgJ2xpc3Rib3gnKTtcblxuICAgICAgICBfLiRzbGlkZXMubm90KF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgJ3JvbGUnOiAnb3B0aW9uJyxcbiAgICAgICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgaSArICcnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF8uJGRvdHMuYXR0cigncm9sZScsICd0YWJsaXN0JykuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICdwcmVzZW50YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6ICdmYWxzZScsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogJ25hdmlnYXRpb24nICsgXy5pbnN0YW5jZVVpZCArIGkgKyAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBpICsgJydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZpcnN0KCkuYXR0cignYXJpYS1zZWxlY3RlZCcsICd0cnVlJykuZW5kKClcbiAgICAgICAgICAgICAgICAuZmluZCgnYnV0dG9uJykuYXR0cigncm9sZScsICdidXR0b24nKS5lbmQoKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCdkaXYnKS5hdHRyKCdyb2xlJywgJ3Rvb2xiYXInKTtcbiAgICAgICAgfVxuICAgICAgICBfLmFjdGl2YXRlQURBKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXREb3RFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cykub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCdcbiAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciA9PT0gdHJ1ZSApIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucGF1c2VPbkhvdmVyICkge1xuXG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG5cbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdzdGFydCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnbW92ZSdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbihfLnZpc2liaWxpdHlDaGFuZ2UsICQucHJveHkoXy52aXNpYmlsaXR5LCBfKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ub3JpZW50YXRpb25DaGFuZ2UsIF8pKTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLnJlc2l6ZSwgXykpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub24oJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vbignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdyZWFkeS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRVSSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5zaG93KCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmtleUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgIC8vRG9udCBzbGlkZSBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgZm9ybSBmaWVsZHMgYW5kIGFycm93IGtleXMgYXJlIHByZXNzZWRcbiAgICAgICAgaWYoIWV2ZW50LnRhcmdldC50YWdOYW1lLm1hdGNoKCdURVhUQVJFQXxJTlBVVHxTRUxFQ1QnKSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAnbmV4dCcgOiAgJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAncHJldmlvdXMnIDogJ25leHQnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGxvYWRSYW5nZSwgY2xvbmVSYW5nZSwgcmFuZ2VTdGFydCwgcmFuZ2VFbmQ7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZEltYWdlcyhpbWFnZXNTY29wZSkge1xuXG4gICAgICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIGltYWdlc1Njb3BlKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbGF6eScpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCAxMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmMnLCBpbWFnZVNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAxIH0sIDIwMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFtfLCBpbWFnZSwgaW1hZ2VTb3VyY2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5jdXJyZW50U2xpZGUgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IE1hdGgubWF4KDAsIF8uY3VycmVudFNsaWRlIC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gMiArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpICsgXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5vcHRpb25zLmluZmluaXRlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIF8uY3VycmVudFNsaWRlIDogXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICByYW5nZUVuZCA9IE1hdGguY2VpbChyYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydCA+IDApIHJhbmdlU3RhcnQtLTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbmQgPD0gXy5zbGlkZUNvdW50KSByYW5nZUVuZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZFJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kKTtcbiAgICAgICAgbG9hZEltYWdlcyhsb2FkUmFuZ2UpO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoMCwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZShfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICogLTEpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sb2FkU2xpZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uaW5pdFVJKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ3Byb2dyZXNzaXZlJykge1xuICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubmV4dCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja05leHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBhdXNlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGF1c2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG4gICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGxheSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICBfLm9wdGlvbnMuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucG9zdFNsaWRlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FmdGVyQ2hhbmdlJywgW18sIGluZGV4XSk7XG5cbiAgICAgICAgICAgIF8uYW5pbWF0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1ByZXYgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByb2dyZXNzaXZlTGF6eUxvYWQgPSBmdW5jdGlvbiggdHJ5Q291bnQgKSB7XG5cbiAgICAgICAgdHJ5Q291bnQgPSB0cnlDb3VudCB8fCAxO1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICRpbWdzVG9Mb2FkID0gJCggJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyICksXG4gICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgIGltYWdlU291cmNlLFxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQ7XG5cbiAgICAgICAgaWYgKCAkaW1nc1RvTG9hZC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIGltYWdlID0gJGltZ3NUb0xvYWQuZmlyc3QoKTtcbiAgICAgICAgICAgIGltYWdlU291cmNlID0gaW1hZ2UuYXR0cignZGF0YS1sYXp5Jyk7XG4gICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCAnc3JjJywgaW1hZ2VTb3VyY2UgKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5JylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZGVkJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG4gICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmICggdHJ5Q291bnQgPCAzICkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiB0cnkgdG8gbG9hZCB0aGUgaW1hZ2UgMyB0aW1lcyxcbiAgICAgICAgICAgICAgICAgICAgICogbGVhdmUgYSBzbGlnaHQgZGVsYXkgc28gd2UgZG9uJ3QgZ2V0XG4gICAgICAgICAgICAgICAgICAgICAqIHNlcnZlcnMgYmxvY2tpbmcgdGhlIHJlcXVlc3QuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCggdHJ5Q291bnQgKyAxICk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhbGxJbWFnZXNMb2FkZWQnLCBbIF8gXSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oIGluaXRpYWxpemluZyApIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGN1cnJlbnRTbGlkZSwgbGFzdFZpc2libGVJbmRleDtcblxuICAgICAgICBsYXN0VmlzaWJsZUluZGV4ID0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcblxuICAgICAgICAvLyBpbiBub24taW5maW5pdGUgc2xpZGVycywgd2UgZG9uJ3Qgd2FudCB0byBnbyBwYXN0IHRoZVxuICAgICAgICAvLyBsYXN0IHZpc2libGUgaW5kZXguXG4gICAgICAgIGlmKCAhXy5vcHRpb25zLmluZmluaXRlICYmICggXy5jdXJyZW50U2xpZGUgPiBsYXN0VmlzaWJsZUluZGV4ICkpIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gbGFzdFZpc2libGVJbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGxlc3Mgc2xpZGVzIHRoYW4gdG8gc2hvdywgZ28gdG8gc3RhcnQuXG4gICAgICAgIGlmICggXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuXG4gICAgICAgIF8uZGVzdHJveSh0cnVlKTtcblxuICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzLCB7IGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlIH0pO1xuXG4gICAgICAgIF8uaW5pdCgpO1xuXG4gICAgICAgIGlmKCAhaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBjdXJyZW50U2xpZGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWdpc3RlckJyZWFrcG9pbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBicmVha3BvaW50LCBjdXJyZW50QnJlYWtwb2ludCwgbCxcbiAgICAgICAgICAgIHJlc3BvbnNpdmVTZXR0aW5ncyA9IF8ub3B0aW9ucy5yZXNwb25zaXZlIHx8IG51bGw7XG5cbiAgICAgICAgaWYgKCAkLnR5cGUocmVzcG9uc2l2ZVNldHRpbmdzKSA9PT0gJ2FycmF5JyAmJiByZXNwb25zaXZlU2V0dGluZ3MubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IF8ub3B0aW9ucy5yZXNwb25kVG8gfHwgJ3dpbmRvdyc7XG5cbiAgICAgICAgICAgIGZvciAoIGJyZWFrcG9pbnQgaW4gcmVzcG9uc2l2ZVNldHRpbmdzICkge1xuXG4gICAgICAgICAgICAgICAgbCA9IF8uYnJlYWtwb2ludHMubGVuZ3RoLTE7XG4gICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uYnJlYWtwb2ludDtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIGFuZCBjdXQgb3V0IGFueSBleGlzdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBvbmVzIHdpdGggdGhlIHNhbWUgYnJlYWtwb2ludCBudW1iZXIsIHdlIGRvbid0IHdhbnQgZHVwZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNwbGljZShsLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbY3VycmVudEJyZWFrcG9pbnRdID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLnNldHRpbmdzO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICggXy5vcHRpb25zLm1vYmlsZUZpcnN0ICkgPyBhLWIgOiBiLWE7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVUcmFja1xuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAmJiBfLmN1cnJlbnRTbGlkZSAhPT0gMCkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG5cbiAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuICAgICAgICBfLmJ1aWxkRG90cygpO1xuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoZmFsc2UsIHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgXy5wYXVzZWQgPSAhXy5vcHRpb25zLmF1dG9wbGF5O1xuICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3JlSW5pdCcsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgIT09IF8ud2luZG93V2lkdGgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfLndpbmRvd0RlbGF5KTtcbiAgICAgICAgICAgIF8ud2luZG93RGVsYXkgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgICAgICAgICBpZiggIV8udW5zbGlja2VkICkgeyBfLnNldFBvc2l0aW9uKCk7IH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVtb3ZlU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tSZW1vdmUgPSBmdW5jdGlvbihpbmRleCwgcmVtb3ZlQmVmb3JlLCByZW1vdmVBbGwpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmVtb3ZlQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IDAgOiBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAtLWluZGV4IDogaW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDwgMSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBfLnNsaWRlQ291bnQgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmIChyZW1vdmVBbGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpbmRleCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0Q1NTID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge30sXG4gICAgICAgICAgICB4LCB5O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcbiAgICAgICAgeSA9IF8ucG9zaXRpb25Qcm9wID09ICd0b3AnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcblxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgJyArIHkgKyAnLCAwcHgpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXREaW1lbnNpb25zID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICgnMHB4ICcgKyBfLm9wdGlvbnMuY2VudGVyUGFkZGluZylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJGxpc3QuaGVpZ2h0KF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IChfLm9wdGlvbnMuY2VudGVyUGFkZGluZyArICcgMHB4JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8ubGlzdFdpZHRoID0gXy4kbGlzdC53aWR0aCgpO1xuICAgICAgICBfLmxpc3RIZWlnaHQgPSBfLiRsaXN0LmhlaWdodCgpO1xuXG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGggLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKChfLnNsaWRlV2lkdGggKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aCg1MDAwICogXy5zbGlkZUNvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmhlaWdodChNYXRoLmNlaWwoKF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVyV2lkdGgodHJ1ZSkgLSBfLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS53aWR0aChfLnNsaWRlV2lkdGggLSBvZmZzZXQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRGYWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLnNsaWRlV2lkdGggKiBpbmRleCkgKiAtMTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5jc3Moe1xuICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmNzcygnaGVpZ2h0JywgdGFyZ2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRPcHRpb24gPVxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlja1NldE9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhY2NlcHRzIGFyZ3VtZW50cyBpbiBmb3JtYXQgb2Y6XG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNpbmdsZSBvcHRpb24ncyB2YWx1ZTpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2V0IG9mIHJlc3BvbnNpdmUgb3B0aW9uczpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCAncmVzcG9uc2l2ZScsIFt7fSwgLi4uXSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciB1cGRhdGluZyBtdWx0aXBsZSB2YWx1ZXMgYXQgb25jZSAobm90IHJlc3BvbnNpdmUpXG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgeyAnb3B0aW9uJzogdmFsdWUsIC4uLiB9LCByZWZyZXNoIClcbiAgICAgICAgICovXG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBsLCBpdGVtLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoID0gZmFsc2UsIHR5cGU7XG5cbiAgICAgICAgaWYoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdvYmplY3QnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHR5cGUgPSAnbXVsdGlwbGUnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdzdHJpbmcnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzJdO1xuXG4gICAgICAgICAgICBpZiAoIGFyZ3VtZW50c1swXSA9PT0gJ3Jlc3BvbnNpdmUnICYmICQudHlwZSggYXJndW1lbnRzWzFdICkgPT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3Jlc3BvbnNpdmUnO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgYXJndW1lbnRzWzFdICE9PSAndW5kZWZpbmVkJyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2luZ2xlJztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHR5cGUgPT09ICdzaW5nbGUnICkge1xuXG4gICAgICAgICAgICBfLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ211bHRpcGxlJyApIHtcblxuICAgICAgICAgICAgJC5lYWNoKCBvcHRpb24gLCBmdW5jdGlvbiggb3B0LCB2YWwgKSB7XG5cbiAgICAgICAgICAgICAgICBfLm9wdGlvbnNbb3B0XSA9IHZhbDtcblxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAncmVzcG9uc2l2ZScgKSB7XG5cbiAgICAgICAgICAgIGZvciAoIGl0ZW0gaW4gdmFsdWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggJC50eXBlKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSApICE9PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlID0gWyB2YWx1ZVtpdGVtXSBdO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsID0gXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSByZXNwb25zaXZlIG9iamVjdCBhbmQgc3BsaWNlIG91dCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCggdmFsdWVbaXRlbV0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHJlZnJlc2ggKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXREaW1lbnNpb25zKCk7XG5cbiAgICAgICAgXy5zZXRIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNldENTUyhfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2V0RmFkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3NldFBvc2l0aW9uJywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UHJvcHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuXG4gICAgICAgIF8ucG9zaXRpb25Qcm9wID0gXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlID8gJ3RvcCcgOiAnbGVmdCc7XG5cbiAgICAgICAgaWYgKF8ucG9zaXRpb25Qcm9wID09PSAndG9wJykge1xuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5XZWJraXRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5tc1RyYW5zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy51c2VDU1MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmZhZGUgKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBfLm9wdGlvbnMuekluZGV4ID09PSAnbnVtYmVyJyApIHtcbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnpJbmRleCA8IDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IF8uZGVmYXVsdHMuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5PVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnT1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW8tdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnT1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ01velRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1vei10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdNb3pUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS5Nb3pQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS53ZWJraXRUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnd2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdtc1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1zLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ21zVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAndHJhbnNpdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgXy50cmFuc2Zvcm1zRW5hYmxlZCA9IF8ub3B0aW9ucy51c2VUcmFuc2Zvcm0gJiYgKF8uYW5pbVR5cGUgIT09IG51bGwgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpO1xuICAgIH07XG5cblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldCwgYWxsU2xpZGVzLCBpbmRleE9mZnNldCwgcmVtYWluZGVyO1xuXG4gICAgICAgIGFsbFNsaWRlcyA9IF8uJHNsaWRlclxuICAgICAgICAgICAgLmZpbmQoJy5zbGljay1zbGlkZScpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jdXJyZW50Jyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gY2VudGVyT2Zmc2V0ICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSAxKSAtIGNlbnRlck9mZnNldCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4IC0gY2VudGVyT2Zmc2V0LCBpbmRleCArIGNlbnRlck9mZnNldCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gY2VudGVyT2Zmc2V0ICsgMSwgaW5kZXhPZmZzZXQgKyBjZW50ZXJPZmZzZXQgKyAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShhbGxTbGlkZXMubGVuZ3RoIC0gMSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gXy5zbGlkZUNvdW50IC0gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5lcShpbmRleClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSkge1xuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCwgaW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsbFNsaWRlcy5sZW5ndGggPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICByZW1haW5kZXIgPSBfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIGluZGV4T2Zmc2V0ID0gXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIGluZGV4IDogaW5kZXg7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgJiYgKF8uc2xpZGVDb3VudCAtIGluZGV4KSA8IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gcmVtYWluZGVyKSwgaW5kZXhPZmZzZXQgKyByZW1haW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQsIGluZGV4T2Zmc2V0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdvbmRlbWFuZCcpIHtcbiAgICAgICAgICAgIF8ubGF6eUxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXR1cEluZmluaXRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgc2xpZGVJbmRleCwgaW5maW5pdGVDb3VudDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5jZW50ZXJNb2RlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlICYmIF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBzbGlkZUluZGV4ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gXy5zbGlkZUNvdW50OyBpID4gKF8uc2xpZGVDb3VudCAtXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50KTsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGluZmluaXRlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggKyBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oXy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoJ3NsaWNrLWNsb25lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKS5maW5kKCdbaWRdJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdpZCcsICcnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24oIHRvZ2dsZSApIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICF0b2dnbGUgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRvZ2dsZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2VsZWN0SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHZhciB0YXJnZXRFbGVtZW50ID1cbiAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5pcygnLnNsaWNrLXNsaWRlJykgP1xuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KSA6XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpLnBhcmVudHMoJy5zbGljay1zbGlkZScpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHRhcmdldEVsZW1lbnQuYXR0cignZGF0YS1zbGljay1pbmRleCcpKTtcblxuICAgICAgICBpZiAoIWluZGV4KSBpbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKGluZGV4KTtcbiAgICAgICAgICAgIF8uYXNOYXZGb3IoaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLnNsaWRlSGFuZGxlcihpbmRleCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWRlSGFuZGxlciA9IGZ1bmN0aW9uKGluZGV4LCBzeW5jLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciB0YXJnZXRTbGlkZSwgYW5pbVNsaWRlLCBvbGRTbGlkZSwgc2xpZGVMZWZ0LCB0YXJnZXRMZWZ0ID0gbnVsbCxcbiAgICAgICAgICAgIF8gPSB0aGlzLCBuYXZUYXJnZXQ7XG5cbiAgICAgICAgc3luYyA9IHN5bmMgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlICYmIF8ub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlICYmIF8uY3VycmVudFNsaWRlID09PSBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYXNOYXZGb3IoaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0U2xpZGUgPSBpbmRleDtcbiAgICAgICAgdGFyZ2V0TGVmdCA9IF8uZ2V0TGVmdCh0YXJnZXRTbGlkZSk7XG4gICAgICAgIHNsaWRlTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy5jdXJyZW50TGVmdCA9IF8uc3dpcGVMZWZ0ID09PSBudWxsID8gc2xpZGVMZWZ0IDogXy5zd2lwZUxlZnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiBfLmdldERvdENvdW50KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0U2xpZGUgPCAwKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50IC0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCArIHRhcmdldFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFNsaWRlID49IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlIC0gXy5zbGlkZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGU7XG4gICAgICAgIH1cblxuICAgICAgICBfLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JlZm9yZUNoYW5nZScsIFtfLCBfLmN1cnJlbnRTbGlkZSwgYW5pbVNsaWRlXSk7XG5cbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBhbmltU2xpZGU7XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFzTmF2Rm9yICkge1xuXG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBfLmdldE5hdlRhcmdldCgpO1xuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gbmF2VGFyZ2V0LnNsaWNrKCdnZXRTbGljaycpO1xuXG4gICAgICAgICAgICBpZiAoIG5hdlRhcmdldC5zbGlkZUNvdW50IDw9IG5hdlRhcmdldC5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgICAgICBuYXZUYXJnZXQuc2V0U2xpZGVDbGFzc2VzKF8uY3VycmVudFNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlT3V0KG9sZFNsaWRlKTtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlKGFuaW1TbGlkZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBfLmFuaW1hdGVTbGlkZSh0YXJnZXRMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5oaWRlKCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHhEaXN0LCB5RGlzdCwgciwgc3dpcGVBbmdsZSwgXyA9IHRoaXM7XG5cbiAgICAgICAgeERpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCAtIF8udG91Y2hPYmplY3QuY3VyWDtcbiAgICAgICAgeURpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSAtIF8udG91Y2hPYmplY3QuY3VyWTtcbiAgICAgICAgciA9IE1hdGguYXRhbjIoeURpc3QsIHhEaXN0KTtcblxuICAgICAgICBzd2lwZUFuZ2xlID0gTWF0aC5yb3VuZChyICogMTgwIC8gTWF0aC5QSSk7XG4gICAgICAgIGlmIChzd2lwZUFuZ2xlIDwgMCkge1xuICAgICAgICAgICAgc3dpcGVBbmdsZSA9IDM2MCAtIE1hdGguYWJzKHN3aXBlQW5nbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDQ1KSAmJiAoc3dpcGVBbmdsZSA+PSAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA8PSAzNjApICYmIChzd2lwZUFuZ2xlID49IDMxNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPj0gMTM1KSAmJiAoc3dpcGVBbmdsZSA8PSAyMjUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ3JpZ2h0JyA6ICdsZWZ0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMTM1KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG93bic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAndXAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICd2ZXJ0aWNhbCc7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRW5kID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZUNvdW50LFxuICAgICAgICAgICAgZGlyZWN0aW9uO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICBfLnNob3VsZENsaWNrID0gKCBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gMTAgKSA/IGZhbHNlIDogdHJ1ZTtcblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuY3VyWCA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPT09IHRydWUgKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZWRnZScsIFtfLCBfLnN3aXBlRGlyZWN0aW9uKCkgXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPj0gXy50b3VjaE9iamVjdC5taW5Td2lwZSApIHtcblxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCBkaXJlY3Rpb24gKSB7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdkb3duJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tOYXZpZ2FibGUoIF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCkgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tOYXZpZ2FibGUoIF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCkgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcblxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCBkaXJlY3Rpb24gIT0gJ3ZlcnRpY2FsJyApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBzbGlkZUNvdW50ICk7XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzd2lwZScsIFtfLCBkaXJlY3Rpb24gXSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3RhcnRYICE9PSBfLnRvdWNoT2JqZWN0LmN1clggKSB7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggXy5jdXJyZW50U2xpZGUgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgoXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkgfHwgKCdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCAmJiBfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IGZhbHNlICYmIGV2ZW50LnR5cGUuaW5kZXhPZignbW91c2UnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgPSBldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGggOiAxO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RXaWR0aCAvIF8ub3B0aW9uc1xuICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0SGVpZ2h0IC8gXy5vcHRpb25zXG4gICAgICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLmFjdGlvbikge1xuXG4gICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZVN0YXJ0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbW92ZSc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZU1vdmUoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVFbmQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVNb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBlZGdlV2FzSGl0ID0gZmFsc2UsXG4gICAgICAgICAgICBjdXJMZWZ0LCBzd2lwZURpcmVjdGlvbiwgc3dpcGVMZW5ndGgsIHBvc2l0aW9uT2Zmc2V0LCB0b3VjaGVzO1xuXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgPyBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgOiBudWxsO1xuXG4gICAgICAgIGlmICghXy5kcmFnZ2luZyB8fCB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3coXy50b3VjaE9iamVjdC5jdXJYIC0gXy50b3VjaE9iamVjdC5zdGFydFgsIDIpKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChcbiAgICAgICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clkgLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlRGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgIGlmIChzd2lwZURpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gMSA6IC0xKSAqIChfLnRvdWNoT2JqZWN0LmN1clggPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbk9mZnNldCA9IF8udG91Y2hPYmplY3QuY3VyWSA+IF8udG91Y2hPYmplY3Quc3RhcnRZID8gMSA6IC0xO1xuICAgICAgICB9XG5cblxuICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmICgoXy5jdXJyZW50U2xpZGUgPT09IDAgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdyaWdodCcpIHx8IChfLmN1cnJlbnRTbGlkZSA+PSBfLmdldERvdENvdW50KCkgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdsZWZ0JykpIHtcbiAgICAgICAgICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggKiBfLm9wdGlvbnMuZWRnZUZyaWN0aW9uO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIChzd2lwZUxlbmd0aCAqIChfLiRsaXN0LmhlaWdodCgpIC8gXy5saXN0V2lkdGgpKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlIHx8IF8ub3B0aW9ucy50b3VjaE1vdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0Q1NTKF8uc3dpcGVMZWZ0KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdG91Y2hlcztcblxuICAgICAgICBfLmludGVycnVwdGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCAhPT0gMSB8fCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRYID0gXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRZID0gXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IHRydWU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrVW5maWx0ZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJHNsaWRlc0NhY2hlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kcHJldkFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJG5leHRBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgJycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bnNsaWNrID0gZnVuY3Rpb24oZnJvbUJyZWFrcG9pbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCd1bnNsaWNrJywgW18sIGZyb21CcmVha3BvaW50XSk7XG4gICAgICAgIF8uZGVzdHJveSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmXG4gICAgICAgICAgICBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmXG4gICAgICAgICAgICAhXy5vcHRpb25zLmluZmluaXRlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gMSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZURvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgIC5lcShNYXRoLmZsb29yKF8uY3VycmVudFNsaWRlIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBpZiAoIGRvY3VtZW50W18uaGlkZGVuXSApIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgICQuZm4uc2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgb3B0ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsID0gXy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcmV0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0ID09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIF9baV0uc2xpY2sgPSBuZXcgU2xpY2soX1tpXSwgb3B0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXQgPSBfW2ldLnNsaWNrW29wdF0uYXBwbHkoX1tpXS5zbGljaywgYXJncyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPSAndW5kZWZpbmVkJykgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXztcbiAgICB9O1xuXG59KSk7XG4iLCJcbiQod2luZG93KS5iaW5kKCcgbG9hZCByZXNpemUgb3JpZW50YXRpb25DaGFuZ2UgJywgZnVuY3Rpb24gKCkge1xuICAgdmFyIGZvb3RlciA9ICQoXCIjZm9vdGVyLWNvbnRhaW5lclwiKTtcbiAgIHZhciBwb3MgPSBmb290ZXIucG9zaXRpb24oKTtcbiAgIHZhciBoZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG4gICBoZWlnaHQgPSBoZWlnaHQgLSBwb3MudG9wO1xuICAgaGVpZ2h0ID0gaGVpZ2h0IC0gZm9vdGVyLmhlaWdodCgpIC0xO1xuXG4gICBmdW5jdGlvbiBzdGlja3lGb290ZXIoKSB7XG4gICAgIGZvb3Rlci5jc3Moe1xuICAgICAgICAgJ21hcmdpbi10b3AnOiBoZWlnaHQgKyAncHgnXG4gICAgIH0pO1xuICAgfVxuXG4gICBpZiAoaGVpZ2h0ID4gMCkge1xuICAgICBzdGlja3lGb290ZXIoKTtcbiAgIH1cbn0pO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCdcblxuICB2YXIgZGlzcGxheU5vbmVNZXNzYWdlID0gW1xuICAgICdZb3UgaGF2ZSBhIFdheXBvaW50IGVsZW1lbnQgd2l0aCBkaXNwbGF5IG5vbmUuIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uICcsXG4gICAgJ3doeSB0aGlzIGlzIGEgYmFkIGlkZWEgcmVhZCAnLFxuICAgICdodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9ndWlkZXMvZGVidWdnaW5nLyNkaXNwbGF5LW5vbmUnXG4gIF0uam9pbignJylcbiAgdmFyIGZpeGVkTWVzc2FnZSA9IFtcbiAgICAnWW91IGhhdmUgYSBXYXlwb2ludCBlbGVtZW50IHdpdGggZml4ZWQgcG9zaXRpb25pbmcuIEZvciBtb3JlICcsXG4gICAgJ2luZm9ybWF0aW9uIG9uIHdoeSB0aGlzIGlzIGEgYmFkIGlkZWEgcmVhZCAnLFxuICAgICdodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9ndWlkZXMvZGVidWdnaW5nLyNmaXhlZC1wb3NpdGlvbidcbiAgXS5qb2luKCcnKVxuXG4gIGZ1bmN0aW9uIGNoZWNrV2F5cG9pbnRTdHlsZXMoKSB7XG4gICAgdmFyIG9yaWdpbmFsUmVmcmVzaCA9IHdpbmRvdy5XYXlwb2ludC5Db250ZXh0LnByb3RvdHlwZS5yZWZyZXNoXG5cbiAgICB3aW5kb3cuV2F5cG9pbnQuQ29udGV4dC5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgYXhpcyBpbiB0aGlzLndheXBvaW50cykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy53YXlwb2ludHNbYXhpc10pIHtcbiAgICAgICAgICB2YXIgd2F5cG9pbnQgPSB0aGlzLndheXBvaW50c1theGlzXVtrZXldXG4gICAgICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUod2F5cG9pbnQuZWxlbWVudClcbiAgICAgICAgICBpZiAoIXdheXBvaW50LmVuYWJsZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdHlsZSAmJiBzdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZGlzcGxheU5vbmVNZXNzYWdlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3R5bGUgJiYgc3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZml4ZWRNZXNzYWdlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9yaWdpbmFsUmVmcmVzaC5jYWxsKHRoaXMpXG4gICAgfVxuICB9XG5cbiAgY2hlY2tXYXlwb2ludFN0eWxlcygpXG59KCkpXG4iLCIvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIHdpYXdVbml2ZXJzYWxBamF4LmpzIHYxLjBcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG4hZnVuY3Rpb24oJCkge1xuXG5cdCQoZnVuY3Rpb24oKXtcblxuXG5cdFx0Ly8gQ2xpY2sgdGhlIGJ1dHRvbiFcblx0XHQkKFwiLmFyY2hpdmVfX2xvYWQtbW9yZSBhXCIpLmNsaWNrKCBmdW5jdGlvbigpe1xuXG5cdFx0XHQvLyBhbGVydCgnc2F5IHdoYWFhPycpO1xuXG5cdFx0XHR2YXIgdXJsID0gJCh0aGlzKS5hdHRyKCdocmVmJyksXG5cdFx0XHRcdHNwbGl0X3VybCA9IHVybC5zbGljZSgwLCAtMSkuc3BsaXQoJy8nKSxcblx0XHRcdFx0cGFnZV9udW0gPSBzcGxpdF91cmxbIHNwbGl0X3VybC5sZW5ndGgtMV0sXG5cdFx0XHRcdHZhcnMgPSB7fTtcblxuXG5cdFx0XHRpZiAoIGlzTmFOKHBhZ2VfbnVtKSApe1xuXHRcdFx0XHRwYWdlX251bSA9IHNwbGl0X3VybFsgc3BsaXRfdXJsLmxlbmd0aC0yXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHVwIHRoZSBjb3JyZWN0IHZhcnNcblx0XHRcdGlmICggJChcIiN3aWF3X3RheG9ub215XCIpLmxlbmd0aCA+PSAxKSB7XG5cdFx0XHRcdHZhcnMudGF4b25vbXkgXHQ9ICQoXCIjd2lhd190YXhvbm9teVwiKS52YWwoKTtcblx0XHRcdFx0dmFycy50ZXJtX2lkIFx0PSAkKFwiI3dpYXdfdGVybV9pZFwiKS52YWwoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhcnMucG9zdF90eXBlIFx0PSAkKFwiI3dpYXdfcG9zdF90eXBlXCIpLnZhbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zb2xlLmxvZyhzcGxpdF91cmwpO1xuXHRcdFx0Y29uc29sZS5sb2codmFycyk7XG5cdFx0XHRjb25zb2xlLmxvZyhwYWdlX251bSk7XG5cblx0XHRcdHdpYXdfZ2V0X21vcmVfcG9zdHMoIHBhZ2VfbnVtLCB2YXJzKTtcblxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0pO1xuXG5cblxuXHRcdC8vIEdldCBQb3N0cyBBSkFYIENhbGxcblx0XHRmdW5jdGlvbiB3aWF3X2dldF9tb3JlX3Bvc3RzKCBwYWdlX251bSwgdmFycyApIHtcblxuXHRcdFx0Ly8gU2hvdyB0aGUgYWpheCBsb2FkZXJcblx0XHRcdCQoXCIuYWpheC1zcGlubmVyXCIpLnNob3coKTtcblx0XHRcdC8vIGhpZGUgdGhlIG5leHQgYnV0dG9uXG5cdFx0XHQkKFwiLmFyY2hpdmVfX2xvYWQtbW9yZVwiKS5oaWRlKCk7XG5cblx0XHRcdC8vIG1ha2Ugc3VyZSBwYWdlX251bSBpcyBiZWluZyByZWFkIGFzIGFuIElOVFxuXHRcdFx0dmFyIHBhZ2VfbnVtID0gcGFyc2VJbnQoIHBhZ2VfbnVtKTtcblxuXHRcdFx0Ly8gRG8gdGhlIEFKQVggY2FsbFxuXHRcdFx0JC5hamF4KHtcblx0XHRcdFx0dXJsOiBqc192YXJzLmFqYXh1cmwsXG5cdFx0XHRcdHR5cGU6ICdwb3N0Jyxcblx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdGFjdGlvbjogJ2FyY2hpdmVfbG9hZF9tb3JlJyxcblx0XHRcdFx0XHRwYWdlOiBcdHBhZ2VfbnVtLFxuXHRcdFx0XHRcdGRhdGE6XHR2YXJzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbihleGNlcHRpb24pe1xuXHRcdFx0XHRcdGFsZXJ0KCdFeGVwdGlvbjonK2V4Y2VwdGlvbik7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCBodG1sICkge1xuXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coaHRtbCk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSB3ZXJlIGFueSByZXN1bHRzXG5cdFx0XHRcdFx0aWYgKCBodG1sICE9ICcnKSB7XG5cblxuXHRcdFx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBuZXh0IHBhZ2UgVVJMXG5cdFx0XHRcdFx0XHR2YXIgYnRuIFx0XHRcdFx0XHQ9ICQoXCIuYXJjaGl2ZV9fbG9hZC1tb3JlIGFcIiksXG5cdFx0XHRcdFx0XHRcdGJ0bl91cmwgXHRcdFx0XHQ9IGJ0bi5hdHRyKCdocmVmJyk7XG5cblx0XHRcdFx0XHRcdGJ0bl91cmwgXHRcdFx0XHRcdD0gYnRuX3VybC5zbGljZSgwLCAtMSkuc3BsaXQoJy8nKSxcblx0XHRcdFx0XHRcdGJ0bl91cmxbIGJ0bl91cmwubGVuZ3RoLTFdIFx0PSAocGFnZV9udW0gKyAxKSxcblx0XHRcdFx0XHRcdGJ0bl91cmwgXHRcdFx0XHRcdD0gYnRuX3VybC5qb2luKCcvJykgKyAnLyc7XG5cblx0XHRcdFx0XHRcdGJ0bi5hdHRyKCdocmVmJywgYnRuX3VybCk7XG5cblxuXHRcdFx0XHRcdFx0Ly8gSW5zZXJ0IHRoZSBIVE1MXG5cdFx0XHRcdFx0XHQkKFwiI2FqYXgtYmVmb3JlLW1lXCIpLmJlZm9yZSggaHRtbCk7XG5cblx0XHRcdFx0XHRcdC8vIHNob3cgdGhlIG5leHQgYnV0dG9uXG5cdFx0XHRcdFx0XHQkKFwiLmFyY2hpdmVfX2xvYWQtbW9yZVwiKS5zaG93KCk7XG5cblx0XHRcdFx0XHRcdFF1aWNrTG9va0luaXQoKTsgLy8gYWRkZWQgdGhpcyBzbyB0aGF0IHRoZSBxdWlja2xvb2sgd29ya3MgYWZ0ZXIgbG9hZCBtb3JlLiBTZWUgYXBwLmpzIGZ1bmN0aW9uIGNhbGxlZCBRdWlja0xvb2tJbml0XG5cblx0XHRcdFx0XHQvLyBObyByZXN1bHRzXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gc2F5IG5vIHBvc3RzXG5cdFx0XHRcdFx0XHQkKFwiI2FqYXgtYmVmb3JlLW1lXCIpLmJlZm9yZSggJzxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+PHA+Tm8gZnVydGhlciByZXN1bHRzLjwvcD48L2Rpdj4nKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEhpZGUgdGhlIGFqYXggbG9hZGVyXG5cdFx0XHRcdFx0JChcIi5hamF4LXNwaW5uZXJcIikuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9KTtcblxuXG5cbn0od2luZG93LmpRdWVyeSk7XG4iXX0=
