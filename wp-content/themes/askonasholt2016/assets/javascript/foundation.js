window.whatInput = function () {

  'use strict';

  /*
    ---------------
    variables
    ---------------
  */

  // array of actively pressed keys

  var activeKeys = [];

  // cache document.body
  var body;

  // boolean: true if touch buffer timer is running
  var buffer = false;

  // the last used input type
  var currentInput = null;

  // `input` types that don't accept text
  var nonTypingInputs = ['button', 'checkbox', 'file', 'image', 'radio', 'reset', 'submit'];

  // detect version of mouse wheel event to use
  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
  var mouseWheel = detectWheel();

  // list of modifier keys commonly used with the mouse and
  // can be safely ignored to prevent false keyboard detection
  var ignoreMap = [16, // shift
  17, // control
  18, // alt
  91, // Windows key / left Apple cmd
  93 // Windows menu / right Apple cmd
  ];

  // mapping of events to input types
  var inputMap = {
    'keydown': 'keyboard',
    'keyup': 'keyboard',
    'mousedown': 'mouse',
    'mousemove': 'mouse',
    'MSPointerDown': 'pointer',
    'MSPointerMove': 'pointer',
    'pointerdown': 'pointer',
    'pointermove': 'pointer',
    'touchstart': 'touch'
  };

  // add correct mouse wheel event mapping to `inputMap`
  inputMap[detectWheel()] = 'mouse';

  // array of all used input types
  var inputTypes = [];

  // mapping of key codes to a common name
  var keyMap = {
    9: 'tab',
    13: 'enter',
    16: 'shift',
    27: 'esc',
    32: 'space',
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down'
  };

  // map of IE 10 pointer events
  var pointerMap = {
    2: 'touch',
    3: 'touch', // treat pen like touch
    4: 'mouse'
  };

  // touch buffer timer
  var timer;

  /*
    ---------------
    functions
    ---------------
  */

  // allows events that are also triggered to be filtered out for `touchstart`
  function eventBuffer() {
    clearTimer();
    setInput(event);

    buffer = true;
    timer = window.setTimeout(function () {
      buffer = false;
    }, 650);
  }

  function bufferedEvent(event) {
    if (!buffer) setInput(event);
  }

  function unBufferedEvent(event) {
    clearTimer();
    setInput(event);
  }

  function clearTimer() {
    window.clearTimeout(timer);
  }

  function setInput(event) {
    var eventKey = key(event);
    var value = inputMap[event.type];
    if (value === 'pointer') value = pointerType(event);

    // don't do anything if the value matches the input type already set
    if (currentInput !== value) {
      var eventTarget = target(event);
      var eventTargetNode = eventTarget.nodeName.toLowerCase();
      var eventTargetType = eventTargetNode === 'input' ? eventTarget.getAttribute('type') : null;

      if ( // only if the user flag to allow typing in form fields isn't set
      !body.hasAttribute('data-whatinput-formtyping') &&

      // only if currentInput has a value
      currentInput &&

      // only if the input is `keyboard`
      value === 'keyboard' &&

      // not if the key is `TAB`
      keyMap[eventKey] !== 'tab' && (

      // only if the target is a form input that accepts text
      eventTargetNode === 'textarea' || eventTargetNode === 'select' || eventTargetNode === 'input' && nonTypingInputs.indexOf(eventTargetType) < 0) ||
      // ignore modifier keys
      ignoreMap.indexOf(eventKey) > -1) {
        // ignore keyboard typing
      } else {
        switchInput(value);
      }
    }

    if (value === 'keyboard') logKeys(eventKey);
  }

  function switchInput(string) {
    currentInput = string;
    body.setAttribute('data-whatinput', currentInput);

    if (inputTypes.indexOf(currentInput) === -1) inputTypes.push(currentInput);
  }

  function key(event) {
    return event.keyCode ? event.keyCode : event.which;
  }

  function target(event) {
    return event.target || event.srcElement;
  }

  function pointerType(event) {
    if (typeof event.pointerType === 'number') {
      return pointerMap[event.pointerType];
    } else {
      return event.pointerType === 'pen' ? 'touch' : event.pointerType; // treat pen like touch
    }
  }

  // keyboard logging
  function logKeys(eventKey) {
    if (activeKeys.indexOf(keyMap[eventKey]) === -1 && keyMap[eventKey]) activeKeys.push(keyMap[eventKey]);
  }

  function unLogKeys(event) {
    var eventKey = key(event);
    var arrayPos = activeKeys.indexOf(keyMap[eventKey]);

    if (arrayPos !== -1) activeKeys.splice(arrayPos, 1);
  }

  function bindEvents() {
    body = document.body;

    // pointer events (mouse, pen, touch)
    if (window.PointerEvent) {
      body.addEventListener('pointerdown', bufferedEvent);
      body.addEventListener('pointermove', bufferedEvent);
    } else if (window.MSPointerEvent) {
      body.addEventListener('MSPointerDown', bufferedEvent);
      body.addEventListener('MSPointerMove', bufferedEvent);
    } else {

      // mouse events
      body.addEventListener('mousedown', bufferedEvent);
      body.addEventListener('mousemove', bufferedEvent);

      // touch events
      if ('ontouchstart' in window) {
        body.addEventListener('touchstart', eventBuffer);
      }
    }

    // mouse wheel
    body.addEventListener(mouseWheel, bufferedEvent);

    // keyboard events
    body.addEventListener('keydown', unBufferedEvent);
    body.addEventListener('keyup', unBufferedEvent);
    document.addEventListener('keyup', unLogKeys);
  }

  /*
    ---------------
    utilities
    ---------------
  */

  // detect version of mouse wheel event to use
  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
  function detectWheel() {
    return mouseWheel = 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support "wheel"

    document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least "mousewheel"
    'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox
  }

  /*
    ---------------
    init
     don't start script unless browser cuts the mustard,
    also passes if polyfills are used
    ---------------
  */

  if ('addEventListener' in window && Array.prototype.indexOf) {

    // if the dom is already ready already (script was placed at bottom of <body>)
    if (document.body) {
      bindEvents();

      // otherwise wait for the dom to load (script was placed in the <head>)
    } else {
      document.addEventListener('DOMContentLoaded', bindEvents);
    }
  }

  /*
    ---------------
    api
    ---------------
  */

  return {

    // returns string: the current input type
    ask: function () {
      return currentInput;
    },

    // returns array: currently pressed keys
    keys: function () {
      return activeKeys;
    },

    // returns array: all the detected input types
    types: function () {
      return inputTypes;
    },

    // accepts string: manually set the input type
    set: switchInput
  };
}();
;!function ($) {

  "use strict";

  var FOUNDATION_VERSION = '6.2.4';

  // Global Foundation object
  // This is attached to the window, or used as a module for AMD/Browserify
  var Foundation = {
    version: FOUNDATION_VERSION,

    /**
     * Stores initialized plugins.
     */
    _plugins: {},

    /**
     * Stores generated unique ids for plugin instances
     */
    _uuids: [],

    /**
     * Returns a boolean for RTL support
     */
    rtl: function () {
      return $('html').attr('dir') === 'rtl';
    },
    /**
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.
     */
    plugin: function (plugin, name) {
      // Object key to use when adding to global Foundation object
      // Examples: Foundation.Reveal, Foundation.OffCanvas
      var className = name || functionName(plugin);
      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
      // Examples: data-reveal, data-off-canvas
      var attrName = hyphenate(className);

      // Add to the Foundation object and the plugins list (for reflowing)
      this._plugins[attrName] = this[className] = plugin;
    },
    /**
     * @function
     * Populates the _uuids array with pointers to each individual plugin instance.
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @param {String} name - the name of the plugin, passed as a camelCased string.
     * @fires Plugin#init
     */
    registerPlugin: function (plugin, name) {
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
      plugin.uuid = this.GetYoDigits(6, pluginName);

      if (!plugin.$element.attr(`data-${ pluginName }`)) {
        plugin.$element.attr(`data-${ pluginName }`, plugin.uuid);
      }
      if (!plugin.$element.data('zfPlugin')) {
        plugin.$element.data('zfPlugin', plugin);
      }
      /**
       * Fires when the plugin has initialized.
       * @event Plugin#init
       */
      plugin.$element.trigger(`init.zf.${ pluginName }`);

      this._uuids.push(plugin.uuid);

      return;
    },
    /**
     * @function
     * Removes the plugins uuid from the _uuids array.
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
     * Also fires the destroyed event for the plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @fires Plugin#destroyed
     */
    unregisterPlugin: function (plugin) {
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
      plugin.$element.removeAttr(`data-${ pluginName }`).removeData('zfPlugin')
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      .trigger(`destroyed.zf.${ pluginName }`);
      for (var prop in plugin) {
        plugin[prop] = null; //clean up script to prep for garbage collection.
      }
      return;
    },

    /**
     * @function
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.
     */
    reInit: function (plugins) {
      var isJQ = plugins instanceof $;
      try {
        if (isJQ) {
          plugins.each(function () {
            $(this).data('zfPlugin')._init();
          });
        } else {
          var type = typeof plugins,
              _this = this,
              fns = {
            'object': function (plgs) {
              plgs.forEach(function (p) {
                p = hyphenate(p);
                $('[data-' + p + ']').foundation('_init');
              });
            },
            'string': function () {
              plugins = hyphenate(plugins);
              $('[data-' + plugins + ']').foundation('_init');
            },
            'undefined': function () {
              this['object'](Object.keys(_this._plugins));
            }
          };
          fns[type](plugins);
        }
      } catch (err) {
        console.error(err);
      } finally {
        return plugins;
      }
    },

    /**
     * returns a random base-36 uid with namespacing
     * @function
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
     * @returns {String} - unique id
     */
    GetYoDigits: function (length, namespace) {
      length = length || 6;
      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? `-${ namespace }` : '');
    },
    /**
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
     */
    reflow: function (elem, plugins) {

      // If plugins is undefined, just grab everything
      if (typeof plugins === 'undefined') {
        plugins = Object.keys(this._plugins);
      }
      // If plugins is a string, convert it to an array with one item
      else if (typeof plugins === 'string') {
          plugins = [plugins];
        }

      var _this = this;

      // Iterate through each plugin
      $.each(plugins, function (i, name) {
        // Get the current plugin
        var plugin = _this._plugins[name];

        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

        // For each plugin found, initialize it
        $elem.each(function () {
          var $el = $(this),
              opts = {};
          // Don't double-dip on plugins
          if ($el.data('zfPlugin')) {
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
            return;
          }

          if ($el.attr('data-options')) {
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
              var opt = e.split(':').map(function (el) {
                return el.trim();
              });
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
            });
          }
          try {
            $el.data('zfPlugin', new plugin($(this), opts));
          } catch (er) {
            console.error(er);
          } finally {
            return;
          }
        });
      });
    },
    getFnName: functionName,
    transitionend: function ($elem) {
      var transitions = {
        'transition': 'transitionend',
        'WebkitTransition': 'webkitTransitionEnd',
        'MozTransition': 'transitionend',
        'OTransition': 'otransitionend'
      };
      var elem = document.createElement('div'),
          end;

      for (var t in transitions) {
        if (typeof elem.style[t] !== 'undefined') {
          end = transitions[t];
        }
      }
      if (end) {
        return end;
      } else {
        end = setTimeout(function () {
          $elem.triggerHandler('transitionend', [$elem]);
        }, 1);
        return 'transitionend';
      }
    }
  };

  Foundation.util = {
    /**
     * Function for applying a debounce effect to a function call.
     * @function
     * @param {Function} func - Function to be called at end of timeout.
     * @param {Number} delay - Time in ms to delay the call of `func`.
     * @returns function
     */
    throttle: function (func, delay) {
      var timer = null;

      return function () {
        var context = this,
            args = arguments;

        if (timer === null) {
          timer = setTimeout(function () {
            func.apply(context, args);
            timer = null;
          }, delay);
        }
      };
    }
  };

  // TODO: consider not making this a jQuery function
  // TODO: need way to reflow vs. re-initialize
  /**
   * The Foundation jQuery method.
   * @param {String|Array} method - An action to perform on the current jQuery object.
   */
  var foundation = function (method) {
    var type = typeof method,
        $meta = $('meta.foundation-mq'),
        $noJS = $('.no-js');

    if (!$meta.length) {
      $('<meta class="foundation-mq">').appendTo(document.head);
    }
    if ($noJS.length) {
      $noJS.removeClass('no-js');
    }

    if (type === 'undefined') {
      //needs to initialize the Foundation object, or an individual plugin.
      Foundation.MediaQuery._init();
      Foundation.reflow(this);
    } else if (type === 'string') {
      //an individual method to invoke on a plugin or group of plugins
      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
      var plugClass = this.data('zfPlugin'); //determine the class of plugin

      if (plugClass !== undefined && plugClass[method] !== undefined) {
        //make sure both the class and method exist
        if (this.length === 1) {
          //if there's only one, call it directly.
          plugClass[method].apply(plugClass, args);
        } else {
          this.each(function (i, el) {
            //otherwise loop through the jQuery collection and invoke the method on each
            plugClass[method].apply($(el).data('zfPlugin'), args);
          });
        }
      } else {
        //error for no class or no method
        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
      }
    } else {
      //error for invalid argument type
      throw new TypeError(`We're sorry, ${ type } is not a valid parameter. You must use a string representing the method you wish to invoke.`);
    }
    return this;
  };

  window.Foundation = Foundation;
  $.fn.foundation = foundation;

  // Polyfill for requestAnimationFrame
  (function () {
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
      return new Date().getTime();
    };

    var vendors = ['webkit', 'moz'];
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
      var vp = vendors[i];
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;
      window.requestAnimationFrame = function (callback) {
        var now = Date.now();
        var nextTime = Math.max(lastTime + 16, now);
        return setTimeout(function () {
          callback(lastTime = nextTime);
        }, nextTime - now);
      };
      window.cancelAnimationFrame = clearTimeout;
    }
    /**
     * Polyfill for performance.now, required by rAF
     */
    if (!window.performance || !window.performance.now) {
      window.performance = {
        start: Date.now(),
        now: function () {
          return Date.now() - this.start;
        }
      };
    }
  })();
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // closest thing possible to the ECMAScript 5
        // internal IsCallable function
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };

      if (this.prototype) {
        // native functions don't have a prototype
        fNOP.prototype = this.prototype;
      }
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
  // Polyfill to get the name of a function in IE9
  function functionName(fn) {
    if (Function.prototype.name === undefined) {
      var funcNameRegex = /function\s([^(]{1,})\(/;
      var results = funcNameRegex.exec(fn.toString());
      return results && results.length > 1 ? results[1].trim() : "";
    } else if (fn.prototype === undefined) {
      return fn.constructor.name;
    } else {
      return fn.prototype.constructor.name;
    }
  }
  function parseValue(str) {
    if (/true/.test(str)) return true;else if (/false/.test(str)) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;
  }
  // Convert PascalCase to kebab-case
  // Thank you: http://stackoverflow.com/a/8955580
  function hyphenate(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  }
}(jQuery);
;'use strict';

!function ($) {

  Foundation.Box = {
    ImNotTouchingYou: ImNotTouchingYou,
    GetDimensions: GetDimensions,
    GetOffsets: GetOffsets
  };

  /**
   * Compares the dimensions of an element to a container and determines collision events with container.
   * @function
   * @param {jQuery} element - jQuery object to test for collisions.
   * @param {jQuery} parent - jQuery object to use as bounding container.
   * @param {Boolean} lrOnly - set to true to check left and right values only.
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.
   * @default if no parent object passed, detects collisions with `window`.
   * @returns {Boolean} - true if collision free, false if a collision in any direction.
   */
  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {
    var eleDims = GetDimensions(element),
        top,
        bottom,
        left,
        right;

    if (parent) {
      var parDims = GetDimensions(parent);

      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;
      top = eleDims.offset.top >= parDims.offset.top;
      left = eleDims.offset.left >= parDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;
    } else {
      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;
      top = eleDims.offset.top >= eleDims.windowDims.offset.top;
      left = eleDims.offset.left >= eleDims.windowDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;
    }

    var allDirs = [bottom, top, left, right];

    if (lrOnly) {
      return left === right === true;
    }

    if (tbOnly) {
      return top === bottom === true;
    }

    return allDirs.indexOf(false) === -1;
  };

  /**
   * Uses native methods to return an object of dimension values.
   * @function
   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
   * @returns {Object} - nested object of integer pixel values
   * TODO - if element is window, return only those values.
   */
  function GetDimensions(elem, test) {
    elem = elem.length ? elem[0] : elem;

    if (elem === window || elem === document) {
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
    }

    var rect = elem.getBoundingClientRect(),
        parRect = elem.parentNode.getBoundingClientRect(),
        winRect = document.body.getBoundingClientRect(),
        winY = window.pageYOffset,
        winX = window.pageXOffset;

    return {
      width: rect.width,
      height: rect.height,
      offset: {
        top: rect.top + winY,
        left: rect.left + winX
      },
      parentDims: {
        width: parRect.width,
        height: parRect.height,
        offset: {
          top: parRect.top + winY,
          left: parRect.left + winX
        }
      },
      windowDims: {
        width: winRect.width,
        height: winRect.height,
        offset: {
          top: winY,
          left: winX
        }
      }
    };
  }

  /**
   * Returns an object of top and left integer pixel values for dynamically rendered elements,
   * such as: Tooltip, Reveal, and Dropdown
   * @function
   * @param {jQuery} element - jQuery object for the element being positioned.
   * @param {jQuery} anchor - jQuery object for the element's anchor point.
   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
   * TODO alter/rewrite to work with `em` values as well/instead of pixels
   */
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
    var $eleDims = GetDimensions(element),
        $anchorDims = anchor ? GetDimensions(anchor) : null;

    switch (position) {
      case 'top':
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top
        };
        break;
      case 'right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset,
          top: $anchorDims.offset.top
        };
        break;
      case 'center top':
        return {
          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'center bottom':
        return {
          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'center left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center':
        return {
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'reveal':
        return {
          left: ($eleDims.windowDims.width - $eleDims.width) / 2,
          top: $eleDims.windowDims.offset.top + vOffset
        };
      case 'reveal full':
        return {
          left: $eleDims.windowDims.offset.left,
          top: $eleDims.windowDims.offset.top
        };
        break;
      case 'left bottom':
        return {
          left: $anchorDims.offset.left,
          top: $anchorDims.offset.top + $anchorDims.height
        };
        break;
      case 'right bottom':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,
          top: $anchorDims.offset.top + $anchorDims.height
        };
        break;
      default:
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
    }
  }
}(jQuery);
;/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/

'use strict';

!function ($) {

  const keyCodes = {
    9: 'TAB',
    13: 'ENTER',
    27: 'ESCAPE',
    32: 'SPACE',
    37: 'ARROW_LEFT',
    38: 'ARROW_UP',
    39: 'ARROW_RIGHT',
    40: 'ARROW_DOWN'
  };

  var commands = {};

  var Keyboard = {
    keys: getKeyCodes(keyCodes),

    /**
     * Parses the (keyboard) event and returns a String that represents its key
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
     * @param {Event} event - the event generated by the event handler
     * @return String key - String that represents the key pressed
     */
    parseKey(event) {
      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();
      if (event.shiftKey) key = `SHIFT_${ key }`;
      if (event.ctrlKey) key = `CTRL_${ key }`;
      if (event.altKey) key = `ALT_${ key }`;
      return key;
    },

    /**
     * Handles the given (keyboard) event
     * @param {Event} event - the event generated by the event handler
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal
     * @param {Objects} functions - collection of functions that are to be executed
     */
    handleKey(event, component, functions) {
      var commandList = commands[component],
          keyCode = this.parseKey(event),
          cmds,
          command,
          fn;

      if (!commandList) return console.warn('Component not defined!');

      if (typeof commandList.ltr === 'undefined') {
        // this component does not differentiate between ltr and rtl
        cmds = commandList; // use plain list
      } else {
        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
      }
      command = cmds[keyCode];

      fn = functions[command];
      if (fn && typeof fn === 'function') {
        // execute function  if exists
        var returnValue = fn.apply();
        if (functions.handled || typeof functions.handled === 'function') {
          // execute function when event was handled
          functions.handled(returnValue);
        }
      } else {
        if (functions.unhandled || typeof functions.unhandled === 'function') {
          // execute function when event was not handled
          functions.unhandled();
        }
      }
    },

    /**
     * Finds all focusable elements within the given `$element`
     * @param {jQuery} $element - jQuery object to search within
     * @return {jQuery} $focusable - all focusable elements within `$element`
     */
    findFocusable($element) {
      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {
          return false;
        } //only have visible elements and those that have a tabindex greater or equal 0
        return true;
      });
    },

    /**
     * Returns the component name name
     * @param {Object} component - Foundation component, e.g. Slider or Reveal
     * @return String componentName
     */

    register(componentName, cmds) {
      commands[componentName] = cmds;
    }
  };

  /*
   * Constants for easier comparing.
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   */
  function getKeyCodes(kcs) {
    var k = {};
    for (var kc in kcs) k[kcs[kc]] = kcs[kc];
    return k;
  }

  Foundation.Keyboard = Keyboard;
}(jQuery);
;'use strict';

!function ($) {

  // Default set of media queries
  const defaultQueries = {
    'default': 'only screen',
    landscape: 'only screen and (orientation: landscape)',
    portrait: 'only screen and (orientation: portrait)',
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };

  var MediaQuery = {
    queries: [],

    current: '',

    /**
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function
     * @private
     */
    _init() {
      var self = this;
      var extractedStyles = $('.foundation-mq').css('font-family');
      var namedQueries;

      namedQueries = parseStyleToObject(extractedStyles);

      for (var key in namedQueries) {
        if (namedQueries.hasOwnProperty(key)) {
          self.queries.push({
            name: key,
            value: `only screen and (min-width: ${ namedQueries[key] })`
          });
        }
      }

      this.current = this._getCurrentSize();

      this._watcher();
    },

    /**
     * Checks if the screen is at least as wide as a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
     */
    atLeast(size) {
      var query = this.get(size);

      if (query) {
        return window.matchMedia(query).matches;
      }

      return false;
    },

    /**
     * Gets the media query of a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to get.
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
     */
    get(size) {
      for (var i in this.queries) {
        if (this.queries.hasOwnProperty(i)) {
          var query = this.queries[i];
          if (size === query.name) return query.value;
        }
      }

      return null;
    },

    /**
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function
     * @private
     * @returns {String} Name of the current breakpoint.
     */
    _getCurrentSize() {
      var matched;

      for (var i = 0; i < this.queries.length; i++) {
        var query = this.queries[i];

        if (window.matchMedia(query.value).matches) {
          matched = query;
        }
      }

      if (typeof matched === 'object') {
        return matched.name;
      } else {
        return matched;
      }
    },

    /**
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
     * @function
     * @private
     */
    _watcher() {
      $(window).on('resize.zf.mediaquery', () => {
        var newSize = this._getCurrentSize(),
            currentSize = this.current;

        if (newSize !== currentSize) {
          // Change the current media query
          this.current = newSize;

          // Broadcast the media query change on the window
          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
        }
      });
    }
  };

  Foundation.MediaQuery = MediaQuery;

  // matchMedia() polyfill - Test a CSS media type/query in JS.
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
  window.matchMedia || (window.matchMedia = function () {
    'use strict';

    // For browsers that support matchMedium api such as IE 9 and webkit

    var styleMedia = window.styleMedia || window.media;

    // For those that don't support matchMedium
    if (!styleMedia) {
      var style = document.createElement('style'),
          script = document.getElementsByTagName('script')[0],
          info = null;

      style.type = 'text/css';
      style.id = 'matchmediajs-test';

      script && script.parentNode && script.parentNode.insertBefore(style, script);

      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

      styleMedia = {
        matchMedium(media) {
          var text = `@media ${ media }{ #matchmediajs-test { width: 1px; } }`;

          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
          if (style.styleSheet) {
            style.styleSheet.cssText = text;
          } else {
            style.textContent = text;
          }

          // Test if media query is true or false
          return info.width === '1px';
        }
      };
    }

    return function (media) {
      return {
        matches: styleMedia.matchMedium(media || 'all'),
        media: media || 'all'
      };
    };
  }());

  // Thank you: https://github.com/sindresorhus/query-string
  function parseStyleToObject(str) {
    var styleObject = {};

    if (typeof str !== 'string') {
      return styleObject;
    }

    str = str.trim().slice(1, -1); // browsers re-quote string style values

    if (!str) {
      return styleObject;
    }

    styleObject = str.split('&').reduce(function (ret, param) {
      var parts = param.replace(/\+/g, ' ').split('=');
      var key = parts[0];
      var val = parts[1];
      key = decodeURIComponent(key);

      // missing `=` should be `null`:
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
      val = val === undefined ? null : decodeURIComponent(val);

      if (!ret.hasOwnProperty(key)) {
        ret[key] = val;
      } else if (Array.isArray(ret[key])) {
        ret[key].push(val);
      } else {
        ret[key] = [ret[key], val];
      }
      return ret;
    }, {});

    return styleObject;
  }

  Foundation.MediaQuery = MediaQuery;
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Motion module.
   * @module foundation.motion
   */

  const initClasses = ['mui-enter', 'mui-leave'];
  const activeClasses = ['mui-enter-active', 'mui-leave-active'];

  const Motion = {
    animateIn: function (element, animation, cb) {
      animate(true, element, animation, cb);
    },

    animateOut: function (element, animation, cb) {
      animate(false, element, animation, cb);
    }
  };

  function Move(duration, elem, fn) {
    var anim,
        prog,
        start = null;
    // console.log('called');

    function move(ts) {
      if (!start) start = window.performance.now();
      // console.log(start, ts);
      prog = ts - start;
      fn.apply(elem);

      if (prog < duration) {
        anim = window.requestAnimationFrame(move, elem);
      } else {
        window.cancelAnimationFrame(anim);
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      }
    }
    anim = window.requestAnimationFrame(move);
  }

  /**
   * Animates an element in or out using a CSS transition class.
   * @function
   * @private
   * @param {Boolean} isIn - Defines if the animation is in or out.
   * @param {Object} element - jQuery or HTML object to animate.
   * @param {String} animation - CSS class to use.
   * @param {Function} cb - Callback to run when animation is finished.
   */
  function animate(isIn, element, animation, cb) {
    element = $(element).eq(0);

    if (!element.length) return;

    var initClass = isIn ? initClasses[0] : initClasses[1];
    var activeClass = isIn ? activeClasses[0] : activeClasses[1];

    // Set up the animation
    reset();

    element.addClass(animation).css('transition', 'none');

    requestAnimationFrame(() => {
      element.addClass(initClass);
      if (isIn) element.show();
    });

    // Start the animation
    requestAnimationFrame(() => {
      element[0].offsetWidth;
      element.css('transition', '').addClass(activeClass);
    });

    // Clean up the animation when it finishes
    element.one(Foundation.transitionend(element), finish);

    // Hides the element (for out animations), resets the element, and runs a callback
    function finish() {
      if (!isIn) element.hide();
      reset();
      if (cb) cb.apply(element);
    }

    // Resets transitions and removes motion-specific classes
    function reset() {
      element[0].style.transitionDuration = 0;
      element.removeClass(`${ initClass } ${ activeClass } ${ animation }`);
    }
  }

  Foundation.Move = Move;
  Foundation.Motion = Motion;
}(jQuery);
;'use strict';

!function ($) {

  const Nest = {
    Feather(menu, type = 'zf') {
      menu.attr('role', 'menubar');

      var items = menu.find('li').attr({ 'role': 'menuitem' }),
          subMenuClass = `is-${ type }-submenu`,
          subItemClass = `${ subMenuClass }-item`,
          hasSubClass = `is-${ type }-submenu-parent`;

      menu.find('a:first').attr('tabindex', 0);

      items.each(function () {
        var $item = $(this),
            $sub = $item.children('ul');

        if ($sub.length) {
          $item.addClass(hasSubClass).attr({
            'aria-haspopup': true,
            'aria-expanded': false,
            'aria-label': $item.children('a:first').text()
          });

          $sub.addClass(`submenu ${ subMenuClass }`).attr({
            'data-submenu': '',
            'aria-hidden': true,
            'role': 'menu'
          });
        }

        if ($item.parent('[data-submenu]').length) {
          $item.addClass(`is-submenu-item ${ subItemClass }`);
        }
      });

      return;
    },

    Burn(menu, type) {
      var items = menu.find('li').removeAttr('tabindex'),
          subMenuClass = `is-${ type }-submenu`,
          subItemClass = `${ subMenuClass }-item`,
          hasSubClass = `is-${ type }-submenu-parent`;

      menu.find('>li, .menu, .menu > li').removeClass(`${ subMenuClass } ${ subItemClass } ${ hasSubClass } is-submenu-item submenu is-active`).removeAttr('data-submenu').css('display', '');

      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')
      //           .removeAttr('data-submenu'));
      // items.each(function(){
      //   var $item = $(this),
      //       $sub = $item.children('ul');
      //   if($item.parent('[data-submenu]').length){
      //     $item.removeClass('is-submenu-item ' + subItemClass);
      //   }
      //   if($sub.length){
      //     $item.removeClass('has-submenu');
      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');
      //   }
      // });
    }
  };

  Foundation.Nest = Nest;
}(jQuery);
;'use strict';

!function ($) {

  function Timer(elem, options, cb) {
    var _this = this,
        duration = options.duration,
        //options is an object for easily adding features later.
    nameSpace = Object.keys(elem.data())[0] || 'timer',
        remain = -1,
        start,
        timer;

    this.isPaused = false;

    this.restart = function () {
      remain = -1;
      clearTimeout(timer);
      this.start();
    };

    this.start = function () {
      this.isPaused = false;
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      remain = remain <= 0 ? duration : remain;
      elem.data('paused', false);
      start = Date.now();
      timer = setTimeout(function () {
        if (options.infinite) {
          _this.restart(); //rerun the timer.
        }
        if (cb && typeof cb === 'function') {
          cb();
        }
      }, remain);
      elem.trigger(`timerstart.zf.${ nameSpace }`);
    };

    this.pause = function () {
      this.isPaused = true;
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      elem.data('paused', true);
      var end = Date.now();
      remain = remain - (end - start);
      elem.trigger(`timerpaused.zf.${ nameSpace }`);
    };
  }

  /**
   * Runs a callback function when images are fully loaded.
   * @param {Object} images - Image(s) to check if loaded.
   * @param {Func} callback - Function to execute when image is fully loaded.
   */
  function onImagesLoaded(images, callback) {
    var self = this,
        unloaded = images.length;

    if (unloaded === 0) {
      callback();
    }

    images.each(function () {
      if (this.complete) {
        singleImageLoaded();
      } else if (typeof this.naturalWidth !== 'undefined' && this.naturalWidth > 0) {
        singleImageLoaded();
      } else {
        $(this).one('load', function () {
          singleImageLoaded();
        });
      }
    });

    function singleImageLoaded() {
      unloaded--;
      if (unloaded === 0) {
        callback();
      }
    }
  }

  Foundation.Timer = Timer;
  Foundation.onImagesLoaded = onImagesLoaded;
}(jQuery);
;//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************
(function ($) {

	$.spotSwipe = {
		version: '1.0.0',
		enabled: 'ontouchstart' in document.documentElement,
		preventDefault: false,
		moveThreshold: 75,
		timeThreshold: 200
	};

	var startPosX,
	    startPosY,
	    startTime,
	    elapsedTime,
	    isMoving = false;

	function onTouchEnd() {
		//  alert(this);
		this.removeEventListener('touchmove', onTouchMove);
		this.removeEventListener('touchend', onTouchEnd);
		isMoving = false;
	}

	function onTouchMove(e) {
		if ($.spotSwipe.preventDefault) {
			e.preventDefault();
		}
		if (isMoving) {
			var x = e.touches[0].pageX;
			var y = e.touches[0].pageY;
			var dx = startPosX - x;
			var dy = startPosY - y;
			var dir;
			elapsedTime = new Date().getTime() - startTime;
			if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
				dir = dx > 0 ? 'left' : 'right';
			}
			// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
			//   dir = dy > 0 ? 'down' : 'up';
			// }
			if (dir) {
				e.preventDefault();
				onTouchEnd.call(this);
				$(this).trigger('swipe', dir).trigger(`swipe${ dir }`);
			}
		}
	}

	function onTouchStart(e) {
		if (e.touches.length == 1) {
			startPosX = e.touches[0].pageX;
			startPosY = e.touches[0].pageY;
			isMoving = true;
			startTime = new Date().getTime();
			this.addEventListener('touchmove', onTouchMove, false);
			this.addEventListener('touchend', onTouchEnd, false);
		}
	}

	function init() {
		this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
	}

	function teardown() {
		this.removeEventListener('touchstart', onTouchStart);
	}

	$.event.special.swipe = { setup: init };

	$.each(['left', 'up', 'down', 'right'], function () {
		$.event.special[`swipe${ this }`] = { setup: function () {
				$(this).on('swipe', $.noop);
			} };
	});
})(jQuery);
/****************************************************
 * Method for adding psuedo drag events to elements *
 ***************************************************/
!function ($) {
	$.fn.addTouch = function () {
		this.each(function (i, el) {
			$(el).bind('touchstart touchmove touchend touchcancel', function () {
				//we pass the original event object because the jQuery event
				//object is normalized to w3c specs and does not provide the TouchList
				handleTouch(event);
			});
		});

		var handleTouch = function (event) {
			var touches = event.changedTouches,
			    first = touches[0],
			    eventTypes = {
				touchstart: 'mousedown',
				touchmove: 'mousemove',
				touchend: 'mouseup'
			},
			    type = eventTypes[event.type],
			    simulatedEvent;

			if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
				simulatedEvent = new window.MouseEvent(type, {
					'bubbles': true,
					'cancelable': true,
					'screenX': first.screenX,
					'screenY': first.screenY,
					'clientX': first.clientX,
					'clientY': first.clientY
				});
			} else {
				simulatedEvent = document.createEvent('MouseEvent');
				simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
			}
			first.target.dispatchEvent(simulatedEvent);
		};
	};
}(jQuery);

//**********************************
//**From the jQuery Mobile Library**
//**need to recreate functionality**
//**and try to improve if possible**
//**********************************

/* Removing the jQuery function ****
************************************

(function( $, window, undefined ) {

	var $document = $( document ),
		// supportTouch = $.mobile.support.touch,
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";

	// setup new event shortcuts
	$.each( ( "touchstart touchmove touchend " +
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {

		$.fn[ name ] = function( fn ) {
			return fn ? this.bind( name, fn ) : this.trigger( name );
		};

		// jQuery < 1.8
		if ( $.attrFn ) {
			$.attrFn[ name ] = true;
		}
	});

	function triggerCustomEvent( obj, eventType, event, bubble ) {
		var originalType = event.type;
		event.type = eventType;
		if ( bubble ) {
			$.event.trigger( event, undefined, obj );
		} else {
			$.event.dispatch.call( obj, event );
		}
		event.type = originalType;
	}

	// also handles taphold

	// Also handles swipeleft, swiperight
	$.event.special.swipe = {

		// More than this horizontal displacement, and we will suppress scrolling.
		scrollSupressionThreshold: 30,

		// More time than this, and it isn't a swipe.
		durationThreshold: 1000,

		// Swipe horizontal displacement must be more than this.
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		// Swipe vertical displacement must be less than this.
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		getLocation: function ( event ) {
			var winPageX = window.pageXOffset,
				winPageY = window.pageYOffset,
				x = event.clientX,
				y = event.clientY;

			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {

				// iOS4 clientX/clientY have the value that should have been
				// in pageX/pageY. While pageX/page/ have the value 0
				x = x - winPageX;
				y = y - winPageY;
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {

				// Some Android browsers have totally bogus values for clientX/Y
				// when scrolling/zooming a page. Detectable since clientX/clientY
				// should never be smaller than pageX/pageY minus page scroll
				x = event.pageX - winPageX;
				y = event.pageY - winPageY;
			}

			return {
				x: x,
				y: y
			};
		},

		start: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ],
						origin: $( event.target )
					};
		},

		stop: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ]
					};
		},

		handleSwipe: function( start, stop, thisObject, origTarget ) {
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";

				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;
			}
			return false;

		},

		// This serves as a flag to ensure that at most one swipe event event is
		// in work at any given time
		eventInProgress: false,

		setup: function() {
			var events,
				thisObject = this,
				$this = $( thisObject ),
				context = {};

			// Retrieve the events data for this element and add the swipe context
			events = $.data( this, "mobile-events" );
			if ( !events ) {
				events = { length: 0 };
				$.data( this, "mobile-events", events );
			}
			events.length++;
			events.swipe = context;

			context.start = function( event ) {

				// Bail if we're already working on a swipe event
				if ( $.event.special.swipe.eventInProgress ) {
					return;
				}
				$.event.special.swipe.eventInProgress = true;

				var stop,
					start = $.event.special.swipe.start( event ),
					origTarget = event.target,
					emitted = false;

				context.move = function( event ) {
					if ( !start || event.isDefaultPrevented() ) {
						return;
					}

					stop = $.event.special.swipe.stop( event );
					if ( !emitted ) {
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );
						if ( emitted ) {

							// Reset the context to make way for the next swipe event
							$.event.special.swipe.eventInProgress = false;
						}
					}
					// prevent scrolling
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
						event.preventDefault();
					}
				};

				context.stop = function() {
						emitted = true;

						// Reset the context to make way for the next swipe event
						$.event.special.swipe.eventInProgress = false;
						$document.off( touchMoveEvent, context.move );
						context.move = null;
				};

				$document.on( touchMoveEvent, context.move )
					.one( touchStopEvent, context.stop );
			};
			$this.on( touchStartEvent, context.start );
		},

		teardown: function() {
			var events, context;

			events = $.data( this, "mobile-events" );
			if ( events ) {
				context = events.swipe;
				delete events.swipe;
				events.length--;
				if ( events.length === 0 ) {
					$.removeData( this, "mobile-events" );
				}
			}

			if ( context ) {
				if ( context.start ) {
					$( this ).off( touchStartEvent, context.start );
				}
				if ( context.move ) {
					$document.off( touchMoveEvent, context.move );
				}
				if ( context.stop ) {
					$document.off( touchStopEvent, context.stop );
				}
			}
		}
	};
	$.each({
		swipeleft: "swipe.left",
		swiperight: "swipe.right"
	}, function( event, sourceEvent ) {

		$.event.special[ event ] = {
			setup: function() {
				$( this ).bind( sourceEvent, $.noop );
			},
			teardown: function() {
				$( this ).unbind( sourceEvent );
			}
		};
	});
})( jQuery, this );
*/
;'use strict';

!function ($) {

  const MutationObserver = function () {
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
    for (var i = 0; i < prefixes.length; i++) {
      if (`${ prefixes[i] }MutationObserver` in window) {
        return window[`${ prefixes[i] }MutationObserver`];
      }
    }
    return false;
  }();

  const triggers = (el, type) => {
    el.data(type).split(' ').forEach(id => {
      $(`#${ id }`)[type === 'close' ? 'trigger' : 'triggerHandler'](`${ type }.zf.trigger`, [el]);
    });
  };
  // Elements with [data-open] will reveal a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-open]', function () {
    triggers($(this), 'open');
  });

  // Elements with [data-close] will close a plugin that supports it when clicked.
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
  $(document).on('click.zf.trigger', '[data-close]', function () {
    let id = $(this).data('close');
    if (id) {
      triggers($(this), 'close');
    } else {
      $(this).trigger('close.zf.trigger');
    }
  });

  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-toggle]', function () {
    triggers($(this), 'toggle');
  });

  // Elements with [data-closable] will respond to close.zf.trigger events.
  $(document).on('close.zf.trigger', '[data-closable]', function (e) {
    e.stopPropagation();
    let animation = $(this).data('closable');

    if (animation !== '') {
      Foundation.Motion.animateOut($(this), animation, function () {
        $(this).trigger('closed.zf');
      });
    } else {
      $(this).fadeOut().trigger('closed.zf');
    }
  });

  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {
    let id = $(this).data('toggle-focus');
    $(`#${ id }`).triggerHandler('toggle.zf.trigger', [$(this)]);
  });

  /**
  * Fires once after all other scripts have loaded
  * @function
  * @private
  */
  $(window).on('load', () => {
    checkListeners();
  });

  function checkListeners() {
    eventsListener();
    resizeListener();
    scrollListener();
    closemeListener();
  }

  //******** only fires this function once on load, if there's something to watch ********
  function closemeListener(pluginName) {
    var yetiBoxes = $('[data-yeti-box]'),
        plugNames = ['dropdown', 'tooltip', 'reveal'];

    if (pluginName) {
      if (typeof pluginName === 'string') {
        plugNames.push(pluginName);
      } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
        plugNames.concat(pluginName);
      } else {
        console.error('Plugin names must be strings');
      }
    }
    if (yetiBoxes.length) {
      let listeners = plugNames.map(name => {
        return `closeme.zf.${ name }`;
      }).join(' ');

      $(window).off(listeners).on(listeners, function (e, pluginId) {
        let plugin = e.namespace.split('.')[0];
        let plugins = $(`[data-${ plugin }]`).not(`[data-yeti-box="${ pluginId }"]`);

        plugins.each(function () {
          let _this = $(this);

          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      });
    }
  }

  function resizeListener(debounce) {
    let timer,
        $nodes = $('[data-resize]');
    if ($nodes.length) {
      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('resizeme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a resize event
          $nodes.attr('data-events', "resize");
        }, debounce || 10); //default time to emit resize event
      });
    }
  }

  function scrollListener(debounce) {
    let timer,
        $nodes = $('[data-scroll]');
    if ($nodes.length) {
      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('scrollme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a scroll event
          $nodes.attr('data-events', "scroll");
        }, debounce || 10); //default time to emit scroll event
      });
    }
  }

  function eventsListener() {
    if (!MutationObserver) {
      return false;
    }
    let nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');

    //element callback
    var listeningElementsMutation = function (mutationRecordsList) {
      var $target = $(mutationRecordsList[0].target);
      //trigger the event handler for the element depending on type
      switch ($target.attr("data-events")) {

        case "resize":
          $target.triggerHandler('resizeme.zf.trigger', [$target]);
          break;

        case "scroll":
          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
          break;

        // case "mutate" :
        // console.log('mutate', $target);
        // $target.triggerHandler('mutate.zf.trigger');
        //
        // //make sure we don't get stuck in an infinite loop from sloppy codeing
        // if ($target.index('[data-mutate]') == $("[data-mutate]").length-1) {
        //   domMutationObserver();
        // }
        // break;

        default:
          return false;
        //nothing
      }
    };

    if (nodes.length) {
      //for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer
      for (var i = 0; i <= nodes.length - 1; i++) {
        let elementObserver = new MutationObserver(listeningElementsMutation);
        elementObserver.observe(nodes[i], { attributes: true, childList: false, characterData: false, subtree: false, attributeFilter: ["data-events"] });
      }
    }
  }

  // ------------------------------------

  // [PH]
  // Foundation.CheckWatchers = checkWatchers;
  Foundation.IHearYou = checkListeners;
  // Foundation.ISeeYou = scrollListener;
  // Foundation.IFeelYou = closemeListener;
}(jQuery);

// function domMutationObserver(debounce) {
//   // !!! This is coming soon and needs more work; not active  !!! //
//   var timer,
//   nodes = document.querySelectorAll('[data-mutate]');
//   //
//   if (nodes.length) {
//     // var MutationObserver = (function () {
//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
//     //   for (var i=0; i < prefixes.length; i++) {
//     //     if (prefixes[i] + 'MutationObserver' in window) {
//     //       return window[prefixes[i] + 'MutationObserver'];
//     //     }
//     //   }
//     //   return false;
//     // }());
//
//
//     //for the body, we need to listen for all changes effecting the style and class attributes
//     var bodyObserver = new MutationObserver(bodyMutation);
//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:["style", "class"]});
//
//
//     //body callback
//     function bodyMutation(mutate) {
//       //trigger all listening elements and signal a mutation event
//       if (timer) { clearTimeout(timer); }
//
//       timer = setTimeout(function() {
//         bodyObserver.disconnect();
//         $('[data-mutate]').attr('data-events',"mutate");
//       }, debounce || 150);
//     }
//   }
// }
;'use strict';

!function ($) {

  /**
   * Abide module.
   * @module foundation.abide
   */

  class Abide {
    /**
     * Creates a new instance of Abide.
     * @class
     * @fires Abide#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options = {}) {
      this.$element = element;
      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Abide');
    }

    /**
     * Initializes the Abide plugin and calls functions to get Abide functioning on load.
     * @private
     */
    _init() {
      this.$inputs = this.$element.find('input, textarea, select');

      this._events();
    }

    /**
     * Initializes events for Abide.
     * @private
     */
    _events() {
      this.$element.off('.abide').on('reset.zf.abide', () => {
        this.resetForm();
      }).on('submit.zf.abide', () => {
        return this.validateForm();
      });

      if (this.options.validateOn === 'fieldChange') {
        this.$inputs.off('change.zf.abide').on('change.zf.abide', e => {
          this.validateInput($(e.target));
        });
      }

      if (this.options.liveValidate) {
        this.$inputs.off('input.zf.abide').on('input.zf.abide', e => {
          this.validateInput($(e.target));
        });
      }
    }

    /**
     * Calls necessary functions to update Abide upon DOM change
     * @private
     */
    _reflow() {
      this._init();
    }

    /**
     * Checks whether or not a form element has the required attribute and if it's checked or not
     * @param {Object} element - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */
    requiredCheck($el) {
      if (!$el.attr('required')) return true;

      var isGood = true;

      switch ($el[0].type) {
        case 'checkbox':
          isGood = $el[0].checked;
          break;

        case 'select':
        case 'select-one':
        case 'select-multiple':
          var opt = $el.find('option:selected');
          if (!opt.length || !opt.val()) isGood = false;
          break;

        default:
          if (!$el.val() || !$el.val().length) isGood = false;
      }

      return isGood;
    }

    /**
     * Based on $el, get the first element with selector in this order:
     * 1. The element's direct sibling('s).
     * 3. The element's parent's children.
     *
     * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
     *
     * @param {Object} $el - jQuery object to use as reference to find the form error selector.
     * @returns {Object} jQuery object with the selector.
     */
    findFormError($el) {
      var $error = $el.siblings(this.options.formErrorSelector);

      if (!$error.length) {
        $error = $el.parent().find(this.options.formErrorSelector);
      }

      return $error;
    }

    /**
     * Get the first element in this order:
     * 2. The <label> with the attribute `[for="someInputId"]`
     * 3. The `.closest()` <label>
     *
     * @param {Object} $el - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */
    findLabel($el) {
      var id = $el[0].id;
      var $label = this.$element.find(`label[for="${ id }"]`);

      if (!$label.length) {
        return $el.closest('label');
      }

      return $label;
    }

    /**
     * Get the set of labels associated with a set of radio els in this order
     * 2. The <label> with the attribute `[for="someInputId"]`
     * 3. The `.closest()` <label>
     *
     * @param {Object} $el - jQuery object to check for required attribute
     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
     */
    findRadioLabels($els) {
      var labels = $els.map((i, el) => {
        var id = el.id;
        var $label = this.$element.find(`label[for="${ id }"]`);

        if (!$label.length) {
          $label = $(el).closest('label');
        }
        return $label[0];
      });

      return $(labels);
    }

    /**
     * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
     * @param {Object} $el - jQuery object to add the class to
     */
    addErrorClasses($el) {
      var $label = this.findLabel($el);
      var $formError = this.findFormError($el);

      if ($label.length) {
        $label.addClass(this.options.labelErrorClass);
      }

      if ($formError.length) {
        $formError.addClass(this.options.formErrorClass);
      }

      $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');
    }

    /**
     * Remove CSS error classes etc from an entire radio button group
     * @param {String} groupName - A string that specifies the name of a radio button group
     *
     */

    removeRadioErrorClasses(groupName) {
      var $els = this.$element.find(`:radio[name="${ groupName }"]`);
      var $labels = this.findRadioLabels($els);
      var $formErrors = this.findFormError($els);

      if ($labels.length) {
        $labels.removeClass(this.options.labelErrorClass);
      }

      if ($formErrors.length) {
        $formErrors.removeClass(this.options.formErrorClass);
      }

      $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
    }

    /**
     * Removes CSS error class as specified by the Abide settings from the label, input, and the form
     * @param {Object} $el - jQuery object to remove the class from
     */
    removeErrorClasses($el) {
      // radios need to clear all of the els
      if ($el[0].type == 'radio') {
        return this.removeRadioErrorClasses($el.attr('name'));
      }

      var $label = this.findLabel($el);
      var $formError = this.findFormError($el);

      if ($label.length) {
        $label.removeClass(this.options.labelErrorClass);
      }

      if ($formError.length) {
        $formError.removeClass(this.options.formErrorClass);
      }

      $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
    }

    /**
     * Goes through a form to find inputs and proceeds to validate them in ways specific to their type
     * @fires Abide#invalid
     * @fires Abide#valid
     * @param {Object} element - jQuery object to validate, should be an HTML input
     * @returns {Boolean} goodToGo - If the input is valid or not.
     */
    validateInput($el) {
      var clearRequire = this.requiredCheck($el),
          validated = false,
          customValidator = true,
          validator = $el.attr('data-validator'),
          equalTo = true;

      // don't validate ignored inputs or hidden inputs
      if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]')) {
        return true;
      }

      switch ($el[0].type) {
        case 'radio':
          validated = this.validateRadio($el.attr('name'));
          break;

        case 'checkbox':
          validated = clearRequire;
          break;

        case 'select':
        case 'select-one':
        case 'select-multiple':
          validated = clearRequire;
          break;

        default:
          validated = this.validateText($el);
      }

      if (validator) {
        customValidator = this.matchValidation($el, validator, $el.attr('required'));
      }

      if ($el.attr('data-equalto')) {
        equalTo = this.options.validators.equalTo($el);
      }

      var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;
      var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';

      this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);

      /**
       * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
       * Trigger includes the DOM element of the input.
       * @event Abide#valid
       * @event Abide#invalid
       */
      $el.trigger(message, [$el]);

      return goodToGo;
    }

    /**
     * Goes through a form and if there are any invalid inputs, it will display the form error element
     * @returns {Boolean} noError - true if no errors were detected...
     * @fires Abide#formvalid
     * @fires Abide#forminvalid
     */
    validateForm() {
      var acc = [];
      var _this = this;

      this.$inputs.each(function () {
        acc.push(_this.validateInput($(this)));
      });

      var noError = acc.indexOf(false) === -1;

      this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');

      /**
       * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
       * Trigger includes the element of the form.
       * @event Abide#formvalid
       * @event Abide#forminvalid
       */
      this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);

      return noError;
    }

    /**
     * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
     * @param {Object} $el - jQuery object to validate, should be a text input HTML element
     * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
     * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
     */
    validateText($el, pattern) {
      // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
      pattern = pattern || $el.attr('pattern') || $el.attr('type');
      var inputText = $el.val();
      var valid = false;

      if (inputText.length) {
        // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
        if (this.options.patterns.hasOwnProperty(pattern)) {
          valid = this.options.patterns[pattern].test(inputText);
        }
        // If the pattern name isn't also the type attribute of the field, then test it as a regexp
        else if (pattern !== $el.attr('type')) {
            valid = new RegExp(pattern).test(inputText);
          } else {
            valid = true;
          }
      }
      // An empty field is valid if it's not required
      else if (!$el.prop('required')) {
          valid = true;
        }

      return valid;
    }

    /**
     * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
     * @param {String} groupName - A string that specifies the name of a radio button group
     * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
     */
    validateRadio(groupName) {
      // If at least one radio in the group has the `required` attribute, the group is considered required
      // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
      var $group = this.$element.find(`:radio[name="${ groupName }"]`);
      var valid = false,
          required = false;

      // For the group to be required, at least one radio needs to be required
      $group.each((i, e) => {
        if ($(e).attr('required')) {
          required = true;
        }
      });
      if (!required) valid = true;

      if (!valid) {
        // For the group to be valid, at least one radio needs to be checked
        $group.each((i, e) => {
          if ($(e).prop('checked')) {
            valid = true;
          }
        });
      };

      return valid;
    }

    /**
     * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
     * @param {Object} $el - jQuery input element.
     * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
     * @param {Boolean} required - self explanatory?
     * @returns {Boolean} - true if validations passed.
     */
    matchValidation($el, validators, required) {
      required = required ? true : false;

      var clear = validators.split(' ').map(v => {
        return this.options.validators[v]($el, required, $el.parent());
      });
      return clear.indexOf(false) === -1;
    }

    /**
     * Resets form inputs and styles
     * @fires Abide#formreset
     */
    resetForm() {
      var $form = this.$element,
          opts = this.options;

      $(`.${ opts.labelErrorClass }`, $form).not('small').removeClass(opts.labelErrorClass);
      $(`.${ opts.inputErrorClass }`, $form).not('small').removeClass(opts.inputErrorClass);
      $(`${ opts.formErrorSelector }.${ opts.formErrorClass }`).removeClass(opts.formErrorClass);
      $form.find('[data-abide-error]').css('display', 'none');
      $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
      $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
      $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
      /**
       * Fires when the form has been reset.
       * @event Abide#formreset
       */
      $form.trigger('formreset.zf.abide', [$form]);
    }

    /**
     * Destroys an instance of Abide.
     * Removes error styles and classes from elements, without resetting their values.
     */
    destroy() {
      var _this = this;
      this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');

      this.$inputs.off('.abide').each(function () {
        _this.removeErrorClasses($(this));
      });

      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  Abide.defaults = {
    /**
     * The default event to validate inputs. Checkboxes and radios validate immediately.
     * Remove or change this value for manual validation.
     * @option
     * @example 'fieldChange'
     */
    validateOn: 'fieldChange',

    /**
     * Class to be applied to input labels on failed validation.
     * @option
     * @example 'is-invalid-label'
     */
    labelErrorClass: 'is-invalid-label',

    /**
     * Class to be applied to inputs on failed validation.
     * @option
     * @example 'is-invalid-input'
     */
    inputErrorClass: 'is-invalid-input',

    /**
     * Class selector to use to target Form Errors for show/hide.
     * @option
     * @example '.form-error'
     */
    formErrorSelector: '.form-error',

    /**
     * Class added to Form Errors on failed validation.
     * @option
     * @example 'is-visible'
     */
    formErrorClass: 'is-visible',

    /**
     * Set to true to validate text inputs on any value change.
     * @option
     * @example false
     */
    liveValidate: false,

    patterns: {
      alpha: /^[a-zA-Z]+$/,
      alpha_numeric: /^[a-zA-Z0-9]+$/,
      integer: /^[-+]?\d+$/,
      number: /^[-+]?\d*(?:[\.\,]\d+)?$/,

      // amex, visa, diners
      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
      cvv: /^([0-9]){3,4}$/,

      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
      email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,

      url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
      // abc.de
      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,

      datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
      // YYYY-MM-DD
      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
      // HH:MM:SS
      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
      dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
      // MM/DD/YYYY
      month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
      // DD/MM/YYYY
      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,

      // #FFF or #FFFFFF
      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/
    },

    /**
     * Optional validation functions to be used. `equalTo` being the only default included function.
     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
     * el : The jQuery element to validate.
     * required : Boolean value of the required attribute be present or not.
     * parent : The direct parent of the input.
     * @option
     */
    validators: {
      equalTo: function (el, required, parent) {
        return $(`#${ el.attr('data-equalto') }`).val() === el.val();
      }
    }
  };

  // Window exports
  Foundation.plugin(Abide, 'Abide');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Accordion module.
   * @module foundation.accordion
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   */

  class Accordion {
    /**
     * Creates a new instance of an accordion.
     * @class
     * @fires Accordion#init
     * @param {jQuery} element - jQuery object to make into an accordion.
     * @param {Object} options - a plain object with settings to override the default options.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Accordion');
      Foundation.Keyboard.register('Accordion', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_DOWN': 'next',
        'ARROW_UP': 'previous'
      });
    }

    /**
     * Initializes the accordion by animating the preset active pane(s).
     * @private
     */
    _init() {
      this.$element.attr('role', 'tablist');
      this.$tabs = this.$element.children('li, [data-accordion-item]');

      this.$tabs.each(function (idx, el) {
        var $el = $(el),
            $content = $el.children('[data-tab-content]'),
            id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),
            linkId = el.id || `${ id }-label`;

        $el.find('a:first').attr({
          'aria-controls': id,
          'role': 'tab',
          'id': linkId,
          'aria-expanded': false,
          'aria-selected': false
        });

        $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });
      });
      var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
      if ($initActive.length) {
        this.down($initActive, true);
      }
      this._events();
    }

    /**
     * Adds event handlers for items within the accordion.
     * @private
     */
    _events() {
      var _this = this;

      this.$tabs.each(function () {
        var $elem = $(this);
        var $tabContent = $elem.children('[data-tab-content]');
        if ($tabContent.length) {
          $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
            e.preventDefault();
            _this.toggle($tabContent);
          }).on('keydown.zf.accordion', function (e) {
            Foundation.Keyboard.handleKey(e, 'Accordion', {
              toggle: function () {
                _this.toggle($tabContent);
              },
              next: function () {
                var $a = $elem.next().find('a').focus();
                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              previous: function () {
                var $a = $elem.prev().find('a').focus();
                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              handled: function () {
                e.preventDefault();
                e.stopPropagation();
              }
            });
          });
        }
      });
    }

    /**
     * Toggles the selected content pane's open/close state.
     * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
     * @function
     */
    toggle($target) {
      if ($target.parent().hasClass('is-active')) {
        this.up($target);
      } else {
        this.down($target);
      }
    }

    /**
     * Opens the accordion tab defined by `$target`.
     * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
     * @param {Boolean} firstTime - flag to determine if reflow should happen.
     * @fires Accordion#down
     * @function
     */
    down($target, firstTime) {
      $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

      if (!this.options.multiExpand && !firstTime) {
        var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');
        if ($currentActive.length) {
          this.up($currentActive.not($target));
        }
      }

      $target.slideDown(this.options.slideSpeed, () => {
        /**
         * Fires when the tab is done opening.
         * @event Accordion#down
         */
        this.$element.trigger('down.zf.accordion', [$target]);
      });

      $(`#${ $target.attr('aria-labelledby') }`).attr({
        'aria-expanded': true,
        'aria-selected': true
      });
    }

    /**
     * Closes the tab defined by `$target`.
     * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
     * @fires Accordion#up
     * @function
     */
    up($target) {
      var $aunts = $target.parent().siblings(),
          _this = this;

      if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
        return;
      }

      // Foundation.Move(this.options.slideSpeed, $target, function(){
      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the tab is done collapsing up.
         * @event Accordion#up
         */
        _this.$element.trigger('up.zf.accordion', [$target]);
      });
      // });

      $target.attr('aria-hidden', true).parent().removeClass('is-active');

      $(`#${ $target.attr('aria-labelledby') }`).attr({
        'aria-expanded': false,
        'aria-selected': false
      });
    }

    /**
     * Destroys an instance of an accordion.
     * @fires Accordion#destroyed
     * @function
     */
    destroy() {
      this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
      this.$element.find('a').off('.zf.accordion');

      Foundation.unregisterPlugin(this);
    }
  }

  Accordion.defaults = {
    /**
     * Amount of time to animate the opening of an accordion pane.
     * @option
     * @example 250
     */
    slideSpeed: 250,
    /**
     * Allow the accordion to have multiple open panes.
     * @option
     * @example false
     */
    multiExpand: false,
    /**
     * Allow the accordion to close all panes.
     * @option
     * @example false
     */
    allowAllClosed: false
  };

  // Window exports
  Foundation.plugin(Accordion, 'Accordion');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * AccordionMenu module.
   * @module foundation.accordionMenu
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  class AccordionMenu {
    /**
     * Creates a new instance of an accordion menu.
     * @class
     * @fires AccordionMenu#init
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'accordion');

      this._init();

      Foundation.registerPlugin(this, 'AccordionMenu');
      Foundation.Keyboard.register('AccordionMenu', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_RIGHT': 'open',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'close',
        'ESCAPE': 'closeAll'
      });
    }

    /**
     * Initializes the accordion menu by hiding all nested menus.
     * @private
     */
    _init() {
      this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
      this.$element.attr({
        'role': 'menu',
        'aria-multiselectable': this.options.multiOpen
      });

      this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
      this.$menuLinks.each(function () {
        var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),
            $elem = $(this),
            $sub = $elem.children('[data-submenu]'),
            subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),
            isActive = $sub.hasClass('is-active');
        $elem.attr({
          'aria-controls': subId,
          'aria-expanded': isActive,
          'role': 'menuitem',
          'id': linkId
        });
        $sub.attr({
          'aria-labelledby': linkId,
          'aria-hidden': !isActive,
          'role': 'menu',
          'id': subId
        });
      });
      var initPanes = this.$element.find('.is-active');
      if (initPanes.length) {
        var _this = this;
        initPanes.each(function () {
          _this.down($(this));
        });
      }
      this._events();
    }

    /**
     * Adds event handlers for items within the menu.
     * @private
     */
    _events() {
      var _this = this;

      this.$element.find('li').each(function () {
        var $submenu = $(this).children('[data-submenu]');

        if ($submenu.length) {
          $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
            e.preventDefault();

            _this.toggle($submenu);
          });
        }
      }).on('keydown.zf.accordionmenu', function (e) {
        var $element = $(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement,
            $target = $element.children('[data-submenu]');

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

            if ($(this).children('[data-submenu]:visible').length) {
              // has open sub menu
              $nextElement = $element.find('li:first-child').find('a').first();
            }
            if ($(this).is(':first-child')) {
              // is first element of sub menu
              $prevElement = $element.parents('li').first().find('a').first();
            } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
              // if previous element has open sub menu
              $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
            }
            if ($(this).is(':last-child')) {
              // is last element of sub menu
              $nextElement = $element.parents('li').first().next('li').find('a').first();
            }

            return;
          }
        });

        Foundation.Keyboard.handleKey(e, 'AccordionMenu', {
          open: function () {
            if ($target.is(':hidden')) {
              _this.down($target);
              $target.find('li').first().find('a').first().focus();
            }
          },
          close: function () {
            if ($target.length && !$target.is(':hidden')) {
              // close active sub of this item
              _this.up($target);
            } else if ($element.parent('[data-submenu]').length) {
              // close currently open sub
              _this.up($element.parent('[data-submenu]'));
              $element.parents('li').first().find('a').first().focus();
            }
          },
          up: function () {
            $prevElement.focus();
            return true;
          },
          down: function () {
            $nextElement.focus();
            return true;
          },
          toggle: function () {
            if ($element.children('[data-submenu]').length) {
              _this.toggle($element.children('[data-submenu]'));
            }
          },
          closeAll: function () {
            _this.hideAll();
          },
          handled: function (preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
            e.stopImmediatePropagation();
          }
        });
      }); //.attr('tabindex', 0);
    }

    /**
     * Closes all panes of the menu.
     * @function
     */
    hideAll() {
      this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);
    }

    /**
     * Toggles the open/close state of a submenu.
     * @function
     * @param {jQuery} $target - the submenu to toggle
     */
    toggle($target) {
      if (!$target.is(':animated')) {
        if (!$target.is(':hidden')) {
          this.up($target);
        } else {
          this.down($target);
        }
      }
    }

    /**
     * Opens the sub-menu defined by `$target`.
     * @param {jQuery} $target - Sub-menu to open.
     * @fires AccordionMenu#down
     */
    down($target) {
      var _this = this;

      if (!this.options.multiOpen) {
        this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
      }

      $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });

      //Foundation.Move(this.options.slideSpeed, $target, function() {
      $target.slideDown(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done opening.
         * @event AccordionMenu#down
         */
        _this.$element.trigger('down.zf.accordionMenu', [$target]);
      });
      //});
    }

    /**
     * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
     * @param {jQuery} $target - Sub-menu to close.
     * @fires AccordionMenu#up
     */
    up($target) {
      var _this = this;
      //Foundation.Move(this.options.slideSpeed, $target, function(){
      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done collapsing up.
         * @event AccordionMenu#up
         */
        _this.$element.trigger('up.zf.accordionMenu', [$target]);
      });
      //});

      var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);

      $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
    }

    /**
     * Destroys an instance of accordion menu.
     * @fires AccordionMenu#destroyed
     */
    destroy() {
      this.$element.find('[data-submenu]').slideDown(0).css('display', '');
      this.$element.find('a').off('click.zf.accordionMenu');

      Foundation.Nest.Burn(this.$element, 'accordion');
      Foundation.unregisterPlugin(this);
    }
  }

  AccordionMenu.defaults = {
    /**
     * Amount of time to animate the opening of a submenu in ms.
     * @option
     * @example 250
     */
    slideSpeed: 250,
    /**
     * Allow the menu to have multiple open panes.
     * @option
     * @example true
     */
    multiOpen: true
  };

  // Window exports
  Foundation.plugin(AccordionMenu, 'AccordionMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Drilldown module.
   * @module foundation.drilldown
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  class Drilldown {
    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'drilldown');

      this._init();

      Foundation.registerPlugin(this, 'Drilldown');
      Foundation.Keyboard.register('Drilldown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close',
        'TAB': 'down',
        'SHIFT_TAB': 'up'
      });
    }

    /**
     * Initializes the drilldown by creating jQuery collections of elements
     * @private
     */
    _init() {
      this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');
      this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]');
      this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'menuitem').find('a');

      this._prepareMenu();

      this._keyboardEvents();
    }

    /**
     * prepares drilldown menu by setting attributes to links and elements
     * sets a min height to prevent content jumping
     * wraps the element if not already wrapped
     * @private
     * @function
     */
    _prepareMenu() {
      var _this = this;
      // if(!this.options.holdOpen){
      //   this._menuLinkEvents();
      // }
      this.$submenuAnchors.each(function () {
        var $link = $(this);
        var $sub = $link.parent();
        if (_this.options.parentLink) {
          $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>');
        }
        $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);
        $link.children('[data-submenu]').attr({
          'aria-hidden': true,
          'tabindex': 0,
          'role': 'menu'
        });
        _this._events($link);
      });
      this.$submenus.each(function () {
        var $menu = $(this),
            $back = $menu.find('.js-drilldown-back');
        if (!$back.length) {
          $menu.prepend(_this.options.backButton);
        }
        _this._back($menu);
      });
      if (!this.$element.parent().hasClass('is-drilldown')) {
        this.$wrapper = $(this.options.wrapper).addClass('is-drilldown');
        this.$wrapper = this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());
      }
    }

    /**
     * Adds event handlers to elements in the menu.
     * @function
     * @private
     * @param {jQuery} $elem - the current menu item to add handlers to.
     */
    _events($elem) {
      var _this = this;

      $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
        if ($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {
          e.stopImmediatePropagation();
          e.preventDefault();
        }

        // if(e.target !== e.currentTarget.firstElementChild){
        //   return false;
        // }
        _this._show($elem.parent('li'));

        if (_this.options.closeOnClick) {
          var $body = $('body');
          $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {
            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {
              return;
            }
            e.preventDefault();
            _this._hideAll();
            $body.off('.zf.drilldown');
          });
        }
      });
    }

    /**
     * Adds keydown event listener to `li`'s in the menu.
     * @private
     */
    _keyboardEvents() {
      var _this = this;

      this.$menuItems.add(this.$element.find('.js-drilldown-back > a')).on('keydown.zf.drilldown', function (e) {

        var $element = $(this),
            $elements = $element.parent('li').parent('ul').children('li').children('a'),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1));
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
            return;
          }
        });

        Foundation.Keyboard.handleKey(e, 'Drilldown', {
          next: function () {
            if ($element.is(_this.$submenuAnchors)) {
              _this._show($element.parent('li'));
              $element.parent('li').one(Foundation.transitionend($element), function () {
                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
              });
              return true;
            }
          },
          previous: function () {
            _this._hide($element.parent('li').parent('ul'));
            $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {
              setTimeout(function () {
                $element.parent('li').parent('ul').parent('li').children('a').first().focus();
              }, 1);
            });
            return true;
          },
          up: function () {
            $prevElement.focus();
            return true;
          },
          down: function () {
            $nextElement.focus();
            return true;
          },
          close: function () {
            _this._back();
            //_this.$menuItems.first().focus(); // focus to first element
          },
          open: function () {
            if (!$element.is(_this.$menuItems)) {
              // not menu item means back button
              _this._hide($element.parent('li').parent('ul'));
              $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {
                setTimeout(function () {
                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                }, 1);
              });
              return true;
            } else if ($element.is(_this.$submenuAnchors)) {
              _this._show($element.parent('li'));
              $element.parent('li').one(Foundation.transitionend($element), function () {
                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
              });
              return true;
            }
          },
          handled: function (preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
            e.stopImmediatePropagation();
          }
        });
      }); // end keyboardAccess
    }

    /**
     * Closes all open elements, and returns to root menu.
     * @function
     * @fires Drilldown#closed
     */
    _hideAll() {
      var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');
      $elem.one(Foundation.transitionend($elem), function (e) {
        $elem.removeClass('is-active is-closing');
      });
      /**
       * Fires when the menu is fully closed.
       * @event Drilldown#closed
       */
      this.$element.trigger('closed.zf.drilldown');
    }

    /**
     * Adds event listener for each `back` button, and closes open menus.
     * @function
     * @fires Drilldown#back
     * @param {jQuery} $elem - the current sub-menu to add `back` event.
     */
    _back($elem) {
      var _this = this;
      $elem.off('click.zf.drilldown');
      $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {
        e.stopImmediatePropagation();
        // console.log('mouseup on back');
        _this._hide($elem);

        // If there is a parent submenu, call show
        let parentSubMenu = $elem.parent('li').parent('ul').parent('li');
        if (parentSubMenu.length) {
          _this._show(parentSubMenu);
        }
      });
    }

    /**
     * Adds event listener to menu items w/o submenus to close open menus on click.
     * @function
     * @private
     */
    _menuLinkEvents() {
      var _this = this;
      this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
        // e.stopImmediatePropagation();
        setTimeout(function () {
          _this._hideAll();
        }, 0);
      });
    }

    /**
     * Opens a submenu.
     * @function
     * @fires Drilldown#open
     * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
     */
    _show($elem) {
      $elem.attr('aria-expanded', true);
      $elem.children('[data-submenu]').addClass('is-active').attr('aria-hidden', false);
      /**
       * Fires when the submenu has opened.
       * @event Drilldown#open
       */
      this.$element.trigger('open.zf.drilldown', [$elem]);
    }

    /**
     * Hides a submenu
     * @function
     * @fires Drilldown#hide
     * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
     */
    _hide($elem) {
      var _this = this;
      $elem.parent('li').attr('aria-expanded', false);
      $elem.attr('aria-hidden', true).addClass('is-closing').one(Foundation.transitionend($elem), function () {
        $elem.removeClass('is-active is-closing');
        $elem.blur();
      });
      /**
       * Fires when the submenu has closed.
       * @event Drilldown#hide
       */
      $elem.trigger('hide.zf.drilldown', [$elem]);
    }

    /**
     * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
     * Prevents content jumping.
     * @function
     * @private
     */
    _getMaxDims() {
      var biggest = 0;
      var result = {};

      this.$submenus.add(this.$element).each((i, elem) => {
        var height = elem.getBoundingClientRect().height;
        if (height > biggest) biggest = height;
      });

      result['min-height'] = `${ biggest }px`;
      result['max-width'] = `${ this.$element[0].getBoundingClientRect().width }px`;

      return result;
    }

    /**
     * Destroys the Drilldown Menu
     * @function
     */
    destroy() {
      this._hideAll();
      Foundation.Nest.Burn(this.$element, 'drilldown');
      this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
      this.$submenuAnchors.each(function () {
        $(this).off('.zf.drilldown');
      });
      this.$element.find('a').each(function () {
        var $link = $(this);
        $link.removeAttr('tabindex');
        if ($link.data('savedHref')) {
          $link.attr('href', $link.data('savedHref')).removeData('savedHref');
        } else {
          return;
        }
      });
      Foundation.unregisterPlugin(this);
    }
  }

  Drilldown.defaults = {
    /**
     * Markup used for JS generated back button. Prepended to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
     * @option
     * @example '<\li><\a>Back<\/a><\/li>'
     */
    backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',
    /**
     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
     * @option
     * @example '<\div class="is-drilldown"><\/div>'
     */
    wrapper: '<div></div>',
    /**
     * Adds the parent link to the submenu.
     * @option
     * @example false
     */
    parentLink: false,
    /**
     * Allow the menu to return to root list on body click.
     * @option
     * @example false
     */
    closeOnClick: false
    // holdOpen: false
  };

  // Window exports
  Foundation.plugin(Drilldown, 'Drilldown');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Dropdown module.
   * @module foundation.dropdown
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   */

  class Dropdown {
    /**
     * Creates a new instance of a dropdown.
     * @class
     * @param {jQuery} element - jQuery object to make into a dropdown.
     *        Object should be of the dropdown panel, rather than its anchor.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Dropdown');
      Foundation.Keyboard.register('Dropdown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close',
        'TAB': 'tab_forward',
        'SHIFT_TAB': 'tab_backward'
      });
    }

    /**
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function
     * @private
     */
    _init() {
      var $id = this.$element.attr('id');

      this.$anchor = $(`[data-toggle="${ $id }"]`).length ? $(`[data-toggle="${ $id }"]`) : $(`[data-open="${ $id }"]`);
      this.$anchor.attr({
        'aria-controls': $id,
        'data-is-focus': false,
        'data-yeti-box': $id,
        'aria-haspopup': true,
        'aria-expanded': false

      });

      this.options.positionClass = this.getPositionClass();
      this.counter = 4;
      this.usedPositions = [];
      this.$element.attr({
        'aria-hidden': 'true',
        'data-yeti-box': $id,
        'data-resize': $id,
        'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')
      });
      this._events();
    }

    /**
     * Helper function to determine current orientation of dropdown pane.
     * @function
     * @returns {String} position - string value of a position class.
     */
    getPositionClass() {
      var verticalPosition = this.$element[0].className.match(/(top|left|right|bottom)/g);
      verticalPosition = verticalPosition ? verticalPosition[0] : '';
      var horizontalPosition = /float-(\S+)/.exec(this.$anchor[0].className);
      horizontalPosition = horizontalPosition ? horizontalPosition[1] : '';
      var position = horizontalPosition ? horizontalPosition + ' ' + verticalPosition : verticalPosition;

      return position;
    }

    /**
     * Adjusts the dropdown panes orientation by adding/removing positioning classes.
     * @function
     * @private
     * @param {String} position - position class to remove.
     */
    _reposition(position) {
      this.usedPositions.push(position ? position : 'bottom');
      //default, try switching to opposite side
      if (!position && this.usedPositions.indexOf('top') < 0) {
        this.$element.addClass('top');
      } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
        this.$element.removeClass(position);
      } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
        this.$element.removeClass(position).addClass('right');
      } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
        this.$element.removeClass(position).addClass('left');
      }

      //if default change didn't work, try bottom or left first
      else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.$element.addClass('left');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.$element.removeClass(position).addClass('left');
        } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.$element.removeClass(position);
        } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.$element.removeClass(position);
        }
        //if nothing cleared, set to bottom
        else {
            this.$element.removeClass(position);
          }
      this.classChanged = true;
      this.counter--;
    }

    /**
     * Sets the position and orientation of the dropdown pane, checks for collisions.
     * Recursively calls itself if a collision is detected, with a new position class.
     * @function
     * @private
     */
    _setPosition() {
      if (this.$anchor.attr('aria-expanded') === 'false') {
        return false;
      }
      var position = this.getPositionClass(),
          $eleDims = Foundation.Box.GetDimensions(this.$element),
          $anchorDims = Foundation.Box.GetDimensions(this.$anchor),
          _this = this,
          direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
          param = direction === 'top' ? 'height' : 'width',
          offset = param === 'height' ? this.options.vOffset : this.options.hOffset;

      if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element)) {
        this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
          'width': $eleDims.windowDims.width - this.options.hOffset * 2,
          'height': 'auto'
        });
        this.classChanged = true;
        return false;
      }

      this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));

      while (!Foundation.Box.ImNotTouchingYou(this.$element, false, true) && this.counter) {
        this._reposition(position);
        this._setPosition();
      }
    }

    /**
     * Adds event listeners to the element utilizing the triggers utility library.
     * @function
     * @private
     */
    _events() {
      var _this = this;
      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': this._setPosition.bind(this)
      });

      if (this.options.hover) {
        this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
          if ($('body[data-whatinput="mouse"]').is('*')) {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.open();
              _this.$anchor.data('hover', true);
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.dropdown', function () {
          clearTimeout(_this.timeout);
          _this.timeout = setTimeout(function () {
            _this.close();
            _this.$anchor.data('hover', false);
          }, _this.options.hoverDelay);
        });
        if (this.options.hoverPane) {
          this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
            clearTimeout(_this.timeout);
          }).on('mouseleave.zf.dropdown', function () {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.close();
              _this.$anchor.data('hover', false);
            }, _this.options.hoverDelay);
          });
        }
      }
      this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {

        var $target = $(this),
            visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);

        Foundation.Keyboard.handleKey(e, 'Dropdown', {
          tab_forward: function () {
            if (_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))) {
              // left modal downwards, setting focus to first element
              if (_this.options.trapFocus) {
                // if focus shall be trapped
                visibleFocusableElements.eq(0).focus();
                e.preventDefault();
              } else {
                // if focus is not trapped, close dropdown on focus out
                _this.close();
              }
            }
          },
          tab_backward: function () {
            if (_this.$element.find(':focus').is(visibleFocusableElements.eq(0)) || _this.$element.is(':focus')) {
              // left modal upwards, setting focus to last element
              if (_this.options.trapFocus) {
                // if focus shall be trapped
                visibleFocusableElements.eq(-1).focus();
                e.preventDefault();
              } else {
                // if focus is not trapped, close dropdown on focus out
                _this.close();
              }
            }
          },
          open: function () {
            if ($target.is(_this.$anchor)) {
              _this.open();
              _this.$element.attr('tabindex', -1).focus();
              e.preventDefault();
            }
          },
          close: function () {
            _this.close();
            _this.$anchor.focus();
          }
        });
      });
    }

    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */
    _addBodyHandler() {
      var $body = $(document.body).not(this.$element),
          _this = this;
      $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {
        if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {
          return;
        }
        if (_this.$element.find(e.target).length) {
          return;
        }
        _this.close();
        $body.off('click.zf.dropdown');
      });
    }

    /**
     * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
     * @function
     * @fires Dropdown#closeme
     * @fires Dropdown#show
     */
    open() {
      // var _this = this;
      /**
       * Fires to close other open dropdowns
       * @event Dropdown#closeme
       */
      this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));
      this.$anchor.addClass('hover').attr({ 'aria-expanded': true });
      // this.$element/*.show()*/;
      this._setPosition();
      this.$element.addClass('is-open').attr({ 'aria-hidden': false });

      if (this.options.autoFocus) {
        var $focusable = Foundation.Keyboard.findFocusable(this.$element);
        if ($focusable.length) {
          $focusable.eq(0).focus();
        }
      }

      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }

      /**
       * Fires once the dropdown is visible.
       * @event Dropdown#show
       */
      this.$element.trigger('show.zf.dropdown', [this.$element]);
    }

    /**
     * Closes the open dropdown pane.
     * @function
     * @fires Dropdown#hide
     */
    close() {
      if (!this.$element.hasClass('is-open')) {
        return false;
      }
      this.$element.removeClass('is-open').attr({ 'aria-hidden': true });

      this.$anchor.removeClass('hover').attr('aria-expanded', false);

      if (this.classChanged) {
        var curPositionClass = this.getPositionClass();
        if (curPositionClass) {
          this.$element.removeClass(curPositionClass);
        }
        this.$element.addClass(this.options.positionClass)
        /*.hide()*/.css({ height: '', width: '' });
        this.classChanged = false;
        this.counter = 4;
        this.usedPositions.length = 0;
      }
      this.$element.trigger('hide.zf.dropdown', [this.$element]);
    }

    /**
     * Toggles the dropdown pane's visibility.
     * @function
     */
    toggle() {
      if (this.$element.hasClass('is-open')) {
        if (this.$anchor.data('hover')) return;
        this.close();
      } else {
        this.open();
      }
    }

    /**
     * Destroys the dropdown.
     * @function
     */
    destroy() {
      this.$element.off('.zf.trigger').hide();
      this.$anchor.off('.zf.dropdown');

      Foundation.unregisterPlugin(this);
    }
  }

  Dropdown.defaults = {
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @example 250
     */
    hoverDelay: 250,
    /**
     * Allow submenus to open on hover events
     * @option
     * @example false
     */
    hover: false,
    /**
     * Don't close dropdown when hovering over dropdown pane
     * @option
     * @example true
     */
    hoverPane: false,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @example 1
     */
    vOffset: 1,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @example 1
     */
    hOffset: 1,
    /**
     * Class applied to adjust open position. JS will test and fill this in.
     * @option
     * @example 'top'
     */
    positionClass: '',
    /**
     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
     * @option
     * @example false
     */
    trapFocus: false,
    /**
     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
     * @option
     * @example true
     */
    autoFocus: false,
    /**
     * Allows a click on the body to close the dropdown.
     * @option
     * @example false
     */
    closeOnClick: false
  };

  // Window exports
  Foundation.plugin(Dropdown, 'Dropdown');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * DropdownMenu module.
   * @module foundation.dropdown-menu
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.nest
   */

  class DropdownMenu {
    /**
     * Creates a new instance of DropdownMenu.
     * @class
     * @fires DropdownMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'dropdown');
      this._init();

      Foundation.registerPlugin(this, 'DropdownMenu');
      Foundation.Keyboard.register('DropdownMenu', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the plugin, and calls _prepareMenu
     * @private
     * @function
     */
    _init() {
      var subs = this.$element.find('li.is-dropdown-submenu-parent');
      this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');

      this.$menuItems = this.$element.find('[role="menuitem"]');
      this.$tabs = this.$element.children('[role="menuitem"]');
      this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);

      if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl() || this.$element.parents('.top-bar-right').is('*')) {
        this.options.alignment = 'right';
        subs.addClass('opens-left');
      } else {
        subs.addClass('opens-right');
      }
      this.changed = false;
      this._events();
    }

    _isVertical() {
      return this.$tabs.css('display') === 'block';
    }

    /**
     * Adds event listeners to elements within the menu
     * @private
     * @function
     */
    _events() {
      var _this = this,
          hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',
          parClass = 'is-dropdown-submenu-parent';

      // used for onClick and in the keyboard handlers
      var handleClickFn = function (e) {
        var $elem = $(e.target).parentsUntil('ul', `.${ parClass }`),
            hasSub = $elem.hasClass(parClass),
            hasClicked = $elem.attr('data-is-click') === 'true',
            $sub = $elem.children('.is-dropdown-submenu');

        if (hasSub) {
          if (hasClicked) {
            if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
              return;
            } else {
              e.stopImmediatePropagation();
              e.preventDefault();
              _this._hide($elem);
            }
          } else {
            e.preventDefault();
            e.stopImmediatePropagation();
            _this._show($sub);
            $elem.add($elem.parentsUntil(_this.$element, `.${ parClass }`)).attr('data-is-click', true);
          }
        } else {
          if (_this.options.closeOnClickInside) {
            _this._hide($elem);
          }
          return;
        }
      };

      if (this.options.clickOpen || hasTouch) {
        this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);
      }

      if (!this.options.disableHover) {
        this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {
          var $elem = $(this),
              hasSub = $elem.hasClass(parClass);

          if (hasSub) {
            clearTimeout(_this.delay);
            _this.delay = setTimeout(function () {
              _this._show($elem.children('.is-dropdown-submenu'));
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.dropdownmenu', function (e) {
          var $elem = $(this),
              hasSub = $elem.hasClass(parClass);
          if (hasSub && _this.options.autoclose) {
            if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {
              return false;
            }

            clearTimeout(_this.delay);
            _this.delay = setTimeout(function () {
              _this._hide($elem);
            }, _this.options.closingTime);
          }
        });
      }
      this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {
        var $element = $(e.target).parentsUntil('ul', '[role="menuitem"]'),
            isTab = _this.$tabs.index($element) > -1,
            $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(i - 1);
            $nextElement = $elements.eq(i + 1);
            return;
          }
        });

        var nextSibling = function () {
          if (!$element.is(':last-child')) {
            $nextElement.children('a:first').focus();
            e.preventDefault();
          }
        },
            prevSibling = function () {
          $prevElement.children('a:first').focus();
          e.preventDefault();
        },
            openSub = function () {
          var $sub = $element.children('ul.is-dropdown-submenu');
          if ($sub.length) {
            _this._show($sub);
            $element.find('li > a:first').focus();
            e.preventDefault();
          } else {
            return;
          }
        },
            closeSub = function () {
          //if ($element.is(':first-child')) {
          var close = $element.parent('ul').parent('li');
          close.children('a:first').focus();
          _this._hide(close);
          e.preventDefault();
          //}
        };
        var functions = {
          open: openSub,
          close: function () {
            _this._hide(_this.$element);
            _this.$menuItems.find('a:first').focus(); // focus to first element
            e.preventDefault();
          },
          handled: function () {
            e.stopImmediatePropagation();
          }
        };

        if (isTab) {
          if (_this._isVertical()) {
            // vertical menu
            if (Foundation.rtl()) {
              // right aligned
              $.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: closeSub,
                previous: openSub
              });
            } else {
              // left aligned
              $.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: openSub,
                previous: closeSub
              });
            }
          } else {
            // horizontal menu
            if (Foundation.rtl()) {
              // right aligned
              $.extend(functions, {
                next: prevSibling,
                previous: nextSibling,
                down: openSub,
                up: closeSub
              });
            } else {
              // left aligned
              $.extend(functions, {
                next: nextSibling,
                previous: prevSibling,
                down: openSub,
                up: closeSub
              });
            }
          }
        } else {
          // not tabs -> one sub
          if (Foundation.rtl()) {
            // right aligned
            $.extend(functions, {
              next: closeSub,
              previous: openSub,
              down: nextSibling,
              up: prevSibling
            });
          } else {
            // left aligned
            $.extend(functions, {
              next: openSub,
              previous: closeSub,
              down: nextSibling,
              up: prevSibling
            });
          }
        }
        Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);
      });
    }

    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */
    _addBodyHandler() {
      var $body = $(document.body),
          _this = this;
      $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
        var $link = _this.$element.find(e.target);
        if ($link.length) {
          return;
        }

        _this._hide();
        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');
      });
    }

    /**
     * Opens a dropdown pane, and checks for collisions first.
     * @param {jQuery} $sub - ul element that is a submenu to show
     * @function
     * @private
     * @fires DropdownMenu#show
     */
    _show($sub) {
      var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {
        return $(el).find($sub).length > 0;
      }));
      var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');
      this._hide($sibs, idx);
      $sub.css('visibility', 'hidden').addClass('js-dropdown-active').attr({ 'aria-hidden': false }).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({ 'aria-expanded': true });
      var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
      if (!clear) {
        var oldClass = this.options.alignment === 'left' ? '-right' : '-left',
            $parentLi = $sub.parent('.is-dropdown-submenu-parent');
        $parentLi.removeClass(`opens${ oldClass }`).addClass(`opens-${ this.options.alignment }`);
        clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
        if (!clear) {
          $parentLi.removeClass(`opens-${ this.options.alignment }`).addClass('opens-inner');
        }
        this.changed = true;
      }
      $sub.css('visibility', '');
      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }
      /**
       * Fires when the new dropdown pane is visible.
       * @event DropdownMenu#show
       */
      this.$element.trigger('show.zf.dropdownmenu', [$sub]);
    }

    /**
     * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
     * @function
     * @param {jQuery} $elem - element with a submenu to hide
     * @param {Number} idx - index of the $tabs collection to hide
     * @private
     */
    _hide($elem, idx) {
      var $toClose;
      if ($elem && $elem.length) {
        $toClose = $elem;
      } else if (idx !== undefined) {
        $toClose = this.$tabs.not(function (i, el) {
          return i === idx;
        });
      } else {
        $toClose = this.$element;
      }
      var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;

      if (somethingToClose) {
        $toClose.find('li.is-active').add($toClose).attr({
          'aria-expanded': false,
          'data-is-click': false
        }).removeClass('is-active');

        $toClose.find('ul.js-dropdown-active').attr({
          'aria-hidden': true
        }).removeClass('js-dropdown-active');

        if (this.changed || $toClose.find('opens-inner').length) {
          var oldClass = this.options.alignment === 'left' ? 'right' : 'left';
          $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass(`opens-inner opens-${ this.options.alignment }`).addClass(`opens-${ oldClass }`);
          this.changed = false;
        }
        /**
         * Fires when the open menus are closed.
         * @event DropdownMenu#hide
         */
        this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);
      }
    }

    /**
     * Destroys the plugin.
     * @function
     */
    destroy() {
      this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
      $(document.body).off('.zf.dropdownmenu');
      Foundation.Nest.Burn(this.$element, 'dropdown');
      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  DropdownMenu.defaults = {
    /**
     * Disallows hover events from opening submenus
     * @option
     * @example false
     */
    disableHover: false,
    /**
     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
     * @option
     * @example true
     */
    autoclose: true,
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @example 50
     */
    hoverDelay: 50,
    /**
     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
     * @option
     * @example true
     */
    clickOpen: false,
    /**
     * Amount of time to delay closing a submenu on a mouseleave event.
     * @option
     * @example 500
     */

    closingTime: 500,
    /**
     * Position of the menu relative to what direction the submenus should open. Handled by JS.
     * @option
     * @example 'left'
     */
    alignment: 'left',
    /**
     * Allow clicks on the body to close any open submenus.
     * @option
     * @example true
     */
    closeOnClick: true,
    /**
     * Allow clicks on leaf anchor links to close any open submenus.
     * @option
     * @example true
     */
    closeOnClickInside: true,
    /**
     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
     * @option
     * @example 'vertical'
     */
    verticalClass: 'vertical',
    /**
     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
     * @option
     * @example 'align-right'
     */
    rightClass: 'align-right',
    /**
     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
     * @option
     * @example false
     */
    forceFollow: true
  };

  // Window exports
  Foundation.plugin(DropdownMenu, 'DropdownMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Equalizer module.
   * @module foundation.equalizer
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader if equalizer contains images
   */

  class Equalizer {
    /**
     * Creates a new instance of Equalizer.
     * @class
     * @fires Equalizer#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Equalizer');
    }

    /**
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
     * @private
     */
    _init() {
      var eqId = this.$element.attr('data-equalizer') || '';
      var $watched = this.$element.find(`[data-equalizer-watch="${ eqId }"]`);

      this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
      this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));

      this.hasNested = this.$element.find('[data-equalizer]').length > 0;
      this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
      this.isOn = false;
      this._bindHandler = {
        onResizeMeBound: this._onResizeMe.bind(this),
        onPostEqualizedBound: this._onPostEqualized.bind(this)
      };

      var imgs = this.$element.find('img');
      var tooSmall;
      if (this.options.equalizeOn) {
        tooSmall = this._checkMQ();
        $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
      } else {
        this._events();
      }
      if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {
        if (imgs.length) {
          Foundation.onImagesLoaded(imgs, this._reflow.bind(this));
        } else {
          this._reflow();
        }
      }
    }

    /**
     * Removes event listeners if the breakpoint is too small.
     * @private
     */
    _pauseEvents() {
      this.isOn = false;
      this.$element.off({
        '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
        'resizeme.zf.trigger': this._bindHandler.onResizeMeBound
      });
    }

    /**
     * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
     * @private
     */
    _onResizeMe(e) {
      this._reflow();
    }

    /**
     * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
     * @private
     */
    _onPostEqualized(e) {
      if (e.target !== this.$element[0]) {
        this._reflow();
      }
    }

    /**
     * Initializes events for Equalizer.
     * @private
     */
    _events() {
      var _this = this;
      this._pauseEvents();
      if (this.hasNested) {
        this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
      } else {
        this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
      }
      this.isOn = true;
    }

    /**
     * Checks the current breakpoint to the minimum required size.
     * @private
     */
    _checkMQ() {
      var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);
      if (tooSmall) {
        if (this.isOn) {
          this._pauseEvents();
          this.$watched.css('height', 'auto');
        }
      } else {
        if (!this.isOn) {
          this._events();
        }
      }
      return tooSmall;
    }

    /**
     * A noop version for the plugin
     * @private
     */
    _killswitch() {
      return;
    }

    /**
     * Calls necessary functions to update Equalizer upon DOM change
     * @private
     */
    _reflow() {
      if (!this.options.equalizeOnStack) {
        if (this._isStacked()) {
          this.$watched.css('height', 'auto');
          return false;
        }
      }
      if (this.options.equalizeByRow) {
        this.getHeightsByRow(this.applyHeightByRow.bind(this));
      } else {
        this.getHeights(this.applyHeight.bind(this));
      }
    }

    /**
     * Manually determines if the first 2 elements are *NOT* stacked.
     * @private
     */
    _isStacked() {
      return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
    }

    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} heights - An array of heights of children within Equalizer container
     */
    getHeights(cb) {
      var heights = [];
      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        heights.push(this.$watched[i].offsetHeight);
      }
      cb(heights);
    }

    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     */
    getHeightsByRow(cb) {
      var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
          groups = [],
          group = 0;
      //group by Row
      groups[group] = [];
      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        //maybe could use this.$watched[i].offsetTop
        var elOffsetTop = $(this.$watched[i]).offset().top;
        if (elOffsetTop != lastElTopOffset) {
          group++;
          groups[group] = [];
          lastElTopOffset = elOffsetTop;
        }
        groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
      }

      for (var j = 0, ln = groups.length; j < ln; j++) {
        var heights = $(groups[j]).map(function () {
          return this[1];
        }).get();
        var max = Math.max.apply(null, heights);
        groups[j].push(max);
      }
      cb(groups);
    }

    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest
     * @param {array} heights - An array of heights of children within Equalizer container
     * @fires Equalizer#preequalized
     * @fires Equalizer#postequalized
     */
    applyHeight(heights) {
      var max = Math.max.apply(null, heights);
      /**
       * Fires before the heights are applied
       * @event Equalizer#preequalized
       */
      this.$element.trigger('preequalized.zf.equalizer');

      this.$watched.css('height', max);

      /**
       * Fires when the heights have been applied
       * @event Equalizer#postequalized
       */
      this.$element.trigger('postequalized.zf.equalizer');
    }

    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
     * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     * @fires Equalizer#preequalized
     * @fires Equalizer#preequalizedRow
     * @fires Equalizer#postequalizedRow
     * @fires Equalizer#postequalized
     */
    applyHeightByRow(groups) {
      /**
       * Fires before the heights are applied
       */
      this.$element.trigger('preequalized.zf.equalizer');
      for (var i = 0, len = groups.length; i < len; i++) {
        var groupsILength = groups[i].length,
            max = groups[i][groupsILength - 1];
        if (groupsILength <= 2) {
          $(groups[i][0][0]).css({ 'height': 'auto' });
          continue;
        }
        /**
          * Fires before the heights per row are applied
          * @event Equalizer#preequalizedRow
          */
        this.$element.trigger('preequalizedrow.zf.equalizer');
        for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
          $(groups[i][j][0]).css({ 'height': max });
        }
        /**
          * Fires when the heights per row have been applied
          * @event Equalizer#postequalizedRow
          */
        this.$element.trigger('postequalizedrow.zf.equalizer');
      }
      /**
       * Fires when the heights have been applied
       */
      this.$element.trigger('postequalized.zf.equalizer');
    }

    /**
     * Destroys an instance of Equalizer.
     * @function
     */
    destroy() {
      this._pauseEvents();
      this.$watched.css('height', 'auto');

      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  Equalizer.defaults = {
    /**
     * Enable height equalization when stacked on smaller screens.
     * @option
     * @example true
     */
    equalizeOnStack: false,
    /**
     * Enable height equalization row by row.
     * @option
     * @example false
     */
    equalizeByRow: false,
    /**
     * String representing the minimum breakpoint size the plugin should equalize heights on.
     * @option
     * @example 'medium'
     */
    equalizeOn: ''
  };

  // Window exports
  Foundation.plugin(Equalizer, 'Equalizer');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Interchange module.
   * @module foundation.interchange
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader
   */

  class Interchange {
    /**
     * Creates a new instance of Interchange.
     * @class
     * @fires Interchange#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Interchange.defaults, options);
      this.rules = [];
      this.currentPath = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Interchange');
    }

    /**
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
     * @function
     * @private
     */
    _init() {
      this._addBreakpoints();
      this._generateRules();
      this._reflow();
    }

    /**
     * Initializes events for Interchange.
     * @function
     * @private
     */
    _events() {
      $(window).on('resize.zf.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));
    }

    /**
     * Calls necessary functions to update Interchange upon DOM change
     * @function
     * @private
     */
    _reflow() {
      var match;

      // Iterate through each rule, but only save the last match
      for (var i in this.rules) {
        if (this.rules.hasOwnProperty(i)) {
          var rule = this.rules[i];

          if (window.matchMedia(rule.query).matches) {
            match = rule;
          }
        }
      }

      if (match) {
        this.replace(match.path);
      }
    }

    /**
     * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
     * @function
     * @private
     */
    _addBreakpoints() {
      for (var i in Foundation.MediaQuery.queries) {
        if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {
          var query = Foundation.MediaQuery.queries[i];
          Interchange.SPECIAL_QUERIES[query.name] = query.value;
        }
      }
    }

    /**
     * Checks the Interchange element for the provided media query + content pairings
     * @function
     * @private
     * @param {Object} element - jQuery object that is an Interchange instance
     * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
     */
    _generateRules(element) {
      var rulesList = [];
      var rules;

      if (this.options.rules) {
        rules = this.options.rules;
      } else {
        rules = this.$element.data('interchange').match(/\[.*?\]/g);
      }

      for (var i in rules) {
        if (rules.hasOwnProperty(i)) {
          var rule = rules[i].slice(1, -1).split(', ');
          var path = rule.slice(0, -1).join('');
          var query = rule[rule.length - 1];

          if (Interchange.SPECIAL_QUERIES[query]) {
            query = Interchange.SPECIAL_QUERIES[query];
          }

          rulesList.push({
            path: path,
            query: query
          });
        }
      }

      this.rules = rulesList;
    }

    /**
     * Update the `src` property of an image, or change the HTML of a container, to the specified path.
     * @function
     * @param {String} path - Path to the image or HTML partial.
     * @fires Interchange#replaced
     */
    replace(path) {
      if (this.currentPath === path) return;

      var _this = this,
          trigger = 'replaced.zf.interchange';

      // Replacing images
      if (this.$element[0].nodeName === 'IMG') {
        this.$element.attr('src', path).on('load', function () {
          _this.currentPath = path;
        }).trigger(trigger);
      }
      // Replacing background images
      else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
          this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);
        }
        // Replacing HTML
        else {
            $.get(path, function (response) {
              _this.$element.html(response).trigger(trigger);
              $(response).foundation();
              _this.currentPath = path;
            });
          }

      /**
       * Fires when content in an Interchange element is done being loaded.
       * @event Interchange#replaced
       */
      // this.$element.trigger('replaced.zf.interchange');
    }

    /**
     * Destroys an instance of interchange.
     * @function
     */
    destroy() {
      //TODO this.
    }
  }

  /**
   * Default settings for plugin
   */
  Interchange.defaults = {
    /**
     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
     * @option
     */
    rules: null
  };

  Interchange.SPECIAL_QUERIES = {
    'landscape': 'screen and (orientation: landscape)',
    'portrait': 'screen and (orientation: portrait)',
    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
  };

  // Window exports
  Foundation.plugin(Interchange, 'Interchange');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Magellan module.
   * @module foundation.magellan
   */

  class Magellan {
    /**
     * Creates a new instance of Magellan.
     * @class
     * @fires Magellan#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Magellan');
    }

    /**
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
     * @private
     */
    _init() {
      var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');
      var _this = this;
      this.$targets = $('[data-magellan-target]');
      this.$links = this.$element.find('a');
      this.$element.attr({
        'data-resize': id,
        'data-scroll': id,
        'id': id
      });
      this.$active = $();
      this.scrollPos = parseInt(window.pageYOffset, 10);

      this._events();
    }

    /**
     * Calculates an array of pixel values that are the demarcation lines between locations on the page.
     * Can be invoked if new elements are added or the size of a location changes.
     * @function
     */
    calcPoints() {
      var _this = this,
          body = document.body,
          html = document.documentElement;

      this.points = [];
      this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
      this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));

      this.$targets.each(function () {
        var $tar = $(this),
            pt = Math.round($tar.offset().top - _this.options.threshold);
        $tar.targetPoint = pt;
        _this.points.push(pt);
      });
    }

    /**
     * Initializes events for Magellan.
     * @private
     */
    _events() {
      var _this = this,
          $body = $('html, body'),
          opts = {
        duration: _this.options.animationDuration,
        easing: _this.options.animationEasing
      };
      $(window).one('load', function () {
        if (_this.options.deepLinking) {
          if (location.hash) {
            _this.scrollToLoc(location.hash);
          }
        }
        _this.calcPoints();
        _this._updateActive();
      });

      this.$element.on({
        'resizeme.zf.trigger': this.reflow.bind(this),
        'scrollme.zf.trigger': this._updateActive.bind(this)
      }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
        e.preventDefault();
        var arrival = this.getAttribute('href');
        _this.scrollToLoc(arrival);
      });
    }

    /**
     * Function to scroll to a given location on the page.
     * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
     * @function
     */
    scrollToLoc(loc) {
      // Do nothing if target does not exist to prevent errors
      if (!$(loc).length) {
        return false;
      }
      var scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);

      $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing);
    }

    /**
     * Calls necessary functions to update Magellan upon DOM change
     * @function
     */
    reflow() {
      this.calcPoints();
      this._updateActive();
    }

    /**
     * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
     * @private
     * @function
     * @fires Magellan#update
     */
    _updateActive() /*evt, elem, scrollPos*/{
      var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),
          curIdx;

      if (winPos + this.winHeight === this.docHeight) {
        curIdx = this.points.length - 1;
      } else if (winPos < this.points[0]) {
        curIdx = 0;
      } else {
        var isDown = this.scrollPos < winPos,
            _this = this,
            curVisible = this.points.filter(function (p, i) {
          return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;
        });
        curIdx = curVisible.length ? curVisible.length - 1 : 0;
      }

      this.$active.removeClass(this.options.activeClass);
      this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);

      if (this.options.deepLinking) {
        var hash = this.$active[0].getAttribute('href');
        if (window.history.pushState) {
          window.history.pushState(null, null, hash);
        } else {
          window.location.hash = hash;
        }
      }

      this.scrollPos = winPos;
      /**
       * Fires when magellan is finished updating to the new active element.
       * @event Magellan#update
       */
      this.$element.trigger('update.zf.magellan', [this.$active]);
    }

    /**
     * Destroys an instance of Magellan and resets the url of the window.
     * @function
     */
    destroy() {
      this.$element.off('.zf.trigger .zf.magellan').find(`.${ this.options.activeClass }`).removeClass(this.options.activeClass);

      if (this.options.deepLinking) {
        var hash = this.$active[0].getAttribute('href');
        window.location.hash.replace(hash, '');
      }

      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  Magellan.defaults = {
    /**
     * Amount of time, in ms, the animated scrolling should take between locations.
     * @option
     * @example 500
     */
    animationDuration: 500,
    /**
     * Animation style to use when scrolling between locations.
     * @option
     * @example 'ease-in-out'
     */
    animationEasing: 'linear',
    /**
     * Number of pixels to use as a marker for location changes.
     * @option
     * @example 50
     */
    threshold: 50,
    /**
     * Class applied to the active locations link on the magellan container.
     * @option
     * @example 'active'
     */
    activeClass: 'active',
    /**
     * Allows the script to manipulate the url of the current page, and if supported, alter the history.
     * @option
     * @example true
     */
    deepLinking: false,
    /**
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
     * @option
     * @example 25
     */
    barOffset: 0
  };

  // Window exports
  Foundation.plugin(Magellan, 'Magellan');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * OffCanvas module.
   * @module foundation.offcanvas
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   * @requires foundation.util.motion
   */

  class OffCanvas {
    /**
     * Creates a new instance of an off-canvas wrapper.
     * @class
     * @fires OffCanvas#init
     * @param {Object} element - jQuery object to initialize.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);
      this.$lastTrigger = $();
      this.$triggers = $();

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'OffCanvas');
      Foundation.Keyboard.register('OffCanvas', {
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
     * @function
     * @private
     */
    _init() {
      var id = this.$element.attr('id');

      this.$element.attr('aria-hidden', 'true');

      // Find triggers that affect this element and add aria-expanded to them
      this.$triggers = $(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);

      // Add a close trigger over the body if necessary
      if (this.options.closeOnClick) {
        if ($('.js-off-canvas-exit').length) {
          this.$exiter = $('.js-off-canvas-exit');
        } else {
          var exiter = document.createElement('div');
          exiter.setAttribute('class', 'js-off-canvas-exit');
          $('[data-off-canvas-content]').append(exiter);

          this.$exiter = $(exiter);
        }
      }

      this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);

      if (this.options.isRevealed) {
        this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
        this._setMQChecker();
      }
      if (!this.options.transitionTime) {
        this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration) * 1000;
      }
    }

    /**
     * Adds event handlers to the off-canvas wrapper and the exit overlay.
     * @function
     * @private
     */
    _events() {
      this.$element.off('.zf.trigger .zf.offcanvas').on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
      });

      if (this.options.closeOnClick && this.$exiter.length) {
        this.$exiter.on({ 'click.zf.offcanvas': this.close.bind(this) });
      }
    }

    /**
     * Applies event listener for elements that will reveal at certain breakpoints.
     * @private
     */
    _setMQChecker() {
      var _this = this;

      $(window).on('changed.zf.mediaquery', function () {
        if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        } else {
          _this.reveal(false);
        }
      }).one('load.zf.offcanvas', function () {
        if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        }
      });
    }

    /**
     * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
     * @param {Boolean} isRevealed - true if element should be revealed.
     * @function
     */
    reveal(isRevealed) {
      var $closer = this.$element.find('[data-close]');
      if (isRevealed) {
        this.close();
        this.isRevealed = true;
        // if (!this.options.forceTop) {
        //   var scrollPos = parseInt(window.pageYOffset);
        //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
        // }
        // if (this.options.isSticky) { this._stick(); }
        this.$element.off('open.zf.trigger toggle.zf.trigger');
        if ($closer.length) {
          $closer.hide();
        }
      } else {
        this.isRevealed = false;
        // if (this.options.isSticky || !this.options.forceTop) {
        //   this.$element[0].style.transform = '';
        //   $(window).off('scroll.zf.offcanvas');
        // }
        this.$element.on({
          'open.zf.trigger': this.open.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this)
        });
        if ($closer.length) {
          $closer.show();
        }
      }
    }

    /**
     * Opens the off-canvas menu.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     * @fires OffCanvas#opened
     */
    open(event, trigger) {
      if (this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }
      var _this = this,
          $body = $(document.body);

      if (this.options.forceTop) {
        $('body').scrollTop(0);
      }
      // window.pageYOffset = 0;

      // if (!this.options.forceTop) {
      //   var scrollPos = parseInt(window.pageYOffset);
      //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
      //   if (this.$exiter.length) {
      //     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';
      //   }
      // }
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#opened
       */

      var $wrapper = $('[data-off-canvas-wrapper]');
      $wrapper.addClass('is-off-canvas-open is-open-' + _this.options.position);

      _this.$element.addClass('is-open');

      // if (_this.options.isSticky) {
      //   _this._stick();
      // }

      this.$triggers.attr('aria-expanded', 'true');
      this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');

      if (this.options.closeOnClick) {
        this.$exiter.addClass('is-visible');
      }

      if (trigger) {
        this.$lastTrigger = trigger;
      }

      if (this.options.autoFocus) {
        $wrapper.one(Foundation.transitionend($wrapper), function () {
          if (_this.$element.hasClass('is-open')) {
            // handle double clicks
            _this.$element.attr('tabindex', '-1');
            _this.$element.focus();
          }
        });
      }

      if (this.options.trapFocus) {
        $wrapper.one(Foundation.transitionend($wrapper), function () {
          if (_this.$element.hasClass('is-open')) {
            // handle double clicks
            _this.$element.attr('tabindex', '-1');
            _this.trapFocus();
          }
        });
      }
    }

    /**
     * Traps focus within the offcanvas on open.
     * @private
     */
    _trapFocus() {
      var focusable = Foundation.Keyboard.findFocusable(this.$element),
          first = focusable.eq(0),
          last = focusable.eq(-1);

      focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas', function (e) {
        var key = Foundation.Keyboard.parseKey(e);
        if (key === 'TAB' && e.target === last[0]) {
          e.preventDefault();
          first.focus();
        }
        if (key === 'SHIFT_TAB' && e.target === first[0]) {
          e.preventDefault();
          last.focus();
        }
      });
    }

    /**
     * Allows the offcanvas to appear sticky utilizing translate properties.
     * @private
     */
    // OffCanvas.prototype._stick = function() {
    //   var elStyle = this.$element[0].style;
    //
    //   if (this.options.closeOnClick) {
    //     var exitStyle = this.$exiter[0].style;
    //   }
    //
    //   $(window).on('scroll.zf.offcanvas', function(e) {
    //     console.log(e);
    //     var pageY = window.pageYOffset;
    //     elStyle.transform = 'translate(0,' + pageY + 'px)';
    //     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }
    //   });
    //   // this.$element.trigger('stuck.zf.offcanvas');
    // };
    /**
     * Closes the off-canvas menu.
     * @function
     * @param {Function} cb - optional cb to fire after closure.
     * @fires OffCanvas#closed
     */
    close(cb) {
      if (!this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }

      var _this = this;

      //  Foundation.Move(this.options.transitionTime, this.$element, function() {
      $('[data-off-canvas-wrapper]').removeClass(`is-off-canvas-open is-open-${ _this.options.position }`);
      _this.$element.removeClass('is-open');
      // Foundation._reflow();
      // });
      this.$element.attr('aria-hidden', 'true')
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#closed
       */
      .trigger('closed.zf.offcanvas');
      // if (_this.options.isSticky || !_this.options.forceTop) {
      //   setTimeout(function() {
      //     _this.$element[0].style.transform = '';
      //     $(window).off('scroll.zf.offcanvas');
      //   }, this.options.transitionTime);
      // }
      if (this.options.closeOnClick) {
        this.$exiter.removeClass('is-visible');
      }

      this.$triggers.attr('aria-expanded', 'false');
      if (this.options.trapFocus) {
        $('[data-off-canvas-content]').removeAttr('tabindex');
      }
    }

    /**
     * Toggles the off-canvas menu open or closed.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     */
    toggle(event, trigger) {
      if (this.$element.hasClass('is-open')) {
        this.close(event, trigger);
      } else {
        this.open(event, trigger);
      }
    }

    /**
     * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
     * @function
     * @private
     */
    _handleKeyboard(e) {
      Foundation.Keyboard.handleKey(e, 'OffCanvas', {
        close: () => {
          this.close();
          this.$lastTrigger.focus();
          return true;
        },
        handled: () => {
          e.stopPropagation();
          e.preventDefault();
        }
      });
    }

    /**
     * Destroys the offcanvas plugin.
     * @function
     */
    destroy() {
      this.close();
      this.$element.off('.zf.trigger .zf.offcanvas');
      this.$exiter.off('.zf.offcanvas');

      Foundation.unregisterPlugin(this);
    }
  }

  OffCanvas.defaults = {
    /**
     * Allow the user to click outside of the menu to close it.
     * @option
     * @example true
     */
    closeOnClick: true,

    /**
     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
     * @option
     * @example 500
     */
    transitionTime: 0,

    /**
     * Direction the offcanvas opens from. Determines class applied to body.
     * @option
     * @example left
     */
    position: 'left',

    /**
     * Force the page to scroll to top on open.
     * @option
     * @example true
     */
    forceTop: true,

    /**
     * Allow the offcanvas to remain open for certain breakpoints.
     * @option
     * @example false
     */
    isRevealed: false,

    /**
     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
     * @option
     * @example reveal-for-large
     */
    revealOn: null,

    /**
     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @example true
     */
    autoFocus: true,

    /**
     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
     * @option
     * TODO improve the regex testing for this.
     * @example reveal-for-large
     */
    revealClass: 'reveal-for-',

    /**
     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @example true
     */
    trapFocus: false
  };

  // Window exports
  Foundation.plugin(OffCanvas, 'OffCanvas');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Orbit module.
   * @module foundation.orbit
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.timerAndImageLoader
   * @requires foundation.util.touch
   */

  class Orbit {
    /**
    * Creates a new instance of an orbit carousel.
    * @class
    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.
    * @param {Object} options - Overrides to the default plugin settings.
    */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Orbit');
      Foundation.Keyboard.register('Orbit', {
        'ltr': {
          'ARROW_RIGHT': 'next',
          'ARROW_LEFT': 'previous'
        },
        'rtl': {
          'ARROW_LEFT': 'next',
          'ARROW_RIGHT': 'previous'
        }
      });
    }

    /**
    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.
    * @function
    * @private
    */
    _init() {
      this.$wrapper = this.$element.find(`.${ this.options.containerClass }`);
      this.$slides = this.$element.find(`.${ this.options.slideClass }`);
      var $images = this.$element.find('img'),
          initActive = this.$slides.filter('.is-active');

      if (!initActive.length) {
        this.$slides.eq(0).addClass('is-active');
      }

      if (!this.options.useMUI) {
        this.$slides.addClass('no-motionui');
      }

      if ($images.length) {
        Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));
      } else {
        this._prepareForOrbit(); //hehe
      }

      if (this.options.bullets) {
        this._loadBullets();
      }

      this._events();

      if (this.options.autoPlay && this.$slides.length > 1) {
        this.geoSync();
      }

      if (this.options.accessible) {
        // allow wrapper to be focusable to enable arrow navigation
        this.$wrapper.attr('tabindex', 0);
      }
    }

    /**
    * Creates a jQuery collection of bullets, if they are being used.
    * @function
    * @private
    */
    _loadBullets() {
      this.$bullets = this.$element.find(`.${ this.options.boxOfBullets }`).find('button');
    }

    /**
    * Sets a `timer` object on the orbit, and starts the counter for the next slide.
    * @function
    */
    geoSync() {
      var _this = this;
      this.timer = new Foundation.Timer(this.$element, {
        duration: this.options.timerDelay,
        infinite: false
      }, function () {
        _this.changeSlide(true);
      });
      this.timer.start();
    }

    /**
    * Sets wrapper and slide heights for the orbit.
    * @function
    * @private
    */
    _prepareForOrbit() {
      var _this = this;
      this._setWrapperHeight(function (max) {
        _this._setSlideHeight(max);
      });
    }

    /**
    * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.
    * @function
    * @private
    * @param {Function} cb - a callback function to fire when complete.
    */
    _setWrapperHeight(cb) {
      //rewrite this to `for` loop
      var max = 0,
          temp,
          counter = 0;

      this.$slides.each(function () {
        temp = this.getBoundingClientRect().height;
        $(this).attr('data-slide', counter);

        if (counter) {
          //if not the first slide, set css position and display property
          $(this).css({ 'position': 'relative', 'display': 'none' });
        }
        max = temp > max ? temp : max;
        counter++;
      });

      if (counter === this.$slides.length) {
        this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.
        cb(max); //fire callback with max height dimension.
      }
    }

    /**
    * Sets the max-height of each slide.
    * @function
    * @private
    */
    _setSlideHeight(height) {
      this.$slides.each(function () {
        $(this).css('max-height', height);
      });
    }

    /**
    * Adds event listeners to basically everything within the element.
    * @function
    * @private
    */
    _events() {
      var _this = this;

      //***************************************
      //**Now using custom event - thanks to:**
      //**      Yohai Ararat of Toronto      **
      //***************************************
      if (this.$slides.length > 1) {

        if (this.options.swipe) {
          this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide(true);
          }).on('swiperight.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide(false);
          });
        }
        //***************************************

        if (this.options.autoPlay) {
          this.$slides.on('click.zf.orbit', function () {
            _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);
            _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();
          });

          if (this.options.pauseOnHover) {
            this.$element.on('mouseenter.zf.orbit', function () {
              _this.timer.pause();
            }).on('mouseleave.zf.orbit', function () {
              if (!_this.$element.data('clickedOn')) {
                _this.timer.start();
              }
            });
          }
        }

        if (this.options.navButtons) {
          var $controls = this.$element.find(`.${ this.options.nextClass }, .${ this.options.prevClass }`);
          $controls.attr('tabindex', 0)
          //also need to handle enter/return and spacebar key presses
          .on('click.zf.orbit touchend.zf.orbit', function (e) {
            e.preventDefault();
            _this.changeSlide($(this).hasClass(_this.options.nextClass));
          });
        }

        if (this.options.bullets) {
          this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {
            if (/is-active/g.test(this.className)) {
              return false;
            } //if this is active, kick out of function.
            var idx = $(this).data('slide'),
                ltr = idx > _this.$slides.filter('.is-active').data('slide'),
                $slide = _this.$slides.eq(idx);

            _this.changeSlide(ltr, $slide, idx);
          });
        }

        if (this.options.accessible) {
          this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {
            // handle keyboard event with keyboard util
            Foundation.Keyboard.handleKey(e, 'Orbit', {
              next: function () {
                _this.changeSlide(true);
              },
              previous: function () {
                _this.changeSlide(false);
              },
              handled: function () {
                // if bullet is focused, make sure focus moves
                if ($(e.target).is(_this.$bullets)) {
                  _this.$bullets.filter('.is-active').focus();
                }
              }
            });
          });
        }
      }
    }

    /**
    * Changes the current slide to a new one.
    * @function
    * @param {Boolean} isLTR - flag if the slide should move left to right.
    * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.
    * @param {Number} idx - the index of the new slide in its collection, if one chosen.
    * @fires Orbit#slidechange
    */
    changeSlide(isLTR, chosenSlide, idx) {
      var $curSlide = this.$slides.filter('.is-active').eq(0);

      if (/mui/g.test($curSlide[0].className)) {
        return false;
      } //if the slide is currently animating, kick out of the function

      var $firstSlide = this.$slides.first(),
          $lastSlide = this.$slides.last(),
          dirIn = isLTR ? 'Right' : 'Left',
          dirOut = isLTR ? 'Left' : 'Right',
          _this = this,
          $newSlide;

      if (!chosenSlide) {
        //most of the time, this will be auto played or clicked from the navButtons.
        $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
        this.options.infiniteWrap ? $curSlide.next(`.${ this.options.slideClass }`).length ? $curSlide.next(`.${ this.options.slideClass }`) : $firstSlide : $curSlide.next(`.${ this.options.slideClass }`) : //pick next slide if moving left to right
        this.options.infiniteWrap ? $curSlide.prev(`.${ this.options.slideClass }`).length ? $curSlide.prev(`.${ this.options.slideClass }`) : $lastSlide : $curSlide.prev(`.${ this.options.slideClass }`); //pick prev slide if moving right to left
      } else {
        $newSlide = chosenSlide;
      }

      if ($newSlide.length) {
        /**
        * Triggers before the next slide starts animating in and only if a next slide has been found.
        * @event Orbit#beforeslidechange
        */
        this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);

        if (this.options.bullets) {
          idx = idx || this.$slides.index($newSlide); //grab index to update bullets
          this._updateBullets(idx);
        }

        if (this.options.useMUI) {
          Foundation.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options[`animInFrom${ dirIn }`], function () {
            $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');
          });

          Foundation.Motion.animateOut($curSlide.removeClass('is-active'), this.options[`animOutTo${ dirOut }`], function () {
            $curSlide.removeAttr('aria-live');
            if (_this.options.autoPlay && !_this.timer.isPaused) {
              _this.timer.restart();
            }
            //do stuff?
          });
        } else {
          $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();
          $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();
          if (this.options.autoPlay && !this.timer.isPaused) {
            this.timer.restart();
          }
        }
        /**
        * Triggers when the slide has finished animating in.
        * @event Orbit#slidechange
        */
        this.$element.trigger('slidechange.zf.orbit', [$newSlide]);
      }
    }

    /**
    * Updates the active state of the bullets, if displayed.
    * @function
    * @private
    * @param {Number} idx - the index of the current slide.
    */
    _updateBullets(idx) {
      var $oldBullet = this.$element.find(`.${ this.options.boxOfBullets }`).find('.is-active').removeClass('is-active').blur(),
          span = $oldBullet.find('span:last').detach(),
          $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);
    }

    /**
    * Destroys the carousel and hides the element.
    * @function
    */
    destroy() {
      this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();
      Foundation.unregisterPlugin(this);
    }
  }

  Orbit.defaults = {
    /**
    * Tells the JS to look for and loadBullets.
    * @option
    * @example true
    */
    bullets: true,
    /**
    * Tells the JS to apply event listeners to nav buttons
    * @option
    * @example true
    */
    navButtons: true,
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-in-right'
    */
    animInFromRight: 'slide-in-right',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-out-right'
    */
    animOutToRight: 'slide-out-right',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-in-left'
    *
    */
    animInFromLeft: 'slide-in-left',
    /**
    * motion-ui animation class to apply
    * @option
    * @example 'slide-out-left'
    */
    animOutToLeft: 'slide-out-left',
    /**
    * Allows Orbit to automatically animate on page load.
    * @option
    * @example true
    */
    autoPlay: true,
    /**
    * Amount of time, in ms, between slide transitions
    * @option
    * @example 5000
    */
    timerDelay: 5000,
    /**
    * Allows Orbit to infinitely loop through the slides
    * @option
    * @example true
    */
    infiniteWrap: true,
    /**
    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library
    * @option
    * @example true
    */
    swipe: true,
    /**
    * Allows the timing function to pause animation on hover.
    * @option
    * @example true
    */
    pauseOnHover: true,
    /**
    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys
    * @option
    * @example true
    */
    accessible: true,
    /**
    * Class applied to the container of Orbit
    * @option
    * @example 'orbit-container'
    */
    containerClass: 'orbit-container',
    /**
    * Class applied to individual slides.
    * @option
    * @example 'orbit-slide'
    */
    slideClass: 'orbit-slide',
    /**
    * Class applied to the bullet container. You're welcome.
    * @option
    * @example 'orbit-bullets'
    */
    boxOfBullets: 'orbit-bullets',
    /**
    * Class applied to the `next` navigation button.
    * @option
    * @example 'orbit-next'
    */
    nextClass: 'orbit-next',
    /**
    * Class applied to the `previous` navigation button.
    * @option
    * @example 'orbit-previous'
    */
    prevClass: 'orbit-previous',
    /**
    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.
    * @option
    * @example true
    */
    useMUI: true
  };

  // Window exports
  Foundation.plugin(Orbit, 'Orbit');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * ResponsiveMenu module.
   * @module foundation.responsiveMenu
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.accordionMenu
   * @requires foundation.util.drilldown
   * @requires foundation.util.dropdown-menu
   */

  class ResponsiveMenu {
    /**
     * Creates a new instance of a responsive menu.
     * @class
     * @fires ResponsiveMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = $(element);
      this.rules = this.$element.data('responsive-menu');
      this.currentMq = null;
      this.currentPlugin = null;

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveMenu');
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
     * @function
     * @private
     */
    _init() {
      // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
      if (typeof this.rules === 'string') {
        let rulesTree = {};

        // Parse rules from "classes" pulled from data attribute
        let rules = this.rules.split(' ');

        // Iterate through every rule found
        for (let i = 0; i < rules.length; i++) {
          let rule = rules[i].split('-');
          let ruleSize = rule.length > 1 ? rule[0] : 'small';
          let rulePlugin = rule.length > 1 ? rule[1] : rule[0];

          if (MenuPlugins[rulePlugin] !== null) {
            rulesTree[ruleSize] = MenuPlugins[rulePlugin];
          }
        }

        this.rules = rulesTree;
      }

      if (!$.isEmptyObject(this.rules)) {
        this._checkMediaQueries();
      }
    }

    /**
     * Initializes events for the Menu.
     * @function
     * @private
     */
    _events() {
      var _this = this;

      $(window).on('changed.zf.mediaquery', function () {
        _this._checkMediaQueries();
      });
      // $(window).on('resize.zf.ResponsiveMenu', function() {
      //   _this._checkMediaQueries();
      // });
    }

    /**
     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
     * @function
     * @private
     */
    _checkMediaQueries() {
      var matchedMq,
          _this = this;
      // Iterate through each rule and find the last matching rule
      $.each(this.rules, function (key) {
        if (Foundation.MediaQuery.atLeast(key)) {
          matchedMq = key;
        }
      });

      // No match? No dice
      if (!matchedMq) return;

      // Plugin already initialized? We good
      if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

      // Remove existing plugin-specific CSS classes
      $.each(MenuPlugins, function (key, value) {
        _this.$element.removeClass(value.cssClass);
      });

      // Add the CSS class for the new plugin
      this.$element.addClass(this.rules[matchedMq].cssClass);

      // Create an instance of the new plugin
      if (this.currentPlugin) this.currentPlugin.destroy();
      this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
    }

    /**
     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
     * @function
     */
    destroy() {
      this.currentPlugin.destroy();
      $(window).off('.zf.ResponsiveMenu');
      Foundation.unregisterPlugin(this);
    }
  }

  ResponsiveMenu.defaults = {};

  // The plugin matches the plugin classes with these plugin instances.
  var MenuPlugins = {
    dropdown: {
      cssClass: 'dropdown',
      plugin: Foundation._plugins['dropdown-menu'] || null
    },
    drilldown: {
      cssClass: 'drilldown',
      plugin: Foundation._plugins['drilldown'] || null
    },
    accordion: {
      cssClass: 'accordion-menu',
      plugin: Foundation._plugins['accordion-menu'] || null
    }
  };

  // Window exports
  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * ResponsiveToggle module.
   * @module foundation.responsiveToggle
   * @requires foundation.util.mediaQuery
   */

  class ResponsiveToggle {
    /**
     * Creates a new instance of Tab Bar.
     * @class
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = $(element);
      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveToggle');
    }

    /**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */
    _init() {
      var targetID = this.$element.data('responsive-toggle');
      if (!targetID) {
        console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
      }

      this.$targetMenu = $(`#${ targetID }`);
      this.$toggler = this.$element.find('[data-toggle]');

      this._update();
    }

    /**
     * Adds necessary event handlers for the tab bar to work.
     * @function
     * @private
     */
    _events() {
      var _this = this;

      this._updateMqHandler = this._update.bind(this);

      $(window).on('changed.zf.mediaquery', this._updateMqHandler);

      this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
    }

    /**
     * Checks the current media query to determine if the tab bar should be visible or hidden.
     * @function
     * @private
     */
    _update() {
      // Mobile
      if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
        this.$element.show();
        this.$targetMenu.hide();
      }

      // Desktop
      else {
          this.$element.hide();
          this.$targetMenu.show();
        }
    }

    /**
     * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
     * @function
     * @fires ResponsiveToggle#toggled
     */
    toggleMenu() {
      if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
        this.$targetMenu.toggle(0);

        /**
         * Fires when the element attached to the tab bar toggles.
         * @event ResponsiveToggle#toggled
         */
        this.$element.trigger('toggled.zf.responsiveToggle');
      }
    }

    destroy() {
      this.$element.off('.zf.responsiveToggle');
      this.$toggler.off('.zf.responsiveToggle');

      $(window).off('changed.zf.mediaquery', this._updateMqHandler);

      Foundation.unregisterPlugin(this);
    }
  }

  ResponsiveToggle.defaults = {
    /**
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.
     * @option
     * @example 'medium'
     */
    hideFor: 'medium'
  };

  // Window exports
  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Reveal module.
   * @module foundation.reveal
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.motion if using animations
   */

  class Reveal {
    /**
     * Creates a new instance of Reveal.
     * @class
     * @param {jQuery} element - jQuery object to use for the modal.
     * @param {Object} options - optional parameters.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Reveal');
      Foundation.Keyboard.register('Reveal', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close',
        'TAB': 'tab_forward',
        'SHIFT_TAB': 'tab_backward'
      });
    }

    /**
     * Initializes the modal by adding the overlay and close buttons, (if selected).
     * @private
     */
    _init() {
      this.id = this.$element.attr('id');
      this.isActive = false;
      this.cached = { mq: Foundation.MediaQuery.current };
      this.isMobile = mobileSniff();

      this.$anchor = $(`[data-open="${ this.id }"]`).length ? $(`[data-open="${ this.id }"]`) : $(`[data-toggle="${ this.id }"]`);
      this.$anchor.attr({
        'aria-controls': this.id,
        'aria-haspopup': true,
        'tabindex': 0
      });

      if (this.options.fullScreen || this.$element.hasClass('full')) {
        this.options.fullScreen = true;
        this.options.overlay = false;
      }
      if (this.options.overlay && !this.$overlay) {
        this.$overlay = this._makeOverlay(this.id);
      }

      this.$element.attr({
        'role': 'dialog',
        'aria-hidden': true,
        'data-yeti-box': this.id,
        'data-resize': this.id
      });

      if (this.$overlay) {
        this.$element.detach().appendTo(this.$overlay);
      } else {
        this.$element.detach().appendTo($('body'));
        this.$element.addClass('without-overlay');
      }
      this._events();
      if (this.options.deepLink && window.location.hash === `#${ this.id }`) {
        $(window).one('load.zf.reveal', this.open.bind(this));
      }
    }

    /**
     * Creates an overlay div to display behind the modal.
     * @private
     */
    _makeOverlay(id) {
      var $overlay = $('<div></div>').addClass('reveal-overlay').appendTo('body');
      return $overlay;
    }

    /**
     * Updates position of modal
     * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
     * @private
     */
    _updatePosition() {
      var width = this.$element.outerWidth();
      var outerWidth = $(window).width();
      var height = this.$element.outerHeight();
      var outerHeight = $(window).height();
      var left, top;
      if (this.options.hOffset === 'auto') {
        left = parseInt((outerWidth - width) / 2, 10);
      } else {
        left = parseInt(this.options.hOffset, 10);
      }
      if (this.options.vOffset === 'auto') {
        if (height > outerHeight) {
          top = parseInt(Math.min(100, outerHeight / 10), 10);
        } else {
          top = parseInt((outerHeight - height) / 4, 10);
        }
      } else {
        top = parseInt(this.options.vOffset, 10);
      }
      this.$element.css({ top: top + 'px' });
      // only worry about left if we don't have an overlay or we havea  horizontal offset,
      // otherwise we're perfectly in the middle
      if (!this.$overlay || this.options.hOffset !== 'auto') {
        this.$element.css({ left: left + 'px' });
        this.$element.css({ margin: '0px' });
      }
    }

    /**
     * Adds event handlers for the modal.
     * @private
     */
    _events() {
      var _this = this;

      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': (event, $element) => {
          if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {
            // only close reveal when it's explicitly called
            return this.close.apply(this);
          }
        },
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': function () {
          _this._updatePosition();
        }
      });

      if (this.$anchor.length) {
        this.$anchor.on('keydown.zf.reveal', function (e) {
          if (e.which === 13 || e.which === 32) {
            e.stopPropagation();
            e.preventDefault();
            _this.open();
          }
        });
      }

      if (this.options.closeOnClick && this.options.overlay) {
        this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
          if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
            return;
          }
          _this.close();
        });
      }
      if (this.options.deepLink) {
        $(window).on(`popstate.zf.reveal:${ this.id }`, this._handleState.bind(this));
      }
    }

    /**
     * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
     * @private
     */
    _handleState(e) {
      if (window.location.hash === '#' + this.id && !this.isActive) {
        this.open();
      } else {
        this.close();
      }
    }

    /**
     * Opens the modal controlled by `this.$anchor`, and closes all others by default.
     * @function
     * @fires Reveal#closeme
     * @fires Reveal#open
     */
    open() {
      if (this.options.deepLink) {
        var hash = `#${ this.id }`;

        if (window.history.pushState) {
          window.history.pushState(null, null, hash);
        } else {
          window.location.hash = hash;
        }
      }

      this.isActive = true;

      // Make elements invisible, but remove display: none so we can get size and positioning
      this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);
      if (this.options.overlay) {
        this.$overlay.css({ 'visibility': 'hidden' }).show();
      }

      this._updatePosition();

      this.$element.hide().css({ 'visibility': '' });

      if (this.$overlay) {
        this.$overlay.css({ 'visibility': '' }).hide();
        if (this.$element.hasClass('fast')) {
          this.$overlay.addClass('fast');
        } else if (this.$element.hasClass('slow')) {
          this.$overlay.addClass('slow');
        }
      }

      if (!this.options.multipleOpened) {
        /**
         * Fires immediately before the modal opens.
         * Closes any other modals that are currently open
         * @event Reveal#closeme
         */
        this.$element.trigger('closeme.zf.reveal', this.id);
      }
      // Motion UI method of reveal
      if (this.options.animationIn) {
        var _this = this;
        function afterAnimationFocus() {
          _this.$element.attr({
            'aria-hidden': false,
            'tabindex': -1
          }).focus();
        }
        if (this.options.overlay) {
          Foundation.Motion.animateIn(this.$overlay, 'fade-in');
        }
        Foundation.Motion.animateIn(this.$element, this.options.animationIn, () => {
          this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);
          afterAnimationFocus();
        });
      }
      // jQuery method of reveal
      else {
          if (this.options.overlay) {
            this.$overlay.show(0);
          }
          this.$element.show(this.options.showDelay);
        }

      // handle accessibility
      this.$element.attr({
        'aria-hidden': false,
        'tabindex': -1
      }).focus();

      /**
       * Fires when the modal has successfully opened.
       * @event Reveal#open
       */
      this.$element.trigger('open.zf.reveal');

      if (this.isMobile) {
        this.originalScrollPos = window.pageYOffset;
        $('html, body').addClass('is-reveal-open');
      } else {
        $('body').addClass('is-reveal-open');
      }

      setTimeout(() => {
        this._extraHandlers();
      }, 0);
    }

    /**
     * Adds extra event handlers for the body and window if necessary.
     * @private
     */
    _extraHandlers() {
      var _this = this;
      this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);

      if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
        $('body').on('click.zf.reveal', function (e) {
          if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
            return;
          }
          _this.close();
        });
      }

      if (this.options.closeOnEsc) {
        $(window).on('keydown.zf.reveal', function (e) {
          Foundation.Keyboard.handleKey(e, 'Reveal', {
            close: function () {
              if (_this.options.closeOnEsc) {
                _this.close();
                _this.$anchor.focus();
              }
            }
          });
        });
      }

      // lock focus within modal while tabbing
      this.$element.on('keydown.zf.reveal', function (e) {
        var $target = $(this);
        // handle keyboard event with keyboard util
        Foundation.Keyboard.handleKey(e, 'Reveal', {
          tab_forward: function () {
            _this.focusableElements = Foundation.Keyboard.findFocusable(_this.$element);
            if (_this.$element.find(':focus').is(_this.focusableElements.eq(-1))) {
              // left modal downwards, setting focus to first element
              _this.focusableElements.eq(0).focus();
              return true;
            }
            if (_this.focusableElements.length === 0) {
              // no focusable elements inside the modal at all, prevent tabbing in general
              return true;
            }
          },
          tab_backward: function () {
            _this.focusableElements = Foundation.Keyboard.findFocusable(_this.$element);
            if (_this.$element.find(':focus').is(_this.focusableElements.eq(0)) || _this.$element.is(':focus')) {
              // left modal upwards, setting focus to last element
              _this.focusableElements.eq(-1).focus();
              return true;
            }
            if (_this.focusableElements.length === 0) {
              // no focusable elements inside the modal at all, prevent tabbing in general
              return true;
            }
          },
          open: function () {
            if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {
              setTimeout(function () {
                // set focus back to anchor if close button has been activated
                _this.$anchor.focus();
              }, 1);
            } else if ($target.is(_this.focusableElements)) {
              // dont't trigger if acual element has focus (i.e. inputs, links, ...)
              _this.open();
            }
          },
          close: function () {
            if (_this.options.closeOnEsc) {
              _this.close();
              _this.$anchor.focus();
            }
          },
          handled: function (preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
          }
        });
      });
    }

    /**
     * Closes the modal.
     * @function
     * @fires Reveal#closed
     */
    close() {
      if (!this.isActive || !this.$element.is(':visible')) {
        return false;
      }
      var _this = this;

      // Motion UI method of hiding
      if (this.options.animationOut) {
        if (this.options.overlay) {
          Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);
        } else {
          finishUp();
        }

        Foundation.Motion.animateOut(this.$element, this.options.animationOut);
      }
      // jQuery method of hiding
      else {
          if (this.options.overlay) {
            this.$overlay.hide(0, finishUp);
          } else {
            finishUp();
          }

          this.$element.hide(this.options.hideDelay);
        }

      // Conditionals to remove extra event listeners added on open
      if (this.options.closeOnEsc) {
        $(window).off('keydown.zf.reveal');
      }

      if (!this.options.overlay && this.options.closeOnClick) {
        $('body').off('click.zf.reveal');
      }

      this.$element.off('keydown.zf.reveal');

      function finishUp() {
        if (_this.isMobile) {
          $('html, body').removeClass('is-reveal-open');
          if (_this.originalScrollPos) {
            $('body').scrollTop(_this.originalScrollPos);
            _this.originalScrollPos = null;
          }
        } else {
          $('body').removeClass('is-reveal-open');
        }

        _this.$element.attr('aria-hidden', true);

        /**
        * Fires when the modal is done closing.
        * @event Reveal#closed
        */
        _this.$element.trigger('closed.zf.reveal');
      }

      /**
      * Resets the modal content
      * This prevents a running video to keep going in the background
      */
      if (this.options.resetOnClose) {
        this.$element.html(this.$element.html());
      }

      this.isActive = false;
      if (_this.options.deepLink) {
        if (window.history.replaceState) {
          window.history.replaceState("", document.title, window.location.pathname);
        } else {
          window.location.hash = '';
        }
      }
    }

    /**
     * Toggles the open/closed state of a modal.
     * @function
     */
    toggle() {
      if (this.isActive) {
        this.close();
      } else {
        this.open();
      }
    }

    /**
     * Destroys an instance of a modal.
     * @function
     */
    destroy() {
      if (this.options.overlay) {
        this.$element.appendTo($('body')); // move $element outside of $overlay to prevent error unregisterPlugin()
        this.$overlay.hide().off().remove();
      }
      this.$element.hide().off();
      this.$anchor.off('.zf');
      $(window).off(`.zf.reveal:${ this.id }`);

      Foundation.unregisterPlugin(this);
    }
  }

  Reveal.defaults = {
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @example 'slide-in-left'
     */
    animationIn: '',
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @example 'slide-out-right'
     */
    animationOut: '',
    /**
     * Time, in ms, to delay the opening of a modal after a click if no animation used.
     * @option
     * @example 10
     */
    showDelay: 0,
    /**
     * Time, in ms, to delay the closing of a modal after a click if no animation used.
     * @option
     * @example 10
     */
    hideDelay: 0,
    /**
     * Allows a click on the body/overlay to close the modal.
     * @option
     * @example true
     */
    closeOnClick: true,
    /**
     * Allows the modal to close if the user presses the `ESCAPE` key.
     * @option
     * @example true
     */
    closeOnEsc: true,
    /**
     * If true, allows multiple modals to be displayed at once.
     * @option
     * @example false
     */
    multipleOpened: false,
    /**
     * Distance, in pixels, the modal should push down from the top of the screen.
     * @option
     * @example auto
     */
    vOffset: 'auto',
    /**
     * Distance, in pixels, the modal should push in from the side of the screen.
     * @option
     * @example auto
     */
    hOffset: 'auto',
    /**
     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
     * @option
     * @example false
     */
    fullScreen: false,
    /**
     * Percentage of screen height the modal should push up from the bottom of the view.
     * @option
     * @example 10
     */
    btmOffsetPct: 10,
    /**
     * Allows the modal to generate an overlay div, which will cover the view when modal opens.
     * @option
     * @example true
     */
    overlay: true,
    /**
     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
     * @option
     * @example false
     */
    resetOnClose: false,
    /**
     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
     * @option
     * @example false
     */
    deepLink: false
  };

  // Window exports
  Foundation.plugin(Reveal, 'Reveal');

  function iPhoneSniff() {
    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)
    );
  }

  function androidSniff() {
    return (/Android/.test(window.navigator.userAgent)
    );
  }

  function mobileSniff() {
    return iPhoneSniff() || androidSniff();
  }
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Slider module.
   * @module foundation.slider
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   * @requires foundation.util.keyboard
   * @requires foundation.util.touch
   */

  class Slider {
    /**
     * Creates a new instance of a drilldown menu.
     * @class
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Slider');
      Foundation.Keyboard.register('Slider', {
        'ltr': {
          'ARROW_RIGHT': 'increase',
          'ARROW_UP': 'increase',
          'ARROW_DOWN': 'decrease',
          'ARROW_LEFT': 'decrease',
          'SHIFT_ARROW_RIGHT': 'increase_fast',
          'SHIFT_ARROW_UP': 'increase_fast',
          'SHIFT_ARROW_DOWN': 'decrease_fast',
          'SHIFT_ARROW_LEFT': 'decrease_fast'
        },
        'rtl': {
          'ARROW_LEFT': 'increase',
          'ARROW_RIGHT': 'decrease',
          'SHIFT_ARROW_LEFT': 'increase_fast',
          'SHIFT_ARROW_RIGHT': 'decrease_fast'
        }
      });
    }

    /**
     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
     * @function
     * @private
     */
    _init() {
      this.inputs = this.$element.find('input');
      this.handles = this.$element.find('[data-slider-handle]');

      this.$handle = this.handles.eq(0);
      this.$input = this.inputs.length ? this.inputs.eq(0) : $(`#${ this.$handle.attr('aria-controls') }`);
      this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);

      var isDbl = false,
          _this = this;
      if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {
        this.options.disabled = true;
        this.$element.addClass(this.options.disabledClass);
      }
      if (!this.inputs.length) {
        this.inputs = $().add(this.$input);
        this.options.binding = true;
      }
      this._setInitAttr(0);
      this._events(this.$handle);

      if (this.handles[1]) {
        this.options.doubleSided = true;
        this.$handle2 = this.handles.eq(1);
        this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $(`#${ this.$handle2.attr('aria-controls') }`);

        if (!this.inputs[1]) {
          this.inputs = this.inputs.add(this.$input2);
        }
        isDbl = true;

        this._setHandlePos(this.$handle, this.options.initialStart, true, function () {

          _this._setHandlePos(_this.$handle2, _this.options.initialEnd, true);
        });
        // this.$handle.triggerHandler('click.zf.slider');
        this._setInitAttr(1);
        this._events(this.$handle2);
      }

      if (!isDbl) {
        this._setHandlePos(this.$handle, this.options.initialStart, true);
      }
    }

    /**
     * Sets the position of the selected handle and fill bar.
     * @function
     * @private
     * @param {jQuery} $hndl - the selected handle to move.
     * @param {Number} location - floating point between the start and end values of the slider bar.
     * @param {Function} cb - callback function to fire on completion.
     * @fires Slider#moved
     * @fires Slider#changed
     */
    _setHandlePos($hndl, location, noInvert, cb) {
      // don't move if the slider has been disabled since its initialization
      if (this.$element.hasClass(this.options.disabledClass)) {
        return;
      }
      //might need to alter that slightly for bars that will have odd number selections.
      location = parseFloat(location); //on input change events, convert string to number...grumble.

      // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
      if (location < this.options.start) {
        location = this.options.start;
      } else if (location > this.options.end) {
        location = this.options.end;
      }

      var isDbl = this.options.doubleSided;

      if (isDbl) {
        //this block is to prevent 2 handles from crossing eachother. Could/should be improved.
        if (this.handles.index($hndl) === 0) {
          var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));
          location = location >= h2Val ? h2Val - this.options.step : location;
        } else {
          var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));
          location = location <= h1Val ? h1Val + this.options.step : location;
        }
      }

      //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
      //for click and drag events, it's weird due to the scale(-1, 1) css property
      if (this.options.vertical && !noInvert) {
        location = this.options.end - location;
      }

      var _this = this,
          vert = this.options.vertical,
          hOrW = vert ? 'height' : 'width',
          lOrT = vert ? 'top' : 'left',
          handleDim = $hndl[0].getBoundingClientRect()[hOrW],
          elemDim = this.$element[0].getBoundingClientRect()[hOrW],

      //percentage of bar min/max value based on click or drag point
      pctOfBar = percent(location - this.options.start, this.options.end - this.options.start).toFixed(2),

      //number of actual pixels to shift the handle, based on the percentage obtained above
      pxToMove = (elemDim - handleDim) * pctOfBar,

      //percentage of bar to shift the handle
      movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);
      //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
      location = parseFloat(location.toFixed(this.options.decimal));
      // declare empty object for css adjustments, only used with 2 handled-sliders
      var css = {};

      this._setValues($hndl, location);

      // TODO update to calculate based on values set to respective inputs??
      if (isDbl) {
        var isLeftHndl = this.handles.index($hndl) === 0,

        //empty variable, will be used for min-height/width for fill bar
        dim,

        //percentage w/h of the handle compared to the slider bar
        handlePct = ~~(percent(handleDim, elemDim) * 100);
        //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
        if (isLeftHndl) {
          //left or top percentage value to apply to the fill bar.
          css[lOrT] = `${ movement }%`;
          //calculate the new min-height/width for the fill bar.
          dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;
          //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
          //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.
          if (cb && typeof cb === 'function') {
            cb();
          } //this is only needed for the initialization of 2 handled sliders
        } else {
          //just caching the value of the left/bottom handle's left/top property
          var handlePos = parseFloat(this.$handle[0].style[lOrT]);
          //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
          //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
          dim = movement - (isNaN(handlePos) ? this.options.initialStart / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
        }
        // assign the min-height/width to our css object
        css[`min-${ hOrW }`] = `${ dim }%`;
      }

      this.$element.one('finished.zf.animate', function () {
        /**
         * Fires when the handle is done moving.
         * @event Slider#moved
         */
        _this.$element.trigger('moved.zf.slider', [$hndl]);
      });

      //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
      var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;

      Foundation.Move(moveTime, $hndl, function () {
        //adjusting the left/top property of the handle, based on the percentage calculated above
        $hndl.css(lOrT, `${ movement }%`);

        if (!_this.options.doubleSided) {
          //if single-handled, a simple method to expand the fill bar
          _this.$fill.css(hOrW, `${ pctOfBar * 100 }%`);
        } else {
          //otherwise, use the css object we created above
          _this.$fill.css(css);
        }
      });

      /**
       * Fires when the value has not been change for a given time.
       * @event Slider#changed
       */
      clearTimeout(_this.timeout);
      _this.timeout = setTimeout(function () {
        _this.$element.trigger('changed.zf.slider', [$hndl]);
      }, _this.options.changedDelay);
    }

    /**
     * Sets the initial attribute for the slider element.
     * @function
     * @private
     * @param {Number} idx - index of the current handle/input to use.
     */
    _setInitAttr(idx) {
      var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');
      this.inputs.eq(idx).attr({
        'id': id,
        'max': this.options.end,
        'min': this.options.start,
        'step': this.options.step
      });
      this.handles.eq(idx).attr({
        'role': 'slider',
        'aria-controls': id,
        'aria-valuemax': this.options.end,
        'aria-valuemin': this.options.start,
        'aria-valuenow': idx === 0 ? this.options.initialStart : this.options.initialEnd,
        'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',
        'tabindex': 0
      });
    }

    /**
     * Sets the input and `aria-valuenow` values for the slider element.
     * @function
     * @private
     * @param {jQuery} $handle - the currently selected handle.
     * @param {Number} val - floating point of the new value.
     */
    _setValues($handle, val) {
      var idx = this.options.doubleSided ? this.handles.index($handle) : 0;
      this.inputs.eq(idx).val(val);
      $handle.attr('aria-valuenow', val);
    }

    /**
     * Handles events on the slider element.
     * Calculates the new location of the current handle.
     * If there are two handles and the bar was clicked, it determines which handle to move.
     * @function
     * @private
     * @param {Object} e - the `event` object passed from the listener.
     * @param {jQuery} $handle - the current handle to calculate for, if selected.
     * @param {Number} val - floating point number for the new value of the slider.
     * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.
     */
    _handleEvent(e, $handle, val) {
      var value, hasVal;
      if (!val) {
        //click or drag events
        e.preventDefault();
        var _this = this,
            vertical = this.options.vertical,
            param = vertical ? 'height' : 'width',
            direction = vertical ? 'top' : 'left',
            eventOffset = vertical ? e.pageY : e.pageX,
            halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,
            barDim = this.$element[0].getBoundingClientRect()[param],
            windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();

        var elemOffset = this.$element.offset()[direction];

        // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
        // best way to guess this is simulated is if clientY == pageY
        if (e.clientY === e.pageY) {
          eventOffset = eventOffset + windowScroll;
        }
        var eventFromBar = eventOffset - elemOffset;
        var barXY;
        if (eventFromBar < 0) {
          barXY = 0;
        } else if (eventFromBar > barDim) {
          barXY = barDim;
        } else {
          barXY = eventFromBar;
        }
        var offsetPct = percent(barXY, barDim);

        value = (this.options.end - this.options.start) * offsetPct + this.options.start;

        // turn everything around for RTL, yay math!
        if (Foundation.rtl() && !this.options.vertical) {
          value = this.options.end - value;
        }

        value = _this._adjustValue(null, value);
        //boolean flag for the setHandlePos fn, specifically for vertical sliders
        hasVal = false;

        if (!$handle) {
          //figure out which handle it is, pass it to the next function.
          var firstHndlPos = absPosition(this.$handle, direction, barXY, param),
              secndHndlPos = absPosition(this.$handle2, direction, barXY, param);
          $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;
        }
      } else {
        //change event on input
        value = this._adjustValue(null, val);
        hasVal = true;
      }

      this._setHandlePos($handle, value, hasVal);
    }

    /**
     * Adjustes value for handle in regard to step value. returns adjusted value
     * @function
     * @private
     * @param {jQuery} $handle - the selected handle.
     * @param {Number} value - value to adjust. used if $handle is falsy
     */
    _adjustValue($handle, value) {
      var val,
          step = this.options.step,
          div = parseFloat(step / 2),
          left,
          prev_val,
          next_val;
      if (!!$handle) {
        val = parseFloat($handle.attr('aria-valuenow'));
      } else {
        val = value;
      }
      left = val % step;
      prev_val = val - left;
      next_val = prev_val + step;
      if (left === 0) {
        return val;
      }
      val = val >= prev_val + div ? next_val : prev_val;
      return val;
    }

    /**
     * Adds event listeners to the slider elements.
     * @function
     * @private
     * @param {jQuery} $handle - the current handle to apply listeners to.
     */
    _events($handle) {
      var _this = this,
          curHandle,
          timer;

      this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {
        var idx = _this.inputs.index($(this));
        _this._handleEvent(e, _this.handles.eq(idx), $(this).val());
      });

      if (this.options.clickSelect) {
        this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {
          if (_this.$element.data('dragging')) {
            return false;
          }

          if (!$(e.target).is('[data-slider-handle]')) {
            if (_this.options.doubleSided) {
              _this._handleEvent(e);
            } else {
              _this._handleEvent(e, _this.$handle);
            }
          }
        });
      }

      if (this.options.draggable) {
        this.handles.addTouch();

        var $body = $('body');
        $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {
          $handle.addClass('is-dragging');
          _this.$fill.addClass('is-dragging'); //
          _this.$element.data('dragging', true);

          curHandle = $(e.currentTarget);

          $body.on('mousemove.zf.slider', function (e) {
            e.preventDefault();
            _this._handleEvent(e, curHandle);
          }).on('mouseup.zf.slider', function (e) {
            _this._handleEvent(e, curHandle);

            $handle.removeClass('is-dragging');
            _this.$fill.removeClass('is-dragging');
            _this.$element.data('dragging', false);

            $body.off('mousemove.zf.slider mouseup.zf.slider');
          });
        })
        // prevent events triggered by touch
        .on('selectstart.zf.slider touchmove.zf.slider', function (e) {
          e.preventDefault();
        });
      }

      $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {
        var _$handle = $(this),
            idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,
            oldValue = parseFloat(_this.inputs.eq(idx).val()),
            newValue;

        // handle keyboard event with keyboard util
        Foundation.Keyboard.handleKey(e, 'Slider', {
          decrease: function () {
            newValue = oldValue - _this.options.step;
          },
          increase: function () {
            newValue = oldValue + _this.options.step;
          },
          decrease_fast: function () {
            newValue = oldValue - _this.options.step * 10;
          },
          increase_fast: function () {
            newValue = oldValue + _this.options.step * 10;
          },
          handled: function () {
            // only set handle pos when event was handled specially
            e.preventDefault();
            _this._setHandlePos(_$handle, newValue, true);
          }
        });
        /*if (newValue) { // if pressed key has special function, update value
          e.preventDefault();
          _this._setHandlePos(_$handle, newValue);
        }*/
      });
    }

    /**
     * Destroys the slider plugin.
     */
    destroy() {
      this.handles.off('.zf.slider');
      this.inputs.off('.zf.slider');
      this.$element.off('.zf.slider');

      Foundation.unregisterPlugin(this);
    }
  }

  Slider.defaults = {
    /**
     * Minimum value for the slider scale.
     * @option
     * @example 0
     */
    start: 0,
    /**
     * Maximum value for the slider scale.
     * @option
     * @example 100
     */
    end: 100,
    /**
     * Minimum value change per change event.
     * @option
     * @example 1
     */
    step: 1,
    /**
     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.
     * @option
     * @example 0
     */
    initialStart: 0,
    /**
     * Value at which the right handle/second input should be set to on initialization.
     * @option
     * @example 100
     */
    initialEnd: 100,
    /**
     * Allows the input to be located outside the container and visible. Set to by the JS
     * @option
     * @example false
     */
    binding: false,
    /**
     * Allows the user to click/tap on the slider bar to select a value.
     * @option
     * @example true
     */
    clickSelect: true,
    /**
     * Set to true and use the `vertical` class to change alignment to vertical.
     * @option
     * @example false
     */
    vertical: false,
    /**
     * Allows the user to drag the slider handle(s) to select a value.
     * @option
     * @example true
     */
    draggable: true,
    /**
     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
     * @option
     * @example false
     */
    disabled: false,
    /**
     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.
     * @option
     * @example false
     */
    doubleSided: false,
    /**
     * Potential future feature.
     */
    // steps: 100,
    /**
     * Number of decimal places the plugin should go to for floating point precision.
     * @option
     * @example 2
     */
    decimal: 2,
    /**
     * Time delay for dragged elements.
     */
    // dragDelay: 0,
    /**
     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
     * @option
     * @example 200
     */
    moveTime: 200, //update this if changing the transition time in the sass
    /**
     * Class applied to disabled sliders.
     * @option
     * @example 'disabled'
     */
    disabledClass: 'disabled',
    /**
     * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.
     * @option
     * @example false
     */
    invertVertical: false,
    /**
     * Milliseconds before the `changed.zf-slider` event is triggered after value change.
     * @option
     * @example 500
     */
    changedDelay: 500
  };

  function percent(frac, num) {
    return frac / num;
  }
  function absPosition($handle, dir, clickPos, param) {
    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);
  }

  // Window exports
  Foundation.plugin(Slider, 'Slider');
}(jQuery);

//*********this is in case we go to static, absolute positions instead of dynamic positioning********
// this.setSteps(function() {
//   _this._events();
//   var initStart = _this.options.positions[_this.options.initialStart - 1] || null;
//   var initEnd = _this.options.initialEnd ? _this.options.position[_this.options.initialEnd - 1] : null;
//   if (initStart || initEnd) {
//     _this._handleEvent(initStart, initEnd);
//   }
// });

//***********the other part of absolute positions*************
// Slider.prototype.setSteps = function(cb) {
//   var posChange = this.$element.outerWidth() / this.options.steps;
//   var counter = 0
//   while(counter < this.options.steps) {
//     if (counter) {
//       this.options.positions.push(this.options.positions[counter - 1] + posChange);
//     } else {
//       this.options.positions.push(posChange);
//     }
//     counter++;
//   }
//   cb();
// };
;'use strict';

!function ($) {

  /**
   * Sticky module.
   * @module foundation.sticky
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   */

  class Sticky {
    /**
     * Creates a new instance of a sticky thing.
     * @class
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Sticky');
    }

    /**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */
    _init() {
      var $parent = this.$element.parent('[data-sticky-container]'),
          id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),
          _this = this;

      if (!$parent.length) {
        this.wasWrapped = true;
      }
      this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);
      this.$container.addClass(this.options.containerClass);

      this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });

      this.scrollCount = this.options.checkEvery;
      this.isStuck = false;
      $(window).one('load.zf.sticky', function () {
        //We calculate the container height to have correct values for anchor points offset calculation.
        _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
        _this.$container.css('height', _this.containerHeight);
        _this.elemHeight = _this.containerHeight;
        if (_this.options.anchor !== '') {
          _this.$anchor = $('#' + _this.options.anchor);
        } else {
          _this._parsePoints();
        }

        _this._setSizes(function () {
          _this._calc(false);
        });
        _this._events(id.split('-').reverse().join('-'));
      });
    }

    /**
     * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
     * @function
     * @private
     */
    _parsePoints() {
      var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
          btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
          pts = [top, btm],
          breaks = {};
      for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
        var pt;
        if (typeof pts[i] === 'number') {
          pt = pts[i];
        } else {
          var place = pts[i].split(':'),
              anchor = $(`#${ place[0] }`);

          pt = anchor.offset().top;
          if (place[1] && place[1].toLowerCase() === 'bottom') {
            pt += anchor[0].getBoundingClientRect().height;
          }
        }
        breaks[i] = pt;
      }

      this.points = breaks;
      return;
    }

    /**
     * Adds event handlers for the scrolling element.
     * @private
     * @param {String} id - psuedo-random id for unique scroll event listener.
     */
    _events(id) {
      var _this = this,
          scrollListener = this.scrollListener = `scroll.zf.${ id }`;
      if (this.isOn) {
        return;
      }
      if (this.canStick) {
        this.isOn = true;
        $(window).off(scrollListener).on(scrollListener, function (e) {
          if (_this.scrollCount === 0) {
            _this.scrollCount = _this.options.checkEvery;
            _this._setSizes(function () {
              _this._calc(false, window.pageYOffset);
            });
          } else {
            _this.scrollCount--;
            _this._calc(false, window.pageYOffset);
          }
        });
      }

      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
        _this._setSizes(function () {
          _this._calc(false);
          if (_this.canStick) {
            if (!_this.isOn) {
              _this._events(id);
            }
          } else if (_this.isOn) {
            _this._pauseListeners(scrollListener);
          }
        });
      });
    }

    /**
     * Removes event handlers for scroll and change events on anchor.
     * @fires Sticky#pause
     * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
     */
    _pauseListeners(scrollListener) {
      this.isOn = false;
      $(window).off(scrollListener);

      /**
       * Fires when the plugin is paused due to resize event shrinking the view.
       * @event Sticky#pause
       * @private
       */
      this.$element.trigger('pause.zf.sticky');
    }

    /**
     * Called on every `scroll` event and on `_init`
     * fires functions based on booleans and cached values
     * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
     * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
     */
    _calc(checkSizes, scroll) {
      if (checkSizes) {
        this._setSizes();
      }

      if (!this.canStick) {
        if (this.isStuck) {
          this._removeSticky(true);
        }
        return false;
      }

      if (!scroll) {
        scroll = window.pageYOffset;
      }

      if (scroll >= this.topPoint) {
        if (scroll <= this.bottomPoint) {
          if (!this.isStuck) {
            this._setSticky();
          }
        } else {
          if (this.isStuck) {
            this._removeSticky(false);
          }
        }
      } else {
        if (this.isStuck) {
          this._removeSticky(true);
        }
      }
    }

    /**
     * Causes the $element to become stuck.
     * Adds `position: fixed;`, and helper classes.
     * @fires Sticky#stuckto
     * @function
     * @private
     */
    _setSticky() {
      var _this = this,
          stickTo = this.options.stickTo,
          mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
          notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
          css = {};

      css[mrgn] = `${ this.options[mrgn] }em`;
      css[stickTo] = 0;
      css[notStuckTo] = 'auto';
      css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])["padding-left"], 10);
      this.isStuck = true;
      this.$element.removeClass(`is-anchored is-at-${ notStuckTo }`).addClass(`is-stuck is-at-${ stickTo }`).css(css)
      /**
       * Fires when the $element has become `position: fixed;`
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
       * @event Sticky#stuckto
       */
      .trigger(`sticky.zf.stuckto:${ stickTo }`);
      this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
        _this._setSizes();
      });
    }

    /**
     * Causes the $element to become unstuck.
     * Removes `position: fixed;`, and helper classes.
     * Adds other helper classes.
     * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
     * @fires Sticky#unstuckfrom
     * @private
     */
    _removeSticky(isTop) {
      var stickTo = this.options.stickTo,
          stickToTop = stickTo === 'top',
          css = {},
          anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
          mrgn = stickToTop ? 'marginTop' : 'marginBottom',
          notStuckTo = stickToTop ? 'bottom' : 'top',
          topOrBottom = isTop ? 'top' : 'bottom';

      css[mrgn] = 0;

      css['bottom'] = 'auto';
      if (isTop) {
        css['top'] = 0;
      } else {
        css['top'] = anchorPt;
      }

      css['left'] = '';
      this.isStuck = false;
      this.$element.removeClass(`is-stuck is-at-${ stickTo }`).addClass(`is-anchored is-at-${ topOrBottom }`).css(css)
      /**
       * Fires when the $element has become anchored.
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
       * @event Sticky#unstuckfrom
       */
      .trigger(`sticky.zf.unstuckfrom:${ topOrBottom }`);
    }

    /**
     * Sets the $element and $container sizes for plugin.
     * Calls `_setBreakPoints`.
     * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
     * @private
     */
    _setSizes(cb) {
      this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        }
      }
      var _this = this,
          newElemWidth = this.$container[0].getBoundingClientRect().width,
          comp = window.getComputedStyle(this.$container[0]),
          pdng = parseInt(comp['padding-right'], 10);

      if (this.$anchor && this.$anchor.length) {
        this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
      } else {
        this._parsePoints();
      }

      this.$element.css({
        'max-width': `${ newElemWidth - pdng }px`
      });

      var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
      if (this.$element.css("display") == "none") {
        newContainerHeight = 0;
      }
      this.containerHeight = newContainerHeight;
      this.$container.css({
        height: newContainerHeight
      });
      this.elemHeight = newContainerHeight;

      if (this.isStuck) {
        this.$element.css({ "left": this.$container.offset().left + parseInt(comp['padding-left'], 10) });
      } else {
        if (this.$element.hasClass('is-at-bottom')) {
          var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
          this.$element.css('top', anchorPt);
        }
      }

      this._setBreakPoints(newContainerHeight, function () {
        if (cb && typeof cb === 'function') {
          cb();
        }
      });
    }

    /**
     * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
     * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
     * @param {Function} cb - optional callback function to be called on completion.
     * @private
     */
    _setBreakPoints(elemHeight, cb) {
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        } else {
          return false;
        }
      }
      var mTop = emCalc(this.options.marginTop),
          mBtm = emCalc(this.options.marginBottom),
          topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
          bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,

      // topPoint = this.$anchor.offset().top || this.points[0],
      // bottomPoint = topPoint + this.anchorHeight || this.points[1],
      winHeight = window.innerHeight;

      if (this.options.stickTo === 'top') {
        topPoint -= mTop;
        bottomPoint -= elemHeight + mTop;
      } else if (this.options.stickTo === 'bottom') {
        topPoint -= winHeight - (elemHeight + mBtm);
        bottomPoint -= winHeight - mBtm;
      } else {
        //this would be the stickTo: both option... tricky
      }

      this.topPoint = topPoint;
      this.bottomPoint = bottomPoint;

      if (cb && typeof cb === 'function') {
        cb();
      }
    }

    /**
     * Destroys the current sticky element.
     * Resets the element to the top position first.
     * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
     * @function
     */
    destroy() {
      this._removeSticky(true);

      this.$element.removeClass(`${ this.options.stickyClass } is-anchored is-at-top`).css({
        height: '',
        top: '',
        bottom: '',
        'max-width': ''
      }).off('resizeme.zf.trigger');
      if (this.$anchor && this.$anchor.length) {
        this.$anchor.off('change.zf.sticky');
      }
      $(window).off(this.scrollListener);

      if (this.wasWrapped) {
        this.$element.unwrap();
      } else {
        this.$container.removeClass(this.options.containerClass).css({
          height: ''
        });
      }
      Foundation.unregisterPlugin(this);
    }
  }

  Sticky.defaults = {
    /**
     * Customizable container template. Add your own classes for styling and sizing.
     * @option
     * @example '&lt;div data-sticky-container class="small-6 columns"&gt;&lt;/div&gt;'
     */
    container: '<div data-sticky-container></div>',
    /**
     * Location in the view the element sticks to.
     * @option
     * @example 'top'
     */
    stickTo: 'top',
    /**
     * If anchored to a single element, the id of that element.
     * @option
     * @example 'exampleId'
     */
    anchor: '',
    /**
     * If using more than one element as anchor points, the id of the top anchor.
     * @option
     * @example 'exampleId:top'
     */
    topAnchor: '',
    /**
     * If using more than one element as anchor points, the id of the bottom anchor.
     * @option
     * @example 'exampleId:bottom'
     */
    btmAnchor: '',
    /**
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
     * @option
     * @example 1
     */
    marginTop: 1,
    /**
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
     * @option
     * @example 1
     */
    marginBottom: 1,
    /**
     * Breakpoint string that is the minimum screen size an element should become sticky.
     * @option
     * @example 'medium'
     */
    stickyOn: 'medium',
    /**
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
     * @option
     * @example 'sticky'
     */
    stickyClass: 'sticky',
    /**
     * Class applied to sticky container. Foundation defaults to `sticky-container`.
     * @option
     * @example 'sticky-container'
     */
    containerClass: 'sticky-container',
    /**
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option
     * @example 50
     */
    checkEvery: -1
  };

  /**
   * Helper function to calculate em values
   * @param Number {em} - number of em's to calculate into pixels
   */
  function emCalc(em) {
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
  }

  // Window exports
  Foundation.plugin(Sticky, 'Sticky');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Tabs module.
   * @module foundation.tabs
   * @requires foundation.util.keyboard
   * @requires foundation.util.timerAndImageLoader if tabs contain images
   */

  class Tabs {
    /**
     * Creates a new instance of tabs.
     * @class
     * @fires Tabs#init
     * @param {jQuery} element - jQuery object to make into tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);

      this._init();
      Foundation.registerPlugin(this, 'Tabs');
      Foundation.Keyboard.register('Tabs', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'previous',
        'ARROW_DOWN': 'next',
        'ARROW_LEFT': 'previous'
        // 'TAB': 'next',
        // 'SHIFT_TAB': 'previous'
      });
    }

    /**
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
     * @private
     */
    _init() {
      var _this = this;

      this.$tabTitles = this.$element.find(`.${ this.options.linkClass }`);
      this.$tabContent = $(`[data-tabs-content="${ this.$element[0].id }"]`);

      this.$tabTitles.each(function () {
        var $elem = $(this),
            $link = $elem.find('a'),
            isActive = $elem.hasClass('is-active'),
            hash = $link[0].hash.slice(1),
            linkId = $link[0].id ? $link[0].id : `${ hash }-label`,
            $tabContent = $(`#${ hash }`);

        $elem.attr({ 'role': 'presentation' });

        $link.attr({
          'role': 'tab',
          'aria-controls': hash,
          'aria-selected': isActive,
          'id': linkId
        });

        $tabContent.attr({
          'role': 'tabpanel',
          'aria-hidden': !isActive,
          'aria-labelledby': linkId
        });

        if (isActive && _this.options.autoFocus) {
          $link.focus();
        }
      });

      if (this.options.matchHeight) {
        var $images = this.$tabContent.find('img');

        if ($images.length) {
          Foundation.onImagesLoaded($images, this._setHeight.bind(this));
        } else {
          this._setHeight();
        }
      }

      this._events();
    }

    /**
     * Adds event handlers for items within the tabs.
     * @private
     */
    _events() {
      this._addKeyHandler();
      this._addClickHandler();
      this._setHeightMqHandler = null;

      if (this.options.matchHeight) {
        this._setHeightMqHandler = this._setHeight.bind(this);

        $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
      }
    }

    /**
     * Adds click handlers for items within the tabs.
     * @private
     */
    _addClickHandler() {
      var _this = this;

      this.$element.off('click.zf.tabs').on('click.zf.tabs', `.${ this.options.linkClass }`, function (e) {
        e.preventDefault();
        e.stopPropagation();
        if ($(this).hasClass('is-active')) {
          return;
        }
        _this._handleTabChange($(this));
      });
    }

    /**
     * Adds keyboard event handlers for items within the tabs.
     * @private
     */
    _addKeyHandler() {
      var _this = this;
      var $firstTab = _this.$element.find('li:first-of-type');
      var $lastTab = _this.$element.find('li:last-of-type');

      this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {
        if (e.which === 9) return;

        var $element = $(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ($(this).is($element)) {
            if (_this.options.wrapOnKeys) {
              $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
              $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
            } else {
              $prevElement = $elements.eq(Math.max(0, i - 1));
              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
            }
            return;
          }
        });

        // handle keyboard event with keyboard util
        Foundation.Keyboard.handleKey(e, 'Tabs', {
          open: function () {
            $element.find('[role="tab"]').focus();
            _this._handleTabChange($element);
          },
          previous: function () {
            $prevElement.find('[role="tab"]').focus();
            _this._handleTabChange($prevElement);
          },
          next: function () {
            $nextElement.find('[role="tab"]').focus();
            _this._handleTabChange($nextElement);
          },
          handled: function () {
            e.stopPropagation();
            e.preventDefault();
          }
        });
      });
    }

    /**
     * Opens the tab `$targetContent` defined by `$target`.
     * @param {jQuery} $target - Tab to open.
     * @fires Tabs#change
     * @function
     */
    _handleTabChange($target) {
      var $tabLink = $target.find('[role="tab"]'),
          hash = $tabLink[0].hash,
          $targetContent = this.$tabContent.find(hash),
          $oldTab = this.$element.find(`.${ this.options.linkClass }.is-active`).removeClass('is-active').find('[role="tab"]').attr({ 'aria-selected': 'false' });

      $(`#${ $oldTab.attr('aria-controls') }`).removeClass('is-active').attr({ 'aria-hidden': 'true' });

      $target.addClass('is-active');

      $tabLink.attr({ 'aria-selected': 'true' });

      $targetContent.addClass('is-active').attr({ 'aria-hidden': 'false' });

      /**
       * Fires when the plugin has successfully changed tabs.
       * @event Tabs#change
       */
      this.$element.trigger('change.zf.tabs', [$target]);
    }

    /**
     * Public method for selecting a content pane to display.
     * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
     * @function
     */
    selectTab(elem) {
      var idStr;

      if (typeof elem === 'object') {
        idStr = elem[0].id;
      } else {
        idStr = elem;
      }

      if (idStr.indexOf('#') < 0) {
        idStr = `#${ idStr }`;
      }

      var $target = this.$tabTitles.find(`[href="${ idStr }"]`).parent(`.${ this.options.linkClass }`);

      this._handleTabChange($target);
    }
    /**
     * Sets the height of each panel to the height of the tallest panel.
     * If enabled in options, gets called on media query change.
     * If loading content via external source, can be called directly or with _reflow.
     * @function
     * @private
     */
    _setHeight() {
      var max = 0;
      this.$tabContent.find(`.${ this.options.panelClass }`).css('height', '').each(function () {
        var panel = $(this),
            isActive = panel.hasClass('is-active');

        if (!isActive) {
          panel.css({ 'visibility': 'hidden', 'display': 'block' });
        }

        var temp = this.getBoundingClientRect().height;

        if (!isActive) {
          panel.css({
            'visibility': '',
            'display': ''
          });
        }

        max = temp > max ? temp : max;
      }).css('height', `${ max }px`);
    }

    /**
     * Destroys an instance of an tabs.
     * @fires Tabs#destroyed
     */
    destroy() {
      this.$element.find(`.${ this.options.linkClass }`).off('.zf.tabs').hide().end().find(`.${ this.options.panelClass }`).hide();

      if (this.options.matchHeight) {
        if (this._setHeightMqHandler != null) {
          $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
        }
      }

      Foundation.unregisterPlugin(this);
    }
  }

  Tabs.defaults = {
    /**
     * Allows the window to scroll to content of active pane on load if set to true.
     * @option
     * @example false
     */
    autoFocus: false,

    /**
     * Allows keyboard input to 'wrap' around the tab links.
     * @option
     * @example true
     */
    wrapOnKeys: true,

    /**
     * Allows the tab content panes to match heights if set to true.
     * @option
     * @example false
     */
    matchHeight: false,

    /**
     * Class applied to `li`'s in tab link list.
     * @option
     * @example 'tabs-title'
     */
    linkClass: 'tabs-title',

    /**
     * Class applied to the content containers.
     * @option
     * @example 'tabs-panel'
     */
    panelClass: 'tabs-panel'
  };

  function checkClass($elem) {
    return $elem.hasClass('is-active');
  }

  // Window exports
  Foundation.plugin(Tabs, 'Tabs');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Toggler module.
   * @module foundation.toggler
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   */

  class Toggler {
    /**
     * Creates a new instance of Toggler.
     * @class
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Toggler.defaults, element.data(), options);
      this.className = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Toggler');
    }

    /**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */
    _init() {
      var input;
      // Parse animation classes if they were set
      if (this.options.animate) {
        input = this.options.animate.split(' ');

        this.animationIn = input[0];
        this.animationOut = input[1] || null;
      }
      // Otherwise, parse toggle class
      else {
          input = this.$element.data('toggler');
          // Allow for a . at the beginning of the string
          this.className = input[0] === '.' ? input.slice(1) : input;
        }

      // Add ARIA attributes to triggers
      var id = this.$element[0].id;
      $(`[data-open="${ id }"], [data-close="${ id }"], [data-toggle="${ id }"]`).attr('aria-controls', id);
      // If the target is hidden, add aria-hidden
      this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
    }

    /**
     * Initializes events for the toggle trigger.
     * @function
     * @private
     */
    _events() {
      this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
    }

    /**
     * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
     * @function
     * @fires Toggler#on
     * @fires Toggler#off
     */
    toggle() {
      this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
    }

    _toggleClass() {
      this.$element.toggleClass(this.className);

      var isOn = this.$element.hasClass(this.className);
      if (isOn) {
        /**
         * Fires if the target element has the class after a toggle.
         * @event Toggler#on
         */
        this.$element.trigger('on.zf.toggler');
      } else {
        /**
         * Fires if the target element does not have the class after a toggle.
         * @event Toggler#off
         */
        this.$element.trigger('off.zf.toggler');
      }

      this._updateARIA(isOn);
    }

    _toggleAnimate() {
      var _this = this;

      if (this.$element.is(':hidden')) {
        Foundation.Motion.animateIn(this.$element, this.animationIn, function () {
          _this._updateARIA(true);
          this.trigger('on.zf.toggler');
        });
      } else {
        Foundation.Motion.animateOut(this.$element, this.animationOut, function () {
          _this._updateARIA(false);
          this.trigger('off.zf.toggler');
        });
      }
    }

    _updateARIA(isOn) {
      this.$element.attr('aria-expanded', isOn ? true : false);
    }

    /**
     * Destroys the instance of Toggler on the element.
     * @function
     */
    destroy() {
      this.$element.off('.zf.toggler');
      Foundation.unregisterPlugin(this);
    }
  }

  Toggler.defaults = {
    /**
     * Tells the plugin if the element should animated when toggled.
     * @option
     * @example false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(Toggler, 'Toggler');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Tooltip module.
   * @module foundation.tooltip
   * @requires foundation.util.box
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   */

  class Tooltip {
    /**
     * Creates a new instance of a Tooltip.
     * @class
     * @fires Tooltip#init
     * @param {jQuery} element - jQuery object to attach a tooltip to.
     * @param {Object} options - object to extend the default configuration.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);

      this.isActive = false;
      this.isClick = false;
      this._init();

      Foundation.registerPlugin(this, 'Tooltip');
    }

    /**
     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
     * @private
     */
    _init() {
      var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');

      this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);
      this.options.tipText = this.options.tipText || this.$element.attr('title');
      this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);

      this.template.appendTo(document.body).text(this.options.tipText).hide();

      this.$element.attr({
        'title': '',
        'aria-describedby': elemId,
        'data-yeti-box': elemId,
        'data-toggle': elemId,
        'data-resize': elemId
      }).addClass(this.options.triggerClass);

      //helper variables to track movement on collisions
      this.usedPositions = [];
      this.counter = 4;
      this.classChanged = false;

      this._events();
    }

    /**
     * Grabs the current positioning class, if present, and returns the value or an empty string.
     * @private
     */
    _getPositionClass(element) {
      if (!element) {
        return '';
      }
      // var position = element.attr('class').match(/top|left|right/g);
      var position = element[0].className.match(/\b(top|left|right)\b/g);
      position = position ? position[0] : '';
      return position;
    }
    /**
     * builds the tooltip element, adds attributes, and returns the template.
     * @private
     */
    _buildTemplate(id) {
      var templateClasses = `${ this.options.tooltipClass } ${ this.options.positionClass } ${ this.options.templateClasses }`.trim();
      var $template = $('<div></div>').addClass(templateClasses).attr({
        'role': 'tooltip',
        'aria-hidden': true,
        'data-is-active': false,
        'data-is-focus': false,
        'id': id
      });
      return $template;
    }

    /**
     * Function that gets called if a collision event is detected.
     * @param {String} position - positioning class to try
     * @private
     */
    _reposition(position) {
      this.usedPositions.push(position ? position : 'bottom');

      //default, try switching to opposite side
      if (!position && this.usedPositions.indexOf('top') < 0) {
        this.template.addClass('top');
      } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
        this.template.removeClass(position);
      } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
        this.template.removeClass(position).addClass('right');
      } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
        this.template.removeClass(position).addClass('left');
      }

      //if default change didn't work, try bottom or left first
      else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.template.addClass('left');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.template.removeClass(position).addClass('left');
        } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.template.removeClass(position);
        } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.template.removeClass(position);
        }
        //if nothing cleared, set to bottom
        else {
            this.template.removeClass(position);
          }
      this.classChanged = true;
      this.counter--;
    }

    /**
     * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
     * if the tooltip is larger than the screen width, default to full width - any user selected margin
     * @private
     */
    _setPosition() {
      var position = this._getPositionClass(this.template),
          $tipDims = Foundation.Box.GetDimensions(this.template),
          $anchorDims = Foundation.Box.GetDimensions(this.$element),
          direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
          param = direction === 'top' ? 'height' : 'width',
          offset = param === 'height' ? this.options.vOffset : this.options.hOffset,
          _this = this;

      if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {
        this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
          // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
          'width': $anchorDims.windowDims.width - this.options.hOffset * 2,
          'height': 'auto'
        });
        return false;
      }

      this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));

      while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {
        this._reposition(position);
        this._setPosition();
      }
    }

    /**
     * reveals the tooltip, and fires an event to close any other open tooltips on the page
     * @fires Tooltip#closeme
     * @fires Tooltip#show
     * @function
     */
    show() {
      if (this.options.showOn !== 'all' && !Foundation.MediaQuery.atLeast(this.options.showOn)) {
        // console.error('The screen is too small to display this tooltip');
        return false;
      }

      var _this = this;
      this.template.css('visibility', 'hidden').show();
      this._setPosition();

      /**
       * Fires to close all other open tooltips on the page
       * @event Closeme#tooltip
       */
      this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));

      this.template.attr({
        'data-is-active': true,
        'aria-hidden': false
      });
      _this.isActive = true;
      // console.log(this.template);
      this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {
        //maybe do stuff?
      });
      /**
       * Fires when the tooltip is shown
       * @event Tooltip#show
       */
      this.$element.trigger('show.zf.tooltip');
    }

    /**
     * Hides the current tooltip, and resets the positioning class if it was changed due to collision
     * @fires Tooltip#hide
     * @function
     */
    hide() {
      // console.log('hiding', this.$element.data('yeti-box'));
      var _this = this;
      this.template.stop().attr({
        'aria-hidden': true,
        'data-is-active': false
      }).fadeOut(this.options.fadeOutDuration, function () {
        _this.isActive = false;
        _this.isClick = false;
        if (_this.classChanged) {
          _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);

          _this.usedPositions = [];
          _this.counter = 4;
          _this.classChanged = false;
        }
      });
      /**
       * fires when the tooltip is hidden
       * @event Tooltip#hide
       */
      this.$element.trigger('hide.zf.tooltip');
    }

    /**
     * adds event listeners for the tooltip and its anchor
     * TODO combine some of the listeners like focus and mouseenter, etc.
     * @private
     */
    _events() {
      var _this = this;
      var $template = this.template;
      var isFocus = false;

      if (!this.options.disableHover) {

        this.$element.on('mouseenter.zf.tooltip', function (e) {
          if (!_this.isActive) {
            _this.timeout = setTimeout(function () {
              _this.show();
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.tooltip', function (e) {
          clearTimeout(_this.timeout);
          if (!isFocus || _this.isClick && !_this.options.clickOpen) {
            _this.hide();
          }
        });
      }

      if (this.options.clickOpen) {
        this.$element.on('mousedown.zf.tooltip', function (e) {
          e.stopImmediatePropagation();
          if (_this.isClick) {
            //_this.hide();
            // _this.isClick = false;
          } else {
            _this.isClick = true;
            if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {
              _this.show();
            }
          }
        });
      } else {
        this.$element.on('mousedown.zf.tooltip', function (e) {
          e.stopImmediatePropagation();
          _this.isClick = true;
        });
      }

      if (!this.options.disableForTouch) {
        this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {
          _this.isActive ? _this.hide() : _this.show();
        });
      }

      this.$element.on({
        // 'toggle.zf.trigger': this.toggle.bind(this),
        // 'close.zf.trigger': this.hide.bind(this)
        'close.zf.trigger': this.hide.bind(this)
      });

      this.$element.on('focus.zf.tooltip', function (e) {
        isFocus = true;
        if (_this.isClick) {
          // If we're not showing open on clicks, we need to pretend a click-launched focus isn't
          // a real focus, otherwise on hover and come back we get bad behavior
          if (!_this.options.clickOpen) {
            isFocus = false;
          }
          return false;
        } else {
          _this.show();
        }
      }).on('focusout.zf.tooltip', function (e) {
        isFocus = false;
        _this.isClick = false;
        _this.hide();
      }).on('resizeme.zf.trigger', function () {
        if (_this.isActive) {
          _this._setPosition();
        }
      });
    }

    /**
     * adds a toggle method, in addition to the static show() & hide() functions
     * @function
     */
    toggle() {
      if (this.isActive) {
        this.hide();
      } else {
        this.show();
      }
    }

    /**
     * Destroys an instance of tooltip, removes template element from the view.
     * @function
     */
    destroy() {
      this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tootip')
      //  .removeClass('has-tip')
      .removeAttr('aria-describedby').removeAttr('data-yeti-box').removeAttr('data-toggle').removeAttr('data-resize');

      this.template.remove();

      Foundation.unregisterPlugin(this);
    }
  }

  Tooltip.defaults = {
    disableForTouch: false,
    /**
     * Time, in ms, before a tooltip should open on hover.
     * @option
     * @example 200
     */
    hoverDelay: 200,
    /**
     * Time, in ms, a tooltip should take to fade into view.
     * @option
     * @example 150
     */
    fadeInDuration: 150,
    /**
     * Time, in ms, a tooltip should take to fade out of view.
     * @option
     * @example 150
     */
    fadeOutDuration: 150,
    /**
     * Disables hover events from opening the tooltip if set to true
     * @option
     * @example false
     */
    disableHover: false,
    /**
     * Optional addtional classes to apply to the tooltip template on init.
     * @option
     * @example 'my-cool-tip-class'
     */
    templateClasses: '',
    /**
     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
     * @option
     * @example 'tooltip'
     */
    tooltipClass: 'tooltip',
    /**
     * Class applied to the tooltip anchor element.
     * @option
     * @example 'has-tip'
     */
    triggerClass: 'has-tip',
    /**
     * Minimum breakpoint size at which to open the tooltip.
     * @option
     * @example 'small'
     */
    showOn: 'small',
    /**
     * Custom template to be used to generate markup for tooltip.
     * @option
     * @example '&lt;div class="tooltip"&gt;&lt;/div&gt;'
     */
    template: '',
    /**
     * Text displayed in the tooltip template on open.
     * @option
     * @example 'Some cool space fact here.'
     */
    tipText: '',
    touchCloseText: 'Tap to close.',
    /**
     * Allows the tooltip to remain open if triggered with a click or touch event.
     * @option
     * @example true
     */
    clickOpen: true,
    /**
     * Additional positioning classes, set by the JS
     * @option
     * @example 'top'
     */
    positionClass: '',
    /**
     * Distance, in pixels, the template should push away from the anchor on the Y axis.
     * @option
     * @example 10
     */
    vOffset: 10,
    /**
     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.
     * @option
     * @example 12
     */
    hOffset: 12
  };

  /**
   * TODO utilize resize event trigger
   */

  // Window exports
  Foundation.plugin(Tooltip, 'Tooltip');
}(jQuery);
;'use strict';

// Polyfill for requestAnimationFrame

(function () {
  if (!Date.now) Date.now = function () {
    return new Date().getTime();
  };

  var vendors = ['webkit', 'moz'];
  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
    var vp = vendors[i];
    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
  }
  if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
    var lastTime = 0;
    window.requestAnimationFrame = function (callback) {
      var now = Date.now();
      var nextTime = Math.max(lastTime + 16, now);
      return setTimeout(function () {
        callback(lastTime = nextTime);
      }, nextTime - now);
    };
    window.cancelAnimationFrame = clearTimeout;
  }
})();

var initClasses = ['mui-enter', 'mui-leave'];
var activeClasses = ['mui-enter-active', 'mui-leave-active'];

// Find the right "transitionend" event for this browser
var endEvent = function () {
  var transitions = {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'otransitionend'
  };
  var elem = window.document.createElement('div');

  for (var t in transitions) {
    if (typeof elem.style[t] !== 'undefined') {
      return transitions[t];
    }
  }

  return null;
}();

function animate(isIn, element, animation, cb) {
  element = $(element).eq(0);

  if (!element.length) return;

  if (endEvent === null) {
    isIn ? element.show() : element.hide();
    cb();
    return;
  }

  var initClass = isIn ? initClasses[0] : initClasses[1];
  var activeClass = isIn ? activeClasses[0] : activeClasses[1];

  // Set up the animation
  reset();
  element.addClass(animation);
  element.css('transition', 'none');
  requestAnimationFrame(function () {
    element.addClass(initClass);
    if (isIn) element.show();
  });

  // Start the animation
  requestAnimationFrame(function () {
    element[0].offsetWidth;
    element.css('transition', '');
    element.addClass(activeClass);
  });

  // Clean up the animation when it finishes
  element.one('transitionend', finish);

  // Hides the element (for out animations), resets the element, and runs a callback
  function finish() {
    if (!isIn) element.hide();
    reset();
    if (cb) cb.apply(element);
  }

  // Resets transitions and removes motion-specific classes
  function reset() {
    element[0].style.transitionDuration = 0;
    element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
  }
}

var MotionUI = {
  animateIn: function (element, animation, cb) {
    animate(true, element, animation, cb);
  },

  animateOut: function (element, animation, cb) {
    animate(false, element, animation, cb);
  }
};
;jQuery('iframe[src*="youtube.com"]').wrap("<div class='flex-video widescreen'/>");
jQuery('iframe[src*="vimeo.com"]').wrap("<div class='flex-video widescreen vimeo'/>");
;jQuery(document).foundation();
;// Joyride demo
$('#start-jr').on('click', function () {
  $(document).foundation('joyride', 'start');
});
;/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */
;(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module. 
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// Node/CommonJS 
		factory(require('jquery'));
	} else {
		// Browser globals 
		factory(window.jQuery || window.Zepto);
	}
})(function ($) {

	/*>>core*/
	/**
  * 
  * Magnific Popup Core JS file
  * 
  */

	/**
  * Private static constants
  */
	var CLOSE_EVENT = 'Close',
	    BEFORE_CLOSE_EVENT = 'BeforeClose',
	    AFTER_CLOSE_EVENT = 'AfterClose',
	    BEFORE_APPEND_EVENT = 'BeforeAppend',
	    MARKUP_PARSE_EVENT = 'MarkupParse',
	    OPEN_EVENT = 'Open',
	    CHANGE_EVENT = 'Change',
	    NS = 'mfp',
	    EVENT_NS = '.' + NS,
	    READY_CLASS = 'mfp-ready',
	    REMOVING_CLASS = 'mfp-removing',
	    PREVENT_CLOSE_CLASS = 'mfp-prevent-close';

	/**
  * Private vars 
  */
	/*jshint -W079 */
	var mfp,
	    // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
	MagnificPopup = function () {},
	    _isJQ = !!window.jQuery,
	    _prevStatus,
	    _window = $(window),
	    _document,
	    _prevContentType,
	    _wrapClasses,
	    _currPopupType;

	/**
  * Private functions
  */
	var _mfpOn = function (name, f) {
		mfp.ev.on(NS + name + EVENT_NS, f);
	},
	    _getEl = function (className, appendTo, html, raw) {
		var el = document.createElement('div');
		el.className = 'mfp-' + className;
		if (html) {
			el.innerHTML = html;
		}
		if (!raw) {
			el = $(el);
			if (appendTo) {
				el.appendTo(appendTo);
			}
		} else if (appendTo) {
			appendTo.appendChild(el);
		}
		return el;
	},
	    _mfpTrigger = function (e, data) {
		mfp.ev.triggerHandler(NS + e, data);

		if (mfp.st.callbacks) {
			// converts "mfpEventName" to "eventName" callback and triggers it if it's present
			e = e.charAt(0).toLowerCase() + e.slice(1);
			if (mfp.st.callbacks[e]) {
				mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
			}
		}
	},
	    _getCloseBtn = function (type) {
		if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
			mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace('%title%', mfp.st.tClose));
			_currPopupType = type;
		}
		return mfp.currTemplate.closeBtn;
	},

	// Initialize Magnific Popup only when called at least once
	_checkInstance = function () {
		if (!$.magnificPopup.instance) {
			/*jshint -W020 */
			mfp = new MagnificPopup();
			mfp.init();
			$.magnificPopup.instance = mfp;
		}
	},

	// CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
	supportsTransitions = function () {
		var s = document.createElement('p').style,
		    // 's' for style. better to create an element if body yet to exist
		v = ['ms', 'O', 'Moz', 'Webkit']; // 'v' for vendor

		if (s['transition'] !== undefined) {
			return true;
		}

		while (v.length) {
			if (v.pop() + 'Transition' in s) {
				return true;
			}
		}

		return false;
	};

	/**
  * Public functions
  */
	MagnificPopup.prototype = {

		constructor: MagnificPopup,

		/**
   * Initializes Magnific Popup plugin. 
   * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
   */
		init: function () {
			var appVersion = navigator.appVersion;
			mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;
			mfp.isAndroid = /android/gi.test(appVersion);
			mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion);
			mfp.supportsTransition = supportsTransitions();

			// We disable fixed positioned lightbox on devices that don't handle it nicely.
			// If you know a better way of detecting this - let me know.
			mfp.probablyMobile = mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent);
			_document = $(document);

			mfp.popupsCache = {};
		},

		/**
   * Opens popup
   * @param  data [description]
   */
		open: function (data) {

			var i;

			if (data.isObj === false) {
				// convert jQuery collection to array to avoid conflicts later
				mfp.items = data.items.toArray();

				mfp.index = 0;
				var items = data.items,
				    item;
				for (i = 0; i < items.length; i++) {
					item = items[i];
					if (item.parsed) {
						item = item.el[0];
					}
					if (item === data.el[0]) {
						mfp.index = i;
						break;
					}
				}
			} else {
				mfp.items = $.isArray(data.items) ? data.items : [data.items];
				mfp.index = data.index || 0;
			}

			// if popup is already opened - we just update the content
			if (mfp.isOpen) {
				mfp.updateItemHTML();
				return;
			}

			mfp.types = [];
			_wrapClasses = '';
			if (data.mainEl && data.mainEl.length) {
				mfp.ev = data.mainEl.eq(0);
			} else {
				mfp.ev = _document;
			}

			if (data.key) {
				if (!mfp.popupsCache[data.key]) {
					mfp.popupsCache[data.key] = {};
				}
				mfp.currTemplate = mfp.popupsCache[data.key];
			} else {
				mfp.currTemplate = {};
			}

			mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
			mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;

			if (mfp.st.modal) {
				mfp.st.closeOnContentClick = false;
				mfp.st.closeOnBgClick = false;
				mfp.st.showCloseBtn = false;
				mfp.st.enableEscapeKey = false;
			}

			// Building markup
			// main containers are created only once
			if (!mfp.bgOverlay) {

				// Dark overlay
				mfp.bgOverlay = _getEl('bg').on('click' + EVENT_NS, function () {
					mfp.close();
				});

				mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click' + EVENT_NS, function (e) {
					if (mfp._checkIfClose(e.target)) {
						mfp.close();
					}
				});

				mfp.container = _getEl('container', mfp.wrap);
			}

			mfp.contentContainer = _getEl('content');
			if (mfp.st.preloader) {
				mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);
			}

			// Initializing modules
			var modules = $.magnificPopup.modules;
			for (i = 0; i < modules.length; i++) {
				var n = modules[i];
				n = n.charAt(0).toUpperCase() + n.slice(1);
				mfp['init' + n].call(mfp);
			}
			_mfpTrigger('BeforeOpen');

			if (mfp.st.showCloseBtn) {
				// Close button
				if (!mfp.st.closeBtnInside) {
					mfp.wrap.append(_getCloseBtn());
				} else {
					_mfpOn(MARKUP_PARSE_EVENT, function (e, template, values, item) {
						values.close_replaceWith = _getCloseBtn(item.type);
					});
					_wrapClasses += ' mfp-close-btn-in';
				}
			}

			if (mfp.st.alignTop) {
				_wrapClasses += ' mfp-align-top';
			}

			if (mfp.fixedContentPos) {
				mfp.wrap.css({
					overflow: mfp.st.overflowY,
					overflowX: 'hidden',
					overflowY: mfp.st.overflowY
				});
			} else {
				mfp.wrap.css({
					top: _window.scrollTop(),
					position: 'absolute'
				});
			}
			if (mfp.st.fixedBgPos === false || mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos) {
				mfp.bgOverlay.css({
					height: _document.height(),
					position: 'absolute'
				});
			}

			if (mfp.st.enableEscapeKey) {
				// Close on ESC key
				_document.on('keyup' + EVENT_NS, function (e) {
					if (e.keyCode === 27) {
						mfp.close();
					}
				});
			}

			_window.on('resize' + EVENT_NS, function () {
				mfp.updateSize();
			});

			if (!mfp.st.closeOnContentClick) {
				_wrapClasses += ' mfp-auto-cursor';
			}

			if (_wrapClasses) mfp.wrap.addClass(_wrapClasses);

			// this triggers recalculation of layout, so we get it once to not to trigger twice
			var windowHeight = mfp.wH = _window.height();

			var windowStyles = {};

			if (mfp.fixedContentPos) {
				if (mfp._hasScrollBar(windowHeight)) {
					var s = mfp._getScrollbarSize();
					if (s) {
						windowStyles.marginRight = s;
					}
				}
			}

			if (mfp.fixedContentPos) {
				if (!mfp.isIE7) {
					windowStyles.overflow = 'hidden';
				} else {
					// ie7 double-scroll bug
					$('body, html').css('overflow', 'hidden');
				}
			}

			var classesToadd = mfp.st.mainClass;
			if (mfp.isIE7) {
				classesToadd += ' mfp-ie7';
			}
			if (classesToadd) {
				mfp._addClassToMFP(classesToadd);
			}

			// add content
			mfp.updateItemHTML();

			_mfpTrigger('BuildControls');

			// remove scrollbar, add margin e.t.c
			$('html').css(windowStyles);

			// add everything to DOM
			mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || $(document.body));

			// Save last focused element
			mfp._lastFocusedEl = document.activeElement;

			// Wait for next cycle to allow CSS transition
			setTimeout(function () {

				if (mfp.content) {
					mfp._addClassToMFP(READY_CLASS);
					mfp._setFocus();
				} else {
					// if content is not defined (not loaded e.t.c) we add class only for BG
					mfp.bgOverlay.addClass(READY_CLASS);
				}

				// Trap the focus in popup
				_document.on('focusin' + EVENT_NS, mfp._onFocusIn);
			}, 16);

			mfp.isOpen = true;
			mfp.updateSize(windowHeight);
			_mfpTrigger(OPEN_EVENT);

			return data;
		},

		/**
   * Closes the popup
   */
		close: function () {
			if (!mfp.isOpen) return;
			_mfpTrigger(BEFORE_CLOSE_EVENT);

			mfp.isOpen = false;
			// for CSS3 animation
			if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
				mfp._addClassToMFP(REMOVING_CLASS);
				setTimeout(function () {
					mfp._close();
				}, mfp.st.removalDelay);
			} else {
				mfp._close();
			}
		},

		/**
   * Helper for close() function
   */
		_close: function () {
			_mfpTrigger(CLOSE_EVENT);

			var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';

			mfp.bgOverlay.detach();
			mfp.wrap.detach();
			mfp.container.empty();

			if (mfp.st.mainClass) {
				classesToRemove += mfp.st.mainClass + ' ';
			}

			mfp._removeClassFromMFP(classesToRemove);

			if (mfp.fixedContentPos) {
				var windowStyles = { marginRight: '' };
				if (mfp.isIE7) {
					$('body, html').css('overflow', '');
				} else {
					windowStyles.overflow = '';
				}
				$('html').css(windowStyles);
			}

			_document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);
			mfp.ev.off(EVENT_NS);

			// clean up DOM elements that aren't removed
			mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');
			mfp.bgOverlay.attr('class', 'mfp-bg');
			mfp.container.attr('class', 'mfp-container');

			// remove close button from target element
			if (mfp.st.showCloseBtn && (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
				if (mfp.currTemplate.closeBtn) mfp.currTemplate.closeBtn.detach();
			}

			if (mfp.st.autoFocusLast && mfp._lastFocusedEl) {
				$(mfp._lastFocusedEl).focus(); // put tab focus back
			}
			mfp.currItem = null;
			mfp.content = null;
			mfp.currTemplate = null;
			mfp.prevHeight = 0;

			_mfpTrigger(AFTER_CLOSE_EVENT);
		},

		updateSize: function (winHeight) {

			if (mfp.isIOS) {
				// fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
				var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
				var height = window.innerHeight * zoomLevel;
				mfp.wrap.css('height', height);
				mfp.wH = height;
			} else {
				mfp.wH = winHeight || _window.height();
			}
			// Fixes #84: popup incorrectly positioned with position:relative on body
			if (!mfp.fixedContentPos) {
				mfp.wrap.css('height', mfp.wH);
			}

			_mfpTrigger('Resize');
		},

		/**
   * Set content of popup based on current index
   */
		updateItemHTML: function () {
			var item = mfp.items[mfp.index];

			// Detach and perform modifications
			mfp.contentContainer.detach();

			if (mfp.content) mfp.content.detach();

			if (!item.parsed) {
				item = mfp.parseEl(mfp.index);
			}

			var type = item.type;

			_mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]);
			// BeforeChange event works like so:
			// _mfpOn('BeforeChange', function(e, prevType, newType) { });

			mfp.currItem = item;

			if (!mfp.currTemplate[type]) {
				var markup = mfp.st[type] ? mfp.st[type].markup : false;

				// allows to modify markup
				_mfpTrigger('FirstMarkupParse', markup);

				if (markup) {
					mfp.currTemplate[type] = $(markup);
				} else {
					// if there is no markup found we just define that template is parsed
					mfp.currTemplate[type] = true;
				}
			}

			if (_prevContentType && _prevContentType !== item.type) {
				mfp.container.removeClass('mfp-' + _prevContentType + '-holder');
			}

			var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
			mfp.appendContent(newContent, type);

			item.preloaded = true;

			_mfpTrigger(CHANGE_EVENT, item);
			_prevContentType = item.type;

			// Append container back after its content changed
			mfp.container.prepend(mfp.contentContainer);

			_mfpTrigger('AfterChange');
		},

		/**
   * Set HTML content of popup
   */
		appendContent: function (newContent, type) {
			mfp.content = newContent;

			if (newContent) {
				if (mfp.st.showCloseBtn && mfp.st.closeBtnInside && mfp.currTemplate[type] === true) {
					// if there is no markup, we just append close button element inside
					if (!mfp.content.find('.mfp-close').length) {
						mfp.content.append(_getCloseBtn());
					}
				} else {
					mfp.content = newContent;
				}
			} else {
				mfp.content = '';
			}

			_mfpTrigger(BEFORE_APPEND_EVENT);
			mfp.container.addClass('mfp-' + type + '-holder');

			mfp.contentContainer.append(mfp.content);
		},

		/**
   * Creates Magnific Popup data object based on given data
   * @param  {int} index Index of item to parse
   */
		parseEl: function (index) {
			var item = mfp.items[index],
			    type;

			if (item.tagName) {
				item = { el: $(item) };
			} else {
				type = item.type;
				item = { data: item, src: item.src };
			}

			if (item.el) {
				var types = mfp.types;

				// check for 'mfp-TYPE' class
				for (var i = 0; i < types.length; i++) {
					if (item.el.hasClass('mfp-' + types[i])) {
						type = types[i];
						break;
					}
				}

				item.src = item.el.attr('data-mfp-src');
				if (!item.src) {
					item.src = item.el.attr('href');
				}
			}

			item.type = type || mfp.st.type || 'inline';
			item.index = index;
			item.parsed = true;
			mfp.items[index] = item;
			_mfpTrigger('ElementParse', item);

			return mfp.items[index];
		},

		/**
   * Initializes single popup or a group of popups
   */
		addGroup: function (el, options) {
			var eHandler = function (e) {
				e.mfpEl = this;
				mfp._openClick(e, el, options);
			};

			if (!options) {
				options = {};
			}

			var eName = 'click.magnificPopup';
			options.mainEl = el;

			if (options.items) {
				options.isObj = true;
				el.off(eName).on(eName, eHandler);
			} else {
				options.isObj = false;
				if (options.delegate) {
					el.off(eName).on(eName, options.delegate, eHandler);
				} else {
					options.items = el;
					el.off(eName).on(eName, eHandler);
				}
			}
		},
		_openClick: function (e, el, options) {
			var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;

			if (!midClick && (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)) {
				return;
			}

			var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;

			if (disableOn) {
				if ($.isFunction(disableOn)) {
					if (!disableOn.call(mfp)) {
						return true;
					}
				} else {
					// else it's number
					if (_window.width() < disableOn) {
						return true;
					}
				}
			}

			if (e.type) {
				e.preventDefault();

				// This will prevent popup from closing if element is inside and popup is already opened
				if (mfp.isOpen) {
					e.stopPropagation();
				}
			}

			options.el = $(e.mfpEl);
			if (options.delegate) {
				options.items = el.find(options.delegate);
			}
			mfp.open(options);
		},

		/**
   * Updates text on preloader
   */
		updateStatus: function (status, text) {

			if (mfp.preloader) {
				if (_prevStatus !== status) {
					mfp.container.removeClass('mfp-s-' + _prevStatus);
				}

				if (!text && status === 'loading') {
					text = mfp.st.tLoading;
				}

				var data = {
					status: status,
					text: text
				};
				// allows to modify status
				_mfpTrigger('UpdateStatus', data);

				status = data.status;
				text = data.text;

				mfp.preloader.html(text);

				mfp.preloader.find('a').on('click', function (e) {
					e.stopImmediatePropagation();
				});

				mfp.container.addClass('mfp-s-' + status);
				_prevStatus = status;
			}
		},

		/*
  	"Private" helpers that aren't private at all
   */
		// Check to close popup or not
		// "target" is an element that was clicked
		_checkIfClose: function (target) {

			if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
				return;
			}

			var closeOnContent = mfp.st.closeOnContentClick;
			var closeOnBg = mfp.st.closeOnBgClick;

			if (closeOnContent && closeOnBg) {
				return true;
			} else {

				// We close the popup if click is on close button or on preloader. Or if there is no content.
				if (!mfp.content || $(target).hasClass('mfp-close') || mfp.preloader && target === mfp.preloader[0]) {
					return true;
				}

				// if click is outside the content
				if (target !== mfp.content[0] && !$.contains(mfp.content[0], target)) {
					if (closeOnBg) {
						// last check, if the clicked element is in DOM, (in case it's removed onclick)
						if ($.contains(document, target)) {
							return true;
						}
					}
				} else if (closeOnContent) {
					return true;
				}
			}
			return false;
		},
		_addClassToMFP: function (cName) {
			mfp.bgOverlay.addClass(cName);
			mfp.wrap.addClass(cName);
		},
		_removeClassFromMFP: function (cName) {
			this.bgOverlay.removeClass(cName);
			mfp.wrap.removeClass(cName);
		},
		_hasScrollBar: function (winHeight) {
			return (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height());
		},
		_setFocus: function () {
			(mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
		},
		_onFocusIn: function (e) {
			if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
				mfp._setFocus();
				return false;
			}
		},
		_parseMarkup: function (template, values, item) {
			var arr;
			if (item.data) {
				values = $.extend(item.data, values);
			}
			_mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);

			$.each(values, function (key, value) {
				if (value === undefined || value === false) {
					return true;
				}
				arr = key.split('_');
				if (arr.length > 1) {
					var el = template.find(EVENT_NS + '-' + arr[0]);

					if (el.length > 0) {
						var attr = arr[1];
						if (attr === 'replaceWith') {
							if (el[0] !== value[0]) {
								el.replaceWith(value);
							}
						} else if (attr === 'img') {
							if (el.is('img')) {
								el.attr('src', value);
							} else {
								el.replaceWith($('<img>').attr('src', value).attr('class', el.attr('class')));
							}
						} else {
							el.attr(arr[1], value);
						}
					}
				} else {
					template.find(EVENT_NS + '-' + key).html(value);
				}
			});
		},

		_getScrollbarSize: function () {
			// thx David
			if (mfp.scrollbarSize === undefined) {
				var scrollDiv = document.createElement("div");
				scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
				document.body.appendChild(scrollDiv);
				mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
				document.body.removeChild(scrollDiv);
			}
			return mfp.scrollbarSize;
		}

	}; /* MagnificPopup core prototype end */

	/**
  * Public static functions
  */
	$.magnificPopup = {
		instance: null,
		proto: MagnificPopup.prototype,
		modules: [],

		open: function (options, index) {
			_checkInstance();

			if (!options) {
				options = {};
			} else {
				options = $.extend(true, {}, options);
			}

			options.isObj = true;
			options.index = index || 0;
			return this.instance.open(options);
		},

		close: function () {
			return $.magnificPopup.instance && $.magnificPopup.instance.close();
		},

		registerModule: function (name, module) {
			if (module.options) {
				$.magnificPopup.defaults[name] = module.options;
			}
			$.extend(this.proto, module.proto);
			this.modules.push(name);
		},

		defaults: {

			// Info about options is in docs:
			// http://dimsemenov.com/plugins/magnific-popup/documentation.html#options

			disableOn: 0,

			key: null,

			midClick: false,

			mainClass: '',

			preloader: true,

			focus: '', // CSS selector of input to focus after popup is opened

			closeOnContentClick: false,

			closeOnBgClick: true,

			closeBtnInside: true,

			showCloseBtn: true,

			enableEscapeKey: true,

			modal: false,

			alignTop: false,

			removalDelay: 0,

			prependTo: null,

			fixedContentPos: 'auto',

			fixedBgPos: 'auto',

			overflowY: 'auto',

			closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',

			tClose: 'Close (Esc)',

			tLoading: 'Loading...',

			autoFocusLast: true

		}
	};

	$.fn.magnificPopup = function (options) {
		_checkInstance();

		var jqEl = $(this);

		// We call some API method of first param is a string
		if (typeof options === "string") {

			if (options === 'open') {
				var items,
				    itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,
				    index = parseInt(arguments[1], 10) || 0;

				if (itemOpts.items) {
					items = itemOpts.items[index];
				} else {
					items = jqEl;
					if (itemOpts.delegate) {
						items = items.find(itemOpts.delegate);
					}
					items = items.eq(index);
				}
				mfp._openClick({ mfpEl: items }, jqEl, itemOpts);
			} else {
				if (mfp.isOpen) mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
			}
		} else {
			// clone options obj
			options = $.extend(true, {}, options);

			/*
    * As Zepto doesn't support .data() method for objects
    * and it works only in normal browsers
    * we assign "options" object directly to the DOM element. FTW!
    */
			if (_isJQ) {
				jqEl.data('magnificPopup', options);
			} else {
				jqEl[0].magnificPopup = options;
			}

			mfp.addGroup(jqEl, options);
		}
		return jqEl;
	};

	/*>>core*/

	/*>>inline*/

	var INLINE_NS = 'inline',
	    _hiddenClass,
	    _inlinePlaceholder,
	    _lastInlineElement,
	    _putInlineElementsBack = function () {
		if (_lastInlineElement) {
			_inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();
			_lastInlineElement = null;
		}
	};

	$.magnificPopup.registerModule(INLINE_NS, {
		options: {
			hiddenClass: 'hide', // will be appended with `mfp-` prefix
			markup: '',
			tNotFound: 'Content not found'
		},
		proto: {

			initInline: function () {
				mfp.types.push(INLINE_NS);

				_mfpOn(CLOSE_EVENT + '.' + INLINE_NS, function () {
					_putInlineElementsBack();
				});
			},

			getInline: function (item, template) {

				_putInlineElementsBack();

				if (item.src) {
					var inlineSt = mfp.st.inline,
					    el = $(item.src);

					if (el.length) {

						// If target element has parent - we replace it with placeholder and put it back after popup is closed
						var parent = el[0].parentNode;
						if (parent && parent.tagName) {
							if (!_inlinePlaceholder) {
								_hiddenClass = inlineSt.hiddenClass;
								_inlinePlaceholder = _getEl(_hiddenClass);
								_hiddenClass = 'mfp-' + _hiddenClass;
							}
							// replace target inline element with placeholder
							_lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
						}

						mfp.updateStatus('ready');
					} else {
						mfp.updateStatus('error', inlineSt.tNotFound);
						el = $('<div>');
					}

					item.inlineElement = el;
					return el;
				}

				mfp.updateStatus('ready');
				mfp._parseMarkup(template, {}, item);
				return template;
			}
		}
	});

	/*>>inline*/

	/*>>ajax*/
	var AJAX_NS = 'ajax',
	    _ajaxCur,
	    _removeAjaxCursor = function () {
		if (_ajaxCur) {
			$(document.body).removeClass(_ajaxCur);
		}
	},
	    _destroyAjaxRequest = function () {
		_removeAjaxCursor();
		if (mfp.req) {
			mfp.req.abort();
		}
	};

	$.magnificPopup.registerModule(AJAX_NS, {

		options: {
			settings: null,
			cursor: 'mfp-ajax-cur',
			tError: '<a href="%url%">The content</a> could not be loaded.'
		},

		proto: {
			initAjax: function () {
				mfp.types.push(AJAX_NS);
				_ajaxCur = mfp.st.ajax.cursor;

				_mfpOn(CLOSE_EVENT + '.' + AJAX_NS, _destroyAjaxRequest);
				_mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);
			},
			getAjax: function (item) {

				if (_ajaxCur) {
					$(document.body).addClass(_ajaxCur);
				}

				mfp.updateStatus('loading');

				var opts = $.extend({
					url: item.src,
					success: function (data, textStatus, jqXHR) {
						var temp = {
							data: data,
							xhr: jqXHR
						};

						_mfpTrigger('ParseAjax', temp);

						mfp.appendContent($(temp.data), AJAX_NS);

						item.finished = true;

						_removeAjaxCursor();

						mfp._setFocus();

						setTimeout(function () {
							mfp.wrap.addClass(READY_CLASS);
						}, 16);

						mfp.updateStatus('ready');

						_mfpTrigger('AjaxContentAdded');
					},
					error: function () {
						_removeAjaxCursor();
						item.finished = item.loadError = true;
						mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));
					}
				}, mfp.st.ajax.settings);

				mfp.req = $.ajax(opts);

				return '';
			}
		}
	});

	/*>>ajax*/

	/*>>image*/
	var _imgInterval,
	    _getTitle = function (item) {
		if (item.data && item.data.title !== undefined) return item.data.title;

		var src = mfp.st.image.titleSrc;

		if (src) {
			if ($.isFunction(src)) {
				return src.call(mfp, item);
			} else if (item.el) {
				return item.el.attr(src) || '';
			}
		}
		return '';
	};

	$.magnificPopup.registerModule('image', {

		options: {
			markup: '<div class="mfp-figure">' + '<div class="mfp-close"></div>' + '<figure>' + '<div class="mfp-img"></div>' + '<figcaption>' + '<div class="mfp-bottom-bar">' + '<div class="mfp-title"></div>' + '<div class="mfp-counter"></div>' + '</div>' + '</figcaption>' + '</figure>' + '</div>',
			cursor: 'mfp-zoom-out-cur',
			titleSrc: 'title',
			verticalFit: true,
			tError: '<a href="%url%">The image</a> could not be loaded.'
		},

		proto: {
			initImage: function () {
				var imgSt = mfp.st.image,
				    ns = '.image';

				mfp.types.push('image');

				_mfpOn(OPEN_EVENT + ns, function () {
					if (mfp.currItem.type === 'image' && imgSt.cursor) {
						$(document.body).addClass(imgSt.cursor);
					}
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					if (imgSt.cursor) {
						$(document.body).removeClass(imgSt.cursor);
					}
					_window.off('resize' + EVENT_NS);
				});

				_mfpOn('Resize' + ns, mfp.resizeImage);
				if (mfp.isLowIE) {
					_mfpOn('AfterChange', mfp.resizeImage);
				}
			},
			resizeImage: function () {
				var item = mfp.currItem;
				if (!item || !item.img) return;

				if (mfp.st.image.verticalFit) {
					var decr = 0;
					// fix box-sizing in ie7/8
					if (mfp.isLowIE) {
						decr = parseInt(item.img.css('padding-top'), 10) + parseInt(item.img.css('padding-bottom'), 10);
					}
					item.img.css('max-height', mfp.wH - decr);
				}
			},
			_onImageHasSize: function (item) {
				if (item.img) {

					item.hasSize = true;

					if (_imgInterval) {
						clearInterval(_imgInterval);
					}

					item.isCheckingImgSize = false;

					_mfpTrigger('ImageHasSize', item);

					if (item.imgHidden) {
						if (mfp.content) mfp.content.removeClass('mfp-loading');

						item.imgHidden = false;
					}
				}
			},

			/**
    * Function that loops until the image has size to display elements that rely on it asap
    */
			findImageSize: function (item) {

				var counter = 0,
				    img = item.img[0],
				    mfpSetInterval = function (delay) {

					if (_imgInterval) {
						clearInterval(_imgInterval);
					}
					// decelerating interval that checks for size of an image
					_imgInterval = setInterval(function () {
						if (img.naturalWidth > 0) {
							mfp._onImageHasSize(item);
							return;
						}

						if (counter > 200) {
							clearInterval(_imgInterval);
						}

						counter++;
						if (counter === 3) {
							mfpSetInterval(10);
						} else if (counter === 40) {
							mfpSetInterval(50);
						} else if (counter === 100) {
							mfpSetInterval(500);
						}
					}, delay);
				};

				mfpSetInterval(1);
			},

			getImage: function (item, template) {

				var guard = 0,


				// image load complete handler
				onLoadComplete = function () {
					if (item) {
						if (item.img[0].complete) {
							item.img.off('.mfploader');

							if (item === mfp.currItem) {
								mfp._onImageHasSize(item);

								mfp.updateStatus('ready');
							}

							item.hasSize = true;
							item.loaded = true;

							_mfpTrigger('ImageLoadComplete');
						} else {
							// if image complete check fails 200 times (20 sec), we assume that there was an error.
							guard++;
							if (guard < 200) {
								setTimeout(onLoadComplete, 100);
							} else {
								onLoadError();
							}
						}
					}
				},


				// image error handler
				onLoadError = function () {
					if (item) {
						item.img.off('.mfploader');
						if (item === mfp.currItem) {
							mfp._onImageHasSize(item);
							mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
						}

						item.hasSize = true;
						item.loaded = true;
						item.loadError = true;
					}
				},
				    imgSt = mfp.st.image;

				var el = template.find('.mfp-img');
				if (el.length) {
					var img = document.createElement('img');
					img.className = 'mfp-img';
					if (item.el && item.el.find('img').length) {
						img.alt = item.el.find('img').attr('alt');
					}
					item.img = $(img).on('load.mfploader', onLoadComplete).on('error.mfploader', onLoadError);
					img.src = item.src;

					// without clone() "error" event is not firing when IMG is replaced by new IMG
					// TODO: find a way to avoid such cloning
					if (el.is('img')) {
						item.img = item.img.clone();
					}

					img = item.img[0];
					if (img.naturalWidth > 0) {
						item.hasSize = true;
					} else if (!img.width) {
						item.hasSize = false;
					}
				}

				mfp._parseMarkup(template, {
					title: _getTitle(item),
					img_replaceWith: item.img
				}, item);

				mfp.resizeImage();

				if (item.hasSize) {
					if (_imgInterval) clearInterval(_imgInterval);

					if (item.loadError) {
						template.addClass('mfp-loading');
						mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
					} else {
						template.removeClass('mfp-loading');
						mfp.updateStatus('ready');
					}
					return template;
				}

				mfp.updateStatus('loading');
				item.loading = true;

				if (!item.hasSize) {
					item.imgHidden = true;
					template.addClass('mfp-loading');
					mfp.findImageSize(item);
				}

				return template;
			}
		}
	});

	/*>>image*/

	/*>>zoom*/
	var hasMozTransform,
	    getHasMozTransform = function () {
		if (hasMozTransform === undefined) {
			hasMozTransform = document.createElement('p').style.MozTransform !== undefined;
		}
		return hasMozTransform;
	};

	$.magnificPopup.registerModule('zoom', {

		options: {
			enabled: false,
			easing: 'ease-in-out',
			duration: 300,
			opener: function (element) {
				return element.is('img') ? element : element.find('img');
			}
		},

		proto: {

			initZoom: function () {
				var zoomSt = mfp.st.zoom,
				    ns = '.zoom',
				    image;

				if (!zoomSt.enabled || !mfp.supportsTransition) {
					return;
				}

				var duration = zoomSt.duration,
				    getElToAnimate = function (image) {
					var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),
					    transition = 'all ' + zoomSt.duration / 1000 + 's ' + zoomSt.easing,
					    cssObj = {
						position: 'fixed',
						zIndex: 9999,
						left: 0,
						top: 0,
						'-webkit-backface-visibility': 'hidden'
					},
					    t = 'transition';

					cssObj['-webkit-' + t] = cssObj['-moz-' + t] = cssObj['-o-' + t] = cssObj[t] = transition;

					newImg.css(cssObj);
					return newImg;
				},
				    showMainContent = function () {
					mfp.content.css('visibility', 'visible');
				},
				    openTimeout,
				    animatedImg;

				_mfpOn('BuildControls' + ns, function () {
					if (mfp._allowZoom()) {

						clearTimeout(openTimeout);
						mfp.content.css('visibility', 'hidden');

						// Basically, all code below does is clones existing image, puts in on top of the current one and animated it

						image = mfp._getItemToZoom();

						if (!image) {
							showMainContent();
							return;
						}

						animatedImg = getElToAnimate(image);

						animatedImg.css(mfp._getOffset());

						mfp.wrap.append(animatedImg);

						openTimeout = setTimeout(function () {
							animatedImg.css(mfp._getOffset(true));
							openTimeout = setTimeout(function () {

								showMainContent();

								setTimeout(function () {
									animatedImg.remove();
									image = animatedImg = null;
									_mfpTrigger('ZoomAnimationEnded');
								}, 16); // avoid blink when switching images
							}, duration); // this timeout equals animation duration
						}, 16); // by adding this timeout we avoid short glitch at the beginning of animation


						// Lots of timeouts...
					}
				});
				_mfpOn(BEFORE_CLOSE_EVENT + ns, function () {
					if (mfp._allowZoom()) {

						clearTimeout(openTimeout);

						mfp.st.removalDelay = duration;

						if (!image) {
							image = mfp._getItemToZoom();
							if (!image) {
								return;
							}
							animatedImg = getElToAnimate(image);
						}

						animatedImg.css(mfp._getOffset(true));
						mfp.wrap.append(animatedImg);
						mfp.content.css('visibility', 'hidden');

						setTimeout(function () {
							animatedImg.css(mfp._getOffset());
						}, 16);
					}
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					if (mfp._allowZoom()) {
						showMainContent();
						if (animatedImg) {
							animatedImg.remove();
						}
						image = null;
					}
				});
			},

			_allowZoom: function () {
				return mfp.currItem.type === 'image';
			},

			_getItemToZoom: function () {
				if (mfp.currItem.hasSize) {
					return mfp.currItem.img;
				} else {
					return false;
				}
			},

			// Get element postion relative to viewport
			_getOffset: function (isLarge) {
				var el;
				if (isLarge) {
					el = mfp.currItem.img;
				} else {
					el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
				}

				var offset = el.offset();
				var paddingTop = parseInt(el.css('padding-top'), 10);
				var paddingBottom = parseInt(el.css('padding-bottom'), 10);
				offset.top -= $(window).scrollTop() - paddingTop;

				/*
    	Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.
    	 */
				var obj = {
					width: el.width(),
					// fix Zepto height+padding issue
					height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
				};

				// I hate to do this, but there is no another option
				if (getHasMozTransform()) {
					obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';
				} else {
					obj.left = offset.left;
					obj.top = offset.top;
				}
				return obj;
			}

		}
	});

	/*>>zoom*/

	/*>>iframe*/

	var IFRAME_NS = 'iframe',
	    _emptyPage = '//about:blank',
	    _fixIframeBugs = function (isShowing) {
		if (mfp.currTemplate[IFRAME_NS]) {
			var el = mfp.currTemplate[IFRAME_NS].find('iframe');
			if (el.length) {
				// reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
				if (!isShowing) {
					el[0].src = _emptyPage;
				}

				// IE8 black screen bug fix
				if (mfp.isIE8) {
					el.css('display', isShowing ? 'block' : 'none');
				}
			}
		}
	};

	$.magnificPopup.registerModule(IFRAME_NS, {

		options: {
			markup: '<div class="mfp-iframe-scaler">' + '<div class="mfp-close"></div>' + '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>' + '</div>',

			srcAction: 'iframe_src',

			// we don't care and support only one default type of URL by default
			patterns: {
				youtube: {
					index: 'youtube.com',
					id: 'v=',
					src: '//www.youtube.com/embed/%id%?autoplay=1'
				},
				vimeo: {
					index: 'vimeo.com/',
					id: '/',
					src: '//player.vimeo.com/video/%id%?autoplay=1'
				},
				gmaps: {
					index: '//maps.google.',
					src: '%id%&output=embed'
				}
			}
		},

		proto: {
			initIframe: function () {
				mfp.types.push(IFRAME_NS);

				_mfpOn('BeforeChange', function (e, prevType, newType) {
					if (prevType !== newType) {
						if (prevType === IFRAME_NS) {
							_fixIframeBugs(); // iframe if removed
						} else if (newType === IFRAME_NS) {
							_fixIframeBugs(true); // iframe is showing
						}
					} // else {
					// iframe source is switched, don't do anything
					//}
				});

				_mfpOn(CLOSE_EVENT + '.' + IFRAME_NS, function () {
					_fixIframeBugs();
				});
			},

			getIframe: function (item, template) {
				var embedSrc = item.src;
				var iframeSt = mfp.st.iframe;

				$.each(iframeSt.patterns, function () {
					if (embedSrc.indexOf(this.index) > -1) {
						if (this.id) {
							if (typeof this.id === 'string') {
								embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length);
							} else {
								embedSrc = this.id.call(this, embedSrc);
							}
						}
						embedSrc = this.src.replace('%id%', embedSrc);
						return false; // break;
					}
				});

				var dataObj = {};
				if (iframeSt.srcAction) {
					dataObj[iframeSt.srcAction] = embedSrc;
				}
				mfp._parseMarkup(template, dataObj, item);

				mfp.updateStatus('ready');

				return template;
			}
		}
	});

	/*>>iframe*/

	/*>>gallery*/
	/**
  * Get looped index depending on number of slides
  */
	var _getLoopedId = function (index) {
		var numSlides = mfp.items.length;
		if (index > numSlides - 1) {
			return index - numSlides;
		} else if (index < 0) {
			return numSlides + index;
		}
		return index;
	},
	    _replaceCurrTotal = function (text, curr, total) {
		return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
	};

	$.magnificPopup.registerModule('gallery', {

		options: {
			enabled: false,
			arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
			preload: [0, 2],
			navigateByImgClick: true,
			arrows: true,

			tPrev: 'Previous (Left arrow key)',
			tNext: 'Next (Right arrow key)',
			tCounter: '%curr% of %total%'
		},

		proto: {
			initGallery: function () {

				var gSt = mfp.st.gallery,
				    ns = '.mfp-gallery';

				mfp.direction = true; // true - next, false - prev

				if (!gSt || !gSt.enabled) return false;

				_wrapClasses += ' mfp-gallery';

				_mfpOn(OPEN_EVENT + ns, function () {

					if (gSt.navigateByImgClick) {
						mfp.wrap.on('click' + ns, '.mfp-img', function () {
							if (mfp.items.length > 1) {
								mfp.next();
								return false;
							}
						});
					}

					_document.on('keydown' + ns, function (e) {
						if (e.keyCode === 37) {
							mfp.prev();
						} else if (e.keyCode === 39) {
							mfp.next();
						}
					});
				});

				_mfpOn('UpdateStatus' + ns, function (e, data) {
					if (data.text) {
						data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);
					}
				});

				_mfpOn(MARKUP_PARSE_EVENT + ns, function (e, element, values, item) {
					var l = mfp.items.length;
					values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : '';
				});

				_mfpOn('BuildControls' + ns, function () {
					if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
						var markup = gSt.arrowMarkup,
						    arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, 'left')).addClass(PREVENT_CLOSE_CLASS),
						    arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, 'right')).addClass(PREVENT_CLOSE_CLASS);

						arrowLeft.click(function () {
							mfp.prev();
						});
						arrowRight.click(function () {
							mfp.next();
						});

						mfp.container.append(arrowLeft.add(arrowRight));
					}
				});

				_mfpOn(CHANGE_EVENT + ns, function () {
					if (mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);

					mfp._preloadTimeout = setTimeout(function () {
						mfp.preloadNearbyImages();
						mfp._preloadTimeout = null;
					}, 16);
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					_document.off(ns);
					mfp.wrap.off('click' + ns);
					mfp.arrowRight = mfp.arrowLeft = null;
				});
			},
			next: function () {
				mfp.direction = true;
				mfp.index = _getLoopedId(mfp.index + 1);
				mfp.updateItemHTML();
			},
			prev: function () {
				mfp.direction = false;
				mfp.index = _getLoopedId(mfp.index - 1);
				mfp.updateItemHTML();
			},
			goTo: function (newIndex) {
				mfp.direction = newIndex >= mfp.index;
				mfp.index = newIndex;
				mfp.updateItemHTML();
			},
			preloadNearbyImages: function () {
				var p = mfp.st.gallery.preload,
				    preloadBefore = Math.min(p[0], mfp.items.length),
				    preloadAfter = Math.min(p[1], mfp.items.length),
				    i;

				for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
					mfp._preloadItem(mfp.index + i);
				}
				for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
					mfp._preloadItem(mfp.index - i);
				}
			},
			_preloadItem: function (index) {
				index = _getLoopedId(index);

				if (mfp.items[index].preloaded) {
					return;
				}

				var item = mfp.items[index];
				if (!item.parsed) {
					item = mfp.parseEl(index);
				}

				_mfpTrigger('LazyLoad', item);

				if (item.type === 'image') {
					item.img = $('<img class="mfp-img" />').on('load.mfploader', function () {
						item.hasSize = true;
					}).on('error.mfploader', function () {
						item.hasSize = true;
						item.loadError = true;
						_mfpTrigger('LazyLoadError', item);
					}).attr('src', item.src);
				}

				item.preloaded = true;
			}
		}
	});

	/*>>gallery*/

	/*>>retina*/

	var RETINA_NS = 'retina';

	$.magnificPopup.registerModule(RETINA_NS, {
		options: {
			replaceSrc: function (item) {
				return item.src.replace(/\.\w+$/, function (m) {
					return '@2x' + m;
				});
			},
			ratio: 1 // Function or number.  Set to 1 to disable.
		},
		proto: {
			initRetina: function () {
				if (window.devicePixelRatio > 1) {

					var st = mfp.st.retina,
					    ratio = st.ratio;

					ratio = !isNaN(ratio) ? ratio : ratio();

					if (ratio > 1) {
						_mfpOn('ImageHasSize' + '.' + RETINA_NS, function (e, item) {
							item.img.css({
								'max-width': item.img[0].naturalWidth / ratio,
								'width': '100%'
							});
						});
						_mfpOn('ElementParse' + '.' + RETINA_NS, function (e, item) {
							item.src = st.replaceSrc(item, ratio);
						});
					}
				}
			}
		}
	});

	/*>>retina*/
	_checkInstance();
});
;
;/*! PhotoSwipe Default UI - 4.1.1 - 2015-12-24
* http://photoswipe.com
* Copyright (c) 2015 Dmitry Semenov; */
/**
*
* UI on top of main sliding area (caption, arrows, close button, etc.).
* Built just using public methods/properties of PhotoSwipe.
* 
*/
(function (root, factory) {
	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		root.PhotoSwipeUI_Default = factory();
	}
})(this, function () {

	'use strict';

	var PhotoSwipeUI_Default = function (pswp, framework) {

		var ui = this;
		var _overlayUIUpdated = false,
		    _controlsVisible = true,
		    _fullscrenAPI,
		    _controls,
		    _captionContainer,
		    _fakeCaptionContainer,
		    _indexIndicator,
		    _shareButton,
		    _shareModal,
		    _shareModalHidden = true,
		    _initalCloseOnScrollValue,
		    _isIdle,
		    _listen,
		    _loadingIndicator,
		    _loadingIndicatorHidden,
		    _loadingIndicatorTimeout,
		    _galleryHasOneSlide,
		    _options,
		    _defaultUIOptions = {
			barsSize: { top: 44, bottom: 'auto' },
			closeElClasses: ['item', 'caption', 'zoom-wrap', 'ui', 'top-bar'],
			timeToIdle: 4000,
			timeToIdleOutside: 1000,
			loadingIndicatorDelay: 1000, // 2s

			addCaptionHTMLFn: function (item, captionEl /*, isFake */) {
				if (!item.title) {
					captionEl.children[0].innerHTML = '';
					return false;
				}
				captionEl.children[0].innerHTML = item.title;
				return true;
			},

			closeEl: true,
			captionEl: true,
			fullscreenEl: true,
			zoomEl: true,
			shareEl: true,
			counterEl: true,
			arrowEl: true,
			preloaderEl: true,

			tapToClose: false,
			tapToToggleControls: true,

			clickToCloseNonZoomable: true,

			shareButtons: [{ id: 'facebook', label: 'Share on Facebook', url: 'https://www.facebook.com/sharer/sharer.php?u={{url}}' }, { id: 'twitter', label: 'Tweet', url: 'https://twitter.com/intent/tweet?text={{text}}&url={{url}}' }, { id: 'pinterest', label: 'Pin it', url: 'http://www.pinterest.com/pin/create/button/' + '?url={{url}}&media={{image_url}}&description={{text}}' }, { id: 'download', label: 'Download image', url: '{{raw_image_url}}', download: true }],
			getImageURLForShare: function () /* shareButtonData */{
				return pswp.currItem.src || '';
			},
			getPageURLForShare: function () /* shareButtonData */{
				return window.location.href;
			},
			getTextForShare: function () /* shareButtonData */{
				return pswp.currItem.title || '';
			},

			indexIndicatorSep: ' / ',
			fitControlsWidth: 1200

		},
		    _blockControlsTap,
		    _blockControlsTapTimeout;

		var _onControlsTap = function (e) {
			if (_blockControlsTap) {
				return true;
			}

			e = e || window.event;

			if (_options.timeToIdle && _options.mouseUsed && !_isIdle) {
				// reset idle timer
				_onIdleMouseMove();
			}

			var target = e.target || e.srcElement,
			    uiElement,
			    clickedClass = target.getAttribute('class') || '',
			    found;

			for (var i = 0; i < _uiElements.length; i++) {
				uiElement = _uiElements[i];
				if (uiElement.onTap && clickedClass.indexOf('pswp__' + uiElement.name) > -1) {
					uiElement.onTap();
					found = true;
				}
			}

			if (found) {
				if (e.stopPropagation) {
					e.stopPropagation();
				}
				_blockControlsTap = true;

				// Some versions of Android don't prevent ghost click event 
				// when preventDefault() was called on touchstart and/or touchend.
				// 
				// This happens on v4.3, 4.2, 4.1, 
				// older versions strangely work correctly, 
				// but just in case we add delay on all of them)	
				var tapDelay = framework.features.isOldAndroid ? 600 : 30;
				_blockControlsTapTimeout = setTimeout(function () {
					_blockControlsTap = false;
				}, tapDelay);
			}
		},
		    _fitControlsInViewport = function () {
			return !pswp.likelyTouchDevice || _options.mouseUsed || screen.width > _options.fitControlsWidth;
		},
		    _togglePswpClass = function (el, cName, add) {
			framework[(add ? 'add' : 'remove') + 'Class'](el, 'pswp__' + cName);
		},


		// add class when there is just one item in the gallery
		// (by default it hides left/right arrows and 1ofX counter)
		_countNumItems = function () {
			var hasOneSlide = _options.getNumItemsFn() === 1;

			if (hasOneSlide !== _galleryHasOneSlide) {
				_togglePswpClass(_controls, 'ui--one-slide', hasOneSlide);
				_galleryHasOneSlide = hasOneSlide;
			}
		},
		    _toggleShareModalClass = function () {
			_togglePswpClass(_shareModal, 'share-modal--hidden', _shareModalHidden);
		},
		    _toggleShareModal = function () {

			_shareModalHidden = !_shareModalHidden;

			if (!_shareModalHidden) {
				_toggleShareModalClass();
				setTimeout(function () {
					if (!_shareModalHidden) {
						framework.addClass(_shareModal, 'pswp__share-modal--fade-in');
					}
				}, 30);
			} else {
				framework.removeClass(_shareModal, 'pswp__share-modal--fade-in');
				setTimeout(function () {
					if (_shareModalHidden) {
						_toggleShareModalClass();
					}
				}, 300);
			}

			if (!_shareModalHidden) {
				_updateShareURLs();
			}
			return false;
		},
		    _openWindowPopup = function (e) {
			e = e || window.event;
			var target = e.target || e.srcElement;

			pswp.shout('shareLinkClick', e, target);

			if (!target.href) {
				return false;
			}

			if (target.hasAttribute('download')) {
				return true;
			}

			window.open(target.href, 'pswp_share', 'scrollbars=yes,resizable=yes,toolbar=no,' + 'location=yes,width=550,height=420,top=100,left=' + (window.screen ? Math.round(screen.width / 2 - 275) : 100));

			if (!_shareModalHidden) {
				_toggleShareModal();
			}

			return false;
		},
		    _updateShareURLs = function () {
			var shareButtonOut = '',
			    shareButtonData,
			    shareURL,
			    image_url,
			    page_url,
			    share_text;

			for (var i = 0; i < _options.shareButtons.length; i++) {
				shareButtonData = _options.shareButtons[i];

				image_url = _options.getImageURLForShare(shareButtonData);
				page_url = _options.getPageURLForShare(shareButtonData);
				share_text = _options.getTextForShare(shareButtonData);

				shareURL = shareButtonData.url.replace('{{url}}', encodeURIComponent(page_url)).replace('{{image_url}}', encodeURIComponent(image_url)).replace('{{raw_image_url}}', image_url).replace('{{text}}', encodeURIComponent(share_text));

				shareButtonOut += '<a href="' + shareURL + '" target="_blank" ' + 'class="pswp__share--' + shareButtonData.id + '"' + (shareButtonData.download ? 'download' : '') + '>' + shareButtonData.label + '</a>';

				if (_options.parseShareButtonOut) {
					shareButtonOut = _options.parseShareButtonOut(shareButtonData, shareButtonOut);
				}
			}
			_shareModal.children[0].innerHTML = shareButtonOut;
			_shareModal.children[0].onclick = _openWindowPopup;
		},
		    _hasCloseClass = function (target) {
			for (var i = 0; i < _options.closeElClasses.length; i++) {
				if (framework.hasClass(target, 'pswp__' + _options.closeElClasses[i])) {
					return true;
				}
			}
		},
		    _idleInterval,
		    _idleTimer,
		    _idleIncrement = 0,
		    _onIdleMouseMove = function () {
			clearTimeout(_idleTimer);
			_idleIncrement = 0;
			if (_isIdle) {
				ui.setIdle(false);
			}
		},
		    _onMouseLeaveWindow = function (e) {
			e = e ? e : window.event;
			var from = e.relatedTarget || e.toElement;
			if (!from || from.nodeName === 'HTML') {
				clearTimeout(_idleTimer);
				_idleTimer = setTimeout(function () {
					ui.setIdle(true);
				}, _options.timeToIdleOutside);
			}
		},
		    _setupFullscreenAPI = function () {
			if (_options.fullscreenEl && !framework.features.isOldAndroid) {
				if (!_fullscrenAPI) {
					_fullscrenAPI = ui.getFullscreenAPI();
				}
				if (_fullscrenAPI) {
					framework.bind(document, _fullscrenAPI.eventK, ui.updateFullscreen);
					ui.updateFullscreen();
					framework.addClass(pswp.template, 'pswp--supports-fs');
				} else {
					framework.removeClass(pswp.template, 'pswp--supports-fs');
				}
			}
		},
		    _setupLoadingIndicator = function () {
			// Setup loading indicator
			if (_options.preloaderEl) {

				_toggleLoadingIndicator(true);

				_listen('beforeChange', function () {

					clearTimeout(_loadingIndicatorTimeout);

					// display loading indicator with delay
					_loadingIndicatorTimeout = setTimeout(function () {

						if (pswp.currItem && pswp.currItem.loading) {

							if (!pswp.allowProgressiveImg() || pswp.currItem.img && !pswp.currItem.img.naturalWidth) {
								// show preloader if progressive loading is not enabled, 
								// or image width is not defined yet (because of slow connection)
								_toggleLoadingIndicator(false);
								// items-controller.js function allowProgressiveImg
							}
						} else {
							_toggleLoadingIndicator(true); // hide preloader
						}
					}, _options.loadingIndicatorDelay);
				});
				_listen('imageLoadComplete', function (index, item) {
					if (pswp.currItem === item) {
						_toggleLoadingIndicator(true);
					}
				});
			}
		},
		    _toggleLoadingIndicator = function (hide) {
			if (_loadingIndicatorHidden !== hide) {
				_togglePswpClass(_loadingIndicator, 'preloader--active', !hide);
				_loadingIndicatorHidden = hide;
			}
		},
		    _applyNavBarGaps = function (item) {
			var gap = item.vGap;

			if (_fitControlsInViewport()) {

				var bars = _options.barsSize;
				if (_options.captionEl && bars.bottom === 'auto') {
					if (!_fakeCaptionContainer) {
						_fakeCaptionContainer = framework.createEl('pswp__caption pswp__caption--fake');
						_fakeCaptionContainer.appendChild(framework.createEl('pswp__caption__center'));
						_controls.insertBefore(_fakeCaptionContainer, _captionContainer);
						framework.addClass(_controls, 'pswp__ui--fit');
					}
					if (_options.addCaptionHTMLFn(item, _fakeCaptionContainer, true)) {

						var captionSize = _fakeCaptionContainer.clientHeight;
						gap.bottom = parseInt(captionSize, 10) || 44;
					} else {
						gap.bottom = bars.top; // if no caption, set size of bottom gap to size of top
					}
				} else {
					gap.bottom = bars.bottom === 'auto' ? 0 : bars.bottom;
				}

				// height of top bar is static, no need to calculate it
				gap.top = bars.top;
			} else {
				gap.top = gap.bottom = 0;
			}
		},
		    _setupIdle = function () {
			// Hide controls when mouse is used
			if (_options.timeToIdle) {
				_listen('mouseUsed', function () {

					framework.bind(document, 'mousemove', _onIdleMouseMove);
					framework.bind(document, 'mouseout', _onMouseLeaveWindow);

					_idleInterval = setInterval(function () {
						_idleIncrement++;
						if (_idleIncrement === 2) {
							ui.setIdle(true);
						}
					}, _options.timeToIdle / 2);
				});
			}
		},
		    _setupHidingControlsDuringGestures = function () {

			// Hide controls on vertical drag
			_listen('onVerticalDrag', function (now) {
				if (_controlsVisible && now < 0.95) {
					ui.hideControls();
				} else if (!_controlsVisible && now >= 0.95) {
					ui.showControls();
				}
			});

			// Hide controls when pinching to close
			var pinchControlsHidden;
			_listen('onPinchClose', function (now) {
				if (_controlsVisible && now < 0.9) {
					ui.hideControls();
					pinchControlsHidden = true;
				} else if (pinchControlsHidden && !_controlsVisible && now > 0.9) {
					ui.showControls();
				}
			});

			_listen('zoomGestureEnded', function () {
				pinchControlsHidden = false;
				if (pinchControlsHidden && !_controlsVisible) {
					ui.showControls();
				}
			});
		};

		var _uiElements = [{
			name: 'caption',
			option: 'captionEl',
			onInit: function (el) {
				_captionContainer = el;
			}
		}, {
			name: 'share-modal',
			option: 'shareEl',
			onInit: function (el) {
				_shareModal = el;
			},
			onTap: function () {
				_toggleShareModal();
			}
		}, {
			name: 'button--share',
			option: 'shareEl',
			onInit: function (el) {
				_shareButton = el;
			},
			onTap: function () {
				_toggleShareModal();
			}
		}, {
			name: 'button--zoom',
			option: 'zoomEl',
			onTap: pswp.toggleDesktopZoom
		}, {
			name: 'counter',
			option: 'counterEl',
			onInit: function (el) {
				_indexIndicator = el;
			}
		}, {
			name: 'button--close',
			option: 'closeEl',
			onTap: pswp.close
		}, {
			name: 'button--arrow--left',
			option: 'arrowEl',
			onTap: pswp.prev
		}, {
			name: 'button--arrow--right',
			option: 'arrowEl',
			onTap: pswp.next
		}, {
			name: 'button--fs',
			option: 'fullscreenEl',
			onTap: function () {
				if (_fullscrenAPI.isFullscreen()) {
					_fullscrenAPI.exit();
				} else {
					_fullscrenAPI.enter();
				}
			}
		}, {
			name: 'preloader',
			option: 'preloaderEl',
			onInit: function (el) {
				_loadingIndicator = el;
			}
		}];

		var _setupUIElements = function () {
			var item, classAttr, uiElement;

			var loopThroughChildElements = function (sChildren) {
				if (!sChildren) {
					return;
				}

				var l = sChildren.length;
				for (var i = 0; i < l; i++) {
					item = sChildren[i];
					classAttr = item.className;

					for (var a = 0; a < _uiElements.length; a++) {
						uiElement = _uiElements[a];

						if (classAttr.indexOf('pswp__' + uiElement.name) > -1) {

							if (_options[uiElement.option]) {
								// if element is not disabled from options

								framework.removeClass(item, 'pswp__element--disabled');
								if (uiElement.onInit) {
									uiElement.onInit(item);
								}

								//item.style.display = 'block';
							} else {
								framework.addClass(item, 'pswp__element--disabled');
								//item.style.display = 'none';
							}
						}
					}
				}
			};
			loopThroughChildElements(_controls.children);

			var topBar = framework.getChildByClass(_controls, 'pswp__top-bar');
			if (topBar) {
				loopThroughChildElements(topBar.children);
			}
		};

		ui.init = function () {

			// extend options
			framework.extend(pswp.options, _defaultUIOptions, true);

			// create local link for fast access
			_options = pswp.options;

			// find pswp__ui element
			_controls = framework.getChildByClass(pswp.scrollWrap, 'pswp__ui');

			// create local link
			_listen = pswp.listen;

			_setupHidingControlsDuringGestures();

			// update controls when slides change
			_listen('beforeChange', ui.update);

			// toggle zoom on double-tap
			_listen('doubleTap', function (point) {
				var initialZoomLevel = pswp.currItem.initialZoomLevel;
				if (pswp.getZoomLevel() !== initialZoomLevel) {
					pswp.zoomTo(initialZoomLevel, point, 333);
				} else {
					pswp.zoomTo(_options.getDoubleTapZoom(false, pswp.currItem), point, 333);
				}
			});

			// Allow text selection in caption
			_listen('preventDragEvent', function (e, isDown, preventObj) {
				var t = e.target || e.srcElement;
				if (t && t.getAttribute('class') && e.type.indexOf('mouse') > -1 && (t.getAttribute('class').indexOf('__caption') > 0 || /(SMALL|STRONG|EM)/i.test(t.tagName))) {
					preventObj.prevent = false;
				}
			});

			// bind events for UI
			_listen('bindEvents', function () {
				framework.bind(_controls, 'pswpTap click', _onControlsTap);
				framework.bind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);

				if (!pswp.likelyTouchDevice) {
					framework.bind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);
				}
			});

			// unbind events for UI
			_listen('unbindEvents', function () {
				if (!_shareModalHidden) {
					_toggleShareModal();
				}

				if (_idleInterval) {
					clearInterval(_idleInterval);
				}
				framework.unbind(document, 'mouseout', _onMouseLeaveWindow);
				framework.unbind(document, 'mousemove', _onIdleMouseMove);
				framework.unbind(_controls, 'pswpTap click', _onControlsTap);
				framework.unbind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);
				framework.unbind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);

				if (_fullscrenAPI) {
					framework.unbind(document, _fullscrenAPI.eventK, ui.updateFullscreen);
					if (_fullscrenAPI.isFullscreen()) {
						_options.hideAnimationDuration = 0;
						_fullscrenAPI.exit();
					}
					_fullscrenAPI = null;
				}
			});

			// clean up things when gallery is destroyed
			_listen('destroy', function () {
				if (_options.captionEl) {
					if (_fakeCaptionContainer) {
						_controls.removeChild(_fakeCaptionContainer);
					}
					framework.removeClass(_captionContainer, 'pswp__caption--empty');
				}

				if (_shareModal) {
					_shareModal.children[0].onclick = null;
				}
				framework.removeClass(_controls, 'pswp__ui--over-close');
				framework.addClass(_controls, 'pswp__ui--hidden');
				ui.setIdle(false);
			});

			if (!_options.showAnimationDuration) {
				framework.removeClass(_controls, 'pswp__ui--hidden');
			}
			_listen('initialZoomIn', function () {
				if (_options.showAnimationDuration) {
					framework.removeClass(_controls, 'pswp__ui--hidden');
				}
			});
			_listen('initialZoomOut', function () {
				framework.addClass(_controls, 'pswp__ui--hidden');
			});

			_listen('parseVerticalMargin', _applyNavBarGaps);

			_setupUIElements();

			if (_options.shareEl && _shareButton && _shareModal) {
				_shareModalHidden = true;
			}

			_countNumItems();

			_setupIdle();

			_setupFullscreenAPI();

			_setupLoadingIndicator();
		};

		ui.setIdle = function (isIdle) {
			_isIdle = isIdle;
			_togglePswpClass(_controls, 'ui--idle', isIdle);
		};

		ui.update = function () {
			// Don't update UI if it's hidden
			if (_controlsVisible && pswp.currItem) {

				ui.updateIndexIndicator();

				if (_options.captionEl) {
					_options.addCaptionHTMLFn(pswp.currItem, _captionContainer);

					_togglePswpClass(_captionContainer, 'caption--empty', !pswp.currItem.title);
				}

				_overlayUIUpdated = true;
			} else {
				_overlayUIUpdated = false;
			}

			if (!_shareModalHidden) {
				_toggleShareModal();
			}

			_countNumItems();
		};

		ui.updateFullscreen = function (e) {

			if (e) {
				// some browsers change window scroll position during the fullscreen
				// so PhotoSwipe updates it just in case
				setTimeout(function () {
					pswp.setScrollOffset(0, framework.getScrollY());
				}, 50);
			}

			// toogle pswp--fs class on root element
			framework[(_fullscrenAPI.isFullscreen() ? 'add' : 'remove') + 'Class'](pswp.template, 'pswp--fs');
		};

		ui.updateIndexIndicator = function () {
			if (_options.counterEl) {
				_indexIndicator.innerHTML = pswp.getCurrentIndex() + 1 + _options.indexIndicatorSep + _options.getNumItemsFn();
			}
		};

		ui.onGlobalTap = function (e) {
			e = e || window.event;
			var target = e.target || e.srcElement;

			if (_blockControlsTap) {
				return;
			}

			if (e.detail && e.detail.pointerType === 'mouse') {

				// close gallery if clicked outside of the image
				if (_hasCloseClass(target)) {
					pswp.close();
					return;
				}

				if (framework.hasClass(target, 'pswp__img')) {
					if (pswp.getZoomLevel() === 1 && pswp.getZoomLevel() <= pswp.currItem.fitRatio) {
						if (_options.clickToCloseNonZoomable) {
							pswp.close();
						}
					} else {
						pswp.toggleDesktopZoom(e.detail.releasePoint);
					}
				}
			} else {

				// tap anywhere (except buttons) to toggle visibility of controls
				if (_options.tapToToggleControls) {
					if (_controlsVisible) {
						ui.hideControls();
					} else {
						ui.showControls();
					}
				}

				// tap to close gallery
				if (_options.tapToClose && (framework.hasClass(target, 'pswp__img') || _hasCloseClass(target))) {
					pswp.close();
					return;
				}
			}
		};
		ui.onMouseOver = function (e) {
			e = e || window.event;
			var target = e.target || e.srcElement;

			// add class when mouse is over an element that should close the gallery
			_togglePswpClass(_controls, 'ui--over-close', _hasCloseClass(target));
		};

		ui.hideControls = function () {
			framework.addClass(_controls, 'pswp__ui--hidden');
			_controlsVisible = false;
		};

		ui.showControls = function () {
			_controlsVisible = true;
			if (!_overlayUIUpdated) {
				ui.update();
			}
			framework.removeClass(_controls, 'pswp__ui--hidden');
		};

		ui.supportsFullscreen = function () {
			var d = document;
			return !!(d.exitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen || d.msExitFullscreen);
		};

		ui.getFullscreenAPI = function () {
			var dE = document.documentElement,
			    api,
			    tF = 'fullscreenchange';

			if (dE.requestFullscreen) {
				api = {
					enterK: 'requestFullscreen',
					exitK: 'exitFullscreen',
					elementK: 'fullscreenElement',
					eventK: tF
				};
			} else if (dE.mozRequestFullScreen) {
				api = {
					enterK: 'mozRequestFullScreen',
					exitK: 'mozCancelFullScreen',
					elementK: 'mozFullScreenElement',
					eventK: 'moz' + tF
				};
			} else if (dE.webkitRequestFullscreen) {
				api = {
					enterK: 'webkitRequestFullscreen',
					exitK: 'webkitExitFullscreen',
					elementK: 'webkitFullscreenElement',
					eventK: 'webkit' + tF
				};
			} else if (dE.msRequestFullscreen) {
				api = {
					enterK: 'msRequestFullscreen',
					exitK: 'msExitFullscreen',
					elementK: 'msFullscreenElement',
					eventK: 'MSFullscreenChange'
				};
			}

			if (api) {
				api.enter = function () {
					// disable close-on-scroll in fullscreen
					_initalCloseOnScrollValue = _options.closeOnScroll;
					_options.closeOnScroll = false;

					if (this.enterK === 'webkitRequestFullscreen') {
						pswp.template[this.enterK](Element.ALLOW_KEYBOARD_INPUT);
					} else {
						return pswp.template[this.enterK]();
					}
				};
				api.exit = function () {
					_options.closeOnScroll = _initalCloseOnScrollValue;

					return document[this.exitK]();
				};
				api.isFullscreen = function () {
					return document[this.elementK];
				};
			}

			return api;
		};
	};
	return PhotoSwipeUI_Default;
});
;/*! PhotoSwipe - v4.1.1 - 2015-12-24
* http://photoswipe.com
* Copyright (c) 2015 Dmitry Semenov; */
(function (root, factory) {
	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		root.PhotoSwipe = factory();
	}
})(this, function () {

	'use strict';

	var PhotoSwipe = function (template, UiClass, items, options) {

		/*>>framework-bridge*/
		/**
   *
   * Set of generic functions used by gallery.
   * 
   * You're free to modify anything here as long as functionality is kept.
   * 
   */
		var framework = {
			features: null,
			bind: function (target, type, listener, unbind) {
				var methodName = (unbind ? 'remove' : 'add') + 'EventListener';
				type = type.split(' ');
				for (var i = 0; i < type.length; i++) {
					if (type[i]) {
						target[methodName](type[i], listener, false);
					}
				}
			},
			isArray: function (obj) {
				return obj instanceof Array;
			},
			createEl: function (classes, tag) {
				var el = document.createElement(tag || 'div');
				if (classes) {
					el.className = classes;
				}
				return el;
			},
			getScrollY: function () {
				var yOffset = window.pageYOffset;
				return yOffset !== undefined ? yOffset : document.documentElement.scrollTop;
			},
			unbind: function (target, type, listener) {
				framework.bind(target, type, listener, true);
			},
			removeClass: function (el, className) {
				var reg = new RegExp('(\\s|^)' + className + '(\\s|$)');
				el.className = el.className.replace(reg, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
			},
			addClass: function (el, className) {
				if (!framework.hasClass(el, className)) {
					el.className += (el.className ? ' ' : '') + className;
				}
			},
			hasClass: function (el, className) {
				return el.className && new RegExp('(^|\\s)' + className + '(\\s|$)').test(el.className);
			},
			getChildByClass: function (parentEl, childClassName) {
				var node = parentEl.firstChild;
				while (node) {
					if (framework.hasClass(node, childClassName)) {
						return node;
					}
					node = node.nextSibling;
				}
			},
			arraySearch: function (array, value, key) {
				var i = array.length;
				while (i--) {
					if (array[i][key] === value) {
						return i;
					}
				}
				return -1;
			},
			extend: function (o1, o2, preventOverwrite) {
				for (var prop in o2) {
					if (o2.hasOwnProperty(prop)) {
						if (preventOverwrite && o1.hasOwnProperty(prop)) {
							continue;
						}
						o1[prop] = o2[prop];
					}
				}
			},
			easing: {
				sine: {
					out: function (k) {
						return Math.sin(k * (Math.PI / 2));
					},
					inOut: function (k) {
						return -(Math.cos(Math.PI * k) - 1) / 2;
					}
				},
				cubic: {
					out: function (k) {
						return --k * k * k + 1;
					}
				}
				/*
    	elastic: {
    		out: function ( k ) {
    				var s, a = 0.1, p = 0.4;
    			if ( k === 0 ) return 0;
    			if ( k === 1 ) return 1;
    			if ( !a || a < 1 ) { a = 1; s = p / 4; }
    			else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
    			return ( a * Math.pow( 2, - 10 * k) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) + 1 );
    			},
    	},
    	back: {
    		out: function ( k ) {
    			var s = 1.70158;
    			return --k * k * ( ( s + 1 ) * k + s ) + 1;
    		}
    	}
    */
			},

			/**
    * 
    * @return {object}
    * 
    * {
    *  raf : request animation frame function
    *  caf : cancel animation frame function
    *  transfrom : transform property key (with vendor), or null if not supported
    *  oldIE : IE8 or below
    * }
    * 
    */
			detectFeatures: function () {
				if (framework.features) {
					return framework.features;
				}
				var helperEl = framework.createEl(),
				    helperStyle = helperEl.style,
				    vendor = '',
				    features = {};

				// IE8 and below
				features.oldIE = document.all && !document.addEventListener;

				features.touch = 'ontouchstart' in window;

				if (window.requestAnimationFrame) {
					features.raf = window.requestAnimationFrame;
					features.caf = window.cancelAnimationFrame;
				}

				features.pointerEvent = navigator.pointerEnabled || navigator.msPointerEnabled;

				// fix false-positive detection of old Android in new IE
				// (IE11 ua string contains "Android 4.0")

				if (!features.pointerEvent) {

					var ua = navigator.userAgent;

					// Detect if device is iPhone or iPod and if it's older than iOS 8
					// http://stackoverflow.com/a/14223920
					// 
					// This detection is made because of buggy top/bottom toolbars
					// that don't trigger window.resize event.
					// For more info refer to _isFixedPosition variable in core.js

					if (/iP(hone|od)/.test(navigator.platform)) {
						var v = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
						if (v && v.length > 0) {
							v = parseInt(v[1], 10);
							if (v >= 1 && v < 8) {
								features.isOldIOSPhone = true;
							}
						}
					}

					// Detect old Android (before KitKat)
					// due to bugs related to position:fixed
					// http://stackoverflow.com/questions/7184573/pick-up-the-android-version-in-the-browser-by-javascript

					var match = ua.match(/Android\s([0-9\.]*)/);
					var androidversion = match ? match[1] : 0;
					androidversion = parseFloat(androidversion);
					if (androidversion >= 1) {
						if (androidversion < 4.4) {
							features.isOldAndroid = true; // for fixed position bug & performance
						}
						features.androidVersion = androidversion; // for touchend bug
					}
					features.isMobileOpera = /opera mini|opera mobi/i.test(ua);

					// p.s. yes, yes, UA sniffing is bad, propose your solution for above bugs.
				}

				var styleChecks = ['transform', 'perspective', 'animationName'],
				    vendors = ['', 'webkit', 'Moz', 'ms', 'O'],
				    styleCheckItem,
				    styleName;

				for (var i = 0; i < 4; i++) {
					vendor = vendors[i];

					for (var a = 0; a < 3; a++) {
						styleCheckItem = styleChecks[a];

						// uppercase first letter of property name, if vendor is present
						styleName = vendor + (vendor ? styleCheckItem.charAt(0).toUpperCase() + styleCheckItem.slice(1) : styleCheckItem);

						if (!features[styleCheckItem] && styleName in helperStyle) {
							features[styleCheckItem] = styleName;
						}
					}

					if (vendor && !features.raf) {
						vendor = vendor.toLowerCase();
						features.raf = window[vendor + 'RequestAnimationFrame'];
						if (features.raf) {
							features.caf = window[vendor + 'CancelAnimationFrame'] || window[vendor + 'CancelRequestAnimationFrame'];
						}
					}
				}

				if (!features.raf) {
					var lastTime = 0;
					features.raf = function (fn) {
						var currTime = new Date().getTime();
						var timeToCall = Math.max(0, 16 - (currTime - lastTime));
						var id = window.setTimeout(function () {
							fn(currTime + timeToCall);
						}, timeToCall);
						lastTime = currTime + timeToCall;
						return id;
					};
					features.caf = function (id) {
						clearTimeout(id);
					};
				}

				// Detect SVG support
				features.svg = !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;

				framework.features = features;

				return features;
			}
		};

		framework.detectFeatures();

		// Override addEventListener for old versions of IE
		if (framework.features.oldIE) {

			framework.bind = function (target, type, listener, unbind) {

				type = type.split(' ');

				var methodName = (unbind ? 'detach' : 'attach') + 'Event',
				    evName,
				    _handleEv = function () {
					listener.handleEvent.call(listener);
				};

				for (var i = 0; i < type.length; i++) {
					evName = type[i];
					if (evName) {

						if (typeof listener === 'object' && listener.handleEvent) {
							if (!unbind) {
								listener['oldIE' + evName] = _handleEv;
							} else {
								if (!listener['oldIE' + evName]) {
									return false;
								}
							}

							target[methodName]('on' + evName, listener['oldIE' + evName]);
						} else {
							target[methodName]('on' + evName, listener);
						}
					}
				}
			};
		}

		/*>>framework-bridge*/

		/*>>core*/
		//function(template, UiClass, items, options)

		var self = this;

		/**
   * Static vars, don't change unless you know what you're doing.
   */
		var DOUBLE_TAP_RADIUS = 25,
		    NUM_HOLDERS = 3;

		/**
   * Options
   */
		var _options = {
			allowPanToNext: true,
			spacing: 0.12,
			bgOpacity: 1,
			mouseUsed: false,
			loop: true,
			pinchToClose: true,
			closeOnScroll: true,
			closeOnVerticalDrag: true,
			verticalDragRange: 0.75,
			hideAnimationDuration: 333,
			showAnimationDuration: 333,
			showHideOpacity: false,
			focus: true,
			escKey: true,
			arrowKeys: true,
			mainScrollEndFriction: 0.35,
			panEndFriction: 0.35,
			isClickableElement: function (el) {
				return el.tagName === 'A';
			},
			getDoubleTapZoom: function (isMouseClick, item) {
				if (isMouseClick) {
					return 1;
				} else {
					return item.initialZoomLevel < 0.7 ? 1 : 1.33;
				}
			},
			maxSpreadZoom: 1.33,
			modal: true,

			// not fully implemented yet
			scaleMode: 'fit' // TODO
		};
		framework.extend(_options, options);

		/**
   * Private helper variables & functions
   */

		var _getEmptyPoint = function () {
			return { x: 0, y: 0 };
		};

		var _isOpen,
		    _isDestroying,
		    _closedByScroll,
		    _currentItemIndex,
		    _containerStyle,
		    _containerShiftIndex,
		    _currPanDist = _getEmptyPoint(),
		    _startPanOffset = _getEmptyPoint(),
		    _panOffset = _getEmptyPoint(),
		    _upMoveEvents,
		    // drag move, drag end & drag cancel events array
		_downEvents,
		    // drag start events array
		_globalEventHandlers,
		    _viewportSize = {},
		    _currZoomLevel,
		    _startZoomLevel,
		    _translatePrefix,
		    _translateSufix,
		    _updateSizeInterval,
		    _itemsNeedUpdate,
		    _currPositionIndex = 0,
		    _offset = {},
		    _slideSize = _getEmptyPoint(),
		    // size of slide area, including spacing
		_itemHolders,
		    _prevItemIndex,
		    _indexDiff = 0,
		    // difference of indexes since last content update
		_dragStartEvent,
		    _dragMoveEvent,
		    _dragEndEvent,
		    _dragCancelEvent,
		    _transformKey,
		    _pointerEventEnabled,
		    _isFixedPosition = true,
		    _likelyTouchDevice,
		    _modules = [],
		    _requestAF,
		    _cancelAF,
		    _initalClassName,
		    _initalWindowScrollY,
		    _oldIE,
		    _currentWindowScrollY,
		    _features,
		    _windowVisibleSize = {},
		    _renderMaxResolution = false,


		// Registers PhotoSWipe module (History, Controller ...)
		_registerModule = function (name, module) {
			framework.extend(self, module.publicMethods);
			_modules.push(name);
		},
		    _getLoopedId = function (index) {
			var numSlides = _getNumItems();
			if (index > numSlides - 1) {
				return index - numSlides;
			} else if (index < 0) {
				return numSlides + index;
			}
			return index;
		},


		// Micro bind/trigger
		_listeners = {},
		    _listen = function (name, fn) {
			if (!_listeners[name]) {
				_listeners[name] = [];
			}
			return _listeners[name].push(fn);
		},
		    _shout = function (name) {
			var listeners = _listeners[name];

			if (listeners) {
				var args = Array.prototype.slice.call(arguments);
				args.shift();

				for (var i = 0; i < listeners.length; i++) {
					listeners[i].apply(self, args);
				}
			}
		},
		    _getCurrentTime = function () {
			return new Date().getTime();
		},
		    _applyBgOpacity = function (opacity) {
			_bgOpacity = opacity;
			self.bg.style.opacity = opacity * _options.bgOpacity;
		},
		    _applyZoomTransform = function (styleObj, x, y, zoom, item) {
			if (!_renderMaxResolution || item && item !== self.currItem) {
				zoom = zoom / (item ? item.fitRatio : self.currItem.fitRatio);
			}

			styleObj[_transformKey] = _translatePrefix + x + 'px, ' + y + 'px' + _translateSufix + ' scale(' + zoom + ')';
		},
		    _applyCurrentZoomPan = function (allowRenderResolution) {
			if (_currZoomElementStyle) {

				if (allowRenderResolution) {
					if (_currZoomLevel > self.currItem.fitRatio) {
						if (!_renderMaxResolution) {
							_setImageSize(self.currItem, false, true);
							_renderMaxResolution = true;
						}
					} else {
						if (_renderMaxResolution) {
							_setImageSize(self.currItem);
							_renderMaxResolution = false;
						}
					}
				}

				_applyZoomTransform(_currZoomElementStyle, _panOffset.x, _panOffset.y, _currZoomLevel);
			}
		},
		    _applyZoomPanToItem = function (item) {
			if (item.container) {

				_applyZoomTransform(item.container.style, item.initialPosition.x, item.initialPosition.y, item.initialZoomLevel, item);
			}
		},
		    _setTranslateX = function (x, elStyle) {
			elStyle[_transformKey] = _translatePrefix + x + 'px, 0px' + _translateSufix;
		},
		    _moveMainScroll = function (x, dragging) {

			if (!_options.loop && dragging) {
				var newSlideIndexOffset = _currentItemIndex + (_slideSize.x * _currPositionIndex - x) / _slideSize.x,
				    delta = Math.round(x - _mainScrollPos.x);

				if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= _getNumItems() - 1 && delta < 0) {
					x = _mainScrollPos.x + delta * _options.mainScrollEndFriction;
				}
			}

			_mainScrollPos.x = x;
			_setTranslateX(x, _containerStyle);
		},
		    _calculatePanOffset = function (axis, zoomLevel) {
			var m = _midZoomPoint[axis] - _offset[axis];
			return _startPanOffset[axis] + _currPanDist[axis] + m - m * (zoomLevel / _startZoomLevel);
		},
		    _equalizePoints = function (p1, p2) {
			p1.x = p2.x;
			p1.y = p2.y;
			if (p2.id) {
				p1.id = p2.id;
			}
		},
		    _roundPoint = function (p) {
			p.x = Math.round(p.x);
			p.y = Math.round(p.y);
		},
		    _mouseMoveTimeout = null,
		    _onFirstMouseMove = function () {
			// Wait until mouse move event is fired at least twice during 100ms
			// We do this, because some mobile browsers trigger it on touchstart
			if (_mouseMoveTimeout) {
				framework.unbind(document, 'mousemove', _onFirstMouseMove);
				framework.addClass(template, 'pswp--has_mouse');
				_options.mouseUsed = true;
				_shout('mouseUsed');
			}
			_mouseMoveTimeout = setTimeout(function () {
				_mouseMoveTimeout = null;
			}, 100);
		},
		    _bindEvents = function () {
			framework.bind(document, 'keydown', self);

			if (_features.transform) {
				// don't bind click event in browsers that don't support transform (mostly IE8)
				framework.bind(self.scrollWrap, 'click', self);
			}

			if (!_options.mouseUsed) {
				framework.bind(document, 'mousemove', _onFirstMouseMove);
			}

			framework.bind(window, 'resize scroll', self);

			_shout('bindEvents');
		},
		    _unbindEvents = function () {
			framework.unbind(window, 'resize', self);
			framework.unbind(window, 'scroll', _globalEventHandlers.scroll);
			framework.unbind(document, 'keydown', self);
			framework.unbind(document, 'mousemove', _onFirstMouseMove);

			if (_features.transform) {
				framework.unbind(self.scrollWrap, 'click', self);
			}

			if (_isDragging) {
				framework.unbind(window, _upMoveEvents, self);
			}

			_shout('unbindEvents');
		},
		    _calculatePanBounds = function (zoomLevel, update) {
			var bounds = _calculateItemSize(self.currItem, _viewportSize, zoomLevel);
			if (update) {
				_currPanBounds = bounds;
			}
			return bounds;
		},
		    _getMinZoomLevel = function (item) {
			if (!item) {
				item = self.currItem;
			}
			return item.initialZoomLevel;
		},
		    _getMaxZoomLevel = function (item) {
			if (!item) {
				item = self.currItem;
			}
			return item.w > 0 ? _options.maxSpreadZoom : 1;
		},


		// Return true if offset is out of the bounds
		_modifyDestPanOffset = function (axis, destPanBounds, destPanOffset, destZoomLevel) {
			if (destZoomLevel === self.currItem.initialZoomLevel) {
				destPanOffset[axis] = self.currItem.initialPosition[axis];
				return true;
			} else {
				destPanOffset[axis] = _calculatePanOffset(axis, destZoomLevel);

				if (destPanOffset[axis] > destPanBounds.min[axis]) {
					destPanOffset[axis] = destPanBounds.min[axis];
					return true;
				} else if (destPanOffset[axis] < destPanBounds.max[axis]) {
					destPanOffset[axis] = destPanBounds.max[axis];
					return true;
				}
			}
			return false;
		},
		    _setupTransforms = function () {

			if (_transformKey) {
				// setup 3d transforms
				var allow3dTransform = _features.perspective && !_likelyTouchDevice;
				_translatePrefix = 'translate' + (allow3dTransform ? '3d(' : '(');
				_translateSufix = _features.perspective ? ', 0px)' : ')';
				return;
			}

			// Override zoom/pan/move functions in case old browser is used (most likely IE)
			// (so they use left/top/width/height, instead of CSS transform)

			_transformKey = 'left';
			framework.addClass(template, 'pswp--ie');

			_setTranslateX = function (x, elStyle) {
				elStyle.left = x + 'px';
			};
			_applyZoomPanToItem = function (item) {

				var zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio,
				    s = item.container.style,
				    w = zoomRatio * item.w,
				    h = zoomRatio * item.h;

				s.width = w + 'px';
				s.height = h + 'px';
				s.left = item.initialPosition.x + 'px';
				s.top = item.initialPosition.y + 'px';
			};
			_applyCurrentZoomPan = function () {
				if (_currZoomElementStyle) {

					var s = _currZoomElementStyle,
					    item = self.currItem,
					    zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio,
					    w = zoomRatio * item.w,
					    h = zoomRatio * item.h;

					s.width = w + 'px';
					s.height = h + 'px';

					s.left = _panOffset.x + 'px';
					s.top = _panOffset.y + 'px';
				}
			};
		},
		    _onKeyDown = function (e) {
			var keydownAction = '';
			if (_options.escKey && e.keyCode === 27) {
				keydownAction = 'close';
			} else if (_options.arrowKeys) {
				if (e.keyCode === 37) {
					keydownAction = 'prev';
				} else if (e.keyCode === 39) {
					keydownAction = 'next';
				}
			}

			if (keydownAction) {
				// don't do anything if special key pressed to prevent from overriding default browser actions
				// e.g. in Chrome on Mac cmd+arrow-left returns to previous page
				if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey) {
					if (e.preventDefault) {
						e.preventDefault();
					} else {
						e.returnValue = false;
					}
					self[keydownAction]();
				}
			}
		},
		    _onGlobalClick = function (e) {
			if (!e) {
				return;
			}

			// don't allow click event to pass through when triggering after drag or some other gesture
			if (_moved || _zoomStarted || _mainScrollAnimating || _verticalDragInitiated) {
				e.preventDefault();
				e.stopPropagation();
			}
		},
		    _updatePageScrollOffset = function () {
			self.setScrollOffset(0, framework.getScrollY());
		};

		// Micro animation engine
		var _animations = {},
		    _numAnimations = 0,
		    _stopAnimation = function (name) {
			if (_animations[name]) {
				if (_animations[name].raf) {
					_cancelAF(_animations[name].raf);
				}
				_numAnimations--;
				delete _animations[name];
			}
		},
		    _registerStartAnimation = function (name) {
			if (_animations[name]) {
				_stopAnimation(name);
			}
			if (!_animations[name]) {
				_numAnimations++;
				_animations[name] = {};
			}
		},
		    _stopAllAnimations = function () {
			for (var prop in _animations) {

				if (_animations.hasOwnProperty(prop)) {
					_stopAnimation(prop);
				}
			}
		},
		    _animateProp = function (name, b, endProp, d, easingFn, onUpdate, onComplete) {
			var startAnimTime = _getCurrentTime(),
			    t;
			_registerStartAnimation(name);

			var animloop = function () {
				if (_animations[name]) {

					t = _getCurrentTime() - startAnimTime; // time diff
					//b - beginning (start prop)
					//d - anim duration

					if (t >= d) {
						_stopAnimation(name);
						onUpdate(endProp);
						if (onComplete) {
							onComplete();
						}
						return;
					}
					onUpdate((endProp - b) * easingFn(t / d) + b);

					_animations[name].raf = _requestAF(animloop);
				}
			};
			animloop();
		};

		var publicMethods = {

			// make a few local variables and functions public
			shout: _shout,
			listen: _listen,
			viewportSize: _viewportSize,
			options: _options,

			isMainScrollAnimating: function () {
				return _mainScrollAnimating;
			},
			getZoomLevel: function () {
				return _currZoomLevel;
			},
			getCurrentIndex: function () {
				return _currentItemIndex;
			},
			isDragging: function () {
				return _isDragging;
			},
			isZooming: function () {
				return _isZooming;
			},
			setScrollOffset: function (x, y) {
				_offset.x = x;
				_currentWindowScrollY = _offset.y = y;
				_shout('updateScrollOffset', _offset);
			},
			applyZoomPan: function (zoomLevel, panX, panY, allowRenderResolution) {
				_panOffset.x = panX;
				_panOffset.y = panY;
				_currZoomLevel = zoomLevel;
				_applyCurrentZoomPan(allowRenderResolution);
			},

			init: function () {

				if (_isOpen || _isDestroying) {
					return;
				}

				var i;

				self.framework = framework; // basic functionality
				self.template = template; // root DOM element of PhotoSwipe
				self.bg = framework.getChildByClass(template, 'pswp__bg');

				_initalClassName = template.className;
				_isOpen = true;

				_features = framework.detectFeatures();
				_requestAF = _features.raf;
				_cancelAF = _features.caf;
				_transformKey = _features.transform;
				_oldIE = _features.oldIE;

				self.scrollWrap = framework.getChildByClass(template, 'pswp__scroll-wrap');
				self.container = framework.getChildByClass(self.scrollWrap, 'pswp__container');

				_containerStyle = self.container.style; // for fast access

				// Objects that hold slides (there are only 3 in DOM)
				self.itemHolders = _itemHolders = [{ el: self.container.children[0], wrap: 0, index: -1 }, { el: self.container.children[1], wrap: 0, index: -1 }, { el: self.container.children[2], wrap: 0, index: -1 }];

				// hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)
				_itemHolders[0].el.style.display = _itemHolders[2].el.style.display = 'none';

				_setupTransforms();

				// Setup global events
				_globalEventHandlers = {
					resize: self.updateSize,
					scroll: _updatePageScrollOffset,
					keydown: _onKeyDown,
					click: _onGlobalClick
				};

				// disable show/hide effects on old browsers that don't support CSS animations or transforms, 
				// old IOS, Android and Opera mobile. Blackberry seems to work fine, even older models.
				var oldPhone = _features.isOldIOSPhone || _features.isOldAndroid || _features.isMobileOpera;
				if (!_features.animationName || !_features.transform || oldPhone) {
					_options.showAnimationDuration = _options.hideAnimationDuration = 0;
				}

				// init modules
				for (i = 0; i < _modules.length; i++) {
					self['init' + _modules[i]]();
				}

				// init
				if (UiClass) {
					var ui = self.ui = new UiClass(self, framework);
					ui.init();
				}

				_shout('firstUpdate');
				_currentItemIndex = _currentItemIndex || _options.index || 0;
				// validate index
				if (isNaN(_currentItemIndex) || _currentItemIndex < 0 || _currentItemIndex >= _getNumItems()) {
					_currentItemIndex = 0;
				}
				self.currItem = _getItemAt(_currentItemIndex);

				if (_features.isOldIOSPhone || _features.isOldAndroid) {
					_isFixedPosition = false;
				}

				template.setAttribute('aria-hidden', 'false');
				if (_options.modal) {
					if (!_isFixedPosition) {
						template.style.position = 'absolute';
						template.style.top = framework.getScrollY() + 'px';
					} else {
						template.style.position = 'fixed';
					}
				}

				if (_currentWindowScrollY === undefined) {
					_shout('initialLayout');
					_currentWindowScrollY = _initalWindowScrollY = framework.getScrollY();
				}

				// add classes to root element of PhotoSwipe
				var rootClasses = 'pswp--open ';
				if (_options.mainClass) {
					rootClasses += _options.mainClass + ' ';
				}
				if (_options.showHideOpacity) {
					rootClasses += 'pswp--animate_opacity ';
				}
				rootClasses += _likelyTouchDevice ? 'pswp--touch' : 'pswp--notouch';
				rootClasses += _features.animationName ? ' pswp--css_animation' : '';
				rootClasses += _features.svg ? ' pswp--svg' : '';
				framework.addClass(template, rootClasses);

				self.updateSize();

				// initial update
				_containerShiftIndex = -1;
				_indexDiff = null;
				for (i = 0; i < NUM_HOLDERS; i++) {
					_setTranslateX((i + _containerShiftIndex) * _slideSize.x, _itemHolders[i].el.style);
				}

				if (!_oldIE) {
					framework.bind(self.scrollWrap, _downEvents, self); // no dragging for old IE
				}

				_listen('initialZoomInEnd', function () {
					self.setContent(_itemHolders[0], _currentItemIndex - 1);
					self.setContent(_itemHolders[2], _currentItemIndex + 1);

					_itemHolders[0].el.style.display = _itemHolders[2].el.style.display = 'block';

					if (_options.focus) {
						// focus causes layout, 
						// which causes lag during the animation, 
						// that's why we delay it untill the initial zoom transition ends
						template.focus();
					}

					_bindEvents();
				});

				// set content for center slide (first time)
				self.setContent(_itemHolders[1], _currentItemIndex);

				self.updateCurrItem();

				_shout('afterInit');

				if (!_isFixedPosition) {

					// On all versions of iOS lower than 8.0, we check size of viewport every second.
					// 
					// This is done to detect when Safari top & bottom bars appear, 
					// as this action doesn't trigger any events (like resize). 
					// 
					// On iOS8 they fixed this.
					// 
					// 10 Nov 2014: iOS 7 usage ~40%. iOS 8 usage 56%.

					_updateSizeInterval = setInterval(function () {
						if (!_numAnimations && !_isDragging && !_isZooming && _currZoomLevel === self.currItem.initialZoomLevel) {
							self.updateSize();
						}
					}, 1000);
				}

				framework.addClass(template, 'pswp--visible');
			},

			// Close the gallery, then destroy it
			close: function () {
				if (!_isOpen) {
					return;
				}

				_isOpen = false;
				_isDestroying = true;
				_shout('close');
				_unbindEvents();

				_showOrHide(self.currItem, null, true, self.destroy);
			},

			// destroys the gallery (unbinds events, cleans up intervals and timeouts to avoid memory leaks)
			destroy: function () {
				_shout('destroy');

				if (_showOrHideTimeout) {
					clearTimeout(_showOrHideTimeout);
				}

				template.setAttribute('aria-hidden', 'true');
				template.className = _initalClassName;

				if (_updateSizeInterval) {
					clearInterval(_updateSizeInterval);
				}

				framework.unbind(self.scrollWrap, _downEvents, self);

				// we unbind scroll event at the end, as closing animation may depend on it
				framework.unbind(window, 'scroll', self);

				_stopDragUpdateLoop();

				_stopAllAnimations();

				_listeners = null;
			},

			/**
    * Pan image to position
    * @param {Number} x     
    * @param {Number} y     
    * @param {Boolean} force Will ignore bounds if set to true.
    */
			panTo: function (x, y, force) {
				if (!force) {
					if (x > _currPanBounds.min.x) {
						x = _currPanBounds.min.x;
					} else if (x < _currPanBounds.max.x) {
						x = _currPanBounds.max.x;
					}

					if (y > _currPanBounds.min.y) {
						y = _currPanBounds.min.y;
					} else if (y < _currPanBounds.max.y) {
						y = _currPanBounds.max.y;
					}
				}

				_panOffset.x = x;
				_panOffset.y = y;
				_applyCurrentZoomPan();
			},

			handleEvent: function (e) {
				e = e || window.event;
				if (_globalEventHandlers[e.type]) {
					_globalEventHandlers[e.type](e);
				}
			},

			goTo: function (index) {

				index = _getLoopedId(index);

				var diff = index - _currentItemIndex;
				_indexDiff = diff;

				_currentItemIndex = index;
				self.currItem = _getItemAt(_currentItemIndex);
				_currPositionIndex -= diff;

				_moveMainScroll(_slideSize.x * _currPositionIndex);

				_stopAllAnimations();
				_mainScrollAnimating = false;

				self.updateCurrItem();
			},
			next: function () {
				self.goTo(_currentItemIndex + 1);
			},
			prev: function () {
				self.goTo(_currentItemIndex - 1);
			},

			// update current zoom/pan objects
			updateCurrZoomItem: function (emulateSetContent) {
				if (emulateSetContent) {
					_shout('beforeChange', 0);
				}

				// itemHolder[1] is middle (current) item
				if (_itemHolders[1].el.children.length) {
					var zoomElement = _itemHolders[1].el.children[0];
					if (framework.hasClass(zoomElement, 'pswp__zoom-wrap')) {
						_currZoomElementStyle = zoomElement.style;
					} else {
						_currZoomElementStyle = null;
					}
				} else {
					_currZoomElementStyle = null;
				}

				_currPanBounds = self.currItem.bounds;
				_startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;

				_panOffset.x = _currPanBounds.center.x;
				_panOffset.y = _currPanBounds.center.y;

				if (emulateSetContent) {
					_shout('afterChange');
				}
			},

			invalidateCurrItems: function () {
				_itemsNeedUpdate = true;
				for (var i = 0; i < NUM_HOLDERS; i++) {
					if (_itemHolders[i].item) {
						_itemHolders[i].item.needsUpdate = true;
					}
				}
			},

			updateCurrItem: function (beforeAnimation) {

				if (_indexDiff === 0) {
					return;
				}

				var diffAbs = Math.abs(_indexDiff),
				    tempHolder;

				if (beforeAnimation && diffAbs < 2) {
					return;
				}

				self.currItem = _getItemAt(_currentItemIndex);
				_renderMaxResolution = false;

				_shout('beforeChange', _indexDiff);

				if (diffAbs >= NUM_HOLDERS) {
					_containerShiftIndex += _indexDiff + (_indexDiff > 0 ? -NUM_HOLDERS : NUM_HOLDERS);
					diffAbs = NUM_HOLDERS;
				}
				for (var i = 0; i < diffAbs; i++) {
					if (_indexDiff > 0) {
						tempHolder = _itemHolders.shift();
						_itemHolders[NUM_HOLDERS - 1] = tempHolder; // move first to last

						_containerShiftIndex++;
						_setTranslateX((_containerShiftIndex + 2) * _slideSize.x, tempHolder.el.style);
						self.setContent(tempHolder, _currentItemIndex - diffAbs + i + 1 + 1);
					} else {
						tempHolder = _itemHolders.pop();
						_itemHolders.unshift(tempHolder); // move last to first

						_containerShiftIndex--;
						_setTranslateX(_containerShiftIndex * _slideSize.x, tempHolder.el.style);
						self.setContent(tempHolder, _currentItemIndex + diffAbs - i - 1 - 1);
					}
				}

				// reset zoom/pan on previous item
				if (_currZoomElementStyle && Math.abs(_indexDiff) === 1) {

					var prevItem = _getItemAt(_prevItemIndex);
					if (prevItem.initialZoomLevel !== _currZoomLevel) {
						_calculateItemSize(prevItem, _viewportSize);
						_setImageSize(prevItem);
						_applyZoomPanToItem(prevItem);
					}
				}

				// reset diff after update
				_indexDiff = 0;

				self.updateCurrZoomItem();

				_prevItemIndex = _currentItemIndex;

				_shout('afterChange');
			},

			updateSize: function (force) {

				if (!_isFixedPosition && _options.modal) {
					var windowScrollY = framework.getScrollY();
					if (_currentWindowScrollY !== windowScrollY) {
						template.style.top = windowScrollY + 'px';
						_currentWindowScrollY = windowScrollY;
					}
					if (!force && _windowVisibleSize.x === window.innerWidth && _windowVisibleSize.y === window.innerHeight) {
						return;
					}
					_windowVisibleSize.x = window.innerWidth;
					_windowVisibleSize.y = window.innerHeight;

					//template.style.width = _windowVisibleSize.x + 'px';
					template.style.height = _windowVisibleSize.y + 'px';
				}

				_viewportSize.x = self.scrollWrap.clientWidth;
				_viewportSize.y = self.scrollWrap.clientHeight;

				_updatePageScrollOffset();

				_slideSize.x = _viewportSize.x + Math.round(_viewportSize.x * _options.spacing);
				_slideSize.y = _viewportSize.y;

				_moveMainScroll(_slideSize.x * _currPositionIndex);

				_shout('beforeResize'); // even may be used for example to switch image sources


				// don't re-calculate size on inital size update
				if (_containerShiftIndex !== undefined) {

					var holder, item, hIndex;

					for (var i = 0; i < NUM_HOLDERS; i++) {
						holder = _itemHolders[i];
						_setTranslateX((i + _containerShiftIndex) * _slideSize.x, holder.el.style);

						hIndex = _currentItemIndex + i - 1;

						if (_options.loop && _getNumItems() > 2) {
							hIndex = _getLoopedId(hIndex);
						}

						// update zoom level on items and refresh source (if needsUpdate)
						item = _getItemAt(hIndex);

						// re-render gallery item if `needsUpdate`,
						// or doesn't have `bounds` (entirely new slide object)
						if (item && (_itemsNeedUpdate || item.needsUpdate || !item.bounds)) {

							self.cleanSlide(item);

							self.setContent(holder, hIndex);

							// if "center" slide
							if (i === 1) {
								self.currItem = item;
								self.updateCurrZoomItem(true);
							}

							item.needsUpdate = false;
						} else if (holder.index === -1 && hIndex >= 0) {
							// add content first time
							self.setContent(holder, hIndex);
						}
						if (item && item.container) {
							_calculateItemSize(item, _viewportSize);
							_setImageSize(item);
							_applyZoomPanToItem(item);
						}
					}
					_itemsNeedUpdate = false;
				}

				_startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;
				_currPanBounds = self.currItem.bounds;

				if (_currPanBounds) {
					_panOffset.x = _currPanBounds.center.x;
					_panOffset.y = _currPanBounds.center.y;
					_applyCurrentZoomPan(true);
				}

				_shout('resize');
			},

			// Zoom current item to
			zoomTo: function (destZoomLevel, centerPoint, speed, easingFn, updateFn) {
				/*
    	if(destZoomLevel === 'fit') {
    		destZoomLevel = self.currItem.fitRatio;
    	} else if(destZoomLevel === 'fill') {
    		destZoomLevel = self.currItem.fillRatio;
    	}
    */

				if (centerPoint) {
					_startZoomLevel = _currZoomLevel;
					_midZoomPoint.x = Math.abs(centerPoint.x) - _panOffset.x;
					_midZoomPoint.y = Math.abs(centerPoint.y) - _panOffset.y;
					_equalizePoints(_startPanOffset, _panOffset);
				}

				var destPanBounds = _calculatePanBounds(destZoomLevel, false),
				    destPanOffset = {};

				_modifyDestPanOffset('x', destPanBounds, destPanOffset, destZoomLevel);
				_modifyDestPanOffset('y', destPanBounds, destPanOffset, destZoomLevel);

				var initialZoomLevel = _currZoomLevel;
				var initialPanOffset = {
					x: _panOffset.x,
					y: _panOffset.y
				};

				_roundPoint(destPanOffset);

				var onUpdate = function (now) {
					if (now === 1) {
						_currZoomLevel = destZoomLevel;
						_panOffset.x = destPanOffset.x;
						_panOffset.y = destPanOffset.y;
					} else {
						_currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;
						_panOffset.x = (destPanOffset.x - initialPanOffset.x) * now + initialPanOffset.x;
						_panOffset.y = (destPanOffset.y - initialPanOffset.y) * now + initialPanOffset.y;
					}

					if (updateFn) {
						updateFn(now);
					}

					_applyCurrentZoomPan(now === 1);
				};

				if (speed) {
					_animateProp('customZoomTo', 0, 1, speed, easingFn || framework.easing.sine.inOut, onUpdate);
				} else {
					onUpdate(1);
				}
			}

		};

		/*>>core*/

		/*>>gestures*/
		/**
   * Mouse/touch/pointer event handlers.
   * 
   * separated from @core.js for readability
   */

		var MIN_SWIPE_DISTANCE = 30,
		    DIRECTION_CHECK_OFFSET = 10; // amount of pixels to drag to determine direction of swipe

		var _gestureStartTime,
		    _gestureCheckSpeedTime,


		// pool of objects that are used during dragging of zooming
		p = {},
		    // first point
		p2 = {},
		    // second point (for zoom gesture)
		delta = {},
		    _currPoint = {},
		    _startPoint = {},
		    _currPointers = [],
		    _startMainScrollPos = {},
		    _releaseAnimData,
		    _posPoints = [],
		    // array of points during dragging, used to determine type of gesture
		_tempPoint = {},
		    _isZoomingIn,
		    _verticalDragInitiated,
		    _oldAndroidTouchEndTimeout,
		    _currZoomedItemIndex = 0,
		    _centerPoint = _getEmptyPoint(),
		    _lastReleaseTime = 0,
		    _isDragging,
		    // at least one pointer is down
		_isMultitouch,
		    // at least two _pointers are down
		_zoomStarted,
		    // zoom level changed during zoom gesture
		_moved,
		    _dragAnimFrame,
		    _mainScrollShifted,
		    _currentPoints,
		    // array of current touch points
		_isZooming,
		    _currPointsDistance,
		    _startPointsDistance,
		    _currPanBounds,
		    _mainScrollPos = _getEmptyPoint(),
		    _currZoomElementStyle,
		    _mainScrollAnimating,
		    // true, if animation after swipe gesture is running
		_midZoomPoint = _getEmptyPoint(),
		    _currCenterPoint = _getEmptyPoint(),
		    _direction,
		    _isFirstMove,
		    _opacityChanged,
		    _bgOpacity,
		    _wasOverInitialZoom,
		    _isEqualPoints = function (p1, p2) {
			return p1.x === p2.x && p1.y === p2.y;
		},
		    _isNearbyPoints = function (touch0, touch1) {
			return Math.abs(touch0.x - touch1.x) < DOUBLE_TAP_RADIUS && Math.abs(touch0.y - touch1.y) < DOUBLE_TAP_RADIUS;
		},
		    _calculatePointsDistance = function (p1, p2) {
			_tempPoint.x = Math.abs(p1.x - p2.x);
			_tempPoint.y = Math.abs(p1.y - p2.y);
			return Math.sqrt(_tempPoint.x * _tempPoint.x + _tempPoint.y * _tempPoint.y);
		},
		    _stopDragUpdateLoop = function () {
			if (_dragAnimFrame) {
				_cancelAF(_dragAnimFrame);
				_dragAnimFrame = null;
			}
		},
		    _dragUpdateLoop = function () {
			if (_isDragging) {
				_dragAnimFrame = _requestAF(_dragUpdateLoop);
				_renderMovement();
			}
		},
		    _canPan = function () {
			return !(_options.scaleMode === 'fit' && _currZoomLevel === self.currItem.initialZoomLevel);
		},


		// find the closest parent DOM element
		_closestElement = function (el, fn) {
			if (!el || el === document) {
				return false;
			}

			// don't search elements above pswp__scroll-wrap
			if (el.getAttribute('class') && el.getAttribute('class').indexOf('pswp__scroll-wrap') > -1) {
				return false;
			}

			if (fn(el)) {
				return el;
			}

			return _closestElement(el.parentNode, fn);
		},
		    _preventObj = {},
		    _preventDefaultEventBehaviour = function (e, isDown) {
			_preventObj.prevent = !_closestElement(e.target, _options.isClickableElement);

			_shout('preventDragEvent', e, isDown, _preventObj);
			return _preventObj.prevent;
		},
		    _convertTouchToPoint = function (touch, p) {
			p.x = touch.pageX;
			p.y = touch.pageY;
			p.id = touch.identifier;
			return p;
		},
		    _findCenterOfPoints = function (p1, p2, pCenter) {
			pCenter.x = (p1.x + p2.x) * 0.5;
			pCenter.y = (p1.y + p2.y) * 0.5;
		},
		    _pushPosPoint = function (time, x, y) {
			if (time - _gestureCheckSpeedTime > 50) {
				var o = _posPoints.length > 2 ? _posPoints.shift() : {};
				o.x = x;
				o.y = y;
				_posPoints.push(o);
				_gestureCheckSpeedTime = time;
			}
		},
		    _calculateVerticalDragOpacityRatio = function () {
			var yOffset = _panOffset.y - self.currItem.initialPosition.y; // difference between initial and current position
			return 1 - Math.abs(yOffset / (_viewportSize.y / 2));
		},


		// points pool, reused during touch events
		_ePoint1 = {},
		    _ePoint2 = {},
		    _tempPointsArr = [],
		    _tempCounter,
		    _getTouchPoints = function (e) {
			// clean up previous points, without recreating array
			while (_tempPointsArr.length > 0) {
				_tempPointsArr.pop();
			}

			if (!_pointerEventEnabled) {
				if (e.type.indexOf('touch') > -1) {

					if (e.touches && e.touches.length > 0) {
						_tempPointsArr[0] = _convertTouchToPoint(e.touches[0], _ePoint1);
						if (e.touches.length > 1) {
							_tempPointsArr[1] = _convertTouchToPoint(e.touches[1], _ePoint2);
						}
					}
				} else {
					_ePoint1.x = e.pageX;
					_ePoint1.y = e.pageY;
					_ePoint1.id = '';
					_tempPointsArr[0] = _ePoint1; //_ePoint1;
				}
			} else {
				_tempCounter = 0;
				// we can use forEach, as pointer events are supported only in modern browsers
				_currPointers.forEach(function (p) {
					if (_tempCounter === 0) {
						_tempPointsArr[0] = p;
					} else if (_tempCounter === 1) {
						_tempPointsArr[1] = p;
					}
					_tempCounter++;
				});
			}
			return _tempPointsArr;
		},
		    _panOrMoveMainScroll = function (axis, delta) {

			var panFriction,
			    overDiff = 0,
			    newOffset = _panOffset[axis] + delta[axis],
			    startOverDiff,
			    dir = delta[axis] > 0,
			    newMainScrollPosition = _mainScrollPos.x + delta.x,
			    mainScrollDiff = _mainScrollPos.x - _startMainScrollPos.x,
			    newPanPos,
			    newMainScrollPos;

			// calculate fdistance over the bounds and friction
			if (newOffset > _currPanBounds.min[axis] || newOffset < _currPanBounds.max[axis]) {
				panFriction = _options.panEndFriction;
				// Linear increasing of friction, so at 1/4 of viewport it's at max value. 
				// Looks not as nice as was expected. Left for history.
				// panFriction = (1 - (_panOffset[axis] + delta[axis] + panBounds.min[axis]) / (_viewportSize[axis] / 4) );
			} else {
				panFriction = 1;
			}

			newOffset = _panOffset[axis] + delta[axis] * panFriction;

			// move main scroll or start panning
			if (_options.allowPanToNext || _currZoomLevel === self.currItem.initialZoomLevel) {

				if (!_currZoomElementStyle) {

					newMainScrollPos = newMainScrollPosition;
				} else if (_direction === 'h' && axis === 'x' && !_zoomStarted) {

					if (dir) {
						if (newOffset > _currPanBounds.min[axis]) {
							panFriction = _options.panEndFriction;
							overDiff = _currPanBounds.min[axis] - newOffset;
							startOverDiff = _currPanBounds.min[axis] - _startPanOffset[axis];
						}

						// drag right
						if ((startOverDiff <= 0 || mainScrollDiff < 0) && _getNumItems() > 1) {
							newMainScrollPos = newMainScrollPosition;
							if (mainScrollDiff < 0 && newMainScrollPosition > _startMainScrollPos.x) {
								newMainScrollPos = _startMainScrollPos.x;
							}
						} else {
							if (_currPanBounds.min.x !== _currPanBounds.max.x) {
								newPanPos = newOffset;
							}
						}
					} else {

						if (newOffset < _currPanBounds.max[axis]) {
							panFriction = _options.panEndFriction;
							overDiff = newOffset - _currPanBounds.max[axis];
							startOverDiff = _startPanOffset[axis] - _currPanBounds.max[axis];
						}

						if ((startOverDiff <= 0 || mainScrollDiff > 0) && _getNumItems() > 1) {
							newMainScrollPos = newMainScrollPosition;

							if (mainScrollDiff > 0 && newMainScrollPosition < _startMainScrollPos.x) {
								newMainScrollPos = _startMainScrollPos.x;
							}
						} else {
							if (_currPanBounds.min.x !== _currPanBounds.max.x) {
								newPanPos = newOffset;
							}
						}
					}

					//
				}

				if (axis === 'x') {

					if (newMainScrollPos !== undefined) {
						_moveMainScroll(newMainScrollPos, true);
						if (newMainScrollPos === _startMainScrollPos.x) {
							_mainScrollShifted = false;
						} else {
							_mainScrollShifted = true;
						}
					}

					if (_currPanBounds.min.x !== _currPanBounds.max.x) {
						if (newPanPos !== undefined) {
							_panOffset.x = newPanPos;
						} else if (!_mainScrollShifted) {
							_panOffset.x += delta.x * panFriction;
						}
					}

					return newMainScrollPos !== undefined;
				}
			}

			if (!_mainScrollAnimating) {

				if (!_mainScrollShifted) {
					if (_currZoomLevel > self.currItem.fitRatio) {
						_panOffset[axis] += delta[axis] * panFriction;
					}
				}
			}
		},


		// Pointerdown/touchstart/mousedown handler
		_onDragStart = function (e) {

			// Allow dragging only via left mouse button.
			// As this handler is not added in IE8 - we ignore e.which
			// 
			// http://www.quirksmode.org/js/events_properties.html
			// https://developer.mozilla.org/en-US/docs/Web/API/event.button
			if (e.type === 'mousedown' && e.button > 0) {
				return;
			}

			if (_initialZoomRunning) {
				e.preventDefault();
				return;
			}

			if (_oldAndroidTouchEndTimeout && e.type === 'mousedown') {
				return;
			}

			if (_preventDefaultEventBehaviour(e, true)) {
				e.preventDefault();
			}

			_shout('pointerDown');

			if (_pointerEventEnabled) {
				var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');
				if (pointerIndex < 0) {
					pointerIndex = _currPointers.length;
				}
				_currPointers[pointerIndex] = { x: e.pageX, y: e.pageY, id: e.pointerId };
			}

			var startPointsList = _getTouchPoints(e),
			    numPoints = startPointsList.length;

			_currentPoints = null;

			_stopAllAnimations();

			// init drag
			if (!_isDragging || numPoints === 1) {

				_isDragging = _isFirstMove = true;
				framework.bind(window, _upMoveEvents, self);

				_isZoomingIn = _wasOverInitialZoom = _opacityChanged = _verticalDragInitiated = _mainScrollShifted = _moved = _isMultitouch = _zoomStarted = false;

				_direction = null;

				_shout('firstTouchStart', startPointsList);

				_equalizePoints(_startPanOffset, _panOffset);

				_currPanDist.x = _currPanDist.y = 0;
				_equalizePoints(_currPoint, startPointsList[0]);
				_equalizePoints(_startPoint, _currPoint);

				//_equalizePoints(_startMainScrollPos, _mainScrollPos);
				_startMainScrollPos.x = _slideSize.x * _currPositionIndex;

				_posPoints = [{
					x: _currPoint.x,
					y: _currPoint.y
				}];

				_gestureCheckSpeedTime = _gestureStartTime = _getCurrentTime();

				//_mainScrollAnimationEnd(true);
				_calculatePanBounds(_currZoomLevel, true);

				// Start rendering
				_stopDragUpdateLoop();
				_dragUpdateLoop();
			}

			// init zoom
			if (!_isZooming && numPoints > 1 && !_mainScrollAnimating && !_mainScrollShifted) {
				_startZoomLevel = _currZoomLevel;
				_zoomStarted = false; // true if zoom changed at least once

				_isZooming = _isMultitouch = true;
				_currPanDist.y = _currPanDist.x = 0;

				_equalizePoints(_startPanOffset, _panOffset);

				_equalizePoints(p, startPointsList[0]);
				_equalizePoints(p2, startPointsList[1]);

				_findCenterOfPoints(p, p2, _currCenterPoint);

				_midZoomPoint.x = Math.abs(_currCenterPoint.x) - _panOffset.x;
				_midZoomPoint.y = Math.abs(_currCenterPoint.y) - _panOffset.y;
				_currPointsDistance = _startPointsDistance = _calculatePointsDistance(p, p2);
			}
		},


		// Pointermove/touchmove/mousemove handler
		_onDragMove = function (e) {

			e.preventDefault();

			if (_pointerEventEnabled) {
				var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');
				if (pointerIndex > -1) {
					var p = _currPointers[pointerIndex];
					p.x = e.pageX;
					p.y = e.pageY;
				}
			}

			if (_isDragging) {
				var touchesList = _getTouchPoints(e);
				if (!_direction && !_moved && !_isZooming) {

					if (_mainScrollPos.x !== _slideSize.x * _currPositionIndex) {
						// if main scroll position is shifted – direction is always horizontal
						_direction = 'h';
					} else {
						var diff = Math.abs(touchesList[0].x - _currPoint.x) - Math.abs(touchesList[0].y - _currPoint.y);
						// check the direction of movement
						if (Math.abs(diff) >= DIRECTION_CHECK_OFFSET) {
							_direction = diff > 0 ? 'h' : 'v';
							_currentPoints = touchesList;
						}
					}
				} else {
					_currentPoints = touchesList;
				}
			}
		},

		// 
		_renderMovement = function () {

			if (!_currentPoints) {
				return;
			}

			var numPoints = _currentPoints.length;

			if (numPoints === 0) {
				return;
			}

			_equalizePoints(p, _currentPoints[0]);

			delta.x = p.x - _currPoint.x;
			delta.y = p.y - _currPoint.y;

			if (_isZooming && numPoints > 1) {
				// Handle behaviour for more than 1 point

				_currPoint.x = p.x;
				_currPoint.y = p.y;

				// check if one of two points changed
				if (!delta.x && !delta.y && _isEqualPoints(_currentPoints[1], p2)) {
					return;
				}

				_equalizePoints(p2, _currentPoints[1]);

				if (!_zoomStarted) {
					_zoomStarted = true;
					_shout('zoomGestureStarted');
				}

				// Distance between two points
				var pointsDistance = _calculatePointsDistance(p, p2);

				var zoomLevel = _calculateZoomLevel(pointsDistance);

				// slightly over the of initial zoom level
				if (zoomLevel > self.currItem.initialZoomLevel + self.currItem.initialZoomLevel / 15) {
					_wasOverInitialZoom = true;
				}

				// Apply the friction if zoom level is out of the bounds
				var zoomFriction = 1,
				    minZoomLevel = _getMinZoomLevel(),
				    maxZoomLevel = _getMaxZoomLevel();

				if (zoomLevel < minZoomLevel) {

					if (_options.pinchToClose && !_wasOverInitialZoom && _startZoomLevel <= self.currItem.initialZoomLevel) {
						// fade out background if zooming out
						var minusDiff = minZoomLevel - zoomLevel;
						var percent = 1 - minusDiff / (minZoomLevel / 1.2);

						_applyBgOpacity(percent);
						_shout('onPinchClose', percent);
						_opacityChanged = true;
					} else {
						zoomFriction = (minZoomLevel - zoomLevel) / minZoomLevel;
						if (zoomFriction > 1) {
							zoomFriction = 1;
						}
						zoomLevel = minZoomLevel - zoomFriction * (minZoomLevel / 3);
					}
				} else if (zoomLevel > maxZoomLevel) {
					// 1.5 - extra zoom level above the max. E.g. if max is x6, real max 6 + 1.5 = 7.5
					zoomFriction = (zoomLevel - maxZoomLevel) / (minZoomLevel * 6);
					if (zoomFriction > 1) {
						zoomFriction = 1;
					}
					zoomLevel = maxZoomLevel + zoomFriction * minZoomLevel;
				}

				if (zoomFriction < 0) {
					zoomFriction = 0;
				}

				// distance between touch points after friction is applied
				_currPointsDistance = pointsDistance;

				// _centerPoint - The point in the middle of two pointers
				_findCenterOfPoints(p, p2, _centerPoint);

				// paning with two pointers pressed
				_currPanDist.x += _centerPoint.x - _currCenterPoint.x;
				_currPanDist.y += _centerPoint.y - _currCenterPoint.y;
				_equalizePoints(_currCenterPoint, _centerPoint);

				_panOffset.x = _calculatePanOffset('x', zoomLevel);
				_panOffset.y = _calculatePanOffset('y', zoomLevel);

				_isZoomingIn = zoomLevel > _currZoomLevel;
				_currZoomLevel = zoomLevel;
				_applyCurrentZoomPan();
			} else {

				// handle behaviour for one point (dragging or panning)

				if (!_direction) {
					return;
				}

				if (_isFirstMove) {
					_isFirstMove = false;

					// subtract drag distance that was used during the detection direction  

					if (Math.abs(delta.x) >= DIRECTION_CHECK_OFFSET) {
						delta.x -= _currentPoints[0].x - _startPoint.x;
					}

					if (Math.abs(delta.y) >= DIRECTION_CHECK_OFFSET) {
						delta.y -= _currentPoints[0].y - _startPoint.y;
					}
				}

				_currPoint.x = p.x;
				_currPoint.y = p.y;

				// do nothing if pointers position hasn't changed
				if (delta.x === 0 && delta.y === 0) {
					return;
				}

				if (_direction === 'v' && _options.closeOnVerticalDrag) {
					if (!_canPan()) {
						_currPanDist.y += delta.y;
						_panOffset.y += delta.y;

						var opacityRatio = _calculateVerticalDragOpacityRatio();

						_verticalDragInitiated = true;
						_shout('onVerticalDrag', opacityRatio);

						_applyBgOpacity(opacityRatio);
						_applyCurrentZoomPan();
						return;
					}
				}

				_pushPosPoint(_getCurrentTime(), p.x, p.y);

				_moved = true;
				_currPanBounds = self.currItem.bounds;

				var mainScrollChanged = _panOrMoveMainScroll('x', delta);
				if (!mainScrollChanged) {
					_panOrMoveMainScroll('y', delta);

					_roundPoint(_panOffset);
					_applyCurrentZoomPan();
				}
			}
		},


		// Pointerup/pointercancel/touchend/touchcancel/mouseup event handler
		_onDragRelease = function (e) {

			if (_features.isOldAndroid) {

				if (_oldAndroidTouchEndTimeout && e.type === 'mouseup') {
					return;
				}

				// on Android (v4.1, 4.2, 4.3 & possibly older) 
				// ghost mousedown/up event isn't preventable via e.preventDefault,
				// which causes fake mousedown event
				// so we block mousedown/up for 600ms
				if (e.type.indexOf('touch') > -1) {
					clearTimeout(_oldAndroidTouchEndTimeout);
					_oldAndroidTouchEndTimeout = setTimeout(function () {
						_oldAndroidTouchEndTimeout = 0;
					}, 600);
				}
			}

			_shout('pointerUp');

			if (_preventDefaultEventBehaviour(e, false)) {
				e.preventDefault();
			}

			var releasePoint;

			if (_pointerEventEnabled) {
				var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');

				if (pointerIndex > -1) {
					releasePoint = _currPointers.splice(pointerIndex, 1)[0];

					if (navigator.pointerEnabled) {
						releasePoint.type = e.pointerType || 'mouse';
					} else {
						var MSPOINTER_TYPES = {
							4: 'mouse', // event.MSPOINTER_TYPE_MOUSE
							2: 'touch', // event.MSPOINTER_TYPE_TOUCH 
							3: 'pen' // event.MSPOINTER_TYPE_PEN
						};
						releasePoint.type = MSPOINTER_TYPES[e.pointerType];

						if (!releasePoint.type) {
							releasePoint.type = e.pointerType || 'mouse';
						}
					}
				}
			}

			var touchList = _getTouchPoints(e),
			    gestureType,
			    numPoints = touchList.length;

			if (e.type === 'mouseup') {
				numPoints = 0;
			}

			// Do nothing if there were 3 touch points or more
			if (numPoints === 2) {
				_currentPoints = null;
				return true;
			}

			// if second pointer released
			if (numPoints === 1) {
				_equalizePoints(_startPoint, touchList[0]);
			}

			// pointer hasn't moved, send "tap release" point
			if (numPoints === 0 && !_direction && !_mainScrollAnimating) {
				if (!releasePoint) {
					if (e.type === 'mouseup') {
						releasePoint = { x: e.pageX, y: e.pageY, type: 'mouse' };
					} else if (e.changedTouches && e.changedTouches[0]) {
						releasePoint = { x: e.changedTouches[0].pageX, y: e.changedTouches[0].pageY, type: 'touch' };
					}
				}

				_shout('touchRelease', e, releasePoint);
			}

			// Difference in time between releasing of two last touch points (zoom gesture)
			var releaseTimeDiff = -1;

			// Gesture completed, no pointers left
			if (numPoints === 0) {
				_isDragging = false;
				framework.unbind(window, _upMoveEvents, self);

				_stopDragUpdateLoop();

				if (_isZooming) {
					// Two points released at the same time
					releaseTimeDiff = 0;
				} else if (_lastReleaseTime !== -1) {
					releaseTimeDiff = _getCurrentTime() - _lastReleaseTime;
				}
			}
			_lastReleaseTime = numPoints === 1 ? _getCurrentTime() : -1;

			if (releaseTimeDiff !== -1 && releaseTimeDiff < 150) {
				gestureType = 'zoom';
			} else {
				gestureType = 'swipe';
			}

			if (_isZooming && numPoints < 2) {
				_isZooming = false;

				// Only second point released
				if (numPoints === 1) {
					gestureType = 'zoomPointerUp';
				}
				_shout('zoomGestureEnded');
			}

			_currentPoints = null;
			if (!_moved && !_zoomStarted && !_mainScrollAnimating && !_verticalDragInitiated) {
				// nothing to animate
				return;
			}

			_stopAllAnimations();

			if (!_releaseAnimData) {
				_releaseAnimData = _initDragReleaseAnimationData();
			}

			_releaseAnimData.calculateSwipeSpeed('x');

			if (_verticalDragInitiated) {

				var opacityRatio = _calculateVerticalDragOpacityRatio();

				if (opacityRatio < _options.verticalDragRange) {
					self.close();
				} else {
					var initalPanY = _panOffset.y,
					    initialBgOpacity = _bgOpacity;

					_animateProp('verticalDrag', 0, 1, 300, framework.easing.cubic.out, function (now) {

						_panOffset.y = (self.currItem.initialPosition.y - initalPanY) * now + initalPanY;

						_applyBgOpacity((1 - initialBgOpacity) * now + initialBgOpacity);
						_applyCurrentZoomPan();
					});

					_shout('onVerticalDrag', 1);
				}

				return;
			}

			// main scroll 
			if ((_mainScrollShifted || _mainScrollAnimating) && numPoints === 0) {
				var itemChanged = _finishSwipeMainScrollGesture(gestureType, _releaseAnimData);
				if (itemChanged) {
					return;
				}
				gestureType = 'zoomPointerUp';
			}

			// prevent zoom/pan animation when main scroll animation runs
			if (_mainScrollAnimating) {
				return;
			}

			// Complete simple zoom gesture (reset zoom level if it's out of the bounds)  
			if (gestureType !== 'swipe') {
				_completeZoomGesture();
				return;
			}

			// Complete pan gesture if main scroll is not shifted, and it's possible to pan current image
			if (!_mainScrollShifted && _currZoomLevel > self.currItem.fitRatio) {
				_completePanGesture(_releaseAnimData);
			}
		},


		// Returns object with data about gesture
		// It's created only once and then reused
		_initDragReleaseAnimationData = function () {
			// temp local vars
			var lastFlickDuration, tempReleasePos;

			// s = this
			var s = {
				lastFlickOffset: {},
				lastFlickDist: {},
				lastFlickSpeed: {},
				slowDownRatio: {},
				slowDownRatioReverse: {},
				speedDecelerationRatio: {},
				speedDecelerationRatioAbs: {},
				distanceOffset: {},
				backAnimDestination: {},
				backAnimStarted: {},
				calculateSwipeSpeed: function (axis) {

					if (_posPoints.length > 1) {
						lastFlickDuration = _getCurrentTime() - _gestureCheckSpeedTime + 50;
						tempReleasePos = _posPoints[_posPoints.length - 2][axis];
					} else {
						lastFlickDuration = _getCurrentTime() - _gestureStartTime; // total gesture duration
						tempReleasePos = _startPoint[axis];
					}
					s.lastFlickOffset[axis] = _currPoint[axis] - tempReleasePos;
					s.lastFlickDist[axis] = Math.abs(s.lastFlickOffset[axis]);
					if (s.lastFlickDist[axis] > 20) {
						s.lastFlickSpeed[axis] = s.lastFlickOffset[axis] / lastFlickDuration;
					} else {
						s.lastFlickSpeed[axis] = 0;
					}
					if (Math.abs(s.lastFlickSpeed[axis]) < 0.1) {
						s.lastFlickSpeed[axis] = 0;
					}

					s.slowDownRatio[axis] = 0.95;
					s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];
					s.speedDecelerationRatio[axis] = 1;
				},

				calculateOverBoundsAnimOffset: function (axis, speed) {
					if (!s.backAnimStarted[axis]) {

						if (_panOffset[axis] > _currPanBounds.min[axis]) {
							s.backAnimDestination[axis] = _currPanBounds.min[axis];
						} else if (_panOffset[axis] < _currPanBounds.max[axis]) {
							s.backAnimDestination[axis] = _currPanBounds.max[axis];
						}

						if (s.backAnimDestination[axis] !== undefined) {
							s.slowDownRatio[axis] = 0.7;
							s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];
							if (s.speedDecelerationRatioAbs[axis] < 0.05) {

								s.lastFlickSpeed[axis] = 0;
								s.backAnimStarted[axis] = true;

								_animateProp('bounceZoomPan' + axis, _panOffset[axis], s.backAnimDestination[axis], speed || 300, framework.easing.sine.out, function (pos) {
									_panOffset[axis] = pos;
									_applyCurrentZoomPan();
								});
							}
						}
					}
				},

				// Reduces the speed by slowDownRatio (per 10ms)
				calculateAnimOffset: function (axis) {
					if (!s.backAnimStarted[axis]) {
						s.speedDecelerationRatio[axis] = s.speedDecelerationRatio[axis] * (s.slowDownRatio[axis] + s.slowDownRatioReverse[axis] - s.slowDownRatioReverse[axis] * s.timeDiff / 10);

						s.speedDecelerationRatioAbs[axis] = Math.abs(s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis]);
						s.distanceOffset[axis] = s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis] * s.timeDiff;
						_panOffset[axis] += s.distanceOffset[axis];
					}
				},

				panAnimLoop: function () {
					if (_animations.zoomPan) {
						_animations.zoomPan.raf = _requestAF(s.panAnimLoop);

						s.now = _getCurrentTime();
						s.timeDiff = s.now - s.lastNow;
						s.lastNow = s.now;

						s.calculateAnimOffset('x');
						s.calculateAnimOffset('y');

						_applyCurrentZoomPan();

						s.calculateOverBoundsAnimOffset('x');
						s.calculateOverBoundsAnimOffset('y');

						if (s.speedDecelerationRatioAbs.x < 0.05 && s.speedDecelerationRatioAbs.y < 0.05) {

							// round pan position
							_panOffset.x = Math.round(_panOffset.x);
							_panOffset.y = Math.round(_panOffset.y);
							_applyCurrentZoomPan();

							_stopAnimation('zoomPan');
							return;
						}
					}
				}
			};
			return s;
		},
		    _completePanGesture = function (animData) {
			// calculate swipe speed for Y axis (paanning)
			animData.calculateSwipeSpeed('y');

			_currPanBounds = self.currItem.bounds;

			animData.backAnimDestination = {};
			animData.backAnimStarted = {};

			// Avoid acceleration animation if speed is too low
			if (Math.abs(animData.lastFlickSpeed.x) <= 0.05 && Math.abs(animData.lastFlickSpeed.y) <= 0.05) {
				animData.speedDecelerationRatioAbs.x = animData.speedDecelerationRatioAbs.y = 0;

				// Run pan drag release animation. E.g. if you drag image and release finger without momentum.
				animData.calculateOverBoundsAnimOffset('x');
				animData.calculateOverBoundsAnimOffset('y');
				return true;
			}

			// Animation loop that controls the acceleration after pan gesture ends
			_registerStartAnimation('zoomPan');
			animData.lastNow = _getCurrentTime();
			animData.panAnimLoop();
		},
		    _finishSwipeMainScrollGesture = function (gestureType, _releaseAnimData) {
			var itemChanged;
			if (!_mainScrollAnimating) {
				_currZoomedItemIndex = _currentItemIndex;
			}

			var itemsDiff;

			if (gestureType === 'swipe') {
				var totalShiftDist = _currPoint.x - _startPoint.x,
				    isFastLastFlick = _releaseAnimData.lastFlickDist.x < 10;

				// if container is shifted for more than MIN_SWIPE_DISTANCE, 
				// and last flick gesture was in right direction
				if (totalShiftDist > MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData.lastFlickOffset.x > 20)) {
					// go to prev item
					itemsDiff = -1;
				} else if (totalShiftDist < -MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData.lastFlickOffset.x < -20)) {
					// go to next item
					itemsDiff = 1;
				}
			}

			var nextCircle;

			if (itemsDiff) {

				_currentItemIndex += itemsDiff;

				if (_currentItemIndex < 0) {
					_currentItemIndex = _options.loop ? _getNumItems() - 1 : 0;
					nextCircle = true;
				} else if (_currentItemIndex >= _getNumItems()) {
					_currentItemIndex = _options.loop ? 0 : _getNumItems() - 1;
					nextCircle = true;
				}

				if (!nextCircle || _options.loop) {
					_indexDiff += itemsDiff;
					_currPositionIndex -= itemsDiff;
					itemChanged = true;
				}
			}

			var animateToX = _slideSize.x * _currPositionIndex;
			var animateToDist = Math.abs(animateToX - _mainScrollPos.x);
			var finishAnimDuration;

			if (!itemChanged && animateToX > _mainScrollPos.x !== _releaseAnimData.lastFlickSpeed.x > 0) {
				// "return to current" duration, e.g. when dragging from slide 0 to -1
				finishAnimDuration = 333;
			} else {
				finishAnimDuration = Math.abs(_releaseAnimData.lastFlickSpeed.x) > 0 ? animateToDist / Math.abs(_releaseAnimData.lastFlickSpeed.x) : 333;

				finishAnimDuration = Math.min(finishAnimDuration, 400);
				finishAnimDuration = Math.max(finishAnimDuration, 250);
			}

			if (_currZoomedItemIndex === _currentItemIndex) {
				itemChanged = false;
			}

			_mainScrollAnimating = true;

			_shout('mainScrollAnimStart');

			_animateProp('mainScroll', _mainScrollPos.x, animateToX, finishAnimDuration, framework.easing.cubic.out, _moveMainScroll, function () {
				_stopAllAnimations();
				_mainScrollAnimating = false;
				_currZoomedItemIndex = -1;

				if (itemChanged || _currZoomedItemIndex !== _currentItemIndex) {
					self.updateCurrItem();
				}

				_shout('mainScrollAnimComplete');
			});

			if (itemChanged) {
				self.updateCurrItem(true);
			}

			return itemChanged;
		},
		    _calculateZoomLevel = function (touchesDistance) {
			return 1 / _startPointsDistance * touchesDistance * _startZoomLevel;
		},


		// Resets zoom if it's out of bounds
		_completeZoomGesture = function () {
			var destZoomLevel = _currZoomLevel,
			    minZoomLevel = _getMinZoomLevel(),
			    maxZoomLevel = _getMaxZoomLevel();

			if (_currZoomLevel < minZoomLevel) {
				destZoomLevel = minZoomLevel;
			} else if (_currZoomLevel > maxZoomLevel) {
				destZoomLevel = maxZoomLevel;
			}

			var destOpacity = 1,
			    onUpdate,
			    initialOpacity = _bgOpacity;

			if (_opacityChanged && !_isZoomingIn && !_wasOverInitialZoom && _currZoomLevel < minZoomLevel) {
				//_closedByScroll = true;
				self.close();
				return true;
			}

			if (_opacityChanged) {
				onUpdate = function (now) {
					_applyBgOpacity((destOpacity - initialOpacity) * now + initialOpacity);
				};
			}

			self.zoomTo(destZoomLevel, 0, 200, framework.easing.cubic.out, onUpdate);
			return true;
		};

		_registerModule('Gestures', {
			publicMethods: {

				initGestures: function () {

					// helper function that builds touch/pointer/mouse events
					var addEventNames = function (pref, down, move, up, cancel) {
						_dragStartEvent = pref + down;
						_dragMoveEvent = pref + move;
						_dragEndEvent = pref + up;
						if (cancel) {
							_dragCancelEvent = pref + cancel;
						} else {
							_dragCancelEvent = '';
						}
					};

					_pointerEventEnabled = _features.pointerEvent;
					if (_pointerEventEnabled && _features.touch) {
						// we don't need touch events, if browser supports pointer events
						_features.touch = false;
					}

					if (_pointerEventEnabled) {
						if (navigator.pointerEnabled) {
							addEventNames('pointer', 'down', 'move', 'up', 'cancel');
						} else {
							// IE10 pointer events are case-sensitive
							addEventNames('MSPointer', 'Down', 'Move', 'Up', 'Cancel');
						}
					} else if (_features.touch) {
						addEventNames('touch', 'start', 'move', 'end', 'cancel');
						_likelyTouchDevice = true;
					} else {
						addEventNames('mouse', 'down', 'move', 'up');
					}

					_upMoveEvents = _dragMoveEvent + ' ' + _dragEndEvent + ' ' + _dragCancelEvent;
					_downEvents = _dragStartEvent;

					if (_pointerEventEnabled && !_likelyTouchDevice) {
						_likelyTouchDevice = navigator.maxTouchPoints > 1 || navigator.msMaxTouchPoints > 1;
					}
					// make variable public
					self.likelyTouchDevice = _likelyTouchDevice;

					_globalEventHandlers[_dragStartEvent] = _onDragStart;
					_globalEventHandlers[_dragMoveEvent] = _onDragMove;
					_globalEventHandlers[_dragEndEvent] = _onDragRelease; // the Kraken

					if (_dragCancelEvent) {
						_globalEventHandlers[_dragCancelEvent] = _globalEventHandlers[_dragEndEvent];
					}

					// Bind mouse events on device with detected hardware touch support, in case it supports multiple types of input.
					if (_features.touch) {
						_downEvents += ' mousedown';
						_upMoveEvents += ' mousemove mouseup';
						_globalEventHandlers.mousedown = _globalEventHandlers[_dragStartEvent];
						_globalEventHandlers.mousemove = _globalEventHandlers[_dragMoveEvent];
						_globalEventHandlers.mouseup = _globalEventHandlers[_dragEndEvent];
					}

					if (!_likelyTouchDevice) {
						// don't allow pan to next slide from zoomed state on Desktop
						_options.allowPanToNext = false;
					}
				}

			}
		});

		/*>>gestures*/

		/*>>show-hide-transition*/
		/**
   * show-hide-transition.js:
   *
   * Manages initial opening or closing transition.
   *
   * If you're not planning to use transition for gallery at all,
   * you may set options hideAnimationDuration and showAnimationDuration to 0,
   * and just delete startAnimation function.
   * 
   */

		var _showOrHideTimeout,
		    _showOrHide = function (item, img, out, completeFn) {

			if (_showOrHideTimeout) {
				clearTimeout(_showOrHideTimeout);
			}

			_initialZoomRunning = true;
			_initialContentSet = true;

			// dimensions of small thumbnail {x:,y:,w:}.
			// Height is optional, as calculated based on large image.
			var thumbBounds;
			if (item.initialLayout) {
				thumbBounds = item.initialLayout;
				item.initialLayout = null;
			} else {
				thumbBounds = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);
			}

			var duration = out ? _options.hideAnimationDuration : _options.showAnimationDuration;

			var onComplete = function () {
				_stopAnimation('initialZoom');
				if (!out) {
					_applyBgOpacity(1);
					if (img) {
						img.style.display = 'block';
					}
					framework.addClass(template, 'pswp--animated-in');
					_shout('initialZoom' + (out ? 'OutEnd' : 'InEnd'));
				} else {
					self.template.removeAttribute('style');
					self.bg.removeAttribute('style');
				}

				if (completeFn) {
					completeFn();
				}
				_initialZoomRunning = false;
			};

			// if bounds aren't provided, just open gallery without animation
			if (!duration || !thumbBounds || thumbBounds.x === undefined) {

				_shout('initialZoom' + (out ? 'Out' : 'In'));

				_currZoomLevel = item.initialZoomLevel;
				_equalizePoints(_panOffset, item.initialPosition);
				_applyCurrentZoomPan();

				template.style.opacity = out ? 0 : 1;
				_applyBgOpacity(1);

				if (duration) {
					setTimeout(function () {
						onComplete();
					}, duration);
				} else {
					onComplete();
				}

				return;
			}

			var startAnimation = function () {
				var closeWithRaf = _closedByScroll,
				    fadeEverything = !self.currItem.src || self.currItem.loadError || _options.showHideOpacity;

				// apply hw-acceleration to image
				if (item.miniImg) {
					item.miniImg.style.webkitBackfaceVisibility = 'hidden';
				}

				if (!out) {
					_currZoomLevel = thumbBounds.w / item.w;
					_panOffset.x = thumbBounds.x;
					_panOffset.y = thumbBounds.y - _initalWindowScrollY;

					self[fadeEverything ? 'template' : 'bg'].style.opacity = 0.001;
					_applyCurrentZoomPan();
				}

				_registerStartAnimation('initialZoom');

				if (out && !closeWithRaf) {
					framework.removeClass(template, 'pswp--animated-in');
				}

				if (fadeEverything) {
					if (out) {
						framework[(closeWithRaf ? 'remove' : 'add') + 'Class'](template, 'pswp--animate_opacity');
					} else {
						setTimeout(function () {
							framework.addClass(template, 'pswp--animate_opacity');
						}, 30);
					}
				}

				_showOrHideTimeout = setTimeout(function () {

					_shout('initialZoom' + (out ? 'Out' : 'In'));

					if (!out) {

						// "in" animation always uses CSS transitions (instead of rAF).
						// CSS transition work faster here, 
						// as developer may also want to animate other things, 
						// like ui on top of sliding area, which can be animated just via CSS

						_currZoomLevel = item.initialZoomLevel;
						_equalizePoints(_panOffset, item.initialPosition);
						_applyCurrentZoomPan();
						_applyBgOpacity(1);

						if (fadeEverything) {
							template.style.opacity = 1;
						} else {
							_applyBgOpacity(1);
						}

						_showOrHideTimeout = setTimeout(onComplete, duration + 20);
					} else {

						// "out" animation uses rAF only when PhotoSwipe is closed by browser scroll, to recalculate position
						var destZoomLevel = thumbBounds.w / item.w,
						    initialPanOffset = {
							x: _panOffset.x,
							y: _panOffset.y
						},
						    initialZoomLevel = _currZoomLevel,
						    initalBgOpacity = _bgOpacity,
						    onUpdate = function (now) {

							if (now === 1) {
								_currZoomLevel = destZoomLevel;
								_panOffset.x = thumbBounds.x;
								_panOffset.y = thumbBounds.y - _currentWindowScrollY;
							} else {
								_currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;
								_panOffset.x = (thumbBounds.x - initialPanOffset.x) * now + initialPanOffset.x;
								_panOffset.y = (thumbBounds.y - _currentWindowScrollY - initialPanOffset.y) * now + initialPanOffset.y;
							}

							_applyCurrentZoomPan();
							if (fadeEverything) {
								template.style.opacity = 1 - now;
							} else {
								_applyBgOpacity(initalBgOpacity - now * initalBgOpacity);
							}
						};

						if (closeWithRaf) {
							_animateProp('initialZoom', 0, 1, duration, framework.easing.cubic.out, onUpdate, onComplete);
						} else {
							onUpdate(1);
							_showOrHideTimeout = setTimeout(onComplete, duration + 20);
						}
					}
				}, out ? 25 : 90); // Main purpose of this delay is to give browser time to paint and
				// create composite layers of PhotoSwipe UI parts (background, controls, caption, arrows).
				// Which avoids lag at the beginning of scale transition.
			};
			startAnimation();
		};

		/*>>show-hide-transition*/

		/*>>items-controller*/
		/**
  *
  * Controller manages gallery items, their dimensions, and their content.
  * 
  */

		var _items,
		    _tempPanAreaSize = {},
		    _imagesToAppendPool = [],
		    _initialContentSet,
		    _initialZoomRunning,
		    _controllerDefaultOptions = {
			index: 0,
			errorMsg: '<div class="pswp__error-msg"><a href="%url%" target="_blank">The image</a> could not be loaded.</div>',
			forceProgressiveLoading: false, // TODO
			preload: [1, 1],
			getNumItemsFn: function () {
				return _items.length;
			}
		};

		var _getItemAt,
		    _getNumItems,
		    _initialIsLoop,
		    _getZeroBounds = function () {
			return {
				center: { x: 0, y: 0 },
				max: { x: 0, y: 0 },
				min: { x: 0, y: 0 }
			};
		},
		    _calculateSingleItemPanBounds = function (item, realPanElementW, realPanElementH) {
			var bounds = item.bounds;

			// position of element when it's centered
			bounds.center.x = Math.round((_tempPanAreaSize.x - realPanElementW) / 2);
			bounds.center.y = Math.round((_tempPanAreaSize.y - realPanElementH) / 2) + item.vGap.top;

			// maximum pan position
			bounds.max.x = realPanElementW > _tempPanAreaSize.x ? Math.round(_tempPanAreaSize.x - realPanElementW) : bounds.center.x;

			bounds.max.y = realPanElementH > _tempPanAreaSize.y ? Math.round(_tempPanAreaSize.y - realPanElementH) + item.vGap.top : bounds.center.y;

			// minimum pan position
			bounds.min.x = realPanElementW > _tempPanAreaSize.x ? 0 : bounds.center.x;
			bounds.min.y = realPanElementH > _tempPanAreaSize.y ? item.vGap.top : bounds.center.y;
		},
		    _calculateItemSize = function (item, viewportSize, zoomLevel) {

			if (item.src && !item.loadError) {
				var isInitial = !zoomLevel;

				if (isInitial) {
					if (!item.vGap) {
						item.vGap = { top: 0, bottom: 0 };
					}
					// allows overriding vertical margin for individual items
					_shout('parseVerticalMargin', item);
				}

				_tempPanAreaSize.x = viewportSize.x;
				_tempPanAreaSize.y = viewportSize.y - item.vGap.top - item.vGap.bottom;

				if (isInitial) {
					var hRatio = _tempPanAreaSize.x / item.w;
					var vRatio = _tempPanAreaSize.y / item.h;

					item.fitRatio = hRatio < vRatio ? hRatio : vRatio;
					//item.fillRatio = hRatio > vRatio ? hRatio : vRatio;

					var scaleMode = _options.scaleMode;

					if (scaleMode === 'orig') {
						zoomLevel = 1;
					} else if (scaleMode === 'fit') {
						zoomLevel = item.fitRatio;
					}

					if (zoomLevel > 1) {
						zoomLevel = 1;
					}

					item.initialZoomLevel = zoomLevel;

					if (!item.bounds) {
						// reuse bounds object
						item.bounds = _getZeroBounds();
					}
				}

				if (!zoomLevel) {
					return;
				}

				_calculateSingleItemPanBounds(item, item.w * zoomLevel, item.h * zoomLevel);

				if (isInitial && zoomLevel === item.initialZoomLevel) {
					item.initialPosition = item.bounds.center;
				}

				return item.bounds;
			} else {
				item.w = item.h = 0;
				item.initialZoomLevel = item.fitRatio = 1;
				item.bounds = _getZeroBounds();
				item.initialPosition = item.bounds.center;

				// if it's not image, we return zero bounds (content is not zoomable)
				return item.bounds;
			}
		},
		    _appendImage = function (index, item, baseDiv, img, preventAnimation, keepPlaceholder) {

			if (item.loadError) {
				return;
			}

			if (img) {

				item.imageAppended = true;
				_setImageSize(item, img, item === self.currItem && _renderMaxResolution);

				baseDiv.appendChild(img);

				if (keepPlaceholder) {
					setTimeout(function () {
						if (item && item.loaded && item.placeholder) {
							item.placeholder.style.display = 'none';
							item.placeholder = null;
						}
					}, 500);
				}
			}
		},
		    _preloadImage = function (item) {
			item.loading = true;
			item.loaded = false;
			var img = item.img = framework.createEl('pswp__img', 'img');
			var onComplete = function () {
				item.loading = false;
				item.loaded = true;

				if (item.loadComplete) {
					item.loadComplete(item);
				} else {
					item.img = null; // no need to store image object
				}
				img.onload = img.onerror = null;
				img = null;
			};
			img.onload = onComplete;
			img.onerror = function () {
				item.loadError = true;
				onComplete();
			};

			img.src = item.src; // + '?a=' + Math.random();

			return img;
		},
		    _checkForError = function (item, cleanUp) {
			if (item.src && item.loadError && item.container) {

				if (cleanUp) {
					item.container.innerHTML = '';
				}

				item.container.innerHTML = _options.errorMsg.replace('%url%', item.src);
				return true;
			}
		},
		    _setImageSize = function (item, img, maxRes) {
			if (!item.src) {
				return;
			}

			if (!img) {
				img = item.container.lastChild;
			}

			var w = maxRes ? item.w : Math.round(item.w * item.fitRatio),
			    h = maxRes ? item.h : Math.round(item.h * item.fitRatio);

			if (item.placeholder && !item.loaded) {
				item.placeholder.style.width = w + 'px';
				item.placeholder.style.height = h + 'px';
			}

			img.style.width = w + 'px';
			img.style.height = h + 'px';
		},
		    _appendImagesPool = function () {

			if (_imagesToAppendPool.length) {
				var poolItem;

				for (var i = 0; i < _imagesToAppendPool.length; i++) {
					poolItem = _imagesToAppendPool[i];
					if (poolItem.holder.index === poolItem.index) {
						_appendImage(poolItem.index, poolItem.item, poolItem.baseDiv, poolItem.img, false, poolItem.clearPlaceholder);
					}
				}
				_imagesToAppendPool = [];
			}
		};

		_registerModule('Controller', {

			publicMethods: {

				lazyLoadItem: function (index) {
					index = _getLoopedId(index);
					var item = _getItemAt(index);

					if (!item || (item.loaded || item.loading) && !_itemsNeedUpdate) {
						return;
					}

					_shout('gettingData', index, item);

					if (!item.src) {
						return;
					}

					_preloadImage(item);
				},
				initController: function () {
					framework.extend(_options, _controllerDefaultOptions, true);
					self.items = _items = items;
					_getItemAt = self.getItemAt;
					_getNumItems = _options.getNumItemsFn; //self.getNumItems;


					_initialIsLoop = _options.loop;
					if (_getNumItems() < 3) {
						_options.loop = false; // disable loop if less then 3 items
					}

					_listen('beforeChange', function (diff) {

						var p = _options.preload,
						    isNext = diff === null ? true : diff >= 0,
						    preloadBefore = Math.min(p[0], _getNumItems()),
						    preloadAfter = Math.min(p[1], _getNumItems()),
						    i;

						for (i = 1; i <= (isNext ? preloadAfter : preloadBefore); i++) {
							self.lazyLoadItem(_currentItemIndex + i);
						}
						for (i = 1; i <= (isNext ? preloadBefore : preloadAfter); i++) {
							self.lazyLoadItem(_currentItemIndex - i);
						}
					});

					_listen('initialLayout', function () {
						self.currItem.initialLayout = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);
					});

					_listen('mainScrollAnimComplete', _appendImagesPool);
					_listen('initialZoomInEnd', _appendImagesPool);

					_listen('destroy', function () {
						var item;
						for (var i = 0; i < _items.length; i++) {
							item = _items[i];
							// remove reference to DOM elements, for GC
							if (item.container) {
								item.container = null;
							}
							if (item.placeholder) {
								item.placeholder = null;
							}
							if (item.img) {
								item.img = null;
							}
							if (item.preloader) {
								item.preloader = null;
							}
							if (item.loadError) {
								item.loaded = item.loadError = false;
							}
						}
						_imagesToAppendPool = null;
					});
				},

				getItemAt: function (index) {
					if (index >= 0) {
						return _items[index] !== undefined ? _items[index] : false;
					}
					return false;
				},

				allowProgressiveImg: function () {
					// 1. Progressive image loading isn't working on webkit/blink 
					//    when hw-acceleration (e.g. translateZ) is applied to IMG element.
					//    That's why in PhotoSwipe parent element gets zoom transform, not image itself.
					//    
					// 2. Progressive image loading sometimes blinks in webkit/blink when applying animation to parent element.
					//    That's why it's disabled on touch devices (mainly because of swipe transition)
					//    
					// 3. Progressive image loading sometimes doesn't work in IE (up to 11).

					// Don't allow progressive loading on non-large touch devices
					return _options.forceProgressiveLoading || !_likelyTouchDevice || _options.mouseUsed || screen.width > 1200;
					// 1200 - to eliminate touch devices with large screen (like Chromebook Pixel)
				},

				setContent: function (holder, index) {

					if (_options.loop) {
						index = _getLoopedId(index);
					}

					var prevItem = self.getItemAt(holder.index);
					if (prevItem) {
						prevItem.container = null;
					}

					var item = self.getItemAt(index),
					    img;

					if (!item) {
						holder.el.innerHTML = '';
						return;
					}

					// allow to override data
					_shout('gettingData', index, item);

					holder.index = index;
					holder.item = item;

					// base container DIV is created only once for each of 3 holders
					var baseDiv = item.container = framework.createEl('pswp__zoom-wrap');

					if (!item.src && item.html) {
						if (item.html.tagName) {
							baseDiv.appendChild(item.html);
						} else {
							baseDiv.innerHTML = item.html;
						}
					}

					_checkForError(item);

					_calculateItemSize(item, _viewportSize);

					if (item.src && !item.loadError && !item.loaded) {

						item.loadComplete = function (item) {

							// gallery closed before image finished loading
							if (!_isOpen) {
								return;
							}

							// check if holder hasn't changed while image was loading
							if (holder && holder.index === index) {
								if (_checkForError(item, true)) {
									item.loadComplete = item.img = null;
									_calculateItemSize(item, _viewportSize);
									_applyZoomPanToItem(item);

									if (holder.index === _currentItemIndex) {
										// recalculate dimensions
										self.updateCurrZoomItem();
									}
									return;
								}
								if (!item.imageAppended) {
									if (_features.transform && (_mainScrollAnimating || _initialZoomRunning)) {
										_imagesToAppendPool.push({
											item: item,
											baseDiv: baseDiv,
											img: item.img,
											index: index,
											holder: holder,
											clearPlaceholder: true
										});
									} else {
										_appendImage(index, item, baseDiv, item.img, _mainScrollAnimating || _initialZoomRunning, true);
									}
								} else {
									// remove preloader & mini-img
									if (!_initialZoomRunning && item.placeholder) {
										item.placeholder.style.display = 'none';
										item.placeholder = null;
									}
								}
							}

							item.loadComplete = null;
							item.img = null; // no need to store image element after it's added

							_shout('imageLoadComplete', index, item);
						};

						if (framework.features.transform) {

							var placeholderClassName = 'pswp__img pswp__img--placeholder';
							placeholderClassName += item.msrc ? '' : ' pswp__img--placeholder--blank';

							var placeholder = framework.createEl(placeholderClassName, item.msrc ? 'img' : '');
							if (item.msrc) {
								placeholder.src = item.msrc;
							}

							_setImageSize(item, placeholder);

							baseDiv.appendChild(placeholder);
							item.placeholder = placeholder;
						}

						if (!item.loading) {
							_preloadImage(item);
						}

						if (self.allowProgressiveImg()) {
							// just append image
							if (!_initialContentSet && _features.transform) {
								_imagesToAppendPool.push({
									item: item,
									baseDiv: baseDiv,
									img: item.img,
									index: index,
									holder: holder
								});
							} else {
								_appendImage(index, item, baseDiv, item.img, true, true);
							}
						}
					} else if (item.src && !item.loadError) {
						// image object is created every time, due to bugs of image loading & delay when switching images
						img = framework.createEl('pswp__img', 'img');
						img.style.opacity = 1;
						img.src = item.src;
						_setImageSize(item, img);
						_appendImage(index, item, baseDiv, img, true);
					}

					if (!_initialContentSet && index === _currentItemIndex) {
						_currZoomElementStyle = baseDiv.style;
						_showOrHide(item, img || item.img);
					} else {
						_applyZoomPanToItem(item);
					}

					holder.el.innerHTML = '';
					holder.el.appendChild(baseDiv);
				},

				cleanSlide: function (item) {
					if (item.img) {
						item.img.onload = item.img.onerror = null;
					}
					item.loaded = item.loading = item.img = item.imageAppended = false;
				}

			}
		});

		/*>>items-controller*/

		/*>>tap*/
		/**
   * tap.js:
   *
   * Displatches tap and double-tap events.
   * 
   */

		var tapTimer,
		    tapReleasePoint = {},
		    _dispatchTapEvent = function (origEvent, releasePoint, pointerType) {
			var e = document.createEvent('CustomEvent'),
			    eDetail = {
				origEvent: origEvent,
				target: origEvent.target,
				releasePoint: releasePoint,
				pointerType: pointerType || 'touch'
			};

			e.initCustomEvent('pswpTap', true, true, eDetail);
			origEvent.target.dispatchEvent(e);
		};

		_registerModule('Tap', {
			publicMethods: {
				initTap: function () {
					_listen('firstTouchStart', self.onTapStart);
					_listen('touchRelease', self.onTapRelease);
					_listen('destroy', function () {
						tapReleasePoint = {};
						tapTimer = null;
					});
				},
				onTapStart: function (touchList) {
					if (touchList.length > 1) {
						clearTimeout(tapTimer);
						tapTimer = null;
					}
				},
				onTapRelease: function (e, releasePoint) {
					if (!releasePoint) {
						return;
					}

					if (!_moved && !_isMultitouch && !_numAnimations) {
						var p0 = releasePoint;
						if (tapTimer) {
							clearTimeout(tapTimer);
							tapTimer = null;

							// Check if taped on the same place
							if (_isNearbyPoints(p0, tapReleasePoint)) {
								_shout('doubleTap', p0);
								return;
							}
						}

						if (releasePoint.type === 'mouse') {
							_dispatchTapEvent(e, releasePoint, 'mouse');
							return;
						}

						var clickedTagName = e.target.tagName.toUpperCase();
						// avoid double tap delay on buttons and elements that have class pswp__single-tap
						if (clickedTagName === 'BUTTON' || framework.hasClass(e.target, 'pswp__single-tap')) {
							_dispatchTapEvent(e, releasePoint);
							return;
						}

						_equalizePoints(tapReleasePoint, p0);

						tapTimer = setTimeout(function () {
							_dispatchTapEvent(e, releasePoint);
							tapTimer = null;
						}, 300);
					}
				}
			}
		});

		/*>>tap*/

		/*>>desktop-zoom*/
		/**
   *
   * desktop-zoom.js:
   *
   * - Binds mousewheel event for paning zoomed image.
   * - Manages "dragging", "zoomed-in", "zoom-out" classes.
   *   (which are used for cursors and zoom icon)
   * - Adds toggleDesktopZoom function.
   * 
   */

		var _wheelDelta;

		_registerModule('DesktopZoom', {

			publicMethods: {

				initDesktopZoom: function () {

					if (_oldIE) {
						// no zoom for old IE (<=8)
						return;
					}

					if (_likelyTouchDevice) {
						// if detected hardware touch support, we wait until mouse is used,
						// and only then apply desktop-zoom features
						_listen('mouseUsed', function () {
							self.setupDesktopZoom();
						});
					} else {
						self.setupDesktopZoom(true);
					}
				},

				setupDesktopZoom: function (onInit) {

					_wheelDelta = {};

					var events = 'wheel mousewheel DOMMouseScroll';

					_listen('bindEvents', function () {
						framework.bind(template, events, self.handleMouseWheel);
					});

					_listen('unbindEvents', function () {
						if (_wheelDelta) {
							framework.unbind(template, events, self.handleMouseWheel);
						}
					});

					self.mouseZoomedIn = false;

					var hasDraggingClass,
					    updateZoomable = function () {
						if (self.mouseZoomedIn) {
							framework.removeClass(template, 'pswp--zoomed-in');
							self.mouseZoomedIn = false;
						}
						if (_currZoomLevel < 1) {
							framework.addClass(template, 'pswp--zoom-allowed');
						} else {
							framework.removeClass(template, 'pswp--zoom-allowed');
						}
						removeDraggingClass();
					},
					    removeDraggingClass = function () {
						if (hasDraggingClass) {
							framework.removeClass(template, 'pswp--dragging');
							hasDraggingClass = false;
						}
					};

					_listen('resize', updateZoomable);
					_listen('afterChange', updateZoomable);
					_listen('pointerDown', function () {
						if (self.mouseZoomedIn) {
							hasDraggingClass = true;
							framework.addClass(template, 'pswp--dragging');
						}
					});
					_listen('pointerUp', removeDraggingClass);

					if (!onInit) {
						updateZoomable();
					}
				},

				handleMouseWheel: function (e) {

					if (_currZoomLevel <= self.currItem.fitRatio) {
						if (_options.modal) {

							if (!_options.closeOnScroll || _numAnimations || _isDragging) {
								e.preventDefault();
							} else if (_transformKey && Math.abs(e.deltaY) > 2) {
								// close PhotoSwipe
								// if browser supports transforms & scroll changed enough
								_closedByScroll = true;
								self.close();
							}
						}
						return true;
					}

					// allow just one event to fire
					e.stopPropagation();

					// https://developer.mozilla.org/en-US/docs/Web/Events/wheel
					_wheelDelta.x = 0;

					if ('deltaX' in e) {
						if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {
								// 18 - average line height
								_wheelDelta.x = e.deltaX * 18;
								_wheelDelta.y = e.deltaY * 18;
							} else {
							_wheelDelta.x = e.deltaX;
							_wheelDelta.y = e.deltaY;
						}
					} else if ('wheelDelta' in e) {
						if (e.wheelDeltaX) {
							_wheelDelta.x = -0.16 * e.wheelDeltaX;
						}
						if (e.wheelDeltaY) {
							_wheelDelta.y = -0.16 * e.wheelDeltaY;
						} else {
							_wheelDelta.y = -0.16 * e.wheelDelta;
						}
					} else if ('detail' in e) {
						_wheelDelta.y = e.detail;
					} else {
						return;
					}

					_calculatePanBounds(_currZoomLevel, true);

					var newPanX = _panOffset.x - _wheelDelta.x,
					    newPanY = _panOffset.y - _wheelDelta.y;

					// only prevent scrolling in nonmodal mode when not at edges
					if (_options.modal || newPanX <= _currPanBounds.min.x && newPanX >= _currPanBounds.max.x && newPanY <= _currPanBounds.min.y && newPanY >= _currPanBounds.max.y) {
						e.preventDefault();
					}

					// TODO: use rAF instead of mousewheel?
					self.panTo(newPanX, newPanY);
				},

				toggleDesktopZoom: function (centerPoint) {
					centerPoint = centerPoint || { x: _viewportSize.x / 2 + _offset.x, y: _viewportSize.y / 2 + _offset.y };

					var doubleTapZoomLevel = _options.getDoubleTapZoom(true, self.currItem);
					var zoomOut = _currZoomLevel === doubleTapZoomLevel;

					self.mouseZoomedIn = !zoomOut;

					self.zoomTo(zoomOut ? self.currItem.initialZoomLevel : doubleTapZoomLevel, centerPoint, 333);
					framework[(!zoomOut ? 'add' : 'remove') + 'Class'](template, 'pswp--zoomed-in');
				}

			}
		});

		/*>>desktop-zoom*/

		/*>>history*/
		/**
   *
   * history.js:
   *
   * - Back button to close gallery.
   * 
   * - Unique URL for each slide: example.com/&pid=1&gid=3
   *   (where PID is picture index, and GID and gallery index)
   *   
   * - Switch URL when slides change.
   * 
   */

		var _historyDefaultOptions = {
			history: true,
			galleryUID: 1
		};

		var _historyUpdateTimeout,
		    _hashChangeTimeout,
		    _hashAnimCheckTimeout,
		    _hashChangedByScript,
		    _hashChangedByHistory,
		    _hashReseted,
		    _initialHash,
		    _historyChanged,
		    _closedFromURL,
		    _urlChangedOnce,
		    _windowLoc,
		    _supportsPushState,
		    _getHash = function () {
			return _windowLoc.hash.substring(1);
		},
		    _cleanHistoryTimeouts = function () {

			if (_historyUpdateTimeout) {
				clearTimeout(_historyUpdateTimeout);
			}

			if (_hashAnimCheckTimeout) {
				clearTimeout(_hashAnimCheckTimeout);
			}
		},


		// pid - Picture index
		// gid - Gallery index
		_parseItemIndexFromURL = function () {
			var hash = _getHash(),
			    params = {};

			if (hash.length < 5) {
				// pid=1
				return params;
			}

			var i,
			    vars = hash.split('&');
			for (i = 0; i < vars.length; i++) {
				if (!vars[i]) {
					continue;
				}
				var pair = vars[i].split('=');
				if (pair.length < 2) {
					continue;
				}
				params[pair[0]] = pair[1];
			}
			if (_options.galleryPIDs) {
				// detect custom pid in hash and search for it among the items collection
				var searchfor = params.pid;
				params.pid = 0; // if custom pid cannot be found, fallback to the first item
				for (i = 0; i < _items.length; i++) {
					if (_items[i].pid === searchfor) {
						params.pid = i;
						break;
					}
				}
			} else {
				params.pid = parseInt(params.pid, 10) - 1;
			}
			if (params.pid < 0) {
				params.pid = 0;
			}
			return params;
		},
		    _updateHash = function () {

			if (_hashAnimCheckTimeout) {
				clearTimeout(_hashAnimCheckTimeout);
			}

			if (_numAnimations || _isDragging) {
				// changing browser URL forces layout/paint in some browsers, which causes noticable lag during animation
				// that's why we update hash only when no animations running
				_hashAnimCheckTimeout = setTimeout(_updateHash, 500);
				return;
			}

			if (_hashChangedByScript) {
				clearTimeout(_hashChangeTimeout);
			} else {
				_hashChangedByScript = true;
			}

			var pid = _currentItemIndex + 1;
			var item = _getItemAt(_currentItemIndex);
			if (item.hasOwnProperty('pid')) {
				// carry forward any custom pid assigned to the item
				pid = item.pid;
			}
			var newHash = _initialHash + '&' + 'gid=' + _options.galleryUID + '&' + 'pid=' + pid;

			if (!_historyChanged) {
				if (_windowLoc.hash.indexOf(newHash) === -1) {
					_urlChangedOnce = true;
				}
				// first time - add new hisory record, then just replace
			}

			var newURL = _windowLoc.href.split('#')[0] + '#' + newHash;

			if (_supportsPushState) {

				if ('#' + newHash !== window.location.hash) {
					history[_historyChanged ? 'replaceState' : 'pushState']('', document.title, newURL);
				}
			} else {
				if (_historyChanged) {
					_windowLoc.replace(newURL);
				} else {
					_windowLoc.hash = newHash;
				}
			}

			_historyChanged = true;
			_hashChangeTimeout = setTimeout(function () {
				_hashChangedByScript = false;
			}, 60);
		};

		_registerModule('History', {

			publicMethods: {
				initHistory: function () {

					framework.extend(_options, _historyDefaultOptions, true);

					if (!_options.history) {
						return;
					}

					_windowLoc = window.location;
					_urlChangedOnce = false;
					_closedFromURL = false;
					_historyChanged = false;
					_initialHash = _getHash();
					_supportsPushState = 'pushState' in history;

					if (_initialHash.indexOf('gid=') > -1) {
						_initialHash = _initialHash.split('&gid=')[0];
						_initialHash = _initialHash.split('?gid=')[0];
					}

					_listen('afterChange', self.updateURL);
					_listen('unbindEvents', function () {
						framework.unbind(window, 'hashchange', self.onHashChange);
					});

					var returnToOriginal = function () {
						_hashReseted = true;
						if (!_closedFromURL) {

							if (_urlChangedOnce) {
								history.back();
							} else {

								if (_initialHash) {
									_windowLoc.hash = _initialHash;
								} else {
									if (_supportsPushState) {

										// remove hash from url without refreshing it or scrolling to top
										history.pushState('', document.title, _windowLoc.pathname + _windowLoc.search);
									} else {
										_windowLoc.hash = '';
									}
								}
							}
						}

						_cleanHistoryTimeouts();
					};

					_listen('unbindEvents', function () {
						if (_closedByScroll) {
							// if PhotoSwipe is closed by scroll, we go "back" before the closing animation starts
							// this is done to keep the scroll position
							returnToOriginal();
						}
					});
					_listen('destroy', function () {
						if (!_hashReseted) {
							returnToOriginal();
						}
					});
					_listen('firstUpdate', function () {
						_currentItemIndex = _parseItemIndexFromURL().pid;
					});

					var index = _initialHash.indexOf('pid=');
					if (index > -1) {
						_initialHash = _initialHash.substring(0, index);
						if (_initialHash.slice(-1) === '&') {
							_initialHash = _initialHash.slice(0, -1);
						}
					}

					setTimeout(function () {
						if (_isOpen) {
							// hasn't destroyed yet
							framework.bind(window, 'hashchange', self.onHashChange);
						}
					}, 40);
				},
				onHashChange: function () {

					if (_getHash() === _initialHash) {

						_closedFromURL = true;
						self.close();
						return;
					}
					if (!_hashChangedByScript) {

						_hashChangedByHistory = true;
						self.goTo(_parseItemIndexFromURL().pid);
						_hashChangedByHistory = false;
					}
				},
				updateURL: function () {

					// Delay the update of URL, to avoid lag during transition, 
					// and to not to trigger actions like "refresh page sound" or "blinking favicon" to often

					_cleanHistoryTimeouts();

					if (_hashChangedByHistory) {
						return;
					}

					if (!_historyChanged) {
						_updateHash(); // first time
					} else {
						_historyUpdateTimeout = setTimeout(_updateHash, 800);
					}
				}

			}
		});

		/*>>history*/
		framework.extend(self, publicMethods);
	};
	return PhotoSwipe;
});
;// ==========================================================================
// Plyr
// plyr.js v2.0.10
// https://github.com/selz/plyr
// License: The MIT License (MIT)
// ==========================================================================
// Credits: http://paypal.github.io/accessible-html5-video-player/
// ==========================================================================
;(function(root,factory){'use strict';/*global define,module*/if(typeof module==='object'&&typeof module.exports==='object'){// Node, CommonJS-like
module.exports=factory(root,document);}else if(typeof define==='function'&&define.amd){// AMD
define([],function(){return factory(root,document);});}else{// Browser globals (root is window)
root.plyr=factory(root,document);}})(typeof window!=='undefined'?window:this,function(window,document){'use strict';// Globals
var fullscreen,scroll={x:0,y:0},// Default config
defaults={enabled:true,debug:false,autoplay:false,loop:false,seekTime:10,volume:10,volumeMin:0,volumeMax:10,volumeStep:1,duration:null,displayDuration:true,loadSprite:true,iconPrefix:'plyr',iconUrl:'https://cdn.plyr.io/2.0.10/plyr.svg',clickToPlay:true,hideControls:true,showPosterOnEnd:false,disableContextMenu:true,keyboardShorcuts:{focused:true,global:false},tooltips:{controls:false,seek:true},selectors:{html5:'video, audio',embed:'[data-type]',editable:'input, textarea, select, [contenteditable]',container:'.plyr',controls:{container:null,wrapper:'.plyr__controls'},labels:'[data-plyr]',buttons:{seek:'[data-plyr="seek"]',play:'[data-plyr="play"]',pause:'[data-plyr="pause"]',restart:'[data-plyr="restart"]',rewind:'[data-plyr="rewind"]',forward:'[data-plyr="fast-forward"]',mute:'[data-plyr="mute"]',captions:'[data-plyr="captions"]',fullscreen:'[data-plyr="fullscreen"]'},volume:{input:'[data-plyr="volume"]',display:'.plyr__volume--display'},progress:{container:'.plyr__progress',buffer:'.plyr__progress--buffer',played:'.plyr__progress--played'},captions:'.plyr__captions',currentTime:'.plyr__time--current',duration:'.plyr__time--duration'},classes:{setup:'plyr--setup',ready:'plyr--ready',videoWrapper:'plyr__video-wrapper',embedWrapper:'plyr__video-embed',type:'plyr--{0}',stopped:'plyr--stopped',playing:'plyr--playing',muted:'plyr--muted',loading:'plyr--loading',hover:'plyr--hover',tooltip:'plyr__tooltip',hidden:'plyr__sr-only',hideControls:'plyr--hide-controls',isIos:'plyr--is-ios',isTouch:'plyr--is-touch',captions:{enabled:'plyr--captions-enabled',active:'plyr--captions-active'},fullscreen:{enabled:'plyr--fullscreen-enabled',active:'plyr--fullscreen-active'},tabFocus:'tab-focus'},captions:{defaultActive:false},fullscreen:{enabled:true,fallback:true,allowAudio:false},storage:{enabled:true,key:'plyr'},controls:['play-large','play','progress','current-time','mute','volume','captions','fullscreen'],i18n:{restart:'Restart',rewind:'Rewind {seektime} secs',play:'Play',pause:'Pause',forward:'Forward {seektime} secs',played:'played',buffered:'buffered',currentTime:'Current time',duration:'Duration',volume:'Volume',toggleMute:'Toggle Mute',toggleCaptions:'Toggle Captions',toggleFullscreen:'Toggle Fullscreen',frameTitle:'Player for {title}'},types:{embed:['youtube','vimeo','soundcloud'],html5:['video','audio']},// URLs
urls:{vimeo:{api:'https://player.vimeo.com/api/player.js'},youtube:{api:'https://www.youtube.com/iframe_api'},soundcloud:{api:'https://w.soundcloud.com/player/api.js'}},// Custom control listeners
listeners:{seek:null,play:null,pause:null,restart:null,rewind:null,forward:null,mute:null,volume:null,captions:null,fullscreen:null},// Events to watch on HTML5 media elements
events:['ready','ended','progress','stalled','playing','waiting','canplay','canplaythrough','loadstart','loadeddata','loadedmetadata','timeupdate','volumechange','play','pause','error','seeking','seeked','emptied'],// Logging
logPrefix:'[Plyr]'};// Credits: http://paypal.github.io/accessible-html5-video-player/
// Unfortunately, due to mixed support, UA sniffing is required
function _browserSniff(){var ua=navigator.userAgent,name=navigator.appName,fullVersion=''+parseFloat(navigator.appVersion),majorVersion=parseInt(navigator.appVersion,10),nameOffset,verOffset,ix,isIE=false,isFirefox=false,isChrome=false,isSafari=false;if(navigator.appVersion.indexOf('Windows NT')!==-1&&navigator.appVersion.indexOf('rv:11')!==-1){// MSIE 11
isIE=true;name='IE';fullVersion='11';}else if((verOffset=ua.indexOf('MSIE'))!==-1){// MSIE
isIE=true;name='IE';fullVersion=ua.substring(verOffset+5);}else if((verOffset=ua.indexOf('Chrome'))!==-1){// Chrome
isChrome=true;name='Chrome';fullVersion=ua.substring(verOffset+7);}else if((verOffset=ua.indexOf('Safari'))!==-1){// Safari
isSafari=true;name='Safari';fullVersion=ua.substring(verOffset+7);if((verOffset=ua.indexOf('Version'))!==-1){fullVersion=ua.substring(verOffset+8);}}else if((verOffset=ua.indexOf('Firefox'))!==-1){// Firefox
isFirefox=true;name='Firefox';fullVersion=ua.substring(verOffset+8);}else if((nameOffset=ua.lastIndexOf(' ')+1)<(verOffset=ua.lastIndexOf('/'))){// In most other browsers, 'name/version' is at the end of userAgent
name=ua.substring(nameOffset,verOffset);fullVersion=ua.substring(verOffset+1);if(name.toLowerCase()===name.toUpperCase()){name=navigator.appName;}}// Trim the fullVersion string at semicolon/space if present
if((ix=fullVersion.indexOf(';'))!==-1){fullVersion=fullVersion.substring(0,ix);}if((ix=fullVersion.indexOf(' '))!==-1){fullVersion=fullVersion.substring(0,ix);}// Get major version
majorVersion=parseInt(''+fullVersion,10);if(isNaN(majorVersion)){fullVersion=''+parseFloat(navigator.appVersion);majorVersion=parseInt(navigator.appVersion,10);}// Return data
return{name:name,version:majorVersion,isIE:isIE,isFirefox:isFirefox,isChrome:isChrome,isSafari:isSafari,isIos:/(iPad|iPhone|iPod)/g.test(navigator.platform),isTouch:'ontouchstart'in document.documentElement};}// Check for mime type support against a player instance
// Credits: http://diveintohtml5.info/everything.html
// Related: http://www.leanbackplyr.com/test/h5mt.html
function _supportMime(plyr,mimeType){var media=plyr.media;if(plyr.type==='video'){// Check type
switch(mimeType){case'video/webm':return!!(media.canPlayType&&media.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/no/,''));case'video/mp4':return!!(media.canPlayType&&media.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"').replace(/no/,''));case'video/ogg':return!!(media.canPlayType&&media.canPlayType('video/ogg; codecs="theora"').replace(/no/,''));}}else if(plyr.type==='audio'){// Check type
switch(mimeType){case'audio/mpeg':return!!(media.canPlayType&&media.canPlayType('audio/mpeg;').replace(/no/,''));case'audio/ogg':return!!(media.canPlayType&&media.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/,''));case'audio/wav':return!!(media.canPlayType&&media.canPlayType('audio/wav; codecs="1"').replace(/no/,''));}}// If we got this far, we're stuffed
return false;}// Inject a script
function _injectScript(source){if(document.querySelectorAll('script[src="'+source+'"]').length){return;}var tag=document.createElement('script');tag.src=source;var firstScriptTag=document.getElementsByTagName('script')[0];firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);}// Element exists in an array
function _inArray(haystack,needle){return Array.prototype.indexOf&&haystack.indexOf(needle)!==-1;}// Replace all
function _replaceAll(string,find,replace){return string.replace(new RegExp(find.replace(/([.*+?\^=!:${}()|\[\]\/\\])/g,'\\$1'),'g'),replace);}// Wrap an element
function _wrap(elements,wrapper){// Convert `elements` to an array, if necessary.
if(!elements.length){elements=[elements];}// Loops backwards to prevent having to clone the wrapper on the
// first element (see `child` below).
for(var i=elements.length-1;i>=0;i--){var child=i>0?wrapper.cloneNode(true):wrapper;var element=elements[i];// Cache the current parent and sibling.
var parent=element.parentNode;var sibling=element.nextSibling;// Wrap the element (is automatically removed from its current
// parent).
child.appendChild(element);// If the element had a sibling, insert the wrapper before
// the sibling to maintain the HTML structure; otherwise, just
// append it to the parent.
if(sibling){parent.insertBefore(child,sibling);}else{parent.appendChild(child);}return child;}}// Unwrap an element
// http://plainjs.com/javascript/manipulation/unwrap-a-dom-element-35/
/*function _unwrap(wrapper) {
        // Get the element's parent node
        var parent = wrapper.parentNode;

        // Move all children out of the element
        while (wrapper.firstChild) {
            parent.insertBefore(wrapper.firstChild, wrapper);
        }

        // Remove the empty element
        parent.removeChild(wrapper);
    }*/// Remove an element
function _remove(element){if(!element){return;}element.parentNode.removeChild(element);}// Prepend child
function _prependChild(parent,element){parent.insertBefore(element,parent.firstChild);}// Set attributes
function _setAttributes(element,attributes){for(var key in attributes){element.setAttribute(key,_is.boolean(attributes[key])&&attributes[key]?'':attributes[key]);}}// Insert a HTML element
function _insertElement(type,parent,attributes){// Create a new <element>
var element=document.createElement(type);// Set all passed attributes
_setAttributes(element,attributes);// Inject the new element
_prependChild(parent,element);}// Get a classname from selector
function _getClassname(selector){return selector.replace('.','');}// Toggle class on an element
function _toggleClass(element,className,state){if(element){if(element.classList){element.classList[state?'add':'remove'](className);}else{var name=(' '+element.className+' ').replace(/\s+/g,' ').replace(' '+className+' ','');element.className=name+(state?' '+className:'');}}}// Has class name
function _hasClass(element,className){if(element){if(element.classList){return element.classList.contains(className);}else{return new RegExp('(\\s|^)'+className+'(\\s|$)').test(element.className);}}return false;}// Element matches selector
function _matches(element,selector){var p=Element.prototype;var f=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.msMatchesSelector||function(s){return[].indexOf.call(document.querySelectorAll(s),this)!==-1;};return f.call(element,selector);}// Bind along with custom handler
function _proxyListener(element,eventName,userListener,defaultListener,useCapture){_on(element,eventName,function(event){if(userListener){userListener.apply(element,[event]);}defaultListener.apply(element,[event]);},useCapture);}// Toggle event listener
function _toggleListener(element,events,callback,toggle,useCapture){var eventList=events.split(' ');// Whether the listener is a capturing listener or not
// Default to false
if(!_is.boolean(useCapture)){useCapture=false;}// If a nodelist is passed, call itself on each node
if(element instanceof NodeList){for(var x=0;x<element.length;x++){if(element[x]instanceof Node){_toggleListener(element[x],arguments[1],arguments[2],arguments[3]);}}return;}// If a single node is passed, bind the event listener
for(var i=0;i<eventList.length;i++){element[toggle?'addEventListener':'removeEventListener'](eventList[i],callback,useCapture);}}// Bind event
function _on(element,events,callback,useCapture){if(element){_toggleListener(element,events,callback,true,useCapture);}}// Unbind event
/*function _off(element, events, callback, useCapture) {
        if (element) {
            _toggleListener(element, events, callback, false, useCapture);
        }
    }*/// Trigger event
function _event(element,type,bubbles,properties){// Bail if no element
if(!element||!type){return;}// Default bubbles to false
if(!_is.boolean(bubbles)){bubbles=false;}// Create and dispatch the event
var event=new CustomEvent(type,{bubbles:bubbles,detail:properties});// Dispatch the event
element.dispatchEvent(event);}// Toggle aria-pressed state on a toggle button
// http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles
function _toggleState(target,state){// Bail if no target
if(!target){return;}// Get state
state=_is.boolean(state)?state:!target.getAttribute('aria-pressed');// Set the attribute on target
target.setAttribute('aria-pressed',state);return state;}// Get percentage
function _getPercentage(current,max){if(current===0||max===0||isNaN(current)||isNaN(max)){return 0;}return(current/max*100).toFixed(2);}// Deep extend/merge destination object with N more objects
// http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/
// Removed call to arguments.callee (used explicit function name instead)
function _extend(){// Get arguments
var objects=arguments;// Bail if nothing to merge
if(!objects.length){return;}// Return first if specified but nothing to merge
if(objects.length===1){return objects[0];}// First object is the destination
var destination=Array.prototype.shift.call(objects),length=objects.length;// Loop through all objects to merge
for(var i=0;i<length;i++){var source=objects[i];for(var property in source){if(source[property]&&source[property].constructor&&source[property].constructor===Object){destination[property]=destination[property]||{};_extend(destination[property],source[property]);}else{destination[property]=source[property];}}}return destination;}// Check variable types
var _is={object:function(input){return input!==null&&typeof input==='object';},array:function(input){return input!==null&&typeof input==='object'&&input.constructor===Array;},number:function(input){return input!==null&&(typeof input==='number'&&!isNaN(input-0)||typeof input==='object'&&input.constructor===Number);},string:function(input){return input!==null&&(typeof input==='string'||typeof input==='object'&&input.constructor===String);},boolean:function(input){return input!==null&&typeof input==='boolean';},nodeList:function(input){return input!==null&&input instanceof NodeList;},htmlElement:function(input){return input!==null&&input instanceof HTMLElement;},function:function(input){return input!==null&&typeof input==='function';},undefined:function(input){return input!==null&&typeof input==='undefined';}};// Parse YouTube ID from url
function _parseYouTubeId(url){var regex=/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;return url.match(regex)?RegExp.$2:url;}// Parse Vimeo ID from url
function _parseVimeoId(url){var regex=/^.*(vimeo.com\/|video\/)(\d+).*/;return url.match(regex)?RegExp.$2:url;}// Fullscreen API
function _fullscreen(){var fullscreen={supportsFullScreen:false,isFullScreen:function(){return false;},requestFullScreen:function(){},cancelFullScreen:function(){},fullScreenEventName:'',element:null,prefix:''},browserPrefixes='webkit o moz ms khtml'.split(' ');// Check for native support
if(!_is.undefined(document.cancelFullScreen)){fullscreen.supportsFullScreen=true;}else{// Check for fullscreen support by vendor prefix
for(var i=0,il=browserPrefixes.length;i<il;i++){fullscreen.prefix=browserPrefixes[i];if(!_is.undefined(document[fullscreen.prefix+'CancelFullScreen'])){fullscreen.supportsFullScreen=true;break;}else if(!_is.undefined(document.msExitFullscreen)&&document.msFullscreenEnabled){// Special case for MS (when isn't it?)
fullscreen.prefix='ms';fullscreen.supportsFullScreen=true;break;}}}// Update methods to do something useful
if(fullscreen.supportsFullScreen){// Yet again Microsoft awesomeness,
// Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes
fullscreen.fullScreenEventName=fullscreen.prefix==='ms'?'MSFullscreenChange':fullscreen.prefix+'fullscreenchange';fullscreen.isFullScreen=function(element){if(_is.undefined(element)){element=document.body;}switch(this.prefix){case'':return document.fullscreenElement===element;case'moz':return document.mozFullScreenElement===element;default:return document[this.prefix+'FullscreenElement']===element;}};fullscreen.requestFullScreen=function(element){if(_is.undefined(element)){element=document.body;}return this.prefix===''?element.requestFullScreen():element[this.prefix+(this.prefix==='ms'?'RequestFullscreen':'RequestFullScreen')]();};fullscreen.cancelFullScreen=function(){return this.prefix===''?document.cancelFullScreen():document[this.prefix+(this.prefix==='ms'?'ExitFullscreen':'CancelFullScreen')]();};fullscreen.element=function(){return this.prefix===''?document.fullscreenElement:document[this.prefix+'FullscreenElement'];};}return fullscreen;}// Local storage
var _storage={supported:function(){if(!('localStorage'in window)){return false;}// Try to use it (it might be disabled, e.g. user is in private/porn mode)
// see: https://github.com/Selz/plyr/issues/131
try{// Add test item
window.localStorage.setItem('___test','OK');// Get the test item
var result=window.localStorage.getItem('___test');// Clean up
window.localStorage.removeItem('___test');// Check if value matches
return result==='OK';}catch(e){return false;}return false;}()};// Player instance
function Plyr(media,config){var plyr=this,timers={},api;// Set media
plyr.media=media;var original=media.cloneNode(true);// Trigger events, with plyr instance passed
function _triggerEvent(element,type,bubbles,properties){_event(element,type,bubbles,_extend({},properties,{plyr:api}));}// Debugging
function _console(type,args){if(config.debug&&window.console){args=Array.prototype.slice.call(args);if(_is.string(config.logPrefix)&&config.logPrefix.length){args.unshift(config.logPrefix);}console[type].apply(console,args);}}var _log=function(){_console('log',arguments);},_warn=function(){_console('warn',arguments);};// Log config options
_log('Config',config);// Get icon URL
function _getIconUrl(){return{url:config.iconUrl,absolute:config.iconUrl.indexOf("http")===0||plyr.browser.isIE};}// Build the default HTML
function _buildControls(){// Create html array
var html=[],iconUrl=_getIconUrl(),iconPath=(!iconUrl.absolute?iconUrl.url:'')+'#'+config.iconPrefix;// Larger overlaid play button
if(_inArray(config.controls,'play-large')){html.push('<button type="button" data-plyr="play" class="plyr__play-large">','<svg><use xlink:href="'+iconPath+'-play" /></svg>','<span class="plyr__sr-only">'+config.i18n.play+'</span>','</button>');}html.push('<div class="plyr__controls">');// Restart button
if(_inArray(config.controls,'restart')){html.push('<button type="button" data-plyr="restart">','<svg><use xlink:href="'+iconPath+'-restart" /></svg>','<span class="plyr__sr-only">'+config.i18n.restart+'</span>','</button>');}// Rewind button
if(_inArray(config.controls,'rewind')){html.push('<button type="button" data-plyr="rewind">','<svg><use xlink:href="'+iconPath+'-rewind" /></svg>','<span class="plyr__sr-only">'+config.i18n.rewind+'</span>','</button>');}// Play Pause button
// TODO: This should be a toggle button really?
if(_inArray(config.controls,'play')){html.push('<button type="button" data-plyr="play">','<svg><use xlink:href="'+iconPath+'-play" /></svg>','<span class="plyr__sr-only">'+config.i18n.play+'</span>','</button>','<button type="button" data-plyr="pause">','<svg><use xlink:href="'+iconPath+'-pause" /></svg>','<span class="plyr__sr-only">'+config.i18n.pause+'</span>','</button>');}// Fast forward button
if(_inArray(config.controls,'fast-forward')){html.push('<button type="button" data-plyr="fast-forward">','<svg><use xlink:href="'+iconPath+'-fast-forward" /></svg>','<span class="plyr__sr-only">'+config.i18n.forward+'</span>','</button>');}// Progress
if(_inArray(config.controls,'progress')){// Create progress
html.push('<span class="plyr__progress">','<label for="seek{id}" class="plyr__sr-only">Seek</label>','<input id="seek{id}" class="plyr__progress--seek" type="range" min="0" max="100" step="0.1" value="0" data-plyr="seek">','<progress class="plyr__progress--played" max="100" value="0" role="presentation"></progress>','<progress class="plyr__progress--buffer" max="100" value="0">','<span>0</span>% '+config.i18n.buffered,'</progress>');// Seek tooltip
if(config.tooltips.seek){html.push('<span class="plyr__tooltip">00:00</span>');}// Close
html.push('</span>');}// Media current time display
if(_inArray(config.controls,'current-time')){html.push('<span class="plyr__time">','<span class="plyr__sr-only">'+config.i18n.currentTime+'</span>','<span class="plyr__time--current">00:00</span>','</span>');}// Media duration display
if(_inArray(config.controls,'duration')){html.push('<span class="plyr__time">','<span class="plyr__sr-only">'+config.i18n.duration+'</span>','<span class="plyr__time--duration">00:00</span>','</span>');}// Toggle mute button
if(_inArray(config.controls,'mute')){html.push('<button type="button" data-plyr="mute">','<svg class="icon--muted"><use xlink:href="'+iconPath+'-muted" /></svg>','<svg><use xlink:href="'+iconPath+'-volume" /></svg>','<span class="plyr__sr-only">'+config.i18n.toggleMute+'</span>','</button>');}// Volume range control
if(_inArray(config.controls,'volume')){html.push('<span class="plyr__volume">','<label for="volume{id}" class="plyr__sr-only">'+config.i18n.volume+'</label>','<input id="volume{id}" class="plyr__volume--input" type="range" min="'+config.volumeMin+'" max="'+config.volumeMax+'" value="'+config.volume+'" data-plyr="volume">','<progress class="plyr__volume--display" max="'+config.volumeMax+'" value="'+config.volumeMin+'" role="presentation"></progress>','</span>');}// Toggle captions button
if(_inArray(config.controls,'captions')){html.push('<button type="button" data-plyr="captions">','<svg class="icon--captions-on"><use xlink:href="'+iconPath+'-captions-on" /></svg>','<svg><use xlink:href="'+iconPath+'-captions-off" /></svg>','<span class="plyr__sr-only">'+config.i18n.toggleCaptions+'</span>','</button>');}// Toggle fullscreen button
if(_inArray(config.controls,'fullscreen')){html.push('<button type="button" data-plyr="fullscreen">','<svg class="icon--exit-fullscreen"><use xlink:href="'+iconPath+'-exit-fullscreen" /></svg>','<svg><use xlink:href="'+iconPath+'-enter-fullscreen" /></svg>','<span class="plyr__sr-only">'+config.i18n.toggleFullscreen+'</span>','</button>');}// Close everything
html.push('</div>');return html.join('');}// Setup fullscreen
function _setupFullscreen(){if(!plyr.supported.full){return;}if((plyr.type!=='audio'||config.fullscreen.allowAudio)&&config.fullscreen.enabled){// Check for native support
var nativeSupport=fullscreen.supportsFullScreen;if(nativeSupport||config.fullscreen.fallback&&!_inFrame()){_log((nativeSupport?'Native':'Fallback')+' fullscreen enabled');// Add styling hook
_toggleClass(plyr.container,config.classes.fullscreen.enabled,true);}else{_log('Fullscreen not supported and fallback disabled');}// Toggle state
if(plyr.buttons&&plyr.buttons.fullscreen){_toggleState(plyr.buttons.fullscreen,false);}// Setup focus trap
_focusTrap();}}// Setup captions
function _setupCaptions(){// Bail if not HTML5 video
if(plyr.type!=='video'){return;}// Inject the container
if(!_getElement(config.selectors.captions)){plyr.videoContainer.insertAdjacentHTML('afterbegin','<div class="'+_getClassname(config.selectors.captions)+'"></div>');}// Determine if HTML5 textTracks is supported
plyr.usingTextTracks=false;if(plyr.media.textTracks){plyr.usingTextTracks=true;}// Get URL of caption file if exists
var captionSrc='',kind,children=plyr.media.childNodes;for(var i=0;i<children.length;i++){if(children[i].nodeName.toLowerCase()==='track'){kind=children[i].kind;if(kind==='captions'||kind==='subtitles'){captionSrc=children[i].getAttribute('src');}}}// Record if caption file exists or not
plyr.captionExists=true;if(captionSrc===''){plyr.captionExists=false;_log('No caption track found');}else{_log('Caption track found; URI: '+captionSrc);}// If no caption file exists, hide container for caption text
if(!plyr.captionExists){_toggleClass(plyr.container,config.classes.captions.enabled);}else{// Turn off native caption rendering to avoid double captions
// This doesn't seem to work in Safari 7+, so the <track> elements are removed from the dom below
var tracks=plyr.media.textTracks;for(var x=0;x<tracks.length;x++){tracks[x].mode='hidden';}// Enable UI
_showCaptions(plyr);// Disable unsupported browsers than report false positive
// Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1033144
if(plyr.browser.isIE&&plyr.browser.version>=10||plyr.browser.isFirefox&&plyr.browser.version>=31){// Debugging
_log('Detected browser with known TextTrack issues - using manual fallback');// Set to false so skips to 'manual' captioning
plyr.usingTextTracks=false;}// Rendering caption tracks
// Native support required - http://caniuse.com/webvtt
if(plyr.usingTextTracks){_log('TextTracks supported');for(var y=0;y<tracks.length;y++){var track=tracks[y];if(track.kind==='captions'||track.kind==='subtitles'){_on(track,'cuechange',function(){// Display a cue, if there is one
if(this.activeCues[0]&&'text'in this.activeCues[0]){_setCaption(this.activeCues[0].getCueAsHTML());}else{_setCaption();}});}}}else{// Caption tracks not natively supported
_log('TextTracks not supported so rendering captions manually');// Render captions from array at appropriate time
plyr.currentCaption='';plyr.captions=[];if(captionSrc!==''){// Create XMLHttpRequest Object
var xhr=new XMLHttpRequest();xhr.onreadystatechange=function(){if(xhr.readyState===4){if(xhr.status===200){var captions=[],caption,req=xhr.responseText;//According to webvtt spec, line terminator consists of one of the following
// CRLF (U+000D U+000A), LF (U+000A) or CR (U+000D)
var lineSeparator='\r\n';if(req.indexOf(lineSeparator+lineSeparator)===-1){if(req.indexOf('\r\r')!==-1){lineSeparator='\r';}else{lineSeparator='\n';}}captions=req.split(lineSeparator+lineSeparator);for(var r=0;r<captions.length;r++){caption=captions[r];plyr.captions[r]=[];// Get the parts of the captions
var parts=caption.split(lineSeparator),index=0;// Incase caption numbers are added
if(parts[index].indexOf(":")===-1){index=1;}plyr.captions[r]=[parts[index],parts[index+1]];}// Remove first element ('VTT')
plyr.captions.shift();_log('Successfully loaded the caption file via AJAX');}else{_warn(config.logPrefix+'There was a problem loading the caption file via AJAX');}}};xhr.open('get',captionSrc,true);xhr.send();}}}}// Set the current caption
function _setCaption(caption){/* jshint unused:false */var container=_getElement(config.selectors.captions),content=document.createElement('span');// Empty the container
container.innerHTML='';// Default to empty
if(_is.undefined(caption)){caption='';}// Set the span content
if(_is.string(caption)){content.innerHTML=caption.trim();}else{content.appendChild(caption);}// Set new caption text
container.appendChild(content);// Force redraw (for Safari)
var redraw=container.offsetHeight;}// Captions functions
// Seek the manual caption time and update UI
function _seekManualCaptions(time){// Utilities for caption time codes
function _timecodeCommon(tc,pos){var tcpair=[];tcpair=tc.split(' --> ');for(var i=0;i<tcpair.length;i++){// WebVTT allows for extra meta data after the timestamp line
// So get rid of this if it exists
tcpair[i]=tcpair[i].replace(/(\d+:\d+:\d+\.\d+).*/,"$1");}return _subTcSecs(tcpair[pos]);}function _timecodeMin(tc){return _timecodeCommon(tc,0);}function _timecodeMax(tc){return _timecodeCommon(tc,1);}function _subTcSecs(tc){if(tc===null||tc===undefined){return 0;}else{var tc1=[],tc2=[],seconds;tc1=tc.split(',');tc2=tc1[0].split(':');seconds=Math.floor(tc2[0]*60*60)+Math.floor(tc2[1]*60)+Math.floor(tc2[2]);return seconds;}}// If it's not video, or we're using textTracks, bail.
if(plyr.usingTextTracks||plyr.type!=='video'||!plyr.supported.full){return;}// Reset subcount
plyr.subcount=0;// Check time is a number, if not use currentTime
// IE has a bug where currentTime doesn't go to 0
// https://twitter.com/Sam_Potts/status/573715746506731521
time=_is.number(time)?time:plyr.media.currentTime;// If there's no subs available, bail
if(!plyr.captions[plyr.subcount]){return;}while(_timecodeMax(plyr.captions[plyr.subcount][0])<time.toFixed(1)){plyr.subcount++;if(plyr.subcount>plyr.captions.length-1){plyr.subcount=plyr.captions.length-1;break;}}// Check if the next caption is in the current time range
if(plyr.media.currentTime.toFixed(1)>=_timecodeMin(plyr.captions[plyr.subcount][0])&&plyr.media.currentTime.toFixed(1)<=_timecodeMax(plyr.captions[plyr.subcount][0])){plyr.currentCaption=plyr.captions[plyr.subcount][1];// Render the caption
_setCaption(plyr.currentCaption);}else{_setCaption();}}// Display captions container and button (for initialization)
function _showCaptions(){// If there's no caption toggle, bail
if(!plyr.buttons.captions){return;}_toggleClass(plyr.container,config.classes.captions.enabled,true);// Try to load the value from storage
var active=plyr.storage.captionsEnabled;// Otherwise fall back to the default config
if(!_is.boolean(active)){active=config.captions.defaultActive;}if(active){_toggleClass(plyr.container,config.classes.captions.active,true);_toggleState(plyr.buttons.captions,true);}}// Find all elements
function _getElements(selector){return plyr.container.querySelectorAll(selector);}// Find a single element
function _getElement(selector){return _getElements(selector)[0];}// Determine if we're in an iframe
function _inFrame(){try{return window.self!==window.top;}catch(e){return true;}}// Trap focus inside container
function _focusTrap(){var tabbables=_getElements('input:not([disabled]), button:not([disabled])'),first=tabbables[0],last=tabbables[tabbables.length-1];function _checkFocus(event){// If it is TAB
if(event.which===9&&plyr.isFullscreen){if(event.target===last&&!event.shiftKey){// Move focus to first element that can be tabbed if Shift isn't used
event.preventDefault();first.focus();}else if(event.target===first&&event.shiftKey){// Move focus to last element that can be tabbed if Shift is used
event.preventDefault();last.focus();}}}// Bind the handler
_on(plyr.container,'keydown',_checkFocus);}// Add elements to HTML5 media (source, tracks, etc)
function _insertChildElements(type,attributes){if(_is.string(attributes)){_insertElement(type,plyr.media,{src:attributes});}else if(attributes.constructor===Array){for(var i=attributes.length-1;i>=0;i--){_insertElement(type,plyr.media,attributes[i]);}}}// Insert controls
function _injectControls(){// Sprite
if(config.loadSprite){var iconUrl=_getIconUrl();// Only load external sprite using AJAX
if(iconUrl.absolute){_log('AJAX loading absolute SVG sprite'+(plyr.browser.isIE?' (due to IE)':''));loadSprite(iconUrl.url,"sprite-plyr");}else{_log('Sprite will be used as external resource directly');}}// Make a copy of the html
var html=config.html;// Insert custom video controls
_log('Injecting custom controls');// If no controls are specified, create default
if(!html){html=_buildControls();}// Replace seek time instances
html=_replaceAll(html,'{seektime}',config.seekTime);// Replace all id references with random numbers
html=_replaceAll(html,'{id}',Math.floor(Math.random()*10000));// Controls container
var target;// Inject to custom location
if(_is.string(config.selectors.controls.container)){target=document.querySelector(config.selectors.controls.container);}// Inject into the container by default
if(!_is.htmlElement(target)){target=plyr.container;}// Inject controls HTML
target.insertAdjacentHTML('beforeend',html);// Setup tooltips
if(config.tooltips.controls){var labels=_getElements([config.selectors.controls.wrapper,' ',config.selectors.labels,' .',config.classes.hidden].join(''));for(var i=labels.length-1;i>=0;i--){var label=labels[i];_toggleClass(label,config.classes.hidden,false);_toggleClass(label,config.classes.tooltip,true);}}}// Find the UI controls and store references
function _findElements(){try{plyr.controls=_getElement(config.selectors.controls.wrapper);// Buttons
plyr.buttons={};plyr.buttons.seek=_getElement(config.selectors.buttons.seek);plyr.buttons.play=_getElements(config.selectors.buttons.play);plyr.buttons.pause=_getElement(config.selectors.buttons.pause);plyr.buttons.restart=_getElement(config.selectors.buttons.restart);plyr.buttons.rewind=_getElement(config.selectors.buttons.rewind);plyr.buttons.forward=_getElement(config.selectors.buttons.forward);plyr.buttons.fullscreen=_getElement(config.selectors.buttons.fullscreen);// Inputs
plyr.buttons.mute=_getElement(config.selectors.buttons.mute);plyr.buttons.captions=_getElement(config.selectors.buttons.captions);// Progress
plyr.progress={};plyr.progress.container=_getElement(config.selectors.progress.container);// Progress - Buffering
plyr.progress.buffer={};plyr.progress.buffer.bar=_getElement(config.selectors.progress.buffer);plyr.progress.buffer.text=plyr.progress.buffer.bar&&plyr.progress.buffer.bar.getElementsByTagName('span')[0];// Progress - Played
plyr.progress.played=_getElement(config.selectors.progress.played);// Seek tooltip
plyr.progress.tooltip=plyr.progress.container&&plyr.progress.container.querySelector('.'+config.classes.tooltip);// Volume
plyr.volume={};plyr.volume.input=_getElement(config.selectors.volume.input);plyr.volume.display=_getElement(config.selectors.volume.display);// Timing
plyr.duration=_getElement(config.selectors.duration);plyr.currentTime=_getElement(config.selectors.currentTime);plyr.seekTime=_getElements(config.selectors.seekTime);return true;}catch(e){_warn('It looks like there is a problem with your controls HTML');// Restore native video controls
_toggleNativeControls(true);return false;}}// Toggle style hook
function _toggleStyleHook(){_toggleClass(plyr.container,config.selectors.container.replace('.',''),plyr.supported.full);}// Toggle native controls
function _toggleNativeControls(toggle){if(toggle&&_inArray(config.types.html5,plyr.type)){plyr.media.setAttribute('controls','');}else{plyr.media.removeAttribute('controls');}}// Setup aria attribute for play and iframe title
function _setTitle(iframe){// Find the current text
var label=config.i18n.play;// If there's a media title set, use that for the label
if(_is.string(config.title)&&config.title.length){label+=', '+config.title;// Set container label
plyr.container.setAttribute('aria-label',config.title);}// If there's a play button, set label
if(plyr.supported.full&&plyr.buttons.play){for(var i=plyr.buttons.play.length-1;i>=0;i--){plyr.buttons.play[i].setAttribute('aria-label',label);}}// Set iframe title
// https://github.com/Selz/plyr/issues/124
if(_is.htmlElement(iframe)){iframe.setAttribute('title',config.i18n.frameTitle.replace('{title}',config.title));}}// Setup localStorage
function _setupStorage(){var value=null;plyr.storage={};// Bail if we don't have localStorage support or it's disabled
if(!_storage.supported||!config.storage.enabled){return;}// Clean up old volume
// https://github.com/Selz/plyr/issues/171
window.localStorage.removeItem('plyr-volume');// load value from the current key
value=window.localStorage.getItem(config.storage.key);if(!value){// Key wasn't set (or had been cleared), move along
return;}else if(/^\d+(\.\d+)?$/.test(value)){// If value is a number, it's probably volume from an older
// version of plyr. See: https://github.com/Selz/plyr/pull/313
// Update the key to be JSON
_updateStorage({volume:parseFloat(value)});}else{// Assume it's JSON from this or a later version of plyr
plyr.storage=JSON.parse(value);}}// Save a value back to local storage
function _updateStorage(value){// Bail if we don't have localStorage support or it's disabled
if(!_storage.supported||!config.storage.enabled){return;}// Update the working copy of the values
_extend(plyr.storage,value);// Update storage
window.localStorage.setItem(config.storage.key,JSON.stringify(plyr.storage));}// Setup media
function _setupMedia(){// If there's no media, bail
if(!plyr.media){_warn('No media element found!');return;}if(plyr.supported.full){// Add type class
_toggleClass(plyr.container,config.classes.type.replace('{0}',plyr.type),true);// Add video class for embeds
// This will require changes if audio embeds are added
if(_inArray(config.types.embed,plyr.type)){_toggleClass(plyr.container,config.classes.type.replace('{0}','video'),true);}// If there's no autoplay attribute, assume the video is stopped and add state class
_toggleClass(plyr.container,config.classes.stopped,config.autoplay);// Add iOS class
_toggleClass(plyr.ontainer,config.classes.isIos,plyr.browser.isIos);// Add touch class
_toggleClass(plyr.container,config.classes.isTouch,plyr.browser.isTouch);// Inject the player wrapper
if(plyr.type==='video'){// Create the wrapper div
var wrapper=document.createElement('div');wrapper.setAttribute('class',config.classes.videoWrapper);// Wrap the video in a container
_wrap(plyr.media,wrapper);// Cache the container
plyr.videoContainer=wrapper;}}// Embeds
if(_inArray(config.types.embed,plyr.type)){_setupEmbed();}}// Setup YouTube/Vimeo
function _setupEmbed(){var container=document.createElement('div'),mediaId,id=plyr.type+'-'+Math.floor(Math.random()*10000);// Parse IDs from URLs if supplied
switch(plyr.type){case'youtube':mediaId=_parseYouTubeId(plyr.embedId);break;case'vimeo':mediaId=_parseVimeoId(plyr.embedId);break;default:mediaId=plyr.embedId;}// Remove old containers
var containers=_getElements('[id^="'+plyr.type+'-"]');for(var i=containers.length-1;i>=0;i--){_remove(containers[i]);}// Add embed class for responsive
_toggleClass(plyr.media,config.classes.videoWrapper,true);_toggleClass(plyr.media,config.classes.embedWrapper,true);if(plyr.type==='youtube'){// Create the YouTube container
plyr.media.appendChild(container);// Set ID
container.setAttribute('id',id);// Setup API
if(_is.object(window.YT)){_youTubeReady(mediaId,container);}else{// Load the API
_injectScript(config.urls.youtube.api);// Setup callback for the API
window.onYouTubeReadyCallbacks=window.onYouTubeReadyCallbacks||[];// Add to queue
window.onYouTubeReadyCallbacks.push(function(){_youTubeReady(mediaId,container);});// Set callback to process queue
window.onYouTubeIframeAPIReady=function(){window.onYouTubeReadyCallbacks.forEach(function(callback){callback();});};}}else if(plyr.type==='vimeo'){// Vimeo needs an extra div to hide controls on desktop (which has full support)
if(plyr.supported.full){plyr.media.appendChild(container);}else{container=plyr.media;}// Set ID
container.setAttribute('id',id);// Load the API if not already
if(!_is.object(window.Vimeo)){_injectScript(config.urls.vimeo.api);// Wait for fragaloop load
var vimeoTimer=window.setInterval(function(){if(_is.object(window.Vimeo)){window.clearInterval(vimeoTimer);_vimeoReady(mediaId,container);}},50);}else{_vimeoReady(mediaId,container);}}else if(plyr.type==='soundcloud'){// TODO: Currently unsupported and undocumented
// Inject the iframe
var soundCloud=document.createElement('iframe');// Watch for iframe load
soundCloud.loaded=false;_on(soundCloud,'load',function(){soundCloud.loaded=true;});_setAttributes(soundCloud,{'src':'https://w.soundcloud.com/player/?url=https://api.soundcloud.com/tracks/'+mediaId,'id':id});container.appendChild(soundCloud);plyr.media.appendChild(container);// Load the API if not already
if(!window.SC){_injectScript(config.urls.soundcloud.api);}// Wait for SC load
var soundCloudTimer=window.setInterval(function(){if(window.SC&&soundCloud.loaded){window.clearInterval(soundCloudTimer);_soundcloudReady.call(soundCloud);}},50);}}// When embeds are ready
function _embedReady(){// Setup the UI and call ready if full support
if(plyr.supported.full){_setupInterface();_ready();}// Set title
_setTitle(_getElement('iframe'));}// Handle YouTube API ready
function _youTubeReady(videoId,container){// Setup instance
// https://developers.google.com/youtube/iframe_api_reference
plyr.embed=new window.YT.Player(container.id,{videoId:videoId,playerVars:{autoplay:config.autoplay?1:0,controls:plyr.supported.full?0:1,rel:0,showinfo:0,iv_load_policy:3,cc_load_policy:config.captions.defaultActive?1:0,cc_lang_pref:'en',wmode:'transparent',modestbranding:1,disablekb:1,origin:'*'// https://code.google.com/p/gdata-issues/issues/detail?id=5788#c45
},events:{'onError':function(event){_triggerEvent(plyr.container,'error',true,{code:event.data,embed:event.target});},'onReady':function(event){// Get the instance
var instance=event.target;// Create a faux HTML5 API using the YouTube API
plyr.media.play=function(){instance.playVideo();plyr.media.paused=false;};plyr.media.pause=function(){instance.pauseVideo();plyr.media.paused=true;};plyr.media.stop=function(){instance.stopVideo();plyr.media.paused=true;};plyr.media.duration=instance.getDuration();plyr.media.paused=true;plyr.media.currentTime=0;plyr.media.muted=instance.isMuted();// Set title
config.title=instance.getVideoData().title;// Set the tabindex
if(plyr.supported.full){plyr.media.querySelector('iframe').setAttribute('tabindex','-1');}// Update UI
_embedReady();// Trigger timeupdate
_triggerEvent(plyr.media,'timeupdate');// Trigger timeupdate
_triggerEvent(plyr.media,'durationchange');// Reset timer
window.clearInterval(timers.buffering);// Setup buffering
timers.buffering=window.setInterval(function(){// Get loaded % from YouTube
plyr.media.buffered=instance.getVideoLoadedFraction();// Trigger progress only when we actually buffer something
if(plyr.media.lastBuffered===null||plyr.media.lastBuffered<plyr.media.buffered){_triggerEvent(plyr.media,'progress');}// Set last buffer point
plyr.media.lastBuffered=plyr.media.buffered;// Bail if we're at 100%
if(plyr.media.buffered===1){window.clearInterval(timers.buffering);// Trigger event
_triggerEvent(plyr.media,'canplaythrough');}},200);},'onStateChange':function(event){// Get the instance
var instance=event.target;// Reset timer
window.clearInterval(timers.playing);// Handle events
// -1   Unstarted
// 0    Ended
// 1    Playing
// 2    Paused
// 3    Buffering
// 5    Video cued
switch(event.data){case 0:plyr.media.paused=true;_triggerEvent(plyr.media,'ended');break;case 1:plyr.media.paused=false;// If we were seeking, fire seeked event
if(plyr.media.seeking){_triggerEvent(plyr.media,'seeked');}plyr.media.seeking=false;_triggerEvent(plyr.media,'play');_triggerEvent(plyr.media,'playing');// Poll to get playback progress
timers.playing=window.setInterval(function(){// Set the current time
plyr.media.currentTime=instance.getCurrentTime();// Trigger timeupdate
_triggerEvent(plyr.media,'timeupdate');},100);// Check duration again due to YouTube bug
// https://github.com/Selz/plyr/issues/374
// https://code.google.com/p/gdata-issues/issues/detail?id=8690
if(plyr.media.duration!==instance.getDuration()){plyr.media.duration=instance.getDuration();_triggerEvent(plyr.media,'durationchange');}break;case 2:plyr.media.paused=true;_triggerEvent(plyr.media,'pause');break;}_triggerEvent(plyr.container,'statechange',false,{code:event.data});}}});}// Vimeo ready
function _vimeoReady(mediaId,container){// Setup instance
// https://github.com/vimeo/player.js
plyr.embed=new window.Vimeo.Player(container,{id:parseInt(mediaId),loop:config.loop,autoplay:config.autoplay,byline:false,portrait:false,title:false});// Create a faux HTML5 API using the Vimeo API
plyr.media.play=function(){plyr.embed.play();plyr.media.paused=false;};plyr.media.pause=function(){plyr.embed.pause();plyr.media.paused=true;};plyr.media.stop=function(){plyr.embed.stop();plyr.media.paused=true;};plyr.media.paused=true;plyr.media.currentTime=0;// Update UI
_embedReady();plyr.embed.getCurrentTime().then(function(value){plyr.media.currentTime=value;// Trigger timeupdate
_triggerEvent(plyr.media,'timeupdate');});plyr.embed.getDuration().then(function(value){plyr.media.duration=value;// Trigger timeupdate
_triggerEvent(plyr.media,'durationchange');});// TODO: Captions
/*if (config.captions.defaultActive) {
                plyr.embed.enableTextTrack('en');
            }*/plyr.embed.on('loaded',function(){// Fix keyboard focus issues
// https://github.com/Selz/plyr/issues/317
if(_is.htmlElement(plyr.embed.element)&&plyr.supported.full){plyr.embed.element.setAttribute('tabindex','-1');}});plyr.embed.on('play',function(){plyr.media.paused=false;_triggerEvent(plyr.media,'play');_triggerEvent(plyr.media,'playing');});plyr.embed.on('pause',function(){plyr.media.paused=true;_triggerEvent(plyr.media,'pause');});plyr.embed.on('timeupdate',function(data){plyr.media.seeking=false;plyr.media.currentTime=data.seconds;_triggerEvent(plyr.media,'timeupdate');});plyr.embed.on('progress',function(data){plyr.media.buffered=data.percent;_triggerEvent(plyr.media,'progress');if(parseInt(data.percent)===1){// Trigger event
_triggerEvent(plyr.media,'canplaythrough');}});plyr.embed.on('seeked',function(){plyr.media.seeking=false;_triggerEvent(plyr.media,'seeked');_triggerEvent(plyr.media,'play');});plyr.embed.on('ended',function(){plyr.media.paused=true;_triggerEvent(plyr.media,'ended');});}// Soundcloud ready
function _soundcloudReady(){/* jshint validthis: true */plyr.embed=window.SC.Widget(this);// Setup on ready
plyr.embed.bind(window.SC.Widget.Events.READY,function(){// Create a faux HTML5 API using the Soundcloud API
plyr.media.play=function(){plyr.embed.play();plyr.media.paused=false;};plyr.media.pause=function(){plyr.embed.pause();plyr.media.paused=true;};plyr.media.stop=function(){plyr.embed.seekTo(0);plyr.embed.pause();plyr.media.paused=true;};plyr.media.paused=true;plyr.media.currentTime=0;plyr.embed.getDuration(function(value){plyr.media.duration=value/1000;// Update UI
_embedReady();});plyr.embed.getPosition(function(value){plyr.media.currentTime=value;// Trigger timeupdate
_triggerEvent(plyr.media,'timeupdate');});plyr.embed.bind(window.SC.Widget.Events.PLAY,function(){plyr.media.paused=false;_triggerEvent(plyr.media,'play');_triggerEvent(plyr.media,'playing');});plyr.embed.bind(window.SC.Widget.Events.PAUSE,function(){plyr.media.paused=true;_triggerEvent(plyr.media,'pause');});plyr.embed.bind(window.SC.Widget.Events.PLAY_PROGRESS,function(data){plyr.media.seeking=false;plyr.media.currentTime=data.currentPosition/1000;_triggerEvent(plyr.media,'timeupdate');});plyr.embed.bind(window.SC.Widget.Events.LOAD_PROGRESS,function(data){plyr.media.buffered=data.loadProgress;_triggerEvent(plyr.media,'progress');if(parseInt(data.loadProgress)===1){// Trigger event
_triggerEvent(plyr.media,'canplaythrough');}});plyr.embed.bind(window.SC.Widget.Events.FINISH,function(){plyr.media.paused=true;_triggerEvent(plyr.media,'ended');});});}// Play media
function _play(){if('play'in plyr.media){plyr.media.play();}}// Pause media
function _pause(){if('pause'in plyr.media){plyr.media.pause();}}// Toggle playback
function _togglePlay(toggle){// True toggle
if(!_is.boolean(toggle)){toggle=plyr.media.paused;}if(toggle){_play();}else{_pause();}return toggle;}// Rewind
function _rewind(seekTime){// Use default if needed
if(!_is.number(seekTime)){seekTime=config.seekTime;}_seek(plyr.media.currentTime-seekTime);}// Fast forward
function _forward(seekTime){// Use default if needed
if(!_is.number(seekTime)){seekTime=config.seekTime;}_seek(plyr.media.currentTime+seekTime);}// Seek to time
// The input parameter can be an event or a number
function _seek(input){var targetTime=0,paused=plyr.media.paused,duration=_getDuration();if(_is.number(input)){targetTime=input;}else if(_is.object(input)&&_inArray(['input','change'],input.type)){// It's the seek slider
// Seek to the selected time
targetTime=input.target.value/input.target.max*duration;}// Normalise targetTime
if(targetTime<0){targetTime=0;}else if(targetTime>duration){targetTime=duration;}// Update seek range and progress
_updateSeekDisplay(targetTime);// Set the current time
// Try/catch incase the media isn't set and we're calling seek() from source() and IE moans
try{plyr.media.currentTime=targetTime.toFixed(4);}catch(e){}// Embeds
if(_inArray(config.types.embed,plyr.type)){switch(plyr.type){case'youtube':plyr.embed.seekTo(targetTime);break;case'vimeo':// Round to nearest second for vimeo
plyr.embed.setCurrentTime(targetTime.toFixed(0));break;case'soundcloud':plyr.embed.seekTo(targetTime*1000);break;}if(paused){_pause();}// Trigger timeupdate
_triggerEvent(plyr.media,'timeupdate');// Set seeking flag
plyr.media.seeking=true;// Trigger seeking
_triggerEvent(plyr.media,'seeking');}// Logging
_log('Seeking to '+plyr.media.currentTime+' seconds');// Special handling for 'manual' captions
_seekManualCaptions(targetTime);}// Get the duration (or custom if set)
function _getDuration(){// It should be a number, but parse it just incase
var duration=parseInt(config.duration),// True duration
mediaDuration=0;// Only if duration available
if(plyr.media.duration!==null&&!isNaN(plyr.media.duration)){mediaDuration=plyr.media.duration;}// If custom duration is funky, use regular duration
return isNaN(duration)?mediaDuration:duration;}// Check playing state
function _checkPlaying(){_toggleClass(plyr.container,config.classes.playing,!plyr.media.paused);_toggleClass(plyr.container,config.classes.stopped,plyr.media.paused);_toggleControls(plyr.media.paused);}// Save scroll position
function _saveScrollPosition(){scroll={x:window.pageXOffset||0,y:window.pageYOffset||0};}// Restore scroll position
function _restoreScrollPosition(){window.scrollTo(scroll.x,scroll.y);}// Toggle fullscreen
function _toggleFullscreen(event){// Check for native support
var nativeSupport=fullscreen.supportsFullScreen;if(nativeSupport){// If it's a fullscreen change event, update the UI
if(event&&event.type===fullscreen.fullScreenEventName){plyr.isFullscreen=fullscreen.isFullScreen(plyr.container);}else{// Else it's a user request to enter or exit
if(!fullscreen.isFullScreen(plyr.container)){// Save scroll position
_saveScrollPosition();// Request full screen
fullscreen.requestFullScreen(plyr.container);}else{// Bail from fullscreen
fullscreen.cancelFullScreen();}// Check if we're actually full screen (it could fail)
plyr.isFullscreen=fullscreen.isFullScreen(plyr.container);return;}}else{// Otherwise, it's a simple toggle
plyr.isFullscreen=!plyr.isFullscreen;// Bind/unbind escape key
document.body.style.overflow=plyr.isFullscreen?'hidden':'';}// Set class hook
_toggleClass(plyr.container,config.classes.fullscreen.active,plyr.isFullscreen);// Trap focus
_focusTrap(plyr.isFullscreen);// Set button state
if(plyr.buttons&&plyr.buttons.fullscreen){_toggleState(plyr.buttons.fullscreen,plyr.isFullscreen);}// Trigger an event
_triggerEvent(plyr.container,plyr.isFullscreen?'enterfullscreen':'exitfullscreen',true);// Restore scroll position
if(!plyr.isFullscreen&&nativeSupport){_restoreScrollPosition();}}// Mute
function _toggleMute(muted){// If the method is called without parameter, toggle based on current value
if(!_is.boolean(muted)){muted=!plyr.media.muted;}// Set button state
_toggleState(plyr.buttons.mute,muted);// Set mute on the player
plyr.media.muted=muted;// If volume is 0 after unmuting, set to default
if(plyr.media.volume===0){_setVolume(config.volume);}// Embeds
if(_inArray(config.types.embed,plyr.type)){// YouTube
switch(plyr.type){case'youtube':plyr.embed[plyr.media.muted?'mute':'unMute']();break;case'vimeo':case'soundcloud':plyr.embed.setVolume(plyr.media.muted?0:parseFloat(config.volume/config.volumeMax));break;}// Trigger volumechange for embeds
_triggerEvent(plyr.media,'volumechange');}}// Set volume
function _setVolume(volume){var max=config.volumeMax,min=config.volumeMin;// Load volume from storage if no value specified
if(_is.undefined(volume)){volume=plyr.storage.volume;}// Use config if all else fails
if(volume===null||isNaN(volume)){volume=config.volume;}// Maximum is volumeMax
if(volume>max){volume=max;}// Minimum is volumeMin
if(volume<min){volume=min;}// Set the player volume
plyr.media.volume=parseFloat(volume/max);// Set the display
if(plyr.volume.display){plyr.volume.display.value=volume;}// Embeds
if(_inArray(config.types.embed,plyr.type)){switch(plyr.type){case'youtube':plyr.embed.setVolume(plyr.media.volume*100);break;case'vimeo':case'soundcloud':plyr.embed.setVolume(plyr.media.volume);break;}// Trigger volumechange for embeds
_triggerEvent(plyr.media,'volumechange');}// Toggle muted state
if(volume===0){plyr.media.muted=true;}else if(plyr.media.muted&&volume>0){_toggleMute();}}// Increase volume
function _increaseVolume(step){var volume=plyr.media.muted?0:plyr.media.volume*config.volumeMax;if(!_is.number(step)){step=config.volumeStep;}_setVolume(volume+step);}// Decrease volume
function _decreaseVolume(step){var volume=plyr.media.muted?0:plyr.media.volume*config.volumeMax;if(!_is.number(step)){step=config.volumeStep;}_setVolume(volume-step);}// Update volume UI and storage
function _updateVolume(){// Get the current volume
var volume=plyr.media.muted?0:plyr.media.volume*config.volumeMax;// Update the <input type="range"> if present
if(plyr.supported.full){if(plyr.volume.input){plyr.volume.input.value=volume;}if(plyr.volume.display){plyr.volume.display.value=volume;}}// Update the volume in storage
_updateStorage({volume:volume});// Toggle class if muted
_toggleClass(plyr.container,config.classes.muted,volume===0);// Update checkbox for mute state
if(plyr.supported.full&&plyr.buttons.mute){_toggleState(plyr.buttons.mute,volume===0);}}// Toggle captions
function _toggleCaptions(show){// If there's no full support, or there's no caption toggle
if(!plyr.supported.full||!plyr.buttons.captions){return;}// If the method is called without parameter, toggle based on current value
if(!_is.boolean(show)){show=plyr.container.className.indexOf(config.classes.captions.active)===-1;}// Set global
plyr.captionsEnabled=show;// Toggle state
_toggleState(plyr.buttons.captions,plyr.captionsEnabled);// Add class hook
_toggleClass(plyr.container,config.classes.captions.active,plyr.captionsEnabled);// Trigger an event
_triggerEvent(plyr.container,plyr.captionsEnabled?'captionsenabled':'captionsdisabled',true);// Save captions state to localStorage
_updateStorage({captionsEnabled:plyr.captionsEnabled});}// Check if media is loading
function _checkLoading(event){var loading=event.type==='waiting';// Clear timer
clearTimeout(timers.loading);// Timer to prevent flicker when seeking
timers.loading=setTimeout(function(){// Toggle container class hook
_toggleClass(plyr.container,config.classes.loading,loading);// Show controls if loading, hide if done
_toggleControls(loading);},loading?250:0);}// Update <progress> elements
function _updateProgress(event){if(!plyr.supported.full){return;}var progress=plyr.progress.played,value=0,duration=_getDuration();if(event){switch(event.type){// Video playing
case'timeupdate':case'seeking':if(plyr.controls.pressed){return;}value=_getPercentage(plyr.media.currentTime,duration);// Set seek range value only if it's a 'natural' time event
if(event.type==='timeupdate'&&plyr.buttons.seek){plyr.buttons.seek.value=value;}break;// Check buffer status
case'playing':case'progress':progress=plyr.progress.buffer;value=function(){var buffered=plyr.media.buffered;if(buffered&&buffered.length){// HTML5
return _getPercentage(buffered.end(0),duration);}else if(_is.number(buffered)){// YouTube returns between 0 and 1
return buffered*100;}return 0;}();break;}}// Set values
_setProgress(progress,value);}// Set <progress> value
function _setProgress(progress,value){if(!plyr.supported.full){return;}// Default to 0
if(_is.undefined(value)){value=0;}// Default to buffer or bail
if(_is.undefined(progress)){if(plyr.progress&&plyr.progress.buffer){progress=plyr.progress.buffer;}else{return;}}// One progress element passed
if(_is.htmlElement(progress)){progress.value=value;}else if(progress){// Object of progress + text element
if(progress.bar){progress.bar.value=value;}if(progress.text){progress.text.innerHTML=value;}}}// Update the displayed time
function _updateTimeDisplay(time,element){// Bail if there's no duration display
if(!element){return;}// Fallback to 0
if(isNaN(time)){time=0;}plyr.secs=parseInt(time%60);plyr.mins=parseInt(time/60%60);plyr.hours=parseInt(time/60/60%60);// Do we need to display hours?
var displayHours=parseInt(_getDuration()/60/60%60)>0;// Ensure it's two digits. For example, 03 rather than 3.
plyr.secs=('0'+plyr.secs).slice(-2);plyr.mins=('0'+plyr.mins).slice(-2);// Render
element.innerHTML=(displayHours?plyr.hours+':':'')+plyr.mins+':'+plyr.secs;}// Show the duration on metadataloaded
function _displayDuration(){if(!plyr.supported.full){return;}// Determine duration
var duration=_getDuration()||0;// If there's only one time display, display duration there
if(!plyr.duration&&config.displayDuration&&plyr.media.paused){_updateTimeDisplay(duration,plyr.currentTime);}// If there's a duration element, update content
if(plyr.duration){_updateTimeDisplay(duration,plyr.duration);}// Update the tooltip (if visible)
_updateSeekTooltip();}// Handle time change event
function _timeUpdate(event){// Duration
_updateTimeDisplay(plyr.media.currentTime,plyr.currentTime);// Ignore updates while seeking
if(event&&event.type==='timeupdate'&&plyr.media.seeking){return;}// Playing progress
_updateProgress(event);}// Update seek range and progress
function _updateSeekDisplay(time){// Default to 0
if(!_is.number(time)){time=0;}var duration=_getDuration(),value=_getPercentage(time,duration);// Update progress
if(plyr.progress&&plyr.progress.played){plyr.progress.played.value=value;}// Update seek range input
if(plyr.buttons&&plyr.buttons.seek){plyr.buttons.seek.value=value;}}// Update hover tooltip for seeking
function _updateSeekTooltip(event){var duration=_getDuration();// Bail if setting not true
if(!config.tooltips.seek||!plyr.progress.container||duration===0){return;}// Calculate percentage
var clientRect=plyr.progress.container.getBoundingClientRect(),percent=0,visible=config.classes.tooltip+'--visible';// Determine percentage, if already visible
if(!event){if(_hasClass(plyr.progress.tooltip,visible)){percent=plyr.progress.tooltip.style.left.replace('%','');}else{return;}}else{percent=100/clientRect.width*(event.pageX-clientRect.left);}// Set bounds
if(percent<0){percent=0;}else if(percent>100){percent=100;}// Display the time a click would seek to
_updateTimeDisplay(duration/100*percent,plyr.progress.tooltip);// Set position
plyr.progress.tooltip.style.left=percent+"%";// Show/hide the tooltip
// If the event is a moues in/out and percentage is inside bounds
if(event&&_inArray(['mouseenter','mouseleave'],event.type)){_toggleClass(plyr.progress.tooltip,visible,event.type==='mouseenter');}}// Show the player controls in fullscreen mode
function _toggleControls(toggle){// Don't hide if config says not to, it's audio, or not ready or loading
if(!config.hideControls||plyr.type==='audio'){return;}var delay=0,isEnterFullscreen=false,show=toggle,loading=_hasClass(plyr.container,config.classes.loading);// Default to false if no boolean
if(!_is.boolean(toggle)){if(toggle&&toggle.type){// Is the enter fullscreen event
isEnterFullscreen=toggle.type==='enterfullscreen';// Whether to show controls
show=_inArray(['mousemove','touchstart','mouseenter','focus'],toggle.type);// Delay hiding on move events
if(_inArray(['mousemove','touchmove'],toggle.type)){delay=2000;}// Delay a little more for keyboard users
if(toggle.type==='focus'){delay=3000;}}else{show=_hasClass(plyr.container,config.classes.hideControls);}}// Clear timer every movement
window.clearTimeout(timers.hover);// If the mouse is not over the controls, set a timeout to hide them
if(show||plyr.media.paused||loading){_toggleClass(plyr.container,config.classes.hideControls,false);// Always show controls when paused or if touch
if(plyr.media.paused||loading){return;}// Delay for hiding on touch
if(plyr.browser.isTouch){delay=3000;}}// If toggle is false or if we're playing (regardless of toggle),
// then set the timer to hide the controls
if(!show||!plyr.media.paused){timers.hover=window.setTimeout(function(){// If the mouse is over the controls (and not entering fullscreen), bail
if((plyr.controls.pressed||plyr.controls.hover)&&!isEnterFullscreen){return;}_toggleClass(plyr.container,config.classes.hideControls,true);},delay);}}// Add common function to retrieve media source
function _source(source){// If not null or undefined, parse it
if(!_is.undefined(source)){_updateSource(source);return;}// Return the current source
var url;switch(plyr.type){case'youtube':url=plyr.embed.getVideoUrl();break;case'vimeo':plyr.embed.getVideoUrl.then(function(value){url=value;});break;case'soundcloud':plyr.embed.getCurrentSound(function(object){url=object.permalink_url;});break;default:url=plyr.media.currentSrc;break;}return url||'';}// Update source
// Sources are not checked for support so be careful
function _updateSource(source){if(!_is.object(source)||!('sources'in source)||!source.sources.length){_warn('Invalid source format');return;}// Remove ready class hook
_toggleClass(plyr.container,config.classes.ready,false);// Pause playback
_pause();// Update seek range and progress
_updateSeekDisplay();// Reset buffer progress
_setProgress();// Cancel current network requests
_cancelRequests();// Setup new source
function setup(){// Remove embed object
plyr.embed=null;// Remove the old media
_remove(plyr.media);// Remove video container
if(plyr.type==='video'&&plyr.videoContainer){_remove(plyr.videoContainer);}// Reset class name
if(plyr.container){plyr.container.removeAttribute('class');}// Set the type
if('type'in source){plyr.type=source.type;// Get child type for video (it might be an embed)
if(plyr.type==='video'){var firstSource=source.sources[0];if('type'in firstSource&&_inArray(config.types.embed,firstSource.type)){plyr.type=firstSource.type;}}}// Check for support
plyr.supported=supported(plyr.type);// Create new markup
switch(plyr.type){case'video':plyr.media=document.createElement('video');break;case'audio':plyr.media=document.createElement('audio');break;case'youtube':case'vimeo':case'soundcloud':plyr.media=document.createElement('div');plyr.embedId=source.sources[0].src;break;}// Inject the new element
_prependChild(plyr.container,plyr.media);// Autoplay the new source?
if(_is.boolean(source.autoplay)){config.autoplay=source.autoplay;}// Set attributes for audio and video
if(_inArray(config.types.html5,plyr.type)){if(config.crossorigin){plyr.media.setAttribute('crossorigin','');}if(config.autoplay){plyr.media.setAttribute('autoplay','');}if('poster'in source){plyr.media.setAttribute('poster',source.poster);}if(config.loop){plyr.media.setAttribute('loop','');}}// Restore class hooks
_toggleClass(plyr.container,config.classes.fullscreen.active,plyr.isFullscreen);_toggleClass(plyr.container,config.classes.captions.active,plyr.captionsEnabled);_toggleStyleHook();// Set new sources for html5
if(_inArray(config.types.html5,plyr.type)){_insertChildElements('source',source.sources);}// Set up from scratch
_setupMedia();// HTML5 stuff
if(_inArray(config.types.html5,plyr.type)){// Setup captions
if('tracks'in source){_insertChildElements('track',source.tracks);}// Load HTML5 sources
plyr.media.load();}// If HTML5 or embed but not fully supported, setupInterface and call ready now
if(_inArray(config.types.html5,plyr.type)||_inArray(config.types.embed,plyr.type)&&!plyr.supported.full){// Setup interface
_setupInterface();// Call ready
_ready();}// Set aria title and iframe title
config.title=source.title;_setTitle();}// Destroy instance adn wait for callback
// Vimeo throws a wobbly if you don't wait
_destroy(setup,false);}// Update poster
function _updatePoster(source){if(plyr.type==='video'){plyr.media.setAttribute('poster',source);}}// Listen for control events
function _controlListeners(){// IE doesn't support input event, so we fallback to change
var inputEvent=plyr.browser.isIE?'change':'input';// Click play/pause helper
function togglePlay(){var play=_togglePlay();// Determine which buttons
var trigger=plyr.buttons[play?'play':'pause'],target=plyr.buttons[play?'pause':'play'];// Get the last play button to account for the large play button
if(target&&target.length>1){target=target[target.length-1];}else{target=target[0];}// Setup focus and tab focus
if(target){var hadTabFocus=_hasClass(trigger,config.classes.tabFocus);setTimeout(function(){target.focus();if(hadTabFocus){_toggleClass(trigger,config.classes.tabFocus,false);_toggleClass(target,config.classes.tabFocus,true);}},100);}}// Get the focused element
function getFocusElement(){var focused=document.activeElement;if(!focused||focused===document.body){focused=null;}else{focused=document.querySelector(':focus');}return focused;}// Get the key code for an event
function getKeyCode(event){return event.keyCode?event.keyCode:event.which;}// Detect tab focus
function checkTabFocus(focused){for(var button in plyr.buttons){var element=plyr.buttons[button];if(_is.nodeList(element)){for(var i=0;i<element.length;i++){_toggleClass(element[i],config.classes.tabFocus,element[i]===focused);}}else{_toggleClass(element,config.classes.tabFocus,element===focused);}}}// Keyboard shortcuts
if(config.keyboardShorcuts.focused){var last=null;// Handle global presses
if(config.keyboardShorcuts.global){_on(window,'keydown keyup',function(event){var code=getKeyCode(event),focused=getFocusElement(),allowed=[48,49,50,51,52,53,54,56,57,75,77,70,67],count=get().length;// Only handle global key press if there's only one player
// and the key is in the allowed keys
// and if the focused element is not editable (e.g. text input)
// and any that accept key input http://webaim.org/techniques/keyboard/
if(count===1&&_inArray(allowed,code)&&(!_is.htmlElement(focused)||!_matches(focused,config.selectors.editable))){handleKey(event);}});}// Handle presses on focused
_on(plyr.container,'keydown keyup',handleKey);}function handleKey(event){var code=getKeyCode(event),pressed=event.type==='keydown',held=pressed&&code===last;// If the event is bubbled from the media element
// Firefox doesn't get the keycode for whatever reason
if(!_is.number(code)){return;}// Seek by the number keys
function seekByKey(){// Get current duration
var duration=plyr.media.duration;// Bail if we have no duration set
if(!_is.number(duration)){return;}// Divide the max duration into 10th's and times by the number value
_seek(duration/10*(code-48));}// Handle the key on keydown
// Reset on keyup
if(pressed){// Which keycodes should we prevent default
var preventDefault=[48,49,50,51,52,53,54,56,57,32,75,38,40,77,39,37,70,67];// If the code is found prevent default (e.g. prevent scrolling for arrows)
if(_inArray(preventDefault,code)){event.preventDefault();event.stopPropagation();}switch(code){// 0-9
case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:if(!held){seekByKey();}break;// Space and K key
case 32:case 75:if(!held){_togglePlay();}break;// Arrow up
case 38:_increaseVolume();break;// Arrow down
case 40:_decreaseVolume();break;// M key
case 77:if(!held){_toggleMute();}break;// Arrow forward
case 39:_forward();break;// Arrow back
case 37:_rewind();break;// F key
case 70:_toggleFullscreen();break;// C key
case 67:if(!held){_toggleCaptions();}break;}// Escape is handle natively when in full screen
// So we only need to worry about non native
if(!fullscreen.supportsFullScreen&&plyr.isFullscreen&&code===27){_toggleFullscreen();}// Store last code for next cycle
last=code;}else{last=null;}}// Focus/tab management
_on(window,'keyup',function(event){var code=getKeyCode(event),focused=getFocusElement();if(code===9){checkTabFocus(focused);}});_on(document.body,'click',function(){_toggleClass(_getElement('.'+config.classes.tabFocus),config.classes.tabFocus,false);});for(var button in plyr.buttons){var element=plyr.buttons[button];_on(element,'blur',function(){_toggleClass(element,'tab-focus',false);});}// Play
_proxyListener(plyr.buttons.play,'click',config.listeners.play,togglePlay);// Pause
_proxyListener(plyr.buttons.pause,'click',config.listeners.pause,togglePlay);// Restart
_proxyListener(plyr.buttons.restart,'click',config.listeners.restart,_seek);// Rewind
_proxyListener(plyr.buttons.rewind,'click',config.listeners.rewind,_rewind);// Fast forward
_proxyListener(plyr.buttons.forward,'click',config.listeners.forward,_forward);// Seek
_proxyListener(plyr.buttons.seek,inputEvent,config.listeners.seek,_seek);// Set volume
_proxyListener(plyr.volume.input,inputEvent,config.listeners.volume,function(){_setVolume(plyr.volume.input.value);});// Mute
_proxyListener(plyr.buttons.mute,'click',config.listeners.mute,_toggleMute);// Fullscreen
_proxyListener(plyr.buttons.fullscreen,'click',config.listeners.fullscreen,_toggleFullscreen);// Handle user exiting fullscreen by escaping etc
if(fullscreen.supportsFullScreen){_on(document,fullscreen.fullScreenEventName,_toggleFullscreen);}// Captions
_on(plyr.buttons.captions,'click',_toggleCaptions);// Seek tooltip
_on(plyr.progress.container,'mouseenter mouseleave mousemove',_updateSeekTooltip);// Toggle controls visibility based on mouse movement
if(config.hideControls){// Toggle controls on mouse events and entering fullscreen
_on(plyr.container,'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen',_toggleControls);// Watch for cursor over controls so they don't hide when trying to interact
_on(plyr.controls,'mouseenter mouseleave',function(event){plyr.controls.hover=event.type==='mouseenter';});// Watch for cursor over controls so they don't hide when trying to interact
_on(plyr.controls,'mousedown mouseup touchstart touchend touchcancel',function(event){plyr.controls.pressed=_inArray(['mousedown','touchstart'],event.type);});// Focus in/out on controls
_on(plyr.controls,'focus blur',_toggleControls,true);}// Adjust volume on scroll
_on(plyr.volume.input,'wheel',function(event){event.preventDefault();// Detect "natural" scroll - suppored on OS X Safari only
// Other browsers on OS X will be inverted until support improves
var inverted=event.webkitDirectionInvertedFromDevice,step=config.volumeStep/5;// Scroll down (or up on natural) to decrease
if(event.deltaY<0||event.deltaX>0){if(inverted){_decreaseVolume(step);}else{_increaseVolume(step);}}// Scroll up (or down on natural) to increase
if(event.deltaY>0||event.deltaX<0){if(inverted){_increaseVolume(step);}else{_decreaseVolume(step);}}});}// Listen for media events
function _mediaListeners(){// Time change on media
_on(plyr.media,'timeupdate seeking',_timeUpdate);// Update manual captions
_on(plyr.media,'timeupdate',_seekManualCaptions);// Display duration
_on(plyr.media,'durationchange loadedmetadata',_displayDuration);// Handle the media finishing
_on(plyr.media,'ended',function(){// Show poster on end
if(plyr.type==='video'&&config.showPosterOnEnd){// Clear
if(plyr.type==='video'){_setCaption();}// Restart
_seek();// Re-load media
plyr.media.load();}});// Check for buffer progress
_on(plyr.media,'progress playing',_updateProgress);// Handle native mute
_on(plyr.media,'volumechange',_updateVolume);// Handle native play/pause
_on(plyr.media,'play pause ended',_checkPlaying);// Loading
_on(plyr.media,'waiting canplay seeked',_checkLoading);// Click video
if(config.clickToPlay&&plyr.type!=='audio'){// Re-fetch the wrapper
var wrapper=_getElement('.'+config.classes.videoWrapper);// Bail if there's no wrapper (this should never happen)
if(!wrapper){return;}// Set cursor
wrapper.style.cursor="pointer";// On click play, pause ore restart
_on(wrapper,'click',function(){// Touch devices will just show controls (if we're hiding controls)
if(config.hideControls&&plyr.browser.isTouch&&!plyr.media.paused){return;}if(plyr.media.paused){_play();}else if(plyr.media.ended){_seek();_play();}else{_pause();}});}// Disable right click
if(config.disableContextMenu){_on(plyr.media,'contextmenu',function(event){event.preventDefault();});}// Proxy events to container
// Bubble up key events for Edge
_on(plyr.media,config.events.concat(['keyup','keydown']).join(' '),function(event){_triggerEvent(plyr.container,event.type,true);});}// Cancel current network requests
// See https://github.com/Selz/plyr/issues/174
function _cancelRequests(){if(!_inArray(config.types.html5,plyr.type)){return;}// Remove child sources
var sources=plyr.media.querySelectorAll('source');for(var i=0;i<sources.length;i++){_remove(sources[i]);}// Set blank video src attribute
// This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error
// Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection
plyr.media.setAttribute('src','https://cdn.selz.com/plyr/blank.mp4');// Load the new empty source
// This will cancel existing requests
// See https://github.com/Selz/plyr/issues/174
plyr.media.load();// Debugging
_log('Cancelled network requests');}// Destroy an instance
// Event listeners are removed when elements are removed
// http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory
function _destroy(callback,restore){// Bail if the element is not initialized
if(!plyr.init){return null;}// Type specific stuff
switch(plyr.type){case'youtube':// Clear timers
window.clearInterval(timers.buffering);window.clearInterval(timers.playing);// Destroy YouTube API
plyr.embed.destroy();// Clean up
cleanUp();break;case'vimeo':// Destroy Vimeo API
// then clean up (wait, to prevent postmessage errors)
plyr.embed.unload().then(cleanUp);// Vimeo does not always return
timers.cleanUp=window.setTimeout(cleanUp,200);break;case'video':case'audio':// Restore native video controls
_toggleNativeControls(true);// Clean up
cleanUp();break;}function cleanUp(){clearTimeout(timers.cleanUp);// Default to restore original element
if(!_is.boolean(restore)){restore=true;}// Callback
if(_is.function(callback)){callback.call(original);}// Bail if we don't need to restore the original element
if(!restore){return;}// Remove init flag
plyr.init=false;// Replace the container with the original element provided
plyr.container.parentNode.replaceChild(original,plyr.container);// Event
_triggerEvent(original,'destroyed',true);}}// Setup a player
function _init(){// Bail if the element is initialized
if(plyr.init){return null;}// Setup the fullscreen api
fullscreen=_fullscreen();// Sniff out the browser
plyr.browser=_browserSniff();// Bail if nothing to setup
if(!_is.htmlElement(plyr.media)){return;}// Load saved settings from localStorage
_setupStorage();// Set media type based on tag or data attribute
// Supported: video, audio, vimeo, youtube
var tagName=media.tagName.toLowerCase();if(tagName==='div'){plyr.type=media.getAttribute('data-type');plyr.embedId=media.getAttribute('data-video-id');// Clean up
media.removeAttribute('data-type');media.removeAttribute('data-video-id');}else{plyr.type=tagName;config.crossorigin=media.getAttribute('crossorigin')!==null;config.autoplay=config.autoplay||media.getAttribute('autoplay')!==null;config.loop=config.loop||media.getAttribute('loop')!==null;}// Check for support
plyr.supported=supported(plyr.type);// If no native support, bail
if(!plyr.supported.basic){return;}// Wrap media
plyr.container=_wrap(media,document.createElement('div'));// Allow focus to be captured
plyr.container.setAttribute('tabindex',0);// Add style hook
_toggleStyleHook();// Debug info
_log(''+plyr.browser.name+' '+plyr.browser.version);// Setup media
_setupMedia();// Setup interface
// If embed but not fully supported, setupInterface (to avoid flash of controls) and call ready now
if(_inArray(config.types.html5,plyr.type)||_inArray(config.types.embed,plyr.type)&&!plyr.supported.full){// Setup UI
_setupInterface();// Call ready
_ready();// Set title on button and frame
_setTitle();}// Successful setup
plyr.init=true;}// Setup the UI
function _setupInterface(){// Don't setup interface if no support
if(!plyr.supported.full){_warn('Basic support only',plyr.type);// Remove controls
_remove(_getElement(config.selectors.controls.wrapper));// Remove large play
_remove(_getElement(config.selectors.buttons.play));// Restore native controls
_toggleNativeControls(true);// Bail
return;}// Inject custom controls if not present
var controlsMissing=!_getElements(config.selectors.controls.wrapper).length;if(controlsMissing){// Inject custom controls
_injectControls();}// Find the elements
if(!_findElements()){return;}// If the controls are injected, re-bind listeners for controls
if(controlsMissing){_controlListeners();}// Media element listeners
_mediaListeners();// Remove native controls
_toggleNativeControls();// Setup fullscreen
_setupFullscreen();// Captions
_setupCaptions();// Set volume
_setVolume();_updateVolume();// Reset time display
_timeUpdate();// Update the UI
_checkPlaying();}api={getOriginal:function(){return original;},getContainer:function(){return plyr.container;},getEmbed:function(){return plyr.embed;},getMedia:function(){return plyr.media;},getType:function(){return plyr.type;},getDuration:_getDuration,getCurrentTime:function(){return plyr.media.currentTime;},getVolume:function(){return plyr.media.volume;},isMuted:function(){return plyr.media.muted;},isReady:function(){return _hasClass(plyr.container,config.classes.ready);},isLoading:function(){return _hasClass(plyr.container,config.classes.loading);},isPaused:function(){return plyr.media.paused;},on:function(event,callback){_on(plyr.container,event,callback);return this;},play:_play,pause:_pause,stop:function(){_pause();_seek();},restart:_seek,rewind:_rewind,forward:_forward,seek:_seek,source:_source,poster:_updatePoster,setVolume:_setVolume,togglePlay:_togglePlay,toggleMute:_toggleMute,toggleCaptions:_toggleCaptions,toggleFullscreen:_toggleFullscreen,toggleControls:_toggleControls,isFullscreen:function(){return plyr.isFullscreen||false;},support:function(mimeType){return _supportMime(plyr,mimeType);},destroy:_destroy};// Everything done
function _ready(){// Ready event at end of execution stack
window.setTimeout(function(){_triggerEvent(plyr.media,'ready');},0);// Set class hook on media element
_toggleClass(plyr.media,defaults.classes.setup,true);// Set container class for ready
_toggleClass(plyr.container,config.classes.ready,true);// Store a refernce to instance
plyr.media.plyr=api;// Autoplay
if(config.autoplay){_play();}}// Initialize instance
_init();// If init failed, return null
if(!plyr.init){return null;}return api;}// Load a sprite
function loadSprite(url,id){var x=new XMLHttpRequest();// If the id is set and sprite exists, bail
if(_is.string(id)&&_is.htmlElement(document.querySelector('#'+id))){return;}// Create placeholder (to prevent loading twice)
var container=document.createElement('div');container.setAttribute('hidden','');if(_is.string(id)){container.setAttribute('id',id);}document.body.insertBefore(container,document.body.childNodes[0]);// Check for CORS support
if('withCredentials'in x){x.open('GET',url,true);}else{return;}// Inject hidden div with sprite on load
x.onload=function(){container.innerHTML=x.responseText;};x.send();}// Check for support
function supported(type){var browser=_browserSniff(),isOldIE=browser.isIE&&browser.version<=9,isIos=browser.isIos,isIphone=/iPhone|iPod/i.test(navigator.userAgent),audio=!!document.createElement('audio').canPlayType,video=!!document.createElement('video').canPlayType,basic,full;switch(type){case'video':basic=video;full=basic&&!isOldIE&&!isIphone;break;case'audio':basic=audio;full=basic&&!isOldIE;break;case'vimeo':case'youtube':case'soundcloud':basic=true;full=!isOldIE&&!isIos;break;default:basic=audio&&video;full=basic&&!isOldIE;}return{basic:basic,full:full};}// Setup function
function setup(targets,options){// Get the players
var players=[],instances=[],selector=[defaults.selectors.html5,defaults.selectors.embed].join(',');// Select the elements
if(_is.string(targets)){// String selector passed
targets=document.querySelectorAll(targets);}else if(_is.htmlElement(targets)){// Single HTMLElement passed
targets=[targets];}else if(!_is.nodeList(targets)&&!_is.array(targets)&&!_is.string(targets)){// No selector passed, possibly options as first argument
// If options are the first argument
if(_is.undefined(options)&&_is.object(targets)){options=targets;}// Use default selector
targets=document.querySelectorAll(selector);}// Convert NodeList to array
if(_is.nodeList(targets)){targets=Array.prototype.slice.call(targets);}// Bail if disabled or no basic support
// You may want to disable certain UAs etc
if(!supported().basic||!targets.length){return false;}// Add to container list
function add(target,media){if(!_hasClass(media,defaults.classes.hook)){players.push({// Always wrap in a <div> for styling
//container:  _wrap(media, document.createElement('div')),
// Could be a container or the media itself
target:target,// This should be the <video>, <audio> or <div> (YouTube/Vimeo)
media:media});}}// Check if the targets have multiple media elements
for(var i=0;i<targets.length;i++){var target=targets[i];// Get children
var children=target.querySelectorAll(selector);// If there's more than one media element child, wrap them
if(children.length){for(var x=0;x<children.length;x++){add(target,children[x]);}}else if(_matches(target,selector)){// Target is media element
add(target,target);}}// Create a player instance for each element
players.forEach(function(player){var element=player.target,media=player.media,match=false;// The target element can also be the media element
if(media===element){match=true;}// Setup a player instance and add to the element
// Create instance-specific config
var data={};// Try parsing data attribute config
try{data=JSON.parse(element.getAttribute('data-plyr'));}catch(e){}var config=_extend({},defaults,options,data);// Bail if not enabled
if(!config.enabled){return null;}// Create new instance
var instance=new Plyr(media,config);// Go to next if setup failed
if(!_is.object(instance)){return;}// Listen for events if debugging
if(config.debug){var events=config.events.concat(['setup','statechange','enterfullscreen','exitfullscreen','captionsenabled','captionsdisabled']);_on(instance.getContainer(),events.join(' '),function(event){console.log([config.logPrefix,'event:',event.type].join(' '),event.detail.plyr);});}// Callback
_event(instance.getContainer(),'setup',true,{plyr:instance});// Add to return array even if it's already setup
instances.push(instance);});return instances;}// Get all instances within a provided container
function get(container){if(_is.string(container)){// Get selector if string passed
container=document.querySelector(container);}else if(_is.undefined(container)){// Use body by default to get all on page
container=document.body;}// If we have a HTML element
if(_is.htmlElement(container)){var elements=container.querySelectorAll('.'+defaults.classes.setup),instances=[];Array.prototype.slice.call(elements).forEach(function(element){if(_is.object(element.plyr)){instances.push(element.plyr);}});return instances;}return[];}return{setup:setup,supported:supported,loadSprite:loadSprite,get:get};});// Custom event polyfill
// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
(function(){if(typeof window.CustomEvent==='function'){return;}function CustomEvent(event,params){params=params||{bubbles:false,cancelable:false,detail:undefined};var evt=document.createEvent('CustomEvent');evt.initCustomEvent(event,params.bubbles,params.cancelable,params.detail);return evt;}CustomEvent.prototype=window.Event.prototype;window.CustomEvent=CustomEvent;})();
;/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.6.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
(function (factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }
})(function ($) {
    'use strict';

    var Slick = window.Slick || {};

    Slick = function () {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this,
                dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function (slider, i) {
                    return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

            _.registerBreakpoints();
            _.init(true);
        }

        return Slick;
    }();

    Slick.prototype.activateADA = function () {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });
    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {

        var _ = this;

        if (typeof index === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || index >= _.slideCount) {
            return false;
        }

        _.unload();

        if (typeof index === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.animateHeight = function () {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function (targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }
        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -_.currentLeft;
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function (now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' + now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' + now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function () {
                        if (callback) {
                            callback.call();
                        }
                    }
                });
            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function () {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }
            }
        }
    };

    Slick.prototype.getNavTarget = function () {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if (asNavFor && asNavFor !== null) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;
    };

    Slick.prototype.asNavFor = function (index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if (asNavFor !== null && typeof asNavFor === 'object') {
            asNavFor.each(function () {
                var target = $(this).slick('getSlick');
                if (!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }
    };

    Slick.prototype.applyTransition = function (slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.autoPlay = function () {

        var _ = this;

        _.autoPlayClear();

        if (_.slideCount > _.options.slidesToShow) {
            _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
        }
    };

    Slick.prototype.autoPlayClear = function () {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }
    };

    Slick.prototype.autoPlayIterator = function () {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if (!_.paused && !_.interrupted && !_.focussed) {

            if (_.options.infinite === false) {

                if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {
                    _.direction = 0;
                } else if (_.direction === 0) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if (_.currentSlide - 1 === 0) {
                        _.direction = 1;
                    }
                }
            }

            _.slideHandler(slideTo);
        }
    };

    Slick.prototype.buildArrows = function () {

        var _ = this;

        if (_.options.arrows === true) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if (_.slideCount > _.options.slidesToShow) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                }
            } else {

                _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({
                    'aria-disabled': 'true',
                    'tabindex': '-1'
                });
            }
        }
    };

    Slick.prototype.buildDots = function () {

        var _ = this,
            i,
            dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');
        }
    };

    Slick.prototype.buildOut = function () {

        var _ = this;

        _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }
    };

    Slick.prototype.buildRows = function () {

        var _ = this,
            a,
            b,
            c,
            newSlides,
            numOfSlides,
            originalSlides,
            slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if (_.options.rows > 1) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);

            for (a = 0; a < numOfSlides; a++) {
                var slide = document.createElement('div');
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children().css({
                'width': 100 / _.options.slidesPerRow + '%',
                'display': 'inline-block'
            });
        }
    };

    Slick.prototype.checkResponsive = function (initial, forceUpdate) {

        var _ = this,
            breakpoint,
            targetBreakpoint,
            respondToWidth,
            triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if (!initial && triggerBreakpoint !== false) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }
    };

    Slick.prototype.changeSlide = function (event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset,
            slideOffset,
            unevenOffset;

        // If target is a link, prevent default action.
        if ($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if (!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }
    };

    Slick.prototype.checkNavigable = function (index) {

        var _ = this,
            navigables,
            prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function () {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);
    };

    Slick.prototype.cleanUpSlideEvents = function () {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
    };

    Slick.prototype.cleanUpRows = function () {

        var _ = this,
            originalSlides;

        if (_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }
    };

    Slick.prototype.clickHandler = function (event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }
    };

    Slick.prototype.destroy = function (refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.$prevArrow.length) {

            _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }
        }

        if (_.$nextArrow && _.$nextArrow.length) {

            _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }
        }

        if (_.$slides) {

            _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {
                $(this).attr('style', $(this).data('originalStyling'));
            });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if (!refresh) {
            _.$slider.trigger('destroy', [_]);
        }
    };

    Slick.prototype.disableTransition = function (slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.fadeSlide = function (slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function () {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }
        }
    };

    Slick.prototype.fadeSlideOut = function (slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });
        }
    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.focusHandler = function () {

        var _ = this;

        _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*:not(.slick-arrow)', function (event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function () {

                if (_.options.pauseOnFocus) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }
            }, 0);
        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {

        var _ = this;
        return _.currentSlide;
    };

    Slick.prototype.getDotCount = function () {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if (!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        } else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;
    };

    Slick.prototype.getLeft = function (slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
                verticalOffset = verticalHeight * _.options.slidesToShow * -1;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
                        verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;
                    } else {
                        _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
                        verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
                verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
        } else {
            targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft = 0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft = 0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;
    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {

        var _ = this;

        return _.options[option];
    };

    Slick.prototype.getNavigableIndexes = function () {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;
    };

    Slick.prototype.getSlick = function () {

        return this;
    };

    Slick.prototype.getSlideCount = function () {

        var _ = this,
            slidesTraversed,
            swipedSlide,
            centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function (index, slide) {
                if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;
        } else {
            return _.options.slidesToScroll;
        }
    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);
    };

    Slick.prototype.init = function (creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();
        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if (_.options.autoplay) {

            _.paused = false;
            _.autoPlay();
        }
    };

    Slick.prototype.initADA = function () {
        var _ = this;
        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        _.$slideTrack.attr('role', 'listbox');

        _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {
            $(this).attr({
                'role': 'option',
                'aria-describedby': 'slick-slide' + _.instanceUid + i + ''
            });
        });

        if (_.$dots !== null) {
            _.$dots.attr('role', 'tablist').find('li').each(function (i) {
                $(this).attr({
                    'role': 'presentation',
                    'aria-selected': 'false',
                    'aria-controls': 'navigation' + _.instanceUid + i + '',
                    'id': 'slick-slide' + _.instanceUid + i + ''
                });
            }).first().attr('aria-selected', 'true').end().find('button').attr('role', 'button').end().closest('div').attr('role', 'toolbar');
        }
        _.activateADA();
    };

    Slick.prototype.initArrowEvents = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.off('click.slick').on('click.slick', {
                message: 'previous'
            }, _.changeSlide);
            _.$nextArrow.off('click.slick').on('click.slick', {
                message: 'next'
            }, _.changeSlide);
        }
    };

    Slick.prototype.initDotEvents = function () {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);
        }

        if (_.options.dots === true && _.options.pauseOnDotsHover === true) {

            $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initSlideEvents = function () {

        var _ = this;

        if (_.options.pauseOnHover) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initializeEvents = function () {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);
    };

    Slick.prototype.initUI = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();
        }
    };

    Slick.prototype.keyHandler = function (event) {

        var _ = this;
        //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' : 'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }
    };

    Slick.prototype.lazyLoad = function () {

        var _ = this,
            loadRange,
            cloneRange,
            rangeStart,
            rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function () {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function () {

                    image.animate({ opacity: 0 }, 100, function () {
                        image.attr('src', imageSource).animate({ opacity: 1 }, 200, function () {
                            image.removeAttr('data-lazy').removeClass('slick-loading');
                        });
                        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                    });
                };

                imageToLoad.onerror = function () {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);
                };

                imageToLoad.src = imageSource;
            });
        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }
    };

    Slick.prototype.loadSlider = function () {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }
    };

    Slick.prototype.next = Slick.prototype.slickNext = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });
    };

    Slick.prototype.orientationChange = function () {

        var _ = this;

        _.checkResponsive();
        _.setPosition();
    };

    Slick.prototype.pause = Slick.prototype.slickPause = function () {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;
    };

    Slick.prototype.play = Slick.prototype.slickPlay = function () {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;
    };

    Slick.prototype.postSlide = function (index) {

        var _ = this;

        if (!_.unslicked) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            _.setPosition();

            _.swipeLeft = null;

            if (_.options.autoplay) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();
            }
        }
    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });
    };

    Slick.prototype.preventDefault = function (event) {

        event.preventDefault();
    };

    Slick.prototype.progressiveLazyLoad = function (tryCount) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $('img[data-lazy]', _.$slider),
            image,
            imageSource,
            imageToLoad;

        if ($imgsToLoad.length) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function () {

                image.attr('src', imageSource).removeAttr('data-lazy').removeClass('slick-loading');

                if (_.options.adaptiveHeight === true) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                _.progressiveLazyLoad();
            };

            imageToLoad.onerror = function () {

                if (tryCount < 3) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout(function () {
                        _.progressiveLazyLoad(tryCount + 1);
                    }, 500);
                } else {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                    _.progressiveLazyLoad();
                }
            };

            imageToLoad.src = imageSource;
        } else {

            _.$slider.trigger('allImagesLoaded', [_]);
        }
    };

    Slick.prototype.refresh = function (initializing) {

        var _ = this,
            currentSlide,
            lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if (!initializing) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);
        }
    };

    Slick.prototype.registerBreakpoints = function () {

        var _ = this,
            breakpoint,
            currentBreakpoint,
            l,
            responsiveSettings = _.options.responsive || null;

        if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {

            _.respondTo = _.options.respondTo || 'window';

            for (breakpoint in responsiveSettings) {

                l = _.breakpoints.length - 1;
                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while (l >= 0) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
                }
            }

            _.breakpoints.sort(function (a, b) {
                return _.options.mobileFirst ? a - b : b - a;
            });
        }
    };

    Slick.prototype.reinit = function () {

        var _ = this;

        _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);
    };

    Slick.prototype.resize = function () {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function () {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) {
                    _.setPosition();
                }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {

        var _ = this;

        if (typeof index === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.setCSS = function (position) {

        var _ = this,
            positionProps = {},
            x,
            y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }
    };

    Slick.prototype.setDimensions = function () {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: '0px ' + _.options.centerPadding
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: _.options.centerPadding + ' 0px'
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();

        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));
        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
    };

    Slick.prototype.setFade = function () {

        var _ = this,
            targetLeft;

        _.$slides.each(function (index, element) {
            targetLeft = _.slideWidth * index * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });
    };

    Slick.prototype.setHeight = function () {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }
    };

    Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {

        /**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */

        var _ = this,
            l,
            item,
            option,
            value,
            refresh = false,
            type;

        if ($.type(arguments[0]) === 'object') {

            option = arguments[0];
            refresh = arguments[1];
            type = 'multiple';
        } else if ($.type(arguments[0]) === 'string') {

            option = arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {

                type = 'responsive';
            } else if (typeof arguments[1] !== 'undefined') {

                type = 'single';
            }
        }

        if (type === 'single') {

            _.options[option] = value;
        } else if (type === 'multiple') {

            $.each(option, function (opt, val) {

                _.options[opt] = val;
            });
        } else if (type === 'responsive') {

            for (item in value) {

                if ($.type(_.options.responsive) !== 'array') {

                    _.options.responsive = [value[item]];
                } else {

                    l = _.options.responsive.length - 1;

                    // loop through the responsive object and splice out duplicates.
                    while (l >= 0) {

                        if (_.options.responsive[l].breakpoint === value[item].breakpoint) {

                            _.options.responsive.splice(l, 1);
                        }

                        l--;
                    }

                    _.options.responsive.push(value[item]);
                }
            }
        }

        if (refresh) {

            _.unload();
            _.reinit();
        }
    };

    Slick.prototype.setPosition = function () {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);
    };

    Slick.prototype.setProps = function () {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if (_.options.fade) {
            if (typeof _.options.zIndex === 'number') {
                if (_.options.zIndex < 3) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;
    };

    Slick.prototype.setSlideClasses = function (index) {

        var _ = this,
            centerOffset,
            allSlides,
            indexOffset,
            remainder;

        allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');

        _.$slides.eq(index).addClass('slick-current');

        if (_.options.centerMode === true) {

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {

                    _.$slides.slice(index - centerOffset, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides.slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');
                }

                if (index === 0) {

                    allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');
                } else if (index === _.slideCount - 1) {

                    allSlides.eq(_.options.slidesToShow).addClass('slick-center');
                }
            }

            _.$slides.eq(index).addClass('slick-center');
        } else {

            if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {

                _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides.addClass('slick-active').attr('aria-hidden', 'false');
            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {

                    allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
                }
            }
        }

        if (_.options.lazyLoad === 'ondemand') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function () {

        var _ = this,
            i,
            slideIndex,
            infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
                    $(this).attr('id', '');
                });
            }
        }
    };

    Slick.prototype.interrupt = function (toggle) {

        var _ = this;

        if (!toggle) {
            _.autoPlay();
        }
        _.interrupted = toggle;
    };

    Slick.prototype.selectHandler = function (event) {

        var _ = this;

        var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.setSlideClasses(index);
            _.asNavFor(index);
            return;
        }

        _.slideHandler(index);
    };

    Slick.prototype.slideHandler = function (index, sync, dontAnimate) {

        var targetSlide,
            animSlide,
            oldSlide,
            slideLeft,
            targetLeft = null,
            _ = this,
            navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if (_.options.autoplay) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if (_.options.asNavFor) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if (navTarget.slideCount <= navTarget.options.slidesToShow) {
                navTarget.setSlideClasses(_.currentSlide);
            }
        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function () {
                    _.postSlide(animSlide);
                });
            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function () {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }
    };

    Slick.prototype.startLoad = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();
        }

        _.$slider.addClass('slick-loading');
    };

    Slick.prototype.swipeDirection = function () {

        var xDist,
            yDist,
            r,
            swipeAngle,
            _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return _.options.rtl === false ? 'right' : 'left';
        }
        if (_.options.verticalSwiping === true) {
            if (swipeAngle >= 35 && swipeAngle <= 135) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';
    };

    Slick.prototype.swipeEnd = function (event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.interrupted = false;
        _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;

        if (_.touchObject.curX === undefined) {
            return false;
        }

        if (_.touchObject.edgeHit === true) {
            _.$slider.trigger('edge', [_, _.swipeDirection()]);
        }

        if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {

            direction = _.swipeDirection();

            switch (direction) {

                case 'left':
                case 'down':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:

            }

            if (direction != 'vertical') {

                _.slideHandler(slideCount);
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction]);
            }
        } else {

            if (_.touchObject.startX !== _.touchObject.curX) {

                _.slideHandler(_.currentSlide);
                _.touchObject = {};
            }
        }
    };

    Slick.prototype.swipeHandler = function (event) {

        var _ = this;

        if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }
    };

    Slick.prototype.swipeMove = function (event) {

        var _ = this,
            edgeWasHit = false,
            curLeft,
            swipeDirection,
            swipeLength,
            positionOffset,
            touches;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
        }

        swipeDirection = _.swipeDirection();

        if (swipeDirection === 'vertical') {
            return;
        }

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }

        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);
    };

    Slick.prototype.swipeStart = function (event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;
    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.unload = function () {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');
    };

    Slick.prototype.unslick = function (fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();
    };

    Slick.prototype.updateArrows = function () {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            }
        }
    };

    Slick.prototype.updateDots = function () {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots.find('li').removeClass('slick-active').attr('aria-hidden', 'true');

            _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active').attr('aria-hidden', 'false');
        }
    };

    Slick.prototype.visibility = function () {

        var _ = this;

        if (_.options.autoplay) {

            if (document[_.hidden]) {

                _.interrupted = true;
            } else {

                _.interrupted = false;
            }
        }
    };

    $.fn.slick = function () {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };
});
;
$(window).bind(' load resize orientationChange ', function () {
  var footer = $("#footer-container");
  var pos = footer.position();
  var height = $(window).height();
  height = height - pos.top;
  height = height - footer.height() - 1;

  function stickyFooter() {
    footer.css({
      'margin-top': height + 'px'
    });
  }

  if (height > 0) {
    stickyFooter();
  }
});
;/* ===================================================
 * wiawUniversalAjax.js v1.0
 * ===================================================
 */
!function ($) {

	$(function () {

		// Click the button!
		$(".archive__load-more a").click(function () {

			// alert('say whaaa?');

			var url = $(this).attr('href'),
			    split_url = url.slice(0, -1).split('/'),
			    page_num = split_url[split_url.length - 1],
			    vars = {};

			if (isNaN(page_num)) {
				page_num = split_url[split_url.length - 2];
			}

			// Set up the correct vars
			if ($("#wiaw_taxonomy").length >= 1) {
				vars.taxonomy = $("#wiaw_taxonomy").val();
				vars.term_id = $("#wiaw_term_id").val();
			} else {
				vars.post_type = $("#wiaw_post_type").val();
			}

			console.log(split_url);
			console.log(vars);
			console.log(page_num);

			wiaw_get_more_posts(page_num, vars);

			return false;
		});

		// Get Posts AJAX Call
		function wiaw_get_more_posts(page_num, vars) {

			// Show the ajax loader
			$(".ajax-spinner").show();

			// make sure page_num is being read as an INT
			var page_num = parseInt(page_num);

			// Do the AJAX call
			$.ajax({
				url: js_vars.ajaxurl,
				type: 'post',
				data: {
					action: 'archive_load_more',
					page: page_num,
					data: vars
				},
				error: function (exception) {
					alert('Exeption:' + exception);
				},
				success: function (html) {

					// console.log(html);

					// If there were any results
					if (html != '') {

						// Update the next page URL
						var btn = $(".archive__load-more a"),
						    btn_url = btn.attr('href');

						btn_url = btn_url.slice(0, -1).split('/'), btn_url[btn_url.length - 1] = page_num + 1, btn_url = btn_url.join('/') + '/';

						btn.attr('href', btn_url);

						// Insert the HTML
						$("#ajax-before-me").before(html);

						QuickLookInit(); // added this so that the quicklook works after load more. See app.js function called QuickLookInit

						// No results
					} else {

						// say no posts
						$("#ajax-before-me").before('<div class="alert alert-warning"><p>No further results.</p></div>');

						// hide the next button
						$(".archive__load-more").hide();
					}

					// Hide the ajax loader
					$(".ajax-spinner").hide();
				}
			});
		};
	});
}(window.jQuery);
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndoYXQtaW5wdXQuanMiLCJmb3VuZGF0aW9uLmNvcmUuanMiLCJmb3VuZGF0aW9uLnV0aWwuYm94LmpzIiwiZm91bmRhdGlvbi51dGlsLmtleWJvYXJkLmpzIiwiZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnkuanMiLCJmb3VuZGF0aW9uLnV0aWwubW90aW9uLmpzIiwiZm91bmRhdGlvbi51dGlsLm5lc3QuanMiLCJmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlci5qcyIsImZvdW5kYXRpb24udXRpbC50b3VjaC5qcyIsImZvdW5kYXRpb24udXRpbC50cmlnZ2Vycy5qcyIsImZvdW5kYXRpb24uYWJpZGUuanMiLCJmb3VuZGF0aW9uLmFjY29yZGlvbi5qcyIsImZvdW5kYXRpb24uYWNjb3JkaW9uTWVudS5qcyIsImZvdW5kYXRpb24uZHJpbGxkb3duLmpzIiwiZm91bmRhdGlvbi5kcm9wZG93bi5qcyIsImZvdW5kYXRpb24uZHJvcGRvd25NZW51LmpzIiwiZm91bmRhdGlvbi5lcXVhbGl6ZXIuanMiLCJmb3VuZGF0aW9uLmludGVyY2hhbmdlLmpzIiwiZm91bmRhdGlvbi5tYWdlbGxhbi5qcyIsImZvdW5kYXRpb24ub2ZmY2FudmFzLmpzIiwiZm91bmRhdGlvbi5vcmJpdC5qcyIsImZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnUuanMiLCJmb3VuZGF0aW9uLnJlc3BvbnNpdmVUb2dnbGUuanMiLCJmb3VuZGF0aW9uLnJldmVhbC5qcyIsImZvdW5kYXRpb24uc2xpZGVyLmpzIiwiZm91bmRhdGlvbi5zdGlja3kuanMiLCJmb3VuZGF0aW9uLnRhYnMuanMiLCJmb3VuZGF0aW9uLnRvZ2dsZXIuanMiLCJmb3VuZGF0aW9uLnRvb2x0aXAuanMiLCJtb3Rpb24tdWkuanMiLCJmbGV4LXZpZGVvLmpzIiwiaW5pdC1mb3VuZGF0aW9uLmpzIiwiam95cmlkZS1kZW1vLmpzIiwianF1ZXJ5Lm1hZ25pZmljLXBvcHVwLmpzIiwib2ZmQ2FudmFzLmpzIiwicGx5ci5qcyIsInNsaWNrLmpzIiwic3RpY2t5Zm9vdGVyLmpzIiwid2lhd1VuaXZlcnNhbEFqYXguanMiXSwibmFtZXMiOlsid2luZG93Iiwid2hhdElucHV0IiwiYWN0aXZlS2V5cyIsImJvZHkiLCJidWZmZXIiLCJjdXJyZW50SW5wdXQiLCJub25UeXBpbmdJbnB1dHMiLCJtb3VzZVdoZWVsIiwiZGV0ZWN0V2hlZWwiLCJpZ25vcmVNYXAiLCJpbnB1dE1hcCIsImlucHV0VHlwZXMiLCJrZXlNYXAiLCJwb2ludGVyTWFwIiwidGltZXIiLCJldmVudEJ1ZmZlciIsImNsZWFyVGltZXIiLCJzZXRJbnB1dCIsImV2ZW50Iiwic2V0VGltZW91dCIsImJ1ZmZlcmVkRXZlbnQiLCJ1bkJ1ZmZlcmVkRXZlbnQiLCJjbGVhclRpbWVvdXQiLCJldmVudEtleSIsImtleSIsInZhbHVlIiwidHlwZSIsInBvaW50ZXJUeXBlIiwiZXZlbnRUYXJnZXQiLCJ0YXJnZXQiLCJldmVudFRhcmdldE5vZGUiLCJub2RlTmFtZSIsInRvTG93ZXJDYXNlIiwiZXZlbnRUYXJnZXRUeXBlIiwiZ2V0QXR0cmlidXRlIiwiaGFzQXR0cmlidXRlIiwiaW5kZXhPZiIsInN3aXRjaElucHV0IiwibG9nS2V5cyIsInN0cmluZyIsInNldEF0dHJpYnV0ZSIsInB1c2giLCJrZXlDb2RlIiwid2hpY2giLCJzcmNFbGVtZW50IiwidW5Mb2dLZXlzIiwiYXJyYXlQb3MiLCJzcGxpY2UiLCJiaW5kRXZlbnRzIiwiZG9jdW1lbnQiLCJQb2ludGVyRXZlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiTVNQb2ludGVyRXZlbnQiLCJjcmVhdGVFbGVtZW50Iiwib25tb3VzZXdoZWVsIiwidW5kZWZpbmVkIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJhc2siLCJrZXlzIiwidHlwZXMiLCJzZXQiLCIkIiwiRk9VTkRBVElPTl9WRVJTSU9OIiwiRm91bmRhdGlvbiIsInZlcnNpb24iLCJfcGx1Z2lucyIsIl91dWlkcyIsInJ0bCIsImF0dHIiLCJwbHVnaW4iLCJuYW1lIiwiY2xhc3NOYW1lIiwiZnVuY3Rpb25OYW1lIiwiYXR0ck5hbWUiLCJoeXBoZW5hdGUiLCJyZWdpc3RlclBsdWdpbiIsInBsdWdpbk5hbWUiLCJjb25zdHJ1Y3RvciIsInV1aWQiLCJHZXRZb0RpZ2l0cyIsIiRlbGVtZW50IiwiZGF0YSIsInRyaWdnZXIiLCJ1bnJlZ2lzdGVyUGx1Z2luIiwicmVtb3ZlQXR0ciIsInJlbW92ZURhdGEiLCJwcm9wIiwicmVJbml0IiwicGx1Z2lucyIsImlzSlEiLCJlYWNoIiwiX2luaXQiLCJfdGhpcyIsImZucyIsInBsZ3MiLCJmb3JFYWNoIiwicCIsImZvdW5kYXRpb24iLCJPYmplY3QiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJsZW5ndGgiLCJuYW1lc3BhY2UiLCJNYXRoIiwicm91bmQiLCJwb3ciLCJyYW5kb20iLCJ0b1N0cmluZyIsInNsaWNlIiwicmVmbG93IiwiZWxlbSIsImkiLCIkZWxlbSIsImZpbmQiLCJhZGRCYWNrIiwiJGVsIiwib3B0cyIsIndhcm4iLCJ0aGluZyIsInNwbGl0IiwiZSIsIm9wdCIsIm1hcCIsImVsIiwidHJpbSIsInBhcnNlVmFsdWUiLCJlciIsImdldEZuTmFtZSIsInRyYW5zaXRpb25lbmQiLCJ0cmFuc2l0aW9ucyIsImVuZCIsInQiLCJzdHlsZSIsInRyaWdnZXJIYW5kbGVyIiwidXRpbCIsInRocm90dGxlIiwiZnVuYyIsImRlbGF5IiwiY29udGV4dCIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsIm1ldGhvZCIsIiRtZXRhIiwiJG5vSlMiLCJhcHBlbmRUbyIsImhlYWQiLCJyZW1vdmVDbGFzcyIsIk1lZGlhUXVlcnkiLCJjYWxsIiwicGx1Z0NsYXNzIiwiUmVmZXJlbmNlRXJyb3IiLCJUeXBlRXJyb3IiLCJmbiIsIkRhdGUiLCJub3ciLCJnZXRUaW1lIiwidmVuZG9ycyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInZwIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibGFzdFRpbWUiLCJjYWxsYmFjayIsIm5leHRUaW1lIiwibWF4IiwicGVyZm9ybWFuY2UiLCJzdGFydCIsIkZ1bmN0aW9uIiwiYmluZCIsIm9UaGlzIiwiYUFyZ3MiLCJmVG9CaW5kIiwiZk5PUCIsImZCb3VuZCIsImNvbmNhdCIsImZ1bmNOYW1lUmVnZXgiLCJyZXN1bHRzIiwiZXhlYyIsInN0ciIsImlzTmFOIiwicGFyc2VGbG9hdCIsInJlcGxhY2UiLCJqUXVlcnkiLCJCb3giLCJJbU5vdFRvdWNoaW5nWW91IiwiR2V0RGltZW5zaW9ucyIsIkdldE9mZnNldHMiLCJlbGVtZW50IiwicGFyZW50IiwibHJPbmx5IiwidGJPbmx5IiwiZWxlRGltcyIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInBhckRpbXMiLCJvZmZzZXQiLCJoZWlnaHQiLCJ3aWR0aCIsIndpbmRvd0RpbXMiLCJhbGxEaXJzIiwiRXJyb3IiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFyUmVjdCIsInBhcmVudE5vZGUiLCJ3aW5SZWN0Iiwid2luWSIsInBhZ2VZT2Zmc2V0Iiwid2luWCIsInBhZ2VYT2Zmc2V0IiwicGFyZW50RGltcyIsImFuY2hvciIsInBvc2l0aW9uIiwidk9mZnNldCIsImhPZmZzZXQiLCJpc092ZXJmbG93IiwiJGVsZURpbXMiLCIkYW5jaG9yRGltcyIsImtleUNvZGVzIiwiY29tbWFuZHMiLCJLZXlib2FyZCIsImdldEtleUNvZGVzIiwicGFyc2VLZXkiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ0b1VwcGVyQ2FzZSIsInNoaWZ0S2V5IiwiY3RybEtleSIsImFsdEtleSIsImhhbmRsZUtleSIsImNvbXBvbmVudCIsImZ1bmN0aW9ucyIsImNvbW1hbmRMaXN0IiwiY21kcyIsImNvbW1hbmQiLCJsdHIiLCJleHRlbmQiLCJyZXR1cm5WYWx1ZSIsImhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJmaW5kRm9jdXNhYmxlIiwiZmlsdGVyIiwiaXMiLCJyZWdpc3RlciIsImNvbXBvbmVudE5hbWUiLCJrY3MiLCJrIiwia2MiLCJkZWZhdWx0UXVlcmllcyIsImxhbmRzY2FwZSIsInBvcnRyYWl0IiwicmV0aW5hIiwicXVlcmllcyIsImN1cnJlbnQiLCJzZWxmIiwiZXh0cmFjdGVkU3R5bGVzIiwiY3NzIiwibmFtZWRRdWVyaWVzIiwicGFyc2VTdHlsZVRvT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJfZ2V0Q3VycmVudFNpemUiLCJfd2F0Y2hlciIsImF0TGVhc3QiLCJzaXplIiwicXVlcnkiLCJnZXQiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsIm1hdGNoZWQiLCJvbiIsIm5ld1NpemUiLCJjdXJyZW50U2l6ZSIsInN0eWxlTWVkaWEiLCJtZWRpYSIsInNjcmlwdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5mbyIsImlkIiwiaW5zZXJ0QmVmb3JlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIm1hdGNoTWVkaXVtIiwidGV4dCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwidGV4dENvbnRlbnQiLCJzdHlsZU9iamVjdCIsInJlZHVjZSIsInJldCIsInBhcmFtIiwicGFydHMiLCJ2YWwiLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc0FycmF5IiwiaW5pdENsYXNzZXMiLCJhY3RpdmVDbGFzc2VzIiwiTW90aW9uIiwiYW5pbWF0ZUluIiwiYW5pbWF0aW9uIiwiY2IiLCJhbmltYXRlIiwiYW5pbWF0ZU91dCIsIk1vdmUiLCJkdXJhdGlvbiIsImFuaW0iLCJwcm9nIiwibW92ZSIsInRzIiwiaXNJbiIsImVxIiwiaW5pdENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJyZXNldCIsImFkZENsYXNzIiwic2hvdyIsIm9mZnNldFdpZHRoIiwib25lIiwiZmluaXNoIiwiaGlkZSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIk5lc3QiLCJGZWF0aGVyIiwibWVudSIsIml0ZW1zIiwic3ViTWVudUNsYXNzIiwic3ViSXRlbUNsYXNzIiwiaGFzU3ViQ2xhc3MiLCIkaXRlbSIsIiRzdWIiLCJjaGlsZHJlbiIsIkJ1cm4iLCJUaW1lciIsIm9wdGlvbnMiLCJuYW1lU3BhY2UiLCJyZW1haW4iLCJpc1BhdXNlZCIsInJlc3RhcnQiLCJpbmZpbml0ZSIsInBhdXNlIiwib25JbWFnZXNMb2FkZWQiLCJpbWFnZXMiLCJ1bmxvYWRlZCIsImNvbXBsZXRlIiwic2luZ2xlSW1hZ2VMb2FkZWQiLCJuYXR1cmFsV2lkdGgiLCJzcG90U3dpcGUiLCJlbmFibGVkIiwiZG9jdW1lbnRFbGVtZW50IiwicHJldmVudERlZmF1bHQiLCJtb3ZlVGhyZXNob2xkIiwidGltZVRocmVzaG9sZCIsInN0YXJ0UG9zWCIsInN0YXJ0UG9zWSIsInN0YXJ0VGltZSIsImVsYXBzZWRUaW1lIiwiaXNNb3ZpbmciLCJvblRvdWNoRW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uVG91Y2hNb3ZlIiwieCIsInRvdWNoZXMiLCJwYWdlWCIsInkiLCJwYWdlWSIsImR4IiwiZHkiLCJkaXIiLCJhYnMiLCJvblRvdWNoU3RhcnQiLCJpbml0IiwidGVhcmRvd24iLCJzcGVjaWFsIiwic3dpcGUiLCJzZXR1cCIsIm5vb3AiLCJhZGRUb3VjaCIsImhhbmRsZVRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJmaXJzdCIsImV2ZW50VHlwZXMiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJzaW11bGF0ZWRFdmVudCIsIk1vdXNlRXZlbnQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJNdXRhdGlvbk9ic2VydmVyIiwicHJlZml4ZXMiLCJ0cmlnZ2VycyIsInN0b3BQcm9wYWdhdGlvbiIsImZhZGVPdXQiLCJjaGVja0xpc3RlbmVycyIsImV2ZW50c0xpc3RlbmVyIiwicmVzaXplTGlzdGVuZXIiLCJzY3JvbGxMaXN0ZW5lciIsImNsb3NlbWVMaXN0ZW5lciIsInlldGlCb3hlcyIsInBsdWdOYW1lcyIsImxpc3RlbmVycyIsImpvaW4iLCJvZmYiLCJwbHVnaW5JZCIsIm5vdCIsImRlYm91bmNlIiwiJG5vZGVzIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiIsIm11dGF0aW9uUmVjb3Jkc0xpc3QiLCIkdGFyZ2V0IiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImF0dHJpYnV0ZUZpbHRlciIsIklIZWFyWW91IiwiQWJpZGUiLCJkZWZhdWx0cyIsIiRpbnB1dHMiLCJfZXZlbnRzIiwicmVzZXRGb3JtIiwidmFsaWRhdGVGb3JtIiwidmFsaWRhdGVPbiIsInZhbGlkYXRlSW5wdXQiLCJsaXZlVmFsaWRhdGUiLCJfcmVmbG93IiwicmVxdWlyZWRDaGVjayIsImlzR29vZCIsImNoZWNrZWQiLCJmaW5kRm9ybUVycm9yIiwiJGVycm9yIiwic2libGluZ3MiLCJmb3JtRXJyb3JTZWxlY3RvciIsImZpbmRMYWJlbCIsIiRsYWJlbCIsImNsb3Nlc3QiLCJmaW5kUmFkaW9MYWJlbHMiLCIkZWxzIiwibGFiZWxzIiwiYWRkRXJyb3JDbGFzc2VzIiwiJGZvcm1FcnJvciIsImxhYmVsRXJyb3JDbGFzcyIsImZvcm1FcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwicmVtb3ZlUmFkaW9FcnJvckNsYXNzZXMiLCJncm91cE5hbWUiLCIkbGFiZWxzIiwiJGZvcm1FcnJvcnMiLCJyZW1vdmVFcnJvckNsYXNzZXMiLCJjbGVhclJlcXVpcmUiLCJ2YWxpZGF0ZWQiLCJjdXN0b21WYWxpZGF0b3IiLCJ2YWxpZGF0b3IiLCJlcXVhbFRvIiwidmFsaWRhdGVSYWRpbyIsInZhbGlkYXRlVGV4dCIsIm1hdGNoVmFsaWRhdGlvbiIsInZhbGlkYXRvcnMiLCJnb29kVG9HbyIsIm1lc3NhZ2UiLCJhY2MiLCJub0Vycm9yIiwicGF0dGVybiIsImlucHV0VGV4dCIsInZhbGlkIiwicGF0dGVybnMiLCJSZWdFeHAiLCIkZ3JvdXAiLCJyZXF1aXJlZCIsImNsZWFyIiwidiIsIiRmb3JtIiwiZGVzdHJveSIsImFscGhhIiwiYWxwaGFfbnVtZXJpYyIsImludGVnZXIiLCJudW1iZXIiLCJjYXJkIiwiY3Z2IiwiZW1haWwiLCJ1cmwiLCJkb21haW4iLCJkYXRldGltZSIsImRhdGUiLCJ0aW1lIiwiZGF0ZUlTTyIsIm1vbnRoX2RheV95ZWFyIiwiZGF5X21vbnRoX3llYXIiLCJjb2xvciIsIkFjY29yZGlvbiIsIiR0YWJzIiwiaWR4IiwiJGNvbnRlbnQiLCJsaW5rSWQiLCIkaW5pdEFjdGl2ZSIsImRvd24iLCIkdGFiQ29udGVudCIsInRvZ2dsZSIsIm5leHQiLCIkYSIsImZvY3VzIiwibXVsdGlFeHBhbmQiLCJwcmV2aW91cyIsInByZXYiLCJoYXNDbGFzcyIsInVwIiwiZmlyc3RUaW1lIiwiJGN1cnJlbnRBY3RpdmUiLCJzbGlkZURvd24iLCJzbGlkZVNwZWVkIiwiJGF1bnRzIiwiYWxsb3dBbGxDbG9zZWQiLCJzbGlkZVVwIiwic3RvcCIsIkFjY29yZGlvbk1lbnUiLCJtdWx0aU9wZW4iLCIkbWVudUxpbmtzIiwic3ViSWQiLCJpc0FjdGl2ZSIsImluaXRQYW5lcyIsIiRzdWJtZW51IiwiJGVsZW1lbnRzIiwiJHByZXZFbGVtZW50IiwiJG5leHRFbGVtZW50IiwibWluIiwicGFyZW50cyIsIm9wZW4iLCJjbG9zZSIsImNsb3NlQWxsIiwiaGlkZUFsbCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInBhcmVudHNVbnRpbCIsImFkZCIsIiRtZW51cyIsIkRyaWxsZG93biIsIiRzdWJtZW51QW5jaG9ycyIsIiRzdWJtZW51cyIsIiRtZW51SXRlbXMiLCJfcHJlcGFyZU1lbnUiLCJfa2V5Ym9hcmRFdmVudHMiLCIkbGluayIsInBhcmVudExpbmsiLCJjbG9uZSIsInByZXBlbmRUbyIsIndyYXAiLCIkbWVudSIsIiRiYWNrIiwicHJlcGVuZCIsImJhY2tCdXR0b24iLCJfYmFjayIsIiR3cmFwcGVyIiwid3JhcHBlciIsIl9nZXRNYXhEaW1zIiwiX3Nob3ciLCJjbG9zZU9uQ2xpY2siLCIkYm9keSIsImNvbnRhaW5zIiwiX2hpZGVBbGwiLCJfaGlkZSIsInBhcmVudFN1Yk1lbnUiLCJfbWVudUxpbmtFdmVudHMiLCJibHVyIiwiYmlnZ2VzdCIsInJlc3VsdCIsInVud3JhcCIsInJlbW92ZSIsIkRyb3Bkb3duIiwiJGlkIiwiJGFuY2hvciIsInBvc2l0aW9uQ2xhc3MiLCJnZXRQb3NpdGlvbkNsYXNzIiwiY291bnRlciIsInVzZWRQb3NpdGlvbnMiLCJ2ZXJ0aWNhbFBvc2l0aW9uIiwibWF0Y2giLCJob3Jpem9udGFsUG9zaXRpb24iLCJfcmVwb3NpdGlvbiIsImNsYXNzQ2hhbmdlZCIsIl9zZXRQb3NpdGlvbiIsImRpcmVjdGlvbiIsImhvdmVyIiwidGltZW91dCIsImhvdmVyRGVsYXkiLCJob3ZlclBhbmUiLCJ2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMiLCJ0YWJfZm9yd2FyZCIsInRyYXBGb2N1cyIsInRhYl9iYWNrd2FyZCIsIl9hZGRCb2R5SGFuZGxlciIsImF1dG9Gb2N1cyIsIiRmb2N1c2FibGUiLCJjdXJQb3NpdGlvbkNsYXNzIiwiRHJvcGRvd25NZW51Iiwic3VicyIsInZlcnRpY2FsQ2xhc3MiLCJyaWdodENsYXNzIiwiYWxpZ25tZW50IiwiY2hhbmdlZCIsIl9pc1ZlcnRpY2FsIiwiaGFzVG91Y2giLCJvbnRvdWNoc3RhcnQiLCJwYXJDbGFzcyIsImhhbmRsZUNsaWNrRm4iLCJoYXNTdWIiLCJoYXNDbGlja2VkIiwiY2xpY2tPcGVuIiwiZm9yY2VGb2xsb3ciLCJjbG9zZU9uQ2xpY2tJbnNpZGUiLCJkaXNhYmxlSG92ZXIiLCJhdXRvY2xvc2UiLCJjbG9zaW5nVGltZSIsImlzVGFiIiwiaW5kZXgiLCJuZXh0U2libGluZyIsInByZXZTaWJsaW5nIiwib3BlblN1YiIsImNsb3NlU3ViIiwiJHNpYnMiLCJvbGRDbGFzcyIsIiRwYXJlbnRMaSIsIiR0b0Nsb3NlIiwic29tZXRoaW5nVG9DbG9zZSIsIkVxdWFsaXplciIsImVxSWQiLCIkd2F0Y2hlZCIsImhhc05lc3RlZCIsImlzTmVzdGVkIiwiaXNPbiIsIl9iaW5kSGFuZGxlciIsIm9uUmVzaXplTWVCb3VuZCIsIl9vblJlc2l6ZU1lIiwib25Qb3N0RXF1YWxpemVkQm91bmQiLCJfb25Qb3N0RXF1YWxpemVkIiwiaW1ncyIsInRvb1NtYWxsIiwiZXF1YWxpemVPbiIsIl9jaGVja01RIiwiX3BhdXNlRXZlbnRzIiwiX2tpbGxzd2l0Y2giLCJlcXVhbGl6ZU9uU3RhY2siLCJfaXNTdGFja2VkIiwiZXF1YWxpemVCeVJvdyIsImdldEhlaWdodHNCeVJvdyIsImFwcGx5SGVpZ2h0QnlSb3ciLCJnZXRIZWlnaHRzIiwiYXBwbHlIZWlnaHQiLCJoZWlnaHRzIiwibGVuIiwib2Zmc2V0SGVpZ2h0IiwibGFzdEVsVG9wT2Zmc2V0IiwiZ3JvdXBzIiwiZ3JvdXAiLCJlbE9mZnNldFRvcCIsImoiLCJsbiIsImdyb3Vwc0lMZW5ndGgiLCJsZW5KIiwiSW50ZXJjaGFuZ2UiLCJydWxlcyIsImN1cnJlbnRQYXRoIiwiX2FkZEJyZWFrcG9pbnRzIiwiX2dlbmVyYXRlUnVsZXMiLCJydWxlIiwicGF0aCIsIlNQRUNJQUxfUVVFUklFUyIsInJ1bGVzTGlzdCIsInJlc3BvbnNlIiwiaHRtbCIsIk1hZ2VsbGFuIiwiJHRhcmdldHMiLCIkbGlua3MiLCIkYWN0aXZlIiwic2Nyb2xsUG9zIiwicGFyc2VJbnQiLCJjYWxjUG9pbnRzIiwicG9pbnRzIiwid2luSGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJkb2NIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCIkdGFyIiwicHQiLCJ0aHJlc2hvbGQiLCJ0YXJnZXRQb2ludCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiZWFzaW5nIiwiYW5pbWF0aW9uRWFzaW5nIiwiZGVlcExpbmtpbmciLCJsb2NhdGlvbiIsImhhc2giLCJzY3JvbGxUb0xvYyIsIl91cGRhdGVBY3RpdmUiLCJhcnJpdmFsIiwibG9jIiwiYmFyT2Zmc2V0Iiwic2Nyb2xsVG9wIiwid2luUG9zIiwiY3VySWR4IiwiaXNEb3duIiwiY3VyVmlzaWJsZSIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJPZmZDYW52YXMiLCIkbGFzdFRyaWdnZXIiLCIkdHJpZ2dlcnMiLCIkZXhpdGVyIiwiZXhpdGVyIiwiYXBwZW5kIiwiaXNSZXZlYWxlZCIsInJldmVhbENsYXNzIiwicmV2ZWFsT24iLCJfc2V0TVFDaGVja2VyIiwidHJhbnNpdGlvblRpbWUiLCJfaGFuZGxlS2V5Ym9hcmQiLCJyZXZlYWwiLCIkY2xvc2VyIiwiZm9yY2VUb3AiLCJfdHJhcEZvY3VzIiwiZm9jdXNhYmxlIiwibGFzdCIsIk9yYml0IiwiY29udGFpbmVyQ2xhc3MiLCIkc2xpZGVzIiwic2xpZGVDbGFzcyIsIiRpbWFnZXMiLCJpbml0QWN0aXZlIiwidXNlTVVJIiwiX3ByZXBhcmVGb3JPcmJpdCIsImJ1bGxldHMiLCJfbG9hZEJ1bGxldHMiLCJhdXRvUGxheSIsImdlb1N5bmMiLCJhY2Nlc3NpYmxlIiwiJGJ1bGxldHMiLCJib3hPZkJ1bGxldHMiLCJ0aW1lckRlbGF5IiwiY2hhbmdlU2xpZGUiLCJfc2V0V3JhcHBlckhlaWdodCIsIl9zZXRTbGlkZUhlaWdodCIsInRlbXAiLCJwYXVzZU9uSG92ZXIiLCJuYXZCdXR0b25zIiwiJGNvbnRyb2xzIiwibmV4dENsYXNzIiwicHJldkNsYXNzIiwiJHNsaWRlIiwiaXNMVFIiLCJjaG9zZW5TbGlkZSIsIiRjdXJTbGlkZSIsIiRmaXJzdFNsaWRlIiwiJGxhc3RTbGlkZSIsImRpckluIiwiZGlyT3V0IiwiJG5ld1NsaWRlIiwiaW5maW5pdGVXcmFwIiwiX3VwZGF0ZUJ1bGxldHMiLCIkb2xkQnVsbGV0Iiwic3BhbiIsImRldGFjaCIsIiRuZXdCdWxsZXQiLCJhbmltSW5Gcm9tUmlnaHQiLCJhbmltT3V0VG9SaWdodCIsImFuaW1JbkZyb21MZWZ0IiwiYW5pbU91dFRvTGVmdCIsIlJlc3BvbnNpdmVNZW51IiwiY3VycmVudE1xIiwiY3VycmVudFBsdWdpbiIsInJ1bGVzVHJlZSIsInJ1bGVTaXplIiwicnVsZVBsdWdpbiIsIk1lbnVQbHVnaW5zIiwiaXNFbXB0eU9iamVjdCIsIl9jaGVja01lZGlhUXVlcmllcyIsIm1hdGNoZWRNcSIsImNzc0NsYXNzIiwiZHJvcGRvd24iLCJkcmlsbGRvd24iLCJhY2NvcmRpb24iLCJSZXNwb25zaXZlVG9nZ2xlIiwidGFyZ2V0SUQiLCIkdGFyZ2V0TWVudSIsIiR0b2dnbGVyIiwiX3VwZGF0ZSIsIl91cGRhdGVNcUhhbmRsZXIiLCJ0b2dnbGVNZW51IiwiaGlkZUZvciIsIlJldmVhbCIsImNhY2hlZCIsIm1xIiwiaXNNb2JpbGUiLCJtb2JpbGVTbmlmZiIsImZ1bGxTY3JlZW4iLCJvdmVybGF5IiwiJG92ZXJsYXkiLCJfbWFrZU92ZXJsYXkiLCJkZWVwTGluayIsIl91cGRhdGVQb3NpdGlvbiIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIm1hcmdpbiIsIl9oYW5kbGVTdGF0ZSIsIm11bHRpcGxlT3BlbmVkIiwiYW5pbWF0aW9uSW4iLCJhZnRlckFuaW1hdGlvbkZvY3VzIiwiZm9jdXNhYmxlRWxlbWVudHMiLCJzaG93RGVsYXkiLCJvcmlnaW5hbFNjcm9sbFBvcyIsIl9leHRyYUhhbmRsZXJzIiwiY2xvc2VPbkVzYyIsImFuaW1hdGlvbk91dCIsImZpbmlzaFVwIiwiaGlkZURlbGF5IiwicmVzZXRPbkNsb3NlIiwicmVwbGFjZVN0YXRlIiwidGl0bGUiLCJwYXRobmFtZSIsImJ0bU9mZnNldFBjdCIsImlQaG9uZVNuaWZmIiwiYW5kcm9pZFNuaWZmIiwiU2xpZGVyIiwiaW5wdXRzIiwiaGFuZGxlcyIsIiRoYW5kbGUiLCIkaW5wdXQiLCIkZmlsbCIsInZlcnRpY2FsIiwiaXNEYmwiLCJkaXNhYmxlZCIsImRpc2FibGVkQ2xhc3MiLCJiaW5kaW5nIiwiX3NldEluaXRBdHRyIiwiZG91YmxlU2lkZWQiLCIkaGFuZGxlMiIsIiRpbnB1dDIiLCJfc2V0SGFuZGxlUG9zIiwiaW5pdGlhbFN0YXJ0IiwiaW5pdGlhbEVuZCIsIiRobmRsIiwibm9JbnZlcnQiLCJoMlZhbCIsInN0ZXAiLCJoMVZhbCIsInZlcnQiLCJoT3JXIiwibE9yVCIsImhhbmRsZURpbSIsImVsZW1EaW0iLCJwY3RPZkJhciIsInBlcmNlbnQiLCJ0b0ZpeGVkIiwicHhUb01vdmUiLCJtb3ZlbWVudCIsImRlY2ltYWwiLCJfc2V0VmFsdWVzIiwiaXNMZWZ0SG5kbCIsImRpbSIsImhhbmRsZVBjdCIsImhhbmRsZVBvcyIsIm1vdmVUaW1lIiwiY2hhbmdlZERlbGF5IiwiX2hhbmRsZUV2ZW50IiwiaGFzVmFsIiwiZXZlbnRPZmZzZXQiLCJoYWxmT2ZIYW5kbGUiLCJiYXJEaW0iLCJ3aW5kb3dTY3JvbGwiLCJzY3JvbGxMZWZ0IiwiZWxlbU9mZnNldCIsImV2ZW50RnJvbUJhciIsImJhclhZIiwib2Zmc2V0UGN0IiwiX2FkanVzdFZhbHVlIiwiZmlyc3RIbmRsUG9zIiwiYWJzUG9zaXRpb24iLCJzZWNuZEhuZGxQb3MiLCJkaXYiLCJwcmV2X3ZhbCIsIm5leHRfdmFsIiwiY3VySGFuZGxlIiwiY2xpY2tTZWxlY3QiLCJkcmFnZ2FibGUiLCJjdXJyZW50VGFyZ2V0IiwiXyRoYW5kbGUiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiZGVjcmVhc2UiLCJpbmNyZWFzZSIsImRlY3JlYXNlX2Zhc3QiLCJpbmNyZWFzZV9mYXN0IiwiaW52ZXJ0VmVydGljYWwiLCJmcmFjIiwibnVtIiwiY2xpY2tQb3MiLCJTdGlja3kiLCIkcGFyZW50Iiwid2FzV3JhcHBlZCIsIiRjb250YWluZXIiLCJjb250YWluZXIiLCJ3cmFwSW5uZXIiLCJzdGlja3lDbGFzcyIsInNjcm9sbENvdW50IiwiY2hlY2tFdmVyeSIsImlzU3R1Y2siLCJjb250YWluZXJIZWlnaHQiLCJlbGVtSGVpZ2h0IiwiX3BhcnNlUG9pbnRzIiwiX3NldFNpemVzIiwiX2NhbGMiLCJyZXZlcnNlIiwidG9wQW5jaG9yIiwiYnRtIiwiYnRtQW5jaG9yIiwicHRzIiwiYnJlYWtzIiwicGxhY2UiLCJjYW5TdGljayIsIl9wYXVzZUxpc3RlbmVycyIsImNoZWNrU2l6ZXMiLCJzY3JvbGwiLCJfcmVtb3ZlU3RpY2t5IiwidG9wUG9pbnQiLCJib3R0b21Qb2ludCIsIl9zZXRTdGlja3kiLCJzdGlja1RvIiwibXJnbiIsIm5vdFN0dWNrVG8iLCJpc1RvcCIsInN0aWNrVG9Ub3AiLCJhbmNob3JQdCIsImFuY2hvckhlaWdodCIsInRvcE9yQm90dG9tIiwic3RpY2t5T24iLCJuZXdFbGVtV2lkdGgiLCJjb21wIiwicGRuZyIsIm5ld0NvbnRhaW5lckhlaWdodCIsIl9zZXRCcmVha1BvaW50cyIsIm1Ub3AiLCJlbUNhbGMiLCJtYXJnaW5Ub3AiLCJtQnRtIiwibWFyZ2luQm90dG9tIiwiZW0iLCJmb250U2l6ZSIsIlRhYnMiLCIkdGFiVGl0bGVzIiwibGlua0NsYXNzIiwibWF0Y2hIZWlnaHQiLCJfc2V0SGVpZ2h0IiwiX2FkZEtleUhhbmRsZXIiLCJfYWRkQ2xpY2tIYW5kbGVyIiwiX3NldEhlaWdodE1xSGFuZGxlciIsIl9oYW5kbGVUYWJDaGFuZ2UiLCIkZmlyc3RUYWIiLCIkbGFzdFRhYiIsIndyYXBPbktleXMiLCIkdGFiTGluayIsIiR0YXJnZXRDb250ZW50IiwiJG9sZFRhYiIsInNlbGVjdFRhYiIsImlkU3RyIiwicGFuZWxDbGFzcyIsInBhbmVsIiwiY2hlY2tDbGFzcyIsIlRvZ2dsZXIiLCJpbnB1dCIsIl90b2dnbGVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiX3VwZGF0ZUFSSUEiLCJfdG9nZ2xlQW5pbWF0ZSIsIlRvb2x0aXAiLCJpc0NsaWNrIiwiZWxlbUlkIiwiX2dldFBvc2l0aW9uQ2xhc3MiLCJ0aXBUZXh0IiwidGVtcGxhdGUiLCJfYnVpbGRUZW1wbGF0ZSIsInRyaWdnZXJDbGFzcyIsInRlbXBsYXRlQ2xhc3NlcyIsInRvb2x0aXBDbGFzcyIsIiR0ZW1wbGF0ZSIsIiR0aXBEaW1zIiwic2hvd09uIiwiZmFkZUluIiwiZmFkZUluRHVyYXRpb24iLCJmYWRlT3V0RHVyYXRpb24iLCJpc0ZvY3VzIiwiZGlzYWJsZUZvclRvdWNoIiwidG91Y2hDbG9zZVRleHQiLCJlbmRFdmVudCIsIk1vdGlvblVJIiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJyZXF1aXJlIiwiWmVwdG8iLCJDTE9TRV9FVkVOVCIsIkJFRk9SRV9DTE9TRV9FVkVOVCIsIkFGVEVSX0NMT1NFX0VWRU5UIiwiQkVGT1JFX0FQUEVORF9FVkVOVCIsIk1BUktVUF9QQVJTRV9FVkVOVCIsIk9QRU5fRVZFTlQiLCJDSEFOR0VfRVZFTlQiLCJOUyIsIkVWRU5UX05TIiwiUkVBRFlfQ0xBU1MiLCJSRU1PVklOR19DTEFTUyIsIlBSRVZFTlRfQ0xPU0VfQ0xBU1MiLCJtZnAiLCJNYWduaWZpY1BvcHVwIiwiX2lzSlEiLCJfcHJldlN0YXR1cyIsIl93aW5kb3ciLCJfZG9jdW1lbnQiLCJfcHJldkNvbnRlbnRUeXBlIiwiX3dyYXBDbGFzc2VzIiwiX2N1cnJQb3B1cFR5cGUiLCJfbWZwT24iLCJmIiwiZXYiLCJfZ2V0RWwiLCJyYXciLCJpbm5lckhUTUwiLCJhcHBlbmRDaGlsZCIsIl9tZnBUcmlnZ2VyIiwic3QiLCJjYWxsYmFja3MiLCJjaGFyQXQiLCJfZ2V0Q2xvc2VCdG4iLCJjdXJyVGVtcGxhdGUiLCJjbG9zZUJ0biIsImNsb3NlTWFya3VwIiwidENsb3NlIiwiX2NoZWNrSW5zdGFuY2UiLCJtYWduaWZpY1BvcHVwIiwiaW5zdGFuY2UiLCJzdXBwb3J0c1RyYW5zaXRpb25zIiwicyIsInBvcCIsImFwcFZlcnNpb24iLCJpc0xvd0lFIiwiaXNJRTgiLCJhbGwiLCJpc0FuZHJvaWQiLCJpc0lPUyIsInN1cHBvcnRzVHJhbnNpdGlvbiIsInByb2JhYmx5TW9iaWxlIiwicG9wdXBzQ2FjaGUiLCJpc09iaiIsInRvQXJyYXkiLCJpdGVtIiwicGFyc2VkIiwiaXNPcGVuIiwidXBkYXRlSXRlbUhUTUwiLCJtYWluRWwiLCJmaXhlZENvbnRlbnRQb3MiLCJtb2RhbCIsImNsb3NlT25Db250ZW50Q2xpY2siLCJjbG9zZU9uQmdDbGljayIsInNob3dDbG9zZUJ0biIsImVuYWJsZUVzY2FwZUtleSIsImJnT3ZlcmxheSIsIl9jaGVja0lmQ2xvc2UiLCJjb250ZW50Q29udGFpbmVyIiwicHJlbG9hZGVyIiwidExvYWRpbmciLCJtb2R1bGVzIiwibiIsImNsb3NlQnRuSW5zaWRlIiwidmFsdWVzIiwiY2xvc2VfcmVwbGFjZVdpdGgiLCJhbGlnblRvcCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwiZml4ZWRCZ1BvcyIsInVwZGF0ZVNpemUiLCJ3aW5kb3dIZWlnaHQiLCJ3SCIsIndpbmRvd1N0eWxlcyIsIl9oYXNTY3JvbGxCYXIiLCJfZ2V0U2Nyb2xsYmFyU2l6ZSIsIm1hcmdpblJpZ2h0IiwiaXNJRTciLCJjbGFzc2VzVG9hZGQiLCJtYWluQ2xhc3MiLCJfYWRkQ2xhc3NUb01GUCIsIl9sYXN0Rm9jdXNlZEVsIiwiYWN0aXZlRWxlbWVudCIsImNvbnRlbnQiLCJfc2V0Rm9jdXMiLCJfb25Gb2N1c0luIiwicmVtb3ZhbERlbGF5IiwiX2Nsb3NlIiwiY2xhc3Nlc1RvUmVtb3ZlIiwiZW1wdHkiLCJfcmVtb3ZlQ2xhc3NGcm9tTUZQIiwiY3Vyckl0ZW0iLCJhdXRvRm9jdXNMYXN0IiwicHJldkhlaWdodCIsInpvb21MZXZlbCIsImNsaWVudFdpZHRoIiwiaW5uZXJXaWR0aCIsInBhcnNlRWwiLCJtYXJrdXAiLCJuZXdDb250ZW50IiwiYXBwZW5kQ29udGVudCIsInByZWxvYWRlZCIsInRhZ05hbWUiLCJzcmMiLCJhZGRHcm91cCIsImVIYW5kbGVyIiwibWZwRWwiLCJfb3BlbkNsaWNrIiwiZU5hbWUiLCJkZWxlZ2F0ZSIsIm1pZENsaWNrIiwibWV0YUtleSIsImRpc2FibGVPbiIsImlzRnVuY3Rpb24iLCJ1cGRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjbG9zZU9uQ29udGVudCIsImNsb3NlT25CZyIsImNOYW1lIiwiX3BhcnNlTWFya3VwIiwiYXJyIiwicmVwbGFjZVdpdGgiLCJzY3JvbGxiYXJTaXplIiwic2Nyb2xsRGl2IiwicmVtb3ZlQ2hpbGQiLCJwcm90byIsInJlZ2lzdGVyTW9kdWxlIiwibW9kdWxlIiwianFFbCIsIml0ZW1PcHRzIiwiSU5MSU5FX05TIiwiX2hpZGRlbkNsYXNzIiwiX2lubGluZVBsYWNlaG9sZGVyIiwiX2xhc3RJbmxpbmVFbGVtZW50IiwiX3B1dElubGluZUVsZW1lbnRzQmFjayIsImFmdGVyIiwiaGlkZGVuQ2xhc3MiLCJ0Tm90Rm91bmQiLCJpbml0SW5saW5lIiwiZ2V0SW5saW5lIiwiaW5saW5lU3QiLCJpbmxpbmUiLCJpbmxpbmVFbGVtZW50IiwiQUpBWF9OUyIsIl9hamF4Q3VyIiwiX3JlbW92ZUFqYXhDdXJzb3IiLCJfZGVzdHJveUFqYXhSZXF1ZXN0IiwicmVxIiwiYWJvcnQiLCJzZXR0aW5ncyIsImN1cnNvciIsInRFcnJvciIsImluaXRBamF4IiwiYWpheCIsImdldEFqYXgiLCJzdWNjZXNzIiwidGV4dFN0YXR1cyIsImpxWEhSIiwieGhyIiwiZmluaXNoZWQiLCJsb2FkRXJyb3IiLCJfaW1nSW50ZXJ2YWwiLCJfZ2V0VGl0bGUiLCJpbWFnZSIsInRpdGxlU3JjIiwidmVydGljYWxGaXQiLCJpbml0SW1hZ2UiLCJpbWdTdCIsIm5zIiwicmVzaXplSW1hZ2UiLCJpbWciLCJkZWNyIiwiX29uSW1hZ2VIYXNTaXplIiwiaGFzU2l6ZSIsImNsZWFySW50ZXJ2YWwiLCJpc0NoZWNraW5nSW1nU2l6ZSIsImltZ0hpZGRlbiIsImZpbmRJbWFnZVNpemUiLCJtZnBTZXRJbnRlcnZhbCIsInNldEludGVydmFsIiwiZ2V0SW1hZ2UiLCJndWFyZCIsIm9uTG9hZENvbXBsZXRlIiwibG9hZGVkIiwib25Mb2FkRXJyb3IiLCJhbHQiLCJpbWdfcmVwbGFjZVdpdGgiLCJsb2FkaW5nIiwiaGFzTW96VHJhbnNmb3JtIiwiZ2V0SGFzTW96VHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwib3BlbmVyIiwiaW5pdFpvb20iLCJ6b29tU3QiLCJ6b29tIiwiZ2V0RWxUb0FuaW1hdGUiLCJuZXdJbWciLCJ0cmFuc2l0aW9uIiwiY3NzT2JqIiwiekluZGV4Iiwic2hvd01haW5Db250ZW50Iiwib3BlblRpbWVvdXQiLCJhbmltYXRlZEltZyIsIl9hbGxvd1pvb20iLCJfZ2V0SXRlbVRvWm9vbSIsIl9nZXRPZmZzZXQiLCJpc0xhcmdlIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJvYmoiLCJJRlJBTUVfTlMiLCJfZW1wdHlQYWdlIiwiX2ZpeElmcmFtZUJ1Z3MiLCJpc1Nob3dpbmciLCJzcmNBY3Rpb24iLCJ5b3V0dWJlIiwidmltZW8iLCJnbWFwcyIsImluaXRJZnJhbWUiLCJwcmV2VHlwZSIsIm5ld1R5cGUiLCJnZXRJZnJhbWUiLCJlbWJlZFNyYyIsImlmcmFtZVN0IiwiaWZyYW1lIiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJkYXRhT2JqIiwiX2dldExvb3BlZElkIiwibnVtU2xpZGVzIiwiX3JlcGxhY2VDdXJyVG90YWwiLCJjdXJyIiwidG90YWwiLCJhcnJvd01hcmt1cCIsInByZWxvYWQiLCJuYXZpZ2F0ZUJ5SW1nQ2xpY2siLCJhcnJvd3MiLCJ0UHJldiIsInROZXh0IiwidENvdW50ZXIiLCJpbml0R2FsbGVyeSIsImdTdCIsImdhbGxlcnkiLCJsIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsImNsaWNrIiwiX3ByZWxvYWRUaW1lb3V0IiwicHJlbG9hZE5lYXJieUltYWdlcyIsImdvVG8iLCJuZXdJbmRleCIsInByZWxvYWRCZWZvcmUiLCJwcmVsb2FkQWZ0ZXIiLCJfcHJlbG9hZEl0ZW0iLCJSRVRJTkFfTlMiLCJyZXBsYWNlU3JjIiwibSIsInJhdGlvIiwiaW5pdFJldGluYSIsImRldmljZVBpeGVsUmF0aW8iLCJyb290IiwicGx5ciIsImZ1bGxzY3JlZW4iLCJkZWJ1ZyIsImF1dG9wbGF5IiwibG9vcCIsInNlZWtUaW1lIiwidm9sdW1lIiwidm9sdW1lTWluIiwidm9sdW1lTWF4Iiwidm9sdW1lU3RlcCIsImRpc3BsYXlEdXJhdGlvbiIsImxvYWRTcHJpdGUiLCJpY29uUHJlZml4IiwiaWNvblVybCIsImNsaWNrVG9QbGF5IiwiaGlkZUNvbnRyb2xzIiwic2hvd1Bvc3Rlck9uRW5kIiwiZGlzYWJsZUNvbnRleHRNZW51Iiwia2V5Ym9hcmRTaG9yY3V0cyIsImZvY3VzZWQiLCJnbG9iYWwiLCJ0b29sdGlwcyIsImNvbnRyb2xzIiwic2VlayIsInNlbGVjdG9ycyIsImh0bWw1IiwiZW1iZWQiLCJlZGl0YWJsZSIsImJ1dHRvbnMiLCJwbGF5IiwicmV3aW5kIiwiZm9yd2FyZCIsIm11dGUiLCJjYXB0aW9ucyIsImRpc3BsYXkiLCJwcm9ncmVzcyIsInBsYXllZCIsImN1cnJlbnRUaW1lIiwiY2xhc3NlcyIsInJlYWR5IiwidmlkZW9XcmFwcGVyIiwiZW1iZWRXcmFwcGVyIiwic3RvcHBlZCIsInBsYXlpbmciLCJtdXRlZCIsInRvb2x0aXAiLCJoaWRkZW4iLCJpc0lvcyIsImlzVG91Y2giLCJhY3RpdmUiLCJ0YWJGb2N1cyIsImRlZmF1bHRBY3RpdmUiLCJmYWxsYmFjayIsImFsbG93QXVkaW8iLCJzdG9yYWdlIiwiaTE4biIsImJ1ZmZlcmVkIiwidG9nZ2xlTXV0ZSIsInRvZ2dsZUNhcHRpb25zIiwidG9nZ2xlRnVsbHNjcmVlbiIsImZyYW1lVGl0bGUiLCJ1cmxzIiwiYXBpIiwic291bmRjbG91ZCIsImV2ZW50cyIsImxvZ1ByZWZpeCIsIl9icm93c2VyU25pZmYiLCJ1YSIsImFwcE5hbWUiLCJmdWxsVmVyc2lvbiIsIm1ham9yVmVyc2lvbiIsIm5hbWVPZmZzZXQiLCJ2ZXJPZmZzZXQiLCJpeCIsImlzSUUiLCJpc0ZpcmVmb3giLCJpc0Nocm9tZSIsImlzU2FmYXJpIiwic3Vic3RyaW5nIiwicGxhdGZvcm0iLCJfc3VwcG9ydE1pbWUiLCJtaW1lVHlwZSIsImNhblBsYXlUeXBlIiwiX2luamVjdFNjcmlwdCIsInNvdXJjZSIsInRhZyIsImZpcnN0U2NyaXB0VGFnIiwiX2luQXJyYXkiLCJoYXlzdGFjayIsIm5lZWRsZSIsIl9yZXBsYWNlQWxsIiwiX3dyYXAiLCJlbGVtZW50cyIsImNoaWxkIiwiY2xvbmVOb2RlIiwic2libGluZyIsIl9yZW1vdmUiLCJfcHJlcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsIl9zZXRBdHRyaWJ1dGVzIiwiX2lzIiwiYm9vbGVhbiIsIl9pbnNlcnRFbGVtZW50IiwiX2dldENsYXNzbmFtZSIsInNlbGVjdG9yIiwic3RhdGUiLCJjbGFzc0xpc3QiLCJfaGFzQ2xhc3MiLCJfbWF0Y2hlcyIsIkVsZW1lbnQiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIl9wcm94eUxpc3RlbmVyIiwiZXZlbnROYW1lIiwidXNlckxpc3RlbmVyIiwiZGVmYXVsdExpc3RlbmVyIiwidXNlQ2FwdHVyZSIsIl9vbiIsIl90b2dnbGVMaXN0ZW5lciIsImV2ZW50TGlzdCIsIk5vZGVMaXN0IiwiTm9kZSIsIl9ldmVudCIsImJ1YmJsZXMiLCJwcm9wZXJ0aWVzIiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJfdG9nZ2xlU3RhdGUiLCJfZ2V0UGVyY2VudGFnZSIsIl9leHRlbmQiLCJvYmplY3RzIiwiZGVzdGluYXRpb24iLCJzaGlmdCIsInByb3BlcnR5Iiwib2JqZWN0IiwiYXJyYXkiLCJOdW1iZXIiLCJub2RlTGlzdCIsImh0bWxFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJmdW5jdGlvbiIsIl9wYXJzZVlvdVR1YmVJZCIsInJlZ2V4IiwiJDIiLCJfcGFyc2VWaW1lb0lkIiwiX2Z1bGxzY3JlZW4iLCJzdXBwb3J0c0Z1bGxTY3JlZW4iLCJpc0Z1bGxTY3JlZW4iLCJyZXF1ZXN0RnVsbFNjcmVlbiIsImNhbmNlbEZ1bGxTY3JlZW4iLCJmdWxsU2NyZWVuRXZlbnROYW1lIiwicHJlZml4IiwiYnJvd3NlclByZWZpeGVzIiwiaWwiLCJtc0V4aXRGdWxsc2NyZWVuIiwibXNGdWxsc2NyZWVuRW5hYmxlZCIsImZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJfc3RvcmFnZSIsInN1cHBvcnRlZCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsIlBseXIiLCJjb25maWciLCJ0aW1lcnMiLCJvcmlnaW5hbCIsIl90cmlnZ2VyRXZlbnQiLCJfY29uc29sZSIsInVuc2hpZnQiLCJfbG9nIiwiX3dhcm4iLCJfZ2V0SWNvblVybCIsImFic29sdXRlIiwiYnJvd3NlciIsIl9idWlsZENvbnRyb2xzIiwiaWNvblBhdGgiLCJfc2V0dXBGdWxsc2NyZWVuIiwiZnVsbCIsIm5hdGl2ZVN1cHBvcnQiLCJfaW5GcmFtZSIsIl9mb2N1c1RyYXAiLCJfc2V0dXBDYXB0aW9ucyIsIl9nZXRFbGVtZW50IiwidmlkZW9Db250YWluZXIiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJ1c2luZ1RleHRUcmFja3MiLCJ0ZXh0VHJhY2tzIiwiY2FwdGlvblNyYyIsImtpbmQiLCJjaGlsZE5vZGVzIiwiY2FwdGlvbkV4aXN0cyIsInRyYWNrcyIsIm1vZGUiLCJfc2hvd0NhcHRpb25zIiwidHJhY2siLCJhY3RpdmVDdWVzIiwiX3NldENhcHRpb24iLCJnZXRDdWVBc0hUTUwiLCJjdXJyZW50Q2FwdGlvbiIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsImNhcHRpb24iLCJyZXNwb25zZVRleHQiLCJsaW5lU2VwYXJhdG9yIiwiciIsInNlbmQiLCJyZWRyYXciLCJfc2Vla01hbnVhbENhcHRpb25zIiwiX3RpbWVjb2RlQ29tbW9uIiwidGMiLCJwb3MiLCJ0Y3BhaXIiLCJfc3ViVGNTZWNzIiwiX3RpbWVjb2RlTWluIiwiX3RpbWVjb2RlTWF4IiwidGMxIiwidGMyIiwic2Vjb25kcyIsImZsb29yIiwic3ViY291bnQiLCJjYXB0aW9uc0VuYWJsZWQiLCJfZ2V0RWxlbWVudHMiLCJ0YWJiYWJsZXMiLCJfY2hlY2tGb2N1cyIsImlzRnVsbHNjcmVlbiIsIl9pbnNlcnRDaGlsZEVsZW1lbnRzIiwiX2luamVjdENvbnRyb2xzIiwicXVlcnlTZWxlY3RvciIsImxhYmVsIiwiX2ZpbmRFbGVtZW50cyIsImJhciIsIl90b2dnbGVOYXRpdmVDb250cm9scyIsIl90b2dnbGVTdHlsZUhvb2siLCJyZW1vdmVBdHRyaWJ1dGUiLCJfc2V0VGl0bGUiLCJfc2V0dXBTdG9yYWdlIiwiX3VwZGF0ZVN0b3JhZ2UiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJfc2V0dXBNZWRpYSIsIm9udGFpbmVyIiwiX3NldHVwRW1iZWQiLCJtZWRpYUlkIiwiZW1iZWRJZCIsImNvbnRhaW5lcnMiLCJZVCIsIl95b3VUdWJlUmVhZHkiLCJvbllvdVR1YmVSZWFkeUNhbGxiYWNrcyIsIm9uWW91VHViZUlmcmFtZUFQSVJlYWR5IiwiVmltZW8iLCJ2aW1lb1RpbWVyIiwiX3ZpbWVvUmVhZHkiLCJzb3VuZENsb3VkIiwiU0MiLCJzb3VuZENsb3VkVGltZXIiLCJfc291bmRjbG91ZFJlYWR5IiwiX2VtYmVkUmVhZHkiLCJfc2V0dXBJbnRlcmZhY2UiLCJfcmVhZHkiLCJ2aWRlb0lkIiwiUGxheWVyIiwicGxheWVyVmFycyIsInJlbCIsInNob3dpbmZvIiwiaXZfbG9hZF9wb2xpY3kiLCJjY19sb2FkX3BvbGljeSIsImNjX2xhbmdfcHJlZiIsIndtb2RlIiwibW9kZXN0YnJhbmRpbmciLCJkaXNhYmxla2IiLCJvcmlnaW4iLCJjb2RlIiwicGxheVZpZGVvIiwicGF1c2VkIiwicGF1c2VWaWRlbyIsInN0b3BWaWRlbyIsImdldER1cmF0aW9uIiwiaXNNdXRlZCIsImdldFZpZGVvRGF0YSIsImJ1ZmZlcmluZyIsImdldFZpZGVvTG9hZGVkRnJhY3Rpb24iLCJsYXN0QnVmZmVyZWQiLCJzZWVraW5nIiwiZ2V0Q3VycmVudFRpbWUiLCJieWxpbmUiLCJ0aGVuIiwiV2lkZ2V0IiwiRXZlbnRzIiwiUkVBRFkiLCJzZWVrVG8iLCJnZXRQb3NpdGlvbiIsIlBMQVkiLCJQQVVTRSIsIlBMQVlfUFJPR1JFU1MiLCJjdXJyZW50UG9zaXRpb24iLCJMT0FEX1BST0dSRVNTIiwibG9hZFByb2dyZXNzIiwiRklOSVNIIiwiX3BsYXkiLCJfcGF1c2UiLCJfdG9nZ2xlUGxheSIsIl9yZXdpbmQiLCJfc2VlayIsIl9mb3J3YXJkIiwidGFyZ2V0VGltZSIsIl9nZXREdXJhdGlvbiIsIl91cGRhdGVTZWVrRGlzcGxheSIsInNldEN1cnJlbnRUaW1lIiwibWVkaWFEdXJhdGlvbiIsIl9jaGVja1BsYXlpbmciLCJfdG9nZ2xlQ29udHJvbHMiLCJfc2F2ZVNjcm9sbFBvc2l0aW9uIiwiX3Jlc3RvcmVTY3JvbGxQb3NpdGlvbiIsInNjcm9sbFRvIiwiX3RvZ2dsZUZ1bGxzY3JlZW4iLCJfdG9nZ2xlTXV0ZSIsIl9zZXRWb2x1bWUiLCJzZXRWb2x1bWUiLCJfaW5jcmVhc2VWb2x1bWUiLCJfZGVjcmVhc2VWb2x1bWUiLCJfdXBkYXRlVm9sdW1lIiwiX3RvZ2dsZUNhcHRpb25zIiwiX2NoZWNrTG9hZGluZyIsIl91cGRhdGVQcm9ncmVzcyIsInByZXNzZWQiLCJfc2V0UHJvZ3Jlc3MiLCJfdXBkYXRlVGltZURpc3BsYXkiLCJzZWNzIiwibWlucyIsImhvdXJzIiwiZGlzcGxheUhvdXJzIiwiX2Rpc3BsYXlEdXJhdGlvbiIsIl91cGRhdGVTZWVrVG9vbHRpcCIsIl90aW1lVXBkYXRlIiwiY2xpZW50UmVjdCIsInZpc2libGUiLCJpc0VudGVyRnVsbHNjcmVlbiIsIl9zb3VyY2UiLCJfdXBkYXRlU291cmNlIiwiZ2V0VmlkZW9VcmwiLCJnZXRDdXJyZW50U291bmQiLCJwZXJtYWxpbmtfdXJsIiwiY3VycmVudFNyYyIsInNvdXJjZXMiLCJfY2FuY2VsUmVxdWVzdHMiLCJmaXJzdFNvdXJjZSIsImNyb3Nzb3JpZ2luIiwicG9zdGVyIiwibG9hZCIsIl9kZXN0cm95IiwiX3VwZGF0ZVBvc3RlciIsIl9jb250cm9sTGlzdGVuZXJzIiwiaW5wdXRFdmVudCIsInRvZ2dsZVBsYXkiLCJoYWRUYWJGb2N1cyIsImdldEZvY3VzRWxlbWVudCIsImdldEtleUNvZGUiLCJjaGVja1RhYkZvY3VzIiwiYnV0dG9uIiwiYWxsb3dlZCIsImNvdW50IiwiaGVsZCIsInNlZWtCeUtleSIsImludmVydGVkIiwid2Via2l0RGlyZWN0aW9uSW52ZXJ0ZWRGcm9tRGV2aWNlIiwiZGVsdGFZIiwiZGVsdGFYIiwiX21lZGlhTGlzdGVuZXJzIiwiZW5kZWQiLCJyZXN0b3JlIiwiY2xlYW5VcCIsInVubG9hZCIsInJlcGxhY2VDaGlsZCIsImJhc2ljIiwiY29udHJvbHNNaXNzaW5nIiwiZ2V0T3JpZ2luYWwiLCJnZXRDb250YWluZXIiLCJnZXRFbWJlZCIsImdldE1lZGlhIiwiZ2V0VHlwZSIsImdldFZvbHVtZSIsImlzUmVhZHkiLCJpc0xvYWRpbmciLCJ0b2dnbGVDb250cm9scyIsInN1cHBvcnQiLCJvbmxvYWQiLCJpc09sZElFIiwiaXNJcGhvbmUiLCJhdWRpbyIsInZpZGVvIiwidGFyZ2V0cyIsInBsYXllcnMiLCJpbnN0YW5jZXMiLCJob29rIiwicGxheWVyIiwibG9nIiwicGFyYW1zIiwiY2FuY2VsYWJsZSIsImV2dCIsImluaXRDdXN0b21FdmVudCIsIkV2ZW50IiwiU2xpY2siLCJpbnN0YW5jZVVpZCIsIl8iLCJkYXRhU2V0dGluZ3MiLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhcHBlbmRBcnJvd3MiLCJhcHBlbmREb3RzIiwiYXNOYXZGb3IiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhdXRvcGxheVNwZWVkIiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwic2xpZGVyIiwiZG90cyIsImRvdHNDbGFzcyIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiaW5pdGlhbFNsaWRlIiwibGF6eUxvYWQiLCJtb2JpbGVGaXJzdCIsInBhdXNlT25Gb2N1cyIsInBhdXNlT25Eb3RzSG92ZXIiLCJyZXNwb25kVG8iLCJyZXNwb25zaXZlIiwicm93cyIsInNsaWRlIiwic2xpZGVzUGVyUm93Iiwic2xpZGVzVG9TaG93Iiwic2xpZGVzVG9TY3JvbGwiLCJzcGVlZCIsInN3aXBlVG9TbGlkZSIsInRvdWNoTW92ZSIsInRvdWNoVGhyZXNob2xkIiwidXNlQ1NTIiwidXNlVHJhbnNmb3JtIiwidmFyaWFibGVXaWR0aCIsInZlcnRpY2FsU3dpcGluZyIsIndhaXRGb3JBbmltYXRlIiwiaW5pdGlhbHMiLCJhbmltYXRpbmciLCJkcmFnZ2luZyIsImF1dG9QbGF5VGltZXIiLCJjdXJyZW50RGlyZWN0aW9uIiwiY3VycmVudExlZnQiLCJjdXJyZW50U2xpZGUiLCIkZG90cyIsImxpc3RXaWR0aCIsImxpc3RIZWlnaHQiLCJsb2FkSW5kZXgiLCIkbmV4dEFycm93IiwiJHByZXZBcnJvdyIsInNsaWRlQ291bnQiLCJzbGlkZVdpZHRoIiwiJHNsaWRlVHJhY2siLCJzbGlkaW5nIiwic2xpZGVPZmZzZXQiLCJzd2lwZUxlZnQiLCIkbGlzdCIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludFNldHRpbmdzIiwiY3NzVHJhbnNpdGlvbnMiLCJmb2N1c3NlZCIsImludGVycnVwdGVkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsIm9yaWdpbmFsU2V0dGluZ3MiLCJtb3pIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJwcm94eSIsImF1dG9QbGF5Q2xlYXIiLCJhdXRvUGxheUl0ZXJhdG9yIiwiY2xpY2tIYW5kbGVyIiwic2VsZWN0SGFuZGxlciIsInNldFBvc2l0aW9uIiwic3dpcGVIYW5kbGVyIiwiZHJhZ0hhbmRsZXIiLCJrZXlIYW5kbGVyIiwiaHRtbEV4cHIiLCJyZWdpc3RlckJyZWFrcG9pbnRzIiwiYWN0aXZhdGVBREEiLCJhZGRTbGlkZSIsInNsaWNrQWRkIiwiYWRkQmVmb3JlIiwiaW5zZXJ0QWZ0ZXIiLCJyZWluaXQiLCJhbmltYXRlSGVpZ2h0IiwidGFyZ2V0SGVpZ2h0IiwiYW5pbWF0ZVNsaWRlIiwidGFyZ2V0TGVmdCIsImFuaW1Qcm9wcyIsImFuaW1TdGFydCIsImNlaWwiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsInNsaWNrIiwic2xpZGVIYW5kbGVyIiwic2xpZGVUbyIsImJ1aWxkQXJyb3dzIiwiYnVpbGREb3RzIiwiZG90IiwiZ2V0RG90Q291bnQiLCJidWlsZE91dCIsIndyYXBBbGwiLCJzZXR1cEluZmluaXRlIiwidXBkYXRlRG90cyIsInNldFNsaWRlQ2xhc3NlcyIsImJ1aWxkUm93cyIsImEiLCJiIiwiYyIsIm5ld1NsaWRlcyIsIm51bU9mU2xpZGVzIiwib3JpZ2luYWxTbGlkZXMiLCJzbGlkZXNQZXJTZWN0aW9uIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInJvdyIsImNoZWNrUmVzcG9uc2l2ZSIsImluaXRpYWwiLCJmb3JjZVVwZGF0ZSIsImJyZWFrcG9pbnQiLCJ0YXJnZXRCcmVha3BvaW50IiwicmVzcG9uZFRvV2lkdGgiLCJ0cmlnZ2VyQnJlYWtwb2ludCIsInNsaWRlcldpZHRoIiwidW5zbGljayIsInJlZnJlc2giLCJkb250QW5pbWF0ZSIsImluZGV4T2Zmc2V0IiwidW5ldmVuT2Zmc2V0IiwiY2hlY2tOYXZpZ2FibGUiLCJuYXZpZ2FibGVzIiwicHJldk5hdmlnYWJsZSIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJjbGVhblVwRXZlbnRzIiwiaW50ZXJydXB0IiwidmlzaWJpbGl0eSIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwicmVzaXplIiwiY2xlYW5VcFJvd3MiLCJmYWRlU2xpZGUiLCJzbGlkZUluZGV4Iiwib3BhY2l0eSIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwiJHNmIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiYnJlYWtQb2ludCIsInBhZ2VyUXR5IiwiZ2V0TGVmdCIsInZlcnRpY2FsSGVpZ2h0IiwidmVydGljYWxPZmZzZXQiLCJ0YXJnZXRTbGlkZSIsIm9mZnNldExlZnQiLCJnZXRPcHRpb24iLCJzbGlja0dldE9wdGlvbiIsIm9wdGlvbiIsImluZGV4ZXMiLCJnZXRTbGljayIsImdldFNsaWRlQ291bnQiLCJzbGlkZXNUcmF2ZXJzZWQiLCJzd2lwZWRTbGlkZSIsImNlbnRlck9mZnNldCIsInNsaWNrR29UbyIsImNyZWF0aW9uIiwic2V0UHJvcHMiLCJzdGFydExvYWQiLCJsb2FkU2xpZGVyIiwiaW5pdGlhbGl6ZUV2ZW50cyIsInVwZGF0ZUFycm93cyIsImluaXRBREEiLCJpbml0QXJyb3dFdmVudHMiLCJpbml0RG90RXZlbnRzIiwiaW5pdFNsaWRlRXZlbnRzIiwiYWN0aW9uIiwiaW5pdFVJIiwibG9hZFJhbmdlIiwiY2xvbmVSYW5nZSIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsImxvYWRJbWFnZXMiLCJpbWFnZXNTY29wZSIsImltYWdlU291cmNlIiwiaW1hZ2VUb0xvYWQiLCJvbmVycm9yIiwicHJvZ3Jlc3NpdmVMYXp5TG9hZCIsInNsaWNrTmV4dCIsInNsaWNrUGF1c2UiLCJzbGlja1BsYXkiLCJwb3N0U2xpZGUiLCJzbGlja1ByZXYiLCJ0cnlDb3VudCIsIiRpbWdzVG9Mb2FkIiwiaW5pdGlhbGl6aW5nIiwibGFzdFZpc2libGVJbmRleCIsImN1cnJlbnRCcmVha3BvaW50IiwicmVzcG9uc2l2ZVNldHRpbmdzIiwic29ydCIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInJlbW92ZUJlZm9yZSIsInJlbW92ZUFsbCIsInNldENTUyIsInBvc2l0aW9uUHJvcHMiLCJzZXREaW1lbnNpb25zIiwicGFkZGluZyIsInNldEZhZGUiLCJzZXRIZWlnaHQiLCJzZXRPcHRpb24iLCJzbGlja1NldE9wdGlvbiIsImJvZHlTdHlsZSIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwibXNUcmFuc2l0aW9uIiwiT1RyYW5zZm9ybSIsInBlcnNwZWN0aXZlUHJvcGVydHkiLCJ3ZWJraXRQZXJzcGVjdGl2ZSIsIk1velBlcnNwZWN0aXZlIiwid2Via2l0VHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJhbGxTbGlkZXMiLCJyZW1haW5kZXIiLCJpbmZpbml0ZUNvdW50IiwidGFyZ2V0RWxlbWVudCIsInN5bmMiLCJhbmltU2xpZGUiLCJvbGRTbGlkZSIsInNsaWRlTGVmdCIsIm5hdlRhcmdldCIsInN3aXBlRGlyZWN0aW9uIiwieERpc3QiLCJ5RGlzdCIsInN3aXBlQW5nbGUiLCJzdGFydFgiLCJjdXJYIiwic3RhcnRZIiwiY3VyWSIsImF0YW4yIiwiUEkiLCJzd2lwZUVuZCIsInN3aXBlTGVuZ3RoIiwiZWRnZUhpdCIsIm1pblN3aXBlIiwiZmluZ2VyQ291bnQiLCJvcmlnaW5hbEV2ZW50Iiwic3dpcGVTdGFydCIsInN3aXBlTW92ZSIsImVkZ2VXYXNIaXQiLCJjdXJMZWZ0IiwicG9zaXRpb25PZmZzZXQiLCJzcXJ0IiwidW5maWx0ZXJTbGlkZXMiLCJzbGlja1VuZmlsdGVyIiwiZnJvbUJyZWFrcG9pbnQiLCJmb290ZXIiLCJzdGlja3lGb290ZXIiLCJzcGxpdF91cmwiLCJwYWdlX251bSIsInZhcnMiLCJ0YXhvbm9teSIsInRlcm1faWQiLCJwb3N0X3R5cGUiLCJ3aWF3X2dldF9tb3JlX3Bvc3RzIiwianNfdmFycyIsImFqYXh1cmwiLCJwYWdlIiwiZXhjZXB0aW9uIiwiYWxlcnQiLCJidG4iLCJidG5fdXJsIiwiYmVmb3JlIiwiUXVpY2tMb29rSW5pdCJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLFNBQVAsR0FBb0IsWUFBVzs7QUFFN0I7O0FBRUE7Ozs7OztBQU1BOztBQUNBLE1BQUlDLGFBQWEsRUFBakI7O0FBRUE7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R0FBM0IsQ0FBZixFQUNBdTBELFFBQVNBLFFBQVF6MUQsTUFBUixHQUFlLENBQXhCLElBQStCNjBELFdBQVcsQ0FEMUMsRUFFQVksVUFBZUEsUUFBUXBpRCxJQUFSLENBQWEsR0FBYixJQUFvQixHQUZuQzs7QUFJQW1pRCxVQUFJMTNELElBQUosQ0FBUyxNQUFULEVBQWlCMjNELE9BQWpCOztBQUdBO0FBQ0FsNEQsUUFBRSxpQkFBRixFQUFxQm00RCxNQUFyQixDQUE2QnZ4QyxJQUE3Qjs7QUFFQXd4QyxzQkFqQmdCLENBaUJDOztBQUVsQjtBQUNDLE1BcEJELE1Bb0JPOztBQUVOO0FBQ0FwNEQsUUFBRSxpQkFBRixFQUFxQm00RCxNQUFyQixDQUE2QixtRUFBN0I7O0FBRUE7QUFDQW40RCxRQUFFLHFCQUFGLEVBQXlCdVEsSUFBekI7QUFFQTs7QUFFRDtBQUNBdlEsT0FBRSxlQUFGLEVBQW1CdVEsSUFBbkI7QUFDQTtBQWhESyxJQUFQO0FBa0RBO0FBQ0QsRUFsR0Q7QUFzR0EsQ0F4R0EsQ0F3R0NyVSxPQUFPMkwsTUF4R1IsQ0FBRCIsImZpbGUiOiJmb3VuZGF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LndoYXRJbnB1dCA9IChmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICB2YXJpYWJsZXNcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICAvLyBhcnJheSBvZiBhY3RpdmVseSBwcmVzc2VkIGtleXNcbiAgdmFyIGFjdGl2ZUtleXMgPSBbXTtcblxuICAvLyBjYWNoZSBkb2N1bWVudC5ib2R5XG4gIHZhciBib2R5O1xuXG4gIC8vIGJvb2xlYW46IHRydWUgaWYgdG91Y2ggYnVmZmVyIHRpbWVyIGlzIHJ1bm5pbmdcbiAgdmFyIGJ1ZmZlciA9IGZhbHNlO1xuXG4gIC8vIHRoZSBsYXN0IHVzZWQgaW5wdXQgdHlwZVxuICB2YXIgY3VycmVudElucHV0ID0gbnVsbDtcblxuICAvLyBgaW5wdXRgIHR5cGVzIHRoYXQgZG9uJ3QgYWNjZXB0IHRleHRcbiAgdmFyIG5vblR5cGluZ0lucHV0cyA9IFtcbiAgICAnYnV0dG9uJyxcbiAgICAnY2hlY2tib3gnLFxuICAgICdmaWxlJyxcbiAgICAnaW1hZ2UnLFxuICAgICdyYWRpbycsXG4gICAgJ3Jlc2V0JyxcbiAgICAnc3VibWl0J1xuICBdO1xuXG4gIC8vIGRldGVjdCB2ZXJzaW9uIG9mIG1vdXNlIHdoZWVsIGV2ZW50IHRvIHVzZVxuICAvLyB2aWEgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3doZWVsXG4gIHZhciBtb3VzZVdoZWVsID0gZGV0ZWN0V2hlZWwoKTtcblxuICAvLyBsaXN0IG9mIG1vZGlmaWVyIGtleXMgY29tbW9ubHkgdXNlZCB3aXRoIHRoZSBtb3VzZSBhbmRcbiAgLy8gY2FuIGJlIHNhZmVseSBpZ25vcmVkIHRvIHByZXZlbnQgZmFsc2Uga2V5Ym9hcmQgZGV0ZWN0aW9uXG4gIHZhciBpZ25vcmVNYXAgPSBbXG4gICAgMTYsIC8vIHNoaWZ0XG4gICAgMTcsIC8vIGNvbnRyb2xcbiAgICAxOCwgLy8gYWx0XG4gICAgOTEsIC8vIFdpbmRvd3Mga2V5IC8gbGVmdCBBcHBsZSBjbWRcbiAgICA5MyAgLy8gV2luZG93cyBtZW51IC8gcmlnaHQgQXBwbGUgY21kXG4gIF07XG5cbiAgLy8gbWFwcGluZyBvZiBldmVudHMgdG8gaW5wdXQgdHlwZXNcbiAgdmFyIGlucHV0TWFwID0ge1xuICAgICdrZXlkb3duJzogJ2tleWJvYXJkJyxcbiAgICAna2V5dXAnOiAna2V5Ym9hcmQnLFxuICAgICdtb3VzZWRvd24nOiAnbW91c2UnLFxuICAgICdtb3VzZW1vdmUnOiAnbW91c2UnLFxuICAgICdNU1BvaW50ZXJEb3duJzogJ3BvaW50ZXInLFxuICAgICdNU1BvaW50ZXJNb3ZlJzogJ3BvaW50ZXInLFxuICAgICdwb2ludGVyZG93bic6ICdwb2ludGVyJyxcbiAgICAncG9pbnRlcm1vdmUnOiAncG9pbnRlcicsXG4gICAgJ3RvdWNoc3RhcnQnOiAndG91Y2gnXG4gIH07XG5cbiAgLy8gYWRkIGNvcnJlY3QgbW91c2Ugd2hlZWwgZXZlbnQgbWFwcGluZyB0byBgaW5wdXRNYXBgXG4gIGlucHV0TWFwW2RldGVjdFdoZWVsKCldID0gJ21vdXNlJztcblxuICAvLyBhcnJheSBvZiBhbGwgdXNlZCBpbnB1dCB0eXBlc1xuICB2YXIgaW5wdXRUeXBlcyA9IFtdO1xuXG4gIC8vIG1hcHBpbmcgb2Yga2V5IGNvZGVzIHRvIGEgY29tbW9uIG5hbWVcbiAgdmFyIGtleU1hcCA9IHtcbiAgICA5OiAndGFiJyxcbiAgICAxMzogJ2VudGVyJyxcbiAgICAxNjogJ3NoaWZ0JyxcbiAgICAyNzogJ2VzYycsXG4gICAgMzI6ICdzcGFjZScsXG4gICAgMzc6ICdsZWZ0JyxcbiAgICAzODogJ3VwJyxcbiAgICAzOTogJ3JpZ2h0JyxcbiAgICA0MDogJ2Rvd24nXG4gIH07XG5cbiAgLy8gbWFwIG9mIElFIDEwIHBvaW50ZXIgZXZlbnRzXG4gIHZhciBwb2ludGVyTWFwID0ge1xuICAgIDI6ICd0b3VjaCcsXG4gICAgMzogJ3RvdWNoJywgLy8gdHJlYXQgcGVuIGxpa2UgdG91Y2hcbiAgICA0OiAnbW91c2UnXG4gIH07XG5cbiAgLy8gdG91Y2ggYnVmZmVyIHRpbWVyXG4gIHZhciB0aW1lcjtcblxuXG4gIC8qXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb25zXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICovXG5cbiAgLy8gYWxsb3dzIGV2ZW50cyB0aGF0IGFyZSBhbHNvIHRyaWdnZXJlZCB0byBiZSBmaWx0ZXJlZCBvdXQgZm9yIGB0b3VjaHN0YXJ0YFxuICBmdW5jdGlvbiBldmVudEJ1ZmZlcigpIHtcbiAgICBjbGVhclRpbWVyKCk7XG4gICAgc2V0SW5wdXQoZXZlbnQpO1xuXG4gICAgYnVmZmVyID0gdHJ1ZTtcbiAgICB0aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgYnVmZmVyID0gZmFsc2U7XG4gICAgfSwgNjUwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlcmVkRXZlbnQoZXZlbnQpIHtcbiAgICBpZiAoIWJ1ZmZlcikgc2V0SW5wdXQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5CdWZmZXJlZEV2ZW50KGV2ZW50KSB7XG4gICAgY2xlYXJUaW1lcigpO1xuICAgIHNldElucHV0KGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyVGltZXIoKSB7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lcik7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRJbnB1dChldmVudCkge1xuICAgIHZhciBldmVudEtleSA9IGtleShldmVudCk7XG4gICAgdmFyIHZhbHVlID0gaW5wdXRNYXBbZXZlbnQudHlwZV07XG4gICAgaWYgKHZhbHVlID09PSAncG9pbnRlcicpIHZhbHVlID0gcG9pbnRlclR5cGUoZXZlbnQpO1xuXG4gICAgLy8gZG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHZhbHVlIG1hdGNoZXMgdGhlIGlucHV0IHR5cGUgYWxyZWFkeSBzZXRcbiAgICBpZiAoY3VycmVudElucHV0ICE9PSB2YWx1ZSkge1xuICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gdGFyZ2V0KGV2ZW50KTtcbiAgICAgIHZhciBldmVudFRhcmdldE5vZGUgPSBldmVudFRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIGV2ZW50VGFyZ2V0VHlwZSA9IChldmVudFRhcmdldE5vZGUgPT09ICdpbnB1dCcpID8gZXZlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0eXBlJykgOiBudWxsO1xuXG4gICAgICBpZiAoXG4gICAgICAgICgvLyBvbmx5IGlmIHRoZSB1c2VyIGZsYWcgdG8gYWxsb3cgdHlwaW5nIGluIGZvcm0gZmllbGRzIGlzbid0IHNldFxuICAgICAgICAhYm9keS5oYXNBdHRyaWJ1dGUoJ2RhdGEtd2hhdGlucHV0LWZvcm10eXBpbmcnKSAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgY3VycmVudElucHV0IGhhcyBhIHZhbHVlXG4gICAgICAgIGN1cnJlbnRJbnB1dCAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgdGhlIGlucHV0IGlzIGBrZXlib2FyZGBcbiAgICAgICAgdmFsdWUgPT09ICdrZXlib2FyZCcgJiZcblxuICAgICAgICAvLyBub3QgaWYgdGhlIGtleSBpcyBgVEFCYFxuICAgICAgICBrZXlNYXBbZXZlbnRLZXldICE9PSAndGFiJyAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgdGhlIHRhcmdldCBpcyBhIGZvcm0gaW5wdXQgdGhhdCBhY2NlcHRzIHRleHRcbiAgICAgICAgKFxuICAgICAgICAgICBldmVudFRhcmdldE5vZGUgPT09ICd0ZXh0YXJlYScgfHxcbiAgICAgICAgICAgZXZlbnRUYXJnZXROb2RlID09PSAnc2VsZWN0JyB8fFxuICAgICAgICAgICAoZXZlbnRUYXJnZXROb2RlID09PSAnaW5wdXQnICYmIG5vblR5cGluZ0lucHV0cy5pbmRleE9mKGV2ZW50VGFyZ2V0VHlwZSkgPCAwKVxuICAgICAgICApKSB8fCAoXG4gICAgICAgICAgLy8gaWdub3JlIG1vZGlmaWVyIGtleXNcbiAgICAgICAgICBpZ25vcmVNYXAuaW5kZXhPZihldmVudEtleSkgPiAtMVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgLy8gaWdub3JlIGtleWJvYXJkIHR5cGluZ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoSW5wdXQodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PT0gJ2tleWJvYXJkJykgbG9nS2V5cyhldmVudEtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBzd2l0Y2hJbnB1dChzdHJpbmcpIHtcbiAgICBjdXJyZW50SW5wdXQgPSBzdHJpbmc7XG4gICAgYm9keS5zZXRBdHRyaWJ1dGUoJ2RhdGEtd2hhdGlucHV0JywgY3VycmVudElucHV0KTtcblxuICAgIGlmIChpbnB1dFR5cGVzLmluZGV4T2YoY3VycmVudElucHV0KSA9PT0gLTEpIGlucHV0VHlwZXMucHVzaChjdXJyZW50SW5wdXQpO1xuICB9XG5cbiAgZnVuY3Rpb24ga2V5KGV2ZW50KSB7XG4gICAgcmV0dXJuIChldmVudC5rZXlDb2RlKSA/IGV2ZW50LmtleUNvZGUgOiBldmVudC53aGljaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRhcmdldChldmVudCkge1xuICAgIHJldHVybiBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50ZXJUeXBlKGV2ZW50KSB7XG4gICAgaWYgKHR5cGVvZiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBwb2ludGVyTWFwW2V2ZW50LnBvaW50ZXJUeXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChldmVudC5wb2ludGVyVHlwZSA9PT0gJ3BlbicpID8gJ3RvdWNoJyA6IGV2ZW50LnBvaW50ZXJUeXBlOyAvLyB0cmVhdCBwZW4gbGlrZSB0b3VjaFxuICAgIH1cbiAgfVxuXG4gIC8vIGtleWJvYXJkIGxvZ2dpbmdcbiAgZnVuY3Rpb24gbG9nS2V5cyhldmVudEtleSkge1xuICAgIGlmIChhY3RpdmVLZXlzLmluZGV4T2Yoa2V5TWFwW2V2ZW50S2V5XSkgPT09IC0xICYmIGtleU1hcFtldmVudEtleV0pIGFjdGl2ZUtleXMucHVzaChrZXlNYXBbZXZlbnRLZXldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuTG9nS2V5cyhldmVudCkge1xuICAgIHZhciBldmVudEtleSA9IGtleShldmVudCk7XG4gICAgdmFyIGFycmF5UG9zID0gYWN0aXZlS2V5cy5pbmRleE9mKGtleU1hcFtldmVudEtleV0pO1xuXG4gICAgaWYgKGFycmF5UG9zICE9PSAtMSkgYWN0aXZlS2V5cy5zcGxpY2UoYXJyYXlQb3MsIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcbiAgICBib2R5ID0gZG9jdW1lbnQuYm9keTtcblxuICAgIC8vIHBvaW50ZXIgZXZlbnRzIChtb3VzZSwgcGVuLCB0b3VjaClcbiAgICBpZiAod2luZG93LlBvaW50ZXJFdmVudCkge1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgIH0gZWxzZSBpZiAod2luZG93Lk1TUG9pbnRlckV2ZW50KSB7XG4gICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ01TUG9pbnRlckRvd24nLCBidWZmZXJlZEV2ZW50KTtcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyTW92ZScsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vIG1vdXNlIGV2ZW50c1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBidWZmZXJlZEV2ZW50KTtcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgYnVmZmVyZWRFdmVudCk7XG5cbiAgICAgIC8vIHRvdWNoIGV2ZW50c1xuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykge1xuICAgICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBldmVudEJ1ZmZlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbW91c2Ugd2hlZWxcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIobW91c2VXaGVlbCwgYnVmZmVyZWRFdmVudCk7XG5cbiAgICAvLyBrZXlib2FyZCBldmVudHNcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB1bkJ1ZmZlcmVkRXZlbnQpO1xuICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB1bkJ1ZmZlcmVkRXZlbnQpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdW5Mb2dLZXlzKTtcbiAgfVxuXG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICB1dGlsaXRpZXNcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICAvLyBkZXRlY3QgdmVyc2lvbiBvZiBtb3VzZSB3aGVlbCBldmVudCB0byB1c2VcbiAgLy8gdmlhIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy93aGVlbFxuICBmdW5jdGlvbiBkZXRlY3RXaGVlbCgpIHtcbiAgICByZXR1cm4gbW91c2VXaGVlbCA9ICdvbndoZWVsJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA/XG4gICAgICAnd2hlZWwnIDogLy8gTW9kZXJuIGJyb3dzZXJzIHN1cHBvcnQgXCJ3aGVlbFwiXG5cbiAgICAgIGRvY3VtZW50Lm9ubW91c2V3aGVlbCAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgJ21vdXNld2hlZWwnIDogLy8gV2Via2l0IGFuZCBJRSBzdXBwb3J0IGF0IGxlYXN0IFwibW91c2V3aGVlbFwiXG4gICAgICAgICdET01Nb3VzZVNjcm9sbCc7IC8vIGxldCdzIGFzc3VtZSB0aGF0IHJlbWFpbmluZyBicm93c2VycyBhcmUgb2xkZXIgRmlyZWZveFxuICB9XG5cblxuICAvKlxuICAgIC0tLS0tLS0tLS0tLS0tLVxuICAgIGluaXRcblxuICAgIGRvbid0IHN0YXJ0IHNjcmlwdCB1bmxlc3MgYnJvd3NlciBjdXRzIHRoZSBtdXN0YXJkLFxuICAgIGFsc28gcGFzc2VzIGlmIHBvbHlmaWxscyBhcmUgdXNlZFxuICAgIC0tLS0tLS0tLS0tLS0tLVxuICAqL1xuXG4gIGlmIChcbiAgICAnYWRkRXZlbnRMaXN0ZW5lcicgaW4gd2luZG93ICYmXG4gICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZcbiAgKSB7XG5cbiAgICAvLyBpZiB0aGUgZG9tIGlzIGFscmVhZHkgcmVhZHkgYWxyZWFkeSAoc2NyaXB0IHdhcyBwbGFjZWQgYXQgYm90dG9tIG9mIDxib2R5PilcbiAgICBpZiAoZG9jdW1lbnQuYm9keSkge1xuICAgICAgYmluZEV2ZW50cygpO1xuXG4gICAgLy8gb3RoZXJ3aXNlIHdhaXQgZm9yIHRoZSBkb20gdG8gbG9hZCAoc2NyaXB0IHdhcyBwbGFjZWQgaW4gdGhlIDxoZWFkPilcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGJpbmRFdmVudHMpO1xuICAgIH1cbiAgfVxuXG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICBhcGlcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICByZXR1cm4ge1xuXG4gICAgLy8gcmV0dXJucyBzdHJpbmc6IHRoZSBjdXJyZW50IGlucHV0IHR5cGVcbiAgICBhc2s6IGZ1bmN0aW9uKCkgeyByZXR1cm4gY3VycmVudElucHV0OyB9LFxuXG4gICAgLy8gcmV0dXJucyBhcnJheTogY3VycmVudGx5IHByZXNzZWQga2V5c1xuICAgIGtleXM6IGZ1bmN0aW9uKCkgeyByZXR1cm4gYWN0aXZlS2V5czsgfSxcblxuICAgIC8vIHJldHVybnMgYXJyYXk6IGFsbCB0aGUgZGV0ZWN0ZWQgaW5wdXQgdHlwZXNcbiAgICB0eXBlczogZnVuY3Rpb24oKSB7IHJldHVybiBpbnB1dFR5cGVzOyB9LFxuXG4gICAgLy8gYWNjZXB0cyBzdHJpbmc6IG1hbnVhbGx5IHNldCB0aGUgaW5wdXQgdHlwZVxuICAgIHNldDogc3dpdGNoSW5wdXRcbiAgfTtcblxufSgpKTtcbiIsIiFmdW5jdGlvbigkKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRk9VTkRBVElPTl9WRVJTSU9OID0gJzYuMi40JztcblxuLy8gR2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4vLyBUaGlzIGlzIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3csIG9yIHVzZWQgYXMgYSBtb2R1bGUgZm9yIEFNRC9Ccm93c2VyaWZ5XG52YXIgRm91bmRhdGlvbiA9IHtcbiAgdmVyc2lvbjogRk9VTkRBVElPTl9WRVJTSU9OLFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgaW5pdGlhbGl6ZWQgcGx1Z2lucy5cbiAgICovXG4gIF9wbHVnaW5zOiB7fSxcblxuICAvKipcbiAgICogU3RvcmVzIGdlbmVyYXRlZCB1bmlxdWUgaWRzIGZvciBwbHVnaW4gaW5zdGFuY2VzXG4gICAqL1xuICBfdXVpZHM6IFtdLFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBmb3IgUlRMIHN1cHBvcnRcbiAgICovXG4gIHJ0bDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gJCgnaHRtbCcpLmF0dHIoJ2RpcicpID09PSAncnRsJztcbiAgfSxcbiAgLyoqXG4gICAqIERlZmluZXMgYSBGb3VuZGF0aW9uIHBsdWdpbiwgYWRkaW5nIGl0IHRvIHRoZSBgRm91bmRhdGlvbmAgbmFtZXNwYWNlIGFuZCB0aGUgbGlzdCBvZiBwbHVnaW5zIHRvIGluaXRpYWxpemUgd2hlbiByZWZsb3dpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBUaGUgY29uc3RydWN0b3Igb2YgdGhlIHBsdWdpbi5cbiAgICovXG4gIHBsdWdpbjogZnVuY3Rpb24ocGx1Z2luLCBuYW1lKSB7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBhZGRpbmcgdG8gZ2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4gICAgLy8gRXhhbXBsZXM6IEZvdW5kYXRpb24uUmV2ZWFsLCBGb3VuZGF0aW9uLk9mZkNhbnZhc1xuICAgIHZhciBjbGFzc05hbWUgPSAobmFtZSB8fCBmdW5jdGlvbk5hbWUocGx1Z2luKSk7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBzdG9yaW5nIHRoZSBwbHVnaW4sIGFsc28gdXNlZCB0byBjcmVhdGUgdGhlIGlkZW50aWZ5aW5nIGRhdGEgYXR0cmlidXRlIGZvciB0aGUgcGx1Z2luXG4gICAgLy8gRXhhbXBsZXM6IGRhdGEtcmV2ZWFsLCBkYXRhLW9mZi1jYW52YXNcbiAgICB2YXIgYXR0ck5hbWUgID0gaHlwaGVuYXRlKGNsYXNzTmFtZSk7XG5cbiAgICAvLyBBZGQgdG8gdGhlIEZvdW5kYXRpb24gb2JqZWN0IGFuZCB0aGUgcGx1Z2lucyBsaXN0IChmb3IgcmVmbG93aW5nKVxuICAgIHRoaXMuX3BsdWdpbnNbYXR0ck5hbWVdID0gdGhpc1tjbGFzc05hbWVdID0gcGx1Z2luO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFBvcHVsYXRlcyB0aGUgX3V1aWRzIGFycmF5IHdpdGggcG9pbnRlcnMgdG8gZWFjaCBpbmRpdmlkdWFsIHBsdWdpbiBpbnN0YW5jZS5cbiAgICogQWRkcyB0aGUgYHpmUGx1Z2luYCBkYXRhLWF0dHJpYnV0ZSB0byBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgcGx1Z2lucyB0byBhbGxvdyB1c2Ugb2YgJChzZWxlY3RvcikuZm91bmRhdGlvbihtZXRob2QpIGNhbGxzLlxuICAgKiBBbHNvIGZpcmVzIHRoZSBpbml0aWFsaXphdGlvbiBldmVudCBmb3IgZWFjaCBwbHVnaW4sIGNvbnNvbGlkYXRpbmcgcmVwZXRpdGl2ZSBjb2RlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gYW4gaW5zdGFuY2Ugb2YgYSBwbHVnaW4sIHVzdWFsbHkgYHRoaXNgIGluIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHBsdWdpbiwgcGFzc2VkIGFzIGEgY2FtZWxDYXNlZCBzdHJpbmcuXG4gICAqIEBmaXJlcyBQbHVnaW4jaW5pdFxuICAgKi9cbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uKHBsdWdpbiwgbmFtZSl7XG4gICAgdmFyIHBsdWdpbk5hbWUgPSBuYW1lID8gaHlwaGVuYXRlKG5hbWUpIDogZnVuY3Rpb25OYW1lKHBsdWdpbi5jb25zdHJ1Y3RvcikudG9Mb3dlckNhc2UoKTtcbiAgICBwbHVnaW4udXVpZCA9IHRoaXMuR2V0WW9EaWdpdHMoNiwgcGx1Z2luTmFtZSk7XG5cbiAgICBpZighcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApKXsgcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWAsIHBsdWdpbi51dWlkKTsgfVxuICAgIGlmKCFwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKSl7IHBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicsIHBsdWdpbik7IH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAgICAgICAqL1xuICAgIHBsdWdpbi4kZWxlbWVudC50cmlnZ2VyKGBpbml0LnpmLiR7cGx1Z2luTmFtZX1gKTtcblxuICAgIHRoaXMuX3V1aWRzLnB1c2gocGx1Z2luLnV1aWQpO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFJlbW92ZXMgdGhlIHBsdWdpbnMgdXVpZCBmcm9tIHRoZSBfdXVpZHMgYXJyYXkuXG4gICAqIFJlbW92ZXMgdGhlIHpmUGx1Z2luIGRhdGEgYXR0cmlidXRlLCBhcyB3ZWxsIGFzIHRoZSBkYXRhLXBsdWdpbi1uYW1lIGF0dHJpYnV0ZS5cbiAgICogQWxzbyBmaXJlcyB0aGUgZGVzdHJveWVkIGV2ZW50IGZvciB0aGUgcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rlc3Ryb3llZFxuICAgKi9cbiAgdW5yZWdpc3RlclBsdWdpbjogZnVuY3Rpb24ocGx1Z2luKXtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IGh5cGhlbmF0ZShmdW5jdGlvbk5hbWUocGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykuY29uc3RydWN0b3IpKTtcblxuICAgIHRoaXMuX3V1aWRzLnNwbGljZSh0aGlzLl91dWlkcy5pbmRleE9mKHBsdWdpbi51dWlkKSwgMSk7XG4gICAgcGx1Z2luLiRlbGVtZW50LnJlbW92ZUF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApLnJlbW92ZURhdGEoJ3pmUGx1Z2luJylcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gZGVzdHJveWVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jZGVzdHJveWVkXG4gICAgICAgICAgICovXG4gICAgICAgICAgLnRyaWdnZXIoYGRlc3Ryb3llZC56Zi4ke3BsdWdpbk5hbWV9YCk7XG4gICAgZm9yKHZhciBwcm9wIGluIHBsdWdpbil7XG4gICAgICBwbHVnaW5bcHJvcF0gPSBudWxsOy8vY2xlYW4gdXAgc2NyaXB0IHRvIHByZXAgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQ2F1c2VzIG9uZSBvciBtb3JlIGFjdGl2ZSBwbHVnaW5zIHRvIHJlLWluaXRpYWxpemUsIHJlc2V0dGluZyBldmVudCBsaXN0ZW5lcnMsIHJlY2FsY3VsYXRpbmcgcG9zaXRpb25zLCBldGMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5zIC0gb3B0aW9uYWwgc3RyaW5nIG9mIGFuIGluZGl2aWR1YWwgcGx1Z2luIGtleSwgYXR0YWluZWQgYnkgY2FsbGluZyBgJChlbGVtZW50KS5kYXRhKCdwbHVnaW5OYW1lJylgLCBvciBzdHJpbmcgb2YgYSBwbHVnaW4gY2xhc3MgaS5lLiBgJ2Ryb3Bkb3duJ2BcbiAgICogQGRlZmF1bHQgSWYgbm8gYXJndW1lbnQgaXMgcGFzc2VkLCByZWZsb3cgYWxsIGN1cnJlbnRseSBhY3RpdmUgcGx1Z2lucy5cbiAgICovXG4gICByZUluaXQ6IGZ1bmN0aW9uKHBsdWdpbnMpe1xuICAgICB2YXIgaXNKUSA9IHBsdWdpbnMgaW5zdGFuY2VvZiAkO1xuICAgICB0cnl7XG4gICAgICAgaWYoaXNKUSl7XG4gICAgICAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgJCh0aGlzKS5kYXRhKCd6ZlBsdWdpbicpLl9pbml0KCk7XG4gICAgICAgICB9KTtcbiAgICAgICB9ZWxzZXtcbiAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHBsdWdpbnMsXG4gICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICBmbnMgPSB7XG4gICAgICAgICAgICdvYmplY3QnOiBmdW5jdGlvbihwbGdzKXtcbiAgICAgICAgICAgICBwbGdzLmZvckVhY2goZnVuY3Rpb24ocCl7XG4gICAgICAgICAgICAgICBwID0gaHlwaGVuYXRlKHApO1xuICAgICAgICAgICAgICAgJCgnW2RhdGEtJysgcCArJ10nKS5mb3VuZGF0aW9uKCdfaW5pdCcpO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICB9LFxuICAgICAgICAgICAnc3RyaW5nJzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICBwbHVnaW5zID0gaHlwaGVuYXRlKHBsdWdpbnMpO1xuICAgICAgICAgICAgICQoJ1tkYXRhLScrIHBsdWdpbnMgKyddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgJ3VuZGVmaW5lZCc6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgdGhpc1snb2JqZWN0J10oT2JqZWN0LmtleXMoX3RoaXMuX3BsdWdpbnMpKTtcbiAgICAgICAgICAgfVxuICAgICAgICAgfTtcbiAgICAgICAgIGZuc1t0eXBlXShwbHVnaW5zKTtcbiAgICAgICB9XG4gICAgIH1jYXRjaChlcnIpe1xuICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgfWZpbmFsbHl7XG4gICAgICAgcmV0dXJuIHBsdWdpbnM7XG4gICAgIH1cbiAgIH0sXG5cbiAgLyoqXG4gICAqIHJldHVybnMgYSByYW5kb20gYmFzZS0zNiB1aWQgd2l0aCBuYW1lc3BhY2luZ1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCAtIG51bWJlciBvZiByYW5kb20gYmFzZS0zNiBkaWdpdHMgZGVzaXJlZC4gSW5jcmVhc2UgZm9yIG1vcmUgcmFuZG9tIHN0cmluZ3MuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBuYW1lIG9mIHBsdWdpbiB0byBiZSBpbmNvcnBvcmF0ZWQgaW4gdWlkLCBvcHRpb25hbC5cbiAgICogQGRlZmF1bHQge1N0cmluZ30gJycgLSBpZiBubyBwbHVnaW4gbmFtZSBpcyBwcm92aWRlZCwgbm90aGluZyBpcyBhcHBlbmRlZCB0byB0aGUgdWlkLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHVuaXF1ZSBpZFxuICAgKi9cbiAgR2V0WW9EaWdpdHM6IGZ1bmN0aW9uKGxlbmd0aCwgbmFtZXNwYWNlKXtcbiAgICBsZW5ndGggPSBsZW5ndGggfHwgNjtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoTWF0aC5wb3coMzYsIGxlbmd0aCArIDEpIC0gTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDM2LCBsZW5ndGgpKSkudG9TdHJpbmcoMzYpLnNsaWNlKDEpICsgKG5hbWVzcGFjZSA/IGAtJHtuYW1lc3BhY2V9YCA6ICcnKTtcbiAgfSxcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgcGx1Z2lucyBvbiBhbnkgZWxlbWVudHMgd2l0aGluIGBlbGVtYCAoYW5kIGBlbGVtYCBpdHNlbGYpIHRoYXQgYXJlbid0IGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIC0galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50IHRvIGNoZWNrIGluc2lkZS4gQWxzbyBjaGVja3MgdGhlIGVsZW1lbnQgaXRzZWxmLCB1bmxlc3MgaXQncyB0aGUgYGRvY3VtZW50YCBvYmplY3QuXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBwbHVnaW5zIC0gQSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZS4gTGVhdmUgdGhpcyBvdXQgdG8gaW5pdGlhbGl6ZSBldmVyeXRoaW5nLlxuICAgKi9cbiAgcmVmbG93OiBmdW5jdGlvbihlbGVtLCBwbHVnaW5zKSB7XG5cbiAgICAvLyBJZiBwbHVnaW5zIGlzIHVuZGVmaW5lZCwganVzdCBncmFiIGV2ZXJ5dGhpbmdcbiAgICBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwbHVnaW5zID0gT2JqZWN0LmtleXModGhpcy5fcGx1Z2lucyk7XG4gICAgfVxuICAgIC8vIElmIHBsdWdpbnMgaXMgYSBzdHJpbmcsIGNvbnZlcnQgaXQgdG8gYW4gYXJyYXkgd2l0aCBvbmUgaXRlbVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z2lucyA9IFtwbHVnaW5zXTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcGx1Z2luXG4gICAgJC5lYWNoKHBsdWdpbnMsIGZ1bmN0aW9uKGksIG5hbWUpIHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwbHVnaW5cbiAgICAgIHZhciBwbHVnaW4gPSBfdGhpcy5fcGx1Z2luc1tuYW1lXTtcblxuICAgICAgLy8gTG9jYWxpemUgdGhlIHNlYXJjaCB0byBhbGwgZWxlbWVudHMgaW5zaWRlIGVsZW0sIGFzIHdlbGwgYXMgZWxlbSBpdHNlbGYsIHVubGVzcyBlbGVtID09PSBkb2N1bWVudFxuICAgICAgdmFyICRlbGVtID0gJChlbGVtKS5maW5kKCdbZGF0YS0nK25hbWUrJ10nKS5hZGRCYWNrKCdbZGF0YS0nK25hbWUrJ10nKTtcblxuICAgICAgLy8gRm9yIGVhY2ggcGx1Z2luIGZvdW5kLCBpbml0aWFsaXplIGl0XG4gICAgICAkZWxlbS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgJGVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWRpcCBvbiBwbHVnaW5zXG4gICAgICAgIGlmICgkZWwuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIGluaXRpYWxpemUgXCIrbmFtZStcIiBvbiBhbiBlbGVtZW50IHRoYXQgYWxyZWFkeSBoYXMgYSBGb3VuZGF0aW9uIHBsdWdpbi5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoJGVsLmF0dHIoJ2RhdGEtb3B0aW9ucycpKXtcbiAgICAgICAgICB2YXIgdGhpbmcgPSAkZWwuYXR0cignZGF0YS1vcHRpb25zJykuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uKGUsIGkpe1xuICAgICAgICAgICAgdmFyIG9wdCA9IGUuc3BsaXQoJzonKS5tYXAoZnVuY3Rpb24oZWwpeyByZXR1cm4gZWwudHJpbSgpOyB9KTtcbiAgICAgICAgICAgIGlmKG9wdFswXSkgb3B0c1tvcHRbMF1dID0gcGFyc2VWYWx1ZShvcHRbMV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAkZWwuZGF0YSgnemZQbHVnaW4nLCBuZXcgcGx1Z2luKCQodGhpcyksIG9wdHMpKTtcbiAgICAgICAgfWNhdGNoKGVyKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVyKTtcbiAgICAgICAgfWZpbmFsbHl7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0Rm5OYW1lOiBmdW5jdGlvbk5hbWUsXG4gIHRyYW5zaXRpb25lbmQ6IGZ1bmN0aW9uKCRlbGVtKXtcbiAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgICAndHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAnT1RyYW5zaXRpb24nOiAnb3RyYW5zaXRpb25lbmQnXG4gICAgfTtcbiAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICBlbmQ7XG5cbiAgICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKXtcbiAgICAgIGlmICh0eXBlb2YgZWxlbS5zdHlsZVt0XSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBlbmQgPSB0cmFuc2l0aW9uc1t0XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoZW5kKXtcbiAgICAgIHJldHVybiBlbmQ7XG4gICAgfWVsc2V7XG4gICAgICBlbmQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICRlbGVtLnRyaWdnZXJIYW5kbGVyKCd0cmFuc2l0aW9uZW5kJywgWyRlbGVtXSk7XG4gICAgICB9LCAxKTtcbiAgICAgIHJldHVybiAndHJhbnNpdGlvbmVuZCc7XG4gICAgfVxuICB9XG59O1xuXG5Gb3VuZGF0aW9uLnV0aWwgPSB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiBmb3IgYXBwbHlpbmcgYSBkZWJvdW5jZSBlZmZlY3QgdG8gYSBmdW5jdGlvbiBjYWxsLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhdCBlbmQgb2YgdGltZW91dC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5IC0gVGltZSBpbiBtcyB0byBkZWxheSB0aGUgY2FsbCBvZiBgZnVuY2AuXG4gICAqIEByZXR1cm5zIGZ1bmN0aW9uXG4gICAqL1xuICB0aHJvdHRsZTogZnVuY3Rpb24gKGZ1bmMsIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgIGlmICh0aW1lciA9PT0gbnVsbCkge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuLy8gVE9ETzogY29uc2lkZXIgbm90IG1ha2luZyB0aGlzIGEgalF1ZXJ5IGZ1bmN0aW9uXG4vLyBUT0RPOiBuZWVkIHdheSB0byByZWZsb3cgdnMuIHJlLWluaXRpYWxpemVcbi8qKlxuICogVGhlIEZvdW5kYXRpb24galF1ZXJ5IG1ldGhvZC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBtZXRob2QgLSBBbiBhY3Rpb24gdG8gcGVyZm9ybSBvbiB0aGUgY3VycmVudCBqUXVlcnkgb2JqZWN0LlxuICovXG52YXIgZm91bmRhdGlvbiA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBtZXRob2QsXG4gICAgICAkbWV0YSA9ICQoJ21ldGEuZm91bmRhdGlvbi1tcScpLFxuICAgICAgJG5vSlMgPSAkKCcubm8tanMnKTtcblxuICBpZighJG1ldGEubGVuZ3RoKXtcbiAgICAkKCc8bWV0YSBjbGFzcz1cImZvdW5kYXRpb24tbXFcIj4nKS5hcHBlbmRUbyhkb2N1bWVudC5oZWFkKTtcbiAgfVxuICBpZigkbm9KUy5sZW5ndGgpe1xuICAgICRub0pTLnJlbW92ZUNsYXNzKCduby1qcycpO1xuICB9XG5cbiAgaWYodHlwZSA9PT0gJ3VuZGVmaW5lZCcpey8vbmVlZHMgdG8gaW5pdGlhbGl6ZSB0aGUgRm91bmRhdGlvbiBvYmplY3QsIG9yIGFuIGluZGl2aWR1YWwgcGx1Z2luLlxuICAgIEZvdW5kYXRpb24uTWVkaWFRdWVyeS5faW5pdCgpO1xuICAgIEZvdW5kYXRpb24ucmVmbG93KHRoaXMpO1xuICB9ZWxzZSBpZih0eXBlID09PSAnc3RyaW5nJyl7Ly9hbiBpbmRpdmlkdWFsIG1ldGhvZCB0byBpbnZva2Ugb24gYSBwbHVnaW4gb3IgZ3JvdXAgb2YgcGx1Z2luc1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsvL2NvbGxlY3QgYWxsIHRoZSBhcmd1bWVudHMsIGlmIG5lY2Vzc2FyeVxuICAgIHZhciBwbHVnQ2xhc3MgPSB0aGlzLmRhdGEoJ3pmUGx1Z2luJyk7Ly9kZXRlcm1pbmUgdGhlIGNsYXNzIG9mIHBsdWdpblxuXG4gICAgaWYocGx1Z0NsYXNzICE9PSB1bmRlZmluZWQgJiYgcGx1Z0NsYXNzW21ldGhvZF0gIT09IHVuZGVmaW5lZCl7Ly9tYWtlIHN1cmUgYm90aCB0aGUgY2xhc3MgYW5kIG1ldGhvZCBleGlzdFxuICAgICAgaWYodGhpcy5sZW5ndGggPT09IDEpey8vaWYgdGhlcmUncyBvbmx5IG9uZSwgY2FsbCBpdCBkaXJlY3RseS5cbiAgICAgICAgICBwbHVnQ2xhc3NbbWV0aG9kXS5hcHBseShwbHVnQ2xhc3MsIGFyZ3MpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpLCBlbCl7Ly9vdGhlcndpc2UgbG9vcCB0aHJvdWdoIHRoZSBqUXVlcnkgY29sbGVjdGlvbiBhbmQgaW52b2tlIHRoZSBtZXRob2Qgb24gZWFjaFxuICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KCQoZWwpLmRhdGEoJ3pmUGx1Z2luJyksIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9ZWxzZXsvL2Vycm9yIGZvciBubyBjbGFzcyBvciBubyBtZXRob2RcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIldlJ3JlIHNvcnJ5LCAnXCIgKyBtZXRob2QgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBtZXRob2QgZm9yIFwiICsgKHBsdWdDbGFzcyA/IGZ1bmN0aW9uTmFtZShwbHVnQ2xhc3MpIDogJ3RoaXMgZWxlbWVudCcpICsgJy4nKTtcbiAgICB9XG4gIH1lbHNley8vZXJyb3IgZm9yIGludmFsaWQgYXJndW1lbnQgdHlwZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFdlJ3JlIHNvcnJ5LCAke3R5cGV9IGlzIG5vdCBhIHZhbGlkIHBhcmFtZXRlci4gWW91IG11c3QgdXNlIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWV0aG9kIHlvdSB3aXNoIHRvIGludm9rZS5gKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbndpbmRvdy5Gb3VuZGF0aW9uID0gRm91bmRhdGlvbjtcbiQuZm4uZm91bmRhdGlvbiA9IGZvdW5kYXRpb247XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbigpIHtcbiAgaWYgKCFEYXRlLm5vdyB8fCAhd2luZG93LkRhdGUubm93KVxuICAgIHdpbmRvdy5EYXRlLm5vdyA9IERhdGUubm93ID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcblxuICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcbiAgICAgIHZhciB2cCA9IHZlbmRvcnNbaV07XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZwKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9ICh3aW5kb3dbdnArJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvd1t2cCsnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ10pO1xuICB9XG4gIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sobGFzdFRpbWUgPSBuZXh0VGltZSk7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUaW1lIC0gbm93KTtcbiAgICB9O1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgfVxuICAvKipcbiAgICogUG9seWZpbGwgZm9yIHBlcmZvcm1hbmNlLm5vdywgcmVxdWlyZWQgYnkgckFGXG4gICAqL1xuICBpZighd2luZG93LnBlcmZvcm1hbmNlIHx8ICF3aW5kb3cucGVyZm9ybWFuY2Uubm93KXtcbiAgICB3aW5kb3cucGVyZm9ybWFuY2UgPSB7XG4gICAgICBzdGFydDogRGF0ZS5ub3coKSxcbiAgICAgIG5vdzogZnVuY3Rpb24oKXsgcmV0dXJuIERhdGUubm93KCkgLSB0aGlzLnN0YXJ0OyB9XG4gICAgfTtcbiAgfVxufSkoKTtcbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbihvVGhpcykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XG4gICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZScpO1xuICAgIH1cblxuICAgIHZhciBhQXJncyAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgZlRvQmluZCA9IHRoaXMsXG4gICAgICAgIGZOT1AgICAgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgICBmQm91bmQgID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGZUb0JpbmQuYXBwbHkodGhpcyBpbnN0YW5jZW9mIGZOT1BcbiAgICAgICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICAgICAgIDogb1RoaXMsXG4gICAgICAgICAgICAgICAgIGFBcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm90b3R5cGUpIHtcbiAgICAgIC8vIG5hdGl2ZSBmdW5jdGlvbnMgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZVxuICAgICAgZk5PUC5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcbiAgICB9XG4gICAgZkJvdW5kLnByb3RvdHlwZSA9IG5ldyBmTk9QKCk7XG5cbiAgICByZXR1cm4gZkJvdW5kO1xuICB9O1xufVxuLy8gUG9seWZpbGwgdG8gZ2V0IHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gaW4gSUU5XG5mdW5jdGlvbiBmdW5jdGlvbk5hbWUoZm4pIHtcbiAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvblxccyhbXihdezEsfSlcXCgvO1xuICAgIHZhciByZXN1bHRzID0gKGZ1bmNOYW1lUmVnZXgpLmV4ZWMoKGZuKS50b1N0cmluZygpKTtcbiAgICByZXR1cm4gKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGggPiAxKSA/IHJlc3VsdHNbMV0udHJpbSgpIDogXCJcIjtcbiAgfVxuICBlbHNlIGlmIChmbi5wcm90b3R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmbi5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBmbi5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZShzdHIpe1xuICBpZigvdHJ1ZS8udGVzdChzdHIpKSByZXR1cm4gdHJ1ZTtcbiAgZWxzZSBpZigvZmFsc2UvLnRlc3Qoc3RyKSkgcmV0dXJuIGZhbHNlO1xuICBlbHNlIGlmKCFpc05hTihzdHIgKiAxKSkgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cbi8vIENvbnZlcnQgUGFzY2FsQ2FzZSB0byBrZWJhYi1jYXNlXG4vLyBUaGFuayB5b3U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg5NTU1ODBcbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xufVxuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbkZvdW5kYXRpb24uQm94ID0ge1xuICBJbU5vdFRvdWNoaW5nWW91OiBJbU5vdFRvdWNoaW5nWW91LFxuICBHZXREaW1lbnNpb25zOiBHZXREaW1lbnNpb25zLFxuICBHZXRPZmZzZXRzOiBHZXRPZmZzZXRzXG59XG5cbi8qKlxuICogQ29tcGFyZXMgdGhlIGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudCB0byBhIGNvbnRhaW5lciBhbmQgZGV0ZXJtaW5lcyBjb2xsaXNpb24gZXZlbnRzIHdpdGggY29udGFpbmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdGVzdCBmb3IgY29sbGlzaW9ucy5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBwYXJlbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHVzZSBhcyBib3VuZGluZyBjb250YWluZXIuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGxyT25seSAtIHNldCB0byB0cnVlIHRvIGNoZWNrIGxlZnQgYW5kIHJpZ2h0IHZhbHVlcyBvbmx5LlxuICogQHBhcmFtIHtCb29sZWFufSB0Yk9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayB0b3AgYW5kIGJvdHRvbSB2YWx1ZXMgb25seS5cbiAqIEBkZWZhdWx0IGlmIG5vIHBhcmVudCBvYmplY3QgcGFzc2VkLCBkZXRlY3RzIGNvbGxpc2lvbnMgd2l0aCBgd2luZG93YC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgY29sbGlzaW9uIGZyZWUsIGZhbHNlIGlmIGEgY29sbGlzaW9uIGluIGFueSBkaXJlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIEltTm90VG91Y2hpbmdZb3UoZWxlbWVudCwgcGFyZW50LCBsck9ubHksIHRiT25seSkge1xuICB2YXIgZWxlRGltcyA9IEdldERpbWVuc2lvbnMoZWxlbWVudCksXG4gICAgICB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQ7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIHZhciBwYXJEaW1zID0gR2V0RGltZW5zaW9ucyhwYXJlbnQpO1xuXG4gICAgYm90dG9tID0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0IDw9IHBhckRpbXMuaGVpZ2h0ICsgcGFyRGltcy5vZmZzZXQudG9wKTtcbiAgICB0b3AgICAgPSAoZWxlRGltcy5vZmZzZXQudG9wID49IHBhckRpbXMub2Zmc2V0LnRvcCk7XG4gICAgbGVmdCAgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgPj0gcGFyRGltcy5vZmZzZXQubGVmdCk7XG4gICAgcmlnaHQgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgKyBlbGVEaW1zLndpZHRoIDw9IHBhckRpbXMud2lkdGggKyBwYXJEaW1zLm9mZnNldC5sZWZ0KTtcbiAgfVxuICBlbHNlIHtcbiAgICBib3R0b20gPSAoZWxlRGltcy5vZmZzZXQudG9wICsgZWxlRGltcy5oZWlnaHQgPD0gZWxlRGltcy53aW5kb3dEaW1zLmhlaWdodCArIGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wKTtcbiAgICB0b3AgICAgPSAoZWxlRGltcy5vZmZzZXQudG9wID49IGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wKTtcbiAgICBsZWZ0ICAgPSAoZWxlRGltcy5vZmZzZXQubGVmdCA+PSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQpO1xuICAgIHJpZ2h0ICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ICsgZWxlRGltcy53aWR0aCA8PSBlbGVEaW1zLndpbmRvd0RpbXMud2lkdGgpO1xuICB9XG5cbiAgdmFyIGFsbERpcnMgPSBbYm90dG9tLCB0b3AsIGxlZnQsIHJpZ2h0XTtcblxuICBpZiAobHJPbmx5KSB7XG4gICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0ID09PSB0cnVlO1xuICB9XG5cbiAgaWYgKHRiT25seSkge1xuICAgIHJldHVybiB0b3AgPT09IGJvdHRvbSA9PT0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhbGxEaXJzLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbn07XG5cbi8qKlxuICogVXNlcyBuYXRpdmUgbWV0aG9kcyB0byByZXR1cm4gYW4gb2JqZWN0IG9mIGRpbWVuc2lvbiB2YWx1ZXMuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5IHx8IEhUTUx9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IG9yIERPTSBlbGVtZW50IGZvciB3aGljaCB0byBnZXQgdGhlIGRpbWVuc2lvbnMuIENhbiBiZSBhbnkgZWxlbWVudCBvdGhlciB0aGF0IGRvY3VtZW50IG9yIHdpbmRvdy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gbmVzdGVkIG9iamVjdCBvZiBpbnRlZ2VyIHBpeGVsIHZhbHVlc1xuICogVE9ETyAtIGlmIGVsZW1lbnQgaXMgd2luZG93LCByZXR1cm4gb25seSB0aG9zZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIEdldERpbWVuc2lvbnMoZWxlbSwgdGVzdCl7XG4gIGVsZW0gPSBlbGVtLmxlbmd0aCA/IGVsZW1bMF0gOiBlbGVtO1xuXG4gIGlmIChlbGVtID09PSB3aW5kb3cgfHwgZWxlbSA9PT0gZG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJJ20gc29ycnksIERhdmUuIEknbSBhZnJhaWQgSSBjYW4ndCBkbyB0aGF0LlwiKTtcbiAgfVxuXG4gIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHBhclJlY3QgPSBlbGVtLnBhcmVudE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5SZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHdpblkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICB3aW5YID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICBvZmZzZXQ6IHtcbiAgICAgIHRvcDogcmVjdC50b3AgKyB3aW5ZLFxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luWFxuICAgIH0sXG4gICAgcGFyZW50RGltczoge1xuICAgICAgd2lkdGg6IHBhclJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHBhclJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogcGFyUmVjdC50b3AgKyB3aW5ZLFxuICAgICAgICBsZWZ0OiBwYXJSZWN0LmxlZnQgKyB3aW5YXG4gICAgICB9XG4gICAgfSxcbiAgICB3aW5kb3dEaW1zOiB7XG4gICAgICB3aWR0aDogd2luUmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogd2luUmVjdC5oZWlnaHQsXG4gICAgICBvZmZzZXQ6IHtcbiAgICAgICAgdG9wOiB3aW5ZLFxuICAgICAgICBsZWZ0OiB3aW5YXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2YgdG9wIGFuZCBsZWZ0IGludGVnZXIgcGl4ZWwgdmFsdWVzIGZvciBkeW5hbWljYWxseSByZW5kZXJlZCBlbGVtZW50cyxcbiAqIHN1Y2ggYXM6IFRvb2x0aXAsIFJldmVhbCwgYW5kIERyb3Bkb3duXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQgYmVpbmcgcG9zaXRpb25lZC5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBhbmNob3IgLSBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZWxlbWVudCdzIGFuY2hvciBwb2ludC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIGEgc3RyaW5nIHJlbGF0aW5nIHRvIHRoZSBkZXNpcmVkIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LCByZWxhdGl2ZSB0byBpdCdzIGFuY2hvclxuICogQHBhcmFtIHtOdW1iZXJ9IHZPZmZzZXQgLSBpbnRlZ2VyIHBpeGVsIHZhbHVlIG9mIGRlc2lyZWQgdmVydGljYWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoT2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIGhvcml6b250YWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNPdmVyZmxvdyAtIGlmIGEgY29sbGlzaW9uIGV2ZW50IGlzIGRldGVjdGVkLCBzZXRzIHRvIHRydWUgdG8gZGVmYXVsdCB0aGUgZWxlbWVudCB0byBmdWxsIHdpZHRoIC0gYW55IGRlc2lyZWQgb2Zmc2V0LlxuICogVE9ETyBhbHRlci9yZXdyaXRlIHRvIHdvcmsgd2l0aCBgZW1gIHZhbHVlcyBhcyB3ZWxsL2luc3RlYWQgb2YgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIEdldE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdykge1xuICB2YXIgJGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgJGFuY2hvckRpbXMgPSBhbmNob3IgPyBHZXREaW1lbnNpb25zKGFuY2hvcikgOiBudWxsO1xuXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCAtICgkZWxlRGltcy5oZWlnaHQgKyB2T2Zmc2V0KVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0LFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciB0b3AnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgKCRhbmNob3JEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMiksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCAtICgkZWxlRGltcy5oZWlnaHQgKyB2T2Zmc2V0KVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyIGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBpc092ZXJmbG93ID8gaE9mZnNldCA6ICgoJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAoJGFuY2hvckRpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXRcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciBsZWZ0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gKCRlbGVEaW1zLndpZHRoICsgaE9mZnNldCksXG4gICAgICAgIHRvcDogKCRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAoJGFuY2hvckRpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgcmlnaHQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAkYW5jaG9yRGltcy53aWR0aCArIGhPZmZzZXQgKyAxLFxuICAgICAgICB0b3A6ICgkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgKCRhbmNob3JEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0ICsgKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSxcbiAgICAgICAgdG9wOiAoJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wICsgKCRlbGVEaW1zLndpbmRvd0RpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZXZlYWwnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLSAkZWxlRGltcy53aWR0aCkgLyAyLFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCArIHZPZmZzZXRcbiAgICAgIH1cbiAgICBjYXNlICdyZXZlYWwgZnVsbCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0LFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcFxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCBib3R0b20nOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0IGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICRhbmNob3JEaW1zLndpZHRoICsgaE9mZnNldCAtICRlbGVEaW1zLndpZHRoLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9XG4gIH1cbn1cblxufShqUXVlcnkpO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBUaGlzIHV0aWwgd2FzIGNyZWF0ZWQgYnkgTWFyaXVzIE9sYmVydHogKlxuICogUGxlYXNlIHRoYW5rIE1hcml1cyBvbiBHaXRIdWIgL293bGJlcnR6ICpcbiAqIG9yIHRoZSB3ZWIgaHR0cDovL3d3dy5tYXJpdXNvbGJlcnR6LmRlLyAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBrZXlDb2RlcyA9IHtcbiAgOTogJ1RBQicsXG4gIDEzOiAnRU5URVInLFxuICAyNzogJ0VTQ0FQRScsXG4gIDMyOiAnU1BBQ0UnLFxuICAzNzogJ0FSUk9XX0xFRlQnLFxuICAzODogJ0FSUk9XX1VQJyxcbiAgMzk6ICdBUlJPV19SSUdIVCcsXG4gIDQwOiAnQVJST1dfRE9XTidcbn1cblxudmFyIGNvbW1hbmRzID0ge31cblxudmFyIEtleWJvYXJkID0ge1xuICBrZXlzOiBnZXRLZXlDb2RlcyhrZXlDb2RlcyksXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgKGtleWJvYXJkKSBldmVudCBhbmQgcmV0dXJucyBhIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgaXRzIGtleVxuICAgKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm4gU3RyaW5nIGtleSAtIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGtleSBwcmVzc2VkXG4gICAqL1xuICBwYXJzZUtleShldmVudCkge1xuICAgIHZhciBrZXkgPSBrZXlDb2Rlc1tldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlXSB8fCBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LndoaWNoKS50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChldmVudC5zaGlmdEtleSkga2V5ID0gYFNISUZUXyR7a2V5fWA7XG4gICAgaWYgKGV2ZW50LmN0cmxLZXkpIGtleSA9IGBDVFJMXyR7a2V5fWA7XG4gICAgaWYgKGV2ZW50LmFsdEtleSkga2V5ID0gYEFMVF8ke2tleX1gO1xuICAgIHJldHVybiBrZXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIGdpdmVuIChrZXlib2FyZCkgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb21wb25lbnQgLSBGb3VuZGF0aW9uIGNvbXBvbmVudCdzIG5hbWUsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcGFyYW0ge09iamVjdHN9IGZ1bmN0aW9ucyAtIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHRvIGJlIGV4ZWN1dGVkXG4gICAqL1xuICBoYW5kbGVLZXkoZXZlbnQsIGNvbXBvbmVudCwgZnVuY3Rpb25zKSB7XG4gICAgdmFyIGNvbW1hbmRMaXN0ID0gY29tbWFuZHNbY29tcG9uZW50XSxcbiAgICAgIGtleUNvZGUgPSB0aGlzLnBhcnNlS2V5KGV2ZW50KSxcbiAgICAgIGNtZHMsXG4gICAgICBjb21tYW5kLFxuICAgICAgZm47XG5cbiAgICBpZiAoIWNvbW1hbmRMaXN0KSByZXR1cm4gY29uc29sZS53YXJuKCdDb21wb25lbnQgbm90IGRlZmluZWQhJyk7XG5cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRMaXN0Lmx0ciA9PT0gJ3VuZGVmaW5lZCcpIHsgLy8gdGhpcyBjb21wb25lbnQgZG9lcyBub3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGx0ciBhbmQgcnRsXG4gICAgICAgIGNtZHMgPSBjb21tYW5kTGlzdDsgLy8gdXNlIHBsYWluIGxpc3RcbiAgICB9IGVsc2UgeyAvLyBtZXJnZSBsdHIgYW5kIHJ0bDogaWYgZG9jdW1lbnQgaXMgcnRsLCBydGwgb3ZlcndyaXRlcyBsdHIgYW5kIHZpY2UgdmVyc2FcbiAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIGNtZHMgPSAkLmV4dGVuZCh7fSwgY29tbWFuZExpc3QubHRyLCBjb21tYW5kTGlzdC5ydGwpO1xuXG4gICAgICAgIGVsc2UgY21kcyA9ICQuZXh0ZW5kKHt9LCBjb21tYW5kTGlzdC5ydGwsIGNvbW1hbmRMaXN0Lmx0cik7XG4gICAgfVxuICAgIGNvbW1hbmQgPSBjbWRzW2tleUNvZGVdO1xuXG4gICAgZm4gPSBmdW5jdGlvbnNbY29tbWFuZF07XG4gICAgaWYgKGZuICYmIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGVjdXRlIGZ1bmN0aW9uICBpZiBleGlzdHNcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGZuLmFwcGx5KCk7XG4gICAgICBpZiAoZnVuY3Rpb25zLmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy5oYW5kbGVkID09PSAnZnVuY3Rpb24nKSB7IC8vIGV4ZWN1dGUgZnVuY3Rpb24gd2hlbiBldmVudCB3YXMgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy5oYW5kbGVkKHJldHVyblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZ1bmN0aW9ucy51bmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy51bmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHsgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBub3QgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy51bmhhbmRsZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBmb2N1c2FibGUgZWxlbWVudHMgd2l0aGluIHRoZSBnaXZlbiBgJGVsZW1lbnRgXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICAgKiBAcmV0dXJuIHtqUXVlcnl9ICRmb2N1c2FibGUgLSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiBgJGVsZW1lbnRgXG4gICAqL1xuICBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSB7XG4gICAgcmV0dXJuICRlbGVtZW50LmZpbmQoJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdLCAqW2NvbnRlbnRlZGl0YWJsZV0nKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoISQodGhpcykuaXMoJzp2aXNpYmxlJykgfHwgJCh0aGlzKS5hdHRyKCd0YWJpbmRleCcpIDwgMCkgeyByZXR1cm4gZmFsc2U7IH0gLy9vbmx5IGhhdmUgdmlzaWJsZSBlbGVtZW50cyBhbmQgdGhvc2UgdGhhdCBoYXZlIGEgdGFiaW5kZXggZ3JlYXRlciBvciBlcXVhbCAwXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IG5hbWUgbmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcmV0dXJuIFN0cmluZyBjb21wb25lbnROYW1lXG4gICAqL1xuXG4gIHJlZ2lzdGVyKGNvbXBvbmVudE5hbWUsIGNtZHMpIHtcbiAgICBjb21tYW5kc1tjb21wb25lbnROYW1lXSA9IGNtZHM7XG4gIH1cbn1cblxuLypcbiAqIENvbnN0YW50cyBmb3IgZWFzaWVyIGNvbXBhcmluZy5cbiAqIENhbiBiZSB1c2VkIGxpa2UgRm91bmRhdGlvbi5wYXJzZUtleShldmVudCkgPT09IEZvdW5kYXRpb24ua2V5cy5TUEFDRVxuICovXG5mdW5jdGlvbiBnZXRLZXlDb2RlcyhrY3MpIHtcbiAgdmFyIGsgPSB7fTtcbiAgZm9yICh2YXIga2MgaW4ga2NzKSBrW2tjc1trY11dID0ga2NzW2tjXTtcbiAgcmV0dXJuIGs7XG59XG5cbkZvdW5kYXRpb24uS2V5Ym9hcmQgPSBLZXlib2FyZDtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vLyBEZWZhdWx0IHNldCBvZiBtZWRpYSBxdWVyaWVzXG5jb25zdCBkZWZhdWx0UXVlcmllcyA9IHtcbiAgJ2RlZmF1bHQnIDogJ29ubHkgc2NyZWVuJyxcbiAgbGFuZHNjYXBlIDogJ29ubHkgc2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSknLFxuICBwb3J0cmFpdCA6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICByZXRpbmEgOiAnb25seSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMi8xKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMmRwcHgpJ1xufTtcblxudmFyIE1lZGlhUXVlcnkgPSB7XG4gIHF1ZXJpZXM6IFtdLFxuXG4gIGN1cnJlbnQ6ICcnLFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgbWVkaWEgcXVlcnkgaGVscGVyLCBieSBleHRyYWN0aW5nIHRoZSBicmVha3BvaW50IGxpc3QgZnJvbSB0aGUgQ1NTIGFuZCBhY3RpdmF0aW5nIHRoZSBicmVha3BvaW50IHdhdGNoZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBleHRyYWN0ZWRTdHlsZXMgPSAkKCcuZm91bmRhdGlvbi1tcScpLmNzcygnZm9udC1mYW1pbHknKTtcbiAgICB2YXIgbmFtZWRRdWVyaWVzO1xuXG4gICAgbmFtZWRRdWVyaWVzID0gcGFyc2VTdHlsZVRvT2JqZWN0KGV4dHJhY3RlZFN0eWxlcyk7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gbmFtZWRRdWVyaWVzKSB7XG4gICAgICBpZihuYW1lZFF1ZXJpZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBzZWxmLnF1ZXJpZXMucHVzaCh7XG4gICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgIHZhbHVlOiBgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR7bmFtZWRRdWVyaWVzW2tleV19KWBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKTtcblxuICAgIHRoaXMuX3dhdGNoZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gaXMgYXQgbGVhc3QgYXMgd2lkZSBhcyBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGJyZWFrcG9pbnQgbWF0Y2hlcywgYGZhbHNlYCBpZiBpdCdzIHNtYWxsZXIuXG4gICAqL1xuICBhdExlYXN0KHNpemUpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmdldChzaXplKTtcblxuICAgIGlmIChxdWVyeSkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5KS5tYXRjaGVzO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgbWVkaWEgcXVlcnkgb2YgYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGdldC5cbiAgICogQHJldHVybnMge1N0cmluZ3xudWxsfSAtIFRoZSBtZWRpYSBxdWVyeSBvZiB0aGUgYnJlYWtwb2ludCwgb3IgYG51bGxgIGlmIHRoZSBicmVha3BvaW50IGRvZXNuJ3QgZXhpc3QuXG4gICAqL1xuICBnZXQoc2l6ZSkge1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5xdWVyaWVzKSB7XG4gICAgICBpZih0aGlzLnF1ZXJpZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuICAgICAgICBpZiAoc2l6ZSA9PT0gcXVlcnkubmFtZSkgcmV0dXJuIHF1ZXJ5LnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgbmFtZSBieSB0ZXN0aW5nIGV2ZXJ5IGJyZWFrcG9pbnQgYW5kIHJldHVybmluZyB0aGUgbGFzdCBvbmUgdG8gbWF0Y2ggKHRoZSBiaWdnZXN0IG9uZSkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBOYW1lIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICBfZ2V0Q3VycmVudFNpemUoKSB7XG4gICAgdmFyIG1hdGNoZWQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuXG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocXVlcnkudmFsdWUpLm1hdGNoZXMpIHtcbiAgICAgICAgbWF0Y2hlZCA9IHF1ZXJ5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbWF0Y2hlZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBtYXRjaGVkLm5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWN0aXZhdGVzIHRoZSBicmVha3BvaW50IHdhdGNoZXIsIHdoaWNoIGZpcmVzIGFuIGV2ZW50IG9uIHRoZSB3aW5kb3cgd2hlbmV2ZXIgdGhlIGJyZWFrcG9pbnQgY2hhbmdlcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfd2F0Y2hlcigpIHtcbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5tZWRpYXF1ZXJ5JywgKCkgPT4ge1xuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpLCBjdXJyZW50U2l6ZSA9IHRoaXMuY3VycmVudDtcblxuICAgICAgaWYgKG5ld1NpemUgIT09IGN1cnJlbnRTaXplKSB7XG4gICAgICAgIC8vIENoYW5nZSB0aGUgY3VycmVudCBtZWRpYSBxdWVyeVxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBuZXdTaXplO1xuXG4gICAgICAgIC8vIEJyb2FkY2FzdCB0aGUgbWVkaWEgcXVlcnkgY2hhbmdlIG9uIHRoZSB3aW5kb3dcbiAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIFtuZXdTaXplLCBjdXJyZW50U2l6ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG4vLyBtYXRjaE1lZGlhKCkgcG9seWZpbGwgLSBUZXN0IGEgQ1NTIG1lZGlhIHR5cGUvcXVlcnkgaW4gSlMuXG4vLyBBdXRob3JzICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLCBQYXVsIElyaXNoLCBOaWNob2xhcyBaYWthcywgRGF2aWQgS25pZ2h0LiBEdWFsIE1JVC9CU0QgbGljZW5zZVxud2luZG93Lm1hdGNoTWVkaWEgfHwgKHdpbmRvdy5tYXRjaE1lZGlhID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IG1hdGNoTWVkaXVtIGFwaSBzdWNoIGFzIElFIDkgYW5kIHdlYmtpdFxuICB2YXIgc3R5bGVNZWRpYSA9ICh3aW5kb3cuc3R5bGVNZWRpYSB8fCB3aW5kb3cubWVkaWEpO1xuXG4gIC8vIEZvciB0aG9zZSB0aGF0IGRvbid0IHN1cHBvcnQgbWF0Y2hNZWRpdW1cbiAgaWYgKCFzdHlsZU1lZGlhKSB7XG4gICAgdmFyIHN0eWxlICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgIHNjcmlwdCAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdLFxuICAgIGluZm8gICAgICAgID0gbnVsbDtcblxuICAgIHN0eWxlLnR5cGUgID0gJ3RleHQvY3NzJztcbiAgICBzdHlsZS5pZCAgICA9ICdtYXRjaG1lZGlhanMtdGVzdCc7XG5cbiAgICBzY3JpcHQgJiYgc2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBzY3JpcHQpO1xuXG4gICAgLy8gJ3N0eWxlLmN1cnJlbnRTdHlsZScgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnd2luZG93LmdldENvbXB1dGVkU3R5bGUnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICBpbmZvID0gKCdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cpICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN0eWxlLCBudWxsKSB8fCBzdHlsZS5jdXJyZW50U3R5bGU7XG5cbiAgICBzdHlsZU1lZGlhID0ge1xuICAgICAgbWF0Y2hNZWRpdW0obWVkaWEpIHtcbiAgICAgICAgdmFyIHRleHQgPSBgQG1lZGlhICR7bWVkaWF9eyAjbWF0Y2htZWRpYWpzLXRlc3QgeyB3aWR0aDogMXB4OyB9IH1gO1xuXG4gICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBpZiBtZWRpYSBxdWVyeSBpcyB0cnVlIG9yIGZhbHNlXG4gICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24obWVkaWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hlczogc3R5bGVNZWRpYS5tYXRjaE1lZGl1bShtZWRpYSB8fCAnYWxsJyksXG4gICAgICBtZWRpYTogbWVkaWEgfHwgJ2FsbCdcbiAgICB9O1xuICB9XG59KCkpO1xuXG4vLyBUaGFuayB5b3U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nXG5mdW5jdGlvbiBwYXJzZVN0eWxlVG9PYmplY3Qoc3RyKSB7XG4gIHZhciBzdHlsZU9iamVjdCA9IHt9O1xuXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgfVxuXG4gIHN0ciA9IHN0ci50cmltKCkuc2xpY2UoMSwgLTEpOyAvLyBicm93c2VycyByZS1xdW90ZSBzdHJpbmcgc3R5bGUgdmFsdWVzXG5cbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHlsZU9iamVjdCA9IHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbihyZXQsIHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gcGFydHNbMF07XG4gICAgdmFyIHZhbCA9IHBhcnRzWzFdO1xuICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuXG4gICAgLy8gbWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcbiAgICAvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG4gICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cbiAgICBpZiAoIXJldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXRba2V5XSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0W2tleV0pKSB7XG4gICAgICByZXRba2V5XS5wdXNoKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldFtrZXldID0gW3JldFtrZXldLCB2YWxdO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHN0eWxlT2JqZWN0O1xufVxuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogTW90aW9uIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tb3Rpb25cbiAqL1xuXG5jb25zdCBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG5jb25zdCBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuY29uc3QgTW90aW9uID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb3ZlKGR1cmF0aW9uLCBlbGVtLCBmbil7XG4gIHZhciBhbmltLCBwcm9nLCBzdGFydCA9IG51bGw7XG4gIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcblxuICBmdW5jdGlvbiBtb3ZlKHRzKXtcbiAgICBpZighc3RhcnQpIHN0YXJ0ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0LCB0cyk7XG4gICAgcHJvZyA9IHRzIC0gc3RhcnQ7XG4gICAgZm4uYXBwbHkoZWxlbSk7XG5cbiAgICBpZihwcm9nIDwgZHVyYXRpb24peyBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlLCBlbGVtKTsgfVxuICAgIGVsc2V7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbSk7XG4gICAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICB9XG4gIH1cbiAgYW5pbSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZSk7XG59XG5cbi8qKlxuICogQW5pbWF0ZXMgYW4gZWxlbWVudCBpbiBvciBvdXQgdXNpbmcgYSBDU1MgdHJhbnNpdGlvbiBjbGFzcy5cbiAqIEBmdW5jdGlvblxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbiAtIERlZmluZXMgaWYgdGhlIGFuaW1hdGlvbiBpcyBpbiBvciBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvciBIVE1MIG9iamVjdCB0byBhbmltYXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IGFuaW1hdGlvbiAtIENTUyBjbGFzcyB0byB1c2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIHRvIHJ1biB3aGVuIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC5cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gIGVsZW1lbnQgPSAkKGVsZW1lbnQpLmVxKDApO1xuXG4gIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICB2YXIgaW5pdENsYXNzID0gaXNJbiA/IGluaXRDbGFzc2VzWzBdIDogaW5pdENsYXNzZXNbMV07XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzSW4gPyBhY3RpdmVDbGFzc2VzWzBdIDogYWN0aXZlQ2xhc3Nlc1sxXTtcblxuICAvLyBTZXQgdXAgdGhlIGFuaW1hdGlvblxuICByZXNldCgpO1xuXG4gIGVsZW1lbnRcbiAgICAuYWRkQ2xhc3MoYW5pbWF0aW9uKVxuICAgIC5jc3MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhpbml0Q2xhc3MpO1xuICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgfSk7XG5cbiAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7XG4gICAgZWxlbWVudFxuICAgICAgLmNzcygndHJhbnNpdGlvbicsICcnKVxuICAgICAgLmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZChlbGVtZW50KSwgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhgJHtpbml0Q2xhc3N9ICR7YWN0aXZlQ2xhc3N9ICR7YW5pbWF0aW9ufWApO1xuICB9XG59XG5cbkZvdW5kYXRpb24uTW92ZSA9IE1vdmU7XG5Gb3VuZGF0aW9uLk1vdGlvbiA9IE1vdGlvbjtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBOZXN0ID0ge1xuICBGZWF0aGVyKG1lbnUsIHR5cGUgPSAnemYnKSB7XG4gICAgbWVudS5hdHRyKCdyb2xlJywgJ21lbnViYXInKTtcblxuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5hdHRyKHsncm9sZSc6ICdtZW51aXRlbSd9KSxcbiAgICAgICAgc3ViTWVudUNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudWAsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IGAke3N1Yk1lbnVDbGFzc30taXRlbWAsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudS1wYXJlbnRgO1xuXG4gICAgbWVudS5maW5kKCdhOmZpcnN0JykuYXR0cigndGFiaW5kZXgnLCAwKTtcblxuICAgIGl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICRzdWIgPSAkaXRlbS5jaGlsZHJlbigndWwnKTtcblxuICAgICAgaWYgKCRzdWIubGVuZ3RoKSB7XG4gICAgICAgICRpdGVtXG4gICAgICAgICAgLmFkZENsYXNzKGhhc1N1YkNsYXNzKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICRpdGVtLmNoaWxkcmVuKCdhOmZpcnN0JykudGV4dCgpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgJHN1YlxuICAgICAgICAgIC5hZGRDbGFzcyhgc3VibWVudSAke3N1Yk1lbnVDbGFzc31gKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdkYXRhLXN1Ym1lbnUnOiAnJyxcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICAgICAncm9sZSc6ICdtZW51J1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGl0ZW0ucGFyZW50KCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCkge1xuICAgICAgICAkaXRlbS5hZGRDbGFzcyhgaXMtc3VibWVudS1pdGVtICR7c3ViSXRlbUNsYXNzfWApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIEJ1cm4obWVudSwgdHlwZSkge1xuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpLFxuICAgICAgICBzdWJNZW51Q2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51YCxcbiAgICAgICAgc3ViSXRlbUNsYXNzID0gYCR7c3ViTWVudUNsYXNzfS1pdGVtYCxcbiAgICAgICAgaGFzU3ViQ2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51LXBhcmVudGA7XG5cbiAgICBtZW51XG4gICAgICAuZmluZCgnPmxpLCAubWVudSwgLm1lbnUgPiBsaScpXG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7c3ViTWVudUNsYXNzfSAke3N1Ykl0ZW1DbGFzc30gJHtoYXNTdWJDbGFzc30gaXMtc3VibWVudS1pdGVtIHN1Ym1lbnUgaXMtYWN0aXZlYClcbiAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyggICAgICBtZW51LmZpbmQoJy4nICsgc3ViTWVudUNsYXNzICsgJywgLicgKyBzdWJJdGVtQ2xhc3MgKyAnLCAuaGFzLXN1Ym1lbnUsIC5pcy1zdWJtZW51LWl0ZW0sIC5zdWJtZW51LCBbZGF0YS1zdWJtZW51XScpXG4gICAgLy8gICAgICAgICAgIC5yZW1vdmVDbGFzcyhzdWJNZW51Q2xhc3MgKyAnICcgKyBzdWJJdGVtQ2xhc3MgKyAnIGhhcy1zdWJtZW51IGlzLXN1Ym1lbnUtaXRlbSBzdWJtZW51JylcbiAgICAvLyAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3VibWVudScpKTtcbiAgICAvLyBpdGVtcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgLy8gICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgIC8vICAgICAgICRzdWIgPSAkaXRlbS5jaGlsZHJlbigndWwnKTtcbiAgICAvLyAgIGlmKCRpdGVtLnBhcmVudCgnW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpe1xuICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaXMtc3VibWVudS1pdGVtICcgKyBzdWJJdGVtQ2xhc3MpO1xuICAgIC8vICAgfVxuICAgIC8vICAgaWYoJHN1Yi5sZW5ndGgpe1xuICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaGFzLXN1Ym1lbnUnKTtcbiAgICAvLyAgICAgJHN1Yi5yZW1vdmVDbGFzcygnc3VibWVudSAnICsgc3ViTWVudUNsYXNzKS5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcbiAgfVxufVxuXG5Gb3VuZGF0aW9uLk5lc3QgPSBOZXN0O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmZ1bmN0aW9uIFRpbWVyKGVsZW0sIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sLy9vcHRpb25zIGlzIGFuIG9iamVjdCBmb3IgZWFzaWx5IGFkZGluZyBmZWF0dXJlcyBsYXRlci5cbiAgICAgIG5hbWVTcGFjZSA9IE9iamVjdC5rZXlzKGVsZW0uZGF0YSgpKVswXSB8fCAndGltZXInLFxuICAgICAgcmVtYWluID0gLTEsXG4gICAgICBzdGFydCxcbiAgICAgIHRpbWVyO1xuXG4gIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcblxuICB0aGlzLnJlc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICByZW1haW4gPSAtMTtcbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfVxuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgLy8gaWYoIWVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICByZW1haW4gPSByZW1haW4gPD0gMCA/IGR1cmF0aW9uIDogcmVtYWluO1xuICAgIGVsZW0uZGF0YSgncGF1c2VkJywgZmFsc2UpO1xuICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIGlmKG9wdGlvbnMuaW5maW5pdGUpe1xuICAgICAgICBfdGhpcy5yZXN0YXJ0KCk7Ly9yZXJ1biB0aGUgdGltZXIuXG4gICAgICB9XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9LCByZW1haW4pO1xuICAgIGVsZW0udHJpZ2dlcihgdGltZXJzdGFydC56Zi4ke25hbWVTcGFjZX1gKTtcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAvL2lmKGVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIHRydWUpO1xuICAgIHZhciBlbmQgPSBEYXRlLm5vdygpO1xuICAgIHJlbWFpbiA9IHJlbWFpbiAtIChlbmQgLSBzdGFydCk7XG4gICAgZWxlbS50cmlnZ2VyKGB0aW1lcnBhdXNlZC56Zi4ke25hbWVTcGFjZX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGltYWdlcyAtIEltYWdlKHMpIHRvIGNoZWNrIGlmIGxvYWRlZC5cbiAqIEBwYXJhbSB7RnVuY30gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gaW1hZ2UgaXMgZnVsbHkgbG9hZGVkLlxuICovXG5mdW5jdGlvbiBvbkltYWdlc0xvYWRlZChpbWFnZXMsIGNhbGxiYWNrKXtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgdW5sb2FkZWQgPSBpbWFnZXMubGVuZ3RoO1xuXG4gIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBpbWFnZXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5jb21wbGV0ZSkge1xuICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHRoaXMubmF0dXJhbFdpZHRoICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLm5hdHVyYWxXaWR0aCA+IDApIHtcbiAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJCh0aGlzKS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2luZ2xlSW1hZ2VMb2FkZWQoKSB7XG4gICAgdW5sb2FkZWQtLTtcbiAgICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG59XG5cbkZvdW5kYXRpb24uVGltZXIgPSBUaW1lcjtcbkZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQgPSBvbkltYWdlc0xvYWRlZDtcblxufShqUXVlcnkpO1xuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKldvcmsgaW5zcGlyZWQgYnkgbXVsdGlwbGUganF1ZXJ5IHN3aXBlIHBsdWdpbnMqKlxuLy8qKkRvbmUgYnkgWW9oYWkgQXJhcmF0ICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuKGZ1bmN0aW9uKCQpIHtcblxuICAkLnNwb3RTd2lwZSA9IHtcbiAgICB2ZXJzaW9uOiAnMS4wLjAnLFxuICAgIGVuYWJsZWQ6ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICBwcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gICAgbW92ZVRocmVzaG9sZDogNzUsXG4gICAgdGltZVRocmVzaG9sZDogMjAwXG4gIH07XG5cbiAgdmFyICAgc3RhcnRQb3NYLFxuICAgICAgICBzdGFydFBvc1ksXG4gICAgICAgIHN0YXJ0VGltZSxcbiAgICAgICAgZWxhcHNlZFRpbWUsXG4gICAgICAgIGlzTW92aW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHtcbiAgICAvLyAgYWxlcnQodGhpcyk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQpO1xuICAgIGlzTW92aW5nID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgaWYgKCQuc3BvdFN3aXBlLnByZXZlbnREZWZhdWx0KSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgIGlmKGlzTW92aW5nKSB7XG4gICAgICB2YXIgeCA9IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIHZhciB5ID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgdmFyIGR4ID0gc3RhcnRQb3NYIC0geDtcbiAgICAgIHZhciBkeSA9IHN0YXJ0UG9zWSAtIHk7XG4gICAgICB2YXIgZGlyO1xuICAgICAgZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcbiAgICAgIGlmKE1hdGguYWJzKGR4KSA+PSAkLnNwb3RTd2lwZS5tb3ZlVGhyZXNob2xkICYmIGVsYXBzZWRUaW1lIDw9ICQuc3BvdFN3aXBlLnRpbWVUaHJlc2hvbGQpIHtcbiAgICAgICAgZGlyID0gZHggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgIH1cbiAgICAgIC8vIGVsc2UgaWYoTWF0aC5hYnMoZHkpID49ICQuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gJC5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuICAgICAgLy8gICBkaXIgPSBkeSA+IDAgPyAnZG93bicgOiAndXAnO1xuICAgICAgLy8gfVxuICAgICAgaWYoZGlyKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25Ub3VjaEVuZC5jYWxsKHRoaXMpO1xuICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ3N3aXBlJywgZGlyKS50cmlnZ2VyKGBzd2lwZSR7ZGlyfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT0gMSkge1xuICAgICAgc3RhcnRQb3NYID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgc3RhcnRQb3NZID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgaXNNb3ZpbmcgPSB0cnVlO1xuICAgICAgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyICYmIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGVhcmRvd24oKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgfVxuXG4gICQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHsgc2V0dXA6IGluaXQgfTtcblxuICAkLmVhY2goWydsZWZ0JywgJ3VwJywgJ2Rvd24nLCAncmlnaHQnXSwgZnVuY3Rpb24gKCkge1xuICAgICQuZXZlbnQuc3BlY2lhbFtgc3dpcGUke3RoaXN9YF0gPSB7IHNldHVwOiBmdW5jdGlvbigpe1xuICAgICAgJCh0aGlzKS5vbignc3dpcGUnLCAkLm5vb3ApO1xuICAgIH0gfTtcbiAgfSk7XG59KShqUXVlcnkpO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIE1ldGhvZCBmb3IgYWRkaW5nIHBzdWVkbyBkcmFnIGV2ZW50cyB0byBlbGVtZW50cyAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuIWZ1bmN0aW9uKCQpe1xuICAkLmZuLmFkZFRvdWNoID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oaSxlbCl7XG4gICAgICAkKGVsKS5iaW5kKCd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsZnVuY3Rpb24oKXtcbiAgICAgICAgLy93ZSBwYXNzIHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QgYmVjYXVzZSB0aGUgalF1ZXJ5IGV2ZW50XG4gICAgICAgIC8vb2JqZWN0IGlzIG5vcm1hbGl6ZWQgdG8gdzNjIHNwZWNzIGFuZCBkb2VzIG5vdCBwcm92aWRlIHRoZSBUb3VjaExpc3RcbiAgICAgICAgaGFuZGxlVG91Y2goZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGFuZGxlVG91Y2ggPSBmdW5jdGlvbihldmVudCl7XG4gICAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIGZpcnN0ID0gdG91Y2hlc1swXSxcbiAgICAgICAgICBldmVudFR5cGVzID0ge1xuICAgICAgICAgICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgICAgICAgICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgdG91Y2hlbmQ6ICdtb3VzZXVwJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHlwZSA9IGV2ZW50VHlwZXNbZXZlbnQudHlwZV0sXG4gICAgICAgICAgc2ltdWxhdGVkRXZlbnRcbiAgICAgICAgO1xuXG4gICAgICBpZignTW91c2VFdmVudCcgaW4gd2luZG93ICYmIHR5cGVvZiB3aW5kb3cuTW91c2VFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IG5ldyB3aW5kb3cuTW91c2VFdmVudCh0eXBlLCB7XG4gICAgICAgICAgJ2J1YmJsZXMnOiB0cnVlLFxuICAgICAgICAgICdjYW5jZWxhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnc2NyZWVuWCc6IGZpcnN0LnNjcmVlblgsXG4gICAgICAgICAgJ3NjcmVlblknOiBmaXJzdC5zY3JlZW5ZLFxuICAgICAgICAgICdjbGllbnRYJzogZmlyc3QuY2xpZW50WCxcbiAgICAgICAgICAnY2xpZW50WSc6IGZpcnN0LmNsaWVudFlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMSwgZmlyc3Quc2NyZWVuWCwgZmlyc3Quc2NyZWVuWSwgZmlyc3QuY2xpZW50WCwgZmlyc3QuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAvKmxlZnQqLywgbnVsbCk7XG4gICAgICB9XG4gICAgICBmaXJzdC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7XG4gICAgfTtcbiAgfTtcbn0oalF1ZXJ5KTtcblxuXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipGcm9tIHRoZSBqUXVlcnkgTW9iaWxlIExpYnJhcnkqKlxuLy8qKm5lZWQgdG8gcmVjcmVhdGUgZnVuY3Rpb25hbGl0eSoqXG4vLyoqYW5kIHRyeSB0byBpbXByb3ZlIGlmIHBvc3NpYmxlKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4vKiBSZW1vdmluZyB0aGUgalF1ZXJ5IGZ1bmN0aW9uICoqKipcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4oZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkge1xuXG5cdHZhciAkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLFxuXHRcdC8vIHN1cHBvcnRUb3VjaCA9ICQubW9iaWxlLnN1cHBvcnQudG91Y2gsXG5cdFx0dG91Y2hTdGFydEV2ZW50ID0gJ3RvdWNoc3RhcnQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoc3RhcnRcIiA6IFwibW91c2Vkb3duXCIsXG5cdFx0dG91Y2hTdG9wRXZlbnQgPSAndG91Y2hlbmQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoZW5kXCIgOiBcIm1vdXNldXBcIixcblx0XHR0b3VjaE1vdmVFdmVudCA9ICd0b3VjaG1vdmUnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNobW92ZVwiIDogXCJtb3VzZW1vdmVcIjtcblxuXHQvLyBzZXR1cCBuZXcgZXZlbnQgc2hvcnRjdXRzXG5cdCQuZWFjaCggKCBcInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIFwiICtcblx0XHRcInN3aXBlIHN3aXBlbGVmdCBzd2lwZXJpZ2h0XCIgKS5zcGxpdCggXCIgXCIgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0XHQkLmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRyZXR1cm4gZm4gPyB0aGlzLmJpbmQoIG5hbWUsIGZuICkgOiB0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXG5cdFx0Ly8galF1ZXJ5IDwgMS44XG5cdFx0aWYgKCAkLmF0dHJGbiApIHtcblx0XHRcdCQuYXR0ckZuWyBuYW1lIF0gPSB0cnVlO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gdHJpZ2dlckN1c3RvbUV2ZW50KCBvYmosIGV2ZW50VHlwZSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHR2YXIgb3JpZ2luYWxUeXBlID0gZXZlbnQudHlwZTtcblx0XHRldmVudC50eXBlID0gZXZlbnRUeXBlO1xuXHRcdGlmICggYnViYmxlICkge1xuXHRcdFx0JC5ldmVudC50cmlnZ2VyKCBldmVudCwgdW5kZWZpbmVkLCBvYmogKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5ldmVudC5kaXNwYXRjaC5jYWxsKCBvYmosIGV2ZW50ICk7XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSBvcmlnaW5hbFR5cGU7XG5cdH1cblxuXHQvLyBhbHNvIGhhbmRsZXMgdGFwaG9sZFxuXG5cdC8vIEFsc28gaGFuZGxlcyBzd2lwZWxlZnQsIHN3aXBlcmlnaHRcblx0JC5ldmVudC5zcGVjaWFsLnN3aXBlID0ge1xuXG5cdFx0Ly8gTW9yZSB0aGFuIHRoaXMgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQsIGFuZCB3ZSB3aWxsIHN1cHByZXNzIHNjcm9sbGluZy5cblx0XHRzY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkOiAzMCxcblxuXHRcdC8vIE1vcmUgdGltZSB0aGFuIHRoaXMsIGFuZCBpdCBpc24ndCBhIHN3aXBlLlxuXHRcdGR1cmF0aW9uVGhyZXNob2xkOiAxMDAwLFxuXG5cdFx0Ly8gU3dpcGUgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBtb3JlIHRoYW4gdGhpcy5cblx0XHRob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQ6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID49IDIgPyAxNSA6IDMwLFxuXG5cdFx0Ly8gU3dpcGUgdmVydGljYWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbGVzcyB0aGFuIHRoaXMuXG5cdFx0dmVydGljYWxEaXN0YW5jZVRocmVzaG9sZDogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPj0gMiA/IDE1IDogMzAsXG5cblx0XHRnZXRMb2NhdGlvbjogZnVuY3Rpb24gKCBldmVudCApIHtcblx0XHRcdHZhciB3aW5QYWdlWCA9IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0d2luUGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdFx0XHRcdHggPSBldmVudC5jbGllbnRYLFxuXHRcdFx0XHR5ID0gZXZlbnQuY2xpZW50WTtcblxuXHRcdFx0aWYgKCBldmVudC5wYWdlWSA9PT0gMCAmJiBNYXRoLmZsb29yKCB5ICkgPiBNYXRoLmZsb29yKCBldmVudC5wYWdlWSApIHx8XG5cdFx0XHRcdGV2ZW50LnBhZ2VYID09PSAwICYmIE1hdGguZmxvb3IoIHggKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gaU9TNCBjbGllbnRYL2NsaWVudFkgaGF2ZSB0aGUgdmFsdWUgdGhhdCBzaG91bGQgaGF2ZSBiZWVuXG5cdFx0XHRcdC8vIGluIHBhZ2VYL3BhZ2VZLiBXaGlsZSBwYWdlWC9wYWdlLyBoYXZlIHRoZSB2YWx1ZSAwXG5cdFx0XHRcdHggPSB4IC0gd2luUGFnZVg7XG5cdFx0XHRcdHkgPSB5IC0gd2luUGFnZVk7XG5cdFx0XHR9IGVsc2UgaWYgKCB5IDwgKCBldmVudC5wYWdlWSAtIHdpblBhZ2VZKSB8fCB4IDwgKCBldmVudC5wYWdlWCAtIHdpblBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gU29tZSBBbmRyb2lkIGJyb3dzZXJzIGhhdmUgdG90YWxseSBib2d1cyB2YWx1ZXMgZm9yIGNsaWVudFgvWVxuXHRcdFx0XHQvLyB3aGVuIHNjcm9sbGluZy96b29taW5nIGEgcGFnZS4gRGV0ZWN0YWJsZSBzaW5jZSBjbGllbnRYL2NsaWVudFlcblx0XHRcdFx0Ly8gc2hvdWxkIG5ldmVyIGJlIHNtYWxsZXIgdGhhbiBwYWdlWC9wYWdlWSBtaW51cyBwYWdlIHNjcm9sbFxuXHRcdFx0XHR4ID0gZXZlbnQucGFnZVggLSB3aW5QYWdlWDtcblx0XHRcdFx0eSA9IGV2ZW50LnBhZ2VZIC0gd2luUGFnZVk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHlcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZGF0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA/XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCxcblx0XHRcdFx0bG9jYXRpb24gPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZ2V0TG9jYXRpb24oIGRhdGEgKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksXG5cdFx0XHRcdFx0XHRjb29yZHM6IFsgbG9jYXRpb24ueCwgbG9jYXRpb24ueSBdLFxuXHRcdFx0XHRcdFx0b3JpZ2luOiAkKCBldmVudC50YXJnZXQgKVxuXHRcdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50LFxuXHRcdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdFx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF1cblx0XHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRoYW5kbGVTd2lwZTogZnVuY3Rpb24oIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICkge1xuXHRcdFx0aWYgKCBzdG9wLnRpbWUgLSBzdGFydC50aW1lIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLmR1cmF0aW9uVGhyZXNob2xkICYmXG5cdFx0XHRcdE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMSBdIC0gc3RvcC5jb29yZHNbIDEgXSApIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLnZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQgKSB7XG5cdFx0XHRcdHZhciBkaXJlY3Rpb24gPSBzdGFydC5jb29yZHNbMF0gPiBzdG9wLmNvb3Jkc1sgMCBdID8gXCJzd2lwZWxlZnRcIiA6IFwic3dpcGVyaWdodFwiO1xuXG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgXCJzd2lwZVwiLCAkLkV2ZW50KCBcInN3aXBlXCIsIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0LCBzd2lwZXN0YXJ0OiBzdGFydCwgc3dpcGVzdG9wOiBzdG9wIH0pLCB0cnVlICk7XG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgZGlyZWN0aW9uLCQuRXZlbnQoIGRpcmVjdGlvbiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQsIHN3aXBlc3RhcnQ6IHN0YXJ0LCBzd2lwZXN0b3A6IHN0b3AgfSApLCB0cnVlICk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdC8vIFRoaXMgc2VydmVzIGFzIGEgZmxhZyB0byBlbnN1cmUgdGhhdCBhdCBtb3N0IG9uZSBzd2lwZSBldmVudCBldmVudCBpc1xuXHRcdC8vIGluIHdvcmsgYXQgYW55IGdpdmVuIHRpbWVcblx0XHRldmVudEluUHJvZ3Jlc3M6IGZhbHNlLFxuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGV2ZW50cyxcblx0XHRcdFx0dGhpc09iamVjdCA9IHRoaXMsXG5cdFx0XHRcdCR0aGlzID0gJCggdGhpc09iamVjdCApLFxuXHRcdFx0XHRjb250ZXh0ID0ge307XG5cblx0XHRcdC8vIFJldHJpZXZlIHRoZSBldmVudHMgZGF0YSBmb3IgdGhpcyBlbGVtZW50IGFuZCBhZGQgdGhlIHN3aXBlIGNvbnRleHRcblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggIWV2ZW50cyApIHtcblx0XHRcdFx0ZXZlbnRzID0geyBsZW5ndGg6IDAgfTtcblx0XHRcdFx0JC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiwgZXZlbnRzICk7XG5cdFx0XHR9XG5cdFx0XHRldmVudHMubGVuZ3RoKys7XG5cdFx0XHRldmVudHMuc3dpcGUgPSBjb250ZXh0O1xuXG5cdFx0XHRjb250ZXh0LnN0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIEJhaWwgaWYgd2UncmUgYWxyZWFkeSB3b3JraW5nIG9uIGEgc3dpcGUgZXZlbnRcblx0XHRcdFx0aWYgKCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gdHJ1ZTtcblxuXHRcdFx0XHR2YXIgc3RvcCxcblx0XHRcdFx0XHRzdGFydCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdGFydCggZXZlbnQgKSxcblx0XHRcdFx0XHRvcmlnVGFyZ2V0ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRcdGVtaXR0ZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhcnQgfHwgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c3RvcCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdG9wKCBldmVudCApO1xuXHRcdFx0XHRcdGlmICggIWVtaXR0ZWQgKSB7XG5cdFx0XHRcdFx0XHRlbWl0dGVkID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmhhbmRsZVN3aXBlKCBzdGFydCwgc3RvcCwgdGhpc09iamVjdCwgb3JpZ1RhcmdldCApO1xuXHRcdFx0XHRcdFx0aWYgKCBlbWl0dGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHByZXZlbnQgc2Nyb2xsaW5nXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZCApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGNvbnRleHQuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0ZW1pdHRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlID0gbnVsbDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQkZG9jdW1lbnQub24oIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKVxuXHRcdFx0XHRcdC5vbmUoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdH07XG5cdFx0XHQkdGhpcy5vbiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0fSxcblxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBldmVudHMsIGNvbnRleHQ7XG5cblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0XHRjb250ZXh0ID0gZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRkZWxldGUgZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRldmVudHMubGVuZ3RoLS07XG5cdFx0XHRcdGlmICggZXZlbnRzLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0XHQkLnJlbW92ZURhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjb250ZXh0ICkge1xuXHRcdFx0XHRpZiAoIGNvbnRleHQuc3RhcnQgKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLm9mZiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBjb250ZXh0Lm1vdmUgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggY29udGV4dC5zdG9wICkge1xuXHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0JC5lYWNoKHtcblx0XHRzd2lwZWxlZnQ6IFwic3dpcGUubGVmdFwiLFxuXHRcdHN3aXBlcmlnaHQ6IFwic3dpcGUucmlnaHRcIlxuXHR9LCBmdW5jdGlvbiggZXZlbnQsIHNvdXJjZUV2ZW50ICkge1xuXG5cdFx0JC5ldmVudC5zcGVjaWFsWyBldmVudCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuYmluZCggc291cmNlRXZlbnQsICQubm9vcCApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLnVuYmluZCggc291cmNlRXZlbnQgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcbn0pKCBqUXVlcnksIHRoaXMgKTtcbiovXG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmNvbnN0IE11dGF0aW9uT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbiAgZm9yICh2YXIgaT0wOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYCR7cHJlZml4ZXNbaV19TXV0YXRpb25PYnNlcnZlcmAgaW4gd2luZG93KSB7XG4gICAgICByZXR1cm4gd2luZG93W2Ake3ByZWZpeGVzW2ldfU11dGF0aW9uT2JzZXJ2ZXJgXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSgpKTtcblxuY29uc3QgdHJpZ2dlcnMgPSAoZWwsIHR5cGUpID0+IHtcbiAgZWwuZGF0YSh0eXBlKS5zcGxpdCgnICcpLmZvckVhY2goaWQgPT4ge1xuICAgICQoYCMke2lkfWApWyB0eXBlID09PSAnY2xvc2UnID8gJ3RyaWdnZXInIDogJ3RyaWdnZXJIYW5kbGVyJ10oYCR7dHlwZX0uemYudHJpZ2dlcmAsIFtlbF0pO1xuICB9KTtcbn07XG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLW9wZW5dIHdpbGwgcmV2ZWFsIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtb3Blbl0nLCBmdW5jdGlvbigpIHtcbiAgdHJpZ2dlcnMoJCh0aGlzKSwgJ29wZW4nKTtcbn0pO1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NlXSB3aWxsIGNsb3NlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuLy8gSWYgdXNlZCB3aXRob3V0IGEgdmFsdWUgb24gW2RhdGEtY2xvc2VdLCB0aGUgZXZlbnQgd2lsbCBidWJibGUsIGFsbG93aW5nIGl0IHRvIGNsb3NlIGEgcGFyZW50IGNvbXBvbmVudC5cbiQoZG9jdW1lbnQpLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ2Nsb3NlJyk7XG4gIGlmIChpZCkge1xuICAgIHRyaWdnZXJzKCQodGhpcyksICdjbG9zZScpO1xuICB9XG4gIGVsc2Uge1xuICAgICQodGhpcykudHJpZ2dlcignY2xvc2UuemYudHJpZ2dlcicpO1xuICB9XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGVdIHdpbGwgdG9nZ2xlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlXScsIGZ1bmN0aW9uKCkge1xuICB0cmlnZ2VycygkKHRoaXMpLCAndG9nZ2xlJyk7XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zYWJsZV0gd2lsbCByZXNwb25kIHRvIGNsb3NlLnpmLnRyaWdnZXIgZXZlbnRzLlxuJChkb2N1bWVudCkub24oJ2Nsb3NlLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2FibGVdJywgZnVuY3Rpb24oZSl7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGxldCBhbmltYXRpb24gPSAkKHRoaXMpLmRhdGEoJ2Nsb3NhYmxlJyk7XG5cbiAgaWYoYW5pbWF0aW9uICE9PSAnJyl7XG4gICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCgkKHRoaXMpLCBhbmltYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICB9KTtcbiAgfWVsc2V7XG4gICAgJCh0aGlzKS5mYWRlT3V0KCkudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gIH1cbn0pO1xuXG4kKGRvY3VtZW50KS5vbignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlLWZvY3VzXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZS1mb2N1cycpO1xuICAkKGAjJHtpZH1gKS50cmlnZ2VySGFuZGxlcigndG9nZ2xlLnpmLnRyaWdnZXInLCBbJCh0aGlzKV0pO1xufSk7XG5cbi8qKlxuKiBGaXJlcyBvbmNlIGFmdGVyIGFsbCBvdGhlciBzY3JpcHRzIGhhdmUgbG9hZGVkXG4qIEBmdW5jdGlvblxuKiBAcHJpdmF0ZVxuKi9cbiQod2luZG93KS5vbignbG9hZCcsICgpID0+IHtcbiAgY2hlY2tMaXN0ZW5lcnMoKTtcbn0pO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVycygpIHtcbiAgZXZlbnRzTGlzdGVuZXIoKTtcbiAgcmVzaXplTGlzdGVuZXIoKTtcbiAgc2Nyb2xsTGlzdGVuZXIoKTtcbiAgY2xvc2VtZUxpc3RlbmVyKCk7XG59XG5cbi8vKioqKioqKiogb25seSBmaXJlcyB0aGlzIGZ1bmN0aW9uIG9uY2Ugb24gbG9hZCwgaWYgdGhlcmUncyBzb21ldGhpbmcgdG8gd2F0Y2ggKioqKioqKipcbmZ1bmN0aW9uIGNsb3NlbWVMaXN0ZW5lcihwbHVnaW5OYW1lKSB7XG4gIHZhciB5ZXRpQm94ZXMgPSAkKCdbZGF0YS15ZXRpLWJveF0nKSxcbiAgICAgIHBsdWdOYW1lcyA9IFsnZHJvcGRvd24nLCAndG9vbHRpcCcsICdyZXZlYWwnXTtcblxuICBpZihwbHVnaW5OYW1lKXtcbiAgICBpZih0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ3N0cmluZycpe1xuICAgICAgcGx1Z05hbWVzLnB1c2gocGx1Z2luTmFtZSk7XG4gICAgfWVsc2UgaWYodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwbHVnaW5OYW1lWzBdID09PSAnc3RyaW5nJyl7XG4gICAgICBwbHVnTmFtZXMuY29uY2F0KHBsdWdpbk5hbWUpO1xuICAgIH1lbHNle1xuICAgICAgY29uc29sZS5lcnJvcignUGx1Z2luIG5hbWVzIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgfVxuICBpZih5ZXRpQm94ZXMubGVuZ3RoKXtcbiAgICBsZXQgbGlzdGVuZXJzID0gcGx1Z05hbWVzLm1hcCgobmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIGBjbG9zZW1lLnpmLiR7bmFtZX1gO1xuICAgIH0pLmpvaW4oJyAnKTtcblxuICAgICQod2luZG93KS5vZmYobGlzdGVuZXJzKS5vbihsaXN0ZW5lcnMsIGZ1bmN0aW9uKGUsIHBsdWdpbklkKXtcbiAgICAgIGxldCBwbHVnaW4gPSBlLm5hbWVzcGFjZS5zcGxpdCgnLicpWzBdO1xuICAgICAgbGV0IHBsdWdpbnMgPSAkKGBbZGF0YS0ke3BsdWdpbn1dYCkubm90KGBbZGF0YS15ZXRpLWJveD1cIiR7cGx1Z2luSWR9XCJdYCk7XG5cbiAgICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICBsZXQgX3RoaXMgPSAkKHRoaXMpO1xuXG4gICAgICAgIF90aGlzLnRyaWdnZXJIYW5kbGVyKCdjbG9zZS56Zi50cmlnZ2VyJywgW190aGlzXSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNpemVMaXN0ZW5lcihkZWJvdW5jZSl7XG4gIGxldCB0aW1lcixcbiAgICAgICRub2RlcyA9ICQoJ1tkYXRhLXJlc2l6ZV0nKTtcbiAgaWYoJG5vZGVzLmxlbmd0aCl7XG4gICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnpmLnRyaWdnZXInKVxuICAgIC5vbigncmVzaXplLnpmLnRyaWdnZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAodGltZXIpIHsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgfVxuXG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblxuICAgICAgICBpZighTXV0YXRpb25PYnNlcnZlcil7Ly9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHJlc2l6ZSBldmVudFxuICAgICAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInJlc2l6ZVwiKTtcbiAgICAgIH0sIGRlYm91bmNlIHx8IDEwKTsvL2RlZmF1bHQgdGltZSB0byBlbWl0IHJlc2l6ZSBldmVudFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbExpc3RlbmVyKGRlYm91bmNlKXtcbiAgbGV0IHRpbWVyLFxuICAgICAgJG5vZGVzID0gJCgnW2RhdGEtc2Nyb2xsXScpO1xuICBpZigkbm9kZXMubGVuZ3RoKXtcbiAgICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYudHJpZ2dlcicpXG4gICAgLm9uKCdzY3JvbGwuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYodGltZXIpeyBjbGVhclRpbWVvdXQodGltZXIpOyB9XG5cbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgc2Nyb2xsIGV2ZW50XG4gICAgICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwic2Nyb2xsXCIpO1xuICAgICAgfSwgZGVib3VuY2UgfHwgMTApOy8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgc2Nyb2xsIGV2ZW50XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRzTGlzdGVuZXIoKSB7XG4gIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsgcmV0dXJuIGZhbHNlOyB9XG4gIGxldCBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXJlc2l6ZV0sIFtkYXRhLXNjcm9sbF0sIFtkYXRhLW11dGF0ZV0nKTtcblxuICAvL2VsZW1lbnQgY2FsbGJhY2tcbiAgdmFyIGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24gPSBmdW5jdGlvbihtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgdmFyICR0YXJnZXQgPSAkKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udGFyZ2V0KTtcbiAgICAvL3RyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBlbGVtZW50IGRlcGVuZGluZyBvbiB0eXBlXG4gICAgc3dpdGNoICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSkge1xuXG4gICAgICBjYXNlIFwicmVzaXplXCIgOlxuICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0XSk7XG4gICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInNjcm9sbFwiIDpcbiAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInLCBbJHRhcmdldCwgd2luZG93LnBhZ2VZT2Zmc2V0XSk7XG4gICAgICBicmVhaztcblxuICAgICAgLy8gY2FzZSBcIm11dGF0ZVwiIDpcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdtdXRhdGUnLCAkdGFyZ2V0KTtcbiAgICAgIC8vICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ211dGF0ZS56Zi50cmlnZ2VyJyk7XG4gICAgICAvL1xuICAgICAgLy8gLy9tYWtlIHN1cmUgd2UgZG9uJ3QgZ2V0IHN0dWNrIGluIGFuIGluZmluaXRlIGxvb3AgZnJvbSBzbG9wcHkgY29kZWluZ1xuICAgICAgLy8gaWYgKCR0YXJnZXQuaW5kZXgoJ1tkYXRhLW11dGF0ZV0nKSA9PSAkKFwiW2RhdGEtbXV0YXRlXVwiKS5sZW5ndGgtMSkge1xuICAgICAgLy8gICBkb21NdXRhdGlvbk9ic2VydmVyKCk7XG4gICAgICAvLyB9XG4gICAgICAvLyBicmVhaztcblxuICAgICAgZGVmYXVsdCA6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvL25vdGhpbmdcbiAgICB9XG4gIH1cblxuICBpZihub2Rlcy5sZW5ndGgpe1xuICAgIC8vZm9yIGVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRvIGxpc3RlbiBmb3IgcmVzaXppbmcsIHNjcm9sbGluZywgKG9yIGNvbWluZyBzb29uIG11dGF0aW9uKSBhZGQgYSBzaW5nbGUgb2JzZXJ2ZXJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBub2Rlcy5sZW5ndGgtMTsgaSsrKSB7XG4gICAgICBsZXQgZWxlbWVudE9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbik7XG4gICAgICBlbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZShub2Rlc1tpXSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IGZhbHNlLCBjaGFyYWN0ZXJEYXRhOiBmYWxzZSwgc3VidHJlZTpmYWxzZSwgYXR0cmlidXRlRmlsdGVyOltcImRhdGEtZXZlbnRzXCJdfSk7XG4gICAgfVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBbUEhdXG4vLyBGb3VuZGF0aW9uLkNoZWNrV2F0Y2hlcnMgPSBjaGVja1dhdGNoZXJzO1xuRm91bmRhdGlvbi5JSGVhcllvdSA9IGNoZWNrTGlzdGVuZXJzO1xuLy8gRm91bmRhdGlvbi5JU2VlWW91ID0gc2Nyb2xsTGlzdGVuZXI7XG4vLyBGb3VuZGF0aW9uLklGZWVsWW91ID0gY2xvc2VtZUxpc3RlbmVyO1xuXG59KGpRdWVyeSk7XG5cbi8vIGZ1bmN0aW9uIGRvbU11dGF0aW9uT2JzZXJ2ZXIoZGVib3VuY2UpIHtcbi8vICAgLy8gISEhIFRoaXMgaXMgY29taW5nIHNvb24gYW5kIG5lZWRzIG1vcmUgd29yazsgbm90IGFjdGl2ZSAgISEhIC8vXG4vLyAgIHZhciB0aW1lcixcbi8vICAgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tdXRhdGVdJyk7XG4vLyAgIC8vXG4vLyAgIGlmIChub2Rlcy5sZW5ndGgpIHtcbi8vICAgICAvLyB2YXIgTXV0YXRpb25PYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4vLyAgICAgLy8gICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbi8vICAgICAvLyAgIGZvciAodmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgLy8gICAgIGlmIChwcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHtcbi8vICAgICAvLyAgICAgICByZXR1cm4gd2luZG93W3ByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInXTtcbi8vICAgICAvLyAgICAgfVxuLy8gICAgIC8vICAgfVxuLy8gICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuLy8gICAgIC8vIH0oKSk7XG4vL1xuLy9cbi8vICAgICAvL2ZvciB0aGUgYm9keSwgd2UgbmVlZCB0byBsaXN0ZW4gZm9yIGFsbCBjaGFuZ2VzIGVmZmVjdGluZyB0aGUgc3R5bGUgYW5kIGNsYXNzIGF0dHJpYnV0ZXNcbi8vICAgICB2YXIgYm9keU9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoYm9keU11dGF0aW9uKTtcbi8vICAgICBib2R5T2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogZmFsc2UsIHN1YnRyZWU6dHJ1ZSwgYXR0cmlidXRlRmlsdGVyOltcInN0eWxlXCIsIFwiY2xhc3NcIl19KTtcbi8vXG4vL1xuLy8gICAgIC8vYm9keSBjYWxsYmFja1xuLy8gICAgIGZ1bmN0aW9uIGJvZHlNdXRhdGlvbihtdXRhdGUpIHtcbi8vICAgICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBtdXRhdGlvbiBldmVudFxuLy8gICAgICAgaWYgKHRpbWVyKSB7IGNsZWFyVGltZW91dCh0aW1lcik7IH1cbi8vXG4vLyAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgIGJvZHlPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4vLyAgICAgICAgICQoJ1tkYXRhLW11dGF0ZV0nKS5hdHRyKCdkYXRhLWV2ZW50cycsXCJtdXRhdGVcIik7XG4vLyAgICAgICB9LCBkZWJvdW5jZSB8fCAxNTApO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gfVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFiaWRlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5hYmlkZVxuICovXG5cbmNsYXNzIEFiaWRlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQWJpZGUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWJpZGUjaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgID0gJC5leHRlbmQoe30sIEFiaWRlLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdBYmlkZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBBYmlkZSBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgQWJpZGUgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuJGlucHV0cyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKTtcblxuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgQWJpZGUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuYWJpZGUnKVxuICAgICAgLm9uKCdyZXNldC56Zi5hYmlkZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5yZXNldEZvcm0oKTtcbiAgICAgIH0pXG4gICAgICAub24oJ3N1Ym1pdC56Zi5hYmlkZScsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVGb3JtKCk7XG4gICAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMudmFsaWRhdGVPbiA9PT0gJ2ZpZWxkQ2hhbmdlJykge1xuICAgICAgdGhpcy4kaW5wdXRzXG4gICAgICAgIC5vZmYoJ2NoYW5nZS56Zi5hYmlkZScpXG4gICAgICAgIC5vbignY2hhbmdlLnpmLmFiaWRlJywgKGUpID0+IHtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXQoJChlLnRhcmdldCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmxpdmVWYWxpZGF0ZSkge1xuICAgICAgdGhpcy4kaW5wdXRzXG4gICAgICAgIC5vZmYoJ2lucHV0LnpmLmFiaWRlJylcbiAgICAgICAgLm9uKCdpbnB1dC56Zi5hYmlkZScsIChlKSA9PiB7XG4gICAgICAgICAgdGhpcy52YWxpZGF0ZUlucHV0KCQoZS50YXJnZXQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIEFiaWRlIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICB0aGlzLl9pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IGEgZm9ybSBlbGVtZW50IGhhcyB0aGUgcmVxdWlyZWQgYXR0cmlidXRlIGFuZCBpZiBpdCdzIGNoZWNrZWQgb3Igbm90XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBjaGVjayBmb3IgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXR0cmlidXRlIGlzIGNoZWNrZWQgb3IgZW1wdHlcbiAgICovXG4gIHJlcXVpcmVkQ2hlY2soJGVsKSB7XG4gICAgaWYgKCEkZWwuYXR0cigncmVxdWlyZWQnKSkgcmV0dXJuIHRydWU7XG5cbiAgICB2YXIgaXNHb29kID0gdHJ1ZTtcblxuICAgIHN3aXRjaCAoJGVsWzBdLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgaXNHb29kID0gJGVsWzBdLmNoZWNrZWQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgY2FzZSAnc2VsZWN0LW9uZSc6XG4gICAgICBjYXNlICdzZWxlY3QtbXVsdGlwbGUnOlxuICAgICAgICB2YXIgb3B0ID0gJGVsLmZpbmQoJ29wdGlvbjpzZWxlY3RlZCcpO1xuICAgICAgICBpZiAoIW9wdC5sZW5ndGggfHwgIW9wdC52YWwoKSkgaXNHb29kID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZighJGVsLnZhbCgpIHx8ICEkZWwudmFsKCkubGVuZ3RoKSBpc0dvb2QgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNHb29kO1xuICB9XG5cbiAgLyoqXG4gICAqIEJhc2VkIG9uICRlbCwgZ2V0IHRoZSBmaXJzdCBlbGVtZW50IHdpdGggc2VsZWN0b3IgaW4gdGhpcyBvcmRlcjpcbiAgICogMS4gVGhlIGVsZW1lbnQncyBkaXJlY3Qgc2libGluZygncykuXG4gICAqIDMuIFRoZSBlbGVtZW50J3MgcGFyZW50J3MgY2hpbGRyZW4uXG4gICAqXG4gICAqIFRoaXMgYWxsb3dzIGZvciBtdWx0aXBsZSBmb3JtIGVycm9ycyBwZXIgaW5wdXQsIHRob3VnaCBpZiBub25lIGFyZSBmb3VuZCwgbm8gZm9ybSBlcnJvcnMgd2lsbCBiZSBzaG93bi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGFzIHJlZmVyZW5jZSB0byBmaW5kIHRoZSBmb3JtIGVycm9yIHNlbGVjdG9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBqUXVlcnkgb2JqZWN0IHdpdGggdGhlIHNlbGVjdG9yLlxuICAgKi9cbiAgZmluZEZvcm1FcnJvcigkZWwpIHtcbiAgICB2YXIgJGVycm9yID0gJGVsLnNpYmxpbmdzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JTZWxlY3Rvcik7XG5cbiAgICBpZiAoISRlcnJvci5sZW5ndGgpIHtcbiAgICAgICRlcnJvciA9ICRlbC5wYXJlbnQoKS5maW5kKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JTZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuICRlcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhpcyBvcmRlcjpcbiAgICogMi4gVGhlIDxsYWJlbD4gd2l0aCB0aGUgYXR0cmlidXRlIGBbZm9yPVwic29tZUlucHV0SWRcIl1gXG4gICAqIDMuIFRoZSBgLmNsb3Nlc3QoKWAgPGxhYmVsPlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IG9iamVjdCB0byBjaGVjayBmb3IgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXR0cmlidXRlIGlzIGNoZWNrZWQgb3IgZW1wdHlcbiAgICovXG4gIGZpbmRMYWJlbCgkZWwpIHtcbiAgICB2YXIgaWQgPSAkZWxbMF0uaWQ7XG4gICAgdmFyICRsYWJlbCA9IHRoaXMuJGVsZW1lbnQuZmluZChgbGFiZWxbZm9yPVwiJHtpZH1cIl1gKTtcblxuICAgIGlmICghJGxhYmVsLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICRlbC5jbG9zZXN0KCdsYWJlbCcpO1xuICAgIH1cblxuICAgIHJldHVybiAkbGFiZWw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzZXQgb2YgbGFiZWxzIGFzc29jaWF0ZWQgd2l0aCBhIHNldCBvZiByYWRpbyBlbHMgaW4gdGhpcyBvcmRlclxuICAgKiAyLiBUaGUgPGxhYmVsPiB3aXRoIHRoZSBhdHRyaWJ1dGUgYFtmb3I9XCJzb21lSW5wdXRJZFwiXWBcbiAgICogMy4gVGhlIGAuY2xvc2VzdCgpYCA8bGFiZWw+XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgKi9cbiAgZmluZFJhZGlvTGFiZWxzKCRlbHMpIHtcbiAgICB2YXIgbGFiZWxzID0gJGVscy5tYXAoKGksIGVsKSA9PiB7XG4gICAgICB2YXIgaWQgPSBlbC5pZDtcbiAgICAgIHZhciAkbGFiZWwgPSB0aGlzLiRlbGVtZW50LmZpbmQoYGxhYmVsW2Zvcj1cIiR7aWR9XCJdYCk7XG5cbiAgICAgIGlmICghJGxhYmVsLmxlbmd0aCkge1xuICAgICAgICAkbGFiZWwgPSAkKGVsKS5jbG9zZXN0KCdsYWJlbCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICRsYWJlbFswXTtcbiAgICB9KTtcblxuICAgIHJldHVybiAkKGxhYmVscyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgQ1NTIGVycm9yIGNsYXNzIGFzIHNwZWNpZmllZCBieSB0aGUgQWJpZGUgc2V0dGluZ3MgdG8gdGhlIGxhYmVsLCBpbnB1dCwgYW5kIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgY2xhc3MgdG9cbiAgICovXG4gIGFkZEVycm9yQ2xhc3NlcygkZWwpIHtcbiAgICB2YXIgJGxhYmVsID0gdGhpcy5maW5kTGFiZWwoJGVsKTtcbiAgICB2YXIgJGZvcm1FcnJvciA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWwpO1xuXG4gICAgaWYgKCRsYWJlbC5sZW5ndGgpIHtcbiAgICAgICRsYWJlbC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvci5sZW5ndGgpIHtcbiAgICAgICRmb3JtRXJyb3IuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmZvcm1FcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykuYXR0cignZGF0YS1pbnZhbGlkJywgJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBDU1MgZXJyb3IgY2xhc3NlcyBldGMgZnJvbSBhbiBlbnRpcmUgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBncm91cE5hbWUgLSBBIHN0cmluZyB0aGF0IHNwZWNpZmllcyB0aGUgbmFtZSBvZiBhIHJhZGlvIGJ1dHRvbiBncm91cFxuICAgKlxuICAgKi9cblxuICByZW1vdmVSYWRpb0Vycm9yQ2xhc3Nlcyhncm91cE5hbWUpIHtcbiAgICB2YXIgJGVscyA9IHRoaXMuJGVsZW1lbnQuZmluZChgOnJhZGlvW25hbWU9XCIke2dyb3VwTmFtZX1cIl1gKTtcbiAgICB2YXIgJGxhYmVscyA9IHRoaXMuZmluZFJhZGlvTGFiZWxzKCRlbHMpO1xuICAgIHZhciAkZm9ybUVycm9ycyA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWxzKTtcblxuICAgIGlmICgkbGFiZWxzLmxlbmd0aCkge1xuICAgICAgJGxhYmVscy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAkZm9ybUVycm9ycy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbHMucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIENTUyBlcnJvciBjbGFzcyBhcyBzcGVjaWZpZWQgYnkgdGhlIEFiaWRlIHNldHRpbmdzIGZyb20gdGhlIGxhYmVsLCBpbnB1dCwgYW5kIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHJlbW92ZSB0aGUgY2xhc3MgZnJvbVxuICAgKi9cbiAgcmVtb3ZlRXJyb3JDbGFzc2VzKCRlbCkge1xuICAgIC8vIHJhZGlvcyBuZWVkIHRvIGNsZWFyIGFsbCBvZiB0aGUgZWxzXG4gICAgaWYoJGVsWzBdLnR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlUmFkaW9FcnJvckNsYXNzZXMoJGVsLmF0dHIoJ25hbWUnKSk7XG4gICAgfVxuXG4gICAgdmFyICRsYWJlbCA9IHRoaXMuZmluZExhYmVsKCRlbCk7XG4gICAgdmFyICRmb3JtRXJyb3IgPSB0aGlzLmZpbmRGb3JtRXJyb3IoJGVsKTtcblxuICAgIGlmICgkbGFiZWwubGVuZ3RoKSB7XG4gICAgICAkbGFiZWwucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxhYmVsRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKCRmb3JtRXJyb3IubGVuZ3RoKSB7XG4gICAgICAkZm9ybUVycm9yLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVsLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5pbnB1dEVycm9yQ2xhc3MpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdvZXMgdGhyb3VnaCBhIGZvcm0gdG8gZmluZCBpbnB1dHMgYW5kIHByb2NlZWRzIHRvIHZhbGlkYXRlIHRoZW0gaW4gd2F5cyBzcGVjaWZpYyB0byB0aGVpciB0eXBlXG4gICAqIEBmaXJlcyBBYmlkZSNpbnZhbGlkXG4gICAqIEBmaXJlcyBBYmlkZSN2YWxpZFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdmFsaWRhdGUsIHNob3VsZCBiZSBhbiBIVE1MIGlucHV0XG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBnb29kVG9HbyAtIElmIHRoZSBpbnB1dCBpcyB2YWxpZCBvciBub3QuXG4gICAqL1xuICB2YWxpZGF0ZUlucHV0KCRlbCkge1xuICAgIHZhciBjbGVhclJlcXVpcmUgPSB0aGlzLnJlcXVpcmVkQ2hlY2soJGVsKSxcbiAgICAgICAgdmFsaWRhdGVkID0gZmFsc2UsXG4gICAgICAgIGN1c3RvbVZhbGlkYXRvciA9IHRydWUsXG4gICAgICAgIHZhbGlkYXRvciA9ICRlbC5hdHRyKCdkYXRhLXZhbGlkYXRvcicpLFxuICAgICAgICBlcXVhbFRvID0gdHJ1ZTtcblxuICAgIC8vIGRvbid0IHZhbGlkYXRlIGlnbm9yZWQgaW5wdXRzIG9yIGhpZGRlbiBpbnB1dHNcbiAgICBpZiAoJGVsLmlzKCdbZGF0YS1hYmlkZS1pZ25vcmVdJykgfHwgJGVsLmlzKCdbdHlwZT1cImhpZGRlblwiXScpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKCRlbFswXS50eXBlKSB7XG4gICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgIHZhbGlkYXRlZCA9IHRoaXMudmFsaWRhdGVSYWRpbygkZWwuYXR0cignbmFtZScpKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgdmFsaWRhdGVkID0gY2xlYXJSZXF1aXJlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGNhc2UgJ3NlbGVjdC1vbmUnOlxuICAgICAgY2FzZSAnc2VsZWN0LW11bHRpcGxlJzpcbiAgICAgICAgdmFsaWRhdGVkID0gY2xlYXJSZXF1aXJlO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFsaWRhdGVkID0gdGhpcy52YWxpZGF0ZVRleHQoJGVsKTtcbiAgICB9XG5cbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjdXN0b21WYWxpZGF0b3IgPSB0aGlzLm1hdGNoVmFsaWRhdGlvbigkZWwsIHZhbGlkYXRvciwgJGVsLmF0dHIoJ3JlcXVpcmVkJykpO1xuICAgIH1cblxuICAgIGlmICgkZWwuYXR0cignZGF0YS1lcXVhbHRvJykpIHtcbiAgICAgIGVxdWFsVG8gPSB0aGlzLm9wdGlvbnMudmFsaWRhdG9ycy5lcXVhbFRvKCRlbCk7XG4gICAgfVxuXG5cbiAgICB2YXIgZ29vZFRvR28gPSBbY2xlYXJSZXF1aXJlLCB2YWxpZGF0ZWQsIGN1c3RvbVZhbGlkYXRvciwgZXF1YWxUb10uaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuICAgIHZhciBtZXNzYWdlID0gKGdvb2RUb0dvID8gJ3ZhbGlkJyA6ICdpbnZhbGlkJykgKyAnLnpmLmFiaWRlJztcblxuICAgIHRoaXNbZ29vZFRvR28gPyAncmVtb3ZlRXJyb3JDbGFzc2VzJyA6ICdhZGRFcnJvckNsYXNzZXMnXSgkZWwpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgaW5wdXQgaXMgZG9uZSBjaGVja2luZyBmb3IgdmFsaWRhdGlvbi4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYHZhbGlkLnpmLmFiaWRlYCBvciBgaW52YWxpZC56Zi5hYmlkZWBcbiAgICAgKiBUcmlnZ2VyIGluY2x1ZGVzIHRoZSBET00gZWxlbWVudCBvZiB0aGUgaW5wdXQuXG4gICAgICogQGV2ZW50IEFiaWRlI3ZhbGlkXG4gICAgICogQGV2ZW50IEFiaWRlI2ludmFsaWRcbiAgICAgKi9cbiAgICAkZWwudHJpZ2dlcihtZXNzYWdlLCBbJGVsXSk7XG5cbiAgICByZXR1cm4gZ29vZFRvR287XG4gIH1cblxuICAvKipcbiAgICogR29lcyB0aHJvdWdoIGEgZm9ybSBhbmQgaWYgdGhlcmUgYXJlIGFueSBpbnZhbGlkIGlucHV0cywgaXQgd2lsbCBkaXNwbGF5IHRoZSBmb3JtIGVycm9yIGVsZW1lbnRcbiAgICogQHJldHVybnMge0Jvb2xlYW59IG5vRXJyb3IgLSB0cnVlIGlmIG5vIGVycm9ycyB3ZXJlIGRldGVjdGVkLi4uXG4gICAqIEBmaXJlcyBBYmlkZSNmb3JtdmFsaWRcbiAgICogQGZpcmVzIEFiaWRlI2Zvcm1pbnZhbGlkXG4gICAqL1xuICB2YWxpZGF0ZUZvcm0oKSB7XG4gICAgdmFyIGFjYyA9IFtdO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRpbnB1dHMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGFjYy5wdXNoKF90aGlzLnZhbGlkYXRlSW5wdXQoJCh0aGlzKSkpO1xuICAgIH0pO1xuXG4gICAgdmFyIG5vRXJyb3IgPSBhY2MuaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1hYmlkZS1lcnJvcl0nKS5jc3MoJ2Rpc3BsYXknLCAobm9FcnJvciA/ICdub25lJyA6ICdibG9jaycpKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGZvcm0gaXMgZmluaXNoZWQgdmFsaWRhdGluZy4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYGZvcm12YWxpZC56Zi5hYmlkZWAgb3IgYGZvcm1pbnZhbGlkLnpmLmFiaWRlYC5cbiAgICAgKiBUcmlnZ2VyIGluY2x1ZGVzIHRoZSBlbGVtZW50IG9mIHRoZSBmb3JtLlxuICAgICAqIEBldmVudCBBYmlkZSNmb3JtdmFsaWRcbiAgICAgKiBAZXZlbnQgQWJpZGUjZm9ybWludmFsaWRcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoKG5vRXJyb3IgPyAnZm9ybXZhbGlkJyA6ICdmb3JtaW52YWxpZCcpICsgJy56Zi5hYmlkZScsIFt0aGlzLiRlbGVtZW50XSk7XG5cbiAgICByZXR1cm4gbm9FcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3IgYSBub3QgYSB0ZXh0IGlucHV0IGlzIHZhbGlkIGJhc2VkIG9uIHRoZSBwYXR0ZXJuIHNwZWNpZmllZCBpbiB0aGUgYXR0cmlidXRlLiBJZiBubyBtYXRjaGluZyBwYXR0ZXJuIGlzIGZvdW5kLCByZXR1cm5zIHRydWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHZhbGlkYXRlLCBzaG91bGQgYmUgYSB0ZXh0IGlucHV0IEhUTUwgZWxlbWVudFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVybiAtIHN0cmluZyB2YWx1ZSBvZiBvbmUgb2YgdGhlIFJlZ0V4IHBhdHRlcm5zIGluIEFiaWRlLm9wdGlvbnMucGF0dGVybnNcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCB0aGUgaW5wdXQgdmFsdWUgbWF0Y2hlcyB0aGUgcGF0dGVybiBzcGVjaWZpZWRcbiAgICovXG4gIHZhbGlkYXRlVGV4dCgkZWwsIHBhdHRlcm4pIHtcbiAgICAvLyBBIHBhdHRlcm4gY2FuIGJlIHBhc3NlZCB0byB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGJlIGluZmVyZWQgZnJvbSB0aGUgaW5wdXQncyBcInBhdHRlcm5cIiBhdHRyaWJ1dGUsIG9yIGl0J3MgXCJ0eXBlXCIgYXR0cmlidXRlXG4gICAgcGF0dGVybiA9IChwYXR0ZXJuIHx8ICRlbC5hdHRyKCdwYXR0ZXJuJykgfHwgJGVsLmF0dHIoJ3R5cGUnKSk7XG4gICAgdmFyIGlucHV0VGV4dCA9ICRlbC52YWwoKTtcbiAgICB2YXIgdmFsaWQgPSBmYWxzZTtcblxuICAgIGlmIChpbnB1dFRleHQubGVuZ3RoKSB7XG4gICAgICAvLyBJZiB0aGUgcGF0dGVybiBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaXMgaW4gQWJpZGUncyBsaXN0IG9mIHBhdHRlcm5zLCB0aGVuIHRlc3QgdGhhdCByZWdleHBcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGF0dGVybnMuaGFzT3duUHJvcGVydHkocGF0dGVybikpIHtcbiAgICAgICAgdmFsaWQgPSB0aGlzLm9wdGlvbnMucGF0dGVybnNbcGF0dGVybl0udGVzdChpbnB1dFRleHQpO1xuICAgICAgfVxuICAgICAgLy8gSWYgdGhlIHBhdHRlcm4gbmFtZSBpc24ndCBhbHNvIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiB0aGUgZmllbGQsIHRoZW4gdGVzdCBpdCBhcyBhIHJlZ2V4cFxuICAgICAgZWxzZSBpZiAocGF0dGVybiAhPT0gJGVsLmF0dHIoJ3R5cGUnKSkge1xuICAgICAgICB2YWxpZCA9IG5ldyBSZWdFeHAocGF0dGVybikudGVzdChpbnB1dFRleHQpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQW4gZW1wdHkgZmllbGQgaXMgdmFsaWQgaWYgaXQncyBub3QgcmVxdWlyZWRcbiAgICBlbHNlIGlmICghJGVsLnByb3AoJ3JlcXVpcmVkJykpIHtcbiAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWQ7XG4gICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBhIG5vdCBhIHJhZGlvIGlucHV0IGlzIHZhbGlkIGJhc2VkIG9uIHdoZXRoZXIgb3Igbm90IGl0IGlzIHJlcXVpcmVkIGFuZCBzZWxlY3RlZC4gQWx0aG91Z2ggdGhlIGZ1bmN0aW9uIHRhcmdldHMgYSBzaW5nbGUgYDxpbnB1dD5gLCBpdCB2YWxpZGF0ZXMgYnkgY2hlY2tpbmcgdGhlIGByZXF1aXJlZGAgYW5kIGBjaGVja2VkYCBwcm9wZXJ0aWVzIG9mIGFsbCByYWRpbyBidXR0b25zIGluIGl0cyBncm91cC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGdyb3VwTmFtZSAtIEEgc3RyaW5nIHRoYXQgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIGEgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXQgbGVhc3Qgb25lIHJhZGlvIGlucHV0IGhhcyBiZWVuIHNlbGVjdGVkIChpZiBpdCdzIHJlcXVpcmVkKVxuICAgKi9cbiAgdmFsaWRhdGVSYWRpbyhncm91cE5hbWUpIHtcbiAgICAvLyBJZiBhdCBsZWFzdCBvbmUgcmFkaW8gaW4gdGhlIGdyb3VwIGhhcyB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUsIHRoZSBncm91cCBpcyBjb25zaWRlcmVkIHJlcXVpcmVkXG4gICAgLy8gUGVyIFczQyBzcGVjLCBhbGwgcmFkaW8gYnV0dG9ucyBpbiBhIGdyb3VwIHNob3VsZCBoYXZlIGByZXF1aXJlZGAsIGJ1dCB3ZSdyZSBiZWluZyBuaWNlXG4gICAgdmFyICRncm91cCA9IHRoaXMuJGVsZW1lbnQuZmluZChgOnJhZGlvW25hbWU9XCIke2dyb3VwTmFtZX1cIl1gKTtcbiAgICB2YXIgdmFsaWQgPSBmYWxzZSwgcmVxdWlyZWQgPSBmYWxzZTtcblxuICAgIC8vIEZvciB0aGUgZ3JvdXAgdG8gYmUgcmVxdWlyZWQsIGF0IGxlYXN0IG9uZSByYWRpbyBuZWVkcyB0byBiZSByZXF1aXJlZFxuICAgICRncm91cC5lYWNoKChpLCBlKSA9PiB7XG4gICAgICBpZiAoJChlKS5hdHRyKCdyZXF1aXJlZCcpKSB7XG4gICAgICAgIHJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZighcmVxdWlyZWQpIHZhbGlkPXRydWU7XG5cbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAvLyBGb3IgdGhlIGdyb3VwIHRvIGJlIHZhbGlkLCBhdCBsZWFzdCBvbmUgcmFkaW8gbmVlZHMgdG8gYmUgY2hlY2tlZFxuICAgICAgJGdyb3VwLmVhY2goKGksIGUpID0+IHtcbiAgICAgICAgaWYgKCQoZSkucHJvcCgnY2hlY2tlZCcpKSB7XG4gICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHZhbGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYSBzZWxlY3RlZCBpbnB1dCBwYXNzZXMgYSBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbi4gTXVsdGlwbGUgdmFsaWRhdGlvbnMgY2FuIGJlIHVzZWQsIGlmIHBhc3NlZCB0byB0aGUgZWxlbWVudCB3aXRoIGBkYXRhLXZhbGlkYXRvcj1cImZvbyBiYXIgYmF6XCJgIGluIGEgc3BhY2Ugc2VwYXJhdGVkIGxpc3RlZC5cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsaWRhdG9ycyAtIGEgc3RyaW5nIG9mIGZ1bmN0aW9uIG5hbWVzIG1hdGNoaW5nIGZ1bmN0aW9ucyBpbiB0aGUgQWJpZGUub3B0aW9ucy52YWxpZGF0b3JzIG9iamVjdC5cbiAgICogQHBhcmFtIHtCb29sZWFufSByZXF1aXJlZCAtIHNlbGYgZXhwbGFuYXRvcnk/XG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgdmFsaWRhdGlvbnMgcGFzc2VkLlxuICAgKi9cbiAgbWF0Y2hWYWxpZGF0aW9uKCRlbCwgdmFsaWRhdG9ycywgcmVxdWlyZWQpIHtcbiAgICByZXF1aXJlZCA9IHJlcXVpcmVkID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgdmFyIGNsZWFyID0gdmFsaWRhdG9ycy5zcGxpdCgnICcpLm1hcCgodikgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52YWxpZGF0b3JzW3ZdKCRlbCwgcmVxdWlyZWQsICRlbC5wYXJlbnQoKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsZWFyLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgZm9ybSBpbnB1dHMgYW5kIHN0eWxlc1xuICAgKiBAZmlyZXMgQWJpZGUjZm9ybXJlc2V0XG4gICAqL1xuICByZXNldEZvcm0oKSB7XG4gICAgdmFyICRmb3JtID0gdGhpcy4kZWxlbWVudCxcbiAgICAgICAgb3B0cyA9IHRoaXMub3B0aW9ucztcblxuICAgICQoYC4ke29wdHMubGFiZWxFcnJvckNsYXNzfWAsICRmb3JtKS5ub3QoJ3NtYWxsJykucmVtb3ZlQ2xhc3Mob3B0cy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgICQoYC4ke29wdHMuaW5wdXRFcnJvckNsYXNzfWAsICRmb3JtKS5ub3QoJ3NtYWxsJykucmVtb3ZlQ2xhc3Mob3B0cy5pbnB1dEVycm9yQ2xhc3MpO1xuICAgICQoYCR7b3B0cy5mb3JtRXJyb3JTZWxlY3Rvcn0uJHtvcHRzLmZvcm1FcnJvckNsYXNzfWApLnJlbW92ZUNsYXNzKG9wdHMuZm9ybUVycm9yQ2xhc3MpO1xuICAgICRmb3JtLmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgJCgnOmlucHV0JywgJGZvcm0pLm5vdCgnOmJ1dHRvbiwgOnN1Ym1pdCwgOnJlc2V0LCA6aGlkZGVuLCA6cmFkaW8sIDpjaGVja2JveCwgW2RhdGEtYWJpZGUtaWdub3JlXScpLnZhbCgnJykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgJCgnOmlucHV0OnJhZGlvJywgJGZvcm0pLm5vdCgnW2RhdGEtYWJpZGUtaWdub3JlXScpLnByb3AoJ2NoZWNrZWQnLGZhbHNlKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcbiAgICAkKCc6aW5wdXQ6Y2hlY2tib3gnLCAkZm9ybSkubm90KCdbZGF0YS1hYmlkZS1pZ25vcmVdJykucHJvcCgnY2hlY2tlZCcsZmFsc2UpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGZvcm0gaGFzIGJlZW4gcmVzZXQuXG4gICAgICogQGV2ZW50IEFiaWRlI2Zvcm1yZXNldFxuICAgICAqL1xuICAgICRmb3JtLnRyaWdnZXIoJ2Zvcm1yZXNldC56Zi5hYmlkZScsIFskZm9ybV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIEFiaWRlLlxuICAgKiBSZW1vdmVzIGVycm9yIHN0eWxlcyBhbmQgY2xhc3NlcyBmcm9tIGVsZW1lbnRzLCB3aXRob3V0IHJlc2V0dGluZyB0aGVpciB2YWx1ZXMuXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9mZignLmFiaWRlJylcbiAgICAgIC5maW5kKCdbZGF0YS1hYmlkZS1lcnJvcl0nKVxuICAgICAgICAuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgIHRoaXMuJGlucHV0c1xuICAgICAgLm9mZignLmFiaWRlJylcbiAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5yZW1vdmVFcnJvckNsYXNzZXMoJCh0aGlzKSk7XG4gICAgICB9KTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5BYmlkZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGV2ZW50IHRvIHZhbGlkYXRlIGlucHV0cy4gQ2hlY2tib3hlcyBhbmQgcmFkaW9zIHZhbGlkYXRlIGltbWVkaWF0ZWx5LlxuICAgKiBSZW1vdmUgb3IgY2hhbmdlIHRoaXMgdmFsdWUgZm9yIG1hbnVhbCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdmaWVsZENoYW5nZSdcbiAgICovXG4gIHZhbGlkYXRlT246ICdmaWVsZENoYW5nZScsXG5cbiAgLyoqXG4gICAqIENsYXNzIHRvIGJlIGFwcGxpZWQgdG8gaW5wdXQgbGFiZWxzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdpcy1pbnZhbGlkLWxhYmVsJ1xuICAgKi9cbiAgbGFiZWxFcnJvckNsYXNzOiAnaXMtaW52YWxpZC1sYWJlbCcsXG5cbiAgLyoqXG4gICAqIENsYXNzIHRvIGJlIGFwcGxpZWQgdG8gaW5wdXRzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdpcy1pbnZhbGlkLWlucHV0J1xuICAgKi9cbiAgaW5wdXRFcnJvckNsYXNzOiAnaXMtaW52YWxpZC1pbnB1dCcsXG5cbiAgLyoqXG4gICAqIENsYXNzIHNlbGVjdG9yIHRvIHVzZSB0byB0YXJnZXQgRm9ybSBFcnJvcnMgZm9yIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnLmZvcm0tZXJyb3InXG4gICAqL1xuICBmb3JtRXJyb3JTZWxlY3RvcjogJy5mb3JtLWVycm9yJyxcblxuICAvKipcbiAgICogQ2xhc3MgYWRkZWQgdG8gRm9ybSBFcnJvcnMgb24gZmFpbGVkIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2lzLXZpc2libGUnXG4gICAqL1xuICBmb3JtRXJyb3JDbGFzczogJ2lzLXZpc2libGUnLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSB0byB2YWxpZGF0ZSB0ZXh0IGlucHV0cyBvbiBhbnkgdmFsdWUgY2hhbmdlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBsaXZlVmFsaWRhdGU6IGZhbHNlLFxuXG4gIHBhdHRlcm5zOiB7XG4gICAgYWxwaGEgOiAvXlthLXpBLVpdKyQvLFxuICAgIGFscGhhX251bWVyaWMgOiAvXlthLXpBLVowLTldKyQvLFxuICAgIGludGVnZXIgOiAvXlstK10/XFxkKyQvLFxuICAgIG51bWJlciA6IC9eWy0rXT9cXGQqKD86W1xcLlxcLF1cXGQrKT8kLyxcblxuICAgIC8vIGFtZXgsIHZpc2EsIGRpbmVyc1xuICAgIGNhcmQgOiAvXig/OjRbMC05XXsxMn0oPzpbMC05XXszfSk/fDVbMS01XVswLTldezE0fXw2KD86MDExfDVbMC05XVswLTldKVswLTldezEyfXwzWzQ3XVswLTldezEzfXwzKD86MFswLTVdfFs2OF1bMC05XSlbMC05XXsxMX18KD86MjEzMXwxODAwfDM1XFxkezN9KVxcZHsxMX0pJC8sXG4gICAgY3Z2IDogL14oWzAtOV0pezMsNH0kLyxcblxuICAgIC8vIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3N0YXRlcy1vZi10aGUtdHlwZS1hdHRyaWJ1dGUuaHRtbCN2YWxpZC1lLW1haWwtYWRkcmVzc1xuICAgIGVtYWlsIDogL15bYS16QS1aMC05LiEjJCUmJyorXFwvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrJC8sXG5cbiAgICB1cmwgOiAvXihodHRwcz98ZnRwfGZpbGV8c3NoKTpcXC9cXC8oKCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OikqQCk/KCgoXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pKXwoKChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4/KSg6XFxkKik/KShcXC8oKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKyhcXC8oKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkqKSopPyk/KFxcPygoKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8W1xcdUUwMDAtXFx1RjhGRl18XFwvfFxcPykqKT8oXFwjKCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxcXC98XFw/KSopPyQvLFxuICAgIC8vIGFiYy5kZVxuICAgIGRvbWFpbiA6IC9eKFthLXpBLVowLTldKFthLXpBLVowLTlcXC1dezAsNjF9W2EtekEtWjAtOV0pP1xcLikrW2EtekEtWl17Miw4fSQvLFxuXG4gICAgZGF0ZXRpbWUgOiAvXihbMC0yXVswLTldezN9KVxcLShbMC0xXVswLTldKVxcLShbMC0zXVswLTldKVQoWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSkoWnwoW1xcLVxcK10oWzAtMV1bMC05XSlcXDowMCkpJC8sXG4gICAgLy8gWVlZWS1NTS1ERFxuICAgIGRhdGUgOiAvKD86MTl8MjApWzAtOV17Mn0tKD86KD86MFsxLTldfDFbMC0yXSktKD86MFsxLTldfDFbMC05XXwyWzAtOV0pfCg/Oig/ITAyKSg/OjBbMS05XXwxWzAtMl0pLSg/OjMwKSl8KD86KD86MFsxMzU3OF18MVswMl0pLTMxKSkkLyxcbiAgICAvLyBISDpNTTpTU1xuICAgIHRpbWUgOiAvXigwWzAtOV18MVswLTldfDJbMC0zXSkoOlswLTVdWzAtOV0pezJ9JC8sXG4gICAgZGF0ZUlTTyA6IC9eXFxkezR9W1xcL1xcLV1cXGR7MSwyfVtcXC9cXC1dXFxkezEsMn0kLyxcbiAgICAvLyBNTS9ERC9ZWVlZXG4gICAgbW9udGhfZGF5X3llYXIgOiAvXigwWzEtOV18MVswMTJdKVstIFxcLy5dKDBbMS05XXxbMTJdWzAtOV18M1swMV0pWy0gXFwvLl1cXGR7NH0kLyxcbiAgICAvLyBERC9NTS9ZWVlZXG4gICAgZGF5X21vbnRoX3llYXIgOiAvXigwWzEtOV18WzEyXVswLTldfDNbMDFdKVstIFxcLy5dKDBbMS05XXwxWzAxMl0pWy0gXFwvLl1cXGR7NH0kLyxcblxuICAgIC8vICNGRkYgb3IgI0ZGRkZGRlxuICAgIGNvbG9yIDogL14jPyhbYS1mQS1GMC05XXs2fXxbYS1mQS1GMC05XXszfSkkL1xuICB9LFxuXG4gIC8qKlxuICAgKiBPcHRpb25hbCB2YWxpZGF0aW9uIGZ1bmN0aW9ucyB0byBiZSB1c2VkLiBgZXF1YWxUb2AgYmVpbmcgdGhlIG9ubHkgZGVmYXVsdCBpbmNsdWRlZCBmdW5jdGlvbi5cbiAgICogRnVuY3Rpb25zIHNob3VsZCByZXR1cm4gb25seSBhIGJvb2xlYW4gaWYgdGhlIGlucHV0IGlzIHZhbGlkIG9yIG5vdC4gRnVuY3Rpb25zIGFyZSBnaXZlbiB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAgICogZWwgOiBUaGUgalF1ZXJ5IGVsZW1lbnQgdG8gdmFsaWRhdGUuXG4gICAqIHJlcXVpcmVkIDogQm9vbGVhbiB2YWx1ZSBvZiB0aGUgcmVxdWlyZWQgYXR0cmlidXRlIGJlIHByZXNlbnQgb3Igbm90LlxuICAgKiBwYXJlbnQgOiBUaGUgZGlyZWN0IHBhcmVudCBvZiB0aGUgaW5wdXQuXG4gICAqIEBvcHRpb25cbiAgICovXG4gIHZhbGlkYXRvcnM6IHtcbiAgICBlcXVhbFRvOiBmdW5jdGlvbiAoZWwsIHJlcXVpcmVkLCBwYXJlbnQpIHtcbiAgICAgIHJldHVybiAkKGAjJHtlbC5hdHRyKCdkYXRhLWVxdWFsdG8nKX1gKS52YWwoKSA9PT0gZWwudmFsKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBYmlkZSwgJ0FiaWRlJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBBY2NvcmRpb24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqL1xuXG5jbGFzcyBBY2NvcmRpb24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24uXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWNjb3JkaW9uI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYSBwbGFpbiBvYmplY3Qgd2l0aCBzZXR0aW5ncyB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBY2NvcmRpb24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0FjY29yZGlvbicpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbicsIHtcbiAgICAgICdFTlRFUic6ICd0b2dnbGUnLFxuICAgICAgJ1NQQUNFJzogJ3RvZ2dsZScsXG4gICAgICAnQVJST1dfRE9XTic6ICduZXh0JyxcbiAgICAgICdBUlJPV19VUCc6ICdwcmV2aW91cydcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIGJ5IGFuaW1hdGluZyB0aGUgcHJlc2V0IGFjdGl2ZSBwYW5lKHMpLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICB0aGlzLiR0YWJzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignbGksIFtkYXRhLWFjY29yZGlvbi1pdGVtXScpO1xuXG4gICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uKGlkeCwgZWwpIHtcbiAgICAgIHZhciAkZWwgPSAkKGVsKSxcbiAgICAgICAgICAkY29udGVudCA9ICRlbC5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyksXG4gICAgICAgICAgaWQgPSAkY29udGVudFswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdhY2NvcmRpb24nKSxcbiAgICAgICAgICBsaW5rSWQgPSBlbC5pZCB8fCBgJHtpZH0tbGFiZWxgO1xuXG4gICAgICAkZWwuZmluZCgnYTpmaXJzdCcpLmF0dHIoe1xuICAgICAgICAnYXJpYS1jb250cm9scyc6IGlkLFxuICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAnaWQnOiBsaW5rSWQsXG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICAkY29udGVudC5hdHRyKHsncm9sZSc6ICd0YWJwYW5lbCcsICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWQsICdhcmlhLWhpZGRlbic6IHRydWUsICdpZCc6IGlkfSk7XG4gICAgfSk7XG4gICAgdmFyICRpbml0QWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJykuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgIGlmKCRpbml0QWN0aXZlLmxlbmd0aCl7XG4gICAgICB0aGlzLmRvd24oJGluaXRBY3RpdmUsIHRydWUpO1xuICAgIH1cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIGFjY29yZGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJHRhYnMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkZWxlbSA9ICQodGhpcyk7XG4gICAgICB2YXIgJHRhYkNvbnRlbnQgPSAkZWxlbS5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyk7XG4gICAgICBpZiAoJHRhYkNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICAgICRlbGVtLmNoaWxkcmVuKCdhJykub2ZmKCdjbGljay56Zi5hY2NvcmRpb24ga2V5ZG93bi56Zi5hY2NvcmRpb24nKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay56Zi5hY2NvcmRpb24nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLnRvZ2dsZSgkdGFiQ29udGVudCk7XG4gICAgICAgIH0pLm9uKCdrZXlkb3duLnpmLmFjY29yZGlvbicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdBY2NvcmRpb24nLCB7XG4gICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBfdGhpcy50b2dnbGUoJHRhYkNvbnRlbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgJGEgPSAkZWxlbS5uZXh0KCkuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5tdWx0aUV4cGFuZCkge1xuICAgICAgICAgICAgICAgICRhLnRyaWdnZXIoJ2NsaWNrLnpmLmFjY29yZGlvbicpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2aW91czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciAkYSA9ICRlbGVtLnByZXYoKS5maW5kKCdhJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgJGEudHJpZ2dlcignY2xpY2suemYuYWNjb3JkaW9uJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHNlbGVjdGVkIGNvbnRlbnQgcGFuZSdzIG9wZW4vY2xvc2Ugc3RhdGUuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0galF1ZXJ5IG9iamVjdCBvZiB0aGUgcGFuZSB0byB0b2dnbGUgKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoJHRhcmdldCkge1xuICAgIGlmKCR0YXJnZXQucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XG4gICAgICB0aGlzLnVwKCR0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvd24oJHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBhY2NvcmRpb24gdGFiIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIEFjY29yZGlvbiBwYW5lIHRvIG9wZW4gKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICogQHBhcmFtIHtCb29sZWFufSBmaXJzdFRpbWUgLSBmbGFnIHRvIGRldGVybWluZSBpZiByZWZsb3cgc2hvdWxkIGhhcHBlbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbiNkb3duXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZG93bigkdGFyZ2V0LCBmaXJzdFRpbWUpIHtcbiAgICAkdGFyZ2V0XG4gICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSlcbiAgICAgIC5wYXJlbnQoJ1tkYXRhLXRhYi1jb250ZW50XScpXG4gICAgICAuYWRkQmFjaygpXG4gICAgICAucGFyZW50KCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQgJiYgIWZpcnN0VGltZSkge1xuICAgICAgdmFyICRjdXJyZW50QWN0aXZlID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWFjdGl2ZScpLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgIGlmICgkY3VycmVudEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy51cCgkY3VycmVudEFjdGl2ZS5ub3QoJHRhcmdldCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgICR0YXJnZXQuc2xpZGVEb3duKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAoKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHRhYiBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI2Rvd25cbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdkb3duLnpmLmFjY29yZGlvbicsIFskdGFyZ2V0XSk7XG4gICAgfSk7XG5cbiAgICAkKGAjJHskdGFyZ2V0LmF0dHIoJ2FyaWEtbGFiZWxsZWRieScpfWApLmF0dHIoe1xuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiB0cnVlLFxuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSB0YWIgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQWNjb3JkaW9uIHRhYiB0byBjbG9zZSAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uI3VwXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgdXAoJHRhcmdldCkge1xuICAgIHZhciAkYXVudHMgPSAkdGFyZ2V0LnBhcmVudCgpLnNpYmxpbmdzKCksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmKCghdGhpcy5vcHRpb25zLmFsbG93QWxsQ2xvc2VkICYmICEkYXVudHMuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB8fCAhJHRhcmdldC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsICR0YXJnZXQsIGZ1bmN0aW9uKCl7XG4gICAgICAkdGFyZ2V0LnNsaWRlVXAoX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB0YWIgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI3VwXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cC56Zi5hY2NvcmRpb24nLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG4gICAgLy8gfSk7XG5cbiAgICAkdGFyZ2V0LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICAgICAgICAgLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICQoYCMkeyR0YXJnZXQuYXR0cignYXJpYS1sYWJlbGxlZGJ5Jyl9YCkuYXR0cih7XG4gICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFuIGFjY29yZGlvbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbiNkZXN0cm95ZWRcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtdGFiLWNvbnRlbnRdJykuc3RvcCh0cnVlKS5zbGlkZVVwKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJy56Zi5hY2NvcmRpb24nKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5BY2NvcmRpb24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBhbmltYXRlIHRoZSBvcGVuaW5nIG9mIGFuIGFjY29yZGlvbiBwYW5lLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1MFxuICAgKi9cbiAgc2xpZGVTcGVlZDogMjUwLFxuICAvKipcbiAgICogQWxsb3cgdGhlIGFjY29yZGlvbiB0byBoYXZlIG11bHRpcGxlIG9wZW4gcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIG11bHRpRXhwYW5kOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBhY2NvcmRpb24gdG8gY2xvc2UgYWxsIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBhbGxvd0FsbENsb3NlZDogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBY2NvcmRpb24sICdBY2NvcmRpb24nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFjY29yZGlvbk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvbk1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG5jbGFzcyBBY2NvcmRpb25NZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQWNjb3JkaW9uTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnQWNjb3JkaW9uTWVudScpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbk1lbnUnLCB7XG4gICAgICAnRU5URVInOiAndG9nZ2xlJyxcbiAgICAgICdTUEFDRSc6ICd0b2dnbGUnLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAnY2xvc2UnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZUFsbCdcbiAgICB9KTtcbiAgfVxuXG5cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGFjY29yZGlvbiBtZW51IGJ5IGhpZGluZyBhbGwgbmVzdGVkIG1lbnVzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLm5vdCgnLmlzLWFjdGl2ZScpLnNsaWRlVXAoMCk7Ly8uZmluZCgnYScpLmNzcygncGFkZGluZy1sZWZ0JywgJzFyZW0nKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ3JvbGUnOiAnbWVudScsXG4gICAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiB0aGlzLm9wdGlvbnMubXVsdGlPcGVuXG4gICAgfSk7XG5cbiAgICB0aGlzLiRtZW51TGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY2NvcmRpb24tc3VibWVudS1wYXJlbnQnKTtcbiAgICB0aGlzLiRtZW51TGlua3MuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyIGxpbmtJZCA9IHRoaXMuaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnYWNjLW1lbnUtbGluaycpLFxuICAgICAgICAgICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAkc3ViID0gJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyksXG4gICAgICAgICAgc3ViSWQgPSAkc3ViWzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjYy1tZW51JyksXG4gICAgICAgICAgaXNBY3RpdmUgPSAkc3ViLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICRlbGVtLmF0dHIoe1xuICAgICAgICAnYXJpYS1jb250cm9scyc6IHN1YklkLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGlzQWN0aXZlLFxuICAgICAgICAncm9sZSc6ICdtZW51aXRlbScsXG4gICAgICAgICdpZCc6IGxpbmtJZFxuICAgICAgfSk7XG4gICAgICAkc3ViLmF0dHIoe1xuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICdyb2xlJzogJ21lbnUnLFxuICAgICAgICAnaWQnOiBzdWJJZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGluaXRQYW5lcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpO1xuICAgIGlmKGluaXRQYW5lcy5sZW5ndGgpe1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGluaXRQYW5lcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIF90aGlzLmRvd24oJCh0aGlzKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSBtZW51LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJHN1Ym1lbnUgPSAkKHRoaXMpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuXG4gICAgICBpZiAoJHN1Ym1lbnUubGVuZ3RoKSB7XG4gICAgICAgICQodGhpcykuY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKS5vbignY2xpY2suemYuYWNjb3JkaW9uTWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICBfdGhpcy50b2dnbGUoJHN1Ym1lbnUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KS5vbigna2V5ZG93bi56Zi5hY2NvcmRpb25tZW51JywgZnVuY3Rpb24oZSl7XG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50LFxuICAgICAgICAgICR0YXJnZXQgPSAkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKTtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaS0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkrMSwgJGVsZW1lbnRzLmxlbmd0aC0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG5cbiAgICAgICAgICBpZiAoJCh0aGlzKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkgeyAvLyBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3QtY2hpbGQnKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpmaXJzdC1jaGlsZCcpKSB7IC8vIGlzIGZpcnN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdOnZpc2libGUnKS5sZW5ndGgpIHsgLy8gaWYgcHJldmlvdXMgZWxlbWVudCBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJHByZXZFbGVtZW50LnBhcmVudHMoJ2xpJykuZmluZCgnbGk6bGFzdC1jaGlsZCcpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJCh0aGlzKS5pcygnOmxhc3QtY2hpbGQnKSkgeyAvLyBpcyBsYXN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5uZXh0KCdsaScpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdBY2NvcmRpb25NZW51Jywge1xuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgICBfdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgICAgICAgJHRhcmdldC5maW5kKCdsaScpLmZpcnN0KCkuZmluZCgnYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5sZW5ndGggJiYgISR0YXJnZXQuaXMoJzpoaWRkZW4nKSkgeyAvLyBjbG9zZSBhY3RpdmUgc3ViIG9mIHRoaXMgaXRlbVxuICAgICAgICAgICAgX3RoaXMudXAoJHRhcmdldCk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7IC8vIGNsb3NlIGN1cnJlbnRseSBvcGVuIHN1YlxuICAgICAgICAgICAgX3RoaXMudXAoJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdWJtZW51XScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBfdGhpcy50b2dnbGUoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmhpZGVBbGwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24ocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7Ly8uYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYWxsIHBhbmVzIG9mIHRoZSBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGhpZGVBbGwoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLnNsaWRlVXAodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2Ugc3RhdGUgb2YgYSBzdWJtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSB0aGUgc3VibWVudSB0byB0b2dnbGVcbiAgICovXG4gIHRvZ2dsZSgkdGFyZ2V0KXtcbiAgICBpZighJHRhcmdldC5pcygnOmFuaW1hdGVkJykpIHtcbiAgICAgIGlmICghJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgIHRoaXMudXAoJHRhcmdldCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgc3ViLW1lbnUgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gb3Blbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjZG93blxuICAgKi9cbiAgZG93bigkdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmKCF0aGlzLm9wdGlvbnMubXVsdGlPcGVuKSB7XG4gICAgICB0aGlzLnVwKHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpLm5vdCgkdGFyZ2V0LnBhcmVudHNVbnRpbCh0aGlzLiRlbGVtZW50KS5hZGQoJHRhcmdldCkpKTtcbiAgICB9XG5cbiAgICAkdGFyZ2V0LmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hdHRyKHsnYXJpYS1oaWRkZW4nOiBmYWxzZX0pXG4gICAgICAucGFyZW50KCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50JykuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG5cbiAgICAgIC8vRm91bmRhdGlvbi5Nb3ZlKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAkdGFyZ2V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgJHRhcmdldC5zbGlkZURvd24oX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbk1lbnUjZG93blxuICAgICAgICAgICAqL1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Rvd24uemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICAgIH0pO1xuICAgICAgLy99KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHN1Yi1tZW51IGRlZmluZWQgYnkgYCR0YXJnZXRgLiBBbGwgc3ViLW1lbnVzIGluc2lkZSB0aGUgdGFyZ2V0IHdpbGwgYmUgY2xvc2VkIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gY2xvc2UuXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I3VwXG4gICAqL1xuICB1cCgkdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAvL0ZvdW5kYXRpb24uTW92ZSh0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgJHRhcmdldCwgZnVuY3Rpb24oKXtcbiAgICAgICR0YXJnZXQuc2xpZGVVcChfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uTWVudSN1cFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcigndXAuemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcbiAgICAvL30pO1xuXG4gICAgdmFyICRtZW51cyA9ICR0YXJnZXQuZmluZCgnW2RhdGEtc3VibWVudV0nKS5zbGlkZVVwKDApLmFkZEJhY2soKS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgJG1lbnVzLnBhcmVudCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2Rlc3Ryb3llZFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVEb3duKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKTtcblxuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdhY2NvcmRpb24nKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuQWNjb3JkaW9uTWVudS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGFuaW1hdGUgdGhlIG9wZW5pbmcgb2YgYSBzdWJtZW51IGluIG1zLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1MFxuICAgKi9cbiAgc2xpZGVTcGVlZDogMjUwLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIG11bHRpT3BlbjogdHJ1ZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEFjY29yZGlvbk1lbnUsICdBY2NvcmRpb25NZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBEcmlsbGRvd24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyaWxsZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubmVzdFxuICovXG5cbmNsYXNzIERyaWxsZG93biB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgZHJpbGxkb3duIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbiBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIERyaWxsZG93bi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2RyaWxsZG93bicpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRHJpbGxkb3duJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignRHJpbGxkb3duJywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZScsXG4gICAgICAnVEFCJzogJ2Rvd24nLFxuICAgICAgJ1NISUZUX1RBQic6ICd1cCdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgZHJpbGxkb3duIGJ5IGNyZWF0aW5nIGpRdWVyeSBjb2xsZWN0aW9ucyBvZiBlbGVtZW50c1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kc3VibWVudUFuY2hvcnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpLmlzLWRyaWxsZG93bi1zdWJtZW51LXBhcmVudCcpLmNoaWxkcmVuKCdhJyk7XG4gICAgdGhpcy4kc3VibWVudXMgPSB0aGlzLiRzdWJtZW51QW5jaG9ycy5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyk7XG4gICAgdGhpcy4kbWVudUl0ZW1zID0gdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLm5vdCgnLmpzLWRyaWxsZG93bi1iYWNrJykuYXR0cigncm9sZScsICdtZW51aXRlbScpLmZpbmQoJ2EnKTtcblxuICAgIHRoaXMuX3ByZXBhcmVNZW51KCk7XG5cbiAgICB0aGlzLl9rZXlib2FyZEV2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIHByZXBhcmVzIGRyaWxsZG93biBtZW51IGJ5IHNldHRpbmcgYXR0cmlidXRlcyB0byBsaW5rcyBhbmQgZWxlbWVudHNcbiAgICogc2V0cyBhIG1pbiBoZWlnaHQgdG8gcHJldmVudCBjb250ZW50IGp1bXBpbmdcbiAgICogd3JhcHMgdGhlIGVsZW1lbnQgaWYgbm90IGFscmVhZHkgd3JhcHBlZFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIF9wcmVwYXJlTWVudSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8vIGlmKCF0aGlzLm9wdGlvbnMuaG9sZE9wZW4pe1xuICAgIC8vICAgdGhpcy5fbWVudUxpbmtFdmVudHMoKTtcbiAgICAvLyB9XG4gICAgdGhpcy4kc3VibWVudUFuY2hvcnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyICRsaW5rID0gJCh0aGlzKTtcbiAgICAgIHZhciAkc3ViID0gJGxpbmsucGFyZW50KCk7XG4gICAgICBpZihfdGhpcy5vcHRpb25zLnBhcmVudExpbmspe1xuICAgICAgICAkbGluay5jbG9uZSgpLnByZXBlbmRUbygkc3ViLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpKS53cmFwKCc8bGkgY2xhc3M9XCJpcy1zdWJtZW51LXBhcmVudC1pdGVtIGlzLXN1Ym1lbnUtaXRlbSBpcy1kcmlsbGRvd24tc3VibWVudS1pdGVtXCIgcm9sZT1cIm1lbnUtaXRlbVwiPjwvbGk+Jyk7XG4gICAgICB9XG4gICAgICAkbGluay5kYXRhKCdzYXZlZEhyZWYnLCAkbGluay5hdHRyKCdocmVmJykpLnJlbW92ZUF0dHIoJ2hyZWYnKS5hdHRyKCd0YWJpbmRleCcsIDApO1xuICAgICAgJGxpbmsuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJylcbiAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogMCxcbiAgICAgICAgICAgICdyb2xlJzogJ21lbnUnXG4gICAgICAgICAgfSk7XG4gICAgICBfdGhpcy5fZXZlbnRzKCRsaW5rKTtcbiAgICB9KTtcbiAgICB0aGlzLiRzdWJtZW51cy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJG1lbnUgPSAkKHRoaXMpLFxuICAgICAgICAgICRiYWNrID0gJG1lbnUuZmluZCgnLmpzLWRyaWxsZG93bi1iYWNrJyk7XG4gICAgICBpZighJGJhY2subGVuZ3RoKXtcbiAgICAgICAgJG1lbnUucHJlcGVuZChfdGhpcy5vcHRpb25zLmJhY2tCdXR0b24pO1xuICAgICAgfVxuICAgICAgX3RoaXMuX2JhY2soJG1lbnUpO1xuICAgIH0pO1xuICAgIGlmKCF0aGlzLiRlbGVtZW50LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24nKSl7XG4gICAgICB0aGlzLiR3cmFwcGVyID0gJCh0aGlzLm9wdGlvbnMud3JhcHBlcikuYWRkQ2xhc3MoJ2lzLWRyaWxsZG93bicpO1xuICAgICAgdGhpcy4kd3JhcHBlciA9IHRoaXMuJGVsZW1lbnQud3JhcCh0aGlzLiR3cmFwcGVyKS5wYXJlbnQoKS5jc3ModGhpcy5fZ2V0TWF4RGltcygpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyB0byBlbGVtZW50cyBpbiB0aGUgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IG1lbnUgaXRlbSB0byBhZGQgaGFuZGxlcnMgdG8uXG4gICAqL1xuICBfZXZlbnRzKCRlbGVtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICRlbGVtLm9mZignY2xpY2suemYuZHJpbGxkb3duJylcbiAgICAub24oJ2NsaWNrLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYoJChlLnRhcmdldCkucGFyZW50c1VudGlsKCd1bCcsICdsaScpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnQnKSl7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldC5maXJzdEVsZW1lbnRDaGlsZCl7XG4gICAgICAvLyAgIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIH1cbiAgICAgIF90aGlzLl9zaG93KCRlbGVtLnBhcmVudCgnbGknKSk7XG5cbiAgICAgIGlmKF90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKXtcbiAgICAgICAgdmFyICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgICAkYm9keS5vZmYoJy56Zi5kcmlsbGRvd24nKS5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBfdGhpcy4kZWxlbWVudFswXSB8fCAkLmNvbnRhaW5zKF90aGlzLiRlbGVtZW50WzBdLCBlLnRhcmdldCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLl9oaWRlQWxsKCk7XG4gICAgICAgICAgJGJvZHkub2ZmKCcuemYuZHJpbGxkb3duJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMga2V5ZG93biBldmVudCBsaXN0ZW5lciB0byBgbGlgJ3MgaW4gdGhlIG1lbnUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfa2V5Ym9hcmRFdmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJG1lbnVJdGVtcy5hZGQodGhpcy4kZWxlbWVudC5maW5kKCcuanMtZHJpbGxkb3duLWJhY2sgPiBhJykpLm9uKCdrZXlkb3duLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uKGUpe1xuXG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykuY2hpbGRyZW4oJ2xpJykuY2hpbGRyZW4oJ2EnKSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1heCgwLCBpLTEpKTtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSsxLCAkZWxlbWVudHMubGVuZ3RoLTEpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnRHJpbGxkb3duJywge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLmZpbmQoJ3VsIGxpIGEnKS5maWx0ZXIoX3RoaXMuJG1lbnVJdGVtcykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpKTtcbiAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW1lbnQpLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ2EnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLl9iYWNrKCk7XG4gICAgICAgICAgLy9fdGhpcy4kbWVudUl0ZW1zLmZpcnN0KCkuZm9jdXMoKTsgLy8gZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoISRlbGVtZW50LmlzKF90aGlzLiRtZW51SXRlbXMpKSB7IC8vIG5vdCBtZW51IGl0ZW0gbWVhbnMgYmFjayBidXR0b25cbiAgICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykpO1xuICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKS5jaGlsZHJlbignYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAgICAgICAgICAgIFxuICAgICAgICAgIH0gZWxzZSBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLmZpbmQoJ3VsIGxpIGEnKS5maWx0ZXIoX3RoaXMuJG1lbnVJdGVtcykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pOyAvLyBlbmQga2V5Ym9hcmRBY2Nlc3NcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYWxsIG9wZW4gZWxlbWVudHMsIGFuZCByZXR1cm5zIHRvIHJvb3QgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcmlsbGRvd24jY2xvc2VkXG4gICAqL1xuICBfaGlkZUFsbCgpIHtcbiAgICB2YXIgJGVsZW0gPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1kcmlsbGRvd24tc3VibWVudS5pcy1hY3RpdmUnKS5hZGRDbGFzcygnaXMtY2xvc2luZycpO1xuICAgICRlbGVtLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW0pLCBmdW5jdGlvbihlKXtcbiAgICAgICRlbGVtLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZycpO1xuICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBmdWxseSBjbG9zZWQuXG4gICAgICAgICAqIEBldmVudCBEcmlsbGRvd24jY2xvc2VkXG4gICAgICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VkLnpmLmRyaWxsZG93bicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXIgZm9yIGVhY2ggYGJhY2tgIGJ1dHRvbiwgYW5kIGNsb3NlcyBvcGVuIG1lbnVzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyaWxsZG93biNiYWNrXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IHN1Yi1tZW51IHRvIGFkZCBgYmFja2AgZXZlbnQuXG4gICAqL1xuICBfYmFjaygkZWxlbSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgJGVsZW0ub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKTtcbiAgICAkZWxlbS5jaGlsZHJlbignLmpzLWRyaWxsZG93bi1iYWNrJylcbiAgICAgIC5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdtb3VzZXVwIG9uIGJhY2snKTtcbiAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGEgcGFyZW50IHN1Ym1lbnUsIGNhbGwgc2hvd1xuICAgICAgICBsZXQgcGFyZW50U3ViTWVudSA9ICRlbGVtLnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykucGFyZW50KCdsaScpO1xuICAgICAgICBpZiAocGFyZW50U3ViTWVudS5sZW5ndGgpIHsgXG4gICAgICAgICAgX3RoaXMuX3Nob3cocGFyZW50U3ViTWVudSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXIgdG8gbWVudSBpdGVtcyB3L28gc3VibWVudXMgdG8gY2xvc2Ugb3BlbiBtZW51cyBvbiBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbWVudUxpbmtFdmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRtZW51SXRlbXMubm90KCcuaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50JylcbiAgICAgICAgLm9mZignY2xpY2suemYuZHJpbGxkb3duJylcbiAgICAgICAgLm9uKCdjbGljay56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAvLyBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIF90aGlzLl9oaWRlQWxsKCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIHN1Ym1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJpbGxkb3duI29wZW5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBvcGVuLCBpLmUuIHRoZSBgbGlgIHRhZy5cbiAgICovXG4gIF9zaG93KCRlbGVtKSB7XG4gICAgJGVsZW0uYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICRlbGVtLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpLmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBzdWJtZW51IGhhcyBvcGVuZWQuXG4gICAgICogQGV2ZW50IERyaWxsZG93biNvcGVuXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvcGVuLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBIaWRlcyBhIHN1Ym1lbnVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcmlsbGRvd24jaGlkZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSB0aGUgY3VycmVudCBzdWItbWVudSB0byBoaWRlLCBpLmUuIHRoZSBgdWxgIHRhZy5cbiAgICovXG4gIF9oaWRlKCRlbGVtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAkZWxlbS5wYXJlbnQoJ2xpJykuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAkZWxlbS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpLmFkZENsYXNzKCdpcy1jbG9zaW5nJylcbiAgICAgICAgIC5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtKSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgJGVsZW0ucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZSBpcy1jbG9zaW5nJyk7XG4gICAgICAgICAgICRlbGVtLmJsdXIoKTtcbiAgICAgICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHN1Ym1lbnUgaGFzIGNsb3NlZC5cbiAgICAgKiBAZXZlbnQgRHJpbGxkb3duI2hpZGVcbiAgICAgKi9cbiAgICAkZWxlbS50cmlnZ2VyKCdoaWRlLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIHRocm91Z2ggdGhlIG5lc3RlZCBtZW51cyB0byBjYWxjdWxhdGUgdGhlIG1pbi1oZWlnaHQsIGFuZCBtYXgtd2lkdGggZm9yIHRoZSBtZW51LlxuICAgKiBQcmV2ZW50cyBjb250ZW50IGp1bXBpbmcuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldE1heERpbXMoKSB7XG4gICAgdmFyIGJpZ2dlc3QgPSAwXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gICAgdGhpcy4kc3VibWVudXMuYWRkKHRoaXMuJGVsZW1lbnQpLmVhY2goKGksIGVsZW0pID0+IHtcbiAgICAgIHZhciBoZWlnaHQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgIGlmIChoZWlnaHQgPiBiaWdnZXN0KSBiaWdnZXN0ID0gaGVpZ2h0O1xuICAgIH0pO1xuXG4gICAgcmVzdWx0WydtaW4taGVpZ2h0J10gPSBgJHtiaWdnZXN0fXB4YDtcbiAgICByZXN1bHRbJ21heC13aWR0aCddID0gYCR7dGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aH1weGA7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBEcmlsbGRvd24gTWVudVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5faGlkZUFsbCgpO1xuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdkcmlsbGRvd24nKTtcbiAgICB0aGlzLiRlbGVtZW50LnVud3JhcCgpXG4gICAgICAgICAgICAgICAgIC5maW5kKCcuanMtZHJpbGxkb3duLWJhY2ssIC5pcy1zdWJtZW51LXBhcmVudC1pdGVtJykucmVtb3ZlKClcbiAgICAgICAgICAgICAgICAgLmVuZCgpLmZpbmQoJy5pcy1hY3RpdmUsIC5pcy1jbG9zaW5nLCAuaXMtZHJpbGxkb3duLXN1Ym1lbnUnKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWNsb3NpbmcgaXMtZHJpbGxkb3duLXN1Ym1lbnUnKVxuICAgICAgICAgICAgICAgICAuZW5kKCkuZmluZCgnW2RhdGEtc3VibWVudV0nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCByb2xlJyk7XG4gICAgdGhpcy4kc3VibWVudUFuY2hvcnMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICQodGhpcykub2ZmKCcuemYuZHJpbGxkb3duJyk7XG4gICAgfSk7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdhJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyICRsaW5rID0gJCh0aGlzKTtcbiAgICAgICRsaW5rLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICBpZigkbGluay5kYXRhKCdzYXZlZEhyZWYnKSl7XG4gICAgICAgICRsaW5rLmF0dHIoJ2hyZWYnLCAkbGluay5kYXRhKCdzYXZlZEhyZWYnKSkucmVtb3ZlRGF0YSgnc2F2ZWRIcmVmJyk7XG4gICAgICB9ZWxzZXsgcmV0dXJuOyB9XG4gICAgfSk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9O1xufVxuXG5EcmlsbGRvd24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBNYXJrdXAgdXNlZCBmb3IgSlMgZ2VuZXJhdGVkIGJhY2sgYnV0dG9uLiBQcmVwZW5kZWQgdG8gc3VibWVudSBsaXN0cyBhbmQgZGVsZXRlZCBvbiBgZGVzdHJveWAgbWV0aG9kLCAnanMtZHJpbGxkb3duLWJhY2snIGNsYXNzIHJlcXVpcmVkLiBSZW1vdmUgdGhlIGJhY2tzbGFzaCAoYFxcYCkgaWYgY29weSBhbmQgcGFzdGluZy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnPFxcbGk+PFxcYT5CYWNrPFxcL2E+PFxcL2xpPidcbiAgICovXG4gIGJhY2tCdXR0b246ICc8bGkgY2xhc3M9XCJqcy1kcmlsbGRvd24tYmFja1wiPjxhIHRhYmluZGV4PVwiMFwiPkJhY2s8L2E+PC9saT4nLFxuICAvKipcbiAgICogTWFya3VwIHVzZWQgdG8gd3JhcCBkcmlsbGRvd24gbWVudS4gVXNlIGEgY2xhc3MgbmFtZSBmb3IgaW5kZXBlbmRlbnQgc3R5bGluZzsgdGhlIEpTIGFwcGxpZWQgY2xhc3M6IGBpcy1kcmlsbGRvd25gIGlzIHJlcXVpcmVkLiBSZW1vdmUgdGhlIGJhY2tzbGFzaCAoYFxcYCkgaWYgY29weSBhbmQgcGFzdGluZy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnPFxcZGl2IGNsYXNzPVwiaXMtZHJpbGxkb3duXCI+PFxcL2Rpdj4nXG4gICAqL1xuICB3cmFwcGVyOiAnPGRpdj48L2Rpdj4nLFxuICAvKipcbiAgICogQWRkcyB0aGUgcGFyZW50IGxpbmsgdG8gdGhlIHN1Ym1lbnUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIHBhcmVudExpbms6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gcmV0dXJuIHRvIHJvb3QgbGlzdCBvbiBib2R5IGNsaWNrLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IGZhbHNlXG4gIC8vIGhvbGRPcGVuOiBmYWxzZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKERyaWxsZG93biwgJ0RyaWxsZG93bicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRHJvcGRvd24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyb3Bkb3duXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbmNsYXNzIERyb3Bkb3duIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBkcm9wZG93bi5cbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93bi5cbiAgICogICAgICAgIE9iamVjdCBzaG91bGQgYmUgb2YgdGhlIGRyb3Bkb3duIHBhbmVsLCByYXRoZXIgdGhhbiBpdHMgYW5jaG9yLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIERyb3Bkb3duLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRHJvcGRvd24nKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdEcm9wZG93bicsIHtcbiAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICdFU0NBUEUnOiAnY2xvc2UnLFxuICAgICAgJ1RBQic6ICd0YWJfZm9yd2FyZCcsXG4gICAgICAnU0hJRlRfVEFCJzogJ3RhYl9iYWNrd2FyZCdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luIGJ5IHNldHRpbmcvY2hlY2tpbmcgb3B0aW9ucyBhbmQgYXR0cmlidXRlcywgYWRkaW5nIGhlbHBlciB2YXJpYWJsZXMsIGFuZCBzYXZpbmcgdGhlIGFuY2hvci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgJGlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpO1xuXG4gICAgdGhpcy4kYW5jaG9yID0gJChgW2RhdGEtdG9nZ2xlPVwiJHskaWR9XCJdYCkubGVuZ3RoID8gJChgW2RhdGEtdG9nZ2xlPVwiJHskaWR9XCJdYCkgOiAkKGBbZGF0YS1vcGVuPVwiJHskaWR9XCJdYCk7XG4gICAgdGhpcy4kYW5jaG9yLmF0dHIoe1xuICAgICAgJ2FyaWEtY29udHJvbHMnOiAkaWQsXG4gICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgJ2RhdGEteWV0aS1ib3gnOiAkaWQsXG4gICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlXG5cbiAgICB9KTtcblxuICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzID0gdGhpcy5nZXRQb3NpdGlvbkNsYXNzKCk7XG4gICAgdGhpcy5jb3VudGVyID0gNDtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMgPSBbXTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgJ2RhdGEteWV0aS1ib3gnOiAkaWQsXG4gICAgICAnZGF0YS1yZXNpemUnOiAkaWQsXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogdGhpcy4kYW5jaG9yWzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2RkLWFuY2hvcicpXG4gICAgfSk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSBjdXJyZW50IG9yaWVudGF0aW9uIG9mIGRyb3Bkb3duIHBhbmUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBwb3NpdGlvbiAtIHN0cmluZyB2YWx1ZSBvZiBhIHBvc2l0aW9uIGNsYXNzLlxuICAgKi9cbiAgZ2V0UG9zaXRpb25DbGFzcygpIHtcbiAgICB2YXIgdmVydGljYWxQb3NpdGlvbiA9IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8odG9wfGxlZnR8cmlnaHR8Ym90dG9tKS9nKTtcbiAgICAgICAgdmVydGljYWxQb3NpdGlvbiA9IHZlcnRpY2FsUG9zaXRpb24gPyB2ZXJ0aWNhbFBvc2l0aW9uWzBdIDogJyc7XG4gICAgdmFyIGhvcml6b250YWxQb3NpdGlvbiA9IC9mbG9hdC0oXFxTKykvLmV4ZWModGhpcy4kYW5jaG9yWzBdLmNsYXNzTmFtZSk7XG4gICAgICAgIGhvcml6b250YWxQb3NpdGlvbiA9IGhvcml6b250YWxQb3NpdGlvbiA/IGhvcml6b250YWxQb3NpdGlvblsxXSA6ICcnO1xuICAgIHZhciBwb3NpdGlvbiA9IGhvcml6b250YWxQb3NpdGlvbiA/IGhvcml6b250YWxQb3NpdGlvbiArICcgJyArIHZlcnRpY2FsUG9zaXRpb24gOiB2ZXJ0aWNhbFBvc2l0aW9uO1xuXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkanVzdHMgdGhlIGRyb3Bkb3duIHBhbmVzIG9yaWVudGF0aW9uIGJ5IGFkZGluZy9yZW1vdmluZyBwb3NpdGlvbmluZyBjbGFzc2VzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBvc2l0aW9uIC0gcG9zaXRpb24gY2xhc3MgdG8gcmVtb3ZlLlxuICAgKi9cbiAgX3JlcG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMucHVzaChwb3NpdGlvbiA/IHBvc2l0aW9uIDogJ2JvdHRvbScpO1xuICAgIC8vZGVmYXVsdCwgdHJ5IHN3aXRjaGluZyB0byBvcHBvc2l0ZSBzaWRlXG4gICAgaWYoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCd0b3AnKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbilcbiAgICAgICAgICAuYWRkQ2xhc3MoJ3JpZ2h0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICdyaWdodCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH1cblxuICAgIC8vaWYgZGVmYXVsdCBjaGFuZ2UgZGlkbid0IHdvcmssIHRyeSBib3R0b20gb3IgbGVmdCBmaXJzdFxuICAgIGVsc2UgaWYoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICd0b3AnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2JvdHRvbScpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIC8vaWYgbm90aGluZyBjbGVhcmVkLCBzZXQgdG8gYm90dG9tXG4gICAgZWxzZXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1cbiAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IHRydWU7XG4gICAgdGhpcy5jb3VudGVyLS07XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcG9zaXRpb24gYW5kIG9yaWVudGF0aW9uIG9mIHRoZSBkcm9wZG93biBwYW5lLCBjaGVja3MgZm9yIGNvbGxpc2lvbnMuXG4gICAqIFJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiBpZiBhIGNvbGxpc2lvbiBpcyBkZXRlY3RlZCwgd2l0aCBhIG5ldyBwb3NpdGlvbiBjbGFzcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0UG9zaXRpb24oKSB7XG4gICAgaWYodGhpcy4kYW5jaG9yLmF0dHIoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ2ZhbHNlJyl7IHJldHVybiBmYWxzZTsgfVxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb25DbGFzcygpLFxuICAgICAgICAkZWxlRGltcyA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy4kZWxlbWVudCksXG4gICAgICAgICRhbmNob3JEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRhbmNob3IpLFxuICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGRpcmVjdGlvbiA9IChwb3NpdGlvbiA9PT0gJ2xlZnQnID8gJ2xlZnQnIDogKChwb3NpdGlvbiA9PT0gJ3JpZ2h0JykgPyAnbGVmdCcgOiAndG9wJykpLFxuICAgICAgICBwYXJhbSA9IChkaXJlY3Rpb24gPT09ICd0b3AnKSA/ICdoZWlnaHQnIDogJ3dpZHRoJyxcbiAgICAgICAgb2Zmc2V0ID0gKHBhcmFtID09PSAnaGVpZ2h0JykgPyB0aGlzLm9wdGlvbnMudk9mZnNldCA6IHRoaXMub3B0aW9ucy5oT2Zmc2V0O1xuXG5cblxuICAgIGlmKCgkZWxlRGltcy53aWR0aCA+PSAkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoKSB8fCAoIXRoaXMuY291bnRlciAmJiAhRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLiRlbGVtZW50KSkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLiRlbGVtZW50LCB0aGlzLiRhbmNob3IsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0LCB0cnVlKSkuY3NzKHtcbiAgICAgICAgJ3dpZHRoJzogJGVsZURpbXMud2luZG93RGltcy53aWR0aCAtICh0aGlzLm9wdGlvbnMuaE9mZnNldCAqIDIpLFxuICAgICAgICAnaGVpZ2h0JzogJ2F1dG8nXG4gICAgICB9KTtcbiAgICAgIHRoaXMuY2xhc3NDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJGFuY2hvciwgcG9zaXRpb24sIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCkpO1xuXG4gICAgd2hpbGUoIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy4kZWxlbWVudCwgZmFsc2UsIHRydWUpICYmIHRoaXMuY291bnRlcil7XG4gICAgICB0aGlzLl9yZXBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBlbGVtZW50IHV0aWxpemluZyB0aGUgdHJpZ2dlcnMgdXRpbGl0eSBsaWJyYXJ5LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fc2V0UG9zaXRpb24uYmluZCh0aGlzKVxuICAgIH0pO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmhvdmVyKXtcbiAgICAgIHRoaXMuJGFuY2hvci5vZmYoJ21vdXNlZW50ZXIuemYuZHJvcGRvd24gbW91c2VsZWF2ZS56Zi5kcm9wZG93bicpXG4gICAgICAub24oJ21vdXNlZW50ZXIuemYuZHJvcGRvd24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoJCgnYm9keVtkYXRhLXdoYXRpbnB1dD1cIm1vdXNlXCJdJykuaXMoJyonKSkge1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZGF0YSgnaG92ZXInLCB0cnVlKTtcbiAgICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmRhdGEoJ2hvdmVyJywgZmFsc2UpO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICB9KTtcbiAgICAgIGlmKHRoaXMub3B0aW9ucy5ob3ZlclBhbmUpe1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignbW91c2VlbnRlci56Zi5kcm9wZG93biBtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJylcbiAgICAgICAgICAgIC5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiRhbmNob3IuYWRkKHRoaXMuJGVsZW1lbnQpLm9uKCdrZXlkb3duLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oZSkge1xuXG4gICAgICB2YXIgJHRhcmdldCA9ICQodGhpcyksXG4gICAgICAgIHZpc2libGVGb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdEcm9wZG93bicsIHtcbiAgICAgICAgdGFiX2ZvcndhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyh2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpKSkgeyAvLyBsZWZ0IG1vZGFsIGRvd253YXJkcywgc2V0dGluZyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy50cmFwRm9jdXMpIHsgLy8gaWYgZm9jdXMgc2hhbGwgYmUgdHJhcHBlZFxuICAgICAgICAgICAgICB2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgZm9jdXMgaXMgbm90IHRyYXBwZWQsIGNsb3NlIGRyb3Bkb3duIG9uIGZvY3VzIG91dFxuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGFiX2JhY2t3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuJGVsZW1lbnQuZmluZCgnOmZvY3VzJykuaXModmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzLmVxKDApKSB8fCBfdGhpcy4kZWxlbWVudC5pcygnOmZvY3VzJykpIHsgLy8gbGVmdCBtb2RhbCB1cHdhcmRzLCBzZXR0aW5nIGZvY3VzIHRvIGxhc3QgZWxlbWVudFxuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMudHJhcEZvY3VzKSB7IC8vIGlmIGZvY3VzIHNoYWxsIGJlIHRyYXBwZWRcbiAgICAgICAgICAgICAgdmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzLmVxKC0xKS5mb2N1cygpO1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiBmb2N1cyBpcyBub3QgdHJhcHBlZCwgY2xvc2UgZHJvcGRvd24gb24gZm9jdXMgb3V0XG4gICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5pcyhfdGhpcy4kYW5jaG9yKSkge1xuICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAtMSkuZm9jdXMoKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBib2R5IHRvIGNsb3NlIGFueSBkcm9wZG93bnMgb24gYSBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQm9keUhhbmRsZXIoKSB7XG4gICAgIHZhciAkYm9keSA9ICQoZG9jdW1lbnQuYm9keSkubm90KHRoaXMuJGVsZW1lbnQpLFxuICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAkYm9keS5vZmYoJ2NsaWNrLnpmLmRyb3Bkb3duJylcbiAgICAgICAgICAub24oJ2NsaWNrLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBpZihfdGhpcy4kYW5jaG9yLmlzKGUudGFyZ2V0KSB8fCBfdGhpcy4kYW5jaG9yLmZpbmQoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5maW5kKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICRib2R5Lm9mZignY2xpY2suemYuZHJvcGRvd24nKTtcbiAgICAgICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgZHJvcGRvd24gcGFuZSwgYW5kIGZpcmVzIGEgYnViYmxpbmcgZXZlbnQgdG8gY2xvc2Ugb3RoZXIgZHJvcGRvd25zLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyb3Bkb3duI2Nsb3NlbWVcbiAgICogQGZpcmVzIERyb3Bkb3duI3Nob3dcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgLy8gdmFyIF90aGlzID0gdGhpcztcbiAgICAvKipcbiAgICAgKiBGaXJlcyB0byBjbG9zZSBvdGhlciBvcGVuIGRyb3Bkb3duc1xuICAgICAqIEBldmVudCBEcm9wZG93biNjbG9zZW1lXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZW1lLnpmLmRyb3Bkb3duJywgdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICB0aGlzLiRhbmNob3IuYWRkQ2xhc3MoJ2hvdmVyJylcbiAgICAgICAgLmF0dHIoeydhcmlhLWV4cGFuZGVkJzogdHJ1ZX0pO1xuICAgIC8vIHRoaXMuJGVsZW1lbnQvKi5zaG93KCkqLztcbiAgICB0aGlzLl9zZXRQb3NpdGlvbigpO1xuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLW9wZW4nKVxuICAgICAgICAuYXR0cih7J2FyaWEtaGlkZGVuJzogZmFsc2V9KTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5hdXRvRm9jdXMpe1xuICAgICAgdmFyICRmb2N1c2FibGUgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCk7XG4gICAgICBpZigkZm9jdXNhYmxlLmxlbmd0aCl7XG4gICAgICAgICRmb2N1c2FibGUuZXEoMCkuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKXsgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTsgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgb25jZSB0aGUgZHJvcGRvd24gaXMgdmlzaWJsZS5cbiAgICAgKiBAZXZlbnQgRHJvcGRvd24jc2hvd1xuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi5kcm9wZG93bicsIFt0aGlzLiRlbGVtZW50XSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvcGVuIGRyb3Bkb3duIHBhbmUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJvcGRvd24jaGlkZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKVxuICAgICAgICAuYXR0cih7J2FyaWEtaGlkZGVuJzogdHJ1ZX0pO1xuXG4gICAgdGhpcy4kYW5jaG9yLnJlbW92ZUNsYXNzKCdob3ZlcicpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXG4gICAgaWYodGhpcy5jbGFzc0NoYW5nZWQpe1xuICAgICAgdmFyIGN1clBvc2l0aW9uQ2xhc3MgPSB0aGlzLmdldFBvc2l0aW9uQ2xhc3MoKTtcbiAgICAgIGlmKGN1clBvc2l0aW9uQ2xhc3Mpe1xuICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGN1clBvc2l0aW9uQ2xhc3MpO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcylcbiAgICAgICAgICAvKi5oaWRlKCkqLy5jc3Moe2hlaWdodDogJycsIHdpZHRoOiAnJ30pO1xuICAgICAgdGhpcy5jbGFzc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY291bnRlciA9IDQ7XG4gICAgICB0aGlzLnVzZWRQb3NpdGlvbnMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLmRyb3Bkb3duJywgW3RoaXMuJGVsZW1lbnRdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBkcm9wZG93biBwYW5lJ3MgdmlzaWJpbGl0eS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKXtcbiAgICAgIGlmKHRoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicpKSByZXR1cm47XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGRyb3Bkb3duLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyJykuaGlkZSgpO1xuICAgIHRoaXMuJGFuY2hvci5vZmYoJy56Zi5kcm9wZG93bicpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbkRyb3Bkb3duLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgb3BlbmluZyBhIHN1Ym1lbnUgb24gaG92ZXIgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjUwXG4gICAqL1xuICBob3ZlckRlbGF5OiAyNTAsXG4gIC8qKlxuICAgKiBBbGxvdyBzdWJtZW51cyB0byBvcGVuIG9uIGhvdmVyIGV2ZW50c1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBob3ZlcjogZmFsc2UsXG4gIC8qKlxuICAgKiBEb24ndCBjbG9zZSBkcm9wZG93biB3aGVuIGhvdmVyaW5nIG92ZXIgZHJvcGRvd24gcGFuZVxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGhvdmVyUGFuZTogZmFsc2UsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIGJldHdlZW4gdGhlIGRyb3Bkb3duIHBhbmUgYW5kIHRoZSB0cmlnZ2VyaW5nIGVsZW1lbnQgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxXG4gICAqL1xuICB2T2Zmc2V0OiAxLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyBiZXR3ZWVuIHRoZSBkcm9wZG93biBwYW5lIGFuZCB0aGUgdHJpZ2dlcmluZyBlbGVtZW50IG9uIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgaE9mZnNldDogMSxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gYWRqdXN0IG9wZW4gcG9zaXRpb24uIEpTIHdpbGwgdGVzdCBhbmQgZmlsbCB0aGlzIGluLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b3AnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gdHJhcCBmb2N1cyB0byB0aGUgZHJvcGRvd24gcGFuZSBpZiBvcGVuZWQgd2l0aCBrZXlib2FyZCBjb21tYW5kcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgdHJhcEZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gc2V0IGZvY3VzIHRvIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCB3aXRoaW4gdGhlIHBhbmUsIHJlZ2FyZGxlc3Mgb2YgbWV0aG9kIG9mIG9wZW5pbmcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyBhIGNsaWNrIG9uIHRoZSBib2R5IHRvIGNsb3NlIHRoZSBkcm9wZG93bi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiBmYWxzZVxufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRHJvcGRvd24sICdEcm9wZG93bicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRHJvcGRvd25NZW51IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcm9wZG93bi1tZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gKi9cblxuY2xhc3MgRHJvcGRvd25NZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgRHJvcGRvd25NZW51LlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIERyb3Bkb3duTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93biBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIERyb3Bkb3duTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2Ryb3Bkb3duJyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRHJvcGRvd25NZW51Jyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignRHJvcGRvd25NZW51Jywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZSdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luLCBhbmQgY2FsbHMgX3ByZXBhcmVNZW51XG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHN1YnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50JykuY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51JykuYWRkQ2xhc3MoJ2ZpcnN0LXN1YicpO1xuXG4gICAgdGhpcy4kbWVudUl0ZW1zID0gdGhpcy4kZWxlbWVudC5maW5kKCdbcm9sZT1cIm1lbnVpdGVtXCJdJyk7XG4gICAgdGhpcy4kdGFicyA9IHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oJ1tyb2xlPVwibWVudWl0ZW1cIl0nKTtcbiAgICB0aGlzLiR0YWJzLmZpbmQoJ3VsLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudmVydGljYWxDbGFzcyk7XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMucmlnaHRDbGFzcykgfHwgdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ3JpZ2h0JyB8fCBGb3VuZGF0aW9uLnJ0bCgpIHx8IHRoaXMuJGVsZW1lbnQucGFyZW50cygnLnRvcC1iYXItcmlnaHQnKS5pcygnKicpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID0gJ3JpZ2h0JztcbiAgICAgIHN1YnMuYWRkQ2xhc3MoJ29wZW5zLWxlZnQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtcmlnaHQnKTtcbiAgICB9XG4gICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH07XG5cbiAgX2lzVmVydGljYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHRhYnMuY3NzKCdkaXNwbGF5JykgPT09ICdibG9jayc7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gZWxlbWVudHMgd2l0aGluIHRoZSBtZW51XG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBoYXNUb3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCAodHlwZW9mIHdpbmRvdy5vbnRvdWNoc3RhcnQgIT09ICd1bmRlZmluZWQnKSxcbiAgICAgICAgcGFyQ2xhc3MgPSAnaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnO1xuXG4gICAgLy8gdXNlZCBmb3Igb25DbGljayBhbmQgaW4gdGhlIGtleWJvYXJkIGhhbmRsZXJzXG4gICAgdmFyIGhhbmRsZUNsaWNrRm4gPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgJGVsZW0gPSAkKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgYC4ke3BhckNsYXNzfWApLFxuICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKSxcbiAgICAgICAgICBoYXNDbGlja2VkID0gJGVsZW0uYXR0cignZGF0YS1pcy1jbGljaycpID09PSAndHJ1ZScsXG4gICAgICAgICAgJHN1YiA9ICRlbGVtLmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudScpO1xuXG4gICAgICBpZiAoaGFzU3ViKSB7XG4gICAgICAgIGlmIChoYXNDbGlja2VkKSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmNsb3NlT25DbGljayB8fCAoIV90aGlzLm9wdGlvbnMuY2xpY2tPcGVuICYmICFoYXNUb3VjaCkgfHwgKF90aGlzLm9wdGlvbnMuZm9yY2VGb2xsb3cgJiYgaGFzVG91Y2gpKSB7IHJldHVybjsgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgX3RoaXMuX3Nob3coJHN1Yik7XG4gICAgICAgICAgJGVsZW0uYWRkKCRlbGVtLnBhcmVudHNVbnRpbChfdGhpcy4kZWxlbWVudCwgYC4ke3BhckNsYXNzfWApKS5hdHRyKCdkYXRhLWlzLWNsaWNrJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKF90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrSW5zaWRlKXtcbiAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3BlbiB8fCBoYXNUb3VjaCkge1xuICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdjbGljay56Zi5kcm9wZG93bm1lbnUgdG91Y2hzdGFydC56Zi5kcm9wZG93bm1lbnUnLCBoYW5kbGVDbGlja0ZuKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIpIHtcbiAgICAgIHRoaXMuJG1lbnVJdGVtcy5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciAkZWxlbSA9ICQodGhpcyksXG4gICAgICAgICAgICBoYXNTdWIgPSAkZWxlbS5oYXNDbGFzcyhwYXJDbGFzcyk7XG5cbiAgICAgICAgaWYgKGhhc1N1Yikge1xuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5kZWxheSk7XG4gICAgICAgICAgX3RoaXMuZGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW0uY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51JykpO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKTtcbiAgICAgICAgaWYgKGhhc1N1YiAmJiBfdGhpcy5vcHRpb25zLmF1dG9jbG9zZSkge1xuICAgICAgICAgIGlmICgkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyAmJiBfdGhpcy5vcHRpb25zLmNsaWNrT3BlbikgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5kZWxheSk7XG4gICAgICAgICAgX3RoaXMuZGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuY2xvc2luZ1RpbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdrZXlkb3duLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkZWxlbWVudCA9ICQoZS50YXJnZXQpLnBhcmVudHNVbnRpbCgndWwnLCAnW3JvbGU9XCJtZW51aXRlbVwiXScpLFxuICAgICAgICAgIGlzVGFiID0gX3RoaXMuJHRhYnMuaW5kZXgoJGVsZW1lbnQpID4gLTEsXG4gICAgICAgICAgJGVsZW1lbnRzID0gaXNUYWIgPyBfdGhpcy4kdGFicyA6ICRlbGVtZW50LnNpYmxpbmdzKCdsaScpLmFkZCgkZWxlbWVudCksXG4gICAgICAgICAgJHByZXZFbGVtZW50LFxuICAgICAgICAgICRuZXh0RWxlbWVudDtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoaS0xKTtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoaSsxKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbmV4dFNpYmxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCEkZWxlbWVudC5pcygnOmxhc3QtY2hpbGQnKSkge1xuICAgICAgICAgICRuZXh0RWxlbWVudC5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9LCBwcmV2U2libGluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkcHJldkVsZW1lbnQuY2hpbGRyZW4oJ2E6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBvcGVuU3ViID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciAkc3ViID0gJGVsZW1lbnQuY2hpbGRyZW4oJ3VsLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKTtcbiAgICAgICAgaWYgKCRzdWIubGVuZ3RoKSB7XG4gICAgICAgICAgX3RoaXMuX3Nob3coJHN1Yik7XG4gICAgICAgICAgJGVsZW1lbnQuZmluZCgnbGkgPiBhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSB7IHJldHVybjsgfVxuICAgICAgfSwgY2xvc2VTdWIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9pZiAoJGVsZW1lbnQuaXMoJzpmaXJzdC1jaGlsZCcpKSB7XG4gICAgICAgIHZhciBjbG9zZSA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJyk7XG4gICAgICAgIGNsb3NlLmNoaWxkcmVuKCdhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgX3RoaXMuX2hpZGUoY2xvc2UpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vfVxuICAgICAgfTtcbiAgICAgIHZhciBmdW5jdGlvbnMgPSB7XG4gICAgICAgIG9wZW46IG9wZW5TdWIsXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5faGlkZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgX3RoaXMuJG1lbnVJdGVtcy5maW5kKCdhOmZpcnN0JykuZm9jdXMoKTsgLy8gZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKGlzVGFiKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNWZXJ0aWNhbCgpKSB7IC8vIHZlcnRpY2FsIG1lbnVcbiAgICAgICAgICBpZiAoRm91bmRhdGlvbi5ydGwoKSkgeyAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHVwOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgbmV4dDogY2xvc2VTdWIsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBvcGVuU3ViXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgeyAvLyBsZWZ0IGFsaWduZWRcbiAgICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBuZXh0OiBvcGVuU3ViLFxuICAgICAgICAgICAgICBwcmV2aW91czogY2xvc2VTdWJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gaG9yaXpvbnRhbCBtZW51XG4gICAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIHsgLy8gcmlnaHQgYWxpZ25lZFxuICAgICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIG5leHQ6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBwcmV2aW91czogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIGRvd246IG9wZW5TdWIsXG4gICAgICAgICAgICAgIHVwOiBjbG9zZVN1YlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gbGVmdCBhbGlnbmVkXG4gICAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgbmV4dDogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgZG93bjogb3BlblN1YixcbiAgICAgICAgICAgICAgdXA6IGNsb3NlU3ViXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7IC8vIG5vdCB0YWJzIC0+IG9uZSBzdWJcbiAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIHsgLy8gcmlnaHQgYWxpZ25lZFxuICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgbmV4dDogY2xvc2VTdWIsXG4gICAgICAgICAgICBwcmV2aW91czogb3BlblN1YixcbiAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7IC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgbmV4dDogb3BlblN1YixcbiAgICAgICAgICAgIHByZXZpb3VzOiBjbG9zZVN1YixcbiAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdEcm9wZG93bk1lbnUnLCBmdW5jdGlvbnMpO1xuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBib2R5IHRvIGNsb3NlIGFueSBkcm9wZG93bnMgb24gYSBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQm9keUhhbmRsZXIoKSB7XG4gICAgdmFyICRib2R5ID0gJChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICRib2R5Lm9mZignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51JylcbiAgICAgICAgIC5vbignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICB2YXIgJGxpbmsgPSBfdGhpcy4kZWxlbWVudC5maW5kKGUudGFyZ2V0KTtcbiAgICAgICAgICAgaWYgKCRsaW5rLmxlbmd0aCkgeyByZXR1cm47IH1cblxuICAgICAgICAgICBfdGhpcy5faGlkZSgpO1xuICAgICAgICAgICAkYm9keS5vZmYoJ21vdXNldXAuemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudScpO1xuICAgICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgYSBkcm9wZG93biBwYW5lLCBhbmQgY2hlY2tzIGZvciBjb2xsaXNpb25zIGZpcnN0LlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHN1YiAtIHVsIGVsZW1lbnQgdGhhdCBpcyBhIHN1Ym1lbnUgdG8gc2hvd1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQGZpcmVzIERyb3Bkb3duTWVudSNzaG93XG4gICAqL1xuICBfc2hvdygkc3ViKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMuJHRhYnMuaW5kZXgodGhpcy4kdGFicy5maWx0ZXIoZnVuY3Rpb24oaSwgZWwpIHtcbiAgICAgIHJldHVybiAkKGVsKS5maW5kKCRzdWIpLmxlbmd0aCA+IDA7XG4gICAgfSkpO1xuICAgIHZhciAkc2licyA9ICRzdWIucGFyZW50KCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLnNpYmxpbmdzKCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpO1xuICAgIHRoaXMuX2hpZGUoJHNpYnMsIGlkeCk7XG4gICAgJHN1Yi5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJykuYWRkQ2xhc3MoJ2pzLWRyb3Bkb3duLWFjdGl2ZScpLmF0dHIoeydhcmlhLWhpZGRlbic6IGZhbHNlfSlcbiAgICAgICAgLnBhcmVudCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5hZGRDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgICAgLmF0dHIoeydhcmlhLWV4cGFuZGVkJzogdHJ1ZX0pO1xuICAgIHZhciBjbGVhciA9IEZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UoJHN1YiwgbnVsbCwgdHJ1ZSk7XG4gICAgaWYgKCFjbGVhcikge1xuICAgICAgdmFyIG9sZENsYXNzID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2xlZnQnID8gJy1yaWdodCcgOiAnLWxlZnQnLFxuICAgICAgICAgICRwYXJlbnRMaSA9ICRzdWIucGFyZW50KCcuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKTtcbiAgICAgICRwYXJlbnRMaS5yZW1vdmVDbGFzcyhgb3BlbnMke29sZENsYXNzfWApLmFkZENsYXNzKGBvcGVucy0ke3RoaXMub3B0aW9ucy5hbGlnbm1lbnR9YCk7XG4gICAgICBjbGVhciA9IEZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UoJHN1YiwgbnVsbCwgdHJ1ZSk7XG4gICAgICBpZiAoIWNsZWFyKSB7XG4gICAgICAgICRwYXJlbnRMaS5yZW1vdmVDbGFzcyhgb3BlbnMtJHt0aGlzLm9wdGlvbnMuYWxpZ25tZW50fWApLmFkZENsYXNzKCdvcGVucy1pbm5lcicpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgJHN1Yi5jc3MoJ3Zpc2liaWxpdHknLCAnJyk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHsgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTsgfVxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIG5ldyBkcm9wZG93biBwYW5lIGlzIHZpc2libGUuXG4gICAgICogQGV2ZW50IERyb3Bkb3duTWVudSNzaG93XG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzaG93LnpmLmRyb3Bkb3dubWVudScsIFskc3ViXSk7XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgYSBzaW5nbGUsIGN1cnJlbnRseSBvcGVuIGRyb3Bkb3duIHBhbmUsIGlmIHBhc3NlZCBhIHBhcmFtZXRlciwgb3RoZXJ3aXNlLCBoaWRlcyBldmVyeXRoaW5nLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBoaWRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZHggLSBpbmRleCBvZiB0aGUgJHRhYnMgY29sbGVjdGlvbiB0byBoaWRlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGlkZSgkZWxlbSwgaWR4KSB7XG4gICAgdmFyICR0b0Nsb3NlO1xuICAgIGlmICgkZWxlbSAmJiAkZWxlbS5sZW5ndGgpIHtcbiAgICAgICR0b0Nsb3NlID0gJGVsZW07XG4gICAgfSBlbHNlIGlmIChpZHggIT09IHVuZGVmaW5lZCkge1xuICAgICAgJHRvQ2xvc2UgPSB0aGlzLiR0YWJzLm5vdChmdW5jdGlvbihpLCBlbCkge1xuICAgICAgICByZXR1cm4gaSA9PT0gaWR4O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJHRvQ2xvc2UgPSB0aGlzLiRlbGVtZW50O1xuICAgIH1cbiAgICB2YXIgc29tZXRoaW5nVG9DbG9zZSA9ICR0b0Nsb3NlLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSB8fCAkdG9DbG9zZS5maW5kKCcuaXMtYWN0aXZlJykubGVuZ3RoID4gMDtcblxuICAgIGlmIChzb21ldGhpbmdUb0Nsb3NlKSB7XG4gICAgICAkdG9DbG9zZS5maW5kKCdsaS5pcy1hY3RpdmUnKS5hZGQoJHRvQ2xvc2UpLmF0dHIoe1xuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlLFxuICAgICAgICAnZGF0YS1pcy1jbGljayc6IGZhbHNlXG4gICAgICB9KS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAgICR0b0Nsb3NlLmZpbmQoJ3VsLmpzLWRyb3Bkb3duLWFjdGl2ZScpLmF0dHIoe1xuICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlXG4gICAgICB9KS5yZW1vdmVDbGFzcygnanMtZHJvcGRvd24tYWN0aXZlJyk7XG5cbiAgICAgIGlmICh0aGlzLmNoYW5nZWQgfHwgJHRvQ2xvc2UuZmluZCgnb3BlbnMtaW5uZXInKS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG9sZENsYXNzID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgJHRvQ2xvc2UuZmluZCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5hZGQoJHRvQ2xvc2UpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGBvcGVucy1pbm5lciBvcGVucy0ke3RoaXMub3B0aW9ucy5hbGlnbm1lbnR9YClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYG9wZW5zLSR7b2xkQ2xhc3N9YCk7XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBvcGVuIG1lbnVzIGFyZSBjbG9zZWQuXG4gICAgICAgKiBAZXZlbnQgRHJvcGRvd25NZW51I2hpZGVcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLmRyb3Bkb3dubWVudScsIFskdG9DbG9zZV0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kbWVudUl0ZW1zLm9mZignLnpmLmRyb3Bkb3dubWVudScpLnJlbW92ZUF0dHIoJ2RhdGEtaXMtY2xpY2snKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2lzLXJpZ2h0LWFycm93IGlzLWxlZnQtYXJyb3cgaXMtZG93bi1hcnJvdyBvcGVucy1yaWdodCBvcGVucy1sZWZ0IG9wZW5zLWlubmVyJyk7XG4gICAgJChkb2N1bWVudC5ib2R5KS5vZmYoJy56Zi5kcm9wZG93bm1lbnUnKTtcbiAgICBGb3VuZGF0aW9uLk5lc3QuQnVybih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuRHJvcGRvd25NZW51LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRGlzYWxsb3dzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgc3VibWVudXNcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IGEgc3VibWVudSB0byBhdXRvbWF0aWNhbGx5IGNsb3NlIG9uIGEgbW91c2VsZWF2ZSBldmVudCwgaWYgbm90IGNsaWNrZWQgb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBhdXRvY2xvc2U6IHRydWUsXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBkZWxheSBvcGVuaW5nIGEgc3VibWVudSBvbiBob3ZlciBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSA1MFxuICAgKi9cbiAgaG92ZXJEZWxheTogNTAsXG4gIC8qKlxuICAgKiBBbGxvdyBhIHN1Ym1lbnUgdG8gb3Blbi9yZW1haW4gb3BlbiBvbiBwYXJlbnQgY2xpY2sgZXZlbnQuIEFsbG93cyBjdXJzb3IgdG8gbW92ZSBhd2F5IGZyb20gbWVudS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbGlja09wZW46IGZhbHNlLFxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgY2xvc2luZyBhIHN1Ym1lbnUgb24gYSBtb3VzZWxlYXZlIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwMFxuICAgKi9cblxuICBjbG9zaW5nVGltZTogNTAwLFxuICAvKipcbiAgICogUG9zaXRpb24gb2YgdGhlIG1lbnUgcmVsYXRpdmUgdG8gd2hhdCBkaXJlY3Rpb24gdGhlIHN1Ym1lbnVzIHNob3VsZCBvcGVuLiBIYW5kbGVkIGJ5IEpTLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdsZWZ0J1xuICAgKi9cbiAgYWxpZ25tZW50OiAnbGVmdCcsXG4gIC8qKlxuICAgKiBBbGxvdyBjbGlja3Mgb24gdGhlIGJvZHkgdG8gY2xvc2UgYW55IG9wZW4gc3VibWVudXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuICAvKipcbiAgICogQWxsb3cgY2xpY2tzIG9uIGxlYWYgYW5jaG9yIGxpbmtzIHRvIGNsb3NlIGFueSBvcGVuIHN1Ym1lbnVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsb3NlT25DbGlja0luc2lkZTogdHJ1ZSxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdmVydGljYWwgb3JpZW50ZWQgbWVudXMsIEZvdW5kYXRpb24gZGVmYXVsdCBpcyBgdmVydGljYWxgLiBVcGRhdGUgdGhpcyBpZiB1c2luZyB5b3VyIG93biBjbGFzcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndmVydGljYWwnXG4gICAqL1xuICB2ZXJ0aWNhbENsYXNzOiAndmVydGljYWwnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byByaWdodC1zaWRlIG9yaWVudGVkIG1lbnVzLCBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgYGFsaWduLXJpZ2h0YC4gVXBkYXRlIHRoaXMgaWYgdXNpbmcgeW91ciBvd24gY2xhc3MuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2FsaWduLXJpZ2h0J1xuICAgKi9cbiAgcmlnaHRDbGFzczogJ2FsaWduLXJpZ2h0JyxcbiAgLyoqXG4gICAqIEJvb2xlYW4gdG8gZm9yY2Ugb3ZlcmlkZSB0aGUgY2xpY2tpbmcgb2YgbGlua3MgdG8gcGVyZm9ybSBkZWZhdWx0IGFjdGlvbiwgb24gc2Vjb25kIHRvdWNoIGV2ZW50IGZvciBtb2JpbGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGZvcmNlRm9sbG93OiB0cnVlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRHJvcGRvd25NZW51LCAnRHJvcGRvd25NZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBFcXVhbGl6ZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmVxdWFsaXplclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRpbWVyQW5kSW1hZ2VMb2FkZXIgaWYgZXF1YWxpemVyIGNvbnRhaW5zIGltYWdlc1xuICovXG5cbmNsYXNzIEVxdWFsaXplciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEVxdWFsaXplci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKXtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgID0gJC5leHRlbmQoe30sIEVxdWFsaXplci5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRXF1YWxpemVyJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEVxdWFsaXplciBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgZXF1YWxpemVyIGZ1bmN0aW9uaW5nIG9uIGxvYWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgZXFJZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1lcXVhbGl6ZXInKSB8fCAnJztcbiAgICB2YXIgJHdhdGNoZWQgPSB0aGlzLiRlbGVtZW50LmZpbmQoYFtkYXRhLWVxdWFsaXplci13YXRjaD1cIiR7ZXFJZH1cIl1gKTtcblxuICAgIHRoaXMuJHdhdGNoZWQgPSAkd2F0Y2hlZC5sZW5ndGggPyAkd2F0Y2hlZCA6IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyLXdhdGNoXScpO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1yZXNpemUnLCAoZXFJZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdlcScpKSk7XG5cbiAgICB0aGlzLmhhc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyXScpLmxlbmd0aCA+IDA7XG4gICAgdGhpcy5pc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQucGFyZW50c1VudGlsKGRvY3VtZW50LmJvZHksICdbZGF0YS1lcXVhbGl6ZXJdJykubGVuZ3RoID4gMDtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICB0aGlzLl9iaW5kSGFuZGxlciA9IHtcbiAgICAgIG9uUmVzaXplTWVCb3VuZDogdGhpcy5fb25SZXNpemVNZS5iaW5kKHRoaXMpLFxuICAgICAgb25Qb3N0RXF1YWxpemVkQm91bmQ6IHRoaXMuX29uUG9zdEVxdWFsaXplZC5iaW5kKHRoaXMpXG4gICAgfTtcblxuICAgIHZhciBpbWdzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKTtcbiAgICB2YXIgdG9vU21hbGw7XG4gICAgaWYodGhpcy5vcHRpb25zLmVxdWFsaXplT24pe1xuICAgICAgdG9vU21hbGwgPSB0aGlzLl9jaGVja01RKCk7XG4gICAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX2NoZWNrTVEuYmluZCh0aGlzKSk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG4gICAgaWYoKHRvb1NtYWxsICE9PSB1bmRlZmluZWQgJiYgdG9vU21hbGwgPT09IGZhbHNlKSB8fCB0b29TbWFsbCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIGlmKGltZ3MubGVuZ3RoKXtcbiAgICAgICAgRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZChpbWdzLCB0aGlzLl9yZWZsb3cuYmluZCh0aGlzKSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5fcmVmbG93KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGlmIHRoZSBicmVha3BvaW50IGlzIHRvbyBzbWFsbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXVzZUV2ZW50cygpIHtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZih7XG4gICAgICAnLnpmLmVxdWFsaXplcic6IHRoaXMuX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kLFxuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmRcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBoYW5kbGUgJGVsZW1lbnRzIHJlc2l6ZW1lLnpmLnRyaWdnZXIsIHdpdGggYm91bmQgdGhpcyBvbiBfYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25SZXNpemVNZShlKSB7XG4gICAgdGhpcy5fcmVmbG93KCk7XG4gIH1cblxuICAvKipcbiAgICogZnVuY3Rpb24gdG8gaGFuZGxlICRlbGVtZW50cyBwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplciwgd2l0aCBib3VuZCB0aGlzIG9uIF9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUG9zdEVxdWFsaXplZChlKSB7XG4gICAgaWYoZS50YXJnZXQgIT09IHRoaXMuJGVsZW1lbnRbMF0peyB0aGlzLl9yZWZsb3coKTsgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgRXF1YWxpemVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgaWYodGhpcy5oYXNOZXN0ZWQpe1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInLCB0aGlzLl9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZCk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kKTtcbiAgICB9XG4gICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgYnJlYWtwb2ludCB0byB0aGUgbWluaW11bSByZXF1aXJlZCBzaXplLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrTVEoKSB7XG4gICAgdmFyIHRvb1NtYWxsID0gIUZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5lcXVhbGl6ZU9uKTtcbiAgICBpZih0b29TbWFsbCl7XG4gICAgICBpZih0aGlzLmlzT24pe1xuICAgICAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgICAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgIGlmKCF0aGlzLmlzT24pe1xuICAgICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvb1NtYWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgbm9vcCB2ZXJzaW9uIGZvciB0aGUgcGx1Z2luXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfa2lsbHN3aXRjaCgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgRXF1YWxpemVyIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICBpZighdGhpcy5vcHRpb25zLmVxdWFsaXplT25TdGFjayl7XG4gICAgICBpZih0aGlzLl9pc1N0YWNrZWQoKSl7XG4gICAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZXF1YWxpemVCeVJvdykge1xuICAgICAgdGhpcy5nZXRIZWlnaHRzQnlSb3codGhpcy5hcHBseUhlaWdodEJ5Um93LmJpbmQodGhpcykpO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5nZXRIZWlnaHRzKHRoaXMuYXBwbHlIZWlnaHQuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hbnVhbGx5IGRldGVybWluZXMgaWYgdGhlIGZpcnN0IDIgZWxlbWVudHMgYXJlICpOT1QqIHN0YWNrZWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaXNTdGFja2VkKCkge1xuICAgIHJldHVybiB0aGlzLiR3YXRjaGVkWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAhPT0gdGhpcy4kd2F0Y2hlZFsxXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgdGhlIG91dGVyIGhlaWdodHMgb2YgY2hpbGRyZW4gY29udGFpbmVkIHdpdGhpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IGFuZCByZXR1cm5zIHRoZW0gaW4gYW4gYXJyYXlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBBIG5vbi1vcHRpb25hbCBjYWxsYmFjayB0byByZXR1cm4gdGhlIGhlaWdodHMgYXJyYXkgdG8uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gaGVpZ2h0cyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXJcbiAgICovXG4gIGdldEhlaWdodHMoY2IpIHtcbiAgICB2YXIgaGVpZ2h0cyA9IFtdO1xuICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IHRoaXMuJHdhdGNoZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgICAgdGhpcy4kd2F0Y2hlZFtpXS5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICBoZWlnaHRzLnB1c2godGhpcy4kd2F0Y2hlZFtpXS5vZmZzZXRIZWlnaHQpO1xuICAgIH1cbiAgICBjYihoZWlnaHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgb3V0ZXIgaGVpZ2h0cyBvZiBjaGlsZHJlbiBjb250YWluZWQgd2l0aGluIGFuIEVxdWFsaXplciBwYXJlbnQgYW5kIHJldHVybnMgdGhlbSBpbiBhbiBhcnJheVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIEEgbm9uLW9wdGlvbmFsIGNhbGxiYWNrIHRvIHJldHVybiB0aGUgaGVpZ2h0cyBhcnJheSB0by5cbiAgICogQHJldHVybnMge0FycmF5fSBncm91cHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyIGdyb3VwZWQgYnkgcm93IHdpdGggZWxlbWVudCxoZWlnaHQgYW5kIG1heCBhcyBsYXN0IGNoaWxkXG4gICAqL1xuICBnZXRIZWlnaHRzQnlSb3coY2IpIHtcbiAgICB2YXIgbGFzdEVsVG9wT2Zmc2V0ID0gKHRoaXMuJHdhdGNoZWQubGVuZ3RoID8gdGhpcy4kd2F0Y2hlZC5maXJzdCgpLm9mZnNldCgpLnRvcCA6IDApLFxuICAgICAgICBncm91cHMgPSBbXSxcbiAgICAgICAgZ3JvdXAgPSAwO1xuICAgIC8vZ3JvdXAgYnkgUm93XG4gICAgZ3JvdXBzW2dyb3VwXSA9IFtdO1xuICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IHRoaXMuJHdhdGNoZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgICAgdGhpcy4kd2F0Y2hlZFtpXS5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICAvL21heWJlIGNvdWxkIHVzZSB0aGlzLiR3YXRjaGVkW2ldLm9mZnNldFRvcFxuICAgICAgdmFyIGVsT2Zmc2V0VG9wID0gJCh0aGlzLiR3YXRjaGVkW2ldKS5vZmZzZXQoKS50b3A7XG4gICAgICBpZiAoZWxPZmZzZXRUb3AhPWxhc3RFbFRvcE9mZnNldCkge1xuICAgICAgICBncm91cCsrO1xuICAgICAgICBncm91cHNbZ3JvdXBdID0gW107XG4gICAgICAgIGxhc3RFbFRvcE9mZnNldD1lbE9mZnNldFRvcDtcbiAgICAgIH1cbiAgICAgIGdyb3Vwc1tncm91cF0ucHVzaChbdGhpcy4kd2F0Y2hlZFtpXSx0aGlzLiR3YXRjaGVkW2ldLm9mZnNldEhlaWdodF0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGogPSAwLCBsbiA9IGdyb3Vwcy5sZW5ndGg7IGogPCBsbjsgaisrKSB7XG4gICAgICB2YXIgaGVpZ2h0cyA9ICQoZ3JvdXBzW2pdKS5tYXAoZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbMV07IH0pLmdldCgpO1xuICAgICAgdmFyIG1heCAgICAgICAgID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG4gICAgICBncm91cHNbal0ucHVzaChtYXgpO1xuICAgIH1cbiAgICBjYihncm91cHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIENTUyBoZWlnaHQgcHJvcGVydHkgb2YgZWFjaCBjaGlsZCBpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IHRvIG1hdGNoIHRoZSB0YWxsZXN0XG4gICAqIEBwYXJhbSB7YXJyYXl9IGhlaWdodHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgKi9cbiAgYXBwbHlIZWlnaHQoaGVpZ2h0cykge1xuICAgIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBiZWZvcmUgdGhlIGhlaWdodHMgYXJlIGFwcGxpZWRcbiAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3ByZWVxdWFsaXplZFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuXG4gICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsIG1heCk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICogQGV2ZW50IEVxdWFsaXplciNwb3N0ZXF1YWxpemVkXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBDU1MgaGVpZ2h0IHByb3BlcnR5IG9mIGVhY2ggY2hpbGQgaW4gYW4gRXF1YWxpemVyIHBhcmVudCB0byBtYXRjaCB0aGUgdGFsbGVzdCBieSByb3dcbiAgICogQHBhcmFtIHthcnJheX0gZ3JvdXBzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lciBncm91cGVkIGJ5IHJvdyB3aXRoIGVsZW1lbnQsaGVpZ2h0IGFuZCBtYXggYXMgbGFzdCBjaGlsZFxuICAgKiBAZmlyZXMgRXF1YWxpemVyI3ByZWVxdWFsaXplZFxuICAgKiBAZmlyZXMgRXF1YWxpemVyI3ByZWVxdWFsaXplZFJvd1xuICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRSb3dcbiAgICogQGZpcmVzIEVxdWFsaXplciNwb3N0ZXF1YWxpemVkXG4gICAqL1xuICBhcHBseUhlaWdodEJ5Um93KGdyb3Vwcykge1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBhcmUgYXBwbGllZFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBncm91cHMubGVuZ3RoOyBpIDwgbGVuIDsgaSsrKSB7XG4gICAgICB2YXIgZ3JvdXBzSUxlbmd0aCA9IGdyb3Vwc1tpXS5sZW5ndGgsXG4gICAgICAgICAgbWF4ID0gZ3JvdXBzW2ldW2dyb3Vwc0lMZW5ndGggLSAxXTtcbiAgICAgIGlmIChncm91cHNJTGVuZ3RoPD0yKSB7XG4gICAgICAgICQoZ3JvdXBzW2ldWzBdWzBdKS5jc3MoeydoZWlnaHQnOidhdXRvJ30pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBwZXIgcm93IGFyZSBhcHBsaWVkXG4gICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwcmVlcXVhbGl6ZWRSb3dcbiAgICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkcm93LnpmLmVxdWFsaXplcicpO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGxlbkogPSAoZ3JvdXBzSUxlbmd0aC0xKTsgaiA8IGxlbkogOyBqKyspIHtcbiAgICAgICAgJChncm91cHNbaV1bal1bMF0pLmNzcyh7J2hlaWdodCc6bWF4fSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIHBlciByb3cgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRSb3dcbiAgICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZHJvdy56Zi5lcXVhbGl6ZXInKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgaGVpZ2h0cyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAqL1xuICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgRXF1YWxpemVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcGF1c2VFdmVudHMoKTtcbiAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5FcXVhbGl6ZXIuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBFbmFibGUgaGVpZ2h0IGVxdWFsaXphdGlvbiB3aGVuIHN0YWNrZWQgb24gc21hbGxlciBzY3JlZW5zLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGVxdWFsaXplT25TdGFjazogZmFsc2UsXG4gIC8qKlxuICAgKiBFbmFibGUgaGVpZ2h0IGVxdWFsaXphdGlvbiByb3cgYnkgcm93LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBlcXVhbGl6ZUJ5Um93OiBmYWxzZSxcbiAgLyoqXG4gICAqIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIG1pbmltdW0gYnJlYWtwb2ludCBzaXplIHRoZSBwbHVnaW4gc2hvdWxkIGVxdWFsaXplIGhlaWdodHMgb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ21lZGl1bSdcbiAgICovXG4gIGVxdWFsaXplT246ICcnXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRXF1YWxpemVyLCAnRXF1YWxpemVyJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBJbnRlcmNoYW5nZSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uaW50ZXJjaGFuZ2VcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyXG4gKi9cblxuY2xhc3MgSW50ZXJjaGFuZ2Uge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBJbnRlcmNoYW5nZS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBJbnRlcmNoYW5nZSNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgSW50ZXJjaGFuZ2UuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIHRoaXMucnVsZXMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRQYXRoID0gJyc7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdJbnRlcmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBJbnRlcmNoYW5nZSBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgaW50ZXJjaGFuZ2UgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLl9hZGRCcmVha3BvaW50cygpO1xuICAgIHRoaXMuX2dlbmVyYXRlUnVsZXMoKTtcbiAgICB0aGlzLl9yZWZsb3coKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEludGVyY2hhbmdlLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuemYuaW50ZXJjaGFuZ2UnLCBGb3VuZGF0aW9uLnV0aWwudGhyb3R0bGUodGhpcy5fcmVmbG93LmJpbmQodGhpcyksIDUwKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgSW50ZXJjaGFuZ2UgdXBvbiBET00gY2hhbmdlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICB2YXIgbWF0Y2g7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlLCBidXQgb25seSBzYXZlIHRoZSBsYXN0IG1hdGNoXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICBpZih0aGlzLnJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlc1tpXTtcblxuICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocnVsZS5xdWVyeSkubWF0Y2hlcykge1xuICAgICAgICAgIG1hdGNoID0gcnVsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgdGhpcy5yZXBsYWNlKG1hdGNoLnBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBGb3VuZGF0aW9uIGJyZWFrcG9pbnRzIGFuZCBhZGRzIHRoZW0gdG8gdGhlIEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFUyBvYmplY3QuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZEJyZWFrcG9pbnRzKCkge1xuICAgIGZvciAodmFyIGkgaW4gRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LnF1ZXJpZXMpIHtcbiAgICAgIGlmIChGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICB2YXIgcXVlcnkgPSBGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllc1tpXTtcbiAgICAgICAgSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5Lm5hbWVdID0gcXVlcnkudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgSW50ZXJjaGFuZ2UgZWxlbWVudCBmb3IgdGhlIHByb3ZpZGVkIG1lZGlhIHF1ZXJ5ICsgY29udGVudCBwYWlyaW5nc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRoYXQgaXMgYW4gSW50ZXJjaGFuZ2UgaW5zdGFuY2VcbiAgICogQHJldHVybnMge0FycmF5fSBzY2VuYXJpb3MgLSBBcnJheSBvZiBvYmplY3RzIHRoYXQgaGF2ZSAnbXEnIGFuZCAncGF0aCcga2V5cyB3aXRoIGNvcnJlc3BvbmRpbmcga2V5c1xuICAgKi9cbiAgX2dlbmVyYXRlUnVsZXMoZWxlbWVudCkge1xuICAgIHZhciBydWxlc0xpc3QgPSBbXTtcbiAgICB2YXIgcnVsZXM7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnJ1bGVzKSB7XG4gICAgICBydWxlcyA9IHRoaXMub3B0aW9ucy5ydWxlcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnaW50ZXJjaGFuZ2UnKS5tYXRjaCgvXFxbLio/XFxdL2cpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgaW4gcnVsZXMpIHtcbiAgICAgIGlmKHJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gcnVsZXNbaV0uc2xpY2UoMSwgLTEpLnNwbGl0KCcsICcpO1xuICAgICAgICB2YXIgcGF0aCA9IHJ1bGUuc2xpY2UoMCwgLTEpLmpvaW4oJycpO1xuICAgICAgICB2YXIgcXVlcnkgPSBydWxlW3J1bGUubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV0pIHtcbiAgICAgICAgICBxdWVyeSA9IEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV07XG4gICAgICAgIH1cblxuICAgICAgICBydWxlc0xpc3QucHVzaCh7XG4gICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzTGlzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGBzcmNgIHByb3BlcnR5IG9mIGFuIGltYWdlLCBvciBjaGFuZ2UgdGhlIEhUTUwgb2YgYSBjb250YWluZXIsIHRvIHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIC0gUGF0aCB0byB0aGUgaW1hZ2Ugb3IgSFRNTCBwYXJ0aWFsLlxuICAgKiBAZmlyZXMgSW50ZXJjaGFuZ2UjcmVwbGFjZWRcbiAgICovXG4gIHJlcGxhY2UocGF0aCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRQYXRoID09PSBwYXRoKSByZXR1cm47XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICB0cmlnZ2VyID0gJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJztcblxuICAgIC8vIFJlcGxhY2luZyBpbWFnZXNcbiAgICBpZiAodGhpcy4kZWxlbWVudFswXS5ub2RlTmFtZSA9PT0gJ0lNRycpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignc3JjJywgcGF0aCkub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgfSlcbiAgICAgIC50cmlnZ2VyKHRyaWdnZXIpO1xuICAgIH1cbiAgICAvLyBSZXBsYWNpbmcgYmFja2dyb3VuZCBpbWFnZXNcbiAgICBlbHNlIGlmIChwYXRoLm1hdGNoKC9cXC4oZ2lmfGpwZ3xqcGVnfHBuZ3xzdmd8dGlmZikoWz8jXS4qKT8vaSkpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHsgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCcrcGF0aCsnKScgfSlcbiAgICAgICAgICAudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICB9XG4gICAgLy8gUmVwbGFjaW5nIEhUTUxcbiAgICBlbHNlIHtcbiAgICAgICQuZ2V0KHBhdGgsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIF90aGlzLiRlbGVtZW50Lmh0bWwocmVzcG9uc2UpXG4gICAgICAgICAgICAgLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgICAgICQocmVzcG9uc2UpLmZvdW5kYXRpb24oKTtcbiAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBjb250ZW50IGluIGFuIEludGVyY2hhbmdlIGVsZW1lbnQgaXMgZG9uZSBiZWluZyBsb2FkZWQuXG4gICAgICogQGV2ZW50IEludGVyY2hhbmdlI3JlcGxhY2VkXG4gICAgICovXG4gICAgLy8gdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdyZXBsYWNlZC56Zi5pbnRlcmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGludGVyY2hhbmdlLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgLy9UT0RPIHRoaXMuXG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuSW50ZXJjaGFuZ2UuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBSdWxlcyB0byBiZSBhcHBsaWVkIHRvIEludGVyY2hhbmdlIGVsZW1lbnRzLiBTZXQgd2l0aCB0aGUgYGRhdGEtaW50ZXJjaGFuZ2VgIGFycmF5IG5vdGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqL1xuICBydWxlczogbnVsbFxufTtcblxuSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTID0ge1xuICAnbGFuZHNjYXBlJzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgJ3BvcnRyYWl0JzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICAncmV0aW5hJzogJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDE5MmRwaSksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihJbnRlcmNoYW5nZSwgJ0ludGVyY2hhbmdlJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBNYWdlbGxhbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubWFnZWxsYW5cbiAqL1xuXG5jbGFzcyBNYWdlbGxhbiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIE1hZ2VsbGFuLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE1hZ2VsbGFuI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgTWFnZWxsYW4uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ01hZ2VsbGFuJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIE1hZ2VsbGFuIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBlcXVhbGl6ZXIgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnbWFnZWxsYW4nKTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuJHRhcmdldHMgPSAkKCdbZGF0YS1tYWdlbGxhbi10YXJnZXRdJyk7XG4gICAgdGhpcy4kbGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ2RhdGEtcmVzaXplJzogaWQsXG4gICAgICAnZGF0YS1zY3JvbGwnOiBpZCxcbiAgICAgICdpZCc6IGlkXG4gICAgfSk7XG4gICAgdGhpcy4kYWN0aXZlID0gJCgpO1xuICAgIHRoaXMuc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCk7XG5cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGFuIGFycmF5IG9mIHBpeGVsIHZhbHVlcyB0aGF0IGFyZSB0aGUgZGVtYXJjYXRpb24gbGluZXMgYmV0d2VlbiBsb2NhdGlvbnMgb24gdGhlIHBhZ2UuXG4gICAqIENhbiBiZSBpbnZva2VkIGlmIG5ldyBlbGVtZW50cyBhcmUgYWRkZWQgb3IgdGhlIHNpemUgb2YgYSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGNhbGNQb2ludHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgYm9keSA9IGRvY3VtZW50LmJvZHksXG4gICAgICAgIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgIHRoaXMud2luSGVpZ2h0ID0gTWF0aC5yb3VuZChNYXRoLm1heCh3aW5kb3cuaW5uZXJIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0KSk7XG4gICAgdGhpcy5kb2NIZWlnaHQgPSBNYXRoLnJvdW5kKE1hdGgubWF4KGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5Lm9mZnNldEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLm9mZnNldEhlaWdodCkpO1xuXG4gICAgdGhpcy4kdGFyZ2V0cy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJHRhciA9ICQodGhpcyksXG4gICAgICAgICAgcHQgPSBNYXRoLnJvdW5kKCR0YXIub2Zmc2V0KCkudG9wIC0gX3RoaXMub3B0aW9ucy50aHJlc2hvbGQpO1xuICAgICAgJHRhci50YXJnZXRQb2ludCA9IHB0O1xuICAgICAgX3RoaXMucG9pbnRzLnB1c2gocHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgTWFnZWxsYW4uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICRib2R5ID0gJCgnaHRtbCwgYm9keScpLFxuICAgICAgICBvcHRzID0ge1xuICAgICAgICAgIGR1cmF0aW9uOiBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIGVhc2luZzogICBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZ1xuICAgICAgICB9O1xuICAgICQod2luZG93KS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpe1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICAgIGlmKGxvY2F0aW9uLmhhc2gpe1xuICAgICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGxvY2F0aW9uLmhhc2gpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgICBfdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5yZWZsb3cuYmluZCh0aGlzKSxcbiAgICAgICdzY3JvbGxtZS56Zi50cmlnZ2VyJzogdGhpcy5fdXBkYXRlQWN0aXZlLmJpbmQodGhpcylcbiAgICB9KS5vbignY2xpY2suemYubWFnZWxsYW4nLCAnYVtocmVmXj1cIiNcIl0nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGFycml2YWwgICA9IHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGFycml2YWwpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHNjcm9sbCB0byBhIGdpdmVuIGxvY2F0aW9uIG9uIHRoZSBwYWdlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbG9jIC0gYSBwcm9wZXJseSBmb3JtYXR0ZWQgalF1ZXJ5IGlkIHNlbGVjdG9yLiBFeGFtcGxlOiAnI2ZvbydcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzY3JvbGxUb0xvYyhsb2MpIHtcbiAgICAvLyBEbyBub3RoaW5nIGlmIHRhcmdldCBkb2VzIG5vdCBleGlzdCB0byBwcmV2ZW50IGVycm9yc1xuICAgIGlmICghJChsb2MpLmxlbmd0aCkge3JldHVybiBmYWxzZTt9XG4gICAgdmFyIHNjcm9sbFBvcyA9IE1hdGgucm91bmQoJChsb2MpLm9mZnNldCgpLnRvcCAtIHRoaXMub3B0aW9ucy50aHJlc2hvbGQgLyAyIC0gdGhpcy5vcHRpb25zLmJhck9mZnNldCk7XG5cbiAgICAkKCdodG1sLCBib2R5Jykuc3RvcCh0cnVlKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBzY3JvbGxQb3MgfSwgdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBNYWdlbGxhbiB1cG9uIERPTSBjaGFuZ2VcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICByZWZsb3coKSB7XG4gICAgdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdmlzaWJpbGl0eSBvZiBhbiBhY3RpdmUgbG9jYXRpb24gbGluaywgYW5kIHVwZGF0ZXMgdGhlIHVybCBoYXNoIGZvciB0aGUgcGFnZSwgaWYgZGVlcExpbmtpbmcgZW5hYmxlZC5cbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBNYWdlbGxhbiN1cGRhdGVcbiAgICovXG4gIF91cGRhdGVBY3RpdmUoLypldnQsIGVsZW0sIHNjcm9sbFBvcyovKSB7XG4gICAgdmFyIHdpblBvcyA9IC8qc2Nyb2xsUG9zIHx8Ki8gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCksXG4gICAgICAgIGN1cklkeDtcblxuICAgIGlmKHdpblBvcyArIHRoaXMud2luSGVpZ2h0ID09PSB0aGlzLmRvY0hlaWdodCl7IGN1cklkeCA9IHRoaXMucG9pbnRzLmxlbmd0aCAtIDE7IH1cbiAgICBlbHNlIGlmKHdpblBvcyA8IHRoaXMucG9pbnRzWzBdKXsgY3VySWR4ID0gMDsgfVxuICAgIGVsc2V7XG4gICAgICB2YXIgaXNEb3duID0gdGhpcy5zY3JvbGxQb3MgPCB3aW5Qb3MsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIGN1clZpc2libGUgPSB0aGlzLnBvaW50cy5maWx0ZXIoZnVuY3Rpb24ocCwgaSl7XG4gICAgICAgICAgICByZXR1cm4gaXNEb3duID8gcCAtIF90aGlzLm9wdGlvbnMuYmFyT2Zmc2V0IDw9IHdpblBvcyA6IHAgLSBfdGhpcy5vcHRpb25zLmJhck9mZnNldCAtIF90aGlzLm9wdGlvbnMudGhyZXNob2xkIDw9IHdpblBvcztcbiAgICAgICAgICB9KTtcbiAgICAgIGN1cklkeCA9IGN1clZpc2libGUubGVuZ3RoID8gY3VyVmlzaWJsZS5sZW5ndGggLSAxIDogMDtcbiAgICB9XG5cbiAgICB0aGlzLiRhY3RpdmUucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcbiAgICB0aGlzLiRhY3RpdmUgPSB0aGlzLiRsaW5rcy5maWx0ZXIoJ1tocmVmPVwiIycgKyB0aGlzLiR0YXJnZXRzLmVxKGN1cklkeCkuZGF0YSgnbWFnZWxsYW4tdGFyZ2V0JykgKyAnXCJdJykuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICB2YXIgaGFzaCA9IHRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgIGlmKHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSl7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBoYXNoKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zY3JvbGxQb3MgPSB3aW5Qb3M7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBtYWdlbGxhbiBpcyBmaW5pc2hlZCB1cGRhdGluZyB0byB0aGUgbmV3IGFjdGl2ZSBlbGVtZW50LlxuICAgICAqIEBldmVudCBNYWdlbGxhbiN1cGRhdGVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwZGF0ZS56Zi5tYWdlbGxhbicsIFt0aGlzLiRhY3RpdmVdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBNYWdlbGxhbiBhbmQgcmVzZXRzIHRoZSB1cmwgb2YgdGhlIHdpbmRvdy5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYubWFnZWxsYW4nKVxuICAgICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzfWApLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpe1xuICAgICAgdmFyIGhhc2ggPSB0aGlzLiRhY3RpdmVbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKGhhc2gsICcnKTtcbiAgICB9XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuTWFnZWxsYW4uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSwgaW4gbXMsIHRoZSBhbmltYXRlZCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgYmV0d2VlbiBsb2NhdGlvbnMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuICBhbmltYXRpb25EdXJhdGlvbjogNTAwLFxuICAvKipcbiAgICogQW5pbWF0aW9uIHN0eWxlIHRvIHVzZSB3aGVuIHNjcm9sbGluZyBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZWFzZS1pbi1vdXQnXG4gICAqL1xuICBhbmltYXRpb25FYXNpbmc6ICdsaW5lYXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyB0byB1c2UgYXMgYSBtYXJrZXIgZm9yIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTBcbiAgICovXG4gIHRocmVzaG9sZDogNTAsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBhY3RpdmUgbG9jYXRpb25zIGxpbmsgb24gdGhlIG1hZ2VsbGFuIGNvbnRhaW5lci5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnYWN0aXZlJ1xuICAgKi9cbiAgYWN0aXZlQ2xhc3M6ICdhY3RpdmUnLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBzY3JpcHQgdG8gbWFuaXB1bGF0ZSB0aGUgdXJsIG9mIHRoZSBjdXJyZW50IHBhZ2UsIGFuZCBpZiBzdXBwb3J0ZWQsIGFsdGVyIHRoZSBoaXN0b3J5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGRlZXBMaW5raW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBzY3JvbGwgb2YgdGhlIHBhZ2Ugb24gaXRlbSBjbGljayBpZiB1c2luZyBhIHN0aWNreSBuYXYgYmFyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1XG4gICAqL1xuICBiYXJPZmZzZXQ6IDBcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE1hZ2VsbGFuLCAnTWFnZWxsYW4nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE9mZkNhbnZhcyBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ub2ZmY2FudmFzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKi9cblxuY2xhc3MgT2ZmQ2FudmFzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gb2ZmLWNhbnZhcyB3cmFwcGVyLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE9mZkNhbnZhcyNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBpbml0aWFsaXplLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE9mZkNhbnZhcy5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gJCgpO1xuICAgIHRoaXMuJHRyaWdnZXJzID0gJCgpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnT2ZmQ2FudmFzJylcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdPZmZDYW52YXMnLCB7XG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG9mZi1jYW52YXMgd3JhcHBlciBieSBhZGRpbmcgdGhlIGV4aXQgb3ZlcmxheSAoaWYgbmVlZGVkKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgIC8vIEZpbmQgdHJpZ2dlcnMgdGhhdCBhZmZlY3QgdGhpcyBlbGVtZW50IGFuZCBhZGQgYXJpYS1leHBhbmRlZCB0byB0aGVtXG4gICAgdGhpcy4kdHJpZ2dlcnMgPSAkKGRvY3VtZW50KVxuICAgICAgLmZpbmQoJ1tkYXRhLW9wZW49XCInK2lkKydcIl0sIFtkYXRhLWNsb3NlPVwiJytpZCsnXCJdLCBbZGF0YS10b2dnbGU9XCInK2lkKydcIl0nKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG5cbiAgICAvLyBBZGQgYSBjbG9zZSB0cmlnZ2VyIG92ZXIgdGhlIGJvZHkgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIGlmICgkKCcuanMtb2ZmLWNhbnZhcy1leGl0JykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGV4aXRlciA9ICQoJy5qcy1vZmYtY2FudmFzLWV4aXQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBleGl0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZXhpdGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnanMtb2ZmLWNhbnZhcy1leGl0Jyk7XG4gICAgICAgICQoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5hcHBlbmQoZXhpdGVyKTtcblxuICAgICAgICB0aGlzLiRleGl0ZXIgPSAkKGV4aXRlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCB8fCBuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXZlYWxDbGFzcywgJ2cnKS50ZXN0KHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5vcHRpb25zLnJldmVhbE9uID0gdGhpcy5vcHRpb25zLnJldmVhbE9uIHx8IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8ocmV2ZWFsLWZvci1tZWRpdW18cmV2ZWFsLWZvci1sYXJnZSkvZylbMF0uc3BsaXQoJy0nKVsyXTtcbiAgICAgIHRoaXMuX3NldE1RQ2hlY2tlcigpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZSkge1xuICAgICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkKCdbZGF0YS1vZmYtY2FudmFzLXdyYXBwZXJdJylbMF0pLnRyYW5zaXRpb25EdXJhdGlvbikgKiAxMDAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIHRoZSBvZmYtY2FudmFzIHdyYXBwZXIgYW5kIHRoZSBleGl0IG92ZXJsYXkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhcycpLm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdrZXlkb3duLnpmLm9mZmNhbnZhcyc6IHRoaXMuX2hhbmRsZUtleWJvYXJkLmJpbmQodGhpcylcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrICYmIHRoaXMuJGV4aXRlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGV4aXRlci5vbih7J2NsaWNrLnpmLm9mZmNhbnZhcyc6IHRoaXMuY2xvc2UuYmluZCh0aGlzKX0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGV2ZW50IGxpc3RlbmVyIGZvciBlbGVtZW50cyB0aGF0IHdpbGwgcmV2ZWFsIGF0IGNlcnRhaW4gYnJlYWtwb2ludHMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0TVFDaGVja2VyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnJldmVhbChmYWxzZSk7XG4gICAgICB9XG4gICAgfSkub25lKCdsb2FkLnpmLm9mZmNhbnZhcycsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSByZXZlYWxpbmcvaGlkaW5nIHRoZSBvZmYtY2FudmFzIGF0IGJyZWFrcG9pbnRzLCBub3QgdGhlIHNhbWUgYXMgb3Blbi5cbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1JldmVhbGVkIC0gdHJ1ZSBpZiBlbGVtZW50IHNob3VsZCBiZSByZXZlYWxlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICByZXZlYWwoaXNSZXZlYWxlZCkge1xuICAgIHZhciAkY2xvc2VyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1jbG9zZV0nKTtcbiAgICBpZiAoaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgdGhpcy5pc1JldmVhbGVkID0gdHJ1ZTtcbiAgICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgICAvLyAgIHZhciBzY3JvbGxQb3MgPSBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgLy8gICB0aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMCwnICsgc2Nyb2xsUG9zICsgJ3B4KSc7XG4gICAgICAvLyB9XG4gICAgICAvLyBpZiAodGhpcy5vcHRpb25zLmlzU3RpY2t5KSB7IHRoaXMuX3N0aWNrKCk7IH1cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdvcGVuLnpmLnRyaWdnZXIgdG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkgeyAkY2xvc2VyLmhpZGUoKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzUmV2ZWFsZWQgPSBmYWxzZTtcbiAgICAgIC8vIGlmICh0aGlzLm9wdGlvbnMuaXNTdGlja3kgfHwgIXRoaXMub3B0aW9ucy5mb3JjZVRvcCkge1xuICAgICAgLy8gICB0aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgICAgLy8gICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYub2ZmY2FudmFzJyk7XG4gICAgICAvLyB9XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgICB9KTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkge1xuICAgICAgICAkY2xvc2VyLnNob3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqIEBmaXJlcyBPZmZDYW52YXMjb3BlbmVkXG4gICAqL1xuICBvcGVuKGV2ZW50LCB0cmlnZ2VyKSB7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHsgcmV0dXJuOyB9XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgJGJvZHkgPSAkKGRvY3VtZW50LmJvZHkpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5mb3JjZVRvcCkge1xuICAgICAgJCgnYm9keScpLnNjcm9sbFRvcCgwKTtcbiAgICB9XG4gICAgLy8gd2luZG93LnBhZ2VZT2Zmc2V0ID0gMDtcblxuICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgLy8gICB2YXIgc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAvLyAgIHRoaXMuJGVsZW1lbnRbMF0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBzY3JvbGxQb3MgKyAncHgpJztcbiAgICAvLyAgIGlmICh0aGlzLiRleGl0ZXIubGVuZ3RoKSB7XG4gICAgLy8gICAgIHRoaXMuJGV4aXRlclswXS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHNjcm9sbFBvcyArICdweCknO1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbnMuXG4gICAgICogQGV2ZW50IE9mZkNhbnZhcyNvcGVuZWRcbiAgICAgKi9cblxuICAgIHZhciAkd3JhcHBlciA9ICQoJ1tkYXRhLW9mZi1jYW52YXMtd3JhcHBlcl0nKTtcbiAgICAkd3JhcHBlci5hZGRDbGFzcygnaXMtb2ZmLWNhbnZhcy1vcGVuIGlzLW9wZW4tJysgX3RoaXMub3B0aW9ucy5wb3NpdGlvbik7XG5cbiAgICBfdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnaXMtb3BlbicpXG5cbiAgICAgIC8vIGlmIChfdGhpcy5vcHRpb25zLmlzU3RpY2t5KSB7XG4gICAgICAvLyAgIF90aGlzLl9zdGljaygpO1xuICAgICAgLy8gfVxuXG4gICAgdGhpcy4kdHJpZ2dlcnMuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpXG4gICAgICAgIC50cmlnZ2VyKCdvcGVuZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgdGhpcy4kZXhpdGVyLmFkZENsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Gb2N1cykge1xuICAgICAgJHdyYXBwZXIub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkd3JhcHBlciksIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7IC8vIGhhbmRsZSBkb3VibGUgY2xpY2tzXG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgJHdyYXBwZXIub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkd3JhcHBlciksIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7IC8vIGhhbmRsZSBkb3VibGUgY2xpY2tzXG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICBfdGhpcy50cmFwRm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYXBzIGZvY3VzIHdpdGhpbiB0aGUgb2ZmY2FudmFzIG9uIG9wZW4uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdHJhcEZvY3VzKCkge1xuICAgIHZhciBmb2N1c2FibGUgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCksXG4gICAgICAgIGZpcnN0ID0gZm9jdXNhYmxlLmVxKDApLFxuICAgICAgICBsYXN0ID0gZm9jdXNhYmxlLmVxKC0xKTtcblxuICAgIGZvY3VzYWJsZS5vZmYoJy56Zi5vZmZjYW52YXMnKS5vbigna2V5ZG93bi56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIga2V5ID0gRm91bmRhdGlvbi5LZXlib2FyZC5wYXJzZUtleShlKTtcbiAgICAgIGlmIChrZXkgPT09ICdUQUInICYmIGUudGFyZ2V0ID09PSBsYXN0WzBdKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZmlyc3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdTSElGVF9UQUInICYmIGUudGFyZ2V0ID09PSBmaXJzdFswXSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxhc3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG9mZmNhbnZhcyB0byBhcHBlYXIgc3RpY2t5IHV0aWxpemluZyB0cmFuc2xhdGUgcHJvcGVydGllcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIC8vIE9mZkNhbnZhcy5wcm90b3R5cGUuX3N0aWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgdmFyIGVsU3R5bGUgPSB0aGlzLiRlbGVtZW50WzBdLnN0eWxlO1xuICAvL1xuICAvLyAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gIC8vICAgICB2YXIgZXhpdFN0eWxlID0gdGhpcy4kZXhpdGVyWzBdLnN0eWxlO1xuICAvLyAgIH1cbiAgLy9cbiAgLy8gICAkKHdpbmRvdykub24oJ3Njcm9sbC56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbihlKSB7XG4gIC8vICAgICBjb25zb2xlLmxvZyhlKTtcbiAgLy8gICAgIHZhciBwYWdlWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgLy8gICAgIGVsU3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBwYWdlWSArICdweCknO1xuICAvLyAgICAgaWYgKGV4aXRTdHlsZSAhPT0gdW5kZWZpbmVkKSB7IGV4aXRTdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHBhZ2VZICsgJ3B4KSc7IH1cbiAgLy8gICB9KTtcbiAgLy8gICAvLyB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3N0dWNrLnpmLm9mZmNhbnZhcycpO1xuICAvLyB9O1xuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNiIHRvIGZpcmUgYWZ0ZXIgY2xvc3VyZS5cbiAgICogQGZpcmVzIE9mZkNhbnZhcyNjbG9zZWRcbiAgICovXG4gIGNsb3NlKGNiKSB7XG4gICAgaWYgKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykgfHwgdGhpcy5pc1JldmVhbGVkKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vICBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lLCB0aGlzLiRlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAkKCdbZGF0YS1vZmYtY2FudmFzLXdyYXBwZXJdJykucmVtb3ZlQ2xhc3MoYGlzLW9mZi1jYW52YXMtb3BlbiBpcy1vcGVuLSR7X3RoaXMub3B0aW9ucy5wb3NpdGlvbn1gKTtcbiAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgLy8gRm91bmRhdGlvbi5fcmVmbG93KCk7XG4gICAgLy8gfSk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgb2ZmLWNhbnZhcyBtZW51IG9wZW5zLlxuICAgICAgICogQGV2ZW50IE9mZkNhbnZhcyNjbG9zZWRcbiAgICAgICAqL1xuICAgICAgICAudHJpZ2dlcignY2xvc2VkLnpmLm9mZmNhbnZhcycpO1xuICAgIC8vIGlmIChfdGhpcy5vcHRpb25zLmlzU3RpY2t5IHx8ICFfdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgLy8gICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICBfdGhpcy4kZWxlbWVudFswXS5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICAvLyAgICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsLnpmLm9mZmNhbnZhcycpO1xuICAgIC8vICAgfSwgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lKTtcbiAgICAvLyB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIHRoaXMuJGV4aXRlci5yZW1vdmVDbGFzcygnaXMtdmlzaWJsZScpO1xuICAgIH1cblxuICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgJCgnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9mZi1jYW52YXMgbWVudSBvcGVuIG9yIGNsb3NlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqL1xuICB0b2dnbGUoZXZlbnQsIHRyaWdnZXIpIHtcbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICB0aGlzLmNsb3NlKGV2ZW50LCB0cmlnZ2VyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLm9wZW4oZXZlbnQsIHRyaWdnZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGtleWJvYXJkIGlucHV0IHdoZW4gZGV0ZWN0ZWQuIFdoZW4gdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZCwgdGhlIG9mZi1jYW52YXMgbWVudSBjbG9zZXMsIGFuZCBmb2N1cyBpcyByZXN0b3JlZCB0byB0aGUgZWxlbWVudCB0aGF0IG9wZW5lZCB0aGUgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGFuZGxlS2V5Ym9hcmQoZSkge1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdPZmZDYW52YXMnLCB7XG4gICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyLmZvY3VzKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZWQ6ICgpID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBvZmZjYW52YXMgcGx1Z2luLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYub2ZmY2FudmFzJyk7XG4gICAgdGhpcy4kZXhpdGVyLm9mZignLnpmLm9mZmNhbnZhcycpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbk9mZkNhbnZhcy5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFsbG93IHRoZSB1c2VyIHRvIGNsaWNrIG91dHNpZGUgb2YgdGhlIG1lbnUgdG8gY2xvc2UgaXQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSBpbiBtcyB0aGUgb3BlbiBhbmQgY2xvc2UgdHJhbnNpdGlvbiByZXF1aXJlcy4gSWYgbm9uZSBzZWxlY3RlZCwgcHVsbHMgZnJvbSBib2R5IHN0eWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwMFxuICAgKi9cbiAgdHJhbnNpdGlvblRpbWU6IDAsXG5cbiAgLyoqXG4gICAqIERpcmVjdGlvbiB0aGUgb2ZmY2FudmFzIG9wZW5zIGZyb20uIERldGVybWluZXMgY2xhc3MgYXBwbGllZCB0byBib2R5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGxlZnRcbiAgICovXG4gIHBvc2l0aW9uOiAnbGVmdCcsXG5cbiAgLyoqXG4gICAqIEZvcmNlIHRoZSBwYWdlIHRvIHNjcm9sbCB0byB0b3Agb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBmb3JjZVRvcDogdHJ1ZSxcblxuICAvKipcbiAgICogQWxsb3cgdGhlIG9mZmNhbnZhcyB0byByZW1haW4gb3BlbiBmb3IgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgaXNSZXZlYWxlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgYXQgd2hpY2ggdG8gcmV2ZWFsLiBKUyB3aWxsIHVzZSBhIFJlZ0V4cCB0byB0YXJnZXQgc3RhbmRhcmQgY2xhc3NlcywgaWYgY2hhbmdpbmcgY2xhc3NuYW1lcywgcGFzcyB5b3VyIGNsYXNzIHdpdGggdGhlIGByZXZlYWxDbGFzc2Agb3B0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHJldmVhbC1mb3ItbGFyZ2VcbiAgICovXG4gIHJldmVhbE9uOiBudWxsLFxuXG4gIC8qKlxuICAgKiBGb3JjZSBmb2N1cyB0byB0aGUgb2ZmY2FudmFzIG9uIG9wZW4uIElmIHRydWUsIHdpbGwgZm9jdXMgdGhlIG9wZW5pbmcgdHJpZ2dlciBvbiBjbG9zZS4gU2V0cyB0YWJpbmRleCBvZiBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdIHRvIC0xIGZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGF1dG9Gb2N1czogdHJ1ZSxcblxuICAvKipcbiAgICogQ2xhc3MgdXNlZCB0byBmb3JjZSBhbiBvZmZjYW52YXMgdG8gcmVtYWluIG9wZW4uIEZvdW5kYXRpb24gZGVmYXVsdHMgZm9yIHRoaXMgYXJlIGByZXZlYWwtZm9yLWxhcmdlYCAmIGByZXZlYWwtZm9yLW1lZGl1bWAuXG4gICAqIEBvcHRpb25cbiAgICogVE9ETyBpbXByb3ZlIHRoZSByZWdleCB0ZXN0aW5nIGZvciB0aGlzLlxuICAgKiBAZXhhbXBsZSByZXZlYWwtZm9yLWxhcmdlXG4gICAqL1xuICByZXZlYWxDbGFzczogJ3JldmVhbC1mb3ItJyxcblxuICAvKipcbiAgICogVHJpZ2dlcnMgb3B0aW9uYWwgZm9jdXMgdHJhcHBpbmcgd2hlbiBvcGVuaW5nIGFuIG9mZmNhbnZhcy4gU2V0cyB0YWJpbmRleCBvZiBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdIHRvIC0xIGZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIHRyYXBGb2N1czogZmFsc2Vcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE9mZkNhbnZhcywgJ09mZkNhbnZhcycpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogT3JiaXQgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLm9yYml0XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRvdWNoXG4gKi9cblxuY2xhc3MgT3JiaXQge1xuICAvKipcbiAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGFuIG9yYml0IGNhcm91c2VsLlxuICAqIEBjbGFzc1xuICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gT3JiaXQgQ2Fyb3VzZWwuXG4gICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKXtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgT3JiaXQuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ09yYml0Jyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignT3JiaXQnLCB7XG4gICAgICAnbHRyJzoge1xuICAgICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAgICdBUlJPV19MRUZUJzogJ3ByZXZpb3VzJ1xuICAgICAgfSxcbiAgICAgICdydGwnOiB7XG4gICAgICAgICdBUlJPV19MRUZUJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfUklHSFQnOiAncHJldmlvdXMnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luIGJ5IGNyZWF0aW5nIGpRdWVyeSBjb2xsZWN0aW9ucywgc2V0dGluZyBhdHRyaWJ1dGVzLCBhbmQgc3RhcnRpbmcgdGhlIGFuaW1hdGlvbi5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLiR3cmFwcGVyID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgdGhpcy4kc2xpZGVzID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKTtcbiAgICB2YXIgJGltYWdlcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW1nJyksXG4gICAgaW5pdEFjdGl2ZSA9IHRoaXMuJHNsaWRlcy5maWx0ZXIoJy5pcy1hY3RpdmUnKTtcblxuICAgIGlmICghaW5pdEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJHNsaWRlcy5lcSgwKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMudXNlTVVJKSB7XG4gICAgICB0aGlzLiRzbGlkZXMuYWRkQ2xhc3MoJ25vLW1vdGlvbnVpJyk7XG4gICAgfVxuXG4gICAgaWYgKCRpbWFnZXMubGVuZ3RoKSB7XG4gICAgICBGb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkKCRpbWFnZXMsIHRoaXMuX3ByZXBhcmVGb3JPcmJpdC5iaW5kKHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcHJlcGFyZUZvck9yYml0KCk7Ly9oZWhlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICB0aGlzLl9sb2FkQnVsbGV0cygpO1xuICAgIH1cblxuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSAmJiB0aGlzLiRzbGlkZXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5nZW9TeW5jKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hY2Nlc3NpYmxlKSB7IC8vIGFsbG93IHdyYXBwZXIgdG8gYmUgZm9jdXNhYmxlIHRvIGVuYWJsZSBhcnJvdyBuYXZpZ2F0aW9uXG4gICAgICB0aGlzLiR3cmFwcGVyLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogQ3JlYXRlcyBhIGpRdWVyeSBjb2xsZWN0aW9uIG9mIGJ1bGxldHMsIGlmIHRoZXkgYXJlIGJlaW5nIHVzZWQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX2xvYWRCdWxsZXRzKCkge1xuICAgIHRoaXMuJGJ1bGxldHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoYC4ke3RoaXMub3B0aW9ucy5ib3hPZkJ1bGxldHN9YCkuZmluZCgnYnV0dG9uJyk7XG4gIH1cblxuICAvKipcbiAgKiBTZXRzIGEgYHRpbWVyYCBvYmplY3Qgb24gdGhlIG9yYml0LCBhbmQgc3RhcnRzIHRoZSBjb3VudGVyIGZvciB0aGUgbmV4dCBzbGlkZS5cbiAgKiBAZnVuY3Rpb25cbiAgKi9cbiAgZ2VvU3luYygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMudGltZXIgPSBuZXcgRm91bmRhdGlvbi5UaW1lcihcbiAgICAgIHRoaXMuJGVsZW1lbnQsXG4gICAgICB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGlzLm9wdGlvbnMudGltZXJEZWxheSxcbiAgICAgICAgaW5maW5pdGU6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHRydWUpO1xuICAgICAgfSk7XG4gICAgdGhpcy50aW1lci5zdGFydCgpO1xuICB9XG5cbiAgLyoqXG4gICogU2V0cyB3cmFwcGVyIGFuZCBzbGlkZSBoZWlnaHRzIGZvciB0aGUgb3JiaXQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX3ByZXBhcmVGb3JPcmJpdCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuX3NldFdyYXBwZXJIZWlnaHQoZnVuY3Rpb24obWF4KXtcbiAgICAgIF90aGlzLl9zZXRTbGlkZUhlaWdodChtYXgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogQ2FsdWxhdGVzIHRoZSBoZWlnaHQgb2YgZWFjaCBzbGlkZSBpbiB0aGUgY29sbGVjdGlvbiwgYW5kIHVzZXMgdGhlIHRhbGxlc3Qgb25lIGZvciB0aGUgd3JhcHBlciBoZWlnaHQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSB3aGVuIGNvbXBsZXRlLlxuICAqL1xuICBfc2V0V3JhcHBlckhlaWdodChjYikgey8vcmV3cml0ZSB0aGlzIHRvIGBmb3JgIGxvb3BcbiAgICB2YXIgbWF4ID0gMCwgdGVtcCwgY291bnRlciA9IDA7XG5cbiAgICB0aGlzLiRzbGlkZXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHRlbXAgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICQodGhpcykuYXR0cignZGF0YS1zbGlkZScsIGNvdW50ZXIpO1xuXG4gICAgICBpZiAoY291bnRlcikgey8vaWYgbm90IHRoZSBmaXJzdCBzbGlkZSwgc2V0IGNzcyBwb3NpdGlvbiBhbmQgZGlzcGxheSBwcm9wZXJ0eVxuICAgICAgICAkKHRoaXMpLmNzcyh7J3Bvc2l0aW9uJzogJ3JlbGF0aXZlJywgJ2Rpc3BsYXknOiAnbm9uZSd9KTtcbiAgICAgIH1cbiAgICAgIG1heCA9IHRlbXAgPiBtYXggPyB0ZW1wIDogbWF4O1xuICAgICAgY291bnRlcisrO1xuICAgIH0pO1xuXG4gICAgaWYgKGNvdW50ZXIgPT09IHRoaXMuJHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJHdyYXBwZXIuY3NzKHsnaGVpZ2h0JzogbWF4fSk7IC8vb25seSBjaGFuZ2UgdGhlIHdyYXBwZXIgaGVpZ2h0IHByb3BlcnR5IG9uY2UuXG4gICAgICBjYihtYXgpOyAvL2ZpcmUgY2FsbGJhY2sgd2l0aCBtYXggaGVpZ2h0IGRpbWVuc2lvbi5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBTZXRzIHRoZSBtYXgtaGVpZ2h0IG9mIGVhY2ggc2xpZGUuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX3NldFNsaWRlSGVpZ2h0KGhlaWdodCkge1xuICAgIHRoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS5jc3MoJ21heC1oZWlnaHQnLCBoZWlnaHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gYmFzaWNhbGx5IGV2ZXJ5dGhpbmcgd2l0aGluIHRoZSBlbGVtZW50LlxuICAqIEBmdW5jdGlvblxuICAqIEBwcml2YXRlXG4gICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgLy8qKk5vdyB1c2luZyBjdXN0b20gZXZlbnQgLSB0aGFua3MgdG86KipcbiAgICAvLyoqICAgICAgWW9oYWkgQXJhcmF0IG9mIFRvcm9udG8gICAgICAqKlxuICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgaWYgKHRoaXMuJHNsaWRlcy5sZW5ndGggPiAxKSB7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3dpcGUpIHtcbiAgICAgICAgdGhpcy4kc2xpZGVzLm9mZignc3dpcGVsZWZ0LnpmLm9yYml0IHN3aXBlcmlnaHQuemYub3JiaXQnKVxuICAgICAgICAub24oJ3N3aXBlbGVmdC56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSh0cnVlKTtcbiAgICAgICAgfSkub24oJ3N3aXBlcmlnaHQuemYub3JiaXQnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1BsYXkpIHtcbiAgICAgICAgdGhpcy4kc2xpZGVzLm9uKCdjbGljay56Zi5vcmJpdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicsIF90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpID8gZmFsc2UgOiB0cnVlKTtcbiAgICAgICAgICBfdGhpcy50aW1lcltfdGhpcy4kZWxlbWVudC5kYXRhKCdjbGlja2VkT24nKSA/ICdwYXVzZScgOiAnc3RhcnQnXSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhdXNlT25Ib3Zlcikge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZW50ZXIuemYub3JiaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLnRpbWVyLnBhdXNlKCk7XG4gICAgICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYub3JiaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuJGVsZW1lbnQuZGF0YSgnY2xpY2tlZE9uJykpIHtcbiAgICAgICAgICAgICAgX3RoaXMudGltZXIuc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5hdkJ1dHRvbnMpIHtcbiAgICAgICAgdmFyICRjb250cm9scyA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLm5leHRDbGFzc30sIC4ke3RoaXMub3B0aW9ucy5wcmV2Q2xhc3N9YCk7XG4gICAgICAgICRjb250cm9scy5hdHRyKCd0YWJpbmRleCcsIDApXG4gICAgICAgIC8vYWxzbyBuZWVkIHRvIGhhbmRsZSBlbnRlci9yZXR1cm4gYW5kIHNwYWNlYmFyIGtleSBwcmVzc2VzXG4gICAgICAgIC5vbignY2xpY2suemYub3JiaXQgdG91Y2hlbmQuemYub3JiaXQnLCBmdW5jdGlvbihlKXtcblx0ICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoJCh0aGlzKS5oYXNDbGFzcyhfdGhpcy5vcHRpb25zLm5leHRDbGFzcykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICAgIHRoaXMuJGJ1bGxldHMub24oJ2NsaWNrLnpmLm9yYml0IHRvdWNoZW5kLnpmLm9yYml0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKC9pcy1hY3RpdmUvZy50ZXN0KHRoaXMuY2xhc3NOYW1lKSkgeyByZXR1cm4gZmFsc2U7IH0vL2lmIHRoaXMgaXMgYWN0aXZlLCBraWNrIG91dCBvZiBmdW5jdGlvbi5cbiAgICAgICAgICB2YXIgaWR4ID0gJCh0aGlzKS5kYXRhKCdzbGlkZScpLFxuICAgICAgICAgIGx0ciA9IGlkeCA+IF90aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZGF0YSgnc2xpZGUnKSxcbiAgICAgICAgICAkc2xpZGUgPSBfdGhpcy4kc2xpZGVzLmVxKGlkeCk7XG5cbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShsdHIsICRzbGlkZSwgaWR4KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWNjZXNzaWJsZSkge1xuICAgICAgICB0aGlzLiR3cmFwcGVyLmFkZCh0aGlzLiRidWxsZXRzKS5vbigna2V5ZG93bi56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAvLyBoYW5kbGUga2V5Ym9hcmQgZXZlbnQgd2l0aCBrZXlib2FyZCB1dGlsXG4gICAgICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ09yYml0Jywge1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoZmFsc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkgeyAvLyBpZiBidWxsZXQgaXMgZm9jdXNlZCwgbWFrZSBzdXJlIGZvY3VzIG1vdmVzXG4gICAgICAgICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyhfdGhpcy4kYnVsbGV0cykpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy4kYnVsbGV0cy5maWx0ZXIoJy5pcy1hY3RpdmUnKS5mb2N1cygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIENoYW5nZXMgdGhlIGN1cnJlbnQgc2xpZGUgdG8gYSBuZXcgb25lLlxuICAqIEBmdW5jdGlvblxuICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNMVFIgLSBmbGFnIGlmIHRoZSBzbGlkZSBzaG91bGQgbW92ZSBsZWZ0IHRvIHJpZ2h0LlxuICAqIEBwYXJhbSB7alF1ZXJ5fSBjaG9zZW5TbGlkZSAtIHRoZSBqUXVlcnkgZWxlbWVudCBvZiB0aGUgc2xpZGUgdG8gc2hvdyBuZXh0LCBpZiBvbmUgaXMgc2VsZWN0ZWQuXG4gICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIHRoZSBpbmRleCBvZiB0aGUgbmV3IHNsaWRlIGluIGl0cyBjb2xsZWN0aW9uLCBpZiBvbmUgY2hvc2VuLlxuICAqIEBmaXJlcyBPcmJpdCNzbGlkZWNoYW5nZVxuICAqL1xuICBjaGFuZ2VTbGlkZShpc0xUUiwgY2hvc2VuU2xpZGUsIGlkeCkge1xuICAgIHZhciAkY3VyU2xpZGUgPSB0aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZXEoMCk7XG5cbiAgICBpZiAoL211aS9nLnRlc3QoJGN1clNsaWRlWzBdLmNsYXNzTmFtZSkpIHsgcmV0dXJuIGZhbHNlOyB9IC8vaWYgdGhlIHNsaWRlIGlzIGN1cnJlbnRseSBhbmltYXRpbmcsIGtpY2sgb3V0IG9mIHRoZSBmdW5jdGlvblxuXG4gICAgdmFyICRmaXJzdFNsaWRlID0gdGhpcy4kc2xpZGVzLmZpcnN0KCksXG4gICAgJGxhc3RTbGlkZSA9IHRoaXMuJHNsaWRlcy5sYXN0KCksXG4gICAgZGlySW4gPSBpc0xUUiA/ICdSaWdodCcgOiAnTGVmdCcsXG4gICAgZGlyT3V0ID0gaXNMVFIgPyAnTGVmdCcgOiAnUmlnaHQnLFxuICAgIF90aGlzID0gdGhpcyxcbiAgICAkbmV3U2xpZGU7XG5cbiAgICBpZiAoIWNob3NlblNsaWRlKSB7IC8vbW9zdCBvZiB0aGUgdGltZSwgdGhpcyB3aWxsIGJlIGF1dG8gcGxheWVkIG9yIGNsaWNrZWQgZnJvbSB0aGUgbmF2QnV0dG9ucy5cbiAgICAgICRuZXdTbGlkZSA9IGlzTFRSID8gLy9pZiB3cmFwcGluZyBlbmFibGVkLCBjaGVjayB0byBzZWUgaWYgdGhlcmUgaXMgYSBgbmV4dGAgb3IgYHByZXZgIHNpYmxpbmcsIGlmIG5vdCwgc2VsZWN0IHRoZSBmaXJzdCBvciBsYXN0IHNsaWRlIHRvIGZpbGwgaW4uIGlmIHdyYXBwaW5nIG5vdCBlbmFibGVkLCBhdHRlbXB0IHRvIHNlbGVjdCBgbmV4dGAgb3IgYHByZXZgLCBpZiB0aGVyZSdzIG5vdGhpbmcgdGhlcmUsIHRoZSBmdW5jdGlvbiB3aWxsIGtpY2sgb3V0IG9uIG5leHQgc3RlcC4gQ1JBWlkgTkVTVEVEIFRFUk5BUklFUyEhISEhXG4gICAgICAodGhpcy5vcHRpb25zLmluZmluaXRlV3JhcCA/ICRjdXJTbGlkZS5uZXh0KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKS5sZW5ndGggPyAkY3VyU2xpZGUubmV4dChgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkgOiAkZmlyc3RTbGlkZSA6ICRjdXJTbGlkZS5uZXh0KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKSkvL3BpY2sgbmV4dCBzbGlkZSBpZiBtb3ZpbmcgbGVmdCB0byByaWdodFxuICAgICAgOlxuICAgICAgKHRoaXMub3B0aW9ucy5pbmZpbml0ZVdyYXAgPyAkY3VyU2xpZGUucHJldihgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkubGVuZ3RoID8gJGN1clNsaWRlLnByZXYoYC4ke3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzfWApIDogJGxhc3RTbGlkZSA6ICRjdXJTbGlkZS5wcmV2KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKSk7Ly9waWNrIHByZXYgc2xpZGUgaWYgbW92aW5nIHJpZ2h0IHRvIGxlZnRcbiAgICB9IGVsc2Uge1xuICAgICAgJG5ld1NsaWRlID0gY2hvc2VuU2xpZGU7XG4gICAgfVxuXG4gICAgaWYgKCRuZXdTbGlkZS5sZW5ndGgpIHtcbiAgICAgIC8qKlxuICAgICAgKiBUcmlnZ2VycyBiZWZvcmUgdGhlIG5leHQgc2xpZGUgc3RhcnRzIGFuaW1hdGluZyBpbiBhbmQgb25seSBpZiBhIG5leHQgc2xpZGUgaGFzIGJlZW4gZm91bmQuXG4gICAgICAqIEBldmVudCBPcmJpdCNiZWZvcmVzbGlkZWNoYW5nZVxuICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignYmVmb3Jlc2xpZGVjaGFuZ2UuemYub3JiaXQnLCBbJGN1clNsaWRlLCAkbmV3U2xpZGVdKTtcbiAgICAgIFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICAgIGlkeCA9IGlkeCB8fCB0aGlzLiRzbGlkZXMuaW5kZXgoJG5ld1NsaWRlKTsgLy9ncmFiIGluZGV4IHRvIHVwZGF0ZSBidWxsZXRzXG4gICAgICAgIHRoaXMuX3VwZGF0ZUJ1bGxldHMoaWR4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy51c2VNVUkpIHtcbiAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKFxuICAgICAgICAgICRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlJykuY3NzKHsncG9zaXRpb24nOiAnYWJzb2x1dGUnLCAndG9wJzogMH0pLFxuICAgICAgICAgIHRoaXMub3B0aW9uc1tgYW5pbUluRnJvbSR7ZGlySW59YF0sXG4gICAgICAgICAgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRuZXdTbGlkZS5jc3Moeydwb3NpdGlvbic6ICdyZWxhdGl2ZScsICdkaXNwbGF5JzogJ2Jsb2NrJ30pXG4gICAgICAgICAgICAuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KFxuICAgICAgICAgICRjdXJTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyksXG4gICAgICAgICAgdGhpcy5vcHRpb25zW2BhbmltT3V0VG8ke2Rpck91dH1gXSxcbiAgICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgICAgJGN1clNsaWRlLnJlbW92ZUF0dHIoJ2FyaWEtbGl2ZScpO1xuICAgICAgICAgICAgaWYoX3RoaXMub3B0aW9ucy5hdXRvUGxheSAmJiAhX3RoaXMudGltZXIuaXNQYXVzZWQpe1xuICAgICAgICAgICAgICBfdGhpcy50aW1lci5yZXN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2RvIHN0dWZmP1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGN1clNsaWRlLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtaW4nKS5yZW1vdmVBdHRyKCdhcmlhLWxpdmUnKS5oaWRlKCk7XG4gICAgICAgICRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlIGlzLWluJykuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpLnNob3coKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSAmJiAhdGhpcy50aW1lci5pc1BhdXNlZCkge1xuICAgICAgICAgIHRoaXMudGltZXIucmVzdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgLyoqXG4gICAgKiBUcmlnZ2VycyB3aGVuIHRoZSBzbGlkZSBoYXMgZmluaXNoZWQgYW5pbWF0aW5nIGluLlxuICAgICogQGV2ZW50IE9yYml0I3NsaWRlY2hhbmdlXG4gICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2xpZGVjaGFuZ2UuemYub3JiaXQnLCBbJG5ld1NsaWRlXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVXBkYXRlcyB0aGUgYWN0aXZlIHN0YXRlIG9mIHRoZSBidWxsZXRzLCBpZiBkaXNwbGF5ZWQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gdGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IHNsaWRlLlxuICAqL1xuICBfdXBkYXRlQnVsbGV0cyhpZHgpIHtcbiAgICB2YXIgJG9sZEJ1bGxldCA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLmJveE9mQnVsbGV0c31gKVxuICAgIC5maW5kKCcuaXMtYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmJsdXIoKSxcbiAgICBzcGFuID0gJG9sZEJ1bGxldC5maW5kKCdzcGFuOmxhc3QnKS5kZXRhY2goKSxcbiAgICAkbmV3QnVsbGV0ID0gdGhpcy4kYnVsbGV0cy5lcShpZHgpLmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hcHBlbmQoc3Bhbik7XG4gIH1cblxuICAvKipcbiAgKiBEZXN0cm95cyB0aGUgY2Fyb3VzZWwgYW5kIGhpZGVzIHRoZSBlbGVtZW50LlxuICAqIEBmdW5jdGlvblxuICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYub3JiaXQnKS5maW5kKCcqJykub2ZmKCcuemYub3JiaXQnKS5lbmQoKS5oaWRlKCk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbk9yYml0LmRlZmF1bHRzID0ge1xuICAvKipcbiAgKiBUZWxscyB0aGUgSlMgdG8gbG9vayBmb3IgYW5kIGxvYWRCdWxsZXRzLlxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIGJ1bGxldHM6IHRydWUsXG4gIC8qKlxuICAqIFRlbGxzIHRoZSBKUyB0byBhcHBseSBldmVudCBsaXN0ZW5lcnMgdG8gbmF2IGJ1dHRvbnNcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICBuYXZCdXR0b25zOiB0cnVlLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdzbGlkZS1pbi1yaWdodCdcbiAgKi9cbiAgYW5pbUluRnJvbVJpZ2h0OiAnc2xpZGUtaW4tcmlnaHQnLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdzbGlkZS1vdXQtcmlnaHQnXG4gICovXG4gIGFuaW1PdXRUb1JpZ2h0OiAnc2xpZGUtb3V0LXJpZ2h0JyxcbiAgLyoqXG4gICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnc2xpZGUtaW4tbGVmdCdcbiAgKlxuICAqL1xuICBhbmltSW5Gcm9tTGVmdDogJ3NsaWRlLWluLWxlZnQnLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdzbGlkZS1vdXQtbGVmdCdcbiAgKi9cbiAgYW5pbU91dFRvTGVmdDogJ3NsaWRlLW91dC1sZWZ0JyxcbiAgLyoqXG4gICogQWxsb3dzIE9yYml0IHRvIGF1dG9tYXRpY2FsbHkgYW5pbWF0ZSBvbiBwYWdlIGxvYWQuXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgYXV0b1BsYXk6IHRydWUsXG4gIC8qKlxuICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgYmV0d2VlbiBzbGlkZSB0cmFuc2l0aW9uc1xuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSA1MDAwXG4gICovXG4gIHRpbWVyRGVsYXk6IDUwMDAsXG4gIC8qKlxuICAqIEFsbG93cyBPcmJpdCB0byBpbmZpbml0ZWx5IGxvb3AgdGhyb3VnaCB0aGUgc2xpZGVzXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgaW5maW5pdGVXcmFwOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgdGhlIE9yYml0IHNsaWRlcyB0byBiaW5kIHRvIHN3aXBlIGV2ZW50cyBmb3IgbW9iaWxlLCByZXF1aXJlcyBhbiBhZGRpdGlvbmFsIHV0aWwgbGlicmFyeVxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIHN3aXBlOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgdGhlIHRpbWluZyBmdW5jdGlvbiB0byBwYXVzZSBhbmltYXRpb24gb24gaG92ZXIuXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgT3JiaXQgdG8gYmluZCBrZXlib2FyZCBldmVudHMgdG8gdGhlIHNsaWRlciwgdG8gYW5pbWF0ZSBmcmFtZXMgd2l0aCBhcnJvdyBrZXlzXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgYWNjZXNzaWJsZTogdHJ1ZSxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIG9mIE9yYml0XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdvcmJpdC1jb250YWluZXInXG4gICovXG4gIGNvbnRhaW5lckNsYXNzOiAnb3JiaXQtY29udGFpbmVyJyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byBpbmRpdmlkdWFsIHNsaWRlcy5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LXNsaWRlJ1xuICAqL1xuICBzbGlkZUNsYXNzOiAnb3JiaXQtc2xpZGUnLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBidWxsZXQgY29udGFpbmVyLiBZb3UncmUgd2VsY29tZS5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LWJ1bGxldHMnXG4gICovXG4gIGJveE9mQnVsbGV0czogJ29yYml0LWJ1bGxldHMnLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBgbmV4dGAgbmF2aWdhdGlvbiBidXR0b24uXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdvcmJpdC1uZXh0J1xuICAqL1xuICBuZXh0Q2xhc3M6ICdvcmJpdC1uZXh0JyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYHByZXZpb3VzYCBuYXZpZ2F0aW9uIGJ1dHRvbi5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LXByZXZpb3VzJ1xuICAqL1xuICBwcmV2Q2xhc3M6ICdvcmJpdC1wcmV2aW91cycsXG4gIC8qKlxuICAqIEJvb2xlYW4gdG8gZmxhZyB0aGUganMgdG8gdXNlIG1vdGlvbiB1aSBjbGFzc2VzIG9yIG5vdC4gRGVmYXVsdCB0byB0cnVlIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0eS5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICB1c2VNVUk6IHRydWVcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihPcmJpdCwgJ09yYml0Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBSZXNwb25zaXZlTWVudSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5hY2NvcmRpb25NZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmRyaWxsZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5kcm9wZG93bi1tZW51XG4gKi9cblxuY2xhc3MgUmVzcG9uc2l2ZU1lbnUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHJlc3BvbnNpdmUgbWVudS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93biBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgdGhpcy5ydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgncmVzcG9uc2l2ZS1tZW51Jyk7XG4gICAgdGhpcy5jdXJyZW50TXEgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudFBsdWdpbiA9IG51bGw7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdSZXNwb25zaXZlTWVudScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBNZW51IGJ5IHBhcnNpbmcgdGhlIGNsYXNzZXMgZnJvbSB0aGUgJ2RhdGEtUmVzcG9uc2l2ZU1lbnUnIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICAvLyBUaGUgZmlyc3QgdGltZSBhbiBJbnRlcmNoYW5nZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQsIHRoaXMucnVsZXMgaXMgY29udmVydGVkIGZyb20gYSBzdHJpbmcgb2YgXCJjbGFzc2VzXCIgdG8gYW4gb2JqZWN0IG9mIHJ1bGVzXG4gICAgaWYgKHR5cGVvZiB0aGlzLnJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IHJ1bGVzVHJlZSA9IHt9O1xuXG4gICAgICAvLyBQYXJzZSBydWxlcyBmcm9tIFwiY2xhc3Nlc1wiIHB1bGxlZCBmcm9tIGRhdGEgYXR0cmlidXRlXG4gICAgICBsZXQgcnVsZXMgPSB0aGlzLnJ1bGVzLnNwbGl0KCcgJyk7XG5cbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBldmVyeSBydWxlIGZvdW5kXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBydWxlID0gcnVsZXNbaV0uc3BsaXQoJy0nKTtcbiAgICAgICAgbGV0IHJ1bGVTaXplID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVswXSA6ICdzbWFsbCc7XG4gICAgICAgIGxldCBydWxlUGx1Z2luID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVsxXSA6IHJ1bGVbMF07XG5cbiAgICAgICAgaWYgKE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dICE9PSBudWxsKSB7XG4gICAgICAgICAgcnVsZXNUcmVlW3J1bGVTaXplXSA9IE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMucnVsZXMgPSBydWxlc1RyZWU7XG4gICAgfVxuXG4gICAgaWYgKCEkLmlzRW1wdHlPYmplY3QodGhpcy5ydWxlcykpIHtcbiAgICAgIHRoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIE1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH0pO1xuICAgIC8vICQod2luZG93KS5vbigncmVzaXplLnpmLlJlc3BvbnNpdmVNZW51JywgZnVuY3Rpb24oKSB7XG4gICAgLy8gICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICAvLyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgc2NyZWVuIHdpZHRoIGFnYWluc3QgYXZhaWxhYmxlIG1lZGlhIHF1ZXJpZXMuIElmIHRoZSBtZWRpYSBxdWVyeSBoYXMgY2hhbmdlZCwgYW5kIHRoZSBwbHVnaW4gbmVlZGVkIGhhcyBjaGFuZ2VkLCB0aGUgcGx1Z2lucyB3aWxsIHN3YXAgb3V0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja01lZGlhUXVlcmllcygpIHtcbiAgICB2YXIgbWF0Y2hlZE1xLCBfdGhpcyA9IHRoaXM7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcnVsZSBhbmQgZmluZCB0aGUgbGFzdCBtYXRjaGluZyBydWxlXG4gICAgJC5lYWNoKHRoaXMucnVsZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KGtleSkpIHtcbiAgICAgICAgbWF0Y2hlZE1xID0ga2V5O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTm8gbWF0Y2g/IE5vIGRpY2VcbiAgICBpZiAoIW1hdGNoZWRNcSkgcmV0dXJuO1xuXG4gICAgLy8gUGx1Z2luIGFscmVhZHkgaW5pdGlhbGl6ZWQ/IFdlIGdvb2RcbiAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luIGluc3RhbmNlb2YgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbikgcmV0dXJuO1xuXG4gICAgLy8gUmVtb3ZlIGV4aXN0aW5nIHBsdWdpbi1zcGVjaWZpYyBDU1MgY2xhc3Nlc1xuICAgICQuZWFjaChNZW51UGx1Z2lucywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgX3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModmFsdWUuY3NzQ2xhc3MpO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIHRoZSBDU1MgY2xhc3MgZm9yIHRoZSBuZXcgcGx1Z2luXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLnJ1bGVzW21hdGNoZWRNcV0uY3NzQ2xhc3MpO1xuXG4gICAgLy8gQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBuZXcgcGx1Z2luXG4gICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbikgdGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKTtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBuZXcgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbih0aGlzLiRlbGVtZW50LCB7fSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IHBsdWdpbiBvbiB0aGlzIGVsZW1lbnQsIGFzIHdlbGwgYXMgdGhlIHdpbmRvdyByZXNpemUgaGFuZGxlciB0aGF0IHN3aXRjaGVzIHRoZSBwbHVnaW5zIG91dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgJCh3aW5kb3cpLm9mZignLnpmLlJlc3BvbnNpdmVNZW51Jyk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblJlc3BvbnNpdmVNZW51LmRlZmF1bHRzID0ge307XG5cbi8vIFRoZSBwbHVnaW4gbWF0Y2hlcyB0aGUgcGx1Z2luIGNsYXNzZXMgd2l0aCB0aGVzZSBwbHVnaW4gaW5zdGFuY2VzLlxudmFyIE1lbnVQbHVnaW5zID0ge1xuICBkcm9wZG93bjoge1xuICAgIGNzc0NsYXNzOiAnZHJvcGRvd24nLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snZHJvcGRvd24tbWVudSddIHx8IG51bGxcbiAgfSxcbiBkcmlsbGRvd246IHtcbiAgICBjc3NDbGFzczogJ2RyaWxsZG93bicsXG4gICAgcGx1Z2luOiBGb3VuZGF0aW9uLl9wbHVnaW5zWydkcmlsbGRvd24nXSB8fCBudWxsXG4gIH0sXG4gIGFjY29yZGlvbjoge1xuICAgIGNzc0NsYXNzOiAnYWNjb3JkaW9uLW1lbnUnLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snYWNjb3JkaW9uLW1lbnUnXSB8fCBudWxsXG4gIH1cbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXNwb25zaXZlTWVudSwgJ1Jlc3BvbnNpdmVNZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBSZXNwb25zaXZlVG9nZ2xlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlVG9nZ2xlXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqL1xuXG5jbGFzcyBSZXNwb25zaXZlVG9nZ2xlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVGFiIEJhci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlVG9nZ2xlI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGF0dGFjaCB0YWIgYmFyIGZ1bmN0aW9uYWxpdHkgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSB0YWIgYmFyIGJ5IGZpbmRpbmcgdGhlIHRhcmdldCBlbGVtZW50LCB0b2dnbGluZyBlbGVtZW50LCBhbmQgcnVubmluZyB1cGRhdGUoKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgdGFyZ2V0SUQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtdG9nZ2xlJyk7XG4gICAgaWYgKCF0YXJnZXRJRCkge1xuICAgICAgY29uc29sZS5lcnJvcignWW91ciB0YWIgYmFyIG5lZWRzIGFuIElEIG9mIGEgTWVudSBhcyB0aGUgdmFsdWUgb2YgZGF0YS10YWItYmFyLicpO1xuICAgIH1cblxuICAgIHRoaXMuJHRhcmdldE1lbnUgPSAkKGAjJHt0YXJnZXRJRH1gKTtcbiAgICB0aGlzLiR0b2dnbGVyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS10b2dnbGVdJyk7XG5cbiAgICB0aGlzLl91cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG5lY2Vzc2FyeSBldmVudCBoYW5kbGVycyBmb3IgdGhlIHRhYiBiYXIgdG8gd29yay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl91cGRhdGVNcUhhbmRsZXIgPSB0aGlzLl91cGRhdGUuYmluZCh0aGlzKTtcbiAgICBcbiAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3VwZGF0ZU1xSGFuZGxlcik7XG5cbiAgICB0aGlzLiR0b2dnbGVyLm9uKCdjbGljay56Zi5yZXNwb25zaXZlVG9nZ2xlJywgdGhpcy50b2dnbGVNZW51LmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgY3VycmVudCBtZWRpYSBxdWVyeSB0byBkZXRlcm1pbmUgaWYgdGhlIHRhYiBiYXIgc2hvdWxkIGJlIHZpc2libGUgb3IgaGlkZGVuLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGUoKSB7XG4gICAgLy8gTW9iaWxlXG4gICAgaWYgKCFGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuaGlkZUZvcikpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuc2hvdygpO1xuICAgICAgdGhpcy4kdGFyZ2V0TWVudS5oaWRlKCk7XG4gICAgfVxuXG4gICAgLy8gRGVza3RvcFxuICAgIGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKCk7XG4gICAgICB0aGlzLiR0YXJnZXRNZW51LnNob3coKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgZWxlbWVudCBhdHRhY2hlZCB0byB0aGUgdGFiIGJhci4gVGhlIHRvZ2dsZSBvbmx5IGhhcHBlbnMgaWYgdGhlIHNjcmVlbiBpcyBzbWFsbCBlbm91Z2ggdG8gYWxsb3cgaXQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAqL1xuICB0b2dnbGVNZW51KCkgeyAgIFxuICAgIGlmICghRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLmhpZGVGb3IpKSB7XG4gICAgICB0aGlzLiR0YXJnZXRNZW51LnRvZ2dsZSgwKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBlbGVtZW50IGF0dGFjaGVkIHRvIHRoZSB0YWIgYmFyIHRvZ2dsZXMuXG4gICAgICAgKiBAZXZlbnQgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgfVxuICB9O1xuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgdGhpcy4kdG9nZ2xlci5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgXG4gICAgJCh3aW5kb3cpLm9mZignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fdXBkYXRlTXFIYW5kbGVyKTtcbiAgICBcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBicmVha3BvaW50IGFmdGVyIHdoaWNoIHRoZSBtZW51IGlzIGFsd2F5cyBzaG93biwgYW5kIHRoZSB0YWIgYmFyIGlzIGhpZGRlbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnbWVkaXVtJ1xuICAgKi9cbiAgaGlkZUZvcjogJ21lZGl1bSdcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXNwb25zaXZlVG9nZ2xlLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogUmV2ZWFsIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXZlYWxcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uIGlmIHVzaW5nIGFuaW1hdGlvbnNcbiAqL1xuXG5jbGFzcyBSZXZlYWwge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXZlYWwuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGZvciB0aGUgbW9kYWwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9uYWwgcGFyYW1ldGVycy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgUmV2ZWFsLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmV2ZWFsJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignUmV2ZWFsJywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZScsXG4gICAgICAnVEFCJzogJ3RhYl9mb3J3YXJkJyxcbiAgICAgICdTSElGVF9UQUInOiAndGFiX2JhY2t3YXJkJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBtb2RhbCBieSBhZGRpbmcgdGhlIG92ZXJsYXkgYW5kIGNsb3NlIGJ1dHRvbnMsIChpZiBzZWxlY3RlZCkuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLmlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpO1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLmNhY2hlZCA9IHttcTogRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmN1cnJlbnR9O1xuICAgIHRoaXMuaXNNb2JpbGUgPSBtb2JpbGVTbmlmZigpO1xuXG4gICAgdGhpcy4kYW5jaG9yID0gJChgW2RhdGEtb3Blbj1cIiR7dGhpcy5pZH1cIl1gKS5sZW5ndGggPyAkKGBbZGF0YS1vcGVuPVwiJHt0aGlzLmlkfVwiXWApIDogJChgW2RhdGEtdG9nZ2xlPVwiJHt0aGlzLmlkfVwiXWApO1xuICAgIHRoaXMuJGFuY2hvci5hdHRyKHtcbiAgICAgICdhcmlhLWNvbnRyb2xzJzogdGhpcy5pZCxcbiAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICd0YWJpbmRleCc6IDBcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbiB8fCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmdWxsJykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5mdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgIHRoaXMub3B0aW9ucy5vdmVybGF5ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiAhdGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheSA9IHRoaXMuX21ha2VPdmVybGF5KHRoaXMuaWQpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ2RpYWxvZycsXG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICdkYXRhLXlldGktYm94JzogdGhpcy5pZCxcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogdGhpcy5pZFxuICAgIH0pO1xuXG4gICAgaWYodGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5kZXRhY2goKS5hcHBlbmRUbyh0aGlzLiRvdmVybGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5kZXRhY2goKS5hcHBlbmRUbygkKCdib2R5JykpO1xuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnd2l0aG91dC1vdmVybGF5Jyk7XG4gICAgfVxuICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmsgJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICggYCMke3RoaXMuaWR9YCkpIHtcbiAgICAgICQod2luZG93KS5vbmUoJ2xvYWQuemYucmV2ZWFsJywgdGhpcy5vcGVuLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIG92ZXJsYXkgZGl2IHRvIGRpc3BsYXkgYmVoaW5kIHRoZSBtb2RhbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tYWtlT3ZlcmxheShpZCkge1xuICAgIHZhciAkb3ZlcmxheSA9ICQoJzxkaXY+PC9kaXY+JylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdyZXZlYWwtb3ZlcmxheScpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbygnYm9keScpO1xuICAgIHJldHVybiAkb3ZlcmxheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHBvc2l0aW9uIG9mIG1vZGFsXG4gICAqIFRPRE86ICBGaWd1cmUgb3V0IGlmIHdlIGFjdHVhbGx5IG5lZWQgdG8gY2FjaGUgdGhlc2UgdmFsdWVzIG9yIGlmIGl0IGRvZXNuJ3QgbWF0dGVyXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgdmFyIHdpZHRoID0gdGhpcy4kZWxlbWVudC5vdXRlcldpZHRoKCk7XG4gICAgdmFyIG91dGVyV2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy4kZWxlbWVudC5vdXRlckhlaWdodCgpO1xuICAgIHZhciBvdXRlckhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcbiAgICB2YXIgbGVmdCwgdG9wO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuaE9mZnNldCA9PT0gJ2F1dG8nKSB7XG4gICAgICBsZWZ0ID0gcGFyc2VJbnQoKG91dGVyV2lkdGggLSB3aWR0aCkgLyAyLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMuaE9mZnNldCwgMTApO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnZPZmZzZXQgPT09ICdhdXRvJykge1xuICAgICAgaWYgKGhlaWdodCA+IG91dGVySGVpZ2h0KSB7XG4gICAgICAgIHRvcCA9IHBhcnNlSW50KE1hdGgubWluKDEwMCwgb3V0ZXJIZWlnaHQgLyAxMCksIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvcCA9IHBhcnNlSW50KChvdXRlckhlaWdodCAtIGhlaWdodCkgLyA0LCAxMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IHBhcnNlSW50KHRoaXMub3B0aW9ucy52T2Zmc2V0LCAxMCk7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHt0b3A6IHRvcCArICdweCd9KTtcbiAgICAvLyBvbmx5IHdvcnJ5IGFib3V0IGxlZnQgaWYgd2UgZG9uJ3QgaGF2ZSBhbiBvdmVybGF5IG9yIHdlIGhhdmVhICBob3Jpem9udGFsIG9mZnNldCxcbiAgICAvLyBvdGhlcndpc2Ugd2UncmUgcGVyZmVjdGx5IGluIHRoZSBtaWRkbGVcbiAgICBpZighdGhpcy4kb3ZlcmxheSB8fCAodGhpcy5vcHRpb25zLmhPZmZzZXQgIT09ICdhdXRvJykpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtsZWZ0OiBsZWZ0ICsgJ3B4J30pO1xuICAgICAgdGhpcy4kZWxlbWVudC5jc3Moe21hcmdpbjogJzBweCd9KTtcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgbW9kYWwuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogKGV2ZW50LCAkZWxlbWVudCkgPT4ge1xuICAgICAgICBpZiAoKGV2ZW50LnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0pIHx8XG4gICAgICAgICAgICAoJChldmVudC50YXJnZXQpLnBhcmVudHMoJ1tkYXRhLWNsb3NhYmxlXScpWzBdID09PSAkZWxlbWVudCkpIHsgLy8gb25seSBjbG9zZSByZXZlYWwgd2hlbiBpdCdzIGV4cGxpY2l0bHkgY2FsbGVkXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2UuYXBwbHkodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgdGhpcy4kYW5jaG9yLm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUud2hpY2ggPT09IDEzIHx8IGUud2hpY2ggPT09IDMyKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiB0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5vZmYoJy56Zi5yZXZlYWwnKS5vbignY2xpY2suemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8IFxuICAgICAgICAgICQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSB8fCBcbiAgICAgICAgICAgICEkLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHsgXG4gICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAkKHdpbmRvdykub24oYHBvcHN0YXRlLnpmLnJldmVhbDoke3RoaXMuaWR9YCwgdGhpcy5faGFuZGxlU3RhdGUuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgbW9kYWwgbWV0aG9kcyBvbiBiYWNrL2ZvcndhcmQgYnV0dG9uIGNsaWNrcyBvciBhbnkgb3RoZXIgZXZlbnQgdGhhdCB0cmlnZ2VycyBwb3BzdGF0ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9oYW5kbGVTdGF0ZShlKSB7XG4gICAgaWYod2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICggJyMnICsgdGhpcy5pZCkgJiYgIXRoaXMuaXNBY3RpdmUpeyB0aGlzLm9wZW4oKTsgfVxuICAgIGVsc2V7IHRoaXMuY2xvc2UoKTsgfVxuICB9XG5cblxuICAvKipcbiAgICogT3BlbnMgdGhlIG1vZGFsIGNvbnRyb2xsZWQgYnkgYHRoaXMuJGFuY2hvcmAsIGFuZCBjbG9zZXMgYWxsIG90aGVycyBieSBkZWZhdWx0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFJldmVhbCNjbG9zZW1lXG4gICAqIEBmaXJlcyBSZXZlYWwjb3BlblxuICAgKi9cbiAgb3BlbigpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICB2YXIgaGFzaCA9IGAjJHt0aGlzLmlkfWA7XG5cbiAgICAgIGlmICh3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGhhc2gpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgLy8gTWFrZSBlbGVtZW50cyBpbnZpc2libGUsIGJ1dCByZW1vdmUgZGlzcGxheTogbm9uZSBzbyB3ZSBjYW4gZ2V0IHNpemUgYW5kIHBvc2l0aW9uaW5nXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAuY3NzKHsgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJyB9KVxuICAgICAgICAuc2hvdygpXG4gICAgICAgIC5zY3JvbGxUb3AoMCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICB0aGlzLiRvdmVybGF5LmNzcyh7J3Zpc2liaWxpdHknOiAnaGlkZGVuJ30pLnNob3coKTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigpO1xuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmhpZGUoKVxuICAgICAgLmNzcyh7ICd2aXNpYmlsaXR5JzogJycgfSk7XG5cbiAgICBpZih0aGlzLiRvdmVybGF5KSB7XG4gICAgICB0aGlzLiRvdmVybGF5LmNzcyh7J3Zpc2liaWxpdHknOiAnJ30pLmhpZGUoKTtcbiAgICAgIGlmKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2Zhc3QnKSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdmYXN0Jyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ3Nsb3cnKSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdzbG93Jyk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tdWx0aXBsZU9wZW5lZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIG1vZGFsIG9wZW5zLlxuICAgICAgICogQ2xvc2VzIGFueSBvdGhlciBtb2RhbHMgdGhhdCBhcmUgY3VycmVudGx5IG9wZW5cbiAgICAgICAqIEBldmVudCBSZXZlYWwjY2xvc2VtZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYucmV2ZWFsJywgdGhpcy5pZCk7XG4gICAgfVxuICAgIC8vIE1vdGlvbiBVSSBtZXRob2Qgb2YgcmV2ZWFsXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb25Jbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW9uRm9jdXMoKXtcbiAgICAgICAgX3RoaXMuJGVsZW1lbnRcbiAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZSxcbiAgICAgICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kb3ZlcmxheSwgJ2ZhZGUtaW4nKTtcbiAgICAgIH1cbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbih0aGlzLiRlbGVtZW50LCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uSW4sICgpID0+IHtcbiAgICAgICAgdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcbiAgICAgICAgYWZ0ZXJBbmltYXRpb25Gb2N1cygpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGpRdWVyeSBtZXRob2Qgb2YgcmV2ZWFsXG4gICAgZWxzZSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5zaG93KDApO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5zaG93KHRoaXMub3B0aW9ucy5zaG93RGVsYXkpO1xuICAgIH1cblxuICAgIC8vIGhhbmRsZSBhY2Nlc3NpYmlsaXR5XG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmF0dHIoe1xuICAgICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZSxcbiAgICAgICAgJ3RhYmluZGV4JzogLTFcbiAgICAgIH0pXG4gICAgICAuZm9jdXMoKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIG1vZGFsIGhhcyBzdWNjZXNzZnVsbHkgb3BlbmVkLlxuICAgICAqIEBldmVudCBSZXZlYWwjb3BlblxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb3Blbi56Zi5yZXZlYWwnKTtcblxuICAgIGlmICh0aGlzLmlzTW9iaWxlKSB7XG4gICAgICB0aGlzLm9yaWdpbmFsU2Nyb2xsUG9zID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgJCgnaHRtbCwgYm9keScpLmFkZENsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuX2V4dHJhSGFuZGxlcnMoKTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV4dHJhIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgYm9keSBhbmQgd2luZG93IGlmIG5lY2Vzc2FyeS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9leHRyYUhhbmRsZXJzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLm92ZXJsYXkgJiYgdGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiAhdGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4pIHtcbiAgICAgICQoJ2JvZHknKS5vbignY2xpY2suemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8IFxuICAgICAgICAgICQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSB8fCBcbiAgICAgICAgICAgICEkLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICQod2luZG93KS5vbigna2V5ZG93bi56Zi5yZXZlYWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGxvY2sgZm9jdXMgd2l0aGluIG1vZGFsIHdoaWxlIHRhYmJpbmdcbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcbiAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgIHRhYl9mb3J3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmZpbmQoJzpmb2N1cycpLmlzKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmVxKC0xKSkpIHsgLy8gbGVmdCBtb2RhbCBkb3dud2FyZHMsIHNldHRpbmcgZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICAgICAgX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoID09PSAwKSB7IC8vIG5vIGZvY3VzYWJsZSBlbGVtZW50cyBpbnNpZGUgdGhlIG1vZGFsIGF0IGFsbCwgcHJldmVudCB0YWJiaW5nIGluIGdlbmVyYWxcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGFiX2JhY2t3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmZpbmQoJzpmb2N1cycpLmlzKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmVxKDApKSB8fCBfdGhpcy4kZWxlbWVudC5pcygnOmZvY3VzJykpIHsgLy8gbGVmdCBtb2RhbCB1cHdhcmRzLCBzZXR0aW5nIGZvY3VzIHRvIGxhc3QgZWxlbWVudFxuICAgICAgICAgICAgX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpLmZvY3VzKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCA9PT0gMCkgeyAvLyBubyBmb2N1c2FibGUgZWxlbWVudHMgaW5zaWRlIHRoZSBtb2RhbCBhdCBhbGwsIHByZXZlbnQgdGFiYmluZyBpbiBnZW5lcmFsXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyhfdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1jbG9zZV0nKSkpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IC8vIHNldCBmb2N1cyBiYWNrIHRvIGFuY2hvciBpZiBjbG9zZSBidXR0b24gaGFzIGJlZW4gYWN0aXZhdGVkXG4gICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJHRhcmdldC5pcyhfdGhpcy5mb2N1c2FibGVFbGVtZW50cykpIHsgLy8gZG9udCd0IHRyaWdnZXIgaWYgYWN1YWwgZWxlbWVudCBoYXMgZm9jdXMgKGkuZS4gaW5wdXRzLCBsaW5rcywgLi4uKVxuICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbihwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBtb2RhbC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBSZXZlYWwjY2xvc2VkXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIE1vdGlvbiBVSSBtZXRob2Qgb2YgaGlkaW5nXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJG92ZXJsYXksICdmYWRlLW91dCcsIGZpbmlzaFVwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmaW5pc2hVcCgpO1xuICAgICAgfVxuXG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsIHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQpO1xuICAgIH1cbiAgICAvLyBqUXVlcnkgbWV0aG9kIG9mIGhpZGluZ1xuICAgIGVsc2Uge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgwLCBmaW5pc2hVcCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZmluaXNoVXAoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKHRoaXMub3B0aW9ucy5oaWRlRGVsYXkpO1xuICAgIH1cblxuICAgIC8vIENvbmRpdGlvbmFscyB0byByZW1vdmUgZXh0cmEgZXZlbnQgbGlzdGVuZXJzIGFkZGVkIG9uIG9wZW5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICQod2luZG93KS5vZmYoJ2tleWRvd24uemYucmV2ZWFsJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiB0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gICAgICAkKCdib2R5Jykub2ZmKCdjbGljay56Zi5yZXZlYWwnKTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZigna2V5ZG93bi56Zi5yZXZlYWwnKTtcblxuICAgIGZ1bmN0aW9uIGZpbmlzaFVwKCkge1xuICAgICAgaWYgKF90aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgICQoJ2h0bWwsIGJvZHknKS5yZW1vdmVDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICAgICAgaWYoX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpIHtcbiAgICAgICAgICAkKCdib2R5Jykuc2Nyb2xsVG9wKF90aGlzLm9yaWdpbmFsU2Nyb2xsUG9zKTtcbiAgICAgICAgICBfdGhpcy5vcmlnaW5hbFNjcm9sbFBvcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgIC8qKlxuICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtb2RhbCBpcyBkb25lIGNsb3NpbmcuXG4gICAgICAqIEBldmVudCBSZXZlYWwjY2xvc2VkXG4gICAgICAqL1xuICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VkLnpmLnJldmVhbCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVzZXRzIHRoZSBtb2RhbCBjb250ZW50XG4gICAgKiBUaGlzIHByZXZlbnRzIGEgcnVubmluZyB2aWRlbyB0byBrZWVwIGdvaW5nIGluIHRoZSBiYWNrZ3JvdW5kXG4gICAgKi9cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc2V0T25DbG9zZSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5odG1sKHRoaXMuJGVsZW1lbnQuaHRtbCgpKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgIGlmIChfdGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgaWYgKHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKFwiXCIsIGRvY3VtZW50LnRpdGxlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgIH0gZWxzZSB7XG4gICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnO1xuICAgICAgIH1cbiAgICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2VkIHN0YXRlIG9mIGEgbW9kYWwuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYSBtb2RhbC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5hcHBlbmRUbygkKCdib2R5JykpOyAvLyBtb3ZlICRlbGVtZW50IG91dHNpZGUgb2YgJG92ZXJsYXkgdG8gcHJldmVudCBlcnJvciB1bnJlZ2lzdGVyUGx1Z2luKClcbiAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgpLm9mZigpLnJlbW92ZSgpO1xuICAgIH1cbiAgICB0aGlzLiRlbGVtZW50LmhpZGUoKS5vZmYoKTtcbiAgICB0aGlzLiRhbmNob3Iub2ZmKCcuemYnKTtcbiAgICAkKHdpbmRvdykub2ZmKGAuemYucmV2ZWFsOiR7dGhpcy5pZH1gKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfTtcbn1cblxuUmV2ZWFsLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogTW90aW9uLVVJIGNsYXNzIHRvIHVzZSBmb3IgYW5pbWF0ZWQgZWxlbWVudHMuIElmIG5vbmUgdXNlZCwgZGVmYXVsdHMgdG8gc2ltcGxlIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnc2xpZGUtaW4tbGVmdCdcbiAgICovXG4gIGFuaW1hdGlvbkluOiAnJyxcbiAgLyoqXG4gICAqIE1vdGlvbi1VSSBjbGFzcyB0byB1c2UgZm9yIGFuaW1hdGVkIGVsZW1lbnRzLiBJZiBub25lIHVzZWQsIGRlZmF1bHRzIHRvIHNpbXBsZSBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3NsaWRlLW91dC1yaWdodCdcbiAgICovXG4gIGFuaW1hdGlvbk91dDogJycsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gZGVsYXkgdGhlIG9wZW5pbmcgb2YgYSBtb2RhbCBhZnRlciBhIGNsaWNrIGlmIG5vIGFuaW1hdGlvbiB1c2VkLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICBzaG93RGVsYXk6IDAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gZGVsYXkgdGhlIGNsb3Npbmcgb2YgYSBtb2RhbCBhZnRlciBhIGNsaWNrIGlmIG5vIGFuaW1hdGlvbiB1c2VkLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICBoaWRlRGVsYXk6IDAsXG4gIC8qKlxuICAgKiBBbGxvd3MgYSBjbGljayBvbiB0aGUgYm9keS9vdmVybGF5IHRvIGNsb3NlIHRoZSBtb2RhbC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGNsb3NlIGlmIHRoZSB1c2VyIHByZXNzZXMgdGhlIGBFU0NBUEVgIGtleS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbG9zZU9uRXNjOiB0cnVlLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgYWxsb3dzIG11bHRpcGxlIG1vZGFscyB0byBiZSBkaXNwbGF5ZWQgYXQgb25jZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgbXVsdGlwbGVPcGVuZWQ6IGZhbHNlLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIG1vZGFsIHNob3VsZCBwdXNoIGRvd24gZnJvbSB0aGUgdG9wIG9mIHRoZSBzY3JlZW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgYXV0b1xuICAgKi9cbiAgdk9mZnNldDogJ2F1dG8nLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIG1vZGFsIHNob3VsZCBwdXNoIGluIGZyb20gdGhlIHNpZGUgb2YgdGhlIHNjcmVlbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBhdXRvXG4gICAqL1xuICBoT2Zmc2V0OiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGJlIGZ1bGxzY3JlZW4sIGNvbXBsZXRlbHkgYmxvY2tpbmcgb3V0IHRoZSByZXN0IG9mIHRoZSB2aWV3LiBKUyBjaGVja3MgZm9yIHRoaXMgYXMgd2VsbC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZnVsbFNjcmVlbjogZmFsc2UsXG4gIC8qKlxuICAgKiBQZXJjZW50YWdlIG9mIHNjcmVlbiBoZWlnaHQgdGhlIG1vZGFsIHNob3VsZCBwdXNoIHVwIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMFxuICAgKi9cbiAgYnRtT2Zmc2V0UGN0OiAxMCxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gZ2VuZXJhdGUgYW4gb3ZlcmxheSBkaXYsIHdoaWNoIHdpbGwgY292ZXIgdGhlIHZpZXcgd2hlbiBtb2RhbCBvcGVucy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBvdmVybGF5OiB0cnVlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byByZW1vdmUgYW5kIHJlaW5qZWN0IG1hcmt1cCBvbiBjbG9zZS4gU2hvdWxkIGJlIHRydWUgaWYgdXNpbmcgdmlkZW8gZWxlbWVudHMgdy9vIHVzaW5nIHByb3ZpZGVyJ3MgYXBpLCBvdGhlcndpc2UsIHZpZGVvcyB3aWxsIGNvbnRpbnVlIHRvIHBsYXkgaW4gdGhlIGJhY2tncm91bmQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIHJlc2V0T25DbG9zZTogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGFsdGVyIHRoZSB1cmwgb24gb3Blbi9jbG9zZSwgYW5kIGFsbG93cyB0aGUgdXNlIG9mIHRoZSBgYmFja2AgYnV0dG9uIHRvIGNsb3NlIG1vZGFscy4gQUxTTywgYWxsb3dzIGEgbW9kYWwgdG8gYXV0by1tYW5pYWNhbGx5IG9wZW4gb24gcGFnZSBsb2FkIElGIHRoZSBoYXNoID09PSB0aGUgbW9kYWwncyB1c2VyLXNldCBpZC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGVlcExpbms6IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oUmV2ZWFsLCAnUmV2ZWFsJyk7XG5cbmZ1bmN0aW9uIGlQaG9uZVNuaWZmKCkge1xuICByZXR1cm4gL2lQKGFkfGhvbmV8b2QpLipPUy8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG5cbmZ1bmN0aW9uIGFuZHJvaWRTbmlmZigpIHtcbiAgcmV0dXJuIC9BbmRyb2lkLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbn1cblxuZnVuY3Rpb24gbW9iaWxlU25pZmYoKSB7XG4gIHJldHVybiBpUGhvbmVTbmlmZigpIHx8IGFuZHJvaWRTbmlmZigpO1xufVxuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogU2xpZGVyIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5zbGlkZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRvdWNoXG4gKi9cblxuY2xhc3MgU2xpZGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBkcmlsbGRvd24gbWVudS5cbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgU2xpZGVyLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdTbGlkZXInKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdTbGlkZXInLCB7XG4gICAgICAnbHRyJzoge1xuICAgICAgICAnQVJST1dfUklHSFQnOiAnaW5jcmVhc2UnLFxuICAgICAgICAnQVJST1dfVVAnOiAnaW5jcmVhc2UnLFxuICAgICAgICAnQVJST1dfRE9XTic6ICdkZWNyZWFzZScsXG4gICAgICAgICdBUlJPV19MRUZUJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX1JJR0hUJzogJ2luY3JlYXNlX2Zhc3QnLFxuICAgICAgICAnU0hJRlRfQVJST1dfVVAnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICdTSElGVF9BUlJPV19ET1dOJzogJ2RlY3JlYXNlX2Zhc3QnLFxuICAgICAgICAnU0hJRlRfQVJST1dfTEVGVCc6ICdkZWNyZWFzZV9mYXN0J1xuICAgICAgfSxcbiAgICAgICdydGwnOiB7XG4gICAgICAgICdBUlJPV19MRUZUJzogJ2luY3JlYXNlJyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX0xFRlQnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICdTSElGVF9BUlJPV19SSUdIVCc6ICdkZWNyZWFzZV9mYXN0J1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpbGl6ZXMgdGhlIHBsdWdpbiBieSByZWFkaW5nL3NldHRpbmcgYXR0cmlidXRlcywgY3JlYXRpbmcgY29sbGVjdGlvbnMgYW5kIHNldHRpbmcgdGhlIGluaXRpYWwgcG9zaXRpb24gb2YgdGhlIGhhbmRsZShzKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLmlucHV0cyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKTtcbiAgICB0aGlzLmhhbmRsZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXNsaWRlci1oYW5kbGVdJyk7XG5cbiAgICB0aGlzLiRoYW5kbGUgPSB0aGlzLmhhbmRsZXMuZXEoMCk7XG4gICAgdGhpcy4kaW5wdXQgPSB0aGlzLmlucHV0cy5sZW5ndGggPyB0aGlzLmlucHV0cy5lcSgwKSA6ICQoYCMke3RoaXMuJGhhbmRsZS5hdHRyKCdhcmlhLWNvbnRyb2xzJyl9YCk7XG4gICAgdGhpcy4kZmlsbCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc2xpZGVyLWZpbGxdJykuY3NzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJywgMCk7XG5cbiAgICB2YXIgaXNEYmwgPSBmYWxzZSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmlucHV0cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuaW5wdXRzID0gJCgpLmFkZCh0aGlzLiRpbnB1dCk7XG4gICAgICB0aGlzLm9wdGlvbnMuYmluZGluZyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX3NldEluaXRBdHRyKDApO1xuICAgIHRoaXMuX2V2ZW50cyh0aGlzLiRoYW5kbGUpO1xuXG4gICAgaWYgKHRoaXMuaGFuZGxlc1sxXSkge1xuICAgICAgdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuJGhhbmRsZTIgPSB0aGlzLmhhbmRsZXMuZXEoMSk7XG4gICAgICB0aGlzLiRpbnB1dDIgPSB0aGlzLmlucHV0cy5sZW5ndGggPiAxID8gdGhpcy5pbnB1dHMuZXEoMSkgOiAkKGAjJHt0aGlzLiRoYW5kbGUyLmF0dHIoJ2FyaWEtY29udHJvbHMnKX1gKTtcblxuICAgICAgaWYgKCF0aGlzLmlucHV0c1sxXSkge1xuICAgICAgICB0aGlzLmlucHV0cyA9IHRoaXMuaW5wdXRzLmFkZCh0aGlzLiRpbnB1dDIpO1xuICAgICAgfVxuICAgICAgaXNEYmwgPSB0cnVlO1xuXG4gICAgICB0aGlzLl9zZXRIYW5kbGVQb3ModGhpcy4kaGFuZGxlLCB0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0LCB0cnVlLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF90aGlzLiRoYW5kbGUyLCBfdGhpcy5vcHRpb25zLmluaXRpYWxFbmQsIHRydWUpO1xuICAgICAgfSk7XG4gICAgICAvLyB0aGlzLiRoYW5kbGUudHJpZ2dlckhhbmRsZXIoJ2NsaWNrLnpmLnNsaWRlcicpO1xuICAgICAgdGhpcy5fc2V0SW5pdEF0dHIoMSk7XG4gICAgICB0aGlzLl9ldmVudHModGhpcy4kaGFuZGxlMik7XG4gICAgfVxuXG4gICAgaWYgKCFpc0RibCkge1xuICAgICAgdGhpcy5fc2V0SGFuZGxlUG9zKHRoaXMuJGhhbmRsZSwgdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBzZWxlY3RlZCBoYW5kbGUgYW5kIGZpbGwgYmFyLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRobmRsIC0gdGhlIHNlbGVjdGVkIGhhbmRsZSB0byBtb3ZlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gbG9jYXRpb24gLSBmbG9hdGluZyBwb2ludCBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcyBvZiB0aGUgc2xpZGVyIGJhci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIG9uIGNvbXBsZXRpb24uXG4gICAqIEBmaXJlcyBTbGlkZXIjbW92ZWRcbiAgICogQGZpcmVzIFNsaWRlciNjaGFuZ2VkXG4gICAqL1xuICBfc2V0SGFuZGxlUG9zKCRobmRsLCBsb2NhdGlvbiwgbm9JbnZlcnQsIGNiKSB7XG4gICAgLy8gZG9uJ3QgbW92ZSBpZiB0aGUgc2xpZGVyIGhhcyBiZWVuIGRpc2FibGVkIHNpbmNlIGl0cyBpbml0aWFsaXphdGlvblxuICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMub3B0aW9ucy5kaXNhYmxlZENsYXNzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL21pZ2h0IG5lZWQgdG8gYWx0ZXIgdGhhdCBzbGlnaHRseSBmb3IgYmFycyB0aGF0IHdpbGwgaGF2ZSBvZGQgbnVtYmVyIHNlbGVjdGlvbnMuXG4gICAgbG9jYXRpb24gPSBwYXJzZUZsb2F0KGxvY2F0aW9uKTsvL29uIGlucHV0IGNoYW5nZSBldmVudHMsIGNvbnZlcnQgc3RyaW5nIHRvIG51bWJlci4uLmdydW1ibGUuXG5cbiAgICAvLyBwcmV2ZW50IHNsaWRlciBmcm9tIHJ1bm5pbmcgb3V0IG9mIGJvdW5kcywgaWYgdmFsdWUgZXhjZWVkcyB0aGUgbGltaXRzIHNldCB0aHJvdWdoIG9wdGlvbnMsIG92ZXJyaWRlIHRoZSB2YWx1ZSB0byBtaW4vbWF4XG4gICAgaWYgKGxvY2F0aW9uIDwgdGhpcy5vcHRpb25zLnN0YXJ0KSB7IGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLnN0YXJ0OyB9XG4gICAgZWxzZSBpZiAobG9jYXRpb24gPiB0aGlzLm9wdGlvbnMuZW5kKSB7IGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLmVuZDsgfVxuXG4gICAgdmFyIGlzRGJsID0gdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkO1xuXG4gICAgaWYgKGlzRGJsKSB7IC8vdGhpcyBibG9jayBpcyB0byBwcmV2ZW50IDIgaGFuZGxlcyBmcm9tIGNyb3NzaW5nIGVhY2hvdGhlci4gQ291bGQvc2hvdWxkIGJlIGltcHJvdmVkLlxuICAgICAgaWYgKHRoaXMuaGFuZGxlcy5pbmRleCgkaG5kbCkgPT09IDApIHtcbiAgICAgICAgdmFyIGgyVmFsID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGUyLmF0dHIoJ2FyaWEtdmFsdWVub3cnKSk7XG4gICAgICAgIGxvY2F0aW9uID0gbG9jYXRpb24gPj0gaDJWYWwgPyBoMlZhbCAtIHRoaXMub3B0aW9ucy5zdGVwIDogbG9jYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaDFWYWwgPSBwYXJzZUZsb2F0KHRoaXMuJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgICAgICBsb2NhdGlvbiA9IGxvY2F0aW9uIDw9IGgxVmFsID8gaDFWYWwgKyB0aGlzLm9wdGlvbnMuc3RlcCA6IGxvY2F0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vdGhpcyBpcyBmb3Igc2luZ2xlLWhhbmRsZWQgdmVydGljYWwgc2xpZGVycywgaXQgYWRqdXN0cyB0aGUgdmFsdWUgdG8gYWNjb3VudCBmb3IgdGhlIHNsaWRlciBiZWluZyBcInVwc2lkZS1kb3duXCJcbiAgICAvL2ZvciBjbGljayBhbmQgZHJhZyBldmVudHMsIGl0J3Mgd2VpcmQgZHVlIHRvIHRoZSBzY2FsZSgtMSwgMSkgY3NzIHByb3BlcnR5XG4gICAgaWYgKHRoaXMub3B0aW9ucy52ZXJ0aWNhbCAmJiAhbm9JbnZlcnQpIHtcbiAgICAgIGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLmVuZCAtIGxvY2F0aW9uO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHZlcnQgPSB0aGlzLm9wdGlvbnMudmVydGljYWwsXG4gICAgICAgIGhPclcgPSB2ZXJ0ID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBsT3JUID0gdmVydCA/ICd0b3AnIDogJ2xlZnQnLFxuICAgICAgICBoYW5kbGVEaW0gPSAkaG5kbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtoT3JXXSxcbiAgICAgICAgZWxlbURpbSA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaE9yV10sXG4gICAgICAgIC8vcGVyY2VudGFnZSBvZiBiYXIgbWluL21heCB2YWx1ZSBiYXNlZCBvbiBjbGljayBvciBkcmFnIHBvaW50XG4gICAgICAgIHBjdE9mQmFyID0gcGVyY2VudChsb2NhdGlvbiAtIHRoaXMub3B0aW9ucy5zdGFydCwgdGhpcy5vcHRpb25zLmVuZCAtIHRoaXMub3B0aW9ucy5zdGFydCkudG9GaXhlZCgyKSxcbiAgICAgICAgLy9udW1iZXIgb2YgYWN0dWFsIHBpeGVscyB0byBzaGlmdCB0aGUgaGFuZGxlLCBiYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBvYnRhaW5lZCBhYm92ZVxuICAgICAgICBweFRvTW92ZSA9IChlbGVtRGltIC0gaGFuZGxlRGltKSAqIHBjdE9mQmFyLFxuICAgICAgICAvL3BlcmNlbnRhZ2Ugb2YgYmFyIHRvIHNoaWZ0IHRoZSBoYW5kbGVcbiAgICAgICAgbW92ZW1lbnQgPSAocGVyY2VudChweFRvTW92ZSwgZWxlbURpbSkgKiAxMDApLnRvRml4ZWQodGhpcy5vcHRpb25zLmRlY2ltYWwpO1xuICAgICAgICAvL2ZpeGluZyB0aGUgZGVjaW1hbCB2YWx1ZSBmb3IgdGhlIGxvY2F0aW9uIG51bWJlciwgaXMgcGFzc2VkIHRvIG90aGVyIG1ldGhvZHMgYXMgYSBmaXhlZCBmbG9hdGluZy1wb2ludCB2YWx1ZVxuICAgICAgICBsb2NhdGlvbiA9IHBhcnNlRmxvYXQobG9jYXRpb24udG9GaXhlZCh0aGlzLm9wdGlvbnMuZGVjaW1hbCkpO1xuICAgICAgICAvLyBkZWNsYXJlIGVtcHR5IG9iamVjdCBmb3IgY3NzIGFkanVzdG1lbnRzLCBvbmx5IHVzZWQgd2l0aCAyIGhhbmRsZWQtc2xpZGVyc1xuICAgIHZhciBjc3MgPSB7fTtcblxuICAgIHRoaXMuX3NldFZhbHVlcygkaG5kbCwgbG9jYXRpb24pO1xuXG4gICAgLy8gVE9ETyB1cGRhdGUgdG8gY2FsY3VsYXRlIGJhc2VkIG9uIHZhbHVlcyBzZXQgdG8gcmVzcGVjdGl2ZSBpbnB1dHM/P1xuICAgIGlmIChpc0RibCkge1xuICAgICAgdmFyIGlzTGVmdEhuZGwgPSB0aGlzLmhhbmRsZXMuaW5kZXgoJGhuZGwpID09PSAwLFxuICAgICAgICAgIC8vZW1wdHkgdmFyaWFibGUsIHdpbGwgYmUgdXNlZCBmb3IgbWluLWhlaWdodC93aWR0aCBmb3IgZmlsbCBiYXJcbiAgICAgICAgICBkaW0sXG4gICAgICAgICAgLy9wZXJjZW50YWdlIHcvaCBvZiB0aGUgaGFuZGxlIGNvbXBhcmVkIHRvIHRoZSBzbGlkZXIgYmFyXG4gICAgICAgICAgaGFuZGxlUGN0ID0gIH5+KHBlcmNlbnQoaGFuZGxlRGltLCBlbGVtRGltKSAqIDEwMCk7XG4gICAgICAvL2lmIGxlZnQgaGFuZGxlLCB0aGUgbWF0aCBpcyBzbGlnaHRseSBkaWZmZXJlbnQgdGhhbiBpZiBpdCdzIHRoZSByaWdodCBoYW5kbGUsIGFuZCB0aGUgbGVmdC90b3AgcHJvcGVydHkgbmVlZHMgdG8gYmUgY2hhbmdlZCBmb3IgdGhlIGZpbGwgYmFyXG4gICAgICBpZiAoaXNMZWZ0SG5kbCkge1xuICAgICAgICAvL2xlZnQgb3IgdG9wIHBlcmNlbnRhZ2UgdmFsdWUgdG8gYXBwbHkgdG8gdGhlIGZpbGwgYmFyLlxuICAgICAgICBjc3NbbE9yVF0gPSBgJHttb3ZlbWVudH0lYDtcbiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIG5ldyBtaW4taGVpZ2h0L3dpZHRoIGZvciB0aGUgZmlsbCBiYXIuXG4gICAgICAgIGRpbSA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlMlswXS5zdHlsZVtsT3JUXSkgLSBtb3ZlbWVudCArIGhhbmRsZVBjdDtcbiAgICAgICAgLy90aGlzIGNhbGxiYWNrIGlzIG5lY2Vzc2FyeSB0byBwcmV2ZW50IGVycm9ycyBhbmQgYWxsb3cgdGhlIHByb3BlciBwbGFjZW1lbnQgYW5kIGluaXRpYWxpemF0aW9uIG9mIGEgMi1oYW5kbGVkIHNsaWRlclxuICAgICAgICAvL3BsdXMsIGl0IG1lYW5zIHdlIGRvbid0IGNhcmUgaWYgJ2RpbScgaXNOYU4gb24gaW5pdCwgaXQgd29uJ3QgYmUgaW4gdGhlIGZ1dHVyZS5cbiAgICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9Ly90aGlzIGlzIG9ubHkgbmVlZGVkIGZvciB0aGUgaW5pdGlhbGl6YXRpb24gb2YgMiBoYW5kbGVkIHNsaWRlcnNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vanVzdCBjYWNoaW5nIHRoZSB2YWx1ZSBvZiB0aGUgbGVmdC9ib3R0b20gaGFuZGxlJ3MgbGVmdC90b3AgcHJvcGVydHlcbiAgICAgICAgdmFyIGhhbmRsZVBvcyA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlWzBdLnN0eWxlW2xPclRdKTtcbiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIG5ldyBtaW4taGVpZ2h0L3dpZHRoIGZvciB0aGUgZmlsbCBiYXIuIFVzZSBpc05hTiB0byBwcmV2ZW50IGZhbHNlIHBvc2l0aXZlcyBmb3IgbnVtYmVycyA8PSAwXG4gICAgICAgIC8vYmFzZWQgb24gdGhlIHBlcmNlbnRhZ2Ugb2YgbW92ZW1lbnQgb2YgdGhlIGhhbmRsZSBiZWluZyBtYW5pcHVsYXRlZCwgbGVzcyB0aGUgb3Bwb3NpbmcgaGFuZGxlJ3MgbGVmdC90b3AgcG9zaXRpb24sIHBsdXMgdGhlIHBlcmNlbnRhZ2Ugdy9oIG9mIHRoZSBoYW5kbGUgaXRzZWxmXG4gICAgICAgIGRpbSA9IG1vdmVtZW50IC0gKGlzTmFOKGhhbmRsZVBvcykgPyB0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0LygodGhpcy5vcHRpb25zLmVuZC10aGlzLm9wdGlvbnMuc3RhcnQpLzEwMCkgOiBoYW5kbGVQb3MpICsgaGFuZGxlUGN0O1xuICAgICAgfVxuICAgICAgLy8gYXNzaWduIHRoZSBtaW4taGVpZ2h0L3dpZHRoIHRvIG91ciBjc3Mgb2JqZWN0XG4gICAgICBjc3NbYG1pbi0ke2hPcld9YF0gPSBgJHtkaW19JWA7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5vbmUoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhhbmRsZSBpcyBkb25lIG1vdmluZy5cbiAgICAgICAgICAgICAgICAgICAgICogQGV2ZW50IFNsaWRlciNtb3ZlZFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignbW92ZWQuemYuc2xpZGVyJywgWyRobmRsXSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAvL2JlY2F1c2Ugd2UgZG9uJ3Qga25vdyBleGFjdGx5IGhvdyB0aGUgaGFuZGxlIHdpbGwgYmUgbW92ZWQsIGNoZWNrIHRoZSBhbW91bnQgb2YgdGltZSBpdCBzaG91bGQgdGFrZSB0byBtb3ZlLlxuICAgIHZhciBtb3ZlVGltZSA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnZHJhZ2dpbmcnKSA/IDEwMDAvNjAgOiB0aGlzLm9wdGlvbnMubW92ZVRpbWU7XG5cbiAgICBGb3VuZGF0aW9uLk1vdmUobW92ZVRpbWUsICRobmRsLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vYWRqdXN0aW5nIHRoZSBsZWZ0L3RvcCBwcm9wZXJ0eSBvZiB0aGUgaGFuZGxlLCBiYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBjYWxjdWxhdGVkIGFib3ZlXG4gICAgICAkaG5kbC5jc3MobE9yVCwgYCR7bW92ZW1lbnR9JWApO1xuXG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQpIHtcbiAgICAgICAgLy9pZiBzaW5nbGUtaGFuZGxlZCwgYSBzaW1wbGUgbWV0aG9kIHRvIGV4cGFuZCB0aGUgZmlsbCBiYXJcbiAgICAgICAgX3RoaXMuJGZpbGwuY3NzKGhPclcsIGAke3BjdE9mQmFyICogMTAwfSVgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vb3RoZXJ3aXNlLCB1c2UgdGhlIGNzcyBvYmplY3Qgd2UgY3JlYXRlZCBhYm92ZVxuICAgICAgICBfdGhpcy4kZmlsbC5jc3MoY3NzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHZhbHVlIGhhcyBub3QgYmVlbiBjaGFuZ2UgZm9yIGEgZ2l2ZW4gdGltZS5cbiAgICAgKiBAZXZlbnQgU2xpZGVyI2NoYW5nZWRcbiAgICAgKi9cbiAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZWQuemYuc2xpZGVyJywgWyRobmRsXSk7XG4gICAgfSwgX3RoaXMub3B0aW9ucy5jaGFuZ2VkRGVsYXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGluaXRpYWwgYXR0cmlidXRlIGZvciB0aGUgc2xpZGVyIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gaW5kZXggb2YgdGhlIGN1cnJlbnQgaGFuZGxlL2lucHV0IHRvIHVzZS5cbiAgICovXG4gIF9zZXRJbml0QXR0cihpZHgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlucHV0cy5lcShpZHgpLmF0dHIoJ2lkJykgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnc2xpZGVyJyk7XG4gICAgdGhpcy5pbnB1dHMuZXEoaWR4KS5hdHRyKHtcbiAgICAgICdpZCc6IGlkLFxuICAgICAgJ21heCc6IHRoaXMub3B0aW9ucy5lbmQsXG4gICAgICAnbWluJzogdGhpcy5vcHRpb25zLnN0YXJ0LFxuICAgICAgJ3N0ZXAnOiB0aGlzLm9wdGlvbnMuc3RlcFxuICAgIH0pO1xuICAgIHRoaXMuaGFuZGxlcy5lcShpZHgpLmF0dHIoe1xuICAgICAgJ3JvbGUnOiAnc2xpZGVyJyxcbiAgICAgICdhcmlhLWNvbnRyb2xzJzogaWQsXG4gICAgICAnYXJpYS12YWx1ZW1heCc6IHRoaXMub3B0aW9ucy5lbmQsXG4gICAgICAnYXJpYS12YWx1ZW1pbic6IHRoaXMub3B0aW9ucy5zdGFydCxcbiAgICAgICdhcmlhLXZhbHVlbm93JzogaWR4ID09PSAwID8gdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCA6IHRoaXMub3B0aW9ucy5pbml0aWFsRW5kLFxuICAgICAgJ2FyaWEtb3JpZW50YXRpb24nOiB0aGlzLm9wdGlvbnMudmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnLFxuICAgICAgJ3RhYmluZGV4JzogMFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGlucHV0IGFuZCBgYXJpYS12YWx1ZW5vd2AgdmFsdWVzIGZvciB0aGUgc2xpZGVyIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgaGFuZGxlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsIC0gZmxvYXRpbmcgcG9pbnQgb2YgdGhlIG5ldyB2YWx1ZS5cbiAgICovXG4gIF9zZXRWYWx1ZXMoJGhhbmRsZSwgdmFsKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMub3B0aW9ucy5kb3VibGVTaWRlZCA/IHRoaXMuaGFuZGxlcy5pbmRleCgkaGFuZGxlKSA6IDA7XG4gICAgdGhpcy5pbnB1dHMuZXEoaWR4KS52YWwodmFsKTtcbiAgICAkaGFuZGxlLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCB2YWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgZXZlbnRzIG9uIHRoZSBzbGlkZXIgZWxlbWVudC5cbiAgICogQ2FsY3VsYXRlcyB0aGUgbmV3IGxvY2F0aW9uIG9mIHRoZSBjdXJyZW50IGhhbmRsZS5cbiAgICogSWYgdGhlcmUgYXJlIHR3byBoYW5kbGVzIGFuZCB0aGUgYmFyIHdhcyBjbGlja2VkLCBpdCBkZXRlcm1pbmVzIHdoaWNoIGhhbmRsZSB0byBtb3ZlLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGUgLSB0aGUgYGV2ZW50YCBvYmplY3QgcGFzc2VkIGZyb20gdGhlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBjdXJyZW50IGhhbmRsZSB0byBjYWxjdWxhdGUgZm9yLCBpZiBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbCAtIGZsb2F0aW5nIHBvaW50IG51bWJlciBmb3IgdGhlIG5ldyB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBUT0RPIGNsZWFuIHRoaXMgdXAsIHRoZXJlJ3MgYSBsb3Qgb2YgcmVwZWF0ZWQgY29kZSBiZXR3ZWVuIHRoaXMgYW5kIHRoZSBfc2V0SGFuZGxlUG9zIGZuLlxuICAgKi9cbiAgX2hhbmRsZUV2ZW50KGUsICRoYW5kbGUsIHZhbCkge1xuICAgIHZhciB2YWx1ZSwgaGFzVmFsO1xuICAgIGlmICghdmFsKSB7Ly9jbGljayBvciBkcmFnIGV2ZW50c1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICB2ZXJ0aWNhbCA9IHRoaXMub3B0aW9ucy52ZXJ0aWNhbCxcbiAgICAgICAgICBwYXJhbSA9IHZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICAgIGRpcmVjdGlvbiA9IHZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsXG4gICAgICAgICAgZXZlbnRPZmZzZXQgPSB2ZXJ0aWNhbCA/IGUucGFnZVkgOiBlLnBhZ2VYLFxuICAgICAgICAgIGhhbGZPZkhhbmRsZSA9IHRoaXMuJGhhbmRsZVswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtwYXJhbV0gLyAyLFxuICAgICAgICAgIGJhckRpbSA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbcGFyYW1dLFxuICAgICAgICAgIHdpbmRvd1Njcm9sbCA9IHZlcnRpY2FsID8gJCh3aW5kb3cpLnNjcm9sbFRvcCgpIDogJCh3aW5kb3cpLnNjcm9sbExlZnQoKTtcblxuXG4gICAgICB2YXIgZWxlbU9mZnNldCA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClbZGlyZWN0aW9uXTtcblxuICAgICAgLy8gdG91Y2ggZXZlbnRzIGVtdWxhdGVkIGJ5IHRoZSB0b3VjaCB1dGlsIGdpdmUgcG9zaXRpb24gcmVsYXRpdmUgdG8gc2NyZWVuLCBhZGQgd2luZG93LnNjcm9sbCB0byBldmVudCBjb29yZGluYXRlcy4uLlxuICAgICAgLy8gYmVzdCB3YXkgdG8gZ3Vlc3MgdGhpcyBpcyBzaW11bGF0ZWQgaXMgaWYgY2xpZW50WSA9PSBwYWdlWVxuICAgICAgaWYgKGUuY2xpZW50WSA9PT0gZS5wYWdlWSkgeyBldmVudE9mZnNldCA9IGV2ZW50T2Zmc2V0ICsgd2luZG93U2Nyb2xsOyB9XG4gICAgICB2YXIgZXZlbnRGcm9tQmFyID0gZXZlbnRPZmZzZXQgLSBlbGVtT2Zmc2V0O1xuICAgICAgdmFyIGJhclhZO1xuICAgICAgaWYgKGV2ZW50RnJvbUJhciA8IDApIHtcbiAgICAgICAgYmFyWFkgPSAwO1xuICAgICAgfSBlbHNlIGlmIChldmVudEZyb21CYXIgPiBiYXJEaW0pIHtcbiAgICAgICAgYmFyWFkgPSBiYXJEaW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXJYWSA9IGV2ZW50RnJvbUJhcjtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXRQY3QgPSBwZXJjZW50KGJhclhZLCBiYXJEaW0pO1xuXG4gICAgICB2YWx1ZSA9ICh0aGlzLm9wdGlvbnMuZW5kIC0gdGhpcy5vcHRpb25zLnN0YXJ0KSAqIG9mZnNldFBjdCArIHRoaXMub3B0aW9ucy5zdGFydDtcblxuICAgICAgLy8gdHVybiBldmVyeXRoaW5nIGFyb3VuZCBmb3IgUlRMLCB5YXkgbWF0aCFcbiAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpICYmICF0aGlzLm9wdGlvbnMudmVydGljYWwpIHt2YWx1ZSA9IHRoaXMub3B0aW9ucy5lbmQgLSB2YWx1ZTt9XG5cbiAgICAgIHZhbHVlID0gX3RoaXMuX2FkanVzdFZhbHVlKG51bGwsIHZhbHVlKTtcbiAgICAgIC8vYm9vbGVhbiBmbGFnIGZvciB0aGUgc2V0SGFuZGxlUG9zIGZuLCBzcGVjaWZpY2FsbHkgZm9yIHZlcnRpY2FsIHNsaWRlcnNcbiAgICAgIGhhc1ZhbCA9IGZhbHNlO1xuXG4gICAgICBpZiAoISRoYW5kbGUpIHsvL2ZpZ3VyZSBvdXQgd2hpY2ggaGFuZGxlIGl0IGlzLCBwYXNzIGl0IHRvIHRoZSBuZXh0IGZ1bmN0aW9uLlxuICAgICAgICB2YXIgZmlyc3RIbmRsUG9zID0gYWJzUG9zaXRpb24odGhpcy4kaGFuZGxlLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSksXG4gICAgICAgICAgICBzZWNuZEhuZGxQb3MgPSBhYnNQb3NpdGlvbih0aGlzLiRoYW5kbGUyLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSk7XG4gICAgICAgICAgICAkaGFuZGxlID0gZmlyc3RIbmRsUG9zIDw9IHNlY25kSG5kbFBvcyA/IHRoaXMuJGhhbmRsZSA6IHRoaXMuJGhhbmRsZTI7XG4gICAgICB9XG5cbiAgICB9IGVsc2Ugey8vY2hhbmdlIGV2ZW50IG9uIGlucHV0XG4gICAgICB2YWx1ZSA9IHRoaXMuX2FkanVzdFZhbHVlKG51bGwsIHZhbCk7XG4gICAgICBoYXNWYWwgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3NldEhhbmRsZVBvcygkaGFuZGxlLCB2YWx1ZSwgaGFzVmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGp1c3RlcyB2YWx1ZSBmb3IgaGFuZGxlIGluIHJlZ2FyZCB0byBzdGVwIHZhbHVlLiByZXR1cm5zIGFkanVzdGVkIHZhbHVlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBzZWxlY3RlZCBoYW5kbGUuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIGFkanVzdC4gdXNlZCBpZiAkaGFuZGxlIGlzIGZhbHN5XG4gICAqL1xuICBfYWRqdXN0VmFsdWUoJGhhbmRsZSwgdmFsdWUpIHtcbiAgICB2YXIgdmFsLFxuICAgICAgc3RlcCA9IHRoaXMub3B0aW9ucy5zdGVwLFxuICAgICAgZGl2ID0gcGFyc2VGbG9hdChzdGVwLzIpLFxuICAgICAgbGVmdCwgcHJldl92YWwsIG5leHRfdmFsO1xuICAgIGlmICghISRoYW5kbGUpIHtcbiAgICAgIHZhbCA9IHBhcnNlRmxvYXQoJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhbCA9IHZhbHVlO1xuICAgIH1cbiAgICBsZWZ0ID0gdmFsICUgc3RlcDtcbiAgICBwcmV2X3ZhbCA9IHZhbCAtIGxlZnQ7XG4gICAgbmV4dF92YWwgPSBwcmV2X3ZhbCArIHN0ZXA7XG4gICAgaWYgKGxlZnQgPT09IDApIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIHZhbCA9IHZhbCA+PSBwcmV2X3ZhbCArIGRpdiA/IG5leHRfdmFsIDogcHJldl92YWw7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc2xpZGVyIGVsZW1lbnRzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRoYW5kbGUgLSB0aGUgY3VycmVudCBoYW5kbGUgdG8gYXBwbHkgbGlzdGVuZXJzIHRvLlxuICAgKi9cbiAgX2V2ZW50cygkaGFuZGxlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgY3VySGFuZGxlLFxuICAgICAgICB0aW1lcjtcblxuICAgICAgdGhpcy5pbnB1dHMub2ZmKCdjaGFuZ2UuemYuc2xpZGVyJykub24oJ2NoYW5nZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBpZHggPSBfdGhpcy5pbnB1dHMuaW5kZXgoJCh0aGlzKSk7XG4gICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBfdGhpcy5oYW5kbGVzLmVxKGlkeCksICQodGhpcykudmFsKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tTZWxlY3QpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2NsaWNrLnpmLnNsaWRlcicpLm9uKCdjbGljay56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJykpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKCdbZGF0YS1zbGlkZXItaGFuZGxlXScpKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kb3VibGVTaWRlZCkge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgX3RoaXMuJGhhbmRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlKSB7XG4gICAgICB0aGlzLmhhbmRsZXMuYWRkVG91Y2goKTtcblxuICAgICAgdmFyICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgJGhhbmRsZVxuICAgICAgICAub2ZmKCdtb3VzZWRvd24uemYuc2xpZGVyJylcbiAgICAgICAgLm9uKCdtb3VzZWRvd24uemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICRoYW5kbGUuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgX3RoaXMuJGZpbGwuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7Ly9cbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIHRydWUpO1xuXG4gICAgICAgICAgY3VySGFuZGxlID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuXG4gICAgICAgICAgJGJvZHkub24oJ21vdXNlbW92ZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgY3VySGFuZGxlKTtcblxuICAgICAgICAgIH0pLm9uKCdtb3VzZXVwLnpmLnNsaWRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBjdXJIYW5kbGUpO1xuXG4gICAgICAgICAgICAkaGFuZGxlLnJlbW92ZUNsYXNzKCdpcy1kcmFnZ2luZycpO1xuICAgICAgICAgICAgX3RoaXMuJGZpbGwucmVtb3ZlQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIGZhbHNlKTtcblxuICAgICAgICAgICAgJGJvZHkub2ZmKCdtb3VzZW1vdmUuemYuc2xpZGVyIG1vdXNldXAuemYuc2xpZGVyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLy8gcHJldmVudCBldmVudHMgdHJpZ2dlcmVkIGJ5IHRvdWNoXG4gICAgICAub24oJ3NlbGVjdHN0YXJ0LnpmLnNsaWRlciB0b3VjaG1vdmUuemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkaGFuZGxlLm9mZigna2V5ZG93bi56Zi5zbGlkZXInKS5vbigna2V5ZG93bi56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgXyRoYW5kbGUgPSAkKHRoaXMpLFxuICAgICAgICAgIGlkeCA9IF90aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQgPyBfdGhpcy5oYW5kbGVzLmluZGV4KF8kaGFuZGxlKSA6IDAsXG4gICAgICAgICAgb2xkVmFsdWUgPSBwYXJzZUZsb2F0KF90aGlzLmlucHV0cy5lcShpZHgpLnZhbCgpKSxcbiAgICAgICAgICBuZXdWYWx1ZTtcblxuICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1NsaWRlcicsIHtcbiAgICAgICAgZGVjcmVhc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgLSBfdGhpcy5vcHRpb25zLnN0ZXA7XG4gICAgICAgIH0sXG4gICAgICAgIGluY3JlYXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlICsgX3RoaXMub3B0aW9ucy5zdGVwO1xuICAgICAgICB9LFxuICAgICAgICBkZWNyZWFzZV9mYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlIC0gX3RoaXMub3B0aW9ucy5zdGVwICogMTA7XG4gICAgICAgIH0sXG4gICAgICAgIGluY3JlYXNlX2Zhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgKyBfdGhpcy5vcHRpb25zLnN0ZXAgKiAxMDtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7IC8vIG9ubHkgc2V0IGhhbmRsZSBwb3Mgd2hlbiBldmVudCB3YXMgaGFuZGxlZCBzcGVjaWFsbHlcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuX3NldEhhbmRsZVBvcyhfJGhhbmRsZSwgbmV3VmFsdWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8qaWYgKG5ld1ZhbHVlKSB7IC8vIGlmIHByZXNzZWQga2V5IGhhcyBzcGVjaWFsIGZ1bmN0aW9uLCB1cGRhdGUgdmFsdWVcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF8kaGFuZGxlLCBuZXdWYWx1ZSk7XG4gICAgICB9Ki9cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgc2xpZGVyIHBsdWdpbi5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5oYW5kbGVzLm9mZignLnpmLnNsaWRlcicpO1xuICAgIHRoaXMuaW5wdXRzLm9mZignLnpmLnNsaWRlcicpO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYuc2xpZGVyJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuU2xpZGVyLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogTWluaW11bSB2YWx1ZSBmb3IgdGhlIHNsaWRlciBzY2FsZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAwXG4gICAqL1xuICBzdGFydDogMCxcbiAgLyoqXG4gICAqIE1heGltdW0gdmFsdWUgZm9yIHRoZSBzbGlkZXIgc2NhbGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTAwXG4gICAqL1xuICBlbmQ6IDEwMCxcbiAgLyoqXG4gICAqIE1pbmltdW0gdmFsdWUgY2hhbmdlIHBlciBjaGFuZ2UgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgc3RlcDogMSxcbiAgLyoqXG4gICAqIFZhbHVlIGF0IHdoaWNoIHRoZSBoYW5kbGUvaW5wdXQgKihsZWZ0IGhhbmRsZS9maXJzdCBpbnB1dCkqIHNob3VsZCBiZSBzZXQgdG8gb24gaW5pdGlhbGl6YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMFxuICAgKi9cbiAgaW5pdGlhbFN0YXJ0OiAwLFxuICAvKipcbiAgICogVmFsdWUgYXQgd2hpY2ggdGhlIHJpZ2h0IGhhbmRsZS9zZWNvbmQgaW5wdXQgc2hvdWxkIGJlIHNldCB0byBvbiBpbml0aWFsaXphdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMDBcbiAgICovXG4gIGluaXRpYWxFbmQ6IDEwMCxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgaW5wdXQgdG8gYmUgbG9jYXRlZCBvdXRzaWRlIHRoZSBjb250YWluZXIgYW5kIHZpc2libGUuIFNldCB0byBieSB0aGUgSlNcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgYmluZGluZzogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gY2xpY2svdGFwIG9uIHRoZSBzbGlkZXIgYmFyIHRvIHNlbGVjdCBhIHZhbHVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrU2VsZWN0OiB0cnVlLFxuICAvKipcbiAgICogU2V0IHRvIHRydWUgYW5kIHVzZSB0aGUgYHZlcnRpY2FsYCBjbGFzcyB0byBjaGFuZ2UgYWxpZ25tZW50IHRvIHZlcnRpY2FsLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICB2ZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gZHJhZyB0aGUgc2xpZGVyIGhhbmRsZShzKSB0byBzZWxlY3QgYSB2YWx1ZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBkcmFnZ2FibGU6IHRydWUsXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgc2xpZGVyIGFuZCBwcmV2ZW50cyBldmVudCBsaXN0ZW5lcnMgZnJvbSBiZWluZyBhcHBsaWVkLiBEb3VibGUgY2hlY2tlZCBieSBKUyB3aXRoIGBkaXNhYmxlZENsYXNzYC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB1c2Ugb2YgdHdvIGhhbmRsZXMuIERvdWJsZSBjaGVja2VkIGJ5IHRoZSBKUy4gQ2hhbmdlcyBzb21lIGxvZ2ljIGhhbmRsaW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBkb3VibGVTaWRlZDogZmFsc2UsXG4gIC8qKlxuICAgKiBQb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUuXG4gICAqL1xuICAvLyBzdGVwczogMTAwLFxuICAvKipcbiAgICogTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRoZSBwbHVnaW4gc2hvdWxkIGdvIHRvIGZvciBmbG9hdGluZyBwb2ludCBwcmVjaXNpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMlxuICAgKi9cbiAgZGVjaW1hbDogMixcbiAgLyoqXG4gICAqIFRpbWUgZGVsYXkgZm9yIGRyYWdnZWQgZWxlbWVudHMuXG4gICAqL1xuICAvLyBkcmFnRGVsYXk6IDAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gYW5pbWF0ZSB0aGUgbW92ZW1lbnQgb2YgYSBzbGlkZXIgaGFuZGxlIGlmIHVzZXIgY2xpY2tzL3RhcHMgb24gdGhlIGJhci4gTmVlZHMgdG8gYmUgbWFudWFsbHkgc2V0IGlmIHVwZGF0aW5nIHRoZSB0cmFuc2l0aW9uIHRpbWUgaW4gdGhlIFNhc3Mgc2V0dGluZ3MuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjAwXG4gICAqL1xuICBtb3ZlVGltZTogMjAwLC8vdXBkYXRlIHRoaXMgaWYgY2hhbmdpbmcgdGhlIHRyYW5zaXRpb24gdGltZSBpbiB0aGUgc2Fzc1xuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBkaXNhYmxlZCBzbGlkZXJzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdkaXNhYmxlZCdcbiAgICovXG4gIGRpc2FibGVkQ2xhc3M6ICdkaXNhYmxlZCcsXG4gIC8qKlxuICAgKiBXaWxsIGludmVydCB0aGUgZGVmYXVsdCBsYXlvdXQgZm9yIGEgdmVydGljYWw8c3BhbiBkYXRhLXRvb2x0aXAgdGl0bGU9XCJ3aG8gd291bGQgZG8gdGhpcz8/P1wiPiA8L3NwYW4+c2xpZGVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBpbnZlcnRWZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBNaWxsaXNlY29uZHMgYmVmb3JlIHRoZSBgY2hhbmdlZC56Zi1zbGlkZXJgIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciB2YWx1ZSBjaGFuZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuICBjaGFuZ2VkRGVsYXk6IDUwMFxufTtcblxuZnVuY3Rpb24gcGVyY2VudChmcmFjLCBudW0pIHtcbiAgcmV0dXJuIChmcmFjIC8gbnVtKTtcbn1cbmZ1bmN0aW9uIGFic1Bvc2l0aW9uKCRoYW5kbGUsIGRpciwgY2xpY2tQb3MsIHBhcmFtKSB7XG4gIHJldHVybiBNYXRoLmFicygoJGhhbmRsZS5wb3NpdGlvbigpW2Rpcl0gKyAoJGhhbmRsZVtwYXJhbV0oKSAvIDIpKSAtIGNsaWNrUG9zKTtcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFNsaWRlciwgJ1NsaWRlcicpO1xuXG59KGpRdWVyeSk7XG5cbi8vKioqKioqKioqdGhpcyBpcyBpbiBjYXNlIHdlIGdvIHRvIHN0YXRpYywgYWJzb2x1dGUgcG9zaXRpb25zIGluc3RlYWQgb2YgZHluYW1pYyBwb3NpdGlvbmluZyoqKioqKioqXG4vLyB0aGlzLnNldFN0ZXBzKGZ1bmN0aW9uKCkge1xuLy8gICBfdGhpcy5fZXZlbnRzKCk7XG4vLyAgIHZhciBpbml0U3RhcnQgPSBfdGhpcy5vcHRpb25zLnBvc2l0aW9uc1tfdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCAtIDFdIHx8IG51bGw7XG4vLyAgIHZhciBpbml0RW5kID0gX3RoaXMub3B0aW9ucy5pbml0aWFsRW5kID8gX3RoaXMub3B0aW9ucy5wb3NpdGlvbltfdGhpcy5vcHRpb25zLmluaXRpYWxFbmQgLSAxXSA6IG51bGw7XG4vLyAgIGlmIChpbml0U3RhcnQgfHwgaW5pdEVuZCkge1xuLy8gICAgIF90aGlzLl9oYW5kbGVFdmVudChpbml0U3RhcnQsIGluaXRFbmQpO1xuLy8gICB9XG4vLyB9KTtcblxuLy8qKioqKioqKioqKnRoZSBvdGhlciBwYXJ0IG9mIGFic29sdXRlIHBvc2l0aW9ucyoqKioqKioqKioqKipcbi8vIFNsaWRlci5wcm90b3R5cGUuc2V0U3RlcHMgPSBmdW5jdGlvbihjYikge1xuLy8gICB2YXIgcG9zQ2hhbmdlID0gdGhpcy4kZWxlbWVudC5vdXRlcldpZHRoKCkgLyB0aGlzLm9wdGlvbnMuc3RlcHM7XG4vLyAgIHZhciBjb3VudGVyID0gMFxuLy8gICB3aGlsZShjb3VudGVyIDwgdGhpcy5vcHRpb25zLnN0ZXBzKSB7XG4vLyAgICAgaWYgKGNvdW50ZXIpIHtcbi8vICAgICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbnMucHVzaCh0aGlzLm9wdGlvbnMucG9zaXRpb25zW2NvdW50ZXIgLSAxXSArIHBvc0NoYW5nZSk7XG4vLyAgICAgfSBlbHNlIHtcbi8vICAgICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbnMucHVzaChwb3NDaGFuZ2UpO1xuLy8gICAgIH1cbi8vICAgICBjb3VudGVyKys7XG4vLyAgIH1cbi8vICAgY2IoKTtcbi8vIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogU3RpY2t5IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5zdGlja3lcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICovXG5cbmNsYXNzIFN0aWNreSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgc3RpY2t5IHRoaW5nLlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2Ugc3RpY2t5LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB3aGVuIGNyZWF0aW5nIHRoZSBlbGVtZW50IHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFN0aWNreS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnU3RpY2t5Jyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHN0aWNreSBlbGVtZW50IGJ5IGFkZGluZyBjbGFzc2VzLCBnZXR0aW5nL3NldHRpbmcgZGltZW5zaW9ucywgYnJlYWtwb2ludHMgYW5kIGF0dHJpYnV0ZXNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdGlja3ktY29udGFpbmVyXScpLFxuICAgICAgICBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnc3RpY2t5JyksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgIHRoaXMud2FzV3JhcHBlZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuJGNvbnRhaW5lciA9ICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICQodGhpcy5vcHRpb25zLmNvbnRhaW5lcikud3JhcElubmVyKHRoaXMuJGVsZW1lbnQpO1xuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3MpXG4gICAgICAgICAgICAgICAgIC5hdHRyKHsnZGF0YS1yZXNpemUnOiBpZH0pO1xuXG4gICAgdGhpcy5zY3JvbGxDb3VudCA9IHRoaXMub3B0aW9ucy5jaGVja0V2ZXJ5O1xuICAgIHRoaXMuaXNTdHVjayA9IGZhbHNlO1xuICAgICQod2luZG93KS5vbmUoJ2xvYWQuemYuc3RpY2t5JywgZnVuY3Rpb24oKXtcbiAgICAgIC8vV2UgY2FsY3VsYXRlIHRoZSBjb250YWluZXIgaGVpZ2h0IHRvIGhhdmUgY29ycmVjdCB2YWx1ZXMgZm9yIGFuY2hvciBwb2ludHMgb2Zmc2V0IGNhbGN1bGF0aW9uLlxuICAgICAgX3RoaXMuY29udGFpbmVySGVpZ2h0ID0gX3RoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIiA/IDAgOiBfdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICBfdGhpcy4kY29udGFpbmVyLmNzcygnaGVpZ2h0JywgX3RoaXMuY29udGFpbmVySGVpZ2h0KTtcbiAgICAgIF90aGlzLmVsZW1IZWlnaHQgPSBfdGhpcy5jb250YWluZXJIZWlnaHQ7XG4gICAgICBpZihfdGhpcy5vcHRpb25zLmFuY2hvciAhPT0gJycpe1xuICAgICAgICBfdGhpcy4kYW5jaG9yID0gJCgnIycgKyBfdGhpcy5vcHRpb25zLmFuY2hvcik7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgX3RoaXMuX3BhcnNlUG9pbnRzKCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbigpe1xuICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIF90aGlzLl9ldmVudHMoaWQuc3BsaXQoJy0nKS5yZXZlcnNlKCkuam9pbignLScpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtdWx0aXBsZSBlbGVtZW50cyBhcyBhbmNob3JzLCBjYWxjdWxhdGVzIHRoZSB0b3AgYW5kIGJvdHRvbSBwaXhlbCB2YWx1ZXMgdGhlIHN0aWNreSB0aGluZyBzaG91bGQgc3RpY2sgYW5kIHVuc3RpY2sgb24uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhcnNlUG9pbnRzKCkge1xuICAgIHZhciB0b3AgPSB0aGlzLm9wdGlvbnMudG9wQW5jaG9yID09IFwiXCIgPyAxIDogdGhpcy5vcHRpb25zLnRvcEFuY2hvcixcbiAgICAgICAgYnRtID0gdGhpcy5vcHRpb25zLmJ0bUFuY2hvcj09IFwiXCIgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IDogdGhpcy5vcHRpb25zLmJ0bUFuY2hvcixcbiAgICAgICAgcHRzID0gW3RvcCwgYnRtXSxcbiAgICAgICAgYnJlYWtzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHB0cy5sZW5ndGg7IGkgPCBsZW4gJiYgcHRzW2ldOyBpKyspIHtcbiAgICAgIHZhciBwdDtcbiAgICAgIGlmICh0eXBlb2YgcHRzW2ldID09PSAnbnVtYmVyJykge1xuICAgICAgICBwdCA9IHB0c1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwbGFjZSA9IHB0c1tpXS5zcGxpdCgnOicpLFxuICAgICAgICAgICAgYW5jaG9yID0gJChgIyR7cGxhY2VbMF19YCk7XG5cbiAgICAgICAgcHQgPSBhbmNob3Iub2Zmc2V0KCkudG9wO1xuICAgICAgICBpZiAocGxhY2VbMV0gJiYgcGxhY2VbMV0udG9Mb3dlckNhc2UoKSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICBwdCArPSBhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha3NbaV0gPSBwdDtcbiAgICB9XG5cblxuICAgIHRoaXMucG9pbnRzID0gYnJlYWtzO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgc2Nyb2xsaW5nIGVsZW1lbnQuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHBzdWVkby1yYW5kb20gaWQgZm9yIHVuaXF1ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIuXG4gICAqL1xuICBfZXZlbnRzKGlkKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVyID0gYHNjcm9sbC56Zi4ke2lkfWA7XG4gICAgaWYgKHRoaXMuaXNPbikgeyByZXR1cm47IH1cbiAgICBpZiAodGhpcy5jYW5TdGljaykge1xuICAgICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgICAgICQod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpXG4gICAgICAgICAgICAgICAub24oc2Nyb2xsTGlzdGVuZXIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnNjcm9sbENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQgPSBfdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuX3NldFNpemVzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQtLTtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZigncmVzaXplbWUuemYudHJpZ2dlcicpXG4gICAgICAgICAgICAgICAgIC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUsIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9jYWxjKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmNhblN0aWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5pc09uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZXZlbnRzKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuaXNPbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wYXVzZUxpc3RlbmVycyhzY3JvbGxMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlcnMgZm9yIHNjcm9sbCBhbmQgY2hhbmdlIGV2ZW50cyBvbiBhbmNob3IuXG4gICAqIEBmaXJlcyBTdGlja3kjcGF1c2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNjcm9sbExpc3RlbmVyIC0gdW5pcXVlLCBuYW1lc3BhY2VkIHNjcm9sbCBsaXN0ZW5lciBhdHRhY2hlZCB0byBgd2luZG93YFxuICAgKi9cbiAgX3BhdXNlTGlzdGVuZXJzKHNjcm9sbExpc3RlbmVyKSB7XG4gICAgdGhpcy5pc09uID0gZmFsc2U7XG4gICAgJCh3aW5kb3cpLm9mZihzY3JvbGxMaXN0ZW5lcik7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaXMgcGF1c2VkIGR1ZSB0byByZXNpemUgZXZlbnQgc2hyaW5raW5nIHRoZSB2aWV3LlxuICAgICAqIEBldmVudCBTdGlja3kjcGF1c2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3BhdXNlLnpmLnN0aWNreScpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBldmVyeSBgc2Nyb2xsYCBldmVudCBhbmQgb24gYF9pbml0YFxuICAgKiBmaXJlcyBmdW5jdGlvbnMgYmFzZWQgb24gYm9vbGVhbnMgYW5kIGNhY2hlZCB2YWx1ZXNcbiAgICogQHBhcmFtIHtCb29sZWFufSBjaGVja1NpemVzIC0gdHJ1ZSBpZiBwbHVnaW4gc2hvdWxkIHJlY2FsY3VsYXRlIHNpemVzIGFuZCBicmVha3BvaW50cy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjcm9sbCAtIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHBhc3NlZCBmcm9tIHNjcm9sbCBldmVudCBjYiBmdW5jdGlvbi4gSWYgbm90IHBhc3NlZCwgZGVmYXVsdHMgdG8gYHdpbmRvdy5wYWdlWU9mZnNldGAuXG4gICAqL1xuICBfY2FsYyhjaGVja1NpemVzLCBzY3JvbGwpIHtcbiAgICBpZiAoY2hlY2tTaXplcykgeyB0aGlzLl9zZXRTaXplcygpOyB9XG5cbiAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgIGlmICh0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghc2Nyb2xsKSB7IHNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDsgfVxuXG4gICAgaWYgKHNjcm9sbCA+PSB0aGlzLnRvcFBvaW50KSB7XG4gICAgICBpZiAoc2Nyb2xsIDw9IHRoaXMuYm90dG9tUG9pbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgICB0aGlzLl9zZXRTdGlja3koKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhdXNlcyB0aGUgJGVsZW1lbnQgdG8gYmVjb21lIHN0dWNrLlxuICAgKiBBZGRzIGBwb3NpdGlvbjogZml4ZWQ7YCwgYW5kIGhlbHBlciBjbGFzc2VzLlxuICAgKiBAZmlyZXMgU3RpY2t5I3N0dWNrdG9cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0U3RpY2t5KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHN0aWNrVG8gPSB0aGlzLm9wdGlvbnMuc3RpY2tUbyxcbiAgICAgICAgbXJnbiA9IHN0aWNrVG8gPT09ICd0b3AnID8gJ21hcmdpblRvcCcgOiAnbWFyZ2luQm90dG9tJyxcbiAgICAgICAgbm90U3R1Y2tUbyA9IHN0aWNrVG8gPT09ICd0b3AnID8gJ2JvdHRvbScgOiAndG9wJyxcbiAgICAgICAgY3NzID0ge307XG5cbiAgICBjc3NbbXJnbl0gPSBgJHt0aGlzLm9wdGlvbnNbbXJnbl19ZW1gO1xuICAgIGNzc1tzdGlja1RvXSA9IDA7XG4gICAgY3NzW25vdFN0dWNrVG9dID0gJ2F1dG8nO1xuICAgIGNzc1snbGVmdCddID0gdGhpcy4kY29udGFpbmVyLm9mZnNldCgpLmxlZnQgKyBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLiRjb250YWluZXJbMF0pW1wicGFkZGluZy1sZWZ0XCJdLCAxMCk7XG4gICAgdGhpcy5pc1N0dWNrID0gdHJ1ZTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGBpcy1hbmNob3JlZCBpcy1hdC0ke25vdFN0dWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGBpcy1zdHVjayBpcy1hdC0ke3N0aWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmNzcyhjc3MpXG4gICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSAkZWxlbWVudCBoYXMgYmVjb21lIGBwb3NpdGlvbjogZml4ZWQ7YFxuICAgICAgICAgICAgICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYuc3R1Y2t0bzp0b3BgXG4gICAgICAgICAgICAgICAgICAqIEBldmVudCBTdGlja3kjc3R1Y2t0b1xuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgLnRyaWdnZXIoYHN0aWNreS56Zi5zdHVja3RvOiR7c3RpY2tUb31gKTtcbiAgICB0aGlzLiRlbGVtZW50Lm9uKFwidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIE1TVHJhbnNpdGlvbkVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9zZXRTaXplcygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhdXNlcyB0aGUgJGVsZW1lbnQgdG8gYmVjb21lIHVuc3R1Y2suXG4gICAqIFJlbW92ZXMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEFkZHMgb3RoZXIgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNUb3AgLSB0ZWxscyB0aGUgZnVuY3Rpb24gaWYgdGhlICRlbGVtZW50IHNob3VsZCBhbmNob3IgdG8gdGhlIHRvcCBvciBib3R0b20gb2YgaXRzICRhbmNob3IgZWxlbWVudC5cbiAgICogQGZpcmVzIFN0aWNreSN1bnN0dWNrZnJvbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbW92ZVN0aWNreShpc1RvcCkge1xuICAgIHZhciBzdGlja1RvID0gdGhpcy5vcHRpb25zLnN0aWNrVG8sXG4gICAgICAgIHN0aWNrVG9Ub3AgPSBzdGlja1RvID09PSAndG9wJyxcbiAgICAgICAgY3NzID0ge30sXG4gICAgICAgIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLnBvaW50c1swXSA6IHRoaXMuYW5jaG9ySGVpZ2h0KSAtIHRoaXMuZWxlbUhlaWdodCxcbiAgICAgICAgbXJnbiA9IHN0aWNrVG9Ub3AgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUb1RvcCA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgICAgIHRvcE9yQm90dG9tID0gaXNUb3AgPyAndG9wJyA6ICdib3R0b20nO1xuXG4gICAgY3NzW21yZ25dID0gMDtcblxuICAgIGNzc1snYm90dG9tJ10gPSAnYXV0byc7XG4gICAgaWYoaXNUb3ApIHtcbiAgICAgIGNzc1sndG9wJ10gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NbJ3RvcCddID0gYW5jaG9yUHQ7XG4gICAgfVxuXG4gICAgY3NzWydsZWZ0J10gPSAnJztcbiAgICB0aGlzLmlzU3R1Y2sgPSBmYWxzZTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGBpcy1zdHVjayBpcy1hdC0ke3N0aWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGBpcy1hbmNob3JlZCBpcy1hdC0ke3RvcE9yQm90dG9tfWApXG4gICAgICAgICAgICAgICAgIC5jc3MoY3NzKVxuICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgJGVsZW1lbnQgaGFzIGJlY29tZSBhbmNob3JlZC5cbiAgICAgICAgICAgICAgICAgICogTmFtZXNwYWNlZCB0byBgdG9wYCBvciBgYm90dG9tYCwgZS5nLiBgc3RpY2t5LnpmLnVuc3R1Y2tmcm9tOmJvdHRvbWBcbiAgICAgICAgICAgICAgICAgICogQGV2ZW50IFN0aWNreSN1bnN0dWNrZnJvbVxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgLnRyaWdnZXIoYHN0aWNreS56Zi51bnN0dWNrZnJvbToke3RvcE9yQm90dG9tfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlICRlbGVtZW50IGFuZCAkY29udGFpbmVyIHNpemVzIGZvciBwbHVnaW4uXG4gICAqIENhbGxzIGBfc2V0QnJlYWtQb2ludHNgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgb24gY29tcGxldGlvbiBvZiBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRTaXplcyhjYikge1xuICAgIHRoaXMuY2FuU3RpY2sgPSBGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuc3RpY2t5T24pO1xuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gICAgfVxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIG5ld0VsZW1XaWR0aCA9IHRoaXMuJGNvbnRhaW5lclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCxcbiAgICAgICAgY29tcCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuJGNvbnRhaW5lclswXSksXG4gICAgICAgIHBkbmcgPSBwYXJzZUludChjb21wWydwYWRkaW5nLXJpZ2h0J10sIDEwKTtcblxuICAgIGlmICh0aGlzLiRhbmNob3IgJiYgdGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgdGhpcy5hbmNob3JIZWlnaHQgPSB0aGlzLiRhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZVBvaW50cygpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgICdtYXgtd2lkdGgnOiBgJHtuZXdFbGVtV2lkdGggLSBwZG5nfXB4YFxuICAgIH0pO1xuXG4gICAgdmFyIG5ld0NvbnRhaW5lckhlaWdodCA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IHx8IHRoaXMuY29udGFpbmVySGVpZ2h0O1xuICAgIGlmICh0aGlzLiRlbGVtZW50LmNzcyhcImRpc3BsYXlcIikgPT0gXCJub25lXCIpIHtcbiAgICAgIG5ld0NvbnRhaW5lckhlaWdodCA9IDA7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVySGVpZ2h0ID0gbmV3Q29udGFpbmVySGVpZ2h0O1xuICAgIHRoaXMuJGNvbnRhaW5lci5jc3Moe1xuICAgICAgaGVpZ2h0OiBuZXdDb250YWluZXJIZWlnaHRcbiAgICB9KTtcbiAgICB0aGlzLmVsZW1IZWlnaHQgPSBuZXdDb250YWluZXJIZWlnaHQ7XG5cbiAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7XCJsZWZ0XCI6dGhpcy4kY29udGFpbmVyLm9mZnNldCgpLmxlZnQgKyBwYXJzZUludChjb21wWydwYWRkaW5nLWxlZnQnXSwgMTApfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1hdC1ib3R0b20nKSkge1xuICAgICAgICB2YXIgYW5jaG9yUHQgPSAodGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSAtIHRoaXMuJGNvbnRhaW5lci5vZmZzZXQoKS50b3AgOiB0aGlzLmFuY2hvckhlaWdodCkgLSB0aGlzLmVsZW1IZWlnaHQ7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCBhbmNob3JQdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0QnJlYWtQb2ludHMobmV3Q29udGFpbmVySGVpZ2h0LCBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHVwcGVyIGFuZCBsb3dlciBicmVha3BvaW50cyBmb3IgdGhlIGVsZW1lbnQgdG8gYmVjb21lIHN0aWNreS91bnN0aWNreS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGVsZW1IZWlnaHQgLSBweCB2YWx1ZSBmb3Igc3RpY2t5LiRlbGVtZW50IGhlaWdodCwgY2FsY3VsYXRlZCBieSBgX3NldFNpemVzYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gY29tcGxldGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRCcmVha1BvaW50cyhlbGVtSGVpZ2h0LCBjYikge1xuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gICAgICBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgfVxuICAgIHZhciBtVG9wID0gZW1DYWxjKHRoaXMub3B0aW9ucy5tYXJnaW5Ub3ApLFxuICAgICAgICBtQnRtID0gZW1DYWxjKHRoaXMub3B0aW9ucy5tYXJnaW5Cb3R0b20pLFxuICAgICAgICB0b3BQb2ludCA9IHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMF0gOiB0aGlzLiRhbmNob3Iub2Zmc2V0KCkudG9wLFxuICAgICAgICBib3R0b21Qb2ludCA9IHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gOiB0b3BQb2ludCArIHRoaXMuYW5jaG9ySGVpZ2h0LFxuICAgICAgICAvLyB0b3BQb2ludCA9IHRoaXMuJGFuY2hvci5vZmZzZXQoKS50b3AgfHwgdGhpcy5wb2ludHNbMF0sXG4gICAgICAgIC8vIGJvdHRvbVBvaW50ID0gdG9wUG9pbnQgKyB0aGlzLmFuY2hvckhlaWdodCB8fCB0aGlzLnBvaW50c1sxXSxcbiAgICAgICAgd2luSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdGlja1RvID09PSAndG9wJykge1xuICAgICAgdG9wUG9pbnQgLT0gbVRvcDtcbiAgICAgIGJvdHRvbVBvaW50IC09IChlbGVtSGVpZ2h0ICsgbVRvcCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc3RpY2tUbyA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHRvcFBvaW50IC09ICh3aW5IZWlnaHQgLSAoZWxlbUhlaWdodCArIG1CdG0pKTtcbiAgICAgIGJvdHRvbVBvaW50IC09ICh3aW5IZWlnaHQgLSBtQnRtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy90aGlzIHdvdWxkIGJlIHRoZSBzdGlja1RvOiBib3RoIG9wdGlvbi4uLiB0cmlja3lcbiAgICB9XG5cbiAgICB0aGlzLnRvcFBvaW50ID0gdG9wUG9pbnQ7XG4gICAgdGhpcy5ib3R0b21Qb2ludCA9IGJvdHRvbVBvaW50O1xuXG4gICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGN1cnJlbnQgc3RpY2t5IGVsZW1lbnQuXG4gICAqIFJlc2V0cyB0aGUgZWxlbWVudCB0byB0aGUgdG9wIHBvc2l0aW9uIGZpcnN0LlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycywgSlMtYWRkZWQgY3NzIHByb3BlcnRpZXMgYW5kIGNsYXNzZXMsIGFuZCB1bndyYXBzIHRoZSAkZWxlbWVudCBpZiB0aGUgSlMgYWRkZWQgdGhlICRjb250YWluZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG5cbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGAke3RoaXMub3B0aW9ucy5zdGlja3lDbGFzc30gaXMtYW5jaG9yZWQgaXMtYXQtdG9wYClcbiAgICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgICAgICAgICAgICB0b3A6ICcnLFxuICAgICAgICAgICAgICAgICAgIGJvdHRvbTogJycsXG4gICAgICAgICAgICAgICAgICAgJ21heC13aWR0aCc6ICcnXG4gICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgIC5vZmYoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKTtcbiAgICBpZiAodGhpcy4kYW5jaG9yICYmIHRoaXMuJGFuY2hvci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGFuY2hvci5vZmYoJ2NoYW5nZS56Zi5zdGlja3knKTtcbiAgICB9XG4gICAgJCh3aW5kb3cpLm9mZih0aGlzLnNjcm9sbExpc3RlbmVyKTtcblxuICAgIGlmICh0aGlzLndhc1dyYXBwZWQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudW53cmFwKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnJ1xuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5TdGlja3kuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBDdXN0b21pemFibGUgY29udGFpbmVyIHRlbXBsYXRlLiBBZGQgeW91ciBvd24gY2xhc3NlcyBmb3Igc3R5bGluZyBhbmQgc2l6aW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICcmbHQ7ZGl2IGRhdGEtc3RpY2t5LWNvbnRhaW5lciBjbGFzcz1cInNtYWxsLTYgY29sdW1uc1wiJmd0OyZsdDsvZGl2Jmd0OydcbiAgICovXG4gIGNvbnRhaW5lcjogJzxkaXYgZGF0YS1zdGlja3ktY29udGFpbmVyPjwvZGl2PicsXG4gIC8qKlxuICAgKiBMb2NhdGlvbiBpbiB0aGUgdmlldyB0aGUgZWxlbWVudCBzdGlja3MgdG8uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3RvcCdcbiAgICovXG4gIHN0aWNrVG86ICd0b3AnLFxuICAvKipcbiAgICogSWYgYW5jaG9yZWQgdG8gYSBzaW5nbGUgZWxlbWVudCwgdGhlIGlkIG9mIHRoYXQgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZXhhbXBsZUlkJ1xuICAgKi9cbiAgYW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIHRvcCBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2V4YW1wbGVJZDp0b3AnXG4gICAqL1xuICB0b3BBbmNob3I6ICcnLFxuICAvKipcbiAgICogSWYgdXNpbmcgbW9yZSB0aGFuIG9uZSBlbGVtZW50IGFzIGFuY2hvciBwb2ludHMsIHRoZSBpZCBvZiB0aGUgYm90dG9tIGFuY2hvci5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZXhhbXBsZUlkOmJvdHRvbSdcbiAgICovXG4gIGJ0bUFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBNYXJnaW4sIGluIGBlbWAncyB0byBhcHBseSB0byB0aGUgdG9wIG9mIHRoZSBlbGVtZW50IHdoZW4gaXQgYmVjb21lcyBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgbWFyZ2luVG9wOiAxLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIGJvdHRvbSBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDFcbiAgICovXG4gIG1hcmdpbkJvdHRvbTogMSxcbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgc3RyaW5nIHRoYXQgaXMgdGhlIG1pbmltdW0gc2NyZWVuIHNpemUgYW4gZWxlbWVudCBzaG91bGQgYmVjb21lIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnbWVkaXVtJ1xuICAgKi9cbiAgc3RpY2t5T246ICdtZWRpdW0nLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBzdGlja3kgZWxlbWVudCwgYW5kIHJlbW92ZWQgb24gZGVzdHJ1Y3Rpb24uIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreWAuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3N0aWNreSdcbiAgICovXG4gIHN0aWNreUNsYXNzOiAnc3RpY2t5JyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGNvbnRhaW5lci4gRm91bmRhdGlvbiBkZWZhdWx0cyB0byBgc3RpY2t5LWNvbnRhaW5lcmAuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3N0aWNreS1jb250YWluZXInXG4gICAqL1xuICBjb250YWluZXJDbGFzczogJ3N0aWNreS1jb250YWluZXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHNjcm9sbCBldmVudHMgYmV0d2VlbiB0aGUgcGx1Z2luJ3MgcmVjYWxjdWxhdGluZyBzdGlja3kgcG9pbnRzLiBTZXR0aW5nIGl0IHRvIGAwYCB3aWxsIGNhdXNlIGl0IHRvIHJlY2FsYyBldmVyeSBzY3JvbGwgZXZlbnQsIHNldHRpbmcgaXQgdG8gYC0xYCB3aWxsIHByZXZlbnQgcmVjYWxjIG9uIHNjcm9sbC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSA1MFxuICAgKi9cbiAgY2hlY2tFdmVyeTogLTFcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBlbSB2YWx1ZXNcbiAqIEBwYXJhbSBOdW1iZXIge2VtfSAtIG51bWJlciBvZiBlbSdzIHRvIGNhbGN1bGF0ZSBpbnRvIHBpeGVsc1xuICovXG5mdW5jdGlvbiBlbUNhbGMoZW0pIHtcbiAgcmV0dXJuIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHksIG51bGwpLmZvbnRTaXplLCAxMCkgKiBlbTtcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFN0aWNreSwgJ1N0aWNreScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogVGFicyBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udGFic1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyIGlmIHRhYnMgY29udGFpbiBpbWFnZXNcbiAqL1xuXG5jbGFzcyBUYWJzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGFicy5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBUYWJzI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byB0YWJzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFRhYnMuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdUYWJzJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignVGFicycsIHtcbiAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICdBUlJPV19VUCc6ICdwcmV2aW91cycsXG4gICAgICAnQVJST1dfRE9XTic6ICduZXh0JyxcbiAgICAgICdBUlJPV19MRUZUJzogJ3ByZXZpb3VzJ1xuICAgICAgLy8gJ1RBQic6ICduZXh0JyxcbiAgICAgIC8vICdTSElGVF9UQUInOiAncHJldmlvdXMnXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHRhYnMgYnkgc2hvd2luZyBhbmQgZm9jdXNpbmcgKGlmIGF1dG9Gb2N1cz10cnVlKSB0aGUgcHJlc2V0IGFjdGl2ZSB0YWIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kdGFiVGl0bGVzID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfWApO1xuICAgIHRoaXMuJHRhYkNvbnRlbnQgPSAkKGBbZGF0YS10YWJzLWNvbnRlbnQ9XCIke3RoaXMuJGVsZW1lbnRbMF0uaWR9XCJdYCk7XG5cbiAgICB0aGlzLiR0YWJUaXRsZXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAkbGluayA9ICRlbGVtLmZpbmQoJ2EnKSxcbiAgICAgICAgICBpc0FjdGl2ZSA9ICRlbGVtLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSxcbiAgICAgICAgICBoYXNoID0gJGxpbmtbMF0uaGFzaC5zbGljZSgxKSxcbiAgICAgICAgICBsaW5rSWQgPSAkbGlua1swXS5pZCA/ICRsaW5rWzBdLmlkIDogYCR7aGFzaH0tbGFiZWxgLFxuICAgICAgICAgICR0YWJDb250ZW50ID0gJChgIyR7aGFzaH1gKTtcblxuICAgICAgJGVsZW0uYXR0cih7J3JvbGUnOiAncHJlc2VudGF0aW9uJ30pO1xuXG4gICAgICAkbGluay5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndGFiJyxcbiAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBoYXNoLFxuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGlzQWN0aXZlLFxuICAgICAgICAnaWQnOiBsaW5rSWRcbiAgICAgIH0pO1xuXG4gICAgICAkdGFiQ29udGVudC5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndGFicGFuZWwnLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWRcbiAgICAgIH0pO1xuXG4gICAgICBpZihpc0FjdGl2ZSAmJiBfdGhpcy5vcHRpb25zLmF1dG9Gb2N1cyl7XG4gICAgICAgICRsaW5rLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpIHtcbiAgICAgIHZhciAkaW1hZ2VzID0gdGhpcy4kdGFiQ29udGVudC5maW5kKCdpbWcnKTtcblxuICAgICAgaWYgKCRpbWFnZXMubGVuZ3RoKSB7XG4gICAgICAgIEZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQoJGltYWdlcywgdGhpcy5fc2V0SGVpZ2h0LmJpbmQodGhpcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2V0SGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLl9hZGRLZXlIYW5kbGVyKCk7XG4gICAgdGhpcy5fYWRkQ2xpY2tIYW5kbGVyKCk7XG4gICAgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyID0gbnVsbDtcbiAgICBcbiAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIgPSB0aGlzLl9zZXRIZWlnaHQuYmluZCh0aGlzKTtcbiAgICAgIFxuICAgICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGNsaWNrIGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIHRhYnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQ2xpY2tIYW5kbGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub2ZmKCdjbGljay56Zi50YWJzJylcbiAgICAgIC5vbignY2xpY2suemYudGFicycsIGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfWAsIGZ1bmN0aW9uKGUpe1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCQodGhpcykpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBrZXlib2FyZCBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZEtleUhhbmRsZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgJGZpcnN0VGFiID0gX3RoaXMuJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3Qtb2YtdHlwZScpO1xuICAgIHZhciAkbGFzdFRhYiA9IF90aGlzLiRlbGVtZW50LmZpbmQoJ2xpOmxhc3Qtb2YtdHlwZScpO1xuXG4gICAgdGhpcy4kdGFiVGl0bGVzLm9mZigna2V5ZG93bi56Zi50YWJzJykub24oJ2tleWRvd24uemYudGFicycsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYgKGUud2hpY2ggPT09IDkpIHJldHVybjtcbiAgICAgIFxuXG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAkZWxlbWVudHMgPSAkZWxlbWVudC5wYXJlbnQoJ3VsJykuY2hpbGRyZW4oJ2xpJyksXG4gICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLndyYXBPbktleXMpIHtcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9IGkgPT09IDAgPyAkZWxlbWVudHMubGFzdCgpIDogJGVsZW1lbnRzLmVxKGktMSk7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSBpID09PSAkZWxlbWVudHMubGVuZ3RoIC0xID8gJGVsZW1lbnRzLmZpcnN0KCkgOiAkZWxlbWVudHMuZXEoaSsxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWF4KDAsIGktMSkpO1xuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkrMSwgJGVsZW1lbnRzLmxlbmd0aC0xKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdUYWJzJywge1xuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkZWxlbWVudC5maW5kKCdbcm9sZT1cInRhYlwiXScpLmZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkZWxlbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpO1xuICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJHByZXZFbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJG5leHRFbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCRuZXh0RWxlbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgdGFiIGAkdGFyZ2V0Q29udGVudGAgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gVGFiIHRvIG9wZW4uXG4gICAqIEBmaXJlcyBUYWJzI2NoYW5nZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIF9oYW5kbGVUYWJDaGFuZ2UoJHRhcmdldCkge1xuICAgIHZhciAkdGFiTGluayA9ICR0YXJnZXQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKSxcbiAgICAgICAgaGFzaCA9ICR0YWJMaW5rWzBdLmhhc2gsXG4gICAgICAgICR0YXJnZXRDb250ZW50ID0gdGhpcy4kdGFiQ29udGVudC5maW5kKGhhc2gpLFxuICAgICAgICAkb2xkVGFiID0gdGhpcy4kZWxlbWVudC5cbiAgICAgICAgICBmaW5kKGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfS5pcy1hY3RpdmVgKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgICAgICAuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKHsgJ2FyaWEtc2VsZWN0ZWQnOiAnZmFsc2UnIH0pO1xuXG4gICAgJChgIyR7JG9sZFRhYi5hdHRyKCdhcmlhLWNvbnRyb2xzJyl9YClcbiAgICAgIC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgIC5hdHRyKHsgJ2FyaWEtaGlkZGVuJzogJ3RydWUnIH0pO1xuXG4gICAgJHRhcmdldC5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAkdGFiTGluay5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6ICd0cnVlJ30pO1xuXG4gICAgJHRhcmdldENvbnRlbnRcbiAgICAgIC5hZGRDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgIC5hdHRyKHsnYXJpYS1oaWRkZW4nOiAnZmFsc2UnfSk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIHN1Y2Nlc3NmdWxseSBjaGFuZ2VkIHRhYnMuXG4gICAgICogQGV2ZW50IFRhYnMjY2hhbmdlXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UuemYudGFicycsIFskdGFyZ2V0XSk7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIG1ldGhvZCBmb3Igc2VsZWN0aW5nIGEgY29udGVudCBwYW5lIHRvIGRpc3BsYXkuXG4gICAqIEBwYXJhbSB7alF1ZXJ5IHwgU3RyaW5nfSBlbGVtIC0galF1ZXJ5IG9iamVjdCBvciBzdHJpbmcgb2YgdGhlIGlkIG9mIHRoZSBwYW5lIHRvIGRpc3BsYXkuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgc2VsZWN0VGFiKGVsZW0pIHtcbiAgICB2YXIgaWRTdHI7XG5cbiAgICBpZiAodHlwZW9mIGVsZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICBpZFN0ciA9IGVsZW1bMF0uaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkU3RyID0gZWxlbTtcbiAgICB9XG5cbiAgICBpZiAoaWRTdHIuaW5kZXhPZignIycpIDwgMCkge1xuICAgICAgaWRTdHIgPSBgIyR7aWRTdHJ9YDtcbiAgICB9XG5cbiAgICB2YXIgJHRhcmdldCA9IHRoaXMuJHRhYlRpdGxlcy5maW5kKGBbaHJlZj1cIiR7aWRTdHJ9XCJdYCkucGFyZW50KGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfWApO1xuXG4gICAgdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCR0YXJnZXQpO1xuICB9O1xuICAvKipcbiAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIGVhY2ggcGFuZWwgdG8gdGhlIGhlaWdodCBvZiB0aGUgdGFsbGVzdCBwYW5lbC5cbiAgICogSWYgZW5hYmxlZCBpbiBvcHRpb25zLCBnZXRzIGNhbGxlZCBvbiBtZWRpYSBxdWVyeSBjaGFuZ2UuXG4gICAqIElmIGxvYWRpbmcgY29udGVudCB2aWEgZXh0ZXJuYWwgc291cmNlLCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IG9yIHdpdGggX3JlZmxvdy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0SGVpZ2h0KCkge1xuICAgIHZhciBtYXggPSAwO1xuICAgIHRoaXMuJHRhYkNvbnRlbnRcbiAgICAgIC5maW5kKGAuJHt0aGlzLm9wdGlvbnMucGFuZWxDbGFzc31gKVxuICAgICAgLmNzcygnaGVpZ2h0JywgJycpXG4gICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhbmVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGlzQWN0aXZlID0gcGFuZWwuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgICBwYW5lbC5jc3Moeyd2aXNpYmlsaXR5JzogJ2hpZGRlbicsICdkaXNwbGF5JzogJ2Jsb2NrJ30pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRlbXAgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgcGFuZWwuY3NzKHtcbiAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJycsXG4gICAgICAgICAgICAnZGlzcGxheSc6ICcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXggPSB0ZW1wID4gbWF4ID8gdGVtcCA6IG1heDtcbiAgICAgIH0pXG4gICAgICAuY3NzKCdoZWlnaHQnLCBgJHttYXh9cHhgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBhbiB0YWJzLlxuICAgKiBAZmlyZXMgVGFicyNkZXN0cm95ZWRcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmZpbmQoYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9YClcbiAgICAgIC5vZmYoJy56Zi50YWJzJykuaGlkZSgpLmVuZCgpXG4gICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLnBhbmVsQ2xhc3N9YClcbiAgICAgIC5oaWRlKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICBpZiAodGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICQod2luZG93KS5vZmYoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblRhYnMuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBhY3RpdmUgcGFuZSBvbiBsb2FkIGlmIHNldCB0byB0cnVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3Mga2V5Ym9hcmQgaW5wdXQgdG8gJ3dyYXAnIGFyb3VuZCB0aGUgdGFiIGxpbmtzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIHdyYXBPbktleXM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdGFiIGNvbnRlbnQgcGFuZXMgdG8gbWF0Y2ggaGVpZ2h0cyBpZiBzZXQgdG8gdHJ1ZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgbWF0Y2hIZWlnaHQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIGBsaWAncyBpbiB0YWIgbGluayBsaXN0LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0YWJzLXRpdGxlJ1xuICAgKi9cbiAgbGlua0NsYXNzOiAndGFicy10aXRsZScsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGNvbnRlbnQgY29udGFpbmVycy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndGFicy1wYW5lbCdcbiAgICovXG4gIHBhbmVsQ2xhc3M6ICd0YWJzLXBhbmVsJ1xufTtcblxuZnVuY3Rpb24gY2hlY2tDbGFzcygkZWxlbSl7XG4gIHJldHVybiAkZWxlbS5oYXNDbGFzcygnaXMtYWN0aXZlJyk7XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihUYWJzLCAnVGFicycpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogVG9nZ2xlciBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udG9nZ2xlclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xuXG5jbGFzcyBUb2dnbGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVG9nZ2xlci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBUb2dnbGVyI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBUb2dnbGVyLmRlZmF1bHRzLCBlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5jbGFzc05hbWUgPSAnJztcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1RvZ2dsZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgVG9nZ2xlciBwbHVnaW4gYnkgcGFyc2luZyB0aGUgdG9nZ2xlIGNsYXNzIGZyb20gZGF0YS10b2dnbGVyLCBvciBhbmltYXRpb24gY2xhc3NlcyBmcm9tIGRhdGEtYW5pbWF0ZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaW5wdXQ7XG4gICAgLy8gUGFyc2UgYW5pbWF0aW9uIGNsYXNzZXMgaWYgdGhleSB3ZXJlIHNldFxuICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0ZSkge1xuICAgICAgaW5wdXQgPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZS5zcGxpdCgnICcpO1xuXG4gICAgICB0aGlzLmFuaW1hdGlvbkluID0gaW5wdXRbMF07XG4gICAgICB0aGlzLmFuaW1hdGlvbk91dCA9IGlucHV0WzFdIHx8IG51bGw7XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgcGFyc2UgdG9nZ2xlIGNsYXNzXG4gICAgZWxzZSB7XG4gICAgICBpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZGF0YSgndG9nZ2xlcicpO1xuICAgICAgLy8gQWxsb3cgZm9yIGEgLiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzdHJpbmdcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gaW5wdXRbMF0gPT09ICcuJyA/IGlucHV0LnNsaWNlKDEpIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gQWRkIEFSSUEgYXR0cmlidXRlcyB0byB0cmlnZ2Vyc1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQ7XG4gICAgJChgW2RhdGEtb3Blbj1cIiR7aWR9XCJdLCBbZGF0YS1jbG9zZT1cIiR7aWR9XCJdLCBbZGF0YS10b2dnbGU9XCIke2lkfVwiXWApXG4gICAgICAuYXR0cignYXJpYS1jb250cm9scycsIGlkKTtcbiAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGhpZGRlbiwgYWRkIGFyaWEtaGlkZGVuXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdGhpcy4kZWxlbWVudC5pcygnOmhpZGRlbicpID8gZmFsc2UgOiB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIHRoZSB0b2dnbGUgdHJpZ2dlci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b2dnbGUuemYudHJpZ2dlcicpLm9uKCd0b2dnbGUuemYudHJpZ2dlcicsIHRoaXMudG9nZ2xlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHRhcmdldCBjbGFzcyBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQuIEFuIGV2ZW50IGlzIGZpcmVkIGZyb20gdGhlIG9yaWdpbmFsIHRyaWdnZXIgZGVwZW5kaW5nIG9uIGlmIHRoZSByZXN1bHRhbnQgc3RhdGUgd2FzIFwib25cIiBvciBcIm9mZlwiLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFRvZ2dsZXIjb25cbiAgICogQGZpcmVzIFRvZ2dsZXIjb2ZmXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgdGhpc1sgdGhpcy5vcHRpb25zLmFuaW1hdGUgPyAnX3RvZ2dsZUFuaW1hdGUnIDogJ190b2dnbGVDbGFzcyddKCk7XG4gIH1cblxuICBfdG9nZ2xlQ2xhc3MoKSB7XG4gICAgdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLmNsYXNzTmFtZSk7XG5cbiAgICB2YXIgaXNPbiA9IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3ModGhpcy5jbGFzc05hbWUpO1xuICAgIGlmIChpc09uKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBoYXMgdGhlIGNsYXNzIGFmdGVyIGEgdG9nZ2xlLlxuICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb25cbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvbi56Zi50b2dnbGVyJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgZG9lcyBub3QgaGF2ZSB0aGUgY2xhc3MgYWZ0ZXIgYSB0b2dnbGUuXG4gICAgICAgKiBAZXZlbnQgVG9nZ2xlciNvZmZcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvZmYuemYudG9nZ2xlcicpO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZUFSSUEoaXNPbik7XG4gIH1cblxuICBfdG9nZ2xlQW5pbWF0ZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKHRoaXMuJGVsZW1lbnQsIHRoaXMuYW5pbWF0aW9uSW4sIGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5fdXBkYXRlQVJJQSh0cnVlKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdvbi56Zi50b2dnbGVyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsIHRoaXMuYW5pbWF0aW9uT3V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFSSUEoZmFsc2UpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ29mZi56Zi50b2dnbGVyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfdXBkYXRlQVJJQShpc09uKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPbiA/IHRydWUgOiBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIFRvZ2dsZXIgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRvZ2dsZXInKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVG9nZ2xlci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRlbGxzIHRoZSBwbHVnaW4gaWYgdGhlIGVsZW1lbnQgc2hvdWxkIGFuaW1hdGVkIHdoZW4gdG9nZ2xlZC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgYW5pbWF0ZTogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihUb2dnbGVyLCAnVG9nZ2xlcicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogVG9vbHRpcCBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udG9vbHRpcFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbmNsYXNzIFRvb2x0aXAge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIFRvb2x0aXAuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgVG9vbHRpcCNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhdHRhY2ggYSB0b29sdGlwIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9iamVjdCB0byBleHRlbmQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVG9vbHRpcC5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1Rvb2x0aXAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgdG9vbHRpcCBieSBzZXR0aW5nIHRoZSBjcmVhdGluZyB0aGUgdGlwIGVsZW1lbnQsIGFkZGluZyBpdCdzIHRleHQsIHNldHRpbmcgcHJpdmF0ZSB2YXJpYWJsZXMgYW5kIHNldHRpbmcgYXR0cmlidXRlcyBvbiB0aGUgYW5jaG9yLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGVsZW1JZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScpIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ3Rvb2x0aXAnKTtcblxuICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgfHwgdGhpcy5fZ2V0UG9zaXRpb25DbGFzcyh0aGlzLiRlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMudGlwVGV4dCA9IHRoaXMub3B0aW9ucy50aXBUZXh0IHx8IHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnKTtcbiAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlID8gJCh0aGlzLm9wdGlvbnMudGVtcGxhdGUpIDogdGhpcy5fYnVpbGRUZW1wbGF0ZShlbGVtSWQpO1xuXG4gICAgdGhpcy50ZW1wbGF0ZS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KVxuICAgICAgICAudGV4dCh0aGlzLm9wdGlvbnMudGlwVGV4dClcbiAgICAgICAgLmhpZGUoKTtcblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAndGl0bGUnOiAnJyxcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogZWxlbUlkLFxuICAgICAgJ2RhdGEteWV0aS1ib3gnOiBlbGVtSWQsXG4gICAgICAnZGF0YS10b2dnbGUnOiBlbGVtSWQsXG4gICAgICAnZGF0YS1yZXNpemUnOiBlbGVtSWRcbiAgICB9KS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudHJpZ2dlckNsYXNzKTtcblxuICAgIC8vaGVscGVyIHZhcmlhYmxlcyB0byB0cmFjayBtb3ZlbWVudCBvbiBjb2xsaXNpb25zXG4gICAgdGhpcy51c2VkUG9zaXRpb25zID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gNDtcbiAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogR3JhYnMgdGhlIGN1cnJlbnQgcG9zaXRpb25pbmcgY2xhc3MsIGlmIHByZXNlbnQsIGFuZCByZXR1cm5zIHRoZSB2YWx1ZSBvciBhbiBlbXB0eSBzdHJpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0UG9zaXRpb25DbGFzcyhlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSB7IHJldHVybiAnJzsgfVxuICAgIC8vIHZhciBwb3NpdGlvbiA9IGVsZW1lbnQuYXR0cignY2xhc3MnKS5tYXRjaCgvdG9wfGxlZnR8cmlnaHQvZyk7XG4gICAgdmFyIHBvc2l0aW9uID0gZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goL1xcYih0b3B8bGVmdHxyaWdodClcXGIvZyk7XG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPyBwb3NpdGlvblswXSA6ICcnO1xuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfTtcbiAgLyoqXG4gICAqIGJ1aWxkcyB0aGUgdG9vbHRpcCBlbGVtZW50LCBhZGRzIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm5zIHRoZSB0ZW1wbGF0ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9idWlsZFRlbXBsYXRlKGlkKSB7XG4gICAgdmFyIHRlbXBsYXRlQ2xhc3NlcyA9IChgJHt0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzfSAke3RoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzfSAke3RoaXMub3B0aW9ucy50ZW1wbGF0ZUNsYXNzZXN9YCkudHJpbSgpO1xuICAgIHZhciAkdGVtcGxhdGUgPSAgJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcyh0ZW1wbGF0ZUNsYXNzZXMpLmF0dHIoe1xuICAgICAgJ3JvbGUnOiAndG9vbHRpcCcsXG4gICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgJ2RhdGEtaXMtYWN0aXZlJzogZmFsc2UsXG4gICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgJ2lkJzogaWRcbiAgICB9KTtcbiAgICByZXR1cm4gJHRlbXBsYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgaWYgYSBjb2xsaXNpb24gZXZlbnQgaXMgZGV0ZWN0ZWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIHBvc2l0aW9uaW5nIGNsYXNzIHRvIHRyeVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlcG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMucHVzaChwb3NpdGlvbiA/IHBvc2l0aW9uIDogJ2JvdHRvbScpO1xuXG4gICAgLy9kZWZhdWx0LCB0cnkgc3dpdGNoaW5nIHRvIG9wcG9zaXRlIHNpZGVcbiAgICBpZiAoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5hZGRDbGFzcygndG9wJyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpIDwgMCkpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdyaWdodCcpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbilcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2xlZnQnKTtcbiAgICB9XG5cbiAgICAvL2lmIGRlZmF1bHQgY2hhbmdlIGRpZG4ndCB3b3JrLCB0cnkgYm90dG9tIG9yIGxlZnQgZmlyc3RcbiAgICBlbHNlIGlmICghcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignbGVmdCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIC8vaWYgbm90aGluZyBjbGVhcmVkLCBzZXQgdG8gYm90dG9tXG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgdGhpcy5jbGFzc0NoYW5nZWQgPSB0cnVlO1xuICAgIHRoaXMuY291bnRlci0tO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHMgdGhlIHBvc2l0aW9uIGNsYXNzIG9mIGFuIGVsZW1lbnQgYW5kIHJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiB1bnRpbCB0aGVyZSBhcmUgbm8gbW9yZSBwb3NzaWJsZSBwb3NpdGlvbnMgdG8gYXR0ZW1wdCwgb3IgdGhlIHRvb2x0aXAgZWxlbWVudCBpcyBubyBsb25nZXIgY29sbGlkaW5nLlxuICAgKiBpZiB0aGUgdG9vbHRpcCBpcyBsYXJnZXIgdGhhbiB0aGUgc2NyZWVuIHdpZHRoLCBkZWZhdWx0IHRvIGZ1bGwgd2lkdGggLSBhbnkgdXNlciBzZWxlY3RlZCBtYXJnaW5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRQb3NpdGlvbigpIHtcbiAgICB2YXIgcG9zaXRpb24gPSB0aGlzLl9nZXRQb3NpdGlvbkNsYXNzKHRoaXMudGVtcGxhdGUpLFxuICAgICAgICAkdGlwRGltcyA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy50ZW1wbGF0ZSksXG4gICAgICAgICRhbmNob3JEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRlbGVtZW50KSxcbiAgICAgICAgZGlyZWN0aW9uID0gKHBvc2l0aW9uID09PSAnbGVmdCcgPyAnbGVmdCcgOiAoKHBvc2l0aW9uID09PSAncmlnaHQnKSA/ICdsZWZ0JyA6ICd0b3AnKSksXG4gICAgICAgIHBhcmFtID0gKGRpcmVjdGlvbiA9PT0gJ3RvcCcpID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBvZmZzZXQgPSAocGFyYW0gPT09ICdoZWlnaHQnKSA/IHRoaXMub3B0aW9ucy52T2Zmc2V0IDogdGhpcy5vcHRpb25zLmhPZmZzZXQsXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmICgoJHRpcERpbXMud2lkdGggPj0gJHRpcERpbXMud2luZG93RGltcy53aWR0aCkgfHwgKCF0aGlzLmNvdW50ZXIgJiYgIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy50ZW1wbGF0ZSkpKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMudGVtcGxhdGUsIHRoaXMuJGVsZW1lbnQsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0LCB0cnVlKSkuY3NzKHtcbiAgICAgIC8vIHRoaXMuJGVsZW1lbnQub2Zmc2V0KEZvdW5kYXRpb24uR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLCB0aGlzLiRlbGVtZW50LCAnY2VudGVyIGJvdHRvbScsIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCwgdHJ1ZSkpLmNzcyh7XG4gICAgICAgICd3aWR0aCc6ICRhbmNob3JEaW1zLndpbmRvd0RpbXMud2lkdGggLSAodGhpcy5vcHRpb25zLmhPZmZzZXQgKiAyKSxcbiAgICAgICAgJ2hlaWdodCc6ICdhdXRvJ1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy50ZW1wbGF0ZS5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLCB0aGlzLiRlbGVtZW50LCdjZW50ZXIgJyArIChwb3NpdGlvbiB8fCAnYm90dG9tJyksIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCkpO1xuXG4gICAgd2hpbGUoIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy50ZW1wbGF0ZSkgJiYgdGhpcy5jb3VudGVyKSB7XG4gICAgICB0aGlzLl9yZXBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHJldmVhbHMgdGhlIHRvb2x0aXAsIGFuZCBmaXJlcyBhbiBldmVudCB0byBjbG9zZSBhbnkgb3RoZXIgb3BlbiB0b29sdGlwcyBvbiB0aGUgcGFnZVxuICAgKiBAZmlyZXMgVG9vbHRpcCNjbG9zZW1lXG4gICAqIEBmaXJlcyBUb29sdGlwI3Nob3dcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzaG93KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd09uICE9PSAnYWxsJyAmJiAhRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLnNob3dPbikpIHtcbiAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ1RoZSBzY3JlZW4gaXMgdG9vIHNtYWxsIHRvIGRpc3BsYXkgdGhpcyB0b29sdGlwJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLnRlbXBsYXRlLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKS5zaG93KCk7XG4gICAgdGhpcy5fc2V0UG9zaXRpb24oKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHRvIGNsb3NlIGFsbCBvdGhlciBvcGVuIHRvb2x0aXBzIG9uIHRoZSBwYWdlXG4gICAgICogQGV2ZW50IENsb3NlbWUjdG9vbHRpcFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VtZS56Zi50b29sdGlwJywgdGhpcy50ZW1wbGF0ZS5hdHRyKCdpZCcpKTtcblxuXG4gICAgdGhpcy50ZW1wbGF0ZS5hdHRyKHtcbiAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IHRydWUsXG4gICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZVxuICAgIH0pO1xuICAgIF90aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnRlbXBsYXRlKTtcbiAgICB0aGlzLnRlbXBsYXRlLnN0b3AoKS5oaWRlKCkuY3NzKCd2aXNpYmlsaXR5JywgJycpLmZhZGVJbih0aGlzLm9wdGlvbnMuZmFkZUluRHVyYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgLy9tYXliZSBkbyBzdHVmZj9cbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB0b29sdGlwIGlzIHNob3duXG4gICAgICogQGV2ZW50IFRvb2x0aXAjc2hvd1xuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi50b29sdGlwJyk7XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgdGhlIGN1cnJlbnQgdG9vbHRpcCwgYW5kIHJlc2V0cyB0aGUgcG9zaXRpb25pbmcgY2xhc3MgaWYgaXQgd2FzIGNoYW5nZWQgZHVlIHRvIGNvbGxpc2lvblxuICAgKiBAZmlyZXMgVG9vbHRpcCNoaWRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgaGlkZSgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnaGlkaW5nJywgdGhpcy4kZWxlbWVudC5kYXRhKCd5ZXRpLWJveCcpKTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMudGVtcGxhdGUuc3RvcCgpLmF0dHIoe1xuICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IGZhbHNlXG4gICAgfSkuZmFkZU91dCh0aGlzLm9wdGlvbnMuZmFkZU91dER1cmF0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICBpZiAoX3RoaXMuY2xhc3NDaGFuZ2VkKSB7XG4gICAgICAgIF90aGlzLnRlbXBsYXRlXG4gICAgICAgICAgICAgLnJlbW92ZUNsYXNzKF90aGlzLl9nZXRQb3NpdGlvbkNsYXNzKF90aGlzLnRlbXBsYXRlKSlcbiAgICAgICAgICAgICAuYWRkQ2xhc3MoX3RoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzKTtcblxuICAgICAgIF90aGlzLnVzZWRQb3NpdGlvbnMgPSBbXTtcbiAgICAgICBfdGhpcy5jb3VudGVyID0gNDtcbiAgICAgICBfdGhpcy5jbGFzc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBmaXJlcyB3aGVuIHRoZSB0b29sdGlwIGlzIGhpZGRlblxuICAgICAqIEBldmVudCBUb29sdGlwI2hpZGVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYudG9vbHRpcCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIGFkZHMgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgdG9vbHRpcCBhbmQgaXRzIGFuY2hvclxuICAgKiBUT0RPIGNvbWJpbmUgc29tZSBvZiB0aGUgbGlzdGVuZXJzIGxpa2UgZm9jdXMgYW5kIG1vdXNlZW50ZXIsIGV0Yy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgJHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZTtcbiAgICB2YXIgaXNGb2N1cyA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZGlzYWJsZUhvdmVyKSB7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignbW91c2VlbnRlci56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoIV90aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfdGhpcy5zaG93KCk7XG4gICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VsZWF2ZS56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgIGlmICghaXNGb2N1cyB8fCAoX3RoaXMuaXNDbGljayAmJiAhX3RoaXMub3B0aW9ucy5jbGlja09wZW4pKSB7XG4gICAgICAgICAgX3RoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3Blbikge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2Vkb3duLnpmLnRvb2x0aXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChfdGhpcy5pc0NsaWNrKSB7XG4gICAgICAgICAgLy9fdGhpcy5oaWRlKCk7XG4gICAgICAgICAgLy8gX3RoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmlzQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgIGlmICgoX3RoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIgfHwgIV90aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykpICYmICFfdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgX3RoaXMuc2hvdygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZG93bi56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBfdGhpcy5pc0NsaWNrID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVGb3JUb3VjaCkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uKCd0YXAuemYudG9vbHRpcCB0b3VjaGVuZC56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBfdGhpcy5pc0FjdGl2ZSA/IF90aGlzLmhpZGUoKSA6IF90aGlzLnNob3coKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgLy8gJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgIC8vICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5oaWRlLmJpbmQodGhpcylcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5oaWRlLmJpbmQodGhpcylcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignZm9jdXMuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaXNGb2N1cyA9IHRydWU7XG4gICAgICAgIGlmIChfdGhpcy5pc0NsaWNrKSB7XG4gICAgICAgICAgLy8gSWYgd2UncmUgbm90IHNob3dpbmcgb3BlbiBvbiBjbGlja3MsIHdlIG5lZWQgdG8gcHJldGVuZCBhIGNsaWNrLWxhdW5jaGVkIGZvY3VzIGlzbid0XG4gICAgICAgICAgLy8gYSByZWFsIGZvY3VzLCBvdGhlcndpc2Ugb24gaG92ZXIgYW5kIGNvbWUgYmFjayB3ZSBnZXQgYmFkIGJlaGF2aW9yXG4gICAgICAgICAgaWYoIV90aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSB7IGlzRm9jdXMgPSBmYWxzZTsgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIC5vbignZm9jdXNvdXQuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaXNGb2N1cyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhpZGUoKTtcbiAgICAgIH0pXG5cbiAgICAgIC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoX3RoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICBfdGhpcy5fc2V0UG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogYWRkcyBhIHRvZ2dsZSBtZXRob2QsIGluIGFkZGl0aW9uIHRvIHRoZSBzdGF0aWMgc2hvdygpICYgaGlkZSgpIGZ1bmN0aW9uc1xuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiB0b29sdGlwLCByZW1vdmVzIHRlbXBsYXRlIGVsZW1lbnQgZnJvbSB0aGUgdmlldy5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnLCB0aGlzLnRlbXBsYXRlLnRleHQoKSlcbiAgICAgICAgICAgICAgICAgLm9mZignLnpmLnRyaWdnZXIgLnpmLnRvb3RpcCcpXG4gICAgICAgICAgICAgICAgLy8gIC5yZW1vdmVDbGFzcygnaGFzLXRpcCcpXG4gICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEteWV0aS1ib3gnKVxuICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS10b2dnbGUnKVxuICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1yZXNpemUnKTtcblxuICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlKCk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVG9vbHRpcC5kZWZhdWx0cyA9IHtcbiAgZGlzYWJsZUZvclRvdWNoOiBmYWxzZSxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCBiZWZvcmUgYSB0b29sdGlwIHNob3VsZCBvcGVuIG9uIGhvdmVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDIwMFxuICAgKi9cbiAgaG92ZXJEZWxheTogMjAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIGEgdG9vbHRpcCBzaG91bGQgdGFrZSB0byBmYWRlIGludG8gdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxNTBcbiAgICovXG4gIGZhZGVJbkR1cmF0aW9uOiAxNTAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgYSB0b29sdGlwIHNob3VsZCB0YWtlIHRvIGZhZGUgb3V0IG9mIHZpZXcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTUwXG4gICAqL1xuICBmYWRlT3V0RHVyYXRpb246IDE1MCxcbiAgLyoqXG4gICAqIERpc2FibGVzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgdGhlIHRvb2x0aXAgaWYgc2V0IHRvIHRydWVcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGFkZHRpb25hbCBjbGFzc2VzIHRvIGFwcGx5IHRvIHRoZSB0b29sdGlwIHRlbXBsYXRlIG9uIGluaXQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ215LWNvb2wtdGlwLWNsYXNzJ1xuICAgKi9cbiAgdGVtcGxhdGVDbGFzc2VzOiAnJyxcbiAgLyoqXG4gICAqIE5vbi1vcHRpb25hbCBjbGFzcyBhZGRlZCB0byB0b29sdGlwIHRlbXBsYXRlcy4gRm91bmRhdGlvbiBkZWZhdWx0IGlzICd0b29sdGlwJy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndG9vbHRpcCdcbiAgICovXG4gIHRvb2x0aXBDbGFzczogJ3Rvb2x0aXAnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgdG9vbHRpcCBhbmNob3IgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnaGFzLXRpcCdcbiAgICovXG4gIHRyaWdnZXJDbGFzczogJ2hhcy10aXAnLFxuICAvKipcbiAgICogTWluaW11bSBicmVha3BvaW50IHNpemUgYXQgd2hpY2ggdG8gb3BlbiB0aGUgdG9vbHRpcC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnc21hbGwnXG4gICAqL1xuICBzaG93T246ICdzbWFsbCcsXG4gIC8qKlxuICAgKiBDdXN0b20gdGVtcGxhdGUgdG8gYmUgdXNlZCB0byBnZW5lcmF0ZSBtYXJrdXAgZm9yIHRvb2x0aXAuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJyZsdDtkaXYgY2xhc3M9XCJ0b29sdGlwXCImZ3Q7Jmx0Oy9kaXYmZ3Q7J1xuICAgKi9cbiAgdGVtcGxhdGU6ICcnLFxuICAvKipcbiAgICogVGV4dCBkaXNwbGF5ZWQgaW4gdGhlIHRvb2x0aXAgdGVtcGxhdGUgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnU29tZSBjb29sIHNwYWNlIGZhY3QgaGVyZS4nXG4gICAqL1xuICB0aXBUZXh0OiAnJyxcbiAgdG91Y2hDbG9zZVRleHQ6ICdUYXAgdG8gY2xvc2UuJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdG9vbHRpcCB0byByZW1haW4gb3BlbiBpZiB0cmlnZ2VyZWQgd2l0aCBhIGNsaWNrIG9yIHRvdWNoIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrT3BlbjogdHJ1ZSxcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgcG9zaXRpb25pbmcgY2xhc3Nlcywgc2V0IGJ5IHRoZSBKU1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b3AnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgcHVzaCBhd2F5IGZyb20gdGhlIGFuY2hvciBvbiB0aGUgWSBheGlzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICB2T2Zmc2V0OiAxMCxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgcHVzaCBhd2F5IGZyb20gdGhlIGFuY2hvciBvbiB0aGUgWCBheGlzLCBpZiBhbGlnbmVkIHRvIGEgc2lkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMlxuICAgKi9cbiAgaE9mZnNldDogMTJcbn07XG5cbi8qKlxuICogVE9ETyB1dGlsaXplIHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gKi9cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFRvb2x0aXAsICdUb29sdGlwJyk7XG5cbn0oalF1ZXJ5KTsiLCIndXNlIHN0cmljdCc7XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbigpIHtcbiAgaWYgKCFEYXRlLm5vdylcbiAgICBEYXRlLm5vdyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH07XG5cbiAgdmFyIHZlbmRvcnMgPSBbJ3dlYmtpdCcsICdtb3onXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKytpKSB7XG4gICAgICB2YXIgdnAgPSB2ZW5kb3JzW2ldO1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2cCsnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAod2luZG93W3ZwKydDYW5jZWxBbmltYXRpb25GcmFtZSddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB3aW5kb3dbdnArJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddKTtcbiAgfVxuICBpZiAoL2lQKGFkfGhvbmV8b2QpLipPUyA2Ly50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICAgIHx8ICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8ICF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHtcbiAgICB2YXIgbGFzdFRpbWUgPSAwO1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIG5leHRUaW1lID0gTWF0aC5tYXgobGFzdFRpbWUgKyAxNiwgbm93KTtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNhbGxiYWNrKGxhc3RUaW1lID0gbmV4dFRpbWUpOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0VGltZSAtIG5vdyk7XG4gICAgfTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjbGVhclRpbWVvdXQ7XG4gIH1cbn0pKCk7XG5cbnZhciBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG52YXIgYWN0aXZlQ2xhc3NlcyA9IFsnbXVpLWVudGVyLWFjdGl2ZScsICdtdWktbGVhdmUtYWN0aXZlJ107XG5cbi8vIEZpbmQgdGhlIHJpZ2h0IFwidHJhbnNpdGlvbmVuZFwiIGV2ZW50IGZvciB0aGlzIGJyb3dzZXJcbnZhciBlbmRFdmVudCA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHRyYW5zaXRpb25zID0ge1xuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICdNb3pUcmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdPVHJhbnNpdGlvbic6ICdvdHJhbnNpdGlvbmVuZCdcbiAgfVxuICB2YXIgZWxlbSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtLnN0eWxlW3RdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25zW3RdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSkoKTtcblxuZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gIGVsZW1lbnQgPSAkKGVsZW1lbnQpLmVxKDApO1xuXG4gIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICBpZiAoZW5kRXZlbnQgPT09IG51bGwpIHtcbiAgICBpc0luID8gZWxlbWVudC5zaG93KCkgOiBlbGVtZW50LmhpZGUoKTtcbiAgICBjYigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpbml0Q2xhc3MgPSBpc0luID8gaW5pdENsYXNzZXNbMF0gOiBpbml0Q2xhc3Nlc1sxXTtcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNJbiA/IGFjdGl2ZUNsYXNzZXNbMF0gOiBhY3RpdmVDbGFzc2VzWzFdO1xuXG4gIC8vIFNldCB1cCB0aGUgYW5pbWF0aW9uXG4gIHJlc2V0KCk7XG4gIGVsZW1lbnQuYWRkQ2xhc3MoYW5pbWF0aW9uKTtcbiAgZWxlbWVudC5jc3MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhpbml0Q2xhc3MpO1xuICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgfSk7XG5cbiAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aDtcbiAgICBlbGVtZW50LmNzcygndHJhbnNpdGlvbicsICcnKTtcbiAgICBlbGVtZW50LmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKCd0cmFuc2l0aW9uZW5kJywgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhpbml0Q2xhc3MgKyAnICcgKyBhY3RpdmVDbGFzcyArICcgJyArIGFuaW1hdGlvbik7XG4gIH1cbn1cblxudmFyIE1vdGlvblVJID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuIiwialF1ZXJ5KCAnaWZyYW1lW3NyYyo9XCJ5b3V0dWJlLmNvbVwiXScpLndyYXAoXCI8ZGl2IGNsYXNzPSdmbGV4LXZpZGVvIHdpZGVzY3JlZW4nLz5cIik7XG5qUXVlcnkoICdpZnJhbWVbc3JjKj1cInZpbWVvLmNvbVwiXScpLndyYXAoXCI8ZGl2IGNsYXNzPSdmbGV4LXZpZGVvIHdpZGVzY3JlZW4gdmltZW8nLz5cIik7XG4iLCJqUXVlcnkoZG9jdW1lbnQpLmZvdW5kYXRpb24oKTtcbiIsIi8vIEpveXJpZGUgZGVtb1xuJCgnI3N0YXJ0LWpyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICQoZG9jdW1lbnQpLmZvdW5kYXRpb24oJ2pveXJpZGUnLCdzdGFydCcpO1xufSk7IiwiLyohIE1hZ25pZmljIFBvcHVwIC0gdjEuMS4wIC0gMjAxNi0wMi0yMFxuKiBodHRwOi8vZGltc2VtZW5vdi5jb20vcGx1Z2lucy9tYWduaWZpYy1wb3B1cC9cbiogQ29weXJpZ2h0IChjKSAyMDE2IERtaXRyeSBTZW1lbm92OyAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkgeyBcbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsgXG4gLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLiBcbiBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7IFxuIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7IFxuIC8vIE5vZGUvQ29tbW9uSlMgXG4gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7IFxuIH0gZWxzZSB7IFxuIC8vIEJyb3dzZXIgZ2xvYmFscyBcbiBmYWN0b3J5KHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvKTsgXG4gfSBcbiB9KGZ1bmN0aW9uKCQpIHsgXG5cbi8qPj5jb3JlKi9cbi8qKlxuICogXG4gKiBNYWduaWZpYyBQb3B1cCBDb3JlIEpTIGZpbGVcbiAqIFxuICovXG5cblxuLyoqXG4gKiBQcml2YXRlIHN0YXRpYyBjb25zdGFudHNcbiAqL1xudmFyIENMT1NFX0VWRU5UID0gJ0Nsb3NlJyxcblx0QkVGT1JFX0NMT1NFX0VWRU5UID0gJ0JlZm9yZUNsb3NlJyxcblx0QUZURVJfQ0xPU0VfRVZFTlQgPSAnQWZ0ZXJDbG9zZScsXG5cdEJFRk9SRV9BUFBFTkRfRVZFTlQgPSAnQmVmb3JlQXBwZW5kJyxcblx0TUFSS1VQX1BBUlNFX0VWRU5UID0gJ01hcmt1cFBhcnNlJyxcblx0T1BFTl9FVkVOVCA9ICdPcGVuJyxcblx0Q0hBTkdFX0VWRU5UID0gJ0NoYW5nZScsXG5cdE5TID0gJ21mcCcsXG5cdEVWRU5UX05TID0gJy4nICsgTlMsXG5cdFJFQURZX0NMQVNTID0gJ21mcC1yZWFkeScsXG5cdFJFTU9WSU5HX0NMQVNTID0gJ21mcC1yZW1vdmluZycsXG5cdFBSRVZFTlRfQ0xPU0VfQ0xBU1MgPSAnbWZwLXByZXZlbnQtY2xvc2UnO1xuXG5cbi8qKlxuICogUHJpdmF0ZSB2YXJzIFxuICovXG4vKmpzaGludCAtVzA3OSAqL1xudmFyIG1mcCwgLy8gQXMgd2UgaGF2ZSBvbmx5IG9uZSBpbnN0YW5jZSBvZiBNYWduaWZpY1BvcHVwIG9iamVjdCwgd2UgZGVmaW5lIGl0IGxvY2FsbHkgdG8gbm90IHRvIHVzZSAndGhpcydcblx0TWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKCl7fSxcblx0X2lzSlEgPSAhISh3aW5kb3cualF1ZXJ5KSxcblx0X3ByZXZTdGF0dXMsXG5cdF93aW5kb3cgPSAkKHdpbmRvdyksXG5cdF9kb2N1bWVudCxcblx0X3ByZXZDb250ZW50VHlwZSxcblx0X3dyYXBDbGFzc2VzLFxuXHRfY3VyclBvcHVwVHlwZTtcblxuXG4vKipcbiAqIFByaXZhdGUgZnVuY3Rpb25zXG4gKi9cbnZhciBfbWZwT24gPSBmdW5jdGlvbihuYW1lLCBmKSB7XG5cdFx0bWZwLmV2Lm9uKE5TICsgbmFtZSArIEVWRU5UX05TLCBmKTtcblx0fSxcblx0X2dldEVsID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBhcHBlbmRUbywgaHRtbCwgcmF3KSB7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0ZWwuY2xhc3NOYW1lID0gJ21mcC0nK2NsYXNzTmFtZTtcblx0XHRpZihodG1sKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBodG1sO1xuXHRcdH1cblx0XHRpZighcmF3KSB7XG5cdFx0XHRlbCA9ICQoZWwpO1xuXHRcdFx0aWYoYXBwZW5kVG8pIHtcblx0XHRcdFx0ZWwuYXBwZW5kVG8oYXBwZW5kVG8pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZihhcHBlbmRUbykge1xuXHRcdFx0YXBwZW5kVG8uYXBwZW5kQ2hpbGQoZWwpO1xuXHRcdH1cblx0XHRyZXR1cm4gZWw7XG5cdH0sXG5cdF9tZnBUcmlnZ2VyID0gZnVuY3Rpb24oZSwgZGF0YSkge1xuXHRcdG1mcC5ldi50cmlnZ2VySGFuZGxlcihOUyArIGUsIGRhdGEpO1xuXG5cdFx0aWYobWZwLnN0LmNhbGxiYWNrcykge1xuXHRcdFx0Ly8gY29udmVydHMgXCJtZnBFdmVudE5hbWVcIiB0byBcImV2ZW50TmFtZVwiIGNhbGxiYWNrIGFuZCB0cmlnZ2VycyBpdCBpZiBpdCdzIHByZXNlbnRcblx0XHRcdGUgPSBlLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgZS5zbGljZSgxKTtcblx0XHRcdGlmKG1mcC5zdC5jYWxsYmFja3NbZV0pIHtcblx0XHRcdFx0bWZwLnN0LmNhbGxiYWNrc1tlXS5hcHBseShtZnAsICQuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0X2dldENsb3NlQnRuID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdGlmKHR5cGUgIT09IF9jdXJyUG9wdXBUeXBlIHx8ICFtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKSB7XG5cdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuID0gJCggbWZwLnN0LmNsb3NlTWFya3VwLnJlcGxhY2UoJyV0aXRsZSUnLCBtZnAuc3QudENsb3NlICkgKTtcblx0XHRcdF9jdXJyUG9wdXBUeXBlID0gdHlwZTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5jdXJyVGVtcGxhdGUuY2xvc2VCdG47XG5cdH0sXG5cdC8vIEluaXRpYWxpemUgTWFnbmlmaWMgUG9wdXAgb25seSB3aGVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdF9jaGVja0luc3RhbmNlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoISQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSkge1xuXHRcdFx0Lypqc2hpbnQgLVcwMjAgKi9cblx0XHRcdG1mcCA9IG5ldyBNYWduaWZpY1BvcHVwKCk7XG5cdFx0XHRtZnAuaW5pdCgpO1xuXHRcdFx0JC5tYWduaWZpY1BvcHVwLmluc3RhbmNlID0gbWZwO1xuXHRcdH1cblx0fSxcblx0Ly8gQ1NTIHRyYW5zaXRpb24gZGV0ZWN0aW9uLCBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzcyNjQ4OTkvZGV0ZWN0LWNzcy10cmFuc2l0aW9ucy11c2luZy1qYXZhc2NyaXB0LWFuZC13aXRob3V0LW1vZGVybml6clxuXHRzdXBwb3J0c1RyYW5zaXRpb25zID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGUsIC8vICdzJyBmb3Igc3R5bGUuIGJldHRlciB0byBjcmVhdGUgYW4gZWxlbWVudCBpZiBib2R5IHlldCB0byBleGlzdFxuXHRcdFx0diA9IFsnbXMnLCdPJywnTW96JywnV2Via2l0J107IC8vICd2JyBmb3IgdmVuZG9yXG5cblx0XHRpZiggc1sndHJhbnNpdGlvbiddICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTsgXG5cdFx0fVxuXHRcdFx0XG5cdFx0d2hpbGUoIHYubGVuZ3RoICkge1xuXHRcdFx0aWYoIHYucG9wKCkgKyAnVHJhbnNpdGlvbicgaW4gcyApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblxuXG4vKipcbiAqIFB1YmxpYyBmdW5jdGlvbnNcbiAqL1xuTWFnbmlmaWNQb3B1cC5wcm90b3R5cGUgPSB7XG5cblx0Y29uc3RydWN0b3I6IE1hZ25pZmljUG9wdXAsXG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIE1hZ25pZmljIFBvcHVwIHBsdWdpbi4gXG5cdCAqIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIG9ubHkgb25jZSB3aGVuICQuZm4ubWFnbmlmaWNQb3B1cCBvciAkLm1hZ25pZmljUG9wdXAgaXMgZXhlY3V0ZWRcblx0ICovXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcHBWZXJzaW9uID0gbmF2aWdhdG9yLmFwcFZlcnNpb247XG5cdFx0bWZwLmlzTG93SUUgPSBtZnAuaXNJRTggPSBkb2N1bWVudC5hbGwgJiYgIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7XG5cdFx0bWZwLmlzQW5kcm9pZCA9ICgvYW5kcm9pZC9naSkudGVzdChhcHBWZXJzaW9uKTtcblx0XHRtZnAuaXNJT1MgPSAoL2lwaG9uZXxpcGFkfGlwb2QvZ2kpLnRlc3QoYXBwVmVyc2lvbik7XG5cdFx0bWZwLnN1cHBvcnRzVHJhbnNpdGlvbiA9IHN1cHBvcnRzVHJhbnNpdGlvbnMoKTtcblxuXHRcdC8vIFdlIGRpc2FibGUgZml4ZWQgcG9zaXRpb25lZCBsaWdodGJveCBvbiBkZXZpY2VzIHRoYXQgZG9uJ3QgaGFuZGxlIGl0IG5pY2VseS5cblx0XHQvLyBJZiB5b3Uga25vdyBhIGJldHRlciB3YXkgb2YgZGV0ZWN0aW5nIHRoaXMgLSBsZXQgbWUga25vdy5cblx0XHRtZnAucHJvYmFibHlNb2JpbGUgPSAobWZwLmlzQW5kcm9pZCB8fCBtZnAuaXNJT1MgfHwgLyhPcGVyYSBNaW5pKXxLaW5kbGV8d2ViT1N8QmxhY2tCZXJyeXwoT3BlcmEgTW9iaSl8KFdpbmRvd3MgUGhvbmUpfElFTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSApO1xuXHRcdF9kb2N1bWVudCA9ICQoZG9jdW1lbnQpO1xuXG5cdFx0bWZwLnBvcHVwc0NhY2hlID0ge307XG5cdH0sXG5cblx0LyoqXG5cdCAqIE9wZW5zIHBvcHVwXG5cdCAqIEBwYXJhbSAgZGF0YSBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRvcGVuOiBmdW5jdGlvbihkYXRhKSB7XG5cblx0XHR2YXIgaTtcblxuXHRcdGlmKGRhdGEuaXNPYmogPT09IGZhbHNlKSB7IFxuXHRcdFx0Ly8gY29udmVydCBqUXVlcnkgY29sbGVjdGlvbiB0byBhcnJheSB0byBhdm9pZCBjb25mbGljdHMgbGF0ZXJcblx0XHRcdG1mcC5pdGVtcyA9IGRhdGEuaXRlbXMudG9BcnJheSgpO1xuXG5cdFx0XHRtZnAuaW5kZXggPSAwO1xuXHRcdFx0dmFyIGl0ZW1zID0gZGF0YS5pdGVtcyxcblx0XHRcdFx0aXRlbTtcblx0XHRcdGZvcihpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdFx0aWYoaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0XHRpdGVtID0gaXRlbS5lbFswXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihpdGVtID09PSBkYXRhLmVsWzBdKSB7XG5cdFx0XHRcdFx0bWZwLmluZGV4ID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuaXRlbXMgPSAkLmlzQXJyYXkoZGF0YS5pdGVtcykgPyBkYXRhLml0ZW1zIDogW2RhdGEuaXRlbXNdO1xuXHRcdFx0bWZwLmluZGV4ID0gZGF0YS5pbmRleCB8fCAwO1xuXHRcdH1cblxuXHRcdC8vIGlmIHBvcHVwIGlzIGFscmVhZHkgb3BlbmVkIC0gd2UganVzdCB1cGRhdGUgdGhlIGNvbnRlbnRcblx0XHRpZihtZnAuaXNPcGVuKSB7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0bWZwLnR5cGVzID0gW107IFxuXHRcdF93cmFwQ2xhc3NlcyA9ICcnO1xuXHRcdGlmKGRhdGEubWFpbkVsICYmIGRhdGEubWFpbkVsLmxlbmd0aCkge1xuXHRcdFx0bWZwLmV2ID0gZGF0YS5tYWluRWwuZXEoMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5ldiA9IF9kb2N1bWVudDtcblx0XHR9XG5cblx0XHRpZihkYXRhLmtleSkge1xuXHRcdFx0aWYoIW1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV0pIHtcblx0XHRcdFx0bWZwLnBvcHVwc0NhY2hlW2RhdGEua2V5XSA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5jdXJyVGVtcGxhdGUgPSB7fTtcblx0XHR9XG5cblxuXG5cdFx0bWZwLnN0ID0gJC5leHRlbmQodHJ1ZSwge30sICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cywgZGF0YSApOyBcblx0XHRtZnAuZml4ZWRDb250ZW50UG9zID0gbWZwLnN0LmZpeGVkQ29udGVudFBvcyA9PT0gJ2F1dG8nID8gIW1mcC5wcm9iYWJseU1vYmlsZSA6IG1mcC5zdC5maXhlZENvbnRlbnRQb3M7XG5cblx0XHRpZihtZnAuc3QubW9kYWwpIHtcblx0XHRcdG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrID0gZmFsc2U7XG5cdFx0XHRtZnAuc3QuY2xvc2VPbkJnQ2xpY2sgPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5zaG93Q2xvc2VCdG4gPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5lbmFibGVFc2NhcGVLZXkgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cblx0XHQvLyBCdWlsZGluZyBtYXJrdXBcblx0XHQvLyBtYWluIGNvbnRhaW5lcnMgYXJlIGNyZWF0ZWQgb25seSBvbmNlXG5cdFx0aWYoIW1mcC5iZ092ZXJsYXkpIHtcblxuXHRcdFx0Ly8gRGFyayBvdmVybGF5XG5cdFx0XHRtZnAuYmdPdmVybGF5ID0gX2dldEVsKCdiZycpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuY2xvc2UoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAud3JhcCA9IF9nZXRFbCgnd3JhcCcpLmF0dHIoJ3RhYmluZGV4JywgLTEpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYobWZwLl9jaGVja0lmQ2xvc2UoZS50YXJnZXQpKSB7XG5cdFx0XHRcdFx0bWZwLmNsb3NlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyID0gX2dldEVsKCdjb250YWluZXInLCBtZnAud3JhcCk7XG5cdFx0fVxuXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIgPSBfZ2V0RWwoJ2NvbnRlbnQnKTtcblx0XHRpZihtZnAuc3QucHJlbG9hZGVyKSB7XG5cdFx0XHRtZnAucHJlbG9hZGVyID0gX2dldEVsKCdwcmVsb2FkZXInLCBtZnAuY29udGFpbmVyLCBtZnAuc3QudExvYWRpbmcpO1xuXHRcdH1cblxuXG5cdFx0Ly8gSW5pdGlhbGl6aW5nIG1vZHVsZXNcblx0XHR2YXIgbW9kdWxlcyA9ICQubWFnbmlmaWNQb3B1cC5tb2R1bGVzO1xuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBuID0gbW9kdWxlc1tpXTtcblx0XHRcdG4gPSBuLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbi5zbGljZSgxKTtcblx0XHRcdG1mcFsnaW5pdCcrbl0uY2FsbChtZnApO1xuXHRcdH1cblx0XHRfbWZwVHJpZ2dlcignQmVmb3JlT3BlbicpO1xuXG5cblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuKSB7XG5cdFx0XHQvLyBDbG9zZSBidXR0b25cblx0XHRcdGlmKCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUpIHtcblx0XHRcdFx0bWZwLndyYXAuYXBwZW5kKCBfZ2V0Q2xvc2VCdG4oKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X21mcE9uKE1BUktVUF9QQVJTRV9FVkVOVCwgZnVuY3Rpb24oZSwgdGVtcGxhdGUsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHRcdHZhbHVlcy5jbG9zZV9yZXBsYWNlV2l0aCA9IF9nZXRDbG9zZUJ0bihpdGVtLnR5cGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWNsb3NlLWJ0bi1pbic7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYobWZwLnN0LmFsaWduVG9wKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYWxpZ24tdG9wJztcblx0XHR9XG5cblx0XG5cblx0XHRpZihtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHRtZnAud3JhcC5jc3Moe1xuXHRcdFx0XHRvdmVyZmxvdzogbWZwLnN0Lm92ZXJmbG93WSxcblx0XHRcdFx0b3ZlcmZsb3dYOiAnaGlkZGVuJyxcblx0XHRcdFx0b3ZlcmZsb3dZOiBtZnAuc3Qub3ZlcmZsb3dZXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndyYXAuY3NzKHsgXG5cdFx0XHRcdHRvcDogX3dpbmRvdy5zY3JvbGxUb3AoKSxcblx0XHRcdFx0cG9zaXRpb246ICdhYnNvbHV0ZSdcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiggbWZwLnN0LmZpeGVkQmdQb3MgPT09IGZhbHNlIHx8IChtZnAuc3QuZml4ZWRCZ1BvcyA9PT0gJ2F1dG8nICYmICFtZnAuZml4ZWRDb250ZW50UG9zKSApIHtcblx0XHRcdG1mcC5iZ092ZXJsYXkuY3NzKHtcblx0XHRcdFx0aGVpZ2h0OiBfZG9jdW1lbnQuaGVpZ2h0KCksXG5cdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRcblxuXHRcdGlmKG1mcC5zdC5lbmFibGVFc2NhcGVLZXkpIHtcblx0XHRcdC8vIENsb3NlIG9uIEVTQyBrZXlcblx0XHRcdF9kb2N1bWVudC5vbigna2V5dXAnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYoZS5rZXlDb2RlID09PSAyNykge1xuXHRcdFx0XHRcdG1mcC5jbG9zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRfd2luZG93Lm9uKCdyZXNpemUnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnVwZGF0ZVNpemUoKTtcblx0XHR9KTtcblxuXG5cdFx0aWYoIW1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYXV0by1jdXJzb3InO1xuXHRcdH1cblx0XHRcblx0XHRpZihfd3JhcENsYXNzZXMpXG5cdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhfd3JhcENsYXNzZXMpO1xuXG5cblx0XHQvLyB0aGlzIHRyaWdnZXJzIHJlY2FsY3VsYXRpb24gb2YgbGF5b3V0LCBzbyB3ZSBnZXQgaXQgb25jZSB0byBub3QgdG8gdHJpZ2dlciB0d2ljZVxuXHRcdHZhciB3aW5kb3dIZWlnaHQgPSBtZnAud0ggPSBfd2luZG93LmhlaWdodCgpO1xuXG5cdFx0XG5cdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHt9O1xuXG5cdFx0aWYoIG1mcC5maXhlZENvbnRlbnRQb3MgKSB7XG4gICAgICAgICAgICBpZihtZnAuX2hhc1Njcm9sbEJhcih3aW5kb3dIZWlnaHQpKXtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG1mcC5fZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgICAgICAgICAgIGlmKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93U3R5bGVzLm1hcmdpblJpZ2h0ID0gcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHRcdGlmKG1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdGlmKCFtZnAuaXNJRTcpIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZTcgZG91YmxlLXNjcm9sbCBidWdcblx0XHRcdFx0JCgnYm9keSwgaHRtbCcpLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0XG5cdFx0XG5cdFx0dmFyIGNsYXNzZXNUb2FkZCA9IG1mcC5zdC5tYWluQ2xhc3M7XG5cdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRjbGFzc2VzVG9hZGQgKz0gJyBtZnAtaWU3Jztcblx0XHR9XG5cdFx0aWYoY2xhc3Nlc1RvYWRkKSB7XG5cdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoIGNsYXNzZXNUb2FkZCApO1xuXHRcdH1cblxuXHRcdC8vIGFkZCBjb250ZW50XG5cdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cblx0XHRfbWZwVHJpZ2dlcignQnVpbGRDb250cm9scycpO1xuXG5cdFx0Ly8gcmVtb3ZlIHNjcm9sbGJhciwgYWRkIG1hcmdpbiBlLnQuY1xuXHRcdCQoJ2h0bWwnKS5jc3Mod2luZG93U3R5bGVzKTtcblx0XHRcblx0XHQvLyBhZGQgZXZlcnl0aGluZyB0byBET01cblx0XHRtZnAuYmdPdmVybGF5LmFkZChtZnAud3JhcCkucHJlcGVuZFRvKCBtZnAuc3QucHJlcGVuZFRvIHx8ICQoZG9jdW1lbnQuYm9keSkgKTtcblxuXHRcdC8vIFNhdmUgbGFzdCBmb2N1c2VkIGVsZW1lbnRcblx0XHRtZnAuX2xhc3RGb2N1c2VkRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHRcdFxuXHRcdC8vIFdhaXQgZm9yIG5leHQgY3ljbGUgdG8gYWxsb3cgQ1NTIHRyYW5zaXRpb25cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XG5cdFx0XHRpZihtZnAuY29udGVudCkge1xuXHRcdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0XHRtZnAuX3NldEZvY3VzKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiBjb250ZW50IGlzIG5vdCBkZWZpbmVkIChub3QgbG9hZGVkIGUudC5jKSB3ZSBhZGQgY2xhc3Mgb25seSBmb3IgQkdcblx0XHRcdFx0bWZwLmJnT3ZlcmxheS5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFRyYXAgdGhlIGZvY3VzIGluIHBvcHVwXG5cdFx0XHRfZG9jdW1lbnQub24oJ2ZvY3VzaW4nICsgRVZFTlRfTlMsIG1mcC5fb25Gb2N1c0luKTtcblxuXHRcdH0sIDE2KTtcblxuXHRcdG1mcC5pc09wZW4gPSB0cnVlO1xuXHRcdG1mcC51cGRhdGVTaXplKHdpbmRvd0hlaWdodCk7XG5cdFx0X21mcFRyaWdnZXIoT1BFTl9FVkVOVCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvKipcblx0ICogQ2xvc2VzIHRoZSBwb3B1cFxuXHQgKi9cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCFtZnAuaXNPcGVuKSByZXR1cm47XG5cdFx0X21mcFRyaWdnZXIoQkVGT1JFX0NMT1NFX0VWRU5UKTtcblxuXHRcdG1mcC5pc09wZW4gPSBmYWxzZTtcblx0XHQvLyBmb3IgQ1NTMyBhbmltYXRpb25cblx0XHRpZihtZnAuc3QucmVtb3ZhbERlbGF5ICYmICFtZnAuaXNMb3dJRSAmJiBtZnAuc3VwcG9ydHNUcmFuc2l0aW9uICkgIHtcblx0XHRcdG1mcC5fYWRkQ2xhc3NUb01GUChSRU1PVklOR19DTEFTUyk7XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuX2Nsb3NlKCk7XG5cdFx0XHR9LCBtZnAuc3QucmVtb3ZhbERlbGF5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLl9jbG9zZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogSGVscGVyIGZvciBjbG9zZSgpIGZ1bmN0aW9uXG5cdCAqL1xuXHRfY2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdF9tZnBUcmlnZ2VyKENMT1NFX0VWRU5UKTtcblxuXHRcdHZhciBjbGFzc2VzVG9SZW1vdmUgPSBSRU1PVklOR19DTEFTUyArICcgJyArIFJFQURZX0NMQVNTICsgJyAnO1xuXG5cdFx0bWZwLmJnT3ZlcmxheS5kZXRhY2goKTtcblx0XHRtZnAud3JhcC5kZXRhY2goKTtcblx0XHRtZnAuY29udGFpbmVyLmVtcHR5KCk7XG5cblx0XHRpZihtZnAuc3QubWFpbkNsYXNzKSB7XG5cdFx0XHRjbGFzc2VzVG9SZW1vdmUgKz0gbWZwLnN0Lm1haW5DbGFzcyArICcgJztcblx0XHR9XG5cblx0XHRtZnAuX3JlbW92ZUNsYXNzRnJvbU1GUChjbGFzc2VzVG9SZW1vdmUpO1xuXG5cdFx0aWYobWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHttYXJnaW5SaWdodDogJyd9O1xuXHRcdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRcdCQoJ2JvZHksIGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJyc7XG5cdFx0XHR9XG5cdFx0XHQkKCdodG1sJykuY3NzKHdpbmRvd1N0eWxlcyk7XG5cdFx0fVxuXHRcdFxuXHRcdF9kb2N1bWVudC5vZmYoJ2tleXVwJyArIEVWRU5UX05TICsgJyBmb2N1c2luJyArIEVWRU5UX05TKTtcblx0XHRtZnAuZXYub2ZmKEVWRU5UX05TKTtcblxuXHRcdC8vIGNsZWFuIHVwIERPTSBlbGVtZW50cyB0aGF0IGFyZW4ndCByZW1vdmVkXG5cdFx0bWZwLndyYXAuYXR0cignY2xhc3MnLCAnbWZwLXdyYXAnKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXHRcdG1mcC5iZ092ZXJsYXkuYXR0cignY2xhc3MnLCAnbWZwLWJnJyk7XG5cdFx0bWZwLmNvbnRhaW5lci5hdHRyKCdjbGFzcycsICdtZnAtY29udGFpbmVyJyk7XG5cblx0XHQvLyByZW1vdmUgY2xvc2UgYnV0dG9uIGZyb20gdGFyZ2V0IGVsZW1lbnRcblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmXG5cdFx0KCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUgfHwgbWZwLmN1cnJUZW1wbGF0ZVttZnAuY3Vyckl0ZW0udHlwZV0gPT09IHRydWUpKSB7XG5cdFx0XHRpZihtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKVxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuLmRldGFjaCgpO1xuXHRcdH1cblxuXG5cdFx0aWYobWZwLnN0LmF1dG9Gb2N1c0xhc3QgJiYgbWZwLl9sYXN0Rm9jdXNlZEVsKSB7XG5cdFx0XHQkKG1mcC5fbGFzdEZvY3VzZWRFbCkuZm9jdXMoKTsgLy8gcHV0IHRhYiBmb2N1cyBiYWNrXG5cdFx0fVxuXHRcdG1mcC5jdXJySXRlbSA9IG51bGw7XHRcblx0XHRtZnAuY29udGVudCA9IG51bGw7XG5cdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG51bGw7XG5cdFx0bWZwLnByZXZIZWlnaHQgPSAwO1xuXG5cdFx0X21mcFRyaWdnZXIoQUZURVJfQ0xPU0VfRVZFTlQpO1xuXHR9LFxuXHRcblx0dXBkYXRlU2l6ZTogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cblx0XHRpZihtZnAuaXNJT1MpIHtcblx0XHRcdC8vIGZpeGVzIGlPUyBuYXYgYmFycyBodHRwczovL2dpdGh1Yi5jb20vZGltc2VtZW5vdi9NYWduaWZpYy1Qb3B1cC9pc3N1ZXMvMlxuXHRcdFx0dmFyIHpvb21MZXZlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdFx0dmFyIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIHpvb21MZXZlbDtcblx0XHRcdG1mcC53cmFwLmNzcygnaGVpZ2h0JywgaGVpZ2h0KTtcblx0XHRcdG1mcC53SCA9IGhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndIID0gd2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCk7XG5cdFx0fVxuXHRcdC8vIEZpeGVzICM4NDogcG9wdXAgaW5jb3JyZWN0bHkgcG9zaXRpb25lZCB3aXRoIHBvc2l0aW9uOnJlbGF0aXZlIG9uIGJvZHlcblx0XHRpZighbWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0bWZwLndyYXAuY3NzKCdoZWlnaHQnLCBtZnAud0gpO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKCdSZXNpemUnKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXQgY29udGVudCBvZiBwb3B1cCBiYXNlZCBvbiBjdXJyZW50IGluZGV4XG5cdCAqL1xuXHR1cGRhdGVJdGVtSFRNTDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbbWZwLmluZGV4XTtcblxuXHRcdC8vIERldGFjaCBhbmQgcGVyZm9ybSBtb2RpZmljYXRpb25zXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIuZGV0YWNoKCk7XG5cblx0XHRpZihtZnAuY29udGVudClcblx0XHRcdG1mcC5jb250ZW50LmRldGFjaCgpO1xuXG5cdFx0aWYoIWl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRpdGVtID0gbWZwLnBhcnNlRWwoIG1mcC5pbmRleCApO1xuXHRcdH1cblxuXHRcdHZhciB0eXBlID0gaXRlbS50eXBlO1xuXG5cdFx0X21mcFRyaWdnZXIoJ0JlZm9yZUNoYW5nZScsIFttZnAuY3Vyckl0ZW0gPyBtZnAuY3Vyckl0ZW0udHlwZSA6ICcnLCB0eXBlXSk7XG5cdFx0Ly8gQmVmb3JlQ2hhbmdlIGV2ZW50IHdvcmtzIGxpa2Ugc286XG5cdFx0Ly8gX21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkgeyB9KTtcblxuXHRcdG1mcC5jdXJySXRlbSA9IGl0ZW07XG5cblx0XHRpZighbWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSkge1xuXHRcdFx0dmFyIG1hcmt1cCA9IG1mcC5zdFt0eXBlXSA/IG1mcC5zdFt0eXBlXS5tYXJrdXAgOiBmYWxzZTtcblxuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBtYXJrdXBcblx0XHRcdF9tZnBUcmlnZ2VyKCdGaXJzdE1hcmt1cFBhcnNlJywgbWFya3VwKTtcblxuXHRcdFx0aWYobWFya3VwKSB7XG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0gPSAkKG1hcmt1cCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBtYXJrdXAgZm91bmQgd2UganVzdCBkZWZpbmUgdGhhdCB0ZW1wbGF0ZSBpcyBwYXJzZWRcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoX3ByZXZDb250ZW50VHlwZSAmJiBfcHJldkNvbnRlbnRUeXBlICE9PSBpdGVtLnR5cGUpIHtcblx0XHRcdG1mcC5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ21mcC0nK19wcmV2Q29udGVudFR5cGUrJy1ob2xkZXInKTtcblx0XHR9XG5cblx0XHR2YXIgbmV3Q29udGVudCA9IG1mcFsnZ2V0JyArIHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpXShpdGVtLCBtZnAuY3VyclRlbXBsYXRlW3R5cGVdKTtcblx0XHRtZnAuYXBwZW5kQ29udGVudChuZXdDb250ZW50LCB0eXBlKTtcblxuXHRcdGl0ZW0ucHJlbG9hZGVkID0gdHJ1ZTtcblxuXHRcdF9tZnBUcmlnZ2VyKENIQU5HRV9FVkVOVCwgaXRlbSk7XG5cdFx0X3ByZXZDb250ZW50VHlwZSA9IGl0ZW0udHlwZTtcblxuXHRcdC8vIEFwcGVuZCBjb250YWluZXIgYmFjayBhZnRlciBpdHMgY29udGVudCBjaGFuZ2VkXG5cdFx0bWZwLmNvbnRhaW5lci5wcmVwZW5kKG1mcC5jb250ZW50Q29udGFpbmVyKTtcblxuXHRcdF9tZnBUcmlnZ2VyKCdBZnRlckNoYW5nZScpO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIFNldCBIVE1MIGNvbnRlbnQgb2YgcG9wdXBcblx0ICovXG5cdGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uKG5ld0NvbnRlbnQsIHR5cGUpIHtcblx0XHRtZnAuY29udGVudCA9IG5ld0NvbnRlbnQ7XG5cblx0XHRpZihuZXdDb250ZW50KSB7XG5cdFx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmIG1mcC5zdC5jbG9zZUJ0bkluc2lkZSAmJlxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlW3R5cGVdID09PSB0cnVlKSB7XG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIG1hcmt1cCwgd2UganVzdCBhcHBlbmQgY2xvc2UgYnV0dG9uIGVsZW1lbnQgaW5zaWRlXG5cdFx0XHRcdGlmKCFtZnAuY29udGVudC5maW5kKCcubWZwLWNsb3NlJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuYXBwZW5kKF9nZXRDbG9zZUJ0bigpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWZwLmNvbnRlbnQgPSBuZXdDb250ZW50O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuY29udGVudCA9ICcnO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKEJFRk9SRV9BUFBFTkRfRVZFTlQpO1xuXHRcdG1mcC5jb250YWluZXIuYWRkQ2xhc3MoJ21mcC0nK3R5cGUrJy1ob2xkZXInKTtcblxuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyLmFwcGVuZChtZnAuY29udGVudCk7XG5cdH0sXG5cblxuXHQvKipcblx0ICogQ3JlYXRlcyBNYWduaWZpYyBQb3B1cCBkYXRhIG9iamVjdCBiYXNlZCBvbiBnaXZlbiBkYXRhXG5cdCAqIEBwYXJhbSAge2ludH0gaW5kZXggSW5kZXggb2YgaXRlbSB0byBwYXJzZVxuXHQgKi9cblx0cGFyc2VFbDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF0sXG5cdFx0XHR0eXBlO1xuXG5cdFx0aWYoaXRlbS50YWdOYW1lKSB7XG5cdFx0XHRpdGVtID0geyBlbDogJChpdGVtKSB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0eXBlID0gaXRlbS50eXBlO1xuXHRcdFx0aXRlbSA9IHsgZGF0YTogaXRlbSwgc3JjOiBpdGVtLnNyYyB9O1xuXHRcdH1cblxuXHRcdGlmKGl0ZW0uZWwpIHtcblx0XHRcdHZhciB0eXBlcyA9IG1mcC50eXBlcztcblxuXHRcdFx0Ly8gY2hlY2sgZm9yICdtZnAtVFlQRScgY2xhc3Ncblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiggaXRlbS5lbC5oYXNDbGFzcygnbWZwLScrdHlwZXNbaV0pICkge1xuXHRcdFx0XHRcdHR5cGUgPSB0eXBlc1tpXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpdGVtLnNyYyA9IGl0ZW0uZWwuYXR0cignZGF0YS1tZnAtc3JjJyk7XG5cdFx0XHRpZighaXRlbS5zcmMpIHtcblx0XHRcdFx0aXRlbS5zcmMgPSBpdGVtLmVsLmF0dHIoJ2hyZWYnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpdGVtLnR5cGUgPSB0eXBlIHx8IG1mcC5zdC50eXBlIHx8ICdpbmxpbmUnO1xuXHRcdGl0ZW0uaW5kZXggPSBpbmRleDtcblx0XHRpdGVtLnBhcnNlZCA9IHRydWU7XG5cdFx0bWZwLml0ZW1zW2luZGV4XSA9IGl0ZW07XG5cdFx0X21mcFRyaWdnZXIoJ0VsZW1lbnRQYXJzZScsIGl0ZW0pO1xuXG5cdFx0cmV0dXJuIG1mcC5pdGVtc1tpbmRleF07XG5cdH0sXG5cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgc2luZ2xlIHBvcHVwIG9yIGEgZ3JvdXAgb2YgcG9wdXBzXG5cdCAqL1xuXHRhZGRHcm91cDogZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcblx0XHR2YXIgZUhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRlLm1mcEVsID0gdGhpcztcblx0XHRcdG1mcC5fb3BlbkNsaWNrKGUsIGVsLCBvcHRpb25zKTtcblx0XHR9O1xuXG5cdFx0aWYoIW9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHR9XG5cblx0XHR2YXIgZU5hbWUgPSAnY2xpY2subWFnbmlmaWNQb3B1cCc7XG5cdFx0b3B0aW9ucy5tYWluRWwgPSBlbDtcblxuXHRcdGlmKG9wdGlvbnMuaXRlbXMpIHtcblx0XHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdFx0ZWwub2ZmKGVOYW1lKS5vbihlTmFtZSwgZUhhbmRsZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zLmlzT2JqID0gZmFsc2U7XG5cdFx0XHRpZihvcHRpb25zLmRlbGVnYXRlKSB7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIG9wdGlvbnMuZGVsZWdhdGUgLCBlSGFuZGxlcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHRpb25zLml0ZW1zID0gZWw7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIGVIYW5kbGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdF9vcGVuQ2xpY2s6IGZ1bmN0aW9uKGUsIGVsLCBvcHRpb25zKSB7XG5cdFx0dmFyIG1pZENsaWNrID0gb3B0aW9ucy5taWRDbGljayAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5taWRDbGljayA6ICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cy5taWRDbGljaztcblxuXG5cdFx0aWYoIW1pZENsaWNrICYmICggZS53aGljaCA9PT0gMiB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuc2hpZnRLZXkgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZGlzYWJsZU9uID0gb3B0aW9ucy5kaXNhYmxlT24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGlzYWJsZU9uIDogJC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLmRpc2FibGVPbjtcblxuXHRcdGlmKGRpc2FibGVPbikge1xuXHRcdFx0aWYoJC5pc0Z1bmN0aW9uKGRpc2FibGVPbikpIHtcblx0XHRcdFx0aWYoICFkaXNhYmxlT24uY2FsbChtZnApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgeyAvLyBlbHNlIGl0J3MgbnVtYmVyXG5cdFx0XHRcdGlmKCBfd2luZG93LndpZHRoKCkgPCBkaXNhYmxlT24gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihlLnR5cGUpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Ly8gVGhpcyB3aWxsIHByZXZlbnQgcG9wdXAgZnJvbSBjbG9zaW5nIGlmIGVsZW1lbnQgaXMgaW5zaWRlIGFuZCBwb3B1cCBpcyBhbHJlYWR5IG9wZW5lZFxuXHRcdFx0aWYobWZwLmlzT3Blbikge1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG9wdGlvbnMuZWwgPSAkKGUubWZwRWwpO1xuXHRcdGlmKG9wdGlvbnMuZGVsZWdhdGUpIHtcblx0XHRcdG9wdGlvbnMuaXRlbXMgPSBlbC5maW5kKG9wdGlvbnMuZGVsZWdhdGUpO1xuXHRcdH1cblx0XHRtZnAub3BlbihvcHRpb25zKTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRleHQgb24gcHJlbG9hZGVyXG5cdCAqL1xuXHR1cGRhdGVTdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuXG5cdFx0aWYobWZwLnByZWxvYWRlcikge1xuXHRcdFx0aWYoX3ByZXZTdGF0dXMgIT09IHN0YXR1cykge1xuXHRcdFx0XHRtZnAuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdtZnAtcy0nK19wcmV2U3RhdHVzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIXRleHQgJiYgc3RhdHVzID09PSAnbG9hZGluZycpIHtcblx0XHRcdFx0dGV4dCA9IG1mcC5zdC50TG9hZGluZztcblx0XHRcdH1cblxuXHRcdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRcdHN0YXR1czogc3RhdHVzLFxuXHRcdFx0XHR0ZXh0OiB0ZXh0XG5cdFx0XHR9O1xuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBzdGF0dXNcblx0XHRcdF9tZnBUcmlnZ2VyKCdVcGRhdGVTdGF0dXMnLCBkYXRhKTtcblxuXHRcdFx0c3RhdHVzID0gZGF0YS5zdGF0dXM7XG5cdFx0XHR0ZXh0ID0gZGF0YS50ZXh0O1xuXG5cdFx0XHRtZnAucHJlbG9hZGVyLmh0bWwodGV4dCk7XG5cblx0XHRcdG1mcC5wcmVsb2FkZXIuZmluZCgnYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyLmFkZENsYXNzKCdtZnAtcy0nK3N0YXR1cyk7XG5cdFx0XHRfcHJldlN0YXR1cyA9IHN0YXR1cztcblx0XHR9XG5cdH0sXG5cblxuXHQvKlxuXHRcdFwiUHJpdmF0ZVwiIGhlbHBlcnMgdGhhdCBhcmVuJ3QgcHJpdmF0ZSBhdCBhbGxcblx0ICovXG5cdC8vIENoZWNrIHRvIGNsb3NlIHBvcHVwIG9yIG5vdFxuXHQvLyBcInRhcmdldFwiIGlzIGFuIGVsZW1lbnQgdGhhdCB3YXMgY2xpY2tlZFxuXHRfY2hlY2tJZkNsb3NlOiBmdW5jdGlvbih0YXJnZXQpIHtcblxuXHRcdGlmKCQodGFyZ2V0KS5oYXNDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjbG9zZU9uQ29udGVudCA9IG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrO1xuXHRcdHZhciBjbG9zZU9uQmcgPSBtZnAuc3QuY2xvc2VPbkJnQ2xpY2s7XG5cblx0XHRpZihjbG9zZU9uQ29udGVudCAmJiBjbG9zZU9uQmcpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFdlIGNsb3NlIHRoZSBwb3B1cCBpZiBjbGljayBpcyBvbiBjbG9zZSBidXR0b24gb3Igb24gcHJlbG9hZGVyLiBPciBpZiB0aGVyZSBpcyBubyBjb250ZW50LlxuXHRcdFx0aWYoIW1mcC5jb250ZW50IHx8ICQodGFyZ2V0KS5oYXNDbGFzcygnbWZwLWNsb3NlJykgfHwgKG1mcC5wcmVsb2FkZXIgJiYgdGFyZ2V0ID09PSBtZnAucHJlbG9hZGVyWzBdKSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIGNsaWNrIGlzIG91dHNpZGUgdGhlIGNvbnRlbnRcblx0XHRcdGlmKCAgKHRhcmdldCAhPT0gbWZwLmNvbnRlbnRbMF0gJiYgISQuY29udGFpbnMobWZwLmNvbnRlbnRbMF0sIHRhcmdldCkpICApIHtcblx0XHRcdFx0aWYoY2xvc2VPbkJnKSB7XG5cdFx0XHRcdFx0Ly8gbGFzdCBjaGVjaywgaWYgdGhlIGNsaWNrZWQgZWxlbWVudCBpcyBpbiBET00sIChpbiBjYXNlIGl0J3MgcmVtb3ZlZCBvbmNsaWNrKVxuXHRcdFx0XHRcdGlmKCAkLmNvbnRhaW5zKGRvY3VtZW50LCB0YXJnZXQpICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYoY2xvc2VPbkNvbnRlbnQpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXHRfYWRkQ2xhc3NUb01GUDogZnVuY3Rpb24oY05hbWUpIHtcblx0XHRtZnAuYmdPdmVybGF5LmFkZENsYXNzKGNOYW1lKTtcblx0XHRtZnAud3JhcC5hZGRDbGFzcyhjTmFtZSk7XG5cdH0sXG5cdF9yZW1vdmVDbGFzc0Zyb21NRlA6IGZ1bmN0aW9uKGNOYW1lKSB7XG5cdFx0dGhpcy5iZ092ZXJsYXkucmVtb3ZlQ2xhc3MoY05hbWUpO1xuXHRcdG1mcC53cmFwLnJlbW92ZUNsYXNzKGNOYW1lKTtcblx0fSxcblx0X2hhc1Njcm9sbEJhcjogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cdFx0cmV0dXJuICggIChtZnAuaXNJRTcgPyBfZG9jdW1lbnQuaGVpZ2h0KCkgOiBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCkgPiAod2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCkpICk7XG5cdH0sXG5cdF9zZXRGb2N1czogZnVuY3Rpb24oKSB7XG5cdFx0KG1mcC5zdC5mb2N1cyA/IG1mcC5jb250ZW50LmZpbmQobWZwLnN0LmZvY3VzKS5lcSgwKSA6IG1mcC53cmFwKS5mb2N1cygpO1xuXHR9LFxuXHRfb25Gb2N1c0luOiBmdW5jdGlvbihlKSB7XG5cdFx0aWYoIGUudGFyZ2V0ICE9PSBtZnAud3JhcFswXSAmJiAhJC5jb250YWlucyhtZnAud3JhcFswXSwgZS50YXJnZXQpICkge1xuXHRcdFx0bWZwLl9zZXRGb2N1cygpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0X3BhcnNlTWFya3VwOiBmdW5jdGlvbih0ZW1wbGF0ZSwgdmFsdWVzLCBpdGVtKSB7XG5cdFx0dmFyIGFycjtcblx0XHRpZihpdGVtLmRhdGEpIHtcblx0XHRcdHZhbHVlcyA9ICQuZXh0ZW5kKGl0ZW0uZGF0YSwgdmFsdWVzKTtcblx0XHR9XG5cdFx0X21mcFRyaWdnZXIoTUFSS1VQX1BBUlNFX0VWRU5ULCBbdGVtcGxhdGUsIHZhbHVlcywgaXRlbV0gKTtcblxuXHRcdCQuZWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0YXJyID0ga2V5LnNwbGl0KCdfJyk7XG5cdFx0XHRpZihhcnIubGVuZ3RoID4gMSkge1xuXHRcdFx0XHR2YXIgZWwgPSB0ZW1wbGF0ZS5maW5kKEVWRU5UX05TICsgJy0nK2FyclswXSk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHZhciBhdHRyID0gYXJyWzFdO1xuXHRcdFx0XHRcdGlmKGF0dHIgPT09ICdyZXBsYWNlV2l0aCcpIHtcblx0XHRcdFx0XHRcdGlmKGVsWzBdICE9PSB2YWx1ZVswXSkge1xuXHRcdFx0XHRcdFx0XHRlbC5yZXBsYWNlV2l0aCh2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGF0dHIgPT09ICdpbWcnKSB7XG5cdFx0XHRcdFx0XHRpZihlbC5pcygnaW1nJykpIHtcblx0XHRcdFx0XHRcdFx0ZWwuYXR0cignc3JjJywgdmFsdWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZWwucmVwbGFjZVdpdGgoICQoJzxpbWc+JykuYXR0cignc3JjJywgdmFsdWUpLmF0dHIoJ2NsYXNzJywgZWwuYXR0cignY2xhc3MnKSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWwuYXR0cihhcnJbMV0sIHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGVtcGxhdGUuZmluZChFVkVOVF9OUyArICctJytrZXkpLmh0bWwodmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdF9nZXRTY3JvbGxiYXJTaXplOiBmdW5jdGlvbigpIHtcblx0XHQvLyB0aHggRGF2aWRcblx0XHRpZihtZnAuc2Nyb2xsYmFyU2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdHNjcm9sbERpdi5zdHlsZS5jc3NUZXh0ID0gJ3dpZHRoOiA5OXB4OyBoZWlnaHQ6IDk5cHg7IG92ZXJmbG93OiBzY3JvbGw7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtOTk5OXB4Oyc7XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG5cdFx0XHRtZnAuc2Nyb2xsYmFyU2l6ZSA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5zY3JvbGxiYXJTaXplO1xuXHR9XG5cbn07IC8qIE1hZ25pZmljUG9wdXAgY29yZSBwcm90b3R5cGUgZW5kICovXG5cblxuXG5cbi8qKlxuICogUHVibGljIHN0YXRpYyBmdW5jdGlvbnNcbiAqL1xuJC5tYWduaWZpY1BvcHVwID0ge1xuXHRpbnN0YW5jZTogbnVsbCxcblx0cHJvdG86IE1hZ25pZmljUG9wdXAucHJvdG90eXBlLFxuXHRtb2R1bGVzOiBbXSxcblxuXHRvcGVuOiBmdW5jdGlvbihvcHRpb25zLCBpbmRleCkge1xuXHRcdF9jaGVja0luc3RhbmNlKCk7XG5cblx0XHRpZighb3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdG9wdGlvbnMuaW5kZXggPSBpbmRleCB8fCAwO1xuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlLm9wZW4ob3B0aW9ucyk7XG5cdH0sXG5cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UgJiYgJC5tYWduaWZpY1BvcHVwLmluc3RhbmNlLmNsb3NlKCk7XG5cdH0sXG5cblx0cmVnaXN0ZXJNb2R1bGU6IGZ1bmN0aW9uKG5hbWUsIG1vZHVsZSkge1xuXHRcdGlmKG1vZHVsZS5vcHRpb25zKSB7XG5cdFx0XHQkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHNbbmFtZV0gPSBtb2R1bGUub3B0aW9ucztcblx0XHR9XG5cdFx0JC5leHRlbmQodGhpcy5wcm90bywgbW9kdWxlLnByb3RvKTtcblx0XHR0aGlzLm1vZHVsZXMucHVzaChuYW1lKTtcblx0fSxcblxuXHRkZWZhdWx0czoge1xuXG5cdFx0Ly8gSW5mbyBhYm91dCBvcHRpb25zIGlzIGluIGRvY3M6XG5cdFx0Ly8gaHR0cDovL2RpbXNlbWVub3YuY29tL3BsdWdpbnMvbWFnbmlmaWMtcG9wdXAvZG9jdW1lbnRhdGlvbi5odG1sI29wdGlvbnNcblxuXHRcdGRpc2FibGVPbjogMCxcblxuXHRcdGtleTogbnVsbCxcblxuXHRcdG1pZENsaWNrOiBmYWxzZSxcblxuXHRcdG1haW5DbGFzczogJycsXG5cblx0XHRwcmVsb2FkZXI6IHRydWUsXG5cblx0XHRmb2N1czogJycsIC8vIENTUyBzZWxlY3RvciBvZiBpbnB1dCB0byBmb2N1cyBhZnRlciBwb3B1cCBpcyBvcGVuZWRcblxuXHRcdGNsb3NlT25Db250ZW50Q2xpY2s6IGZhbHNlLFxuXG5cdFx0Y2xvc2VPbkJnQ2xpY2s6IHRydWUsXG5cblx0XHRjbG9zZUJ0bkluc2lkZTogdHJ1ZSxcblxuXHRcdHNob3dDbG9zZUJ0bjogdHJ1ZSxcblxuXHRcdGVuYWJsZUVzY2FwZUtleTogdHJ1ZSxcblxuXHRcdG1vZGFsOiBmYWxzZSxcblxuXHRcdGFsaWduVG9wOiBmYWxzZSxcblxuXHRcdHJlbW92YWxEZWxheTogMCxcblxuXHRcdHByZXBlbmRUbzogbnVsbCxcblxuXHRcdGZpeGVkQ29udGVudFBvczogJ2F1dG8nLFxuXG5cdFx0Zml4ZWRCZ1BvczogJ2F1dG8nLFxuXG5cdFx0b3ZlcmZsb3dZOiAnYXV0bycsXG5cblx0XHRjbG9zZU1hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWNsb3NlXCI+JiMyMTU7PC9idXR0b24+JyxcblxuXHRcdHRDbG9zZTogJ0Nsb3NlIChFc2MpJyxcblxuXHRcdHRMb2FkaW5nOiAnTG9hZGluZy4uLicsXG5cblx0XHRhdXRvRm9jdXNMYXN0OiB0cnVlXG5cblx0fVxufTtcblxuXG5cbiQuZm4ubWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0X2NoZWNrSW5zdGFuY2UoKTtcblxuXHR2YXIganFFbCA9ICQodGhpcyk7XG5cblx0Ly8gV2UgY2FsbCBzb21lIEFQSSBtZXRob2Qgb2YgZmlyc3QgcGFyYW0gaXMgYSBzdHJpbmdcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0aWYob3B0aW9ucyA9PT0gJ29wZW4nKSB7XG5cdFx0XHR2YXIgaXRlbXMsXG5cdFx0XHRcdGl0ZW1PcHRzID0gX2lzSlEgPyBqcUVsLmRhdGEoJ21hZ25pZmljUG9wdXAnKSA6IGpxRWxbMF0ubWFnbmlmaWNQb3B1cCxcblx0XHRcdFx0aW5kZXggPSBwYXJzZUludChhcmd1bWVudHNbMV0sIDEwKSB8fCAwO1xuXG5cdFx0XHRpZihpdGVtT3B0cy5pdGVtcykge1xuXHRcdFx0XHRpdGVtcyA9IGl0ZW1PcHRzLml0ZW1zW2luZGV4XTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW1zID0ganFFbDtcblx0XHRcdFx0aWYoaXRlbU9wdHMuZGVsZWdhdGUpIHtcblx0XHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmZpbmQoaXRlbU9wdHMuZGVsZWdhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGl0ZW1zID0gaXRlbXMuZXEoIGluZGV4ICk7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX29wZW5DbGljayh7bWZwRWw6aXRlbXN9LCBqcUVsLCBpdGVtT3B0cyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKG1mcC5pc09wZW4pXG5cdFx0XHRcdG1mcFtvcHRpb25zXS5hcHBseShtZnAsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIGNsb25lIG9wdGlvbnMgb2JqXG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcblxuXHRcdC8qXG5cdFx0ICogQXMgWmVwdG8gZG9lc24ndCBzdXBwb3J0IC5kYXRhKCkgbWV0aG9kIGZvciBvYmplY3RzXG5cdFx0ICogYW5kIGl0IHdvcmtzIG9ubHkgaW4gbm9ybWFsIGJyb3dzZXJzXG5cdFx0ICogd2UgYXNzaWduIFwib3B0aW9uc1wiIG9iamVjdCBkaXJlY3RseSB0byB0aGUgRE9NIGVsZW1lbnQuIEZUVyFcblx0XHQgKi9cblx0XHRpZihfaXNKUSkge1xuXHRcdFx0anFFbC5kYXRhKCdtYWduaWZpY1BvcHVwJywgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxRWxbMF0ubWFnbmlmaWNQb3B1cCA9IG9wdGlvbnM7XG5cdFx0fVxuXG5cdFx0bWZwLmFkZEdyb3VwKGpxRWwsIG9wdGlvbnMpO1xuXG5cdH1cblx0cmV0dXJuIGpxRWw7XG59O1xuXG4vKj4+Y29yZSovXG5cbi8qPj5pbmxpbmUqL1xuXG52YXIgSU5MSU5FX05TID0gJ2lubGluZScsXG5cdF9oaWRkZW5DbGFzcyxcblx0X2lubGluZVBsYWNlaG9sZGVyLFxuXHRfbGFzdElubGluZUVsZW1lbnQsXG5cdF9wdXRJbmxpbmVFbGVtZW50c0JhY2sgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfbGFzdElubGluZUVsZW1lbnQpIHtcblx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlci5hZnRlciggX2xhc3RJbmxpbmVFbGVtZW50LmFkZENsYXNzKF9oaWRkZW5DbGFzcykgKS5kZXRhY2goKTtcblx0XHRcdF9sYXN0SW5saW5lRWxlbWVudCA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoSU5MSU5FX05TLCB7XG5cdG9wdGlvbnM6IHtcblx0XHRoaWRkZW5DbGFzczogJ2hpZGUnLCAvLyB3aWxsIGJlIGFwcGVuZGVkIHdpdGggYG1mcC1gIHByZWZpeFxuXHRcdG1hcmt1cDogJycsXG5cdFx0dE5vdEZvdW5kOiAnQ29udGVudCBub3QgZm91bmQnXG5cdH0sXG5cdHByb3RvOiB7XG5cblx0XHRpbml0SW5saW5lOiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKElOTElORV9OUyk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrSU5MSU5FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGdldElubGluZTogZnVuY3Rpb24oaXRlbSwgdGVtcGxhdGUpIHtcblxuXHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXG5cdFx0XHRpZihpdGVtLnNyYykge1xuXHRcdFx0XHR2YXIgaW5saW5lU3QgPSBtZnAuc3QuaW5saW5lLFxuXHRcdFx0XHRcdGVsID0gJChpdGVtLnNyYyk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB0YXJnZXQgZWxlbWVudCBoYXMgcGFyZW50IC0gd2UgcmVwbGFjZSBpdCB3aXRoIHBsYWNlaG9sZGVyIGFuZCBwdXQgaXQgYmFjayBhZnRlciBwb3B1cCBpcyBjbG9zZWRcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gZWxbMF0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRpZihwYXJlbnQgJiYgcGFyZW50LnRhZ05hbWUpIHtcblx0XHRcdFx0XHRcdGlmKCFfaW5saW5lUGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRcdFx0X2hpZGRlbkNsYXNzID0gaW5saW5lU3QuaGlkZGVuQ2xhc3M7XG5cdFx0XHRcdFx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlciA9IF9nZXRFbChfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdFx0XHRfaGlkZGVuQ2xhc3MgPSAnbWZwLScrX2hpZGRlbkNsYXNzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gcmVwbGFjZSB0YXJnZXQgaW5saW5lIGVsZW1lbnQgd2l0aCBwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0X2xhc3RJbmxpbmVFbGVtZW50ID0gZWwuYWZ0ZXIoX2lubGluZVBsYWNlaG9sZGVyKS5kZXRhY2goKS5yZW1vdmVDbGFzcyhfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBpbmxpbmVTdC50Tm90Rm91bmQpO1xuXHRcdFx0XHRcdGVsID0gJCgnPGRpdj4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGl0ZW0uaW5saW5lRWxlbWVudCA9IGVsO1xuXHRcdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCB7fSwgaXRlbSk7XG5cdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmlubGluZSovXG5cbi8qPj5hamF4Ki9cbnZhciBBSkFYX05TID0gJ2FqYXgnLFxuXHRfYWpheEN1cixcblx0X3JlbW92ZUFqYXhDdXJzb3IgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfYWpheEN1cikge1xuXHRcdFx0JChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhfYWpheEN1cik7XG5cdFx0fVxuXHR9LFxuXHRfZGVzdHJveUFqYXhSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblx0XHRpZihtZnAucmVxKSB7XG5cdFx0XHRtZnAucmVxLmFib3J0KCk7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoQUpBWF9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRzZXR0aW5nczogbnVsbCxcblx0XHRjdXJzb3I6ICdtZnAtYWpheC1jdXInLFxuXHRcdHRFcnJvcjogJzxhIGhyZWY9XCIldXJsJVwiPlRoZSBjb250ZW50PC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRBamF4OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKEFKQVhfTlMpO1xuXHRcdFx0X2FqYXhDdXIgPSBtZnAuc3QuYWpheC5jdXJzb3I7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0XHRfbWZwT24oJ0JlZm9yZUNoYW5nZS4nICsgQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0fSxcblx0XHRnZXRBamF4OiBmdW5jdGlvbihpdGVtKSB7XG5cblx0XHRcdGlmKF9hamF4Q3VyKSB7XG5cdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoX2FqYXhDdXIpO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdsb2FkaW5nJyk7XG5cblx0XHRcdHZhciBvcHRzID0gJC5leHRlbmQoe1xuXHRcdFx0XHR1cmw6IGl0ZW0uc3JjLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuXHRcdFx0XHRcdHZhciB0ZW1wID0ge1xuXHRcdFx0XHRcdFx0ZGF0YTpkYXRhLFxuXHRcdFx0XHRcdFx0eGhyOmpxWEhSXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdQYXJzZUFqYXgnLCB0ZW1wKTtcblxuXHRcdFx0XHRcdG1mcC5hcHBlbmRDb250ZW50KCAkKHRlbXAuZGF0YSksIEFKQVhfTlMgKTtcblxuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblxuXHRcdFx0XHRcdG1mcC5fc2V0Rm9jdXMoKTtcblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHRcdFx0fSwgMTYpO1xuXG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdBamF4Q29udGVudEFkZGVkJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRfcmVtb3ZlQWpheEN1cnNvcigpO1xuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSBpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBtZnAuc3QuYWpheC50RXJyb3IucmVwbGFjZSgnJXVybCUnLCBpdGVtLnNyYykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZnAuc3QuYWpheC5zZXR0aW5ncyk7XG5cblx0XHRcdG1mcC5yZXEgPSAkLmFqYXgob3B0cyk7XG5cblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+YWpheCovXG5cbi8qPj5pbWFnZSovXG52YXIgX2ltZ0ludGVydmFsLFxuXHRfZ2V0VGl0bGUgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYoaXRlbS5kYXRhICYmIGl0ZW0uZGF0YS50aXRsZSAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0cmV0dXJuIGl0ZW0uZGF0YS50aXRsZTtcblxuXHRcdHZhciBzcmMgPSBtZnAuc3QuaW1hZ2UudGl0bGVTcmM7XG5cblx0XHRpZihzcmMpIHtcblx0XHRcdGlmKCQuaXNGdW5jdGlvbihzcmMpKSB7XG5cdFx0XHRcdHJldHVybiBzcmMuY2FsbChtZnAsIGl0ZW0pO1xuXHRcdFx0fSBlbHNlIGlmKGl0ZW0uZWwpIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0uZWwuYXR0cihzcmMpIHx8ICcnO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gJyc7XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZSgnaW1hZ2UnLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdG1hcmt1cDogJzxkaXYgY2xhc3M9XCJtZnAtZmlndXJlXCI+Jytcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jbG9zZVwiPjwvZGl2PicrXG5cdFx0XHRcdFx0JzxmaWd1cmU+Jytcblx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWltZ1wiPjwvZGl2PicrXG5cdFx0XHRcdFx0XHQnPGZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtYm90dG9tLWJhclwiPicrXG5cdFx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtdGl0bGVcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNvdW50ZXJcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdFx0XHRcdCc8L2ZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHQnPC9maWd1cmU+Jytcblx0XHRcdFx0JzwvZGl2PicsXG5cdFx0Y3Vyc29yOiAnbWZwLXpvb20tb3V0LWN1cicsXG5cdFx0dGl0bGVTcmM6ICd0aXRsZScsXG5cdFx0dmVydGljYWxGaXQ6IHRydWUsXG5cdFx0dEVycm9yOiAnPGEgaHJlZj1cIiV1cmwlXCI+VGhlIGltYWdlPC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW1nU3QgPSBtZnAuc3QuaW1hZ2UsXG5cdFx0XHRcdG5zID0gJy5pbWFnZSc7XG5cblx0XHRcdG1mcC50eXBlcy5wdXNoKCdpbWFnZScpO1xuXG5cdFx0XHRfbWZwT24oT1BFTl9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5jdXJySXRlbS50eXBlID09PSAnaW1hZ2UnICYmIGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfd2luZG93Lm9mZigncmVzaXplJyArIEVWRU5UX05TKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oJ1Jlc2l6ZScrbnMsIG1mcC5yZXNpemVJbWFnZSk7XG5cdFx0XHRpZihtZnAuaXNMb3dJRSkge1xuXHRcdFx0XHRfbWZwT24oJ0FmdGVyQ2hhbmdlJywgbWZwLnJlc2l6ZUltYWdlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlc2l6ZUltYWdlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpdGVtID0gbWZwLmN1cnJJdGVtO1xuXHRcdFx0aWYoIWl0ZW0gfHwgIWl0ZW0uaW1nKSByZXR1cm47XG5cblx0XHRcdGlmKG1mcC5zdC5pbWFnZS52ZXJ0aWNhbEZpdCkge1xuXHRcdFx0XHR2YXIgZGVjciA9IDA7XG5cdFx0XHRcdC8vIGZpeCBib3gtc2l6aW5nIGluIGllNy84XG5cdFx0XHRcdGlmKG1mcC5pc0xvd0lFKSB7XG5cdFx0XHRcdFx0ZGVjciA9IHBhcnNlSW50KGl0ZW0uaW1nLmNzcygncGFkZGluZy10b3AnKSwgMTApICsgcGFyc2VJbnQoaXRlbS5pbWcuY3NzKCdwYWRkaW5nLWJvdHRvbScpLDEwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZy5jc3MoJ21heC1oZWlnaHQnLCBtZnAud0gtZGVjcik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfb25JbWFnZUhhc1NpemU6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdGlmKGl0ZW0uaW1nKSB7XG5cblx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblxuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtLmlzQ2hlY2tpbmdJbWdTaXplID0gZmFsc2U7XG5cblx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlSGFzU2l6ZScsIGl0ZW0pO1xuXG5cdFx0XHRcdGlmKGl0ZW0uaW1nSGlkZGVuKSB7XG5cdFx0XHRcdFx0aWYobWZwLmNvbnRlbnQpXG5cdFx0XHRcdFx0XHRtZnAuY29udGVudC5yZW1vdmVDbGFzcygnbWZwLWxvYWRpbmcnKTtcblxuXHRcdFx0XHRcdGl0ZW0uaW1nSGlkZGVuID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGdW5jdGlvbiB0aGF0IGxvb3BzIHVudGlsIHRoZSBpbWFnZSBoYXMgc2l6ZSB0byBkaXNwbGF5IGVsZW1lbnRzIHRoYXQgcmVseSBvbiBpdCBhc2FwXG5cdFx0ICovXG5cdFx0ZmluZEltYWdlU2l6ZTogZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHR2YXIgY291bnRlciA9IDAsXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdLFxuXHRcdFx0XHRtZnBTZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKGRlbGF5KSB7XG5cblx0XHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZGVjZWxlcmF0aW5nIGludGVydmFsIHRoYXQgY2hlY2tzIGZvciBzaXplIG9mIGFuIGltYWdlXG5cdFx0XHRcdFx0X2ltZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmKGNvdW50ZXIgPiAyMDApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb3VudGVyKys7XG5cdFx0XHRcdFx0XHRpZihjb3VudGVyID09PSAzKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDEwKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihjb3VudGVyID09PSA0MCkge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCg1MCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY291bnRlciA9PT0gMTAwKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDUwMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgZGVsYXkpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRtZnBTZXRJbnRlcnZhbCgxKTtcblx0XHR9LFxuXG5cdFx0Z2V0SW1hZ2U6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cblx0XHRcdHZhciBndWFyZCA9IDAsXG5cblx0XHRcdFx0Ly8gaW1hZ2UgbG9hZCBjb21wbGV0ZSBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZENvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aWYgKGl0ZW0uaW1nWzBdLmNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uaW1nLm9mZignLm1mcGxvYWRlcicpO1xuXG5cdFx0XHRcdFx0XHRcdGlmKGl0ZW0gPT09IG1mcC5jdXJySXRlbSl7XG5cdFx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblxuXHRcdFx0XHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRpdGVtLmxvYWRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlTG9hZENvbXBsZXRlJyk7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBpZiBpbWFnZSBjb21wbGV0ZSBjaGVjayBmYWlscyAyMDAgdGltZXMgKDIwIHNlYyksIHdlIGFzc3VtZSB0aGF0IHRoZXJlIHdhcyBhbiBlcnJvci5cblx0XHRcdFx0XHRcdFx0Z3VhcmQrKztcblx0XHRcdFx0XHRcdFx0aWYoZ3VhcmQgPCAyMDApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KG9uTG9hZENvbXBsZXRlLDEwMCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0b25Mb2FkRXJyb3IoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBpbWFnZSBlcnJvciBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZEVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcub2ZmKCcubWZwbG9hZGVyJyk7XG5cdFx0XHRcdFx0XHRpZihpdGVtID09PSBtZnAuY3Vyckl0ZW0pe1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIGltZ1N0LnRFcnJvci5yZXBsYWNlKCcldXJsJScsIGl0ZW0uc3JjKSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0aW1nU3QgPSBtZnAuc3QuaW1hZ2U7XG5cblxuXHRcdFx0dmFyIGVsID0gdGVtcGxhdGUuZmluZCgnLm1mcC1pbWcnKTtcblx0XHRcdGlmKGVsLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cdFx0XHRcdGltZy5jbGFzc05hbWUgPSAnbWZwLWltZyc7XG5cdFx0XHRcdGlmKGl0ZW0uZWwgJiYgaXRlbS5lbC5maW5kKCdpbWcnKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRpbWcuYWx0ID0gaXRlbS5lbC5maW5kKCdpbWcnKS5hdHRyKCdhbHQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZyA9ICQoaW1nKS5vbignbG9hZC5tZnBsb2FkZXInLCBvbkxvYWRDb21wbGV0ZSkub24oJ2Vycm9yLm1mcGxvYWRlcicsIG9uTG9hZEVycm9yKTtcblx0XHRcdFx0aW1nLnNyYyA9IGl0ZW0uc3JjO1xuXG5cdFx0XHRcdC8vIHdpdGhvdXQgY2xvbmUoKSBcImVycm9yXCIgZXZlbnQgaXMgbm90IGZpcmluZyB3aGVuIElNRyBpcyByZXBsYWNlZCBieSBuZXcgSU1HXG5cdFx0XHRcdC8vIFRPRE86IGZpbmQgYSB3YXkgdG8gYXZvaWQgc3VjaCBjbG9uaW5nXG5cdFx0XHRcdGlmKGVsLmlzKCdpbWcnKSkge1xuXHRcdFx0XHRcdGl0ZW0uaW1nID0gaXRlbS5pbWcuY2xvbmUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdO1xuXHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZighaW1nLndpZHRoKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwge1xuXHRcdFx0XHR0aXRsZTogX2dldFRpdGxlKGl0ZW0pLFxuXHRcdFx0XHRpbWdfcmVwbGFjZVdpdGg6IGl0ZW0uaW1nXG5cdFx0XHR9LCBpdGVtKTtcblxuXHRcdFx0bWZwLnJlc2l6ZUltYWdlKCk7XG5cblx0XHRcdGlmKGl0ZW0uaGFzU2l6ZSkge1xuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblxuXHRcdFx0XHRpZihpdGVtLmxvYWRFcnJvcikge1xuXHRcdFx0XHRcdHRlbXBsYXRlLmFkZENsYXNzKCdtZnAtbG9hZGluZycpO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgaW1nU3QudEVycm9yLnJlcGxhY2UoJyV1cmwlJywgaXRlbS5zcmMpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2xvYWRpbmcnKTtcblx0XHRcdGl0ZW0ubG9hZGluZyA9IHRydWU7XG5cblx0XHRcdGlmKCFpdGVtLmhhc1NpemUpIHtcblx0XHRcdFx0aXRlbS5pbWdIaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR0ZW1wbGF0ZS5hZGRDbGFzcygnbWZwLWxvYWRpbmcnKTtcblx0XHRcdFx0bWZwLmZpbmRJbWFnZVNpemUoaXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+aW1hZ2UqL1xuXG4vKj4+em9vbSovXG52YXIgaGFzTW96VHJhbnNmb3JtLFxuXHRnZXRIYXNNb3pUcmFuc2Zvcm0gPSBmdW5jdGlvbigpIHtcblx0XHRpZihoYXNNb3pUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aGFzTW96VHJhbnNmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRyZXR1cm4gaGFzTW96VHJhbnNmb3JtO1xuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoJ3pvb20nLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdGVuYWJsZWQ6IGZhbHNlLFxuXHRcdGVhc2luZzogJ2Vhc2UtaW4tb3V0Jyxcblx0XHRkdXJhdGlvbjogMzAwLFxuXHRcdG9wZW5lcjogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIGVsZW1lbnQuaXMoJ2ltZycpID8gZWxlbWVudCA6IGVsZW1lbnQuZmluZCgnaW1nJyk7XG5cdFx0fVxuXHR9LFxuXG5cdHByb3RvOiB7XG5cblx0XHRpbml0Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgem9vbVN0ID0gbWZwLnN0Lnpvb20sXG5cdFx0XHRcdG5zID0gJy56b29tJyxcblx0XHRcdFx0aW1hZ2U7XG5cblx0XHRcdGlmKCF6b29tU3QuZW5hYmxlZCB8fCAhbWZwLnN1cHBvcnRzVHJhbnNpdGlvbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkdXJhdGlvbiA9IHpvb21TdC5kdXJhdGlvbixcblx0XHRcdFx0Z2V0RWxUb0FuaW1hdGUgPSBmdW5jdGlvbihpbWFnZSkge1xuXHRcdFx0XHRcdHZhciBuZXdJbWcgPSBpbWFnZS5jbG9uZSgpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignY2xhc3MnKS5hZGRDbGFzcygnbWZwLWFuaW1hdGVkLWltYWdlJyksXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uID0gJ2FsbCAnKyh6b29tU3QuZHVyYXRpb24vMTAwMCkrJ3MgJyArIHpvb21TdC5lYXNpbmcsXG5cdFx0XHRcdFx0XHRjc3NPYmogPSB7XG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiAnZml4ZWQnLFxuXHRcdFx0XHRcdFx0XHR6SW5kZXg6IDk5OTksXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0XHRcdFx0Jy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSc6ICdoaWRkZW4nXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0dCA9ICd0cmFuc2l0aW9uJztcblxuXHRcdFx0XHRcdGNzc09ialsnLXdlYmtpdC0nK3RdID0gY3NzT2JqWyctbW96LScrdF0gPSBjc3NPYmpbJy1vLScrdF0gPSBjc3NPYmpbdF0gPSB0cmFuc2l0aW9uO1xuXG5cdFx0XHRcdFx0bmV3SW1nLmNzcyhjc3NPYmopO1xuXHRcdFx0XHRcdHJldHVybiBuZXdJbWc7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNob3dNYWluQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9wZW5UaW1lb3V0LFxuXHRcdFx0XHRhbmltYXRlZEltZztcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJytucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0Ly8gQmFzaWNhbGx5LCBhbGwgY29kZSBiZWxvdyBkb2VzIGlzIGNsb25lcyBleGlzdGluZyBpbWFnZSwgcHV0cyBpbiBvbiB0b3Agb2YgdGhlIGN1cnJlbnQgb25lIGFuZCBhbmltYXRlZCBpdFxuXG5cdFx0XHRcdFx0aW1hZ2UgPSBtZnAuX2dldEl0ZW1Ub1pvb20oKTtcblxuXHRcdFx0XHRcdGlmKCFpbWFnZSkge1xuXHRcdFx0XHRcdFx0c2hvd01haW5Db250ZW50KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cblx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCkgKTtcblxuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cblx0XHRcdFx0XHRvcGVuVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCB0cnVlICkgKTtcblx0XHRcdFx0XHRcdG9wZW5UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0XHRzaG93TWFpbkNvbnRlbnQoKTtcblxuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGltYWdlID0gYW5pbWF0ZWRJbWcgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdab29tQW5pbWF0aW9uRW5kZWQnKTtcblx0XHRcdFx0XHRcdFx0fSwgMTYpOyAvLyBhdm9pZCBibGluayB3aGVuIHN3aXRjaGluZyBpbWFnZXNcblxuXHRcdFx0XHRcdFx0fSwgZHVyYXRpb24pOyAvLyB0aGlzIHRpbWVvdXQgZXF1YWxzIGFuaW1hdGlvbiBkdXJhdGlvblxuXG5cdFx0XHRcdFx0fSwgMTYpOyAvLyBieSBhZGRpbmcgdGhpcyB0aW1lb3V0IHdlIGF2b2lkIHNob3J0IGdsaXRjaCBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvblxuXG5cblx0XHRcdFx0XHQvLyBMb3RzIG9mIHRpbWVvdXRzLi4uXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0X21mcE9uKEJFRk9SRV9DTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cblx0XHRcdFx0XHRtZnAuc3QucmVtb3ZhbERlbGF5ID0gZHVyYXRpb247XG5cblx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdGltYWdlID0gbWZwLl9nZXRJdGVtVG9ab29tKCk7XG5cdFx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCh0cnVlKSApO1xuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQoKSApO1xuXHRcdFx0XHRcdH0sIDE2KTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLl9hbGxvd1pvb20oKSkge1xuXHRcdFx0XHRcdHNob3dNYWluQ29udGVudCgpO1xuXHRcdFx0XHRcdGlmKGFuaW1hdGVkSW1nKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5yZW1vdmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aW1hZ2UgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0X2FsbG93Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gbWZwLmN1cnJJdGVtLnR5cGUgPT09ICdpbWFnZSc7XG5cdFx0fSxcblxuXHRcdF9nZXRJdGVtVG9ab29tOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKG1mcC5jdXJySXRlbS5oYXNTaXplKSB7XG5cdFx0XHRcdHJldHVybiBtZnAuY3Vyckl0ZW0uaW1nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBHZXQgZWxlbWVudCBwb3N0aW9uIHJlbGF0aXZlIHRvIHZpZXdwb3J0XG5cdFx0X2dldE9mZnNldDogZnVuY3Rpb24oaXNMYXJnZSkge1xuXHRcdFx0dmFyIGVsO1xuXHRcdFx0aWYoaXNMYXJnZSkge1xuXHRcdFx0XHRlbCA9IG1mcC5jdXJySXRlbS5pbWc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbCA9IG1mcC5zdC56b29tLm9wZW5lcihtZnAuY3Vyckl0ZW0uZWwgfHwgbWZwLmN1cnJJdGVtKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG9mZnNldCA9IGVsLm9mZnNldCgpO1xuXHRcdFx0dmFyIHBhZGRpbmdUb3AgPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctdG9wJyksMTApO1xuXHRcdFx0dmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctYm90dG9tJyksMTApO1xuXHRcdFx0b2Zmc2V0LnRvcCAtPSAoICQod2luZG93KS5zY3JvbGxUb3AoKSAtIHBhZGRpbmdUb3AgKTtcblxuXG5cdFx0XHQvKlxuXG5cdFx0XHRBbmltYXRpbmcgbGVmdCArIHRvcCArIHdpZHRoL2hlaWdodCBsb29rcyBnbGl0Y2h5IGluIEZpcmVmb3gsIGJ1dCBwZXJmZWN0IGluIENocm9tZS4gQW5kIHZpY2UtdmVyc2EuXG5cblx0XHRcdCAqL1xuXHRcdFx0dmFyIG9iaiA9IHtcblx0XHRcdFx0d2lkdGg6IGVsLndpZHRoKCksXG5cdFx0XHRcdC8vIGZpeCBaZXB0byBoZWlnaHQrcGFkZGluZyBpc3N1ZVxuXHRcdFx0XHRoZWlnaHQ6IChfaXNKUSA/IGVsLmlubmVySGVpZ2h0KCkgOiBlbFswXS5vZmZzZXRIZWlnaHQpIC0gcGFkZGluZ0JvdHRvbSAtIHBhZGRpbmdUb3Bcblx0XHRcdH07XG5cblx0XHRcdC8vIEkgaGF0ZSB0byBkbyB0aGlzLCBidXQgdGhlcmUgaXMgbm8gYW5vdGhlciBvcHRpb25cblx0XHRcdGlmKCBnZXRIYXNNb3pUcmFuc2Zvcm0oKSApIHtcblx0XHRcdFx0b2JqWyctbW96LXRyYW5zZm9ybSddID0gb2JqWyd0cmFuc2Zvcm0nXSA9ICd0cmFuc2xhdGUoJyArIG9mZnNldC5sZWZ0ICsgJ3B4LCcgKyBvZmZzZXQudG9wICsgJ3B4KSc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvYmoubGVmdCA9IG9mZnNldC5sZWZ0O1xuXHRcdFx0XHRvYmoudG9wID0gb2Zmc2V0LnRvcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXG5cdH1cbn0pO1xuXG5cblxuLyo+Pnpvb20qL1xuXG4vKj4+aWZyYW1lKi9cblxudmFyIElGUkFNRV9OUyA9ICdpZnJhbWUnLFxuXHRfZW1wdHlQYWdlID0gJy8vYWJvdXQ6YmxhbmsnLFxuXG5cdF9maXhJZnJhbWVCdWdzID0gZnVuY3Rpb24oaXNTaG93aW5nKSB7XG5cdFx0aWYobWZwLmN1cnJUZW1wbGF0ZVtJRlJBTUVfTlNdKSB7XG5cdFx0XHR2YXIgZWwgPSBtZnAuY3VyclRlbXBsYXRlW0lGUkFNRV9OU10uZmluZCgnaWZyYW1lJyk7XG5cdFx0XHRpZihlbC5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gcmVzZXQgc3JjIGFmdGVyIHRoZSBwb3B1cCBpcyBjbG9zZWQgdG8gYXZvaWQgXCJ2aWRlbyBrZWVwcyBwbGF5aW5nIGFmdGVyIHBvcHVwIGlzIGNsb3NlZFwiIGJ1Z1xuXHRcdFx0XHRpZighaXNTaG93aW5nKSB7XG5cdFx0XHRcdFx0ZWxbMF0uc3JjID0gX2VtcHR5UGFnZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElFOCBibGFjayBzY3JlZW4gYnVnIGZpeFxuXHRcdFx0XHRpZihtZnAuaXNJRTgpIHtcblx0XHRcdFx0XHRlbC5jc3MoJ2Rpc3BsYXknLCBpc1Nob3dpbmcgPyAnYmxvY2snIDogJ25vbmUnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKElGUkFNRV9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRtYXJrdXA6ICc8ZGl2IGNsYXNzPVwibWZwLWlmcmFtZS1zY2FsZXJcIj4nK1xuXHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNsb3NlXCI+PC9kaXY+Jytcblx0XHRcdFx0XHQnPGlmcmFtZSBjbGFzcz1cIm1mcC1pZnJhbWVcIiBzcmM9XCIvL2Fib3V0OmJsYW5rXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPicrXG5cdFx0XHRcdCc8L2Rpdj4nLFxuXG5cdFx0c3JjQWN0aW9uOiAnaWZyYW1lX3NyYycsXG5cblx0XHQvLyB3ZSBkb24ndCBjYXJlIGFuZCBzdXBwb3J0IG9ubHkgb25lIGRlZmF1bHQgdHlwZSBvZiBVUkwgYnkgZGVmYXVsdFxuXHRcdHBhdHRlcm5zOiB7XG5cdFx0XHR5b3V0dWJlOiB7XG5cdFx0XHRcdGluZGV4OiAneW91dHViZS5jb20nLFxuXHRcdFx0XHRpZDogJ3Y9Jyxcblx0XHRcdFx0c3JjOiAnLy93d3cueW91dHViZS5jb20vZW1iZWQvJWlkJT9hdXRvcGxheT0xJ1xuXHRcdFx0fSxcblx0XHRcdHZpbWVvOiB7XG5cdFx0XHRcdGluZGV4OiAndmltZW8uY29tLycsXG5cdFx0XHRcdGlkOiAnLycsXG5cdFx0XHRcdHNyYzogJy8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8laWQlP2F1dG9wbGF5PTEnXG5cdFx0XHR9LFxuXHRcdFx0Z21hcHM6IHtcblx0XHRcdFx0aW5kZXg6ICcvL21hcHMuZ29vZ2xlLicsXG5cdFx0XHRcdHNyYzogJyVpZCUmb3V0cHV0PWVtYmVkJ1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJZnJhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnR5cGVzLnB1c2goSUZSQU1FX05TKTtcblxuXHRcdFx0X21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkge1xuXHRcdFx0XHRpZihwcmV2VHlwZSAhPT0gbmV3VHlwZSkge1xuXHRcdFx0XHRcdGlmKHByZXZUeXBlID09PSBJRlJBTUVfTlMpIHtcblx0XHRcdFx0XHRcdF9maXhJZnJhbWVCdWdzKCk7IC8vIGlmcmFtZSBpZiByZW1vdmVkXG5cdFx0XHRcdFx0fSBlbHNlIGlmKG5ld1R5cGUgPT09IElGUkFNRV9OUykge1xuXHRcdFx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3ModHJ1ZSk7IC8vIGlmcmFtZSBpcyBzaG93aW5nXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9Ly8gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gaWZyYW1lIHNvdXJjZSBpcyBzd2l0Y2hlZCwgZG9uJ3QgZG8gYW55dGhpbmdcblx0XHRcdFx0Ly99XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UICsgJy4nICsgSUZSQU1FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3MoKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRnZXRJZnJhbWU6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cdFx0XHR2YXIgZW1iZWRTcmMgPSBpdGVtLnNyYztcblx0XHRcdHZhciBpZnJhbWVTdCA9IG1mcC5zdC5pZnJhbWU7XG5cblx0XHRcdCQuZWFjaChpZnJhbWVTdC5wYXR0ZXJucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVtYmVkU3JjLmluZGV4T2YoIHRoaXMuaW5kZXggKSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYodGhpcy5pZCkge1xuXHRcdFx0XHRcdFx0aWYodHlwZW9mIHRoaXMuaWQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0XHRcdGVtYmVkU3JjID0gZW1iZWRTcmMuc3Vic3RyKGVtYmVkU3JjLmxhc3RJbmRleE9mKHRoaXMuaWQpK3RoaXMuaWQubGVuZ3RoLCBlbWJlZFNyYy5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZW1iZWRTcmMgPSB0aGlzLmlkLmNhbGwoIHRoaXMsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVtYmVkU3JjID0gdGhpcy5zcmMucmVwbGFjZSgnJWlkJScsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBkYXRhT2JqID0ge307XG5cdFx0XHRpZihpZnJhbWVTdC5zcmNBY3Rpb24pIHtcblx0XHRcdFx0ZGF0YU9ialtpZnJhbWVTdC5zcmNBY3Rpb25dID0gZW1iZWRTcmM7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCBkYXRhT2JqLCBpdGVtKTtcblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdH1cblx0fVxufSk7XG5cblxuXG4vKj4+aWZyYW1lKi9cblxuLyo+PmdhbGxlcnkqL1xuLyoqXG4gKiBHZXQgbG9vcGVkIGluZGV4IGRlcGVuZGluZyBvbiBudW1iZXIgb2Ygc2xpZGVzXG4gKi9cbnZhciBfZ2V0TG9vcGVkSWQgPSBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBudW1TbGlkZXMgPSBtZnAuaXRlbXMubGVuZ3RoO1xuXHRcdGlmKGluZGV4ID4gbnVtU2xpZGVzIC0gMSkge1xuXHRcdFx0cmV0dXJuIGluZGV4IC0gbnVtU2xpZGVzO1xuXHRcdH0gZWxzZSAgaWYoaW5kZXggPCAwKSB7XG5cdFx0XHRyZXR1cm4gbnVtU2xpZGVzICsgaW5kZXg7XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleDtcblx0fSxcblx0X3JlcGxhY2VDdXJyVG90YWwgPSBmdW5jdGlvbih0ZXh0LCBjdXJyLCB0b3RhbCkge1xuXHRcdHJldHVybiB0ZXh0LnJlcGxhY2UoLyVjdXJyJS9naSwgY3VyciArIDEpLnJlcGxhY2UoLyV0b3RhbCUvZ2ksIHRvdGFsKTtcblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKCdnYWxsZXJ5Jywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRhcnJvd01hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWFycm93IG1mcC1hcnJvdy0lZGlyJVwiPjwvYnV0dG9uPicsXG5cdFx0cHJlbG9hZDogWzAsMl0sXG5cdFx0bmF2aWdhdGVCeUltZ0NsaWNrOiB0cnVlLFxuXHRcdGFycm93czogdHJ1ZSxcblxuXHRcdHRQcmV2OiAnUHJldmlvdXMgKExlZnQgYXJyb3cga2V5KScsXG5cdFx0dE5leHQ6ICdOZXh0IChSaWdodCBhcnJvdyBrZXkpJyxcblx0XHR0Q291bnRlcjogJyVjdXJyJSBvZiAldG90YWwlJ1xuXHR9LFxuXG5cdHByb3RvOiB7XG5cdFx0aW5pdEdhbGxlcnk6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgZ1N0ID0gbWZwLnN0LmdhbGxlcnksXG5cdFx0XHRcdG5zID0gJy5tZnAtZ2FsbGVyeSc7XG5cblx0XHRcdG1mcC5kaXJlY3Rpb24gPSB0cnVlOyAvLyB0cnVlIC0gbmV4dCwgZmFsc2UgLSBwcmV2XG5cblx0XHRcdGlmKCFnU3QgfHwgIWdTdC5lbmFibGVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtZ2FsbGVyeSc7XG5cblx0XHRcdF9tZnBPbihPUEVOX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRpZihnU3QubmF2aWdhdGVCeUltZ0NsaWNrKSB7XG5cdFx0XHRcdFx0bWZwLndyYXAub24oJ2NsaWNrJytucywgJy5tZnAtaW1nJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihtZnAuaXRlbXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfZG9jdW1lbnQub24oJ2tleWRvd24nK25zLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcblx0XHRcdFx0XHRcdG1mcC5wcmV2KCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XG5cdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdVcGRhdGVTdGF0dXMnK25zLCBmdW5jdGlvbihlLCBkYXRhKSB7XG5cdFx0XHRcdGlmKGRhdGEudGV4dCkge1xuXHRcdFx0XHRcdGRhdGEudGV4dCA9IF9yZXBsYWNlQ3VyclRvdGFsKGRhdGEudGV4dCwgbWZwLmN1cnJJdGVtLmluZGV4LCBtZnAuaXRlbXMubGVuZ3RoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihNQVJLVVBfUEFSU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKGUsIGVsZW1lbnQsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHR2YXIgbCA9IG1mcC5pdGVtcy5sZW5ndGg7XG5cdFx0XHRcdHZhbHVlcy5jb3VudGVyID0gbCA+IDEgPyBfcmVwbGFjZUN1cnJUb3RhbChnU3QudENvdW50ZXIsIGl0ZW0uaW5kZXgsIGwpIDogJyc7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJyArIG5zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLml0ZW1zLmxlbmd0aCA+IDEgJiYgZ1N0LmFycm93cyAmJiAhbWZwLmFycm93TGVmdCkge1xuXHRcdFx0XHRcdHZhciBtYXJrdXAgPSBnU3QuYXJyb3dNYXJrdXAsXG5cdFx0XHRcdFx0XHRhcnJvd0xlZnQgPSBtZnAuYXJyb3dMZWZ0ID0gJCggbWFya3VwLnJlcGxhY2UoLyV0aXRsZSUvZ2ksIGdTdC50UHJldikucmVwbGFjZSgvJWRpciUvZ2ksICdsZWZ0JykgKS5hZGRDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSxcblx0XHRcdFx0XHRcdGFycm93UmlnaHQgPSBtZnAuYXJyb3dSaWdodCA9ICQoIG1hcmt1cC5yZXBsYWNlKC8ldGl0bGUlL2dpLCBnU3QudE5leHQpLnJlcGxhY2UoLyVkaXIlL2dpLCAncmlnaHQnKSApLmFkZENsYXNzKFBSRVZFTlRfQ0xPU0VfQ0xBU1MpO1xuXG5cdFx0XHRcdFx0YXJyb3dMZWZ0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLnByZXYoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRhcnJvd1JpZ2h0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdG1mcC5jb250YWluZXIuYXBwZW5kKGFycm93TGVmdC5hZGQoYXJyb3dSaWdodCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENIQU5HRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fcHJlbG9hZFRpbWVvdXQpIGNsZWFyVGltZW91dChtZnAuX3ByZWxvYWRUaW1lb3V0KTtcblxuXHRcdFx0XHRtZnAuX3ByZWxvYWRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZnAucHJlbG9hZE5lYXJieUltYWdlcygpO1xuXHRcdFx0XHRcdG1mcC5fcHJlbG9hZFRpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHR9LCAxNik7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfZG9jdW1lbnQub2ZmKG5zKTtcblx0XHRcdFx0bWZwLndyYXAub2ZmKCdjbGljaycrbnMpO1xuXHRcdFx0XHRtZnAuYXJyb3dSaWdodCA9IG1mcC5hcnJvd0xlZnQgPSBudWxsO1xuXHRcdFx0fSk7XG5cblx0XHR9LFxuXHRcdG5leHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IHRydWU7XG5cdFx0XHRtZnAuaW5kZXggPSBfZ2V0TG9vcGVkSWQobWZwLmluZGV4ICsgMSk7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZXY6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IGZhbHNlO1xuXHRcdFx0bWZwLmluZGV4ID0gX2dldExvb3BlZElkKG1mcC5pbmRleCAtIDEpO1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRnb1RvOiBmdW5jdGlvbihuZXdJbmRleCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IChuZXdJbmRleCA+PSBtZnAuaW5kZXgpO1xuXHRcdFx0bWZwLmluZGV4ID0gbmV3SW5kZXg7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZWxvYWROZWFyYnlJbWFnZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHAgPSBtZnAuc3QuZ2FsbGVyeS5wcmVsb2FkLFxuXHRcdFx0XHRwcmVsb2FkQmVmb3JlID0gTWF0aC5taW4ocFswXSwgbWZwLml0ZW1zLmxlbmd0aCksXG5cdFx0XHRcdHByZWxvYWRBZnRlciA9IE1hdGgubWluKHBbMV0sIG1mcC5pdGVtcy5sZW5ndGgpLFxuXHRcdFx0XHRpO1xuXG5cdFx0XHRmb3IoaSA9IDE7IGkgPD0gKG1mcC5kaXJlY3Rpb24gPyBwcmVsb2FkQWZ0ZXIgOiBwcmVsb2FkQmVmb3JlKTsgaSsrKSB7XG5cdFx0XHRcdG1mcC5fcHJlbG9hZEl0ZW0obWZwLmluZGV4K2kpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChtZnAuZGlyZWN0aW9uID8gcHJlbG9hZEJlZm9yZSA6IHByZWxvYWRBZnRlcik7IGkrKykge1xuXHRcdFx0XHRtZnAuX3ByZWxvYWRJdGVtKG1mcC5pbmRleC1pKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9wcmVsb2FkSXRlbTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdGluZGV4ID0gX2dldExvb3BlZElkKGluZGV4KTtcblxuXHRcdFx0aWYobWZwLml0ZW1zW2luZGV4XS5wcmVsb2FkZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF07XG5cdFx0XHRpZighaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0aXRlbSA9IG1mcC5wYXJzZUVsKCBpbmRleCApO1xuXHRcdFx0fVxuXG5cdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWQnLCBpdGVtKTtcblxuXHRcdFx0aWYoaXRlbS50eXBlID09PSAnaW1hZ2UnKSB7XG5cdFx0XHRcdGl0ZW0uaW1nID0gJCgnPGltZyBjbGFzcz1cIm1mcC1pbWdcIiAvPicpLm9uKCdsb2FkLm1mcGxvYWRlcicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0pLm9uKCdlcnJvci5tZnBsb2FkZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWRFcnJvcicsIGl0ZW0pO1xuXHRcdFx0XHR9KS5hdHRyKCdzcmMnLCBpdGVtLnNyYyk7XG5cdFx0XHR9XG5cblxuXHRcdFx0aXRlbS5wcmVsb2FkZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5nYWxsZXJ5Ki9cblxuLyo+PnJldGluYSovXG5cbnZhciBSRVRJTkFfTlMgPSAncmV0aW5hJztcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKFJFVElOQV9OUywge1xuXHRvcHRpb25zOiB7XG5cdFx0cmVwbGFjZVNyYzogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0cmV0dXJuIGl0ZW0uc3JjLnJlcGxhY2UoL1xcLlxcdyskLywgZnVuY3Rpb24obSkgeyByZXR1cm4gJ0AyeCcgKyBtOyB9KTtcblx0XHR9LFxuXHRcdHJhdGlvOiAxIC8vIEZ1bmN0aW9uIG9yIG51bWJlci4gIFNldCB0byAxIHRvIGRpc2FibGUuXG5cdH0sXG5cdHByb3RvOiB7XG5cdFx0aW5pdFJldGluYTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEpIHtcblxuXHRcdFx0XHR2YXIgc3QgPSBtZnAuc3QucmV0aW5hLFxuXHRcdFx0XHRcdHJhdGlvID0gc3QucmF0aW87XG5cblx0XHRcdFx0cmF0aW8gPSAhaXNOYU4ocmF0aW8pID8gcmF0aW8gOiByYXRpbygpO1xuXG5cdFx0XHRcdGlmKHJhdGlvID4gMSkge1xuXHRcdFx0XHRcdF9tZnBPbignSW1hZ2VIYXNTaXplJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcuY3NzKHtcblx0XHRcdFx0XHRcdFx0J21heC13aWR0aCc6IGl0ZW0uaW1nWzBdLm5hdHVyYWxXaWR0aCAvIHJhdGlvLFxuXHRcdFx0XHRcdFx0XHQnd2lkdGgnOiAnMTAwJSdcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdF9tZnBPbignRWxlbWVudFBhcnNlJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5zcmMgPSBzdC5yZXBsYWNlU3JjKGl0ZW0sIHJhdGlvKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PnJldGluYSovXG4gX2NoZWNrSW5zdGFuY2UoKTsgfSkpOyIsIiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBQbHlyXG4vLyBwbHlyLmpzIHYyLjAuMTBcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWx6L3BseXJcbi8vIExpY2Vuc2U6IFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIENyZWRpdHM6IGh0dHA6Ly9wYXlwYWwuZ2l0aHViLmlvL2FjY2Vzc2libGUtaHRtbDUtdmlkZW8tcGxheWVyL1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuOyhmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIC8qZ2xvYmFsIGRlZmluZSxtb2R1bGUqL1xuXG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZSwgQ29tbW9uSlMtbGlrZVxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnkocm9vdCwgZG9jdW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRFxuICAgICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhY3Rvcnkocm9vdCwgZG9jdW1lbnQpOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHMgKHJvb3QgaXMgd2luZG93KVxuICAgICAgICByb290LnBseXIgPSBmYWN0b3J5KHJvb3QsIGRvY3VtZW50KTtcbiAgICB9XG59KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8vIEdsb2JhbHNcbiAgICB2YXIgZnVsbHNjcmVlbixcbiAgICBzY3JvbGwgPSB7IHg6IDAsIHk6IDAgfSxcblxuICAgIC8vIERlZmF1bHQgY29uZmlnXG4gICAgZGVmYXVsdHMgPSB7XG4gICAgICAgIGVuYWJsZWQ6ICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGRlYnVnOiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICBhdXRvcGxheTogICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgbG9vcDogICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgIHNlZWtUaW1lOiAgICAgICAgICAgICAgIDEwLFxuICAgICAgICB2b2x1bWU6ICAgICAgICAgICAgICAgICAxMCxcbiAgICAgICAgdm9sdW1lTWluOiAgICAgICAgICAgICAgMCxcbiAgICAgICAgdm9sdW1lTWF4OiAgICAgICAgICAgICAgMTAsXG4gICAgICAgIHZvbHVtZVN0ZXA6ICAgICAgICAgICAgIDEsXG4gICAgICAgIGR1cmF0aW9uOiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgIGRpc3BsYXlEdXJhdGlvbjogICAgICAgIHRydWUsXG4gICAgICAgIGxvYWRTcHJpdGU6ICAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGljb25QcmVmaXg6ICAgICAgICAgICAgICdwbHlyJyxcbiAgICAgICAgaWNvblVybDogICAgICAgICAgICAgICAgJ2h0dHBzOi8vY2RuLnBseXIuaW8vMi4wLjEwL3BseXIuc3ZnJyxcbiAgICAgICAgY2xpY2tUb1BsYXk6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgaGlkZUNvbnRyb2xzOiAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgc2hvd1Bvc3Rlck9uRW5kOiAgICAgICAgZmFsc2UsXG4gICAgICAgIGRpc2FibGVDb250ZXh0TWVudTogICAgIHRydWUsXG4gICAgICAgIGtleWJvYXJkU2hvcmN1dHM6ICAgICAgIHtcbiAgICAgICAgICAgIGZvY3VzZWQ6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGdsb2JhbDogICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgIGNvbnRyb2xzOiAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBzZWVrOiAgICAgICAgICAgICAgIHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgc2VsZWN0b3JzOiB7XG4gICAgICAgICAgICBodG1sNTogICAgICAgICAgICAgICd2aWRlbywgYXVkaW8nLFxuICAgICAgICAgICAgZW1iZWQ6ICAgICAgICAgICAgICAnW2RhdGEtdHlwZV0nLFxuICAgICAgICAgICAgZWRpdGFibGU6ICAgICAgICAgICAnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIFtjb250ZW50ZWRpdGFibGVdJyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogICAgICAgICAgJy5wbHlyJyxcbiAgICAgICAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgd3JhcHBlcjogICAgICAgICcucGx5cl9fY29udHJvbHMnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFiZWxzOiAgICAgICAgICAgICAnW2RhdGEtcGx5cl0nLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgIHNlZWs6ICAgICAgICAgICAnW2RhdGEtcGx5cj1cInNlZWtcIl0nLFxuICAgICAgICAgICAgICAgIHBsYXk6ICAgICAgICAgICAnW2RhdGEtcGx5cj1cInBsYXlcIl0nLFxuICAgICAgICAgICAgICAgIHBhdXNlOiAgICAgICAgICAnW2RhdGEtcGx5cj1cInBhdXNlXCJdJyxcbiAgICAgICAgICAgICAgICByZXN0YXJ0OiAgICAgICAgJ1tkYXRhLXBseXI9XCJyZXN0YXJ0XCJdJyxcbiAgICAgICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgJ1tkYXRhLXBseXI9XCJyZXdpbmRcIl0nLFxuICAgICAgICAgICAgICAgIGZvcndhcmQ6ICAgICAgICAnW2RhdGEtcGx5cj1cImZhc3QtZm9yd2FyZFwiXScsXG4gICAgICAgICAgICAgICAgbXV0ZTogICAgICAgICAgICdbZGF0YS1wbHlyPVwibXV0ZVwiXScsXG4gICAgICAgICAgICAgICAgY2FwdGlvbnM6ICAgICAgICdbZGF0YS1wbHlyPVwiY2FwdGlvbnNcIl0nLFxuICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW46ICAgICAnW2RhdGEtcGx5cj1cImZ1bGxzY3JlZW5cIl0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdm9sdW1lOiB7XG4gICAgICAgICAgICAgICAgaW5wdXQ6ICAgICAgICAgICdbZGF0YS1wbHlyPVwidm9sdW1lXCJdJyxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiAgICAgICAgJy5wbHlyX192b2x1bWUtLWRpc3BsYXknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IHtcbiAgICAgICAgICAgICAgICBjb250YWluZXI6ICAgICAgJy5wbHlyX19wcm9ncmVzcycsXG4gICAgICAgICAgICAgICAgYnVmZmVyOiAgICAgICAgICcucGx5cl9fcHJvZ3Jlc3MtLWJ1ZmZlcicsXG4gICAgICAgICAgICAgICAgcGxheWVkOiAgICAgICAgICcucGx5cl9fcHJvZ3Jlc3MtLXBsYXllZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXB0aW9uczogICAgICAgICAgICcucGx5cl9fY2FwdGlvbnMnLFxuICAgICAgICAgICAgY3VycmVudFRpbWU6ICAgICAgICAnLnBseXJfX3RpbWUtLWN1cnJlbnQnLFxuICAgICAgICAgICAgZHVyYXRpb246ICAgICAgICAgICAnLnBseXJfX3RpbWUtLWR1cmF0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICBjbGFzc2VzOiB7XG4gICAgICAgICAgICBzZXR1cDogICAgICAgICAgICAgICdwbHlyLS1zZXR1cCcsXG4gICAgICAgICAgICByZWFkeTogICAgICAgICAgICAgICdwbHlyLS1yZWFkeScsXG4gICAgICAgICAgICB2aWRlb1dyYXBwZXI6ICAgICAgICdwbHlyX192aWRlby13cmFwcGVyJyxcbiAgICAgICAgICAgIGVtYmVkV3JhcHBlcjogICAgICAgJ3BseXJfX3ZpZGVvLWVtYmVkJyxcbiAgICAgICAgICAgIHR5cGU6ICAgICAgICAgICAgICAgJ3BseXItLXswfScsXG4gICAgICAgICAgICBzdG9wcGVkOiAgICAgICAgICAgICdwbHlyLS1zdG9wcGVkJyxcbiAgICAgICAgICAgIHBsYXlpbmc6ICAgICAgICAgICAgJ3BseXItLXBsYXlpbmcnLFxuICAgICAgICAgICAgbXV0ZWQ6ICAgICAgICAgICAgICAncGx5ci0tbXV0ZWQnLFxuICAgICAgICAgICAgbG9hZGluZzogICAgICAgICAgICAncGx5ci0tbG9hZGluZycsXG4gICAgICAgICAgICBob3ZlcjogICAgICAgICAgICAgICdwbHlyLS1ob3ZlcicsXG4gICAgICAgICAgICB0b29sdGlwOiAgICAgICAgICAgICdwbHlyX190b29sdGlwJyxcbiAgICAgICAgICAgIGhpZGRlbjogICAgICAgICAgICAgJ3BseXJfX3NyLW9ubHknLFxuICAgICAgICAgICAgaGlkZUNvbnRyb2xzOiAgICAgICAncGx5ci0taGlkZS1jb250cm9scycsXG4gICAgICAgICAgICBpc0lvczogICAgICAgICAgICAgICdwbHlyLS1pcy1pb3MnLFxuICAgICAgICAgICAgaXNUb3VjaDogICAgICAgICAgICAncGx5ci0taXMtdG91Y2gnLFxuICAgICAgICAgICAgY2FwdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiAgICAgICAgJ3BseXItLWNhcHRpb25zLWVuYWJsZWQnLFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogICAgICAgICAncGx5ci0tY2FwdGlvbnMtYWN0aXZlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiAgICAgICAgJ3BseXItLWZ1bGxzY3JlZW4tZW5hYmxlZCcsXG4gICAgICAgICAgICAgICAgYWN0aXZlOiAgICAgICAgICdwbHlyLS1mdWxsc2NyZWVuLWFjdGl2ZSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWJGb2N1czogICAgICAgICAgICd0YWItZm9jdXMnXG4gICAgICAgIH0sXG4gICAgICAgIGNhcHRpb25zOiB7XG4gICAgICAgICAgICBkZWZhdWx0QWN0aXZlOiAgICAgIGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxzY3JlZW46IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGZhbGxiYWNrOiAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGFsbG93QXVkaW86ICAgICAgICAgZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgc3RvcmFnZToge1xuICAgICAgICAgICAgZW5hYmxlZDogICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAga2V5OiAgICAgICAgICAgICAgICAncGx5cidcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbHM6ICAgICAgICAgICAgICAgWydwbGF5LWxhcmdlJywgJ3BsYXknLCAncHJvZ3Jlc3MnLCAnY3VycmVudC10aW1lJywgJ211dGUnLCAndm9sdW1lJywgJ2NhcHRpb25zJywgJ2Z1bGxzY3JlZW4nXSxcbiAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgcmVzdGFydDogICAgICAgICAgICAnUmVzdGFydCcsXG4gICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgICAgICdSZXdpbmQge3NlZWt0aW1lfSBzZWNzJyxcbiAgICAgICAgICAgIHBsYXk6ICAgICAgICAgICAgICAgJ1BsYXknLFxuICAgICAgICAgICAgcGF1c2U6ICAgICAgICAgICAgICAnUGF1c2UnLFxuICAgICAgICAgICAgZm9yd2FyZDogICAgICAgICAgICAnRm9yd2FyZCB7c2Vla3RpbWV9IHNlY3MnLFxuICAgICAgICAgICAgcGxheWVkOiAgICAgICAgICAgICAncGxheWVkJyxcbiAgICAgICAgICAgIGJ1ZmZlcmVkOiAgICAgICAgICAgJ2J1ZmZlcmVkJyxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiAgICAgICAgJ0N1cnJlbnQgdGltZScsXG4gICAgICAgICAgICBkdXJhdGlvbjogICAgICAgICAgICdEdXJhdGlvbicsXG4gICAgICAgICAgICB2b2x1bWU6ICAgICAgICAgICAgICdWb2x1bWUnLFxuICAgICAgICAgICAgdG9nZ2xlTXV0ZTogICAgICAgICAnVG9nZ2xlIE11dGUnLFxuICAgICAgICAgICAgdG9nZ2xlQ2FwdGlvbnM6ICAgICAnVG9nZ2xlIENhcHRpb25zJyxcbiAgICAgICAgICAgIHRvZ2dsZUZ1bGxzY3JlZW46ICAgJ1RvZ2dsZSBGdWxsc2NyZWVuJyxcbiAgICAgICAgICAgIGZyYW1lVGl0bGU6ICAgICAgICAgJ1BsYXllciBmb3Ige3RpdGxlfSdcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZXM6IHtcbiAgICAgICAgICAgIGVtYmVkOiAgICAgICAgICAgICAgWyd5b3V0dWJlJywgJ3ZpbWVvJywgJ3NvdW5kY2xvdWQnXSxcbiAgICAgICAgICAgIGh0bWw1OiAgICAgICAgICAgICAgWyd2aWRlbycsICdhdWRpbyddXG4gICAgICAgIH0sXG4gICAgICAgIC8vIFVSTHNcbiAgICAgICAgdXJsczoge1xuICAgICAgICAgICAgdmltZW86IHtcbiAgICAgICAgICAgICAgICBhcGk6ICAgICAgICAgICAgJ2h0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS9hcGkvcGxheWVyLmpzJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5b3V0dWJlOiB7XG4gICAgICAgICAgICAgICAgYXBpOiAgICAgICAgICAgICdodHRwczovL3d3dy55b3V0dWJlLmNvbS9pZnJhbWVfYXBpJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNvdW5kY2xvdWQ6IHtcbiAgICAgICAgICAgICAgICBhcGk6ICAgICAgICAgICAgJ2h0dHBzOi8vdy5zb3VuZGNsb3VkLmNvbS9wbGF5ZXIvYXBpLmpzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBDdXN0b20gY29udHJvbCBsaXN0ZW5lcnNcbiAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgICBzZWVrOiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwbGF5OiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwYXVzZTogICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICByZXN0YXJ0OiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBmb3J3YXJkOiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBtdXRlOiAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB2b2x1bWU6ICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBjYXB0aW9uczogICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiAgICAgICAgIG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gRXZlbnRzIHRvIHdhdGNoIG9uIEhUTUw1IG1lZGlhIGVsZW1lbnRzXG4gICAgICAgIGV2ZW50czogICAgICAgICAgICAgICAgIFsncmVhZHknLCAnZW5kZWQnLCAncHJvZ3Jlc3MnLCAnc3RhbGxlZCcsICdwbGF5aW5nJywgJ3dhaXRpbmcnLCAnY2FucGxheScsICdjYW5wbGF5dGhyb3VnaCcsICdsb2Fkc3RhcnQnLCAnbG9hZGVkZGF0YScsICdsb2FkZWRtZXRhZGF0YScsICd0aW1ldXBkYXRlJywgJ3ZvbHVtZWNoYW5nZScsICdwbGF5JywgJ3BhdXNlJywgJ2Vycm9yJywgJ3NlZWtpbmcnLCAnc2Vla2VkJywgJ2VtcHRpZWQnXSxcbiAgICAgICAgLy8gTG9nZ2luZ1xuICAgICAgICBsb2dQcmVmaXg6ICAgICAgICAgICAgICAnW1BseXJdJ1xuICAgIH07XG5cbiAgICAvLyBDcmVkaXRzOiBodHRwOi8vcGF5cGFsLmdpdGh1Yi5pby9hY2Nlc3NpYmxlLWh0bWw1LXZpZGVvLXBsYXllci9cbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCBkdWUgdG8gbWl4ZWQgc3VwcG9ydCwgVUEgc25pZmZpbmcgaXMgcmVxdWlyZWRcbiAgICBmdW5jdGlvbiBfYnJvd3NlclNuaWZmKCkge1xuICAgICAgICB2YXIgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICAgICAgbmFtZSA9IG5hdmlnYXRvci5hcHBOYW1lLFxuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSAnJyArIHBhcnNlRmxvYXQobmF2aWdhdG9yLmFwcFZlcnNpb24pLFxuICAgICAgICAgICAgbWFqb3JWZXJzaW9uID0gcGFyc2VJbnQobmF2aWdhdG9yLmFwcFZlcnNpb24sIDEwKSxcbiAgICAgICAgICAgIG5hbWVPZmZzZXQsXG4gICAgICAgICAgICB2ZXJPZmZzZXQsXG4gICAgICAgICAgICBpeCxcbiAgICAgICAgICAgIGlzSUUgPSBmYWxzZSxcbiAgICAgICAgICAgIGlzRmlyZWZveCA9IGZhbHNlLFxuICAgICAgICAgICAgaXNDaHJvbWUgPSBmYWxzZSxcbiAgICAgICAgICAgIGlzU2FmYXJpID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdXaW5kb3dzIE5UJykgIT09IC0xKSAmJiAobmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZigncnY6MTEnKSAhPT0gLTEpKSB7XG4gICAgICAgICAgICAvLyBNU0lFIDExXG4gICAgICAgICAgICBpc0lFID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnSUUnO1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSAnMTEnO1xuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdNU0lFJykpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gTVNJRVxuICAgICAgICAgICAgaXNJRSA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gJ0lFJztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDUpO1xuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdDaHJvbWUnKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBDaHJvbWVcbiAgICAgICAgICAgIGlzQ2hyb21lID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnQ2hyb21lJztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDcpO1xuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdTYWZhcmknKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBTYWZhcmlcbiAgICAgICAgICAgIGlzU2FmYXJpID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnU2FmYXJpJztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDcpO1xuICAgICAgICAgICAgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdWZXJzaW9uJykpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCh2ZXJPZmZzZXQgPSB1YS5pbmRleE9mKCdGaXJlZm94JykpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gRmlyZWZveFxuICAgICAgICAgICAgaXNGaXJlZm94ID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnRmlyZWZveCc7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9IHVhLnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA4KTtcbiAgICAgICAgfSBlbHNlIGlmICgobmFtZU9mZnNldCA9IHVhLmxhc3RJbmRleE9mKCcgJykgKyAxKSA8ICh2ZXJPZmZzZXQgPSB1YS5sYXN0SW5kZXhPZignLycpKSkge1xuICAgICAgICAgICAgLy8gSW4gbW9zdCBvdGhlciBicm93c2VycywgJ25hbWUvdmVyc2lvbicgaXMgYXQgdGhlIGVuZCBvZiB1c2VyQWdlbnRcbiAgICAgICAgICAgIG5hbWUgPSB1YS5zdWJzdHJpbmcobmFtZU9mZnNldCx2ZXJPZmZzZXQpO1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSB1YS5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgMSk7XG5cbiAgICAgICAgICAgIGlmIChuYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBuYXZpZ2F0b3IuYXBwTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyaW0gdGhlIGZ1bGxWZXJzaW9uIHN0cmluZyBhdCBzZW1pY29sb24vc3BhY2UgaWYgcHJlc2VudFxuICAgICAgICBpZiAoKGl4ID0gZnVsbFZlcnNpb24uaW5kZXhPZignOycpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gZnVsbFZlcnNpb24uc3Vic3RyaW5nKDAsIGl4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGl4ID0gZnVsbFZlcnNpb24uaW5kZXhPZignICcpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gZnVsbFZlcnNpb24uc3Vic3RyaW5nKDAsIGl4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBtYWpvciB2ZXJzaW9uXG4gICAgICAgIG1ham9yVmVyc2lvbiA9IHBhcnNlSW50KCcnICsgZnVsbFZlcnNpb24sIDEwKTtcbiAgICAgICAgaWYgKGlzTmFOKG1ham9yVmVyc2lvbikpIHtcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gJycgKyBwYXJzZUZsb2F0KG5hdmlnYXRvci5hcHBWZXJzaW9uKTtcbiAgICAgICAgICAgIG1ham9yVmVyc2lvbiA9IHBhcnNlSW50KG5hdmlnYXRvci5hcHBWZXJzaW9uLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gZGF0YVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogICAgICAgbmFtZSxcbiAgICAgICAgICAgIHZlcnNpb246ICAgIG1ham9yVmVyc2lvbixcbiAgICAgICAgICAgIGlzSUU6ICAgICAgIGlzSUUsXG4gICAgICAgICAgICBpc0ZpcmVmb3g6ICBpc0ZpcmVmb3gsXG4gICAgICAgICAgICBpc0Nocm9tZTogICBpc0Nocm9tZSxcbiAgICAgICAgICAgIGlzU2FmYXJpOiAgIGlzU2FmYXJpLFxuICAgICAgICAgICAgaXNJb3M6ICAgICAgLyhpUGFkfGlQaG9uZXxpUG9kKS9nLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKSxcbiAgICAgICAgICAgIGlzVG91Y2g6ICAgICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBtaW1lIHR5cGUgc3VwcG9ydCBhZ2FpbnN0IGEgcGxheWVyIGluc3RhbmNlXG4gICAgLy8gQ3JlZGl0czogaHR0cDovL2RpdmVpbnRvaHRtbDUuaW5mby9ldmVyeXRoaW5nLmh0bWxcbiAgICAvLyBSZWxhdGVkOiBodHRwOi8vd3d3LmxlYW5iYWNrcGx5ci5jb20vdGVzdC9oNW10Lmh0bWxcbiAgICBmdW5jdGlvbiBfc3VwcG9ydE1pbWUocGx5ciwgbWltZVR5cGUpIHtcbiAgICAgICAgdmFyIG1lZGlhID0gcGx5ci5tZWRpYTtcblxuICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAvLyBDaGVjayB0eXBlXG4gICAgICAgICAgICBzd2l0Y2ggKG1pbWVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndmlkZW8vd2VibSc6ICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCd2aWRlby93ZWJtOyBjb2RlY3M9XCJ2cDgsIHZvcmJpc1wiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvL21wNCc6ICAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgndmlkZW8vbXA0OyBjb2RlY3M9XCJhdmMxLjQyRTAxRSwgbXA0YS40MC4yXCInKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAndmlkZW8vb2dnJzogICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCd2aWRlby9vZ2c7IGNvZGVjcz1cInRoZW9yYVwiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBseXIudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgLy8gQ2hlY2sgdHlwZVxuICAgICAgICAgICAgc3dpdGNoIChtaW1lVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvL21wZWcnOiAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgnYXVkaW8vbXBlZzsnKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXVkaW8vb2dnJzogICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCdhdWRpby9vZ2c7IGNvZGVjcz1cInZvcmJpc1wiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvL3dhdic6ICAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgnYXVkaW8vd2F2OyBjb2RlY3M9XCIxXCInKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB3ZSBnb3QgdGhpcyBmYXIsIHdlJ3JlIHN0dWZmZWRcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEluamVjdCBhIHNjcmlwdFxuICAgIGZ1bmN0aW9uIF9pbmplY3RTY3JpcHQoc291cmNlKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHRbc3JjPVwiJyArIHNvdXJjZSArICdcIl0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgdGFnLnNyYyA9IHNvdXJjZTtcbiAgICAgICAgdmFyIGZpcnN0U2NyaXB0VGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICAgICAgICBmaXJzdFNjcmlwdFRhZy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0YWcsIGZpcnN0U2NyaXB0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBFbGVtZW50IGV4aXN0cyBpbiBhbiBhcnJheVxuICAgIGZ1bmN0aW9uIF9pbkFycmF5KGhheXN0YWNrLCBuZWVkbGUpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mICYmIChoYXlzdGFjay5pbmRleE9mKG5lZWRsZSkgIT09IC0xKTtcbiAgICB9XG5cbiAgICAvLyBSZXBsYWNlIGFsbFxuICAgIGZ1bmN0aW9uIF9yZXBsYWNlQWxsKHN0cmluZywgZmluZCwgcmVwbGFjZSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChmaW5kLnJlcGxhY2UoLyhbLiorP1xcXj0hOiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyksICdnJyksIHJlcGxhY2UpO1xuICAgIH1cblxuICAgIC8vIFdyYXAgYW4gZWxlbWVudFxuICAgIGZ1bmN0aW9uIF93cmFwKGVsZW1lbnRzLCB3cmFwcGVyKSB7XG4gICAgICAgIC8vIENvbnZlcnQgYGVsZW1lbnRzYCB0byBhbiBhcnJheSwgaWYgbmVjZXNzYXJ5LlxuICAgICAgICBpZiAoIWVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZWxlbWVudHMgPSBbZWxlbWVudHNdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9vcHMgYmFja3dhcmRzIHRvIHByZXZlbnQgaGF2aW5nIHRvIGNsb25lIHRoZSB3cmFwcGVyIG9uIHRoZVxuICAgICAgICAvLyBmaXJzdCBlbGVtZW50IChzZWUgYGNoaWxkYCBiZWxvdykuXG4gICAgICAgIGZvciAodmFyIGkgPSBlbGVtZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIGNoaWxkICAgPSAoaSA+IDApID8gd3JhcHBlci5jbG9uZU5vZGUodHJ1ZSkgOiB3cmFwcGVyO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcblxuICAgICAgICAgICAgLy8gQ2FjaGUgdGhlIGN1cnJlbnQgcGFyZW50IGFuZCBzaWJsaW5nLlxuICAgICAgICAgICAgdmFyIHBhcmVudCAgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICB2YXIgc2libGluZyA9IGVsZW1lbnQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgIC8vIFdyYXAgdGhlIGVsZW1lbnQgKGlzIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBmcm9tIGl0cyBjdXJyZW50XG4gICAgICAgICAgICAvLyBwYXJlbnQpLlxuICAgICAgICAgICAgY2hpbGQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBlbGVtZW50IGhhZCBhIHNpYmxpbmcsIGluc2VydCB0aGUgd3JhcHBlciBiZWZvcmVcbiAgICAgICAgICAgIC8vIHRoZSBzaWJsaW5nIHRvIG1haW50YWluIHRoZSBIVE1MIHN0cnVjdHVyZTsgb3RoZXJ3aXNlLCBqdXN0XG4gICAgICAgICAgICAvLyBhcHBlbmQgaXQgdG8gdGhlIHBhcmVudC5cbiAgICAgICAgICAgIGlmIChzaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgc2libGluZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVud3JhcCBhbiBlbGVtZW50XG4gICAgLy8gaHR0cDovL3BsYWluanMuY29tL2phdmFzY3JpcHQvbWFuaXB1bGF0aW9uL3Vud3JhcC1hLWRvbS1lbGVtZW50LTM1L1xuICAgIC8qZnVuY3Rpb24gX3Vud3JhcCh3cmFwcGVyKSB7XG4gICAgICAgIC8vIEdldCB0aGUgZWxlbWVudCdzIHBhcmVudCBub2RlXG4gICAgICAgIHZhciBwYXJlbnQgPSB3cmFwcGVyLnBhcmVudE5vZGU7XG5cbiAgICAgICAgLy8gTW92ZSBhbGwgY2hpbGRyZW4gb3V0IG9mIHRoZSBlbGVtZW50XG4gICAgICAgIHdoaWxlICh3cmFwcGVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUod3JhcHBlci5maXJzdENoaWxkLCB3cmFwcGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgZW1wdHkgZWxlbWVudFxuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQod3JhcHBlcik7XG4gICAgfSovXG5cbiAgICAvLyBSZW1vdmUgYW4gZWxlbWVudFxuICAgIGZ1bmN0aW9uIF9yZW1vdmUoZWxlbWVudCkge1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gUHJlcGVuZCBjaGlsZFxuICAgIGZ1bmN0aW9uIF9wcmVwZW5kQ2hpbGQocGFyZW50LCBlbGVtZW50KSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoZWxlbWVudCwgcGFyZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIC8vIFNldCBhdHRyaWJ1dGVzXG4gICAgZnVuY3Rpb24gX3NldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCAoX2lzLmJvb2xlYW4oYXR0cmlidXRlc1trZXldKSAmJiBhdHRyaWJ1dGVzW2tleV0pID8gJycgOiBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5zZXJ0IGEgSFRNTCBlbGVtZW50XG4gICAgZnVuY3Rpb24gX2luc2VydEVsZW1lbnQodHlwZSwgcGFyZW50LCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyA8ZWxlbWVudD5cbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuXG4gICAgICAgIC8vIFNldCBhbGwgcGFzc2VkIGF0dHJpYnV0ZXNcbiAgICAgICAgX3NldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcyk7XG5cbiAgICAgICAgLy8gSW5qZWN0IHRoZSBuZXcgZWxlbWVudFxuICAgICAgICBfcHJlcGVuZENoaWxkKHBhcmVudCwgZWxlbWVudCk7XG4gICAgfVxuXG4gICAgLy8gR2V0IGEgY2xhc3NuYW1lIGZyb20gc2VsZWN0b3JcbiAgICBmdW5jdGlvbiBfZ2V0Q2xhc3NuYW1lKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5yZXBsYWNlKCcuJywgJycpO1xuICAgIH1cblxuICAgIC8vIFRvZ2dsZSBjbGFzcyBvbiBhbiBlbGVtZW50XG4gICAgZnVuY3Rpb24gX3RvZ2dsZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSwgc3RhdGUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0W3N0YXRlID8gJ2FkZCcgOiAncmVtb3ZlJ10oY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAoJyAnICsgZWxlbWVudC5jbGFzc05hbWUgKyAnICcpLnJlcGxhY2UoL1xccysvZywgJyAnKS5yZXBsYWNlKCcgJyArIGNsYXNzTmFtZSArICcgJywgJycpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gbmFtZSArIChzdGF0ZSA/ICcgJyArIGNsYXNzTmFtZSA6ICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhcyBjbGFzcyBuYW1lXG4gICAgZnVuY3Rpb24gX2hhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgY2xhc3NOYW1lICsgJyhcXFxcc3wkKScpLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBFbGVtZW50IG1hdGNoZXMgc2VsZWN0b3JcbiAgICBmdW5jdGlvbiBfbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcCA9IEVsZW1lbnQucHJvdG90eXBlO1xuXG4gICAgICAgIHZhciBmID0gcC5tYXRjaGVzIHx8IHAud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IHAubW96TWF0Y2hlc1NlbGVjdG9yIHx8IHAubXNNYXRjaGVzU2VsZWN0b3IgfHwgZnVuY3Rpb24ocykge1xuICAgICAgICAgICAgcmV0dXJuIFtdLmluZGV4T2YuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpLCB0aGlzKSAhPT0gLTE7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGYuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgLy8gQmluZCBhbG9uZyB3aXRoIGN1c3RvbSBoYW5kbGVyXG4gICAgZnVuY3Rpb24gX3Byb3h5TGlzdGVuZXIoZWxlbWVudCwgZXZlbnROYW1lLCB1c2VyTGlzdGVuZXIsIGRlZmF1bHRMaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xuICAgICAgICBfb24oZWxlbWVudCwgZXZlbnROYW1lLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKHVzZXJMaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIHVzZXJMaXN0ZW5lci5hcHBseShlbGVtZW50LCBbZXZlbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHRMaXN0ZW5lci5hcHBseShlbGVtZW50LCBbZXZlbnRdKTtcbiAgICAgICAgfSwgdXNlQ2FwdHVyZSk7XG4gICAgfVxuXG4gICAgLy8gVG9nZ2xlIGV2ZW50IGxpc3RlbmVyXG4gICAgZnVuY3Rpb24gX3RvZ2dsZUxpc3RlbmVyKGVsZW1lbnQsIGV2ZW50cywgY2FsbGJhY2ssIHRvZ2dsZSwgdXNlQ2FwdHVyZSkge1xuICAgICAgICB2YXIgZXZlbnRMaXN0ID0gZXZlbnRzLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgLy8gV2hldGhlciB0aGUgbGlzdGVuZXIgaXMgYSBjYXB0dXJpbmcgbGlzdGVuZXIgb3Igbm90XG4gICAgICAgIC8vIERlZmF1bHQgdG8gZmFsc2VcbiAgICAgICAgaWYgKCFfaXMuYm9vbGVhbih1c2VDYXB0dXJlKSkge1xuICAgICAgICAgICAgdXNlQ2FwdHVyZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYSBub2RlbGlzdCBpcyBwYXNzZWQsIGNhbGwgaXRzZWxmIG9uIGVhY2ggbm9kZVxuICAgICAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XG4gICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGVsZW1lbnQubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFt4XSBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUxpc3RlbmVyKGVsZW1lbnRbeF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGEgc2luZ2xlIG5vZGUgaXMgcGFzc2VkLCBiaW5kIHRoZSBldmVudCBsaXN0ZW5lclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZWxlbWVudFt0b2dnbGUgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lciddKGV2ZW50TGlzdFtpXSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQmluZCBldmVudFxuICAgIGZ1bmN0aW9uIF9vbihlbGVtZW50LCBldmVudHMsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKSB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBfdG9nZ2xlTGlzdGVuZXIoZWxlbWVudCwgZXZlbnRzLCBjYWxsYmFjaywgdHJ1ZSwgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVbmJpbmQgZXZlbnRcbiAgICAvKmZ1bmN0aW9uIF9vZmYoZWxlbWVudCwgZXZlbnRzLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgX3RvZ2dsZUxpc3RlbmVyKGVsZW1lbnQsIGV2ZW50cywgY2FsbGJhY2ssIGZhbHNlLCB1c2VDYXB0dXJlKTtcbiAgICAgICAgfVxuICAgIH0qL1xuXG4gICAgLy8gVHJpZ2dlciBldmVudFxuICAgIGZ1bmN0aW9uIF9ldmVudChlbGVtZW50LCB0eXBlLCBidWJibGVzLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIC8vIEJhaWwgaWYgbm8gZWxlbWVudFxuICAgICAgICBpZiAoIWVsZW1lbnQgfHwgIXR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgYnViYmxlcyB0byBmYWxzZVxuICAgICAgICBpZiAoIV9pcy5ib29sZWFuKGJ1YmJsZXMpKSB7XG4gICAgICAgICAgICBidWJibGVzID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYW5kIGRpc3BhdGNoIHRoZSBldmVudFxuICAgICAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQodHlwZSwge1xuICAgICAgICAgICAgYnViYmxlczogICAgYnViYmxlcyxcbiAgICAgICAgICAgIGRldGFpbDogICAgIHByb3BlcnRpZXNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV2ZW50XG4gICAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuXG4gICAgLy8gVG9nZ2xlIGFyaWEtcHJlc3NlZCBzdGF0ZSBvbiBhIHRvZ2dsZSBidXR0b25cbiAgICAvLyBodHRwOi8vd3d3LnNzYmJhcnRncm91cC5jb20vYmxvZy9ob3ctbm90LXRvLW1pc3VzZS1hcmlhLXN0YXRlcy1wcm9wZXJ0aWVzLWFuZC1yb2xlc1xuICAgIGZ1bmN0aW9uIF90b2dnbGVTdGF0ZSh0YXJnZXQsIHN0YXRlKSB7XG4gICAgICAgIC8vIEJhaWwgaWYgbm8gdGFyZ2V0XG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgc3RhdGVcbiAgICAgICAgc3RhdGUgPSAoX2lzLmJvb2xlYW4oc3RhdGUpID8gc3RhdGUgOiAhdGFyZ2V0LmdldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJykpO1xuXG4gICAgICAgIC8vIFNldCB0aGUgYXR0cmlidXRlIG9uIHRhcmdldFxuICAgICAgICB0YXJnZXQuc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCBzdGF0ZSk7XG5cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIC8vIEdldCBwZXJjZW50YWdlXG4gICAgZnVuY3Rpb24gX2dldFBlcmNlbnRhZ2UoY3VycmVudCwgbWF4KSB7XG4gICAgICAgIGlmIChjdXJyZW50ID09PSAwIHx8IG1heCA9PT0gMCB8fCBpc05hTihjdXJyZW50KSB8fCBpc05hTihtYXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKChjdXJyZW50IC8gbWF4KSAqIDEwMCkudG9GaXhlZCgyKTtcbiAgICB9XG5cbiAgICAvLyBEZWVwIGV4dGVuZC9tZXJnZSBkZXN0aW5hdGlvbiBvYmplY3Qgd2l0aCBOIG1vcmUgb2JqZWN0c1xuICAgIC8vIGh0dHA6Ly9hbmRyZXdkdXBvbnQubmV0LzIwMDkvMDgvMjgvZGVlcC1leHRlbmRpbmctb2JqZWN0cy1pbi1qYXZhc2NyaXB0L1xuICAgIC8vIFJlbW92ZWQgY2FsbCB0byBhcmd1bWVudHMuY2FsbGVlICh1c2VkIGV4cGxpY2l0IGZ1bmN0aW9uIG5hbWUgaW5zdGVhZClcbiAgICBmdW5jdGlvbiBfZXh0ZW5kKCkge1xuICAgICAgICAvLyBHZXQgYXJndW1lbnRzXG4gICAgICAgIHZhciBvYmplY3RzID0gYXJndW1lbnRzO1xuXG4gICAgICAgIC8vIEJhaWwgaWYgbm90aGluZyB0byBtZXJnZVxuICAgICAgICBpZiAoIW9iamVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXR1cm4gZmlyc3QgaWYgc3BlY2lmaWVkIGJ1dCBub3RoaW5nIHRvIG1lcmdlXG4gICAgICAgIGlmIChvYmplY3RzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdHNbMF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJzdCBvYmplY3QgaXMgdGhlIGRlc3RpbmF0aW9uXG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IEFycmF5LnByb3RvdHlwZS5zaGlmdC5jYWxsKG9iamVjdHMpLFxuICAgICAgICAgICAgbGVuZ3RoICAgICAgPSBvYmplY3RzLmxlbmd0aDtcblxuICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIG9iamVjdHMgdG8gbWVyZ2VcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IG9iamVjdHNbaV07XG5cbiAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VbcHJvcGVydHldICYmIHNvdXJjZVtwcm9wZXJ0eV0uY29uc3RydWN0b3IgJiYgc291cmNlW3Byb3BlcnR5XS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IGRlc3RpbmF0aW9uW3Byb3BlcnR5XSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgX2V4dGVuZChkZXN0aW5hdGlvbltwcm9wZXJ0eV0sIHNvdXJjZVtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHZhcmlhYmxlIHR5cGVzXG4gICAgdmFyIF9pcyA9IHtcbiAgICAgICAgb2JqZWN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZihpbnB1dCkgPT09ICdvYmplY3QnO1xuICAgICAgICB9LFxuICAgICAgICBhcnJheTogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiAodHlwZW9mKGlucHV0KSA9PT0gJ29iamVjdCcgJiYgaW5wdXQuY29uc3RydWN0b3IgPT09IEFycmF5KTtcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmICh0eXBlb2YoaW5wdXQpID09PSAnbnVtYmVyJyAmJiAhaXNOYU4oaW5wdXQgLSAwKSB8fCAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dC5jb25zdHJ1Y3RvciA9PT0gTnVtYmVyKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHN0cmluZzogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dC5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJvb2xlYW46IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnYm9vbGVhbic7XG4gICAgICAgIH0sXG4gICAgICAgIG5vZGVMaXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIGlucHV0IGluc3RhbmNlb2YgTm9kZUxpc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGh0bWxFbGVtZW50OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIGlucHV0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGZ1bmN0aW9uOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgfSxcbiAgICAgICAgdW5kZWZpbmVkOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUGFyc2UgWW91VHViZSBJRCBmcm9tIHVybFxuICAgIGZ1bmN0aW9uIF9wYXJzZVlvdVR1YmVJZCh1cmwpIHtcbiAgICAgICAgdmFyIHJlZ2V4ID0gL14uKih5b3V0dS5iZVxcL3x2XFwvfHVcXC9cXHdcXC98ZW1iZWRcXC98d2F0Y2hcXD92PXxcXCZ2PSkoW14jXFwmXFw/XSopLiovO1xuICAgICAgICByZXR1cm4gKHVybC5tYXRjaChyZWdleCkpID8gUmVnRXhwLiQyIDogdXJsO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIFZpbWVvIElEIGZyb20gdXJsXG4gICAgZnVuY3Rpb24gX3BhcnNlVmltZW9JZCh1cmwpIHtcbiAgICAgICAgdmFyIHJlZ2V4ID0gL14uKih2aW1lby5jb21cXC98dmlkZW9cXC8pKFxcZCspLiovO1xuICAgICAgICByZXR1cm4gKHVybC5tYXRjaChyZWdleCkpID8gUmVnRXhwLiQyIDogdXJsO1xuICAgIH1cblxuICAgIC8vIEZ1bGxzY3JlZW4gQVBJXG4gICAgZnVuY3Rpb24gX2Z1bGxzY3JlZW4oKSB7XG4gICAgICAgIHZhciBmdWxsc2NyZWVuID0ge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRzRnVsbFNjcmVlbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNGdWxsU2NyZWVuOiBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIHJlcXVlc3RGdWxsU2NyZWVuOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgIGNhbmNlbEZ1bGxTY3JlZW46IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgZnVsbFNjcmVlbkV2ZW50TmFtZTogJycsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbnVsbCxcbiAgICAgICAgICAgICAgICBwcmVmaXg6ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnJvd3NlclByZWZpeGVzID0gJ3dlYmtpdCBvIG1veiBtcyBraHRtbCcuc3BsaXQoJyAnKTtcblxuICAgICAgICAvLyBDaGVjayBmb3IgbmF0aXZlIHN1cHBvcnRcbiAgICAgICAgaWYgKCFfaXMudW5kZWZpbmVkKGRvY3VtZW50LmNhbmNlbEZ1bGxTY3JlZW4pKSB7XG4gICAgICAgICAgICBmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgZnVsbHNjcmVlbiBzdXBwb3J0IGJ5IHZlbmRvciBwcmVmaXhcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGJyb3dzZXJQcmVmaXhlcy5sZW5ndGg7IGkgPCBpbDsgaSsrICkge1xuICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4ucHJlZml4ID0gYnJvd3NlclByZWZpeGVzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFfaXMudW5kZWZpbmVkKGRvY3VtZW50W2Z1bGxzY3JlZW4ucHJlZml4ICsgJ0NhbmNlbEZ1bGxTY3JlZW4nXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFfaXMudW5kZWZpbmVkKGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4pICYmIGRvY3VtZW50Lm1zRnVsbHNjcmVlbkVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBNUyAod2hlbiBpc24ndCBpdD8pXG4gICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4ucHJlZml4ID0gJ21zJztcbiAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgbWV0aG9kcyB0byBkbyBzb21ldGhpbmcgdXNlZnVsXG4gICAgICAgIGlmIChmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgLy8gWWV0IGFnYWluIE1pY3Jvc29mdCBhd2Vzb21lbmVzcyxcbiAgICAgICAgICAgIC8vIFNvbWV0aW1lcyB0aGUgcHJlZml4IGlzICdtcycsIHNvbWV0aW1lcyAnTVMnIHRvIGtlZXAgeW91IG9uIHlvdXIgdG9lc1xuICAgICAgICAgICAgZnVsbHNjcmVlbi5mdWxsU2NyZWVuRXZlbnROYW1lID0gKGZ1bGxzY3JlZW4ucHJlZml4ID09PSAnbXMnID8gJ01TRnVsbHNjcmVlbkNoYW5nZScgOiBmdWxsc2NyZWVuLnByZWZpeCArICdmdWxsc2NyZWVuY2hhbmdlJyk7XG5cbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uaXNGdWxsU2NyZWVuID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMucHJlZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJyc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgPT09IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21veic6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQubW96RnVsbFNjcmVlbkVsZW1lbnQgPT09IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnRbdGhpcy5wcmVmaXggKyAnRnVsbHNjcmVlbkVsZW1lbnQnXSA9PT0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZnVsbHNjcmVlbi5yZXF1ZXN0RnVsbFNjcmVlbiA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnByZWZpeCA9PT0gJycpID8gZWxlbWVudC5yZXF1ZXN0RnVsbFNjcmVlbigpIDogZWxlbWVudFt0aGlzLnByZWZpeCArICh0aGlzLnByZWZpeCA9PT0gJ21zJyA/ICdSZXF1ZXN0RnVsbHNjcmVlbicgOiAnUmVxdWVzdEZ1bGxTY3JlZW4nKV0oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmdWxsc2NyZWVuLmNhbmNlbEZ1bGxTY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucHJlZml4ID09PSAnJykgPyBkb2N1bWVudC5jYW5jZWxGdWxsU2NyZWVuKCkgOiBkb2N1bWVudFt0aGlzLnByZWZpeCArICh0aGlzLnByZWZpeCA9PT0gJ21zJyA/ICdFeGl0RnVsbHNjcmVlbicgOiAnQ2FuY2VsRnVsbFNjcmVlbicpXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uZWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5wcmVmaXggPT09ICcnKSA/IGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50IDogZG9jdW1lbnRbdGhpcy5wcmVmaXggKyAnRnVsbHNjcmVlbkVsZW1lbnQnXTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVsbHNjcmVlbjtcbiAgICB9XG5cbiAgICAvLyBMb2NhbCBzdG9yYWdlXG4gICAgdmFyIF9zdG9yYWdlID0ge1xuICAgICAgICBzdXBwb3J0ZWQ6IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghKCdsb2NhbFN0b3JhZ2UnIGluIHdpbmRvdykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRyeSB0byB1c2UgaXQgKGl0IG1pZ2h0IGJlIGRpc2FibGVkLCBlLmcuIHVzZXIgaXMgaW4gcHJpdmF0ZS9wb3JuIG1vZGUpXG4gICAgICAgICAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzEzMVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgdGVzdCBpdGVtXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdfX190ZXN0JywgJ09LJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRlc3QgaXRlbVxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ19fX3Rlc3QnKTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdfX190ZXN0Jyk7XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB2YWx1ZSBtYXRjaGVzXG4gICAgICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQgPT09ICdPSycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSkoKVxuICAgIH07XG5cbiAgICAvLyBQbGF5ZXIgaW5zdGFuY2VcbiAgICBmdW5jdGlvbiBQbHlyKG1lZGlhLCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBseXIgPSB0aGlzLFxuICAgICAgICB0aW1lcnMgPSB7fSxcbiAgICAgICAgYXBpO1xuXG4gICAgICAgIC8vIFNldCBtZWRpYVxuICAgICAgICBwbHlyLm1lZGlhID0gbWVkaWE7XG4gICAgICAgIHZhciBvcmlnaW5hbCA9IG1lZGlhLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAvLyBUcmlnZ2VyIGV2ZW50cywgd2l0aCBwbHlyIGluc3RhbmNlIHBhc3NlZFxuICAgICAgICBmdW5jdGlvbiBfdHJpZ2dlckV2ZW50KGVsZW1lbnQsIHR5cGUsIGJ1YmJsZXMsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIF9ldmVudChlbGVtZW50LCB0eXBlLCBidWJibGVzLCBfZXh0ZW5kKHt9LCBwcm9wZXJ0aWVzLCB7XG4gICAgICAgICAgICAgICAgcGx5cjogYXBpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWJ1Z2dpbmdcbiAgICAgICAgZnVuY3Rpb24gX2NvbnNvbGUodHlwZSwgYXJncykge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSkge1xuICAgICAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcblxuICAgICAgICAgICAgICAgIGlmIChfaXMuc3RyaW5nKGNvbmZpZy5sb2dQcmVmaXgpICYmIGNvbmZpZy5sb2dQcmVmaXgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MudW5zaGlmdChjb25maWcubG9nUHJlZml4KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlW3R5cGVdLmFwcGx5KGNvbnNvbGUsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBfbG9nID0gZnVuY3Rpb24oKSB7IF9jb25zb2xlKCdsb2cnLCBhcmd1bWVudHMpIH0sXG4gICAgICAgICAgICBfd2FybiA9IGZ1bmN0aW9uKCkgeyBfY29uc29sZSgnd2FybicsIGFyZ3VtZW50cykgfTtcblxuICAgICAgICAvLyBMb2cgY29uZmlnIG9wdGlvbnNcbiAgICAgICAgX2xvZygnQ29uZmlnJywgY29uZmlnKTtcblxuICAgICAgICAvLyBHZXQgaWNvbiBVUkxcbiAgICAgICAgZnVuY3Rpb24gX2dldEljb25VcmwoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogICAgICAgIGNvbmZpZy5pY29uVXJsLFxuICAgICAgICAgICAgICAgIGFic29sdXRlOiAgIChjb25maWcuaWNvblVybC5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMCkgfHwgcGx5ci5icm93c2VyLmlzSUVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCdWlsZCB0aGUgZGVmYXVsdCBIVE1MXG4gICAgICAgIGZ1bmN0aW9uIF9idWlsZENvbnRyb2xzKCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGh0bWwgYXJyYXlcbiAgICAgICAgICAgIHZhciBodG1sICAgICAgICA9IFtdLFxuICAgICAgICAgICAgICAgIGljb25VcmwgICAgID0gX2dldEljb25VcmwoKSxcbiAgICAgICAgICAgICAgICBpY29uUGF0aCAgICA9ICghaWNvblVybC5hYnNvbHV0ZSA/IGljb25VcmwudXJsIDogJycpICsgJyMnICsgY29uZmlnLmljb25QcmVmaXg7XG5cbiAgICAgICAgICAgIC8vIExhcmdlciBvdmVybGFpZCBwbGF5IGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ3BsYXktbGFyZ2UnKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cInBsYXlcIiBjbGFzcz1cInBseXJfX3BsYXktbGFyZ2VcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1wbGF5XCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5wbGF5ICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGh0bWwucHVzaCgnPGRpdiBjbGFzcz1cInBseXJfX2NvbnRyb2xzXCI+Jyk7XG5cbiAgICAgICAgICAgIC8vIFJlc3RhcnQgYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncmVzdGFydCcpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicmVzdGFydFwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLXJlc3RhcnRcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnJlc3RhcnQgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmV3aW5kIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ3Jld2luZCcpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicmV3aW5kXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctcmV3aW5kXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5yZXdpbmQgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUGxheSBQYXVzZSBidXR0b25cbiAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIGJlIGEgdG9nZ2xlIGJ1dHRvbiByZWFsbHk/XG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncGxheScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicGxheVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLXBsYXlcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnBsYXkgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicGF1c2VcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1wYXVzZVwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4ucGF1c2UgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmFzdCBmb3J3YXJkIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2Zhc3QtZm9yd2FyZCcpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwiZmFzdC1mb3J3YXJkXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctZmFzdC1mb3J3YXJkXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5mb3J3YXJkICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFByb2dyZXNzXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncHJvZ3Jlc3MnKSkge1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBwcm9ncmVzc1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHNwYW4gY2xhc3M9XCJwbHlyX19wcm9ncmVzc1wiPicsXG4gICAgICAgICAgICAgICAgICAgICc8bGFiZWwgZm9yPVwic2Vla3tpZH1cIiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj5TZWVrPC9sYWJlbD4nLFxuICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGlkPVwic2Vla3tpZH1cIiBjbGFzcz1cInBseXJfX3Byb2dyZXNzLS1zZWVrXCIgdHlwZT1cInJhbmdlXCIgbWluPVwiMFwiIG1heD1cIjEwMFwiIHN0ZXA9XCIwLjFcIiB2YWx1ZT1cIjBcIiBkYXRhLXBseXI9XCJzZWVrXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxwcm9ncmVzcyBjbGFzcz1cInBseXJfX3Byb2dyZXNzLS1wbGF5ZWRcIiBtYXg9XCIxMDBcIiB2YWx1ZT1cIjBcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+PC9wcm9ncmVzcz4nLFxuICAgICAgICAgICAgICAgICAgICAnPHByb2dyZXNzIGNsYXNzPVwicGx5cl9fcHJvZ3Jlc3MtLWJ1ZmZlclwiIG1heD1cIjEwMFwiIHZhbHVlPVwiMFwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4+MDwvc3Bhbj4lICcgKyBjb25maWcuaTE4bi5idWZmZXJlZCxcbiAgICAgICAgICAgICAgICAgICAgJzwvcHJvZ3Jlc3M+Jyk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZWVrIHRvb2x0aXBcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnRvb2x0aXBzLnNlZWspIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8c3BhbiBjbGFzcz1cInBseXJfX3Rvb2x0aXBcIj4wMDowMDwvc3Bhbj4nKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDbG9zZVxuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPC9zcGFuPicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNZWRpYSBjdXJyZW50IHRpbWUgZGlzcGxheVxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2N1cnJlbnQtdGltZScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX190aW1lXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4uY3VycmVudFRpbWUgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX190aW1lLS1jdXJyZW50XCI+MDA6MDA8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWVkaWEgZHVyYXRpb24gZGlzcGxheVxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2R1cmF0aW9uJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3RpbWVcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5kdXJhdGlvbiArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3RpbWUtLWR1cmF0aW9uXCI+MDA6MDA8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVG9nZ2xlIG11dGUgYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAnbXV0ZScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwibXV0ZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyBjbGFzcz1cImljb24tLW11dGVkXCI+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1tdXRlZFwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctdm9sdW1lXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi50b2dnbGVNdXRlICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFZvbHVtZSByYW5nZSBjb250cm9sXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAndm9sdW1lJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3ZvbHVtZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGZvcj1cInZvbHVtZXtpZH1cIiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4udm9sdW1lICsgJzwvbGFiZWw+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8aW5wdXQgaWQ9XCJ2b2x1bWV7aWR9XCIgY2xhc3M9XCJwbHlyX192b2x1bWUtLWlucHV0XCIgdHlwZT1cInJhbmdlXCIgbWluPVwiJyArIGNvbmZpZy52b2x1bWVNaW4gKyAnXCIgbWF4PVwiJyArIGNvbmZpZy52b2x1bWVNYXggKyAnXCIgdmFsdWU9XCInICsgY29uZmlnLnZvbHVtZSArICdcIiBkYXRhLXBseXI9XCJ2b2x1bWVcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxwcm9ncmVzcyBjbGFzcz1cInBseXJfX3ZvbHVtZS0tZGlzcGxheVwiIG1heD1cIicgKyBjb25maWcudm9sdW1lTWF4ICsgJ1wiIHZhbHVlPVwiJyArIGNvbmZpZy52b2x1bWVNaW4gKyAnXCIgcm9sZT1cInByZXNlbnRhdGlvblwiPjwvcHJvZ3Jlc3M+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvc3Bhbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGNhcHRpb25zIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2NhcHRpb25zJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJjYXB0aW9uc1wiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyBjbGFzcz1cImljb24tLWNhcHRpb25zLW9uXCI+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1jYXB0aW9ucy1vblwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCsgJy1jYXB0aW9ucy1vZmZcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnRvZ2dsZUNhcHRpb25zICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRvZ2dsZSBmdWxsc2NyZWVuIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ2Z1bGxzY3JlZW4nKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cImZ1bGxzY3JlZW5cIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmcgY2xhc3M9XCJpY29uLS1leGl0LWZ1bGxzY3JlZW5cIj48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLWV4aXQtZnVsbHNjcmVlblwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctZW50ZXItZnVsbHNjcmVlblwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4udG9nZ2xlRnVsbHNjcmVlbiArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbG9zZSBldmVyeXRoaW5nXG4gICAgICAgICAgICBodG1sLnB1c2goJzwvZGl2PicpO1xuXG4gICAgICAgICAgICByZXR1cm4gaHRtbC5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGZ1bGxzY3JlZW5cbiAgICAgICAgZnVuY3Rpb24gX3NldHVwRnVsbHNjcmVlbigpIHtcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKChwbHlyLnR5cGUgIT09ICdhdWRpbycgfHwgY29uZmlnLmZ1bGxzY3JlZW4uYWxsb3dBdWRpbykgJiYgY29uZmlnLmZ1bGxzY3JlZW4uZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBuYXRpdmUgc3VwcG9ydFxuICAgICAgICAgICAgICAgIHZhciBuYXRpdmVTdXBwb3J0ID0gZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW47XG5cbiAgICAgICAgICAgICAgICBpZiAobmF0aXZlU3VwcG9ydCB8fCAoY29uZmlnLmZ1bGxzY3JlZW4uZmFsbGJhY2sgJiYgIV9pbkZyYW1lKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2coKG5hdGl2ZVN1cHBvcnQgPyAnTmF0aXZlJyA6ICdGYWxsYmFjaycpICsgJyBmdWxsc2NyZWVuIGVuYWJsZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgc3R5bGluZyBob29rXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuZnVsbHNjcmVlbi5lbmFibGVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfbG9nKCdGdWxsc2NyZWVuIG5vdCBzdXBwb3J0ZWQgYW5kIGZhbGxiYWNrIGRpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVG9nZ2xlIHN0YXRlXG4gICAgICAgICAgICAgICAgaWYgKHBseXIuYnV0dG9ucyAmJiBwbHlyLmJ1dHRvbnMuZnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLmZ1bGxzY3JlZW4sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXR1cCBmb2N1cyB0cmFwXG4gICAgICAgICAgICAgICAgX2ZvY3VzVHJhcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgY2FwdGlvbnNcbiAgICAgICAgZnVuY3Rpb24gX3NldHVwQ2FwdGlvbnMoKSB7XG4gICAgICAgICAgICAvLyBCYWlsIGlmIG5vdCBIVE1MNSB2aWRlb1xuICAgICAgICAgICAgaWYgKHBseXIudHlwZSAhPT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5qZWN0IHRoZSBjb250YWluZXJcbiAgICAgICAgICAgIGlmICghX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jYXB0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnZpZGVvQ29udGFpbmVyLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsICc8ZGl2IGNsYXNzPVwiJyArIF9nZXRDbGFzc25hbWUoY29uZmlnLnNlbGVjdG9ycy5jYXB0aW9ucykgKyAnXCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERldGVybWluZSBpZiBIVE1MNSB0ZXh0VHJhY2tzIGlzIHN1cHBvcnRlZFxuICAgICAgICAgICAgcGx5ci51c2luZ1RleHRUcmFja3MgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnRleHRUcmFja3MpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnVzaW5nVGV4dFRyYWNrcyA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCBVUkwgb2YgY2FwdGlvbiBmaWxlIGlmIGV4aXN0c1xuICAgICAgICAgICAgdmFyIGNhcHRpb25TcmMgPSAnJyxcbiAgICAgICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gcGx5ci5tZWRpYS5jaGlsZE5vZGVzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2ldLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0cmFjaycpIHtcbiAgICAgICAgICAgICAgICAgICAga2luZCA9IGNoaWxkcmVuW2ldLmtpbmQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChraW5kID09PSAnY2FwdGlvbnMnIHx8IGtpbmQgPT09ICdzdWJ0aXRsZXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uU3JjID0gY2hpbGRyZW5baV0uZ2V0QXR0cmlidXRlKCdzcmMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVjb3JkIGlmIGNhcHRpb24gZmlsZSBleGlzdHMgb3Igbm90XG4gICAgICAgICAgICBwbHlyLmNhcHRpb25FeGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGNhcHRpb25TcmMgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5jYXB0aW9uRXhpc3RzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX2xvZygnTm8gY2FwdGlvbiB0cmFjayBmb3VuZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfbG9nKCdDYXB0aW9uIHRyYWNrIGZvdW5kOyBVUkk6ICcgKyBjYXB0aW9uU3JjKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgbm8gY2FwdGlvbiBmaWxlIGV4aXN0cywgaGlkZSBjb250YWluZXIgZm9yIGNhcHRpb24gdGV4dFxuICAgICAgICAgICAgaWYgKCFwbHlyLmNhcHRpb25FeGlzdHMpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmVuYWJsZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUdXJuIG9mZiBuYXRpdmUgY2FwdGlvbiByZW5kZXJpbmcgdG8gYXZvaWQgZG91YmxlIGNhcHRpb25zXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBkb2Vzbid0IHNlZW0gdG8gd29yayBpbiBTYWZhcmkgNyssIHNvIHRoZSA8dHJhY2s+IGVsZW1lbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIGRvbSBiZWxvd1xuICAgICAgICAgICAgICAgIHZhciB0cmFja3MgPSBwbHlyLm1lZGlhLnRleHRUcmFja3M7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0cmFja3MubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tzW3hdLm1vZGUgPSAnaGlkZGVuJztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBFbmFibGUgVUlcbiAgICAgICAgICAgICAgICBfc2hvd0NhcHRpb25zKHBseXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gRGlzYWJsZSB1bnN1cHBvcnRlZCBicm93c2VycyB0aGFuIHJlcG9ydCBmYWxzZSBwb3NpdGl2ZVxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggYnVnOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDMzMTQ0XG4gICAgICAgICAgICAgICAgaWYgKChwbHlyLmJyb3dzZXIuaXNJRSAmJiBwbHlyLmJyb3dzZXIudmVyc2lvbiA+PSAxMCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHBseXIuYnJvd3Nlci5pc0ZpcmVmb3ggJiYgcGx5ci5icm93c2VyLnZlcnNpb24gPj0gMzEpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVidWdnaW5nXG4gICAgICAgICAgICAgICAgICAgIF9sb2coJ0RldGVjdGVkIGJyb3dzZXIgd2l0aCBrbm93biBUZXh0VHJhY2sgaXNzdWVzIC0gdXNpbmcgbWFudWFsIGZhbGxiYWNrJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRvIGZhbHNlIHNvIHNraXBzIHRvICdtYW51YWwnIGNhcHRpb25pbmdcbiAgICAgICAgICAgICAgICAgICAgcGx5ci51c2luZ1RleHRUcmFja3MgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZW5kZXJpbmcgY2FwdGlvbiB0cmFja3NcbiAgICAgICAgICAgICAgICAvLyBOYXRpdmUgc3VwcG9ydCByZXF1aXJlZCAtIGh0dHA6Ly9jYW5pdXNlLmNvbS93ZWJ2dHRcbiAgICAgICAgICAgICAgICBpZiAocGx5ci51c2luZ1RleHRUcmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvZygnVGV4dFRyYWNrcyBzdXBwb3J0ZWQnKTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRyYWNrcy5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrID0gdHJhY2tzW3ldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2sua2luZCA9PT0gJ2NhcHRpb25zJyB8fCB0cmFjay5raW5kID09PSAnc3VidGl0bGVzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9vbih0cmFjaywgJ2N1ZWNoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IGEgY3VlLCBpZiB0aGVyZSBpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlQ3Vlc1swXSAmJiAndGV4dCcgaW4gdGhpcy5hY3RpdmVDdWVzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbih0aGlzLmFjdGl2ZUN1ZXNbMF0uZ2V0Q3VlQXNIVE1MKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldENhcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FwdGlvbiB0cmFja3Mgbm90IG5hdGl2ZWx5IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgICAgICBfbG9nKCdUZXh0VHJhY2tzIG5vdCBzdXBwb3J0ZWQgc28gcmVuZGVyaW5nIGNhcHRpb25zIG1hbnVhbGx5Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVuZGVyIGNhcHRpb25zIGZyb20gYXJyYXkgYXQgYXBwcm9wcmlhdGUgdGltZVxuICAgICAgICAgICAgICAgICAgICBwbHlyLmN1cnJlbnRDYXB0aW9uID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY2FwdGlvbnMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FwdGlvblNyYyAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBYTUxIdHRwUmVxdWVzdCBPYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FwdGlvbnMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IHhoci5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQWNjb3JkaW5nIHRvIHdlYnZ0dCBzcGVjLCBsaW5lIHRlcm1pbmF0b3IgY29uc2lzdHMgb2Ygb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENSTEYgKFUrMDAwRCBVKzAwMEEpLCBMRiAoVSswMDBBKSBvciBDUiAoVSswMDBEKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVTZXBhcmF0b3IgPSAnXFxyXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlcS5pbmRleE9mKGxpbmVTZXBhcmF0b3IrbGluZVNlcGFyYXRvcikgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVxLmluZGV4T2YoJ1xcclxccicpICE9PSAtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTZXBhcmF0b3IgPSAnXFxyJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU2VwYXJhdG9yID0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9ucyA9IHJlcS5zcGxpdChsaW5lU2VwYXJhdG9yK2xpbmVTZXBhcmF0b3IpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IGNhcHRpb25zLmxlbmd0aDsgcisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdGlvbiA9IGNhcHRpb25zW3JdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuY2FwdGlvbnNbcl0gPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcGFydHMgb2YgdGhlIGNhcHRpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gY2FwdGlvbi5zcGxpdChsaW5lU2VwYXJhdG9yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5jYXNlIGNhcHRpb24gbnVtYmVycyBhcmUgYWRkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFydHNbaW5kZXhdLmluZGV4T2YoXCI6XCIpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5jYXB0aW9uc1tyXSA9IFtwYXJ0c1tpbmRleF0sIHBhcnRzW2luZGV4ICsgMV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZmlyc3QgZWxlbWVudCAoJ1ZUVCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmNhcHRpb25zLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2coJ1N1Y2Nlc3NmdWxseSBsb2FkZWQgdGhlIGNhcHRpb24gZmlsZSB2aWEgQUpBWCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dhcm4oY29uZmlnLmxvZ1ByZWZpeCArICdUaGVyZSB3YXMgYSBwcm9ibGVtIGxvYWRpbmcgdGhlIGNhcHRpb24gZmlsZSB2aWEgQUpBWCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oJ2dldCcsIGNhcHRpb25TcmMsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHRoZSBjdXJyZW50IGNhcHRpb25cbiAgICAgICAgZnVuY3Rpb24gX3NldENhcHRpb24oY2FwdGlvbikge1xuICAgICAgICAgICAgLyoganNoaW50IHVudXNlZDpmYWxzZSAqL1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuY2FwdGlvbnMpLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cbiAgICAgICAgICAgIC8vIEVtcHR5IHRoZSBjb250YWluZXJcbiAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBlbXB0eVxuICAgICAgICAgICAgaWYgKF9pcy51bmRlZmluZWQoY2FwdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjYXB0aW9uID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgc3BhbiBjb250ZW50XG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhjYXB0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuaW5uZXJIVE1MID0gY2FwdGlvbi50cmltKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoY2FwdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBuZXcgY2FwdGlvbiB0ZXh0XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGVudCk7XG5cbiAgICAgICAgICAgIC8vIEZvcmNlIHJlZHJhdyAoZm9yIFNhZmFyaSlcbiAgICAgICAgICAgIHZhciByZWRyYXcgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FwdGlvbnMgZnVuY3Rpb25zXG4gICAgICAgIC8vIFNlZWsgdGhlIG1hbnVhbCBjYXB0aW9uIHRpbWUgYW5kIHVwZGF0ZSBVSVxuICAgICAgICBmdW5jdGlvbiBfc2Vla01hbnVhbENhcHRpb25zKHRpbWUpIHtcbiAgICAgICAgICAgIC8vIFV0aWxpdGllcyBmb3IgY2FwdGlvbiB0aW1lIGNvZGVzXG4gICAgICAgICAgICBmdW5jdGlvbiBfdGltZWNvZGVDb21tb24odGMsIHBvcykge1xuICAgICAgICAgICAgICAgIHZhciB0Y3BhaXIgPSBbXTtcbiAgICAgICAgICAgICAgICB0Y3BhaXIgPSB0Yy5zcGxpdCgnIC0tPiAnKTtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGNwYWlyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlYlZUVCBhbGxvd3MgZm9yIGV4dHJhIG1ldGEgZGF0YSBhZnRlciB0aGUgdGltZXN0YW1wIGxpbmVcbiAgICAgICAgICAgICAgICAgICAgLy8gU28gZ2V0IHJpZCBvZiB0aGlzIGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICB0Y3BhaXJbaV0gPSB0Y3BhaXJbaV0ucmVwbGFjZSgvKFxcZCs6XFxkKzpcXGQrXFwuXFxkKykuKi8sIFwiJDFcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfc3ViVGNTZWNzKHRjcGFpcltwb3NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIF90aW1lY29kZU1pbih0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGltZWNvZGVDb21tb24odGMsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gX3RpbWVjb2RlTWF4KHRjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aW1lY29kZUNvbW1vbih0YywgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBfc3ViVGNTZWNzKHRjKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRjID09PSBudWxsIHx8IHRjID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRjMSA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGMyID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzO1xuICAgICAgICAgICAgICAgICAgICB0YzEgPSB0Yy5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICB0YzIgPSB0YzFbMF0uc3BsaXQoJzonKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IE1hdGguZmxvb3IodGMyWzBdKjYwKjYwKSArIE1hdGguZmxvb3IodGMyWzFdKjYwKSArIE1hdGguZmxvb3IodGMyWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlY29uZHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBpdCdzIG5vdCB2aWRlbywgb3Igd2UncmUgdXNpbmcgdGV4dFRyYWNrcywgYmFpbC5cbiAgICAgICAgICAgIGlmIChwbHlyLnVzaW5nVGV4dFRyYWNrcyB8fCBwbHlyLnR5cGUgIT09ICd2aWRlbycgfHwgIXBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IHN1YmNvdW50XG4gICAgICAgICAgICBwbHlyLnN1YmNvdW50ID0gMDtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgdGltZSBpcyBhIG51bWJlciwgaWYgbm90IHVzZSBjdXJyZW50VGltZVxuICAgICAgICAgICAgLy8gSUUgaGFzIGEgYnVnIHdoZXJlIGN1cnJlbnRUaW1lIGRvZXNuJ3QgZ28gdG8gMFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly90d2l0dGVyLmNvbS9TYW1fUG90dHMvc3RhdHVzLzU3MzcxNTc0NjUwNjczMTUyMVxuICAgICAgICAgICAgdGltZSA9IF9pcy5udW1iZXIodGltZSkgPyB0aW1lIDogcGx5ci5tZWRpYS5jdXJyZW50VGltZTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBzdWJzIGF2YWlsYWJsZSwgYmFpbFxuICAgICAgICAgICAgaWYgKCFwbHlyLmNhcHRpb25zW3BseXIuc3ViY291bnRdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGlsZSAoX3RpbWVjb2RlTWF4KHBseXIuY2FwdGlvbnNbcGx5ci5zdWJjb3VudF1bMF0pIDwgdGltZS50b0ZpeGVkKDEpKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5zdWJjb3VudCsrO1xuICAgICAgICAgICAgICAgIGlmIChwbHlyLnN1YmNvdW50ID4gcGx5ci5jYXB0aW9ucy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuc3ViY291bnQgPSBwbHlyLmNhcHRpb25zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIG5leHQgY2FwdGlvbiBpcyBpbiB0aGUgY3VycmVudCB0aW1lIHJhbmdlXG4gICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5jdXJyZW50VGltZS50b0ZpeGVkKDEpID49IF90aW1lY29kZU1pbihwbHlyLmNhcHRpb25zW3BseXIuc3ViY291bnRdWzBdKSAmJlxuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUudG9GaXhlZCgxKSA8PSBfdGltZWNvZGVNYXgocGx5ci5jYXB0aW9uc1twbHlyLnN1YmNvdW50XVswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5jdXJyZW50Q2FwdGlvbiA9IHBseXIuY2FwdGlvbnNbcGx5ci5zdWJjb3VudF1bMV07XG5cbiAgICAgICAgICAgICAgICAvLyBSZW5kZXIgdGhlIGNhcHRpb25cbiAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbihwbHlyLmN1cnJlbnRDYXB0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3NldENhcHRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc3BsYXkgY2FwdGlvbnMgY29udGFpbmVyIGFuZCBidXR0b24gKGZvciBpbml0aWFsaXphdGlvbilcbiAgICAgICAgZnVuY3Rpb24gX3Nob3dDYXB0aW9ucygpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gY2FwdGlvbiB0b2dnbGUsIGJhaWxcbiAgICAgICAgICAgIGlmICghcGx5ci5idXR0b25zLmNhcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmVuYWJsZWQsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBUcnkgdG8gbG9hZCB0aGUgdmFsdWUgZnJvbSBzdG9yYWdlXG4gICAgICAgICAgICB2YXIgYWN0aXZlID0gcGx5ci5zdG9yYWdlLmNhcHRpb25zRW5hYmxlZDtcblxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIGZhbGwgYmFjayB0byB0aGUgZGVmYXVsdCBjb25maWdcbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4oYWN0aXZlKSkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZSA9IGNvbmZpZy5jYXB0aW9ucy5kZWZhdWx0QWN0aXZlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5jYXB0aW9ucy5hY3RpdmUsIHRydWUpO1xuICAgICAgICAgICAgICAgIF90b2dnbGVTdGF0ZShwbHlyLmJ1dHRvbnMuY2FwdGlvbnMsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZCBhbGwgZWxlbWVudHNcbiAgICAgICAgZnVuY3Rpb24gX2dldEVsZW1lbnRzKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gcGx5ci5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIGEgc2luZ2xlIGVsZW1lbnRcbiAgICAgICAgZnVuY3Rpb24gX2dldEVsZW1lbnQoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBfZ2V0RWxlbWVudHMoc2VsZWN0b3IpWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHdlJ3JlIGluIGFuIGlmcmFtZVxuICAgICAgICBmdW5jdGlvbiBfaW5GcmFtZSgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYXAgZm9jdXMgaW5zaWRlIGNvbnRhaW5lclxuICAgICAgICBmdW5jdGlvbiBfZm9jdXNUcmFwKCkge1xuICAgICAgICAgICAgdmFyIHRhYmJhYmxlcyAgID0gX2dldEVsZW1lbnRzKCdpbnB1dDpub3QoW2Rpc2FibGVkXSksIGJ1dHRvbjpub3QoW2Rpc2FibGVkXSknKSxcbiAgICAgICAgICAgICAgICBmaXJzdCAgICAgICA9IHRhYmJhYmxlc1swXSxcbiAgICAgICAgICAgICAgICBsYXN0ICAgICAgICA9IHRhYmJhYmxlc1t0YWJiYWJsZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9jaGVja0ZvY3VzKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQgaXMgVEFCXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSA5ICYmIHBseXIuaXNGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGxhc3QgJiYgIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIGZvY3VzIHRvIGZpcnN0IGVsZW1lbnQgdGhhdCBjYW4gYmUgdGFiYmVkIGlmIFNoaWZ0IGlzbid0IHVzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldCA9PT0gZmlyc3QgJiYgZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgZm9jdXMgdG8gbGFzdCBlbGVtZW50IHRoYXQgY2FuIGJlIHRhYmJlZCBpZiBTaGlmdCBpcyB1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBCaW5kIHRoZSBoYW5kbGVyXG4gICAgICAgICAgICBfb24ocGx5ci5jb250YWluZXIsICdrZXlkb3duJywgX2NoZWNrRm9jdXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGVsZW1lbnRzIHRvIEhUTUw1IG1lZGlhIChzb3VyY2UsIHRyYWNrcywgZXRjKVxuICAgICAgICBmdW5jdGlvbiBfaW5zZXJ0Q2hpbGRFbGVtZW50cyh0eXBlLCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhhdHRyaWJ1dGVzKSkge1xuICAgICAgICAgICAgICAgX2luc2VydEVsZW1lbnQodHlwZSwgcGx5ci5tZWRpYSwgeyBzcmM6IGF0dHJpYnV0ZXMgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZXMuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgX2luc2VydEVsZW1lbnQodHlwZSwgcGx5ci5tZWRpYSwgYXR0cmlidXRlc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5zZXJ0IGNvbnRyb2xzXG4gICAgICAgIGZ1bmN0aW9uIF9pbmplY3RDb250cm9scygpIHtcbiAgICAgICAgICAgIC8vIFNwcml0ZVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5sb2FkU3ByaXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGljb25VcmwgPSBfZ2V0SWNvblVybCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gT25seSBsb2FkIGV4dGVybmFsIHNwcml0ZSB1c2luZyBBSkFYXG4gICAgICAgICAgICAgICAgaWYgKGljb25VcmwuYWJzb2x1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvZygnQUpBWCBsb2FkaW5nIGFic29sdXRlIFNWRyBzcHJpdGUnICsgKHBseXIuYnJvd3Nlci5pc0lFID8gJyAoZHVlIHRvIElFKScgOiAnJykpO1xuICAgICAgICAgICAgICAgICAgICBsb2FkU3ByaXRlKGljb25VcmwudXJsLCBcInNwcml0ZS1wbHlyXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2coJ1Nwcml0ZSB3aWxsIGJlIHVzZWQgYXMgZXh0ZXJuYWwgcmVzb3VyY2UgZGlyZWN0bHknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1ha2UgYSBjb3B5IG9mIHRoZSBodG1sXG4gICAgICAgICAgICB2YXIgaHRtbCA9IGNvbmZpZy5odG1sO1xuXG4gICAgICAgICAgICAvLyBJbnNlcnQgY3VzdG9tIHZpZGVvIGNvbnRyb2xzXG4gICAgICAgICAgICBfbG9nKCdJbmplY3RpbmcgY3VzdG9tIGNvbnRyb2xzJyk7XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNvbnRyb2xzIGFyZSBzcGVjaWZpZWQsIGNyZWF0ZSBkZWZhdWx0XG4gICAgICAgICAgICBpZiAoIWh0bWwpIHtcbiAgICAgICAgICAgICAgICBodG1sID0gX2J1aWxkQ29udHJvbHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVwbGFjZSBzZWVrIHRpbWUgaW5zdGFuY2VzXG4gICAgICAgICAgICBodG1sID0gX3JlcGxhY2VBbGwoaHRtbCwgJ3tzZWVrdGltZX0nLCBjb25maWcuc2Vla1RpbWUpO1xuXG4gICAgICAgICAgICAvLyBSZXBsYWNlIGFsbCBpZCByZWZlcmVuY2VzIHdpdGggcmFuZG9tIG51bWJlcnNcbiAgICAgICAgICAgIGh0bWwgPSBfcmVwbGFjZUFsbChodG1sLCAne2lkfScsIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAwMCkpKTtcblxuICAgICAgICAgICAgLy8gQ29udHJvbHMgY29udGFpbmVyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0O1xuXG4gICAgICAgICAgICAvLyBJbmplY3QgdG8gY3VzdG9tIGxvY2F0aW9uXG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLmNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5zZWxlY3RvcnMuY29udHJvbHMuY29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5qZWN0IGludG8gdGhlIGNvbnRhaW5lciBieSBkZWZhdWx0XG4gICAgICAgICAgICBpZiAoIV9pcy5odG1sRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gcGx5ci5jb250YWluZXJcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5qZWN0IGNvbnRyb2xzIEhUTUxcbiAgICAgICAgICAgIHRhcmdldC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGh0bWwpO1xuXG4gICAgICAgICAgICAvLyBTZXR1cCB0b29sdGlwc1xuICAgICAgICAgICAgaWYgKGNvbmZpZy50b29sdGlwcy5jb250cm9scykge1xuICAgICAgICAgICAgICAgIHZhciBsYWJlbHMgPSBfZ2V0RWxlbWVudHMoW2NvbmZpZy5zZWxlY3RvcnMuY29udHJvbHMud3JhcHBlciwgJyAnLCBjb25maWcuc2VsZWN0b3JzLmxhYmVscywgJyAuJywgY29uZmlnLmNsYXNzZXMuaGlkZGVuXS5qb2luKCcnKSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gbGFiZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IGxhYmVsc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MobGFiZWwsIGNvbmZpZy5jbGFzc2VzLmhpZGRlbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MobGFiZWwsIGNvbmZpZy5jbGFzc2VzLnRvb2x0aXAsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmQgdGhlIFVJIGNvbnRyb2xzIGFuZCBzdG9yZSByZWZlcmVuY2VzXG4gICAgICAgIGZ1bmN0aW9uIF9maW5kRWxlbWVudHMoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBseXIuY29udHJvbHMgICAgICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jb250cm9scy53cmFwcGVyKTtcblxuICAgICAgICAgICAgICAgIC8vIEJ1dHRvbnNcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuc2VlayAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5zZWVrKTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMucGxheSAgICAgICAgICAgICA9IF9nZXRFbGVtZW50cyhjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucGxheSk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnBhdXNlICAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucGF1c2UpO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5yZXN0YXJ0ICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLnJlc3RhcnQpO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5yZXdpbmQgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLnJld2luZCk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLmZvcndhcmQgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMuZm9yd2FyZCk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLmZ1bGxzY3JlZW4gICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMuZnVsbHNjcmVlbik7XG5cbiAgICAgICAgICAgICAgICAvLyBJbnB1dHNcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMubXV0ZSAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5tdXRlKTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuY2FwdGlvbnMgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5jYXB0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAvLyBQcm9ncmVzc1xuICAgICAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MgPSB7fTtcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLmNvbnRhaW5lciAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMucHJvZ3Jlc3MuY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIFByb2dyZXNzIC0gQnVmZmVyaW5nXG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5idWZmZXIgICAgICAgICAgPSB7fTtcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLmJ1ZmZlci5iYXIgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMucHJvZ3Jlc3MuYnVmZmVyKTtcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLmJ1ZmZlci50ZXh0ICAgICA9IHBseXIucHJvZ3Jlc3MuYnVmZmVyLmJhciAmJiBwbHlyLnByb2dyZXNzLmJ1ZmZlci5iYXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NwYW4nKVswXTtcblxuICAgICAgICAgICAgICAgIC8vIFByb2dyZXNzIC0gUGxheWVkXG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5wbGF5ZWQgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLnByb2dyZXNzLnBsYXllZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZWVrIHRvb2x0aXBcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLnRvb2x0aXAgICAgICAgICA9IHBseXIucHJvZ3Jlc3MuY29udGFpbmVyICYmIHBseXIucHJvZ3Jlc3MuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy4nICsgY29uZmlnLmNsYXNzZXMudG9vbHRpcCk7XG5cbiAgICAgICAgICAgICAgICAvLyBWb2x1bWVcbiAgICAgICAgICAgICAgICBwbHlyLnZvbHVtZSAgICAgICAgICAgICAgICAgICA9IHt9O1xuICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmlucHV0ICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy52b2x1bWUuaW5wdXQpO1xuICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmRpc3BsYXkgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy52b2x1bWUuZGlzcGxheSk7XG5cbiAgICAgICAgICAgICAgICAvLyBUaW1pbmdcbiAgICAgICAgICAgICAgICBwbHlyLmR1cmF0aW9uICAgICAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIHBseXIuY3VycmVudFRpbWUgICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgcGx5ci5zZWVrVGltZSAgICAgICAgICAgICAgICAgPSBfZ2V0RWxlbWVudHMoY29uZmlnLnNlbGVjdG9ycy5zZWVrVGltZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICBfd2FybignSXQgbG9va3MgbGlrZSB0aGVyZSBpcyBhIHByb2JsZW0gd2l0aCB5b3VyIGNvbnRyb2xzIEhUTUwnKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgbmF0aXZlIHZpZGVvIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX3RvZ2dsZU5hdGl2ZUNvbnRyb2xzKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG9nZ2xlIHN0eWxlIGhvb2tcbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZVN0eWxlSG9vaygpIHtcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLnNlbGVjdG9ycy5jb250YWluZXIucmVwbGFjZSgnLicsICcnKSwgcGx5ci5zdXBwb3J0ZWQuZnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUb2dnbGUgbmF0aXZlIGNvbnRyb2xzXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVOYXRpdmVDb250cm9scyh0b2dnbGUpIHtcbiAgICAgICAgICAgIGlmICh0b2dnbGUgJiYgX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ2NvbnRyb2xzJywgJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnY29udHJvbHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGFyaWEgYXR0cmlidXRlIGZvciBwbGF5IGFuZCBpZnJhbWUgdGl0bGVcbiAgICAgICAgZnVuY3Rpb24gX3NldFRpdGxlKGlmcmFtZSkge1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgY3VycmVudCB0ZXh0XG4gICAgICAgICAgICB2YXIgbGFiZWwgPSBjb25maWcuaTE4bi5wbGF5O1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGEgbWVkaWEgdGl0bGUgc2V0LCB1c2UgdGhhdCBmb3IgdGhlIGxhYmVsXG4gICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhjb25maWcudGl0bGUpICYmIGNvbmZpZy50aXRsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsYWJlbCArPSAnLCAnICsgY29uZmlnLnRpdGxlO1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0IGNvbnRhaW5lciBsYWJlbFxuICAgICAgICAgICAgICAgIHBseXIuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGNvbmZpZy50aXRsZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBwbGF5IGJ1dHRvbiwgc2V0IGxhYmVsXG4gICAgICAgICAgICBpZiAocGx5ci5zdXBwb3J0ZWQuZnVsbCAmJiBwbHlyLmJ1dHRvbnMucGxheSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBwbHlyLmJ1dHRvbnMucGxheS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMucGxheVtpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgaWZyYW1lIHRpdGxlXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xMjRcbiAgICAgICAgICAgIGlmIChfaXMuaHRtbEVsZW1lbnQoaWZyYW1lKSkge1xuICAgICAgICAgICAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgY29uZmlnLmkxOG4uZnJhbWVUaXRsZS5yZXBsYWNlKCd7dGl0bGV9JywgY29uZmlnLnRpdGxlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBsb2NhbFN0b3JhZ2VcbiAgICAgICAgZnVuY3Rpb24gX3NldHVwU3RvcmFnZSgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICBwbHlyLnN0b3JhZ2UgPSB7fTtcblxuICAgICAgICAgICAgLy8gQmFpbCBpZiB3ZSBkb24ndCBoYXZlIGxvY2FsU3RvcmFnZSBzdXBwb3J0IG9yIGl0J3MgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmICghX3N0b3JhZ2Uuc3VwcG9ydGVkIHx8ICFjb25maWcuc3RvcmFnZS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBvbGQgdm9sdW1lXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xNzFcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgncGx5ci12b2x1bWUnKTtcblxuICAgICAgICAgICAgLy8gbG9hZCB2YWx1ZSBmcm9tIHRoZSBjdXJyZW50IGtleVxuICAgICAgICAgICAgdmFsdWUgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oY29uZmlnLnN0b3JhZ2Uua2V5KTtcblxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIEtleSB3YXNuJ3Qgc2V0IChvciBoYWQgYmVlbiBjbGVhcmVkKSwgbW92ZSBhbG9uZ1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL15cXGQrKFxcLlxcZCspPyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdmFsdWUgaXMgYSBudW1iZXIsIGl0J3MgcHJvYmFibHkgdm9sdW1lIGZyb20gYW4gb2xkZXJcbiAgICAgICAgICAgICAgICAvLyB2ZXJzaW9uIG9mIHBseXIuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9wdWxsLzMxM1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUga2V5IHRvIGJlIEpTT05cbiAgICAgICAgICAgICAgICBfdXBkYXRlU3RvcmFnZSh7dm9sdW1lOiBwYXJzZUZsb2F0KHZhbHVlKX0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBBc3N1bWUgaXQncyBKU09OIGZyb20gdGhpcyBvciBhIGxhdGVyIHZlcnNpb24gb2YgcGx5clxuICAgICAgICAgICAgICAgIHBseXIuc3RvcmFnZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2F2ZSBhIHZhbHVlIGJhY2sgdG8gbG9jYWwgc3RvcmFnZVxuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlU3RvcmFnZSh2YWx1ZSkge1xuICAgICAgICAgICAgLy8gQmFpbCBpZiB3ZSBkb24ndCBoYXZlIGxvY2FsU3RvcmFnZSBzdXBwb3J0IG9yIGl0J3MgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmICghX3N0b3JhZ2Uuc3VwcG9ydGVkIHx8ICFjb25maWcuc3RvcmFnZS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHdvcmtpbmcgY29weSBvZiB0aGUgdmFsdWVzXG4gICAgICAgICAgICBfZXh0ZW5kKHBseXIuc3RvcmFnZSwgdmFsdWUpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgc3RvcmFnZVxuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGNvbmZpZy5zdG9yYWdlLmtleSwgSlNPTi5zdHJpbmdpZnkocGx5ci5zdG9yYWdlKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBtZWRpYVxuICAgICAgICBmdW5jdGlvbiBfc2V0dXBNZWRpYSgpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gbWVkaWEsIGJhaWxcbiAgICAgICAgICAgIGlmICghcGx5ci5tZWRpYSkge1xuICAgICAgICAgICAgICAgIF93YXJuKCdObyBtZWRpYSBlbGVtZW50IGZvdW5kIScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgdHlwZSBjbGFzc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMudHlwZS5yZXBsYWNlKCd7MH0nLCBwbHlyLnR5cGUpLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCB2aWRlbyBjbGFzcyBmb3IgZW1iZWRzXG4gICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIHJlcXVpcmUgY2hhbmdlcyBpZiBhdWRpbyBlbWJlZHMgYXJlIGFkZGVkXG4gICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnR5cGUucmVwbGFjZSgnezB9JywgJ3ZpZGVvJyksIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gYXV0b3BsYXkgYXR0cmlidXRlLCBhc3N1bWUgdGhlIHZpZGVvIGlzIHN0b3BwZWQgYW5kIGFkZCBzdGF0ZSBjbGFzc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuc3RvcHBlZCwgY29uZmlnLmF1dG9wbGF5KTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCBpT1MgY2xhc3NcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5vbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuaXNJb3MsIHBseXIuYnJvd3Nlci5pc0lvcyk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdG91Y2ggY2xhc3NcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmlzVG91Y2gsIHBseXIuYnJvd3Nlci5pc1RvdWNoKTtcblxuICAgICAgICAgICAgICAgIC8vIEluamVjdCB0aGUgcGxheWVyIHdyYXBwZXJcbiAgICAgICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgd3JhcHBlciBkaXZcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgd3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY29uZmlnLmNsYXNzZXMudmlkZW9XcmFwcGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXcmFwIHRoZSB2aWRlbyBpbiBhIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICBfd3JhcChwbHlyLm1lZGlhLCB3cmFwcGVyKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWNoZSB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIHBseXIudmlkZW9Db250YWluZXIgPSB3cmFwcGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW1iZWRzXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmVtYmVkLCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgX3NldHVwRW1iZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIFlvdVR1YmUvVmltZW9cbiAgICAgICAgZnVuY3Rpb24gX3NldHVwRW1iZWQoKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgICAgICAgbWVkaWFJZCxcbiAgICAgICAgICAgICAgICBpZCA9IHBseXIudHlwZSArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMDAwMCkpO1xuXG4gICAgICAgICAgICAvLyBQYXJzZSBJRHMgZnJvbSBVUkxzIGlmIHN1cHBsaWVkXG4gICAgICAgICAgICBzd2l0Y2ggKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICBtZWRpYUlkID0gX3BhcnNlWW91VHViZUlkKHBseXIuZW1iZWRJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICBtZWRpYUlkID0gX3BhcnNlVmltZW9JZChwbHlyLmVtYmVkSWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhSWQgPSBwbHlyLmVtYmVkSWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBvbGQgY29udGFpbmVyc1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lcnMgPSBfZ2V0RWxlbWVudHMoJ1tpZF49XCInICsgcGx5ci50eXBlICsgJy1cIl0nKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb250YWluZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgX3JlbW92ZShjb250YWluZXJzW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWRkIGVtYmVkIGNsYXNzIGZvciByZXNwb25zaXZlXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5tZWRpYSwgY29uZmlnLmNsYXNzZXMudmlkZW9XcmFwcGVyLCB0cnVlKTtcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLm1lZGlhLCBjb25maWcuY2xhc3Nlcy5lbWJlZFdyYXBwZXIsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAneW91dHViZScpIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIFlvdVR1YmUgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0IElEXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXR1cCBBUElcbiAgICAgICAgICAgICAgICBpZiAoX2lzLm9iamVjdCh3aW5kb3cuWVQpKSB7XG4gICAgICAgICAgICAgICAgICAgIF95b3VUdWJlUmVhZHkobWVkaWFJZCwgY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBMb2FkIHRoZSBBUElcbiAgICAgICAgICAgICAgICAgICAgX2luamVjdFNjcmlwdChjb25maWcudXJscy55b3V0dWJlLmFwaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgY2FsbGJhY2sgZm9yIHRoZSBBUElcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9uWW91VHViZVJlYWR5Q2FsbGJhY2tzID0gd2luZG93Lm9uWW91VHViZVJlYWR5Q2FsbGJhY2tzIHx8IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byBxdWV1ZVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25Zb3VUdWJlUmVhZHlDYWxsYmFja3MucHVzaChmdW5jdGlvbigpIHsgX3lvdVR1YmVSZWFkeShtZWRpYUlkLCBjb250YWluZXIpOyB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgY2FsbGJhY2sgdG8gcHJvY2VzcyBxdWV1ZVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25Zb3VUdWJlUmVhZHlDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykgeyBjYWxsYmFjaygpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBseXIudHlwZSA9PT0gJ3ZpbWVvJykge1xuICAgICAgICAgICAgICAgIC8vIFZpbWVvIG5lZWRzIGFuIGV4dHJhIGRpdiB0byBoaWRlIGNvbnRyb2xzIG9uIGRlc2t0b3AgKHdoaWNoIGhhcyBmdWxsIHN1cHBvcnQpXG4gICAgICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHBseXIubWVkaWE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IElEXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBMb2FkIHRoZSBBUEkgaWYgbm90IGFscmVhZHlcbiAgICAgICAgICAgICAgICBpZiAoIV9pcy5vYmplY3Qod2luZG93LlZpbWVvKSkge1xuICAgICAgICAgICAgICAgICAgICBfaW5qZWN0U2NyaXB0KGNvbmZpZy51cmxzLnZpbWVvLmFwaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgZnJhZ2Fsb29wIGxvYWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpbWVvVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzLm9iamVjdCh3aW5kb3cuVmltZW8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodmltZW9UaW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZpbWVvUmVhZHkobWVkaWFJZCwgY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF92aW1lb1JlYWR5KG1lZGlhSWQsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwbHlyLnR5cGUgPT09ICdzb3VuZGNsb3VkJykge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IEN1cnJlbnRseSB1bnN1cHBvcnRlZCBhbmQgdW5kb2N1bWVudGVkXG4gICAgICAgICAgICAgICAgLy8gSW5qZWN0IHRoZSBpZnJhbWVcbiAgICAgICAgICAgICAgICB2YXIgc291bmRDbG91ZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV2F0Y2ggZm9yIGlmcmFtZSBsb2FkXG4gICAgICAgICAgICAgICAgc291bmRDbG91ZC5sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfb24oc291bmRDbG91ZCwgJ2xvYWQnLCBmdW5jdGlvbigpIHsgc291bmRDbG91ZC5sb2FkZWQgPSB0cnVlOyB9KTtcblxuICAgICAgICAgICAgICAgIF9zZXRBdHRyaWJ1dGVzKHNvdW5kQ2xvdWQsIHtcbiAgICAgICAgICAgICAgICAgICAgJ3NyYyc6ICAnaHR0cHM6Ly93LnNvdW5kY2xvdWQuY29tL3BsYXllci8/dXJsPWh0dHBzOi8vYXBpLnNvdW5kY2xvdWQuY29tL3RyYWNrcy8nICsgbWVkaWFJZCxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogICBpZFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNvdW5kQ2xvdWQpO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIExvYWQgdGhlIEFQSSBpZiBub3QgYWxyZWFkeVxuICAgICAgICAgICAgICAgIGlmICghd2luZG93LlNDKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pbmplY3RTY3JpcHQoY29uZmlnLnVybHMuc291bmRjbG91ZC5hcGkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFdhaXQgZm9yIFNDIGxvYWRcbiAgICAgICAgICAgICAgICB2YXIgc291bmRDbG91ZFRpbWVyID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LlNDICYmIHNvdW5kQ2xvdWQubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChzb3VuZENsb3VkVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NvdW5kY2xvdWRSZWFkeS5jYWxsKHNvdW5kQ2xvdWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2hlbiBlbWJlZHMgYXJlIHJlYWR5XG4gICAgICAgIGZ1bmN0aW9uIF9lbWJlZFJlYWR5KCkge1xuICAgICAgICAgICAgLy8gU2V0dXAgdGhlIFVJIGFuZCBjYWxsIHJlYWR5IGlmIGZ1bGwgc3VwcG9ydFxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICBfc2V0dXBJbnRlcmZhY2UoKTtcbiAgICAgICAgICAgICAgICBfcmVhZHkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRpdGxlXG4gICAgICAgICAgICBfc2V0VGl0bGUoX2dldEVsZW1lbnQoJ2lmcmFtZScpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBZb3VUdWJlIEFQSSByZWFkeVxuICAgICAgICBmdW5jdGlvbiBfeW91VHViZVJlYWR5KHZpZGVvSWQsIGNvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gU2V0dXAgaW5zdGFuY2VcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3lvdXR1YmUvaWZyYW1lX2FwaV9yZWZlcmVuY2VcbiAgICAgICAgICAgIHBseXIuZW1iZWQgPSBuZXcgd2luZG93LllULlBsYXllcihjb250YWluZXIuaWQsIHtcbiAgICAgICAgICAgICAgICB2aWRlb0lkOiB2aWRlb0lkLFxuICAgICAgICAgICAgICAgIHBsYXllclZhcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6ICAgICAgIChjb25maWcuYXV0b3BsYXkgPyAxIDogMCksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzOiAgICAgICAocGx5ci5zdXBwb3J0ZWQuZnVsbCA/IDAgOiAxKSxcbiAgICAgICAgICAgICAgICAgICAgcmVsOiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHNob3dpbmZvOiAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICBpdl9sb2FkX3BvbGljeTogMyxcbiAgICAgICAgICAgICAgICAgICAgY2NfbG9hZF9wb2xpY3k6IChjb25maWcuY2FwdGlvbnMuZGVmYXVsdEFjdGl2ZSA/IDEgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgY2NfbGFuZ19wcmVmOiAgICdlbicsXG4gICAgICAgICAgICAgICAgICAgIHdtb2RlOiAgICAgICAgICAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgICAgICAgICBtb2Rlc3RicmFuZGluZzogMSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWtiOiAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbjogICAgICAgICAnKicgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9nZGF0YS1pc3N1ZXMvaXNzdWVzL2RldGFpbD9pZD01Nzg4I2M0NVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICdvbkVycm9yJzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsICdlcnJvcicsIHRydWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAgIGV2ZW50LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWQ6ICBldmVudC50YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnb25SZWFkeSc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGZhdXggSFRNTDUgQVBJIHVzaW5nIHRoZSBZb3VUdWJlIEFQSVxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UucGxheVZpZGVvKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UucGF1c2VWaWRlbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5zdG9wVmlkZW8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5kdXJhdGlvbiA9IGluc3RhbmNlLmdldER1cmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEubXV0ZWQgPSBpbnN0YW5jZS5pc011dGVkKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLnRpdGxlID0gaW5zdGFuY2UuZ2V0VmlkZW9EYXRhKCkudGl0bGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgdGFiaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5xdWVyeVNlbGVjdG9yKCdpZnJhbWUnKS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBVSVxuICAgICAgICAgICAgICAgICAgICAgICAgX2VtYmVkUmVhZHkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZHVyYXRpb25jaGFuZ2UnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgdGltZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5idWZmZXJpbmcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXR1cCBidWZmZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVycy5idWZmZXJpbmcgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGxvYWRlZCAlIGZyb20gWW91VHViZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYnVmZmVyZWQgPSBpbnN0YW5jZS5nZXRWaWRlb0xvYWRlZEZyYWN0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHByb2dyZXNzIG9ubHkgd2hlbiB3ZSBhY3R1YWxseSBidWZmZXIgc29tZXRoaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIubWVkaWEubGFzdEJ1ZmZlcmVkID09PSBudWxsIHx8IHBseXIubWVkaWEubGFzdEJ1ZmZlcmVkIDwgcGx5ci5tZWRpYS5idWZmZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwcm9ncmVzcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBsYXN0IGJ1ZmZlciBwb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEubGFzdEJ1ZmZlcmVkID0gcGx5ci5tZWRpYS5idWZmZXJlZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhaWwgaWYgd2UncmUgYXQgMTAwJVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLmJ1ZmZlcmVkID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5idWZmZXJpbmcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnb25TdGF0ZUNoYW5nZSc6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBldmVudC50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRpbWVyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcnMucGxheWluZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0xICAgVW5zdGFydGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwICAgIEVuZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAxICAgIFBsYXlpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIgICAgUGF1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAzICAgIEJ1ZmZlcmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNSAgICBWaWRlbyBjdWVkXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZW5kZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2Ugd2VyZSBzZWVraW5nLCBmaXJlIHNlZWtlZCBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5zZWVraW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdzZWVrZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2Vla2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXlpbmcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQb2xsIHRvIGdldCBwbGF5YmFjayBwcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lcnMucGxheWluZyA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gaW5zdGFuY2UuZ2V0Q3VycmVudFRpbWUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZHVyYXRpb24gYWdhaW4gZHVlIHRvIFlvdVR1YmUgYnVnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzM3NFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2dkYXRhLWlzc3Vlcy9pc3N1ZXMvZGV0YWlsP2lkPTg2OTBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIubWVkaWEuZHVyYXRpb24gIT09IGluc3RhbmNlLmdldER1cmF0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuZHVyYXRpb24gPSBpbnN0YW5jZS5nZXREdXJhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZHVyYXRpb25jaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BhdXNlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIuY29udGFpbmVyLCAnc3RhdGVjaGFuZ2UnLCBmYWxzZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGV2ZW50LmRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWaW1lbyByZWFkeVxuICAgICAgICBmdW5jdGlvbiBfdmltZW9SZWFkeShtZWRpYUlkLCBjb250YWluZXIpIHtcbiAgICAgICAgICAgIC8vIFNldHVwIGluc3RhbmNlXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdmltZW8vcGxheWVyLmpzXG4gICAgICAgICAgICBwbHlyLmVtYmVkID0gbmV3IHdpbmRvdy5WaW1lby5QbGF5ZXIoY29udGFpbmVyLCB7XG4gICAgICAgICAgICAgICAgaWQ6ICAgICAgICAgcGFyc2VJbnQobWVkaWFJZCksXG4gICAgICAgICAgICAgICAgbG9vcDogICAgICAgY29uZmlnLmxvb3AsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6ICAgY29uZmlnLmF1dG9wbGF5LFxuICAgICAgICAgICAgICAgIGJ5bGluZTogICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHBvcnRyYWl0OiAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAgICAgIGZhbHNlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgZmF1eCBIVE1MNSBBUEkgdXNpbmcgdGhlIFZpbWVvIEFQSVxuICAgICAgICAgICAgcGx5ci5tZWRpYS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wbGF5KCk7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwbHlyLm1lZGlhLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnN0b3AoKTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gMDtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIFVJXG4gICAgICAgICAgICBfZW1iZWRSZWFkeSgpO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLmdldEN1cnJlbnRUaW1lKCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLmdldER1cmF0aW9uKCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuZHVyYXRpb24gPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2R1cmF0aW9uY2hhbmdlJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVE9ETzogQ2FwdGlvbnNcbiAgICAgICAgICAgIC8qaWYgKGNvbmZpZy5jYXB0aW9ucy5kZWZhdWx0QWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5lbmFibGVUZXh0VHJhY2soJ2VuJyk7XG4gICAgICAgICAgICB9Ki9cblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbignbG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gRml4IGtleWJvYXJkIGZvY3VzIGlzc3Vlc1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzMxN1xuICAgICAgICAgICAgICAgIGlmIChfaXMuaHRtbEVsZW1lbnQocGx5ci5lbWJlZC5lbGVtZW50KSAmJiBwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ3BsYXknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXknKTtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5aW5nJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbigncGF1c2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGF1c2UnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLm9uKCd0aW1ldXBkYXRlJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2Vla2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSBkYXRhLnNlY29uZHM7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndGltZXVwZGF0ZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ3Byb2dyZXNzJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYnVmZmVyZWQgPSBkYXRhLnBlcmNlbnQ7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncHJvZ3Jlc3MnKTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChkYXRhLnBlcmNlbnQpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbignc2Vla2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnc2Vla2VkJyk7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ2VuZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2VuZGVkJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvdW5kY2xvdWQgcmVhZHlcbiAgICAgICAgZnVuY3Rpb24gX3NvdW5kY2xvdWRSZWFkeSgpIHtcbiAgICAgICAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICAgICAgICAgIHBseXIuZW1iZWQgPSB3aW5kb3cuU0MuV2lkZ2V0KHRoaXMpO1xuXG4gICAgICAgICAgICAvLyBTZXR1cCBvbiByZWFkeVxuICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLlJFQURZLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBmYXV4IEhUTUw1IEFQSSB1c2luZyB0aGUgU291bmRjbG91ZCBBUElcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQucGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2Vla1RvKDApO1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSAwO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5nZXREdXJhdGlvbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmR1cmF0aW9uID0gdmFsdWUvMTAwMDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgVUlcbiAgICAgICAgICAgICAgICAgICAgX2VtYmVkUmVhZHkoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZ2V0UG9zaXRpb24oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmJpbmQod2luZG93LlNDLldpZGdldC5FdmVudHMuUExBWSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXknKTtcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheWluZycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLlBBVVNFLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwYXVzZScpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLlBMQVlfUFJPR1JFU1MsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSBkYXRhLmN1cnJlbnRQb3NpdGlvbi8xMDAwO1xuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmJpbmQod2luZG93LlNDLldpZGdldC5FdmVudHMuTE9BRF9QUk9HUkVTUywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmJ1ZmZlcmVkID0gZGF0YS5sb2FkUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3Byb2dyZXNzJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGRhdGEubG9hZFByb2dyZXNzKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnY2FucGxheXRocm91Z2gnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLkZJTklTSCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZW5kZWQnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGxheSBtZWRpYVxuICAgICAgICBmdW5jdGlvbiBfcGxheSgpIHtcbiAgICAgICAgICAgIGlmICgncGxheScgaW4gcGx5ci5tZWRpYSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGF1c2UgbWVkaWFcbiAgICAgICAgZnVuY3Rpb24gX3BhdXNlKCkge1xuICAgICAgICAgICAgaWYgKCdwYXVzZScgaW4gcGx5ci5tZWRpYSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBwbGF5YmFja1xuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlUGxheSh0b2dnbGUpIHtcbiAgICAgICAgICAgIC8vIFRydWUgdG9nZ2xlXG4gICAgICAgICAgICBpZiAoIV9pcy5ib29sZWFuKHRvZ2dsZSkpIHtcbiAgICAgICAgICAgICAgICB0b2dnbGUgPSBwbHlyLm1lZGlhLnBhdXNlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRvZ2dsZSkge1xuICAgICAgICAgICAgICAgIF9wbGF5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9wYXVzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdG9nZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV3aW5kXG4gICAgICAgIGZ1bmN0aW9uIF9yZXdpbmQoc2Vla1RpbWUpIHtcbiAgICAgICAgICAgIC8vIFVzZSBkZWZhdWx0IGlmIG5lZWRlZFxuICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKHNlZWtUaW1lKSkge1xuICAgICAgICAgICAgICAgIHNlZWtUaW1lID0gY29uZmlnLnNlZWtUaW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3NlZWsocGx5ci5tZWRpYS5jdXJyZW50VGltZSAtIHNlZWtUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZhc3QgZm9yd2FyZFxuICAgICAgICBmdW5jdGlvbiBfZm9yd2FyZChzZWVrVGltZSkge1xuICAgICAgICAgICAgLy8gVXNlIGRlZmF1bHQgaWYgbmVlZGVkXG4gICAgICAgICAgICBpZiAoIV9pcy5udW1iZXIoc2Vla1RpbWUpKSB7XG4gICAgICAgICAgICAgICAgc2Vla1RpbWUgPSBjb25maWcuc2Vla1RpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfc2VlayhwbHlyLm1lZGlhLmN1cnJlbnRUaW1lICsgc2Vla1RpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VlayB0byB0aW1lXG4gICAgICAgIC8vIFRoZSBpbnB1dCBwYXJhbWV0ZXIgY2FuIGJlIGFuIGV2ZW50IG9yIGEgbnVtYmVyXG4gICAgICAgIGZ1bmN0aW9uIF9zZWVrKGlucHV0KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0VGltZSAgPSAwLFxuICAgICAgICAgICAgICAgIHBhdXNlZCAgICAgID0gcGx5ci5tZWRpYS5wYXVzZWQsXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gICAgPSBfZ2V0RHVyYXRpb24oKTtcblxuICAgICAgICAgICAgaWYgKF9pcy5udW1iZXIoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0VGltZSA9IGlucHV0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfaXMub2JqZWN0KGlucHV0KSAmJiBfaW5BcnJheShbJ2lucHV0JywgJ2NoYW5nZSddLCBpbnB1dC50eXBlKSkge1xuICAgICAgICAgICAgICAgIC8vIEl0J3MgdGhlIHNlZWsgc2xpZGVyXG4gICAgICAgICAgICAgICAgLy8gU2VlayB0byB0aGUgc2VsZWN0ZWQgdGltZVxuICAgICAgICAgICAgICAgIHRhcmdldFRpbWUgPSAoKGlucHV0LnRhcmdldC52YWx1ZSAvIGlucHV0LnRhcmdldC5tYXgpICogZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3JtYWxpc2UgdGFyZ2V0VGltZVxuICAgICAgICAgICAgaWYgKHRhcmdldFRpbWUgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0VGltZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFRpbWUgPiBkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRhcmdldFRpbWUgPSBkdXJhdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHNlZWsgcmFuZ2UgYW5kIHByb2dyZXNzXG4gICAgICAgICAgICBfdXBkYXRlU2Vla0Rpc3BsYXkodGFyZ2V0VGltZSk7XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgY3VycmVudCB0aW1lXG4gICAgICAgICAgICAvLyBUcnkvY2F0Y2ggaW5jYXNlIHRoZSBtZWRpYSBpc24ndCBzZXQgYW5kIHdlJ3JlIGNhbGxpbmcgc2VlaygpIGZyb20gc291cmNlKCkgYW5kIElFIG1vYW5zXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSB0YXJnZXRUaW1lLnRvRml4ZWQoNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaChlKSB7fVxuXG4gICAgICAgICAgICAvLyBFbWJlZHNcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZWVrVG8odGFyZ2V0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSb3VuZCB0byBuZWFyZXN0IHNlY29uZCBmb3IgdmltZW9cbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2V0Q3VycmVudFRpbWUodGFyZ2V0VGltZS50b0ZpeGVkKDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZWVrVG8odGFyZ2V0VGltZSAqIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHBhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICBfcGF1c2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRpbWV1cGRhdGVcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgc2Vla2luZyBmbGFnXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgc2Vla2luZ1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3NlZWtpbmcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9nZ2luZ1xuICAgICAgICAgICAgX2xvZygnU2Vla2luZyB0byAnICsgcGx5ci5tZWRpYS5jdXJyZW50VGltZSArICcgc2Vjb25kcycpO1xuXG4gICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciAnbWFudWFsJyBjYXB0aW9uc1xuICAgICAgICAgICAgX3NlZWtNYW51YWxDYXB0aW9ucyh0YXJnZXRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCB0aGUgZHVyYXRpb24gKG9yIGN1c3RvbSBpZiBzZXQpXG4gICAgICAgIGZ1bmN0aW9uIF9nZXREdXJhdGlvbigpIHtcbiAgICAgICAgICAgIC8vIEl0IHNob3VsZCBiZSBhIG51bWJlciwgYnV0IHBhcnNlIGl0IGp1c3QgaW5jYXNlXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBwYXJzZUludChjb25maWcuZHVyYXRpb24pLFxuXG4gICAgICAgICAgICAvLyBUcnVlIGR1cmF0aW9uXG4gICAgICAgICAgICBtZWRpYUR1cmF0aW9uID0gMDtcblxuICAgICAgICAgICAgLy8gT25seSBpZiBkdXJhdGlvbiBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLmR1cmF0aW9uICE9PSBudWxsICYmICFpc05hTihwbHlyLm1lZGlhLmR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIG1lZGlhRHVyYXRpb24gPSBwbHlyLm1lZGlhLmR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBjdXN0b20gZHVyYXRpb24gaXMgZnVua3ksIHVzZSByZWd1bGFyIGR1cmF0aW9uXG4gICAgICAgICAgICByZXR1cm4gKGlzTmFOKGR1cmF0aW9uKSA/IG1lZGlhRHVyYXRpb24gOiBkdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBwbGF5aW5nIHN0YXRlXG4gICAgICAgIGZ1bmN0aW9uIF9jaGVja1BsYXlpbmcoKSB7XG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnBsYXlpbmcsICFwbHlyLm1lZGlhLnBhdXNlZCk7XG5cbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuc3RvcHBlZCwgcGx5ci5tZWRpYS5wYXVzZWQpO1xuXG4gICAgICAgICAgICBfdG9nZ2xlQ29udHJvbHMocGx5ci5tZWRpYS5wYXVzZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2F2ZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgZnVuY3Rpb24gX3NhdmVTY3JvbGxQb3NpdGlvbigpIHtcbiAgICAgICAgICAgIHNjcm9sbCA9IHtcbiAgICAgICAgICAgICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQgfHwgMCxcbiAgICAgICAgICAgICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICAgIGZ1bmN0aW9uIF9yZXN0b3JlU2Nyb2xsUG9zaXRpb24oKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oc2Nyb2xsLngsIHNjcm9sbC55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBmdWxsc2NyZWVuXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVGdWxsc2NyZWVuKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgbmF0aXZlIHN1cHBvcnRcbiAgICAgICAgICAgIHZhciBuYXRpdmVTdXBwb3J0ID0gZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW47XG5cbiAgICAgICAgICAgIGlmIChuYXRpdmVTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgaXQncyBhIGZ1bGxzY3JlZW4gY2hhbmdlIGV2ZW50LCB1cGRhdGUgdGhlIFVJXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09IGZ1bGxzY3JlZW4uZnVsbFNjcmVlbkV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmlzRnVsbHNjcmVlbiA9IGZ1bGxzY3JlZW4uaXNGdWxsU2NyZWVuKHBseXIuY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBFbHNlIGl0J3MgYSB1c2VyIHJlcXVlc3QgdG8gZW50ZXIgb3IgZXhpdFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZ1bGxzY3JlZW4uaXNGdWxsU2NyZWVuKHBseXIuY29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F2ZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIF9zYXZlU2Nyb2xsUG9zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVxdWVzdCBmdWxsIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5yZXF1ZXN0RnVsbFNjcmVlbihwbHlyLmNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIGZyb20gZnVsbHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5jYW5jZWxGdWxsU2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSBmdWxsIHNjcmVlbiAoaXQgY291bGQgZmFpbClcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5pc0Z1bGxzY3JlZW4gPSBmdWxsc2NyZWVuLmlzRnVsbFNjcmVlbihwbHlyLmNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdCdzIGEgc2ltcGxlIHRvZ2dsZVxuICAgICAgICAgICAgICAgIHBseXIuaXNGdWxsc2NyZWVuID0gIXBseXIuaXNGdWxsc2NyZWVuO1xuXG4gICAgICAgICAgICAgICAgLy8gQmluZC91bmJpbmQgZXNjYXBlIGtleVxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBwbHlyLmlzRnVsbHNjcmVlbiA/ICdoaWRkZW4nIDogJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBjbGFzcyBob29rXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmZ1bGxzY3JlZW4uYWN0aXZlLCBwbHlyLmlzRnVsbHNjcmVlbik7XG5cbiAgICAgICAgICAgIC8vIFRyYXAgZm9jdXNcbiAgICAgICAgICAgIF9mb2N1c1RyYXAocGx5ci5pc0Z1bGxzY3JlZW4pO1xuXG4gICAgICAgICAgICAvLyBTZXQgYnV0dG9uIHN0YXRlXG4gICAgICAgICAgICBpZiAocGx5ci5idXR0b25zICYmIHBseXIuYnV0dG9ucy5mdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZVN0YXRlKHBseXIuYnV0dG9ucy5mdWxsc2NyZWVuLCBwbHlyLmlzRnVsbHNjcmVlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYW4gZXZlbnRcbiAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsIHBseXIuaXNGdWxsc2NyZWVuID8gJ2VudGVyZnVsbHNjcmVlbicgOiAnZXhpdGZ1bGxzY3JlZW4nLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gUmVzdG9yZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgICAgIGlmICghcGx5ci5pc0Z1bGxzY3JlZW4gJiYgbmF0aXZlU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgIF9yZXN0b3JlU2Nyb2xsUG9zaXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE11dGVcbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZU11dGUobXV0ZWQpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBtZXRob2QgaXMgY2FsbGVkIHdpdGhvdXQgcGFyYW1ldGVyLCB0b2dnbGUgYmFzZWQgb24gY3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgaWYgKCFfaXMuYm9vbGVhbihtdXRlZCkpIHtcbiAgICAgICAgICAgICAgICBtdXRlZCA9ICFwbHlyLm1lZGlhLm11dGVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgYnV0dG9uIHN0YXRlXG4gICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLm11dGUsIG11dGVkKTtcblxuICAgICAgICAgICAgLy8gU2V0IG11dGUgb24gdGhlIHBsYXllclxuICAgICAgICAgICAgcGx5ci5tZWRpYS5tdXRlZCA9IG11dGVkO1xuXG4gICAgICAgICAgICAvLyBJZiB2b2x1bWUgaXMgMCBhZnRlciB1bm11dGluZywgc2V0IHRvIGRlZmF1bHRcbiAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnZvbHVtZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIF9zZXRWb2x1bWUoY29uZmlnLnZvbHVtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVtYmVkc1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgIC8vIFlvdVR1YmVcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZFtwbHlyLm1lZGlhLm11dGVkID8gJ211dGUnIDogJ3VuTXV0ZSddKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZXRWb2x1bWUocGx5ci5tZWRpYS5tdXRlZCA/IDAgOiBwYXJzZUZsb2F0KGNvbmZpZy52b2x1bWUgLyBjb25maWcudm9sdW1lTWF4KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHZvbHVtZWNoYW5nZSBmb3IgZW1iZWRzXG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndm9sdW1lY2hhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdm9sdW1lXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRWb2x1bWUodm9sdW1lKSB7XG4gICAgICAgICAgICB2YXIgbWF4ID0gY29uZmlnLnZvbHVtZU1heCxcbiAgICAgICAgICAgICAgICBtaW4gPSBjb25maWcudm9sdW1lTWluO1xuXG4gICAgICAgICAgICAvLyBMb2FkIHZvbHVtZSBmcm9tIHN0b3JhZ2UgaWYgbm8gdmFsdWUgc3BlY2lmaWVkXG4gICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZCh2b2x1bWUpKSB7XG4gICAgICAgICAgICAgICAgdm9sdW1lID0gcGx5ci5zdG9yYWdlLnZvbHVtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIGNvbmZpZyBpZiBhbGwgZWxzZSBmYWlsc1xuICAgICAgICAgICAgaWYgKHZvbHVtZSA9PT0gbnVsbCB8fCBpc05hTih2b2x1bWUpKSB7XG4gICAgICAgICAgICAgICAgdm9sdW1lID0gY29uZmlnLnZvbHVtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWF4aW11bSBpcyB2b2x1bWVNYXhcbiAgICAgICAgICAgIGlmICh2b2x1bWUgPiBtYXgpIHtcbiAgICAgICAgICAgICAgICB2b2x1bWUgPSBtYXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNaW5pbXVtIGlzIHZvbHVtZU1pblxuICAgICAgICAgICAgaWYgKHZvbHVtZSA8IG1pbikge1xuICAgICAgICAgICAgICAgIHZvbHVtZSA9IG1pbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBwbGF5ZXIgdm9sdW1lXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnZvbHVtZSA9IHBhcnNlRmxvYXQodm9sdW1lIC8gbWF4KTtcblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBkaXNwbGF5XG4gICAgICAgICAgICBpZiAocGx5ci52b2x1bWUuZGlzcGxheSkge1xuICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmRpc3BsYXkudmFsdWUgPSB2b2x1bWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVtYmVkc1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaChwbHlyLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnNldFZvbHVtZShwbHlyLm1lZGlhLnZvbHVtZSAqIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZXRWb2x1bWUocGx5ci5tZWRpYS52b2x1bWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB2b2x1bWVjaGFuZ2UgZm9yIGVtYmVkc1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3ZvbHVtZWNoYW5nZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUb2dnbGUgbXV0ZWQgc3RhdGVcbiAgICAgICAgICAgIGlmICh2b2x1bWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLm11dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGx5ci5tZWRpYS5tdXRlZCAmJiB2b2x1bWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZU11dGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluY3JlYXNlIHZvbHVtZVxuICAgICAgICBmdW5jdGlvbiBfaW5jcmVhc2VWb2x1bWUoc3RlcCkge1xuICAgICAgICAgICAgdmFyIHZvbHVtZSA9IHBseXIubWVkaWEubXV0ZWQgPyAwIDogKHBseXIubWVkaWEudm9sdW1lICogY29uZmlnLnZvbHVtZU1heCk7XG5cbiAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihzdGVwKSkge1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBjb25maWcudm9sdW1lU3RlcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3NldFZvbHVtZSh2b2x1bWUgKyBzdGVwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlY3JlYXNlIHZvbHVtZVxuICAgICAgICBmdW5jdGlvbiBfZGVjcmVhc2VWb2x1bWUoc3RlcCkge1xuICAgICAgICAgICAgdmFyIHZvbHVtZSA9IHBseXIubWVkaWEubXV0ZWQgPyAwIDogKHBseXIubWVkaWEudm9sdW1lICogY29uZmlnLnZvbHVtZU1heCk7XG5cbiAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihzdGVwKSkge1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBjb25maWcudm9sdW1lU3RlcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3NldFZvbHVtZSh2b2x1bWUgLSBzdGVwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB2b2x1bWUgVUkgYW5kIHN0b3JhZ2VcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVZvbHVtZSgpIHtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCB2b2x1bWVcbiAgICAgICAgICAgIHZhciB2b2x1bWUgPSBwbHlyLm1lZGlhLm11dGVkID8gMCA6IChwbHlyLm1lZGlhLnZvbHVtZSAqIGNvbmZpZy52b2x1bWVNYXgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIDxpbnB1dCB0eXBlPVwicmFuZ2VcIj4gaWYgcHJlc2VudFxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAocGx5ci52b2x1bWUuaW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci52b2x1bWUuaW5wdXQudmFsdWUgPSB2b2x1bWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnZvbHVtZS5kaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmRpc3BsYXkudmFsdWUgPSB2b2x1bWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHZvbHVtZSBpbiBzdG9yYWdlXG4gICAgICAgICAgICBfdXBkYXRlU3RvcmFnZSh7dm9sdW1lOiB2b2x1bWV9KTtcblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGNsYXNzIGlmIG11dGVkXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLm11dGVkLCAodm9sdW1lID09PSAwKSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBjaGVja2JveCBmb3IgbXV0ZSBzdGF0ZVxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwgJiYgcGx5ci5idXR0b25zLm11dGUpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLm11dGUsICh2b2x1bWUgPT09IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBjYXB0aW9uc1xuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlQ2FwdGlvbnMoc2hvdykge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBmdWxsIHN1cHBvcnQsIG9yIHRoZXJlJ3Mgbm8gY2FwdGlvbiB0b2dnbGVcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCB8fCAhcGx5ci5idXR0b25zLmNhcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbWV0aG9kIGlzIGNhbGxlZCB3aXRob3V0IHBhcmFtZXRlciwgdG9nZ2xlIGJhc2VkIG9uIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4oc2hvdykpIHtcbiAgICAgICAgICAgICAgICBzaG93ID0gKHBseXIuY29udGFpbmVyLmNsYXNzTmFtZS5pbmRleE9mKGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmFjdGl2ZSkgPT09IC0xKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IGdsb2JhbFxuICAgICAgICAgICAgcGx5ci5jYXB0aW9uc0VuYWJsZWQgPSBzaG93O1xuXG4gICAgICAgICAgICAvLyBUb2dnbGUgc3RhdGVcbiAgICAgICAgICAgIF90b2dnbGVTdGF0ZShwbHlyLmJ1dHRvbnMuY2FwdGlvbnMsIHBseXIuY2FwdGlvbnNFbmFibGVkKTtcblxuICAgICAgICAgICAgLy8gQWRkIGNsYXNzIGhvb2tcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuY2FwdGlvbnMuYWN0aXZlLCBwbHlyLmNhcHRpb25zRW5hYmxlZCk7XG5cbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYW4gZXZlbnRcbiAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsIHBseXIuY2FwdGlvbnNFbmFibGVkID8gJ2NhcHRpb25zZW5hYmxlZCcgOiAnY2FwdGlvbnNkaXNhYmxlZCcsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBTYXZlIGNhcHRpb25zIHN0YXRlIHRvIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgX3VwZGF0ZVN0b3JhZ2Uoe2NhcHRpb25zRW5hYmxlZDogcGx5ci5jYXB0aW9uc0VuYWJsZWR9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIG1lZGlhIGlzIGxvYWRpbmdcbiAgICAgICAgZnVuY3Rpb24gX2NoZWNrTG9hZGluZyhldmVudCkge1xuICAgICAgICAgICAgdmFyIGxvYWRpbmcgPSAoZXZlbnQudHlwZSA9PT0gJ3dhaXRpbmcnKTtcblxuICAgICAgICAgICAgLy8gQ2xlYXIgdGltZXJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcnMubG9hZGluZyk7XG5cbiAgICAgICAgICAgIC8vIFRpbWVyIHRvIHByZXZlbnQgZmxpY2tlciB3aGVuIHNlZWtpbmdcbiAgICAgICAgICAgIHRpbWVycy5sb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBUb2dnbGUgY29udGFpbmVyIGNsYXNzIGhvb2tcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmxvYWRpbmcsIGxvYWRpbmcpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2hvdyBjb250cm9scyBpZiBsb2FkaW5nLCBoaWRlIGlmIGRvbmVcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ29udHJvbHMobG9hZGluZyk7XG4gICAgICAgICAgICB9LCAobG9hZGluZyA/IDI1MCA6IDApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSA8cHJvZ3Jlc3M+IGVsZW1lbnRzXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVQcm9ncmVzcyhldmVudCkge1xuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcHJvZ3Jlc3MgICAgPSBwbHlyLnByb2dyZXNzLnBsYXllZCxcbiAgICAgICAgICAgICAgICB2YWx1ZSAgICAgICA9IDAsXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gICAgPSBfZ2V0RHVyYXRpb24oKTtcblxuICAgICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFZpZGVvIHBsYXlpbmdcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGltZXVwZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NlZWtpbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIuY29udHJvbHMucHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBfZ2V0UGVyY2VudGFnZShwbHlyLm1lZGlhLmN1cnJlbnRUaW1lLCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldCBzZWVrIHJhbmdlIHZhbHVlIG9ubHkgaWYgaXQncyBhICduYXR1cmFsJyB0aW1lIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RpbWV1cGRhdGUnICYmIHBseXIuYnV0dG9ucy5zZWVrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnNlZWsudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgYnVmZmVyIHN0YXR1c1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwbGF5aW5nJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJvZ3Jlc3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MgICAgPSBwbHlyLnByb2dyZXNzLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICAgICAgID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZCA9IHBseXIubWVkaWEuYnVmZmVyZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyZWQgJiYgYnVmZmVyZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhUTUw1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfZ2V0UGVyY2VudGFnZShidWZmZXJlZC5lbmQoMCksIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF9pcy5udW1iZXIoYnVmZmVyZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFlvdVR1YmUgcmV0dXJucyBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChidWZmZXJlZCAqIDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB2YWx1ZXNcbiAgICAgICAgICAgIF9zZXRQcm9ncmVzcyhwcm9ncmVzcywgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IDxwcm9ncmVzcz4gdmFsdWVcbiAgICAgICAgZnVuY3Rpb24gX3NldFByb2dyZXNzKHByb2dyZXNzLCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIDBcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gYnVmZmVyIG9yIGJhaWxcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKHByb2dyZXNzKSkge1xuICAgICAgICAgICAgICAgIGlmIChwbHlyLnByb2dyZXNzICYmIHBseXIucHJvZ3Jlc3MuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzID0gcGx5ci5wcm9ncmVzcy5idWZmZXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gT25lIHByb2dyZXNzIGVsZW1lbnQgcGFzc2VkXG4gICAgICAgICAgICBpZiAoX2lzLmh0bWxFbGVtZW50KHByb2dyZXNzKSkge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgLy8gT2JqZWN0IG9mIHByb2dyZXNzICsgdGV4dCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzLmJhcikge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcy5iYXIudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzLnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MudGV4dC5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgdGhlIGRpc3BsYXllZCB0aW1lXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVUaW1lRGlzcGxheSh0aW1lLCBlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBCYWlsIGlmIHRoZXJlJ3Mgbm8gZHVyYXRpb24gZGlzcGxheVxuICAgICAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGYWxsYmFjayB0byAwXG4gICAgICAgICAgICBpZiAoaXNOYU4odGltZSkpIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGx5ci5zZWNzID0gcGFyc2VJbnQodGltZSAlIDYwKTtcbiAgICAgICAgICAgIHBseXIubWlucyA9IHBhcnNlSW50KCh0aW1lIC8gNjApICUgNjApO1xuICAgICAgICAgICAgcGx5ci5ob3VycyA9IHBhcnNlSW50KCgodGltZSAvIDYwKSAvIDYwKSAlIDYwKTtcblxuICAgICAgICAgICAgLy8gRG8gd2UgbmVlZCB0byBkaXNwbGF5IGhvdXJzP1xuICAgICAgICAgICAgdmFyIGRpc3BsYXlIb3VycyA9IChwYXJzZUludCgoKF9nZXREdXJhdGlvbigpIC8gNjApIC8gNjApICUgNjApID4gMCk7XG5cbiAgICAgICAgICAgIC8vIEVuc3VyZSBpdCdzIHR3byBkaWdpdHMuIEZvciBleGFtcGxlLCAwMyByYXRoZXIgdGhhbiAzLlxuICAgICAgICAgICAgcGx5ci5zZWNzID0gKCcwJyArIHBseXIuc2Vjcykuc2xpY2UoLTIpO1xuICAgICAgICAgICAgcGx5ci5taW5zID0gKCcwJyArIHBseXIubWlucykuc2xpY2UoLTIpO1xuXG4gICAgICAgICAgICAvLyBSZW5kZXJcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gKGRpc3BsYXlIb3VycyA/IHBseXIuaG91cnMgKyAnOicgOiAnJykgKyBwbHlyLm1pbnMgKyAnOicgKyBwbHlyLnNlY3M7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IHRoZSBkdXJhdGlvbiBvbiBtZXRhZGF0YWxvYWRlZFxuICAgICAgICBmdW5jdGlvbiBfZGlzcGxheUR1cmF0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgZHVyYXRpb25cbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IF9nZXREdXJhdGlvbigpIHx8IDA7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgb25seSBvbmUgdGltZSBkaXNwbGF5LCBkaXNwbGF5IGR1cmF0aW9uIHRoZXJlXG4gICAgICAgICAgICBpZiAoIXBseXIuZHVyYXRpb24gJiYgY29uZmlnLmRpc3BsYXlEdXJhdGlvbiAmJiBwbHlyLm1lZGlhLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgIF91cGRhdGVUaW1lRGlzcGxheShkdXJhdGlvbiwgcGx5ci5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBkdXJhdGlvbiBlbGVtZW50LCB1cGRhdGUgY29udGVudFxuICAgICAgICAgICAgaWYgKHBseXIuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBfdXBkYXRlVGltZURpc3BsYXkoZHVyYXRpb24sIHBseXIuZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHRvb2x0aXAgKGlmIHZpc2libGUpXG4gICAgICAgICAgICBfdXBkYXRlU2Vla1Rvb2x0aXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSB0aW1lIGNoYW5nZSBldmVudFxuICAgICAgICBmdW5jdGlvbiBfdGltZVVwZGF0ZShldmVudCkge1xuICAgICAgICAgICAgLy8gRHVyYXRpb25cbiAgICAgICAgICAgIF91cGRhdGVUaW1lRGlzcGxheShwbHlyLm1lZGlhLmN1cnJlbnRUaW1lLCBwbHlyLmN1cnJlbnRUaW1lKTtcblxuICAgICAgICAgICAgLy8gSWdub3JlIHVwZGF0ZXMgd2hpbGUgc2Vla2luZ1xuICAgICAgICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICd0aW1ldXBkYXRlJyAmJiBwbHlyLm1lZGlhLnNlZWtpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFBsYXlpbmcgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF91cGRhdGVQcm9ncmVzcyhldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgc2VlayByYW5nZSBhbmQgcHJvZ3Jlc3NcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVNlZWtEaXNwbGF5KHRpbWUpIHtcbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gMFxuICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKHRpbWUpKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiAgICA9IF9nZXREdXJhdGlvbigpLFxuICAgICAgICAgICAgICAgIHZhbHVlICAgICAgID0gX2dldFBlcmNlbnRhZ2UodGltZSwgZHVyYXRpb24pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgICAgICAgICAgIGlmIChwbHlyLnByb2dyZXNzICYmIHBseXIucHJvZ3Jlc3MucGxheWVkKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5wbGF5ZWQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHNlZWsgcmFuZ2UgaW5wdXRcbiAgICAgICAgICAgIGlmIChwbHlyLmJ1dHRvbnMgJiYgcGx5ci5idXR0b25zLnNlZWspIHtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuc2Vlay52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIGhvdmVyIHRvb2x0aXAgZm9yIHNlZWtpbmdcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVNlZWtUb29sdGlwKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBfZ2V0RHVyYXRpb24oKTtcblxuICAgICAgICAgICAgLy8gQmFpbCBpZiBzZXR0aW5nIG5vdCB0cnVlXG4gICAgICAgICAgICBpZiAoIWNvbmZpZy50b29sdGlwcy5zZWVrIHx8ICFwbHlyLnByb2dyZXNzLmNvbnRhaW5lciB8fCBkdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBlcmNlbnRhZ2VcbiAgICAgICAgICAgIHZhciBjbGllbnRSZWN0ICA9IHBseXIucHJvZ3Jlc3MuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICAgIHBlcmNlbnQgICAgID0gMCxcbiAgICAgICAgICAgICAgICB2aXNpYmxlICAgICA9IGNvbmZpZy5jbGFzc2VzLnRvb2x0aXAgKyAnLS12aXNpYmxlJztcblxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHBlcmNlbnRhZ2UsIGlmIGFscmVhZHkgdmlzaWJsZVxuICAgICAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfaGFzQ2xhc3MocGx5ci5wcm9ncmVzcy50b29sdGlwLCB2aXNpYmxlKSkge1xuICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gcGx5ci5wcm9ncmVzcy50b29sdGlwLnN0eWxlLmxlZnQucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gKCgxMDAgLyBjbGllbnRSZWN0LndpZHRoKSAqIChldmVudC5wYWdlWCAtIGNsaWVudFJlY3QubGVmdCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgYm91bmRzXG4gICAgICAgICAgICBpZiAocGVyY2VudCA8IDApIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGVyY2VudCA+IDEwMCkge1xuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAxMDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERpc3BsYXkgdGhlIHRpbWUgYSBjbGljayB3b3VsZCBzZWVrIHRvXG4gICAgICAgICAgICBfdXBkYXRlVGltZURpc3BsYXkoKChkdXJhdGlvbiAvIDEwMCkgKiBwZXJjZW50KSwgcGx5ci5wcm9ncmVzcy50b29sdGlwKTtcblxuICAgICAgICAgICAgLy8gU2V0IHBvc2l0aW9uXG4gICAgICAgICAgICBwbHlyLnByb2dyZXNzLnRvb2x0aXAuc3R5bGUubGVmdCA9IHBlcmNlbnQgKyBcIiVcIjtcblxuICAgICAgICAgICAgLy8gU2hvdy9oaWRlIHRoZSB0b29sdGlwXG4gICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgaXMgYSBtb3VlcyBpbi9vdXQgYW5kIHBlcmNlbnRhZ2UgaXMgaW5zaWRlIGJvdW5kc1xuICAgICAgICAgICAgaWYgKGV2ZW50ICYmIF9pbkFycmF5KFsnbW91c2VlbnRlcicsICdtb3VzZWxlYXZlJ10sIGV2ZW50LnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIucHJvZ3Jlc3MudG9vbHRpcCwgdmlzaWJsZSwgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hvdyB0aGUgcGxheWVyIGNvbnRyb2xzIGluIGZ1bGxzY3JlZW4gbW9kZVxuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlQ29udHJvbHModG9nZ2xlKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBoaWRlIGlmIGNvbmZpZyBzYXlzIG5vdCB0bywgaXQncyBhdWRpbywgb3Igbm90IHJlYWR5IG9yIGxvYWRpbmdcbiAgICAgICAgICAgIGlmICghY29uZmlnLmhpZGVDb250cm9scyB8fCBwbHlyLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkZWxheSA9IDAsXG4gICAgICAgICAgICAgICAgaXNFbnRlckZ1bGxzY3JlZW4gPSBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93ID0gdG9nZ2xlLFxuICAgICAgICAgICAgICAgIGxvYWRpbmcgPSBfaGFzQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmxvYWRpbmcpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGZhbHNlIGlmIG5vIGJvb2xlYW5cbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4odG9nZ2xlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0b2dnbGUgJiYgdG9nZ2xlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSXMgdGhlIGVudGVyIGZ1bGxzY3JlZW4gZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaXNFbnRlckZ1bGxzY3JlZW4gPSAodG9nZ2xlLnR5cGUgPT09ICdlbnRlcmZ1bGxzY3JlZW4nKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXaGV0aGVyIHRvIHNob3cgY29udHJvbHNcbiAgICAgICAgICAgICAgICAgICAgc2hvdyA9IF9pbkFycmF5KFsnbW91c2Vtb3ZlJywgJ3RvdWNoc3RhcnQnLCAnbW91c2VlbnRlcicsICdmb2N1cyddLCB0b2dnbGUudHlwZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVsYXkgaGlkaW5nIG9uIG1vdmUgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShbJ21vdXNlbW92ZScsICd0b3VjaG1vdmUnXSwgdG9nZ2xlLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheSA9IDIwMDA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBEZWxheSBhIGxpdHRsZSBtb3JlIGZvciBrZXlib2FyZCB1c2Vyc1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9nZ2xlLnR5cGUgPT09ICdmb2N1cycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMzAwMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNob3cgPSBfaGFzQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmhpZGVDb250cm9scyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbGVhciB0aW1lciBldmVyeSBtb3ZlbWVudFxuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lcnMuaG92ZXIpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbW91c2UgaXMgbm90IG92ZXIgdGhlIGNvbnRyb2xzLCBzZXQgYSB0aW1lb3V0IHRvIGhpZGUgdGhlbVxuICAgICAgICAgICAgaWYgKHNob3cgfHwgcGx5ci5tZWRpYS5wYXVzZWQgfHwgbG9hZGluZykge1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuaGlkZUNvbnRyb2xzLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBbHdheXMgc2hvdyBjb250cm9scyB3aGVuIHBhdXNlZCBvciBpZiB0b3VjaFxuICAgICAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnBhdXNlZCB8fCBsb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEZWxheSBmb3IgaGlkaW5nIG9uIHRvdWNoXG4gICAgICAgICAgICAgICAgaWYgKHBseXIuYnJvd3Nlci5pc1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMzAwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRvZ2dsZSBpcyBmYWxzZSBvciBpZiB3ZSdyZSBwbGF5aW5nIChyZWdhcmRsZXNzIG9mIHRvZ2dsZSksXG4gICAgICAgICAgICAvLyB0aGVuIHNldCB0aGUgdGltZXIgdG8gaGlkZSB0aGUgY29udHJvbHNcbiAgICAgICAgICAgIGlmICghc2hvdyB8fCAhcGx5ci5tZWRpYS5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICB0aW1lcnMuaG92ZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG1vdXNlIGlzIG92ZXIgdGhlIGNvbnRyb2xzIChhbmQgbm90IGVudGVyaW5nIGZ1bGxzY3JlZW4pLCBiYWlsXG4gICAgICAgICAgICAgICAgICAgIGlmICgocGx5ci5jb250cm9scy5wcmVzc2VkIHx8IHBseXIuY29udHJvbHMuaG92ZXIpICYmICFpc0VudGVyRnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5oaWRlQ29udHJvbHMsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBjb21tb24gZnVuY3Rpb24gdG8gcmV0cmlldmUgbWVkaWEgc291cmNlXG4gICAgICAgIGZ1bmN0aW9uIF9zb3VyY2Uoc291cmNlKSB7XG4gICAgICAgICAgICAvLyBJZiBub3QgbnVsbCBvciB1bmRlZmluZWQsIHBhcnNlIGl0XG4gICAgICAgICAgICBpZiAoIV9pcy51bmRlZmluZWQoc291cmNlKSkge1xuICAgICAgICAgICAgICAgIF91cGRhdGVTb3VyY2Uoc291cmNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgY3VycmVudCBzb3VyY2VcbiAgICAgICAgICAgIHZhciB1cmw7XG4gICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IHBseXIuZW1iZWQuZ2V0VmlkZW9VcmwoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZ2V0VmlkZW9VcmwudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5nZXRDdXJyZW50U291bmQoZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSBvYmplY3QucGVybWFsaW5rX3VybDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gcGx5ci5tZWRpYS5jdXJyZW50U3JjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVybCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBzb3VyY2VcbiAgICAgICAgLy8gU291cmNlcyBhcmUgbm90IGNoZWNrZWQgZm9yIHN1cHBvcnQgc28gYmUgY2FyZWZ1bFxuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlU291cmNlKHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKCFfaXMub2JqZWN0KHNvdXJjZSkgfHwgISgnc291cmNlcycgaW4gc291cmNlKSB8fCAhc291cmNlLnNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgX3dhcm4oJ0ludmFsaWQgc291cmNlIGZvcm1hdCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVtb3ZlIHJlYWR5IGNsYXNzIGhvb2tcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMucmVhZHksIGZhbHNlKTtcblxuICAgICAgICAgICAgLy8gUGF1c2UgcGxheWJhY2tcbiAgICAgICAgICAgIF9wYXVzZSgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgc2VlayByYW5nZSBhbmQgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF91cGRhdGVTZWVrRGlzcGxheSgpO1xuXG4gICAgICAgICAgICAvLyBSZXNldCBidWZmZXIgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF9zZXRQcm9ncmVzcygpO1xuXG4gICAgICAgICAgICAvLyBDYW5jZWwgY3VycmVudCBuZXR3b3JrIHJlcXVlc3RzXG4gICAgICAgICAgICBfY2FuY2VsUmVxdWVzdHMoKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgbmV3IHNvdXJjZVxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGVtYmVkIG9iamVjdFxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBvbGQgbWVkaWFcbiAgICAgICAgICAgICAgICBfcmVtb3ZlKHBseXIubWVkaWEpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHZpZGVvIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycgJiYgcGx5ci52aWRlb0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICBfcmVtb3ZlKHBseXIudmlkZW9Db250YWluZXIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IGNsYXNzIG5hbWVcbiAgICAgICAgICAgICAgICBpZiAocGx5ci5jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5jb250YWluZXIucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldCB0aGUgdHlwZVxuICAgICAgICAgICAgICAgIGlmICgndHlwZScgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIudHlwZSA9IHNvdXJjZS50eXBlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBjaGlsZCB0eXBlIGZvciB2aWRlbyAoaXQgbWlnaHQgYmUgYW4gZW1iZWQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdFNvdXJjZSA9IHNvdXJjZS5zb3VyY2VzWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ3R5cGUnIGluIGZpcnN0U291cmNlICYmIF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgZmlyc3RTb3VyY2UudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLnR5cGUgPSBmaXJzdFNvdXJjZS50eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHN1cHBvcnRcbiAgICAgICAgICAgICAgICBwbHlyLnN1cHBvcnRlZCA9IHN1cHBvcnRlZChwbHlyLnR5cGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBtYXJrdXBcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWRJZCA9IHNvdXJjZS5zb3VyY2VzWzBdLnNyYztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEluamVjdCB0aGUgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBfcHJlcGVuZENoaWxkKHBseXIuY29udGFpbmVyLCBwbHlyLm1lZGlhKTtcblxuICAgICAgICAgICAgICAgIC8vIEF1dG9wbGF5IHRoZSBuZXcgc291cmNlP1xuICAgICAgICAgICAgICAgIGlmIChfaXMuYm9vbGVhbihzb3VyY2UuYXV0b3BsYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5hdXRvcGxheSA9IHNvdXJjZS5hdXRvcGxheTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgYXR0cmlidXRlcyBmb3IgYXVkaW8gYW5kIHZpZGVvXG4gICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5odG1sNSwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmNyb3Nzb3JpZ2luKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgnY3Jvc3NvcmlnaW4nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5hdXRvcGxheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ2F1dG9wbGF5JywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICgncG9zdGVyJyBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdwb3N0ZXInLCBzb3VyY2UucG9zdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmxvb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdsb29wJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBjbGFzcyBob29rc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuZnVsbHNjcmVlbi5hY3RpdmUsIHBseXIuaXNGdWxsc2NyZWVuKTtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmFjdGl2ZSwgcGx5ci5jYXB0aW9uc0VuYWJsZWQpO1xuICAgICAgICAgICAgICAgIF90b2dnbGVTdHlsZUhvb2soKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCBuZXcgc291cmNlcyBmb3IgaHRtbDVcbiAgICAgICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pbnNlcnRDaGlsZEVsZW1lbnRzKCdzb3VyY2UnLCBzb3VyY2Uuc291cmNlcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IHVwIGZyb20gc2NyYXRjaFxuICAgICAgICAgICAgICAgIF9zZXR1cE1lZGlhKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBIVE1MNSBzdHVmZlxuICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgY2FwdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKCd0cmFja3MnIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2luc2VydENoaWxkRWxlbWVudHMoJ3RyYWNrJywgc291cmNlLnRyYWNrcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBMb2FkIEhUTUw1IHNvdXJjZXNcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgSFRNTDUgb3IgZW1iZWQgYnV0IG5vdCBmdWxseSBzdXBwb3J0ZWQsIHNldHVwSW50ZXJmYWNlIGFuZCBjYWxsIHJlYWR5IG5vd1xuICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkgfHwgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSAmJiAhcGx5ci5zdXBwb3J0ZWQuZnVsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgaW50ZXJmYWNlXG4gICAgICAgICAgICAgICAgICAgIF9zZXR1cEludGVyZmFjZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGwgcmVhZHlcbiAgICAgICAgICAgICAgICAgICAgX3JlYWR5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IGFyaWEgdGl0bGUgYW5kIGlmcmFtZSB0aXRsZVxuICAgICAgICAgICAgICAgIGNvbmZpZy50aXRsZSA9IHNvdXJjZS50aXRsZTtcbiAgICAgICAgICAgICAgICBfc2V0VGl0bGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGVzdHJveSBpbnN0YW5jZSBhZG4gd2FpdCBmb3IgY2FsbGJhY2tcbiAgICAgICAgICAgIC8vIFZpbWVvIHRocm93cyBhIHdvYmJseSBpZiB5b3UgZG9uJ3Qgd2FpdFxuICAgICAgICAgICAgX2Rlc3Ryb3koc2V0dXAsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBwb3N0ZXJcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVBvc3Rlcihzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgncG9zdGVyJywgc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExpc3RlbiBmb3IgY29udHJvbCBldmVudHNcbiAgICAgICAgZnVuY3Rpb24gX2NvbnRyb2xMaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5wdXQgZXZlbnQsIHNvIHdlIGZhbGxiYWNrIHRvIGNoYW5nZVxuICAgICAgICAgICAgdmFyIGlucHV0RXZlbnQgPSAocGx5ci5icm93c2VyLmlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCcpO1xuXG4gICAgICAgICAgICAvLyBDbGljayBwbGF5L3BhdXNlIGhlbHBlclxuICAgICAgICAgICAgZnVuY3Rpb24gdG9nZ2xlUGxheSgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGxheSA9IF90b2dnbGVQbGF5KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgd2hpY2ggYnV0dG9uc1xuICAgICAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gcGx5ci5idXR0b25zW3BsYXkgPyAncGxheScgOiAncGF1c2UnXSxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gcGx5ci5idXR0b25zW3BsYXkgPyAncGF1c2UnIDogJ3BsYXknXTtcblxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgbGFzdCBwbGF5IGJ1dHRvbiB0byBhY2NvdW50IGZvciB0aGUgbGFyZ2UgcGxheSBidXR0b25cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldFt0YXJnZXQubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0WzBdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldHVwIGZvY3VzIGFuZCB0YWIgZm9jdXNcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYWRUYWJGb2N1cyA9IF9oYXNDbGFzcyh0cmlnZ2VyLCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cyk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5mb2N1cygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFkVGFiRm9jdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3ModHJpZ2dlciwgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3ModGFyZ2V0LCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGZvY3VzZWQgZWxlbWVudFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Rm9jdXNFbGVtZW50KCkge1xuICAgICAgICAgICAgICAgIHZhciBmb2N1c2VkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICAgICAgICAgICAgICAgIGlmICghZm9jdXNlZCB8fCBmb2N1c2VkID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCc6Zm9jdXMnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZm9jdXNlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBrZXkgY29kZSBmb3IgYW4gZXZlbnRcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEtleUNvZGUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQua2V5Q29kZSA/IGV2ZW50LmtleUNvZGUgOiBldmVudC53aGljaDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGV0ZWN0IHRhYiBmb2N1c1xuICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tUYWJGb2N1cyhmb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYnV0dG9uIGluIHBseXIuYnV0dG9ucykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHBseXIuYnV0dG9uc1tidXR0b25dO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaXMubm9kZUxpc3QoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhlbGVtZW50W2ldLCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgKGVsZW1lbnRbaV0gPT09IGZvY3VzZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhlbGVtZW50LCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgKGVsZW1lbnQgPT09IGZvY3VzZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gS2V5Ym9hcmQgc2hvcnRjdXRzXG4gICAgICAgICAgICBpZiAoY29uZmlnLmtleWJvYXJkU2hvcmN1dHMuZm9jdXNlZCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBnbG9iYWwgcHJlc3Nlc1xuICAgICAgICAgICAgICAgIGlmIChjb25maWcua2V5Ym9hcmRTaG9yY3V0cy5nbG9iYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgX29uKHdpbmRvdywgJ2tleWRvd24ga2V5dXAnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBnZXRLZXlDb2RlKGV2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBnZXRGb2N1c0VsZW1lbnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93ZWQgPSBbNDgsNDksNTAsNTEsNTIsNTMsNTQsNTYsNTcsNzUsNzcsNzAsNjddLFxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgICA9IGdldCgpLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT25seSBoYW5kbGUgZ2xvYmFsIGtleSBwcmVzcyBpZiB0aGVyZSdzIG9ubHkgb25lIHBsYXllclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHRoZSBrZXkgaXMgaW4gdGhlIGFsbG93ZWQga2V5c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGlmIHRoZSBmb2N1c2VkIGVsZW1lbnQgaXMgbm90IGVkaXRhYmxlIChlLmcuIHRleHQgaW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgYW55IHRoYXQgYWNjZXB0IGtleSBpbnB1dCBodHRwOi8vd2ViYWltLm9yZy90ZWNobmlxdWVzL2tleWJvYXJkL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAxICYmIF9pbkFycmF5KGFsbG93ZWQsIGNvZGUpICYmICghX2lzLmh0bWxFbGVtZW50KGZvY3VzZWQpIHx8ICFfbWF0Y2hlcyhmb2N1c2VkLCBjb25maWcuc2VsZWN0b3JzLmVkaXRhYmxlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVLZXkoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgcHJlc3NlcyBvbiBmb2N1c2VkXG4gICAgICAgICAgICAgICAgX29uKHBseXIuY29udGFpbmVyLCAna2V5ZG93biBrZXl1cCcsIGhhbmRsZUtleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZUtleShldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZ2V0S2V5Q29kZShldmVudCksXG4gICAgICAgICAgICAgICAgICAgIHByZXNzZWQgPSBldmVudC50eXBlID09PSAna2V5ZG93bicsXG4gICAgICAgICAgICAgICAgICAgIGhlbGQgPSBwcmVzc2VkICYmIGNvZGUgPT09IGxhc3Q7XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgaXMgYnViYmxlZCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCBkb2Vzbid0IGdldCB0aGUga2V5Y29kZSBmb3Igd2hhdGV2ZXIgcmVhc29uXG4gICAgICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKGNvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZWVrIGJ5IHRoZSBudW1iZXIga2V5c1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNlZWtCeUtleSgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGN1cnJlbnQgZHVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gcGx5ci5tZWRpYS5kdXJhdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIGlmIHdlIGhhdmUgbm8gZHVyYXRpb24gc2V0XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihkdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERpdmlkZSB0aGUgbWF4IGR1cmF0aW9uIGludG8gMTB0aCdzIGFuZCB0aW1lcyBieSB0aGUgbnVtYmVyIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIF9zZWVrKChkdXJhdGlvbiAvIDEwKSAqIChjb2RlIC0gNDgpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGtleSBvbiBrZXlkb3duXG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgb24ga2V5dXBcbiAgICAgICAgICAgICAgICBpZiAocHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGljaCBrZXljb2RlcyBzaG91bGQgd2UgcHJldmVudCBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IFs0OCw0OSw1MCw1MSw1Miw1Myw1NCw1Niw1NywzMiw3NSwzOCw0MCw3NywzOSwzNyw3MCw2N107XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGNvZGUgaXMgZm91bmQgcHJldmVudCBkZWZhdWx0IChlLmcuIHByZXZlbnQgc2Nyb2xsaW5nIGZvciBhcnJvd3MpXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShwcmV2ZW50RGVmYXVsdCwgY29kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaChjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwLTlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDg6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ5OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1MDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDUyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1MzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1NjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTc6IGlmICghaGVsZCkgeyBzZWVrQnlLZXkoKTsgfSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNwYWNlIGFuZCBLIGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzU6IGlmICghaGVsZCkgeyBfdG9nZ2xlUGxheSgpOyB9IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJyb3cgdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzg6IF9pbmNyZWFzZVZvbHVtZSgpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFycm93IGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDA6IF9kZWNyZWFzZVZvbHVtZSgpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE0ga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc3OiBpZiAoIWhlbGQpIHsgX3RvZ2dsZU11dGUoKSB9IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJyb3cgZm9yd2FyZFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOTogX2ZvcndhcmQoKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcnJvdyBiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM3OiBfcmV3aW5kKCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRiBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzA6IF90b2dnbGVGdWxsc2NyZWVuKCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQyBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjc6IGlmICghaGVsZCkgeyBfdG9nZ2xlQ2FwdGlvbnMoKTsgfSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEVzY2FwZSBpcyBoYW5kbGUgbmF0aXZlbHkgd2hlbiBpbiBmdWxsIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAvLyBTbyB3ZSBvbmx5IG5lZWQgdG8gd29ycnkgYWJvdXQgbm9uIG5hdGl2ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsU2NyZWVuICYmIHBseXIuaXNGdWxsc2NyZWVuICYmIGNvZGUgPT09IDI3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlRnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgbGFzdCBjb2RlIGZvciBuZXh0IGN5Y2xlXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBjb2RlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRm9jdXMvdGFiIG1hbmFnZW1lbnRcbiAgICAgICAgICAgIF9vbih3aW5kb3csICdrZXl1cCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBnZXRLZXlDb2RlKGV2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IGdldEZvY3VzRWxlbWVudCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tUYWJGb2N1cyhmb2N1c2VkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF9vbihkb2N1bWVudC5ib2R5LCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MoX2dldEVsZW1lbnQoJy4nICsgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMpLCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKHZhciBidXR0b24gaW4gcGx5ci5idXR0b25zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBwbHlyLmJ1dHRvbnNbYnV0dG9uXTtcblxuICAgICAgICAgICAgICAgIF9vbihlbGVtZW50LCAnYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MoZWxlbWVudCwgJ3RhYi1mb2N1cycsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUGxheVxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnBsYXksICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMucGxheSwgdG9nZ2xlUGxheSk7XG5cbiAgICAgICAgICAgIC8vIFBhdXNlXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMucGF1c2UsICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMucGF1c2UsIHRvZ2dsZVBsYXkpO1xuXG4gICAgICAgICAgICAvLyBSZXN0YXJ0XG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMucmVzdGFydCwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5yZXN0YXJ0LCBfc2Vlayk7XG5cbiAgICAgICAgICAgIC8vIFJld2luZFxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnJld2luZCwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5yZXdpbmQsIF9yZXdpbmQpO1xuXG4gICAgICAgICAgICAvLyBGYXN0IGZvcndhcmRcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5mb3J3YXJkLCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLmZvcndhcmQsIF9mb3J3YXJkKTtcblxuICAgICAgICAgICAgLy8gU2Vla1xuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnNlZWssIGlucHV0RXZlbnQsIGNvbmZpZy5saXN0ZW5lcnMuc2VlaywgX3NlZWspO1xuXG4gICAgICAgICAgICAvLyBTZXQgdm9sdW1lXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLnZvbHVtZS5pbnB1dCwgaW5wdXRFdmVudCwgY29uZmlnLmxpc3RlbmVycy52b2x1bWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9zZXRWb2x1bWUocGx5ci52b2x1bWUuaW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIE11dGVcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5tdXRlLCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLm11dGUsIF90b2dnbGVNdXRlKTtcblxuICAgICAgICAgICAgLy8gRnVsbHNjcmVlblxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLmZ1bGxzY3JlZW4sICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMuZnVsbHNjcmVlbiwgX3RvZ2dsZUZ1bGxzY3JlZW4pO1xuXG4gICAgICAgICAgICAvLyBIYW5kbGUgdXNlciBleGl0aW5nIGZ1bGxzY3JlZW4gYnkgZXNjYXBpbmcgZXRjXG4gICAgICAgICAgICBpZiAoZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgICAgICBfb24oZG9jdW1lbnQsIGZ1bGxzY3JlZW4uZnVsbFNjcmVlbkV2ZW50TmFtZSwgX3RvZ2dsZUZ1bGxzY3JlZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYXB0aW9uc1xuICAgICAgICAgICAgX29uKHBseXIuYnV0dG9ucy5jYXB0aW9ucywgJ2NsaWNrJywgX3RvZ2dsZUNhcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gU2VlayB0b29sdGlwXG4gICAgICAgICAgICBfb24ocGx5ci5wcm9ncmVzcy5jb250YWluZXIsICdtb3VzZWVudGVyIG1vdXNlbGVhdmUgbW91c2Vtb3ZlJywgX3VwZGF0ZVNlZWtUb29sdGlwKTtcblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGNvbnRyb2xzIHZpc2liaWxpdHkgYmFzZWQgb24gbW91c2UgbW92ZW1lbnRcbiAgICAgICAgICAgIGlmIChjb25maWcuaGlkZUNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgLy8gVG9nZ2xlIGNvbnRyb2xzIG9uIG1vdXNlIGV2ZW50cyBhbmQgZW50ZXJpbmcgZnVsbHNjcmVlblxuICAgICAgICAgICAgICAgIF9vbihwbHlyLmNvbnRhaW5lciwgJ21vdXNlZW50ZXIgbW91c2VsZWF2ZSBtb3VzZW1vdmUgdG91Y2hzdGFydCB0b3VjaGVuZCB0b3VjaGNhbmNlbCB0b3VjaG1vdmUgZW50ZXJmdWxsc2NyZWVuJywgX3RvZ2dsZUNvbnRyb2xzKTtcblxuICAgICAgICAgICAgICAgIC8vIFdhdGNoIGZvciBjdXJzb3Igb3ZlciBjb250cm9scyBzbyB0aGV5IGRvbid0IGhpZGUgd2hlbiB0cnlpbmcgdG8gaW50ZXJhY3RcbiAgICAgICAgICAgICAgICBfb24ocGx5ci5jb250cm9scywgJ21vdXNlZW50ZXIgbW91c2VsZWF2ZScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY29udHJvbHMuaG92ZXIgPSBldmVudC50eXBlID09PSAnbW91c2VlbnRlcic7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgLy8gV2F0Y2ggZm9yIGN1cnNvciBvdmVyIGNvbnRyb2xzIHNvIHRoZXkgZG9uJ3QgaGlkZSB3aGVuIHRyeWluZyB0byBpbnRlcmFjdFxuICAgICAgICAgICAgICAgIF9vbihwbHlyLmNvbnRyb2xzLCAnbW91c2Vkb3duIG1vdXNldXAgdG91Y2hzdGFydCB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY29udHJvbHMucHJlc3NlZCA9IF9pbkFycmF5KFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXSwgZXZlbnQudHlwZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGb2N1cyBpbi9vdXQgb24gY29udHJvbHNcbiAgICAgICAgICAgICAgICBfb24ocGx5ci5jb250cm9scywgJ2ZvY3VzIGJsdXInLCBfdG9nZ2xlQ29udHJvbHMsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGp1c3Qgdm9sdW1lIG9uIHNjcm9sbFxuICAgICAgICAgICAgX29uKHBseXIudm9sdW1lLmlucHV0LCAnd2hlZWwnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBEZXRlY3QgXCJuYXR1cmFsXCIgc2Nyb2xsIC0gc3VwcG9yZWQgb24gT1MgWCBTYWZhcmkgb25seVxuICAgICAgICAgICAgICAgIC8vIE90aGVyIGJyb3dzZXJzIG9uIE9TIFggd2lsbCBiZSBpbnZlcnRlZCB1bnRpbCBzdXBwb3J0IGltcHJvdmVzXG4gICAgICAgICAgICAgICAgdmFyIGludmVydGVkID0gZXZlbnQud2Via2l0RGlyZWN0aW9uSW52ZXJ0ZWRGcm9tRGV2aWNlLFxuICAgICAgICAgICAgICAgICAgICBzdGVwID0gKGNvbmZpZy52b2x1bWVTdGVwIC8gNSk7XG5cbiAgICAgICAgICAgICAgICAvLyBTY3JvbGwgZG93biAob3IgdXAgb24gbmF0dXJhbCkgdG8gZGVjcmVhc2VcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGVsdGFZIDwgMCB8fCBldmVudC5kZWx0YVggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnZlcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RlY3JlYXNlVm9sdW1lKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2luY3JlYXNlVm9sdW1lKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2Nyb2xsIHVwIChvciBkb3duIG9uIG5hdHVyYWwpIHRvIGluY3JlYXNlXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmRlbHRhWSA+IDAgfHwgZXZlbnQuZGVsdGFYIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW52ZXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbmNyZWFzZVZvbHVtZShzdGVwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kZWNyZWFzZVZvbHVtZShzdGVwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTGlzdGVuIGZvciBtZWRpYSBldmVudHNcbiAgICAgICAgZnVuY3Rpb24gX21lZGlhTGlzdGVuZXJzKCkge1xuICAgICAgICAgICAgLy8gVGltZSBjaGFuZ2Ugb24gbWVkaWFcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAndGltZXVwZGF0ZSBzZWVraW5nJywgX3RpbWVVcGRhdGUpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgbWFudWFsIGNhcHRpb25zXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnLCBfc2Vla01hbnVhbENhcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gRGlzcGxheSBkdXJhdGlvblxuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICdkdXJhdGlvbmNoYW5nZSBsb2FkZWRtZXRhZGF0YScsIF9kaXNwbGF5RHVyYXRpb24pO1xuXG4gICAgICAgICAgICAvLyBIYW5kbGUgdGhlIG1lZGlhIGZpbmlzaGluZ1xuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICdlbmRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIFNob3cgcG9zdGVyIG9uIGVuZFxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycgJiYgY29uZmlnLnNob3dQb3N0ZXJPbkVuZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhclxuICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzdGFydFxuICAgICAgICAgICAgICAgICAgICBfc2VlaygpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlLWxvYWQgbWVkaWFcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5sb2FkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBidWZmZXIgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAncHJvZ3Jlc3MgcGxheWluZycsIF91cGRhdGVQcm9ncmVzcyk7XG5cbiAgICAgICAgICAgIC8vIEhhbmRsZSBuYXRpdmUgbXV0ZVxuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICd2b2x1bWVjaGFuZ2UnLCBfdXBkYXRlVm9sdW1lKTtcblxuICAgICAgICAgICAgLy8gSGFuZGxlIG5hdGl2ZSBwbGF5L3BhdXNlXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ3BsYXkgcGF1c2UgZW5kZWQnLCBfY2hlY2tQbGF5aW5nKTtcblxuICAgICAgICAgICAgLy8gTG9hZGluZ1xuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICd3YWl0aW5nIGNhbnBsYXkgc2Vla2VkJywgX2NoZWNrTG9hZGluZyk7XG5cbiAgICAgICAgICAgIC8vIENsaWNrIHZpZGVvXG4gICAgICAgICAgICBpZiAoY29uZmlnLmNsaWNrVG9QbGF5ICYmIHBseXIudHlwZSAhPT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgICAgIC8vIFJlLWZldGNoIHRoZSB3cmFwcGVyXG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBfZ2V0RWxlbWVudCgnLicgKyBjb25maWcuY2xhc3Nlcy52aWRlb1dyYXBwZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gQmFpbCBpZiB0aGVyZSdzIG5vIHdyYXBwZXIgKHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbilcbiAgICAgICAgICAgICAgICBpZiAoIXdyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldCBjdXJzb3JcbiAgICAgICAgICAgICAgICB3cmFwcGVyLnN0eWxlLmN1cnNvciA9IFwicG9pbnRlclwiO1xuXG4gICAgICAgICAgICAgICAgLy8gT24gY2xpY2sgcGxheSwgcGF1c2Ugb3JlIHJlc3RhcnRcbiAgICAgICAgICAgICAgICBfb24od3JhcHBlciwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRvdWNoIGRldmljZXMgd2lsbCBqdXN0IHNob3cgY29udHJvbHMgKGlmIHdlJ3JlIGhpZGluZyBjb250cm9scylcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5oaWRlQ29udHJvbHMgJiYgcGx5ci5icm93c2VyLmlzVG91Y2ggJiYgIXBseXIubWVkaWEucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGx5ci5tZWRpYS5lbmRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NlZWsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEaXNhYmxlIHJpZ2h0IGNsaWNrXG4gICAgICAgICAgICBpZiAoY29uZmlnLmRpc2FibGVDb250ZXh0TWVudSkge1xuICAgICAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAnY29udGV4dG1lbnUnLCBmdW5jdGlvbihldmVudCkgeyBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUHJveHkgZXZlbnRzIHRvIGNvbnRhaW5lclxuICAgICAgICAgICAgLy8gQnViYmxlIHVwIGtleSBldmVudHMgZm9yIEVkZ2VcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCBjb25maWcuZXZlbnRzLmNvbmNhdChbJ2tleXVwJywgJ2tleWRvd24nXSkuam9pbignICcpLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsIGV2ZW50LnR5cGUsIHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYW5jZWwgY3VycmVudCBuZXR3b3JrIHJlcXVlc3RzXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xNzRcbiAgICAgICAgZnVuY3Rpb24gX2NhbmNlbFJlcXVlc3RzKCkge1xuICAgICAgICAgICAgaWYgKCFfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBjaGlsZCBzb3VyY2VzXG4gICAgICAgICAgICB2YXIgc291cmNlcyA9IHBseXIubWVkaWEucXVlcnlTZWxlY3RvckFsbCgnc291cmNlJyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBfcmVtb3ZlKHNvdXJjZXNbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgYmxhbmsgdmlkZW8gc3JjIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy8gVGhpcyBpcyB0byBwcmV2ZW50IGEgTUVESUFfRVJSX1NSQ19OT1RfU1VQUE9SVEVEIGVycm9yXG4gICAgICAgICAgICAvLyBJbmZvOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMyMjMxNTc5L2hvdy10by1wcm9wZXJseS1kaXNwb3NlLW9mLWFuLWh0bWw1LXZpZGVvLWFuZC1jbG9zZS1zb2NrZXQtb3ItY29ubmVjdGlvblxuICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ3NyYycsICdodHRwczovL2Nkbi5zZWx6LmNvbS9wbHlyL2JsYW5rLm1wNCcpO1xuXG4gICAgICAgICAgICAvLyBMb2FkIHRoZSBuZXcgZW1wdHkgc291cmNlXG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgY2FuY2VsIGV4aXN0aW5nIHJlcXVlc3RzXG4gICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9pc3N1ZXMvMTc0XG4gICAgICAgICAgICBwbHlyLm1lZGlhLmxvYWQoKTtcblxuICAgICAgICAgICAgLy8gRGVidWdnaW5nXG4gICAgICAgICAgICBfbG9nKCdDYW5jZWxsZWQgbmV0d29yayByZXF1ZXN0cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVzdHJveSBhbiBpbnN0YW5jZVxuICAgICAgICAvLyBFdmVudCBsaXN0ZW5lcnMgYXJlIHJlbW92ZWQgd2hlbiBlbGVtZW50cyBhcmUgcmVtb3ZlZFxuICAgICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyNTI4MDQ5L2lmLWEtZG9tLWVsZW1lbnQtaXMtcmVtb3ZlZC1hcmUtaXRzLWxpc3RlbmVycy1hbHNvLXJlbW92ZWQtZnJvbS1tZW1vcnlcbiAgICAgICAgZnVuY3Rpb24gX2Rlc3Ryb3koY2FsbGJhY2ssIHJlc3RvcmUpIHtcbiAgICAgICAgICAgIC8vIEJhaWwgaWYgdGhlIGVsZW1lbnQgaXMgbm90IGluaXRpYWxpemVkXG4gICAgICAgICAgICBpZiAoIXBseXIuaW5pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUeXBlIHNwZWNpZmljIHN0dWZmXG4gICAgICAgICAgICBzd2l0Y2ggKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciB0aW1lcnNcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXJzLmJ1ZmZlcmluZyk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5wbGF5aW5nKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEZXN0cm95IFlvdVR1YmUgQVBJXG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuVXAoKTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpbWVvJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gRGVzdHJveSBWaW1lbyBBUElcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiBjbGVhbiB1cCAod2FpdCwgdG8gcHJldmVudCBwb3N0bWVzc2FnZSBlcnJvcnMpXG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQudW5sb2FkKCkudGhlbihjbGVhblVwKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBWaW1lbyBkb2VzIG5vdCBhbHdheXMgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIHRpbWVycy5jbGVhblVwID0gd2luZG93LnNldFRpbWVvdXQoY2xlYW5VcCwgMjAwKTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgbmF0aXZlIHZpZGVvIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVOYXRpdmVDb250cm9scyh0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICAgICAgICAgICAgICBjbGVhblVwKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFuVXAoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVycy5jbGVhblVwKTtcblxuICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gcmVzdG9yZSBvcmlnaW5hbCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKCFfaXMuYm9vbGVhbihyZXN0b3JlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN0b3JlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICAgICAgICAgIGlmIChfaXMuZnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwob3JpZ2luYWwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEJhaWwgaWYgd2UgZG9uJ3QgbmVlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBlbGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN0b3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgaW5pdCBmbGFnXG4gICAgICAgICAgICAgICAgcGx5ci5pbml0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBjb250YWluZXIgd2l0aCB0aGUgb3JpZ2luYWwgZWxlbWVudCBwcm92aWRlZFxuICAgICAgICAgICAgICAgIHBseXIuY29udGFpbmVyLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG9yaWdpbmFsLCBwbHlyLmNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAvLyBFdmVudFxuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQob3JpZ2luYWwsICdkZXN0cm95ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGEgcGxheWVyXG4gICAgICAgIGZ1bmN0aW9uIF9pbml0KCkge1xuICAgICAgICAgICAgLy8gQmFpbCBpZiB0aGUgZWxlbWVudCBpcyBpbml0aWFsaXplZFxuICAgICAgICAgICAgaWYgKHBseXIuaW5pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXR1cCB0aGUgZnVsbHNjcmVlbiBhcGlcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4gPSBfZnVsbHNjcmVlbigpO1xuXG4gICAgICAgICAgICAvLyBTbmlmZiBvdXQgdGhlIGJyb3dzZXJcbiAgICAgICAgICAgIHBseXIuYnJvd3NlciA9IF9icm93c2VyU25pZmYoKTtcblxuICAgICAgICAgICAgLy8gQmFpbCBpZiBub3RoaW5nIHRvIHNldHVwXG4gICAgICAgICAgICBpZiAoIV9pcy5odG1sRWxlbWVudChwbHlyLm1lZGlhKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9hZCBzYXZlZCBzZXR0aW5ncyBmcm9tIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgX3NldHVwU3RvcmFnZSgpO1xuXG4gICAgICAgICAgICAvLyBTZXQgbWVkaWEgdHlwZSBiYXNlZCBvbiB0YWcgb3IgZGF0YSBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vIFN1cHBvcnRlZDogdmlkZW8sIGF1ZGlvLCB2aW1lbywgeW91dHViZVxuICAgICAgICAgICAgdmFyIHRhZ05hbWUgPSBtZWRpYS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAodGFnTmFtZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnR5cGUgICAgID0gbWVkaWEuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKTtcbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkSWQgID0gbWVkaWEuZ2V0QXR0cmlidXRlKCdkYXRhLXZpZGVvLWlkJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICAgICAgICAgIG1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XG4gICAgICAgICAgICAgICAgbWVkaWEucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZpZGVvLWlkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBseXIudHlwZSAgICAgICAgICAgPSB0YWdOYW1lO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5jcm9zc29yaWdpbiAgPSAobWVkaWEuZ2V0QXR0cmlidXRlKCdjcm9zc29yaWdpbicpICE9PSBudWxsKTtcbiAgICAgICAgICAgICAgICBjb25maWcuYXV0b3BsYXkgICAgID0gKGNvbmZpZy5hdXRvcGxheSB8fCAobWVkaWEuZ2V0QXR0cmlidXRlKCdhdXRvcGxheScpICE9PSBudWxsKSk7XG4gICAgICAgICAgICAgICAgY29uZmlnLmxvb3AgICAgICAgICA9IChjb25maWcubG9vcCB8fCAobWVkaWEuZ2V0QXR0cmlidXRlKCdsb29wJykgIT09IG51bGwpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHN1cHBvcnRcbiAgICAgICAgICAgIHBseXIuc3VwcG9ydGVkID0gc3VwcG9ydGVkKHBseXIudHlwZSk7XG5cbiAgICAgICAgICAgIC8vIElmIG5vIG5hdGl2ZSBzdXBwb3J0LCBiYWlsXG4gICAgICAgICAgICBpZiAoIXBseXIuc3VwcG9ydGVkLmJhc2ljKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXcmFwIG1lZGlhXG4gICAgICAgICAgICBwbHlyLmNvbnRhaW5lciA9IF93cmFwKG1lZGlhLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG5cbiAgICAgICAgICAgIC8vIEFsbG93IGZvY3VzIHRvIGJlIGNhcHR1cmVkXG4gICAgICAgICAgICBwbHlyLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgMCk7XG5cbiAgICAgICAgICAgIC8vIEFkZCBzdHlsZSBob29rXG4gICAgICAgICAgICBfdG9nZ2xlU3R5bGVIb29rKCk7XG5cbiAgICAgICAgICAgIC8vIERlYnVnIGluZm9cbiAgICAgICAgICAgIF9sb2coJycgKyBwbHlyLmJyb3dzZXIubmFtZSArICcgJyArIHBseXIuYnJvd3Nlci52ZXJzaW9uKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgbWVkaWFcbiAgICAgICAgICAgIF9zZXR1cE1lZGlhKCk7XG5cbiAgICAgICAgICAgIC8vIFNldHVwIGludGVyZmFjZVxuICAgICAgICAgICAgLy8gSWYgZW1iZWQgYnV0IG5vdCBmdWxseSBzdXBwb3J0ZWQsIHNldHVwSW50ZXJmYWNlICh0byBhdm9pZCBmbGFzaCBvZiBjb250cm9scykgYW5kIGNhbGwgcmVhZHkgbm93XG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpIHx8IChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkgJiYgIXBseXIuc3VwcG9ydGVkLmZ1bGwpKSB7XG4gICAgICAgICAgICAgICAgLy8gU2V0dXAgVUlcbiAgICAgICAgICAgICAgICBfc2V0dXBJbnRlcmZhY2UoKTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGwgcmVhZHlcbiAgICAgICAgICAgICAgICBfcmVhZHkoKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCB0aXRsZSBvbiBidXR0b24gYW5kIGZyYW1lXG4gICAgICAgICAgICAgICAgX3NldFRpdGxlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN1Y2Nlc3NmdWwgc2V0dXBcbiAgICAgICAgICAgIHBseXIuaW5pdCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCB0aGUgVUlcbiAgICAgICAgZnVuY3Rpb24gX3NldHVwSW50ZXJmYWNlKCkge1xuICAgICAgICAgICAgLy8gRG9uJ3Qgc2V0dXAgaW50ZXJmYWNlIGlmIG5vIHN1cHBvcnRcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIF93YXJuKCdCYXNpYyBzdXBwb3J0IG9ubHknLCBwbHlyLnR5cGUpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX3JlbW92ZShfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLndyYXBwZXIpKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBsYXJnZSBwbGF5XG4gICAgICAgICAgICAgICAgX3JlbW92ZShfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucGxheSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBuYXRpdmUgY29udHJvbHNcbiAgICAgICAgICAgICAgICBfdG9nZ2xlTmF0aXZlQ29udHJvbHModHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBCYWlsXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbmplY3QgY3VzdG9tIGNvbnRyb2xzIGlmIG5vdCBwcmVzZW50XG4gICAgICAgICAgICB2YXIgY29udHJvbHNNaXNzaW5nID0gIV9nZXRFbGVtZW50cyhjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLndyYXBwZXIpLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChjb250cm9sc01pc3NpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyBJbmplY3QgY3VzdG9tIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX2luamVjdENvbnRyb2xzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGVsZW1lbnRzXG4gICAgICAgICAgICBpZiAoIV9maW5kRWxlbWVudHMoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIGNvbnRyb2xzIGFyZSBpbmplY3RlZCwgcmUtYmluZCBsaXN0ZW5lcnMgZm9yIGNvbnRyb2xzXG4gICAgICAgICAgICBpZiAoY29udHJvbHNNaXNzaW5nKSB7XG4gICAgICAgICAgICAgICAgX2NvbnRyb2xMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWVkaWEgZWxlbWVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIF9tZWRpYUxpc3RlbmVycygpO1xuXG4gICAgICAgICAgICAvLyBSZW1vdmUgbmF0aXZlIGNvbnRyb2xzXG4gICAgICAgICAgICBfdG9nZ2xlTmF0aXZlQ29udHJvbHMoKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgZnVsbHNjcmVlblxuICAgICAgICAgICAgX3NldHVwRnVsbHNjcmVlbigpO1xuXG4gICAgICAgICAgICAvLyBDYXB0aW9uc1xuICAgICAgICAgICAgX3NldHVwQ2FwdGlvbnMoKTtcblxuICAgICAgICAgICAgLy8gU2V0IHZvbHVtZVxuICAgICAgICAgICAgX3NldFZvbHVtZSgpO1xuICAgICAgICAgICAgX3VwZGF0ZVZvbHVtZSgpO1xuXG4gICAgICAgICAgICAvLyBSZXNldCB0aW1lIGRpc3BsYXlcbiAgICAgICAgICAgIF90aW1lVXBkYXRlKCk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgVUlcbiAgICAgICAgICAgIF9jaGVja1BsYXlpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwaSA9IHtcbiAgICAgICAgICAgIGdldE9yaWdpbmFsOiAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBvcmlnaW5hbDsgfSxcbiAgICAgICAgICAgIGdldENvbnRhaW5lcjogICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLmNvbnRhaW5lciB9LFxuICAgICAgICAgICAgZ2V0RW1iZWQ6ICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIuZW1iZWQ7IH0sXG4gICAgICAgICAgICBnZXRNZWRpYTogICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5tZWRpYTsgfSxcbiAgICAgICAgICAgIGdldFR5cGU6ICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLnR5cGU7IH0sXG4gICAgICAgICAgICBnZXREdXJhdGlvbjogICAgICAgIF9nZXREdXJhdGlvbixcbiAgICAgICAgICAgIGdldEN1cnJlbnRUaW1lOiAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lOyB9LFxuICAgICAgICAgICAgZ2V0Vm9sdW1lOiAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIubWVkaWEudm9sdW1lOyB9LFxuICAgICAgICAgICAgaXNNdXRlZDogICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIubWVkaWEubXV0ZWQ7IH0sXG4gICAgICAgICAgICBpc1JlYWR5OiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gX2hhc0NsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5yZWFkeSk7IH0sXG4gICAgICAgICAgICBpc0xvYWRpbmc6ICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gX2hhc0NsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5sb2FkaW5nKTsgfSxcbiAgICAgICAgICAgIGlzUGF1c2VkOiAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLm1lZGlhLnBhdXNlZDsgfSxcbiAgICAgICAgICAgIG9uOiAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXZlbnQsIGNhbGxiYWNrKSB7IF9vbihwbHlyLmNvbnRhaW5lciwgZXZlbnQsIGNhbGxiYWNrKTsgcmV0dXJuIHRoaXM7IH0sXG4gICAgICAgICAgICBwbGF5OiAgICAgICAgICAgICAgIF9wbGF5LFxuICAgICAgICAgICAgcGF1c2U6ICAgICAgICAgICAgICBfcGF1c2UsXG4gICAgICAgICAgICBzdG9wOiAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyBfcGF1c2UoKTsgX3NlZWsoKTsgfSxcbiAgICAgICAgICAgIHJlc3RhcnQ6ICAgICAgICAgICAgX3NlZWssXG4gICAgICAgICAgICByZXdpbmQ6ICAgICAgICAgICAgIF9yZXdpbmQsXG4gICAgICAgICAgICBmb3J3YXJkOiAgICAgICAgICAgIF9mb3J3YXJkLFxuICAgICAgICAgICAgc2VlazogICAgICAgICAgICAgICBfc2VlayxcbiAgICAgICAgICAgIHNvdXJjZTogICAgICAgICAgICAgX3NvdXJjZSxcbiAgICAgICAgICAgIHBvc3RlcjogICAgICAgICAgICAgX3VwZGF0ZVBvc3RlcixcbiAgICAgICAgICAgIHNldFZvbHVtZTogICAgICAgICAgX3NldFZvbHVtZSxcbiAgICAgICAgICAgIHRvZ2dsZVBsYXk6ICAgICAgICAgX3RvZ2dsZVBsYXksXG4gICAgICAgICAgICB0b2dnbGVNdXRlOiAgICAgICAgIF90b2dnbGVNdXRlLFxuICAgICAgICAgICAgdG9nZ2xlQ2FwdGlvbnM6ICAgICBfdG9nZ2xlQ2FwdGlvbnMsXG4gICAgICAgICAgICB0b2dnbGVGdWxsc2NyZWVuOiAgIF90b2dnbGVGdWxsc2NyZWVuLFxuICAgICAgICAgICAgdG9nZ2xlQ29udHJvbHM6ICAgICBfdG9nZ2xlQ29udHJvbHMsXG4gICAgICAgICAgICBpc0Z1bGxzY3JlZW46ICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5pc0Z1bGxzY3JlZW4gfHwgZmFsc2U7IH0sXG4gICAgICAgICAgICBzdXBwb3J0OiAgICAgICAgICAgIGZ1bmN0aW9uKG1pbWVUeXBlKSB7IHJldHVybiBfc3VwcG9ydE1pbWUocGx5ciwgbWltZVR5cGUpOyB9LFxuICAgICAgICAgICAgZGVzdHJveTogICAgICAgICAgICBfZGVzdHJveVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEV2ZXJ5dGhpbmcgZG9uZVxuICAgICAgICBmdW5jdGlvbiBfcmVhZHkoKSB7XG4gICAgICAgICAgICAvLyBSZWFkeSBldmVudCBhdCBlbmQgb2YgZXhlY3V0aW9uIHN0YWNrXG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdyZWFkeScpO1xuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgICAgIC8vIFNldCBjbGFzcyBob29rIG9uIG1lZGlhIGVsZW1lbnRcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLm1lZGlhLCBkZWZhdWx0cy5jbGFzc2VzLnNldHVwLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gU2V0IGNvbnRhaW5lciBjbGFzcyBmb3IgcmVhZHlcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMucmVhZHksIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBTdG9yZSBhIHJlZmVybmNlIHRvIGluc3RhbmNlXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnBseXIgPSBhcGk7XG5cbiAgICAgICAgICAgIC8vIEF1dG9wbGF5XG4gICAgICAgICAgICBpZiAoY29uZmlnLmF1dG9wbGF5KSB7XG4gICAgICAgICAgICAgICAgX3BsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemUgaW5zdGFuY2VcbiAgICAgICAgX2luaXQoKTtcblxuICAgICAgICAvLyBJZiBpbml0IGZhaWxlZCwgcmV0dXJuIG51bGxcbiAgICAgICAgaWYgKCFwbHlyLmluaXQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFwaTtcbiAgICB9XG5cbiAgICAvLyBMb2FkIGEgc3ByaXRlXG4gICAgZnVuY3Rpb24gbG9hZFNwcml0ZSh1cmwsIGlkKSB7XG4gICAgICAgIHZhciB4ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgLy8gSWYgdGhlIGlkIGlzIHNldCBhbmQgc3ByaXRlIGV4aXN0cywgYmFpbFxuICAgICAgICBpZiAoX2lzLnN0cmluZyhpZCkgJiYgX2lzLmh0bWxFbGVtZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyMnICsgaWQpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIHBsYWNlaG9sZGVyICh0byBwcmV2ZW50IGxvYWRpbmcgdHdpY2UpXG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgJycpO1xuICAgICAgICBpZiAoX2lzLnN0cmluZyhpZCkpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgZG9jdW1lbnQuYm9keS5jaGlsZE5vZGVzWzBdKTtcblxuICAgICAgICAvLyBDaGVjayBmb3IgQ09SUyBzdXBwb3J0XG4gICAgICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4KSB7XG4gICAgICAgICAgICB4Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmplY3QgaGlkZGVuIGRpdiB3aXRoIHNwcml0ZSBvbiBsb2FkXG4gICAgICAgIHgub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0geC5yZXNwb25zZVRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICB4LnNlbmQoKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3Igc3VwcG9ydFxuICAgIGZ1bmN0aW9uIHN1cHBvcnRlZCh0eXBlKSB7XG4gICAgICAgIHZhciBicm93c2VyICAgICA9IF9icm93c2VyU25pZmYoKSxcbiAgICAgICAgICAgIGlzT2xkSUUgICAgID0gKGJyb3dzZXIuaXNJRSAmJiBicm93c2VyLnZlcnNpb24gPD0gOSksXG4gICAgICAgICAgICBpc0lvcyAgICAgICA9IGJyb3dzZXIuaXNJb3MsXG4gICAgICAgICAgICBpc0lwaG9uZSAgICA9IC9pUGhvbmV8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXG4gICAgICAgICAgICBhdWRpbyAgICAgICA9ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKS5jYW5QbGF5VHlwZSxcbiAgICAgICAgICAgIHZpZGVvICAgICAgID0gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpLmNhblBsYXlUeXBlLFxuICAgICAgICAgICAgYmFzaWMsIGZ1bGw7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAgICAgICAgYmFzaWMgPSB2aWRlbztcbiAgICAgICAgICAgICAgICBmdWxsICA9IChiYXNpYyAmJiAoIWlzT2xkSUUgJiYgIWlzSXBob25lKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgICAgICAgICBiYXNpYyA9IGF1ZGlvO1xuICAgICAgICAgICAgICAgIGZ1bGwgID0gKGJhc2ljICYmICFpc09sZElFKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICBiYXNpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZnVsbCAgPSAoIWlzT2xkSUUgJiYgIWlzSW9zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBiYXNpYyA9IChhdWRpbyAmJiB2aWRlbyk7XG4gICAgICAgICAgICAgICAgZnVsbCAgPSAoYmFzaWMgJiYgIWlzT2xkSUUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2ljOiAgYmFzaWMsXG4gICAgICAgICAgICBmdWxsOiAgIGZ1bGxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBTZXR1cCBmdW5jdGlvblxuICAgIGZ1bmN0aW9uIHNldHVwKHRhcmdldHMsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBwbGF5ZXJzXG4gICAgICAgIHZhciBwbGF5ZXJzICAgICA9IFtdLFxuICAgICAgICAgICAgaW5zdGFuY2VzICAgPSBbXSxcbiAgICAgICAgICAgIHNlbGVjdG9yICAgID0gW2RlZmF1bHRzLnNlbGVjdG9ycy5odG1sNSwgZGVmYXVsdHMuc2VsZWN0b3JzLmVtYmVkXS5qb2luKCcsJyk7XG5cbiAgICAgICAgLy8gU2VsZWN0IHRoZSBlbGVtZW50c1xuICAgICAgICBpZiAoX2lzLnN0cmluZyh0YXJnZXRzKSkge1xuICAgICAgICAgICAgLy8gU3RyaW5nIHNlbGVjdG9yIHBhc3NlZFxuICAgICAgICAgICAgdGFyZ2V0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGFyZ2V0cyk7XG4gICAgICAgIH0gIGVsc2UgaWYgKF9pcy5odG1sRWxlbWVudCh0YXJnZXRzKSkge1xuICAgICAgICAgICAgLy8gU2luZ2xlIEhUTUxFbGVtZW50IHBhc3NlZFxuICAgICAgICAgICAgdGFyZ2V0cyA9IFt0YXJnZXRzXTtcbiAgICAgICAgfSAgZWxzZSBpZiAoIV9pcy5ub2RlTGlzdCh0YXJnZXRzKSAmJiAhX2lzLmFycmF5KHRhcmdldHMpICYmICFfaXMuc3RyaW5nKHRhcmdldHMpKSAge1xuICAgICAgICAgICAgLy8gTm8gc2VsZWN0b3IgcGFzc2VkLCBwb3NzaWJseSBvcHRpb25zIGFzIGZpcnN0IGFyZ3VtZW50XG4gICAgICAgICAgICAvLyBJZiBvcHRpb25zIGFyZSB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKG9wdGlvbnMpICYmIF9pcy5vYmplY3QodGFyZ2V0cykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdGFyZ2V0cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIGRlZmF1bHQgc2VsZWN0b3JcbiAgICAgICAgICAgIHRhcmdldHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgTm9kZUxpc3QgdG8gYXJyYXlcbiAgICAgICAgaWYgKF9pcy5ub2RlTGlzdCh0YXJnZXRzKSkge1xuICAgICAgICAgICAgdGFyZ2V0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRhcmdldHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmFpbCBpZiBkaXNhYmxlZCBvciBubyBiYXNpYyBzdXBwb3J0XG4gICAgICAgIC8vIFlvdSBtYXkgd2FudCB0byBkaXNhYmxlIGNlcnRhaW4gVUFzIGV0Y1xuICAgICAgICBpZiAoIXN1cHBvcnRlZCgpLmJhc2ljIHx8ICF0YXJnZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHRvIGNvbnRhaW5lciBsaXN0XG4gICAgICAgIGZ1bmN0aW9uIGFkZCh0YXJnZXQsIG1lZGlhKSB7XG4gICAgICAgICAgICBpZiAoIV9oYXNDbGFzcyhtZWRpYSwgZGVmYXVsdHMuY2xhc3Nlcy5ob29rKSkge1xuICAgICAgICAgICAgICAgIHBsYXllcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFsd2F5cyB3cmFwIGluIGEgPGRpdj4gZm9yIHN0eWxpbmdcbiAgICAgICAgICAgICAgICAgICAgLy9jb250YWluZXI6ICBfd3JhcChtZWRpYSwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpLFxuICAgICAgICAgICAgICAgICAgICAvLyBDb3VsZCBiZSBhIGNvbnRhaW5lciBvciB0aGUgbWVkaWEgaXRzZWxmXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgdGhlIDx2aWRlbz4sIDxhdWRpbz4gb3IgPGRpdj4gKFlvdVR1YmUvVmltZW8pXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhOiAgICAgIG1lZGlhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgdGFyZ2V0cyBoYXZlIG11bHRpcGxlIG1lZGlhIGVsZW1lbnRzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHRhcmdldHNbaV07XG5cbiAgICAgICAgICAgIC8vIEdldCBjaGlsZHJlblxuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdGFyZ2V0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG1vcmUgdGhhbiBvbmUgbWVkaWEgZWxlbWVudCBjaGlsZCwgd3JhcCB0aGVtXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBjaGlsZHJlbi5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgICAgICBhZGQodGFyZ2V0LCBjaGlsZHJlblt4XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChfbWF0Y2hlcyh0YXJnZXQsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICAgIC8vIFRhcmdldCBpcyBtZWRpYSBlbGVtZW50XG4gICAgICAgICAgICAgICAgYWRkKHRhcmdldCwgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIHBsYXllciBpbnN0YW5jZSBmb3IgZWFjaCBlbGVtZW50XG4gICAgICAgIHBsYXllcnMuZm9yRWFjaChmdW5jdGlvbihwbGF5ZXIpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ICAgICA9IHBsYXllci50YXJnZXQsXG4gICAgICAgICAgICAgICAgbWVkaWEgICAgICAgPSBwbGF5ZXIubWVkaWEsXG4gICAgICAgICAgICAgICAgbWF0Y2ggICAgICAgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gVGhlIHRhcmdldCBlbGVtZW50IGNhbiBhbHNvIGJlIHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICAgICAgICBpZiAobWVkaWEgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldHVwIGEgcGxheWVyIGluc3RhbmNlIGFuZCBhZGQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIENyZWF0ZSBpbnN0YW5jZS1zcGVjaWZpYyBjb25maWdcbiAgICAgICAgICAgIHZhciBkYXRhID0ge307XG5cbiAgICAgICAgICAgIC8vIFRyeSBwYXJzaW5nIGRhdGEgYXR0cmlidXRlIGNvbmZpZ1xuICAgICAgICAgICAgdHJ5IHsgZGF0YSA9IEpTT04ucGFyc2UoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGx5cicpKTsgfVxuICAgICAgICAgICAgY2F0Y2goZSkgeyB9XG5cbiAgICAgICAgICAgIHZhciBjb25maWcgPSBfZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucywgZGF0YSk7XG5cbiAgICAgICAgICAgIC8vIEJhaWwgaWYgbm90IGVuYWJsZWRcbiAgICAgICAgICAgIGlmICghY29uZmlnLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ3JlYXRlIG5ldyBpbnN0YW5jZVxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IFBseXIobWVkaWEsIGNvbmZpZyk7XG5cbiAgICAgICAgICAgIC8vIEdvIHRvIG5leHQgaWYgc2V0dXAgZmFpbGVkXG4gICAgICAgICAgICBpZiAoIV9pcy5vYmplY3QoaW5zdGFuY2UpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIGV2ZW50cyBpZiBkZWJ1Z2dpbmdcbiAgICAgICAgICAgIGlmIChjb25maWcuZGVidWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gY29uZmlnLmV2ZW50cy5jb25jYXQoWydzZXR1cCcsICdzdGF0ZWNoYW5nZScsICdlbnRlcmZ1bGxzY3JlZW4nLCAnZXhpdGZ1bGxzY3JlZW4nLCAnY2FwdGlvbnNlbmFibGVkJywgJ2NhcHRpb25zZGlzYWJsZWQnXSk7XG5cbiAgICAgICAgICAgICAgICBfb24oaW5zdGFuY2UuZ2V0Q29udGFpbmVyKCksIGV2ZW50cy5qb2luKCcgJyksIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFtjb25maWcubG9nUHJlZml4LCAnZXZlbnQ6JywgZXZlbnQudHlwZV0uam9pbignICcpLCBldmVudC5kZXRhaWwucGx5cik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgICAgICBfZXZlbnQoaW5zdGFuY2UuZ2V0Q29udGFpbmVyKCksICdzZXR1cCcsIHRydWUsIHtcbiAgICAgICAgICAgICAgICBwbHlyOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEFkZCB0byByZXR1cm4gYXJyYXkgZXZlbiBpZiBpdCdzIGFscmVhZHkgc2V0dXBcbiAgICAgICAgICAgIGluc3RhbmNlcy5wdXNoKGluc3RhbmNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlcztcbiAgICB9XG5cbiAgICAvLyBHZXQgYWxsIGluc3RhbmNlcyB3aXRoaW4gYSBwcm92aWRlZCBjb250YWluZXJcbiAgICBmdW5jdGlvbiBnZXQoY29udGFpbmVyKSB7XG4gICAgICAgIGlmIChfaXMuc3RyaW5nKGNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgIC8vIEdldCBzZWxlY3RvciBpZiBzdHJpbmcgcGFzc2VkXG4gICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSBpZiAoX2lzLnVuZGVmaW5lZChjb250YWluZXIpKSB7XG4gICAgICAgICAgICAvLyBVc2UgYm9keSBieSBkZWZhdWx0IHRvIGdldCBhbGwgb24gcGFnZVxuICAgICAgICAgICAgY29udGFpbmVyID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBIVE1MIGVsZW1lbnRcbiAgICAgICAgaWYgKF9pcy5odG1sRWxlbWVudChjb250YWluZXIpKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLicgKyBkZWZhdWx0cy5jbGFzc2VzLnNldHVwKSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZXMgPSBbXTtcblxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfaXMub2JqZWN0KGVsZW1lbnQucGx5cikpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzLnB1c2goZWxlbWVudC5wbHlyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzZXR1cDogICAgICBzZXR1cCxcbiAgICAgICAgc3VwcG9ydGVkOiAgc3VwcG9ydGVkLFxuICAgICAgICBsb2FkU3ByaXRlOiBsb2FkU3ByaXRlLFxuICAgICAgICBnZXQ6ICAgICAgICBnZXRcbiAgICB9O1xufSkpO1xuXG4vLyBDdXN0b20gZXZlbnQgcG9seWZpbGxcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudC9DdXN0b21FdmVudFxuKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgICBwYXJhbXMgPSBwYXJhbXMgfHwgeyBidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkIH07XG4gICAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgICAgcmV0dXJuIGV2dDtcbiAgICB9XG5cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuXG4gICAgd2luZG93LkN1c3RvbUV2ZW50ID0gQ3VzdG9tRXZlbnQ7XG59KSgpO1xuIiwiLypcbiAgICAgXyBfICAgICAgXyAgICAgICBfXG4gX19ffCAoXykgX19ffCB8IF9fICAoXylfX19cbi8gX198IHwgfC8gX198IHwvIC8gIHwgLyBfX3xcblxcX18gXFwgfCB8IChfX3wgICA8IF8gfCBcXF9fIFxcXG58X19fL198X3xcXF9fX3xffFxcXyhfKS8gfF9fXy9cbiAgICAgICAgICAgICAgICAgICB8X18vXG5cbiBWZXJzaW9uOiAxLjYuMFxuICBBdXRob3I6IEtlbiBXaGVlbGVyXG4gV2Vic2l0ZTogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvXG4gICAgRG9jczogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvL3NsaWNrXG4gICAgUmVwbzogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGlja1xuICBJc3N1ZXM6IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2svaXNzdWVzXG5cbiAqL1xuLyogZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQsIGRlZmluZSwgalF1ZXJ5LCBzZXRJbnRlcnZhbCwgY2xlYXJJbnRlcnZhbCAqL1xuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxuXG59KGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFNsaWNrID0gd2luZG93LlNsaWNrIHx8IHt9O1xuXG4gICAgU2xpY2sgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGluc3RhbmNlVWlkID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBTbGljayhlbGVtZW50LCBzZXR0aW5ncykge1xuXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMsIGRhdGFTZXR0aW5ncztcblxuICAgICAgICAgICAgXy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhcHBlbmRBcnJvd3M6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXBwZW5kRG90czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgYXNOYXZGb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJldkFycm93OiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIGNsYXNzPVwic2xpY2stcHJldlwiIGFyaWEtbGFiZWw9XCJQcmV2aW91c1wiIHRhYmluZGV4PVwiMFwiIHJvbGU9XCJidXR0b25cIj5QcmV2aW91czwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgbmV4dEFycm93OiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdGFiaW5kZXg9XCIwXCIgcm9sZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICc1MHB4JyxcbiAgICAgICAgICAgICAgICBjc3NFYXNlOiAnZWFzZScsXG4gICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nOiBmdW5jdGlvbihzbGlkZXIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcm9sZT1cIm5vbmVcIiByb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCIwXCIgLz4nKS50ZXh0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRvdHNDbGFzczogJ3NsaWNrLWRvdHMnLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgICAgICAgICAgICAgICBmYWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgbGF6eUxvYWQ6ICdvbmRlbWFuZCcsXG4gICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzcG9uZFRvOiAnd2luZG93JyxcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgcnRsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZTogJycsXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxuICAgICAgICAgICAgICAgIHN3aXBlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdG91Y2hNb3ZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoVGhyZXNob2xkOiA1LFxuICAgICAgICAgICAgICAgIHVzZUNTUzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FpdEZvckFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxMDAwXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfLmluaXRpYWxzID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9QbGF5VGltZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbjogMCxcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAxLFxuICAgICAgICAgICAgICAgICRkb3RzOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0SGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgICAgIGxvYWRJbmRleDogMCxcbiAgICAgICAgICAgICAgICAkbmV4dEFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgICRwcmV2QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGVDb3VudDogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkZVdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZVRyYWNrOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZXM6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgc3dpcGVMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgICRsaXN0OiBudWxsLFxuICAgICAgICAgICAgICAgIHRvdWNoT2JqZWN0OiB7fSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5zbGlja2VkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscyk7XG5cbiAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5icmVha3BvaW50cyA9IFtdO1xuICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3MgPSBbXTtcbiAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaGlkZGVuID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IG51bGw7XG4gICAgICAgICAgICBfLnJvd0NvdW50ID0gMTtcbiAgICAgICAgICAgIF8uc2hvdWxkQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgXy4kc2xpZGVyID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAwO1xuICAgICAgICAgICAgXy53aW5kb3dUaW1lciA9IG51bGw7XG5cbiAgICAgICAgICAgIGRhdGFTZXR0aW5ncyA9ICQoZWxlbWVudCkuZGF0YSgnc2xpY2snKSB8fCB7fTtcblxuICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8uZGVmYXVsdHMsIHNldHRpbmdzLCBkYXRhU2V0dGluZ3MpO1xuXG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG5cbiAgICAgICAgICAgIF8ub3JpZ2luYWxTZXR0aW5ncyA9IF8ub3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnbW96SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnbW96dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnd2Via2l0SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYXV0b1BsYXkgPSAkLnByb3h5KF8uYXV0b1BsYXksIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUNsZWFyID0gJC5wcm94eShfLmF1dG9QbGF5Q2xlYXIsIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUl0ZXJhdG9yID0gJC5wcm94eShfLmF1dG9QbGF5SXRlcmF0b3IsIF8pO1xuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSA9ICQucHJveHkoXy5jaGFuZ2VTbGlkZSwgXyk7XG4gICAgICAgICAgICBfLmNsaWNrSGFuZGxlciA9ICQucHJveHkoXy5jbGlja0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZWxlY3RIYW5kbGVyID0gJC5wcm94eShfLnNlbGVjdEhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZXRQb3NpdGlvbiA9ICQucHJveHkoXy5zZXRQb3NpdGlvbiwgXyk7XG4gICAgICAgICAgICBfLnN3aXBlSGFuZGxlciA9ICQucHJveHkoXy5zd2lwZUhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5kcmFnSGFuZGxlciA9ICQucHJveHkoXy5kcmFnSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmtleUhhbmRsZXIgPSAkLnByb3h5KF8ua2V5SGFuZGxlciwgXyk7XG5cbiAgICAgICAgICAgIF8uaW5zdGFuY2VVaWQgPSBpbnN0YW5jZVVpZCsrO1xuXG4gICAgICAgICAgICAvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuICAgICAgICAgICAgLy8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKG11c3Qgc3RhcnQgd2l0aCA8KVxuICAgICAgICAgICAgLy8gRXh0cmFjdGVkIGZyb20galF1ZXJ5IHYxLjExIHNvdXJjZVxuICAgICAgICAgICAgXy5odG1sRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKikkLztcblxuXG4gICAgICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcbiAgICAgICAgICAgIF8uaW5pdCh0cnVlKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNsaWNrO1xuXG4gICAgfSgpKTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hY3RpdmF0ZUFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stYWN0aXZlJykuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAnZmFsc2UnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hZGRTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0FkZCA9IGZ1bmN0aW9uKG1hcmt1cCwgaW5kZXgsIGFkZEJlZm9yZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBhZGRCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA8IDAgfHwgKGluZGV4ID49IF8uc2xpZGVDb3VudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgXy4kc2xpZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEJlZm9yZShfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEFmdGVyKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFkZEJlZm9yZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEgJiYgXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgXy4kbGlzdC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRhcmdldEhlaWdodFxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlID0gZnVuY3Rpb24odGFyZ2V0TGVmdCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgYW5pbVByb3BzID0ge30sXG4gICAgICAgICAgICBfID0gdGhpcztcblxuICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gLXRhcmdldExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50TGVmdCA9IC0oXy5jdXJyZW50TGVmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IF8uY3VycmVudExlZnRcbiAgICAgICAgICAgICAgICB9KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogXy5vcHRpb25zLnNwZWVkLFxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IF8ub3B0aW9ucy5lYXNpbmcsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uKG5vdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gTWF0aC5jZWlsKG5vdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgwcHgsJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gTWF0aC5jZWlsKHRhcmdldExlZnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgwcHgsJyArIHRhcmdldExlZnQgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLm9wdGlvbnMuYXNOYXZGb3I7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAmJiBhc05hdkZvciAhPT0gbnVsbCApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gJChhc05hdkZvcikubm90KF8uJHNsaWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNOYXZGb3I7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFzTmF2Rm9yID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAhPT0gbnVsbCAmJiB0eXBlb2YgYXNOYXZGb3IgPT09ICdvYmplY3QnICkge1xuICAgICAgICAgICAgYXNOYXZGb3IuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKS5zbGljaygnZ2V0U2xpY2snKTtcbiAgICAgICAgICAgICAgICBpZighdGFyZ2V0LnVuc2xpY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc2xpZGVIYW5kbGVyKGluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb24gPSBmdW5jdGlvbihzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gXy50cmFuc2Zvcm1UeXBlICsgJyAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnb3BhY2l0eSAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheVRpbWVyID0gc2V0SW50ZXJ2YWwoIF8uYXV0b1BsYXlJdGVyYXRvciwgXy5vcHRpb25zLmF1dG9wbGF5U3BlZWQgKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUNsZWFyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmF1dG9QbGF5VGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIGlmICggIV8ucGF1c2VkICYmICFfLmludGVycnVwdGVkICYmICFfLmZvY3Vzc2VkICkge1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8uZGlyZWN0aW9uID09PSAxICYmICggXy5jdXJyZW50U2xpZGUgKyAxICkgPT09ICggXy5zbGlkZUNvdW50IC0gMSApKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbHNlIGlmICggXy5kaXJlY3Rpb24gPT09IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggXy5jdXJyZW50U2xpZGUgLSAxID09PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlVG8gKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgPSAkKF8ub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ID0gJChfLm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcblxuICAgICAgICAgICAgaWYoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucHJlcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkKCBfLiRuZXh0QXJyb3cgKVxuXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZERvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBpLCBkb3Q7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICAgICAgZG90ID0gJCgnPHVsIC8+JykuYWRkQ2xhc3MoXy5vcHRpb25zLmRvdHNDbGFzcyk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPD0gXy5nZXREb3RDb3VudCgpOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBkb3QuYXBwZW5kKCQoJzxsaSAvPicpLmFwcGVuZChfLm9wdGlvbnMuY3VzdG9tUGFnaW5nLmNhbGwodGhpcywgXywgaSkpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kZG90cyA9IGRvdC5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kRG90cyk7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuZmluZCgnbGknKS5maXJzdCgpLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRPdXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbiggXy5vcHRpb25zLnNsaWRlICsgJzpub3QoLnNsaWNrLWNsb25lZCknKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleClcbiAgICAgICAgICAgICAgICAuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJywgJChlbGVtZW50KS5hdHRyKCdzdHlsZScpIHx8ICcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1zbGlkZXInKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrID0gKF8uc2xpZGVDb3VudCA9PT0gMCkgP1xuICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLmFwcGVuZFRvKF8uJHNsaWRlcikgOlxuICAgICAgICAgICAgXy4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICBfLiRsaXN0ID0gXy4kc2xpZGVUcmFjay53cmFwKFxuICAgICAgICAgICAgJzxkaXYgYXJpYS1saXZlPVwicG9saXRlXCIgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpO1xuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcygnb3BhY2l0eScsIDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIpLm5vdCgnW3NyY10nKS5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuXG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcblxuICAgICAgICBfLmJ1aWxkRG90cygpO1xuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuXG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3QuYWRkQ2xhc3MoJ2RyYWdnYWJsZScpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYSwgYiwgYywgbmV3U2xpZGVzLCBudW1PZlNsaWRlcywgb3JpZ2luYWxTbGlkZXMsc2xpZGVzUGVyU2VjdGlvbjtcblxuICAgICAgICBuZXdTbGlkZXMgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVyLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAxKSB7XG5cbiAgICAgICAgICAgIHNsaWRlc1BlclNlY3Rpb24gPSBfLm9wdGlvbnMuc2xpZGVzUGVyUm93ICogXy5vcHRpb25zLnJvd3M7XG4gICAgICAgICAgICBudW1PZlNsaWRlcyA9IE1hdGguY2VpbChcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5sZW5ndGggLyBzbGlkZXNQZXJTZWN0aW9uXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IoYSA9IDA7IGEgPCBudW1PZlNsaWRlczsgYSsrKXtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBmb3IoYiA9IDA7IGIgPCBfLm9wdGlvbnMucm93czsgYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGMgPSAwOyBjIDwgXy5vcHRpb25zLnNsaWRlc1BlclJvdzsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gKGEgKiBzbGlkZXNQZXJTZWN0aW9uICsgKChiICogXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyBjKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld1NsaWRlcy5hcHBlbmRDaGlsZChzbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChuZXdTbGlkZXMpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCc6KDEwMCAvIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmUgPSBmdW5jdGlvbihpbml0aWFsLCBmb3JjZVVwZGF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrcG9pbnQsIHRhcmdldEJyZWFrcG9pbnQsIHJlc3BvbmRUb1dpZHRoLCB0cmlnZ2VyQnJlYWtwb2ludCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2xpZGVyV2lkdGggPSBfLiRzbGlkZXIud2lkdGgoKTtcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgJCh3aW5kb3cpLndpZHRoKCk7XG5cbiAgICAgICAgaWYgKF8ucmVzcG9uZFRvID09PSAnd2luZG93Jykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3NsaWRlcicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gc2xpZGVyV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdtaW4nKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IE1hdGgubWluKHdpbmRvd1dpZHRoLCBzbGlkZXJXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5yZXNwb25zaXZlICYmXG4gICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGggJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBmb3IgKGJyZWFrcG9pbnQgaW4gXy5icmVha3BvaW50cykge1xuICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPCBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPiBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gXy5hY3RpdmVCcmVha3BvaW50IHx8IGZvcmNlVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYnJlYWtwb2ludHMgZHVyaW5nIGFuIGFjdHVhbCBicmVhay4gbm90IG9uIGluaXRpYWxpemUuXG4gICAgICAgICAgICBpZiggIWluaXRpYWwgJiYgdHJpZ2dlckJyZWFrcG9pbnQgIT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdicmVha3BvaW50JywgW18sIHRyaWdnZXJCcmVha3BvaW50XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hhbmdlU2xpZGUgPSBmdW5jdGlvbihldmVudCwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgIGluZGV4T2Zmc2V0LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0O1xuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBhIGxpbmssIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgIGlmKCR0YXJnZXQuaXMoJ2EnKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBub3QgdGhlIDxsaT4gZWxlbWVudCAoaWU6IGEgY2hpbGQpLCBmaW5kIHRoZSA8bGk+LlxuICAgICAgICBpZighJHRhcmdldC5pcygnbGknKSkge1xuICAgICAgICAgICAgJHRhcmdldCA9ICR0YXJnZXQuY2xvc2VzdCgnbGknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuZXZlbk9mZnNldCA9IChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApO1xuICAgICAgICBpbmRleE9mZnNldCA9IHVuZXZlbk9mZnNldCA/IDAgOiAoXy5zbGlkZUNvdW50IC0gXy5jdXJyZW50U2xpZGUpICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5tZXNzYWdlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIGluZGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgKyBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2luZGV4JzpcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5kYXRhLmluZGV4ID09PSAwID8gMCA6XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXggfHwgJHRhcmdldC5pbmRleCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jaGVja05hdmlnYWJsZShpbmRleCksIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgJHRhcmdldC5jaGlsZHJlbigpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBuYXZpZ2FibGVzLCBwcmV2TmF2aWdhYmxlO1xuXG4gICAgICAgIG5hdmlnYWJsZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKTtcbiAgICAgICAgcHJldk5hdmlnYWJsZSA9IDA7XG4gICAgICAgIGlmIChpbmRleCA+IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuIGluIG5hdmlnYWJsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZOYXZpZ2FibGUgPSBuYXZpZ2FibGVzW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgJiYgXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihfLnZpc2liaWxpdHlDaGFuZ2UsIF8udmlzaWJpbGl0eSk7XG5cbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ub3JpZW50YXRpb25DaGFuZ2UpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5yZXNpemUpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub2ZmKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcbiAgICAgICAgJChkb2N1bWVudCkub2ZmKCdyZWFkeS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgb3JpZ2luYWxTbGlkZXM7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAxKSB7XG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlcy5jaGlsZHJlbigpLmNoaWxkcmVuKCk7XG4gICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG9yaWdpbmFsU2xpZGVzKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGlja0hhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5zaG91bGRDbGljayA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihyZWZyZXNoKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICBfLmNsZWFuVXBFdmVudHMoKTtcblxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5kZXRhY2goKTtcblxuICAgICAgICBpZiAoXy4kZG90cykge1xuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKCBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywnJyk7XG5cbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMucHJldkFycm93ICkpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5uZXh0QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoXy4kc2xpZGVzKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKVxuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdpbmFsU3R5bGluZycpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRsaXN0LmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYXBwZW5kKF8uJHNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfLmNsZWFuVXBSb3dzKCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZXInKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgIF8udW5zbGlja2VkID0gdHJ1ZTtcblxuICAgICAgICBpZighcmVmcmVzaCkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2Rlc3Ryb3knLCBbX10pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICcnO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlID0gZnVuY3Rpb24oc2xpZGVJbmRleCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGVPdXQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrRmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChmaWx0ZXIgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuZmlsdGVyKGZpbHRlcikuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mb2N1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJylcbiAgICAgICAgICAgIC5vbignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycsXG4gICAgICAgICAgICAgICAgJyo6bm90KC5zbGljay1hcnJvdyknLCBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHZhciAkc2YgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy5wYXVzZU9uRm9jdXMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZm9jdXNzZWQgPSAkc2YuaXMoJzpmb2N1cycpO1xuICAgICAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldEN1cnJlbnQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tDdXJyZW50U2xpZGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBfLmN1cnJlbnRTbGlkZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0RG90Q291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGJyZWFrUG9pbnQgPSAwO1xuICAgICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICAgIHZhciBwYWdlclF0eSA9IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIGlmKCFfLm9wdGlvbnMuYXNOYXZGb3IpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gMSArIE1hdGguY2VpbCgoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnZXJRdHkgLSAxO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRMZWZ0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQsXG4gICAgICAgICAgICB2ZXJ0aWNhbEhlaWdodCxcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIHRhcmdldFNsaWRlO1xuXG4gICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICB2ZXJ0aWNhbEhlaWdodCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IChfLnNsaWRlV2lkdGggKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKHZlcnRpY2FsSGVpZ2h0ICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA+IF8uc2xpZGVDb3VudCAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogXy5zbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogdmVydGljYWxIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSAtIF8uc2xpZGVXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiBfLnNsaWRlV2lkdGgpICogLTEpICsgXy5zbGlkZU9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoKHNsaWRlSW5kZXggKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMSkgKyB2ZXJ0aWNhbE9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlkZVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAgMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSB0YXJnZXRTbGlkZVswXSA/IHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgKiAtMSA6IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCArPSAoXy4kbGlzdC53aWR0aCgpIC0gdGFyZ2V0U2xpZGUub3V0ZXJXaWR0aCgpKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0TGVmdDtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0T3B0aW9uID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR2V0T3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBfLm9wdGlvbnNbb3B0aW9uXTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2aWdhYmxlSW5kZXhlcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSAwLFxuICAgICAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgICBtYXg7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcbiAgICAgICAgICAgIGNvdW50ZXIgPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgKiAtMTtcbiAgICAgICAgICAgIG1heCA9IF8uc2xpZGVDb3VudCAqIDI7XG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IG1heCkge1xuICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGJyZWFrUG9pbnQpO1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleGVzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGljayA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRTbGlkZUNvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkLCBzd2lwZWRTbGlkZSwgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlID8gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgOiAwO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1zbGlkZScpLmVhY2goZnVuY3Rpb24oaW5kZXgsIHNsaWRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlLm9mZnNldExlZnQgLSBjZW50ZXJPZmZzZXQgKyAoJChzbGlkZSkub3V0ZXJXaWR0aCgpIC8gMikgPiAoXy5zd2lwZUxlZnQgKiAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVkU2xpZGUgPSBzbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQgPSBNYXRoLmFicygkKHN3aXBlZFNsaWRlKS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykgLSBfLmN1cnJlbnRTbGlkZSkgfHwgMTtcblxuICAgICAgICAgICAgcmV0dXJuIHNsaWRlc1RyYXZlcnNlZDtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nb1RvID0gU2xpY2sucHJvdG90eXBlLnNsaWNrR29UbyA9IGZ1bmN0aW9uKHNsaWRlLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgIGluZGV4OiBwYXJzZUludChzbGlkZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZG9udEFuaW1hdGUpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oY3JlYXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCEkKF8uJHNsaWRlcikuaGFzQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJykpIHtcblxuICAgICAgICAgICAgJChfLiRzbGlkZXIpLmFkZENsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuXG4gICAgICAgICAgICBfLmJ1aWxkUm93cygpO1xuICAgICAgICAgICAgXy5idWlsZE91dCgpO1xuICAgICAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICAgICAgXy5zdGFydExvYWQoKTtcbiAgICAgICAgICAgIF8ubG9hZFNsaWRlcigpO1xuICAgICAgICAgICAgXy5pbml0aWFsaXplRXZlbnRzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSh0cnVlKTtcbiAgICAgICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjcmVhdGlvbikge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2luaXQnLCBbX10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLmluaXRBREEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIF8uJHNsaWRlcy5hZGQoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hdHRyKCdyb2xlJywgJ2xpc3Rib3gnKTtcblxuICAgICAgICBfLiRzbGlkZXMubm90KF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgJ3JvbGUnOiAnb3B0aW9uJyxcbiAgICAgICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgaSArICcnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF8uJGRvdHMuYXR0cigncm9sZScsICd0YWJsaXN0JykuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICdwcmVzZW50YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6ICdmYWxzZScsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogJ25hdmlnYXRpb24nICsgXy5pbnN0YW5jZVVpZCArIGkgKyAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBpICsgJydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZpcnN0KCkuYXR0cignYXJpYS1zZWxlY3RlZCcsICd0cnVlJykuZW5kKClcbiAgICAgICAgICAgICAgICAuZmluZCgnYnV0dG9uJykuYXR0cigncm9sZScsICdidXR0b24nKS5lbmQoKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCdkaXYnKS5hdHRyKCdyb2xlJywgJ3Rvb2xiYXInKTtcbiAgICAgICAgfVxuICAgICAgICBfLmFjdGl2YXRlQURBKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBcnJvd0V2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXREb3RFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cykub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCdcbiAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciA9PT0gdHJ1ZSApIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucGF1c2VPbkhvdmVyICkge1xuXG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG5cbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdzdGFydCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnbW92ZSdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbihfLnZpc2liaWxpdHlDaGFuZ2UsICQucHJveHkoXy52aXNpYmlsaXR5LCBfKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ub3JpZW50YXRpb25DaGFuZ2UsIF8pKTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLnJlc2l6ZSwgXykpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub24oJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vbignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG4gICAgICAgICQoZG9jdW1lbnQpLm9uKCdyZWFkeS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRVSSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5zaG93KCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmtleUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgIC8vRG9udCBzbGlkZSBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgZm9ybSBmaWVsZHMgYW5kIGFycm93IGtleXMgYXJlIHByZXNzZWRcbiAgICAgICAgaWYoIWV2ZW50LnRhcmdldC50YWdOYW1lLm1hdGNoKCdURVhUQVJFQXxJTlBVVHxTRUxFQ1QnKSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAnbmV4dCcgOiAgJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAncHJldmlvdXMnIDogJ25leHQnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGxvYWRSYW5nZSwgY2xvbmVSYW5nZSwgcmFuZ2VTdGFydCwgcmFuZ2VFbmQ7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZEltYWdlcyhpbWFnZXNTY29wZSkge1xuXG4gICAgICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIGltYWdlc1Njb3BlKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbGF6eScpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCAxMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmMnLCBpbWFnZVNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAxIH0sIDIwMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFtfLCBpbWFnZSwgaW1hZ2VTb3VyY2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5jdXJyZW50U2xpZGUgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IE1hdGgubWF4KDAsIF8uY3VycmVudFNsaWRlIC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gMiArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpICsgXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5vcHRpb25zLmluZmluaXRlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIF8uY3VycmVudFNsaWRlIDogXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICByYW5nZUVuZCA9IE1hdGguY2VpbChyYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydCA+IDApIHJhbmdlU3RhcnQtLTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbmQgPD0gXy5zbGlkZUNvdW50KSByYW5nZUVuZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZFJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kKTtcbiAgICAgICAgbG9hZEltYWdlcyhsb2FkUmFuZ2UpO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoMCwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZShfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICogLTEpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sb2FkU2xpZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uaW5pdFVJKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ3Byb2dyZXNzaXZlJykge1xuICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubmV4dCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja05leHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBhdXNlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGF1c2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG4gICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGxheSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICBfLm9wdGlvbnMuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucG9zdFNsaWRlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FmdGVyQ2hhbmdlJywgW18sIGluZGV4XSk7XG5cbiAgICAgICAgICAgIF8uYW5pbWF0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1ByZXYgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByb2dyZXNzaXZlTGF6eUxvYWQgPSBmdW5jdGlvbiggdHJ5Q291bnQgKSB7XG5cbiAgICAgICAgdHJ5Q291bnQgPSB0cnlDb3VudCB8fCAxO1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICRpbWdzVG9Mb2FkID0gJCggJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyICksXG4gICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgIGltYWdlU291cmNlLFxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQ7XG5cbiAgICAgICAgaWYgKCAkaW1nc1RvTG9hZC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIGltYWdlID0gJGltZ3NUb0xvYWQuZmlyc3QoKTtcbiAgICAgICAgICAgIGltYWdlU291cmNlID0gaW1hZ2UuYXR0cignZGF0YS1sYXp5Jyk7XG4gICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCAnc3JjJywgaW1hZ2VTb3VyY2UgKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5JylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZGVkJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG4gICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmICggdHJ5Q291bnQgPCAzICkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiB0cnkgdG8gbG9hZCB0aGUgaW1hZ2UgMyB0aW1lcyxcbiAgICAgICAgICAgICAgICAgICAgICogbGVhdmUgYSBzbGlnaHQgZGVsYXkgc28gd2UgZG9uJ3QgZ2V0XG4gICAgICAgICAgICAgICAgICAgICAqIHNlcnZlcnMgYmxvY2tpbmcgdGhlIHJlcXVlc3QuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCggdHJ5Q291bnQgKyAxICk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDUwMCApO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhbGxJbWFnZXNMb2FkZWQnLCBbIF8gXSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oIGluaXRpYWxpemluZyApIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGN1cnJlbnRTbGlkZSwgbGFzdFZpc2libGVJbmRleDtcblxuICAgICAgICBsYXN0VmlzaWJsZUluZGV4ID0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcblxuICAgICAgICAvLyBpbiBub24taW5maW5pdGUgc2xpZGVycywgd2UgZG9uJ3Qgd2FudCB0byBnbyBwYXN0IHRoZVxuICAgICAgICAvLyBsYXN0IHZpc2libGUgaW5kZXguXG4gICAgICAgIGlmKCAhXy5vcHRpb25zLmluZmluaXRlICYmICggXy5jdXJyZW50U2xpZGUgPiBsYXN0VmlzaWJsZUluZGV4ICkpIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gbGFzdFZpc2libGVJbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGxlc3Mgc2xpZGVzIHRoYW4gdG8gc2hvdywgZ28gdG8gc3RhcnQuXG4gICAgICAgIGlmICggXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuXG4gICAgICAgIF8uZGVzdHJveSh0cnVlKTtcblxuICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzLCB7IGN1cnJlbnRTbGlkZTogY3VycmVudFNsaWRlIH0pO1xuXG4gICAgICAgIF8uaW5pdCgpO1xuXG4gICAgICAgIGlmKCAhaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBjdXJyZW50U2xpZGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWdpc3RlckJyZWFrcG9pbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBicmVha3BvaW50LCBjdXJyZW50QnJlYWtwb2ludCwgbCxcbiAgICAgICAgICAgIHJlc3BvbnNpdmVTZXR0aW5ncyA9IF8ub3B0aW9ucy5yZXNwb25zaXZlIHx8IG51bGw7XG5cbiAgICAgICAgaWYgKCAkLnR5cGUocmVzcG9uc2l2ZVNldHRpbmdzKSA9PT0gJ2FycmF5JyAmJiByZXNwb25zaXZlU2V0dGluZ3MubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IF8ub3B0aW9ucy5yZXNwb25kVG8gfHwgJ3dpbmRvdyc7XG5cbiAgICAgICAgICAgIGZvciAoIGJyZWFrcG9pbnQgaW4gcmVzcG9uc2l2ZVNldHRpbmdzICkge1xuXG4gICAgICAgICAgICAgICAgbCA9IF8uYnJlYWtwb2ludHMubGVuZ3RoLTE7XG4gICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uYnJlYWtwb2ludDtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIGFuZCBjdXQgb3V0IGFueSBleGlzdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBvbmVzIHdpdGggdGhlIHNhbWUgYnJlYWtwb2ludCBudW1iZXIsIHdlIGRvbid0IHdhbnQgZHVwZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNwbGljZShsLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbY3VycmVudEJyZWFrcG9pbnRdID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLnNldHRpbmdzO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICggXy5vcHRpb25zLm1vYmlsZUZpcnN0ICkgPyBhLWIgOiBiLWE7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVUcmFja1xuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAmJiBfLmN1cnJlbnRTbGlkZSAhPT0gMCkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG5cbiAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuICAgICAgICBfLmJ1aWxkRG90cygpO1xuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoZmFsc2UsIHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgXy5wYXVzZWQgPSAhXy5vcHRpb25zLmF1dG9wbGF5O1xuICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3JlSW5pdCcsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgIT09IF8ud2luZG93V2lkdGgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfLndpbmRvd0RlbGF5KTtcbiAgICAgICAgICAgIF8ud2luZG93RGVsYXkgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgICAgICAgICBpZiggIV8udW5zbGlja2VkICkgeyBfLnNldFBvc2l0aW9uKCk7IH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVtb3ZlU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tSZW1vdmUgPSBmdW5jdGlvbihpbmRleCwgcmVtb3ZlQmVmb3JlLCByZW1vdmVBbGwpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmVtb3ZlQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IDAgOiBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAtLWluZGV4IDogaW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDwgMSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBfLnNsaWRlQ291bnQgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmIChyZW1vdmVBbGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpbmRleCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0Q1NTID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge30sXG4gICAgICAgICAgICB4LCB5O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcbiAgICAgICAgeSA9IF8ucG9zaXRpb25Qcm9wID09ICd0b3AnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcblxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgJyArIHkgKyAnLCAwcHgpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXREaW1lbnNpb25zID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICgnMHB4ICcgKyBfLm9wdGlvbnMuY2VudGVyUGFkZGluZylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJGxpc3QuaGVpZ2h0KF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IChfLm9wdGlvbnMuY2VudGVyUGFkZGluZyArICcgMHB4JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8ubGlzdFdpZHRoID0gXy4kbGlzdC53aWR0aCgpO1xuICAgICAgICBfLmxpc3RIZWlnaHQgPSBfLiRsaXN0LmhlaWdodCgpO1xuXG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGggLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKChfLnNsaWRlV2lkdGggKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aCg1MDAwICogXy5zbGlkZUNvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmhlaWdodChNYXRoLmNlaWwoKF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVyV2lkdGgodHJ1ZSkgLSBfLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS53aWR0aChfLnNsaWRlV2lkdGggLSBvZmZzZXQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRGYWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLnNsaWRlV2lkdGggKiBpbmRleCkgKiAtMTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5jc3Moe1xuICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmNzcygnaGVpZ2h0JywgdGFyZ2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRPcHRpb24gPVxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlja1NldE9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhY2NlcHRzIGFyZ3VtZW50cyBpbiBmb3JtYXQgb2Y6XG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNpbmdsZSBvcHRpb24ncyB2YWx1ZTpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2V0IG9mIHJlc3BvbnNpdmUgb3B0aW9uczpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCAncmVzcG9uc2l2ZScsIFt7fSwgLi4uXSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciB1cGRhdGluZyBtdWx0aXBsZSB2YWx1ZXMgYXQgb25jZSAobm90IHJlc3BvbnNpdmUpXG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgeyAnb3B0aW9uJzogdmFsdWUsIC4uLiB9LCByZWZyZXNoIClcbiAgICAgICAgICovXG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBsLCBpdGVtLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoID0gZmFsc2UsIHR5cGU7XG5cbiAgICAgICAgaWYoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdvYmplY3QnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHR5cGUgPSAnbXVsdGlwbGUnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdzdHJpbmcnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzJdO1xuXG4gICAgICAgICAgICBpZiAoIGFyZ3VtZW50c1swXSA9PT0gJ3Jlc3BvbnNpdmUnICYmICQudHlwZSggYXJndW1lbnRzWzFdICkgPT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3Jlc3BvbnNpdmUnO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgYXJndW1lbnRzWzFdICE9PSAndW5kZWZpbmVkJyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2luZ2xlJztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHR5cGUgPT09ICdzaW5nbGUnICkge1xuXG4gICAgICAgICAgICBfLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ211bHRpcGxlJyApIHtcblxuICAgICAgICAgICAgJC5lYWNoKCBvcHRpb24gLCBmdW5jdGlvbiggb3B0LCB2YWwgKSB7XG5cbiAgICAgICAgICAgICAgICBfLm9wdGlvbnNbb3B0XSA9IHZhbDtcblxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAncmVzcG9uc2l2ZScgKSB7XG5cbiAgICAgICAgICAgIGZvciAoIGl0ZW0gaW4gdmFsdWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggJC50eXBlKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSApICE9PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlID0gWyB2YWx1ZVtpdGVtXSBdO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsID0gXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSByZXNwb25zaXZlIG9iamVjdCBhbmQgc3BsaWNlIG91dCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCggdmFsdWVbaXRlbV0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHJlZnJlc2ggKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXREaW1lbnNpb25zKCk7XG5cbiAgICAgICAgXy5zZXRIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNldENTUyhfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2V0RmFkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3NldFBvc2l0aW9uJywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UHJvcHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuXG4gICAgICAgIF8ucG9zaXRpb25Qcm9wID0gXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlID8gJ3RvcCcgOiAnbGVmdCc7XG5cbiAgICAgICAgaWYgKF8ucG9zaXRpb25Qcm9wID09PSAndG9wJykge1xuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5XZWJraXRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5tc1RyYW5zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy51c2VDU1MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmZhZGUgKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBfLm9wdGlvbnMuekluZGV4ID09PSAnbnVtYmVyJyApIHtcbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnpJbmRleCA8IDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IF8uZGVmYXVsdHMuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5PVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnT1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW8tdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnT1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ01velRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1vei10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdNb3pUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS5Nb3pQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS53ZWJraXRUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnd2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdtc1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1zLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ21zVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAndHJhbnNpdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgXy50cmFuc2Zvcm1zRW5hYmxlZCA9IF8ub3B0aW9ucy51c2VUcmFuc2Zvcm0gJiYgKF8uYW5pbVR5cGUgIT09IG51bGwgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpO1xuICAgIH07XG5cblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldCwgYWxsU2xpZGVzLCBpbmRleE9mZnNldCwgcmVtYWluZGVyO1xuXG4gICAgICAgIGFsbFNsaWRlcyA9IF8uJHNsaWRlclxuICAgICAgICAgICAgLmZpbmQoJy5zbGljay1zbGlkZScpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jdXJyZW50Jyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gY2VudGVyT2Zmc2V0ICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSAxKSAtIGNlbnRlck9mZnNldCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4IC0gY2VudGVyT2Zmc2V0LCBpbmRleCArIGNlbnRlck9mZnNldCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gY2VudGVyT2Zmc2V0ICsgMSwgaW5kZXhPZmZzZXQgKyBjZW50ZXJPZmZzZXQgKyAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShhbGxTbGlkZXMubGVuZ3RoIC0gMSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gXy5zbGlkZUNvdW50IC0gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5lcShpbmRleClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWNlbnRlcicpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSkge1xuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCwgaW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsbFNsaWRlcy5sZW5ndGggPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICByZW1haW5kZXIgPSBfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIGluZGV4T2Zmc2V0ID0gXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIGluZGV4IDogaW5kZXg7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgJiYgKF8uc2xpZGVDb3VudCAtIGluZGV4KSA8IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gcmVtYWluZGVyKSwgaW5kZXhPZmZzZXQgKyByZW1haW5kZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQsIGluZGV4T2Zmc2V0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdvbmRlbWFuZCcpIHtcbiAgICAgICAgICAgIF8ubGF6eUxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXR1cEluZmluaXRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgc2xpZGVJbmRleCwgaW5maW5pdGVDb3VudDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5jZW50ZXJNb2RlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlICYmIF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBzbGlkZUluZGV4ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gXy5zbGlkZUNvdW50OyBpID4gKF8uc2xpZGVDb3VudCAtXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50KTsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGluZmluaXRlQ291bnQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgJChfLiRzbGlkZXNbc2xpZGVJbmRleF0pLmNsb25lKHRydWUpLmF0dHIoJ2lkJywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIHNsaWRlSW5kZXggKyBfLnNsaWRlQ291bnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oXy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoJ3NsaWNrLWNsb25lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKS5maW5kKCdbaWRdJykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdpZCcsICcnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW50ZXJydXB0ID0gZnVuY3Rpb24oIHRvZ2dsZSApIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICF0b2dnbGUgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRvZ2dsZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2VsZWN0SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHZhciB0YXJnZXRFbGVtZW50ID1cbiAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5pcygnLnNsaWNrLXNsaWRlJykgP1xuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KSA6XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpLnBhcmVudHMoJy5zbGljay1zbGlkZScpO1xuXG4gICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KHRhcmdldEVsZW1lbnQuYXR0cignZGF0YS1zbGljay1pbmRleCcpKTtcblxuICAgICAgICBpZiAoIWluZGV4KSBpbmRleCA9IDA7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKGluZGV4KTtcbiAgICAgICAgICAgIF8uYXNOYXZGb3IoaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLnNsaWRlSGFuZGxlcihpbmRleCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWRlSGFuZGxlciA9IGZ1bmN0aW9uKGluZGV4LCBzeW5jLCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciB0YXJnZXRTbGlkZSwgYW5pbVNsaWRlLCBvbGRTbGlkZSwgc2xpZGVMZWZ0LCB0YXJnZXRMZWZ0ID0gbnVsbCxcbiAgICAgICAgICAgIF8gPSB0aGlzLCBuYXZUYXJnZXQ7XG5cbiAgICAgICAgc3luYyA9IHN5bmMgfHwgZmFsc2U7XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlICYmIF8ub3B0aW9ucy53YWl0Rm9yQW5pbWF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlICYmIF8uY3VycmVudFNsaWRlID09PSBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYXNOYXZGb3IoaW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFyZ2V0U2xpZGUgPSBpbmRleDtcbiAgICAgICAgdGFyZ2V0TGVmdCA9IF8uZ2V0TGVmdCh0YXJnZXRTbGlkZSk7XG4gICAgICAgIHNsaWRlTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy5jdXJyZW50TGVmdCA9IF8uc3dpcGVMZWZ0ID09PSBudWxsID8gc2xpZGVMZWZ0IDogXy5zd2lwZUxlZnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiBfLmdldERvdENvdW50KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIChpbmRleCA8IDAgfHwgaW5kZXggPiAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0U2xpZGUgPCAwKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50IC0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCArIHRhcmdldFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFNsaWRlID49IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlIC0gXy5zbGlkZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGU7XG4gICAgICAgIH1cblxuICAgICAgICBfLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JlZm9yZUNoYW5nZScsIFtfLCBfLmN1cnJlbnRTbGlkZSwgYW5pbVNsaWRlXSk7XG5cbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBhbmltU2xpZGU7XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFzTmF2Rm9yICkge1xuXG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBfLmdldE5hdlRhcmdldCgpO1xuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gbmF2VGFyZ2V0LnNsaWNrKCdnZXRTbGljaycpO1xuXG4gICAgICAgICAgICBpZiAoIG5hdlRhcmdldC5zbGlkZUNvdW50IDw9IG5hdlRhcmdldC5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgICAgICBuYXZUYXJnZXQuc2V0U2xpZGVDbGFzc2VzKF8uY3VycmVudFNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlT3V0KG9sZFNsaWRlKTtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlKGFuaW1TbGlkZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBfLmFuaW1hdGVTbGlkZSh0YXJnZXRMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN0YXJ0TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5oaWRlKCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRGlyZWN0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHhEaXN0LCB5RGlzdCwgciwgc3dpcGVBbmdsZSwgXyA9IHRoaXM7XG5cbiAgICAgICAgeERpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCAtIF8udG91Y2hPYmplY3QuY3VyWDtcbiAgICAgICAgeURpc3QgPSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSAtIF8udG91Y2hPYmplY3QuY3VyWTtcbiAgICAgICAgciA9IE1hdGguYXRhbjIoeURpc3QsIHhEaXN0KTtcblxuICAgICAgICBzd2lwZUFuZ2xlID0gTWF0aC5yb3VuZChyICogMTgwIC8gTWF0aC5QSSk7XG4gICAgICAgIGlmIChzd2lwZUFuZ2xlIDwgMCkge1xuICAgICAgICAgICAgc3dpcGVBbmdsZSA9IDM2MCAtIE1hdGguYWJzKHN3aXBlQW5nbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDQ1KSAmJiAoc3dpcGVBbmdsZSA+PSAwKSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA8PSAzNjApICYmIChzd2lwZUFuZ2xlID49IDMxNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPj0gMTM1KSAmJiAoc3dpcGVBbmdsZSA8PSAyMjUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ3JpZ2h0JyA6ICdsZWZ0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMTM1KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG93bic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAndXAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICd2ZXJ0aWNhbCc7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlRW5kID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZUNvdW50LFxuICAgICAgICAgICAgZGlyZWN0aW9uO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICBfLnNob3VsZENsaWNrID0gKCBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gMTAgKSA/IGZhbHNlIDogdHJ1ZTtcblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuY3VyWCA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPT09IHRydWUgKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZWRnZScsIFtfLCBfLnN3aXBlRGlyZWN0aW9uKCkgXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPj0gXy50b3VjaE9iamVjdC5taW5Td2lwZSApIHtcblxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCBkaXJlY3Rpb24gKSB7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICBjYXNlICdkb3duJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tOYXZpZ2FibGUoIF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCkgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwJzpcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZUNvdW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY2hlY2tOYXZpZ2FibGUoIF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCkgKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKTtcblxuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnREaXJlY3Rpb24gPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcblxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCBkaXJlY3Rpb24gIT0gJ3ZlcnRpY2FsJyApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBzbGlkZUNvdW50ICk7XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzd2lwZScsIFtfLCBkaXJlY3Rpb24gXSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoIF8udG91Y2hPYmplY3Quc3RhcnRYICE9PSBfLnRvdWNoT2JqZWN0LmN1clggKSB7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggXy5jdXJyZW50U2xpZGUgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgoXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkgfHwgKCdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCAmJiBfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IGZhbHNlICYmIGV2ZW50LnR5cGUuaW5kZXhPZignbW91c2UnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgPSBldmVudC5vcmlnaW5hbEV2ZW50ICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgICAgIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGggOiAxO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RXaWR0aCAvIF8ub3B0aW9uc1xuICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0SGVpZ2h0IC8gXy5vcHRpb25zXG4gICAgICAgICAgICAgICAgLnRvdWNoVGhyZXNob2xkO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLmFjdGlvbikge1xuXG4gICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZVN0YXJ0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbW92ZSc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZU1vdmUoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVFbmQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVNb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBlZGdlV2FzSGl0ID0gZmFsc2UsXG4gICAgICAgICAgICBjdXJMZWZ0LCBzd2lwZURpcmVjdGlvbiwgc3dpcGVMZW5ndGgsIHBvc2l0aW9uT2Zmc2V0LCB0b3VjaGVzO1xuXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgPyBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgOiBudWxsO1xuXG4gICAgICAgIGlmICghXy5kcmFnZ2luZyB8fCB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3coXy50b3VjaE9iamVjdC5jdXJYIC0gXy50b3VjaE9iamVjdC5zdGFydFgsIDIpKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChcbiAgICAgICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clkgLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlRGlyZWN0aW9uID0gXy5zd2lwZURpcmVjdGlvbigpO1xuXG4gICAgICAgIGlmIChzd2lwZURpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gMSA6IC0xKSAqIChfLnRvdWNoT2JqZWN0LmN1clggPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA/IDEgOiAtMSk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbk9mZnNldCA9IF8udG91Y2hPYmplY3QuY3VyWSA+IF8udG91Y2hPYmplY3Quc3RhcnRZID8gMSA6IC0xO1xuICAgICAgICB9XG5cblxuICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGg7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmICgoXy5jdXJyZW50U2xpZGUgPT09IDAgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdyaWdodCcpIHx8IChfLmN1cnJlbnRTbGlkZSA+PSBfLmdldERvdENvdW50KCkgJiYgc3dpcGVEaXJlY3Rpb24gPT09ICdsZWZ0JykpIHtcbiAgICAgICAgICAgICAgICBzd2lwZUxlbmd0aCA9IF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggKiBfLm9wdGlvbnMuZWRnZUZyaWN0aW9uO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIChzd2lwZUxlbmd0aCAqIChfLiRsaXN0LmhlaWdodCgpIC8gXy5saXN0V2lkdGgpKSAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlIHx8IF8ub3B0aW9ucy50b3VjaE1vdmUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0Q1NTKF8uc3dpcGVMZWZ0KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdG91Y2hlcztcblxuICAgICAgICBfLmludGVycnVwdGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCAhPT0gMSB8fCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRYID0gXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3Quc3RhcnRZID0gXy50b3VjaE9iamVjdC5jdXJZID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlcy5wYWdlWSA6IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IHRydWU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrVW5maWx0ZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJHNsaWRlc0NhY2hlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikucmVtb3ZlKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kcHJldkFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJG5leHRBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgJycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bnNsaWNrID0gZnVuY3Rpb24oZnJvbUJyZWFrcG9pbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCd1bnNsaWNrJywgW18sIGZyb21CcmVha3BvaW50XSk7XG4gICAgICAgIF8uZGVzdHJveSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmXG4gICAgICAgICAgICBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmXG4gICAgICAgICAgICAhXy5vcHRpb25zLmluZmluaXRlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gMSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZURvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgIC5lcShNYXRoLmZsb29yKF8uY3VycmVudFNsaWRlIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBpZiAoIGRvY3VtZW50W18uaGlkZGVuXSApIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgICQuZm4uc2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgb3B0ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsID0gXy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcmV0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0ID09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIF9baV0uc2xpY2sgPSBuZXcgU2xpY2soX1tpXSwgb3B0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXQgPSBfW2ldLnNsaWNrW29wdF0uYXBwbHkoX1tpXS5zbGljaywgYXJncyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPSAndW5kZWZpbmVkJykgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXztcbiAgICB9O1xuXG59KSk7XG4iLCJcbiQod2luZG93KS5iaW5kKCcgbG9hZCByZXNpemUgb3JpZW50YXRpb25DaGFuZ2UgJywgZnVuY3Rpb24gKCkge1xuICAgdmFyIGZvb3RlciA9ICQoXCIjZm9vdGVyLWNvbnRhaW5lclwiKTtcbiAgIHZhciBwb3MgPSBmb290ZXIucG9zaXRpb24oKTtcbiAgIHZhciBoZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG4gICBoZWlnaHQgPSBoZWlnaHQgLSBwb3MudG9wO1xuICAgaGVpZ2h0ID0gaGVpZ2h0IC0gZm9vdGVyLmhlaWdodCgpIC0xO1xuXG4gICBmdW5jdGlvbiBzdGlja3lGb290ZXIoKSB7XG4gICAgIGZvb3Rlci5jc3Moe1xuICAgICAgICAgJ21hcmdpbi10b3AnOiBoZWlnaHQgKyAncHgnXG4gICAgIH0pO1xuICAgfVxuXG4gICBpZiAoaGVpZ2h0ID4gMCkge1xuICAgICBzdGlja3lGb290ZXIoKTtcbiAgIH1cbn0pO1xuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiB3aWF3VW5pdmVyc2FsQWpheC5qcyB2MS4wXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuIWZ1bmN0aW9uKCQpIHtcblxuXHQkKGZ1bmN0aW9uKCl7XG5cblxuXHRcdC8vIENsaWNrIHRoZSBidXR0b24hXG5cdFx0JChcIi5hcmNoaXZlX19sb2FkLW1vcmUgYVwiKS5jbGljayggZnVuY3Rpb24oKXtcblxuXHRcdFx0Ly8gYWxlcnQoJ3NheSB3aGFhYT8nKTtcblxuXHRcdFx0dmFyIHVybCA9ICQodGhpcykuYXR0cignaHJlZicpLFxuXHRcdFx0XHRzcGxpdF91cmwgPSB1cmwuc2xpY2UoMCwgLTEpLnNwbGl0KCcvJyksXG5cdFx0XHRcdHBhZ2VfbnVtID0gc3BsaXRfdXJsWyBzcGxpdF91cmwubGVuZ3RoLTFdLFxuXHRcdFx0XHR2YXJzID0ge307XG5cblxuXHRcdFx0aWYgKCBpc05hTihwYWdlX251bSkgKXtcblx0XHRcdFx0cGFnZV9udW0gPSBzcGxpdF91cmxbIHNwbGl0X3VybC5sZW5ndGgtMl07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB1cCB0aGUgY29ycmVjdCB2YXJzXG5cdFx0XHRpZiAoICQoXCIjd2lhd190YXhvbm9teVwiKS5sZW5ndGggPj0gMSkge1xuXHRcdFx0XHR2YXJzLnRheG9ub215IFx0PSAkKFwiI3dpYXdfdGF4b25vbXlcIikudmFsKCk7XG5cdFx0XHRcdHZhcnMudGVybV9pZCBcdD0gJChcIiN3aWF3X3Rlcm1faWRcIikudmFsKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXJzLnBvc3RfdHlwZSBcdD0gJChcIiN3aWF3X3Bvc3RfdHlwZVwiKS52YWwoKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc29sZS5sb2coc3BsaXRfdXJsKTtcblx0XHRcdGNvbnNvbGUubG9nKHZhcnMpO1xuXHRcdFx0Y29uc29sZS5sb2cocGFnZV9udW0pO1xuXG5cdFx0XHR3aWF3X2dldF9tb3JlX3Bvc3RzKCBwYWdlX251bSwgdmFycyk7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9KTtcblxuXG5cblx0XHQvLyBHZXQgUG9zdHMgQUpBWCBDYWxsXG5cdFx0ZnVuY3Rpb24gd2lhd19nZXRfbW9yZV9wb3N0cyggcGFnZV9udW0sIHZhcnMgKSB7XG5cblx0XHRcdC8vIFNob3cgdGhlIGFqYXggbG9hZGVyXG5cdFx0XHQkKFwiLmFqYXgtc3Bpbm5lclwiKS5zaG93KCk7XG5cblx0XHRcdC8vIG1ha2Ugc3VyZSBwYWdlX251bSBpcyBiZWluZyByZWFkIGFzIGFuIElOVFxuXHRcdFx0dmFyIHBhZ2VfbnVtID0gcGFyc2VJbnQoIHBhZ2VfbnVtKTtcblxuXHRcdFx0Ly8gRG8gdGhlIEFKQVggY2FsbFxuXHRcdFx0JC5hamF4KHtcblx0XHRcdFx0dXJsOiBqc192YXJzLmFqYXh1cmwsXG5cdFx0XHRcdHR5cGU6ICdwb3N0Jyxcblx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdGFjdGlvbjogJ2FyY2hpdmVfbG9hZF9tb3JlJyxcblx0XHRcdFx0XHRwYWdlOiBcdHBhZ2VfbnVtLFxuXHRcdFx0XHRcdGRhdGE6XHR2YXJzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbihleGNlcHRpb24pe1xuXHRcdFx0XHRcdGFsZXJ0KCdFeGVwdGlvbjonK2V4Y2VwdGlvbik7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCBodG1sICkge1xuXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coaHRtbCk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSB3ZXJlIGFueSByZXN1bHRzXG5cdFx0XHRcdFx0aWYgKCBodG1sICE9ICcnKSB7XG5cblxuXHRcdFx0XHRcdFx0Ly8gVXBkYXRlIHRoZSBuZXh0IHBhZ2UgVVJMXG5cdFx0XHRcdFx0XHR2YXIgYnRuIFx0XHRcdFx0XHQ9ICQoXCIuYXJjaGl2ZV9fbG9hZC1tb3JlIGFcIiksXG5cdFx0XHRcdFx0XHRcdGJ0bl91cmwgXHRcdFx0XHQ9IGJ0bi5hdHRyKCdocmVmJyk7XG5cblx0XHRcdFx0XHRcdGJ0bl91cmwgXHRcdFx0XHRcdD0gYnRuX3VybC5zbGljZSgwLCAtMSkuc3BsaXQoJy8nKSxcblx0XHRcdFx0XHRcdGJ0bl91cmxbIGJ0bl91cmwubGVuZ3RoLTFdIFx0PSAocGFnZV9udW0gKyAxKSxcblx0XHRcdFx0XHRcdGJ0bl91cmwgXHRcdFx0XHRcdD0gYnRuX3VybC5qb2luKCcvJykgKyAnLyc7XG5cblx0XHRcdFx0XHRcdGJ0bi5hdHRyKCdocmVmJywgYnRuX3VybCk7XG5cblxuXHRcdFx0XHRcdFx0Ly8gSW5zZXJ0IHRoZSBIVE1MXG5cdFx0XHRcdFx0XHQkKFwiI2FqYXgtYmVmb3JlLW1lXCIpLmJlZm9yZSggaHRtbCk7XG5cblx0XHRcdFx0XHRcdFF1aWNrTG9va0luaXQoKTsgLy8gYWRkZWQgdGhpcyBzbyB0aGF0IHRoZSBxdWlja2xvb2sgd29ya3MgYWZ0ZXIgbG9hZCBtb3JlLiBTZWUgYXBwLmpzIGZ1bmN0aW9uIGNhbGxlZCBRdWlja0xvb2tJbml0XG5cblx0XHRcdFx0XHQvLyBObyByZXN1bHRzXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gc2F5IG5vIHBvc3RzXG5cdFx0XHRcdFx0XHQkKFwiI2FqYXgtYmVmb3JlLW1lXCIpLmJlZm9yZSggJzxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+PHA+Tm8gZnVydGhlciByZXN1bHRzLjwvcD48L2Rpdj4nKTtcblxuXHRcdFx0XHRcdFx0Ly8gaGlkZSB0aGUgbmV4dCBidXR0b25cblx0XHRcdFx0XHRcdCQoXCIuYXJjaGl2ZV9fbG9hZC1tb3JlXCIpLmhpZGUoKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEhpZGUgdGhlIGFqYXggbG9hZGVyXG5cdFx0XHRcdFx0JChcIi5hamF4LXNwaW5uZXJcIikuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9KTtcblxuXG5cbn0od2luZG93LmpRdWVyeSk7XG4iXX0=
=======
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndoYXQtaW5wdXQuanMiLCJmb3VuZGF0aW9uLmNvcmUuanMiLCJmb3VuZGF0aW9uLnV0aWwuYm94LmpzIiwiZm91bmRhdGlvbi51dGlsLmtleWJvYXJkLmpzIiwiZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnkuanMiLCJmb3VuZGF0aW9uLnV0aWwubW90aW9uLmpzIiwiZm91bmRhdGlvbi51dGlsLm5lc3QuanMiLCJmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlci5qcyIsImZvdW5kYXRpb24udXRpbC50b3VjaC5qcyIsImZvdW5kYXRpb24udXRpbC50cmlnZ2Vycy5qcyIsImZvdW5kYXRpb24uYWJpZGUuanMiLCJmb3VuZGF0aW9uLmFjY29yZGlvbi5qcyIsImZvdW5kYXRpb24uYWNjb3JkaW9uTWVudS5qcyIsImZvdW5kYXRpb24uZHJpbGxkb3duLmpzIiwiZm91bmRhdGlvbi5kcm9wZG93bi5qcyIsImZvdW5kYXRpb24uZHJvcGRvd25NZW51LmpzIiwiZm91bmRhdGlvbi5lcXVhbGl6ZXIuanMiLCJmb3VuZGF0aW9uLmludGVyY2hhbmdlLmpzIiwiZm91bmRhdGlvbi5tYWdlbGxhbi5qcyIsImZvdW5kYXRpb24ub2ZmY2FudmFzLmpzIiwiZm91bmRhdGlvbi5vcmJpdC5qcyIsImZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnUuanMiLCJmb3VuZGF0aW9uLnJlc3BvbnNpdmVUb2dnbGUuanMiLCJmb3VuZGF0aW9uLnJldmVhbC5qcyIsImZvdW5kYXRpb24uc2xpZGVyLmpzIiwiZm91bmRhdGlvbi5zdGlja3kuanMiLCJmb3VuZGF0aW9uLnRhYnMuanMiLCJmb3VuZGF0aW9uLnRvZ2dsZXIuanMiLCJmb3VuZGF0aW9uLnRvb2x0aXAuanMiLCJtb3Rpb24tdWkuanMiLCJmbGV4LXZpZGVvLmpzIiwiaW5pdC1mb3VuZGF0aW9uLmpzIiwiam95cmlkZS1kZW1vLmpzIiwianF1ZXJ5Lm1hZ25pZmljLXBvcHVwLmpzIiwib2ZmQ2FudmFzLmpzIiwicGhvdG9zd2lwZS11aS1kZWZhdWx0LmpzIiwicGhvdG9zd2lwZS5qcyIsInBseXIuanMiLCJzbGljay5qcyIsInN0aWNreWZvb3Rlci5qcyIsIndpYXdVbml2ZXJzYWxBamF4LmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsIndoYXRJbnB1dCIsImFjdGl2ZUtleXMiLCJib2R5IiwiYnVmZmVyIiwiY3VycmVudElucHV0Iiwibm9uVHlwaW5nSW5wdXRzIiwibW91c2VXaGVlbCIsImRldGVjdFdoZWVsIiwiaWdub3JlTWFwIiwiaW5wdXRNYXAiLCJpbnB1dFR5cGVzIiwia2V5TWFwIiwicG9pbnRlck1hcCIsInRpbWVyIiwiZXZlbnRCdWZmZXIiLCJjbGVhclRpbWVyIiwic2V0SW5wdXQiLCJldmVudCIsInNldFRpbWVvdXQiLCJidWZmZXJlZEV2ZW50IiwidW5CdWZmZXJlZEV2ZW50IiwiY2xlYXJUaW1lb3V0IiwiZXZlbnRLZXkiLCJrZXkiLCJ2YWx1ZSIsInR5cGUiLCJwb2ludGVyVHlwZSIsImV2ZW50VGFyZ2V0IiwidGFyZ2V0IiwiZXZlbnRUYXJnZXROb2RlIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImV2ZW50VGFyZ2V0VHlwZSIsImdldEF0dHJpYnV0ZSIsImhhc0F0dHJpYnV0ZSIsImluZGV4T2YiLCJzd2l0Y2hJbnB1dCIsImxvZ0tleXMiLCJzdHJpbmciLCJzZXRBdHRyaWJ1dGUiLCJwdXNoIiwia2V5Q29kZSIsIndoaWNoIiwic3JjRWxlbWVudCIsInVuTG9nS2V5cyIsImFycmF5UG9zIiwic3BsaWNlIiwiYmluZEV2ZW50cyIsImRvY3VtZW50IiwiUG9pbnRlckV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIk1TUG9pbnRlckV2ZW50IiwiY3JlYXRlRWxlbWVudCIsIm9ubW91c2V3aGVlbCIsInVuZGVmaW5lZCIsIkFycmF5IiwicHJvdG90eXBlIiwiYXNrIiwia2V5cyIsInR5cGVzIiwic2V0IiwiJCIsIkZPVU5EQVRJT05fVkVSU0lPTiIsIkZvdW5kYXRpb24iLCJ2ZXJzaW9uIiwiX3BsdWdpbnMiLCJfdXVpZHMiLCJydGwiLCJhdHRyIiwicGx1Z2luIiwibmFtZSIsImNsYXNzTmFtZSIsImZ1bmN0aW9uTmFtZSIsImF0dHJOYW1lIiwiaHlwaGVuYXRlIiwicmVnaXN0ZXJQbHVnaW4iLCJwbHVnaW5OYW1lIiwiY29uc3RydWN0b3IiLCJ1dWlkIiwiR2V0WW9EaWdpdHMiLCIkZWxlbWVudCIsImRhdGEiLCJ0cmlnZ2VyIiwidW5yZWdpc3RlclBsdWdpbiIsInJlbW92ZUF0dHIiLCJyZW1vdmVEYXRhIiwicHJvcCIsInJlSW5pdCIsInBsdWdpbnMiLCJpc0pRIiwiZWFjaCIsIl9pbml0IiwiX3RoaXMiLCJmbnMiLCJwbGdzIiwiZm9yRWFjaCIsInAiLCJmb3VuZGF0aW9uIiwiT2JqZWN0IiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwibGVuZ3RoIiwibmFtZXNwYWNlIiwiTWF0aCIsInJvdW5kIiwicG93IiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsInJlZmxvdyIsImVsZW0iLCJpIiwiJGVsZW0iLCJmaW5kIiwiYWRkQmFjayIsIiRlbCIsIm9wdHMiLCJ3YXJuIiwidGhpbmciLCJzcGxpdCIsImUiLCJvcHQiLCJtYXAiLCJlbCIsInRyaW0iLCJwYXJzZVZhbHVlIiwiZXIiLCJnZXRGbk5hbWUiLCJ0cmFuc2l0aW9uZW5kIiwidHJhbnNpdGlvbnMiLCJlbmQiLCJ0Iiwic3R5bGUiLCJ0cmlnZ2VySGFuZGxlciIsInV0aWwiLCJ0aHJvdHRsZSIsImZ1bmMiLCJkZWxheSIsImNvbnRleHQiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJtZXRob2QiLCIkbWV0YSIsIiRub0pTIiwiYXBwZW5kVG8iLCJoZWFkIiwicmVtb3ZlQ2xhc3MiLCJNZWRpYVF1ZXJ5IiwiY2FsbCIsInBsdWdDbGFzcyIsIlJlZmVyZW5jZUVycm9yIiwiVHlwZUVycm9yIiwiZm4iLCJEYXRlIiwibm93IiwiZ2V0VGltZSIsInZlbmRvcnMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ2cCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImxhc3RUaW1lIiwiY2FsbGJhY2siLCJuZXh0VGltZSIsIm1heCIsInBlcmZvcm1hbmNlIiwic3RhcnQiLCJGdW5jdGlvbiIsImJpbmQiLCJvVGhpcyIsImFBcmdzIiwiZlRvQmluZCIsImZOT1AiLCJmQm91bmQiLCJjb25jYXQiLCJmdW5jTmFtZVJlZ2V4IiwicmVzdWx0cyIsImV4ZWMiLCJzdHIiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJyZXBsYWNlIiwialF1ZXJ5IiwiQm94IiwiSW1Ob3RUb3VjaGluZ1lvdSIsIkdldERpbWVuc2lvbnMiLCJHZXRPZmZzZXRzIiwiZWxlbWVudCIsInBhcmVudCIsImxyT25seSIsInRiT25seSIsImVsZURpbXMiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJwYXJEaW1zIiwib2Zmc2V0IiwiaGVpZ2h0Iiwid2lkdGgiLCJ3aW5kb3dEaW1zIiwiYWxsRGlycyIsIkVycm9yIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhclJlY3QiLCJwYXJlbnROb2RlIiwid2luUmVjdCIsIndpblkiLCJwYWdlWU9mZnNldCIsIndpblgiLCJwYWdlWE9mZnNldCIsInBhcmVudERpbXMiLCJhbmNob3IiLCJwb3NpdGlvbiIsInZPZmZzZXQiLCJoT2Zmc2V0IiwiaXNPdmVyZmxvdyIsIiRlbGVEaW1zIiwiJGFuY2hvckRpbXMiLCJrZXlDb2RlcyIsImNvbW1hbmRzIiwiS2V5Ym9hcmQiLCJnZXRLZXlDb2RlcyIsInBhcnNlS2V5IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidG9VcHBlckNhc2UiLCJzaGlmdEtleSIsImN0cmxLZXkiLCJhbHRLZXkiLCJoYW5kbGVLZXkiLCJjb21wb25lbnQiLCJmdW5jdGlvbnMiLCJjb21tYW5kTGlzdCIsImNtZHMiLCJjb21tYW5kIiwibHRyIiwiZXh0ZW5kIiwicmV0dXJuVmFsdWUiLCJoYW5kbGVkIiwidW5oYW5kbGVkIiwiZmluZEZvY3VzYWJsZSIsImZpbHRlciIsImlzIiwicmVnaXN0ZXIiLCJjb21wb25lbnROYW1lIiwia2NzIiwiayIsImtjIiwiZGVmYXVsdFF1ZXJpZXMiLCJsYW5kc2NhcGUiLCJwb3J0cmFpdCIsInJldGluYSIsInF1ZXJpZXMiLCJjdXJyZW50Iiwic2VsZiIsImV4dHJhY3RlZFN0eWxlcyIsImNzcyIsIm5hbWVkUXVlcmllcyIsInBhcnNlU3R5bGVUb09iamVjdCIsImhhc093blByb3BlcnR5IiwiX2dldEN1cnJlbnRTaXplIiwiX3dhdGNoZXIiLCJhdExlYXN0Iiwic2l6ZSIsInF1ZXJ5IiwiZ2V0IiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJtYXRjaGVkIiwib24iLCJuZXdTaXplIiwiY3VycmVudFNpemUiLCJzdHlsZU1lZGlhIiwibWVkaWEiLCJzY3JpcHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluZm8iLCJpZCIsImluc2VydEJlZm9yZSIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJtYXRjaE1lZGl1bSIsInRleHQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsInRleHRDb250ZW50Iiwic3R5bGVPYmplY3QiLCJyZWR1Y2UiLCJyZXQiLCJwYXJhbSIsInBhcnRzIiwidmFsIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaXNBcnJheSIsImluaXRDbGFzc2VzIiwiYWN0aXZlQ2xhc3NlcyIsIk1vdGlvbiIsImFuaW1hdGVJbiIsImFuaW1hdGlvbiIsImNiIiwiYW5pbWF0ZSIsImFuaW1hdGVPdXQiLCJNb3ZlIiwiZHVyYXRpb24iLCJhbmltIiwicHJvZyIsIm1vdmUiLCJ0cyIsImlzSW4iLCJlcSIsImluaXRDbGFzcyIsImFjdGl2ZUNsYXNzIiwicmVzZXQiLCJhZGRDbGFzcyIsInNob3ciLCJvZmZzZXRXaWR0aCIsIm9uZSIsImZpbmlzaCIsImhpZGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJOZXN0IiwiRmVhdGhlciIsIm1lbnUiLCJpdGVtcyIsInN1Yk1lbnVDbGFzcyIsInN1Ykl0ZW1DbGFzcyIsImhhc1N1YkNsYXNzIiwiJGl0ZW0iLCIkc3ViIiwiY2hpbGRyZW4iLCJCdXJuIiwiVGltZXIiLCJvcHRpb25zIiwibmFtZVNwYWNlIiwicmVtYWluIiwiaXNQYXVzZWQiLCJyZXN0YXJ0IiwiaW5maW5pdGUiLCJwYXVzZSIsIm9uSW1hZ2VzTG9hZGVkIiwiaW1hZ2VzIiwidW5sb2FkZWQiLCJjb21wbGV0ZSIsInNpbmdsZUltYWdlTG9hZGVkIiwibmF0dXJhbFdpZHRoIiwic3BvdFN3aXBlIiwiZW5hYmxlZCIsImRvY3VtZW50RWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwibW92ZVRocmVzaG9sZCIsInRpbWVUaHJlc2hvbGQiLCJzdGFydFBvc1giLCJzdGFydFBvc1kiLCJzdGFydFRpbWUiLCJlbGFwc2VkVGltZSIsImlzTW92aW5nIiwib25Ub3VjaEVuZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvblRvdWNoTW92ZSIsIngiLCJ0b3VjaGVzIiwicGFnZVgiLCJ5IiwicGFnZVkiLCJkeCIsImR5IiwiZGlyIiwiYWJzIiwib25Ub3VjaFN0YXJ0IiwiaW5pdCIsInRlYXJkb3duIiwic3BlY2lhbCIsInN3aXBlIiwic2V0dXAiLCJub29wIiwiYWRkVG91Y2giLCJoYW5kbGVUb3VjaCIsImNoYW5nZWRUb3VjaGVzIiwiZmlyc3QiLCJldmVudFR5cGVzIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwic2ltdWxhdGVkRXZlbnQiLCJNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTXV0YXRpb25PYnNlcnZlciIsInByZWZpeGVzIiwidHJpZ2dlcnMiLCJzdG9wUHJvcGFnYXRpb24iLCJmYWRlT3V0IiwiY2hlY2tMaXN0ZW5lcnMiLCJldmVudHNMaXN0ZW5lciIsInJlc2l6ZUxpc3RlbmVyIiwic2Nyb2xsTGlzdGVuZXIiLCJjbG9zZW1lTGlzdGVuZXIiLCJ5ZXRpQm94ZXMiLCJwbHVnTmFtZXMiLCJsaXN0ZW5lcnMiLCJqb2luIiwib2ZmIiwicGx1Z2luSWQiLCJub3QiLCJkZWJvdW5jZSIsIiRub2RlcyIsIm5vZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24iLCJtdXRhdGlvblJlY29yZHNMaXN0IiwiJHRhcmdldCIsImVsZW1lbnRPYnNlcnZlciIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsInN1YnRyZWUiLCJhdHRyaWJ1dGVGaWx0ZXIiLCJJSGVhcllvdSIsIkFiaWRlIiwiZGVmYXVsdHMiLCIkaW5wdXRzIiwiX2V2ZW50cyIsInJlc2V0Rm9ybSIsInZhbGlkYXRlRm9ybSIsInZhbGlkYXRlT24iLCJ2YWxpZGF0ZUlucHV0IiwibGl2ZVZhbGlkYXRlIiwiX3JlZmxvdyIsInJlcXVpcmVkQ2hlY2siLCJpc0dvb2QiLCJjaGVja2VkIiwiZmluZEZvcm1FcnJvciIsIiRlcnJvciIsInNpYmxpbmdzIiwiZm9ybUVycm9yU2VsZWN0b3IiLCJmaW5kTGFiZWwiLCIkbGFiZWwiLCJjbG9zZXN0IiwiZmluZFJhZGlvTGFiZWxzIiwiJGVscyIsImxhYmVscyIsImFkZEVycm9yQ2xhc3NlcyIsIiRmb3JtRXJyb3IiLCJsYWJlbEVycm9yQ2xhc3MiLCJmb3JtRXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsInJlbW92ZVJhZGlvRXJyb3JDbGFzc2VzIiwiZ3JvdXBOYW1lIiwiJGxhYmVscyIsIiRmb3JtRXJyb3JzIiwicmVtb3ZlRXJyb3JDbGFzc2VzIiwiY2xlYXJSZXF1aXJlIiwidmFsaWRhdGVkIiwiY3VzdG9tVmFsaWRhdG9yIiwidmFsaWRhdG9yIiwiZXF1YWxUbyIsInZhbGlkYXRlUmFkaW8iLCJ2YWxpZGF0ZVRleHQiLCJtYXRjaFZhbGlkYXRpb24iLCJ2YWxpZGF0b3JzIiwiZ29vZFRvR28iLCJtZXNzYWdlIiwiYWNjIiwibm9FcnJvciIsInBhdHRlcm4iLCJpbnB1dFRleHQiLCJ2YWxpZCIsInBhdHRlcm5zIiwiUmVnRXhwIiwiJGdyb3VwIiwicmVxdWlyZWQiLCJjbGVhciIsInYiLCIkZm9ybSIsImRlc3Ryb3kiLCJhbHBoYSIsImFscGhhX251bWVyaWMiLCJpbnRlZ2VyIiwibnVtYmVyIiwiY2FyZCIsImN2diIsImVtYWlsIiwidXJsIiwiZG9tYWluIiwiZGF0ZXRpbWUiLCJkYXRlIiwidGltZSIsImRhdGVJU08iLCJtb250aF9kYXlfeWVhciIsImRheV9tb250aF95ZWFyIiwiY29sb3IiLCJBY2NvcmRpb24iLCIkdGFicyIsImlkeCIsIiRjb250ZW50IiwibGlua0lkIiwiJGluaXRBY3RpdmUiLCJkb3duIiwiJHRhYkNvbnRlbnQiLCJ0b2dnbGUiLCJuZXh0IiwiJGEiLCJmb2N1cyIsIm11bHRpRXhwYW5kIiwicHJldmlvdXMiLCJwcmV2IiwiaGFzQ2xhc3MiLCJ1cCIsImZpcnN0VGltZSIsIiRjdXJyZW50QWN0aXZlIiwic2xpZGVEb3duIiwic2xpZGVTcGVlZCIsIiRhdW50cyIsImFsbG93QWxsQ2xvc2VkIiwic2xpZGVVcCIsInN0b3AiLCJBY2NvcmRpb25NZW51IiwibXVsdGlPcGVuIiwiJG1lbnVMaW5rcyIsInN1YklkIiwiaXNBY3RpdmUiLCJpbml0UGFuZXMiLCIkc3VibWVudSIsIiRlbGVtZW50cyIsIiRwcmV2RWxlbWVudCIsIiRuZXh0RWxlbWVudCIsIm1pbiIsInBhcmVudHMiLCJvcGVuIiwiY2xvc2UiLCJjbG9zZUFsbCIsImhpZGVBbGwiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwYXJlbnRzVW50aWwiLCJhZGQiLCIkbWVudXMiLCJEcmlsbGRvd24iLCIkc3VibWVudUFuY2hvcnMiLCIkc3VibWVudXMiLCIkbWVudUl0ZW1zIiwiX3ByZXBhcmVNZW51IiwiX2tleWJvYXJkRXZlbnRzIiwiJGxpbmsiLCJwYXJlbnRMaW5rIiwiY2xvbmUiLCJwcmVwZW5kVG8iLCJ3cmFwIiwiJG1lbnUiLCIkYmFjayIsInByZXBlbmQiLCJiYWNrQnV0dG9uIiwiX2JhY2siLCIkd3JhcHBlciIsIndyYXBwZXIiLCJfZ2V0TWF4RGltcyIsIl9zaG93IiwiY2xvc2VPbkNsaWNrIiwiJGJvZHkiLCJjb250YWlucyIsIl9oaWRlQWxsIiwiX2hpZGUiLCJwYXJlbnRTdWJNZW51IiwiX21lbnVMaW5rRXZlbnRzIiwiYmx1ciIsImJpZ2dlc3QiLCJyZXN1bHQiLCJ1bndyYXAiLCJyZW1vdmUiLCJEcm9wZG93biIsIiRpZCIsIiRhbmNob3IiLCJwb3NpdGlvbkNsYXNzIiwiZ2V0UG9zaXRpb25DbGFzcyIsImNvdW50ZXIiLCJ1c2VkUG9zaXRpb25zIiwidmVydGljYWxQb3NpdGlvbiIsIm1hdGNoIiwiaG9yaXpvbnRhbFBvc2l0aW9uIiwiX3JlcG9zaXRpb24iLCJjbGFzc0NoYW5nZWQiLCJfc2V0UG9zaXRpb24iLCJkaXJlY3Rpb24iLCJob3ZlciIsInRpbWVvdXQiLCJob3ZlckRlbGF5IiwiaG92ZXJQYW5lIiwidmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzIiwidGFiX2ZvcndhcmQiLCJ0cmFwRm9jdXMiLCJ0YWJfYmFja3dhcmQiLCJfYWRkQm9keUhhbmRsZXIiLCJhdXRvRm9jdXMiLCIkZm9jdXNhYmxlIiwiY3VyUG9zaXRpb25DbGFzcyIsIkRyb3Bkb3duTWVudSIsInN1YnMiLCJ2ZXJ0aWNhbENsYXNzIiwicmlnaHRDbGFzcyIsImFsaWdubWVudCIsImNoYW5nZWQiLCJfaXNWZXJ0aWNhbCIsImhhc1RvdWNoIiwib250b3VjaHN0YXJ0IiwicGFyQ2xhc3MiLCJoYW5kbGVDbGlja0ZuIiwiaGFzU3ViIiwiaGFzQ2xpY2tlZCIsImNsaWNrT3BlbiIsImZvcmNlRm9sbG93IiwiY2xvc2VPbkNsaWNrSW5zaWRlIiwiZGlzYWJsZUhvdmVyIiwiYXV0b2Nsb3NlIiwiY2xvc2luZ1RpbWUiLCJpc1RhYiIsImluZGV4IiwibmV4dFNpYmxpbmciLCJwcmV2U2libGluZyIsIm9wZW5TdWIiLCJjbG9zZVN1YiIsIiRzaWJzIiwib2xkQ2xhc3MiLCIkcGFyZW50TGkiLCIkdG9DbG9zZSIsInNvbWV0aGluZ1RvQ2xvc2UiLCJFcXVhbGl6ZXIiLCJlcUlkIiwiJHdhdGNoZWQiLCJoYXNOZXN0ZWQiLCJpc05lc3RlZCIsImlzT24iLCJfYmluZEhhbmRsZXIiLCJvblJlc2l6ZU1lQm91bmQiLCJfb25SZXNpemVNZSIsIm9uUG9zdEVxdWFsaXplZEJvdW5kIiwiX29uUG9zdEVxdWFsaXplZCIsImltZ3MiLCJ0b29TbWFsbCIsImVxdWFsaXplT24iLCJfY2hlY2tNUSIsIl9wYXVzZUV2ZW50cyIsIl9raWxsc3dpdGNoIiwiZXF1YWxpemVPblN0YWNrIiwiX2lzU3RhY2tlZCIsImVxdWFsaXplQnlSb3ciLCJnZXRIZWlnaHRzQnlSb3ciLCJhcHBseUhlaWdodEJ5Um93IiwiZ2V0SGVpZ2h0cyIsImFwcGx5SGVpZ2h0IiwiaGVpZ2h0cyIsImxlbiIsIm9mZnNldEhlaWdodCIsImxhc3RFbFRvcE9mZnNldCIsImdyb3VwcyIsImdyb3VwIiwiZWxPZmZzZXRUb3AiLCJqIiwibG4iLCJncm91cHNJTGVuZ3RoIiwibGVuSiIsIkludGVyY2hhbmdlIiwicnVsZXMiLCJjdXJyZW50UGF0aCIsIl9hZGRCcmVha3BvaW50cyIsIl9nZW5lcmF0ZVJ1bGVzIiwicnVsZSIsInBhdGgiLCJTUEVDSUFMX1FVRVJJRVMiLCJydWxlc0xpc3QiLCJyZXNwb25zZSIsImh0bWwiLCJNYWdlbGxhbiIsIiR0YXJnZXRzIiwiJGxpbmtzIiwiJGFjdGl2ZSIsInNjcm9sbFBvcyIsInBhcnNlSW50IiwiY2FsY1BvaW50cyIsInBvaW50cyIsIndpbkhlaWdodCIsImlubmVySGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiZG9jSGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiJHRhciIsInB0IiwidGhyZXNob2xkIiwidGFyZ2V0UG9pbnQiLCJhbmltYXRpb25EdXJhdGlvbiIsImVhc2luZyIsImFuaW1hdGlvbkVhc2luZyIsImRlZXBMaW5raW5nIiwibG9jYXRpb24iLCJoYXNoIiwic2Nyb2xsVG9Mb2MiLCJfdXBkYXRlQWN0aXZlIiwiYXJyaXZhbCIsImxvYyIsImJhck9mZnNldCIsInNjcm9sbFRvcCIsIndpblBvcyIsImN1cklkeCIsImlzRG93biIsImN1clZpc2libGUiLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiT2ZmQ2FudmFzIiwiJGxhc3RUcmlnZ2VyIiwiJHRyaWdnZXJzIiwiJGV4aXRlciIsImV4aXRlciIsImFwcGVuZCIsImlzUmV2ZWFsZWQiLCJyZXZlYWxDbGFzcyIsInJldmVhbE9uIiwiX3NldE1RQ2hlY2tlciIsInRyYW5zaXRpb25UaW1lIiwiX2hhbmRsZUtleWJvYXJkIiwicmV2ZWFsIiwiJGNsb3NlciIsImZvcmNlVG9wIiwiX3RyYXBGb2N1cyIsImZvY3VzYWJsZSIsImxhc3QiLCJPcmJpdCIsImNvbnRhaW5lckNsYXNzIiwiJHNsaWRlcyIsInNsaWRlQ2xhc3MiLCIkaW1hZ2VzIiwiaW5pdEFjdGl2ZSIsInVzZU1VSSIsIl9wcmVwYXJlRm9yT3JiaXQiLCJidWxsZXRzIiwiX2xvYWRCdWxsZXRzIiwiYXV0b1BsYXkiLCJnZW9TeW5jIiwiYWNjZXNzaWJsZSIsIiRidWxsZXRzIiwiYm94T2ZCdWxsZXRzIiwidGltZXJEZWxheSIsImNoYW5nZVNsaWRlIiwiX3NldFdyYXBwZXJIZWlnaHQiLCJfc2V0U2xpZGVIZWlnaHQiLCJ0ZW1wIiwicGF1c2VPbkhvdmVyIiwibmF2QnV0dG9ucyIsIiRjb250cm9scyIsIm5leHRDbGFzcyIsInByZXZDbGFzcyIsIiRzbGlkZSIsImlzTFRSIiwiY2hvc2VuU2xpZGUiLCIkY3VyU2xpZGUiLCIkZmlyc3RTbGlkZSIsIiRsYXN0U2xpZGUiLCJkaXJJbiIsImRpck91dCIsIiRuZXdTbGlkZSIsImluZmluaXRlV3JhcCIsIl91cGRhdGVCdWxsZXRzIiwiJG9sZEJ1bGxldCIsInNwYW4iLCJkZXRhY2giLCIkbmV3QnVsbGV0IiwiYW5pbUluRnJvbVJpZ2h0IiwiYW5pbU91dFRvUmlnaHQiLCJhbmltSW5Gcm9tTGVmdCIsImFuaW1PdXRUb0xlZnQiLCJSZXNwb25zaXZlTWVudSIsImN1cnJlbnRNcSIsImN1cnJlbnRQbHVnaW4iLCJydWxlc1RyZWUiLCJydWxlU2l6ZSIsInJ1bGVQbHVnaW4iLCJNZW51UGx1Z2lucyIsImlzRW1wdHlPYmplY3QiLCJfY2hlY2tNZWRpYVF1ZXJpZXMiLCJtYXRjaGVkTXEiLCJjc3NDbGFzcyIsImRyb3Bkb3duIiwiZHJpbGxkb3duIiwiYWNjb3JkaW9uIiwiUmVzcG9uc2l2ZVRvZ2dsZSIsInRhcmdldElEIiwiJHRhcmdldE1lbnUiLCIkdG9nZ2xlciIsIl91cGRhdGUiLCJfdXBkYXRlTXFIYW5kbGVyIiwidG9nZ2xlTWVudSIsImhpZGVGb3IiLCJSZXZlYWwiLCJjYWNoZWQiLCJtcSIsImlzTW9iaWxlIiwibW9iaWxlU25pZmYiLCJmdWxsU2NyZWVuIiwib3ZlcmxheSIsIiRvdmVybGF5IiwiX21ha2VPdmVybGF5IiwiZGVlcExpbmsiLCJfdXBkYXRlUG9zaXRpb24iLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJtYXJnaW4iLCJfaGFuZGxlU3RhdGUiLCJtdWx0aXBsZU9wZW5lZCIsImFuaW1hdGlvbkluIiwiYWZ0ZXJBbmltYXRpb25Gb2N1cyIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvd0RlbGF5Iiwib3JpZ2luYWxTY3JvbGxQb3MiLCJfZXh0cmFIYW5kbGVycyIsImNsb3NlT25Fc2MiLCJhbmltYXRpb25PdXQiLCJmaW5pc2hVcCIsImhpZGVEZWxheSIsInJlc2V0T25DbG9zZSIsInJlcGxhY2VTdGF0ZSIsInRpdGxlIiwicGF0aG5hbWUiLCJidG1PZmZzZXRQY3QiLCJpUGhvbmVTbmlmZiIsImFuZHJvaWRTbmlmZiIsIlNsaWRlciIsImlucHV0cyIsImhhbmRsZXMiLCIkaGFuZGxlIiwiJGlucHV0IiwiJGZpbGwiLCJ2ZXJ0aWNhbCIsImlzRGJsIiwiZGlzYWJsZWQiLCJkaXNhYmxlZENsYXNzIiwiYmluZGluZyIsIl9zZXRJbml0QXR0ciIsImRvdWJsZVNpZGVkIiwiJGhhbmRsZTIiLCIkaW5wdXQyIiwiX3NldEhhbmRsZVBvcyIsImluaXRpYWxTdGFydCIsImluaXRpYWxFbmQiLCIkaG5kbCIsIm5vSW52ZXJ0IiwiaDJWYWwiLCJzdGVwIiwiaDFWYWwiLCJ2ZXJ0IiwiaE9yVyIsImxPclQiLCJoYW5kbGVEaW0iLCJlbGVtRGltIiwicGN0T2ZCYXIiLCJwZXJjZW50IiwidG9GaXhlZCIsInB4VG9Nb3ZlIiwibW92ZW1lbnQiLCJkZWNpbWFsIiwiX3NldFZhbHVlcyIsImlzTGVmdEhuZGwiLCJkaW0iLCJoYW5kbGVQY3QiLCJoYW5kbGVQb3MiLCJtb3ZlVGltZSIsImNoYW5nZWREZWxheSIsIl9oYW5kbGVFdmVudCIsImhhc1ZhbCIsImV2ZW50T2Zmc2V0IiwiaGFsZk9mSGFuZGxlIiwiYmFyRGltIiwid2luZG93U2Nyb2xsIiwic2Nyb2xsTGVmdCIsImVsZW1PZmZzZXQiLCJldmVudEZyb21CYXIiLCJiYXJYWSIsIm9mZnNldFBjdCIsIl9hZGp1c3RWYWx1ZSIsImZpcnN0SG5kbFBvcyIsImFic1Bvc2l0aW9uIiwic2VjbmRIbmRsUG9zIiwiZGl2IiwicHJldl92YWwiLCJuZXh0X3ZhbCIsImN1ckhhbmRsZSIsImNsaWNrU2VsZWN0IiwiZHJhZ2dhYmxlIiwiY3VycmVudFRhcmdldCIsIl8kaGFuZGxlIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsImRlY3JlYXNlIiwiaW5jcmVhc2UiLCJkZWNyZWFzZV9mYXN0IiwiaW5jcmVhc2VfZmFzdCIsImludmVydFZlcnRpY2FsIiwiZnJhYyIsIm51bSIsImNsaWNrUG9zIiwiU3RpY2t5IiwiJHBhcmVudCIsIndhc1dyYXBwZWQiLCIkY29udGFpbmVyIiwiY29udGFpbmVyIiwid3JhcElubmVyIiwic3RpY2t5Q2xhc3MiLCJzY3JvbGxDb3VudCIsImNoZWNrRXZlcnkiLCJpc1N0dWNrIiwiY29udGFpbmVySGVpZ2h0IiwiZWxlbUhlaWdodCIsIl9wYXJzZVBvaW50cyIsIl9zZXRTaXplcyIsIl9jYWxjIiwicmV2ZXJzZSIsInRvcEFuY2hvciIsImJ0bSIsImJ0bUFuY2hvciIsInB0cyIsImJyZWFrcyIsInBsYWNlIiwiY2FuU3RpY2siLCJfcGF1c2VMaXN0ZW5lcnMiLCJjaGVja1NpemVzIiwic2Nyb2xsIiwiX3JlbW92ZVN0aWNreSIsInRvcFBvaW50IiwiYm90dG9tUG9pbnQiLCJfc2V0U3RpY2t5Iiwic3RpY2tUbyIsIm1yZ24iLCJub3RTdHVja1RvIiwiaXNUb3AiLCJzdGlja1RvVG9wIiwiYW5jaG9yUHQiLCJhbmNob3JIZWlnaHQiLCJ0b3BPckJvdHRvbSIsInN0aWNreU9uIiwibmV3RWxlbVdpZHRoIiwiY29tcCIsInBkbmciLCJuZXdDb250YWluZXJIZWlnaHQiLCJfc2V0QnJlYWtQb2ludHMiLCJtVG9wIiwiZW1DYWxjIiwibWFyZ2luVG9wIiwibUJ0bSIsIm1hcmdpbkJvdHRvbSIsImVtIiwiZm9udFNpemUiLCJUYWJzIiwiJHRhYlRpdGxlcyIsImxpbmtDbGFzcyIsIm1hdGNoSGVpZ2h0IiwiX3NldEhlaWdodCIsIl9hZGRLZXlIYW5kbGVyIiwiX2FkZENsaWNrSGFuZGxlciIsIl9zZXRIZWlnaHRNcUhhbmRsZXIiLCJfaGFuZGxlVGFiQ2hhbmdlIiwiJGZpcnN0VGFiIiwiJGxhc3RUYWIiLCJ3cmFwT25LZXlzIiwiJHRhYkxpbmsiLCIkdGFyZ2V0Q29udGVudCIsIiRvbGRUYWIiLCJzZWxlY3RUYWIiLCJpZFN0ciIsInBhbmVsQ2xhc3MiLCJwYW5lbCIsImNoZWNrQ2xhc3MiLCJUb2dnbGVyIiwiaW5wdXQiLCJfdG9nZ2xlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsIl91cGRhdGVBUklBIiwiX3RvZ2dsZUFuaW1hdGUiLCJUb29sdGlwIiwiaXNDbGljayIsImVsZW1JZCIsIl9nZXRQb3NpdGlvbkNsYXNzIiwidGlwVGV4dCIsInRlbXBsYXRlIiwiX2J1aWxkVGVtcGxhdGUiLCJ0cmlnZ2VyQ2xhc3MiLCJ0ZW1wbGF0ZUNsYXNzZXMiLCJ0b29sdGlwQ2xhc3MiLCIkdGVtcGxhdGUiLCIkdGlwRGltcyIsInNob3dPbiIsImZhZGVJbiIsImZhZGVJbkR1cmF0aW9uIiwiZmFkZU91dER1cmF0aW9uIiwiaXNGb2N1cyIsImRpc2FibGVGb3JUb3VjaCIsInRvdWNoQ2xvc2VUZXh0IiwiZW5kRXZlbnQiLCJNb3Rpb25VSSIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJleHBvcnRzIiwicmVxdWlyZSIsIlplcHRvIiwiQ0xPU0VfRVZFTlQiLCJCRUZPUkVfQ0xPU0VfRVZFTlQiLCJBRlRFUl9DTE9TRV9FVkVOVCIsIkJFRk9SRV9BUFBFTkRfRVZFTlQiLCJNQVJLVVBfUEFSU0VfRVZFTlQiLCJPUEVOX0VWRU5UIiwiQ0hBTkdFX0VWRU5UIiwiTlMiLCJFVkVOVF9OUyIsIlJFQURZX0NMQVNTIiwiUkVNT1ZJTkdfQ0xBU1MiLCJQUkVWRU5UX0NMT1NFX0NMQVNTIiwibWZwIiwiTWFnbmlmaWNQb3B1cCIsIl9pc0pRIiwiX3ByZXZTdGF0dXMiLCJfd2luZG93IiwiX2RvY3VtZW50IiwiX3ByZXZDb250ZW50VHlwZSIsIl93cmFwQ2xhc3NlcyIsIl9jdXJyUG9wdXBUeXBlIiwiX21mcE9uIiwiZiIsImV2IiwiX2dldEVsIiwicmF3IiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJfbWZwVHJpZ2dlciIsInN0IiwiY2FsbGJhY2tzIiwiY2hhckF0IiwiX2dldENsb3NlQnRuIiwiY3VyclRlbXBsYXRlIiwiY2xvc2VCdG4iLCJjbG9zZU1hcmt1cCIsInRDbG9zZSIsIl9jaGVja0luc3RhbmNlIiwibWFnbmlmaWNQb3B1cCIsImluc3RhbmNlIiwic3VwcG9ydHNUcmFuc2l0aW9ucyIsInMiLCJwb3AiLCJhcHBWZXJzaW9uIiwiaXNMb3dJRSIsImlzSUU4IiwiYWxsIiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJzdXBwb3J0c1RyYW5zaXRpb24iLCJwcm9iYWJseU1vYmlsZSIsInBvcHVwc0NhY2hlIiwiaXNPYmoiLCJ0b0FycmF5IiwiaXRlbSIsInBhcnNlZCIsImlzT3BlbiIsInVwZGF0ZUl0ZW1IVE1MIiwibWFpbkVsIiwiZml4ZWRDb250ZW50UG9zIiwibW9kYWwiLCJjbG9zZU9uQ29udGVudENsaWNrIiwiY2xvc2VPbkJnQ2xpY2siLCJzaG93Q2xvc2VCdG4iLCJlbmFibGVFc2NhcGVLZXkiLCJiZ092ZXJsYXkiLCJfY2hlY2tJZkNsb3NlIiwiY29udGVudENvbnRhaW5lciIsInByZWxvYWRlciIsInRMb2FkaW5nIiwibW9kdWxlcyIsIm4iLCJjbG9zZUJ0bkluc2lkZSIsInZhbHVlcyIsImNsb3NlX3JlcGxhY2VXaXRoIiwiYWxpZ25Ub3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsImZpeGVkQmdQb3MiLCJ1cGRhdGVTaXplIiwid2luZG93SGVpZ2h0Iiwid0giLCJ3aW5kb3dTdHlsZXMiLCJfaGFzU2Nyb2xsQmFyIiwiX2dldFNjcm9sbGJhclNpemUiLCJtYXJnaW5SaWdodCIsImlzSUU3IiwiY2xhc3Nlc1RvYWRkIiwibWFpbkNsYXNzIiwiX2FkZENsYXNzVG9NRlAiLCJfbGFzdEZvY3VzZWRFbCIsImFjdGl2ZUVsZW1lbnQiLCJjb250ZW50IiwiX3NldEZvY3VzIiwiX29uRm9jdXNJbiIsInJlbW92YWxEZWxheSIsIl9jbG9zZSIsImNsYXNzZXNUb1JlbW92ZSIsImVtcHR5IiwiX3JlbW92ZUNsYXNzRnJvbU1GUCIsImN1cnJJdGVtIiwiYXV0b0ZvY3VzTGFzdCIsInByZXZIZWlnaHQiLCJ6b29tTGV2ZWwiLCJjbGllbnRXaWR0aCIsImlubmVyV2lkdGgiLCJwYXJzZUVsIiwibWFya3VwIiwibmV3Q29udGVudCIsImFwcGVuZENvbnRlbnQiLCJwcmVsb2FkZWQiLCJ0YWdOYW1lIiwic3JjIiwiYWRkR3JvdXAiLCJlSGFuZGxlciIsIm1mcEVsIiwiX29wZW5DbGljayIsImVOYW1lIiwiZGVsZWdhdGUiLCJtaWRDbGljayIsIm1ldGFLZXkiLCJkaXNhYmxlT24iLCJpc0Z1bmN0aW9uIiwidXBkYXRlU3RhdHVzIiwic3RhdHVzIiwiY2xvc2VPbkNvbnRlbnQiLCJjbG9zZU9uQmciLCJjTmFtZSIsIl9wYXJzZU1hcmt1cCIsImFyciIsInJlcGxhY2VXaXRoIiwic2Nyb2xsYmFyU2l6ZSIsInNjcm9sbERpdiIsInJlbW92ZUNoaWxkIiwicHJvdG8iLCJyZWdpc3Rlck1vZHVsZSIsIm1vZHVsZSIsImpxRWwiLCJpdGVtT3B0cyIsIklOTElORV9OUyIsIl9oaWRkZW5DbGFzcyIsIl9pbmxpbmVQbGFjZWhvbGRlciIsIl9sYXN0SW5saW5lRWxlbWVudCIsIl9wdXRJbmxpbmVFbGVtZW50c0JhY2siLCJhZnRlciIsImhpZGRlbkNsYXNzIiwidE5vdEZvdW5kIiwiaW5pdElubGluZSIsImdldElubGluZSIsImlubGluZVN0IiwiaW5saW5lIiwiaW5saW5lRWxlbWVudCIsIkFKQVhfTlMiLCJfYWpheEN1ciIsIl9yZW1vdmVBamF4Q3Vyc29yIiwiX2Rlc3Ryb3lBamF4UmVxdWVzdCIsInJlcSIsImFib3J0Iiwic2V0dGluZ3MiLCJjdXJzb3IiLCJ0RXJyb3IiLCJpbml0QWpheCIsImFqYXgiLCJnZXRBamF4Iiwic3VjY2VzcyIsInRleHRTdGF0dXMiLCJqcVhIUiIsInhociIsImZpbmlzaGVkIiwibG9hZEVycm9yIiwiX2ltZ0ludGVydmFsIiwiX2dldFRpdGxlIiwiaW1hZ2UiLCJ0aXRsZVNyYyIsInZlcnRpY2FsRml0IiwiaW5pdEltYWdlIiwiaW1nU3QiLCJucyIsInJlc2l6ZUltYWdlIiwiaW1nIiwiZGVjciIsIl9vbkltYWdlSGFzU2l6ZSIsImhhc1NpemUiLCJjbGVhckludGVydmFsIiwiaXNDaGVja2luZ0ltZ1NpemUiLCJpbWdIaWRkZW4iLCJmaW5kSW1hZ2VTaXplIiwibWZwU2V0SW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImdldEltYWdlIiwiZ3VhcmQiLCJvbkxvYWRDb21wbGV0ZSIsImxvYWRlZCIsIm9uTG9hZEVycm9yIiwiYWx0IiwiaW1nX3JlcGxhY2VXaXRoIiwibG9hZGluZyIsImhhc01velRyYW5zZm9ybSIsImdldEhhc01velRyYW5zZm9ybSIsIk1velRyYW5zZm9ybSIsIm9wZW5lciIsImluaXRab29tIiwiem9vbVN0Iiwiem9vbSIsImdldEVsVG9BbmltYXRlIiwibmV3SW1nIiwidHJhbnNpdGlvbiIsImNzc09iaiIsInpJbmRleCIsInNob3dNYWluQ29udGVudCIsIm9wZW5UaW1lb3V0IiwiYW5pbWF0ZWRJbWciLCJfYWxsb3dab29tIiwiX2dldEl0ZW1Ub1pvb20iLCJfZ2V0T2Zmc2V0IiwiaXNMYXJnZSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwib2JqIiwiSUZSQU1FX05TIiwiX2VtcHR5UGFnZSIsIl9maXhJZnJhbWVCdWdzIiwiaXNTaG93aW5nIiwic3JjQWN0aW9uIiwieW91dHViZSIsInZpbWVvIiwiZ21hcHMiLCJpbml0SWZyYW1lIiwicHJldlR5cGUiLCJuZXdUeXBlIiwiZ2V0SWZyYW1lIiwiZW1iZWRTcmMiLCJpZnJhbWVTdCIsImlmcmFtZSIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwiZGF0YU9iaiIsIl9nZXRMb29wZWRJZCIsIm51bVNsaWRlcyIsIl9yZXBsYWNlQ3VyclRvdGFsIiwiY3VyciIsInRvdGFsIiwiYXJyb3dNYXJrdXAiLCJwcmVsb2FkIiwibmF2aWdhdGVCeUltZ0NsaWNrIiwiYXJyb3dzIiwidFByZXYiLCJ0TmV4dCIsInRDb3VudGVyIiwiaW5pdEdhbGxlcnkiLCJnU3QiLCJnYWxsZXJ5IiwibCIsImFycm93TGVmdCIsImFycm93UmlnaHQiLCJjbGljayIsIl9wcmVsb2FkVGltZW91dCIsInByZWxvYWROZWFyYnlJbWFnZXMiLCJnb1RvIiwibmV3SW5kZXgiLCJwcmVsb2FkQmVmb3JlIiwicHJlbG9hZEFmdGVyIiwiX3ByZWxvYWRJdGVtIiwiUkVUSU5BX05TIiwicmVwbGFjZVNyYyIsIm0iLCJyYXRpbyIsImluaXRSZXRpbmEiLCJkZXZpY2VQaXhlbFJhdGlvIiwicm9vdCIsIlBob3RvU3dpcGVVSV9EZWZhdWx0IiwicHN3cCIsImZyYW1ld29yayIsInVpIiwiX292ZXJsYXlVSVVwZGF0ZWQiLCJfY29udHJvbHNWaXNpYmxlIiwiX2Z1bGxzY3JlbkFQSSIsIl9jb250cm9scyIsIl9jYXB0aW9uQ29udGFpbmVyIiwiX2Zha2VDYXB0aW9uQ29udGFpbmVyIiwiX2luZGV4SW5kaWNhdG9yIiwiX3NoYXJlQnV0dG9uIiwiX3NoYXJlTW9kYWwiLCJfc2hhcmVNb2RhbEhpZGRlbiIsIl9pbml0YWxDbG9zZU9uU2Nyb2xsVmFsdWUiLCJfaXNJZGxlIiwiX2xpc3RlbiIsIl9sb2FkaW5nSW5kaWNhdG9yIiwiX2xvYWRpbmdJbmRpY2F0b3JIaWRkZW4iLCJfbG9hZGluZ0luZGljYXRvclRpbWVvdXQiLCJfZ2FsbGVyeUhhc09uZVNsaWRlIiwiX29wdGlvbnMiLCJfZGVmYXVsdFVJT3B0aW9ucyIsImJhcnNTaXplIiwiY2xvc2VFbENsYXNzZXMiLCJ0aW1lVG9JZGxlIiwidGltZVRvSWRsZU91dHNpZGUiLCJsb2FkaW5nSW5kaWNhdG9yRGVsYXkiLCJhZGRDYXB0aW9uSFRNTEZuIiwiY2FwdGlvbkVsIiwiY2xvc2VFbCIsImZ1bGxzY3JlZW5FbCIsInpvb21FbCIsInNoYXJlRWwiLCJjb3VudGVyRWwiLCJhcnJvd0VsIiwicHJlbG9hZGVyRWwiLCJ0YXBUb0Nsb3NlIiwidGFwVG9Ub2dnbGVDb250cm9scyIsImNsaWNrVG9DbG9zZU5vblpvb21hYmxlIiwic2hhcmVCdXR0b25zIiwibGFiZWwiLCJkb3dubG9hZCIsImdldEltYWdlVVJMRm9yU2hhcmUiLCJnZXRQYWdlVVJMRm9yU2hhcmUiLCJocmVmIiwiZ2V0VGV4dEZvclNoYXJlIiwiaW5kZXhJbmRpY2F0b3JTZXAiLCJmaXRDb250cm9sc1dpZHRoIiwiX2Jsb2NrQ29udHJvbHNUYXAiLCJfYmxvY2tDb250cm9sc1RhcFRpbWVvdXQiLCJfb25Db250cm9sc1RhcCIsIm1vdXNlVXNlZCIsIl9vbklkbGVNb3VzZU1vdmUiLCJ1aUVsZW1lbnQiLCJjbGlja2VkQ2xhc3MiLCJmb3VuZCIsIl91aUVsZW1lbnRzIiwib25UYXAiLCJ0YXBEZWxheSIsImZlYXR1cmVzIiwiaXNPbGRBbmRyb2lkIiwiX2ZpdENvbnRyb2xzSW5WaWV3cG9ydCIsImxpa2VseVRvdWNoRGV2aWNlIiwic2NyZWVuIiwiX3RvZ2dsZVBzd3BDbGFzcyIsIl9jb3VudE51bUl0ZW1zIiwiaGFzT25lU2xpZGUiLCJnZXROdW1JdGVtc0ZuIiwiX3RvZ2dsZVNoYXJlTW9kYWxDbGFzcyIsIl90b2dnbGVTaGFyZU1vZGFsIiwiX3VwZGF0ZVNoYXJlVVJMcyIsIl9vcGVuV2luZG93UG9wdXAiLCJzaG91dCIsInNoYXJlQnV0dG9uT3V0Iiwic2hhcmVCdXR0b25EYXRhIiwic2hhcmVVUkwiLCJpbWFnZV91cmwiLCJwYWdlX3VybCIsInNoYXJlX3RleHQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJzZVNoYXJlQnV0dG9uT3V0Iiwib25jbGljayIsIl9oYXNDbG9zZUNsYXNzIiwiX2lkbGVJbnRlcnZhbCIsIl9pZGxlVGltZXIiLCJfaWRsZUluY3JlbWVudCIsInNldElkbGUiLCJfb25Nb3VzZUxlYXZlV2luZG93IiwiZnJvbSIsInJlbGF0ZWRUYXJnZXQiLCJ0b0VsZW1lbnQiLCJfc2V0dXBGdWxsc2NyZWVuQVBJIiwiZ2V0RnVsbHNjcmVlbkFQSSIsImV2ZW50SyIsInVwZGF0ZUZ1bGxzY3JlZW4iLCJfc2V0dXBMb2FkaW5nSW5kaWNhdG9yIiwiX3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IiLCJhbGxvd1Byb2dyZXNzaXZlSW1nIiwiX2FwcGx5TmF2QmFyR2FwcyIsImdhcCIsInZHYXAiLCJiYXJzIiwiY3JlYXRlRWwiLCJjYXB0aW9uU2l6ZSIsIl9zZXR1cElkbGUiLCJfc2V0dXBIaWRpbmdDb250cm9sc0R1cmluZ0dlc3R1cmVzIiwiaGlkZUNvbnRyb2xzIiwic2hvd0NvbnRyb2xzIiwicGluY2hDb250cm9sc0hpZGRlbiIsIm9wdGlvbiIsIm9uSW5pdCIsInRvZ2dsZURlc2t0b3Bab29tIiwiaXNGdWxsc2NyZWVuIiwiZXhpdCIsImVudGVyIiwiX3NldHVwVUlFbGVtZW50cyIsImNsYXNzQXR0ciIsImxvb3BUaHJvdWdoQ2hpbGRFbGVtZW50cyIsInNDaGlsZHJlbiIsImEiLCJ0b3BCYXIiLCJnZXRDaGlsZEJ5Q2xhc3MiLCJzY3JvbGxXcmFwIiwibGlzdGVuIiwidXBkYXRlIiwicG9pbnQiLCJpbml0aWFsWm9vbUxldmVsIiwiZ2V0Wm9vbUxldmVsIiwiem9vbVRvIiwiZ2V0RG91YmxlVGFwWm9vbSIsInByZXZlbnRPYmoiLCJwcmV2ZW50Iiwib25HbG9iYWxUYXAiLCJvbk1vdXNlT3ZlciIsInVuYmluZCIsImhpZGVBbmltYXRpb25EdXJhdGlvbiIsInNob3dBbmltYXRpb25EdXJhdGlvbiIsImlzSWRsZSIsInVwZGF0ZUluZGV4SW5kaWNhdG9yIiwic2V0U2Nyb2xsT2Zmc2V0IiwiZ2V0U2Nyb2xsWSIsImdldEN1cnJlbnRJbmRleCIsImRldGFpbCIsImZpdFJhdGlvIiwicmVsZWFzZVBvaW50Iiwic3VwcG9ydHNGdWxsc2NyZWVuIiwiZCIsImV4aXRGdWxsc2NyZWVuIiwibW96Q2FuY2VsRnVsbFNjcmVlbiIsIndlYmtpdEV4aXRGdWxsc2NyZWVuIiwibXNFeGl0RnVsbHNjcmVlbiIsImRFIiwiYXBpIiwidEYiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsImVudGVySyIsImV4aXRLIiwiZWxlbWVudEsiLCJtb3pSZXF1ZXN0RnVsbFNjcmVlbiIsIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsImNsb3NlT25TY3JvbGwiLCJFbGVtZW50IiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJQaG90b1N3aXBlIiwiVWlDbGFzcyIsImxpc3RlbmVyIiwibWV0aG9kTmFtZSIsImNsYXNzZXMiLCJ0YWciLCJ5T2Zmc2V0IiwicmVnIiwicGFyZW50RWwiLCJjaGlsZENsYXNzTmFtZSIsIm5vZGUiLCJmaXJzdENoaWxkIiwiYXJyYXlTZWFyY2giLCJhcnJheSIsIm8xIiwibzIiLCJwcmV2ZW50T3ZlcndyaXRlIiwic2luZSIsIm91dCIsInNpbiIsIlBJIiwiaW5PdXQiLCJjb3MiLCJjdWJpYyIsImRldGVjdEZlYXR1cmVzIiwiaGVscGVyRWwiLCJoZWxwZXJTdHlsZSIsInZlbmRvciIsIm9sZElFIiwidG91Y2giLCJyYWYiLCJjYWYiLCJwb2ludGVyRXZlbnQiLCJwb2ludGVyRW5hYmxlZCIsIm1zUG9pbnRlckVuYWJsZWQiLCJ1YSIsInBsYXRmb3JtIiwiaXNPbGRJT1NQaG9uZSIsImFuZHJvaWR2ZXJzaW9uIiwiYW5kcm9pZFZlcnNpb24iLCJpc01vYmlsZU9wZXJhIiwic3R5bGVDaGVja3MiLCJzdHlsZUNoZWNrSXRlbSIsInN0eWxlTmFtZSIsImN1cnJUaW1lIiwidGltZVRvQ2FsbCIsInN2ZyIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVNWR1JlY3QiLCJldk5hbWUiLCJfaGFuZGxlRXYiLCJoYW5kbGVFdmVudCIsIkRPVUJMRV9UQVBfUkFESVVTIiwiTlVNX0hPTERFUlMiLCJhbGxvd1BhblRvTmV4dCIsInNwYWNpbmciLCJiZ09wYWNpdHkiLCJsb29wIiwicGluY2hUb0Nsb3NlIiwiY2xvc2VPblZlcnRpY2FsRHJhZyIsInZlcnRpY2FsRHJhZ1JhbmdlIiwic2hvd0hpZGVPcGFjaXR5IiwiZXNjS2V5IiwiYXJyb3dLZXlzIiwibWFpblNjcm9sbEVuZEZyaWN0aW9uIiwicGFuRW5kRnJpY3Rpb24iLCJpc0NsaWNrYWJsZUVsZW1lbnQiLCJpc01vdXNlQ2xpY2siLCJtYXhTcHJlYWRab29tIiwic2NhbGVNb2RlIiwiX2dldEVtcHR5UG9pbnQiLCJfaXNPcGVuIiwiX2lzRGVzdHJveWluZyIsIl9jbG9zZWRCeVNjcm9sbCIsIl9jdXJyZW50SXRlbUluZGV4IiwiX2NvbnRhaW5lclN0eWxlIiwiX2NvbnRhaW5lclNoaWZ0SW5kZXgiLCJfY3VyclBhbkRpc3QiLCJfc3RhcnRQYW5PZmZzZXQiLCJfcGFuT2Zmc2V0IiwiX3VwTW92ZUV2ZW50cyIsIl9kb3duRXZlbnRzIiwiX2dsb2JhbEV2ZW50SGFuZGxlcnMiLCJfdmlld3BvcnRTaXplIiwiX2N1cnJab29tTGV2ZWwiLCJfc3RhcnRab29tTGV2ZWwiLCJfdHJhbnNsYXRlUHJlZml4IiwiX3RyYW5zbGF0ZVN1Zml4IiwiX3VwZGF0ZVNpemVJbnRlcnZhbCIsIl9pdGVtc05lZWRVcGRhdGUiLCJfY3VyclBvc2l0aW9uSW5kZXgiLCJfb2Zmc2V0IiwiX3NsaWRlU2l6ZSIsIl9pdGVtSG9sZGVycyIsIl9wcmV2SXRlbUluZGV4IiwiX2luZGV4RGlmZiIsIl9kcmFnU3RhcnRFdmVudCIsIl9kcmFnTW92ZUV2ZW50IiwiX2RyYWdFbmRFdmVudCIsIl9kcmFnQ2FuY2VsRXZlbnQiLCJfdHJhbnNmb3JtS2V5IiwiX3BvaW50ZXJFdmVudEVuYWJsZWQiLCJfaXNGaXhlZFBvc2l0aW9uIiwiX2xpa2VseVRvdWNoRGV2aWNlIiwiX21vZHVsZXMiLCJfcmVxdWVzdEFGIiwiX2NhbmNlbEFGIiwiX2luaXRhbENsYXNzTmFtZSIsIl9pbml0YWxXaW5kb3dTY3JvbGxZIiwiX29sZElFIiwiX2N1cnJlbnRXaW5kb3dTY3JvbGxZIiwiX2ZlYXR1cmVzIiwiX3dpbmRvd1Zpc2libGVTaXplIiwiX3JlbmRlck1heFJlc29sdXRpb24iLCJfcmVnaXN0ZXJNb2R1bGUiLCJwdWJsaWNNZXRob2RzIiwiX2dldE51bUl0ZW1zIiwiX2xpc3RlbmVycyIsIl9zaG91dCIsInNoaWZ0IiwiX2dldEN1cnJlbnRUaW1lIiwiX2FwcGx5QmdPcGFjaXR5Iiwib3BhY2l0eSIsIl9iZ09wYWNpdHkiLCJiZyIsIl9hcHBseVpvb21UcmFuc2Zvcm0iLCJzdHlsZU9iaiIsIl9hcHBseUN1cnJlbnRab29tUGFuIiwiYWxsb3dSZW5kZXJSZXNvbHV0aW9uIiwiX2N1cnJab29tRWxlbWVudFN0eWxlIiwiX3NldEltYWdlU2l6ZSIsIl9hcHBseVpvb21QYW5Ub0l0ZW0iLCJpbml0aWFsUG9zaXRpb24iLCJfc2V0VHJhbnNsYXRlWCIsImVsU3R5bGUiLCJfbW92ZU1haW5TY3JvbGwiLCJkcmFnZ2luZyIsIm5ld1NsaWRlSW5kZXhPZmZzZXQiLCJkZWx0YSIsIl9tYWluU2Nyb2xsUG9zIiwiX2NhbGN1bGF0ZVBhbk9mZnNldCIsImF4aXMiLCJfbWlkWm9vbVBvaW50IiwiX2VxdWFsaXplUG9pbnRzIiwicDEiLCJwMiIsIl9yb3VuZFBvaW50IiwiX21vdXNlTW92ZVRpbWVvdXQiLCJfb25GaXJzdE1vdXNlTW92ZSIsIl9iaW5kRXZlbnRzIiwidHJhbnNmb3JtIiwiX3VuYmluZEV2ZW50cyIsIl9pc0RyYWdnaW5nIiwiX2NhbGN1bGF0ZVBhbkJvdW5kcyIsImJvdW5kcyIsIl9jYWxjdWxhdGVJdGVtU2l6ZSIsIl9jdXJyUGFuQm91bmRzIiwiX2dldE1pblpvb21MZXZlbCIsIl9nZXRNYXhab29tTGV2ZWwiLCJ3IiwiX21vZGlmeURlc3RQYW5PZmZzZXQiLCJkZXN0UGFuQm91bmRzIiwiZGVzdFBhbk9mZnNldCIsImRlc3Rab29tTGV2ZWwiLCJfc2V0dXBUcmFuc2Zvcm1zIiwiYWxsb3czZFRyYW5zZm9ybSIsInBlcnNwZWN0aXZlIiwiem9vbVJhdGlvIiwiaCIsIl9vbktleURvd24iLCJrZXlkb3duQWN0aW9uIiwiX29uR2xvYmFsQ2xpY2siLCJfbW92ZWQiLCJfem9vbVN0YXJ0ZWQiLCJfbWFpblNjcm9sbEFuaW1hdGluZyIsIl92ZXJ0aWNhbERyYWdJbml0aWF0ZWQiLCJfdXBkYXRlUGFnZVNjcm9sbE9mZnNldCIsIl9hbmltYXRpb25zIiwiX251bUFuaW1hdGlvbnMiLCJfc3RvcEFuaW1hdGlvbiIsIl9yZWdpc3RlclN0YXJ0QW5pbWF0aW9uIiwiX3N0b3BBbGxBbmltYXRpb25zIiwiX2FuaW1hdGVQcm9wIiwiYiIsImVuZFByb3AiLCJlYXNpbmdGbiIsIm9uVXBkYXRlIiwib25Db21wbGV0ZSIsInN0YXJ0QW5pbVRpbWUiLCJhbmltbG9vcCIsInZpZXdwb3J0U2l6ZSIsImlzTWFpblNjcm9sbEFuaW1hdGluZyIsImlzRHJhZ2dpbmciLCJpc1pvb21pbmciLCJfaXNab29taW5nIiwiYXBwbHlab29tUGFuIiwicGFuWCIsInBhblkiLCJpdGVtSG9sZGVycyIsImRpc3BsYXkiLCJyZXNpemUiLCJrZXlkb3duIiwib2xkUGhvbmUiLCJhbmltYXRpb25OYW1lIiwiX2dldEl0ZW1BdCIsInJvb3RDbGFzc2VzIiwic2V0Q29udGVudCIsInVwZGF0ZUN1cnJJdGVtIiwiX3Nob3dPckhpZGUiLCJfc2hvd09ySGlkZVRpbWVvdXQiLCJfc3RvcERyYWdVcGRhdGVMb29wIiwicGFuVG8iLCJmb3JjZSIsImRpZmYiLCJ1cGRhdGVDdXJyWm9vbUl0ZW0iLCJlbXVsYXRlU2V0Q29udGVudCIsInpvb21FbGVtZW50IiwiY2VudGVyIiwiaW52YWxpZGF0ZUN1cnJJdGVtcyIsIm5lZWRzVXBkYXRlIiwiYmVmb3JlQW5pbWF0aW9uIiwiZGlmZkFicyIsInRlbXBIb2xkZXIiLCJ1bnNoaWZ0IiwicHJldkl0ZW0iLCJ3aW5kb3dTY3JvbGxZIiwiaG9sZGVyIiwiaEluZGV4IiwiY2xlYW5TbGlkZSIsImNlbnRlclBvaW50Iiwic3BlZWQiLCJ1cGRhdGVGbiIsImluaXRpYWxQYW5PZmZzZXQiLCJNSU5fU1dJUEVfRElTVEFOQ0UiLCJESVJFQ1RJT05fQ0hFQ0tfT0ZGU0VUIiwiX2dlc3R1cmVTdGFydFRpbWUiLCJfZ2VzdHVyZUNoZWNrU3BlZWRUaW1lIiwiX2N1cnJQb2ludCIsIl9zdGFydFBvaW50IiwiX2N1cnJQb2ludGVycyIsIl9zdGFydE1haW5TY3JvbGxQb3MiLCJfcmVsZWFzZUFuaW1EYXRhIiwiX3Bvc1BvaW50cyIsIl90ZW1wUG9pbnQiLCJfaXNab29taW5nSW4iLCJfb2xkQW5kcm9pZFRvdWNoRW5kVGltZW91dCIsIl9jdXJyWm9vbWVkSXRlbUluZGV4IiwiX2NlbnRlclBvaW50IiwiX2xhc3RSZWxlYXNlVGltZSIsIl9pc011bHRpdG91Y2giLCJfZHJhZ0FuaW1GcmFtZSIsIl9tYWluU2Nyb2xsU2hpZnRlZCIsIl9jdXJyZW50UG9pbnRzIiwiX2N1cnJQb2ludHNEaXN0YW5jZSIsIl9zdGFydFBvaW50c0Rpc3RhbmNlIiwiX2N1cnJDZW50ZXJQb2ludCIsIl9kaXJlY3Rpb24iLCJfaXNGaXJzdE1vdmUiLCJfb3BhY2l0eUNoYW5nZWQiLCJfd2FzT3ZlckluaXRpYWxab29tIiwiX2lzRXF1YWxQb2ludHMiLCJfaXNOZWFyYnlQb2ludHMiLCJ0b3VjaDAiLCJ0b3VjaDEiLCJfY2FsY3VsYXRlUG9pbnRzRGlzdGFuY2UiLCJzcXJ0IiwiX2RyYWdVcGRhdGVMb29wIiwiX3JlbmRlck1vdmVtZW50IiwiX2NhblBhbiIsIl9jbG9zZXN0RWxlbWVudCIsIl9wcmV2ZW50T2JqIiwiX3ByZXZlbnREZWZhdWx0RXZlbnRCZWhhdmlvdXIiLCJfY29udmVydFRvdWNoVG9Qb2ludCIsImlkZW50aWZpZXIiLCJfZmluZENlbnRlck9mUG9pbnRzIiwicENlbnRlciIsIl9wdXNoUG9zUG9pbnQiLCJvIiwiX2NhbGN1bGF0ZVZlcnRpY2FsRHJhZ09wYWNpdHlSYXRpbyIsIl9lUG9pbnQxIiwiX2VQb2ludDIiLCJfdGVtcFBvaW50c0FyciIsIl90ZW1wQ291bnRlciIsIl9nZXRUb3VjaFBvaW50cyIsIl9wYW5Pck1vdmVNYWluU2Nyb2xsIiwicGFuRnJpY3Rpb24iLCJvdmVyRGlmZiIsIm5ld09mZnNldCIsInN0YXJ0T3ZlckRpZmYiLCJuZXdNYWluU2Nyb2xsUG9zaXRpb24iLCJtYWluU2Nyb2xsRGlmZiIsIm5ld1BhblBvcyIsIm5ld01haW5TY3JvbGxQb3MiLCJfb25EcmFnU3RhcnQiLCJidXR0b24iLCJfaW5pdGlhbFpvb21SdW5uaW5nIiwicG9pbnRlckluZGV4IiwicG9pbnRlcklkIiwic3RhcnRQb2ludHNMaXN0IiwibnVtUG9pbnRzIiwiX29uRHJhZ01vdmUiLCJ0b3VjaGVzTGlzdCIsInBvaW50c0Rpc3RhbmNlIiwiX2NhbGN1bGF0ZVpvb21MZXZlbCIsInpvb21GcmljdGlvbiIsIm1pblpvb21MZXZlbCIsIm1heFpvb21MZXZlbCIsIm1pbnVzRGlmZiIsIm9wYWNpdHlSYXRpbyIsIm1haW5TY3JvbGxDaGFuZ2VkIiwiX29uRHJhZ1JlbGVhc2UiLCJNU1BPSU5URVJfVFlQRVMiLCJ0b3VjaExpc3QiLCJnZXN0dXJlVHlwZSIsInJlbGVhc2VUaW1lRGlmZiIsIl9pbml0RHJhZ1JlbGVhc2VBbmltYXRpb25EYXRhIiwiY2FsY3VsYXRlU3dpcGVTcGVlZCIsImluaXRhbFBhblkiLCJpbml0aWFsQmdPcGFjaXR5IiwiaXRlbUNoYW5nZWQiLCJfZmluaXNoU3dpcGVNYWluU2Nyb2xsR2VzdHVyZSIsIl9jb21wbGV0ZVpvb21HZXN0dXJlIiwiX2NvbXBsZXRlUGFuR2VzdHVyZSIsImxhc3RGbGlja0R1cmF0aW9uIiwidGVtcFJlbGVhc2VQb3MiLCJsYXN0RmxpY2tPZmZzZXQiLCJsYXN0RmxpY2tEaXN0IiwibGFzdEZsaWNrU3BlZWQiLCJzbG93RG93blJhdGlvIiwic2xvd0Rvd25SYXRpb1JldmVyc2UiLCJzcGVlZERlY2VsZXJhdGlvblJhdGlvIiwic3BlZWREZWNlbGVyYXRpb25SYXRpb0FicyIsImRpc3RhbmNlT2Zmc2V0IiwiYmFja0FuaW1EZXN0aW5hdGlvbiIsImJhY2tBbmltU3RhcnRlZCIsImNhbGN1bGF0ZU92ZXJCb3VuZHNBbmltT2Zmc2V0IiwicG9zIiwiY2FsY3VsYXRlQW5pbU9mZnNldCIsInRpbWVEaWZmIiwicGFuQW5pbUxvb3AiLCJ6b29tUGFuIiwibGFzdE5vdyIsImFuaW1EYXRhIiwiaXRlbXNEaWZmIiwidG90YWxTaGlmdERpc3QiLCJpc0Zhc3RMYXN0RmxpY2siLCJuZXh0Q2lyY2xlIiwiYW5pbWF0ZVRvWCIsImFuaW1hdGVUb0Rpc3QiLCJmaW5pc2hBbmltRHVyYXRpb24iLCJ0b3VjaGVzRGlzdGFuY2UiLCJkZXN0T3BhY2l0eSIsImluaXRpYWxPcGFjaXR5IiwiaW5pdEdlc3R1cmVzIiwiYWRkRXZlbnROYW1lcyIsInByZWYiLCJjYW5jZWwiLCJtYXhUb3VjaFBvaW50cyIsIm1zTWF4VG91Y2hQb2ludHMiLCJtb3VzZWRvd24iLCJtb3VzZW1vdmUiLCJtb3VzZXVwIiwiY29tcGxldGVGbiIsIl9pbml0aWFsQ29udGVudFNldCIsInRodW1iQm91bmRzIiwiaW5pdGlhbExheW91dCIsImdldFRodW1iQm91bmRzRm4iLCJyZW1vdmVBdHRyaWJ1dGUiLCJzdGFydEFuaW1hdGlvbiIsImNsb3NlV2l0aFJhZiIsImZhZGVFdmVyeXRoaW5nIiwibWluaUltZyIsIndlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSIsImluaXRhbEJnT3BhY2l0eSIsIl9pdGVtcyIsIl90ZW1wUGFuQXJlYVNpemUiLCJfaW1hZ2VzVG9BcHBlbmRQb29sIiwiX2NvbnRyb2xsZXJEZWZhdWx0T3B0aW9ucyIsImVycm9yTXNnIiwiZm9yY2VQcm9ncmVzc2l2ZUxvYWRpbmciLCJfaW5pdGlhbElzTG9vcCIsIl9nZXRaZXJvQm91bmRzIiwiX2NhbGN1bGF0ZVNpbmdsZUl0ZW1QYW5Cb3VuZHMiLCJyZWFsUGFuRWxlbWVudFciLCJyZWFsUGFuRWxlbWVudEgiLCJpc0luaXRpYWwiLCJoUmF0aW8iLCJ2UmF0aW8iLCJfYXBwZW5kSW1hZ2UiLCJiYXNlRGl2IiwicHJldmVudEFuaW1hdGlvbiIsImtlZXBQbGFjZWhvbGRlciIsImltYWdlQXBwZW5kZWQiLCJwbGFjZWhvbGRlciIsIl9wcmVsb2FkSW1hZ2UiLCJsb2FkQ29tcGxldGUiLCJvbmxvYWQiLCJvbmVycm9yIiwiX2NoZWNrRm9yRXJyb3IiLCJjbGVhblVwIiwibWF4UmVzIiwibGFzdENoaWxkIiwiX2FwcGVuZEltYWdlc1Bvb2wiLCJwb29sSXRlbSIsImNsZWFyUGxhY2Vob2xkZXIiLCJsYXp5TG9hZEl0ZW0iLCJpbml0Q29udHJvbGxlciIsImdldEl0ZW1BdCIsImlzTmV4dCIsInBsYWNlaG9sZGVyQ2xhc3NOYW1lIiwibXNyYyIsInRhcFRpbWVyIiwidGFwUmVsZWFzZVBvaW50IiwiX2Rpc3BhdGNoVGFwRXZlbnQiLCJvcmlnRXZlbnQiLCJlRGV0YWlsIiwiaW5pdEN1c3RvbUV2ZW50IiwiaW5pdFRhcCIsIm9uVGFwU3RhcnQiLCJvblRhcFJlbGVhc2UiLCJwMCIsImNsaWNrZWRUYWdOYW1lIiwiX3doZWVsRGVsdGEiLCJpbml0RGVza3RvcFpvb20iLCJzZXR1cERlc2t0b3Bab29tIiwiZXZlbnRzIiwiaGFuZGxlTW91c2VXaGVlbCIsIm1vdXNlWm9vbWVkSW4iLCJoYXNEcmFnZ2luZ0NsYXNzIiwidXBkYXRlWm9vbWFibGUiLCJyZW1vdmVEcmFnZ2luZ0NsYXNzIiwiZGVsdGFZIiwiZGVsdGFNb2RlIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJuZXdQYW5YIiwibmV3UGFuWSIsImRvdWJsZVRhcFpvb21MZXZlbCIsInpvb21PdXQiLCJfaGlzdG9yeURlZmF1bHRPcHRpb25zIiwiZ2FsbGVyeVVJRCIsIl9oaXN0b3J5VXBkYXRlVGltZW91dCIsIl9oYXNoQ2hhbmdlVGltZW91dCIsIl9oYXNoQW5pbUNoZWNrVGltZW91dCIsIl9oYXNoQ2hhbmdlZEJ5U2NyaXB0IiwiX2hhc2hDaGFuZ2VkQnlIaXN0b3J5IiwiX2hhc2hSZXNldGVkIiwiX2luaXRpYWxIYXNoIiwiX2hpc3RvcnlDaGFuZ2VkIiwiX2Nsb3NlZEZyb21VUkwiLCJfdXJsQ2hhbmdlZE9uY2UiLCJfd2luZG93TG9jIiwiX3N1cHBvcnRzUHVzaFN0YXRlIiwiX2dldEhhc2giLCJzdWJzdHJpbmciLCJfY2xlYW5IaXN0b3J5VGltZW91dHMiLCJfcGFyc2VJdGVtSW5kZXhGcm9tVVJMIiwicGFyYW1zIiwidmFycyIsInBhaXIiLCJnYWxsZXJ5UElEcyIsInNlYXJjaGZvciIsInBpZCIsIl91cGRhdGVIYXNoIiwibmV3SGFzaCIsIm5ld1VSTCIsImluaXRIaXN0b3J5IiwidXBkYXRlVVJMIiwib25IYXNoQ2hhbmdlIiwicmV0dXJuVG9PcmlnaW5hbCIsImJhY2siLCJzZWFyY2giLCJwbHlyIiwiZnVsbHNjcmVlbiIsImRlYnVnIiwiYXV0b3BsYXkiLCJzZWVrVGltZSIsInZvbHVtZSIsInZvbHVtZU1pbiIsInZvbHVtZU1heCIsInZvbHVtZVN0ZXAiLCJkaXNwbGF5RHVyYXRpb24iLCJsb2FkU3ByaXRlIiwiaWNvblByZWZpeCIsImljb25VcmwiLCJjbGlja1RvUGxheSIsInNob3dQb3N0ZXJPbkVuZCIsImRpc2FibGVDb250ZXh0TWVudSIsImtleWJvYXJkU2hvcmN1dHMiLCJmb2N1c2VkIiwiZ2xvYmFsIiwidG9vbHRpcHMiLCJjb250cm9scyIsInNlZWsiLCJzZWxlY3RvcnMiLCJodG1sNSIsImVtYmVkIiwiZWRpdGFibGUiLCJidXR0b25zIiwicGxheSIsInJld2luZCIsImZvcndhcmQiLCJtdXRlIiwiY2FwdGlvbnMiLCJwcm9ncmVzcyIsInBsYXllZCIsImN1cnJlbnRUaW1lIiwicmVhZHkiLCJ2aWRlb1dyYXBwZXIiLCJlbWJlZFdyYXBwZXIiLCJzdG9wcGVkIiwicGxheWluZyIsIm11dGVkIiwidG9vbHRpcCIsImhpZGRlbiIsImlzSW9zIiwiaXNUb3VjaCIsImFjdGl2ZSIsInRhYkZvY3VzIiwiZGVmYXVsdEFjdGl2ZSIsImZhbGxiYWNrIiwiYWxsb3dBdWRpbyIsInN0b3JhZ2UiLCJpMThuIiwiYnVmZmVyZWQiLCJ0b2dnbGVNdXRlIiwidG9nZ2xlQ2FwdGlvbnMiLCJ0b2dnbGVGdWxsc2NyZWVuIiwiZnJhbWVUaXRsZSIsInVybHMiLCJzb3VuZGNsb3VkIiwibG9nUHJlZml4IiwiX2Jyb3dzZXJTbmlmZiIsImFwcE5hbWUiLCJmdWxsVmVyc2lvbiIsIm1ham9yVmVyc2lvbiIsIm5hbWVPZmZzZXQiLCJ2ZXJPZmZzZXQiLCJpeCIsImlzSUUiLCJpc0ZpcmVmb3giLCJpc0Nocm9tZSIsImlzU2FmYXJpIiwiX3N1cHBvcnRNaW1lIiwibWltZVR5cGUiLCJjYW5QbGF5VHlwZSIsIl9pbmplY3RTY3JpcHQiLCJzb3VyY2UiLCJmaXJzdFNjcmlwdFRhZyIsIl9pbkFycmF5IiwiaGF5c3RhY2siLCJuZWVkbGUiLCJfcmVwbGFjZUFsbCIsIl93cmFwIiwiZWxlbWVudHMiLCJjaGlsZCIsImNsb25lTm9kZSIsInNpYmxpbmciLCJfcmVtb3ZlIiwiX3ByZXBlbmRDaGlsZCIsIl9zZXRBdHRyaWJ1dGVzIiwiX2lzIiwiYm9vbGVhbiIsIl9pbnNlcnRFbGVtZW50IiwiX2dldENsYXNzbmFtZSIsInNlbGVjdG9yIiwic3RhdGUiLCJjbGFzc0xpc3QiLCJfaGFzQ2xhc3MiLCJfbWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiX3Byb3h5TGlzdGVuZXIiLCJldmVudE5hbWUiLCJ1c2VyTGlzdGVuZXIiLCJkZWZhdWx0TGlzdGVuZXIiLCJ1c2VDYXB0dXJlIiwiX29uIiwiX3RvZ2dsZUxpc3RlbmVyIiwiZXZlbnRMaXN0IiwiTm9kZUxpc3QiLCJOb2RlIiwiX2V2ZW50IiwiYnViYmxlcyIsInByb3BlcnRpZXMiLCJDdXN0b21FdmVudCIsIl90b2dnbGVTdGF0ZSIsIl9nZXRQZXJjZW50YWdlIiwiX2V4dGVuZCIsIm9iamVjdHMiLCJkZXN0aW5hdGlvbiIsInByb3BlcnR5Iiwib2JqZWN0IiwiTnVtYmVyIiwibm9kZUxpc3QiLCJodG1sRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiZnVuY3Rpb24iLCJfcGFyc2VZb3VUdWJlSWQiLCJyZWdleCIsIiQyIiwiX3BhcnNlVmltZW9JZCIsIl9mdWxsc2NyZWVuIiwic3VwcG9ydHNGdWxsU2NyZWVuIiwiaXNGdWxsU2NyZWVuIiwicmVxdWVzdEZ1bGxTY3JlZW4iLCJjYW5jZWxGdWxsU2NyZWVuIiwiZnVsbFNjcmVlbkV2ZW50TmFtZSIsInByZWZpeCIsImJyb3dzZXJQcmVmaXhlcyIsImlsIiwibXNGdWxsc2NyZWVuRW5hYmxlZCIsImZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJfc3RvcmFnZSIsInN1cHBvcnRlZCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwicmVtb3ZlSXRlbSIsIlBseXIiLCJjb25maWciLCJ0aW1lcnMiLCJvcmlnaW5hbCIsIl90cmlnZ2VyRXZlbnQiLCJfY29uc29sZSIsIl9sb2ciLCJfd2FybiIsIl9nZXRJY29uVXJsIiwiYWJzb2x1dGUiLCJicm93c2VyIiwiX2J1aWxkQ29udHJvbHMiLCJpY29uUGF0aCIsIl9zZXR1cEZ1bGxzY3JlZW4iLCJmdWxsIiwibmF0aXZlU3VwcG9ydCIsIl9pbkZyYW1lIiwiX2ZvY3VzVHJhcCIsIl9zZXR1cENhcHRpb25zIiwiX2dldEVsZW1lbnQiLCJ2aWRlb0NvbnRhaW5lciIsImluc2VydEFkamFjZW50SFRNTCIsInVzaW5nVGV4dFRyYWNrcyIsInRleHRUcmFja3MiLCJjYXB0aW9uU3JjIiwia2luZCIsImNoaWxkTm9kZXMiLCJjYXB0aW9uRXhpc3RzIiwidHJhY2tzIiwibW9kZSIsIl9zaG93Q2FwdGlvbnMiLCJ0cmFjayIsImFjdGl2ZUN1ZXMiLCJfc2V0Q2FwdGlvbiIsImdldEN1ZUFzSFRNTCIsImN1cnJlbnRDYXB0aW9uIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiY2FwdGlvbiIsInJlc3BvbnNlVGV4dCIsImxpbmVTZXBhcmF0b3IiLCJyIiwic2VuZCIsInJlZHJhdyIsIl9zZWVrTWFudWFsQ2FwdGlvbnMiLCJfdGltZWNvZGVDb21tb24iLCJ0YyIsInRjcGFpciIsIl9zdWJUY1NlY3MiLCJfdGltZWNvZGVNaW4iLCJfdGltZWNvZGVNYXgiLCJ0YzEiLCJ0YzIiLCJzZWNvbmRzIiwiZmxvb3IiLCJzdWJjb3VudCIsImNhcHRpb25zRW5hYmxlZCIsIl9nZXRFbGVtZW50cyIsInRhYmJhYmxlcyIsIl9jaGVja0ZvY3VzIiwiX2luc2VydENoaWxkRWxlbWVudHMiLCJfaW5qZWN0Q29udHJvbHMiLCJxdWVyeVNlbGVjdG9yIiwiX2ZpbmRFbGVtZW50cyIsImJhciIsIl90b2dnbGVOYXRpdmVDb250cm9scyIsIl90b2dnbGVTdHlsZUhvb2siLCJfc2V0VGl0bGUiLCJfc2V0dXBTdG9yYWdlIiwiX3VwZGF0ZVN0b3JhZ2UiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJfc2V0dXBNZWRpYSIsIm9udGFpbmVyIiwiX3NldHVwRW1iZWQiLCJtZWRpYUlkIiwiZW1iZWRJZCIsImNvbnRhaW5lcnMiLCJZVCIsIl95b3VUdWJlUmVhZHkiLCJvbllvdVR1YmVSZWFkeUNhbGxiYWNrcyIsIm9uWW91VHViZUlmcmFtZUFQSVJlYWR5IiwiVmltZW8iLCJ2aW1lb1RpbWVyIiwiX3ZpbWVvUmVhZHkiLCJzb3VuZENsb3VkIiwiU0MiLCJzb3VuZENsb3VkVGltZXIiLCJfc291bmRjbG91ZFJlYWR5IiwiX2VtYmVkUmVhZHkiLCJfc2V0dXBJbnRlcmZhY2UiLCJfcmVhZHkiLCJ2aWRlb0lkIiwiUGxheWVyIiwicGxheWVyVmFycyIsInJlbCIsInNob3dpbmZvIiwiaXZfbG9hZF9wb2xpY3kiLCJjY19sb2FkX3BvbGljeSIsImNjX2xhbmdfcHJlZiIsIndtb2RlIiwibW9kZXN0YnJhbmRpbmciLCJkaXNhYmxla2IiLCJvcmlnaW4iLCJjb2RlIiwicGxheVZpZGVvIiwicGF1c2VkIiwicGF1c2VWaWRlbyIsInN0b3BWaWRlbyIsImdldER1cmF0aW9uIiwiaXNNdXRlZCIsImdldFZpZGVvRGF0YSIsImJ1ZmZlcmluZyIsImdldFZpZGVvTG9hZGVkRnJhY3Rpb24iLCJsYXN0QnVmZmVyZWQiLCJzZWVraW5nIiwiZ2V0Q3VycmVudFRpbWUiLCJieWxpbmUiLCJ0aGVuIiwiV2lkZ2V0IiwiRXZlbnRzIiwiUkVBRFkiLCJzZWVrVG8iLCJnZXRQb3NpdGlvbiIsIlBMQVkiLCJQQVVTRSIsIlBMQVlfUFJPR1JFU1MiLCJjdXJyZW50UG9zaXRpb24iLCJMT0FEX1BST0dSRVNTIiwibG9hZFByb2dyZXNzIiwiRklOSVNIIiwiX3BsYXkiLCJfcGF1c2UiLCJfdG9nZ2xlUGxheSIsIl9yZXdpbmQiLCJfc2VlayIsIl9mb3J3YXJkIiwidGFyZ2V0VGltZSIsIl9nZXREdXJhdGlvbiIsIl91cGRhdGVTZWVrRGlzcGxheSIsInNldEN1cnJlbnRUaW1lIiwibWVkaWFEdXJhdGlvbiIsIl9jaGVja1BsYXlpbmciLCJfdG9nZ2xlQ29udHJvbHMiLCJfc2F2ZVNjcm9sbFBvc2l0aW9uIiwiX3Jlc3RvcmVTY3JvbGxQb3NpdGlvbiIsInNjcm9sbFRvIiwiX3RvZ2dsZUZ1bGxzY3JlZW4iLCJfdG9nZ2xlTXV0ZSIsIl9zZXRWb2x1bWUiLCJzZXRWb2x1bWUiLCJfaW5jcmVhc2VWb2x1bWUiLCJfZGVjcmVhc2VWb2x1bWUiLCJfdXBkYXRlVm9sdW1lIiwiX3RvZ2dsZUNhcHRpb25zIiwiX2NoZWNrTG9hZGluZyIsIl91cGRhdGVQcm9ncmVzcyIsInByZXNzZWQiLCJfc2V0UHJvZ3Jlc3MiLCJfdXBkYXRlVGltZURpc3BsYXkiLCJzZWNzIiwibWlucyIsImhvdXJzIiwiZGlzcGxheUhvdXJzIiwiX2Rpc3BsYXlEdXJhdGlvbiIsIl91cGRhdGVTZWVrVG9vbHRpcCIsIl90aW1lVXBkYXRlIiwiY2xpZW50UmVjdCIsInZpc2libGUiLCJpc0VudGVyRnVsbHNjcmVlbiIsIl9zb3VyY2UiLCJfdXBkYXRlU291cmNlIiwiZ2V0VmlkZW9VcmwiLCJnZXRDdXJyZW50U291bmQiLCJwZXJtYWxpbmtfdXJsIiwiY3VycmVudFNyYyIsInNvdXJjZXMiLCJfY2FuY2VsUmVxdWVzdHMiLCJmaXJzdFNvdXJjZSIsImNyb3Nzb3JpZ2luIiwicG9zdGVyIiwibG9hZCIsIl9kZXN0cm95IiwiX3VwZGF0ZVBvc3RlciIsIl9jb250cm9sTGlzdGVuZXJzIiwiaW5wdXRFdmVudCIsInRvZ2dsZVBsYXkiLCJoYWRUYWJGb2N1cyIsImdldEZvY3VzRWxlbWVudCIsImdldEtleUNvZGUiLCJjaGVja1RhYkZvY3VzIiwiYWxsb3dlZCIsImNvdW50IiwiaGVsZCIsInNlZWtCeUtleSIsImludmVydGVkIiwid2Via2l0RGlyZWN0aW9uSW52ZXJ0ZWRGcm9tRGV2aWNlIiwiX21lZGlhTGlzdGVuZXJzIiwiZW5kZWQiLCJyZXN0b3JlIiwidW5sb2FkIiwicmVwbGFjZUNoaWxkIiwiYmFzaWMiLCJjb250cm9sc01pc3NpbmciLCJnZXRPcmlnaW5hbCIsImdldENvbnRhaW5lciIsImdldEVtYmVkIiwiZ2V0TWVkaWEiLCJnZXRUeXBlIiwiZ2V0Vm9sdW1lIiwiaXNSZWFkeSIsImlzTG9hZGluZyIsInRvZ2dsZUNvbnRyb2xzIiwic3VwcG9ydCIsImlzT2xkSUUiLCJpc0lwaG9uZSIsImF1ZGlvIiwidmlkZW8iLCJ0YXJnZXRzIiwicGxheWVycyIsImluc3RhbmNlcyIsImhvb2siLCJwbGF5ZXIiLCJsb2ciLCJjYW5jZWxhYmxlIiwiZXZ0IiwiRXZlbnQiLCJTbGljayIsImluc3RhbmNlVWlkIiwiXyIsImRhdGFTZXR0aW5ncyIsImFjY2Vzc2liaWxpdHkiLCJhZGFwdGl2ZUhlaWdodCIsImFwcGVuZEFycm93cyIsImFwcGVuZERvdHMiLCJhc05hdkZvciIsInByZXZBcnJvdyIsIm5leHRBcnJvdyIsImF1dG9wbGF5U3BlZWQiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsImNzc0Vhc2UiLCJjdXN0b21QYWdpbmciLCJzbGlkZXIiLCJkb3RzIiwiZG90c0NsYXNzIiwiZWRnZUZyaWN0aW9uIiwiZmFkZSIsImZvY3VzT25TZWxlY3QiLCJpbml0aWFsU2xpZGUiLCJsYXp5TG9hZCIsIm1vYmlsZUZpcnN0IiwicGF1c2VPbkZvY3VzIiwicGF1c2VPbkRvdHNIb3ZlciIsInJlc3BvbmRUbyIsInJlc3BvbnNpdmUiLCJyb3dzIiwic2xpZGUiLCJzbGlkZXNQZXJSb3ciLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsInN3aXBlVG9TbGlkZSIsInRvdWNoTW92ZSIsInRvdWNoVGhyZXNob2xkIiwidXNlQ1NTIiwidXNlVHJhbnNmb3JtIiwidmFyaWFibGVXaWR0aCIsInZlcnRpY2FsU3dpcGluZyIsIndhaXRGb3JBbmltYXRlIiwiaW5pdGlhbHMiLCJhbmltYXRpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwic2xpZGluZyIsInNsaWRlT2Zmc2V0Iiwic3dpcGVMZWZ0IiwiJGxpc3QiLCJ0b3VjaE9iamVjdCIsInRyYW5zZm9ybXNFbmFibGVkIiwidW5zbGlja2VkIiwiYWN0aXZlQnJlYWtwb2ludCIsImFuaW1UeXBlIiwiYW5pbVByb3AiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRTZXR0aW5ncyIsImNzc1RyYW5zaXRpb25zIiwiZm9jdXNzZWQiLCJpbnRlcnJ1cHRlZCIsInBvc2l0aW9uUHJvcCIsInJvd0NvdW50Iiwic2hvdWxkQ2xpY2siLCIkc2xpZGVyIiwiJHNsaWRlc0NhY2hlIiwidHJhbnNmb3JtVHlwZSIsInRyYW5zaXRpb25UeXBlIiwidmlzaWJpbGl0eUNoYW5nZSIsIndpbmRvd1dpZHRoIiwid2luZG93VGltZXIiLCJvcmlnaW5hbFNldHRpbmdzIiwibW96SGlkZGVuIiwid2Via2l0SGlkZGVuIiwicHJveHkiLCJhdXRvUGxheUNsZWFyIiwiYXV0b1BsYXlJdGVyYXRvciIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzZXRQb3NpdGlvbiIsInN3aXBlSGFuZGxlciIsImRyYWdIYW5kbGVyIiwia2V5SGFuZGxlciIsImh0bWxFeHByIiwicmVnaXN0ZXJCcmVha3BvaW50cyIsImFjdGl2YXRlQURBIiwiYWRkU2xpZGUiLCJzbGlja0FkZCIsImFkZEJlZm9yZSIsImluc2VydEFmdGVyIiwicmVpbml0IiwiYW5pbWF0ZUhlaWdodCIsInRhcmdldEhlaWdodCIsImFuaW1hdGVTbGlkZSIsInRhcmdldExlZnQiLCJhbmltUHJvcHMiLCJhbmltU3RhcnQiLCJjZWlsIiwiYXBwbHlUcmFuc2l0aW9uIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJnZXROYXZUYXJnZXQiLCJzbGljayIsInNsaWRlSGFuZGxlciIsInNsaWRlVG8iLCJidWlsZEFycm93cyIsImJ1aWxkRG90cyIsImRvdCIsImdldERvdENvdW50IiwiYnVpbGRPdXQiLCJ3cmFwQWxsIiwic2V0dXBJbmZpbml0ZSIsInVwZGF0ZURvdHMiLCJzZXRTbGlkZUNsYXNzZXMiLCJidWlsZFJvd3MiLCJjIiwibmV3U2xpZGVzIiwibnVtT2ZTbGlkZXMiLCJvcmlnaW5hbFNsaWRlcyIsInNsaWRlc1BlclNlY3Rpb24iLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwicm93IiwiY2hlY2tSZXNwb25zaXZlIiwiaW5pdGlhbCIsImZvcmNlVXBkYXRlIiwiYnJlYWtwb2ludCIsInRhcmdldEJyZWFrcG9pbnQiLCJyZXNwb25kVG9XaWR0aCIsInRyaWdnZXJCcmVha3BvaW50Iiwic2xpZGVyV2lkdGgiLCJ1bnNsaWNrIiwicmVmcmVzaCIsImRvbnRBbmltYXRlIiwiaW5kZXhPZmZzZXQiLCJ1bmV2ZW5PZmZzZXQiLCJjaGVja05hdmlnYWJsZSIsIm5hdmlnYWJsZXMiLCJwcmV2TmF2aWdhYmxlIiwiZ2V0TmF2aWdhYmxlSW5kZXhlcyIsImNsZWFuVXBFdmVudHMiLCJpbnRlcnJ1cHQiLCJ2aXNpYmlsaXR5IiwiY2xlYW5VcFNsaWRlRXZlbnRzIiwib3JpZW50YXRpb25DaGFuZ2UiLCJjbGVhblVwUm93cyIsImZhZGVTbGlkZSIsInNsaWRlSW5kZXgiLCJmYWRlU2xpZGVPdXQiLCJmaWx0ZXJTbGlkZXMiLCJzbGlja0ZpbHRlciIsImZvY3VzSGFuZGxlciIsIiRzZiIsImdldEN1cnJlbnQiLCJzbGlja0N1cnJlbnRTbGlkZSIsImJyZWFrUG9pbnQiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInZlcnRpY2FsT2Zmc2V0IiwidGFyZ2V0U2xpZGUiLCJvZmZzZXRMZWZ0IiwiZ2V0T3B0aW9uIiwic2xpY2tHZXRPcHRpb24iLCJpbmRleGVzIiwiZ2V0U2xpY2siLCJnZXRTbGlkZUNvdW50Iiwic2xpZGVzVHJhdmVyc2VkIiwic3dpcGVkU2xpZGUiLCJjZW50ZXJPZmZzZXQiLCJzbGlja0dvVG8iLCJjcmVhdGlvbiIsInNldFByb3BzIiwic3RhcnRMb2FkIiwibG9hZFNsaWRlciIsImluaXRpYWxpemVFdmVudHMiLCJ1cGRhdGVBcnJvd3MiLCJpbml0QURBIiwiaW5pdEFycm93RXZlbnRzIiwiaW5pdERvdEV2ZW50cyIsImluaXRTbGlkZUV2ZW50cyIsImFjdGlvbiIsImluaXRVSSIsImxvYWRSYW5nZSIsImNsb25lUmFuZ2UiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJsb2FkSW1hZ2VzIiwiaW1hZ2VzU2NvcGUiLCJpbWFnZVNvdXJjZSIsImltYWdlVG9Mb2FkIiwicHJvZ3Jlc3NpdmVMYXp5TG9hZCIsInNsaWNrTmV4dCIsInNsaWNrUGF1c2UiLCJzbGlja1BsYXkiLCJwb3N0U2xpZGUiLCJzbGlja1ByZXYiLCJ0cnlDb3VudCIsIiRpbWdzVG9Mb2FkIiwiaW5pdGlhbGl6aW5nIiwibGFzdFZpc2libGVJbmRleCIsImN1cnJlbnRCcmVha3BvaW50IiwicmVzcG9uc2l2ZVNldHRpbmdzIiwic29ydCIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInJlbW92ZUJlZm9yZSIsInJlbW92ZUFsbCIsInNldENTUyIsInBvc2l0aW9uUHJvcHMiLCJzZXREaW1lbnNpb25zIiwicGFkZGluZyIsInNldEZhZGUiLCJzZXRIZWlnaHQiLCJzZXRPcHRpb24iLCJzbGlja1NldE9wdGlvbiIsImJvZHlTdHlsZSIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwibXNUcmFuc2l0aW9uIiwiT1RyYW5zZm9ybSIsInBlcnNwZWN0aXZlUHJvcGVydHkiLCJ3ZWJraXRQZXJzcGVjdGl2ZSIsIk1velBlcnNwZWN0aXZlIiwid2Via2l0VHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJhbGxTbGlkZXMiLCJyZW1haW5kZXIiLCJpbmZpbml0ZUNvdW50IiwidGFyZ2V0RWxlbWVudCIsInN5bmMiLCJhbmltU2xpZGUiLCJvbGRTbGlkZSIsInNsaWRlTGVmdCIsIm5hdlRhcmdldCIsInN3aXBlRGlyZWN0aW9uIiwieERpc3QiLCJ5RGlzdCIsInN3aXBlQW5nbGUiLCJzdGFydFgiLCJjdXJYIiwic3RhcnRZIiwiY3VyWSIsImF0YW4yIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50Iiwib3JpZ2luYWxFdmVudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJlZGdlV2FzSGl0IiwiY3VyTGVmdCIsInBvc2l0aW9uT2Zmc2V0IiwidW5maWx0ZXJTbGlkZXMiLCJzbGlja1VuZmlsdGVyIiwiZnJvbUJyZWFrcG9pbnQiLCJmb290ZXIiLCJzdGlja3lGb290ZXIiLCJzcGxpdF91cmwiLCJwYWdlX251bSIsInRheG9ub215IiwidGVybV9pZCIsInBvc3RfdHlwZSIsIndpYXdfZ2V0X21vcmVfcG9zdHMiLCJqc192YXJzIiwiYWpheHVybCIsInBhZ2UiLCJleGNlcHRpb24iLCJhbGVydCIsImJ0biIsImJ0bl91cmwiLCJiZWZvcmUiLCJRdWlja0xvb2tJbml0Il0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsU0FBUCxHQUFvQixZQUFXOztBQUU3Qjs7QUFFQTs7Ozs7O0FBTUE7O0FBQ0EsTUFBSUMsYUFBYSxFQUFqQjs7QUFFQTtBQUNBLE1BQUlDLElBQUo7O0FBRUE7QUFDQSxNQUFJQyxTQUFTLEtBQWI7O0FBRUE7QUFDQSxNQUFJQyxlQUFlLElBQW5COztBQUVBO0FBQ0EsTUFBSUMsa0JBQWtCLENBQ3BCLFFBRG9CLEVBRXBCLFVBRm9CLEVBR3BCLE1BSG9CLEVBSXBCLE9BSm9CLEVBS3BCLE9BTG9CLEVBTXBCLE9BTm9CLEVBT3BCLFFBUG9CLENBQXRCOztBQVVBO0FBQ0E7QUFDQSxNQUFJQyxhQUFhQyxhQUFqQjs7QUFFQTtBQUNBO0FBQ0EsTUFBSUMsWUFBWSxDQUNkLEVBRGMsRUFDVjtBQUNKLElBRmMsRUFFVjtBQUNKLElBSGMsRUFHVjtBQUNKLElBSmMsRUFJVjtBQUNKLElBTGMsQ0FLVjtBQUxVLEdBQWhCOztBQVFBO0FBQ0EsTUFBSUMsV0FBVztBQUNiLGVBQVcsVUFERTtBQUViLGFBQVMsVUFGSTtBQUdiLGlCQUFhLE9BSEE7QUFJYixpQkFBYSxPQUpBO0FBS2IscUJBQWlCLFNB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Qjs7QUFFQSsyRCxzQkFqQmdCLENBaUJDOztBQUVsQjtBQUNDLE1BcEJELE1Bb0JPOztBQUVOO0FBQ0EzOUUsUUFBRSxpQkFBRixFQUFxQjA5RSxNQUFyQixDQUE2QixtRUFBN0I7O0FBRUE7QUFDQTE5RSxRQUFFLHFCQUFGLEVBQXlCdVEsSUFBekI7QUFFQTs7QUFFRDtBQUNBdlEsT0FBRSxlQUFGLEVBQW1CdVEsSUFBbkI7QUFDQTtBQWhESyxJQUFQO0FBa0RBO0FBQ0QsRUFsR0Q7QUFzR0EsQ0F4R0EsQ0F3R0NyVSxPQUFPMkwsTUF4R1IsQ0FBRCIsImZpbGUiOiJmb3VuZGF0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LndoYXRJbnB1dCA9IChmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICB2YXJpYWJsZXNcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICAvLyBhcnJheSBvZiBhY3RpdmVseSBwcmVzc2VkIGtleXNcbiAgdmFyIGFjdGl2ZUtleXMgPSBbXTtcblxuICAvLyBjYWNoZSBkb2N1bWVudC5ib2R5XG4gIHZhciBib2R5O1xuXG4gIC8vIGJvb2xlYW46IHRydWUgaWYgdG91Y2ggYnVmZmVyIHRpbWVyIGlzIHJ1bm5pbmdcbiAgdmFyIGJ1ZmZlciA9IGZhbHNlO1xuXG4gIC8vIHRoZSBsYXN0IHVzZWQgaW5wdXQgdHlwZVxuICB2YXIgY3VycmVudElucHV0ID0gbnVsbDtcblxuICAvLyBgaW5wdXRgIHR5cGVzIHRoYXQgZG9uJ3QgYWNjZXB0IHRleHRcbiAgdmFyIG5vblR5cGluZ0lucHV0cyA9IFtcbiAgICAnYnV0dG9uJyxcbiAgICAnY2hlY2tib3gnLFxuICAgICdmaWxlJyxcbiAgICAnaW1hZ2UnLFxuICAgICdyYWRpbycsXG4gICAgJ3Jlc2V0JyxcbiAgICAnc3VibWl0J1xuICBdO1xuXG4gIC8vIGRldGVjdCB2ZXJzaW9uIG9mIG1vdXNlIHdoZWVsIGV2ZW50IHRvIHVzZVxuICAvLyB2aWEgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3doZWVsXG4gIHZhciBtb3VzZVdoZWVsID0gZGV0ZWN0V2hlZWwoKTtcblxuICAvLyBsaXN0IG9mIG1vZGlmaWVyIGtleXMgY29tbW9ubHkgdXNlZCB3aXRoIHRoZSBtb3VzZSBhbmRcbiAgLy8gY2FuIGJlIHNhZmVseSBpZ25vcmVkIHRvIHByZXZlbnQgZmFsc2Uga2V5Ym9hcmQgZGV0ZWN0aW9uXG4gIHZhciBpZ25vcmVNYXAgPSBbXG4gICAgMTYsIC8vIHNoaWZ0XG4gICAgMTcsIC8vIGNvbnRyb2xcbiAgICAxOCwgLy8gYWx0XG4gICAgOTEsIC8vIFdpbmRvd3Mga2V5IC8gbGVmdCBBcHBsZSBjbWRcbiAgICA5MyAgLy8gV2luZG93cyBtZW51IC8gcmlnaHQgQXBwbGUgY21kXG4gIF07XG5cbiAgLy8gbWFwcGluZyBvZiBldmVudHMgdG8gaW5wdXQgdHlwZXNcbiAgdmFyIGlucHV0TWFwID0ge1xuICAgICdrZXlkb3duJzogJ2tleWJvYXJkJyxcbiAgICAna2V5dXAnOiAna2V5Ym9hcmQnLFxuICAgICdtb3VzZWRvd24nOiAnbW91c2UnLFxuICAgICdtb3VzZW1vdmUnOiAnbW91c2UnLFxuICAgICdNU1BvaW50ZXJEb3duJzogJ3BvaW50ZXInLFxuICAgICdNU1BvaW50ZXJNb3ZlJzogJ3BvaW50ZXInLFxuICAgICdwb2ludGVyZG93bic6ICdwb2ludGVyJyxcbiAgICAncG9pbnRlcm1vdmUnOiAncG9pbnRlcicsXG4gICAgJ3RvdWNoc3RhcnQnOiAndG91Y2gnXG4gIH07XG5cbiAgLy8gYWRkIGNvcnJlY3QgbW91c2Ugd2hlZWwgZXZlbnQgbWFwcGluZyB0byBgaW5wdXRNYXBgXG4gIGlucHV0TWFwW2RldGVjdFdoZWVsKCldID0gJ21vdXNlJztcblxuICAvLyBhcnJheSBvZiBhbGwgdXNlZCBpbnB1dCB0eXBlc1xuICB2YXIgaW5wdXRUeXBlcyA9IFtdO1xuXG4gIC8vIG1hcHBpbmcgb2Yga2V5IGNvZGVzIHRvIGEgY29tbW9uIG5hbWVcbiAgdmFyIGtleU1hcCA9IHtcbiAgICA5OiAndGFiJyxcbiAgICAxMzogJ2VudGVyJyxcbiAgICAxNjogJ3NoaWZ0JyxcbiAgICAyNzogJ2VzYycsXG4gICAgMzI6ICdzcGFjZScsXG4gICAgMzc6ICdsZWZ0JyxcbiAgICAzODogJ3VwJyxcbiAgICAzOTogJ3JpZ2h0JyxcbiAgICA0MDogJ2Rvd24nXG4gIH07XG5cbiAgLy8gbWFwIG9mIElFIDEwIHBvaW50ZXIgZXZlbnRzXG4gIHZhciBwb2ludGVyTWFwID0ge1xuICAgIDI6ICd0b3VjaCcsXG4gICAgMzogJ3RvdWNoJywgLy8gdHJlYXQgcGVuIGxpa2UgdG91Y2hcbiAgICA0OiAnbW91c2UnXG4gIH07XG5cbiAgLy8gdG91Y2ggYnVmZmVyIHRpbWVyXG4gIHZhciB0aW1lcjtcblxuXG4gIC8qXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb25zXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICovXG5cbiAgLy8gYWxsb3dzIGV2ZW50cyB0aGF0IGFyZSBhbHNvIHRyaWdnZXJlZCB0byBiZSBmaWx0ZXJlZCBvdXQgZm9yIGB0b3VjaHN0YXJ0YFxuICBmdW5jdGlvbiBldmVudEJ1ZmZlcigpIHtcbiAgICBjbGVhclRpbWVyKCk7XG4gICAgc2V0SW5wdXQoZXZlbnQpO1xuXG4gICAgYnVmZmVyID0gdHJ1ZTtcbiAgICB0aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgYnVmZmVyID0gZmFsc2U7XG4gICAgfSwgNjUwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlcmVkRXZlbnQoZXZlbnQpIHtcbiAgICBpZiAoIWJ1ZmZlcikgc2V0SW5wdXQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5CdWZmZXJlZEV2ZW50KGV2ZW50KSB7XG4gICAgY2xlYXJUaW1lcigpO1xuICAgIHNldElucHV0KGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyVGltZXIoKSB7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lcik7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRJbnB1dChldmVudCkge1xuICAgIHZhciBldmVudEtleSA9IGtleShldmVudCk7XG4gICAgdmFyIHZhbHVlID0gaW5wdXRNYXBbZXZlbnQudHlwZV07XG4gICAgaWYgKHZhbHVlID09PSAncG9pbnRlcicpIHZhbHVlID0gcG9pbnRlclR5cGUoZXZlbnQpO1xuXG4gICAgLy8gZG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHZhbHVlIG1hdGNoZXMgdGhlIGlucHV0IHR5cGUgYWxyZWFkeSBzZXRcbiAgICBpZiAoY3VycmVudElucHV0ICE9PSB2YWx1ZSkge1xuICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gdGFyZ2V0KGV2ZW50KTtcbiAgICAgIHZhciBldmVudFRhcmdldE5vZGUgPSBldmVudFRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIGV2ZW50VGFyZ2V0VHlwZSA9IChldmVudFRhcmdldE5vZGUgPT09ICdpbnB1dCcpID8gZXZlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0eXBlJykgOiBudWxsO1xuXG4gICAgICBpZiAoXG4gICAgICAgICgvLyBvbmx5IGlmIHRoZSB1c2VyIGZsYWcgdG8gYWxsb3cgdHlwaW5nIGluIGZvcm0gZmllbGRzIGlzbid0IHNldFxuICAgICAgICAhYm9keS5oYXNBdHRyaWJ1dGUoJ2RhdGEtd2hhdGlucHV0LWZvcm10eXBpbmcnKSAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgY3VycmVudElucHV0IGhhcyBhIHZhbHVlXG4gICAgICAgIGN1cnJlbnRJbnB1dCAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgdGhlIGlucHV0IGlzIGBrZXlib2FyZGBcbiAgICAgICAgdmFsdWUgPT09ICdrZXlib2FyZCcgJiZcblxuICAgICAgICAvLyBub3QgaWYgdGhlIGtleSBpcyBgVEFCYFxuICAgICAgICBrZXlNYXBbZXZlbnRLZXldICE9PSAndGFiJyAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgdGhlIHRhcmdldCBpcyBhIGZvcm0gaW5wdXQgdGhhdCBhY2NlcHRzIHRleHRcbiAgICAgICAgKFxuICAgICAgICAgICBldmVudFRhcmdldE5vZGUgPT09ICd0ZXh0YXJlYScgfHxcbiAgICAgICAgICAgZXZlbnRUYXJnZXROb2RlID09PSAnc2VsZWN0JyB8fFxuICAgICAgICAgICAoZXZlbnRUYXJnZXROb2RlID09PSAnaW5wdXQnICYmIG5vblR5cGluZ0lucHV0cy5pbmRleE9mKGV2ZW50VGFyZ2V0VHlwZSkgPCAwKVxuICAgICAgICApKSB8fCAoXG4gICAgICAgICAgLy8gaWdub3JlIG1vZGlmaWVyIGtleXNcbiAgICAgICAgICBpZ25vcmVNYXAuaW5kZXhPZihldmVudEtleSkgPiAtMVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgLy8gaWdub3JlIGtleWJvYXJkIHR5cGluZ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoSW5wdXQodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PT0gJ2tleWJvYXJkJykgbG9nS2V5cyhldmVudEtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBzd2l0Y2hJbnB1dChzdHJpbmcpIHtcbiAgICBjdXJyZW50SW5wdXQgPSBzdHJpbmc7XG4gICAgYm9keS5zZXRBdHRyaWJ1dGUoJ2RhdGEtd2hhdGlucHV0JywgY3VycmVudElucHV0KTtcblxuICAgIGlmIChpbnB1dFR5cGVzLmluZGV4T2YoY3VycmVudElucHV0KSA9PT0gLTEpIGlucHV0VHlwZXMucHVzaChjdXJyZW50SW5wdXQpO1xuICB9XG5cbiAgZnVuY3Rpb24ga2V5KGV2ZW50KSB7XG4gICAgcmV0dXJuIChldmVudC5rZXlDb2RlKSA/IGV2ZW50LmtleUNvZGUgOiBldmVudC53aGljaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRhcmdldChldmVudCkge1xuICAgIHJldHVybiBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50ZXJUeXBlKGV2ZW50KSB7XG4gICAgaWYgKHR5cGVvZiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBwb2ludGVyTWFwW2V2ZW50LnBvaW50ZXJUeXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChldmVudC5wb2ludGVyVHlwZSA9PT0gJ3BlbicpID8gJ3RvdWNoJyA6IGV2ZW50LnBvaW50ZXJUeXBlOyAvLyB0cmVhdCBwZW4gbGlrZSB0b3VjaFxuICAgIH1cbiAgfVxuXG4gIC8vIGtleWJvYXJkIGxvZ2dpbmdcbiAgZnVuY3Rpb24gbG9nS2V5cyhldmVudEtleSkge1xuICAgIGlmIChhY3RpdmVLZXlzLmluZGV4T2Yoa2V5TWFwW2V2ZW50S2V5XSkgPT09IC0xICYmIGtleU1hcFtldmVudEtleV0pIGFjdGl2ZUtleXMucHVzaChrZXlNYXBbZXZlbnRLZXldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuTG9nS2V5cyhldmVudCkge1xuICAgIHZhciBldmVudEtleSA9IGtleShldmVudCk7XG4gICAgdmFyIGFycmF5UG9zID0gYWN0aXZlS2V5cy5pbmRleE9mKGtleU1hcFtldmVudEtleV0pO1xuXG4gICAgaWYgKGFycmF5UG9zICE9PSAtMSkgYWN0aXZlS2V5cy5zcGxpY2UoYXJyYXlQb3MsIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcbiAgICBib2R5ID0gZG9jdW1lbnQuYm9keTtcblxuICAgIC8vIHBvaW50ZXIgZXZlbnRzIChtb3VzZSwgcGVuLCB0b3VjaClcbiAgICBpZiAod2luZG93LlBvaW50ZXJFdmVudCkge1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgIH0gZWxzZSBpZiAod2luZG93Lk1TUG9pbnRlckV2ZW50KSB7XG4gICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ01TUG9pbnRlckRvd24nLCBidWZmZXJlZEV2ZW50KTtcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyTW92ZScsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vIG1vdXNlIGV2ZW50c1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBidWZmZXJlZEV2ZW50KTtcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgYnVmZmVyZWRFdmVudCk7XG5cbiAgICAgIC8vIHRvdWNoIGV2ZW50c1xuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykge1xuICAgICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBldmVudEJ1ZmZlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbW91c2Ugd2hlZWxcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIobW91c2VXaGVlbCwgYnVmZmVyZWRFdmVudCk7XG5cbiAgICAvLyBrZXlib2FyZCBldmVudHNcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB1bkJ1ZmZlcmVkRXZlbnQpO1xuICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB1bkJ1ZmZlcmVkRXZlbnQpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdW5Mb2dLZXlzKTtcbiAgfVxuXG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICB1dGlsaXRpZXNcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICAvLyBkZXRlY3QgdmVyc2lvbiBvZiBtb3VzZSB3aGVlbCBldmVudCB0byB1c2VcbiAgLy8gdmlhIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy93aGVlbFxuICBmdW5jdGlvbiBkZXRlY3RXaGVlbCgpIHtcbiAgICByZXR1cm4gbW91c2VXaGVlbCA9ICdvbndoZWVsJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA/XG4gICAgICAnd2hlZWwnIDogLy8gTW9kZXJuIGJyb3dzZXJzIHN1cHBvcnQgXCJ3aGVlbFwiXG5cbiAgICAgIGRvY3VtZW50Lm9ubW91c2V3aGVlbCAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgJ21vdXNld2hlZWwnIDogLy8gV2Via2l0IGFuZCBJRSBzdXBwb3J0IGF0IGxlYXN0IFwibW91c2V3aGVlbFwiXG4gICAgICAgICdET01Nb3VzZVNjcm9sbCc7IC8vIGxldCdzIGFzc3VtZSB0aGF0IHJlbWFpbmluZyBicm93c2VycyBhcmUgb2xkZXIgRmlyZWZveFxuICB9XG5cblxuICAvKlxuICAgIC0tLS0tLS0tLS0tLS0tLVxuICAgIGluaXRcblxuICAgIGRvbid0IHN0YXJ0IHNjcmlwdCB1bmxlc3MgYnJvd3NlciBjdXRzIHRoZSBtdXN0YXJkLFxuICAgIGFsc28gcGFzc2VzIGlmIHBvbHlmaWxscyBhcmUgdXNlZFxuICAgIC0tLS0tLS0tLS0tLS0tLVxuICAqL1xuXG4gIGlmIChcbiAgICAnYWRkRXZlbnRMaXN0ZW5lcicgaW4gd2luZG93ICYmXG4gICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZcbiAgKSB7XG5cbiAgICAvLyBpZiB0aGUgZG9tIGlzIGFscmVhZHkgcmVhZHkgYWxyZWFkeSAoc2NyaXB0IHdhcyBwbGFjZWQgYXQgYm90dG9tIG9mIDxib2R5PilcbiAgICBpZiAoZG9jdW1lbnQuYm9keSkge1xuICAgICAgYmluZEV2ZW50cygpO1xuXG4gICAgLy8gb3RoZXJ3aXNlIHdhaXQgZm9yIHRoZSBkb20gdG8gbG9hZCAoc2NyaXB0IHdhcyBwbGFjZWQgaW4gdGhlIDxoZWFkPilcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGJpbmRFdmVudHMpO1xuICAgIH1cbiAgfVxuXG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICBhcGlcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICByZXR1cm4ge1xuXG4gICAgLy8gcmV0dXJucyBzdHJpbmc6IHRoZSBjdXJyZW50IGlucHV0IHR5cGVcbiAgICBhc2s6IGZ1bmN0aW9uKCkgeyByZXR1cm4gY3VycmVudElucHV0OyB9LFxuXG4gICAgLy8gcmV0dXJucyBhcnJheTogY3VycmVudGx5IHByZXNzZWQga2V5c1xuICAgIGtleXM6IGZ1bmN0aW9uKCkgeyByZXR1cm4gYWN0aXZlS2V5czsgfSxcblxuICAgIC8vIHJldHVybnMgYXJyYXk6IGFsbCB0aGUgZGV0ZWN0ZWQgaW5wdXQgdHlwZXNcbiAgICB0eXBlczogZnVuY3Rpb24oKSB7IHJldHVybiBpbnB1dFR5cGVzOyB9LFxuXG4gICAgLy8gYWNjZXB0cyBzdHJpbmc6IG1hbnVhbGx5IHNldCB0aGUgaW5wdXQgdHlwZVxuICAgIHNldDogc3dpdGNoSW5wdXRcbiAgfTtcblxufSgpKTtcbiIsIiFmdW5jdGlvbigkKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRk9VTkRBVElPTl9WRVJTSU9OID0gJzYuMi40JztcblxuLy8gR2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4vLyBUaGlzIGlzIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3csIG9yIHVzZWQgYXMgYSBtb2R1bGUgZm9yIEFNRC9Ccm93c2VyaWZ5XG52YXIgRm91bmRhdGlvbiA9IHtcbiAgdmVyc2lvbjogRk9VTkRBVElPTl9WRVJTSU9OLFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgaW5pdGlhbGl6ZWQgcGx1Z2lucy5cbiAgICovXG4gIF9wbHVnaW5zOiB7fSxcblxuICAvKipcbiAgICogU3RvcmVzIGdlbmVyYXRlZCB1bmlxdWUgaWRzIGZvciBwbHVnaW4gaW5zdGFuY2VzXG4gICAqL1xuICBfdXVpZHM6IFtdLFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBmb3IgUlRMIHN1cHBvcnRcbiAgICovXG4gIHJ0bDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gJCgnaHRtbCcpLmF0dHIoJ2RpcicpID09PSAncnRsJztcbiAgfSxcbiAgLyoqXG4gICAqIERlZmluZXMgYSBGb3VuZGF0aW9uIHBsdWdpbiwgYWRkaW5nIGl0IHRvIHRoZSBgRm91bmRhdGlvbmAgbmFtZXNwYWNlIGFuZCB0aGUgbGlzdCBvZiBwbHVnaW5zIHRvIGluaXRpYWxpemUgd2hlbiByZWZsb3dpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBUaGUgY29uc3RydWN0b3Igb2YgdGhlIHBsdWdpbi5cbiAgICovXG4gIHBsdWdpbjogZnVuY3Rpb24ocGx1Z2luLCBuYW1lKSB7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBhZGRpbmcgdG8gZ2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4gICAgLy8gRXhhbXBsZXM6IEZvdW5kYXRpb24uUmV2ZWFsLCBGb3VuZGF0aW9uLk9mZkNhbnZhc1xuICAgIHZhciBjbGFzc05hbWUgPSAobmFtZSB8fCBmdW5jdGlvbk5hbWUocGx1Z2luKSk7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBzdG9yaW5nIHRoZSBwbHVnaW4sIGFsc28gdXNlZCB0byBjcmVhdGUgdGhlIGlkZW50aWZ5aW5nIGRhdGEgYXR0cmlidXRlIGZvciB0aGUgcGx1Z2luXG4gICAgLy8gRXhhbXBsZXM6IGRhdGEtcmV2ZWFsLCBkYXRhLW9mZi1jYW52YXNcbiAgICB2YXIgYXR0ck5hbWUgID0gaHlwaGVuYXRlKGNsYXNzTmFtZSk7XG5cbiAgICAvLyBBZGQgdG8gdGhlIEZvdW5kYXRpb24gb2JqZWN0IGFuZCB0aGUgcGx1Z2lucyBsaXN0IChmb3IgcmVmbG93aW5nKVxuICAgIHRoaXMuX3BsdWdpbnNbYXR0ck5hbWVdID0gdGhpc1tjbGFzc05hbWVdID0gcGx1Z2luO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFBvcHVsYXRlcyB0aGUgX3V1aWRzIGFycmF5IHdpdGggcG9pbnRlcnMgdG8gZWFjaCBpbmRpdmlkdWFsIHBsdWdpbiBpbnN0YW5jZS5cbiAgICogQWRkcyB0aGUgYHpmUGx1Z2luYCBkYXRhLWF0dHJpYnV0ZSB0byBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgcGx1Z2lucyB0byBhbGxvdyB1c2Ugb2YgJChzZWxlY3RvcikuZm91bmRhdGlvbihtZXRob2QpIGNhbGxzLlxuICAgKiBBbHNvIGZpcmVzIHRoZSBpbml0aWFsaXphdGlvbiBldmVudCBmb3IgZWFjaCBwbHVnaW4sIGNvbnNvbGlkYXRpbmcgcmVwZXRpdGl2ZSBjb2RlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gYW4gaW5zdGFuY2Ugb2YgYSBwbHVnaW4sIHVzdWFsbHkgYHRoaXNgIGluIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHBsdWdpbiwgcGFzc2VkIGFzIGEgY2FtZWxDYXNlZCBzdHJpbmcuXG4gICAqIEBmaXJlcyBQbHVnaW4jaW5pdFxuICAgKi9cbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uKHBsdWdpbiwgbmFtZSl7XG4gICAgdmFyIHBsdWdpbk5hbWUgPSBuYW1lID8gaHlwaGVuYXRlKG5hbWUpIDogZnVuY3Rpb25OYW1lKHBsdWdpbi5jb25zdHJ1Y3RvcikudG9Mb3dlckNhc2UoKTtcbiAgICBwbHVnaW4udXVpZCA9IHRoaXMuR2V0WW9EaWdpdHMoNiwgcGx1Z2luTmFtZSk7XG5cbiAgICBpZighcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApKXsgcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWAsIHBsdWdpbi51dWlkKTsgfVxuICAgIGlmKCFwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKSl7IHBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicsIHBsdWdpbik7IH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAgICAgICAqL1xuICAgIHBsdWdpbi4kZWxlbWVudC50cmlnZ2VyKGBpbml0LnpmLiR7cGx1Z2luTmFtZX1gKTtcblxuICAgIHRoaXMuX3V1aWRzLnB1c2gocGx1Z2luLnV1aWQpO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFJlbW92ZXMgdGhlIHBsdWdpbnMgdXVpZCBmcm9tIHRoZSBfdXVpZHMgYXJyYXkuXG4gICAqIFJlbW92ZXMgdGhlIHpmUGx1Z2luIGRhdGEgYXR0cmlidXRlLCBhcyB3ZWxsIGFzIHRoZSBkYXRhLXBsdWdpbi1uYW1lIGF0dHJpYnV0ZS5cbiAgICogQWxzbyBmaXJlcyB0aGUgZGVzdHJveWVkIGV2ZW50IGZvciB0aGUgcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rlc3Ryb3llZFxuICAgKi9cbiAgdW5yZWdpc3RlclBsdWdpbjogZnVuY3Rpb24ocGx1Z2luKXtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IGh5cGhlbmF0ZShmdW5jdGlvbk5hbWUocGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykuY29uc3RydWN0b3IpKTtcblxuICAgIHRoaXMuX3V1aWRzLnNwbGljZSh0aGlzLl91dWlkcy5pbmRleE9mKHBsdWdpbi51dWlkKSwgMSk7XG4gICAgcGx1Z2luLiRlbGVtZW50LnJlbW92ZUF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApLnJlbW92ZURhdGEoJ3pmUGx1Z2luJylcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gZGVzdHJveWVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jZGVzdHJveWVkXG4gICAgICAgICAgICovXG4gICAgICAgICAgLnRyaWdnZXIoYGRlc3Ryb3llZC56Zi4ke3BsdWdpbk5hbWV9YCk7XG4gICAgZm9yKHZhciBwcm9wIGluIHBsdWdpbil7XG4gICAgICBwbHVnaW5bcHJvcF0gPSBudWxsOy8vY2xlYW4gdXAgc2NyaXB0IHRvIHByZXAgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQ2F1c2VzIG9uZSBvciBtb3JlIGFjdGl2ZSBwbHVnaW5zIHRvIHJlLWluaXRpYWxpemUsIHJlc2V0dGluZyBldmVudCBsaXN0ZW5lcnMsIHJlY2FsY3VsYXRpbmcgcG9zaXRpb25zLCBldGMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5zIC0gb3B0aW9uYWwgc3RyaW5nIG9mIGFuIGluZGl2aWR1YWwgcGx1Z2luIGtleSwgYXR0YWluZWQgYnkgY2FsbGluZyBgJChlbGVtZW50KS5kYXRhKCdwbHVnaW5OYW1lJylgLCBvciBzdHJpbmcgb2YgYSBwbHVnaW4gY2xhc3MgaS5lLiBgJ2Ryb3Bkb3duJ2BcbiAgICogQGRlZmF1bHQgSWYgbm8gYXJndW1lbnQgaXMgcGFzc2VkLCByZWZsb3cgYWxsIGN1cnJlbnRseSBhY3RpdmUgcGx1Z2lucy5cbiAgICovXG4gICByZUluaXQ6IGZ1bmN0aW9uKHBsdWdpbnMpe1xuICAgICB2YXIgaXNKUSA9IHBsdWdpbnMgaW5zdGFuY2VvZiAkO1xuICAgICB0cnl7XG4gICAgICAgaWYoaXNKUSl7XG4gICAgICAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgJCh0aGlzKS5kYXRhKCd6ZlBsdWdpbicpLl9pbml0KCk7XG4gICAgICAgICB9KTtcbiAgICAgICB9ZWxzZXtcbiAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHBsdWdpbnMsXG4gICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICBmbnMgPSB7XG4gICAgICAgICAgICdvYmplY3QnOiBmdW5jdGlvbihwbGdzKXtcbiAgICAgICAgICAgICBwbGdzLmZvckVhY2goZnVuY3Rpb24ocCl7XG4gICAgICAgICAgICAgICBwID0gaHlwaGVuYXRlKHApO1xuICAgICAgICAgICAgICAgJCgnW2RhdGEtJysgcCArJ10nKS5mb3VuZGF0aW9uKCdfaW5pdCcpO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICB9LFxuICAgICAgICAgICAnc3RyaW5nJzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICBwbHVnaW5zID0gaHlwaGVuYXRlKHBsdWdpbnMpO1xuICAgICAgICAgICAgICQoJ1tkYXRhLScrIHBsdWdpbnMgKyddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgJ3VuZGVmaW5lZCc6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgdGhpc1snb2JqZWN0J10oT2JqZWN0LmtleXMoX3RoaXMuX3BsdWdpbnMpKTtcbiAgICAgICAgICAgfVxuICAgICAgICAgfTtcbiAgICAgICAgIGZuc1t0eXBlXShwbHVnaW5zKTtcbiAgICAgICB9XG4gICAgIH1jYXRjaChlcnIpe1xuICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgfWZpbmFsbHl7XG4gICAgICAgcmV0dXJuIHBsdWdpbnM7XG4gICAgIH1cbiAgIH0sXG5cbiAgLyoqXG4gICAqIHJldHVybnMgYSByYW5kb20gYmFzZS0zNiB1aWQgd2l0aCBuYW1lc3BhY2luZ1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCAtIG51bWJlciBvZiByYW5kb20gYmFzZS0zNiBkaWdpdHMgZGVzaXJlZC4gSW5jcmVhc2UgZm9yIG1vcmUgcmFuZG9tIHN0cmluZ3MuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBuYW1lIG9mIHBsdWdpbiB0byBiZSBpbmNvcnBvcmF0ZWQgaW4gdWlkLCBvcHRpb25hbC5cbiAgICogQGRlZmF1bHQge1N0cmluZ30gJycgLSBpZiBubyBwbHVnaW4gbmFtZSBpcyBwcm92aWRlZCwgbm90aGluZyBpcyBhcHBlbmRlZCB0byB0aGUgdWlkLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHVuaXF1ZSBpZFxuICAgKi9cbiAgR2V0WW9EaWdpdHM6IGZ1bmN0aW9uKGxlbmd0aCwgbmFtZXNwYWNlKXtcbiAgICBsZW5ndGggPSBsZW5ndGggfHwgNjtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoTWF0aC5wb3coMzYsIGxlbmd0aCArIDEpIC0gTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDM2LCBsZW5ndGgpKSkudG9TdHJpbmcoMzYpLnNsaWNlKDEpICsgKG5hbWVzcGFjZSA/IGAtJHtuYW1lc3BhY2V9YCA6ICcnKTtcbiAgfSxcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgcGx1Z2lucyBvbiBhbnkgZWxlbWVudHMgd2l0aGluIGBlbGVtYCAoYW5kIGBlbGVtYCBpdHNlbGYpIHRoYXQgYXJlbid0IGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIC0galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50IHRvIGNoZWNrIGluc2lkZS4gQWxzbyBjaGVja3MgdGhlIGVsZW1lbnQgaXRzZWxmLCB1bmxlc3MgaXQncyB0aGUgYGRvY3VtZW50YCBvYmplY3QuXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBwbHVnaW5zIC0gQSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZS4gTGVhdmUgdGhpcyBvdXQgdG8gaW5pdGlhbGl6ZSBldmVyeXRoaW5nLlxuICAgKi9cbiAgcmVmbG93OiBmdW5jdGlvbihlbGVtLCBwbHVnaW5zKSB7XG5cbiAgICAvLyBJZiBwbHVnaW5zIGlzIHVuZGVmaW5lZCwganVzdCBncmFiIGV2ZXJ5dGhpbmdcbiAgICBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwbHVnaW5zID0gT2JqZWN0LmtleXModGhpcy5fcGx1Z2lucyk7XG4gICAgfVxuICAgIC8vIElmIHBsdWdpbnMgaXMgYSBzdHJpbmcsIGNvbnZlcnQgaXQgdG8gYW4gYXJyYXkgd2l0aCBvbmUgaXRlbVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z2lucyA9IFtwbHVnaW5zXTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcGx1Z2luXG4gICAgJC5lYWNoKHBsdWdpbnMsIGZ1bmN0aW9uKGksIG5hbWUpIHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwbHVnaW5cbiAgICAgIHZhciBwbHVnaW4gPSBfdGhpcy5fcGx1Z2luc1tuYW1lXTtcblxuICAgICAgLy8gTG9jYWxpemUgdGhlIHNlYXJjaCB0byBhbGwgZWxlbWVudHMgaW5zaWRlIGVsZW0sIGFzIHdlbGwgYXMgZWxlbSBpdHNlbGYsIHVubGVzcyBlbGVtID09PSBkb2N1bWVudFxuICAgICAgdmFyICRlbGVtID0gJChlbGVtKS5maW5kKCdbZGF0YS0nK25hbWUrJ10nKS5hZGRCYWNrKCdbZGF0YS0nK25hbWUrJ10nKTtcblxuICAgICAgLy8gRm9yIGVhY2ggcGx1Z2luIGZvdW5kLCBpbml0aWFsaXplIGl0XG4gICAgICAkZWxlbS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgJGVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWRpcCBvbiBwbHVnaW5zXG4gICAgICAgIGlmICgkZWwuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIGluaXRpYWxpemUgXCIrbmFtZStcIiBvbiBhbiBlbGVtZW50IHRoYXQgYWxyZWFkeSBoYXMgYSBGb3VuZGF0aW9uIHBsdWdpbi5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoJGVsLmF0dHIoJ2RhdGEtb3B0aW9ucycpKXtcbiAgICAgICAgICB2YXIgdGhpbmcgPSAkZWwuYXR0cignZGF0YS1vcHRpb25zJykuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uKGUsIGkpe1xuICAgICAgICAgICAgdmFyIG9wdCA9IGUuc3BsaXQoJzonKS5tYXAoZnVuY3Rpb24oZWwpeyByZXR1cm4gZWwudHJpbSgpOyB9KTtcbiAgICAgICAgICAgIGlmKG9wdFswXSkgb3B0c1tvcHRbMF1dID0gcGFyc2VWYWx1ZShvcHRbMV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAkZWwuZGF0YSgnemZQbHVnaW4nLCBuZXcgcGx1Z2luKCQodGhpcyksIG9wdHMpKTtcbiAgICAgICAgfWNhdGNoKGVyKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVyKTtcbiAgICAgICAgfWZpbmFsbHl7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0Rm5OYW1lOiBmdW5jdGlvbk5hbWUsXG4gIHRyYW5zaXRpb25lbmQ6IGZ1bmN0aW9uKCRlbGVtKXtcbiAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgICAndHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAnT1RyYW5zaXRpb24nOiAnb3RyYW5zaXRpb25lbmQnXG4gICAgfTtcbiAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICBlbmQ7XG5cbiAgICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKXtcbiAgICAgIGlmICh0eXBlb2YgZWxlbS5zdHlsZVt0XSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBlbmQgPSB0cmFuc2l0aW9uc1t0XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoZW5kKXtcbiAgICAgIHJldHVybiBlbmQ7XG4gICAgfWVsc2V7XG4gICAgICBlbmQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICRlbGVtLnRyaWdnZXJIYW5kbGVyKCd0cmFuc2l0aW9uZW5kJywgWyRlbGVtXSk7XG4gICAgICB9LCAxKTtcbiAgICAgIHJldHVybiAndHJhbnNpdGlvbmVuZCc7XG4gICAgfVxuICB9XG59O1xuXG5Gb3VuZGF0aW9uLnV0aWwgPSB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiBmb3IgYXBwbHlpbmcgYSBkZWJvdW5jZSBlZmZlY3QgdG8gYSBmdW5jdGlvbiBjYWxsLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhdCBlbmQgb2YgdGltZW91dC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5IC0gVGltZSBpbiBtcyB0byBkZWxheSB0aGUgY2FsbCBvZiBgZnVuY2AuXG4gICAqIEByZXR1cm5zIGZ1bmN0aW9uXG4gICAqL1xuICB0aHJvdHRsZTogZnVuY3Rpb24gKGZ1bmMsIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgIGlmICh0aW1lciA9PT0gbnVsbCkge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuLy8gVE9ETzogY29uc2lkZXIgbm90IG1ha2luZyB0aGlzIGEgalF1ZXJ5IGZ1bmN0aW9uXG4vLyBUT0RPOiBuZWVkIHdheSB0byByZWZsb3cgdnMuIHJlLWluaXRpYWxpemVcbi8qKlxuICogVGhlIEZvdW5kYXRpb24galF1ZXJ5IG1ldGhvZC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBtZXRob2QgLSBBbiBhY3Rpb24gdG8gcGVyZm9ybSBvbiB0aGUgY3VycmVudCBqUXVlcnkgb2JqZWN0LlxuICovXG52YXIgZm91bmRhdGlvbiA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBtZXRob2QsXG4gICAgICAkbWV0YSA9ICQoJ21ldGEuZm91bmRhdGlvbi1tcScpLFxuICAgICAgJG5vSlMgPSAkKCcubm8tanMnKTtcblxuICBpZighJG1ldGEubGVuZ3RoKXtcbiAgICAkKCc8bWV0YSBjbGFzcz1cImZvdW5kYXRpb24tbXFcIj4nKS5hcHBlbmRUbyhkb2N1bWVudC5oZWFkKTtcbiAgfVxuICBpZigkbm9KUy5sZW5ndGgpe1xuICAgICRub0pTLnJlbW92ZUNsYXNzKCduby1qcycpO1xuICB9XG5cbiAgaWYodHlwZSA9PT0gJ3VuZGVmaW5lZCcpey8vbmVlZHMgdG8gaW5pdGlhbGl6ZSB0aGUgRm91bmRhdGlvbiBvYmplY3QsIG9yIGFuIGluZGl2aWR1YWwgcGx1Z2luLlxuICAgIEZvdW5kYXRpb24uTWVkaWFRdWVyeS5faW5pdCgpO1xuICAgIEZvdW5kYXRpb24ucmVmbG93KHRoaXMpO1xuICB9ZWxzZSBpZih0eXBlID09PSAnc3RyaW5nJyl7Ly9hbiBpbmRpdmlkdWFsIG1ldGhvZCB0byBpbnZva2Ugb24gYSBwbHVnaW4gb3IgZ3JvdXAgb2YgcGx1Z2luc1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsvL2NvbGxlY3QgYWxsIHRoZSBhcmd1bWVudHMsIGlmIG5lY2Vzc2FyeVxuICAgIHZhciBwbHVnQ2xhc3MgPSB0aGlzLmRhdGEoJ3pmUGx1Z2luJyk7Ly9kZXRlcm1pbmUgdGhlIGNsYXNzIG9mIHBsdWdpblxuXG4gICAgaWYocGx1Z0NsYXNzICE9PSB1bmRlZmluZWQgJiYgcGx1Z0NsYXNzW21ldGhvZF0gIT09IHVuZGVmaW5lZCl7Ly9tYWtlIHN1cmUgYm90aCB0aGUgY2xhc3MgYW5kIG1ldGhvZCBleGlzdFxuICAgICAgaWYodGhpcy5sZW5ndGggPT09IDEpey8vaWYgdGhlcmUncyBvbmx5IG9uZSwgY2FsbCBpdCBkaXJlY3RseS5cbiAgICAgICAgICBwbHVnQ2xhc3NbbWV0aG9kXS5hcHBseShwbHVnQ2xhc3MsIGFyZ3MpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpLCBlbCl7Ly9vdGhlcndpc2UgbG9vcCB0aHJvdWdoIHRoZSBqUXVlcnkgY29sbGVjdGlvbiBhbmQgaW52b2tlIHRoZSBtZXRob2Qgb24gZWFjaFxuICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KCQoZWwpLmRhdGEoJ3pmUGx1Z2luJyksIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9ZWxzZXsvL2Vycm9yIGZvciBubyBjbGFzcyBvciBubyBtZXRob2RcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIldlJ3JlIHNvcnJ5LCAnXCIgKyBtZXRob2QgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBtZXRob2QgZm9yIFwiICsgKHBsdWdDbGFzcyA/IGZ1bmN0aW9uTmFtZShwbHVnQ2xhc3MpIDogJ3RoaXMgZWxlbWVudCcpICsgJy4nKTtcbiAgICB9XG4gIH1lbHNley8vZXJyb3IgZm9yIGludmFsaWQgYXJndW1lbnQgdHlwZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFdlJ3JlIHNvcnJ5LCAke3R5cGV9IGlzIG5vdCBhIHZhbGlkIHBhcmFtZXRlci4gWW91IG11c3QgdXNlIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWV0aG9kIHlvdSB3aXNoIHRvIGludm9rZS5gKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbndpbmRvdy5Gb3VuZGF0aW9uID0gRm91bmRhdGlvbjtcbiQuZm4uZm91bmRhdGlvbiA9IGZvdW5kYXRpb247XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbigpIHtcbiAgaWYgKCFEYXRlLm5vdyB8fCAhd2luZG93LkRhdGUubm93KVxuICAgIHdpbmRvdy5EYXRlLm5vdyA9IERhdGUubm93ID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcblxuICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcbiAgICAgIHZhciB2cCA9IHZlbmRvcnNbaV07XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZwKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9ICh3aW5kb3dbdnArJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvd1t2cCsnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ10pO1xuICB9XG4gIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sobGFzdFRpbWUgPSBuZXh0VGltZSk7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUaW1lIC0gbm93KTtcbiAgICB9O1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgfVxuICAvKipcbiAgICogUG9seWZpbGwgZm9yIHBlcmZvcm1hbmNlLm5vdywgcmVxdWlyZWQgYnkgckFGXG4gICAqL1xuICBpZighd2luZG93LnBlcmZvcm1hbmNlIHx8ICF3aW5kb3cucGVyZm9ybWFuY2Uubm93KXtcbiAgICB3aW5kb3cucGVyZm9ybWFuY2UgPSB7XG4gICAgICBzdGFydDogRGF0ZS5ub3coKSxcbiAgICAgIG5vdzogZnVuY3Rpb24oKXsgcmV0dXJuIERhdGUubm93KCkgLSB0aGlzLnN0YXJ0OyB9XG4gICAgfTtcbiAgfVxufSkoKTtcbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbihvVGhpcykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XG4gICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZScpO1xuICAgIH1cblxuICAgIHZhciBhQXJncyAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgZlRvQmluZCA9IHRoaXMsXG4gICAgICAgIGZOT1AgICAgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgICBmQm91bmQgID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGZUb0JpbmQuYXBwbHkodGhpcyBpbnN0YW5jZW9mIGZOT1BcbiAgICAgICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICAgICAgIDogb1RoaXMsXG4gICAgICAgICAgICAgICAgIGFBcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm90b3R5cGUpIHtcbiAgICAgIC8vIG5hdGl2ZSBmdW5jdGlvbnMgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZVxuICAgICAgZk5PUC5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcbiAgICB9XG4gICAgZkJvdW5kLnByb3RvdHlwZSA9IG5ldyBmTk9QKCk7XG5cbiAgICByZXR1cm4gZkJvdW5kO1xuICB9O1xufVxuLy8gUG9seWZpbGwgdG8gZ2V0IHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gaW4gSUU5XG5mdW5jdGlvbiBmdW5jdGlvbk5hbWUoZm4pIHtcbiAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvblxccyhbXihdezEsfSlcXCgvO1xuICAgIHZhciByZXN1bHRzID0gKGZ1bmNOYW1lUmVnZXgpLmV4ZWMoKGZuKS50b1N0cmluZygpKTtcbiAgICByZXR1cm4gKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGggPiAxKSA/IHJlc3VsdHNbMV0udHJpbSgpIDogXCJcIjtcbiAgfVxuICBlbHNlIGlmIChmbi5wcm90b3R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmbi5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBmbi5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZShzdHIpe1xuICBpZigvdHJ1ZS8udGVzdChzdHIpKSByZXR1cm4gdHJ1ZTtcbiAgZWxzZSBpZigvZmFsc2UvLnRlc3Qoc3RyKSkgcmV0dXJuIGZhbHNlO1xuICBlbHNlIGlmKCFpc05hTihzdHIgKiAxKSkgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cbi8vIENvbnZlcnQgUGFzY2FsQ2FzZSB0byBrZWJhYi1jYXNlXG4vLyBUaGFuayB5b3U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg5NTU1ODBcbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xufVxuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbkZvdW5kYXRpb24uQm94ID0ge1xuICBJbU5vdFRvdWNoaW5nWW91OiBJbU5vdFRvdWNoaW5nWW91LFxuICBHZXREaW1lbnNpb25zOiBHZXREaW1lbnNpb25zLFxuICBHZXRPZmZzZXRzOiBHZXRPZmZzZXRzXG59XG5cbi8qKlxuICogQ29tcGFyZXMgdGhlIGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudCB0byBhIGNvbnRhaW5lciBhbmQgZGV0ZXJtaW5lcyBjb2xsaXNpb24gZXZlbnRzIHdpdGggY29udGFpbmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdGVzdCBmb3IgY29sbGlzaW9ucy5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBwYXJlbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHVzZSBhcyBib3VuZGluZyBjb250YWluZXIuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGxyT25seSAtIHNldCB0byB0cnVlIHRvIGNoZWNrIGxlZnQgYW5kIHJpZ2h0IHZhbHVlcyBvbmx5LlxuICogQHBhcmFtIHtCb29sZWFufSB0Yk9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayB0b3AgYW5kIGJvdHRvbSB2YWx1ZXMgb25seS5cbiAqIEBkZWZhdWx0IGlmIG5vIHBhcmVudCBvYmplY3QgcGFzc2VkLCBkZXRlY3RzIGNvbGxpc2lvbnMgd2l0aCBgd2luZG93YC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgY29sbGlzaW9uIGZyZWUsIGZhbHNlIGlmIGEgY29sbGlzaW9uIGluIGFueSBkaXJlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIEltTm90VG91Y2hpbmdZb3UoZWxlbWVudCwgcGFyZW50LCBsck9ubHksIHRiT25seSkge1xuICB2YXIgZWxlRGltcyA9IEdldERpbWVuc2lvbnMoZWxlbWVudCksXG4gICAgICB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQ7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIHZhciBwYXJEaW1zID0gR2V0RGltZW5zaW9ucyhwYXJlbnQpO1xuXG4gICAgYm90dG9tID0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0IDw9IHBhckRpbXMuaGVpZ2h0ICsgcGFyRGltcy5vZmZzZXQudG9wKTtcbiAgICB0b3AgICAgPSAoZWxlRGltcy5vZmZzZXQudG9wID49IHBhckRpbXMub2Zmc2V0LnRvcCk7XG4gICAgbGVmdCAgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgPj0gcGFyRGltcy5vZmZzZXQubGVmdCk7XG4gICAgcmlnaHQgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgKyBlbGVEaW1zLndpZHRoIDw9IHBhckRpbXMud2lkdGggKyBwYXJEaW1zLm9mZnNldC5sZWZ0KTtcbiAgfVxuICBlbHNlIHtcbiAgICBib3R0b20gPSAoZWxlRGltcy5vZmZzZXQudG9wICsgZWxlRGltcy5oZWlnaHQgPD0gZWxlRGltcy53aW5kb3dEaW1zLmhlaWdodCArIGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wKTtcbiAgICB0b3AgICAgPSAoZWxlRGltcy5vZmZzZXQudG9wID49IGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wKTtcbiAgICBsZWZ0ICAgPSAoZWxlRGltcy5vZmZzZXQubGVmdCA+PSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQpO1xuICAgIHJpZ2h0ICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ICsgZWxlRGltcy53aWR0aCA8PSBlbGVEaW1zLndpbmRvd0RpbXMud2lkdGgpO1xuICB9XG5cbiAgdmFyIGFsbERpcnMgPSBbYm90dG9tLCB0b3AsIGxlZnQsIHJpZ2h0XTtcblxuICBpZiAobHJPbmx5KSB7XG4gICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0ID09PSB0cnVlO1xuICB9XG5cbiAgaWYgKHRiT25seSkge1xuICAgIHJldHVybiB0b3AgPT09IGJvdHRvbSA9PT0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhbGxEaXJzLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbn07XG5cbi8qKlxuICogVXNlcyBuYXRpdmUgbWV0aG9kcyB0byByZXR1cm4gYW4gb2JqZWN0IG9mIGRpbWVuc2lvbiB2YWx1ZXMuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5IHx8IEhUTUx9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IG9yIERPTSBlbGVtZW50IGZvciB3aGljaCB0byBnZXQgdGhlIGRpbWVuc2lvbnMuIENhbiBiZSBhbnkgZWxlbWVudCBvdGhlciB0aGF0IGRvY3VtZW50IG9yIHdpbmRvdy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gbmVzdGVkIG9iamVjdCBvZiBpbnRlZ2VyIHBpeGVsIHZhbHVlc1xuICogVE9ETyAtIGlmIGVsZW1lbnQgaXMgd2luZG93LCByZXR1cm4gb25seSB0aG9zZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIEdldERpbWVuc2lvbnMoZWxlbSwgdGVzdCl7XG4gIGVsZW0gPSBlbGVtLmxlbmd0aCA/IGVsZW1bMF0gOiBlbGVtO1xuXG4gIGlmIChlbGVtID09PSB3aW5kb3cgfHwgZWxlbSA9PT0gZG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJJ20gc29ycnksIERhdmUuIEknbSBhZnJhaWQgSSBjYW4ndCBkbyB0aGF0LlwiKTtcbiAgfVxuXG4gIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHBhclJlY3QgPSBlbGVtLnBhcmVudE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5SZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHdpblkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICB3aW5YID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICBvZmZzZXQ6IHtcbiAgICAgIHRvcDogcmVjdC50b3AgKyB3aW5ZLFxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luWFxuICAgIH0sXG4gICAgcGFyZW50RGltczoge1xuICAgICAgd2lkdGg6IHBhclJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHBhclJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogcGFyUmVjdC50b3AgKyB3aW5ZLFxuICAgICAgICBsZWZ0OiBwYXJSZWN0LmxlZnQgKyB3aW5YXG4gICAgICB9XG4gICAgfSxcbiAgICB3aW5kb3dEaW1zOiB7XG4gICAgICB3aWR0aDogd2luUmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogd2luUmVjdC5oZWlnaHQsXG4gICAgICBvZmZzZXQ6IHtcbiAgICAgICAgdG9wOiB3aW5ZLFxuICAgICAgICBsZWZ0OiB3aW5YXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2YgdG9wIGFuZCBsZWZ0IGludGVnZXIgcGl4ZWwgdmFsdWVzIGZvciBkeW5hbWljYWxseSByZW5kZXJlZCBlbGVtZW50cyxcbiAqIHN1Y2ggYXM6IFRvb2x0aXAsIFJldmVhbCwgYW5kIERyb3Bkb3duXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQgYmVpbmcgcG9zaXRpb25lZC5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBhbmNob3IgLSBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZWxlbWVudCdzIGFuY2hvciBwb2ludC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIGEgc3RyaW5nIHJlbGF0aW5nIHRvIHRoZSBkZXNpcmVkIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LCByZWxhdGl2ZSB0byBpdCdzIGFuY2hvclxuICogQHBhcmFtIHtOdW1iZXJ9IHZPZmZzZXQgLSBpbnRlZ2VyIHBpeGVsIHZhbHVlIG9mIGRlc2lyZWQgdmVydGljYWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoT2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIGhvcml6b250YWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNPdmVyZmxvdyAtIGlmIGEgY29sbGlzaW9uIGV2ZW50IGlzIGRldGVjdGVkLCBzZXRzIHRvIHRydWUgdG8gZGVmYXVsdCB0aGUgZWxlbWVudCB0byBmdWxsIHdpZHRoIC0gYW55IGRlc2lyZWQgb2Zmc2V0LlxuICogVE9ETyBhbHRlci9yZXdyaXRlIHRvIHdvcmsgd2l0aCBgZW1gIHZhbHVlcyBhcyB3ZWxsL2luc3RlYWQgb2YgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIEdldE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdykge1xuICB2YXIgJGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgJGFuY2hvckRpbXMgPSBhbmNob3IgPyBHZXREaW1lbnNpb25zKGFuY2hvcikgOiBudWxsO1xuXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCAtICgkZWxlRGltcy5oZWlnaHQgKyB2T2Zmc2V0KVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0LFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciB0b3AnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgKCRhbmNob3JEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMiksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCAtICgkZWxlRGltcy5oZWlnaHQgKyB2T2Zmc2V0KVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyIGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBpc092ZXJmbG93ID8gaE9mZnNldCA6ICgoJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAoJGFuY2hvckRpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXRcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciBsZWZ0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gKCRlbGVEaW1zLndpZHRoICsgaE9mZnNldCksXG4gICAgICAgIHRvcDogKCRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAoJGFuY2hvckRpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgcmlnaHQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAkYW5jaG9yRGltcy53aWR0aCArIGhPZmZzZXQgKyAxLFxuICAgICAgICB0b3A6ICgkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgKCRhbmNob3JEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0ICsgKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSxcbiAgICAgICAgdG9wOiAoJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wICsgKCRlbGVEaW1zLndpbmRvd0RpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZXZlYWwnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLSAkZWxlRGltcy53aWR0aCkgLyAyLFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCArIHZPZmZzZXRcbiAgICAgIH1cbiAgICBjYXNlICdyZXZlYWwgZnVsbCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0LFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcFxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCBib3R0b20nOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0IGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICRhbmNob3JEaW1zLndpZHRoICsgaE9mZnNldCAtICRlbGVEaW1zLndpZHRoLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9XG4gIH1cbn1cblxufShqUXVlcnkpO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBUaGlzIHV0aWwgd2FzIGNyZWF0ZWQgYnkgTWFyaXVzIE9sYmVydHogKlxuICogUGxlYXNlIHRoYW5rIE1hcml1cyBvbiBHaXRIdWIgL293bGJlcnR6ICpcbiAqIG9yIHRoZSB3ZWIgaHR0cDovL3d3dy5tYXJpdXNvbGJlcnR6LmRlLyAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBrZXlDb2RlcyA9IHtcbiAgOTogJ1RBQicsXG4gIDEzOiAnRU5URVInLFxuICAyNzogJ0VTQ0FQRScsXG4gIDMyOiAnU1BBQ0UnLFxuICAzNzogJ0FSUk9XX0xFRlQnLFxuICAzODogJ0FSUk9XX1VQJyxcbiAgMzk6ICdBUlJPV19SSUdIVCcsXG4gIDQwOiAnQVJST1dfRE9XTidcbn1cblxudmFyIGNvbW1hbmRzID0ge31cblxudmFyIEtleWJvYXJkID0ge1xuICBrZXlzOiBnZXRLZXlDb2RlcyhrZXlDb2RlcyksXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgKGtleWJvYXJkKSBldmVudCBhbmQgcmV0dXJucyBhIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgaXRzIGtleVxuICAgKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm4gU3RyaW5nIGtleSAtIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGtleSBwcmVzc2VkXG4gICAqL1xuICBwYXJzZUtleShldmVudCkge1xuICAgIHZhciBrZXkgPSBrZXlDb2Rlc1tldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlXSB8fCBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LndoaWNoKS50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChldmVudC5zaGlmdEtleSkga2V5ID0gYFNISUZUXyR7a2V5fWA7XG4gICAgaWYgKGV2ZW50LmN0cmxLZXkpIGtleSA9IGBDVFJMXyR7a2V5fWA7XG4gICAgaWYgKGV2ZW50LmFsdEtleSkga2V5ID0gYEFMVF8ke2tleX1gO1xuICAgIHJldHVybiBrZXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIGdpdmVuIChrZXlib2FyZCkgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb21wb25lbnQgLSBGb3VuZGF0aW9uIGNvbXBvbmVudCdzIG5hbWUsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcGFyYW0ge09iamVjdHN9IGZ1bmN0aW9ucyAtIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHRvIGJlIGV4ZWN1dGVkXG4gICAqL1xuICBoYW5kbGVLZXkoZXZlbnQsIGNvbXBvbmVudCwgZnVuY3Rpb25zKSB7XG4gICAgdmFyIGNvbW1hbmRMaXN0ID0gY29tbWFuZHNbY29tcG9uZW50XSxcbiAgICAgIGtleUNvZGUgPSB0aGlzLnBhcnNlS2V5KGV2ZW50KSxcbiAgICAgIGNtZHMsXG4gICAgICBjb21tYW5kLFxuICAgICAgZm47XG5cbiAgICBpZiAoIWNvbW1hbmRMaXN0KSByZXR1cm4gY29uc29sZS53YXJuKCdDb21wb25lbnQgbm90IGRlZmluZWQhJyk7XG5cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRMaXN0Lmx0ciA9PT0gJ3VuZGVmaW5lZCcpIHsgLy8gdGhpcyBjb21wb25lbnQgZG9lcyBub3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGx0ciBhbmQgcnRsXG4gICAgICAgIGNtZHMgPSBjb21tYW5kTGlzdDsgLy8gdXNlIHBsYWluIGxpc3RcbiAgICB9IGVsc2UgeyAvLyBtZXJnZSBsdHIgYW5kIHJ0bDogaWYgZG9jdW1lbnQgaXMgcnRsLCBydGwgb3ZlcndyaXRlcyBsdHIgYW5kIHZpY2UgdmVyc2FcbiAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIGNtZHMgPSAkLmV4dGVuZCh7fSwgY29tbWFuZExpc3QubHRyLCBjb21tYW5kTGlzdC5ydGwpO1xuXG4gICAgICAgIGVsc2UgY21kcyA9ICQuZXh0ZW5kKHt9LCBjb21tYW5kTGlzdC5ydGwsIGNvbW1hbmRMaXN0Lmx0cik7XG4gICAgfVxuICAgIGNvbW1hbmQgPSBjbWRzW2tleUNvZGVdO1xuXG4gICAgZm4gPSBmdW5jdGlvbnNbY29tbWFuZF07XG4gICAgaWYgKGZuICYmIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGVjdXRlIGZ1bmN0aW9uICBpZiBleGlzdHNcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGZuLmFwcGx5KCk7XG4gICAgICBpZiAoZnVuY3Rpb25zLmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy5oYW5kbGVkID09PSAnZnVuY3Rpb24nKSB7IC8vIGV4ZWN1dGUgZnVuY3Rpb24gd2hlbiBldmVudCB3YXMgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy5oYW5kbGVkKHJldHVyblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZ1bmN0aW9ucy51bmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy51bmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHsgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBub3QgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy51bmhhbmRsZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBmb2N1c2FibGUgZWxlbWVudHMgd2l0aGluIHRoZSBnaXZlbiBgJGVsZW1lbnRgXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICAgKiBAcmV0dXJuIHtqUXVlcnl9ICRmb2N1c2FibGUgLSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiBgJGVsZW1lbnRgXG4gICAqL1xuICBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSB7XG4gICAgcmV0dXJuICRlbGVtZW50LmZpbmQoJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdLCAqW2NvbnRlbnRlZGl0YWJsZV0nKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoISQodGhpcykuaXMoJzp2aXNpYmxlJykgfHwgJCh0aGlzKS5hdHRyKCd0YWJpbmRleCcpIDwgMCkgeyByZXR1cm4gZmFsc2U7IH0gLy9vbmx5IGhhdmUgdmlzaWJsZSBlbGVtZW50cyBhbmQgdGhvc2UgdGhhdCBoYXZlIGEgdGFiaW5kZXggZ3JlYXRlciBvciBlcXVhbCAwXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IG5hbWUgbmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcmV0dXJuIFN0cmluZyBjb21wb25lbnROYW1lXG4gICAqL1xuXG4gIHJlZ2lzdGVyKGNvbXBvbmVudE5hbWUsIGNtZHMpIHtcbiAgICBjb21tYW5kc1tjb21wb25lbnROYW1lXSA9IGNtZHM7XG4gIH1cbn1cblxuLypcbiAqIENvbnN0YW50cyBmb3IgZWFzaWVyIGNvbXBhcmluZy5cbiAqIENhbiBiZSB1c2VkIGxpa2UgRm91bmRhdGlvbi5wYXJzZUtleShldmVudCkgPT09IEZvdW5kYXRpb24ua2V5cy5TUEFDRVxuICovXG5mdW5jdGlvbiBnZXRLZXlDb2RlcyhrY3MpIHtcbiAgdmFyIGsgPSB7fTtcbiAgZm9yICh2YXIga2MgaW4ga2NzKSBrW2tjc1trY11dID0ga2NzW2tjXTtcbiAgcmV0dXJuIGs7XG59XG5cbkZvdW5kYXRpb24uS2V5Ym9hcmQgPSBLZXlib2FyZDtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vLyBEZWZhdWx0IHNldCBvZiBtZWRpYSBxdWVyaWVzXG5jb25zdCBkZWZhdWx0UXVlcmllcyA9IHtcbiAgJ2RlZmF1bHQnIDogJ29ubHkgc2NyZWVuJyxcbiAgbGFuZHNjYXBlIDogJ29ubHkgc2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSknLFxuICBwb3J0cmFpdCA6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICByZXRpbmEgOiAnb25seSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMi8xKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMmRwcHgpJ1xufTtcblxudmFyIE1lZGlhUXVlcnkgPSB7XG4gIHF1ZXJpZXM6IFtdLFxuXG4gIGN1cnJlbnQ6ICcnLFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgbWVkaWEgcXVlcnkgaGVscGVyLCBieSBleHRyYWN0aW5nIHRoZSBicmVha3BvaW50IGxpc3QgZnJvbSB0aGUgQ1NTIGFuZCBhY3RpdmF0aW5nIHRoZSBicmVha3BvaW50IHdhdGNoZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBleHRyYWN0ZWRTdHlsZXMgPSAkKCcuZm91bmRhdGlvbi1tcScpLmNzcygnZm9udC1mYW1pbHknKTtcbiAgICB2YXIgbmFtZWRRdWVyaWVzO1xuXG4gICAgbmFtZWRRdWVyaWVzID0gcGFyc2VTdHlsZVRvT2JqZWN0KGV4dHJhY3RlZFN0eWxlcyk7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gbmFtZWRRdWVyaWVzKSB7XG4gICAgICBpZihuYW1lZFF1ZXJpZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBzZWxmLnF1ZXJpZXMucHVzaCh7XG4gICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgIHZhbHVlOiBgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR7bmFtZWRRdWVyaWVzW2tleV19KWBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKTtcblxuICAgIHRoaXMuX3dhdGNoZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gaXMgYXQgbGVhc3QgYXMgd2lkZSBhcyBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGJyZWFrcG9pbnQgbWF0Y2hlcywgYGZhbHNlYCBpZiBpdCdzIHNtYWxsZXIuXG4gICAqL1xuICBhdExlYXN0KHNpemUpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmdldChzaXplKTtcblxuICAgIGlmIChxdWVyeSkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5KS5tYXRjaGVzO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgbWVkaWEgcXVlcnkgb2YgYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGdldC5cbiAgICogQHJldHVybnMge1N0cmluZ3xudWxsfSAtIFRoZSBtZWRpYSBxdWVyeSBvZiB0aGUgYnJlYWtwb2ludCwgb3IgYG51bGxgIGlmIHRoZSBicmVha3BvaW50IGRvZXNuJ3QgZXhpc3QuXG4gICAqL1xuICBnZXQoc2l6ZSkge1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5xdWVyaWVzKSB7XG4gICAgICBpZih0aGlzLnF1ZXJpZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuICAgICAgICBpZiAoc2l6ZSA9PT0gcXVlcnkubmFtZSkgcmV0dXJuIHF1ZXJ5LnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgbmFtZSBieSB0ZXN0aW5nIGV2ZXJ5IGJyZWFrcG9pbnQgYW5kIHJldHVybmluZyB0aGUgbGFzdCBvbmUgdG8gbWF0Y2ggKHRoZSBiaWdnZXN0IG9uZSkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBOYW1lIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICBfZ2V0Q3VycmVudFNpemUoKSB7XG4gICAgdmFyIG1hdGNoZWQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuXG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocXVlcnkudmFsdWUpLm1hdGNoZXMpIHtcbiAgICAgICAgbWF0Y2hlZCA9IHF1ZXJ5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbWF0Y2hlZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBtYXRjaGVkLm5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWN0aXZhdGVzIHRoZSBicmVha3BvaW50IHdhdGNoZXIsIHdoaWNoIGZpcmVzIGFuIGV2ZW50IG9uIHRoZSB3aW5kb3cgd2hlbmV2ZXIgdGhlIGJyZWFrcG9pbnQgY2hhbmdlcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfd2F0Y2hlcigpIHtcbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5tZWRpYXF1ZXJ5JywgKCkgPT4ge1xuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpLCBjdXJyZW50U2l6ZSA9IHRoaXMuY3VycmVudDtcblxuICAgICAgaWYgKG5ld1NpemUgIT09IGN1cnJlbnRTaXplKSB7XG4gICAgICAgIC8vIENoYW5nZSB0aGUgY3VycmVudCBtZWRpYSBxdWVyeVxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBuZXdTaXplO1xuXG4gICAgICAgIC8vIEJyb2FkY2FzdCB0aGUgbWVkaWEgcXVlcnkgY2hhbmdlIG9uIHRoZSB3aW5kb3dcbiAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIFtuZXdTaXplLCBjdXJyZW50U2l6ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG4vLyBtYXRjaE1lZGlhKCkgcG9seWZpbGwgLSBUZXN0IGEgQ1NTIG1lZGlhIHR5cGUvcXVlcnkgaW4gSlMuXG4vLyBBdXRob3JzICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLCBQYXVsIElyaXNoLCBOaWNob2xhcyBaYWthcywgRGF2aWQgS25pZ2h0LiBEdWFsIE1JVC9CU0QgbGljZW5zZVxud2luZG93Lm1hdGNoTWVkaWEgfHwgKHdpbmRvdy5tYXRjaE1lZGlhID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IG1hdGNoTWVkaXVtIGFwaSBzdWNoIGFzIElFIDkgYW5kIHdlYmtpdFxuICB2YXIgc3R5bGVNZWRpYSA9ICh3aW5kb3cuc3R5bGVNZWRpYSB8fCB3aW5kb3cubWVkaWEpO1xuXG4gIC8vIEZvciB0aG9zZSB0aGF0IGRvbid0IHN1cHBvcnQgbWF0Y2hNZWRpdW1cbiAgaWYgKCFzdHlsZU1lZGlhKSB7XG4gICAgdmFyIHN0eWxlICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgIHNjcmlwdCAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdLFxuICAgIGluZm8gICAgICAgID0gbnVsbDtcblxuICAgIHN0eWxlLnR5cGUgID0gJ3RleHQvY3NzJztcbiAgICBzdHlsZS5pZCAgICA9ICdtYXRjaG1lZGlhanMtdGVzdCc7XG5cbiAgICBzY3JpcHQgJiYgc2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBzY3JpcHQpO1xuXG4gICAgLy8gJ3N0eWxlLmN1cnJlbnRTdHlsZScgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnd2luZG93LmdldENvbXB1dGVkU3R5bGUnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICBpbmZvID0gKCdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cpICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN0eWxlLCBudWxsKSB8fCBzdHlsZS5jdXJyZW50U3R5bGU7XG5cbiAgICBzdHlsZU1lZGlhID0ge1xuICAgICAgbWF0Y2hNZWRpdW0obWVkaWEpIHtcbiAgICAgICAgdmFyIHRleHQgPSBgQG1lZGlhICR7bWVkaWF9eyAjbWF0Y2htZWRpYWpzLXRlc3QgeyB3aWR0aDogMXB4OyB9IH1gO1xuXG4gICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBpZiBtZWRpYSBxdWVyeSBpcyB0cnVlIG9yIGZhbHNlXG4gICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24obWVkaWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hlczogc3R5bGVNZWRpYS5tYXRjaE1lZGl1bShtZWRpYSB8fCAnYWxsJyksXG4gICAgICBtZWRpYTogbWVkaWEgfHwgJ2FsbCdcbiAgICB9O1xuICB9XG59KCkpO1xuXG4vLyBUaGFuayB5b3U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nXG5mdW5jdGlvbiBwYXJzZVN0eWxlVG9PYmplY3Qoc3RyKSB7XG4gIHZhciBzdHlsZU9iamVjdCA9IHt9O1xuXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgfVxuXG4gIHN0ciA9IHN0ci50cmltKCkuc2xpY2UoMSwgLTEpOyAvLyBicm93c2VycyByZS1xdW90ZSBzdHJpbmcgc3R5bGUgdmFsdWVzXG5cbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHlsZU9iamVjdCA9IHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbihyZXQsIHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gcGFydHNbMF07XG4gICAgdmFyIHZhbCA9IHBhcnRzWzFdO1xuICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuXG4gICAgLy8gbWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcbiAgICAvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG4gICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cbiAgICBpZiAoIXJldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXRba2V5XSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0W2tleV0pKSB7XG4gICAgICByZXRba2V5XS5wdXNoKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldFtrZXldID0gW3JldFtrZXldLCB2YWxdO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHN0eWxlT2JqZWN0O1xufVxuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogTW90aW9uIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tb3Rpb25cbiAqL1xuXG5jb25zdCBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG5jb25zdCBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuY29uc3QgTW90aW9uID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb3ZlKGR1cmF0aW9uLCBlbGVtLCBmbil7XG4gIHZhciBhbmltLCBwcm9nLCBzdGFydCA9IG51bGw7XG4gIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcblxuICBmdW5jdGlvbiBtb3ZlKHRzKXtcbiAgICBpZighc3RhcnQpIHN0YXJ0ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0LCB0cyk7XG4gICAgcHJvZyA9IHRzIC0gc3RhcnQ7XG4gICAgZm4uYXBwbHkoZWxlbSk7XG5cbiAgICBpZihwcm9nIDwgZHVyYXRpb24peyBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlLCBlbGVtKTsgfVxuICAgIGVsc2V7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbSk7XG4gICAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICB9XG4gIH1cbiAgYW5pbSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZSk7XG59XG5cbi8qKlxuICogQW5pbWF0ZXMgYW4gZWxlbWVudCBpbiBvciBvdXQgdXNpbmcgYSBDU1MgdHJhbnNpdGlvbiBjbGFzcy5cbiAqIEBmdW5jdGlvblxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbiAtIERlZmluZXMgaWYgdGhlIGFuaW1hdGlvbiBpcyBpbiBvciBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvciBIVE1MIG9iamVjdCB0byBhbmltYXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IGFuaW1hdGlvbiAtIENTUyBjbGFzcyB0byB1c2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIHRvIHJ1biB3aGVuIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC5cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gIGVsZW1lbnQgPSAkKGVsZW1lbnQpLmVxKDApO1xuXG4gIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICB2YXIgaW5pdENsYXNzID0gaXNJbiA/IGluaXRDbGFzc2VzWzBdIDogaW5pdENsYXNzZXNbMV07XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzSW4gPyBhY3RpdmVDbGFzc2VzWzBdIDogYWN0aXZlQ2xhc3Nlc1sxXTtcblxuICAvLyBTZXQgdXAgdGhlIGFuaW1hdGlvblxuICByZXNldCgpO1xuXG4gIGVsZW1lbnRcbiAgICAuYWRkQ2xhc3MoYW5pbWF0aW9uKVxuICAgIC5jc3MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhpbml0Q2xhc3MpO1xuICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgfSk7XG5cbiAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7XG4gICAgZWxlbWVudFxuICAgICAgLmNzcygndHJhbnNpdGlvbicsICcnKVxuICAgICAgLmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZChlbGVtZW50KSwgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhgJHtpbml0Q2xhc3N9ICR7YWN0aXZlQ2xhc3N9ICR7YW5pbWF0aW9ufWApO1xuICB9XG59XG5cbkZvdW5kYXRpb24uTW92ZSA9IE1vdmU7XG5Gb3VuZGF0aW9uLk1vdGlvbiA9IE1vdGlvbjtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBOZXN0ID0ge1xuICBGZWF0aGVyKG1lbnUsIHR5cGUgPSAnemYnKSB7XG4gICAgbWVudS5hdHRyKCdyb2xlJywgJ21lbnViYXInKTtcblxuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5hdHRyKHsncm9sZSc6ICdtZW51aXRlbSd9KSxcbiAgICAgICAgc3ViTWVudUNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudWAsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IGAke3N1Yk1lbnVDbGFzc30taXRlbWAsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudS1wYXJlbnRgO1xuXG4gICAgbWVudS5maW5kKCdhOmZpcnN0JykuYXR0cigndGFiaW5kZXgnLCAwKTtcblxuICAgIGl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICRzdWIgPSAkaXRlbS5jaGlsZHJlbigndWwnKTtcblxuICAgICAgaWYgKCRzdWIubGVuZ3RoKSB7XG4gICAgICAgICRpdGVtXG4gICAgICAgICAgLmFkZENsYXNzKGhhc1N1YkNsYXNzKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICRpdGVtLmNoaWxkcmVuKCdhOmZpcnN0JykudGV4dCgpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgJHN1YlxuICAgICAgICAgIC5hZGRDbGFzcyhgc3VibWVudSAke3N1Yk1lbnVDbGFzc31gKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdkYXRhLXN1Ym1lbnUnOiAnJyxcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICAgICAncm9sZSc6ICdtZW51J1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGl0ZW0ucGFyZW50KCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCkge1xuICAgICAgICAkaXRlbS5hZGRDbGFzcyhgaXMtc3VibWVudS1pdGVtICR7c3ViSXRlbUNsYXNzfWApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIEJ1cm4obWVudSwgdHlwZSkge1xuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpLFxuICAgICAgICBzdWJNZW51Q2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51YCxcbiAgICAgICAgc3ViSXRlbUNsYXNzID0gYCR7c3ViTWVudUNsYXNzfS1pdGVtYCxcbiAgICAgICAgaGFzU3ViQ2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51LXBhcmVudGA7XG5cbiAgICBtZW51XG4gICAgICAuZmluZCgnPmxpLCAubWVudSwgLm1lbnUgPiBsaScpXG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7c3ViTWVudUNsYXNzfSAke3N1Ykl0ZW1DbGFzc30gJHtoYXNTdWJDbGFzc30gaXMtc3VibWVudS1pdGVtIHN1Ym1lbnUgaXMtYWN0aXZlYClcbiAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyggICAgICBtZW51LmZpbmQoJy4nICsgc3ViTWVudUNsYXNzICsgJywgLicgKyBzdWJJdGVtQ2xhc3MgKyAnLCAuaGFzLXN1Ym1lbnUsIC5pcy1zdWJtZW51LWl0ZW0sIC5zdWJtZW51LCBbZGF0YS1zdWJtZW51XScpXG4gICAgLy8gICAgICAgICAgIC5yZW1vdmVDbGFzcyhzdWJNZW51Q2xhc3MgKyAnICcgKyBzdWJJdGVtQ2xhc3MgKyAnIGhhcy1zdWJtZW51IGlzLXN1Ym1lbnUtaXRlbSBzdWJtZW51JylcbiAgICAvLyAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3VibWVudScpKTtcbiAgICAvLyBpdGVtcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgLy8gICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgIC8vICAgICAgICRzdWIgPSAkaXRlbS5jaGlsZHJlbigndWwnKTtcbiAgICAvLyAgIGlmKCRpdGVtLnBhcmVudCgnW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpe1xuICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaXMtc3VibWVudS1pdGVtICcgKyBzdWJJdGVtQ2xhc3MpO1xuICAgIC8vICAgfVxuICAgIC8vICAgaWYoJHN1Yi5sZW5ndGgpe1xuICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaGFzLXN1Ym1lbnUnKTtcbiAgICAvLyAgICAgJHN1Yi5yZW1vdmVDbGFzcygnc3VibWVudSAnICsgc3ViTWVudUNsYXNzKS5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcbiAgfVxufVxuXG5Gb3VuZGF0aW9uLk5lc3QgPSBOZXN0O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmZ1bmN0aW9uIFRpbWVyKGVsZW0sIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sLy9vcHRpb25zIGlzIGFuIG9iamVjdCBmb3IgZWFzaWx5IGFkZGluZyBmZWF0dXJlcyBsYXRlci5cbiAgICAgIG5hbWVTcGFjZSA9IE9iamVjdC5rZXlzKGVsZW0uZGF0YSgpKVswXSB8fCAndGltZXInLFxuICAgICAgcmVtYWluID0gLTEsXG4gICAgICBzdGFydCxcbiAgICAgIHRpbWVyO1xuXG4gIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcblxuICB0aGlzLnJlc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICByZW1haW4gPSAtMTtcbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfVxuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgLy8gaWYoIWVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICByZW1haW4gPSByZW1haW4gPD0gMCA/IGR1cmF0aW9uIDogcmVtYWluO1xuICAgIGVsZW0uZGF0YSgncGF1c2VkJywgZmFsc2UpO1xuICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIGlmKG9wdGlvbnMuaW5maW5pdGUpe1xuICAgICAgICBfdGhpcy5yZXN0YXJ0KCk7Ly9yZXJ1biB0aGUgdGltZXIuXG4gICAgICB9XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9LCByZW1haW4pO1xuICAgIGVsZW0udHJpZ2dlcihgdGltZXJzdGFydC56Zi4ke25hbWVTcGFjZX1gKTtcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAvL2lmKGVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIHRydWUpO1xuICAgIHZhciBlbmQgPSBEYXRlLm5vdygpO1xuICAgIHJlbWFpbiA9IHJlbWFpbiAtIChlbmQgLSBzdGFydCk7XG4gICAgZWxlbS50cmlnZ2VyKGB0aW1lcnBhdXNlZC56Zi4ke25hbWVTcGFjZX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGltYWdlcyAtIEltYWdlKHMpIHRvIGNoZWNrIGlmIGxvYWRlZC5cbiAqIEBwYXJhbSB7RnVuY30gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gaW1hZ2UgaXMgZnVsbHkgbG9hZGVkLlxuICovXG5mdW5jdGlvbiBvbkltYWdlc0xvYWRlZChpbWFnZXMsIGNhbGxiYWNrKXtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgdW5sb2FkZWQgPSBpbWFnZXMubGVuZ3RoO1xuXG4gIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBpbWFnZXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5jb21wbGV0ZSkge1xuICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHRoaXMubmF0dXJhbFdpZHRoICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLm5hdHVyYWxXaWR0aCA+IDApIHtcbiAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJCh0aGlzKS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2luZ2xlSW1hZ2VMb2FkZWQoKSB7XG4gICAgdW5sb2FkZWQtLTtcbiAgICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG59XG5cbkZvdW5kYXRpb24uVGltZXIgPSBUaW1lcjtcbkZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQgPSBvbkltYWdlc0xvYWRlZDtcblxufShqUXVlcnkpO1xuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKldvcmsgaW5zcGlyZWQgYnkgbXVsdGlwbGUganF1ZXJ5IHN3aXBlIHBsdWdpbnMqKlxuLy8qKkRvbmUgYnkgWW9oYWkgQXJhcmF0ICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuKGZ1bmN0aW9uKCQpIHtcblxuICAkLnNwb3RTd2lwZSA9IHtcbiAgICB2ZXJzaW9uOiAnMS4wLjAnLFxuICAgIGVuYWJsZWQ6ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICBwcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gICAgbW92ZVRocmVzaG9sZDogNzUsXG4gICAgdGltZVRocmVzaG9sZDogMjAwXG4gIH07XG5cbiAgdmFyICAgc3RhcnRQb3NYLFxuICAgICAgICBzdGFydFBvc1ksXG4gICAgICAgIHN0YXJ0VGltZSxcbiAgICAgICAgZWxhcHNlZFRpbWUsXG4gICAgICAgIGlzTW92aW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHtcbiAgICAvLyAgYWxlcnQodGhpcyk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQpO1xuICAgIGlzTW92aW5nID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgaWYgKCQuc3BvdFN3aXBlLnByZXZlbnREZWZhdWx0KSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgIGlmKGlzTW92aW5nKSB7XG4gICAgICB2YXIgeCA9IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIHZhciB5ID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgdmFyIGR4ID0gc3RhcnRQb3NYIC0geDtcbiAgICAgIHZhciBkeSA9IHN0YXJ0UG9zWSAtIHk7XG4gICAgICB2YXIgZGlyO1xuICAgICAgZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcbiAgICAgIGlmKE1hdGguYWJzKGR4KSA+PSAkLnNwb3RTd2lwZS5tb3ZlVGhyZXNob2xkICYmIGVsYXBzZWRUaW1lIDw9ICQuc3BvdFN3aXBlLnRpbWVUaHJlc2hvbGQpIHtcbiAgICAgICAgZGlyID0gZHggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgIH1cbiAgICAgIC8vIGVsc2UgaWYoTWF0aC5hYnMoZHkpID49ICQuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gJC5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuICAgICAgLy8gICBkaXIgPSBkeSA+IDAgPyAnZG93bicgOiAndXAnO1xuICAgICAgLy8gfVxuICAgICAgaWYoZGlyKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25Ub3VjaEVuZC5jYWxsKHRoaXMpO1xuICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ3N3aXBlJywgZGlyKS50cmlnZ2VyKGBzd2lwZSR7ZGlyfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT0gMSkge1xuICAgICAgc3RhcnRQb3NYID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgc3RhcnRQb3NZID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgaXNNb3ZpbmcgPSB0cnVlO1xuICAgICAgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyICYmIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGVhcmRvd24oKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgfVxuXG4gICQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHsgc2V0dXA6IGluaXQgfTtcblxuICAkLmVhY2goWydsZWZ0JywgJ3VwJywgJ2Rvd24nLCAncmlnaHQnXSwgZnVuY3Rpb24gKCkge1xuICAgICQuZXZlbnQuc3BlY2lhbFtgc3dpcGUke3RoaXN9YF0gPSB7IHNldHVwOiBmdW5jdGlvbigpe1xuICAgICAgJCh0aGlzKS5vbignc3dpcGUnLCAkLm5vb3ApO1xuICAgIH0gfTtcbiAgfSk7XG59KShqUXVlcnkpO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIE1ldGhvZCBmb3IgYWRkaW5nIHBzdWVkbyBkcmFnIGV2ZW50cyB0byBlbGVtZW50cyAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuIWZ1bmN0aW9uKCQpe1xuICAkLmZuLmFkZFRvdWNoID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oaSxlbCl7XG4gICAgICAkKGVsKS5iaW5kKCd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsZnVuY3Rpb24oKXtcbiAgICAgICAgLy93ZSBwYXNzIHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QgYmVjYXVzZSB0aGUgalF1ZXJ5IGV2ZW50XG4gICAgICAgIC8vb2JqZWN0IGlzIG5vcm1hbGl6ZWQgdG8gdzNjIHNwZWNzIGFuZCBkb2VzIG5vdCBwcm92aWRlIHRoZSBUb3VjaExpc3RcbiAgICAgICAgaGFuZGxlVG91Y2goZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGFuZGxlVG91Y2ggPSBmdW5jdGlvbihldmVudCl7XG4gICAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIGZpcnN0ID0gdG91Y2hlc1swXSxcbiAgICAgICAgICBldmVudFR5cGVzID0ge1xuICAgICAgICAgICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgICAgICAgICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgdG91Y2hlbmQ6ICdtb3VzZXVwJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHlwZSA9IGV2ZW50VHlwZXNbZXZlbnQudHlwZV0sXG4gICAgICAgICAgc2ltdWxhdGVkRXZlbnRcbiAgICAgICAgO1xuXG4gICAgICBpZignTW91c2VFdmVudCcgaW4gd2luZG93ICYmIHR5cGVvZiB3aW5kb3cuTW91c2VFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IG5ldyB3aW5kb3cuTW91c2VFdmVudCh0eXBlLCB7XG4gICAgICAgICAgJ2J1YmJsZXMnOiB0cnVlLFxuICAgICAgICAgICdjYW5jZWxhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnc2NyZWVuWCc6IGZpcnN0LnNjcmVlblgsXG4gICAgICAgICAgJ3NjcmVlblknOiBmaXJzdC5zY3JlZW5ZLFxuICAgICAgICAgICdjbGllbnRYJzogZmlyc3QuY2xpZW50WCxcbiAgICAgICAgICAnY2xpZW50WSc6IGZpcnN0LmNsaWVudFlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMSwgZmlyc3Quc2NyZWVuWCwgZmlyc3Quc2NyZWVuWSwgZmlyc3QuY2xpZW50WCwgZmlyc3QuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAvKmxlZnQqLywgbnVsbCk7XG4gICAgICB9XG4gICAgICBmaXJzdC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7XG4gICAgfTtcbiAgfTtcbn0oalF1ZXJ5KTtcblxuXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipGcm9tIHRoZSBqUXVlcnkgTW9iaWxlIExpYnJhcnkqKlxuLy8qKm5lZWQgdG8gcmVjcmVhdGUgZnVuY3Rpb25hbGl0eSoqXG4vLyoqYW5kIHRyeSB0byBpbXByb3ZlIGlmIHBvc3NpYmxlKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4vKiBSZW1vdmluZyB0aGUgalF1ZXJ5IGZ1bmN0aW9uICoqKipcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4oZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkge1xuXG5cdHZhciAkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLFxuXHRcdC8vIHN1cHBvcnRUb3VjaCA9ICQubW9iaWxlLnN1cHBvcnQudG91Y2gsXG5cdFx0dG91Y2hTdGFydEV2ZW50ID0gJ3RvdWNoc3RhcnQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoc3RhcnRcIiA6IFwibW91c2Vkb3duXCIsXG5cdFx0dG91Y2hTdG9wRXZlbnQgPSAndG91Y2hlbmQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoZW5kXCIgOiBcIm1vdXNldXBcIixcblx0XHR0b3VjaE1vdmVFdmVudCA9ICd0b3VjaG1vdmUnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNobW92ZVwiIDogXCJtb3VzZW1vdmVcIjtcblxuXHQvLyBzZXR1cCBuZXcgZXZlbnQgc2hvcnRjdXRzXG5cdCQuZWFjaCggKCBcInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIFwiICtcblx0XHRcInN3aXBlIHN3aXBlbGVmdCBzd2lwZXJpZ2h0XCIgKS5zcGxpdCggXCIgXCIgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0XHQkLmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRyZXR1cm4gZm4gPyB0aGlzLmJpbmQoIG5hbWUsIGZuICkgOiB0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXG5cdFx0Ly8galF1ZXJ5IDwgMS44XG5cdFx0aWYgKCAkLmF0dHJGbiApIHtcblx0XHRcdCQuYXR0ckZuWyBuYW1lIF0gPSB0cnVlO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gdHJpZ2dlckN1c3RvbUV2ZW50KCBvYmosIGV2ZW50VHlwZSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHR2YXIgb3JpZ2luYWxUeXBlID0gZXZlbnQudHlwZTtcblx0XHRldmVudC50eXBlID0gZXZlbnRUeXBlO1xuXHRcdGlmICggYnViYmxlICkge1xuXHRcdFx0JC5ldmVudC50cmlnZ2VyKCBldmVudCwgdW5kZWZpbmVkLCBvYmogKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5ldmVudC5kaXNwYXRjaC5jYWxsKCBvYmosIGV2ZW50ICk7XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSBvcmlnaW5hbFR5cGU7XG5cdH1cblxuXHQvLyBhbHNvIGhhbmRsZXMgdGFwaG9sZFxuXG5cdC8vIEFsc28gaGFuZGxlcyBzd2lwZWxlZnQsIHN3aXBlcmlnaHRcblx0JC5ldmVudC5zcGVjaWFsLnN3aXBlID0ge1xuXG5cdFx0Ly8gTW9yZSB0aGFuIHRoaXMgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQsIGFuZCB3ZSB3aWxsIHN1cHByZXNzIHNjcm9sbGluZy5cblx0XHRzY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkOiAzMCxcblxuXHRcdC8vIE1vcmUgdGltZSB0aGFuIHRoaXMsIGFuZCBpdCBpc24ndCBhIHN3aXBlLlxuXHRcdGR1cmF0aW9uVGhyZXNob2xkOiAxMDAwLFxuXG5cdFx0Ly8gU3dpcGUgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBtb3JlIHRoYW4gdGhpcy5cblx0XHRob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQ6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID49IDIgPyAxNSA6IDMwLFxuXG5cdFx0Ly8gU3dpcGUgdmVydGljYWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbGVzcyB0aGFuIHRoaXMuXG5cdFx0dmVydGljYWxEaXN0YW5jZVRocmVzaG9sZDogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPj0gMiA/IDE1IDogMzAsXG5cblx0XHRnZXRMb2NhdGlvbjogZnVuY3Rpb24gKCBldmVudCApIHtcblx0XHRcdHZhciB3aW5QYWdlWCA9IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0d2luUGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdFx0XHRcdHggPSBldmVudC5jbGllbnRYLFxuXHRcdFx0XHR5ID0gZXZlbnQuY2xpZW50WTtcblxuXHRcdFx0aWYgKCBldmVudC5wYWdlWSA9PT0gMCAmJiBNYXRoLmZsb29yKCB5ICkgPiBNYXRoLmZsb29yKCBldmVudC5wYWdlWSApIHx8XG5cdFx0XHRcdGV2ZW50LnBhZ2VYID09PSAwICYmIE1hdGguZmxvb3IoIHggKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gaU9TNCBjbGllbnRYL2NsaWVudFkgaGF2ZSB0aGUgdmFsdWUgdGhhdCBzaG91bGQgaGF2ZSBiZWVuXG5cdFx0XHRcdC8vIGluIHBhZ2VYL3BhZ2VZLiBXaGlsZSBwYWdlWC9wYWdlLyBoYXZlIHRoZSB2YWx1ZSAwXG5cdFx0XHRcdHggPSB4IC0gd2luUGFnZVg7XG5cdFx0XHRcdHkgPSB5IC0gd2luUGFnZVk7XG5cdFx0XHR9IGVsc2UgaWYgKCB5IDwgKCBldmVudC5wYWdlWSAtIHdpblBhZ2VZKSB8fCB4IDwgKCBldmVudC5wYWdlWCAtIHdpblBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gU29tZSBBbmRyb2lkIGJyb3dzZXJzIGhhdmUgdG90YWxseSBib2d1cyB2YWx1ZXMgZm9yIGNsaWVudFgvWVxuXHRcdFx0XHQvLyB3aGVuIHNjcm9sbGluZy96b29taW5nIGEgcGFnZS4gRGV0ZWN0YWJsZSBzaW5jZSBjbGllbnRYL2NsaWVudFlcblx0XHRcdFx0Ly8gc2hvdWxkIG5ldmVyIGJlIHNtYWxsZXIgdGhhbiBwYWdlWC9wYWdlWSBtaW51cyBwYWdlIHNjcm9sbFxuXHRcdFx0XHR4ID0gZXZlbnQucGFnZVggLSB3aW5QYWdlWDtcblx0XHRcdFx0eSA9IGV2ZW50LnBhZ2VZIC0gd2luUGFnZVk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHlcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZGF0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA/XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCxcblx0XHRcdFx0bG9jYXRpb24gPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZ2V0TG9jYXRpb24oIGRhdGEgKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksXG5cdFx0XHRcdFx0XHRjb29yZHM6IFsgbG9jYXRpb24ueCwgbG9jYXRpb24ueSBdLFxuXHRcdFx0XHRcdFx0b3JpZ2luOiAkKCBldmVudC50YXJnZXQgKVxuXHRcdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50LFxuXHRcdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdFx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF1cblx0XHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRoYW5kbGVTd2lwZTogZnVuY3Rpb24oIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICkge1xuXHRcdFx0aWYgKCBzdG9wLnRpbWUgLSBzdGFydC50aW1lIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLmR1cmF0aW9uVGhyZXNob2xkICYmXG5cdFx0XHRcdE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMSBdIC0gc3RvcC5jb29yZHNbIDEgXSApIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLnZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQgKSB7XG5cdFx0XHRcdHZhciBkaXJlY3Rpb24gPSBzdGFydC5jb29yZHNbMF0gPiBzdG9wLmNvb3Jkc1sgMCBdID8gXCJzd2lwZWxlZnRcIiA6IFwic3dpcGVyaWdodFwiO1xuXG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgXCJzd2lwZVwiLCAkLkV2ZW50KCBcInN3aXBlXCIsIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0LCBzd2lwZXN0YXJ0OiBzdGFydCwgc3dpcGVzdG9wOiBzdG9wIH0pLCB0cnVlICk7XG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgZGlyZWN0aW9uLCQuRXZlbnQoIGRpcmVjdGlvbiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQsIHN3aXBlc3RhcnQ6IHN0YXJ0LCBzd2lwZXN0b3A6IHN0b3AgfSApLCB0cnVlICk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdC8vIFRoaXMgc2VydmVzIGFzIGEgZmxhZyB0byBlbnN1cmUgdGhhdCBhdCBtb3N0IG9uZSBzd2lwZSBldmVudCBldmVudCBpc1xuXHRcdC8vIGluIHdvcmsgYXQgYW55IGdpdmVuIHRpbWVcblx0XHRldmVudEluUHJvZ3Jlc3M6IGZhbHNlLFxuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGV2ZW50cyxcblx0XHRcdFx0dGhpc09iamVjdCA9IHRoaXMsXG5cdFx0XHRcdCR0aGlzID0gJCggdGhpc09iamVjdCApLFxuXHRcdFx0XHRjb250ZXh0ID0ge307XG5cblx0XHRcdC8vIFJldHJpZXZlIHRoZSBldmVudHMgZGF0YSBmb3IgdGhpcyBlbGVtZW50IGFuZCBhZGQgdGhlIHN3aXBlIGNvbnRleHRcblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggIWV2ZW50cyApIHtcblx0XHRcdFx0ZXZlbnRzID0geyBsZW5ndGg6IDAgfTtcblx0XHRcdFx0JC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiwgZXZlbnRzICk7XG5cdFx0XHR9XG5cdFx0XHRldmVudHMubGVuZ3RoKys7XG5cdFx0XHRldmVudHMuc3dpcGUgPSBjb250ZXh0O1xuXG5cdFx0XHRjb250ZXh0LnN0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIEJhaWwgaWYgd2UncmUgYWxyZWFkeSB3b3JraW5nIG9uIGEgc3dpcGUgZXZlbnRcblx0XHRcdFx0aWYgKCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gdHJ1ZTtcblxuXHRcdFx0XHR2YXIgc3RvcCxcblx0XHRcdFx0XHRzdGFydCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdGFydCggZXZlbnQgKSxcblx0XHRcdFx0XHRvcmlnVGFyZ2V0ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRcdGVtaXR0ZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhcnQgfHwgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c3RvcCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdG9wKCBldmVudCApO1xuXHRcdFx0XHRcdGlmICggIWVtaXR0ZWQgKSB7XG5cdFx0XHRcdFx0XHRlbWl0dGVkID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmhhbmRsZVN3aXBlKCBzdGFydCwgc3RvcCwgdGhpc09iamVjdCwgb3JpZ1RhcmdldCApO1xuXHRcdFx0XHRcdFx0aWYgKCBlbWl0dGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHByZXZlbnQgc2Nyb2xsaW5nXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZCApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGNvbnRleHQuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0ZW1pdHRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlID0gbnVsbDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQkZG9jdW1lbnQub24oIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKVxuXHRcdFx0XHRcdC5vbmUoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdH07XG5cdFx0XHQkdGhpcy5vbiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0fSxcblxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBldmVudHMsIGNvbnRleHQ7XG5cblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0XHRjb250ZXh0ID0gZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRkZWxldGUgZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRldmVudHMubGVuZ3RoLS07XG5cdFx0XHRcdGlmICggZXZlbnRzLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0XHQkLnJlbW92ZURhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjb250ZXh0ICkge1xuXHRcdFx0XHRpZiAoIGNvbnRleHQuc3RhcnQgKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLm9mZiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBjb250ZXh0Lm1vdmUgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggY29udGV4dC5zdG9wICkge1xuXHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0JC5lYWNoKHtcblx0XHRzd2lwZWxlZnQ6IFwic3dpcGUubGVmdFwiLFxuXHRcdHN3aXBlcmlnaHQ6IFwic3dpcGUucmlnaHRcIlxuXHR9LCBmdW5jdGlvbiggZXZlbnQsIHNvdXJjZUV2ZW50ICkge1xuXG5cdFx0JC5ldmVudC5zcGVjaWFsWyBldmVudCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuYmluZCggc291cmNlRXZlbnQsICQubm9vcCApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLnVuYmluZCggc291cmNlRXZlbnQgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcbn0pKCBqUXVlcnksIHRoaXMgKTtcbiovXG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmNvbnN0IE11dGF0aW9uT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbiAgZm9yICh2YXIgaT0wOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYCR7cHJlZml4ZXNbaV19TXV0YXRpb25PYnNlcnZlcmAgaW4gd2luZG93KSB7XG4gICAgICByZXR1cm4gd2luZG93W2Ake3ByZWZpeGVzW2ldfU11dGF0aW9uT2JzZXJ2ZXJgXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSgpKTtcblxuY29uc3QgdHJpZ2dlcnMgPSAoZWwsIHR5cGUpID0+IHtcbiAgZWwuZGF0YSh0eXBlKS5zcGxpdCgnICcpLmZvckVhY2goaWQgPT4ge1xuICAgICQoYCMke2lkfWApWyB0eXBlID09PSAnY2xvc2UnID8gJ3RyaWdnZXInIDogJ3RyaWdnZXJIYW5kbGVyJ10oYCR7dHlwZX0uemYudHJpZ2dlcmAsIFtlbF0pO1xuICB9KTtcbn07XG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLW9wZW5dIHdpbGwgcmV2ZWFsIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtb3Blbl0nLCBmdW5jdGlvbigpIHtcbiAgdHJpZ2dlcnMoJCh0aGlzKSwgJ29wZW4nKTtcbn0pO1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NlXSB3aWxsIGNsb3NlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuLy8gSWYgdXNlZCB3aXRob3V0IGEgdmFsdWUgb24gW2RhdGEtY2xvc2VdLCB0aGUgZXZlbnQgd2lsbCBidWJibGUsIGFsbG93aW5nIGl0IHRvIGNsb3NlIGEgcGFyZW50IGNvbXBvbmVudC5cbiQoZG9jdW1lbnQpLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ2Nsb3NlJyk7XG4gIGlmIChpZCkge1xuICAgIHRyaWdnZXJzKCQodGhpcyksICdjbG9zZScpO1xuICB9XG4gIGVsc2Uge1xuICAgICQodGhpcykudHJpZ2dlcignY2xvc2UuemYudHJpZ2dlcicpO1xuICB9XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGVdIHdpbGwgdG9nZ2xlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlXScsIGZ1bmN0aW9uKCkge1xuICB0cmlnZ2VycygkKHRoaXMpLCAndG9nZ2xlJyk7XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zYWJsZV0gd2lsbCByZXNwb25kIHRvIGNsb3NlLnpmLnRyaWdnZXIgZXZlbnRzLlxuJChkb2N1bWVudCkub24oJ2Nsb3NlLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2FibGVdJywgZnVuY3Rpb24oZSl7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGxldCBhbmltYXRpb24gPSAkKHRoaXMpLmRhdGEoJ2Nsb3NhYmxlJyk7XG5cbiAgaWYoYW5pbWF0aW9uICE9PSAnJyl7XG4gICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCgkKHRoaXMpLCBhbmltYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICB9KTtcbiAgfWVsc2V7XG4gICAgJCh0aGlzKS5mYWRlT3V0KCkudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gIH1cbn0pO1xuXG4kKGRvY3VtZW50KS5vbignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlLWZvY3VzXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZS1mb2N1cycpO1xuICAkKGAjJHtpZH1gKS50cmlnZ2VySGFuZGxlcigndG9nZ2xlLnpmLnRyaWdnZXInLCBbJCh0aGlzKV0pO1xufSk7XG5cbi8qKlxuKiBGaXJlcyBvbmNlIGFmdGVyIGFsbCBvdGhlciBzY3JpcHRzIGhhdmUgbG9hZGVkXG4qIEBmdW5jdGlvblxuKiBAcHJpdmF0ZVxuKi9cbiQod2luZG93KS5vbignbG9hZCcsICgpID0+IHtcbiAgY2hlY2tMaXN0ZW5lcnMoKTtcbn0pO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVycygpIHtcbiAgZXZlbnRzTGlzdGVuZXIoKTtcbiAgcmVzaXplTGlzdGVuZXIoKTtcbiAgc2Nyb2xsTGlzdGVuZXIoKTtcbiAgY2xvc2VtZUxpc3RlbmVyKCk7XG59XG5cbi8vKioqKioqKiogb25seSBmaXJlcyB0aGlzIGZ1bmN0aW9uIG9uY2Ugb24gbG9hZCwgaWYgdGhlcmUncyBzb21ldGhpbmcgdG8gd2F0Y2ggKioqKioqKipcbmZ1bmN0aW9uIGNsb3NlbWVMaXN0ZW5lcihwbHVnaW5OYW1lKSB7XG4gIHZhciB5ZXRpQm94ZXMgPSAkKCdbZGF0YS15ZXRpLWJveF0nKSxcbiAgICAgIHBsdWdOYW1lcyA9IFsnZHJvcGRvd24nLCAndG9vbHRpcCcsICdyZXZlYWwnXTtcblxuICBpZihwbHVnaW5OYW1lKXtcbiAgICBpZih0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ3N0cmluZycpe1xuICAgICAgcGx1Z05hbWVzLnB1c2gocGx1Z2luTmFtZSk7XG4gICAgfWVsc2UgaWYodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwbHVnaW5OYW1lWzBdID09PSAnc3RyaW5nJyl7XG4gICAgICBwbHVnTmFtZXMuY29uY2F0KHBsdWdpbk5hbWUpO1xuICAgIH1lbHNle1xuICAgICAgY29uc29sZS5lcnJvcignUGx1Z2luIG5hbWVzIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgfVxuICBpZih5ZXRpQm94ZXMubGVuZ3RoKXtcbiAgICBsZXQgbGlzdGVuZXJzID0gcGx1Z05hbWVzLm1hcCgobmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIGBjbG9zZW1lLnpmLiR7bmFtZX1gO1xuICAgIH0pLmpvaW4oJyAnKTtcblxuICAgICQod2luZG93KS5vZmYobGlzdGVuZXJzKS5vbihsaXN0ZW5lcnMsIGZ1bmN0aW9uKGUsIHBsdWdpbklkKXtcbiAgICAgIGxldCBwbHVnaW4gPSBlLm5hbWVzcGFjZS5zcGxpdCgnLicpWzBdO1xuICAgICAgbGV0IHBsdWdpbnMgPSAkKGBbZGF0YS0ke3BsdWdpbn1dYCkubm90KGBbZGF0YS15ZXRpLWJveD1cIiR7cGx1Z2luSWR9XCJdYCk7XG5cbiAgICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICBsZXQgX3RoaXMgPSAkKHRoaXMpO1xuXG4gICAgICAgIF90aGlzLnRyaWdnZXJIYW5kbGVyKCdjbG9zZS56Zi50cmlnZ2VyJywgW190aGlzXSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNpemVMaXN0ZW5lcihkZWJvdW5jZSl7XG4gIGxldCB0aW1lcixcbiAgICAgICRub2RlcyA9ICQoJ1tkYXRhLXJlc2l6ZV0nKTtcbiAgaWYoJG5vZGVzLmxlbmd0aCl7XG4gICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnpmLnRyaWdnZXInKVxuICAgIC5vbigncmVzaXplLnpmLnRyaWdnZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAodGltZXIpIHsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgfVxuXG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblxuICAgICAgICBpZighTXV0YXRpb25PYnNlcnZlcil7Ly9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHJlc2l6ZSBldmVudFxuICAgICAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInJlc2l6ZVwiKTtcbiAgICAgIH0sIGRlYm91bmNlIHx8IDEwKTsvL2RlZmF1bHQgdGltZSB0byBlbWl0IHJlc2l6ZSBldmVudFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbExpc3RlbmVyKGRlYm91bmNlKXtcbiAgbGV0IHRpbWVyLFxuICAgICAgJG5vZGVzID0gJCgnW2RhdGEtc2Nyb2xsXScpO1xuICBpZigkbm9kZXMubGVuZ3RoKXtcbiAgICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYudHJpZ2dlcicpXG4gICAgLm9uKCdzY3JvbGwuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYodGltZXIpeyBjbGVhclRpbWVvdXQodGltZXIpOyB9XG5cbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgc2Nyb2xsIGV2ZW50XG4gICAgICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwic2Nyb2xsXCIpO1xuICAgICAgfSwgZGVib3VuY2UgfHwgMTApOy8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgc2Nyb2xsIGV2ZW50XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRzTGlzdGVuZXIoKSB7XG4gIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsgcmV0dXJuIGZhbHNlOyB9XG4gIGxldCBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXJlc2l6ZV0sIFtkYXRhLXNjcm9sbF0sIFtkYXRhLW11dGF0ZV0nKTtcblxuICAvL2VsZW1lbnQgY2FsbGJhY2tcbiAgdmFyIGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24gPSBmdW5jdGlvbihtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgdmFyICR0YXJnZXQgPSAkKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udGFyZ2V0KTtcbiAgICAvL3RyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBlbGVtZW50IGRlcGVuZGluZyBvbiB0eXBlXG4gICAgc3dpdGNoICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSkge1xuXG4gICAgICBjYXNlIFwicmVzaXplXCIgOlxuICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0XSk7XG4gICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInNjcm9sbFwiIDpcbiAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInLCBbJHRhcmdldCwgd2luZG93LnBhZ2VZT2Zmc2V0XSk7XG4gICAgICBicmVhaztcblxuICAgICAgLy8gY2FzZSBcIm11dGF0ZVwiIDpcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdtdXRhdGUnLCAkdGFyZ2V0KTtcbiAgICAgIC8vICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ211dGF0ZS56Zi50cmlnZ2VyJyk7XG4gICAgICAvL1xuICAgICAgLy8gLy9tYWtlIHN1cmUgd2UgZG9uJ3QgZ2V0IHN0dWNrIGluIGFuIGluZmluaXRlIGxvb3AgZnJvbSBzbG9wcHkgY29kZWluZ1xuICAgICAgLy8gaWYgKCR0YXJnZXQuaW5kZXgoJ1tkYXRhLW11dGF0ZV0nKSA9PSAkKFwiW2RhdGEtbXV0YXRlXVwiKS5sZW5ndGgtMSkge1xuICAgICAgLy8gICBkb21NdXRhdGlvbk9ic2VydmVyKCk7XG4gICAgICAvLyB9XG4gICAgICAvLyBicmVhaztcblxuICAgICAgZGVmYXVsdCA6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvL25vdGhpbmdcbiAgICB9XG4gIH1cblxuICBpZihub2Rlcy5sZW5ndGgpe1xuICAgIC8vZm9yIGVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRvIGxpc3RlbiBmb3IgcmVzaXppbmcsIHNjcm9sbGluZywgKG9yIGNvbWluZyBzb29uIG11dGF0aW9uKSBhZGQgYSBzaW5nbGUgb2JzZXJ2ZXJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBub2Rlcy5sZW5ndGgtMTsgaSsrKSB7XG4gICAgICBsZXQgZWxlbWVudE9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbik7XG4gICAgICBlbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZShub2Rlc1tpXSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IGZhbHNlLCBjaGFyYWN0ZXJEYXRhOiBmYWxzZSwgc3VidHJlZTpmYWxzZSwgYXR0cmlidXRlRmlsdGVyOltcImRhdGEtZXZlbnRzXCJdfSk7XG4gICAgfVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBbUEhdXG4vLyBGb3VuZGF0aW9uLkNoZWNrV2F0Y2hlcnMgPSBjaGVja1dhdGNoZXJzO1xuRm91bmRhdGlvbi5JSGVhcllvdSA9IGNoZWNrTGlzdGVuZXJzO1xuLy8gRm91bmRhdGlvbi5JU2VlWW91ID0gc2Nyb2xsTGlzdGVuZXI7XG4vLyBGb3VuZGF0aW9uLklGZWVsWW91ID0gY2xvc2VtZUxpc3RlbmVyO1xuXG59KGpRdWVyeSk7XG5cbi8vIGZ1bmN0aW9uIGRvbU11dGF0aW9uT2JzZXJ2ZXIoZGVib3VuY2UpIHtcbi8vICAgLy8gISEhIFRoaXMgaXMgY29taW5nIHNvb24gYW5kIG5lZWRzIG1vcmUgd29yazsgbm90IGFjdGl2ZSAgISEhIC8vXG4vLyAgIHZhciB0aW1lcixcbi8vICAgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tdXRhdGVdJyk7XG4vLyAgIC8vXG4vLyAgIGlmIChub2Rlcy5sZW5ndGgpIHtcbi8vICAgICAvLyB2YXIgTXV0YXRpb25PYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4vLyAgICAgLy8gICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbi8vICAgICAvLyAgIGZvciAodmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgLy8gICAgIGlmIChwcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHtcbi8vICAgICAvLyAgICAgICByZXR1cm4gd2luZG93W3ByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInXTtcbi8vICAgICAvLyAgICAgfVxuLy8gICAgIC8vICAgfVxuLy8gICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuLy8gICAgIC8vIH0oKSk7XG4vL1xuLy9cbi8vICAgICAvL2ZvciB0aGUgYm9keSwgd2UgbmVlZCB0byBsaXN0ZW4gZm9yIGFsbCBjaGFuZ2VzIGVmZmVjdGluZyB0aGUgc3R5bGUgYW5kIGNsYXNzIGF0dHJpYnV0ZXNcbi8vICAgICB2YXIgYm9keU9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoYm9keU11dGF0aW9uKTtcbi8vICAgICBib2R5T2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogZmFsc2UsIHN1YnRyZWU6dHJ1ZSwgYXR0cmlidXRlRmlsdGVyOltcInN0eWxlXCIsIFwiY2xhc3NcIl19KTtcbi8vXG4vL1xuLy8gICAgIC8vYm9keSBjYWxsYmFja1xuLy8gICAgIGZ1bmN0aW9uIGJvZHlNdXRhdGlvbihtdXRhdGUpIHtcbi8vICAgICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBtdXRhdGlvbiBldmVudFxuLy8gICAgICAgaWYgKHRpbWVyKSB7IGNsZWFyVGltZW91dCh0aW1lcik7IH1cbi8vXG4vLyAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgIGJvZHlPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4vLyAgICAgICAgICQoJ1tkYXRhLW11dGF0ZV0nKS5hdHRyKCdkYXRhLWV2ZW50cycsXCJtdXRhdGVcIik7XG4vLyAgICAgICB9LCBkZWJvdW5jZSB8fCAxNTApO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gfVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFiaWRlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5hYmlkZVxuICovXG5cbmNsYXNzIEFiaWRlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQWJpZGUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWJpZGUjaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgID0gJC5leHRlbmQoe30sIEFiaWRlLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdBYmlkZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBBYmlkZSBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgQWJpZGUgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuJGlucHV0cyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKTtcblxuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgQWJpZGUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuYWJpZGUnKVxuICAgICAgLm9uKCdyZXNldC56Zi5hYmlkZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5yZXNldEZvcm0oKTtcbiAgICAgIH0pXG4gICAgICAub24oJ3N1Ym1pdC56Zi5hYmlkZScsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVGb3JtKCk7XG4gICAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMudmFsaWRhdGVPbiA9PT0gJ2ZpZWxkQ2hhbmdlJykge1xuICAgICAgdGhpcy4kaW5wdXRzXG4gICAgICAgIC5vZmYoJ2NoYW5nZS56Zi5hYmlkZScpXG4gICAgICAgIC5vbignY2hhbmdlLnpmLmFiaWRlJywgKGUpID0+IHtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXQoJChlLnRhcmdldCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmxpdmVWYWxpZGF0ZSkge1xuICAgICAgdGhpcy4kaW5wdXRzXG4gICAgICAgIC5vZmYoJ2lucHV0LnpmLmFiaWRlJylcbiAgICAgICAgLm9uKCdpbnB1dC56Zi5hYmlkZScsIChlKSA9PiB7XG4gICAgICAgICAgdGhpcy52YWxpZGF0ZUlucHV0KCQoZS50YXJnZXQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIEFiaWRlIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICB0aGlzLl9pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IGEgZm9ybSBlbGVtZW50IGhhcyB0aGUgcmVxdWlyZWQgYXR0cmlidXRlIGFuZCBpZiBpdCdzIGNoZWNrZWQgb3Igbm90XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBjaGVjayBmb3IgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXR0cmlidXRlIGlzIGNoZWNrZWQgb3IgZW1wdHlcbiAgICovXG4gIHJlcXVpcmVkQ2hlY2soJGVsKSB7XG4gICAgaWYgKCEkZWwuYXR0cigncmVxdWlyZWQnKSkgcmV0dXJuIHRydWU7XG5cbiAgICB2YXIgaXNHb29kID0gdHJ1ZTtcblxuICAgIHN3aXRjaCAoJGVsWzBdLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgaXNHb29kID0gJGVsWzBdLmNoZWNrZWQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgY2FzZSAnc2VsZWN0LW9uZSc6XG4gICAgICBjYXNlICdzZWxlY3QtbXVsdGlwbGUnOlxuICAgICAgICB2YXIgb3B0ID0gJGVsLmZpbmQoJ29wdGlvbjpzZWxlY3RlZCcpO1xuICAgICAgICBpZiAoIW9wdC5sZW5ndGggfHwgIW9wdC52YWwoKSkgaXNHb29kID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZighJGVsLnZhbCgpIHx8ICEkZWwudmFsKCkubGVuZ3RoKSBpc0dvb2QgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNHb29kO1xuICB9XG5cbiAgLyoqXG4gICAqIEJhc2VkIG9uICRlbCwgZ2V0IHRoZSBmaXJzdCBlbGVtZW50IHdpdGggc2VsZWN0b3IgaW4gdGhpcyBvcmRlcjpcbiAgICogMS4gVGhlIGVsZW1lbnQncyBkaXJlY3Qgc2libGluZygncykuXG4gICAqIDMuIFRoZSBlbGVtZW50J3MgcGFyZW50J3MgY2hpbGRyZW4uXG4gICAqXG4gICAqIFRoaXMgYWxsb3dzIGZvciBtdWx0aXBsZSBmb3JtIGVycm9ycyBwZXIgaW5wdXQsIHRob3VnaCBpZiBub25lIGFyZSBmb3VuZCwgbm8gZm9ybSBlcnJvcnMgd2lsbCBiZSBzaG93bi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGFzIHJlZmVyZW5jZSB0byBmaW5kIHRoZSBmb3JtIGVycm9yIHNlbGVjdG9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBqUXVlcnkgb2JqZWN0IHdpdGggdGhlIHNlbGVjdG9yLlxuICAgKi9cbiAgZmluZEZvcm1FcnJvcigkZWwpIHtcbiAgICB2YXIgJGVycm9yID0gJGVsLnNpYmxpbmdzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JTZWxlY3Rvcik7XG5cbiAgICBpZiAoISRlcnJvci5sZW5ndGgpIHtcbiAgICAgICRlcnJvciA9ICRlbC5wYXJlbnQoKS5maW5kKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JTZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuICRlcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhpcyBvcmRlcjpcbiAgICogMi4gVGhlIDxsYWJlbD4gd2l0aCB0aGUgYXR0cmlidXRlIGBbZm9yPVwic29tZUlucHV0SWRcIl1gXG4gICAqIDMuIFRoZSBgLmNsb3Nlc3QoKWAgPGxhYmVsPlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IG9iamVjdCB0byBjaGVjayBmb3IgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXR0cmlidXRlIGlzIGNoZWNrZWQgb3IgZW1wdHlcbiAgICovXG4gIGZpbmRMYWJlbCgkZWwpIHtcbiAgICB2YXIgaWQgPSAkZWxbMF0uaWQ7XG4gICAgdmFyICRsYWJlbCA9IHRoaXMuJGVsZW1lbnQuZmluZChgbGFiZWxbZm9yPVwiJHtpZH1cIl1gKTtcblxuICAgIGlmICghJGxhYmVsLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICRlbC5jbG9zZXN0KCdsYWJlbCcpO1xuICAgIH1cblxuICAgIHJldHVybiAkbGFiZWw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzZXQgb2YgbGFiZWxzIGFzc29jaWF0ZWQgd2l0aCBhIHNldCBvZiByYWRpbyBlbHMgaW4gdGhpcyBvcmRlclxuICAgKiAyLiBUaGUgPGxhYmVsPiB3aXRoIHRoZSBhdHRyaWJ1dGUgYFtmb3I9XCJzb21lSW5wdXRJZFwiXWBcbiAgICogMy4gVGhlIGAuY2xvc2VzdCgpYCA8bGFiZWw+XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgKi9cbiAgZmluZFJhZGlvTGFiZWxzKCRlbHMpIHtcbiAgICB2YXIgbGFiZWxzID0gJGVscy5tYXAoKGksIGVsKSA9PiB7XG4gICAgICB2YXIgaWQgPSBlbC5pZDtcbiAgICAgIHZhciAkbGFiZWwgPSB0aGlzLiRlbGVtZW50LmZpbmQoYGxhYmVsW2Zvcj1cIiR7aWR9XCJdYCk7XG5cbiAgICAgIGlmICghJGxhYmVsLmxlbmd0aCkge1xuICAgICAgICAkbGFiZWwgPSAkKGVsKS5jbG9zZXN0KCdsYWJlbCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICRsYWJlbFswXTtcbiAgICB9KTtcblxuICAgIHJldHVybiAkKGxhYmVscyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgQ1NTIGVycm9yIGNsYXNzIGFzIHNwZWNpZmllZCBieSB0aGUgQWJpZGUgc2V0dGluZ3MgdG8gdGhlIGxhYmVsLCBpbnB1dCwgYW5kIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgY2xhc3MgdG9cbiAgICovXG4gIGFkZEVycm9yQ2xhc3NlcygkZWwpIHtcbiAgICB2YXIgJGxhYmVsID0gdGhpcy5maW5kTGFiZWwoJGVsKTtcbiAgICB2YXIgJGZvcm1FcnJvciA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWwpO1xuXG4gICAgaWYgKCRsYWJlbC5sZW5ndGgpIHtcbiAgICAgICRsYWJlbC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvci5sZW5ndGgpIHtcbiAgICAgICRmb3JtRXJyb3IuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmZvcm1FcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykuYXR0cignZGF0YS1pbnZhbGlkJywgJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBDU1MgZXJyb3IgY2xhc3NlcyBldGMgZnJvbSBhbiBlbnRpcmUgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBncm91cE5hbWUgLSBBIHN0cmluZyB0aGF0IHNwZWNpZmllcyB0aGUgbmFtZSBvZiBhIHJhZGlvIGJ1dHRvbiBncm91cFxuICAgKlxuICAgKi9cblxuICByZW1vdmVSYWRpb0Vycm9yQ2xhc3Nlcyhncm91cE5hbWUpIHtcbiAgICB2YXIgJGVscyA9IHRoaXMuJGVsZW1lbnQuZmluZChgOnJhZGlvW25hbWU9XCIke2dyb3VwTmFtZX1cIl1gKTtcbiAgICB2YXIgJGxhYmVscyA9IHRoaXMuZmluZFJhZGlvTGFiZWxzKCRlbHMpO1xuICAgIHZhciAkZm9ybUVycm9ycyA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWxzKTtcblxuICAgIGlmICgkbGFiZWxzLmxlbmd0aCkge1xuICAgICAgJGxhYmVscy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAkZm9ybUVycm9ycy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbHMucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIENTUyBlcnJvciBjbGFzcyBhcyBzcGVjaWZpZWQgYnkgdGhlIEFiaWRlIHNldHRpbmdzIGZyb20gdGhlIGxhYmVsLCBpbnB1dCwgYW5kIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHJlbW92ZSB0aGUgY2xhc3MgZnJvbVxuICAgKi9cbiAgcmVtb3ZlRXJyb3JDbGFzc2VzKCRlbCkge1xuICAgIC8vIHJhZGlvcyBuZWVkIHRvIGNsZWFyIGFsbCBvZiB0aGUgZWxzXG4gICAgaWYoJGVsWzBdLnR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlUmFkaW9FcnJvckNsYXNzZXMoJGVsLmF0dHIoJ25hbWUnKSk7XG4gICAgfVxuXG4gICAgdmFyICRsYWJlbCA9IHRoaXMuZmluZExhYmVsKCRlbCk7XG4gICAgdmFyICRmb3JtRXJyb3IgPSB0aGlzLmZpbmRGb3JtRXJyb3IoJGVsKTtcblxuICAgIGlmICgkbGFiZWwubGVuZ3RoKSB7XG4gICAgICAkbGFiZWwucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxhYmVsRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKCRmb3JtRXJyb3IubGVuZ3RoKSB7XG4gICAgICAkZm9ybUVycm9yLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVsLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5pbnB1dEVycm9yQ2xhc3MpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdvZXMgdGhyb3VnaCBhIGZvcm0gdG8gZmluZCBpbnB1dHMgYW5kIHByb2NlZWRzIHRvIHZhbGlkYXRlIHRoZW0gaW4gd2F5cyBzcGVjaWZpYyB0byB0aGVpciB0eXBlXG4gICAqIEBmaXJlcyBBYmlkZSNpbnZhbGlkXG4gICAqIEBmaXJlcyBBYmlkZSN2YWxpZFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdmFsaWRhdGUsIHNob3VsZCBiZSBhbiBIVE1MIGlucHV0XG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBnb29kVG9HbyAtIElmIHRoZSBpbnB1dCBpcyB2YWxpZCBvciBub3QuXG4gICAqL1xuICB2YWxpZGF0ZUlucHV0KCRlbCkge1xuICAgIHZhciBjbGVhclJlcXVpcmUgPSB0aGlzLnJlcXVpcmVkQ2hlY2soJGVsKSxcbiAgICAgICAgdmFsaWRhdGVkID0gZmFsc2UsXG4gICAgICAgIGN1c3RvbVZhbGlkYXRvciA9IHRydWUsXG4gICAgICAgIHZhbGlkYXRvciA9ICRlbC5hdHRyKCdkYXRhLXZhbGlkYXRvcicpLFxuICAgICAgICBlcXVhbFRvID0gdHJ1ZTtcblxuICAgIC8vIGRvbid0IHZhbGlkYXRlIGlnbm9yZWQgaW5wdXRzIG9yIGhpZGRlbiBpbnB1dHNcbiAgICBpZiAoJGVsLmlzKCdbZGF0YS1hYmlkZS1pZ25vcmVdJykgfHwgJGVsLmlzKCdbdHlwZT1cImhpZGRlblwiXScpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKCRlbFswXS50eXBlKSB7XG4gICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgIHZhbGlkYXRlZCA9IHRoaXMudmFsaWRhdGVSYWRpbygkZWwuYXR0cignbmFtZScpKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgdmFsaWRhdGVkID0gY2xlYXJSZXF1aXJlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGNhc2UgJ3NlbGVjdC1vbmUnOlxuICAgICAgY2FzZSAnc2VsZWN0LW11bHRpcGxlJzpcbiAgICAgICAgdmFsaWRhdGVkID0gY2xlYXJSZXF1aXJlO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFsaWRhdGVkID0gdGhpcy52YWxpZGF0ZVRleHQoJGVsKTtcbiAgICB9XG5cbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjdXN0b21WYWxpZGF0b3IgPSB0aGlzLm1hdGNoVmFsaWRhdGlvbigkZWwsIHZhbGlkYXRvciwgJGVsLmF0dHIoJ3JlcXVpcmVkJykpO1xuICAgIH1cblxuICAgIGlmICgkZWwuYXR0cignZGF0YS1lcXVhbHRvJykpIHtcbiAgICAgIGVxdWFsVG8gPSB0aGlzLm9wdGlvbnMudmFsaWRhdG9ycy5lcXVhbFRvKCRlbCk7XG4gICAgfVxuXG5cbiAgICB2YXIgZ29vZFRvR28gPSBbY2xlYXJSZXF1aXJlLCB2YWxpZGF0ZWQsIGN1c3RvbVZhbGlkYXRvciwgZXF1YWxUb10uaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuICAgIHZhciBtZXNzYWdlID0gKGdvb2RUb0dvID8gJ3ZhbGlkJyA6ICdpbnZhbGlkJykgKyAnLnpmLmFiaWRlJztcblxuICAgIHRoaXNbZ29vZFRvR28gPyAncmVtb3ZlRXJyb3JDbGFzc2VzJyA6ICdhZGRFcnJvckNsYXNzZXMnXSgkZWwpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgaW5wdXQgaXMgZG9uZSBjaGVja2luZyBmb3IgdmFsaWRhdGlvbi4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYHZhbGlkLnpmLmFiaWRlYCBvciBgaW52YWxpZC56Zi5hYmlkZWBcbiAgICAgKiBUcmlnZ2VyIGluY2x1ZGVzIHRoZSBET00gZWxlbWVudCBvZiB0aGUgaW5wdXQuXG4gICAgICogQGV2ZW50IEFiaWRlI3ZhbGlkXG4gICAgICogQGV2ZW50IEFiaWRlI2ludmFsaWRcbiAgICAgKi9cbiAgICAkZWwudHJpZ2dlcihtZXNzYWdlLCBbJGVsXSk7XG5cbiAgICByZXR1cm4gZ29vZFRvR287XG4gIH1cblxuICAvKipcbiAgICogR29lcyB0aHJvdWdoIGEgZm9ybSBhbmQgaWYgdGhlcmUgYXJlIGFueSBpbnZhbGlkIGlucHV0cywgaXQgd2lsbCBkaXNwbGF5IHRoZSBmb3JtIGVycm9yIGVsZW1lbnRcbiAgICogQHJldHVybnMge0Jvb2xlYW59IG5vRXJyb3IgLSB0cnVlIGlmIG5vIGVycm9ycyB3ZXJlIGRldGVjdGVkLi4uXG4gICAqIEBmaXJlcyBBYmlkZSNmb3JtdmFsaWRcbiAgICogQGZpcmVzIEFiaWRlI2Zvcm1pbnZhbGlkXG4gICAqL1xuICB2YWxpZGF0ZUZvcm0oKSB7XG4gICAgdmFyIGFjYyA9IFtdO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRpbnB1dHMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGFjYy5wdXNoKF90aGlzLnZhbGlkYXRlSW5wdXQoJCh0aGlzKSkpO1xuICAgIH0pO1xuXG4gICAgdmFyIG5vRXJyb3IgPSBhY2MuaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1hYmlkZS1lcnJvcl0nKS5jc3MoJ2Rpc3BsYXknLCAobm9FcnJvciA/ICdub25lJyA6ICdibG9jaycpKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGZvcm0gaXMgZmluaXNoZWQgdmFsaWRhdGluZy4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYGZvcm12YWxpZC56Zi5hYmlkZWAgb3IgYGZvcm1pbnZhbGlkLnpmLmFiaWRlYC5cbiAgICAgKiBUcmlnZ2VyIGluY2x1ZGVzIHRoZSBlbGVtZW50IG9mIHRoZSBmb3JtLlxuICAgICAqIEBldmVudCBBYmlkZSNmb3JtdmFsaWRcbiAgICAgKiBAZXZlbnQgQWJpZGUjZm9ybWludmFsaWRcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoKG5vRXJyb3IgPyAnZm9ybXZhbGlkJyA6ICdmb3JtaW52YWxpZCcpICsgJy56Zi5hYmlkZScsIFt0aGlzLiRlbGVtZW50XSk7XG5cbiAgICByZXR1cm4gbm9FcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3IgYSBub3QgYSB0ZXh0IGlucHV0IGlzIHZhbGlkIGJhc2VkIG9uIHRoZSBwYXR0ZXJuIHNwZWNpZmllZCBpbiB0aGUgYXR0cmlidXRlLiBJZiBubyBtYXRjaGluZyBwYXR0ZXJuIGlzIGZvdW5kLCByZXR1cm5zIHRydWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHZhbGlkYXRlLCBzaG91bGQgYmUgYSB0ZXh0IGlucHV0IEhUTUwgZWxlbWVudFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVybiAtIHN0cmluZyB2YWx1ZSBvZiBvbmUgb2YgdGhlIFJlZ0V4IHBhdHRlcm5zIGluIEFiaWRlLm9wdGlvbnMucGF0dGVybnNcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCB0aGUgaW5wdXQgdmFsdWUgbWF0Y2hlcyB0aGUgcGF0dGVybiBzcGVjaWZpZWRcbiAgICovXG4gIHZhbGlkYXRlVGV4dCgkZWwsIHBhdHRlcm4pIHtcbiAgICAvLyBBIHBhdHRlcm4gY2FuIGJlIHBhc3NlZCB0byB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGJlIGluZmVyZWQgZnJvbSB0aGUgaW5wdXQncyBcInBhdHRlcm5cIiBhdHRyaWJ1dGUsIG9yIGl0J3MgXCJ0eXBlXCIgYXR0cmlidXRlXG4gICAgcGF0dGVybiA9IChwYXR0ZXJuIHx8ICRlbC5hdHRyKCdwYXR0ZXJuJykgfHwgJGVsLmF0dHIoJ3R5cGUnKSk7XG4gICAgdmFyIGlucHV0VGV4dCA9ICRlbC52YWwoKTtcbiAgICB2YXIgdmFsaWQgPSBmYWxzZTtcblxuICAgIGlmIChpbnB1dFRleHQubGVuZ3RoKSB7XG4gICAgICAvLyBJZiB0aGUgcGF0dGVybiBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaXMgaW4gQWJpZGUncyBsaXN0IG9mIHBhdHRlcm5zLCB0aGVuIHRlc3QgdGhhdCByZWdleHBcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGF0dGVybnMuaGFzT3duUHJvcGVydHkocGF0dGVybikpIHtcbiAgICAgICAgdmFsaWQgPSB0aGlzLm9wdGlvbnMucGF0dGVybnNbcGF0dGVybl0udGVzdChpbnB1dFRleHQpO1xuICAgICAgfVxuICAgICAgLy8gSWYgdGhlIHBhdHRlcm4gbmFtZSBpc24ndCBhbHNvIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiB0aGUgZmllbGQsIHRoZW4gdGVzdCBpdCBhcyBhIHJlZ2V4cFxuICAgICAgZWxzZSBpZiAocGF0dGVybiAhPT0gJGVsLmF0dHIoJ3R5cGUnKSkge1xuICAgICAgICB2YWxpZCA9IG5ldyBSZWdFeHAocGF0dGVybikudGVzdChpbnB1dFRleHQpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQW4gZW1wdHkgZmllbGQgaXMgdmFsaWQgaWYgaXQncyBub3QgcmVxdWlyZWRcbiAgICBlbHNlIGlmICghJGVsLnByb3AoJ3JlcXVpcmVkJykpIHtcbiAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWQ7XG4gICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBhIG5vdCBhIHJhZGlvIGlucHV0IGlzIHZhbGlkIGJhc2VkIG9uIHdoZXRoZXIgb3Igbm90IGl0IGlzIHJlcXVpcmVkIGFuZCBzZWxlY3RlZC4gQWx0aG91Z2ggdGhlIGZ1bmN0aW9uIHRhcmdldHMgYSBzaW5nbGUgYDxpbnB1dD5gLCBpdCB2YWxpZGF0ZXMgYnkgY2hlY2tpbmcgdGhlIGByZXF1aXJlZGAgYW5kIGBjaGVja2VkYCBwcm9wZXJ0aWVzIG9mIGFsbCByYWRpbyBidXR0b25zIGluIGl0cyBncm91cC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGdyb3VwTmFtZSAtIEEgc3RyaW5nIHRoYXQgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIGEgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXQgbGVhc3Qgb25lIHJhZGlvIGlucHV0IGhhcyBiZWVuIHNlbGVjdGVkIChpZiBpdCdzIHJlcXVpcmVkKVxuICAgKi9cbiAgdmFsaWRhdGVSYWRpbyhncm91cE5hbWUpIHtcbiAgICAvLyBJZiBhdCBsZWFzdCBvbmUgcmFkaW8gaW4gdGhlIGdyb3VwIGhhcyB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUsIHRoZSBncm91cCBpcyBjb25zaWRlcmVkIHJlcXVpcmVkXG4gICAgLy8gUGVyIFczQyBzcGVjLCBhbGwgcmFkaW8gYnV0dG9ucyBpbiBhIGdyb3VwIHNob3VsZCBoYXZlIGByZXF1aXJlZGAsIGJ1dCB3ZSdyZSBiZWluZyBuaWNlXG4gICAgdmFyICRncm91cCA9IHRoaXMuJGVsZW1lbnQuZmluZChgOnJhZGlvW25hbWU9XCIke2dyb3VwTmFtZX1cIl1gKTtcbiAgICB2YXIgdmFsaWQgPSBmYWxzZSwgcmVxdWlyZWQgPSBmYWxzZTtcblxuICAgIC8vIEZvciB0aGUgZ3JvdXAgdG8gYmUgcmVxdWlyZWQsIGF0IGxlYXN0IG9uZSByYWRpbyBuZWVkcyB0byBiZSByZXF1aXJlZFxuICAgICRncm91cC5lYWNoKChpLCBlKSA9PiB7XG4gICAgICBpZiAoJChlKS5hdHRyKCdyZXF1aXJlZCcpKSB7XG4gICAgICAgIHJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZighcmVxdWlyZWQpIHZhbGlkPXRydWU7XG5cbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAvLyBGb3IgdGhlIGdyb3VwIHRvIGJlIHZhbGlkLCBhdCBsZWFzdCBvbmUgcmFkaW8gbmVlZHMgdG8gYmUgY2hlY2tlZFxuICAgICAgJGdyb3VwLmVhY2goKGksIGUpID0+IHtcbiAgICAgICAgaWYgKCQoZSkucHJvcCgnY2hlY2tlZCcpKSB7XG4gICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHZhbGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYSBzZWxlY3RlZCBpbnB1dCBwYXNzZXMgYSBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbi4gTXVsdGlwbGUgdmFsaWRhdGlvbnMgY2FuIGJlIHVzZWQsIGlmIHBhc3NlZCB0byB0aGUgZWxlbWVudCB3aXRoIGBkYXRhLXZhbGlkYXRvcj1cImZvbyBiYXIgYmF6XCJgIGluIGEgc3BhY2Ugc2VwYXJhdGVkIGxpc3RlZC5cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsaWRhdG9ycyAtIGEgc3RyaW5nIG9mIGZ1bmN0aW9uIG5hbWVzIG1hdGNoaW5nIGZ1bmN0aW9ucyBpbiB0aGUgQWJpZGUub3B0aW9ucy52YWxpZGF0b3JzIG9iamVjdC5cbiAgICogQHBhcmFtIHtCb29sZWFufSByZXF1aXJlZCAtIHNlbGYgZXhwbGFuYXRvcnk/XG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgdmFsaWRhdGlvbnMgcGFzc2VkLlxuICAgKi9cbiAgbWF0Y2hWYWxpZGF0aW9uKCRlbCwgdmFsaWRhdG9ycywgcmVxdWlyZWQpIHtcbiAgICByZXF1aXJlZCA9IHJlcXVpcmVkID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgdmFyIGNsZWFyID0gdmFsaWRhdG9ycy5zcGxpdCgnICcpLm1hcCgodikgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52YWxpZGF0b3JzW3ZdKCRlbCwgcmVxdWlyZWQsICRlbC5wYXJlbnQoKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsZWFyLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgZm9ybSBpbnB1dHMgYW5kIHN0eWxlc1xuICAgKiBAZmlyZXMgQWJpZGUjZm9ybXJlc2V0XG4gICAqL1xuICByZXNldEZvcm0oKSB7XG4gICAgdmFyICRmb3JtID0gdGhpcy4kZWxlbWVudCxcbiAgICAgICAgb3B0cyA9IHRoaXMub3B0aW9ucztcblxuICAgICQoYC4ke29wdHMubGFiZWxFcnJvckNsYXNzfWAsICRmb3JtKS5ub3QoJ3NtYWxsJykucmVtb3ZlQ2xhc3Mob3B0cy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgICQoYC4ke29wdHMuaW5wdXRFcnJvckNsYXNzfWAsICRmb3JtKS5ub3QoJ3NtYWxsJykucmVtb3ZlQ2xhc3Mob3B0cy5pbnB1dEVycm9yQ2xhc3MpO1xuICAgICQoYCR7b3B0cy5mb3JtRXJyb3JTZWxlY3Rvcn0uJHtvcHRzLmZvcm1FcnJvckNsYXNzfWApLnJlbW92ZUNsYXNzKG9wdHMuZm9ybUVycm9yQ2xhc3MpO1xuICAgICRmb3JtLmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgJCgnOmlucHV0JywgJGZvcm0pLm5vdCgnOmJ1dHRvbiwgOnN1Ym1pdCwgOnJlc2V0LCA6aGlkZGVuLCA6cmFkaW8sIDpjaGVja2JveCwgW2RhdGEtYWJpZGUtaWdub3JlXScpLnZhbCgnJykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgJCgnOmlucHV0OnJhZGlvJywgJGZvcm0pLm5vdCgnW2RhdGEtYWJpZGUtaWdub3JlXScpLnByb3AoJ2NoZWNrZWQnLGZhbHNlKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcbiAgICAkKCc6aW5wdXQ6Y2hlY2tib3gnLCAkZm9ybSkubm90KCdbZGF0YS1hYmlkZS1pZ25vcmVdJykucHJvcCgnY2hlY2tlZCcsZmFsc2UpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGZvcm0gaGFzIGJlZW4gcmVzZXQuXG4gICAgICogQGV2ZW50IEFiaWRlI2Zvcm1yZXNldFxuICAgICAqL1xuICAgICRmb3JtLnRyaWdnZXIoJ2Zvcm1yZXNldC56Zi5hYmlkZScsIFskZm9ybV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIEFiaWRlLlxuICAgKiBSZW1vdmVzIGVycm9yIHN0eWxlcyBhbmQgY2xhc3NlcyBmcm9tIGVsZW1lbnRzLCB3aXRob3V0IHJlc2V0dGluZyB0aGVpciB2YWx1ZXMuXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9mZignLmFiaWRlJylcbiAgICAgIC5maW5kKCdbZGF0YS1hYmlkZS1lcnJvcl0nKVxuICAgICAgICAuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgIHRoaXMuJGlucHV0c1xuICAgICAgLm9mZignLmFiaWRlJylcbiAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5yZW1vdmVFcnJvckNsYXNzZXMoJCh0aGlzKSk7XG4gICAgICB9KTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5BYmlkZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGV2ZW50IHRvIHZhbGlkYXRlIGlucHV0cy4gQ2hlY2tib3hlcyBhbmQgcmFkaW9zIHZhbGlkYXRlIGltbWVkaWF0ZWx5LlxuICAgKiBSZW1vdmUgb3IgY2hhbmdlIHRoaXMgdmFsdWUgZm9yIG1hbnVhbCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdmaWVsZENoYW5nZSdcbiAgICovXG4gIHZhbGlkYXRlT246ICdmaWVsZENoYW5nZScsXG5cbiAgLyoqXG4gICAqIENsYXNzIHRvIGJlIGFwcGxpZWQgdG8gaW5wdXQgbGFiZWxzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdpcy1pbnZhbGlkLWxhYmVsJ1xuICAgKi9cbiAgbGFiZWxFcnJvckNsYXNzOiAnaXMtaW52YWxpZC1sYWJlbCcsXG5cbiAgLyoqXG4gICAqIENsYXNzIHRvIGJlIGFwcGxpZWQgdG8gaW5wdXRzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdpcy1pbnZhbGlkLWlucHV0J1xuICAgKi9cbiAgaW5wdXRFcnJvckNsYXNzOiAnaXMtaW52YWxpZC1pbnB1dCcsXG5cbiAgLyoqXG4gICAqIENsYXNzIHNlbGVjdG9yIHRvIHVzZSB0byB0YXJnZXQgRm9ybSBFcnJvcnMgZm9yIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnLmZvcm0tZXJyb3InXG4gICAqL1xuICBmb3JtRXJyb3JTZWxlY3RvcjogJy5mb3JtLWVycm9yJyxcblxuICAvKipcbiAgICogQ2xhc3MgYWRkZWQgdG8gRm9ybSBFcnJvcnMgb24gZmFpbGVkIHZhbGlkYXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2lzLXZpc2libGUnXG4gICAqL1xuICBmb3JtRXJyb3JDbGFzczogJ2lzLXZpc2libGUnLFxuXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSB0byB2YWxpZGF0ZSB0ZXh0IGlucHV0cyBvbiBhbnkgdmFsdWUgY2hhbmdlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBsaXZlVmFsaWRhdGU6IGZhbHNlLFxuXG4gIHBhdHRlcm5zOiB7XG4gICAgYWxwaGEgOiAvXlthLXpBLVpdKyQvLFxuICAgIGFscGhhX251bWVyaWMgOiAvXlthLXpBLVowLTldKyQvLFxuICAgIGludGVnZXIgOiAvXlstK10/XFxkKyQvLFxuICAgIG51bWJlciA6IC9eWy0rXT9cXGQqKD86W1xcLlxcLF1cXGQrKT8kLyxcblxuICAgIC8vIGFtZXgsIHZpc2EsIGRpbmVyc1xuICAgIGNhcmQgOiAvXig/OjRbMC05XXsxMn0oPzpbMC05XXszfSk/fDVbMS01XVswLTldezE0fXw2KD86MDExfDVbMC05XVswLTldKVswLTldezEyfXwzWzQ3XVswLTldezEzfXwzKD86MFswLTVdfFs2OF1bMC05XSlbMC05XXsxMX18KD86MjEzMXwxODAwfDM1XFxkezN9KVxcZHsxMX0pJC8sXG4gICAgY3Z2IDogL14oWzAtOV0pezMsNH0kLyxcblxuICAgIC8vIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3N0YXRlcy1vZi10aGUtdHlwZS1hdHRyaWJ1dGUuaHRtbCN2YWxpZC1lLW1haWwtYWRkcmVzc1xuICAgIGVtYWlsIDogL15bYS16QS1aMC05LiEjJCUmJyorXFwvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrJC8sXG5cbiAgICB1cmwgOiAvXihodHRwcz98ZnRwfGZpbGV8c3NoKTpcXC9cXC8oKCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OikqQCk/KCgoXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pKXwoKChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4/KSg6XFxkKik/KShcXC8oKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKyhcXC8oKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkqKSopPyk/KFxcPygoKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8W1xcdUUwMDAtXFx1RjhGRl18XFwvfFxcPykqKT8oXFwjKCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxcXC98XFw/KSopPyQvLFxuICAgIC8vIGFiYy5kZVxuICAgIGRvbWFpbiA6IC9eKFthLXpBLVowLTldKFthLXpBLVowLTlcXC1dezAsNjF9W2EtekEtWjAtOV0pP1xcLikrW2EtekEtWl17Miw4fSQvLFxuXG4gICAgZGF0ZXRpbWUgOiAvXihbMC0yXVswLTldezN9KVxcLShbMC0xXVswLTldKVxcLShbMC0zXVswLTldKVQoWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSkoWnwoW1xcLVxcK10oWzAtMV1bMC05XSlcXDowMCkpJC8sXG4gICAgLy8gWVlZWS1NTS1ERFxuICAgIGRhdGUgOiAvKD86MTl8MjApWzAtOV17Mn0tKD86KD86MFsxLTldfDFbMC0yXSktKD86MFsxLTldfDFbMC05XXwyWzAtOV0pfCg/Oig/ITAyKSg/OjBbMS05XXwxWzAtMl0pLSg/OjMwKSl8KD86KD86MFsxMzU3OF18MVswMl0pLTMxKSkkLyxcbiAgICAvLyBISDpNTTpTU1xuICAgIHRpbWUgOiAvXigwWzAtOV18MVswLTldfDJbMC0zXSkoOlswLTVdWzAtOV0pezJ9JC8sXG4gICAgZGF0ZUlTTyA6IC9eXFxkezR9W1xcL1xcLV1cXGR7MSwyfVtcXC9cXC1dXFxkezEsMn0kLyxcbiAgICAvLyBNTS9ERC9ZWVlZXG4gICAgbW9udGhfZGF5X3llYXIgOiAvXigwWzEtOV18MVswMTJdKVstIFxcLy5dKDBbMS05XXxbMTJdWzAtOV18M1swMV0pWy0gXFwvLl1cXGR7NH0kLyxcbiAgICAvLyBERC9NTS9ZWVlZXG4gICAgZGF5X21vbnRoX3llYXIgOiAvXigwWzEtOV18WzEyXVswLTldfDNbMDFdKVstIFxcLy5dKDBbMS05XXwxWzAxMl0pWy0gXFwvLl1cXGR7NH0kLyxcblxuICAgIC8vICNGRkYgb3IgI0ZGRkZGRlxuICAgIGNvbG9yIDogL14jPyhbYS1mQS1GMC05XXs2fXxbYS1mQS1GMC05XXszfSkkL1xuICB9LFxuXG4gIC8qKlxuICAgKiBPcHRpb25hbCB2YWxpZGF0aW9uIGZ1bmN0aW9ucyB0byBiZSB1c2VkLiBgZXF1YWxUb2AgYmVpbmcgdGhlIG9ubHkgZGVmYXVsdCBpbmNsdWRlZCBmdW5jdGlvbi5cbiAgICogRnVuY3Rpb25zIHNob3VsZCByZXR1cm4gb25seSBhIGJvb2xlYW4gaWYgdGhlIGlucHV0IGlzIHZhbGlkIG9yIG5vdC4gRnVuY3Rpb25zIGFyZSBnaXZlbiB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAgICogZWwgOiBUaGUgalF1ZXJ5IGVsZW1lbnQgdG8gdmFsaWRhdGUuXG4gICAqIHJlcXVpcmVkIDogQm9vbGVhbiB2YWx1ZSBvZiB0aGUgcmVxdWlyZWQgYXR0cmlidXRlIGJlIHByZXNlbnQgb3Igbm90LlxuICAgKiBwYXJlbnQgOiBUaGUgZGlyZWN0IHBhcmVudCBvZiB0aGUgaW5wdXQuXG4gICAqIEBvcHRpb25cbiAgICovXG4gIHZhbGlkYXRvcnM6IHtcbiAgICBlcXVhbFRvOiBmdW5jdGlvbiAoZWwsIHJlcXVpcmVkLCBwYXJlbnQpIHtcbiAgICAgIHJldHVybiAkKGAjJHtlbC5hdHRyKCdkYXRhLWVxdWFsdG8nKX1gKS52YWwoKSA9PT0gZWwudmFsKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBYmlkZSwgJ0FiaWRlJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBBY2NvcmRpb24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqL1xuXG5jbGFzcyBBY2NvcmRpb24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24uXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWNjb3JkaW9uI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYSBwbGFpbiBvYmplY3Qgd2l0aCBzZXR0aW5ncyB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBY2NvcmRpb24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0FjY29yZGlvbicpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbicsIHtcbiAgICAgICdFTlRFUic6ICd0b2dnbGUnLFxuICAgICAgJ1NQQUNFJzogJ3RvZ2dsZScsXG4gICAgICAnQVJST1dfRE9XTic6ICduZXh0JyxcbiAgICAgICdBUlJPV19VUCc6ICdwcmV2aW91cydcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIGJ5IGFuaW1hdGluZyB0aGUgcHJlc2V0IGFjdGl2ZSBwYW5lKHMpLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICB0aGlzLiR0YWJzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignbGksIFtkYXRhLWFjY29yZGlvbi1pdGVtXScpO1xuXG4gICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uKGlkeCwgZWwpIHtcbiAgICAgIHZhciAkZWwgPSAkKGVsKSxcbiAgICAgICAgICAkY29udGVudCA9ICRlbC5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyksXG4gICAgICAgICAgaWQgPSAkY29udGVudFswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdhY2NvcmRpb24nKSxcbiAgICAgICAgICBsaW5rSWQgPSBlbC5pZCB8fCBgJHtpZH0tbGFiZWxgO1xuXG4gICAgICAkZWwuZmluZCgnYTpmaXJzdCcpLmF0dHIoe1xuICAgICAgICAnYXJpYS1jb250cm9scyc6IGlkLFxuICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAnaWQnOiBsaW5rSWQsXG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICAkY29udGVudC5hdHRyKHsncm9sZSc6ICd0YWJwYW5lbCcsICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWQsICdhcmlhLWhpZGRlbic6IHRydWUsICdpZCc6IGlkfSk7XG4gICAgfSk7XG4gICAgdmFyICRpbml0QWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJykuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgIGlmKCRpbml0QWN0aXZlLmxlbmd0aCl7XG4gICAgICB0aGlzLmRvd24oJGluaXRBY3RpdmUsIHRydWUpO1xuICAgIH1cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIGFjY29yZGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJHRhYnMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkZWxlbSA9ICQodGhpcyk7XG4gICAgICB2YXIgJHRhYkNvbnRlbnQgPSAkZWxlbS5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyk7XG4gICAgICBpZiAoJHRhYkNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICAgICRlbGVtLmNoaWxkcmVuKCdhJykub2ZmKCdjbGljay56Zi5hY2NvcmRpb24ga2V5ZG93bi56Zi5hY2NvcmRpb24nKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay56Zi5hY2NvcmRpb24nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLnRvZ2dsZSgkdGFiQ29udGVudCk7XG4gICAgICAgIH0pLm9uKCdrZXlkb3duLnpmLmFjY29yZGlvbicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdBY2NvcmRpb24nLCB7XG4gICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBfdGhpcy50b2dnbGUoJHRhYkNvbnRlbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgJGEgPSAkZWxlbS5uZXh0KCkuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5tdWx0aUV4cGFuZCkge1xuICAgICAgICAgICAgICAgICRhLnRyaWdnZXIoJ2NsaWNrLnpmLmFjY29yZGlvbicpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2aW91czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciAkYSA9ICRlbGVtLnByZXYoKS5maW5kKCdhJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgJGEudHJpZ2dlcignY2xpY2suemYuYWNjb3JkaW9uJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHNlbGVjdGVkIGNvbnRlbnQgcGFuZSdzIG9wZW4vY2xvc2Ugc3RhdGUuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0galF1ZXJ5IG9iamVjdCBvZiB0aGUgcGFuZSB0byB0b2dnbGUgKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoJHRhcmdldCkge1xuICAgIGlmKCR0YXJnZXQucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XG4gICAgICB0aGlzLnVwKCR0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvd24oJHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBhY2NvcmRpb24gdGFiIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIEFjY29yZGlvbiBwYW5lIHRvIG9wZW4gKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICogQHBhcmFtIHtCb29sZWFufSBmaXJzdFRpbWUgLSBmbGFnIHRvIGRldGVybWluZSBpZiByZWZsb3cgc2hvdWxkIGhhcHBlbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbiNkb3duXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZG93bigkdGFyZ2V0LCBmaXJzdFRpbWUpIHtcbiAgICAkdGFyZ2V0XG4gICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSlcbiAgICAgIC5wYXJlbnQoJ1tkYXRhLXRhYi1jb250ZW50XScpXG4gICAgICAuYWRkQmFjaygpXG4gICAgICAucGFyZW50KCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQgJiYgIWZpcnN0VGltZSkge1xuICAgICAgdmFyICRjdXJyZW50QWN0aXZlID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWFjdGl2ZScpLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgIGlmICgkY3VycmVudEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy51cCgkY3VycmVudEFjdGl2ZS5ub3QoJHRhcmdldCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgICR0YXJnZXQuc2xpZGVEb3duKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAoKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHRhYiBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI2Rvd25cbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdkb3duLnpmLmFjY29yZGlvbicsIFskdGFyZ2V0XSk7XG4gICAgfSk7XG5cbiAgICAkKGAjJHskdGFyZ2V0LmF0dHIoJ2FyaWEtbGFiZWxsZWRieScpfWApLmF0dHIoe1xuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiB0cnVlLFxuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSB0YWIgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQWNjb3JkaW9uIHRhYiB0byBjbG9zZSAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uI3VwXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgdXAoJHRhcmdldCkge1xuICAgIHZhciAkYXVudHMgPSAkdGFyZ2V0LnBhcmVudCgpLnNpYmxpbmdzKCksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmKCghdGhpcy5vcHRpb25zLmFsbG93QWxsQ2xvc2VkICYmICEkYXVudHMuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB8fCAhJHRhcmdldC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsICR0YXJnZXQsIGZ1bmN0aW9uKCl7XG4gICAgICAkdGFyZ2V0LnNsaWRlVXAoX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB0YWIgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI3VwXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cC56Zi5hY2NvcmRpb24nLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG4gICAgLy8gfSk7XG5cbiAgICAkdGFyZ2V0LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICAgICAgICAgLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICQoYCMkeyR0YXJnZXQuYXR0cignYXJpYS1sYWJlbGxlZGJ5Jyl9YCkuYXR0cih7XG4gICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFuIGFjY29yZGlvbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbiNkZXN0cm95ZWRcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtdGFiLWNvbnRlbnRdJykuc3RvcCh0cnVlKS5zbGlkZVVwKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJy56Zi5hY2NvcmRpb24nKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5BY2NvcmRpb24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBhbmltYXRlIHRoZSBvcGVuaW5nIG9mIGFuIGFjY29yZGlvbiBwYW5lLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1MFxuICAgKi9cbiAgc2xpZGVTcGVlZDogMjUwLFxuICAvKipcbiAgICogQWxsb3cgdGhlIGFjY29yZGlvbiB0byBoYXZlIG11bHRpcGxlIG9wZW4gcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIG11bHRpRXhwYW5kOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBhY2NvcmRpb24gdG8gY2xvc2UgYWxsIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBhbGxvd0FsbENsb3NlZDogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBY2NvcmRpb24sICdBY2NvcmRpb24nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFjY29yZGlvbk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvbk1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG5jbGFzcyBBY2NvcmRpb25NZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQWNjb3JkaW9uTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnQWNjb3JkaW9uTWVudScpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbk1lbnUnLCB7XG4gICAgICAnRU5URVInOiAndG9nZ2xlJyxcbiAgICAgICdTUEFDRSc6ICd0b2dnbGUnLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAnY2xvc2UnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZUFsbCdcbiAgICB9KTtcbiAgfVxuXG5cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGFjY29yZGlvbiBtZW51IGJ5IGhpZGluZyBhbGwgbmVzdGVkIG1lbnVzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLm5vdCgnLmlzLWFjdGl2ZScpLnNsaWRlVXAoMCk7Ly8uZmluZCgnYScpLmNzcygncGFkZGluZy1sZWZ0JywgJzFyZW0nKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ3JvbGUnOiAnbWVudScsXG4gICAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiB0aGlzLm9wdGlvbnMubXVsdGlPcGVuXG4gICAgfSk7XG5cbiAgICB0aGlzLiRtZW51TGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY2NvcmRpb24tc3VibWVudS1wYXJlbnQnKTtcbiAgICB0aGlzLiRtZW51TGlua3MuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyIGxpbmtJZCA9IHRoaXMuaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnYWNjLW1lbnUtbGluaycpLFxuICAgICAgICAgICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAkc3ViID0gJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyksXG4gICAgICAgICAgc3ViSWQgPSAkc3ViWzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjYy1tZW51JyksXG4gICAgICAgICAgaXNBY3RpdmUgPSAkc3ViLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICRlbGVtLmF0dHIoe1xuICAgICAgICAnYXJpYS1jb250cm9scyc6IHN1YklkLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGlzQWN0aXZlLFxuICAgICAgICAncm9sZSc6ICdtZW51aXRlbScsXG4gICAgICAgICdpZCc6IGxpbmtJZFxuICAgICAgfSk7XG4gICAgICAkc3ViLmF0dHIoe1xuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICdyb2xlJzogJ21lbnUnLFxuICAgICAgICAnaWQnOiBzdWJJZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGluaXRQYW5lcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpO1xuICAgIGlmKGluaXRQYW5lcy5sZW5ndGgpe1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGluaXRQYW5lcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIF90aGlzLmRvd24oJCh0aGlzKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSBtZW51LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJHN1Ym1lbnUgPSAkKHRoaXMpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuXG4gICAgICBpZiAoJHN1Ym1lbnUubGVuZ3RoKSB7XG4gICAgICAgICQodGhpcykuY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKS5vbignY2xpY2suemYuYWNjb3JkaW9uTWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICBfdGhpcy50b2dnbGUoJHN1Ym1lbnUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KS5vbigna2V5ZG93bi56Zi5hY2NvcmRpb25tZW51JywgZnVuY3Rpb24oZSl7XG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50LFxuICAgICAgICAgICR0YXJnZXQgPSAkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKTtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaS0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkrMSwgJGVsZW1lbnRzLmxlbmd0aC0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG5cbiAgICAgICAgICBpZiAoJCh0aGlzKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkgeyAvLyBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3QtY2hpbGQnKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpmaXJzdC1jaGlsZCcpKSB7IC8vIGlzIGZpcnN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdOnZpc2libGUnKS5sZW5ndGgpIHsgLy8gaWYgcHJldmlvdXMgZWxlbWVudCBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJHByZXZFbGVtZW50LnBhcmVudHMoJ2xpJykuZmluZCgnbGk6bGFzdC1jaGlsZCcpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJCh0aGlzKS5pcygnOmxhc3QtY2hpbGQnKSkgeyAvLyBpcyBsYXN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5uZXh0KCdsaScpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdBY2NvcmRpb25NZW51Jywge1xuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgICBfdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgICAgICAgJHRhcmdldC5maW5kKCdsaScpLmZpcnN0KCkuZmluZCgnYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5sZW5ndGggJiYgISR0YXJnZXQuaXMoJzpoaWRkZW4nKSkgeyAvLyBjbG9zZSBhY3RpdmUgc3ViIG9mIHRoaXMgaXRlbVxuICAgICAgICAgICAgX3RoaXMudXAoJHRhcmdldCk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7IC8vIGNsb3NlIGN1cnJlbnRseSBvcGVuIHN1YlxuICAgICAgICAgICAgX3RoaXMudXAoJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdWJtZW51XScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBfdGhpcy50b2dnbGUoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmhpZGVBbGwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24ocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7Ly8uYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYWxsIHBhbmVzIG9mIHRoZSBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGhpZGVBbGwoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLnNsaWRlVXAodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2Ugc3RhdGUgb2YgYSBzdWJtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSB0aGUgc3VibWVudSB0byB0b2dnbGVcbiAgICovXG4gIHRvZ2dsZSgkdGFyZ2V0KXtcbiAgICBpZighJHRhcmdldC5pcygnOmFuaW1hdGVkJykpIHtcbiAgICAgIGlmICghJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgIHRoaXMudXAoJHRhcmdldCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgc3ViLW1lbnUgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gb3Blbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjZG93blxuICAgKi9cbiAgZG93bigkdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmKCF0aGlzLm9wdGlvbnMubXVsdGlPcGVuKSB7XG4gICAgICB0aGlzLnVwKHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpLm5vdCgkdGFyZ2V0LnBhcmVudHNVbnRpbCh0aGlzLiRlbGVtZW50KS5hZGQoJHRhcmdldCkpKTtcbiAgICB9XG5cbiAgICAkdGFyZ2V0LmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hdHRyKHsnYXJpYS1oaWRkZW4nOiBmYWxzZX0pXG4gICAgICAucGFyZW50KCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50JykuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG5cbiAgICAgIC8vRm91bmRhdGlvbi5Nb3ZlKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAkdGFyZ2V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgJHRhcmdldC5zbGlkZURvd24oX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbk1lbnUjZG93blxuICAgICAgICAgICAqL1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Rvd24uemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICAgIH0pO1xuICAgICAgLy99KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHN1Yi1tZW51IGRlZmluZWQgYnkgYCR0YXJnZXRgLiBBbGwgc3ViLW1lbnVzIGluc2lkZSB0aGUgdGFyZ2V0IHdpbGwgYmUgY2xvc2VkIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gY2xvc2UuXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I3VwXG4gICAqL1xuICB1cCgkdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAvL0ZvdW5kYXRpb24uTW92ZSh0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgJHRhcmdldCwgZnVuY3Rpb24oKXtcbiAgICAgICR0YXJnZXQuc2xpZGVVcChfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uTWVudSN1cFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcigndXAuemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcbiAgICAvL30pO1xuXG4gICAgdmFyICRtZW51cyA9ICR0YXJnZXQuZmluZCgnW2RhdGEtc3VibWVudV0nKS5zbGlkZVVwKDApLmFkZEJhY2soKS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgJG1lbnVzLnBhcmVudCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2Rlc3Ryb3llZFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVEb3duKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKTtcblxuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdhY2NvcmRpb24nKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuQWNjb3JkaW9uTWVudS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGFuaW1hdGUgdGhlIG9wZW5pbmcgb2YgYSBzdWJtZW51IGluIG1zLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1MFxuICAgKi9cbiAgc2xpZGVTcGVlZDogMjUwLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIG11bHRpT3BlbjogdHJ1ZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEFjY29yZGlvbk1lbnUsICdBY2NvcmRpb25NZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBEcmlsbGRvd24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyaWxsZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubmVzdFxuICovXG5cbmNsYXNzIERyaWxsZG93biB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgZHJpbGxkb3duIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGFuIGFjY29yZGlvbiBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIERyaWxsZG93bi5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2RyaWxsZG93bicpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRHJpbGxkb3duJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignRHJpbGxkb3duJywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZScsXG4gICAgICAnVEFCJzogJ2Rvd24nLFxuICAgICAgJ1NISUZUX1RBQic6ICd1cCdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgZHJpbGxkb3duIGJ5IGNyZWF0aW5nIGpRdWVyeSBjb2xsZWN0aW9ucyBvZiBlbGVtZW50c1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kc3VibWVudUFuY2hvcnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpLmlzLWRyaWxsZG93bi1zdWJtZW51LXBhcmVudCcpLmNoaWxkcmVuKCdhJyk7XG4gICAgdGhpcy4kc3VibWVudXMgPSB0aGlzLiRzdWJtZW51QW5jaG9ycy5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyk7XG4gICAgdGhpcy4kbWVudUl0ZW1zID0gdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLm5vdCgnLmpzLWRyaWxsZG93bi1iYWNrJykuYXR0cigncm9sZScsICdtZW51aXRlbScpLmZpbmQoJ2EnKTtcblxuICAgIHRoaXMuX3ByZXBhcmVNZW51KCk7XG5cbiAgICB0aGlzLl9rZXlib2FyZEV2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIHByZXBhcmVzIGRyaWxsZG93biBtZW51IGJ5IHNldHRpbmcgYXR0cmlidXRlcyB0byBsaW5rcyBhbmQgZWxlbWVudHNcbiAgICogc2V0cyBhIG1pbiBoZWlnaHQgdG8gcHJldmVudCBjb250ZW50IGp1bXBpbmdcbiAgICogd3JhcHMgdGhlIGVsZW1lbnQgaWYgbm90IGFscmVhZHkgd3JhcHBlZFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIF9wcmVwYXJlTWVudSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8vIGlmKCF0aGlzLm9wdGlvbnMuaG9sZE9wZW4pe1xuICAgIC8vICAgdGhpcy5fbWVudUxpbmtFdmVudHMoKTtcbiAgICAvLyB9XG4gICAgdGhpcy4kc3VibWVudUFuY2hvcnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyICRsaW5rID0gJCh0aGlzKTtcbiAgICAgIHZhciAkc3ViID0gJGxpbmsucGFyZW50KCk7XG4gICAgICBpZihfdGhpcy5vcHRpb25zLnBhcmVudExpbmspe1xuICAgICAgICAkbGluay5jbG9uZSgpLnByZXBlbmRUbygkc3ViLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpKS53cmFwKCc8bGkgY2xhc3M9XCJpcy1zdWJtZW51LXBhcmVudC1pdGVtIGlzLXN1Ym1lbnUtaXRlbSBpcy1kcmlsbGRvd24tc3VibWVudS1pdGVtXCIgcm9sZT1cIm1lbnUtaXRlbVwiPjwvbGk+Jyk7XG4gICAgICB9XG4gICAgICAkbGluay5kYXRhKCdzYXZlZEhyZWYnLCAkbGluay5hdHRyKCdocmVmJykpLnJlbW92ZUF0dHIoJ2hyZWYnKS5hdHRyKCd0YWJpbmRleCcsIDApO1xuICAgICAgJGxpbmsuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJylcbiAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogMCxcbiAgICAgICAgICAgICdyb2xlJzogJ21lbnUnXG4gICAgICAgICAgfSk7XG4gICAgICBfdGhpcy5fZXZlbnRzKCRsaW5rKTtcbiAgICB9KTtcbiAgICB0aGlzLiRzdWJtZW51cy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJG1lbnUgPSAkKHRoaXMpLFxuICAgICAgICAgICRiYWNrID0gJG1lbnUuZmluZCgnLmpzLWRyaWxsZG93bi1iYWNrJyk7XG4gICAgICBpZighJGJhY2subGVuZ3RoKXtcbiAgICAgICAgJG1lbnUucHJlcGVuZChfdGhpcy5vcHRpb25zLmJhY2tCdXR0b24pO1xuICAgICAgfVxuICAgICAgX3RoaXMuX2JhY2soJG1lbnUpO1xuICAgIH0pO1xuICAgIGlmKCF0aGlzLiRlbGVtZW50LnBhcmVudCgpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24nKSl7XG4gICAgICB0aGlzLiR3cmFwcGVyID0gJCh0aGlzLm9wdGlvbnMud3JhcHBlcikuYWRkQ2xhc3MoJ2lzLWRyaWxsZG93bicpO1xuICAgICAgdGhpcy4kd3JhcHBlciA9IHRoaXMuJGVsZW1lbnQud3JhcCh0aGlzLiR3cmFwcGVyKS5wYXJlbnQoKS5jc3ModGhpcy5fZ2V0TWF4RGltcygpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyB0byBlbGVtZW50cyBpbiB0aGUgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IG1lbnUgaXRlbSB0byBhZGQgaGFuZGxlcnMgdG8uXG4gICAqL1xuICBfZXZlbnRzKCRlbGVtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICRlbGVtLm9mZignY2xpY2suemYuZHJpbGxkb3duJylcbiAgICAub24oJ2NsaWNrLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYoJChlLnRhcmdldCkucGFyZW50c1VudGlsKCd1bCcsICdsaScpLmhhc0NsYXNzKCdpcy1kcmlsbGRvd24tc3VibWVudS1wYXJlbnQnKSl7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldC5maXJzdEVsZW1lbnRDaGlsZCl7XG4gICAgICAvLyAgIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIH1cbiAgICAgIF90aGlzLl9zaG93KCRlbGVtLnBhcmVudCgnbGknKSk7XG5cbiAgICAgIGlmKF90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKXtcbiAgICAgICAgdmFyICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgICAkYm9keS5vZmYoJy56Zi5kcmlsbGRvd24nKS5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBfdGhpcy4kZWxlbWVudFswXSB8fCAkLmNvbnRhaW5zKF90aGlzLiRlbGVtZW50WzBdLCBlLnRhcmdldCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLl9oaWRlQWxsKCk7XG4gICAgICAgICAgJGJvZHkub2ZmKCcuemYuZHJpbGxkb3duJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMga2V5ZG93biBldmVudCBsaXN0ZW5lciB0byBgbGlgJ3MgaW4gdGhlIG1lbnUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfa2V5Ym9hcmRFdmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJG1lbnVJdGVtcy5hZGQodGhpcy4kZWxlbWVudC5maW5kKCcuanMtZHJpbGxkb3duLWJhY2sgPiBhJykpLm9uKCdrZXlkb3duLnpmLmRyaWxsZG93bicsIGZ1bmN0aW9uKGUpe1xuXG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykuY2hpbGRyZW4oJ2xpJykuY2hpbGRyZW4oJ2EnKSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShNYXRoLm1heCgwLCBpLTEpKTtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSsxLCAkZWxlbWVudHMubGVuZ3RoLTEpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnRHJpbGxkb3duJywge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLmZpbmQoJ3VsIGxpIGEnKS5maWx0ZXIoX3RoaXMuJG1lbnVJdGVtcykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpKTtcbiAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW1lbnQpLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJykuY2hpbGRyZW4oJ2EnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLl9iYWNrKCk7XG4gICAgICAgICAgLy9fdGhpcy4kbWVudUl0ZW1zLmZpcnN0KCkuZm9jdXMoKTsgLy8gZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoISRlbGVtZW50LmlzKF90aGlzLiRtZW51SXRlbXMpKSB7IC8vIG5vdCBtZW51IGl0ZW0gbWVhbnMgYmFjayBidXR0b25cbiAgICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtZW50LnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykpO1xuICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLnBhcmVudCgndWwnKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkZWxlbWVudC5wYXJlbnQoJ2xpJykucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKS5jaGlsZHJlbignYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgfSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAgICAgICAgICAgIFxuICAgICAgICAgIH0gZWxzZSBpZiAoJGVsZW1lbnQuaXMoX3RoaXMuJHN1Ym1lbnVBbmNob3JzKSkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW1lbnQucGFyZW50KCdsaScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgnbGknKS5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtZW50KSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50KCdsaScpLmZpbmQoJ3VsIGxpIGEnKS5maWx0ZXIoX3RoaXMuJG1lbnVJdGVtcykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pOyAvLyBlbmQga2V5Ym9hcmRBY2Nlc3NcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYWxsIG9wZW4gZWxlbWVudHMsIGFuZCByZXR1cm5zIHRvIHJvb3QgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcmlsbGRvd24jY2xvc2VkXG4gICAqL1xuICBfaGlkZUFsbCgpIHtcbiAgICB2YXIgJGVsZW0gPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1kcmlsbGRvd24tc3VibWVudS5pcy1hY3RpdmUnKS5hZGRDbGFzcygnaXMtY2xvc2luZycpO1xuICAgICRlbGVtLm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQoJGVsZW0pLCBmdW5jdGlvbihlKXtcbiAgICAgICRlbGVtLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtY2xvc2luZycpO1xuICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBmdWxseSBjbG9zZWQuXG4gICAgICAgICAqIEBldmVudCBEcmlsbGRvd24jY2xvc2VkXG4gICAgICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VkLnpmLmRyaWxsZG93bicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXIgZm9yIGVhY2ggYGJhY2tgIGJ1dHRvbiwgYW5kIGNsb3NlcyBvcGVuIG1lbnVzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyaWxsZG93biNiYWNrXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbSAtIHRoZSBjdXJyZW50IHN1Yi1tZW51IHRvIGFkZCBgYmFja2AgZXZlbnQuXG4gICAqL1xuICBfYmFjaygkZWxlbSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgJGVsZW0ub2ZmKCdjbGljay56Zi5kcmlsbGRvd24nKTtcbiAgICAkZWxlbS5jaGlsZHJlbignLmpzLWRyaWxsZG93bi1iYWNrJylcbiAgICAgIC5vbignY2xpY2suemYuZHJpbGxkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdtb3VzZXVwIG9uIGJhY2snKTtcbiAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGEgcGFyZW50IHN1Ym1lbnUsIGNhbGwgc2hvd1xuICAgICAgICBsZXQgcGFyZW50U3ViTWVudSA9ICRlbGVtLnBhcmVudCgnbGknKS5wYXJlbnQoJ3VsJykucGFyZW50KCdsaScpO1xuICAgICAgICBpZiAocGFyZW50U3ViTWVudS5sZW5ndGgpIHsgXG4gICAgICAgICAgX3RoaXMuX3Nob3cocGFyZW50U3ViTWVudSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXIgdG8gbWVudSBpdGVtcyB3L28gc3VibWVudXMgdG8gY2xvc2Ugb3BlbiBtZW51cyBvbiBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbWVudUxpbmtFdmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRtZW51SXRlbXMubm90KCcuaXMtZHJpbGxkb3duLXN1Ym1lbnUtcGFyZW50JylcbiAgICAgICAgLm9mZignY2xpY2suemYuZHJpbGxkb3duJylcbiAgICAgICAgLm9uKCdjbGljay56Zi5kcmlsbGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAvLyBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIF90aGlzLl9oaWRlQWxsKCk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIHN1Ym1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJpbGxkb3duI29wZW5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gdGhlIGN1cnJlbnQgZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBvcGVuLCBpLmUuIHRoZSBgbGlgIHRhZy5cbiAgICovXG4gIF9zaG93KCRlbGVtKSB7XG4gICAgJGVsZW0uYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICRlbGVtLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpLmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBzdWJtZW51IGhhcyBvcGVuZWQuXG4gICAgICogQGV2ZW50IERyaWxsZG93biNvcGVuXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvcGVuLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBIaWRlcyBhIHN1Ym1lbnVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcmlsbGRvd24jaGlkZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSB0aGUgY3VycmVudCBzdWItbWVudSB0byBoaWRlLCBpLmUuIHRoZSBgdWxgIHRhZy5cbiAgICovXG4gIF9oaWRlKCRlbGVtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAkZWxlbS5wYXJlbnQoJ2xpJykuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAkZWxlbS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpLmFkZENsYXNzKCdpcy1jbG9zaW5nJylcbiAgICAgICAgIC5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKCRlbGVtKSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgJGVsZW0ucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZSBpcy1jbG9zaW5nJyk7XG4gICAgICAgICAgICRlbGVtLmJsdXIoKTtcbiAgICAgICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHN1Ym1lbnUgaGFzIGNsb3NlZC5cbiAgICAgKiBAZXZlbnQgRHJpbGxkb3duI2hpZGVcbiAgICAgKi9cbiAgICAkZWxlbS50cmlnZ2VyKCdoaWRlLnpmLmRyaWxsZG93bicsIFskZWxlbV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIHRocm91Z2ggdGhlIG5lc3RlZCBtZW51cyB0byBjYWxjdWxhdGUgdGhlIG1pbi1oZWlnaHQsIGFuZCBtYXgtd2lkdGggZm9yIHRoZSBtZW51LlxuICAgKiBQcmV2ZW50cyBjb250ZW50IGp1bXBpbmcuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldE1heERpbXMoKSB7XG4gICAgdmFyIGJpZ2dlc3QgPSAwXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gICAgdGhpcy4kc3VibWVudXMuYWRkKHRoaXMuJGVsZW1lbnQpLmVhY2goKGksIGVsZW0pID0+IHtcbiAgICAgIHZhciBoZWlnaHQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgIGlmIChoZWlnaHQgPiBiaWdnZXN0KSBiaWdnZXN0ID0gaGVpZ2h0O1xuICAgIH0pO1xuXG4gICAgcmVzdWx0WydtaW4taGVpZ2h0J10gPSBgJHtiaWdnZXN0fXB4YDtcbiAgICByZXN1bHRbJ21heC13aWR0aCddID0gYCR7dGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aH1weGA7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBEcmlsbGRvd24gTWVudVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5faGlkZUFsbCgpO1xuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdkcmlsbGRvd24nKTtcbiAgICB0aGlzLiRlbGVtZW50LnVud3JhcCgpXG4gICAgICAgICAgICAgICAgIC5maW5kKCcuanMtZHJpbGxkb3duLWJhY2ssIC5pcy1zdWJtZW51LXBhcmVudC1pdGVtJykucmVtb3ZlKClcbiAgICAgICAgICAgICAgICAgLmVuZCgpLmZpbmQoJy5pcy1hY3RpdmUsIC5pcy1jbG9zaW5nLCAuaXMtZHJpbGxkb3duLXN1Ym1lbnUnKS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlIGlzLWNsb3NpbmcgaXMtZHJpbGxkb3duLXN1Ym1lbnUnKVxuICAgICAgICAgICAgICAgICAuZW5kKCkuZmluZCgnW2RhdGEtc3VibWVudV0nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCByb2xlJyk7XG4gICAgdGhpcy4kc3VibWVudUFuY2hvcnMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICQodGhpcykub2ZmKCcuemYuZHJpbGxkb3duJyk7XG4gICAgfSk7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdhJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyICRsaW5rID0gJCh0aGlzKTtcbiAgICAgICRsaW5rLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICBpZigkbGluay5kYXRhKCdzYXZlZEhyZWYnKSl7XG4gICAgICAgICRsaW5rLmF0dHIoJ2hyZWYnLCAkbGluay5kYXRhKCdzYXZlZEhyZWYnKSkucmVtb3ZlRGF0YSgnc2F2ZWRIcmVmJyk7XG4gICAgICB9ZWxzZXsgcmV0dXJuOyB9XG4gICAgfSk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9O1xufVxuXG5EcmlsbGRvd24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBNYXJrdXAgdXNlZCBmb3IgSlMgZ2VuZXJhdGVkIGJhY2sgYnV0dG9uLiBQcmVwZW5kZWQgdG8gc3VibWVudSBsaXN0cyBhbmQgZGVsZXRlZCBvbiBgZGVzdHJveWAgbWV0aG9kLCAnanMtZHJpbGxkb3duLWJhY2snIGNsYXNzIHJlcXVpcmVkLiBSZW1vdmUgdGhlIGJhY2tzbGFzaCAoYFxcYCkgaWYgY29weSBhbmQgcGFzdGluZy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnPFxcbGk+PFxcYT5CYWNrPFxcL2E+PFxcL2xpPidcbiAgICovXG4gIGJhY2tCdXR0b246ICc8bGkgY2xhc3M9XCJqcy1kcmlsbGRvd24tYmFja1wiPjxhIHRhYmluZGV4PVwiMFwiPkJhY2s8L2E+PC9saT4nLFxuICAvKipcbiAgICogTWFya3VwIHVzZWQgdG8gd3JhcCBkcmlsbGRvd24gbWVudS4gVXNlIGEgY2xhc3MgbmFtZSBmb3IgaW5kZXBlbmRlbnQgc3R5bGluZzsgdGhlIEpTIGFwcGxpZWQgY2xhc3M6IGBpcy1kcmlsbGRvd25gIGlzIHJlcXVpcmVkLiBSZW1vdmUgdGhlIGJhY2tzbGFzaCAoYFxcYCkgaWYgY29weSBhbmQgcGFzdGluZy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnPFxcZGl2IGNsYXNzPVwiaXMtZHJpbGxkb3duXCI+PFxcL2Rpdj4nXG4gICAqL1xuICB3cmFwcGVyOiAnPGRpdj48L2Rpdj4nLFxuICAvKipcbiAgICogQWRkcyB0aGUgcGFyZW50IGxpbmsgdG8gdGhlIHN1Ym1lbnUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIHBhcmVudExpbms6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gcmV0dXJuIHRvIHJvb3QgbGlzdCBvbiBib2R5IGNsaWNrLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IGZhbHNlXG4gIC8vIGhvbGRPcGVuOiBmYWxzZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKERyaWxsZG93biwgJ0RyaWxsZG93bicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRHJvcGRvd24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyb3Bkb3duXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbmNsYXNzIERyb3Bkb3duIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBkcm9wZG93bi5cbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93bi5cbiAgICogICAgICAgIE9iamVjdCBzaG91bGQgYmUgb2YgdGhlIGRyb3Bkb3duIHBhbmVsLCByYXRoZXIgdGhhbiBpdHMgYW5jaG9yLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIERyb3Bkb3duLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRHJvcGRvd24nKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdEcm9wZG93bicsIHtcbiAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICdFU0NBUEUnOiAnY2xvc2UnLFxuICAgICAgJ1RBQic6ICd0YWJfZm9yd2FyZCcsXG4gICAgICAnU0hJRlRfVEFCJzogJ3RhYl9iYWNrd2FyZCdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luIGJ5IHNldHRpbmcvY2hlY2tpbmcgb3B0aW9ucyBhbmQgYXR0cmlidXRlcywgYWRkaW5nIGhlbHBlciB2YXJpYWJsZXMsIGFuZCBzYXZpbmcgdGhlIGFuY2hvci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgJGlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpO1xuXG4gICAgdGhpcy4kYW5jaG9yID0gJChgW2RhdGEtdG9nZ2xlPVwiJHskaWR9XCJdYCkubGVuZ3RoID8gJChgW2RhdGEtdG9nZ2xlPVwiJHskaWR9XCJdYCkgOiAkKGBbZGF0YS1vcGVuPVwiJHskaWR9XCJdYCk7XG4gICAgdGhpcy4kYW5jaG9yLmF0dHIoe1xuICAgICAgJ2FyaWEtY29udHJvbHMnOiAkaWQsXG4gICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgJ2RhdGEteWV0aS1ib3gnOiAkaWQsXG4gICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlXG5cbiAgICB9KTtcblxuICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzID0gdGhpcy5nZXRQb3NpdGlvbkNsYXNzKCk7XG4gICAgdGhpcy5jb3VudGVyID0gNDtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMgPSBbXTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgJ2RhdGEteWV0aS1ib3gnOiAkaWQsXG4gICAgICAnZGF0YS1yZXNpemUnOiAkaWQsXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogdGhpcy4kYW5jaG9yWzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2RkLWFuY2hvcicpXG4gICAgfSk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSBjdXJyZW50IG9yaWVudGF0aW9uIG9mIGRyb3Bkb3duIHBhbmUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBwb3NpdGlvbiAtIHN0cmluZyB2YWx1ZSBvZiBhIHBvc2l0aW9uIGNsYXNzLlxuICAgKi9cbiAgZ2V0UG9zaXRpb25DbGFzcygpIHtcbiAgICB2YXIgdmVydGljYWxQb3NpdGlvbiA9IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8odG9wfGxlZnR8cmlnaHR8Ym90dG9tKS9nKTtcbiAgICAgICAgdmVydGljYWxQb3NpdGlvbiA9IHZlcnRpY2FsUG9zaXRpb24gPyB2ZXJ0aWNhbFBvc2l0aW9uWzBdIDogJyc7XG4gICAgdmFyIGhvcml6b250YWxQb3NpdGlvbiA9IC9mbG9hdC0oXFxTKykvLmV4ZWModGhpcy4kYW5jaG9yWzBdLmNsYXNzTmFtZSk7XG4gICAgICAgIGhvcml6b250YWxQb3NpdGlvbiA9IGhvcml6b250YWxQb3NpdGlvbiA/IGhvcml6b250YWxQb3NpdGlvblsxXSA6ICcnO1xuICAgIHZhciBwb3NpdGlvbiA9IGhvcml6b250YWxQb3NpdGlvbiA/IGhvcml6b250YWxQb3NpdGlvbiArICcgJyArIHZlcnRpY2FsUG9zaXRpb24gOiB2ZXJ0aWNhbFBvc2l0aW9uO1xuXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkanVzdHMgdGhlIGRyb3Bkb3duIHBhbmVzIG9yaWVudGF0aW9uIGJ5IGFkZGluZy9yZW1vdmluZyBwb3NpdGlvbmluZyBjbGFzc2VzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBvc2l0aW9uIC0gcG9zaXRpb24gY2xhc3MgdG8gcmVtb3ZlLlxuICAgKi9cbiAgX3JlcG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMucHVzaChwb3NpdGlvbiA/IHBvc2l0aW9uIDogJ2JvdHRvbScpO1xuICAgIC8vZGVmYXVsdCwgdHJ5IHN3aXRjaGluZyB0byBvcHBvc2l0ZSBzaWRlXG4gICAgaWYoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCd0b3AnKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbilcbiAgICAgICAgICAuYWRkQ2xhc3MoJ3JpZ2h0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICdyaWdodCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH1cblxuICAgIC8vaWYgZGVmYXVsdCBjaGFuZ2UgZGlkbid0IHdvcmssIHRyeSBib3R0b20gb3IgbGVmdCBmaXJzdFxuICAgIGVsc2UgaWYoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICd0b3AnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2JvdHRvbScpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIC8vaWYgbm90aGluZyBjbGVhcmVkLCBzZXQgdG8gYm90dG9tXG4gICAgZWxzZXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1cbiAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IHRydWU7XG4gICAgdGhpcy5jb3VudGVyLS07XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcG9zaXRpb24gYW5kIG9yaWVudGF0aW9uIG9mIHRoZSBkcm9wZG93biBwYW5lLCBjaGVja3MgZm9yIGNvbGxpc2lvbnMuXG4gICAqIFJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiBpZiBhIGNvbGxpc2lvbiBpcyBkZXRlY3RlZCwgd2l0aCBhIG5ldyBwb3NpdGlvbiBjbGFzcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0UG9zaXRpb24oKSB7XG4gICAgaWYodGhpcy4kYW5jaG9yLmF0dHIoJ2FyaWEtZXhwYW5kZWQnKSA9PT0gJ2ZhbHNlJyl7IHJldHVybiBmYWxzZTsgfVxuICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb25DbGFzcygpLFxuICAgICAgICAkZWxlRGltcyA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy4kZWxlbWVudCksXG4gICAgICAgICRhbmNob3JEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRhbmNob3IpLFxuICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGRpcmVjdGlvbiA9IChwb3NpdGlvbiA9PT0gJ2xlZnQnID8gJ2xlZnQnIDogKChwb3NpdGlvbiA9PT0gJ3JpZ2h0JykgPyAnbGVmdCcgOiAndG9wJykpLFxuICAgICAgICBwYXJhbSA9IChkaXJlY3Rpb24gPT09ICd0b3AnKSA/ICdoZWlnaHQnIDogJ3dpZHRoJyxcbiAgICAgICAgb2Zmc2V0ID0gKHBhcmFtID09PSAnaGVpZ2h0JykgPyB0aGlzLm9wdGlvbnMudk9mZnNldCA6IHRoaXMub3B0aW9ucy5oT2Zmc2V0O1xuXG5cblxuICAgIGlmKCgkZWxlRGltcy53aWR0aCA+PSAkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoKSB8fCAoIXRoaXMuY291bnRlciAmJiAhRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLiRlbGVtZW50KSkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLiRlbGVtZW50LCB0aGlzLiRhbmNob3IsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0LCB0cnVlKSkuY3NzKHtcbiAgICAgICAgJ3dpZHRoJzogJGVsZURpbXMud2luZG93RGltcy53aWR0aCAtICh0aGlzLm9wdGlvbnMuaE9mZnNldCAqIDIpLFxuICAgICAgICAnaGVpZ2h0JzogJ2F1dG8nXG4gICAgICB9KTtcbiAgICAgIHRoaXMuY2xhc3NDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJGFuY2hvciwgcG9zaXRpb24sIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCkpO1xuXG4gICAgd2hpbGUoIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy4kZWxlbWVudCwgZmFsc2UsIHRydWUpICYmIHRoaXMuY291bnRlcil7XG4gICAgICB0aGlzLl9yZXBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBlbGVtZW50IHV0aWxpemluZyB0aGUgdHJpZ2dlcnMgdXRpbGl0eSBsaWJyYXJ5LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fc2V0UG9zaXRpb24uYmluZCh0aGlzKVxuICAgIH0pO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmhvdmVyKXtcbiAgICAgIHRoaXMuJGFuY2hvci5vZmYoJ21vdXNlZW50ZXIuemYuZHJvcGRvd24gbW91c2VsZWF2ZS56Zi5kcm9wZG93bicpXG4gICAgICAub24oJ21vdXNlZW50ZXIuemYuZHJvcGRvd24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoJCgnYm9keVtkYXRhLXdoYXRpbnB1dD1cIm1vdXNlXCJdJykuaXMoJyonKSkge1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZGF0YSgnaG92ZXInLCB0cnVlKTtcbiAgICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5vbignbW91c2VsZWF2ZS56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmRhdGEoJ2hvdmVyJywgZmFsc2UpO1xuICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICB9KTtcbiAgICAgIGlmKHRoaXMub3B0aW9ucy5ob3ZlclBhbmUpe1xuICAgICAgICB0aGlzLiRlbGVtZW50Lm9mZignbW91c2VlbnRlci56Zi5kcm9wZG93biBtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJylcbiAgICAgICAgICAgIC5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICAgICAgICBfdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiRhbmNob3IuYWRkKHRoaXMuJGVsZW1lbnQpLm9uKCdrZXlkb3duLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oZSkge1xuXG4gICAgICB2YXIgJHRhcmdldCA9ICQodGhpcyksXG4gICAgICAgIHZpc2libGVGb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdEcm9wZG93bicsIHtcbiAgICAgICAgdGFiX2ZvcndhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyh2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpKSkgeyAvLyBsZWZ0IG1vZGFsIGRvd253YXJkcywgc2V0dGluZyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy50cmFwRm9jdXMpIHsgLy8gaWYgZm9jdXMgc2hhbGwgYmUgdHJhcHBlZFxuICAgICAgICAgICAgICB2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgZm9jdXMgaXMgbm90IHRyYXBwZWQsIGNsb3NlIGRyb3Bkb3duIG9uIGZvY3VzIG91dFxuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGFiX2JhY2t3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuJGVsZW1lbnQuZmluZCgnOmZvY3VzJykuaXModmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzLmVxKDApKSB8fCBfdGhpcy4kZWxlbWVudC5pcygnOmZvY3VzJykpIHsgLy8gbGVmdCBtb2RhbCB1cHdhcmRzLCBzZXR0aW5nIGZvY3VzIHRvIGxhc3QgZWxlbWVudFxuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMudHJhcEZvY3VzKSB7IC8vIGlmIGZvY3VzIHNoYWxsIGJlIHRyYXBwZWRcbiAgICAgICAgICAgICAgdmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzLmVxKC0xKS5mb2N1cygpO1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiBmb2N1cyBpcyBub3QgdHJhcHBlZCwgY2xvc2UgZHJvcGRvd24gb24gZm9jdXMgb3V0XG4gICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5pcyhfdGhpcy4kYW5jaG9yKSkge1xuICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAtMSkuZm9jdXMoKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBib2R5IHRvIGNsb3NlIGFueSBkcm9wZG93bnMgb24gYSBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQm9keUhhbmRsZXIoKSB7XG4gICAgIHZhciAkYm9keSA9ICQoZG9jdW1lbnQuYm9keSkubm90KHRoaXMuJGVsZW1lbnQpLFxuICAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICAkYm9keS5vZmYoJ2NsaWNrLnpmLmRyb3Bkb3duJylcbiAgICAgICAgICAub24oJ2NsaWNrLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBpZihfdGhpcy4kYW5jaG9yLmlzKGUudGFyZ2V0KSB8fCBfdGhpcy4kYW5jaG9yLmZpbmQoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5maW5kKGUudGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICRib2R5Lm9mZignY2xpY2suemYuZHJvcGRvd24nKTtcbiAgICAgICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgZHJvcGRvd24gcGFuZSwgYW5kIGZpcmVzIGEgYnViYmxpbmcgZXZlbnQgdG8gY2xvc2Ugb3RoZXIgZHJvcGRvd25zLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIERyb3Bkb3duI2Nsb3NlbWVcbiAgICogQGZpcmVzIERyb3Bkb3duI3Nob3dcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgLy8gdmFyIF90aGlzID0gdGhpcztcbiAgICAvKipcbiAgICAgKiBGaXJlcyB0byBjbG9zZSBvdGhlciBvcGVuIGRyb3Bkb3duc1xuICAgICAqIEBldmVudCBEcm9wZG93biNjbG9zZW1lXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjbG9zZW1lLnpmLmRyb3Bkb3duJywgdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICB0aGlzLiRhbmNob3IuYWRkQ2xhc3MoJ2hvdmVyJylcbiAgICAgICAgLmF0dHIoeydhcmlhLWV4cGFuZGVkJzogdHJ1ZX0pO1xuICAgIC8vIHRoaXMuJGVsZW1lbnQvKi5zaG93KCkqLztcbiAgICB0aGlzLl9zZXRQb3NpdGlvbigpO1xuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2lzLW9wZW4nKVxuICAgICAgICAuYXR0cih7J2FyaWEtaGlkZGVuJzogZmFsc2V9KTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5hdXRvRm9jdXMpe1xuICAgICAgdmFyICRmb2N1c2FibGUgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCk7XG4gICAgICBpZigkZm9jdXNhYmxlLmxlbmd0aCl7XG4gICAgICAgICRmb2N1c2FibGUuZXEoMCkuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKXsgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTsgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgb25jZSB0aGUgZHJvcGRvd24gaXMgdmlzaWJsZS5cbiAgICAgKiBAZXZlbnQgRHJvcGRvd24jc2hvd1xuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi5kcm9wZG93bicsIFt0aGlzLiRlbGVtZW50XSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvcGVuIGRyb3Bkb3duIHBhbmUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJvcGRvd24jaGlkZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYoIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2lzLW9wZW4nKVxuICAgICAgICAuYXR0cih7J2FyaWEtaGlkZGVuJzogdHJ1ZX0pO1xuXG4gICAgdGhpcy4kYW5jaG9yLnJlbW92ZUNsYXNzKCdob3ZlcicpXG4gICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuXG4gICAgaWYodGhpcy5jbGFzc0NoYW5nZWQpe1xuICAgICAgdmFyIGN1clBvc2l0aW9uQ2xhc3MgPSB0aGlzLmdldFBvc2l0aW9uQ2xhc3MoKTtcbiAgICAgIGlmKGN1clBvc2l0aW9uQ2xhc3Mpe1xuICAgICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGN1clBvc2l0aW9uQ2xhc3MpO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMucG9zaXRpb25DbGFzcylcbiAgICAgICAgICAvKi5oaWRlKCkqLy5jc3Moe2hlaWdodDogJycsIHdpZHRoOiAnJ30pO1xuICAgICAgdGhpcy5jbGFzc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY291bnRlciA9IDQ7XG4gICAgICB0aGlzLnVzZWRQb3NpdGlvbnMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLmRyb3Bkb3duJywgW3RoaXMuJGVsZW1lbnRdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBkcm9wZG93biBwYW5lJ3MgdmlzaWJpbGl0eS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgaWYodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKXtcbiAgICAgIGlmKHRoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicpKSByZXR1cm47XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGRyb3Bkb3duLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyJykuaGlkZSgpO1xuICAgIHRoaXMuJGFuY2hvci5vZmYoJy56Zi5kcm9wZG93bicpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbkRyb3Bkb3duLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgb3BlbmluZyBhIHN1Ym1lbnUgb24gaG92ZXIgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjUwXG4gICAqL1xuICBob3ZlckRlbGF5OiAyNTAsXG4gIC8qKlxuICAgKiBBbGxvdyBzdWJtZW51cyB0byBvcGVuIG9uIGhvdmVyIGV2ZW50c1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBob3ZlcjogZmFsc2UsXG4gIC8qKlxuICAgKiBEb24ndCBjbG9zZSBkcm9wZG93biB3aGVuIGhvdmVyaW5nIG92ZXIgZHJvcGRvd24gcGFuZVxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGhvdmVyUGFuZTogZmFsc2UsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIGJldHdlZW4gdGhlIGRyb3Bkb3duIHBhbmUgYW5kIHRoZSB0cmlnZ2VyaW5nIGVsZW1lbnQgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxXG4gICAqL1xuICB2T2Zmc2V0OiAxLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyBiZXR3ZWVuIHRoZSBkcm9wZG93biBwYW5lIGFuZCB0aGUgdHJpZ2dlcmluZyBlbGVtZW50IG9uIG9wZW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgaE9mZnNldDogMSxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gYWRqdXN0IG9wZW4gcG9zaXRpb24uIEpTIHdpbGwgdGVzdCBhbmQgZmlsbCB0aGlzIGluLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b3AnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gdHJhcCBmb2N1cyB0byB0aGUgZHJvcGRvd24gcGFuZSBpZiBvcGVuZWQgd2l0aCBrZXlib2FyZCBjb21tYW5kcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgdHJhcEZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBwbHVnaW4gdG8gc2V0IGZvY3VzIHRvIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCB3aXRoaW4gdGhlIHBhbmUsIHJlZ2FyZGxlc3Mgb2YgbWV0aG9kIG9mIG9wZW5pbmcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgYXV0b0ZvY3VzOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93cyBhIGNsaWNrIG9uIHRoZSBib2R5IHRvIGNsb3NlIHRoZSBkcm9wZG93bi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiBmYWxzZVxufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRHJvcGRvd24sICdEcm9wZG93bicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRHJvcGRvd25NZW51IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5kcm9wZG93bi1tZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gKi9cblxuY2xhc3MgRHJvcGRvd25NZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgRHJvcGRvd25NZW51LlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIERyb3Bkb3duTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93biBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIERyb3Bkb3duTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2Ryb3Bkb3duJyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRHJvcGRvd25NZW51Jyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignRHJvcGRvd25NZW51Jywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ25leHQnLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAncHJldmlvdXMnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZSdcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luLCBhbmQgY2FsbHMgX3ByZXBhcmVNZW51XG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHN1YnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50JykuY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51JykuYWRkQ2xhc3MoJ2ZpcnN0LXN1YicpO1xuXG4gICAgdGhpcy4kbWVudUl0ZW1zID0gdGhpcy4kZWxlbWVudC5maW5kKCdbcm9sZT1cIm1lbnVpdGVtXCJdJyk7XG4gICAgdGhpcy4kdGFicyA9IHRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oJ1tyb2xlPVwibWVudWl0ZW1cIl0nKTtcbiAgICB0aGlzLiR0YWJzLmZpbmQoJ3VsLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudmVydGljYWxDbGFzcyk7XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMucmlnaHRDbGFzcykgfHwgdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ3JpZ2h0JyB8fCBGb3VuZGF0aW9uLnJ0bCgpIHx8IHRoaXMuJGVsZW1lbnQucGFyZW50cygnLnRvcC1iYXItcmlnaHQnKS5pcygnKicpKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID0gJ3JpZ2h0JztcbiAgICAgIHN1YnMuYWRkQ2xhc3MoJ29wZW5zLWxlZnQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtcmlnaHQnKTtcbiAgICB9XG4gICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH07XG5cbiAgX2lzVmVydGljYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHRhYnMuY3NzKCdkaXNwbGF5JykgPT09ICdibG9jayc7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gZWxlbWVudHMgd2l0aGluIHRoZSBtZW51XG4gICAqIEBwcml2YXRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBoYXNUb3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCAodHlwZW9mIHdpbmRvdy5vbnRvdWNoc3RhcnQgIT09ICd1bmRlZmluZWQnKSxcbiAgICAgICAgcGFyQ2xhc3MgPSAnaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnO1xuXG4gICAgLy8gdXNlZCBmb3Igb25DbGljayBhbmQgaW4gdGhlIGtleWJvYXJkIGhhbmRsZXJzXG4gICAgdmFyIGhhbmRsZUNsaWNrRm4gPSBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgJGVsZW0gPSAkKGUudGFyZ2V0KS5wYXJlbnRzVW50aWwoJ3VsJywgYC4ke3BhckNsYXNzfWApLFxuICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKSxcbiAgICAgICAgICBoYXNDbGlja2VkID0gJGVsZW0uYXR0cignZGF0YS1pcy1jbGljaycpID09PSAndHJ1ZScsXG4gICAgICAgICAgJHN1YiA9ICRlbGVtLmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudScpO1xuXG4gICAgICBpZiAoaGFzU3ViKSB7XG4gICAgICAgIGlmIChoYXNDbGlja2VkKSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmNsb3NlT25DbGljayB8fCAoIV90aGlzLm9wdGlvbnMuY2xpY2tPcGVuICYmICFoYXNUb3VjaCkgfHwgKF90aGlzLm9wdGlvbnMuZm9yY2VGb2xsb3cgJiYgaGFzVG91Y2gpKSB7IHJldHVybjsgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgX3RoaXMuX3Nob3coJHN1Yik7XG4gICAgICAgICAgJGVsZW0uYWRkKCRlbGVtLnBhcmVudHNVbnRpbChfdGhpcy4kZWxlbWVudCwgYC4ke3BhckNsYXNzfWApKS5hdHRyKCdkYXRhLWlzLWNsaWNrJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKF90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrSW5zaWRlKXtcbiAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3BlbiB8fCBoYXNUb3VjaCkge1xuICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdjbGljay56Zi5kcm9wZG93bm1lbnUgdG91Y2hzdGFydC56Zi5kcm9wZG93bm1lbnUnLCBoYW5kbGVDbGlja0ZuKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIpIHtcbiAgICAgIHRoaXMuJG1lbnVJdGVtcy5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciAkZWxlbSA9ICQodGhpcyksXG4gICAgICAgICAgICBoYXNTdWIgPSAkZWxlbS5oYXNDbGFzcyhwYXJDbGFzcyk7XG5cbiAgICAgICAgaWYgKGhhc1N1Yikge1xuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5kZWxheSk7XG4gICAgICAgICAgX3RoaXMuZGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Nob3coJGVsZW0uY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51JykpO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuaG92ZXJEZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKTtcbiAgICAgICAgaWYgKGhhc1N1YiAmJiBfdGhpcy5vcHRpb25zLmF1dG9jbG9zZSkge1xuICAgICAgICAgIGlmICgkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyAmJiBfdGhpcy5vcHRpb25zLmNsaWNrT3BlbikgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5kZWxheSk7XG4gICAgICAgICAgX3RoaXMuZGVsYXkgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgIH0sIF90aGlzLm9wdGlvbnMuY2xvc2luZ1RpbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdrZXlkb3duLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkZWxlbWVudCA9ICQoZS50YXJnZXQpLnBhcmVudHNVbnRpbCgndWwnLCAnW3JvbGU9XCJtZW51aXRlbVwiXScpLFxuICAgICAgICAgIGlzVGFiID0gX3RoaXMuJHRhYnMuaW5kZXgoJGVsZW1lbnQpID4gLTEsXG4gICAgICAgICAgJGVsZW1lbnRzID0gaXNUYWIgPyBfdGhpcy4kdGFicyA6ICRlbGVtZW50LnNpYmxpbmdzKCdsaScpLmFkZCgkZWxlbWVudCksXG4gICAgICAgICAgJHByZXZFbGVtZW50LFxuICAgICAgICAgICRuZXh0RWxlbWVudDtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoaS0xKTtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoaSsxKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbmV4dFNpYmxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCEkZWxlbWVudC5pcygnOmxhc3QtY2hpbGQnKSkge1xuICAgICAgICAgICRuZXh0RWxlbWVudC5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9LCBwcmV2U2libGluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkcHJldkVsZW1lbnQuY2hpbGRyZW4oJ2E6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBvcGVuU3ViID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciAkc3ViID0gJGVsZW1lbnQuY2hpbGRyZW4oJ3VsLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKTtcbiAgICAgICAgaWYgKCRzdWIubGVuZ3RoKSB7XG4gICAgICAgICAgX3RoaXMuX3Nob3coJHN1Yik7XG4gICAgICAgICAgJGVsZW1lbnQuZmluZCgnbGkgPiBhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSB7IHJldHVybjsgfVxuICAgICAgfSwgY2xvc2VTdWIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9pZiAoJGVsZW1lbnQuaXMoJzpmaXJzdC1jaGlsZCcpKSB7XG4gICAgICAgIHZhciBjbG9zZSA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5wYXJlbnQoJ2xpJyk7XG4gICAgICAgIGNsb3NlLmNoaWxkcmVuKCdhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgX3RoaXMuX2hpZGUoY2xvc2UpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vfVxuICAgICAgfTtcbiAgICAgIHZhciBmdW5jdGlvbnMgPSB7XG4gICAgICAgIG9wZW46IG9wZW5TdWIsXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5faGlkZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgX3RoaXMuJG1lbnVJdGVtcy5maW5kKCdhOmZpcnN0JykuZm9jdXMoKTsgLy8gZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKGlzVGFiKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNWZXJ0aWNhbCgpKSB7IC8vIHZlcnRpY2FsIG1lbnVcbiAgICAgICAgICBpZiAoRm91bmRhdGlvbi5ydGwoKSkgeyAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHVwOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgbmV4dDogY2xvc2VTdWIsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBvcGVuU3ViXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgeyAvLyBsZWZ0IGFsaWduZWRcbiAgICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBuZXh0OiBvcGVuU3ViLFxuICAgICAgICAgICAgICBwcmV2aW91czogY2xvc2VTdWJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gaG9yaXpvbnRhbCBtZW51XG4gICAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIHsgLy8gcmlnaHQgYWxpZ25lZFxuICAgICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIG5leHQ6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBwcmV2aW91czogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIGRvd246IG9wZW5TdWIsXG4gICAgICAgICAgICAgIHVwOiBjbG9zZVN1YlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gbGVmdCBhbGlnbmVkXG4gICAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgbmV4dDogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBwcmV2U2libGluZyxcbiAgICAgICAgICAgICAgZG93bjogb3BlblN1YixcbiAgICAgICAgICAgICAgdXA6IGNsb3NlU3ViXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7IC8vIG5vdCB0YWJzIC0+IG9uZSBzdWJcbiAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIHsgLy8gcmlnaHQgYWxpZ25lZFxuICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgbmV4dDogY2xvc2VTdWIsXG4gICAgICAgICAgICBwcmV2aW91czogb3BlblN1YixcbiAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7IC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgbmV4dDogb3BlblN1YixcbiAgICAgICAgICAgIHByZXZpb3VzOiBjbG9zZVN1YixcbiAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdEcm9wZG93bk1lbnUnLCBmdW5jdGlvbnMpO1xuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBoYW5kbGVyIHRvIHRoZSBib2R5IHRvIGNsb3NlIGFueSBkcm9wZG93bnMgb24gYSBjbGljay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQm9keUhhbmRsZXIoKSB7XG4gICAgdmFyICRib2R5ID0gJChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgICRib2R5Lm9mZignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51JylcbiAgICAgICAgIC5vbignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICB2YXIgJGxpbmsgPSBfdGhpcy4kZWxlbWVudC5maW5kKGUudGFyZ2V0KTtcbiAgICAgICAgICAgaWYgKCRsaW5rLmxlbmd0aCkgeyByZXR1cm47IH1cblxuICAgICAgICAgICBfdGhpcy5faGlkZSgpO1xuICAgICAgICAgICAkYm9keS5vZmYoJ21vdXNldXAuemYuZHJvcGRvd25tZW51IHRvdWNoZW5kLnpmLmRyb3Bkb3dubWVudScpO1xuICAgICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgYSBkcm9wZG93biBwYW5lLCBhbmQgY2hlY2tzIGZvciBjb2xsaXNpb25zIGZpcnN0LlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHN1YiAtIHVsIGVsZW1lbnQgdGhhdCBpcyBhIHN1Ym1lbnUgdG8gc2hvd1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQGZpcmVzIERyb3Bkb3duTWVudSNzaG93XG4gICAqL1xuICBfc2hvdygkc3ViKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMuJHRhYnMuaW5kZXgodGhpcy4kdGFicy5maWx0ZXIoZnVuY3Rpb24oaSwgZWwpIHtcbiAgICAgIHJldHVybiAkKGVsKS5maW5kKCRzdWIpLmxlbmd0aCA+IDA7XG4gICAgfSkpO1xuICAgIHZhciAkc2licyA9ICRzdWIucGFyZW50KCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLnNpYmxpbmdzKCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpO1xuICAgIHRoaXMuX2hpZGUoJHNpYnMsIGlkeCk7XG4gICAgJHN1Yi5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJykuYWRkQ2xhc3MoJ2pzLWRyb3Bkb3duLWFjdGl2ZScpLmF0dHIoeydhcmlhLWhpZGRlbic6IGZhbHNlfSlcbiAgICAgICAgLnBhcmVudCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5hZGRDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgICAgLmF0dHIoeydhcmlhLWV4cGFuZGVkJzogdHJ1ZX0pO1xuICAgIHZhciBjbGVhciA9IEZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UoJHN1YiwgbnVsbCwgdHJ1ZSk7XG4gICAgaWYgKCFjbGVhcikge1xuICAgICAgdmFyIG9sZENsYXNzID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2xlZnQnID8gJy1yaWdodCcgOiAnLWxlZnQnLFxuICAgICAgICAgICRwYXJlbnRMaSA9ICRzdWIucGFyZW50KCcuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKTtcbiAgICAgICRwYXJlbnRMaS5yZW1vdmVDbGFzcyhgb3BlbnMke29sZENsYXNzfWApLmFkZENsYXNzKGBvcGVucy0ke3RoaXMub3B0aW9ucy5hbGlnbm1lbnR9YCk7XG4gICAgICBjbGVhciA9IEZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UoJHN1YiwgbnVsbCwgdHJ1ZSk7XG4gICAgICBpZiAoIWNsZWFyKSB7XG4gICAgICAgICRwYXJlbnRMaS5yZW1vdmVDbGFzcyhgb3BlbnMtJHt0aGlzLm9wdGlvbnMuYWxpZ25tZW50fWApLmFkZENsYXNzKCdvcGVucy1pbm5lcicpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgJHN1Yi5jc3MoJ3Zpc2liaWxpdHknLCAnJyk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHsgdGhpcy5fYWRkQm9keUhhbmRsZXIoKTsgfVxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIG5ldyBkcm9wZG93biBwYW5lIGlzIHZpc2libGUuXG4gICAgICogQGV2ZW50IERyb3Bkb3duTWVudSNzaG93XG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzaG93LnpmLmRyb3Bkb3dubWVudScsIFskc3ViXSk7XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgYSBzaW5nbGUsIGN1cnJlbnRseSBvcGVuIGRyb3Bkb3duIHBhbmUsIGlmIHBhc3NlZCBhIHBhcmFtZXRlciwgb3RoZXJ3aXNlLCBoaWRlcyBldmVyeXRoaW5nLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtqUXVlcnl9ICRlbGVtIC0gZWxlbWVudCB3aXRoIGEgc3VibWVudSB0byBoaWRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZHggLSBpbmRleCBvZiB0aGUgJHRhYnMgY29sbGVjdGlvbiB0byBoaWRlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGlkZSgkZWxlbSwgaWR4KSB7XG4gICAgdmFyICR0b0Nsb3NlO1xuICAgIGlmICgkZWxlbSAmJiAkZWxlbS5sZW5ndGgpIHtcbiAgICAgICR0b0Nsb3NlID0gJGVsZW07XG4gICAgfSBlbHNlIGlmIChpZHggIT09IHVuZGVmaW5lZCkge1xuICAgICAgJHRvQ2xvc2UgPSB0aGlzLiR0YWJzLm5vdChmdW5jdGlvbihpLCBlbCkge1xuICAgICAgICByZXR1cm4gaSA9PT0gaWR4O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJHRvQ2xvc2UgPSB0aGlzLiRlbGVtZW50O1xuICAgIH1cbiAgICB2YXIgc29tZXRoaW5nVG9DbG9zZSA9ICR0b0Nsb3NlLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSB8fCAkdG9DbG9zZS5maW5kKCcuaXMtYWN0aXZlJykubGVuZ3RoID4gMDtcblxuICAgIGlmIChzb21ldGhpbmdUb0Nsb3NlKSB7XG4gICAgICAkdG9DbG9zZS5maW5kKCdsaS5pcy1hY3RpdmUnKS5hZGQoJHRvQ2xvc2UpLmF0dHIoe1xuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGZhbHNlLFxuICAgICAgICAnZGF0YS1pcy1jbGljayc6IGZhbHNlXG4gICAgICB9KS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAgICR0b0Nsb3NlLmZpbmQoJ3VsLmpzLWRyb3Bkb3duLWFjdGl2ZScpLmF0dHIoe1xuICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlXG4gICAgICB9KS5yZW1vdmVDbGFzcygnanMtZHJvcGRvd24tYWN0aXZlJyk7XG5cbiAgICAgIGlmICh0aGlzLmNoYW5nZWQgfHwgJHRvQ2xvc2UuZmluZCgnb3BlbnMtaW5uZXInKS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG9sZENsYXNzID0gdGhpcy5vcHRpb25zLmFsaWdubWVudCA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgJHRvQ2xvc2UuZmluZCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5hZGQoJHRvQ2xvc2UpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGBvcGVucy1pbm5lciBvcGVucy0ke3RoaXMub3B0aW9ucy5hbGlnbm1lbnR9YClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYG9wZW5zLSR7b2xkQ2xhc3N9YCk7XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBvcGVuIG1lbnVzIGFyZSBjbG9zZWQuXG4gICAgICAgKiBAZXZlbnQgRHJvcGRvd25NZW51I2hpZGVcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdoaWRlLnpmLmRyb3Bkb3dubWVudScsIFskdG9DbG9zZV0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kbWVudUl0ZW1zLm9mZignLnpmLmRyb3Bkb3dubWVudScpLnJlbW92ZUF0dHIoJ2RhdGEtaXMtY2xpY2snKVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2lzLXJpZ2h0LWFycm93IGlzLWxlZnQtYXJyb3cgaXMtZG93bi1hcnJvdyBvcGVucy1yaWdodCBvcGVucy1sZWZ0IG9wZW5zLWlubmVyJyk7XG4gICAgJChkb2N1bWVudC5ib2R5KS5vZmYoJy56Zi5kcm9wZG93bm1lbnUnKTtcbiAgICBGb3VuZGF0aW9uLk5lc3QuQnVybih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuRHJvcGRvd25NZW51LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogRGlzYWxsb3dzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgc3VibWVudXNcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IGEgc3VibWVudSB0byBhdXRvbWF0aWNhbGx5IGNsb3NlIG9uIGEgbW91c2VsZWF2ZSBldmVudCwgaWYgbm90IGNsaWNrZWQgb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBhdXRvY2xvc2U6IHRydWUsXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBkZWxheSBvcGVuaW5nIGEgc3VibWVudSBvbiBob3ZlciBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSA1MFxuICAgKi9cbiAgaG92ZXJEZWxheTogNTAsXG4gIC8qKlxuICAgKiBBbGxvdyBhIHN1Ym1lbnUgdG8gb3Blbi9yZW1haW4gb3BlbiBvbiBwYXJlbnQgY2xpY2sgZXZlbnQuIEFsbG93cyBjdXJzb3IgdG8gbW92ZSBhd2F5IGZyb20gbWVudS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbGlja09wZW46IGZhbHNlLFxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgY2xvc2luZyBhIHN1Ym1lbnUgb24gYSBtb3VzZWxlYXZlIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwMFxuICAgKi9cblxuICBjbG9zaW5nVGltZTogNTAwLFxuICAvKipcbiAgICogUG9zaXRpb24gb2YgdGhlIG1lbnUgcmVsYXRpdmUgdG8gd2hhdCBkaXJlY3Rpb24gdGhlIHN1Ym1lbnVzIHNob3VsZCBvcGVuLiBIYW5kbGVkIGJ5IEpTLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdsZWZ0J1xuICAgKi9cbiAgYWxpZ25tZW50OiAnbGVmdCcsXG4gIC8qKlxuICAgKiBBbGxvdyBjbGlja3Mgb24gdGhlIGJvZHkgdG8gY2xvc2UgYW55IG9wZW4gc3VibWVudXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuICAvKipcbiAgICogQWxsb3cgY2xpY2tzIG9uIGxlYWYgYW5jaG9yIGxpbmtzIHRvIGNsb3NlIGFueSBvcGVuIHN1Ym1lbnVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsb3NlT25DbGlja0luc2lkZTogdHJ1ZSxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdmVydGljYWwgb3JpZW50ZWQgbWVudXMsIEZvdW5kYXRpb24gZGVmYXVsdCBpcyBgdmVydGljYWxgLiBVcGRhdGUgdGhpcyBpZiB1c2luZyB5b3VyIG93biBjbGFzcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndmVydGljYWwnXG4gICAqL1xuICB2ZXJ0aWNhbENsYXNzOiAndmVydGljYWwnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byByaWdodC1zaWRlIG9yaWVudGVkIG1lbnVzLCBGb3VuZGF0aW9uIGRlZmF1bHQgaXMgYGFsaWduLXJpZ2h0YC4gVXBkYXRlIHRoaXMgaWYgdXNpbmcgeW91ciBvd24gY2xhc3MuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2FsaWduLXJpZ2h0J1xuICAgKi9cbiAgcmlnaHRDbGFzczogJ2FsaWduLXJpZ2h0JyxcbiAgLyoqXG4gICAqIEJvb2xlYW4gdG8gZm9yY2Ugb3ZlcmlkZSB0aGUgY2xpY2tpbmcgb2YgbGlua3MgdG8gcGVyZm9ybSBkZWZhdWx0IGFjdGlvbiwgb24gc2Vjb25kIHRvdWNoIGV2ZW50IGZvciBtb2JpbGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGZvcmNlRm9sbG93OiB0cnVlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRHJvcGRvd25NZW51LCAnRHJvcGRvd25NZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBFcXVhbGl6ZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmVxdWFsaXplclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRpbWVyQW5kSW1hZ2VMb2FkZXIgaWYgZXF1YWxpemVyIGNvbnRhaW5zIGltYWdlc1xuICovXG5cbmNsYXNzIEVxdWFsaXplciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEVxdWFsaXplci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKXtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgID0gJC5leHRlbmQoe30sIEVxdWFsaXplci5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnRXF1YWxpemVyJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEVxdWFsaXplciBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgZXF1YWxpemVyIGZ1bmN0aW9uaW5nIG9uIGxvYWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgZXFJZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1lcXVhbGl6ZXInKSB8fCAnJztcbiAgICB2YXIgJHdhdGNoZWQgPSB0aGlzLiRlbGVtZW50LmZpbmQoYFtkYXRhLWVxdWFsaXplci13YXRjaD1cIiR7ZXFJZH1cIl1gKTtcblxuICAgIHRoaXMuJHdhdGNoZWQgPSAkd2F0Y2hlZC5sZW5ndGggPyAkd2F0Y2hlZCA6IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyLXdhdGNoXScpO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignZGF0YS1yZXNpemUnLCAoZXFJZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdlcScpKSk7XG5cbiAgICB0aGlzLmhhc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtZXF1YWxpemVyXScpLmxlbmd0aCA+IDA7XG4gICAgdGhpcy5pc05lc3RlZCA9IHRoaXMuJGVsZW1lbnQucGFyZW50c1VudGlsKGRvY3VtZW50LmJvZHksICdbZGF0YS1lcXVhbGl6ZXJdJykubGVuZ3RoID4gMDtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICB0aGlzLl9iaW5kSGFuZGxlciA9IHtcbiAgICAgIG9uUmVzaXplTWVCb3VuZDogdGhpcy5fb25SZXNpemVNZS5iaW5kKHRoaXMpLFxuICAgICAgb25Qb3N0RXF1YWxpemVkQm91bmQ6IHRoaXMuX29uUG9zdEVxdWFsaXplZC5iaW5kKHRoaXMpXG4gICAgfTtcblxuICAgIHZhciBpbWdzID0gdGhpcy4kZWxlbWVudC5maW5kKCdpbWcnKTtcbiAgICB2YXIgdG9vU21hbGw7XG4gICAgaWYodGhpcy5vcHRpb25zLmVxdWFsaXplT24pe1xuICAgICAgdG9vU21hbGwgPSB0aGlzLl9jaGVja01RKCk7XG4gICAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX2NoZWNrTVEuYmluZCh0aGlzKSk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICB9XG4gICAgaWYoKHRvb1NtYWxsICE9PSB1bmRlZmluZWQgJiYgdG9vU21hbGwgPT09IGZhbHNlKSB8fCB0b29TbWFsbCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIGlmKGltZ3MubGVuZ3RoKXtcbiAgICAgICAgRm91bmRhdGlvbi5vbkltYWdlc0xvYWRlZChpbWdzLCB0aGlzLl9yZWZsb3cuYmluZCh0aGlzKSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5fcmVmbG93KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXJzIGlmIHRoZSBicmVha3BvaW50IGlzIHRvbyBzbWFsbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXVzZUV2ZW50cygpIHtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZih7XG4gICAgICAnLnpmLmVxdWFsaXplcic6IHRoaXMuX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kLFxuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmRcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBoYW5kbGUgJGVsZW1lbnRzIHJlc2l6ZW1lLnpmLnRyaWdnZXIsIHdpdGggYm91bmQgdGhpcyBvbiBfYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25SZXNpemVNZShlKSB7XG4gICAgdGhpcy5fcmVmbG93KCk7XG4gIH1cblxuICAvKipcbiAgICogZnVuY3Rpb24gdG8gaGFuZGxlICRlbGVtZW50cyBwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplciwgd2l0aCBib3VuZCB0aGlzIG9uIF9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUG9zdEVxdWFsaXplZChlKSB7XG4gICAgaWYoZS50YXJnZXQgIT09IHRoaXMuJGVsZW1lbnRbMF0peyB0aGlzLl9yZWZsb3coKTsgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgRXF1YWxpemVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgaWYodGhpcy5oYXNOZXN0ZWQpe1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInLCB0aGlzLl9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZCk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kKTtcbiAgICB9XG4gICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgYnJlYWtwb2ludCB0byB0aGUgbWluaW11bSByZXF1aXJlZCBzaXplLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrTVEoKSB7XG4gICAgdmFyIHRvb1NtYWxsID0gIUZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5lcXVhbGl6ZU9uKTtcbiAgICBpZih0b29TbWFsbCl7XG4gICAgICBpZih0aGlzLmlzT24pe1xuICAgICAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgICAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgIGlmKCF0aGlzLmlzT24pe1xuICAgICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvb1NtYWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgbm9vcCB2ZXJzaW9uIGZvciB0aGUgcGx1Z2luXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfa2lsbHN3aXRjaCgpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgRXF1YWxpemVyIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICBpZighdGhpcy5vcHRpb25zLmVxdWFsaXplT25TdGFjayl7XG4gICAgICBpZih0aGlzLl9pc1N0YWNrZWQoKSl7XG4gICAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZXF1YWxpemVCeVJvdykge1xuICAgICAgdGhpcy5nZXRIZWlnaHRzQnlSb3codGhpcy5hcHBseUhlaWdodEJ5Um93LmJpbmQodGhpcykpO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5nZXRIZWlnaHRzKHRoaXMuYXBwbHlIZWlnaHQuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hbnVhbGx5IGRldGVybWluZXMgaWYgdGhlIGZpcnN0IDIgZWxlbWVudHMgYXJlICpOT1QqIHN0YWNrZWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaXNTdGFja2VkKCkge1xuICAgIHJldHVybiB0aGlzLiR3YXRjaGVkWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAhPT0gdGhpcy4kd2F0Y2hlZFsxXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gIH1cblxuICAvKipcbiAgICogRmluZHMgdGhlIG91dGVyIGhlaWdodHMgb2YgY2hpbGRyZW4gY29udGFpbmVkIHdpdGhpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IGFuZCByZXR1cm5zIHRoZW0gaW4gYW4gYXJyYXlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBBIG5vbi1vcHRpb25hbCBjYWxsYmFjayB0byByZXR1cm4gdGhlIGhlaWdodHMgYXJyYXkgdG8uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gaGVpZ2h0cyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXJcbiAgICovXG4gIGdldEhlaWdodHMoY2IpIHtcbiAgICB2YXIgaGVpZ2h0cyA9IFtdO1xuICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IHRoaXMuJHdhdGNoZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgICAgdGhpcy4kd2F0Y2hlZFtpXS5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICBoZWlnaHRzLnB1c2godGhpcy4kd2F0Y2hlZFtpXS5vZmZzZXRIZWlnaHQpO1xuICAgIH1cbiAgICBjYihoZWlnaHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgb3V0ZXIgaGVpZ2h0cyBvZiBjaGlsZHJlbiBjb250YWluZWQgd2l0aGluIGFuIEVxdWFsaXplciBwYXJlbnQgYW5kIHJldHVybnMgdGhlbSBpbiBhbiBhcnJheVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIEEgbm9uLW9wdGlvbmFsIGNhbGxiYWNrIHRvIHJldHVybiB0aGUgaGVpZ2h0cyBhcnJheSB0by5cbiAgICogQHJldHVybnMge0FycmF5fSBncm91cHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyIGdyb3VwZWQgYnkgcm93IHdpdGggZWxlbWVudCxoZWlnaHQgYW5kIG1heCBhcyBsYXN0IGNoaWxkXG4gICAqL1xuICBnZXRIZWlnaHRzQnlSb3coY2IpIHtcbiAgICB2YXIgbGFzdEVsVG9wT2Zmc2V0ID0gKHRoaXMuJHdhdGNoZWQubGVuZ3RoID8gdGhpcy4kd2F0Y2hlZC5maXJzdCgpLm9mZnNldCgpLnRvcCA6IDApLFxuICAgICAgICBncm91cHMgPSBbXSxcbiAgICAgICAgZ3JvdXAgPSAwO1xuICAgIC8vZ3JvdXAgYnkgUm93XG4gICAgZ3JvdXBzW2dyb3VwXSA9IFtdO1xuICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IHRoaXMuJHdhdGNoZWQubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgICAgdGhpcy4kd2F0Y2hlZFtpXS5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG4gICAgICAvL21heWJlIGNvdWxkIHVzZSB0aGlzLiR3YXRjaGVkW2ldLm9mZnNldFRvcFxuICAgICAgdmFyIGVsT2Zmc2V0VG9wID0gJCh0aGlzLiR3YXRjaGVkW2ldKS5vZmZzZXQoKS50b3A7XG4gICAgICBpZiAoZWxPZmZzZXRUb3AhPWxhc3RFbFRvcE9mZnNldCkge1xuICAgICAgICBncm91cCsrO1xuICAgICAgICBncm91cHNbZ3JvdXBdID0gW107XG4gICAgICAgIGxhc3RFbFRvcE9mZnNldD1lbE9mZnNldFRvcDtcbiAgICAgIH1cbiAgICAgIGdyb3Vwc1tncm91cF0ucHVzaChbdGhpcy4kd2F0Y2hlZFtpXSx0aGlzLiR3YXRjaGVkW2ldLm9mZnNldEhlaWdodF0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIGogPSAwLCBsbiA9IGdyb3Vwcy5sZW5ndGg7IGogPCBsbjsgaisrKSB7XG4gICAgICB2YXIgaGVpZ2h0cyA9ICQoZ3JvdXBzW2pdKS5tYXAoZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbMV07IH0pLmdldCgpO1xuICAgICAgdmFyIG1heCAgICAgICAgID0gTWF0aC5tYXguYXBwbHkobnVsbCwgaGVpZ2h0cyk7XG4gICAgICBncm91cHNbal0ucHVzaChtYXgpO1xuICAgIH1cbiAgICBjYihncm91cHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIENTUyBoZWlnaHQgcHJvcGVydHkgb2YgZWFjaCBjaGlsZCBpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IHRvIG1hdGNoIHRoZSB0YWxsZXN0XG4gICAqIEBwYXJhbSB7YXJyYXl9IGhlaWdodHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFxuICAgKi9cbiAgYXBwbHlIZWlnaHQoaGVpZ2h0cykge1xuICAgIHZhciBtYXggPSBNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBiZWZvcmUgdGhlIGhlaWdodHMgYXJlIGFwcGxpZWRcbiAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3ByZWVxdWFsaXplZFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuXG4gICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsIG1heCk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICogQGV2ZW50IEVxdWFsaXplciNwb3N0ZXF1YWxpemVkXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBDU1MgaGVpZ2h0IHByb3BlcnR5IG9mIGVhY2ggY2hpbGQgaW4gYW4gRXF1YWxpemVyIHBhcmVudCB0byBtYXRjaCB0aGUgdGFsbGVzdCBieSByb3dcbiAgICogQHBhcmFtIHthcnJheX0gZ3JvdXBzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lciBncm91cGVkIGJ5IHJvdyB3aXRoIGVsZW1lbnQsaGVpZ2h0IGFuZCBtYXggYXMgbGFzdCBjaGlsZFxuICAgKiBAZmlyZXMgRXF1YWxpemVyI3ByZWVxdWFsaXplZFxuICAgKiBAZmlyZXMgRXF1YWxpemVyI3ByZWVxdWFsaXplZFJvd1xuICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRSb3dcbiAgICogQGZpcmVzIEVxdWFsaXplciNwb3N0ZXF1YWxpemVkXG4gICAqL1xuICBhcHBseUhlaWdodEJ5Um93KGdyb3Vwcykge1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBhcmUgYXBwbGllZFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBncm91cHMubGVuZ3RoOyBpIDwgbGVuIDsgaSsrKSB7XG4gICAgICB2YXIgZ3JvdXBzSUxlbmd0aCA9IGdyb3Vwc1tpXS5sZW5ndGgsXG4gICAgICAgICAgbWF4ID0gZ3JvdXBzW2ldW2dyb3Vwc0lMZW5ndGggLSAxXTtcbiAgICAgIGlmIChncm91cHNJTGVuZ3RoPD0yKSB7XG4gICAgICAgICQoZ3JvdXBzW2ldWzBdWzBdKS5jc3MoeydoZWlnaHQnOidhdXRvJ30pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBwZXIgcm93IGFyZSBhcHBsaWVkXG4gICAgICAgICogQGV2ZW50IEVxdWFsaXplciNwcmVlcXVhbGl6ZWRSb3dcbiAgICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncHJlZXF1YWxpemVkcm93LnpmLmVxdWFsaXplcicpO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGxlbkogPSAoZ3JvdXBzSUxlbmd0aC0xKTsgaiA8IGxlbkogOyBqKyspIHtcbiAgICAgICAgJChncm91cHNbaV1bal1bMF0pLmNzcyh7J2hlaWdodCc6bWF4fSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIHBlciByb3cgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRSb3dcbiAgICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZHJvdy56Zi5lcXVhbGl6ZXInKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgaGVpZ2h0cyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAqL1xuICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgRXF1YWxpemVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcGF1c2VFdmVudHMoKTtcbiAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgJ2F1dG8nKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5FcXVhbGl6ZXIuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBFbmFibGUgaGVpZ2h0IGVxdWFsaXphdGlvbiB3aGVuIHN0YWNrZWQgb24gc21hbGxlciBzY3JlZW5zLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGVxdWFsaXplT25TdGFjazogZmFsc2UsXG4gIC8qKlxuICAgKiBFbmFibGUgaGVpZ2h0IGVxdWFsaXphdGlvbiByb3cgYnkgcm93LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBlcXVhbGl6ZUJ5Um93OiBmYWxzZSxcbiAgLyoqXG4gICAqIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIG1pbmltdW0gYnJlYWtwb2ludCBzaXplIHRoZSBwbHVnaW4gc2hvdWxkIGVxdWFsaXplIGhlaWdodHMgb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ21lZGl1bSdcbiAgICovXG4gIGVxdWFsaXplT246ICcnXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oRXF1YWxpemVyLCAnRXF1YWxpemVyJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBJbnRlcmNoYW5nZSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uaW50ZXJjaGFuZ2VcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyXG4gKi9cblxuY2xhc3MgSW50ZXJjaGFuZ2Uge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBJbnRlcmNoYW5nZS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBJbnRlcmNoYW5nZSNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgSW50ZXJjaGFuZ2UuZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIHRoaXMucnVsZXMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRQYXRoID0gJyc7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdJbnRlcmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBJbnRlcmNoYW5nZSBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgaW50ZXJjaGFuZ2UgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLl9hZGRCcmVha3BvaW50cygpO1xuICAgIHRoaXMuX2dlbmVyYXRlUnVsZXMoKTtcbiAgICB0aGlzLl9yZWZsb3coKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEludGVyY2hhbmdlLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuemYuaW50ZXJjaGFuZ2UnLCBGb3VuZGF0aW9uLnV0aWwudGhyb3R0bGUodGhpcy5fcmVmbG93LmJpbmQodGhpcyksIDUwKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgbmVjZXNzYXJ5IGZ1bmN0aW9ucyB0byB1cGRhdGUgSW50ZXJjaGFuZ2UgdXBvbiBET00gY2hhbmdlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlZmxvdygpIHtcbiAgICB2YXIgbWF0Y2g7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlLCBidXQgb25seSBzYXZlIHRoZSBsYXN0IG1hdGNoXG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICBpZih0aGlzLnJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gdGhpcy5ydWxlc1tpXTtcblxuICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocnVsZS5xdWVyeSkubWF0Y2hlcykge1xuICAgICAgICAgIG1hdGNoID0gcnVsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgdGhpcy5yZXBsYWNlKG1hdGNoLnBhdGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBGb3VuZGF0aW9uIGJyZWFrcG9pbnRzIGFuZCBhZGRzIHRoZW0gdG8gdGhlIEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFUyBvYmplY3QuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZEJyZWFrcG9pbnRzKCkge1xuICAgIGZvciAodmFyIGkgaW4gRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LnF1ZXJpZXMpIHtcbiAgICAgIGlmIChGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICB2YXIgcXVlcnkgPSBGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllc1tpXTtcbiAgICAgICAgSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5Lm5hbWVdID0gcXVlcnkudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgSW50ZXJjaGFuZ2UgZWxlbWVudCBmb3IgdGhlIHByb3ZpZGVkIG1lZGlhIHF1ZXJ5ICsgY29udGVudCBwYWlyaW5nc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRoYXQgaXMgYW4gSW50ZXJjaGFuZ2UgaW5zdGFuY2VcbiAgICogQHJldHVybnMge0FycmF5fSBzY2VuYXJpb3MgLSBBcnJheSBvZiBvYmplY3RzIHRoYXQgaGF2ZSAnbXEnIGFuZCAncGF0aCcga2V5cyB3aXRoIGNvcnJlc3BvbmRpbmcga2V5c1xuICAgKi9cbiAgX2dlbmVyYXRlUnVsZXMoZWxlbWVudCkge1xuICAgIHZhciBydWxlc0xpc3QgPSBbXTtcbiAgICB2YXIgcnVsZXM7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnJ1bGVzKSB7XG4gICAgICBydWxlcyA9IHRoaXMub3B0aW9ucy5ydWxlcztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnaW50ZXJjaGFuZ2UnKS5tYXRjaCgvXFxbLio/XFxdL2cpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgaW4gcnVsZXMpIHtcbiAgICAgIGlmKHJ1bGVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBydWxlID0gcnVsZXNbaV0uc2xpY2UoMSwgLTEpLnNwbGl0KCcsICcpO1xuICAgICAgICB2YXIgcGF0aCA9IHJ1bGUuc2xpY2UoMCwgLTEpLmpvaW4oJycpO1xuICAgICAgICB2YXIgcXVlcnkgPSBydWxlW3J1bGUubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV0pIHtcbiAgICAgICAgICBxdWVyeSA9IEludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFU1txdWVyeV07XG4gICAgICAgIH1cblxuICAgICAgICBydWxlc0xpc3QucHVzaCh7XG4gICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcyA9IHJ1bGVzTGlzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGBzcmNgIHByb3BlcnR5IG9mIGFuIGltYWdlLCBvciBjaGFuZ2UgdGhlIEhUTUwgb2YgYSBjb250YWluZXIsIHRvIHRoZSBzcGVjaWZpZWQgcGF0aC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIC0gUGF0aCB0byB0aGUgaW1hZ2Ugb3IgSFRNTCBwYXJ0aWFsLlxuICAgKiBAZmlyZXMgSW50ZXJjaGFuZ2UjcmVwbGFjZWRcbiAgICovXG4gIHJlcGxhY2UocGF0aCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRQYXRoID09PSBwYXRoKSByZXR1cm47XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICB0cmlnZ2VyID0gJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJztcblxuICAgIC8vIFJlcGxhY2luZyBpbWFnZXNcbiAgICBpZiAodGhpcy4kZWxlbWVudFswXS5ub2RlTmFtZSA9PT0gJ0lNRycpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignc3JjJywgcGF0aCkub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgfSlcbiAgICAgIC50cmlnZ2VyKHRyaWdnZXIpO1xuICAgIH1cbiAgICAvLyBSZXBsYWNpbmcgYmFja2dyb3VuZCBpbWFnZXNcbiAgICBlbHNlIGlmIChwYXRoLm1hdGNoKC9cXC4oZ2lmfGpwZ3xqcGVnfHBuZ3xzdmd8dGlmZikoWz8jXS4qKT8vaSkpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHsgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCcrcGF0aCsnKScgfSlcbiAgICAgICAgICAudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICB9XG4gICAgLy8gUmVwbGFjaW5nIEhUTUxcbiAgICBlbHNlIHtcbiAgICAgICQuZ2V0KHBhdGgsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIF90aGlzLiRlbGVtZW50Lmh0bWwocmVzcG9uc2UpXG4gICAgICAgICAgICAgLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgICAgICQocmVzcG9uc2UpLmZvdW5kYXRpb24oKTtcbiAgICAgICAgX3RoaXMuY3VycmVudFBhdGggPSBwYXRoO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBjb250ZW50IGluIGFuIEludGVyY2hhbmdlIGVsZW1lbnQgaXMgZG9uZSBiZWluZyBsb2FkZWQuXG4gICAgICogQGV2ZW50IEludGVyY2hhbmdlI3JlcGxhY2VkXG4gICAgICovXG4gICAgLy8gdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdyZXBsYWNlZC56Zi5pbnRlcmNoYW5nZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGludGVyY2hhbmdlLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgLy9UT0RPIHRoaXMuXG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuSW50ZXJjaGFuZ2UuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBSdWxlcyB0byBiZSBhcHBsaWVkIHRvIEludGVyY2hhbmdlIGVsZW1lbnRzLiBTZXQgd2l0aCB0aGUgYGRhdGEtaW50ZXJjaGFuZ2VgIGFycmF5IG5vdGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqL1xuICBydWxlczogbnVsbFxufTtcblxuSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTID0ge1xuICAnbGFuZHNjYXBlJzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpJyxcbiAgJ3BvcnRyYWl0JzogJ3NjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICAncmV0aW5hJzogJ29ubHkgc2NyZWVuIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kIChtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKC1vLW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIvMSksIG9ubHkgc2NyZWVuIGFuZCAobWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDE5MmRwaSksIG9ubHkgc2NyZWVuIGFuZCAobWluLXJlc29sdXRpb246IDJkcHB4KSdcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihJbnRlcmNoYW5nZSwgJ0ludGVyY2hhbmdlJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBNYWdlbGxhbiBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ubWFnZWxsYW5cbiAqL1xuXG5jbGFzcyBNYWdlbGxhbiB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIE1hZ2VsbGFuLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE1hZ2VsbGFuI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgTWFnZWxsYW4uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ01hZ2VsbGFuJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIE1hZ2VsbGFuIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBlcXVhbGl6ZXIgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnbWFnZWxsYW4nKTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuJHRhcmdldHMgPSAkKCdbZGF0YS1tYWdlbGxhbi10YXJnZXRdJyk7XG4gICAgdGhpcy4kbGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ2RhdGEtcmVzaXplJzogaWQsXG4gICAgICAnZGF0YS1zY3JvbGwnOiBpZCxcbiAgICAgICdpZCc6IGlkXG4gICAgfSk7XG4gICAgdGhpcy4kYWN0aXZlID0gJCgpO1xuICAgIHRoaXMuc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCk7XG5cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIGFuIGFycmF5IG9mIHBpeGVsIHZhbHVlcyB0aGF0IGFyZSB0aGUgZGVtYXJjYXRpb24gbGluZXMgYmV0d2VlbiBsb2NhdGlvbnMgb24gdGhlIHBhZ2UuXG4gICAqIENhbiBiZSBpbnZva2VkIGlmIG5ldyBlbGVtZW50cyBhcmUgYWRkZWQgb3IgdGhlIHNpemUgb2YgYSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGNhbGNQb2ludHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgYm9keSA9IGRvY3VtZW50LmJvZHksXG4gICAgICAgIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgIHRoaXMud2luSGVpZ2h0ID0gTWF0aC5yb3VuZChNYXRoLm1heCh3aW5kb3cuaW5uZXJIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0KSk7XG4gICAgdGhpcy5kb2NIZWlnaHQgPSBNYXRoLnJvdW5kKE1hdGgubWF4KGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5Lm9mZnNldEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLm9mZnNldEhlaWdodCkpO1xuXG4gICAgdGhpcy4kdGFyZ2V0cy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJHRhciA9ICQodGhpcyksXG4gICAgICAgICAgcHQgPSBNYXRoLnJvdW5kKCR0YXIub2Zmc2V0KCkudG9wIC0gX3RoaXMub3B0aW9ucy50aHJlc2hvbGQpO1xuICAgICAgJHRhci50YXJnZXRQb2ludCA9IHB0O1xuICAgICAgX3RoaXMucG9pbnRzLnB1c2gocHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgTWFnZWxsYW4uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICRib2R5ID0gJCgnaHRtbCwgYm9keScpLFxuICAgICAgICBvcHRzID0ge1xuICAgICAgICAgIGR1cmF0aW9uOiBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLFxuICAgICAgICAgIGVhc2luZzogICBfdGhpcy5vcHRpb25zLmFuaW1hdGlvbkVhc2luZ1xuICAgICAgICB9O1xuICAgICQod2luZG93KS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpe1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICAgIGlmKGxvY2F0aW9uLmhhc2gpe1xuICAgICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGxvY2F0aW9uLmhhc2gpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgICBfdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5yZWZsb3cuYmluZCh0aGlzKSxcbiAgICAgICdzY3JvbGxtZS56Zi50cmlnZ2VyJzogdGhpcy5fdXBkYXRlQWN0aXZlLmJpbmQodGhpcylcbiAgICB9KS5vbignY2xpY2suemYubWFnZWxsYW4nLCAnYVtocmVmXj1cIiNcIl0nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGFycml2YWwgICA9IHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKGFycml2YWwpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIHNjcm9sbCB0byBhIGdpdmVuIGxvY2F0aW9uIG9uIHRoZSBwYWdlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbG9jIC0gYSBwcm9wZXJseSBmb3JtYXR0ZWQgalF1ZXJ5IGlkIHNlbGVjdG9yLiBFeGFtcGxlOiAnI2ZvbydcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzY3JvbGxUb0xvYyhsb2MpIHtcbiAgICAvLyBEbyBub3RoaW5nIGlmIHRhcmdldCBkb2VzIG5vdCBleGlzdCB0byBwcmV2ZW50IGVycm9yc1xuICAgIGlmICghJChsb2MpLmxlbmd0aCkge3JldHVybiBmYWxzZTt9XG4gICAgdmFyIHNjcm9sbFBvcyA9IE1hdGgucm91bmQoJChsb2MpLm9mZnNldCgpLnRvcCAtIHRoaXMub3B0aW9ucy50aHJlc2hvbGQgLyAyIC0gdGhpcy5vcHRpb25zLmJhck9mZnNldCk7XG5cbiAgICAkKCdodG1sLCBib2R5Jykuc3RvcCh0cnVlKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBzY3JvbGxQb3MgfSwgdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uLCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBNYWdlbGxhbiB1cG9uIERPTSBjaGFuZ2VcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICByZWZsb3coKSB7XG4gICAgdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdmlzaWJpbGl0eSBvZiBhbiBhY3RpdmUgbG9jYXRpb24gbGluaywgYW5kIHVwZGF0ZXMgdGhlIHVybCBoYXNoIGZvciB0aGUgcGFnZSwgaWYgZGVlcExpbmtpbmcgZW5hYmxlZC5cbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBNYWdlbGxhbiN1cGRhdGVcbiAgICovXG4gIF91cGRhdGVBY3RpdmUoLypldnQsIGVsZW0sIHNjcm9sbFBvcyovKSB7XG4gICAgdmFyIHdpblBvcyA9IC8qc2Nyb2xsUG9zIHx8Ki8gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0LCAxMCksXG4gICAgICAgIGN1cklkeDtcblxuICAgIGlmKHdpblBvcyArIHRoaXMud2luSGVpZ2h0ID09PSB0aGlzLmRvY0hlaWdodCl7IGN1cklkeCA9IHRoaXMucG9pbnRzLmxlbmd0aCAtIDE7IH1cbiAgICBlbHNlIGlmKHdpblBvcyA8IHRoaXMucG9pbnRzWzBdKXsgY3VySWR4ID0gMDsgfVxuICAgIGVsc2V7XG4gICAgICB2YXIgaXNEb3duID0gdGhpcy5zY3JvbGxQb3MgPCB3aW5Qb3MsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIGN1clZpc2libGUgPSB0aGlzLnBvaW50cy5maWx0ZXIoZnVuY3Rpb24ocCwgaSl7XG4gICAgICAgICAgICByZXR1cm4gaXNEb3duID8gcCAtIF90aGlzLm9wdGlvbnMuYmFyT2Zmc2V0IDw9IHdpblBvcyA6IHAgLSBfdGhpcy5vcHRpb25zLmJhck9mZnNldCAtIF90aGlzLm9wdGlvbnMudGhyZXNob2xkIDw9IHdpblBvcztcbiAgICAgICAgICB9KTtcbiAgICAgIGN1cklkeCA9IGN1clZpc2libGUubGVuZ3RoID8gY3VyVmlzaWJsZS5sZW5ndGggLSAxIDogMDtcbiAgICB9XG5cbiAgICB0aGlzLiRhY3RpdmUucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcbiAgICB0aGlzLiRhY3RpdmUgPSB0aGlzLiRsaW5rcy5maWx0ZXIoJ1tocmVmPVwiIycgKyB0aGlzLiR0YXJnZXRzLmVxKGN1cklkeCkuZGF0YSgnbWFnZWxsYW4tdGFyZ2V0JykgKyAnXCJdJykuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKTtcblxuICAgIGlmKHRoaXMub3B0aW9ucy5kZWVwTGlua2luZyl7XG4gICAgICB2YXIgaGFzaCA9IHRoaXMuJGFjdGl2ZVswXS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcbiAgICAgIGlmKHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSl7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBoYXNoKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zY3JvbGxQb3MgPSB3aW5Qb3M7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBtYWdlbGxhbiBpcyBmaW5pc2hlZCB1cGRhdGluZyB0byB0aGUgbmV3IGFjdGl2ZSBlbGVtZW50LlxuICAgICAqIEBldmVudCBNYWdlbGxhbiN1cGRhdGVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwZGF0ZS56Zi5tYWdlbGxhbicsIFt0aGlzLiRhY3RpdmVdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBNYWdlbGxhbiBhbmQgcmVzZXRzIHRoZSB1cmwgb2YgdGhlIHdpbmRvdy5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYubWFnZWxsYW4nKVxuICAgICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzfWApLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpe1xuICAgICAgdmFyIGhhc2ggPSB0aGlzLiRhY3RpdmVbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKGhhc2gsICcnKTtcbiAgICB9XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuTWFnZWxsYW4uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSwgaW4gbXMsIHRoZSBhbmltYXRlZCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgYmV0d2VlbiBsb2NhdGlvbnMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuICBhbmltYXRpb25EdXJhdGlvbjogNTAwLFxuICAvKipcbiAgICogQW5pbWF0aW9uIHN0eWxlIHRvIHVzZSB3aGVuIHNjcm9sbGluZyBiZXR3ZWVuIGxvY2F0aW9ucy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZWFzZS1pbi1vdXQnXG4gICAqL1xuICBhbmltYXRpb25FYXNpbmc6ICdsaW5lYXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHBpeGVscyB0byB1c2UgYXMgYSBtYXJrZXIgZm9yIGxvY2F0aW9uIGNoYW5nZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTBcbiAgICovXG4gIHRocmVzaG9sZDogNTAsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBhY3RpdmUgbG9jYXRpb25zIGxpbmsgb24gdGhlIG1hZ2VsbGFuIGNvbnRhaW5lci5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnYWN0aXZlJ1xuICAgKi9cbiAgYWN0aXZlQ2xhc3M6ICdhY3RpdmUnLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBzY3JpcHQgdG8gbWFuaXB1bGF0ZSB0aGUgdXJsIG9mIHRoZSBjdXJyZW50IHBhZ2UsIGFuZCBpZiBzdXBwb3J0ZWQsIGFsdGVyIHRoZSBoaXN0b3J5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGRlZXBMaW5raW5nOiBmYWxzZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgdG8gb2Zmc2V0IHRoZSBzY3JvbGwgb2YgdGhlIHBhZ2Ugb24gaXRlbSBjbGljayBpZiB1c2luZyBhIHN0aWNreSBuYXYgYmFyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1XG4gICAqL1xuICBiYXJPZmZzZXQ6IDBcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE1hZ2VsbGFuLCAnTWFnZWxsYW4nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE9mZkNhbnZhcyBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ub2ZmY2FudmFzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKi9cblxuY2xhc3MgT2ZmQ2FudmFzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gb2ZmLWNhbnZhcyB3cmFwcGVyLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE9mZkNhbnZhcyNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBpbml0aWFsaXplLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE9mZkNhbnZhcy5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gJCgpO1xuICAgIHRoaXMuJHRyaWdnZXJzID0gJCgpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnT2ZmQ2FudmFzJylcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdPZmZDYW52YXMnLCB7XG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG9mZi1jYW52YXMgd3JhcHBlciBieSBhZGRpbmcgdGhlIGV4aXQgb3ZlcmxheSAoaWYgbmVlZGVkKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgIC8vIEZpbmQgdHJpZ2dlcnMgdGhhdCBhZmZlY3QgdGhpcyBlbGVtZW50IGFuZCBhZGQgYXJpYS1leHBhbmRlZCB0byB0aGVtXG4gICAgdGhpcy4kdHJpZ2dlcnMgPSAkKGRvY3VtZW50KVxuICAgICAgLmZpbmQoJ1tkYXRhLW9wZW49XCInK2lkKydcIl0sIFtkYXRhLWNsb3NlPVwiJytpZCsnXCJdLCBbZGF0YS10b2dnbGU9XCInK2lkKydcIl0nKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG5cbiAgICAvLyBBZGQgYSBjbG9zZSB0cmlnZ2VyIG92ZXIgdGhlIGJvZHkgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIGlmICgkKCcuanMtb2ZmLWNhbnZhcy1leGl0JykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGV4aXRlciA9ICQoJy5qcy1vZmYtY2FudmFzLWV4aXQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBleGl0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZXhpdGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnanMtb2ZmLWNhbnZhcy1leGl0Jyk7XG4gICAgICAgICQoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5hcHBlbmQoZXhpdGVyKTtcblxuICAgICAgICB0aGlzLiRleGl0ZXIgPSAkKGV4aXRlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCB8fCBuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXZlYWxDbGFzcywgJ2cnKS50ZXN0KHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5vcHRpb25zLnJldmVhbE9uID0gdGhpcy5vcHRpb25zLnJldmVhbE9uIHx8IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8ocmV2ZWFsLWZvci1tZWRpdW18cmV2ZWFsLWZvci1sYXJnZSkvZylbMF0uc3BsaXQoJy0nKVsyXTtcbiAgICAgIHRoaXMuX3NldE1RQ2hlY2tlcigpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZSkge1xuICAgICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkKCdbZGF0YS1vZmYtY2FudmFzLXdyYXBwZXJdJylbMF0pLnRyYW5zaXRpb25EdXJhdGlvbikgKiAxMDAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIHRoZSBvZmYtY2FudmFzIHdyYXBwZXIgYW5kIHRoZSBleGl0IG92ZXJsYXkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhcycpLm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdrZXlkb3duLnpmLm9mZmNhbnZhcyc6IHRoaXMuX2hhbmRsZUtleWJvYXJkLmJpbmQodGhpcylcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrICYmIHRoaXMuJGV4aXRlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGV4aXRlci5vbih7J2NsaWNrLnpmLm9mZmNhbnZhcyc6IHRoaXMuY2xvc2UuYmluZCh0aGlzKX0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGV2ZW50IGxpc3RlbmVyIGZvciBlbGVtZW50cyB0aGF0IHdpbGwgcmV2ZWFsIGF0IGNlcnRhaW4gYnJlYWtwb2ludHMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0TVFDaGVja2VyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnJldmVhbChmYWxzZSk7XG4gICAgICB9XG4gICAgfSkub25lKCdsb2FkLnpmLm9mZmNhbnZhcycsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSByZXZlYWxpbmcvaGlkaW5nIHRoZSBvZmYtY2FudmFzIGF0IGJyZWFrcG9pbnRzLCBub3QgdGhlIHNhbWUgYXMgb3Blbi5cbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1JldmVhbGVkIC0gdHJ1ZSBpZiBlbGVtZW50IHNob3VsZCBiZSByZXZlYWxlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICByZXZlYWwoaXNSZXZlYWxlZCkge1xuICAgIHZhciAkY2xvc2VyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1jbG9zZV0nKTtcbiAgICBpZiAoaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgdGhpcy5pc1JldmVhbGVkID0gdHJ1ZTtcbiAgICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgICAvLyAgIHZhciBzY3JvbGxQb3MgPSBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgLy8gICB0aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMCwnICsgc2Nyb2xsUG9zICsgJ3B4KSc7XG4gICAgICAvLyB9XG4gICAgICAvLyBpZiAodGhpcy5vcHRpb25zLmlzU3RpY2t5KSB7IHRoaXMuX3N0aWNrKCk7IH1cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdvcGVuLnpmLnRyaWdnZXIgdG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkgeyAkY2xvc2VyLmhpZGUoKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzUmV2ZWFsZWQgPSBmYWxzZTtcbiAgICAgIC8vIGlmICh0aGlzLm9wdGlvbnMuaXNTdGlja3kgfHwgIXRoaXMub3B0aW9ucy5mb3JjZVRvcCkge1xuICAgICAgLy8gICB0aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgICAgLy8gICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYub2ZmY2FudmFzJyk7XG4gICAgICAvLyB9XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgICB9KTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkge1xuICAgICAgICAkY2xvc2VyLnNob3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqIEBmaXJlcyBPZmZDYW52YXMjb3BlbmVkXG4gICAqL1xuICBvcGVuKGV2ZW50LCB0cmlnZ2VyKSB7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHsgcmV0dXJuOyB9XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgJGJvZHkgPSAkKGRvY3VtZW50LmJvZHkpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5mb3JjZVRvcCkge1xuICAgICAgJCgnYm9keScpLnNjcm9sbFRvcCgwKTtcbiAgICB9XG4gICAgLy8gd2luZG93LnBhZ2VZT2Zmc2V0ID0gMDtcblxuICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgLy8gICB2YXIgc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAvLyAgIHRoaXMuJGVsZW1lbnRbMF0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBzY3JvbGxQb3MgKyAncHgpJztcbiAgICAvLyAgIGlmICh0aGlzLiRleGl0ZXIubGVuZ3RoKSB7XG4gICAgLy8gICAgIHRoaXMuJGV4aXRlclswXS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHNjcm9sbFBvcyArICdweCknO1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbnMuXG4gICAgICogQGV2ZW50IE9mZkNhbnZhcyNvcGVuZWRcbiAgICAgKi9cblxuICAgIHZhciAkd3JhcHBlciA9ICQoJ1tkYXRhLW9mZi1jYW52YXMtd3JhcHBlcl0nKTtcbiAgICAkd3JhcHBlci5hZGRDbGFzcygnaXMtb2ZmLWNhbnZhcy1vcGVuIGlzLW9wZW4tJysgX3RoaXMub3B0aW9ucy5wb3NpdGlvbik7XG5cbiAgICBfdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnaXMtb3BlbicpXG5cbiAgICAgIC8vIGlmIChfdGhpcy5vcHRpb25zLmlzU3RpY2t5KSB7XG4gICAgICAvLyAgIF90aGlzLl9zdGljaygpO1xuICAgICAgLy8gfVxuXG4gICAgdGhpcy4kdHJpZ2dlcnMuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpXG4gICAgICAgIC50cmlnZ2VyKCdvcGVuZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgdGhpcy4kZXhpdGVyLmFkZENsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Gb2N1cykge1xuICAgICAgJHdyYXBwZXIub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkd3JhcHBlciksIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7IC8vIGhhbmRsZSBkb3VibGUgY2xpY2tzXG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgJHdyYXBwZXIub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkd3JhcHBlciksIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7IC8vIGhhbmRsZSBkb3VibGUgY2xpY2tzXG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICBfdGhpcy50cmFwRm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYXBzIGZvY3VzIHdpdGhpbiB0aGUgb2ZmY2FudmFzIG9uIG9wZW4uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdHJhcEZvY3VzKCkge1xuICAgIHZhciBmb2N1c2FibGUgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCksXG4gICAgICAgIGZpcnN0ID0gZm9jdXNhYmxlLmVxKDApLFxuICAgICAgICBsYXN0ID0gZm9jdXNhYmxlLmVxKC0xKTtcblxuICAgIGZvY3VzYWJsZS5vZmYoJy56Zi5vZmZjYW52YXMnKS5vbigna2V5ZG93bi56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIga2V5ID0gRm91bmRhdGlvbi5LZXlib2FyZC5wYXJzZUtleShlKTtcbiAgICAgIGlmIChrZXkgPT09ICdUQUInICYmIGUudGFyZ2V0ID09PSBsYXN0WzBdKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZmlyc3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdTSElGVF9UQUInICYmIGUudGFyZ2V0ID09PSBmaXJzdFswXSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxhc3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG9mZmNhbnZhcyB0byBhcHBlYXIgc3RpY2t5IHV0aWxpemluZyB0cmFuc2xhdGUgcHJvcGVydGllcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIC8vIE9mZkNhbnZhcy5wcm90b3R5cGUuX3N0aWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgdmFyIGVsU3R5bGUgPSB0aGlzLiRlbGVtZW50WzBdLnN0eWxlO1xuICAvL1xuICAvLyAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gIC8vICAgICB2YXIgZXhpdFN0eWxlID0gdGhpcy4kZXhpdGVyWzBdLnN0eWxlO1xuICAvLyAgIH1cbiAgLy9cbiAgLy8gICAkKHdpbmRvdykub24oJ3Njcm9sbC56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbihlKSB7XG4gIC8vICAgICBjb25zb2xlLmxvZyhlKTtcbiAgLy8gICAgIHZhciBwYWdlWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgLy8gICAgIGVsU3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBwYWdlWSArICdweCknO1xuICAvLyAgICAgaWYgKGV4aXRTdHlsZSAhPT0gdW5kZWZpbmVkKSB7IGV4aXRTdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHBhZ2VZICsgJ3B4KSc7IH1cbiAgLy8gICB9KTtcbiAgLy8gICAvLyB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3N0dWNrLnpmLm9mZmNhbnZhcycpO1xuICAvLyB9O1xuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNiIHRvIGZpcmUgYWZ0ZXIgY2xvc3VyZS5cbiAgICogQGZpcmVzIE9mZkNhbnZhcyNjbG9zZWRcbiAgICovXG4gIGNsb3NlKGNiKSB7XG4gICAgaWYgKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykgfHwgdGhpcy5pc1JldmVhbGVkKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vICBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lLCB0aGlzLiRlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAkKCdbZGF0YS1vZmYtY2FudmFzLXdyYXBwZXJdJykucmVtb3ZlQ2xhc3MoYGlzLW9mZi1jYW52YXMtb3BlbiBpcy1vcGVuLSR7X3RoaXMub3B0aW9ucy5wb3NpdGlvbn1gKTtcbiAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgLy8gRm91bmRhdGlvbi5fcmVmbG93KCk7XG4gICAgLy8gfSk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgb2ZmLWNhbnZhcyBtZW51IG9wZW5zLlxuICAgICAgICogQGV2ZW50IE9mZkNhbnZhcyNjbG9zZWRcbiAgICAgICAqL1xuICAgICAgICAudHJpZ2dlcignY2xvc2VkLnpmLm9mZmNhbnZhcycpO1xuICAgIC8vIGlmIChfdGhpcy5vcHRpb25zLmlzU3RpY2t5IHx8ICFfdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgLy8gICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICBfdGhpcy4kZWxlbWVudFswXS5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICAvLyAgICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsLnpmLm9mZmNhbnZhcycpO1xuICAgIC8vICAgfSwgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lKTtcbiAgICAvLyB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIHRoaXMuJGV4aXRlci5yZW1vdmVDbGFzcygnaXMtdmlzaWJsZScpO1xuICAgIH1cblxuICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgJCgnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9mZi1jYW52YXMgbWVudSBvcGVuIG9yIGNsb3NlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqL1xuICB0b2dnbGUoZXZlbnQsIHRyaWdnZXIpIHtcbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICB0aGlzLmNsb3NlKGV2ZW50LCB0cmlnZ2VyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLm9wZW4oZXZlbnQsIHRyaWdnZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGtleWJvYXJkIGlucHV0IHdoZW4gZGV0ZWN0ZWQuIFdoZW4gdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZCwgdGhlIG9mZi1jYW52YXMgbWVudSBjbG9zZXMsIGFuZCBmb2N1cyBpcyByZXN0b3JlZCB0byB0aGUgZWxlbWVudCB0aGF0IG9wZW5lZCB0aGUgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGFuZGxlS2V5Ym9hcmQoZSkge1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdPZmZDYW52YXMnLCB7XG4gICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyLmZvY3VzKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZWQ6ICgpID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBvZmZjYW52YXMgcGx1Z2luLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYub2ZmY2FudmFzJyk7XG4gICAgdGhpcy4kZXhpdGVyLm9mZignLnpmLm9mZmNhbnZhcycpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbk9mZkNhbnZhcy5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFsbG93IHRoZSB1c2VyIHRvIGNsaWNrIG91dHNpZGUgb2YgdGhlIG1lbnUgdG8gY2xvc2UgaXQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSBpbiBtcyB0aGUgb3BlbiBhbmQgY2xvc2UgdHJhbnNpdGlvbiByZXF1aXJlcy4gSWYgbm9uZSBzZWxlY3RlZCwgcHVsbHMgZnJvbSBib2R5IHN0eWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwMFxuICAgKi9cbiAgdHJhbnNpdGlvblRpbWU6IDAsXG5cbiAgLyoqXG4gICAqIERpcmVjdGlvbiB0aGUgb2ZmY2FudmFzIG9wZW5zIGZyb20uIERldGVybWluZXMgY2xhc3MgYXBwbGllZCB0byBib2R5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGxlZnRcbiAgICovXG4gIHBvc2l0aW9uOiAnbGVmdCcsXG5cbiAgLyoqXG4gICAqIEZvcmNlIHRoZSBwYWdlIHRvIHNjcm9sbCB0byB0b3Agb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBmb3JjZVRvcDogdHJ1ZSxcblxuICAvKipcbiAgICogQWxsb3cgdGhlIG9mZmNhbnZhcyB0byByZW1haW4gb3BlbiBmb3IgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgaXNSZXZlYWxlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgYXQgd2hpY2ggdG8gcmV2ZWFsLiBKUyB3aWxsIHVzZSBhIFJlZ0V4cCB0byB0YXJnZXQgc3RhbmRhcmQgY2xhc3NlcywgaWYgY2hhbmdpbmcgY2xhc3NuYW1lcywgcGFzcyB5b3VyIGNsYXNzIHdpdGggdGhlIGByZXZlYWxDbGFzc2Agb3B0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHJldmVhbC1mb3ItbGFyZ2VcbiAgICovXG4gIHJldmVhbE9uOiBudWxsLFxuXG4gIC8qKlxuICAgKiBGb3JjZSBmb2N1cyB0byB0aGUgb2ZmY2FudmFzIG9uIG9wZW4uIElmIHRydWUsIHdpbGwgZm9jdXMgdGhlIG9wZW5pbmcgdHJpZ2dlciBvbiBjbG9zZS4gU2V0cyB0YWJpbmRleCBvZiBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdIHRvIC0xIGZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGF1dG9Gb2N1czogdHJ1ZSxcblxuICAvKipcbiAgICogQ2xhc3MgdXNlZCB0byBmb3JjZSBhbiBvZmZjYW52YXMgdG8gcmVtYWluIG9wZW4uIEZvdW5kYXRpb24gZGVmYXVsdHMgZm9yIHRoaXMgYXJlIGByZXZlYWwtZm9yLWxhcmdlYCAmIGByZXZlYWwtZm9yLW1lZGl1bWAuXG4gICAqIEBvcHRpb25cbiAgICogVE9ETyBpbXByb3ZlIHRoZSByZWdleCB0ZXN0aW5nIGZvciB0aGlzLlxuICAgKiBAZXhhbXBsZSByZXZlYWwtZm9yLWxhcmdlXG4gICAqL1xuICByZXZlYWxDbGFzczogJ3JldmVhbC1mb3ItJyxcblxuICAvKipcbiAgICogVHJpZ2dlcnMgb3B0aW9uYWwgZm9jdXMgdHJhcHBpbmcgd2hlbiBvcGVuaW5nIGFuIG9mZmNhbnZhcy4gU2V0cyB0YWJpbmRleCBvZiBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdIHRvIC0xIGZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIHRyYXBGb2N1czogZmFsc2Vcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE9mZkNhbnZhcywgJ09mZkNhbnZhcycpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogT3JiaXQgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLm9yYml0XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRvdWNoXG4gKi9cblxuY2xhc3MgT3JiaXQge1xuICAvKipcbiAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGFuIG9yYml0IGNhcm91c2VsLlxuICAqIEBjbGFzc1xuICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gT3JiaXQgQ2Fyb3VzZWwuXG4gICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKXtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgT3JiaXQuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ09yYml0Jyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignT3JiaXQnLCB7XG4gICAgICAnbHRyJzoge1xuICAgICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAgICdBUlJPV19MRUZUJzogJ3ByZXZpb3VzJ1xuICAgICAgfSxcbiAgICAgICdydGwnOiB7XG4gICAgICAgICdBUlJPV19MRUZUJzogJ25leHQnLFxuICAgICAgICAnQVJST1dfUklHSFQnOiAncHJldmlvdXMnXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luIGJ5IGNyZWF0aW5nIGpRdWVyeSBjb2xsZWN0aW9ucywgc2V0dGluZyBhdHRyaWJ1dGVzLCBhbmQgc3RhcnRpbmcgdGhlIGFuaW1hdGlvbi5cbiAgKiBAZnVuY3Rpb25cbiAgKiBAcHJpdmF0ZVxuICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLiR3cmFwcGVyID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgdGhpcy4kc2xpZGVzID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKTtcbiAgICB2YXIgJGltYWdlcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW1nJyksXG4gICAgaW5pdEFjdGl2ZSA9IHRoaXMuJHNsaWRlcy5maWx0ZXIoJy5pcy1hY3RpdmUnKTtcblxuICAgIGlmICghaW5pdEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJHNsaWRlcy5lcSgwKS5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMudXNlTVVJKSB7XG4gICAgICB0aGlzLiRzbGlkZXMuYWRkQ2xhc3MoJ25vLW1vdGlvbnVpJyk7XG4gICAgfVxuXG4gICAgaWYgKCRpbWFnZXMubGVuZ3RoKSB7XG4gICAgICBGb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkKCRpbWFnZXMsIHRoaXMuX3ByZXBhcmVGb3JPcmJpdC5iaW5kKHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcHJlcGFyZUZvck9yYml0KCk7Ly9oZWhlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICB0aGlzLl9sb2FkQnVsbGV0cygpO1xuICAgIH1cblxuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSAmJiB0aGlzLiRzbGlkZXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5nZW9TeW5jKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hY2Nlc3NpYmxlKSB7IC8vIGFsbG93IHdyYXBwZXIgdG8gYmUgZm9jdXNhYmxlIHRvIGVuYWJsZSBhcnJvdyBuYXZpZ2F0aW9uXG4gICAgICB0aGlzLiR3cmFwcGVyLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogQ3JlYXRlcyBhIGpRdWVyeSBjb2xsZWN0aW9uIG9mIGJ1bGxldHMsIGlmIHRoZXkgYXJlIGJlaW5nIHVzZWQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX2xvYWRCdWxsZXRzKCkge1xuICAgIHRoaXMuJGJ1bGxldHMgPSB0aGlzLiRlbGVtZW50LmZpbmQoYC4ke3RoaXMub3B0aW9ucy5ib3hPZkJ1bGxldHN9YCkuZmluZCgnYnV0dG9uJyk7XG4gIH1cblxuICAvKipcbiAgKiBTZXRzIGEgYHRpbWVyYCBvYmplY3Qgb24gdGhlIG9yYml0LCBhbmQgc3RhcnRzIHRoZSBjb3VudGVyIGZvciB0aGUgbmV4dCBzbGlkZS5cbiAgKiBAZnVuY3Rpb25cbiAgKi9cbiAgZ2VvU3luYygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMudGltZXIgPSBuZXcgRm91bmRhdGlvbi5UaW1lcihcbiAgICAgIHRoaXMuJGVsZW1lbnQsXG4gICAgICB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGlzLm9wdGlvbnMudGltZXJEZWxheSxcbiAgICAgICAgaW5maW5pdGU6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHRydWUpO1xuICAgICAgfSk7XG4gICAgdGhpcy50aW1lci5zdGFydCgpO1xuICB9XG5cbiAgLyoqXG4gICogU2V0cyB3cmFwcGVyIGFuZCBzbGlkZSBoZWlnaHRzIGZvciB0aGUgb3JiaXQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX3ByZXBhcmVGb3JPcmJpdCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuX3NldFdyYXBwZXJIZWlnaHQoZnVuY3Rpb24obWF4KXtcbiAgICAgIF90aGlzLl9zZXRTbGlkZUhlaWdodChtYXgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogQ2FsdWxhdGVzIHRoZSBoZWlnaHQgb2YgZWFjaCBzbGlkZSBpbiB0aGUgY29sbGVjdGlvbiwgYW5kIHVzZXMgdGhlIHRhbGxlc3Qgb25lIGZvciB0aGUgd3JhcHBlciBoZWlnaHQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZmlyZSB3aGVuIGNvbXBsZXRlLlxuICAqL1xuICBfc2V0V3JhcHBlckhlaWdodChjYikgey8vcmV3cml0ZSB0aGlzIHRvIGBmb3JgIGxvb3BcbiAgICB2YXIgbWF4ID0gMCwgdGVtcCwgY291bnRlciA9IDA7XG5cbiAgICB0aGlzLiRzbGlkZXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHRlbXAgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICQodGhpcykuYXR0cignZGF0YS1zbGlkZScsIGNvdW50ZXIpO1xuXG4gICAgICBpZiAoY291bnRlcikgey8vaWYgbm90IHRoZSBmaXJzdCBzbGlkZSwgc2V0IGNzcyBwb3NpdGlvbiBhbmQgZGlzcGxheSBwcm9wZXJ0eVxuICAgICAgICAkKHRoaXMpLmNzcyh7J3Bvc2l0aW9uJzogJ3JlbGF0aXZlJywgJ2Rpc3BsYXknOiAnbm9uZSd9KTtcbiAgICAgIH1cbiAgICAgIG1heCA9IHRlbXAgPiBtYXggPyB0ZW1wIDogbWF4O1xuICAgICAgY291bnRlcisrO1xuICAgIH0pO1xuXG4gICAgaWYgKGNvdW50ZXIgPT09IHRoaXMuJHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJHdyYXBwZXIuY3NzKHsnaGVpZ2h0JzogbWF4fSk7IC8vb25seSBjaGFuZ2UgdGhlIHdyYXBwZXIgaGVpZ2h0IHByb3BlcnR5IG9uY2UuXG4gICAgICBjYihtYXgpOyAvL2ZpcmUgY2FsbGJhY2sgd2l0aCBtYXggaGVpZ2h0IGRpbWVuc2lvbi5cbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBTZXRzIHRoZSBtYXgtaGVpZ2h0IG9mIGVhY2ggc2xpZGUuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKi9cbiAgX3NldFNsaWRlSGVpZ2h0KGhlaWdodCkge1xuICAgIHRoaXMuJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS5jc3MoJ21heC1oZWlnaHQnLCBoZWlnaHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gYmFzaWNhbGx5IGV2ZXJ5dGhpbmcgd2l0aGluIHRoZSBlbGVtZW50LlxuICAqIEBmdW5jdGlvblxuICAqIEBwcml2YXRlXG4gICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgLy8qKk5vdyB1c2luZyBjdXN0b20gZXZlbnQgLSB0aGFua3MgdG86KipcbiAgICAvLyoqICAgICAgWW9oYWkgQXJhcmF0IG9mIFRvcm9udG8gICAgICAqKlxuICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgaWYgKHRoaXMuJHNsaWRlcy5sZW5ndGggPiAxKSB7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3dpcGUpIHtcbiAgICAgICAgdGhpcy4kc2xpZGVzLm9mZignc3dpcGVsZWZ0LnpmLm9yYml0IHN3aXBlcmlnaHQuemYub3JiaXQnKVxuICAgICAgICAub24oJ3N3aXBlbGVmdC56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZSh0cnVlKTtcbiAgICAgICAgfSkub24oJ3N3aXBlcmlnaHQuemYub3JiaXQnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b1BsYXkpIHtcbiAgICAgICAgdGhpcy4kc2xpZGVzLm9uKCdjbGljay56Zi5vcmJpdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicsIF90aGlzLiRlbGVtZW50LmRhdGEoJ2NsaWNrZWRPbicpID8gZmFsc2UgOiB0cnVlKTtcbiAgICAgICAgICBfdGhpcy50aW1lcltfdGhpcy4kZWxlbWVudC5kYXRhKCdjbGlja2VkT24nKSA/ICdwYXVzZScgOiAnc3RhcnQnXSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnBhdXNlT25Ib3Zlcikge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZW50ZXIuemYub3JiaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLnRpbWVyLnBhdXNlKCk7XG4gICAgICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYub3JiaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuJGVsZW1lbnQuZGF0YSgnY2xpY2tlZE9uJykpIHtcbiAgICAgICAgICAgICAgX3RoaXMudGltZXIuc3RhcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLm5hdkJ1dHRvbnMpIHtcbiAgICAgICAgdmFyICRjb250cm9scyA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLm5leHRDbGFzc30sIC4ke3RoaXMub3B0aW9ucy5wcmV2Q2xhc3N9YCk7XG4gICAgICAgICRjb250cm9scy5hdHRyKCd0YWJpbmRleCcsIDApXG4gICAgICAgIC8vYWxzbyBuZWVkIHRvIGhhbmRsZSBlbnRlci9yZXR1cm4gYW5kIHNwYWNlYmFyIGtleSBwcmVzc2VzXG4gICAgICAgIC5vbignY2xpY2suemYub3JiaXQgdG91Y2hlbmQuemYub3JiaXQnLCBmdW5jdGlvbihlKXtcblx0ICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoJCh0aGlzKS5oYXNDbGFzcyhfdGhpcy5vcHRpb25zLm5leHRDbGFzcykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICAgIHRoaXMuJGJ1bGxldHMub24oJ2NsaWNrLnpmLm9yYml0IHRvdWNoZW5kLnpmLm9yYml0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKC9pcy1hY3RpdmUvZy50ZXN0KHRoaXMuY2xhc3NOYW1lKSkgeyByZXR1cm4gZmFsc2U7IH0vL2lmIHRoaXMgaXMgYWN0aXZlLCBraWNrIG91dCBvZiBmdW5jdGlvbi5cbiAgICAgICAgICB2YXIgaWR4ID0gJCh0aGlzKS5kYXRhKCdzbGlkZScpLFxuICAgICAgICAgIGx0ciA9IGlkeCA+IF90aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZGF0YSgnc2xpZGUnKSxcbiAgICAgICAgICAkc2xpZGUgPSBfdGhpcy4kc2xpZGVzLmVxKGlkeCk7XG5cbiAgICAgICAgICBfdGhpcy5jaGFuZ2VTbGlkZShsdHIsICRzbGlkZSwgaWR4KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYWNjZXNzaWJsZSkge1xuICAgICAgICB0aGlzLiR3cmFwcGVyLmFkZCh0aGlzLiRidWxsZXRzKS5vbigna2V5ZG93bi56Zi5vcmJpdCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAvLyBoYW5kbGUga2V5Ym9hcmQgZXZlbnQgd2l0aCBrZXlib2FyZCB1dGlsXG4gICAgICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ09yYml0Jywge1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIF90aGlzLmNoYW5nZVNsaWRlKHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlU2xpZGUoZmFsc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkgeyAvLyBpZiBidWxsZXQgaXMgZm9jdXNlZCwgbWFrZSBzdXJlIGZvY3VzIG1vdmVzXG4gICAgICAgICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyhfdGhpcy4kYnVsbGV0cykpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy4kYnVsbGV0cy5maWx0ZXIoJy5pcy1hY3RpdmUnKS5mb2N1cygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIENoYW5nZXMgdGhlIGN1cnJlbnQgc2xpZGUgdG8gYSBuZXcgb25lLlxuICAqIEBmdW5jdGlvblxuICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNMVFIgLSBmbGFnIGlmIHRoZSBzbGlkZSBzaG91bGQgbW92ZSBsZWZ0IHRvIHJpZ2h0LlxuICAqIEBwYXJhbSB7alF1ZXJ5fSBjaG9zZW5TbGlkZSAtIHRoZSBqUXVlcnkgZWxlbWVudCBvZiB0aGUgc2xpZGUgdG8gc2hvdyBuZXh0LCBpZiBvbmUgaXMgc2VsZWN0ZWQuXG4gICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIHRoZSBpbmRleCBvZiB0aGUgbmV3IHNsaWRlIGluIGl0cyBjb2xsZWN0aW9uLCBpZiBvbmUgY2hvc2VuLlxuICAqIEBmaXJlcyBPcmJpdCNzbGlkZWNoYW5nZVxuICAqL1xuICBjaGFuZ2VTbGlkZShpc0xUUiwgY2hvc2VuU2xpZGUsIGlkeCkge1xuICAgIHZhciAkY3VyU2xpZGUgPSB0aGlzLiRzbGlkZXMuZmlsdGVyKCcuaXMtYWN0aXZlJykuZXEoMCk7XG5cbiAgICBpZiAoL211aS9nLnRlc3QoJGN1clNsaWRlWzBdLmNsYXNzTmFtZSkpIHsgcmV0dXJuIGZhbHNlOyB9IC8vaWYgdGhlIHNsaWRlIGlzIGN1cnJlbnRseSBhbmltYXRpbmcsIGtpY2sgb3V0IG9mIHRoZSBmdW5jdGlvblxuXG4gICAgdmFyICRmaXJzdFNsaWRlID0gdGhpcy4kc2xpZGVzLmZpcnN0KCksXG4gICAgJGxhc3RTbGlkZSA9IHRoaXMuJHNsaWRlcy5sYXN0KCksXG4gICAgZGlySW4gPSBpc0xUUiA/ICdSaWdodCcgOiAnTGVmdCcsXG4gICAgZGlyT3V0ID0gaXNMVFIgPyAnTGVmdCcgOiAnUmlnaHQnLFxuICAgIF90aGlzID0gdGhpcyxcbiAgICAkbmV3U2xpZGU7XG5cbiAgICBpZiAoIWNob3NlblNsaWRlKSB7IC8vbW9zdCBvZiB0aGUgdGltZSwgdGhpcyB3aWxsIGJlIGF1dG8gcGxheWVkIG9yIGNsaWNrZWQgZnJvbSB0aGUgbmF2QnV0dG9ucy5cbiAgICAgICRuZXdTbGlkZSA9IGlzTFRSID8gLy9pZiB3cmFwcGluZyBlbmFibGVkLCBjaGVjayB0byBzZWUgaWYgdGhlcmUgaXMgYSBgbmV4dGAgb3IgYHByZXZgIHNpYmxpbmcsIGlmIG5vdCwgc2VsZWN0IHRoZSBmaXJzdCBvciBsYXN0IHNsaWRlIHRvIGZpbGwgaW4uIGlmIHdyYXBwaW5nIG5vdCBlbmFibGVkLCBhdHRlbXB0IHRvIHNlbGVjdCBgbmV4dGAgb3IgYHByZXZgLCBpZiB0aGVyZSdzIG5vdGhpbmcgdGhlcmUsIHRoZSBmdW5jdGlvbiB3aWxsIGtpY2sgb3V0IG9uIG5leHQgc3RlcC4gQ1JBWlkgTkVTVEVEIFRFUk5BUklFUyEhISEhXG4gICAgICAodGhpcy5vcHRpb25zLmluZmluaXRlV3JhcCA/ICRjdXJTbGlkZS5uZXh0KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKS5sZW5ndGggPyAkY3VyU2xpZGUubmV4dChgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkgOiAkZmlyc3RTbGlkZSA6ICRjdXJTbGlkZS5uZXh0KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKSkvL3BpY2sgbmV4dCBzbGlkZSBpZiBtb3ZpbmcgbGVmdCB0byByaWdodFxuICAgICAgOlxuICAgICAgKHRoaXMub3B0aW9ucy5pbmZpbml0ZVdyYXAgPyAkY3VyU2xpZGUucHJldihgLiR7dGhpcy5vcHRpb25zLnNsaWRlQ2xhc3N9YCkubGVuZ3RoID8gJGN1clNsaWRlLnByZXYoYC4ke3RoaXMub3B0aW9ucy5zbGlkZUNsYXNzfWApIDogJGxhc3RTbGlkZSA6ICRjdXJTbGlkZS5wcmV2KGAuJHt0aGlzLm9wdGlvbnMuc2xpZGVDbGFzc31gKSk7Ly9waWNrIHByZXYgc2xpZGUgaWYgbW92aW5nIHJpZ2h0IHRvIGxlZnRcbiAgICB9IGVsc2Uge1xuICAgICAgJG5ld1NsaWRlID0gY2hvc2VuU2xpZGU7XG4gICAgfVxuXG4gICAgaWYgKCRuZXdTbGlkZS5sZW5ndGgpIHtcbiAgICAgIC8qKlxuICAgICAgKiBUcmlnZ2VycyBiZWZvcmUgdGhlIG5leHQgc2xpZGUgc3RhcnRzIGFuaW1hdGluZyBpbiBhbmQgb25seSBpZiBhIG5leHQgc2xpZGUgaGFzIGJlZW4gZm91bmQuXG4gICAgICAqIEBldmVudCBPcmJpdCNiZWZvcmVzbGlkZWNoYW5nZVxuICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignYmVmb3Jlc2xpZGVjaGFuZ2UuemYub3JiaXQnLCBbJGN1clNsaWRlLCAkbmV3U2xpZGVdKTtcbiAgICAgIFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5idWxsZXRzKSB7XG4gICAgICAgIGlkeCA9IGlkeCB8fCB0aGlzLiRzbGlkZXMuaW5kZXgoJG5ld1NsaWRlKTsgLy9ncmFiIGluZGV4IHRvIHVwZGF0ZSBidWxsZXRzXG4gICAgICAgIHRoaXMuX3VwZGF0ZUJ1bGxldHMoaWR4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy51c2VNVUkpIHtcbiAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKFxuICAgICAgICAgICRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlJykuY3NzKHsncG9zaXRpb24nOiAnYWJzb2x1dGUnLCAndG9wJzogMH0pLFxuICAgICAgICAgIHRoaXMub3B0aW9uc1tgYW5pbUluRnJvbSR7ZGlySW59YF0sXG4gICAgICAgICAgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICRuZXdTbGlkZS5jc3Moeydwb3NpdGlvbic6ICdyZWxhdGl2ZScsICdkaXNwbGF5JzogJ2Jsb2NrJ30pXG4gICAgICAgICAgICAuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KFxuICAgICAgICAgICRjdXJTbGlkZS5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyksXG4gICAgICAgICAgdGhpcy5vcHRpb25zW2BhbmltT3V0VG8ke2Rpck91dH1gXSxcbiAgICAgICAgICBmdW5jdGlvbigpe1xuICAgICAgICAgICAgJGN1clNsaWRlLnJlbW92ZUF0dHIoJ2FyaWEtbGl2ZScpO1xuICAgICAgICAgICAgaWYoX3RoaXMub3B0aW9ucy5hdXRvUGxheSAmJiAhX3RoaXMudGltZXIuaXNQYXVzZWQpe1xuICAgICAgICAgICAgICBfdGhpcy50aW1lci5yZXN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2RvIHN0dWZmP1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGN1clNsaWRlLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUgaXMtaW4nKS5yZW1vdmVBdHRyKCdhcmlhLWxpdmUnKS5oaWRlKCk7XG4gICAgICAgICRuZXdTbGlkZS5hZGRDbGFzcygnaXMtYWN0aXZlIGlzLWluJykuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpLnNob3coKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUGxheSAmJiAhdGhpcy50aW1lci5pc1BhdXNlZCkge1xuICAgICAgICAgIHRoaXMudGltZXIucmVzdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgLyoqXG4gICAgKiBUcmlnZ2VycyB3aGVuIHRoZSBzbGlkZSBoYXMgZmluaXNoZWQgYW5pbWF0aW5nIGluLlxuICAgICogQGV2ZW50IE9yYml0I3NsaWRlY2hhbmdlXG4gICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2xpZGVjaGFuZ2UuemYub3JiaXQnLCBbJG5ld1NsaWRlXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVXBkYXRlcyB0aGUgYWN0aXZlIHN0YXRlIG9mIHRoZSBidWxsZXRzLCBpZiBkaXNwbGF5ZWQuXG4gICogQGZ1bmN0aW9uXG4gICogQHByaXZhdGVcbiAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gdGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IHNsaWRlLlxuICAqL1xuICBfdXBkYXRlQnVsbGV0cyhpZHgpIHtcbiAgICB2YXIgJG9sZEJ1bGxldCA9IHRoaXMuJGVsZW1lbnQuZmluZChgLiR7dGhpcy5vcHRpb25zLmJveE9mQnVsbGV0c31gKVxuICAgIC5maW5kKCcuaXMtYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2lzLWFjdGl2ZScpLmJsdXIoKSxcbiAgICBzcGFuID0gJG9sZEJ1bGxldC5maW5kKCdzcGFuOmxhc3QnKS5kZXRhY2goKSxcbiAgICAkbmV3QnVsbGV0ID0gdGhpcy4kYnVsbGV0cy5lcShpZHgpLmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hcHBlbmQoc3Bhbik7XG4gIH1cblxuICAvKipcbiAgKiBEZXN0cm95cyB0aGUgY2Fyb3VzZWwgYW5kIGhpZGVzIHRoZSBlbGVtZW50LlxuICAqIEBmdW5jdGlvblxuICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYub3JiaXQnKS5maW5kKCcqJykub2ZmKCcuemYub3JiaXQnKS5lbmQoKS5oaWRlKCk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbk9yYml0LmRlZmF1bHRzID0ge1xuICAvKipcbiAgKiBUZWxscyB0aGUgSlMgdG8gbG9vayBmb3IgYW5kIGxvYWRCdWxsZXRzLlxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIGJ1bGxldHM6IHRydWUsXG4gIC8qKlxuICAqIFRlbGxzIHRoZSBKUyB0byBhcHBseSBldmVudCBsaXN0ZW5lcnMgdG8gbmF2IGJ1dHRvbnNcbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICBuYXZCdXR0b25zOiB0cnVlLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdzbGlkZS1pbi1yaWdodCdcbiAgKi9cbiAgYW5pbUluRnJvbVJpZ2h0OiAnc2xpZGUtaW4tcmlnaHQnLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdzbGlkZS1vdXQtcmlnaHQnXG4gICovXG4gIGFuaW1PdXRUb1JpZ2h0OiAnc2xpZGUtb3V0LXJpZ2h0JyxcbiAgLyoqXG4gICogbW90aW9uLXVpIGFuaW1hdGlvbiBjbGFzcyB0byBhcHBseVxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSAnc2xpZGUtaW4tbGVmdCdcbiAgKlxuICAqL1xuICBhbmltSW5Gcm9tTGVmdDogJ3NsaWRlLWluLWxlZnQnLFxuICAvKipcbiAgKiBtb3Rpb24tdWkgYW5pbWF0aW9uIGNsYXNzIHRvIGFwcGx5XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdzbGlkZS1vdXQtbGVmdCdcbiAgKi9cbiAgYW5pbU91dFRvTGVmdDogJ3NsaWRlLW91dC1sZWZ0JyxcbiAgLyoqXG4gICogQWxsb3dzIE9yYml0IHRvIGF1dG9tYXRpY2FsbHkgYW5pbWF0ZSBvbiBwYWdlIGxvYWQuXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgYXV0b1BsYXk6IHRydWUsXG4gIC8qKlxuICAqIEFtb3VudCBvZiB0aW1lLCBpbiBtcywgYmV0d2VlbiBzbGlkZSB0cmFuc2l0aW9uc1xuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSA1MDAwXG4gICovXG4gIHRpbWVyRGVsYXk6IDUwMDAsXG4gIC8qKlxuICAqIEFsbG93cyBPcmJpdCB0byBpbmZpbml0ZWx5IGxvb3AgdGhyb3VnaCB0aGUgc2xpZGVzXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgaW5maW5pdGVXcmFwOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgdGhlIE9yYml0IHNsaWRlcyB0byBiaW5kIHRvIHN3aXBlIGV2ZW50cyBmb3IgbW9iaWxlLCByZXF1aXJlcyBhbiBhZGRpdGlvbmFsIHV0aWwgbGlicmFyeVxuICAqIEBvcHRpb25cbiAgKiBAZXhhbXBsZSB0cnVlXG4gICovXG4gIHN3aXBlOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgdGhlIHRpbWluZyBmdW5jdGlvbiB0byBwYXVzZSBhbmltYXRpb24gb24gaG92ZXIuXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAvKipcbiAgKiBBbGxvd3MgT3JiaXQgdG8gYmluZCBrZXlib2FyZCBldmVudHMgdG8gdGhlIHNsaWRlciwgdG8gYW5pbWF0ZSBmcmFtZXMgd2l0aCBhcnJvdyBrZXlzXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlIHRydWVcbiAgKi9cbiAgYWNjZXNzaWJsZTogdHJ1ZSxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgY29udGFpbmVyIG9mIE9yYml0XG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdvcmJpdC1jb250YWluZXInXG4gICovXG4gIGNvbnRhaW5lckNsYXNzOiAnb3JiaXQtY29udGFpbmVyJyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byBpbmRpdmlkdWFsIHNsaWRlcy5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LXNsaWRlJ1xuICAqL1xuICBzbGlkZUNsYXNzOiAnb3JiaXQtc2xpZGUnLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBidWxsZXQgY29udGFpbmVyLiBZb3UncmUgd2VsY29tZS5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LWJ1bGxldHMnXG4gICovXG4gIGJveE9mQnVsbGV0czogJ29yYml0LWJ1bGxldHMnLFxuICAvKipcbiAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBgbmV4dGAgbmF2aWdhdGlvbiBidXR0b24uXG4gICogQG9wdGlvblxuICAqIEBleGFtcGxlICdvcmJpdC1uZXh0J1xuICAqL1xuICBuZXh0Q2xhc3M6ICdvcmJpdC1uZXh0JyxcbiAgLyoqXG4gICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYHByZXZpb3VzYCBuYXZpZ2F0aW9uIGJ1dHRvbi5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgJ29yYml0LXByZXZpb3VzJ1xuICAqL1xuICBwcmV2Q2xhc3M6ICdvcmJpdC1wcmV2aW91cycsXG4gIC8qKlxuICAqIEJvb2xlYW4gdG8gZmxhZyB0aGUganMgdG8gdXNlIG1vdGlvbiB1aSBjbGFzc2VzIG9yIG5vdC4gRGVmYXVsdCB0byB0cnVlIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0eS5cbiAgKiBAb3B0aW9uXG4gICogQGV4YW1wbGUgdHJ1ZVxuICAqL1xuICB1c2VNVUk6IHRydWVcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihPcmJpdCwgJ09yYml0Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBSZXNwb25zaXZlTWVudSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5hY2NvcmRpb25NZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmRyaWxsZG93blxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5kcm9wZG93bi1tZW51XG4gKi9cblxuY2xhc3MgUmVzcG9uc2l2ZU1lbnUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHJlc3BvbnNpdmUgbWVudS5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYSBkcm9wZG93biBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgdGhpcy5ydWxlcyA9IHRoaXMuJGVsZW1lbnQuZGF0YSgncmVzcG9uc2l2ZS1tZW51Jyk7XG4gICAgdGhpcy5jdXJyZW50TXEgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudFBsdWdpbiA9IG51bGw7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdSZXNwb25zaXZlTWVudScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBNZW51IGJ5IHBhcnNpbmcgdGhlIGNsYXNzZXMgZnJvbSB0aGUgJ2RhdGEtUmVzcG9uc2l2ZU1lbnUnIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICAvLyBUaGUgZmlyc3QgdGltZSBhbiBJbnRlcmNoYW5nZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQsIHRoaXMucnVsZXMgaXMgY29udmVydGVkIGZyb20gYSBzdHJpbmcgb2YgXCJjbGFzc2VzXCIgdG8gYW4gb2JqZWN0IG9mIHJ1bGVzXG4gICAgaWYgKHR5cGVvZiB0aGlzLnJ1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbGV0IHJ1bGVzVHJlZSA9IHt9O1xuXG4gICAgICAvLyBQYXJzZSBydWxlcyBmcm9tIFwiY2xhc3Nlc1wiIHB1bGxlZCBmcm9tIGRhdGEgYXR0cmlidXRlXG4gICAgICBsZXQgcnVsZXMgPSB0aGlzLnJ1bGVzLnNwbGl0KCcgJyk7XG5cbiAgICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBldmVyeSBydWxlIGZvdW5kXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBydWxlID0gcnVsZXNbaV0uc3BsaXQoJy0nKTtcbiAgICAgICAgbGV0IHJ1bGVTaXplID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVswXSA6ICdzbWFsbCc7XG4gICAgICAgIGxldCBydWxlUGx1Z2luID0gcnVsZS5sZW5ndGggPiAxID8gcnVsZVsxXSA6IHJ1bGVbMF07XG5cbiAgICAgICAgaWYgKE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dICE9PSBudWxsKSB7XG4gICAgICAgICAgcnVsZXNUcmVlW3J1bGVTaXplXSA9IE1lbnVQbHVnaW5zW3J1bGVQbHVnaW5dO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMucnVsZXMgPSBydWxlc1RyZWU7XG4gICAgfVxuXG4gICAgaWYgKCEkLmlzRW1wdHlPYmplY3QodGhpcy5ydWxlcykpIHtcbiAgICAgIHRoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIE1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH0pO1xuICAgIC8vICQod2luZG93KS5vbigncmVzaXplLnpmLlJlc3BvbnNpdmVNZW51JywgZnVuY3Rpb24oKSB7XG4gICAgLy8gICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICAvLyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgc2NyZWVuIHdpZHRoIGFnYWluc3QgYXZhaWxhYmxlIG1lZGlhIHF1ZXJpZXMuIElmIHRoZSBtZWRpYSBxdWVyeSBoYXMgY2hhbmdlZCwgYW5kIHRoZSBwbHVnaW4gbmVlZGVkIGhhcyBjaGFuZ2VkLCB0aGUgcGx1Z2lucyB3aWxsIHN3YXAgb3V0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja01lZGlhUXVlcmllcygpIHtcbiAgICB2YXIgbWF0Y2hlZE1xLCBfdGhpcyA9IHRoaXM7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcnVsZSBhbmQgZmluZCB0aGUgbGFzdCBtYXRjaGluZyBydWxlXG4gICAgJC5lYWNoKHRoaXMucnVsZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KGtleSkpIHtcbiAgICAgICAgbWF0Y2hlZE1xID0ga2V5O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gTm8gbWF0Y2g/IE5vIGRpY2VcbiAgICBpZiAoIW1hdGNoZWRNcSkgcmV0dXJuO1xuXG4gICAgLy8gUGx1Z2luIGFscmVhZHkgaW5pdGlhbGl6ZWQ/IFdlIGdvb2RcbiAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luIGluc3RhbmNlb2YgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbikgcmV0dXJuO1xuXG4gICAgLy8gUmVtb3ZlIGV4aXN0aW5nIHBsdWdpbi1zcGVjaWZpYyBDU1MgY2xhc3Nlc1xuICAgICQuZWFjaChNZW51UGx1Z2lucywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgX3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModmFsdWUuY3NzQ2xhc3MpO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIHRoZSBDU1MgY2xhc3MgZm9yIHRoZSBuZXcgcGx1Z2luXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLnJ1bGVzW21hdGNoZWRNcV0uY3NzQ2xhc3MpO1xuXG4gICAgLy8gQ3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBuZXcgcGx1Z2luXG4gICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbikgdGhpcy5jdXJyZW50UGx1Z2luLmRlc3Ryb3koKTtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBuZXcgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbih0aGlzLiRlbGVtZW50LCB7fSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IHBsdWdpbiBvbiB0aGlzIGVsZW1lbnQsIGFzIHdlbGwgYXMgdGhlIHdpbmRvdyByZXNpemUgaGFuZGxlciB0aGF0IHN3aXRjaGVzIHRoZSBwbHVnaW5zIG91dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgJCh3aW5kb3cpLm9mZignLnpmLlJlc3BvbnNpdmVNZW51Jyk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblJlc3BvbnNpdmVNZW51LmRlZmF1bHRzID0ge307XG5cbi8vIFRoZSBwbHVnaW4gbWF0Y2hlcyB0aGUgcGx1Z2luIGNsYXNzZXMgd2l0aCB0aGVzZSBwbHVnaW4gaW5zdGFuY2VzLlxudmFyIE1lbnVQbHVnaW5zID0ge1xuICBkcm9wZG93bjoge1xuICAgIGNzc0NsYXNzOiAnZHJvcGRvd24nLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snZHJvcGRvd24tbWVudSddIHx8IG51bGxcbiAgfSxcbiBkcmlsbGRvd246IHtcbiAgICBjc3NDbGFzczogJ2RyaWxsZG93bicsXG4gICAgcGx1Z2luOiBGb3VuZGF0aW9uLl9wbHVnaW5zWydkcmlsbGRvd24nXSB8fCBudWxsXG4gIH0sXG4gIGFjY29yZGlvbjoge1xuICAgIGNzc0NsYXNzOiAnYWNjb3JkaW9uLW1lbnUnLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snYWNjb3JkaW9uLW1lbnUnXSB8fCBudWxsXG4gIH1cbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXNwb25zaXZlTWVudSwgJ1Jlc3BvbnNpdmVNZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBSZXNwb25zaXZlVG9nZ2xlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlVG9nZ2xlXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqL1xuXG5jbGFzcyBSZXNwb25zaXZlVG9nZ2xlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVGFiIEJhci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlVG9nZ2xlI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGF0dGFjaCB0YWIgYmFyIGZ1bmN0aW9uYWxpdHkgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSB0YWIgYmFyIGJ5IGZpbmRpbmcgdGhlIHRhcmdldCBlbGVtZW50LCB0b2dnbGluZyBlbGVtZW50LCBhbmQgcnVubmluZyB1cGRhdGUoKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgdGFyZ2V0SUQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtdG9nZ2xlJyk7XG4gICAgaWYgKCF0YXJnZXRJRCkge1xuICAgICAgY29uc29sZS5lcnJvcignWW91ciB0YWIgYmFyIG5lZWRzIGFuIElEIG9mIGEgTWVudSBhcyB0aGUgdmFsdWUgb2YgZGF0YS10YWItYmFyLicpO1xuICAgIH1cblxuICAgIHRoaXMuJHRhcmdldE1lbnUgPSAkKGAjJHt0YXJnZXRJRH1gKTtcbiAgICB0aGlzLiR0b2dnbGVyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS10b2dnbGVdJyk7XG5cbiAgICB0aGlzLl91cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG5lY2Vzc2FyeSBldmVudCBoYW5kbGVycyBmb3IgdGhlIHRhYiBiYXIgdG8gd29yay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl91cGRhdGVNcUhhbmRsZXIgPSB0aGlzLl91cGRhdGUuYmluZCh0aGlzKTtcbiAgICBcbiAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3VwZGF0ZU1xSGFuZGxlcik7XG5cbiAgICB0aGlzLiR0b2dnbGVyLm9uKCdjbGljay56Zi5yZXNwb25zaXZlVG9nZ2xlJywgdGhpcy50b2dnbGVNZW51LmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgY3VycmVudCBtZWRpYSBxdWVyeSB0byBkZXRlcm1pbmUgaWYgdGhlIHRhYiBiYXIgc2hvdWxkIGJlIHZpc2libGUgb3IgaGlkZGVuLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF91cGRhdGUoKSB7XG4gICAgLy8gTW9iaWxlXG4gICAgaWYgKCFGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuaGlkZUZvcikpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuc2hvdygpO1xuICAgICAgdGhpcy4kdGFyZ2V0TWVudS5oaWRlKCk7XG4gICAgfVxuXG4gICAgLy8gRGVza3RvcFxuICAgIGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKCk7XG4gICAgICB0aGlzLiR0YXJnZXRNZW51LnNob3coKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgZWxlbWVudCBhdHRhY2hlZCB0byB0aGUgdGFiIGJhci4gVGhlIHRvZ2dsZSBvbmx5IGhhcHBlbnMgaWYgdGhlIHNjcmVlbiBpcyBzbWFsbCBlbm91Z2ggdG8gYWxsb3cgaXQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAqL1xuICB0b2dnbGVNZW51KCkgeyAgIFxuICAgIGlmICghRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLmhpZGVGb3IpKSB7XG4gICAgICB0aGlzLiR0YXJnZXRNZW51LnRvZ2dsZSgwKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBlbGVtZW50IGF0dGFjaGVkIHRvIHRoZSB0YWIgYmFyIHRvZ2dsZXMuXG4gICAgICAgKiBAZXZlbnQgUmVzcG9uc2l2ZVRvZ2dsZSN0b2dnbGVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgfVxuICB9O1xuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgdGhpcy4kdG9nZ2xlci5vZmYoJy56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgXG4gICAgJCh3aW5kb3cpLm9mZignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fdXBkYXRlTXFIYW5kbGVyKTtcbiAgICBcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuUmVzcG9uc2l2ZVRvZ2dsZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBicmVha3BvaW50IGFmdGVyIHdoaWNoIHRoZSBtZW51IGlzIGFsd2F5cyBzaG93biwgYW5kIHRoZSB0YWIgYmFyIGlzIGhpZGRlbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnbWVkaXVtJ1xuICAgKi9cbiAgaGlkZUZvcjogJ21lZGl1bSdcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXNwb25zaXZlVG9nZ2xlLCAnUmVzcG9uc2l2ZVRvZ2dsZScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogUmV2ZWFsIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXZlYWxcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uIGlmIHVzaW5nIGFuaW1hdGlvbnNcbiAqL1xuXG5jbGFzcyBSZXZlYWwge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBSZXZlYWwuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGZvciB0aGUgbW9kYWwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9uYWwgcGFyYW1ldGVycy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgUmV2ZWFsLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmV2ZWFsJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignUmV2ZWFsJywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZScsXG4gICAgICAnVEFCJzogJ3RhYl9mb3J3YXJkJyxcbiAgICAgICdTSElGVF9UQUInOiAndGFiX2JhY2t3YXJkJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBtb2RhbCBieSBhZGRpbmcgdGhlIG92ZXJsYXkgYW5kIGNsb3NlIGJ1dHRvbnMsIChpZiBzZWxlY3RlZCkuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLmlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpO1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLmNhY2hlZCA9IHttcTogRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmN1cnJlbnR9O1xuICAgIHRoaXMuaXNNb2JpbGUgPSBtb2JpbGVTbmlmZigpO1xuXG4gICAgdGhpcy4kYW5jaG9yID0gJChgW2RhdGEtb3Blbj1cIiR7dGhpcy5pZH1cIl1gKS5sZW5ndGggPyAkKGBbZGF0YS1vcGVuPVwiJHt0aGlzLmlkfVwiXWApIDogJChgW2RhdGEtdG9nZ2xlPVwiJHt0aGlzLmlkfVwiXWApO1xuICAgIHRoaXMuJGFuY2hvci5hdHRyKHtcbiAgICAgICdhcmlhLWNvbnRyb2xzJzogdGhpcy5pZCxcbiAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICd0YWJpbmRleCc6IDBcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbiB8fCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmdWxsJykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5mdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgIHRoaXMub3B0aW9ucy5vdmVybGF5ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiAhdGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheSA9IHRoaXMuX21ha2VPdmVybGF5KHRoaXMuaWQpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ2RpYWxvZycsXG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICdkYXRhLXlldGktYm94JzogdGhpcy5pZCxcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogdGhpcy5pZFxuICAgIH0pO1xuXG4gICAgaWYodGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5kZXRhY2goKS5hcHBlbmRUbyh0aGlzLiRvdmVybGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5kZXRhY2goKS5hcHBlbmRUbygkKCdib2R5JykpO1xuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnd2l0aG91dC1vdmVybGF5Jyk7XG4gICAgfVxuICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmsgJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICggYCMke3RoaXMuaWR9YCkpIHtcbiAgICAgICQod2luZG93KS5vbmUoJ2xvYWQuemYucmV2ZWFsJywgdGhpcy5vcGVuLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIG92ZXJsYXkgZGl2IHRvIGRpc3BsYXkgYmVoaW5kIHRoZSBtb2RhbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tYWtlT3ZlcmxheShpZCkge1xuICAgIHZhciAkb3ZlcmxheSA9ICQoJzxkaXY+PC9kaXY+JylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdyZXZlYWwtb3ZlcmxheScpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbygnYm9keScpO1xuICAgIHJldHVybiAkb3ZlcmxheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHBvc2l0aW9uIG9mIG1vZGFsXG4gICAqIFRPRE86ICBGaWd1cmUgb3V0IGlmIHdlIGFjdHVhbGx5IG5lZWQgdG8gY2FjaGUgdGhlc2UgdmFsdWVzIG9yIGlmIGl0IGRvZXNuJ3QgbWF0dGVyXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgdmFyIHdpZHRoID0gdGhpcy4kZWxlbWVudC5vdXRlcldpZHRoKCk7XG4gICAgdmFyIG91dGVyV2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy4kZWxlbWVudC5vdXRlckhlaWdodCgpO1xuICAgIHZhciBvdXRlckhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcbiAgICB2YXIgbGVmdCwgdG9wO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuaE9mZnNldCA9PT0gJ2F1dG8nKSB7XG4gICAgICBsZWZ0ID0gcGFyc2VJbnQoKG91dGVyV2lkdGggLSB3aWR0aCkgLyAyLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMuaE9mZnNldCwgMTApO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnZPZmZzZXQgPT09ICdhdXRvJykge1xuICAgICAgaWYgKGhlaWdodCA+IG91dGVySGVpZ2h0KSB7XG4gICAgICAgIHRvcCA9IHBhcnNlSW50KE1hdGgubWluKDEwMCwgb3V0ZXJIZWlnaHQgLyAxMCksIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvcCA9IHBhcnNlSW50KChvdXRlckhlaWdodCAtIGhlaWdodCkgLyA0LCAxMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IHBhcnNlSW50KHRoaXMub3B0aW9ucy52T2Zmc2V0LCAxMCk7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHt0b3A6IHRvcCArICdweCd9KTtcbiAgICAvLyBvbmx5IHdvcnJ5IGFib3V0IGxlZnQgaWYgd2UgZG9uJ3QgaGF2ZSBhbiBvdmVybGF5IG9yIHdlIGhhdmVhICBob3Jpem9udGFsIG9mZnNldCxcbiAgICAvLyBvdGhlcndpc2Ugd2UncmUgcGVyZmVjdGx5IGluIHRoZSBtaWRkbGVcbiAgICBpZighdGhpcy4kb3ZlcmxheSB8fCAodGhpcy5vcHRpb25zLmhPZmZzZXQgIT09ICdhdXRvJykpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtsZWZ0OiBsZWZ0ICsgJ3B4J30pO1xuICAgICAgdGhpcy4kZWxlbWVudC5jc3Moe21hcmdpbjogJzBweCd9KTtcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgbW9kYWwuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogKGV2ZW50LCAkZWxlbWVudCkgPT4ge1xuICAgICAgICBpZiAoKGV2ZW50LnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0pIHx8XG4gICAgICAgICAgICAoJChldmVudC50YXJnZXQpLnBhcmVudHMoJ1tkYXRhLWNsb3NhYmxlXScpWzBdID09PSAkZWxlbWVudCkpIHsgLy8gb25seSBjbG9zZSByZXZlYWwgd2hlbiBpdCdzIGV4cGxpY2l0bHkgY2FsbGVkXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2UuYXBwbHkodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgdGhpcy4kYW5jaG9yLm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUud2hpY2ggPT09IDEzIHx8IGUud2hpY2ggPT09IDMyKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiB0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5vZmYoJy56Zi5yZXZlYWwnKS5vbignY2xpY2suemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8IFxuICAgICAgICAgICQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSB8fCBcbiAgICAgICAgICAgICEkLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHsgXG4gICAgICAgICAgICAgIHJldHVybjsgXG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAkKHdpbmRvdykub24oYHBvcHN0YXRlLnpmLnJldmVhbDoke3RoaXMuaWR9YCwgdGhpcy5faGFuZGxlU3RhdGUuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgbW9kYWwgbWV0aG9kcyBvbiBiYWNrL2ZvcndhcmQgYnV0dG9uIGNsaWNrcyBvciBhbnkgb3RoZXIgZXZlbnQgdGhhdCB0cmlnZ2VycyBwb3BzdGF0ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9oYW5kbGVTdGF0ZShlKSB7XG4gICAgaWYod2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICggJyMnICsgdGhpcy5pZCkgJiYgIXRoaXMuaXNBY3RpdmUpeyB0aGlzLm9wZW4oKTsgfVxuICAgIGVsc2V7IHRoaXMuY2xvc2UoKTsgfVxuICB9XG5cblxuICAvKipcbiAgICogT3BlbnMgdGhlIG1vZGFsIGNvbnRyb2xsZWQgYnkgYHRoaXMuJGFuY2hvcmAsIGFuZCBjbG9zZXMgYWxsIG90aGVycyBieSBkZWZhdWx0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFJldmVhbCNjbG9zZW1lXG4gICAqIEBmaXJlcyBSZXZlYWwjb3BlblxuICAgKi9cbiAgb3BlbigpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICB2YXIgaGFzaCA9IGAjJHt0aGlzLmlkfWA7XG5cbiAgICAgIGlmICh3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIGhhc2gpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgLy8gTWFrZSBlbGVtZW50cyBpbnZpc2libGUsIGJ1dCByZW1vdmUgZGlzcGxheTogbm9uZSBzbyB3ZSBjYW4gZ2V0IHNpemUgYW5kIHBvc2l0aW9uaW5nXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAuY3NzKHsgJ3Zpc2liaWxpdHknOiAnaGlkZGVuJyB9KVxuICAgICAgICAuc2hvdygpXG4gICAgICAgIC5zY3JvbGxUb3AoMCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICB0aGlzLiRvdmVybGF5LmNzcyh7J3Zpc2liaWxpdHknOiAnaGlkZGVuJ30pLnNob3coKTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigpO1xuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmhpZGUoKVxuICAgICAgLmNzcyh7ICd2aXNpYmlsaXR5JzogJycgfSk7XG5cbiAgICBpZih0aGlzLiRvdmVybGF5KSB7XG4gICAgICB0aGlzLiRvdmVybGF5LmNzcyh7J3Zpc2liaWxpdHknOiAnJ30pLmhpZGUoKTtcbiAgICAgIGlmKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2Zhc3QnKSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdmYXN0Jyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ3Nsb3cnKSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdzbG93Jyk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5tdWx0aXBsZU9wZW5lZCkge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIG1vZGFsIG9wZW5zLlxuICAgICAgICogQ2xvc2VzIGFueSBvdGhlciBtb2RhbHMgdGhhdCBhcmUgY3VycmVudGx5IG9wZW5cbiAgICAgICAqIEBldmVudCBSZXZlYWwjY2xvc2VtZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYucmV2ZWFsJywgdGhpcy5pZCk7XG4gICAgfVxuICAgIC8vIE1vdGlvbiBVSSBtZXRob2Qgb2YgcmV2ZWFsXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb25Jbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW9uRm9jdXMoKXtcbiAgICAgICAgX3RoaXMuJGVsZW1lbnRcbiAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZSxcbiAgICAgICAgICAgICd0YWJpbmRleCc6IC0xXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kb3ZlcmxheSwgJ2ZhZGUtaW4nKTtcbiAgICAgIH1cbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbih0aGlzLiRlbGVtZW50LCB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uSW4sICgpID0+IHtcbiAgICAgICAgdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcbiAgICAgICAgYWZ0ZXJBbmltYXRpb25Gb2N1cygpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGpRdWVyeSBtZXRob2Qgb2YgcmV2ZWFsXG4gICAgZWxzZSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgdGhpcy4kb3ZlcmxheS5zaG93KDApO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWxlbWVudC5zaG93KHRoaXMub3B0aW9ucy5zaG93RGVsYXkpO1xuICAgIH1cblxuICAgIC8vIGhhbmRsZSBhY2Nlc3NpYmlsaXR5XG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmF0dHIoe1xuICAgICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZSxcbiAgICAgICAgJ3RhYmluZGV4JzogLTFcbiAgICAgIH0pXG4gICAgICAuZm9jdXMoKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIG1vZGFsIGhhcyBzdWNjZXNzZnVsbHkgb3BlbmVkLlxuICAgICAqIEBldmVudCBSZXZlYWwjb3BlblxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb3Blbi56Zi5yZXZlYWwnKTtcblxuICAgIGlmICh0aGlzLmlzTW9iaWxlKSB7XG4gICAgICB0aGlzLm9yaWdpbmFsU2Nyb2xsUG9zID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgJCgnaHRtbCwgYm9keScpLmFkZENsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuX2V4dHJhSGFuZGxlcnMoKTtcbiAgICB9LCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV4dHJhIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgYm9keSBhbmQgd2luZG93IGlmIG5lY2Vzc2FyeS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9leHRyYUhhbmRsZXJzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcblxuICAgIGlmICghdGhpcy5vcHRpb25zLm92ZXJsYXkgJiYgdGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiAhdGhpcy5vcHRpb25zLmZ1bGxTY3JlZW4pIHtcbiAgICAgICQoJ2JvZHknKS5vbignY2xpY2suemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8IFxuICAgICAgICAgICQuY29udGFpbnMoX3RoaXMuJGVsZW1lbnRbMF0sIGUudGFyZ2V0KSB8fCBcbiAgICAgICAgICAgICEkLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICQod2luZG93KS5vbigna2V5ZG93bi56Zi5yZXZlYWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGxvY2sgZm9jdXMgd2l0aGluIG1vZGFsIHdoaWxlIHRhYmJpbmdcbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcbiAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgIHRhYl9mb3J3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmZpbmQoJzpmb2N1cycpLmlzKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmVxKC0xKSkpIHsgLy8gbGVmdCBtb2RhbCBkb3dud2FyZHMsIHNldHRpbmcgZm9jdXMgdG8gZmlyc3QgZWxlbWVudFxuICAgICAgICAgICAgX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMuZXEoMCkuZm9jdXMoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoID09PSAwKSB7IC8vIG5vIGZvY3VzYWJsZSBlbGVtZW50cyBpbnNpZGUgdGhlIG1vZGFsIGF0IGFsbCwgcHJldmVudCB0YWJiaW5nIGluIGdlbmVyYWxcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGFiX2JhY2t3YXJkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZShfdGhpcy4kZWxlbWVudCk7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmZpbmQoJzpmb2N1cycpLmlzKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmVxKDApKSB8fCBfdGhpcy4kZWxlbWVudC5pcygnOmZvY3VzJykpIHsgLy8gbGVmdCBtb2RhbCB1cHdhcmRzLCBzZXR0aW5nIGZvY3VzIHRvIGxhc3QgZWxlbWVudFxuICAgICAgICAgICAgX3RoaXMuZm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpLmZvY3VzKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF90aGlzLmZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCA9PT0gMCkgeyAvLyBubyBmb2N1c2FibGUgZWxlbWVudHMgaW5zaWRlIHRoZSBtb2RhbCBhdCBhbGwsIHByZXZlbnQgdGFiYmluZyBpbiBnZW5lcmFsXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyhfdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1jbG9zZV0nKSkpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IC8vIHNldCBmb2N1cyBiYWNrIHRvIGFuY2hvciBpZiBjbG9zZSBidXR0b24gaGFzIGJlZW4gYWN0aXZhdGVkXG4gICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJHRhcmdldC5pcyhfdGhpcy5mb2N1c2FibGVFbGVtZW50cykpIHsgLy8gZG9udCd0IHRyaWdnZXIgaWYgYWN1YWwgZWxlbWVudCBoYXMgZm9jdXMgKGkuZS4gaW5wdXRzLCBsaW5rcywgLi4uKVxuICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbihwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBtb2RhbC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBSZXZlYWwjY2xvc2VkXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIE1vdGlvbiBVSSBtZXRob2Qgb2YgaGlkaW5nXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJG92ZXJsYXksICdmYWRlLW91dCcsIGZpbmlzaFVwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmaW5pc2hVcCgpO1xuICAgICAgfVxuXG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsIHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQpO1xuICAgIH1cbiAgICAvLyBqUXVlcnkgbWV0aG9kIG9mIGhpZGluZ1xuICAgIGVsc2Uge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5vdmVybGF5KSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgwLCBmaW5pc2hVcCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZmluaXNoVXAoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKHRoaXMub3B0aW9ucy5oaWRlRGVsYXkpO1xuICAgIH1cblxuICAgIC8vIENvbmRpdGlvbmFscyB0byByZW1vdmUgZXh0cmEgZXZlbnQgbGlzdGVuZXJzIGFkZGVkIG9uIG9wZW5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICQod2luZG93KS5vZmYoJ2tleWRvd24uemYucmV2ZWFsJyk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiB0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gICAgICAkKCdib2R5Jykub2ZmKCdjbGljay56Zi5yZXZlYWwnKTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZigna2V5ZG93bi56Zi5yZXZlYWwnKTtcblxuICAgIGZ1bmN0aW9uIGZpbmlzaFVwKCkge1xuICAgICAgaWYgKF90aGlzLmlzTW9iaWxlKSB7XG4gICAgICAgICQoJ2h0bWwsIGJvZHknKS5yZW1vdmVDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICAgICAgaWYoX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpIHtcbiAgICAgICAgICAkKCdib2R5Jykuc2Nyb2xsVG9wKF90aGlzLm9yaWdpbmFsU2Nyb2xsUG9zKTtcbiAgICAgICAgICBfdGhpcy5vcmlnaW5hbFNjcm9sbFBvcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLXJldmVhbC1vcGVuJyk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgIC8qKlxuICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtb2RhbCBpcyBkb25lIGNsb3NpbmcuXG4gICAgICAqIEBldmVudCBSZXZlYWwjY2xvc2VkXG4gICAgICAqL1xuICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VkLnpmLnJldmVhbCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVzZXRzIHRoZSBtb2RhbCBjb250ZW50XG4gICAgKiBUaGlzIHByZXZlbnRzIGEgcnVubmluZyB2aWRlbyB0byBrZWVwIGdvaW5nIGluIHRoZSBiYWNrZ3JvdW5kXG4gICAgKi9cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc2V0T25DbG9zZSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5odG1sKHRoaXMuJGVsZW1lbnQuaHRtbCgpKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgIGlmIChfdGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAgaWYgKHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKFwiXCIsIGRvY3VtZW50LnRpdGxlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgIH0gZWxzZSB7XG4gICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcnO1xuICAgICAgIH1cbiAgICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2VkIHN0YXRlIG9mIGEgbW9kYWwuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLmlzQWN0aXZlKSB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYSBtb2RhbC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5hcHBlbmRUbygkKCdib2R5JykpOyAvLyBtb3ZlICRlbGVtZW50IG91dHNpZGUgb2YgJG92ZXJsYXkgdG8gcHJldmVudCBlcnJvciB1bnJlZ2lzdGVyUGx1Z2luKClcbiAgICAgIHRoaXMuJG92ZXJsYXkuaGlkZSgpLm9mZigpLnJlbW92ZSgpO1xuICAgIH1cbiAgICB0aGlzLiRlbGVtZW50LmhpZGUoKS5vZmYoKTtcbiAgICB0aGlzLiRhbmNob3Iub2ZmKCcuemYnKTtcbiAgICAkKHdpbmRvdykub2ZmKGAuemYucmV2ZWFsOiR7dGhpcy5pZH1gKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfTtcbn1cblxuUmV2ZWFsLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogTW90aW9uLVVJIGNsYXNzIHRvIHVzZSBmb3IgYW5pbWF0ZWQgZWxlbWVudHMuIElmIG5vbmUgdXNlZCwgZGVmYXVsdHMgdG8gc2ltcGxlIHNob3cvaGlkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnc2xpZGUtaW4tbGVmdCdcbiAgICovXG4gIGFuaW1hdGlvbkluOiAnJyxcbiAgLyoqXG4gICAqIE1vdGlvbi1VSSBjbGFzcyB0byB1c2UgZm9yIGFuaW1hdGVkIGVsZW1lbnRzLiBJZiBub25lIHVzZWQsIGRlZmF1bHRzIHRvIHNpbXBsZSBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3NsaWRlLW91dC1yaWdodCdcbiAgICovXG4gIGFuaW1hdGlvbk91dDogJycsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gZGVsYXkgdGhlIG9wZW5pbmcgb2YgYSBtb2RhbCBhZnRlciBhIGNsaWNrIGlmIG5vIGFuaW1hdGlvbiB1c2VkLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICBzaG93RGVsYXk6IDAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gZGVsYXkgdGhlIGNsb3Npbmcgb2YgYSBtb2RhbCBhZnRlciBhIGNsaWNrIGlmIG5vIGFuaW1hdGlvbiB1c2VkLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICBoaWRlRGVsYXk6IDAsXG4gIC8qKlxuICAgKiBBbGxvd3MgYSBjbGljayBvbiB0aGUgYm9keS9vdmVybGF5IHRvIGNsb3NlIHRoZSBtb2RhbC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGNsb3NlIGlmIHRoZSB1c2VyIHByZXNzZXMgdGhlIGBFU0NBUEVgIGtleS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbG9zZU9uRXNjOiB0cnVlLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgYWxsb3dzIG11bHRpcGxlIG1vZGFscyB0byBiZSBkaXNwbGF5ZWQgYXQgb25jZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgbXVsdGlwbGVPcGVuZWQ6IGZhbHNlLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIG1vZGFsIHNob3VsZCBwdXNoIGRvd24gZnJvbSB0aGUgdG9wIG9mIHRoZSBzY3JlZW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgYXV0b1xuICAgKi9cbiAgdk9mZnNldDogJ2F1dG8nLFxuICAvKipcbiAgICogRGlzdGFuY2UsIGluIHBpeGVscywgdGhlIG1vZGFsIHNob3VsZCBwdXNoIGluIGZyb20gdGhlIHNpZGUgb2YgdGhlIHNjcmVlbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBhdXRvXG4gICAqL1xuICBoT2Zmc2V0OiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGJlIGZ1bGxzY3JlZW4sIGNvbXBsZXRlbHkgYmxvY2tpbmcgb3V0IHRoZSByZXN0IG9mIHRoZSB2aWV3LiBKUyBjaGVja3MgZm9yIHRoaXMgYXMgd2VsbC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZnVsbFNjcmVlbjogZmFsc2UsXG4gIC8qKlxuICAgKiBQZXJjZW50YWdlIG9mIHNjcmVlbiBoZWlnaHQgdGhlIG1vZGFsIHNob3VsZCBwdXNoIHVwIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMFxuICAgKi9cbiAgYnRtT2Zmc2V0UGN0OiAxMCxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gZ2VuZXJhdGUgYW4gb3ZlcmxheSBkaXYsIHdoaWNoIHdpbGwgY292ZXIgdGhlIHZpZXcgd2hlbiBtb2RhbCBvcGVucy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBvdmVybGF5OiB0cnVlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byByZW1vdmUgYW5kIHJlaW5qZWN0IG1hcmt1cCBvbiBjbG9zZS4gU2hvdWxkIGJlIHRydWUgaWYgdXNpbmcgdmlkZW8gZWxlbWVudHMgdy9vIHVzaW5nIHByb3ZpZGVyJ3MgYXBpLCBvdGhlcndpc2UsIHZpZGVvcyB3aWxsIGNvbnRpbnVlIHRvIHBsYXkgaW4gdGhlIGJhY2tncm91bmQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIHJlc2V0T25DbG9zZTogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGFsdGVyIHRoZSB1cmwgb24gb3Blbi9jbG9zZSwgYW5kIGFsbG93cyB0aGUgdXNlIG9mIHRoZSBgYmFja2AgYnV0dG9uIHRvIGNsb3NlIG1vZGFscy4gQUxTTywgYWxsb3dzIGEgbW9kYWwgdG8gYXV0by1tYW5pYWNhbGx5IG9wZW4gb24gcGFnZSBsb2FkIElGIHRoZSBoYXNoID09PSB0aGUgbW9kYWwncyB1c2VyLXNldCBpZC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGVlcExpbms6IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oUmV2ZWFsLCAnUmV2ZWFsJyk7XG5cbmZ1bmN0aW9uIGlQaG9uZVNuaWZmKCkge1xuICByZXR1cm4gL2lQKGFkfGhvbmV8b2QpLipPUy8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG5cbmZ1bmN0aW9uIGFuZHJvaWRTbmlmZigpIHtcbiAgcmV0dXJuIC9BbmRyb2lkLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbn1cblxuZnVuY3Rpb24gbW9iaWxlU25pZmYoKSB7XG4gIHJldHVybiBpUGhvbmVTbmlmZigpIHx8IGFuZHJvaWRTbmlmZigpO1xufVxuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogU2xpZGVyIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5zbGlkZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRvdWNoXG4gKi9cblxuY2xhc3MgU2xpZGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBkcmlsbGRvd24gbWVudS5cbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgU2xpZGVyLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdTbGlkZXInKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdTbGlkZXInLCB7XG4gICAgICAnbHRyJzoge1xuICAgICAgICAnQVJST1dfUklHSFQnOiAnaW5jcmVhc2UnLFxuICAgICAgICAnQVJST1dfVVAnOiAnaW5jcmVhc2UnLFxuICAgICAgICAnQVJST1dfRE9XTic6ICdkZWNyZWFzZScsXG4gICAgICAgICdBUlJPV19MRUZUJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX1JJR0hUJzogJ2luY3JlYXNlX2Zhc3QnLFxuICAgICAgICAnU0hJRlRfQVJST1dfVVAnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICdTSElGVF9BUlJPV19ET1dOJzogJ2RlY3JlYXNlX2Zhc3QnLFxuICAgICAgICAnU0hJRlRfQVJST1dfTEVGVCc6ICdkZWNyZWFzZV9mYXN0J1xuICAgICAgfSxcbiAgICAgICdydGwnOiB7XG4gICAgICAgICdBUlJPV19MRUZUJzogJ2luY3JlYXNlJyxcbiAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ2RlY3JlYXNlJyxcbiAgICAgICAgJ1NISUZUX0FSUk9XX0xFRlQnOiAnaW5jcmVhc2VfZmFzdCcsXG4gICAgICAgICdTSElGVF9BUlJPV19SSUdIVCc6ICdkZWNyZWFzZV9mYXN0J1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpbGl6ZXMgdGhlIHBsdWdpbiBieSByZWFkaW5nL3NldHRpbmcgYXR0cmlidXRlcywgY3JlYXRpbmcgY29sbGVjdGlvbnMgYW5kIHNldHRpbmcgdGhlIGluaXRpYWwgcG9zaXRpb24gb2YgdGhlIGhhbmRsZShzKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLmlucHV0cyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKTtcbiAgICB0aGlzLmhhbmRsZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXNsaWRlci1oYW5kbGVdJyk7XG5cbiAgICB0aGlzLiRoYW5kbGUgPSB0aGlzLmhhbmRsZXMuZXEoMCk7XG4gICAgdGhpcy4kaW5wdXQgPSB0aGlzLmlucHV0cy5sZW5ndGggPyB0aGlzLmlucHV0cy5lcSgwKSA6ICQoYCMke3RoaXMuJGhhbmRsZS5hdHRyKCdhcmlhLWNvbnRyb2xzJyl9YCk7XG4gICAgdGhpcy4kZmlsbCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtc2xpZGVyLWZpbGxdJykuY3NzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJywgMCk7XG5cbiAgICB2YXIgaXNEYmwgPSBmYWxzZSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZWQgfHwgdGhpcy4kZWxlbWVudC5oYXNDbGFzcyh0aGlzLm9wdGlvbnMuZGlzYWJsZWRDbGFzcykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmlucHV0cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuaW5wdXRzID0gJCgpLmFkZCh0aGlzLiRpbnB1dCk7XG4gICAgICB0aGlzLm9wdGlvbnMuYmluZGluZyA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX3NldEluaXRBdHRyKDApO1xuICAgIHRoaXMuX2V2ZW50cyh0aGlzLiRoYW5kbGUpO1xuXG4gICAgaWYgKHRoaXMuaGFuZGxlc1sxXSkge1xuICAgICAgdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuJGhhbmRsZTIgPSB0aGlzLmhhbmRsZXMuZXEoMSk7XG4gICAgICB0aGlzLiRpbnB1dDIgPSB0aGlzLmlucHV0cy5sZW5ndGggPiAxID8gdGhpcy5pbnB1dHMuZXEoMSkgOiAkKGAjJHt0aGlzLiRoYW5kbGUyLmF0dHIoJ2FyaWEtY29udHJvbHMnKX1gKTtcblxuICAgICAgaWYgKCF0aGlzLmlucHV0c1sxXSkge1xuICAgICAgICB0aGlzLmlucHV0cyA9IHRoaXMuaW5wdXRzLmFkZCh0aGlzLiRpbnB1dDIpO1xuICAgICAgfVxuICAgICAgaXNEYmwgPSB0cnVlO1xuXG4gICAgICB0aGlzLl9zZXRIYW5kbGVQb3ModGhpcy4kaGFuZGxlLCB0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0LCB0cnVlLCBmdW5jdGlvbigpIHtcblxuICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF90aGlzLiRoYW5kbGUyLCBfdGhpcy5vcHRpb25zLmluaXRpYWxFbmQsIHRydWUpO1xuICAgICAgfSk7XG4gICAgICAvLyB0aGlzLiRoYW5kbGUudHJpZ2dlckhhbmRsZXIoJ2NsaWNrLnpmLnNsaWRlcicpO1xuICAgICAgdGhpcy5fc2V0SW5pdEF0dHIoMSk7XG4gICAgICB0aGlzLl9ldmVudHModGhpcy4kaGFuZGxlMik7XG4gICAgfVxuXG4gICAgaWYgKCFpc0RibCkge1xuICAgICAgdGhpcy5fc2V0SGFuZGxlUG9zKHRoaXMuJGhhbmRsZSwgdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIG9mIHRoZSBzZWxlY3RlZCBoYW5kbGUgYW5kIGZpbGwgYmFyLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRobmRsIC0gdGhlIHNlbGVjdGVkIGhhbmRsZSB0byBtb3ZlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gbG9jYXRpb24gLSBmbG9hdGluZyBwb2ludCBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZhbHVlcyBvZiB0aGUgc2xpZGVyIGJhci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIG9uIGNvbXBsZXRpb24uXG4gICAqIEBmaXJlcyBTbGlkZXIjbW92ZWRcbiAgICogQGZpcmVzIFNsaWRlciNjaGFuZ2VkXG4gICAqL1xuICBfc2V0SGFuZGxlUG9zKCRobmRsLCBsb2NhdGlvbiwgbm9JbnZlcnQsIGNiKSB7XG4gICAgLy8gZG9uJ3QgbW92ZSBpZiB0aGUgc2xpZGVyIGhhcyBiZWVuIGRpc2FibGVkIHNpbmNlIGl0cyBpbml0aWFsaXphdGlvblxuICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMub3B0aW9ucy5kaXNhYmxlZENsYXNzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL21pZ2h0IG5lZWQgdG8gYWx0ZXIgdGhhdCBzbGlnaHRseSBmb3IgYmFycyB0aGF0IHdpbGwgaGF2ZSBvZGQgbnVtYmVyIHNlbGVjdGlvbnMuXG4gICAgbG9jYXRpb24gPSBwYXJzZUZsb2F0KGxvY2F0aW9uKTsvL29uIGlucHV0IGNoYW5nZSBldmVudHMsIGNvbnZlcnQgc3RyaW5nIHRvIG51bWJlci4uLmdydW1ibGUuXG5cbiAgICAvLyBwcmV2ZW50IHNsaWRlciBmcm9tIHJ1bm5pbmcgb3V0IG9mIGJvdW5kcywgaWYgdmFsdWUgZXhjZWVkcyB0aGUgbGltaXRzIHNldCB0aHJvdWdoIG9wdGlvbnMsIG92ZXJyaWRlIHRoZSB2YWx1ZSB0byBtaW4vbWF4XG4gICAgaWYgKGxvY2F0aW9uIDwgdGhpcy5vcHRpb25zLnN0YXJ0KSB7IGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLnN0YXJ0OyB9XG4gICAgZWxzZSBpZiAobG9jYXRpb24gPiB0aGlzLm9wdGlvbnMuZW5kKSB7IGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLmVuZDsgfVxuXG4gICAgdmFyIGlzRGJsID0gdGhpcy5vcHRpb25zLmRvdWJsZVNpZGVkO1xuXG4gICAgaWYgKGlzRGJsKSB7IC8vdGhpcyBibG9jayBpcyB0byBwcmV2ZW50IDIgaGFuZGxlcyBmcm9tIGNyb3NzaW5nIGVhY2hvdGhlci4gQ291bGQvc2hvdWxkIGJlIGltcHJvdmVkLlxuICAgICAgaWYgKHRoaXMuaGFuZGxlcy5pbmRleCgkaG5kbCkgPT09IDApIHtcbiAgICAgICAgdmFyIGgyVmFsID0gcGFyc2VGbG9hdCh0aGlzLiRoYW5kbGUyLmF0dHIoJ2FyaWEtdmFsdWVub3cnKSk7XG4gICAgICAgIGxvY2F0aW9uID0gbG9jYXRpb24gPj0gaDJWYWwgPyBoMlZhbCAtIHRoaXMub3B0aW9ucy5zdGVwIDogbG9jYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaDFWYWwgPSBwYXJzZUZsb2F0KHRoaXMuJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgICAgICBsb2NhdGlvbiA9IGxvY2F0aW9uIDw9IGgxVmFsID8gaDFWYWwgKyB0aGlzLm9wdGlvbnMuc3RlcCA6IGxvY2F0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vdGhpcyBpcyBmb3Igc2luZ2xlLWhhbmRsZWQgdmVydGljYWwgc2xpZGVycywgaXQgYWRqdXN0cyB0aGUgdmFsdWUgdG8gYWNjb3VudCBmb3IgdGhlIHNsaWRlciBiZWluZyBcInVwc2lkZS1kb3duXCJcbiAgICAvL2ZvciBjbGljayBhbmQgZHJhZyBldmVudHMsIGl0J3Mgd2VpcmQgZHVlIHRvIHRoZSBzY2FsZSgtMSwgMSkgY3NzIHByb3BlcnR5XG4gICAgaWYgKHRoaXMub3B0aW9ucy52ZXJ0aWNhbCAmJiAhbm9JbnZlcnQpIHtcbiAgICAgIGxvY2F0aW9uID0gdGhpcy5vcHRpb25zLmVuZCAtIGxvY2F0aW9uO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHZlcnQgPSB0aGlzLm9wdGlvbnMudmVydGljYWwsXG4gICAgICAgIGhPclcgPSB2ZXJ0ID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBsT3JUID0gdmVydCA/ICd0b3AnIDogJ2xlZnQnLFxuICAgICAgICBoYW5kbGVEaW0gPSAkaG5kbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtoT3JXXSxcbiAgICAgICAgZWxlbURpbSA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbaE9yV10sXG4gICAgICAgIC8vcGVyY2VudGFnZSBvZiBiYXIgbWluL21heCB2YWx1ZSBiYXNlZCBvbiBjbGljayBvciBkcmFnIHBvaW50XG4gICAgICAgIHBjdE9mQmFyID0gcGVyY2VudChsb2NhdGlvbiAtIHRoaXMub3B0aW9ucy5zdGFydCwgdGhpcy5vcHRpb25zLmVuZCAtIHRoaXMub3B0aW9ucy5zdGFydCkudG9GaXhlZCgyKSxcbiAgICAgICAgLy9udW1iZXIgb2YgYWN0dWFsIHBpeGVscyB0byBzaGlmdCB0aGUgaGFuZGxlLCBiYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBvYnRhaW5lZCBhYm92ZVxuICAgICAgICBweFRvTW92ZSA9IChlbGVtRGltIC0gaGFuZGxlRGltKSAqIHBjdE9mQmFyLFxuICAgICAgICAvL3BlcmNlbnRhZ2Ugb2YgYmFyIHRvIHNoaWZ0IHRoZSBoYW5kbGVcbiAgICAgICAgbW92ZW1lbnQgPSAocGVyY2VudChweFRvTW92ZSwgZWxlbURpbSkgKiAxMDApLnRvRml4ZWQodGhpcy5vcHRpb25zLmRlY2ltYWwpO1xuICAgICAgICAvL2ZpeGluZyB0aGUgZGVjaW1hbCB2YWx1ZSBmb3IgdGhlIGxvY2F0aW9uIG51bWJlciwgaXMgcGFzc2VkIHRvIG90aGVyIG1ldGhvZHMgYXMgYSBmaXhlZCBmbG9hdGluZy1wb2ludCB2YWx1ZVxuICAgICAgICBsb2NhdGlvbiA9IHBhcnNlRmxvYXQobG9jYXRpb24udG9GaXhlZCh0aGlzLm9wdGlvbnMuZGVjaW1hbCkpO1xuICAgICAgICAvLyBkZWNsYXJlIGVtcHR5IG9iamVjdCBmb3IgY3NzIGFkanVzdG1lbnRzLCBvbmx5IHVzZWQgd2l0aCAyIGhhbmRsZWQtc2xpZGVyc1xuICAgIHZhciBjc3MgPSB7fTtcblxuICAgIHRoaXMuX3NldFZhbHVlcygkaG5kbCwgbG9jYXRpb24pO1xuXG4gICAgLy8gVE9ETyB1cGRhdGUgdG8gY2FsY3VsYXRlIGJhc2VkIG9uIHZhbHVlcyBzZXQgdG8gcmVzcGVjdGl2ZSBpbnB1dHM/P1xuICAgIGlmIChpc0RibCkge1xuICAgICAgdmFyIGlzTGVmdEhuZGwgPSB0aGlzLmhhbmRsZXMuaW5kZXgoJGhuZGwpID09PSAwLFxuICAgICAgICAgIC8vZW1wdHkgdmFyaWFibGUsIHdpbGwgYmUgdXNlZCBmb3IgbWluLWhlaWdodC93aWR0aCBmb3IgZmlsbCBiYXJcbiAgICAgICAgICBkaW0sXG4gICAgICAgICAgLy9wZXJjZW50YWdlIHcvaCBvZiB0aGUgaGFuZGxlIGNvbXBhcmVkIHRvIHRoZSBzbGlkZXIgYmFyXG4gICAgICAgICAgaGFuZGxlUGN0ID0gIH5+KHBlcmNlbnQoaGFuZGxlRGltLCBlbGVtRGltKSAqIDEwMCk7XG4gICAgICAvL2lmIGxlZnQgaGFuZGxlLCB0aGUgbWF0aCBpcyBzbGlnaHRseSBkaWZmZXJlbnQgdGhhbiBpZiBpdCdzIHRoZSByaWdodCBoYW5kbGUsIGFuZCB0aGUgbGVmdC90b3AgcHJvcGVydHkgbmVlZHMgdG8gYmUgY2hhbmdlZCBmb3IgdGhlIGZpbGwgYmFyXG4gICAgICBpZiAoaXNMZWZ0SG5kbCkge1xuICAgICAgICAvL2xlZnQgb3IgdG9wIHBlcmNlbnRhZ2UgdmFsdWUgdG8gYXBwbHkgdG8gdGhlIGZpbGwgYmFyLlxuICAgICAgICBjc3NbbE9yVF0gPSBgJHttb3ZlbWVudH0lYDtcbiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIG5ldyBtaW4taGVpZ2h0L3dpZHRoIGZvciB0aGUgZmlsbCBiYXIuXG4gICAgICAgIGRpbSA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlMlswXS5zdHlsZVtsT3JUXSkgLSBtb3ZlbWVudCArIGhhbmRsZVBjdDtcbiAgICAgICAgLy90aGlzIGNhbGxiYWNrIGlzIG5lY2Vzc2FyeSB0byBwcmV2ZW50IGVycm9ycyBhbmQgYWxsb3cgdGhlIHByb3BlciBwbGFjZW1lbnQgYW5kIGluaXRpYWxpemF0aW9uIG9mIGEgMi1oYW5kbGVkIHNsaWRlclxuICAgICAgICAvL3BsdXMsIGl0IG1lYW5zIHdlIGRvbid0IGNhcmUgaWYgJ2RpbScgaXNOYU4gb24gaW5pdCwgaXQgd29uJ3QgYmUgaW4gdGhlIGZ1dHVyZS5cbiAgICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9Ly90aGlzIGlzIG9ubHkgbmVlZGVkIGZvciB0aGUgaW5pdGlhbGl6YXRpb24gb2YgMiBoYW5kbGVkIHNsaWRlcnNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vanVzdCBjYWNoaW5nIHRoZSB2YWx1ZSBvZiB0aGUgbGVmdC9ib3R0b20gaGFuZGxlJ3MgbGVmdC90b3AgcHJvcGVydHlcbiAgICAgICAgdmFyIGhhbmRsZVBvcyA9IHBhcnNlRmxvYXQodGhpcy4kaGFuZGxlWzBdLnN0eWxlW2xPclRdKTtcbiAgICAgICAgLy9jYWxjdWxhdGUgdGhlIG5ldyBtaW4taGVpZ2h0L3dpZHRoIGZvciB0aGUgZmlsbCBiYXIuIFVzZSBpc05hTiB0byBwcmV2ZW50IGZhbHNlIHBvc2l0aXZlcyBmb3IgbnVtYmVycyA8PSAwXG4gICAgICAgIC8vYmFzZWQgb24gdGhlIHBlcmNlbnRhZ2Ugb2YgbW92ZW1lbnQgb2YgdGhlIGhhbmRsZSBiZWluZyBtYW5pcHVsYXRlZCwgbGVzcyB0aGUgb3Bwb3NpbmcgaGFuZGxlJ3MgbGVmdC90b3AgcG9zaXRpb24sIHBsdXMgdGhlIHBlcmNlbnRhZ2Ugdy9oIG9mIHRoZSBoYW5kbGUgaXRzZWxmXG4gICAgICAgIGRpbSA9IG1vdmVtZW50IC0gKGlzTmFOKGhhbmRsZVBvcykgPyB0aGlzLm9wdGlvbnMuaW5pdGlhbFN0YXJ0LygodGhpcy5vcHRpb25zLmVuZC10aGlzLm9wdGlvbnMuc3RhcnQpLzEwMCkgOiBoYW5kbGVQb3MpICsgaGFuZGxlUGN0O1xuICAgICAgfVxuICAgICAgLy8gYXNzaWduIHRoZSBtaW4taGVpZ2h0L3dpZHRoIHRvIG91ciBjc3Mgb2JqZWN0XG4gICAgICBjc3NbYG1pbi0ke2hPcld9YF0gPSBgJHtkaW19JWA7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5vbmUoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhhbmRsZSBpcyBkb25lIG1vdmluZy5cbiAgICAgICAgICAgICAgICAgICAgICogQGV2ZW50IFNsaWRlciNtb3ZlZFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcignbW92ZWQuemYuc2xpZGVyJywgWyRobmRsXSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAvL2JlY2F1c2Ugd2UgZG9uJ3Qga25vdyBleGFjdGx5IGhvdyB0aGUgaGFuZGxlIHdpbGwgYmUgbW92ZWQsIGNoZWNrIHRoZSBhbW91bnQgb2YgdGltZSBpdCBzaG91bGQgdGFrZSB0byBtb3ZlLlxuICAgIHZhciBtb3ZlVGltZSA9IHRoaXMuJGVsZW1lbnQuZGF0YSgnZHJhZ2dpbmcnKSA/IDEwMDAvNjAgOiB0aGlzLm9wdGlvbnMubW92ZVRpbWU7XG5cbiAgICBGb3VuZGF0aW9uLk1vdmUobW92ZVRpbWUsICRobmRsLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vYWRqdXN0aW5nIHRoZSBsZWZ0L3RvcCBwcm9wZXJ0eSBvZiB0aGUgaGFuZGxlLCBiYXNlZCBvbiB0aGUgcGVyY2VudGFnZSBjYWxjdWxhdGVkIGFib3ZlXG4gICAgICAkaG5kbC5jc3MobE9yVCwgYCR7bW92ZW1lbnR9JWApO1xuXG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQpIHtcbiAgICAgICAgLy9pZiBzaW5nbGUtaGFuZGxlZCwgYSBzaW1wbGUgbWV0aG9kIHRvIGV4cGFuZCB0aGUgZmlsbCBiYXJcbiAgICAgICAgX3RoaXMuJGZpbGwuY3NzKGhPclcsIGAke3BjdE9mQmFyICogMTAwfSVgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vb3RoZXJ3aXNlLCB1c2UgdGhlIGNzcyBvYmplY3Qgd2UgY3JlYXRlZCBhYm92ZVxuICAgICAgICBfdGhpcy4kZmlsbC5jc3MoY3NzKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHZhbHVlIGhhcyBub3QgYmVlbiBjaGFuZ2UgZm9yIGEgZ2l2ZW4gdGltZS5cbiAgICAgKiBAZXZlbnQgU2xpZGVyI2NoYW5nZWRcbiAgICAgKi9cbiAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZWQuemYuc2xpZGVyJywgWyRobmRsXSk7XG4gICAgfSwgX3RoaXMub3B0aW9ucy5jaGFuZ2VkRGVsYXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGluaXRpYWwgYXR0cmlidXRlIGZvciB0aGUgc2xpZGVyIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gaW5kZXggb2YgdGhlIGN1cnJlbnQgaGFuZGxlL2lucHV0IHRvIHVzZS5cbiAgICovXG4gIF9zZXRJbml0QXR0cihpZHgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlucHV0cy5lcShpZHgpLmF0dHIoJ2lkJykgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnc2xpZGVyJyk7XG4gICAgdGhpcy5pbnB1dHMuZXEoaWR4KS5hdHRyKHtcbiAgICAgICdpZCc6IGlkLFxuICAgICAgJ21heCc6IHRoaXMub3B0aW9ucy5lbmQsXG4gICAgICAnbWluJzogdGhpcy5vcHRpb25zLnN0YXJ0LFxuICAgICAgJ3N0ZXAnOiB0aGlzLm9wdGlvbnMuc3RlcFxuICAgIH0pO1xuICAgIHRoaXMuaGFuZGxlcy5lcShpZHgpLmF0dHIoe1xuICAgICAgJ3JvbGUnOiAnc2xpZGVyJyxcbiAgICAgICdhcmlhLWNvbnRyb2xzJzogaWQsXG4gICAgICAnYXJpYS12YWx1ZW1heCc6IHRoaXMub3B0aW9ucy5lbmQsXG4gICAgICAnYXJpYS12YWx1ZW1pbic6IHRoaXMub3B0aW9ucy5zdGFydCxcbiAgICAgICdhcmlhLXZhbHVlbm93JzogaWR4ID09PSAwID8gdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCA6IHRoaXMub3B0aW9ucy5pbml0aWFsRW5kLFxuICAgICAgJ2FyaWEtb3JpZW50YXRpb24nOiB0aGlzLm9wdGlvbnMudmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnLFxuICAgICAgJ3RhYmluZGV4JzogMFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGlucHV0IGFuZCBgYXJpYS12YWx1ZW5vd2AgdmFsdWVzIGZvciB0aGUgc2xpZGVyIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgaGFuZGxlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsIC0gZmxvYXRpbmcgcG9pbnQgb2YgdGhlIG5ldyB2YWx1ZS5cbiAgICovXG4gIF9zZXRWYWx1ZXMoJGhhbmRsZSwgdmFsKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMub3B0aW9ucy5kb3VibGVTaWRlZCA/IHRoaXMuaGFuZGxlcy5pbmRleCgkaGFuZGxlKSA6IDA7XG4gICAgdGhpcy5pbnB1dHMuZXEoaWR4KS52YWwodmFsKTtcbiAgICAkaGFuZGxlLmF0dHIoJ2FyaWEtdmFsdWVub3cnLCB2YWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgZXZlbnRzIG9uIHRoZSBzbGlkZXIgZWxlbWVudC5cbiAgICogQ2FsY3VsYXRlcyB0aGUgbmV3IGxvY2F0aW9uIG9mIHRoZSBjdXJyZW50IGhhbmRsZS5cbiAgICogSWYgdGhlcmUgYXJlIHR3byBoYW5kbGVzIGFuZCB0aGUgYmFyIHdhcyBjbGlja2VkLCBpdCBkZXRlcm1pbmVzIHdoaWNoIGhhbmRsZSB0byBtb3ZlLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGUgLSB0aGUgYGV2ZW50YCBvYmplY3QgcGFzc2VkIGZyb20gdGhlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBjdXJyZW50IGhhbmRsZSB0byBjYWxjdWxhdGUgZm9yLCBpZiBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbCAtIGZsb2F0aW5nIHBvaW50IG51bWJlciBmb3IgdGhlIG5ldyB2YWx1ZSBvZiB0aGUgc2xpZGVyLlxuICAgKiBUT0RPIGNsZWFuIHRoaXMgdXAsIHRoZXJlJ3MgYSBsb3Qgb2YgcmVwZWF0ZWQgY29kZSBiZXR3ZWVuIHRoaXMgYW5kIHRoZSBfc2V0SGFuZGxlUG9zIGZuLlxuICAgKi9cbiAgX2hhbmRsZUV2ZW50KGUsICRoYW5kbGUsIHZhbCkge1xuICAgIHZhciB2YWx1ZSwgaGFzVmFsO1xuICAgIGlmICghdmFsKSB7Ly9jbGljayBvciBkcmFnIGV2ZW50c1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICB2ZXJ0aWNhbCA9IHRoaXMub3B0aW9ucy52ZXJ0aWNhbCxcbiAgICAgICAgICBwYXJhbSA9IHZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICAgIGRpcmVjdGlvbiA9IHZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsXG4gICAgICAgICAgZXZlbnRPZmZzZXQgPSB2ZXJ0aWNhbCA/IGUucGFnZVkgOiBlLnBhZ2VYLFxuICAgICAgICAgIGhhbGZPZkhhbmRsZSA9IHRoaXMuJGhhbmRsZVswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtwYXJhbV0gLyAyLFxuICAgICAgICAgIGJhckRpbSA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbcGFyYW1dLFxuICAgICAgICAgIHdpbmRvd1Njcm9sbCA9IHZlcnRpY2FsID8gJCh3aW5kb3cpLnNjcm9sbFRvcCgpIDogJCh3aW5kb3cpLnNjcm9sbExlZnQoKTtcblxuXG4gICAgICB2YXIgZWxlbU9mZnNldCA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClbZGlyZWN0aW9uXTtcblxuICAgICAgLy8gdG91Y2ggZXZlbnRzIGVtdWxhdGVkIGJ5IHRoZSB0b3VjaCB1dGlsIGdpdmUgcG9zaXRpb24gcmVsYXRpdmUgdG8gc2NyZWVuLCBhZGQgd2luZG93LnNjcm9sbCB0byBldmVudCBjb29yZGluYXRlcy4uLlxuICAgICAgLy8gYmVzdCB3YXkgdG8gZ3Vlc3MgdGhpcyBpcyBzaW11bGF0ZWQgaXMgaWYgY2xpZW50WSA9PSBwYWdlWVxuICAgICAgaWYgKGUuY2xpZW50WSA9PT0gZS5wYWdlWSkgeyBldmVudE9mZnNldCA9IGV2ZW50T2Zmc2V0ICsgd2luZG93U2Nyb2xsOyB9XG4gICAgICB2YXIgZXZlbnRGcm9tQmFyID0gZXZlbnRPZmZzZXQgLSBlbGVtT2Zmc2V0O1xuICAgICAgdmFyIGJhclhZO1xuICAgICAgaWYgKGV2ZW50RnJvbUJhciA8IDApIHtcbiAgICAgICAgYmFyWFkgPSAwO1xuICAgICAgfSBlbHNlIGlmIChldmVudEZyb21CYXIgPiBiYXJEaW0pIHtcbiAgICAgICAgYmFyWFkgPSBiYXJEaW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXJYWSA9IGV2ZW50RnJvbUJhcjtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXRQY3QgPSBwZXJjZW50KGJhclhZLCBiYXJEaW0pO1xuXG4gICAgICB2YWx1ZSA9ICh0aGlzLm9wdGlvbnMuZW5kIC0gdGhpcy5vcHRpb25zLnN0YXJ0KSAqIG9mZnNldFBjdCArIHRoaXMub3B0aW9ucy5zdGFydDtcblxuICAgICAgLy8gdHVybiBldmVyeXRoaW5nIGFyb3VuZCBmb3IgUlRMLCB5YXkgbWF0aCFcbiAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpICYmICF0aGlzLm9wdGlvbnMudmVydGljYWwpIHt2YWx1ZSA9IHRoaXMub3B0aW9ucy5lbmQgLSB2YWx1ZTt9XG5cbiAgICAgIHZhbHVlID0gX3RoaXMuX2FkanVzdFZhbHVlKG51bGwsIHZhbHVlKTtcbiAgICAgIC8vYm9vbGVhbiBmbGFnIGZvciB0aGUgc2V0SGFuZGxlUG9zIGZuLCBzcGVjaWZpY2FsbHkgZm9yIHZlcnRpY2FsIHNsaWRlcnNcbiAgICAgIGhhc1ZhbCA9IGZhbHNlO1xuXG4gICAgICBpZiAoISRoYW5kbGUpIHsvL2ZpZ3VyZSBvdXQgd2hpY2ggaGFuZGxlIGl0IGlzLCBwYXNzIGl0IHRvIHRoZSBuZXh0IGZ1bmN0aW9uLlxuICAgICAgICB2YXIgZmlyc3RIbmRsUG9zID0gYWJzUG9zaXRpb24odGhpcy4kaGFuZGxlLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSksXG4gICAgICAgICAgICBzZWNuZEhuZGxQb3MgPSBhYnNQb3NpdGlvbih0aGlzLiRoYW5kbGUyLCBkaXJlY3Rpb24sIGJhclhZLCBwYXJhbSk7XG4gICAgICAgICAgICAkaGFuZGxlID0gZmlyc3RIbmRsUG9zIDw9IHNlY25kSG5kbFBvcyA/IHRoaXMuJGhhbmRsZSA6IHRoaXMuJGhhbmRsZTI7XG4gICAgICB9XG5cbiAgICB9IGVsc2Ugey8vY2hhbmdlIGV2ZW50IG9uIGlucHV0XG4gICAgICB2YWx1ZSA9IHRoaXMuX2FkanVzdFZhbHVlKG51bGwsIHZhbCk7XG4gICAgICBoYXNWYWwgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3NldEhhbmRsZVBvcygkaGFuZGxlLCB2YWx1ZSwgaGFzVmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGp1c3RlcyB2YWx1ZSBmb3IgaGFuZGxlIGluIHJlZ2FyZCB0byBzdGVwIHZhbHVlLiByZXR1cm5zIGFkanVzdGVkIHZhbHVlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGhhbmRsZSAtIHRoZSBzZWxlY3RlZCBoYW5kbGUuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIGFkanVzdC4gdXNlZCBpZiAkaGFuZGxlIGlzIGZhbHN5XG4gICAqL1xuICBfYWRqdXN0VmFsdWUoJGhhbmRsZSwgdmFsdWUpIHtcbiAgICB2YXIgdmFsLFxuICAgICAgc3RlcCA9IHRoaXMub3B0aW9ucy5zdGVwLFxuICAgICAgZGl2ID0gcGFyc2VGbG9hdChzdGVwLzIpLFxuICAgICAgbGVmdCwgcHJldl92YWwsIG5leHRfdmFsO1xuICAgIGlmICghISRoYW5kbGUpIHtcbiAgICAgIHZhbCA9IHBhcnNlRmxvYXQoJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93JykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhbCA9IHZhbHVlO1xuICAgIH1cbiAgICBsZWZ0ID0gdmFsICUgc3RlcDtcbiAgICBwcmV2X3ZhbCA9IHZhbCAtIGxlZnQ7XG4gICAgbmV4dF92YWwgPSBwcmV2X3ZhbCArIHN0ZXA7XG4gICAgaWYgKGxlZnQgPT09IDApIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIHZhbCA9IHZhbCA+PSBwcmV2X3ZhbCArIGRpdiA/IG5leHRfdmFsIDogcHJldl92YWw7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgc2xpZGVyIGVsZW1lbnRzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtqUXVlcnl9ICRoYW5kbGUgLSB0aGUgY3VycmVudCBoYW5kbGUgdG8gYXBwbHkgbGlzdGVuZXJzIHRvLlxuICAgKi9cbiAgX2V2ZW50cygkaGFuZGxlKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgY3VySGFuZGxlLFxuICAgICAgICB0aW1lcjtcblxuICAgICAgdGhpcy5pbnB1dHMub2ZmKCdjaGFuZ2UuemYuc2xpZGVyJykub24oJ2NoYW5nZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciBpZHggPSBfdGhpcy5pbnB1dHMuaW5kZXgoJCh0aGlzKSk7XG4gICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBfdGhpcy5oYW5kbGVzLmVxKGlkeCksICQodGhpcykudmFsKCkpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tTZWxlY3QpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ2NsaWNrLnpmLnNsaWRlcicpLm9uKCdjbGljay56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmRhdGEoJ2RyYWdnaW5nJykpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgICBpZiAoISQoZS50YXJnZXQpLmlzKCdbZGF0YS1zbGlkZXItaGFuZGxlXScpKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy5kb3VibGVTaWRlZCkge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgX3RoaXMuJGhhbmRsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlKSB7XG4gICAgICB0aGlzLmhhbmRsZXMuYWRkVG91Y2goKTtcblxuICAgICAgdmFyICRib2R5ID0gJCgnYm9keScpO1xuICAgICAgJGhhbmRsZVxuICAgICAgICAub2ZmKCdtb3VzZWRvd24uemYuc2xpZGVyJylcbiAgICAgICAgLm9uKCdtb3VzZWRvd24uemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICRoYW5kbGUuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgX3RoaXMuJGZpbGwuYWRkQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7Ly9cbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIHRydWUpO1xuXG4gICAgICAgICAgY3VySGFuZGxlID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuXG4gICAgICAgICAgJGJvZHkub24oJ21vdXNlbW92ZS56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5faGFuZGxlRXZlbnQoZSwgY3VySGFuZGxlKTtcblxuICAgICAgICAgIH0pLm9uKCdtb3VzZXVwLnpmLnNsaWRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIF90aGlzLl9oYW5kbGVFdmVudChlLCBjdXJIYW5kbGUpO1xuXG4gICAgICAgICAgICAkaGFuZGxlLnJlbW92ZUNsYXNzKCdpcy1kcmFnZ2luZycpO1xuICAgICAgICAgICAgX3RoaXMuJGZpbGwucmVtb3ZlQ2xhc3MoJ2lzLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5kYXRhKCdkcmFnZ2luZycsIGZhbHNlKTtcblxuICAgICAgICAgICAgJGJvZHkub2ZmKCdtb3VzZW1vdmUuemYuc2xpZGVyIG1vdXNldXAuemYuc2xpZGVyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLy8gcHJldmVudCBldmVudHMgdHJpZ2dlcmVkIGJ5IHRvdWNoXG4gICAgICAub24oJ3NlbGVjdHN0YXJ0LnpmLnNsaWRlciB0b3VjaG1vdmUuemYuc2xpZGVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAkaGFuZGxlLm9mZigna2V5ZG93bi56Zi5zbGlkZXInKS5vbigna2V5ZG93bi56Zi5zbGlkZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgXyRoYW5kbGUgPSAkKHRoaXMpLFxuICAgICAgICAgIGlkeCA9IF90aGlzLm9wdGlvbnMuZG91YmxlU2lkZWQgPyBfdGhpcy5oYW5kbGVzLmluZGV4KF8kaGFuZGxlKSA6IDAsXG4gICAgICAgICAgb2xkVmFsdWUgPSBwYXJzZUZsb2F0KF90aGlzLmlucHV0cy5lcShpZHgpLnZhbCgpKSxcbiAgICAgICAgICBuZXdWYWx1ZTtcblxuICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1NsaWRlcicsIHtcbiAgICAgICAgZGVjcmVhc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgLSBfdGhpcy5vcHRpb25zLnN0ZXA7XG4gICAgICAgIH0sXG4gICAgICAgIGluY3JlYXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlICsgX3RoaXMub3B0aW9ucy5zdGVwO1xuICAgICAgICB9LFxuICAgICAgICBkZWNyZWFzZV9mYXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9sZFZhbHVlIC0gX3RoaXMub3B0aW9ucy5zdGVwICogMTA7XG4gICAgICAgIH0sXG4gICAgICAgIGluY3JlYXNlX2Zhc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2xkVmFsdWUgKyBfdGhpcy5vcHRpb25zLnN0ZXAgKiAxMDtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7IC8vIG9ubHkgc2V0IGhhbmRsZSBwb3Mgd2hlbiBldmVudCB3YXMgaGFuZGxlZCBzcGVjaWFsbHlcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMuX3NldEhhbmRsZVBvcyhfJGhhbmRsZSwgbmV3VmFsdWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8qaWYgKG5ld1ZhbHVlKSB7IC8vIGlmIHByZXNzZWQga2V5IGhhcyBzcGVjaWFsIGZ1bmN0aW9uLCB1cGRhdGUgdmFsdWVcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpcy5fc2V0SGFuZGxlUG9zKF8kaGFuZGxlLCBuZXdWYWx1ZSk7XG4gICAgICB9Ki9cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgc2xpZGVyIHBsdWdpbi5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5oYW5kbGVzLm9mZignLnpmLnNsaWRlcicpO1xuICAgIHRoaXMuaW5wdXRzLm9mZignLnpmLnNsaWRlcicpO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYuc2xpZGVyJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuU2xpZGVyLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogTWluaW11bSB2YWx1ZSBmb3IgdGhlIHNsaWRlciBzY2FsZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAwXG4gICAqL1xuICBzdGFydDogMCxcbiAgLyoqXG4gICAqIE1heGltdW0gdmFsdWUgZm9yIHRoZSBzbGlkZXIgc2NhbGUuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTAwXG4gICAqL1xuICBlbmQ6IDEwMCxcbiAgLyoqXG4gICAqIE1pbmltdW0gdmFsdWUgY2hhbmdlIHBlciBjaGFuZ2UgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgc3RlcDogMSxcbiAgLyoqXG4gICAqIFZhbHVlIGF0IHdoaWNoIHRoZSBoYW5kbGUvaW5wdXQgKihsZWZ0IGhhbmRsZS9maXJzdCBpbnB1dCkqIHNob3VsZCBiZSBzZXQgdG8gb24gaW5pdGlhbGl6YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMFxuICAgKi9cbiAgaW5pdGlhbFN0YXJ0OiAwLFxuICAvKipcbiAgICogVmFsdWUgYXQgd2hpY2ggdGhlIHJpZ2h0IGhhbmRsZS9zZWNvbmQgaW5wdXQgc2hvdWxkIGJlIHNldCB0byBvbiBpbml0aWFsaXphdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMDBcbiAgICovXG4gIGluaXRpYWxFbmQ6IDEwMCxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgaW5wdXQgdG8gYmUgbG9jYXRlZCBvdXRzaWRlIHRoZSBjb250YWluZXIgYW5kIHZpc2libGUuIFNldCB0byBieSB0aGUgSlNcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgYmluZGluZzogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gY2xpY2svdGFwIG9uIHRoZSBzbGlkZXIgYmFyIHRvIHNlbGVjdCBhIHZhbHVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrU2VsZWN0OiB0cnVlLFxuICAvKipcbiAgICogU2V0IHRvIHRydWUgYW5kIHVzZSB0aGUgYHZlcnRpY2FsYCBjbGFzcyB0byBjaGFuZ2UgYWxpZ25tZW50IHRvIHZlcnRpY2FsLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICB2ZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHVzZXIgdG8gZHJhZyB0aGUgc2xpZGVyIGhhbmRsZShzKSB0byBzZWxlY3QgYSB2YWx1ZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBkcmFnZ2FibGU6IHRydWUsXG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgc2xpZGVyIGFuZCBwcmV2ZW50cyBldmVudCBsaXN0ZW5lcnMgZnJvbSBiZWluZyBhcHBsaWVkLiBEb3VibGUgY2hlY2tlZCBieSBKUyB3aXRoIGBkaXNhYmxlZENsYXNzYC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB1c2Ugb2YgdHdvIGhhbmRsZXMuIERvdWJsZSBjaGVja2VkIGJ5IHRoZSBKUy4gQ2hhbmdlcyBzb21lIGxvZ2ljIGhhbmRsaW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBkb3VibGVTaWRlZDogZmFsc2UsXG4gIC8qKlxuICAgKiBQb3RlbnRpYWwgZnV0dXJlIGZlYXR1cmUuXG4gICAqL1xuICAvLyBzdGVwczogMTAwLFxuICAvKipcbiAgICogTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRoZSBwbHVnaW4gc2hvdWxkIGdvIHRvIGZvciBmbG9hdGluZyBwb2ludCBwcmVjaXNpb24uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMlxuICAgKi9cbiAgZGVjaW1hbDogMixcbiAgLyoqXG4gICAqIFRpbWUgZGVsYXkgZm9yIGRyYWdnZWQgZWxlbWVudHMuXG4gICAqL1xuICAvLyBkcmFnRGVsYXk6IDAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gYW5pbWF0ZSB0aGUgbW92ZW1lbnQgb2YgYSBzbGlkZXIgaGFuZGxlIGlmIHVzZXIgY2xpY2tzL3RhcHMgb24gdGhlIGJhci4gTmVlZHMgdG8gYmUgbWFudWFsbHkgc2V0IGlmIHVwZGF0aW5nIHRoZSB0cmFuc2l0aW9uIHRpbWUgaW4gdGhlIFNhc3Mgc2V0dGluZ3MuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMjAwXG4gICAqL1xuICBtb3ZlVGltZTogMjAwLC8vdXBkYXRlIHRoaXMgaWYgY2hhbmdpbmcgdGhlIHRyYW5zaXRpb24gdGltZSBpbiB0aGUgc2Fzc1xuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBkaXNhYmxlZCBzbGlkZXJzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdkaXNhYmxlZCdcbiAgICovXG4gIGRpc2FibGVkQ2xhc3M6ICdkaXNhYmxlZCcsXG4gIC8qKlxuICAgKiBXaWxsIGludmVydCB0aGUgZGVmYXVsdCBsYXlvdXQgZm9yIGEgdmVydGljYWw8c3BhbiBkYXRhLXRvb2x0aXAgdGl0bGU9XCJ3aG8gd291bGQgZG8gdGhpcz8/P1wiPiA8L3NwYW4+c2xpZGVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBpbnZlcnRWZXJ0aWNhbDogZmFsc2UsXG4gIC8qKlxuICAgKiBNaWxsaXNlY29uZHMgYmVmb3JlIHRoZSBgY2hhbmdlZC56Zi1zbGlkZXJgIGV2ZW50IGlzIHRyaWdnZXJlZCBhZnRlciB2YWx1ZSBjaGFuZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuICBjaGFuZ2VkRGVsYXk6IDUwMFxufTtcblxuZnVuY3Rpb24gcGVyY2VudChmcmFjLCBudW0pIHtcbiAgcmV0dXJuIChmcmFjIC8gbnVtKTtcbn1cbmZ1bmN0aW9uIGFic1Bvc2l0aW9uKCRoYW5kbGUsIGRpciwgY2xpY2tQb3MsIHBhcmFtKSB7XG4gIHJldHVybiBNYXRoLmFicygoJGhhbmRsZS5wb3NpdGlvbigpW2Rpcl0gKyAoJGhhbmRsZVtwYXJhbV0oKSAvIDIpKSAtIGNsaWNrUG9zKTtcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFNsaWRlciwgJ1NsaWRlcicpO1xuXG59KGpRdWVyeSk7XG5cbi8vKioqKioqKioqdGhpcyBpcyBpbiBjYXNlIHdlIGdvIHRvIHN0YXRpYywgYWJzb2x1dGUgcG9zaXRpb25zIGluc3RlYWQgb2YgZHluYW1pYyBwb3NpdGlvbmluZyoqKioqKioqXG4vLyB0aGlzLnNldFN0ZXBzKGZ1bmN0aW9uKCkge1xuLy8gICBfdGhpcy5fZXZlbnRzKCk7XG4vLyAgIHZhciBpbml0U3RhcnQgPSBfdGhpcy5vcHRpb25zLnBvc2l0aW9uc1tfdGhpcy5vcHRpb25zLmluaXRpYWxTdGFydCAtIDFdIHx8IG51bGw7XG4vLyAgIHZhciBpbml0RW5kID0gX3RoaXMub3B0aW9ucy5pbml0aWFsRW5kID8gX3RoaXMub3B0aW9ucy5wb3NpdGlvbltfdGhpcy5vcHRpb25zLmluaXRpYWxFbmQgLSAxXSA6IG51bGw7XG4vLyAgIGlmIChpbml0U3RhcnQgfHwgaW5pdEVuZCkge1xuLy8gICAgIF90aGlzLl9oYW5kbGVFdmVudChpbml0U3RhcnQsIGluaXRFbmQpO1xuLy8gICB9XG4vLyB9KTtcblxuLy8qKioqKioqKioqKnRoZSBvdGhlciBwYXJ0IG9mIGFic29sdXRlIHBvc2l0aW9ucyoqKioqKioqKioqKipcbi8vIFNsaWRlci5wcm90b3R5cGUuc2V0U3RlcHMgPSBmdW5jdGlvbihjYikge1xuLy8gICB2YXIgcG9zQ2hhbmdlID0gdGhpcy4kZWxlbWVudC5vdXRlcldpZHRoKCkgLyB0aGlzLm9wdGlvbnMuc3RlcHM7XG4vLyAgIHZhciBjb3VudGVyID0gMFxuLy8gICB3aGlsZShjb3VudGVyIDwgdGhpcy5vcHRpb25zLnN0ZXBzKSB7XG4vLyAgICAgaWYgKGNvdW50ZXIpIHtcbi8vICAgICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbnMucHVzaCh0aGlzLm9wdGlvbnMucG9zaXRpb25zW2NvdW50ZXIgLSAxXSArIHBvc0NoYW5nZSk7XG4vLyAgICAgfSBlbHNlIHtcbi8vICAgICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbnMucHVzaChwb3NDaGFuZ2UpO1xuLy8gICAgIH1cbi8vICAgICBjb3VudGVyKys7XG4vLyAgIH1cbi8vICAgY2IoKTtcbi8vIH07XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogU3RpY2t5IG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5zdGlja3lcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICovXG5cbmNsYXNzIFN0aWNreSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgc3RpY2t5IHRoaW5nLlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2Ugc3RpY2t5LlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB3aGVuIGNyZWF0aW5nIHRoZSBlbGVtZW50IHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFN0aWNreS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnU3RpY2t5Jyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHN0aWNreSBlbGVtZW50IGJ5IGFkZGluZyBjbGFzc2VzLCBnZXR0aW5nL3NldHRpbmcgZGltZW5zaW9ucywgYnJlYWtwb2ludHMgYW5kIGF0dHJpYnV0ZXNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdGlja3ktY29udGFpbmVyXScpLFxuICAgICAgICBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnc3RpY2t5JyksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmICghJHBhcmVudC5sZW5ndGgpIHtcbiAgICAgIHRoaXMud2FzV3JhcHBlZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuJGNvbnRhaW5lciA9ICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICQodGhpcy5vcHRpb25zLmNvbnRhaW5lcikud3JhcElubmVyKHRoaXMuJGVsZW1lbnQpO1xuICAgIHRoaXMuJGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3MpXG4gICAgICAgICAgICAgICAgIC5hdHRyKHsnZGF0YS1yZXNpemUnOiBpZH0pO1xuXG4gICAgdGhpcy5zY3JvbGxDb3VudCA9IHRoaXMub3B0aW9ucy5jaGVja0V2ZXJ5O1xuICAgIHRoaXMuaXNTdHVjayA9IGZhbHNlO1xuICAgICQod2luZG93KS5vbmUoJ2xvYWQuemYuc3RpY2t5JywgZnVuY3Rpb24oKXtcbiAgICAgIC8vV2UgY2FsY3VsYXRlIHRoZSBjb250YWluZXIgaGVpZ2h0IHRvIGhhdmUgY29ycmVjdCB2YWx1ZXMgZm9yIGFuY2hvciBwb2ludHMgb2Zmc2V0IGNhbGN1bGF0aW9uLlxuICAgICAgX3RoaXMuY29udGFpbmVySGVpZ2h0ID0gX3RoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIiA/IDAgOiBfdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICBfdGhpcy4kY29udGFpbmVyLmNzcygnaGVpZ2h0JywgX3RoaXMuY29udGFpbmVySGVpZ2h0KTtcbiAgICAgIF90aGlzLmVsZW1IZWlnaHQgPSBfdGhpcy5jb250YWluZXJIZWlnaHQ7XG4gICAgICBpZihfdGhpcy5vcHRpb25zLmFuY2hvciAhPT0gJycpe1xuICAgICAgICBfdGhpcy4kYW5jaG9yID0gJCgnIycgKyBfdGhpcy5vcHRpb25zLmFuY2hvcik7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgX3RoaXMuX3BhcnNlUG9pbnRzKCk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbigpe1xuICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIF90aGlzLl9ldmVudHMoaWQuc3BsaXQoJy0nKS5yZXZlcnNlKCkuam9pbignLScpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtdWx0aXBsZSBlbGVtZW50cyBhcyBhbmNob3JzLCBjYWxjdWxhdGVzIHRoZSB0b3AgYW5kIGJvdHRvbSBwaXhlbCB2YWx1ZXMgdGhlIHN0aWNreSB0aGluZyBzaG91bGQgc3RpY2sgYW5kIHVuc3RpY2sgb24uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhcnNlUG9pbnRzKCkge1xuICAgIHZhciB0b3AgPSB0aGlzLm9wdGlvbnMudG9wQW5jaG9yID09IFwiXCIgPyAxIDogdGhpcy5vcHRpb25zLnRvcEFuY2hvcixcbiAgICAgICAgYnRtID0gdGhpcy5vcHRpb25zLmJ0bUFuY2hvcj09IFwiXCIgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IDogdGhpcy5vcHRpb25zLmJ0bUFuY2hvcixcbiAgICAgICAgcHRzID0gW3RvcCwgYnRtXSxcbiAgICAgICAgYnJlYWtzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHB0cy5sZW5ndGg7IGkgPCBsZW4gJiYgcHRzW2ldOyBpKyspIHtcbiAgICAgIHZhciBwdDtcbiAgICAgIGlmICh0eXBlb2YgcHRzW2ldID09PSAnbnVtYmVyJykge1xuICAgICAgICBwdCA9IHB0c1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwbGFjZSA9IHB0c1tpXS5zcGxpdCgnOicpLFxuICAgICAgICAgICAgYW5jaG9yID0gJChgIyR7cGxhY2VbMF19YCk7XG5cbiAgICAgICAgcHQgPSBhbmNob3Iub2Zmc2V0KCkudG9wO1xuICAgICAgICBpZiAocGxhY2VbMV0gJiYgcGxhY2VbMV0udG9Mb3dlckNhc2UoKSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICBwdCArPSBhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha3NbaV0gPSBwdDtcbiAgICB9XG5cblxuICAgIHRoaXMucG9pbnRzID0gYnJlYWtzO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgc2Nyb2xsaW5nIGVsZW1lbnQuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHBzdWVkby1yYW5kb20gaWQgZm9yIHVuaXF1ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIuXG4gICAqL1xuICBfZXZlbnRzKGlkKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVyID0gYHNjcm9sbC56Zi4ke2lkfWA7XG4gICAgaWYgKHRoaXMuaXNPbikgeyByZXR1cm47IH1cbiAgICBpZiAodGhpcy5jYW5TdGljaykge1xuICAgICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgICAgICQod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpXG4gICAgICAgICAgICAgICAub24oc2Nyb2xsTGlzdGVuZXIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnNjcm9sbENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQgPSBfdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuX3NldFNpemVzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQtLTtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZigncmVzaXplbWUuemYudHJpZ2dlcicpXG4gICAgICAgICAgICAgICAgIC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUsIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9jYWxjKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmNhblN0aWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5pc09uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZXZlbnRzKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMuaXNPbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9wYXVzZUxpc3RlbmVycyhzY3JvbGxMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgaGFuZGxlcnMgZm9yIHNjcm9sbCBhbmQgY2hhbmdlIGV2ZW50cyBvbiBhbmNob3IuXG4gICAqIEBmaXJlcyBTdGlja3kjcGF1c2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IHNjcm9sbExpc3RlbmVyIC0gdW5pcXVlLCBuYW1lc3BhY2VkIHNjcm9sbCBsaXN0ZW5lciBhdHRhY2hlZCB0byBgd2luZG93YFxuICAgKi9cbiAgX3BhdXNlTGlzdGVuZXJzKHNjcm9sbExpc3RlbmVyKSB7XG4gICAgdGhpcy5pc09uID0gZmFsc2U7XG4gICAgJCh3aW5kb3cpLm9mZihzY3JvbGxMaXN0ZW5lcik7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaXMgcGF1c2VkIGR1ZSB0byByZXNpemUgZXZlbnQgc2hyaW5raW5nIHRoZSB2aWV3LlxuICAgICAqIEBldmVudCBTdGlja3kjcGF1c2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3BhdXNlLnpmLnN0aWNreScpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBldmVyeSBgc2Nyb2xsYCBldmVudCBhbmQgb24gYF9pbml0YFxuICAgKiBmaXJlcyBmdW5jdGlvbnMgYmFzZWQgb24gYm9vbGVhbnMgYW5kIGNhY2hlZCB2YWx1ZXNcbiAgICogQHBhcmFtIHtCb29sZWFufSBjaGVja1NpemVzIC0gdHJ1ZSBpZiBwbHVnaW4gc2hvdWxkIHJlY2FsY3VsYXRlIHNpemVzIGFuZCBicmVha3BvaW50cy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjcm9sbCAtIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHBhc3NlZCBmcm9tIHNjcm9sbCBldmVudCBjYiBmdW5jdGlvbi4gSWYgbm90IHBhc3NlZCwgZGVmYXVsdHMgdG8gYHdpbmRvdy5wYWdlWU9mZnNldGAuXG4gICAqL1xuICBfY2FsYyhjaGVja1NpemVzLCBzY3JvbGwpIHtcbiAgICBpZiAoY2hlY2tTaXplcykgeyB0aGlzLl9zZXRTaXplcygpOyB9XG5cbiAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgIGlmICh0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghc2Nyb2xsKSB7IHNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDsgfVxuXG4gICAgaWYgKHNjcm9sbCA+PSB0aGlzLnRvcFBvaW50KSB7XG4gICAgICBpZiAoc2Nyb2xsIDw9IHRoaXMuYm90dG9tUG9pbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgICB0aGlzLl9zZXRTdGlja3koKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreShmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhdXNlcyB0aGUgJGVsZW1lbnQgdG8gYmVjb21lIHN0dWNrLlxuICAgKiBBZGRzIGBwb3NpdGlvbjogZml4ZWQ7YCwgYW5kIGhlbHBlciBjbGFzc2VzLlxuICAgKiBAZmlyZXMgU3RpY2t5I3N0dWNrdG9cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0U3RpY2t5KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHN0aWNrVG8gPSB0aGlzLm9wdGlvbnMuc3RpY2tUbyxcbiAgICAgICAgbXJnbiA9IHN0aWNrVG8gPT09ICd0b3AnID8gJ21hcmdpblRvcCcgOiAnbWFyZ2luQm90dG9tJyxcbiAgICAgICAgbm90U3R1Y2tUbyA9IHN0aWNrVG8gPT09ICd0b3AnID8gJ2JvdHRvbScgOiAndG9wJyxcbiAgICAgICAgY3NzID0ge307XG5cbiAgICBjc3NbbXJnbl0gPSBgJHt0aGlzLm9wdGlvbnNbbXJnbl19ZW1gO1xuICAgIGNzc1tzdGlja1RvXSA9IDA7XG4gICAgY3NzW25vdFN0dWNrVG9dID0gJ2F1dG8nO1xuICAgIGNzc1snbGVmdCddID0gdGhpcy4kY29udGFpbmVyLm9mZnNldCgpLmxlZnQgKyBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLiRjb250YWluZXJbMF0pW1wicGFkZGluZy1sZWZ0XCJdLCAxMCk7XG4gICAgdGhpcy5pc1N0dWNrID0gdHJ1ZTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGBpcy1hbmNob3JlZCBpcy1hdC0ke25vdFN0dWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGBpcy1zdHVjayBpcy1hdC0ke3N0aWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmNzcyhjc3MpXG4gICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSAkZWxlbWVudCBoYXMgYmVjb21lIGBwb3NpdGlvbjogZml4ZWQ7YFxuICAgICAgICAgICAgICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYuc3R1Y2t0bzp0b3BgXG4gICAgICAgICAgICAgICAgICAqIEBldmVudCBTdGlja3kjc3R1Y2t0b1xuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgLnRyaWdnZXIoYHN0aWNreS56Zi5zdHVja3RvOiR7c3RpY2tUb31gKTtcbiAgICB0aGlzLiRlbGVtZW50Lm9uKFwidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIE1TVHJhbnNpdGlvbkVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9zZXRTaXplcygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhdXNlcyB0aGUgJGVsZW1lbnQgdG8gYmVjb21lIHVuc3R1Y2suXG4gICAqIFJlbW92ZXMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEFkZHMgb3RoZXIgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNUb3AgLSB0ZWxscyB0aGUgZnVuY3Rpb24gaWYgdGhlICRlbGVtZW50IHNob3VsZCBhbmNob3IgdG8gdGhlIHRvcCBvciBib3R0b20gb2YgaXRzICRhbmNob3IgZWxlbWVudC5cbiAgICogQGZpcmVzIFN0aWNreSN1bnN0dWNrZnJvbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbW92ZVN0aWNreShpc1RvcCkge1xuICAgIHZhciBzdGlja1RvID0gdGhpcy5vcHRpb25zLnN0aWNrVG8sXG4gICAgICAgIHN0aWNrVG9Ub3AgPSBzdGlja1RvID09PSAndG9wJyxcbiAgICAgICAgY3NzID0ge30sXG4gICAgICAgIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLnBvaW50c1swXSA6IHRoaXMuYW5jaG9ySGVpZ2h0KSAtIHRoaXMuZWxlbUhlaWdodCxcbiAgICAgICAgbXJnbiA9IHN0aWNrVG9Ub3AgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUb1RvcCA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgICAgIHRvcE9yQm90dG9tID0gaXNUb3AgPyAndG9wJyA6ICdib3R0b20nO1xuXG4gICAgY3NzW21yZ25dID0gMDtcblxuICAgIGNzc1snYm90dG9tJ10gPSAnYXV0byc7XG4gICAgaWYoaXNUb3ApIHtcbiAgICAgIGNzc1sndG9wJ10gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NbJ3RvcCddID0gYW5jaG9yUHQ7XG4gICAgfVxuXG4gICAgY3NzWydsZWZ0J10gPSAnJztcbiAgICB0aGlzLmlzU3R1Y2sgPSBmYWxzZTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGBpcy1zdHVjayBpcy1hdC0ke3N0aWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGBpcy1hbmNob3JlZCBpcy1hdC0ke3RvcE9yQm90dG9tfWApXG4gICAgICAgICAgICAgICAgIC5jc3MoY3NzKVxuICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgJGVsZW1lbnQgaGFzIGJlY29tZSBhbmNob3JlZC5cbiAgICAgICAgICAgICAgICAgICogTmFtZXNwYWNlZCB0byBgdG9wYCBvciBgYm90dG9tYCwgZS5nLiBgc3RpY2t5LnpmLnVuc3R1Y2tmcm9tOmJvdHRvbWBcbiAgICAgICAgICAgICAgICAgICogQGV2ZW50IFN0aWNreSN1bnN0dWNrZnJvbVxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgLnRyaWdnZXIoYHN0aWNreS56Zi51bnN0dWNrZnJvbToke3RvcE9yQm90dG9tfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlICRlbGVtZW50IGFuZCAkY29udGFpbmVyIHNpemVzIGZvciBwbHVnaW4uXG4gICAqIENhbGxzIGBfc2V0QnJlYWtQb2ludHNgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGZpcmUgb24gY29tcGxldGlvbiBvZiBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRTaXplcyhjYikge1xuICAgIHRoaXMuY2FuU3RpY2sgPSBGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuc3RpY2t5T24pO1xuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gICAgfVxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIG5ld0VsZW1XaWR0aCA9IHRoaXMuJGNvbnRhaW5lclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCxcbiAgICAgICAgY29tcCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuJGNvbnRhaW5lclswXSksXG4gICAgICAgIHBkbmcgPSBwYXJzZUludChjb21wWydwYWRkaW5nLXJpZ2h0J10sIDEwKTtcblxuICAgIGlmICh0aGlzLiRhbmNob3IgJiYgdGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgdGhpcy5hbmNob3JIZWlnaHQgPSB0aGlzLiRhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZVBvaW50cygpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgICdtYXgtd2lkdGgnOiBgJHtuZXdFbGVtV2lkdGggLSBwZG5nfXB4YFxuICAgIH0pO1xuXG4gICAgdmFyIG5ld0NvbnRhaW5lckhlaWdodCA9IHRoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IHx8IHRoaXMuY29udGFpbmVySGVpZ2h0O1xuICAgIGlmICh0aGlzLiRlbGVtZW50LmNzcyhcImRpc3BsYXlcIikgPT0gXCJub25lXCIpIHtcbiAgICAgIG5ld0NvbnRhaW5lckhlaWdodCA9IDA7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVySGVpZ2h0ID0gbmV3Q29udGFpbmVySGVpZ2h0O1xuICAgIHRoaXMuJGNvbnRhaW5lci5jc3Moe1xuICAgICAgaGVpZ2h0OiBuZXdDb250YWluZXJIZWlnaHRcbiAgICB9KTtcbiAgICB0aGlzLmVsZW1IZWlnaHQgPSBuZXdDb250YWluZXJIZWlnaHQ7XG5cbiAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmNzcyh7XCJsZWZ0XCI6dGhpcy4kY29udGFpbmVyLm9mZnNldCgpLmxlZnQgKyBwYXJzZUludChjb21wWydwYWRkaW5nLWxlZnQnXSwgMTApfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1hdC1ib3R0b20nKSkge1xuICAgICAgICB2YXIgYW5jaG9yUHQgPSAodGhpcy5wb2ludHMgPyB0aGlzLnBvaW50c1sxXSAtIHRoaXMuJGNvbnRhaW5lci5vZmZzZXQoKS50b3AgOiB0aGlzLmFuY2hvckhlaWdodCkgLSB0aGlzLmVsZW1IZWlnaHQ7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKCd0b3AnLCBhbmNob3JQdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0QnJlYWtQb2ludHMobmV3Q29udGFpbmVySGVpZ2h0LCBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHVwcGVyIGFuZCBsb3dlciBicmVha3BvaW50cyBmb3IgdGhlIGVsZW1lbnQgdG8gYmVjb21lIHN0aWNreS91bnN0aWNreS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGVsZW1IZWlnaHQgLSBweCB2YWx1ZSBmb3Igc3RpY2t5LiRlbGVtZW50IGhlaWdodCwgY2FsY3VsYXRlZCBieSBgX3NldFNpemVzYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gY29tcGxldGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRCcmVha1BvaW50cyhlbGVtSGVpZ2h0LCBjYikge1xuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gICAgICBlbHNlIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgfVxuICAgIHZhciBtVG9wID0gZW1DYWxjKHRoaXMub3B0aW9ucy5tYXJnaW5Ub3ApLFxuICAgICAgICBtQnRtID0gZW1DYWxjKHRoaXMub3B0aW9ucy5tYXJnaW5Cb3R0b20pLFxuICAgICAgICB0b3BQb2ludCA9IHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMF0gOiB0aGlzLiRhbmNob3Iub2Zmc2V0KCkudG9wLFxuICAgICAgICBib3R0b21Qb2ludCA9IHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gOiB0b3BQb2ludCArIHRoaXMuYW5jaG9ySGVpZ2h0LFxuICAgICAgICAvLyB0b3BQb2ludCA9IHRoaXMuJGFuY2hvci5vZmZzZXQoKS50b3AgfHwgdGhpcy5wb2ludHNbMF0sXG4gICAgICAgIC8vIGJvdHRvbVBvaW50ID0gdG9wUG9pbnQgKyB0aGlzLmFuY2hvckhlaWdodCB8fCB0aGlzLnBvaW50c1sxXSxcbiAgICAgICAgd2luSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdGlja1RvID09PSAndG9wJykge1xuICAgICAgdG9wUG9pbnQgLT0gbVRvcDtcbiAgICAgIGJvdHRvbVBvaW50IC09IChlbGVtSGVpZ2h0ICsgbVRvcCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc3RpY2tUbyA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHRvcFBvaW50IC09ICh3aW5IZWlnaHQgLSAoZWxlbUhlaWdodCArIG1CdG0pKTtcbiAgICAgIGJvdHRvbVBvaW50IC09ICh3aW5IZWlnaHQgLSBtQnRtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy90aGlzIHdvdWxkIGJlIHRoZSBzdGlja1RvOiBib3RoIG9wdGlvbi4uLiB0cmlja3lcbiAgICB9XG5cbiAgICB0aGlzLnRvcFBvaW50ID0gdG9wUG9pbnQ7XG4gICAgdGhpcy5ib3R0b21Qb2ludCA9IGJvdHRvbVBvaW50O1xuXG4gICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgeyBjYigpOyB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGN1cnJlbnQgc3RpY2t5IGVsZW1lbnQuXG4gICAqIFJlc2V0cyB0aGUgZWxlbWVudCB0byB0aGUgdG9wIHBvc2l0aW9uIGZpcnN0LlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycywgSlMtYWRkZWQgY3NzIHByb3BlcnRpZXMgYW5kIGNsYXNzZXMsIGFuZCB1bndyYXBzIHRoZSAkZWxlbWVudCBpZiB0aGUgSlMgYWRkZWQgdGhlICRjb250YWluZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG5cbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGAke3RoaXMub3B0aW9ucy5zdGlja3lDbGFzc30gaXMtYW5jaG9yZWQgaXMtYXQtdG9wYClcbiAgICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgICAgICAgICAgICB0b3A6ICcnLFxuICAgICAgICAgICAgICAgICAgIGJvdHRvbTogJycsXG4gICAgICAgICAgICAgICAgICAgJ21heC13aWR0aCc6ICcnXG4gICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgIC5vZmYoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKTtcbiAgICBpZiAodGhpcy4kYW5jaG9yICYmIHRoaXMuJGFuY2hvci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGFuY2hvci5vZmYoJ2NoYW5nZS56Zi5zdGlja3knKTtcbiAgICB9XG4gICAgJCh3aW5kb3cpLm9mZih0aGlzLnNjcm9sbExpc3RlbmVyKTtcblxuICAgIGlmICh0aGlzLndhc1dyYXBwZWQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudW53cmFwKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGNvbnRhaW5lci5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuY29udGFpbmVyQ2xhc3MpXG4gICAgICAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnJ1xuICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5TdGlja3kuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBDdXN0b21pemFibGUgY29udGFpbmVyIHRlbXBsYXRlLiBBZGQgeW91ciBvd24gY2xhc3NlcyBmb3Igc3R5bGluZyBhbmQgc2l6aW5nLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICcmbHQ7ZGl2IGRhdGEtc3RpY2t5LWNvbnRhaW5lciBjbGFzcz1cInNtYWxsLTYgY29sdW1uc1wiJmd0OyZsdDsvZGl2Jmd0OydcbiAgICovXG4gIGNvbnRhaW5lcjogJzxkaXYgZGF0YS1zdGlja3ktY29udGFpbmVyPjwvZGl2PicsXG4gIC8qKlxuICAgKiBMb2NhdGlvbiBpbiB0aGUgdmlldyB0aGUgZWxlbWVudCBzdGlja3MgdG8uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3RvcCdcbiAgICovXG4gIHN0aWNrVG86ICd0b3AnLFxuICAvKipcbiAgICogSWYgYW5jaG9yZWQgdG8gYSBzaW5nbGUgZWxlbWVudCwgdGhlIGlkIG9mIHRoYXQgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZXhhbXBsZUlkJ1xuICAgKi9cbiAgYW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIHRvcCBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2V4YW1wbGVJZDp0b3AnXG4gICAqL1xuICB0b3BBbmNob3I6ICcnLFxuICAvKipcbiAgICogSWYgdXNpbmcgbW9yZSB0aGFuIG9uZSBlbGVtZW50IGFzIGFuY2hvciBwb2ludHMsIHRoZSBpZCBvZiB0aGUgYm90dG9tIGFuY2hvci5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnZXhhbXBsZUlkOmJvdHRvbSdcbiAgICovXG4gIGJ0bUFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBNYXJnaW4sIGluIGBlbWAncyB0byBhcHBseSB0byB0aGUgdG9wIG9mIHRoZSBlbGVtZW50IHdoZW4gaXQgYmVjb21lcyBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMVxuICAgKi9cbiAgbWFyZ2luVG9wOiAxLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIGJvdHRvbSBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDFcbiAgICovXG4gIG1hcmdpbkJvdHRvbTogMSxcbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgc3RyaW5nIHRoYXQgaXMgdGhlIG1pbmltdW0gc2NyZWVuIHNpemUgYW4gZWxlbWVudCBzaG91bGQgYmVjb21lIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnbWVkaXVtJ1xuICAgKi9cbiAgc3RpY2t5T246ICdtZWRpdW0nLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBzdGlja3kgZWxlbWVudCwgYW5kIHJlbW92ZWQgb24gZGVzdHJ1Y3Rpb24uIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreWAuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3N0aWNreSdcbiAgICovXG4gIHN0aWNreUNsYXNzOiAnc3RpY2t5JyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGNvbnRhaW5lci4gRm91bmRhdGlvbiBkZWZhdWx0cyB0byBgc3RpY2t5LWNvbnRhaW5lcmAuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3N0aWNreS1jb250YWluZXInXG4gICAqL1xuICBjb250YWluZXJDbGFzczogJ3N0aWNreS1jb250YWluZXInLFxuICAvKipcbiAgICogTnVtYmVyIG9mIHNjcm9sbCBldmVudHMgYmV0d2VlbiB0aGUgcGx1Z2luJ3MgcmVjYWxjdWxhdGluZyBzdGlja3kgcG9pbnRzLiBTZXR0aW5nIGl0IHRvIGAwYCB3aWxsIGNhdXNlIGl0IHRvIHJlY2FsYyBldmVyeSBzY3JvbGwgZXZlbnQsIHNldHRpbmcgaXQgdG8gYC0xYCB3aWxsIHByZXZlbnQgcmVjYWxjIG9uIHNjcm9sbC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSA1MFxuICAgKi9cbiAgY2hlY2tFdmVyeTogLTFcbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSBlbSB2YWx1ZXNcbiAqIEBwYXJhbSBOdW1iZXIge2VtfSAtIG51bWJlciBvZiBlbSdzIHRvIGNhbGN1bGF0ZSBpbnRvIHBpeGVsc1xuICovXG5mdW5jdGlvbiBlbUNhbGMoZW0pIHtcbiAgcmV0dXJuIHBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHksIG51bGwpLmZvbnRTaXplLCAxMCkgKiBlbTtcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFN0aWNreSwgJ1N0aWNreScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogVGFicyBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udGFic1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyIGlmIHRhYnMgY29udGFpbiBpbWFnZXNcbiAqL1xuXG5jbGFzcyBUYWJzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGFicy5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBUYWJzI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byB0YWJzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFRhYnMuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdUYWJzJyk7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWdpc3RlcignVGFicycsIHtcbiAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICdBUlJPV19SSUdIVCc6ICduZXh0JyxcbiAgICAgICdBUlJPV19VUCc6ICdwcmV2aW91cycsXG4gICAgICAnQVJST1dfRE9XTic6ICduZXh0JyxcbiAgICAgICdBUlJPV19MRUZUJzogJ3ByZXZpb3VzJ1xuICAgICAgLy8gJ1RBQic6ICduZXh0JyxcbiAgICAgIC8vICdTSElGVF9UQUInOiAncHJldmlvdXMnXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIHRhYnMgYnkgc2hvd2luZyBhbmQgZm9jdXNpbmcgKGlmIGF1dG9Gb2N1cz10cnVlKSB0aGUgcHJlc2V0IGFjdGl2ZSB0YWIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kdGFiVGl0bGVzID0gdGhpcy4kZWxlbWVudC5maW5kKGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfWApO1xuICAgIHRoaXMuJHRhYkNvbnRlbnQgPSAkKGBbZGF0YS10YWJzLWNvbnRlbnQ9XCIke3RoaXMuJGVsZW1lbnRbMF0uaWR9XCJdYCk7XG5cbiAgICB0aGlzLiR0YWJUaXRsZXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAkbGluayA9ICRlbGVtLmZpbmQoJ2EnKSxcbiAgICAgICAgICBpc0FjdGl2ZSA9ICRlbGVtLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSxcbiAgICAgICAgICBoYXNoID0gJGxpbmtbMF0uaGFzaC5zbGljZSgxKSxcbiAgICAgICAgICBsaW5rSWQgPSAkbGlua1swXS5pZCA/ICRsaW5rWzBdLmlkIDogYCR7aGFzaH0tbGFiZWxgLFxuICAgICAgICAgICR0YWJDb250ZW50ID0gJChgIyR7aGFzaH1gKTtcblxuICAgICAgJGVsZW0uYXR0cih7J3JvbGUnOiAncHJlc2VudGF0aW9uJ30pO1xuXG4gICAgICAkbGluay5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndGFiJyxcbiAgICAgICAgJ2FyaWEtY29udHJvbHMnOiBoYXNoLFxuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGlzQWN0aXZlLFxuICAgICAgICAnaWQnOiBsaW5rSWRcbiAgICAgIH0pO1xuXG4gICAgICAkdGFiQ29udGVudC5hdHRyKHtcbiAgICAgICAgJ3JvbGUnOiAndGFicGFuZWwnLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWRcbiAgICAgIH0pO1xuXG4gICAgICBpZihpc0FjdGl2ZSAmJiBfdGhpcy5vcHRpb25zLmF1dG9Gb2N1cyl7XG4gICAgICAgICRsaW5rLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpIHtcbiAgICAgIHZhciAkaW1hZ2VzID0gdGhpcy4kdGFiQ29udGVudC5maW5kKCdpbWcnKTtcblxuICAgICAgaWYgKCRpbWFnZXMubGVuZ3RoKSB7XG4gICAgICAgIEZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQoJGltYWdlcywgdGhpcy5fc2V0SGVpZ2h0LmJpbmQodGhpcykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2V0SGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLl9hZGRLZXlIYW5kbGVyKCk7XG4gICAgdGhpcy5fYWRkQ2xpY2tIYW5kbGVyKCk7XG4gICAgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyID0gbnVsbDtcbiAgICBcbiAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIgPSB0aGlzLl9zZXRIZWlnaHQuYmluZCh0aGlzKTtcbiAgICAgIFxuICAgICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGNsaWNrIGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIHRhYnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQ2xpY2tIYW5kbGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub2ZmKCdjbGljay56Zi50YWJzJylcbiAgICAgIC5vbignY2xpY2suemYudGFicycsIGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfWAsIGZ1bmN0aW9uKGUpe1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdpcy1hY3RpdmUnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCQodGhpcykpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBrZXlib2FyZCBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZEtleUhhbmRsZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgJGZpcnN0VGFiID0gX3RoaXMuJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3Qtb2YtdHlwZScpO1xuICAgIHZhciAkbGFzdFRhYiA9IF90aGlzLiRlbGVtZW50LmZpbmQoJ2xpOmxhc3Qtb2YtdHlwZScpO1xuXG4gICAgdGhpcy4kdGFiVGl0bGVzLm9mZigna2V5ZG93bi56Zi50YWJzJykub24oJ2tleWRvd24uemYudGFicycsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYgKGUud2hpY2ggPT09IDkpIHJldHVybjtcbiAgICAgIFxuXG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAkZWxlbWVudHMgPSAkZWxlbWVudC5wYXJlbnQoJ3VsJykuY2hpbGRyZW4oJ2xpJyksXG4gICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLndyYXBPbktleXMpIHtcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9IGkgPT09IDAgPyAkZWxlbWVudHMubGFzdCgpIDogJGVsZW1lbnRzLmVxKGktMSk7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSBpID09PSAkZWxlbWVudHMubGVuZ3RoIC0xID8gJGVsZW1lbnRzLmZpcnN0KCkgOiAkZWxlbWVudHMuZXEoaSsxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWF4KDAsIGktMSkpO1xuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkrMSwgJGVsZW1lbnRzLmxlbmd0aC0xKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdUYWJzJywge1xuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkZWxlbWVudC5maW5kKCdbcm9sZT1cInRhYlwiXScpLmZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkZWxlbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpO1xuICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJHByZXZFbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJG5leHRFbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCRuZXh0RWxlbWVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgdGFiIGAkdGFyZ2V0Q29udGVudGAgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gVGFiIHRvIG9wZW4uXG4gICAqIEBmaXJlcyBUYWJzI2NoYW5nZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIF9oYW5kbGVUYWJDaGFuZ2UoJHRhcmdldCkge1xuICAgIHZhciAkdGFiTGluayA9ICR0YXJnZXQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKSxcbiAgICAgICAgaGFzaCA9ICR0YWJMaW5rWzBdLmhhc2gsXG4gICAgICAgICR0YXJnZXRDb250ZW50ID0gdGhpcy4kdGFiQ29udGVudC5maW5kKGhhc2gpLFxuICAgICAgICAkb2xkVGFiID0gdGhpcy4kZWxlbWVudC5cbiAgICAgICAgICBmaW5kKGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfS5pcy1hY3RpdmVgKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgICAgICAuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKHsgJ2FyaWEtc2VsZWN0ZWQnOiAnZmFsc2UnIH0pO1xuXG4gICAgJChgIyR7JG9sZFRhYi5hdHRyKCdhcmlhLWNvbnRyb2xzJyl9YClcbiAgICAgIC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgIC5hdHRyKHsgJ2FyaWEtaGlkZGVuJzogJ3RydWUnIH0pO1xuXG4gICAgJHRhcmdldC5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XG5cbiAgICAkdGFiTGluay5hdHRyKHsnYXJpYS1zZWxlY3RlZCc6ICd0cnVlJ30pO1xuXG4gICAgJHRhcmdldENvbnRlbnRcbiAgICAgIC5hZGRDbGFzcygnaXMtYWN0aXZlJylcbiAgICAgIC5hdHRyKHsnYXJpYS1oaWRkZW4nOiAnZmFsc2UnfSk7XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIHN1Y2Nlc3NmdWxseSBjaGFuZ2VkIHRhYnMuXG4gICAgICogQGV2ZW50IFRhYnMjY2hhbmdlXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdjaGFuZ2UuemYudGFicycsIFskdGFyZ2V0XSk7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIG1ldGhvZCBmb3Igc2VsZWN0aW5nIGEgY29udGVudCBwYW5lIHRvIGRpc3BsYXkuXG4gICAqIEBwYXJhbSB7alF1ZXJ5IHwgU3RyaW5nfSBlbGVtIC0galF1ZXJ5IG9iamVjdCBvciBzdHJpbmcgb2YgdGhlIGlkIG9mIHRoZSBwYW5lIHRvIGRpc3BsYXkuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgc2VsZWN0VGFiKGVsZW0pIHtcbiAgICB2YXIgaWRTdHI7XG5cbiAgICBpZiAodHlwZW9mIGVsZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICBpZFN0ciA9IGVsZW1bMF0uaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkU3RyID0gZWxlbTtcbiAgICB9XG5cbiAgICBpZiAoaWRTdHIuaW5kZXhPZignIycpIDwgMCkge1xuICAgICAgaWRTdHIgPSBgIyR7aWRTdHJ9YDtcbiAgICB9XG5cbiAgICB2YXIgJHRhcmdldCA9IHRoaXMuJHRhYlRpdGxlcy5maW5kKGBbaHJlZj1cIiR7aWRTdHJ9XCJdYCkucGFyZW50KGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfWApO1xuXG4gICAgdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCR0YXJnZXQpO1xuICB9O1xuICAvKipcbiAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIGVhY2ggcGFuZWwgdG8gdGhlIGhlaWdodCBvZiB0aGUgdGFsbGVzdCBwYW5lbC5cbiAgICogSWYgZW5hYmxlZCBpbiBvcHRpb25zLCBnZXRzIGNhbGxlZCBvbiBtZWRpYSBxdWVyeSBjaGFuZ2UuXG4gICAqIElmIGxvYWRpbmcgY29udGVudCB2aWEgZXh0ZXJuYWwgc291cmNlLCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IG9yIHdpdGggX3JlZmxvdy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0SGVpZ2h0KCkge1xuICAgIHZhciBtYXggPSAwO1xuICAgIHRoaXMuJHRhYkNvbnRlbnRcbiAgICAgIC5maW5kKGAuJHt0aGlzLm9wdGlvbnMucGFuZWxDbGFzc31gKVxuICAgICAgLmNzcygnaGVpZ2h0JywgJycpXG4gICAgICAuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHBhbmVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGlzQWN0aXZlID0gcGFuZWwuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgICBwYW5lbC5jc3Moeyd2aXNpYmlsaXR5JzogJ2hpZGRlbicsICdkaXNwbGF5JzogJ2Jsb2NrJ30pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRlbXAgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgcGFuZWwuY3NzKHtcbiAgICAgICAgICAgICd2aXNpYmlsaXR5JzogJycsXG4gICAgICAgICAgICAnZGlzcGxheSc6ICcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXggPSB0ZW1wID4gbWF4ID8gdGVtcCA6IG1heDtcbiAgICAgIH0pXG4gICAgICAuY3NzKCdoZWlnaHQnLCBgJHttYXh9cHhgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBhbiB0YWJzLlxuICAgKiBAZmlyZXMgVGFicyNkZXN0cm95ZWRcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmZpbmQoYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9YClcbiAgICAgIC5vZmYoJy56Zi50YWJzJykuaGlkZSgpLmVuZCgpXG4gICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLnBhbmVsQ2xhc3N9YClcbiAgICAgIC5oaWRlKCk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICBpZiAodGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICQod2luZG93KS5vZmYoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblRhYnMuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBhY3RpdmUgcGFuZSBvbiBsb2FkIGlmIHNldCB0byB0cnVlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3Mga2V5Ym9hcmQgaW5wdXQgdG8gJ3dyYXAnIGFyb3VuZCB0aGUgdGFiIGxpbmtzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIHdyYXBPbktleXM6IHRydWUsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdGFiIGNvbnRlbnQgcGFuZXMgdG8gbWF0Y2ggaGVpZ2h0cyBpZiBzZXQgdG8gdHJ1ZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgbWF0Y2hIZWlnaHQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIGBsaWAncyBpbiB0YWIgbGluayBsaXN0LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0YWJzLXRpdGxlJ1xuICAgKi9cbiAgbGlua0NsYXNzOiAndGFicy10aXRsZScsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGNvbnRlbnQgY29udGFpbmVycy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndGFicy1wYW5lbCdcbiAgICovXG4gIHBhbmVsQ2xhc3M6ICd0YWJzLXBhbmVsJ1xufTtcblxuZnVuY3Rpb24gY2hlY2tDbGFzcygkZWxlbSl7XG4gIHJldHVybiAkZWxlbS5oYXNDbGFzcygnaXMtYWN0aXZlJyk7XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihUYWJzLCAnVGFicycpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogVG9nZ2xlciBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udG9nZ2xlclxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqL1xuXG5jbGFzcyBUb2dnbGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgVG9nZ2xlci5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBUb2dnbGVyI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBUb2dnbGVyLmRlZmF1bHRzLCBlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG4gICAgdGhpcy5jbGFzc05hbWUgPSAnJztcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1RvZ2dsZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgVG9nZ2xlciBwbHVnaW4gYnkgcGFyc2luZyB0aGUgdG9nZ2xlIGNsYXNzIGZyb20gZGF0YS10b2dnbGVyLCBvciBhbmltYXRpb24gY2xhc3NlcyBmcm9tIGRhdGEtYW5pbWF0ZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaW5wdXQ7XG4gICAgLy8gUGFyc2UgYW5pbWF0aW9uIGNsYXNzZXMgaWYgdGhleSB3ZXJlIHNldFxuICAgIGlmICh0aGlzLm9wdGlvbnMuYW5pbWF0ZSkge1xuICAgICAgaW5wdXQgPSB0aGlzLm9wdGlvbnMuYW5pbWF0ZS5zcGxpdCgnICcpO1xuXG4gICAgICB0aGlzLmFuaW1hdGlvbkluID0gaW5wdXRbMF07XG4gICAgICB0aGlzLmFuaW1hdGlvbk91dCA9IGlucHV0WzFdIHx8IG51bGw7XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgcGFyc2UgdG9nZ2xlIGNsYXNzXG4gICAgZWxzZSB7XG4gICAgICBpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZGF0YSgndG9nZ2xlcicpO1xuICAgICAgLy8gQWxsb3cgZm9yIGEgLiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzdHJpbmdcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gaW5wdXRbMF0gPT09ICcuJyA/IGlucHV0LnNsaWNlKDEpIDogaW5wdXQ7XG4gICAgfVxuXG4gICAgLy8gQWRkIEFSSUEgYXR0cmlidXRlcyB0byB0cmlnZ2Vyc1xuICAgIHZhciBpZCA9IHRoaXMuJGVsZW1lbnRbMF0uaWQ7XG4gICAgJChgW2RhdGEtb3Blbj1cIiR7aWR9XCJdLCBbZGF0YS1jbG9zZT1cIiR7aWR9XCJdLCBbZGF0YS10b2dnbGU9XCIke2lkfVwiXWApXG4gICAgICAuYXR0cignYXJpYS1jb250cm9scycsIGlkKTtcbiAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGhpZGRlbiwgYWRkIGFyaWEtaGlkZGVuXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdGhpcy4kZWxlbWVudC5pcygnOmhpZGRlbicpID8gZmFsc2UgOiB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIHRoZSB0b2dnbGUgdHJpZ2dlci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCd0b2dnbGUuemYudHJpZ2dlcicpLm9uKCd0b2dnbGUuemYudHJpZ2dlcicsIHRoaXMudG9nZ2xlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHRhcmdldCBjbGFzcyBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQuIEFuIGV2ZW50IGlzIGZpcmVkIGZyb20gdGhlIG9yaWdpbmFsIHRyaWdnZXIgZGVwZW5kaW5nIG9uIGlmIHRoZSByZXN1bHRhbnQgc3RhdGUgd2FzIFwib25cIiBvciBcIm9mZlwiLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFRvZ2dsZXIjb25cbiAgICogQGZpcmVzIFRvZ2dsZXIjb2ZmXG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgdGhpc1sgdGhpcy5vcHRpb25zLmFuaW1hdGUgPyAnX3RvZ2dsZUFuaW1hdGUnIDogJ190b2dnbGVDbGFzcyddKCk7XG4gIH1cblxuICBfdG9nZ2xlQ2xhc3MoKSB7XG4gICAgdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLmNsYXNzTmFtZSk7XG5cbiAgICB2YXIgaXNPbiA9IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3ModGhpcy5jbGFzc05hbWUpO1xuICAgIGlmIChpc09uKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGlmIHRoZSB0YXJnZXQgZWxlbWVudCBoYXMgdGhlIGNsYXNzIGFmdGVyIGEgdG9nZ2xlLlxuICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb25cbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvbi56Zi50b2dnbGVyJyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgZG9lcyBub3QgaGF2ZSB0aGUgY2xhc3MgYWZ0ZXIgYSB0b2dnbGUuXG4gICAgICAgKiBAZXZlbnQgVG9nZ2xlciNvZmZcbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvZmYuemYudG9nZ2xlcicpO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZUFSSUEoaXNPbik7XG4gIH1cblxuICBfdG9nZ2xlQW5pbWF0ZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaXMoJzpoaWRkZW4nKSkge1xuICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKHRoaXMuJGVsZW1lbnQsIHRoaXMuYW5pbWF0aW9uSW4sIGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5fdXBkYXRlQVJJQSh0cnVlKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdvbi56Zi50b2dnbGVyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsIHRoaXMuYW5pbWF0aW9uT3V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFSSUEoZmFsc2UpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ29mZi56Zi50b2dnbGVyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfdXBkYXRlQVJJQShpc09uKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPbiA/IHRydWUgOiBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIFRvZ2dsZXIgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRvZ2dsZXInKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVG9nZ2xlci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRlbGxzIHRoZSBwbHVnaW4gaWYgdGhlIGVsZW1lbnQgc2hvdWxkIGFuaW1hdGVkIHdoZW4gdG9nZ2xlZC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgYW5pbWF0ZTogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihUb2dnbGVyLCAnVG9nZ2xlcicpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogVG9vbHRpcCBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24udG9vbHRpcFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5ib3hcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICovXG5cbmNsYXNzIFRvb2x0aXAge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIFRvb2x0aXAuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgVG9vbHRpcCNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhdHRhY2ggYSB0b29sdGlwIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9iamVjdCB0byBleHRlbmQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVG9vbHRpcC5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1Rvb2x0aXAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgdG9vbHRpcCBieSBzZXR0aW5nIHRoZSBjcmVhdGluZyB0aGUgdGlwIGVsZW1lbnQsIGFkZGluZyBpdCdzIHRleHQsIHNldHRpbmcgcHJpdmF0ZSB2YXJpYWJsZXMgYW5kIHNldHRpbmcgYXR0cmlidXRlcyBvbiB0aGUgYW5jaG9yLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGVsZW1JZCA9IHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScpIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ3Rvb2x0aXAnKTtcblxuICAgIHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgfHwgdGhpcy5fZ2V0UG9zaXRpb25DbGFzcyh0aGlzLiRlbGVtZW50KTtcbiAgICB0aGlzLm9wdGlvbnMudGlwVGV4dCA9IHRoaXMub3B0aW9ucy50aXBUZXh0IHx8IHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnKTtcbiAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlID8gJCh0aGlzLm9wdGlvbnMudGVtcGxhdGUpIDogdGhpcy5fYnVpbGRUZW1wbGF0ZShlbGVtSWQpO1xuXG4gICAgdGhpcy50ZW1wbGF0ZS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KVxuICAgICAgICAudGV4dCh0aGlzLm9wdGlvbnMudGlwVGV4dClcbiAgICAgICAgLmhpZGUoKTtcblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAndGl0bGUnOiAnJyxcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogZWxlbUlkLFxuICAgICAgJ2RhdGEteWV0aS1ib3gnOiBlbGVtSWQsXG4gICAgICAnZGF0YS10b2dnbGUnOiBlbGVtSWQsXG4gICAgICAnZGF0YS1yZXNpemUnOiBlbGVtSWRcbiAgICB9KS5hZGRDbGFzcyh0aGlzLm9wdGlvbnMudHJpZ2dlckNsYXNzKTtcblxuICAgIC8vaGVscGVyIHZhcmlhYmxlcyB0byB0cmFjayBtb3ZlbWVudCBvbiBjb2xsaXNpb25zXG4gICAgdGhpcy51c2VkUG9zaXRpb25zID0gW107XG4gICAgdGhpcy5jb3VudGVyID0gNDtcbiAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogR3JhYnMgdGhlIGN1cnJlbnQgcG9zaXRpb25pbmcgY2xhc3MsIGlmIHByZXNlbnQsIGFuZCByZXR1cm5zIHRoZSB2YWx1ZSBvciBhbiBlbXB0eSBzdHJpbmcuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZ2V0UG9zaXRpb25DbGFzcyhlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSB7IHJldHVybiAnJzsgfVxuICAgIC8vIHZhciBwb3NpdGlvbiA9IGVsZW1lbnQuYXR0cignY2xhc3MnKS5tYXRjaCgvdG9wfGxlZnR8cmlnaHQvZyk7XG4gICAgdmFyIHBvc2l0aW9uID0gZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goL1xcYih0b3B8bGVmdHxyaWdodClcXGIvZyk7XG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPyBwb3NpdGlvblswXSA6ICcnO1xuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfTtcbiAgLyoqXG4gICAqIGJ1aWxkcyB0aGUgdG9vbHRpcCBlbGVtZW50LCBhZGRzIGF0dHJpYnV0ZXMsIGFuZCByZXR1cm5zIHRoZSB0ZW1wbGF0ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9idWlsZFRlbXBsYXRlKGlkKSB7XG4gICAgdmFyIHRlbXBsYXRlQ2xhc3NlcyA9IChgJHt0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzfSAke3RoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzfSAke3RoaXMub3B0aW9ucy50ZW1wbGF0ZUNsYXNzZXN9YCkudHJpbSgpO1xuICAgIHZhciAkdGVtcGxhdGUgPSAgJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcyh0ZW1wbGF0ZUNsYXNzZXMpLmF0dHIoe1xuICAgICAgJ3JvbGUnOiAndG9vbHRpcCcsXG4gICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgJ2RhdGEtaXMtYWN0aXZlJzogZmFsc2UsXG4gICAgICAnZGF0YS1pcy1mb2N1cyc6IGZhbHNlLFxuICAgICAgJ2lkJzogaWRcbiAgICB9KTtcbiAgICByZXR1cm4gJHRlbXBsYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgaWYgYSBjb2xsaXNpb24gZXZlbnQgaXMgZGV0ZWN0ZWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIHBvc2l0aW9uaW5nIGNsYXNzIHRvIHRyeVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlcG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICB0aGlzLnVzZWRQb3NpdGlvbnMucHVzaChwb3NpdGlvbiA/IHBvc2l0aW9uIDogJ2JvdHRvbScpO1xuXG4gICAgLy9kZWZhdWx0LCB0cnkgc3dpdGNoaW5nIHRvIG9wcG9zaXRlIHNpZGVcbiAgICBpZiAoIXBvc2l0aW9uICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZigndG9wJykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5hZGRDbGFzcygndG9wJyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdyaWdodCcpIDwgMCkpIHtcbiAgICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdyaWdodCcpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdsZWZ0JykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbilcbiAgICAgICAgICAuYWRkQ2xhc3MoJ2xlZnQnKTtcbiAgICB9XG5cbiAgICAvL2lmIGRlZmF1bHQgY2hhbmdlIGRpZG4ndCB3b3JrLCB0cnkgYm90dG9tIG9yIGxlZnQgZmlyc3RcbiAgICBlbHNlIGlmICghcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygnbGVmdCcpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignbGVmdCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSkge1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIC8vaWYgbm90aGluZyBjbGVhcmVkLCBzZXQgdG8gYm90dG9tXG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgdGhpcy5jbGFzc0NoYW5nZWQgPSB0cnVlO1xuICAgIHRoaXMuY291bnRlci0tO1xuICB9XG5cbiAgLyoqXG4gICAqIHNldHMgdGhlIHBvc2l0aW9uIGNsYXNzIG9mIGFuIGVsZW1lbnQgYW5kIHJlY3Vyc2l2ZWx5IGNhbGxzIGl0c2VsZiB1bnRpbCB0aGVyZSBhcmUgbm8gbW9yZSBwb3NzaWJsZSBwb3NpdGlvbnMgdG8gYXR0ZW1wdCwgb3IgdGhlIHRvb2x0aXAgZWxlbWVudCBpcyBubyBsb25nZXIgY29sbGlkaW5nLlxuICAgKiBpZiB0aGUgdG9vbHRpcCBpcyBsYXJnZXIgdGhhbiB0aGUgc2NyZWVuIHdpZHRoLCBkZWZhdWx0IHRvIGZ1bGwgd2lkdGggLSBhbnkgdXNlciBzZWxlY3RlZCBtYXJnaW5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRQb3NpdGlvbigpIHtcbiAgICB2YXIgcG9zaXRpb24gPSB0aGlzLl9nZXRQb3NpdGlvbkNsYXNzKHRoaXMudGVtcGxhdGUpLFxuICAgICAgICAkdGlwRGltcyA9IEZvdW5kYXRpb24uQm94LkdldERpbWVuc2lvbnModGhpcy50ZW1wbGF0ZSksXG4gICAgICAgICRhbmNob3JEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRlbGVtZW50KSxcbiAgICAgICAgZGlyZWN0aW9uID0gKHBvc2l0aW9uID09PSAnbGVmdCcgPyAnbGVmdCcgOiAoKHBvc2l0aW9uID09PSAncmlnaHQnKSA/ICdsZWZ0JyA6ICd0b3AnKSksXG4gICAgICAgIHBhcmFtID0gKGRpcmVjdGlvbiA9PT0gJ3RvcCcpID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBvZmZzZXQgPSAocGFyYW0gPT09ICdoZWlnaHQnKSA/IHRoaXMub3B0aW9ucy52T2Zmc2V0IDogdGhpcy5vcHRpb25zLmhPZmZzZXQsXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmICgoJHRpcERpbXMud2lkdGggPj0gJHRpcERpbXMud2luZG93RGltcy53aWR0aCkgfHwgKCF0aGlzLmNvdW50ZXIgJiYgIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy50ZW1wbGF0ZSkpKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlLm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMudGVtcGxhdGUsIHRoaXMuJGVsZW1lbnQsICdjZW50ZXIgYm90dG9tJywgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0LCB0cnVlKSkuY3NzKHtcbiAgICAgIC8vIHRoaXMuJGVsZW1lbnQub2Zmc2V0KEZvdW5kYXRpb24uR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLCB0aGlzLiRlbGVtZW50LCAnY2VudGVyIGJvdHRvbScsIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCwgdHJ1ZSkpLmNzcyh7XG4gICAgICAgICd3aWR0aCc6ICRhbmNob3JEaW1zLndpbmRvd0RpbXMud2lkdGggLSAodGhpcy5vcHRpb25zLmhPZmZzZXQgKiAyKSxcbiAgICAgICAgJ2hlaWdodCc6ICdhdXRvJ1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy50ZW1wbGF0ZS5vZmZzZXQoRm91bmRhdGlvbi5Cb3guR2V0T2Zmc2V0cyh0aGlzLnRlbXBsYXRlLCB0aGlzLiRlbGVtZW50LCdjZW50ZXIgJyArIChwb3NpdGlvbiB8fCAnYm90dG9tJyksIHRoaXMub3B0aW9ucy52T2Zmc2V0LCB0aGlzLm9wdGlvbnMuaE9mZnNldCkpO1xuXG4gICAgd2hpbGUoIUZvdW5kYXRpb24uQm94LkltTm90VG91Y2hpbmdZb3UodGhpcy50ZW1wbGF0ZSkgJiYgdGhpcy5jb3VudGVyKSB7XG4gICAgICB0aGlzLl9yZXBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIHJldmVhbHMgdGhlIHRvb2x0aXAsIGFuZCBmaXJlcyBhbiBldmVudCB0byBjbG9zZSBhbnkgb3RoZXIgb3BlbiB0b29sdGlwcyBvbiB0aGUgcGFnZVxuICAgKiBAZmlyZXMgVG9vbHRpcCNjbG9zZW1lXG4gICAqIEBmaXJlcyBUb29sdGlwI3Nob3dcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzaG93KCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd09uICE9PSAnYWxsJyAmJiAhRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLnNob3dPbikpIHtcbiAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ1RoZSBzY3JlZW4gaXMgdG9vIHNtYWxsIHRvIGRpc3BsYXkgdGhpcyB0b29sdGlwJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLnRlbXBsYXRlLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKS5zaG93KCk7XG4gICAgdGhpcy5fc2V0UG9zaXRpb24oKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHRvIGNsb3NlIGFsbCBvdGhlciBvcGVuIHRvb2x0aXBzIG9uIHRoZSBwYWdlXG4gICAgICogQGV2ZW50IENsb3NlbWUjdG9vbHRpcFxuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VtZS56Zi50b29sdGlwJywgdGhpcy50ZW1wbGF0ZS5hdHRyKCdpZCcpKTtcblxuXG4gICAgdGhpcy50ZW1wbGF0ZS5hdHRyKHtcbiAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IHRydWUsXG4gICAgICAnYXJpYS1oaWRkZW4nOiBmYWxzZVxuICAgIH0pO1xuICAgIF90aGlzLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnRlbXBsYXRlKTtcbiAgICB0aGlzLnRlbXBsYXRlLnN0b3AoKS5oaWRlKCkuY3NzKCd2aXNpYmlsaXR5JywgJycpLmZhZGVJbih0aGlzLm9wdGlvbnMuZmFkZUluRHVyYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgLy9tYXliZSBkbyBzdHVmZj9cbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB0b29sdGlwIGlzIHNob3duXG4gICAgICogQGV2ZW50IFRvb2x0aXAjc2hvd1xuICAgICAqL1xuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignc2hvdy56Zi50b29sdGlwJyk7XG4gIH1cblxuICAvKipcbiAgICogSGlkZXMgdGhlIGN1cnJlbnQgdG9vbHRpcCwgYW5kIHJlc2V0cyB0aGUgcG9zaXRpb25pbmcgY2xhc3MgaWYgaXQgd2FzIGNoYW5nZWQgZHVlIHRvIGNvbGxpc2lvblxuICAgKiBAZmlyZXMgVG9vbHRpcCNoaWRlXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgaGlkZSgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnaGlkaW5nJywgdGhpcy4kZWxlbWVudC5kYXRhKCd5ZXRpLWJveCcpKTtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMudGVtcGxhdGUuc3RvcCgpLmF0dHIoe1xuICAgICAgJ2FyaWEtaGlkZGVuJzogdHJ1ZSxcbiAgICAgICdkYXRhLWlzLWFjdGl2ZSc6IGZhbHNlXG4gICAgfSkuZmFkZU91dCh0aGlzLm9wdGlvbnMuZmFkZU91dER1cmF0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICBpZiAoX3RoaXMuY2xhc3NDaGFuZ2VkKSB7XG4gICAgICAgIF90aGlzLnRlbXBsYXRlXG4gICAgICAgICAgICAgLnJlbW92ZUNsYXNzKF90aGlzLl9nZXRQb3NpdGlvbkNsYXNzKF90aGlzLnRlbXBsYXRlKSlcbiAgICAgICAgICAgICAuYWRkQ2xhc3MoX3RoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzKTtcblxuICAgICAgIF90aGlzLnVzZWRQb3NpdGlvbnMgPSBbXTtcbiAgICAgICBfdGhpcy5jb3VudGVyID0gNDtcbiAgICAgICBfdGhpcy5jbGFzc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBmaXJlcyB3aGVuIHRoZSB0b29sdGlwIGlzIGhpZGRlblxuICAgICAqIEBldmVudCBUb29sdGlwI2hpZGVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYudG9vbHRpcCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIGFkZHMgZXZlbnQgbGlzdGVuZXJzIGZvciB0aGUgdG9vbHRpcCBhbmQgaXRzIGFuY2hvclxuICAgKiBUT0RPIGNvbWJpbmUgc29tZSBvZiB0aGUgbGlzdGVuZXJzIGxpa2UgZm9jdXMgYW5kIG1vdXNlZW50ZXIsIGV0Yy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgJHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZTtcbiAgICB2YXIgaXNGb2N1cyA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZGlzYWJsZUhvdmVyKSB7XG5cbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignbW91c2VlbnRlci56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoIV90aGlzLmlzQWN0aXZlKSB7XG4gICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfdGhpcy5zaG93KCk7XG4gICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VsZWF2ZS56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgIGlmICghaXNGb2N1cyB8fCAoX3RoaXMuaXNDbGljayAmJiAhX3RoaXMub3B0aW9ucy5jbGlja09wZW4pKSB7XG4gICAgICAgICAgX3RoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsaWNrT3Blbikge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbignbW91c2Vkb3duLnpmLnRvb2x0aXAnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmIChfdGhpcy5pc0NsaWNrKSB7XG4gICAgICAgICAgLy9fdGhpcy5oaWRlKCk7XG4gICAgICAgICAgLy8gX3RoaXMuaXNDbGljayA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmlzQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgIGlmICgoX3RoaXMub3B0aW9ucy5kaXNhYmxlSG92ZXIgfHwgIV90aGlzLiRlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykpICYmICFfdGhpcy5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgX3RoaXMuc2hvdygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ21vdXNlZG93bi56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICBfdGhpcy5pc0NsaWNrID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVGb3JUb3VjaCkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uKCd0YXAuemYudG9vbHRpcCB0b3VjaGVuZC56Zi50b29sdGlwJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBfdGhpcy5pc0FjdGl2ZSA/IF90aGlzLmhpZGUoKSA6IF90aGlzLnNob3coKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgLy8gJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgIC8vICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5oaWRlLmJpbmQodGhpcylcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5oaWRlLmJpbmQodGhpcylcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vbignZm9jdXMuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaXNGb2N1cyA9IHRydWU7XG4gICAgICAgIGlmIChfdGhpcy5pc0NsaWNrKSB7XG4gICAgICAgICAgLy8gSWYgd2UncmUgbm90IHNob3dpbmcgb3BlbiBvbiBjbGlja3MsIHdlIG5lZWQgdG8gcHJldGVuZCBhIGNsaWNrLWxhdW5jaGVkIGZvY3VzIGlzbid0XG4gICAgICAgICAgLy8gYSByZWFsIGZvY3VzLCBvdGhlcndpc2Ugb24gaG92ZXIgYW5kIGNvbWUgYmFjayB3ZSBnZXQgYmFkIGJlaGF2aW9yXG4gICAgICAgICAgaWYoIV90aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSB7IGlzRm9jdXMgPSBmYWxzZTsgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIC5vbignZm9jdXNvdXQuemYudG9vbHRpcCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaXNGb2N1cyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc0NsaWNrID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhpZGUoKTtcbiAgICAgIH0pXG5cbiAgICAgIC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoX3RoaXMuaXNBY3RpdmUpIHtcbiAgICAgICAgICBfdGhpcy5fc2V0UG9zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogYWRkcyBhIHRvZ2dsZSBtZXRob2QsIGluIGFkZGl0aW9uIHRvIHRoZSBzdGF0aWMgc2hvdygpICYgaGlkZSgpIGZ1bmN0aW9uc1xuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiB0b29sdGlwLCByZW1vdmVzIHRlbXBsYXRlIGVsZW1lbnQgZnJvbSB0aGUgdmlldy5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cigndGl0bGUnLCB0aGlzLnRlbXBsYXRlLnRleHQoKSlcbiAgICAgICAgICAgICAgICAgLm9mZignLnpmLnRyaWdnZXIgLnpmLnRvb3RpcCcpXG4gICAgICAgICAgICAgICAgLy8gIC5yZW1vdmVDbGFzcygnaGFzLXRpcCcpXG4gICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcbiAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEteWV0aS1ib3gnKVxuICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS10b2dnbGUnKVxuICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1yZXNpemUnKTtcblxuICAgIHRoaXMudGVtcGxhdGUucmVtb3ZlKCk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVG9vbHRpcC5kZWZhdWx0cyA9IHtcbiAgZGlzYWJsZUZvclRvdWNoOiBmYWxzZSxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCBiZWZvcmUgYSB0b29sdGlwIHNob3VsZCBvcGVuIG9uIGhvdmVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDIwMFxuICAgKi9cbiAgaG92ZXJEZWxheTogMjAwLFxuICAvKipcbiAgICogVGltZSwgaW4gbXMsIGEgdG9vbHRpcCBzaG91bGQgdGFrZSB0byBmYWRlIGludG8gdmlldy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxNTBcbiAgICovXG4gIGZhZGVJbkR1cmF0aW9uOiAxNTAsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgYSB0b29sdGlwIHNob3VsZCB0YWtlIHRvIGZhZGUgb3V0IG9mIHZpZXcuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgMTUwXG4gICAqL1xuICBmYWRlT3V0RHVyYXRpb246IDE1MCxcbiAgLyoqXG4gICAqIERpc2FibGVzIGhvdmVyIGV2ZW50cyBmcm9tIG9wZW5pbmcgdGhlIHRvb2x0aXAgaWYgc2V0IHRvIHRydWVcbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZGlzYWJsZUhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGFkZHRpb25hbCBjbGFzc2VzIHRvIGFwcGx5IHRvIHRoZSB0b29sdGlwIHRlbXBsYXRlIG9uIGluaXQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ215LWNvb2wtdGlwLWNsYXNzJ1xuICAgKi9cbiAgdGVtcGxhdGVDbGFzc2VzOiAnJyxcbiAgLyoqXG4gICAqIE5vbi1vcHRpb25hbCBjbGFzcyBhZGRlZCB0byB0b29sdGlwIHRlbXBsYXRlcy4gRm91bmRhdGlvbiBkZWZhdWx0IGlzICd0b29sdGlwJy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAndG9vbHRpcCdcbiAgICovXG4gIHRvb2x0aXBDbGFzczogJ3Rvb2x0aXAnLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgdG9vbHRpcCBhbmNob3IgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnaGFzLXRpcCdcbiAgICovXG4gIHRyaWdnZXJDbGFzczogJ2hhcy10aXAnLFxuICAvKipcbiAgICogTWluaW11bSBicmVha3BvaW50IHNpemUgYXQgd2hpY2ggdG8gb3BlbiB0aGUgdG9vbHRpcC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnc21hbGwnXG4gICAqL1xuICBzaG93T246ICdzbWFsbCcsXG4gIC8qKlxuICAgKiBDdXN0b20gdGVtcGxhdGUgdG8gYmUgdXNlZCB0byBnZW5lcmF0ZSBtYXJrdXAgZm9yIHRvb2x0aXAuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJyZsdDtkaXYgY2xhc3M9XCJ0b29sdGlwXCImZ3Q7Jmx0Oy9kaXYmZ3Q7J1xuICAgKi9cbiAgdGVtcGxhdGU6ICcnLFxuICAvKipcbiAgICogVGV4dCBkaXNwbGF5ZWQgaW4gdGhlIHRvb2x0aXAgdGVtcGxhdGUgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnU29tZSBjb29sIHNwYWNlIGZhY3QgaGVyZS4nXG4gICAqL1xuICB0aXBUZXh0OiAnJyxcbiAgdG91Y2hDbG9zZVRleHQ6ICdUYXAgdG8gY2xvc2UuJyxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgdG9vbHRpcCB0byByZW1haW4gb3BlbiBpZiB0cmlnZ2VyZWQgd2l0aCBhIGNsaWNrIG9yIHRvdWNoIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrT3BlbjogdHJ1ZSxcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgcG9zaXRpb25pbmcgY2xhc3Nlcywgc2V0IGJ5IHRoZSBKU1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b3AnXG4gICAqL1xuICBwb3NpdGlvbkNsYXNzOiAnJyxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgcHVzaCBhd2F5IGZyb20gdGhlIGFuY2hvciBvbiB0aGUgWSBheGlzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDEwXG4gICAqL1xuICB2T2Zmc2V0OiAxMCxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSB0ZW1wbGF0ZSBzaG91bGQgcHVzaCBhd2F5IGZyb20gdGhlIGFuY2hvciBvbiB0aGUgWCBheGlzLCBpZiBhbGlnbmVkIHRvIGEgc2lkZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxMlxuICAgKi9cbiAgaE9mZnNldDogMTJcbn07XG5cbi8qKlxuICogVE9ETyB1dGlsaXplIHJlc2l6ZSBldmVudCB0cmlnZ2VyXG4gKi9cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFRvb2x0aXAsICdUb29sdGlwJyk7XG5cbn0oalF1ZXJ5KTsiLCIndXNlIHN0cmljdCc7XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbigpIHtcbiAgaWYgKCFEYXRlLm5vdylcbiAgICBEYXRlLm5vdyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH07XG5cbiAgdmFyIHZlbmRvcnMgPSBbJ3dlYmtpdCcsICdtb3onXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTsgKytpKSB7XG4gICAgICB2YXIgdnAgPSB2ZW5kb3JzW2ldO1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2cCsnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAod2luZG93W3ZwKydDYW5jZWxBbmltYXRpb25GcmFtZSddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB3aW5kb3dbdnArJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddKTtcbiAgfVxuICBpZiAoL2lQKGFkfGhvbmV8b2QpLipPUyA2Ly50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KVxuICAgIHx8ICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8ICF3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUpIHtcbiAgICB2YXIgbGFzdFRpbWUgPSAwO1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdmFyIG5leHRUaW1lID0gTWF0aC5tYXgobGFzdFRpbWUgKyAxNiwgbm93KTtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGNhbGxiYWNrKGxhc3RUaW1lID0gbmV4dFRpbWUpOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0VGltZSAtIG5vdyk7XG4gICAgfTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjbGVhclRpbWVvdXQ7XG4gIH1cbn0pKCk7XG5cbnZhciBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG52YXIgYWN0aXZlQ2xhc3NlcyA9IFsnbXVpLWVudGVyLWFjdGl2ZScsICdtdWktbGVhdmUtYWN0aXZlJ107XG5cbi8vIEZpbmQgdGhlIHJpZ2h0IFwidHJhbnNpdGlvbmVuZFwiIGV2ZW50IGZvciB0aGlzIGJyb3dzZXJcbnZhciBlbmRFdmVudCA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHRyYW5zaXRpb25zID0ge1xuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICdNb3pUcmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICdPVHJhbnNpdGlvbic6ICdvdHJhbnNpdGlvbmVuZCdcbiAgfVxuICB2YXIgZWxlbSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBlbGVtLnN0eWxlW3RdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25zW3RdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSkoKTtcblxuZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gIGVsZW1lbnQgPSAkKGVsZW1lbnQpLmVxKDApO1xuXG4gIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICBpZiAoZW5kRXZlbnQgPT09IG51bGwpIHtcbiAgICBpc0luID8gZWxlbWVudC5zaG93KCkgOiBlbGVtZW50LmhpZGUoKTtcbiAgICBjYigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpbml0Q2xhc3MgPSBpc0luID8gaW5pdENsYXNzZXNbMF0gOiBpbml0Q2xhc3Nlc1sxXTtcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNJbiA/IGFjdGl2ZUNsYXNzZXNbMF0gOiBhY3RpdmVDbGFzc2VzWzFdO1xuXG4gIC8vIFNldCB1cCB0aGUgYW5pbWF0aW9uXG4gIHJlc2V0KCk7XG4gIGVsZW1lbnQuYWRkQ2xhc3MoYW5pbWF0aW9uKTtcbiAgZWxlbWVudC5jc3MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhpbml0Q2xhc3MpO1xuICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgfSk7XG5cbiAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aDtcbiAgICBlbGVtZW50LmNzcygndHJhbnNpdGlvbicsICcnKTtcbiAgICBlbGVtZW50LmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKCd0cmFuc2l0aW9uZW5kJywgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhpbml0Q2xhc3MgKyAnICcgKyBhY3RpdmVDbGFzcyArICcgJyArIGFuaW1hdGlvbik7XG4gIH1cbn1cblxudmFyIE1vdGlvblVJID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuIiwialF1ZXJ5KCAnaWZyYW1lW3NyYyo9XCJ5b3V0dWJlLmNvbVwiXScpLndyYXAoXCI8ZGl2IGNsYXNzPSdmbGV4LXZpZGVvIHdpZGVzY3JlZW4nLz5cIik7XG5qUXVlcnkoICdpZnJhbWVbc3JjKj1cInZpbWVvLmNvbVwiXScpLndyYXAoXCI8ZGl2IGNsYXNzPSdmbGV4LXZpZGVvIHdpZGVzY3JlZW4gdmltZW8nLz5cIik7XG4iLCJqUXVlcnkoZG9jdW1lbnQpLmZvdW5kYXRpb24oKTtcbiIsIi8vIEpveXJpZGUgZGVtb1xuJCgnI3N0YXJ0LWpyJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICQoZG9jdW1lbnQpLmZvdW5kYXRpb24oJ2pveXJpZGUnLCdzdGFydCcpO1xufSk7IiwiLyohIE1hZ25pZmljIFBvcHVwIC0gdjEuMS4wIC0gMjAxNi0wMi0yMFxuKiBodHRwOi8vZGltc2VtZW5vdi5jb20vcGx1Z2lucy9tYWduaWZpYy1wb3B1cC9cbiogQ29weXJpZ2h0IChjKSAyMDE2IERtaXRyeSBTZW1lbm92OyAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkgeyBcbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsgXG4gLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLiBcbiBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7IFxuIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7IFxuIC8vIE5vZGUvQ29tbW9uSlMgXG4gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7IFxuIH0gZWxzZSB7IFxuIC8vIEJyb3dzZXIgZ2xvYmFscyBcbiBmYWN0b3J5KHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvKTsgXG4gfSBcbiB9KGZ1bmN0aW9uKCQpIHsgXG5cbi8qPj5jb3JlKi9cbi8qKlxuICogXG4gKiBNYWduaWZpYyBQb3B1cCBDb3JlIEpTIGZpbGVcbiAqIFxuICovXG5cblxuLyoqXG4gKiBQcml2YXRlIHN0YXRpYyBjb25zdGFudHNcbiAqL1xudmFyIENMT1NFX0VWRU5UID0gJ0Nsb3NlJyxcblx0QkVGT1JFX0NMT1NFX0VWRU5UID0gJ0JlZm9yZUNsb3NlJyxcblx0QUZURVJfQ0xPU0VfRVZFTlQgPSAnQWZ0ZXJDbG9zZScsXG5cdEJFRk9SRV9BUFBFTkRfRVZFTlQgPSAnQmVmb3JlQXBwZW5kJyxcblx0TUFSS1VQX1BBUlNFX0VWRU5UID0gJ01hcmt1cFBhcnNlJyxcblx0T1BFTl9FVkVOVCA9ICdPcGVuJyxcblx0Q0hBTkdFX0VWRU5UID0gJ0NoYW5nZScsXG5cdE5TID0gJ21mcCcsXG5cdEVWRU5UX05TID0gJy4nICsgTlMsXG5cdFJFQURZX0NMQVNTID0gJ21mcC1yZWFkeScsXG5cdFJFTU9WSU5HX0NMQVNTID0gJ21mcC1yZW1vdmluZycsXG5cdFBSRVZFTlRfQ0xPU0VfQ0xBU1MgPSAnbWZwLXByZXZlbnQtY2xvc2UnO1xuXG5cbi8qKlxuICogUHJpdmF0ZSB2YXJzIFxuICovXG4vKmpzaGludCAtVzA3OSAqL1xudmFyIG1mcCwgLy8gQXMgd2UgaGF2ZSBvbmx5IG9uZSBpbnN0YW5jZSBvZiBNYWduaWZpY1BvcHVwIG9iamVjdCwgd2UgZGVmaW5lIGl0IGxvY2FsbHkgdG8gbm90IHRvIHVzZSAndGhpcydcblx0TWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKCl7fSxcblx0X2lzSlEgPSAhISh3aW5kb3cualF1ZXJ5KSxcblx0X3ByZXZTdGF0dXMsXG5cdF93aW5kb3cgPSAkKHdpbmRvdyksXG5cdF9kb2N1bWVudCxcblx0X3ByZXZDb250ZW50VHlwZSxcblx0X3dyYXBDbGFzc2VzLFxuXHRfY3VyclBvcHVwVHlwZTtcblxuXG4vKipcbiAqIFByaXZhdGUgZnVuY3Rpb25zXG4gKi9cbnZhciBfbWZwT24gPSBmdW5jdGlvbihuYW1lLCBmKSB7XG5cdFx0bWZwLmV2Lm9uKE5TICsgbmFtZSArIEVWRU5UX05TLCBmKTtcblx0fSxcblx0X2dldEVsID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBhcHBlbmRUbywgaHRtbCwgcmF3KSB7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0ZWwuY2xhc3NOYW1lID0gJ21mcC0nK2NsYXNzTmFtZTtcblx0XHRpZihodG1sKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBodG1sO1xuXHRcdH1cblx0XHRpZighcmF3KSB7XG5cdFx0XHRlbCA9ICQoZWwpO1xuXHRcdFx0aWYoYXBwZW5kVG8pIHtcblx0XHRcdFx0ZWwuYXBwZW5kVG8oYXBwZW5kVG8pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZihhcHBlbmRUbykge1xuXHRcdFx0YXBwZW5kVG8uYXBwZW5kQ2hpbGQoZWwpO1xuXHRcdH1cblx0XHRyZXR1cm4gZWw7XG5cdH0sXG5cdF9tZnBUcmlnZ2VyID0gZnVuY3Rpb24oZSwgZGF0YSkge1xuXHRcdG1mcC5ldi50cmlnZ2VySGFuZGxlcihOUyArIGUsIGRhdGEpO1xuXG5cdFx0aWYobWZwLnN0LmNhbGxiYWNrcykge1xuXHRcdFx0Ly8gY29udmVydHMgXCJtZnBFdmVudE5hbWVcIiB0byBcImV2ZW50TmFtZVwiIGNhbGxiYWNrIGFuZCB0cmlnZ2VycyBpdCBpZiBpdCdzIHByZXNlbnRcblx0XHRcdGUgPSBlLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgZS5zbGljZSgxKTtcblx0XHRcdGlmKG1mcC5zdC5jYWxsYmFja3NbZV0pIHtcblx0XHRcdFx0bWZwLnN0LmNhbGxiYWNrc1tlXS5hcHBseShtZnAsICQuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0X2dldENsb3NlQnRuID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdGlmKHR5cGUgIT09IF9jdXJyUG9wdXBUeXBlIHx8ICFtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKSB7XG5cdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuID0gJCggbWZwLnN0LmNsb3NlTWFya3VwLnJlcGxhY2UoJyV0aXRsZSUnLCBtZnAuc3QudENsb3NlICkgKTtcblx0XHRcdF9jdXJyUG9wdXBUeXBlID0gdHlwZTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5jdXJyVGVtcGxhdGUuY2xvc2VCdG47XG5cdH0sXG5cdC8vIEluaXRpYWxpemUgTWFnbmlmaWMgUG9wdXAgb25seSB3aGVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdF9jaGVja0luc3RhbmNlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoISQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSkge1xuXHRcdFx0Lypqc2hpbnQgLVcwMjAgKi9cblx0XHRcdG1mcCA9IG5ldyBNYWduaWZpY1BvcHVwKCk7XG5cdFx0XHRtZnAuaW5pdCgpO1xuXHRcdFx0JC5tYWduaWZpY1BvcHVwLmluc3RhbmNlID0gbWZwO1xuXHRcdH1cblx0fSxcblx0Ly8gQ1NTIHRyYW5zaXRpb24gZGV0ZWN0aW9uLCBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzcyNjQ4OTkvZGV0ZWN0LWNzcy10cmFuc2l0aW9ucy11c2luZy1qYXZhc2NyaXB0LWFuZC13aXRob3V0LW1vZGVybml6clxuXHRzdXBwb3J0c1RyYW5zaXRpb25zID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGUsIC8vICdzJyBmb3Igc3R5bGUuIGJldHRlciB0byBjcmVhdGUgYW4gZWxlbWVudCBpZiBib2R5IHlldCB0byBleGlzdFxuXHRcdFx0diA9IFsnbXMnLCdPJywnTW96JywnV2Via2l0J107IC8vICd2JyBmb3IgdmVuZG9yXG5cblx0XHRpZiggc1sndHJhbnNpdGlvbiddICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTsgXG5cdFx0fVxuXHRcdFx0XG5cdFx0d2hpbGUoIHYubGVuZ3RoICkge1xuXHRcdFx0aWYoIHYucG9wKCkgKyAnVHJhbnNpdGlvbicgaW4gcyApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblxuXG4vKipcbiAqIFB1YmxpYyBmdW5jdGlvbnNcbiAqL1xuTWFnbmlmaWNQb3B1cC5wcm90b3R5cGUgPSB7XG5cblx0Y29uc3RydWN0b3I6IE1hZ25pZmljUG9wdXAsXG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIE1hZ25pZmljIFBvcHVwIHBsdWdpbi4gXG5cdCAqIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIG9ubHkgb25jZSB3aGVuICQuZm4ubWFnbmlmaWNQb3B1cCBvciAkLm1hZ25pZmljUG9wdXAgaXMgZXhlY3V0ZWRcblx0ICovXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcHBWZXJzaW9uID0gbmF2aWdhdG9yLmFwcFZlcnNpb247XG5cdFx0bWZwLmlzTG93SUUgPSBtZnAuaXNJRTggPSBkb2N1bWVudC5hbGwgJiYgIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7XG5cdFx0bWZwLmlzQW5kcm9pZCA9ICgvYW5kcm9pZC9naSkudGVzdChhcHBWZXJzaW9uKTtcblx0XHRtZnAuaXNJT1MgPSAoL2lwaG9uZXxpcGFkfGlwb2QvZ2kpLnRlc3QoYXBwVmVyc2lvbik7XG5cdFx0bWZwLnN1cHBvcnRzVHJhbnNpdGlvbiA9IHN1cHBvcnRzVHJhbnNpdGlvbnMoKTtcblxuXHRcdC8vIFdlIGRpc2FibGUgZml4ZWQgcG9zaXRpb25lZCBsaWdodGJveCBvbiBkZXZpY2VzIHRoYXQgZG9uJ3QgaGFuZGxlIGl0IG5pY2VseS5cblx0XHQvLyBJZiB5b3Uga25vdyBhIGJldHRlciB3YXkgb2YgZGV0ZWN0aW5nIHRoaXMgLSBsZXQgbWUga25vdy5cblx0XHRtZnAucHJvYmFibHlNb2JpbGUgPSAobWZwLmlzQW5kcm9pZCB8fCBtZnAuaXNJT1MgfHwgLyhPcGVyYSBNaW5pKXxLaW5kbGV8d2ViT1N8QmxhY2tCZXJyeXwoT3BlcmEgTW9iaSl8KFdpbmRvd3MgUGhvbmUpfElFTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSApO1xuXHRcdF9kb2N1bWVudCA9ICQoZG9jdW1lbnQpO1xuXG5cdFx0bWZwLnBvcHVwc0NhY2hlID0ge307XG5cdH0sXG5cblx0LyoqXG5cdCAqIE9wZW5zIHBvcHVwXG5cdCAqIEBwYXJhbSAgZGF0YSBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRvcGVuOiBmdW5jdGlvbihkYXRhKSB7XG5cblx0XHR2YXIgaTtcblxuXHRcdGlmKGRhdGEuaXNPYmogPT09IGZhbHNlKSB7IFxuXHRcdFx0Ly8gY29udmVydCBqUXVlcnkgY29sbGVjdGlvbiB0byBhcnJheSB0byBhdm9pZCBjb25mbGljdHMgbGF0ZXJcblx0XHRcdG1mcC5pdGVtcyA9IGRhdGEuaXRlbXMudG9BcnJheSgpO1xuXG5cdFx0XHRtZnAuaW5kZXggPSAwO1xuXHRcdFx0dmFyIGl0ZW1zID0gZGF0YS5pdGVtcyxcblx0XHRcdFx0aXRlbTtcblx0XHRcdGZvcihpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdFx0aWYoaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0XHRpdGVtID0gaXRlbS5lbFswXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihpdGVtID09PSBkYXRhLmVsWzBdKSB7XG5cdFx0XHRcdFx0bWZwLmluZGV4ID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuaXRlbXMgPSAkLmlzQXJyYXkoZGF0YS5pdGVtcykgPyBkYXRhLml0ZW1zIDogW2RhdGEuaXRlbXNdO1xuXHRcdFx0bWZwLmluZGV4ID0gZGF0YS5pbmRleCB8fCAwO1xuXHRcdH1cblxuXHRcdC8vIGlmIHBvcHVwIGlzIGFscmVhZHkgb3BlbmVkIC0gd2UganVzdCB1cGRhdGUgdGhlIGNvbnRlbnRcblx0XHRpZihtZnAuaXNPcGVuKSB7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0bWZwLnR5cGVzID0gW107IFxuXHRcdF93cmFwQ2xhc3NlcyA9ICcnO1xuXHRcdGlmKGRhdGEubWFpbkVsICYmIGRhdGEubWFpbkVsLmxlbmd0aCkge1xuXHRcdFx0bWZwLmV2ID0gZGF0YS5tYWluRWwuZXEoMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5ldiA9IF9kb2N1bWVudDtcblx0XHR9XG5cblx0XHRpZihkYXRhLmtleSkge1xuXHRcdFx0aWYoIW1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV0pIHtcblx0XHRcdFx0bWZwLnBvcHVwc0NhY2hlW2RhdGEua2V5XSA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5jdXJyVGVtcGxhdGUgPSB7fTtcblx0XHR9XG5cblxuXG5cdFx0bWZwLnN0ID0gJC5leHRlbmQodHJ1ZSwge30sICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cywgZGF0YSApOyBcblx0XHRtZnAuZml4ZWRDb250ZW50UG9zID0gbWZwLnN0LmZpeGVkQ29udGVudFBvcyA9PT0gJ2F1dG8nID8gIW1mcC5wcm9iYWJseU1vYmlsZSA6IG1mcC5zdC5maXhlZENvbnRlbnRQb3M7XG5cblx0XHRpZihtZnAuc3QubW9kYWwpIHtcblx0XHRcdG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrID0gZmFsc2U7XG5cdFx0XHRtZnAuc3QuY2xvc2VPbkJnQ2xpY2sgPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5zaG93Q2xvc2VCdG4gPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5lbmFibGVFc2NhcGVLZXkgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cblx0XHQvLyBCdWlsZGluZyBtYXJrdXBcblx0XHQvLyBtYWluIGNvbnRhaW5lcnMgYXJlIGNyZWF0ZWQgb25seSBvbmNlXG5cdFx0aWYoIW1mcC5iZ092ZXJsYXkpIHtcblxuXHRcdFx0Ly8gRGFyayBvdmVybGF5XG5cdFx0XHRtZnAuYmdPdmVybGF5ID0gX2dldEVsKCdiZycpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuY2xvc2UoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAud3JhcCA9IF9nZXRFbCgnd3JhcCcpLmF0dHIoJ3RhYmluZGV4JywgLTEpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYobWZwLl9jaGVja0lmQ2xvc2UoZS50YXJnZXQpKSB7XG5cdFx0XHRcdFx0bWZwLmNsb3NlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyID0gX2dldEVsKCdjb250YWluZXInLCBtZnAud3JhcCk7XG5cdFx0fVxuXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIgPSBfZ2V0RWwoJ2NvbnRlbnQnKTtcblx0XHRpZihtZnAuc3QucHJlbG9hZGVyKSB7XG5cdFx0XHRtZnAucHJlbG9hZGVyID0gX2dldEVsKCdwcmVsb2FkZXInLCBtZnAuY29udGFpbmVyLCBtZnAuc3QudExvYWRpbmcpO1xuXHRcdH1cblxuXG5cdFx0Ly8gSW5pdGlhbGl6aW5nIG1vZHVsZXNcblx0XHR2YXIgbW9kdWxlcyA9ICQubWFnbmlmaWNQb3B1cC5tb2R1bGVzO1xuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBuID0gbW9kdWxlc1tpXTtcblx0XHRcdG4gPSBuLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbi5zbGljZSgxKTtcblx0XHRcdG1mcFsnaW5pdCcrbl0uY2FsbChtZnApO1xuXHRcdH1cblx0XHRfbWZwVHJpZ2dlcignQmVmb3JlT3BlbicpO1xuXG5cblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuKSB7XG5cdFx0XHQvLyBDbG9zZSBidXR0b25cblx0XHRcdGlmKCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUpIHtcblx0XHRcdFx0bWZwLndyYXAuYXBwZW5kKCBfZ2V0Q2xvc2VCdG4oKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X21mcE9uKE1BUktVUF9QQVJTRV9FVkVOVCwgZnVuY3Rpb24oZSwgdGVtcGxhdGUsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHRcdHZhbHVlcy5jbG9zZV9yZXBsYWNlV2l0aCA9IF9nZXRDbG9zZUJ0bihpdGVtLnR5cGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWNsb3NlLWJ0bi1pbic7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYobWZwLnN0LmFsaWduVG9wKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYWxpZ24tdG9wJztcblx0XHR9XG5cblx0XG5cblx0XHRpZihtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHRtZnAud3JhcC5jc3Moe1xuXHRcdFx0XHRvdmVyZmxvdzogbWZwLnN0Lm92ZXJmbG93WSxcblx0XHRcdFx0b3ZlcmZsb3dYOiAnaGlkZGVuJyxcblx0XHRcdFx0b3ZlcmZsb3dZOiBtZnAuc3Qub3ZlcmZsb3dZXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndyYXAuY3NzKHsgXG5cdFx0XHRcdHRvcDogX3dpbmRvdy5zY3JvbGxUb3AoKSxcblx0XHRcdFx0cG9zaXRpb246ICdhYnNvbHV0ZSdcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiggbWZwLnN0LmZpeGVkQmdQb3MgPT09IGZhbHNlIHx8IChtZnAuc3QuZml4ZWRCZ1BvcyA9PT0gJ2F1dG8nICYmICFtZnAuZml4ZWRDb250ZW50UG9zKSApIHtcblx0XHRcdG1mcC5iZ092ZXJsYXkuY3NzKHtcblx0XHRcdFx0aGVpZ2h0OiBfZG9jdW1lbnQuaGVpZ2h0KCksXG5cdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRcblxuXHRcdGlmKG1mcC5zdC5lbmFibGVFc2NhcGVLZXkpIHtcblx0XHRcdC8vIENsb3NlIG9uIEVTQyBrZXlcblx0XHRcdF9kb2N1bWVudC5vbigna2V5dXAnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYoZS5rZXlDb2RlID09PSAyNykge1xuXHRcdFx0XHRcdG1mcC5jbG9zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRfd2luZG93Lm9uKCdyZXNpemUnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnVwZGF0ZVNpemUoKTtcblx0XHR9KTtcblxuXG5cdFx0aWYoIW1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYXV0by1jdXJzb3InO1xuXHRcdH1cblx0XHRcblx0XHRpZihfd3JhcENsYXNzZXMpXG5cdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhfd3JhcENsYXNzZXMpO1xuXG5cblx0XHQvLyB0aGlzIHRyaWdnZXJzIHJlY2FsY3VsYXRpb24gb2YgbGF5b3V0LCBzbyB3ZSBnZXQgaXQgb25jZSB0byBub3QgdG8gdHJpZ2dlciB0d2ljZVxuXHRcdHZhciB3aW5kb3dIZWlnaHQgPSBtZnAud0ggPSBfd2luZG93LmhlaWdodCgpO1xuXG5cdFx0XG5cdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHt9O1xuXG5cdFx0aWYoIG1mcC5maXhlZENvbnRlbnRQb3MgKSB7XG4gICAgICAgICAgICBpZihtZnAuX2hhc1Njcm9sbEJhcih3aW5kb3dIZWlnaHQpKXtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG1mcC5fZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgICAgICAgICAgIGlmKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93U3R5bGVzLm1hcmdpblJpZ2h0ID0gcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHRcdGlmKG1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdGlmKCFtZnAuaXNJRTcpIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZTcgZG91YmxlLXNjcm9sbCBidWdcblx0XHRcdFx0JCgnYm9keSwgaHRtbCcpLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0XG5cdFx0XG5cdFx0dmFyIGNsYXNzZXNUb2FkZCA9IG1mcC5zdC5tYWluQ2xhc3M7XG5cdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRjbGFzc2VzVG9hZGQgKz0gJyBtZnAtaWU3Jztcblx0XHR9XG5cdFx0aWYoY2xhc3Nlc1RvYWRkKSB7XG5cdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoIGNsYXNzZXNUb2FkZCApO1xuXHRcdH1cblxuXHRcdC8vIGFkZCBjb250ZW50XG5cdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cblx0XHRfbWZwVHJpZ2dlcignQnVpbGRDb250cm9scycpO1xuXG5cdFx0Ly8gcmVtb3ZlIHNjcm9sbGJhciwgYWRkIG1hcmdpbiBlLnQuY1xuXHRcdCQoJ2h0bWwnKS5jc3Mod2luZG93U3R5bGVzKTtcblx0XHRcblx0XHQvLyBhZGQgZXZlcnl0aGluZyB0byBET01cblx0XHRtZnAuYmdPdmVybGF5LmFkZChtZnAud3JhcCkucHJlcGVuZFRvKCBtZnAuc3QucHJlcGVuZFRvIHx8ICQoZG9jdW1lbnQuYm9keSkgKTtcblxuXHRcdC8vIFNhdmUgbGFzdCBmb2N1c2VkIGVsZW1lbnRcblx0XHRtZnAuX2xhc3RGb2N1c2VkRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHRcdFxuXHRcdC8vIFdhaXQgZm9yIG5leHQgY3ljbGUgdG8gYWxsb3cgQ1NTIHRyYW5zaXRpb25cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XG5cdFx0XHRpZihtZnAuY29udGVudCkge1xuXHRcdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0XHRtZnAuX3NldEZvY3VzKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiBjb250ZW50IGlzIG5vdCBkZWZpbmVkIChub3QgbG9hZGVkIGUudC5jKSB3ZSBhZGQgY2xhc3Mgb25seSBmb3IgQkdcblx0XHRcdFx0bWZwLmJnT3ZlcmxheS5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFRyYXAgdGhlIGZvY3VzIGluIHBvcHVwXG5cdFx0XHRfZG9jdW1lbnQub24oJ2ZvY3VzaW4nICsgRVZFTlRfTlMsIG1mcC5fb25Gb2N1c0luKTtcblxuXHRcdH0sIDE2KTtcblxuXHRcdG1mcC5pc09wZW4gPSB0cnVlO1xuXHRcdG1mcC51cGRhdGVTaXplKHdpbmRvd0hlaWdodCk7XG5cdFx0X21mcFRyaWdnZXIoT1BFTl9FVkVOVCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvKipcblx0ICogQ2xvc2VzIHRoZSBwb3B1cFxuXHQgKi9cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCFtZnAuaXNPcGVuKSByZXR1cm47XG5cdFx0X21mcFRyaWdnZXIoQkVGT1JFX0NMT1NFX0VWRU5UKTtcblxuXHRcdG1mcC5pc09wZW4gPSBmYWxzZTtcblx0XHQvLyBmb3IgQ1NTMyBhbmltYXRpb25cblx0XHRpZihtZnAuc3QucmVtb3ZhbERlbGF5ICYmICFtZnAuaXNMb3dJRSAmJiBtZnAuc3VwcG9ydHNUcmFuc2l0aW9uICkgIHtcblx0XHRcdG1mcC5fYWRkQ2xhc3NUb01GUChSRU1PVklOR19DTEFTUyk7XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuX2Nsb3NlKCk7XG5cdFx0XHR9LCBtZnAuc3QucmVtb3ZhbERlbGF5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLl9jbG9zZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogSGVscGVyIGZvciBjbG9zZSgpIGZ1bmN0aW9uXG5cdCAqL1xuXHRfY2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdF9tZnBUcmlnZ2VyKENMT1NFX0VWRU5UKTtcblxuXHRcdHZhciBjbGFzc2VzVG9SZW1vdmUgPSBSRU1PVklOR19DTEFTUyArICcgJyArIFJFQURZX0NMQVNTICsgJyAnO1xuXG5cdFx0bWZwLmJnT3ZlcmxheS5kZXRhY2goKTtcblx0XHRtZnAud3JhcC5kZXRhY2goKTtcblx0XHRtZnAuY29udGFpbmVyLmVtcHR5KCk7XG5cblx0XHRpZihtZnAuc3QubWFpbkNsYXNzKSB7XG5cdFx0XHRjbGFzc2VzVG9SZW1vdmUgKz0gbWZwLnN0Lm1haW5DbGFzcyArICcgJztcblx0XHR9XG5cblx0XHRtZnAuX3JlbW92ZUNsYXNzRnJvbU1GUChjbGFzc2VzVG9SZW1vdmUpO1xuXG5cdFx0aWYobWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHttYXJnaW5SaWdodDogJyd9O1xuXHRcdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRcdCQoJ2JvZHksIGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJyc7XG5cdFx0XHR9XG5cdFx0XHQkKCdodG1sJykuY3NzKHdpbmRvd1N0eWxlcyk7XG5cdFx0fVxuXHRcdFxuXHRcdF9kb2N1bWVudC5vZmYoJ2tleXVwJyArIEVWRU5UX05TICsgJyBmb2N1c2luJyArIEVWRU5UX05TKTtcblx0XHRtZnAuZXYub2ZmKEVWRU5UX05TKTtcblxuXHRcdC8vIGNsZWFuIHVwIERPTSBlbGVtZW50cyB0aGF0IGFyZW4ndCByZW1vdmVkXG5cdFx0bWZwLndyYXAuYXR0cignY2xhc3MnLCAnbWZwLXdyYXAnKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXHRcdG1mcC5iZ092ZXJsYXkuYXR0cignY2xhc3MnLCAnbWZwLWJnJyk7XG5cdFx0bWZwLmNvbnRhaW5lci5hdHRyKCdjbGFzcycsICdtZnAtY29udGFpbmVyJyk7XG5cblx0XHQvLyByZW1vdmUgY2xvc2UgYnV0dG9uIGZyb20gdGFyZ2V0IGVsZW1lbnRcblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmXG5cdFx0KCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUgfHwgbWZwLmN1cnJUZW1wbGF0ZVttZnAuY3Vyckl0ZW0udHlwZV0gPT09IHRydWUpKSB7XG5cdFx0XHRpZihtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKVxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuLmRldGFjaCgpO1xuXHRcdH1cblxuXG5cdFx0aWYobWZwLnN0LmF1dG9Gb2N1c0xhc3QgJiYgbWZwLl9sYXN0Rm9jdXNlZEVsKSB7XG5cdFx0XHQkKG1mcC5fbGFzdEZvY3VzZWRFbCkuZm9jdXMoKTsgLy8gcHV0IHRhYiBmb2N1cyBiYWNrXG5cdFx0fVxuXHRcdG1mcC5jdXJySXRlbSA9IG51bGw7XHRcblx0XHRtZnAuY29udGVudCA9IG51bGw7XG5cdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG51bGw7XG5cdFx0bWZwLnByZXZIZWlnaHQgPSAwO1xuXG5cdFx0X21mcFRyaWdnZXIoQUZURVJfQ0xPU0VfRVZFTlQpO1xuXHR9LFxuXHRcblx0dXBkYXRlU2l6ZTogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cblx0XHRpZihtZnAuaXNJT1MpIHtcblx0XHRcdC8vIGZpeGVzIGlPUyBuYXYgYmFycyBodHRwczovL2dpdGh1Yi5jb20vZGltc2VtZW5vdi9NYWduaWZpYy1Qb3B1cC9pc3N1ZXMvMlxuXHRcdFx0dmFyIHpvb21MZXZlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdFx0dmFyIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIHpvb21MZXZlbDtcblx0XHRcdG1mcC53cmFwLmNzcygnaGVpZ2h0JywgaGVpZ2h0KTtcblx0XHRcdG1mcC53SCA9IGhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndIID0gd2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCk7XG5cdFx0fVxuXHRcdC8vIEZpeGVzICM4NDogcG9wdXAgaW5jb3JyZWN0bHkgcG9zaXRpb25lZCB3aXRoIHBvc2l0aW9uOnJlbGF0aXZlIG9uIGJvZHlcblx0XHRpZighbWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0bWZwLndyYXAuY3NzKCdoZWlnaHQnLCBtZnAud0gpO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKCdSZXNpemUnKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXQgY29udGVudCBvZiBwb3B1cCBiYXNlZCBvbiBjdXJyZW50IGluZGV4XG5cdCAqL1xuXHR1cGRhdGVJdGVtSFRNTDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbbWZwLmluZGV4XTtcblxuXHRcdC8vIERldGFjaCBhbmQgcGVyZm9ybSBtb2RpZmljYXRpb25zXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIuZGV0YWNoKCk7XG5cblx0XHRpZihtZnAuY29udGVudClcblx0XHRcdG1mcC5jb250ZW50LmRldGFjaCgpO1xuXG5cdFx0aWYoIWl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRpdGVtID0gbWZwLnBhcnNlRWwoIG1mcC5pbmRleCApO1xuXHRcdH1cblxuXHRcdHZhciB0eXBlID0gaXRlbS50eXBlO1xuXG5cdFx0X21mcFRyaWdnZXIoJ0JlZm9yZUNoYW5nZScsIFttZnAuY3Vyckl0ZW0gPyBtZnAuY3Vyckl0ZW0udHlwZSA6ICcnLCB0eXBlXSk7XG5cdFx0Ly8gQmVmb3JlQ2hhbmdlIGV2ZW50IHdvcmtzIGxpa2Ugc286XG5cdFx0Ly8gX21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkgeyB9KTtcblxuXHRcdG1mcC5jdXJySXRlbSA9IGl0ZW07XG5cblx0XHRpZighbWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSkge1xuXHRcdFx0dmFyIG1hcmt1cCA9IG1mcC5zdFt0eXBlXSA/IG1mcC5zdFt0eXBlXS5tYXJrdXAgOiBmYWxzZTtcblxuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBtYXJrdXBcblx0XHRcdF9tZnBUcmlnZ2VyKCdGaXJzdE1hcmt1cFBhcnNlJywgbWFya3VwKTtcblxuXHRcdFx0aWYobWFya3VwKSB7XG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0gPSAkKG1hcmt1cCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBtYXJrdXAgZm91bmQgd2UganVzdCBkZWZpbmUgdGhhdCB0ZW1wbGF0ZSBpcyBwYXJzZWRcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoX3ByZXZDb250ZW50VHlwZSAmJiBfcHJldkNvbnRlbnRUeXBlICE9PSBpdGVtLnR5cGUpIHtcblx0XHRcdG1mcC5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ21mcC0nK19wcmV2Q29udGVudFR5cGUrJy1ob2xkZXInKTtcblx0XHR9XG5cblx0XHR2YXIgbmV3Q29udGVudCA9IG1mcFsnZ2V0JyArIHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpXShpdGVtLCBtZnAuY3VyclRlbXBsYXRlW3R5cGVdKTtcblx0XHRtZnAuYXBwZW5kQ29udGVudChuZXdDb250ZW50LCB0eXBlKTtcblxuXHRcdGl0ZW0ucHJlbG9hZGVkID0gdHJ1ZTtcblxuXHRcdF9tZnBUcmlnZ2VyKENIQU5HRV9FVkVOVCwgaXRlbSk7XG5cdFx0X3ByZXZDb250ZW50VHlwZSA9IGl0ZW0udHlwZTtcblxuXHRcdC8vIEFwcGVuZCBjb250YWluZXIgYmFjayBhZnRlciBpdHMgY29udGVudCBjaGFuZ2VkXG5cdFx0bWZwLmNvbnRhaW5lci5wcmVwZW5kKG1mcC5jb250ZW50Q29udGFpbmVyKTtcblxuXHRcdF9tZnBUcmlnZ2VyKCdBZnRlckNoYW5nZScpO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIFNldCBIVE1MIGNvbnRlbnQgb2YgcG9wdXBcblx0ICovXG5cdGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uKG5ld0NvbnRlbnQsIHR5cGUpIHtcblx0XHRtZnAuY29udGVudCA9IG5ld0NvbnRlbnQ7XG5cblx0XHRpZihuZXdDb250ZW50KSB7XG5cdFx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmIG1mcC5zdC5jbG9zZUJ0bkluc2lkZSAmJlxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlW3R5cGVdID09PSB0cnVlKSB7XG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIG1hcmt1cCwgd2UganVzdCBhcHBlbmQgY2xvc2UgYnV0dG9uIGVsZW1lbnQgaW5zaWRlXG5cdFx0XHRcdGlmKCFtZnAuY29udGVudC5maW5kKCcubWZwLWNsb3NlJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuYXBwZW5kKF9nZXRDbG9zZUJ0bigpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWZwLmNvbnRlbnQgPSBuZXdDb250ZW50O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuY29udGVudCA9ICcnO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKEJFRk9SRV9BUFBFTkRfRVZFTlQpO1xuXHRcdG1mcC5jb250YWluZXIuYWRkQ2xhc3MoJ21mcC0nK3R5cGUrJy1ob2xkZXInKTtcblxuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyLmFwcGVuZChtZnAuY29udGVudCk7XG5cdH0sXG5cblxuXHQvKipcblx0ICogQ3JlYXRlcyBNYWduaWZpYyBQb3B1cCBkYXRhIG9iamVjdCBiYXNlZCBvbiBnaXZlbiBkYXRhXG5cdCAqIEBwYXJhbSAge2ludH0gaW5kZXggSW5kZXggb2YgaXRlbSB0byBwYXJzZVxuXHQgKi9cblx0cGFyc2VFbDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF0sXG5cdFx0XHR0eXBlO1xuXG5cdFx0aWYoaXRlbS50YWdOYW1lKSB7XG5cdFx0XHRpdGVtID0geyBlbDogJChpdGVtKSB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0eXBlID0gaXRlbS50eXBlO1xuXHRcdFx0aXRlbSA9IHsgZGF0YTogaXRlbSwgc3JjOiBpdGVtLnNyYyB9O1xuXHRcdH1cblxuXHRcdGlmKGl0ZW0uZWwpIHtcblx0XHRcdHZhciB0eXBlcyA9IG1mcC50eXBlcztcblxuXHRcdFx0Ly8gY2hlY2sgZm9yICdtZnAtVFlQRScgY2xhc3Ncblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiggaXRlbS5lbC5oYXNDbGFzcygnbWZwLScrdHlwZXNbaV0pICkge1xuXHRcdFx0XHRcdHR5cGUgPSB0eXBlc1tpXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpdGVtLnNyYyA9IGl0ZW0uZWwuYXR0cignZGF0YS1tZnAtc3JjJyk7XG5cdFx0XHRpZighaXRlbS5zcmMpIHtcblx0XHRcdFx0aXRlbS5zcmMgPSBpdGVtLmVsLmF0dHIoJ2hyZWYnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpdGVtLnR5cGUgPSB0eXBlIHx8IG1mcC5zdC50eXBlIHx8ICdpbmxpbmUnO1xuXHRcdGl0ZW0uaW5kZXggPSBpbmRleDtcblx0XHRpdGVtLnBhcnNlZCA9IHRydWU7XG5cdFx0bWZwLml0ZW1zW2luZGV4XSA9IGl0ZW07XG5cdFx0X21mcFRyaWdnZXIoJ0VsZW1lbnRQYXJzZScsIGl0ZW0pO1xuXG5cdFx0cmV0dXJuIG1mcC5pdGVtc1tpbmRleF07XG5cdH0sXG5cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgc2luZ2xlIHBvcHVwIG9yIGEgZ3JvdXAgb2YgcG9wdXBzXG5cdCAqL1xuXHRhZGRHcm91cDogZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcblx0XHR2YXIgZUhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRlLm1mcEVsID0gdGhpcztcblx0XHRcdG1mcC5fb3BlbkNsaWNrKGUsIGVsLCBvcHRpb25zKTtcblx0XHR9O1xuXG5cdFx0aWYoIW9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHR9XG5cblx0XHR2YXIgZU5hbWUgPSAnY2xpY2subWFnbmlmaWNQb3B1cCc7XG5cdFx0b3B0aW9ucy5tYWluRWwgPSBlbDtcblxuXHRcdGlmKG9wdGlvbnMuaXRlbXMpIHtcblx0XHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdFx0ZWwub2ZmKGVOYW1lKS5vbihlTmFtZSwgZUhhbmRsZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zLmlzT2JqID0gZmFsc2U7XG5cdFx0XHRpZihvcHRpb25zLmRlbGVnYXRlKSB7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIG9wdGlvbnMuZGVsZWdhdGUgLCBlSGFuZGxlcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHRpb25zLml0ZW1zID0gZWw7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIGVIYW5kbGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdF9vcGVuQ2xpY2s6IGZ1bmN0aW9uKGUsIGVsLCBvcHRpb25zKSB7XG5cdFx0dmFyIG1pZENsaWNrID0gb3B0aW9ucy5taWRDbGljayAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5taWRDbGljayA6ICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cy5taWRDbGljaztcblxuXG5cdFx0aWYoIW1pZENsaWNrICYmICggZS53aGljaCA9PT0gMiB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuc2hpZnRLZXkgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZGlzYWJsZU9uID0gb3B0aW9ucy5kaXNhYmxlT24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGlzYWJsZU9uIDogJC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLmRpc2FibGVPbjtcblxuXHRcdGlmKGRpc2FibGVPbikge1xuXHRcdFx0aWYoJC5pc0Z1bmN0aW9uKGRpc2FibGVPbikpIHtcblx0XHRcdFx0aWYoICFkaXNhYmxlT24uY2FsbChtZnApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgeyAvLyBlbHNlIGl0J3MgbnVtYmVyXG5cdFx0XHRcdGlmKCBfd2luZG93LndpZHRoKCkgPCBkaXNhYmxlT24gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihlLnR5cGUpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Ly8gVGhpcyB3aWxsIHByZXZlbnQgcG9wdXAgZnJvbSBjbG9zaW5nIGlmIGVsZW1lbnQgaXMgaW5zaWRlIGFuZCBwb3B1cCBpcyBhbHJlYWR5IG9wZW5lZFxuXHRcdFx0aWYobWZwLmlzT3Blbikge1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG9wdGlvbnMuZWwgPSAkKGUubWZwRWwpO1xuXHRcdGlmKG9wdGlvbnMuZGVsZWdhdGUpIHtcblx0XHRcdG9wdGlvbnMuaXRlbXMgPSBlbC5maW5kKG9wdGlvbnMuZGVsZWdhdGUpO1xuXHRcdH1cblx0XHRtZnAub3BlbihvcHRpb25zKTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRleHQgb24gcHJlbG9hZGVyXG5cdCAqL1xuXHR1cGRhdGVTdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuXG5cdFx0aWYobWZwLnByZWxvYWRlcikge1xuXHRcdFx0aWYoX3ByZXZTdGF0dXMgIT09IHN0YXR1cykge1xuXHRcdFx0XHRtZnAuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdtZnAtcy0nK19wcmV2U3RhdHVzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIXRleHQgJiYgc3RhdHVzID09PSAnbG9hZGluZycpIHtcblx0XHRcdFx0dGV4dCA9IG1mcC5zdC50TG9hZGluZztcblx0XHRcdH1cblxuXHRcdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRcdHN0YXR1czogc3RhdHVzLFxuXHRcdFx0XHR0ZXh0OiB0ZXh0XG5cdFx0XHR9O1xuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBzdGF0dXNcblx0XHRcdF9tZnBUcmlnZ2VyKCdVcGRhdGVTdGF0dXMnLCBkYXRhKTtcblxuXHRcdFx0c3RhdHVzID0gZGF0YS5zdGF0dXM7XG5cdFx0XHR0ZXh0ID0gZGF0YS50ZXh0O1xuXG5cdFx0XHRtZnAucHJlbG9hZGVyLmh0bWwodGV4dCk7XG5cblx0XHRcdG1mcC5wcmVsb2FkZXIuZmluZCgnYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyLmFkZENsYXNzKCdtZnAtcy0nK3N0YXR1cyk7XG5cdFx0XHRfcHJldlN0YXR1cyA9IHN0YXR1cztcblx0XHR9XG5cdH0sXG5cblxuXHQvKlxuXHRcdFwiUHJpdmF0ZVwiIGhlbHBlcnMgdGhhdCBhcmVuJ3QgcHJpdmF0ZSBhdCBhbGxcblx0ICovXG5cdC8vIENoZWNrIHRvIGNsb3NlIHBvcHVwIG9yIG5vdFxuXHQvLyBcInRhcmdldFwiIGlzIGFuIGVsZW1lbnQgdGhhdCB3YXMgY2xpY2tlZFxuXHRfY2hlY2tJZkNsb3NlOiBmdW5jdGlvbih0YXJnZXQpIHtcblxuXHRcdGlmKCQodGFyZ2V0KS5oYXNDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjbG9zZU9uQ29udGVudCA9IG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrO1xuXHRcdHZhciBjbG9zZU9uQmcgPSBtZnAuc3QuY2xvc2VPbkJnQ2xpY2s7XG5cblx0XHRpZihjbG9zZU9uQ29udGVudCAmJiBjbG9zZU9uQmcpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFdlIGNsb3NlIHRoZSBwb3B1cCBpZiBjbGljayBpcyBvbiBjbG9zZSBidXR0b24gb3Igb24gcHJlbG9hZGVyLiBPciBpZiB0aGVyZSBpcyBubyBjb250ZW50LlxuXHRcdFx0aWYoIW1mcC5jb250ZW50IHx8ICQodGFyZ2V0KS5oYXNDbGFzcygnbWZwLWNsb3NlJykgfHwgKG1mcC5wcmVsb2FkZXIgJiYgdGFyZ2V0ID09PSBtZnAucHJlbG9hZGVyWzBdKSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIGNsaWNrIGlzIG91dHNpZGUgdGhlIGNvbnRlbnRcblx0XHRcdGlmKCAgKHRhcmdldCAhPT0gbWZwLmNvbnRlbnRbMF0gJiYgISQuY29udGFpbnMobWZwLmNvbnRlbnRbMF0sIHRhcmdldCkpICApIHtcblx0XHRcdFx0aWYoY2xvc2VPbkJnKSB7XG5cdFx0XHRcdFx0Ly8gbGFzdCBjaGVjaywgaWYgdGhlIGNsaWNrZWQgZWxlbWVudCBpcyBpbiBET00sIChpbiBjYXNlIGl0J3MgcmVtb3ZlZCBvbmNsaWNrKVxuXHRcdFx0XHRcdGlmKCAkLmNvbnRhaW5zKGRvY3VtZW50LCB0YXJnZXQpICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYoY2xvc2VPbkNvbnRlbnQpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXHRfYWRkQ2xhc3NUb01GUDogZnVuY3Rpb24oY05hbWUpIHtcblx0XHRtZnAuYmdPdmVybGF5LmFkZENsYXNzKGNOYW1lKTtcblx0XHRtZnAud3JhcC5hZGRDbGFzcyhjTmFtZSk7XG5cdH0sXG5cdF9yZW1vdmVDbGFzc0Zyb21NRlA6IGZ1bmN0aW9uKGNOYW1lKSB7XG5cdFx0dGhpcy5iZ092ZXJsYXkucmVtb3ZlQ2xhc3MoY05hbWUpO1xuXHRcdG1mcC53cmFwLnJlbW92ZUNsYXNzKGNOYW1lKTtcblx0fSxcblx0X2hhc1Njcm9sbEJhcjogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cdFx0cmV0dXJuICggIChtZnAuaXNJRTcgPyBfZG9jdW1lbnQuaGVpZ2h0KCkgOiBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCkgPiAod2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCkpICk7XG5cdH0sXG5cdF9zZXRGb2N1czogZnVuY3Rpb24oKSB7XG5cdFx0KG1mcC5zdC5mb2N1cyA/IG1mcC5jb250ZW50LmZpbmQobWZwLnN0LmZvY3VzKS5lcSgwKSA6IG1mcC53cmFwKS5mb2N1cygpO1xuXHR9LFxuXHRfb25Gb2N1c0luOiBmdW5jdGlvbihlKSB7XG5cdFx0aWYoIGUudGFyZ2V0ICE9PSBtZnAud3JhcFswXSAmJiAhJC5jb250YWlucyhtZnAud3JhcFswXSwgZS50YXJnZXQpICkge1xuXHRcdFx0bWZwLl9zZXRGb2N1cygpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0X3BhcnNlTWFya3VwOiBmdW5jdGlvbih0ZW1wbGF0ZSwgdmFsdWVzLCBpdGVtKSB7XG5cdFx0dmFyIGFycjtcblx0XHRpZihpdGVtLmRhdGEpIHtcblx0XHRcdHZhbHVlcyA9ICQuZXh0ZW5kKGl0ZW0uZGF0YSwgdmFsdWVzKTtcblx0XHR9XG5cdFx0X21mcFRyaWdnZXIoTUFSS1VQX1BBUlNFX0VWRU5ULCBbdGVtcGxhdGUsIHZhbHVlcywgaXRlbV0gKTtcblxuXHRcdCQuZWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0YXJyID0ga2V5LnNwbGl0KCdfJyk7XG5cdFx0XHRpZihhcnIubGVuZ3RoID4gMSkge1xuXHRcdFx0XHR2YXIgZWwgPSB0ZW1wbGF0ZS5maW5kKEVWRU5UX05TICsgJy0nK2FyclswXSk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHZhciBhdHRyID0gYXJyWzFdO1xuXHRcdFx0XHRcdGlmKGF0dHIgPT09ICdyZXBsYWNlV2l0aCcpIHtcblx0XHRcdFx0XHRcdGlmKGVsWzBdICE9PSB2YWx1ZVswXSkge1xuXHRcdFx0XHRcdFx0XHRlbC5yZXBsYWNlV2l0aCh2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGF0dHIgPT09ICdpbWcnKSB7XG5cdFx0XHRcdFx0XHRpZihlbC5pcygnaW1nJykpIHtcblx0XHRcdFx0XHRcdFx0ZWwuYXR0cignc3JjJywgdmFsdWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZWwucmVwbGFjZVdpdGgoICQoJzxpbWc+JykuYXR0cignc3JjJywgdmFsdWUpLmF0dHIoJ2NsYXNzJywgZWwuYXR0cignY2xhc3MnKSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWwuYXR0cihhcnJbMV0sIHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGVtcGxhdGUuZmluZChFVkVOVF9OUyArICctJytrZXkpLmh0bWwodmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdF9nZXRTY3JvbGxiYXJTaXplOiBmdW5jdGlvbigpIHtcblx0XHQvLyB0aHggRGF2aWRcblx0XHRpZihtZnAuc2Nyb2xsYmFyU2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdHNjcm9sbERpdi5zdHlsZS5jc3NUZXh0ID0gJ3dpZHRoOiA5OXB4OyBoZWlnaHQ6IDk5cHg7IG92ZXJmbG93OiBzY3JvbGw7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtOTk5OXB4Oyc7XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG5cdFx0XHRtZnAuc2Nyb2xsYmFyU2l6ZSA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5zY3JvbGxiYXJTaXplO1xuXHR9XG5cbn07IC8qIE1hZ25pZmljUG9wdXAgY29yZSBwcm90b3R5cGUgZW5kICovXG5cblxuXG5cbi8qKlxuICogUHVibGljIHN0YXRpYyBmdW5jdGlvbnNcbiAqL1xuJC5tYWduaWZpY1BvcHVwID0ge1xuXHRpbnN0YW5jZTogbnVsbCxcblx0cHJvdG86IE1hZ25pZmljUG9wdXAucHJvdG90eXBlLFxuXHRtb2R1bGVzOiBbXSxcblxuXHRvcGVuOiBmdW5jdGlvbihvcHRpb25zLCBpbmRleCkge1xuXHRcdF9jaGVja0luc3RhbmNlKCk7XG5cblx0XHRpZighb3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdG9wdGlvbnMuaW5kZXggPSBpbmRleCB8fCAwO1xuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlLm9wZW4ob3B0aW9ucyk7XG5cdH0sXG5cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UgJiYgJC5tYWduaWZpY1BvcHVwLmluc3RhbmNlLmNsb3NlKCk7XG5cdH0sXG5cblx0cmVnaXN0ZXJNb2R1bGU6IGZ1bmN0aW9uKG5hbWUsIG1vZHVsZSkge1xuXHRcdGlmKG1vZHVsZS5vcHRpb25zKSB7XG5cdFx0XHQkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHNbbmFtZV0gPSBtb2R1bGUub3B0aW9ucztcblx0XHR9XG5cdFx0JC5leHRlbmQodGhpcy5wcm90bywgbW9kdWxlLnByb3RvKTtcblx0XHR0aGlzLm1vZHVsZXMucHVzaChuYW1lKTtcblx0fSxcblxuXHRkZWZhdWx0czoge1xuXG5cdFx0Ly8gSW5mbyBhYm91dCBvcHRpb25zIGlzIGluIGRvY3M6XG5cdFx0Ly8gaHR0cDovL2RpbXNlbWVub3YuY29tL3BsdWdpbnMvbWFnbmlmaWMtcG9wdXAvZG9jdW1lbnRhdGlvbi5odG1sI29wdGlvbnNcblxuXHRcdGRpc2FibGVPbjogMCxcblxuXHRcdGtleTogbnVsbCxcblxuXHRcdG1pZENsaWNrOiBmYWxzZSxcblxuXHRcdG1haW5DbGFzczogJycsXG5cblx0XHRwcmVsb2FkZXI6IHRydWUsXG5cblx0XHRmb2N1czogJycsIC8vIENTUyBzZWxlY3RvciBvZiBpbnB1dCB0byBmb2N1cyBhZnRlciBwb3B1cCBpcyBvcGVuZWRcblxuXHRcdGNsb3NlT25Db250ZW50Q2xpY2s6IGZhbHNlLFxuXG5cdFx0Y2xvc2VPbkJnQ2xpY2s6IHRydWUsXG5cblx0XHRjbG9zZUJ0bkluc2lkZTogdHJ1ZSxcblxuXHRcdHNob3dDbG9zZUJ0bjogdHJ1ZSxcblxuXHRcdGVuYWJsZUVzY2FwZUtleTogdHJ1ZSxcblxuXHRcdG1vZGFsOiBmYWxzZSxcblxuXHRcdGFsaWduVG9wOiBmYWxzZSxcblxuXHRcdHJlbW92YWxEZWxheTogMCxcblxuXHRcdHByZXBlbmRUbzogbnVsbCxcblxuXHRcdGZpeGVkQ29udGVudFBvczogJ2F1dG8nLFxuXG5cdFx0Zml4ZWRCZ1BvczogJ2F1dG8nLFxuXG5cdFx0b3ZlcmZsb3dZOiAnYXV0bycsXG5cblx0XHRjbG9zZU1hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWNsb3NlXCI+JiMyMTU7PC9idXR0b24+JyxcblxuXHRcdHRDbG9zZTogJ0Nsb3NlIChFc2MpJyxcblxuXHRcdHRMb2FkaW5nOiAnTG9hZGluZy4uLicsXG5cblx0XHRhdXRvRm9jdXNMYXN0OiB0cnVlXG5cblx0fVxufTtcblxuXG5cbiQuZm4ubWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0X2NoZWNrSW5zdGFuY2UoKTtcblxuXHR2YXIganFFbCA9ICQodGhpcyk7XG5cblx0Ly8gV2UgY2FsbCBzb21lIEFQSSBtZXRob2Qgb2YgZmlyc3QgcGFyYW0gaXMgYSBzdHJpbmdcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0aWYob3B0aW9ucyA9PT0gJ29wZW4nKSB7XG5cdFx0XHR2YXIgaXRlbXMsXG5cdFx0XHRcdGl0ZW1PcHRzID0gX2lzSlEgPyBqcUVsLmRhdGEoJ21hZ25pZmljUG9wdXAnKSA6IGpxRWxbMF0ubWFnbmlmaWNQb3B1cCxcblx0XHRcdFx0aW5kZXggPSBwYXJzZUludChhcmd1bWVudHNbMV0sIDEwKSB8fCAwO1xuXG5cdFx0XHRpZihpdGVtT3B0cy5pdGVtcykge1xuXHRcdFx0XHRpdGVtcyA9IGl0ZW1PcHRzLml0ZW1zW2luZGV4XTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW1zID0ganFFbDtcblx0XHRcdFx0aWYoaXRlbU9wdHMuZGVsZWdhdGUpIHtcblx0XHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmZpbmQoaXRlbU9wdHMuZGVsZWdhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGl0ZW1zID0gaXRlbXMuZXEoIGluZGV4ICk7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX29wZW5DbGljayh7bWZwRWw6aXRlbXN9LCBqcUVsLCBpdGVtT3B0cyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKG1mcC5pc09wZW4pXG5cdFx0XHRcdG1mcFtvcHRpb25zXS5hcHBseShtZnAsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIGNsb25lIG9wdGlvbnMgb2JqXG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcblxuXHRcdC8qXG5cdFx0ICogQXMgWmVwdG8gZG9lc24ndCBzdXBwb3J0IC5kYXRhKCkgbWV0aG9kIGZvciBvYmplY3RzXG5cdFx0ICogYW5kIGl0IHdvcmtzIG9ubHkgaW4gbm9ybWFsIGJyb3dzZXJzXG5cdFx0ICogd2UgYXNzaWduIFwib3B0aW9uc1wiIG9iamVjdCBkaXJlY3RseSB0byB0aGUgRE9NIGVsZW1lbnQuIEZUVyFcblx0XHQgKi9cblx0XHRpZihfaXNKUSkge1xuXHRcdFx0anFFbC5kYXRhKCdtYWduaWZpY1BvcHVwJywgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxRWxbMF0ubWFnbmlmaWNQb3B1cCA9IG9wdGlvbnM7XG5cdFx0fVxuXG5cdFx0bWZwLmFkZEdyb3VwKGpxRWwsIG9wdGlvbnMpO1xuXG5cdH1cblx0cmV0dXJuIGpxRWw7XG59O1xuXG4vKj4+Y29yZSovXG5cbi8qPj5pbmxpbmUqL1xuXG52YXIgSU5MSU5FX05TID0gJ2lubGluZScsXG5cdF9oaWRkZW5DbGFzcyxcblx0X2lubGluZVBsYWNlaG9sZGVyLFxuXHRfbGFzdElubGluZUVsZW1lbnQsXG5cdF9wdXRJbmxpbmVFbGVtZW50c0JhY2sgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfbGFzdElubGluZUVsZW1lbnQpIHtcblx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlci5hZnRlciggX2xhc3RJbmxpbmVFbGVtZW50LmFkZENsYXNzKF9oaWRkZW5DbGFzcykgKS5kZXRhY2goKTtcblx0XHRcdF9sYXN0SW5saW5lRWxlbWVudCA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoSU5MSU5FX05TLCB7XG5cdG9wdGlvbnM6IHtcblx0XHRoaWRkZW5DbGFzczogJ2hpZGUnLCAvLyB3aWxsIGJlIGFwcGVuZGVkIHdpdGggYG1mcC1gIHByZWZpeFxuXHRcdG1hcmt1cDogJycsXG5cdFx0dE5vdEZvdW5kOiAnQ29udGVudCBub3QgZm91bmQnXG5cdH0sXG5cdHByb3RvOiB7XG5cblx0XHRpbml0SW5saW5lOiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKElOTElORV9OUyk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrSU5MSU5FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGdldElubGluZTogZnVuY3Rpb24oaXRlbSwgdGVtcGxhdGUpIHtcblxuXHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXG5cdFx0XHRpZihpdGVtLnNyYykge1xuXHRcdFx0XHR2YXIgaW5saW5lU3QgPSBtZnAuc3QuaW5saW5lLFxuXHRcdFx0XHRcdGVsID0gJChpdGVtLnNyYyk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB0YXJnZXQgZWxlbWVudCBoYXMgcGFyZW50IC0gd2UgcmVwbGFjZSBpdCB3aXRoIHBsYWNlaG9sZGVyIGFuZCBwdXQgaXQgYmFjayBhZnRlciBwb3B1cCBpcyBjbG9zZWRcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gZWxbMF0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRpZihwYXJlbnQgJiYgcGFyZW50LnRhZ05hbWUpIHtcblx0XHRcdFx0XHRcdGlmKCFfaW5saW5lUGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRcdFx0X2hpZGRlbkNsYXNzID0gaW5saW5lU3QuaGlkZGVuQ2xhc3M7XG5cdFx0XHRcdFx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlciA9IF9nZXRFbChfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdFx0XHRfaGlkZGVuQ2xhc3MgPSAnbWZwLScrX2hpZGRlbkNsYXNzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gcmVwbGFjZSB0YXJnZXQgaW5saW5lIGVsZW1lbnQgd2l0aCBwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0X2xhc3RJbmxpbmVFbGVtZW50ID0gZWwuYWZ0ZXIoX2lubGluZVBsYWNlaG9sZGVyKS5kZXRhY2goKS5yZW1vdmVDbGFzcyhfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBpbmxpbmVTdC50Tm90Rm91bmQpO1xuXHRcdFx0XHRcdGVsID0gJCgnPGRpdj4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGl0ZW0uaW5saW5lRWxlbWVudCA9IGVsO1xuXHRcdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCB7fSwgaXRlbSk7XG5cdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmlubGluZSovXG5cbi8qPj5hamF4Ki9cbnZhciBBSkFYX05TID0gJ2FqYXgnLFxuXHRfYWpheEN1cixcblx0X3JlbW92ZUFqYXhDdXJzb3IgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfYWpheEN1cikge1xuXHRcdFx0JChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhfYWpheEN1cik7XG5cdFx0fVxuXHR9LFxuXHRfZGVzdHJveUFqYXhSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblx0XHRpZihtZnAucmVxKSB7XG5cdFx0XHRtZnAucmVxLmFib3J0KCk7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoQUpBWF9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRzZXR0aW5nczogbnVsbCxcblx0XHRjdXJzb3I6ICdtZnAtYWpheC1jdXInLFxuXHRcdHRFcnJvcjogJzxhIGhyZWY9XCIldXJsJVwiPlRoZSBjb250ZW50PC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRBamF4OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKEFKQVhfTlMpO1xuXHRcdFx0X2FqYXhDdXIgPSBtZnAuc3QuYWpheC5jdXJzb3I7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0XHRfbWZwT24oJ0JlZm9yZUNoYW5nZS4nICsgQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0fSxcblx0XHRnZXRBamF4OiBmdW5jdGlvbihpdGVtKSB7XG5cblx0XHRcdGlmKF9hamF4Q3VyKSB7XG5cdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoX2FqYXhDdXIpO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdsb2FkaW5nJyk7XG5cblx0XHRcdHZhciBvcHRzID0gJC5leHRlbmQoe1xuXHRcdFx0XHR1cmw6IGl0ZW0uc3JjLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuXHRcdFx0XHRcdHZhciB0ZW1wID0ge1xuXHRcdFx0XHRcdFx0ZGF0YTpkYXRhLFxuXHRcdFx0XHRcdFx0eGhyOmpxWEhSXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdQYXJzZUFqYXgnLCB0ZW1wKTtcblxuXHRcdFx0XHRcdG1mcC5hcHBlbmRDb250ZW50KCAkKHRlbXAuZGF0YSksIEFKQVhfTlMgKTtcblxuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblxuXHRcdFx0XHRcdG1mcC5fc2V0Rm9jdXMoKTtcblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHRcdFx0fSwgMTYpO1xuXG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdBamF4Q29udGVudEFkZGVkJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRfcmVtb3ZlQWpheEN1cnNvcigpO1xuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSBpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBtZnAuc3QuYWpheC50RXJyb3IucmVwbGFjZSgnJXVybCUnLCBpdGVtLnNyYykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZnAuc3QuYWpheC5zZXR0aW5ncyk7XG5cblx0XHRcdG1mcC5yZXEgPSAkLmFqYXgob3B0cyk7XG5cblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+YWpheCovXG5cbi8qPj5pbWFnZSovXG52YXIgX2ltZ0ludGVydmFsLFxuXHRfZ2V0VGl0bGUgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYoaXRlbS5kYXRhICYmIGl0ZW0uZGF0YS50aXRsZSAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0cmV0dXJuIGl0ZW0uZGF0YS50aXRsZTtcblxuXHRcdHZhciBzcmMgPSBtZnAuc3QuaW1hZ2UudGl0bGVTcmM7XG5cblx0XHRpZihzcmMpIHtcblx0XHRcdGlmKCQuaXNGdW5jdGlvbihzcmMpKSB7XG5cdFx0XHRcdHJldHVybiBzcmMuY2FsbChtZnAsIGl0ZW0pO1xuXHRcdFx0fSBlbHNlIGlmKGl0ZW0uZWwpIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0uZWwuYXR0cihzcmMpIHx8ICcnO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gJyc7XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZSgnaW1hZ2UnLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdG1hcmt1cDogJzxkaXYgY2xhc3M9XCJtZnAtZmlndXJlXCI+Jytcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jbG9zZVwiPjwvZGl2PicrXG5cdFx0XHRcdFx0JzxmaWd1cmU+Jytcblx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWltZ1wiPjwvZGl2PicrXG5cdFx0XHRcdFx0XHQnPGZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtYm90dG9tLWJhclwiPicrXG5cdFx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtdGl0bGVcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNvdW50ZXJcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdFx0XHRcdCc8L2ZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHQnPC9maWd1cmU+Jytcblx0XHRcdFx0JzwvZGl2PicsXG5cdFx0Y3Vyc29yOiAnbWZwLXpvb20tb3V0LWN1cicsXG5cdFx0dGl0bGVTcmM6ICd0aXRsZScsXG5cdFx0dmVydGljYWxGaXQ6IHRydWUsXG5cdFx0dEVycm9yOiAnPGEgaHJlZj1cIiV1cmwlXCI+VGhlIGltYWdlPC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW1nU3QgPSBtZnAuc3QuaW1hZ2UsXG5cdFx0XHRcdG5zID0gJy5pbWFnZSc7XG5cblx0XHRcdG1mcC50eXBlcy5wdXNoKCdpbWFnZScpO1xuXG5cdFx0XHRfbWZwT24oT1BFTl9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5jdXJySXRlbS50eXBlID09PSAnaW1hZ2UnICYmIGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfd2luZG93Lm9mZigncmVzaXplJyArIEVWRU5UX05TKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oJ1Jlc2l6ZScrbnMsIG1mcC5yZXNpemVJbWFnZSk7XG5cdFx0XHRpZihtZnAuaXNMb3dJRSkge1xuXHRcdFx0XHRfbWZwT24oJ0FmdGVyQ2hhbmdlJywgbWZwLnJlc2l6ZUltYWdlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlc2l6ZUltYWdlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpdGVtID0gbWZwLmN1cnJJdGVtO1xuXHRcdFx0aWYoIWl0ZW0gfHwgIWl0ZW0uaW1nKSByZXR1cm47XG5cblx0XHRcdGlmKG1mcC5zdC5pbWFnZS52ZXJ0aWNhbEZpdCkge1xuXHRcdFx0XHR2YXIgZGVjciA9IDA7XG5cdFx0XHRcdC8vIGZpeCBib3gtc2l6aW5nIGluIGllNy84XG5cdFx0XHRcdGlmKG1mcC5pc0xvd0lFKSB7XG5cdFx0XHRcdFx0ZGVjciA9IHBhcnNlSW50KGl0ZW0uaW1nLmNzcygncGFkZGluZy10b3AnKSwgMTApICsgcGFyc2VJbnQoaXRlbS5pbWcuY3NzKCdwYWRkaW5nLWJvdHRvbScpLDEwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZy5jc3MoJ21heC1oZWlnaHQnLCBtZnAud0gtZGVjcik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfb25JbWFnZUhhc1NpemU6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdGlmKGl0ZW0uaW1nKSB7XG5cblx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblxuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtLmlzQ2hlY2tpbmdJbWdTaXplID0gZmFsc2U7XG5cblx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlSGFzU2l6ZScsIGl0ZW0pO1xuXG5cdFx0XHRcdGlmKGl0ZW0uaW1nSGlkZGVuKSB7XG5cdFx0XHRcdFx0aWYobWZwLmNvbnRlbnQpXG5cdFx0XHRcdFx0XHRtZnAuY29udGVudC5yZW1vdmVDbGFzcygnbWZwLWxvYWRpbmcnKTtcblxuXHRcdFx0XHRcdGl0ZW0uaW1nSGlkZGVuID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGdW5jdGlvbiB0aGF0IGxvb3BzIHVudGlsIHRoZSBpbWFnZSBoYXMgc2l6ZSB0byBkaXNwbGF5IGVsZW1lbnRzIHRoYXQgcmVseSBvbiBpdCBhc2FwXG5cdFx0ICovXG5cdFx0ZmluZEltYWdlU2l6ZTogZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHR2YXIgY291bnRlciA9IDAsXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdLFxuXHRcdFx0XHRtZnBTZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKGRlbGF5KSB7XG5cblx0XHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZGVjZWxlcmF0aW5nIGludGVydmFsIHRoYXQgY2hlY2tzIGZvciBzaXplIG9mIGFuIGltYWdlXG5cdFx0XHRcdFx0X2ltZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmKGNvdW50ZXIgPiAyMDApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb3VudGVyKys7XG5cdFx0XHRcdFx0XHRpZihjb3VudGVyID09PSAzKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDEwKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihjb3VudGVyID09PSA0MCkge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCg1MCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY291bnRlciA9PT0gMTAwKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDUwMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgZGVsYXkpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRtZnBTZXRJbnRlcnZhbCgxKTtcblx0XHR9LFxuXG5cdFx0Z2V0SW1hZ2U6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cblx0XHRcdHZhciBndWFyZCA9IDAsXG5cblx0XHRcdFx0Ly8gaW1hZ2UgbG9hZCBjb21wbGV0ZSBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZENvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aWYgKGl0ZW0uaW1nWzBdLmNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uaW1nLm9mZignLm1mcGxvYWRlcicpO1xuXG5cdFx0XHRcdFx0XHRcdGlmKGl0ZW0gPT09IG1mcC5jdXJySXRlbSl7XG5cdFx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblxuXHRcdFx0XHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRpdGVtLmxvYWRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlTG9hZENvbXBsZXRlJyk7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBpZiBpbWFnZSBjb21wbGV0ZSBjaGVjayBmYWlscyAyMDAgdGltZXMgKDIwIHNlYyksIHdlIGFzc3VtZSB0aGF0IHRoZXJlIHdhcyBhbiBlcnJvci5cblx0XHRcdFx0XHRcdFx0Z3VhcmQrKztcblx0XHRcdFx0XHRcdFx0aWYoZ3VhcmQgPCAyMDApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KG9uTG9hZENvbXBsZXRlLDEwMCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0b25Mb2FkRXJyb3IoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBpbWFnZSBlcnJvciBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZEVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcub2ZmKCcubWZwbG9hZGVyJyk7XG5cdFx0XHRcdFx0XHRpZihpdGVtID09PSBtZnAuY3Vyckl0ZW0pe1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIGltZ1N0LnRFcnJvci5yZXBsYWNlKCcldXJsJScsIGl0ZW0uc3JjKSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0aW1nU3QgPSBtZnAuc3QuaW1hZ2U7XG5cblxuXHRcdFx0dmFyIGVsID0gdGVtcGxhdGUuZmluZCgnLm1mcC1pbWcnKTtcblx0XHRcdGlmKGVsLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cdFx0XHRcdGltZy5jbGFzc05hbWUgPSAnbWZwLWltZyc7XG5cdFx0XHRcdGlmKGl0ZW0uZWwgJiYgaXRlbS5lbC5maW5kKCdpbWcnKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRpbWcuYWx0ID0gaXRlbS5lbC5maW5kKCdpbWcnKS5hdHRyKCdhbHQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZyA9ICQoaW1nKS5vbignbG9hZC5tZnBsb2FkZXInLCBvbkxvYWRDb21wbGV0ZSkub24oJ2Vycm9yLm1mcGxvYWRlcicsIG9uTG9hZEVycm9yKTtcblx0XHRcdFx0aW1nLnNyYyA9IGl0ZW0uc3JjO1xuXG5cdFx0XHRcdC8vIHdpdGhvdXQgY2xvbmUoKSBcImVycm9yXCIgZXZlbnQgaXMgbm90IGZpcmluZyB3aGVuIElNRyBpcyByZXBsYWNlZCBieSBuZXcgSU1HXG5cdFx0XHRcdC8vIFRPRE86IGZpbmQgYSB3YXkgdG8gYXZvaWQgc3VjaCBjbG9uaW5nXG5cdFx0XHRcdGlmKGVsLmlzKCdpbWcnKSkge1xuXHRcdFx0XHRcdGl0ZW0uaW1nID0gaXRlbS5pbWcuY2xvbmUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdO1xuXHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZighaW1nLndpZHRoKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwge1xuXHRcdFx0XHR0aXRsZTogX2dldFRpdGxlKGl0ZW0pLFxuXHRcdFx0XHRpbWdfcmVwbGFjZVdpdGg6IGl0ZW0uaW1nXG5cdFx0XHR9LCBpdGVtKTtcblxuXHRcdFx0bWZwLnJlc2l6ZUltYWdlKCk7XG5cblx0XHRcdGlmKGl0ZW0uaGFzU2l6ZSkge1xuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblxuXHRcdFx0XHRpZihpdGVtLmxvYWRFcnJvcikge1xuXHRcdFx0XHRcdHRlbXBsYXRlLmFkZENsYXNzKCdtZnAtbG9hZGluZycpO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgaW1nU3QudEVycm9yLnJlcGxhY2UoJyV1cmwlJywgaXRlbS5zcmMpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2xvYWRpbmcnKTtcblx0XHRcdGl0ZW0ubG9hZGluZyA9IHRydWU7XG5cblx0XHRcdGlmKCFpdGVtLmhhc1NpemUpIHtcblx0XHRcdFx0aXRlbS5pbWdIaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR0ZW1wbGF0ZS5hZGRDbGFzcygnbWZwLWxvYWRpbmcnKTtcblx0XHRcdFx0bWZwLmZpbmRJbWFnZVNpemUoaXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+aW1hZ2UqL1xuXG4vKj4+em9vbSovXG52YXIgaGFzTW96VHJhbnNmb3JtLFxuXHRnZXRIYXNNb3pUcmFuc2Zvcm0gPSBmdW5jdGlvbigpIHtcblx0XHRpZihoYXNNb3pUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aGFzTW96VHJhbnNmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRyZXR1cm4gaGFzTW96VHJhbnNmb3JtO1xuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoJ3pvb20nLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdGVuYWJsZWQ6IGZhbHNlLFxuXHRcdGVhc2luZzogJ2Vhc2UtaW4tb3V0Jyxcblx0XHRkdXJhdGlvbjogMzAwLFxuXHRcdG9wZW5lcjogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIGVsZW1lbnQuaXMoJ2ltZycpID8gZWxlbWVudCA6IGVsZW1lbnQuZmluZCgnaW1nJyk7XG5cdFx0fVxuXHR9LFxuXG5cdHByb3RvOiB7XG5cblx0XHRpbml0Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgem9vbVN0ID0gbWZwLnN0Lnpvb20sXG5cdFx0XHRcdG5zID0gJy56b29tJyxcblx0XHRcdFx0aW1hZ2U7XG5cblx0XHRcdGlmKCF6b29tU3QuZW5hYmxlZCB8fCAhbWZwLnN1cHBvcnRzVHJhbnNpdGlvbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkdXJhdGlvbiA9IHpvb21TdC5kdXJhdGlvbixcblx0XHRcdFx0Z2V0RWxUb0FuaW1hdGUgPSBmdW5jdGlvbihpbWFnZSkge1xuXHRcdFx0XHRcdHZhciBuZXdJbWcgPSBpbWFnZS5jbG9uZSgpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignY2xhc3MnKS5hZGRDbGFzcygnbWZwLWFuaW1hdGVkLWltYWdlJyksXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uID0gJ2FsbCAnKyh6b29tU3QuZHVyYXRpb24vMTAwMCkrJ3MgJyArIHpvb21TdC5lYXNpbmcsXG5cdFx0XHRcdFx0XHRjc3NPYmogPSB7XG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiAnZml4ZWQnLFxuXHRcdFx0XHRcdFx0XHR6SW5kZXg6IDk5OTksXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0XHRcdFx0Jy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSc6ICdoaWRkZW4nXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0dCA9ICd0cmFuc2l0aW9uJztcblxuXHRcdFx0XHRcdGNzc09ialsnLXdlYmtpdC0nK3RdID0gY3NzT2JqWyctbW96LScrdF0gPSBjc3NPYmpbJy1vLScrdF0gPSBjc3NPYmpbdF0gPSB0cmFuc2l0aW9uO1xuXG5cdFx0XHRcdFx0bmV3SW1nLmNzcyhjc3NPYmopO1xuXHRcdFx0XHRcdHJldHVybiBuZXdJbWc7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNob3dNYWluQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9wZW5UaW1lb3V0LFxuXHRcdFx0XHRhbmltYXRlZEltZztcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJytucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0Ly8gQmFzaWNhbGx5LCBhbGwgY29kZSBiZWxvdyBkb2VzIGlzIGNsb25lcyBleGlzdGluZyBpbWFnZSwgcHV0cyBpbiBvbiB0b3Agb2YgdGhlIGN1cnJlbnQgb25lIGFuZCBhbmltYXRlZCBpdFxuXG5cdFx0XHRcdFx0aW1hZ2UgPSBtZnAuX2dldEl0ZW1Ub1pvb20oKTtcblxuXHRcdFx0XHRcdGlmKCFpbWFnZSkge1xuXHRcdFx0XHRcdFx0c2hvd01haW5Db250ZW50KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cblx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCkgKTtcblxuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cblx0XHRcdFx0XHRvcGVuVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCB0cnVlICkgKTtcblx0XHRcdFx0XHRcdG9wZW5UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0XHRzaG93TWFpbkNvbnRlbnQoKTtcblxuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGltYWdlID0gYW5pbWF0ZWRJbWcgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdab29tQW5pbWF0aW9uRW5kZWQnKTtcblx0XHRcdFx0XHRcdFx0fSwgMTYpOyAvLyBhdm9pZCBibGluayB3aGVuIHN3aXRjaGluZyBpbWFnZXNcblxuXHRcdFx0XHRcdFx0fSwgZHVyYXRpb24pOyAvLyB0aGlzIHRpbWVvdXQgZXF1YWxzIGFuaW1hdGlvbiBkdXJhdGlvblxuXG5cdFx0XHRcdFx0fSwgMTYpOyAvLyBieSBhZGRpbmcgdGhpcyB0aW1lb3V0IHdlIGF2b2lkIHNob3J0IGdsaXRjaCBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvblxuXG5cblx0XHRcdFx0XHQvLyBMb3RzIG9mIHRpbWVvdXRzLi4uXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0X21mcE9uKEJFRk9SRV9DTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cblx0XHRcdFx0XHRtZnAuc3QucmVtb3ZhbERlbGF5ID0gZHVyYXRpb247XG5cblx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdGltYWdlID0gbWZwLl9nZXRJdGVtVG9ab29tKCk7XG5cdFx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCh0cnVlKSApO1xuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQoKSApO1xuXHRcdFx0XHRcdH0sIDE2KTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLl9hbGxvd1pvb20oKSkge1xuXHRcdFx0XHRcdHNob3dNYWluQ29udGVudCgpO1xuXHRcdFx0XHRcdGlmKGFuaW1hdGVkSW1nKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5yZW1vdmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aW1hZ2UgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0X2FsbG93Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gbWZwLmN1cnJJdGVtLnR5cGUgPT09ICdpbWFnZSc7XG5cdFx0fSxcblxuXHRcdF9nZXRJdGVtVG9ab29tOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKG1mcC5jdXJySXRlbS5oYXNTaXplKSB7XG5cdFx0XHRcdHJldHVybiBtZnAuY3Vyckl0ZW0uaW1nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBHZXQgZWxlbWVudCBwb3N0aW9uIHJlbGF0aXZlIHRvIHZpZXdwb3J0XG5cdFx0X2dldE9mZnNldDogZnVuY3Rpb24oaXNMYXJnZSkge1xuXHRcdFx0dmFyIGVsO1xuXHRcdFx0aWYoaXNMYXJnZSkge1xuXHRcdFx0XHRlbCA9IG1mcC5jdXJySXRlbS5pbWc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbCA9IG1mcC5zdC56b29tLm9wZW5lcihtZnAuY3Vyckl0ZW0uZWwgfHwgbWZwLmN1cnJJdGVtKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG9mZnNldCA9IGVsLm9mZnNldCgpO1xuXHRcdFx0dmFyIHBhZGRpbmdUb3AgPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctdG9wJyksMTApO1xuXHRcdFx0dmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctYm90dG9tJyksMTApO1xuXHRcdFx0b2Zmc2V0LnRvcCAtPSAoICQod2luZG93KS5zY3JvbGxUb3AoKSAtIHBhZGRpbmdUb3AgKTtcblxuXG5cdFx0XHQvKlxuXG5cdFx0XHRBbmltYXRpbmcgbGVmdCArIHRvcCArIHdpZHRoL2hlaWdodCBsb29rcyBnbGl0Y2h5IGluIEZpcmVmb3gsIGJ1dCBwZXJmZWN0IGluIENocm9tZS4gQW5kIHZpY2UtdmVyc2EuXG5cblx0XHRcdCAqL1xuXHRcdFx0dmFyIG9iaiA9IHtcblx0XHRcdFx0d2lkdGg6IGVsLndpZHRoKCksXG5cdFx0XHRcdC8vIGZpeCBaZXB0byBoZWlnaHQrcGFkZGluZyBpc3N1ZVxuXHRcdFx0XHRoZWlnaHQ6IChfaXNKUSA/IGVsLmlubmVySGVpZ2h0KCkgOiBlbFswXS5vZmZzZXRIZWlnaHQpIC0gcGFkZGluZ0JvdHRvbSAtIHBhZGRpbmdUb3Bcblx0XHRcdH07XG5cblx0XHRcdC8vIEkgaGF0ZSB0byBkbyB0aGlzLCBidXQgdGhlcmUgaXMgbm8gYW5vdGhlciBvcHRpb25cblx0XHRcdGlmKCBnZXRIYXNNb3pUcmFuc2Zvcm0oKSApIHtcblx0XHRcdFx0b2JqWyctbW96LXRyYW5zZm9ybSddID0gb2JqWyd0cmFuc2Zvcm0nXSA9ICd0cmFuc2xhdGUoJyArIG9mZnNldC5sZWZ0ICsgJ3B4LCcgKyBvZmZzZXQudG9wICsgJ3B4KSc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvYmoubGVmdCA9IG9mZnNldC5sZWZ0O1xuXHRcdFx0XHRvYmoudG9wID0gb2Zmc2V0LnRvcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXG5cdH1cbn0pO1xuXG5cblxuLyo+Pnpvb20qL1xuXG4vKj4+aWZyYW1lKi9cblxudmFyIElGUkFNRV9OUyA9ICdpZnJhbWUnLFxuXHRfZW1wdHlQYWdlID0gJy8vYWJvdXQ6YmxhbmsnLFxuXG5cdF9maXhJZnJhbWVCdWdzID0gZnVuY3Rpb24oaXNTaG93aW5nKSB7XG5cdFx0aWYobWZwLmN1cnJUZW1wbGF0ZVtJRlJBTUVfTlNdKSB7XG5cdFx0XHR2YXIgZWwgPSBtZnAuY3VyclRlbXBsYXRlW0lGUkFNRV9OU10uZmluZCgnaWZyYW1lJyk7XG5cdFx0XHRpZihlbC5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gcmVzZXQgc3JjIGFmdGVyIHRoZSBwb3B1cCBpcyBjbG9zZWQgdG8gYXZvaWQgXCJ2aWRlbyBrZWVwcyBwbGF5aW5nIGFmdGVyIHBvcHVwIGlzIGNsb3NlZFwiIGJ1Z1xuXHRcdFx0XHRpZighaXNTaG93aW5nKSB7XG5cdFx0XHRcdFx0ZWxbMF0uc3JjID0gX2VtcHR5UGFnZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElFOCBibGFjayBzY3JlZW4gYnVnIGZpeFxuXHRcdFx0XHRpZihtZnAuaXNJRTgpIHtcblx0XHRcdFx0XHRlbC5jc3MoJ2Rpc3BsYXknLCBpc1Nob3dpbmcgPyAnYmxvY2snIDogJ25vbmUnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKElGUkFNRV9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRtYXJrdXA6ICc8ZGl2IGNsYXNzPVwibWZwLWlmcmFtZS1zY2FsZXJcIj4nK1xuXHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNsb3NlXCI+PC9kaXY+Jytcblx0XHRcdFx0XHQnPGlmcmFtZSBjbGFzcz1cIm1mcC1pZnJhbWVcIiBzcmM9XCIvL2Fib3V0OmJsYW5rXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPicrXG5cdFx0XHRcdCc8L2Rpdj4nLFxuXG5cdFx0c3JjQWN0aW9uOiAnaWZyYW1lX3NyYycsXG5cblx0XHQvLyB3ZSBkb24ndCBjYXJlIGFuZCBzdXBwb3J0IG9ubHkgb25lIGRlZmF1bHQgdHlwZSBvZiBVUkwgYnkgZGVmYXVsdFxuXHRcdHBhdHRlcm5zOiB7XG5cdFx0XHR5b3V0dWJlOiB7XG5cdFx0XHRcdGluZGV4OiAneW91dHViZS5jb20nLFxuXHRcdFx0XHRpZDogJ3Y9Jyxcblx0XHRcdFx0c3JjOiAnLy93d3cueW91dHViZS5jb20vZW1iZWQvJWlkJT9hdXRvcGxheT0xJ1xuXHRcdFx0fSxcblx0XHRcdHZpbWVvOiB7XG5cdFx0XHRcdGluZGV4OiAndmltZW8uY29tLycsXG5cdFx0XHRcdGlkOiAnLycsXG5cdFx0XHRcdHNyYzogJy8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8laWQlP2F1dG9wbGF5PTEnXG5cdFx0XHR9LFxuXHRcdFx0Z21hcHM6IHtcblx0XHRcdFx0aW5kZXg6ICcvL21hcHMuZ29vZ2xlLicsXG5cdFx0XHRcdHNyYzogJyVpZCUmb3V0cHV0PWVtYmVkJ1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJZnJhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnR5cGVzLnB1c2goSUZSQU1FX05TKTtcblxuXHRcdFx0X21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkge1xuXHRcdFx0XHRpZihwcmV2VHlwZSAhPT0gbmV3VHlwZSkge1xuXHRcdFx0XHRcdGlmKHByZXZUeXBlID09PSBJRlJBTUVfTlMpIHtcblx0XHRcdFx0XHRcdF9maXhJZnJhbWVCdWdzKCk7IC8vIGlmcmFtZSBpZiByZW1vdmVkXG5cdFx0XHRcdFx0fSBlbHNlIGlmKG5ld1R5cGUgPT09IElGUkFNRV9OUykge1xuXHRcdFx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3ModHJ1ZSk7IC8vIGlmcmFtZSBpcyBzaG93aW5nXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9Ly8gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gaWZyYW1lIHNvdXJjZSBpcyBzd2l0Y2hlZCwgZG9uJ3QgZG8gYW55dGhpbmdcblx0XHRcdFx0Ly99XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UICsgJy4nICsgSUZSQU1FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3MoKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRnZXRJZnJhbWU6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cdFx0XHR2YXIgZW1iZWRTcmMgPSBpdGVtLnNyYztcblx0XHRcdHZhciBpZnJhbWVTdCA9IG1mcC5zdC5pZnJhbWU7XG5cblx0XHRcdCQuZWFjaChpZnJhbWVTdC5wYXR0ZXJucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVtYmVkU3JjLmluZGV4T2YoIHRoaXMuaW5kZXggKSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYodGhpcy5pZCkge1xuXHRcdFx0XHRcdFx0aWYodHlwZW9mIHRoaXMuaWQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0XHRcdGVtYmVkU3JjID0gZW1iZWRTcmMuc3Vic3RyKGVtYmVkU3JjLmxhc3RJbmRleE9mKHRoaXMuaWQpK3RoaXMuaWQubGVuZ3RoLCBlbWJlZFNyYy5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZW1iZWRTcmMgPSB0aGlzLmlkLmNhbGwoIHRoaXMsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVtYmVkU3JjID0gdGhpcy5zcmMucmVwbGFjZSgnJWlkJScsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBkYXRhT2JqID0ge307XG5cdFx0XHRpZihpZnJhbWVTdC5zcmNBY3Rpb24pIHtcblx0XHRcdFx0ZGF0YU9ialtpZnJhbWVTdC5zcmNBY3Rpb25dID0gZW1iZWRTcmM7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCBkYXRhT2JqLCBpdGVtKTtcblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdH1cblx0fVxufSk7XG5cblxuXG4vKj4+aWZyYW1lKi9cblxuLyo+PmdhbGxlcnkqL1xuLyoqXG4gKiBHZXQgbG9vcGVkIGluZGV4IGRlcGVuZGluZyBvbiBudW1iZXIgb2Ygc2xpZGVzXG4gKi9cbnZhciBfZ2V0TG9vcGVkSWQgPSBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBudW1TbGlkZXMgPSBtZnAuaXRlbXMubGVuZ3RoO1xuXHRcdGlmKGluZGV4ID4gbnVtU2xpZGVzIC0gMSkge1xuXHRcdFx0cmV0dXJuIGluZGV4IC0gbnVtU2xpZGVzO1xuXHRcdH0gZWxzZSAgaWYoaW5kZXggPCAwKSB7XG5cdFx0XHRyZXR1cm4gbnVtU2xpZGVzICsgaW5kZXg7XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleDtcblx0fSxcblx0X3JlcGxhY2VDdXJyVG90YWwgPSBmdW5jdGlvbih0ZXh0LCBjdXJyLCB0b3RhbCkge1xuXHRcdHJldHVybiB0ZXh0LnJlcGxhY2UoLyVjdXJyJS9naSwgY3VyciArIDEpLnJlcGxhY2UoLyV0b3RhbCUvZ2ksIHRvdGFsKTtcblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKCdnYWxsZXJ5Jywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRhcnJvd01hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWFycm93IG1mcC1hcnJvdy0lZGlyJVwiPjwvYnV0dG9uPicsXG5cdFx0cHJlbG9hZDogWzAsMl0sXG5cdFx0bmF2aWdhdGVCeUltZ0NsaWNrOiB0cnVlLFxuXHRcdGFycm93czogdHJ1ZSxcblxuXHRcdHRQcmV2OiAnUHJldmlvdXMgKExlZnQgYXJyb3cga2V5KScsXG5cdFx0dE5leHQ6ICdOZXh0IChSaWdodCBhcnJvdyBrZXkpJyxcblx0XHR0Q291bnRlcjogJyVjdXJyJSBvZiAldG90YWwlJ1xuXHR9LFxuXG5cdHByb3RvOiB7XG5cdFx0aW5pdEdhbGxlcnk6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgZ1N0ID0gbWZwLnN0LmdhbGxlcnksXG5cdFx0XHRcdG5zID0gJy5tZnAtZ2FsbGVyeSc7XG5cblx0XHRcdG1mcC5kaXJlY3Rpb24gPSB0cnVlOyAvLyB0cnVlIC0gbmV4dCwgZmFsc2UgLSBwcmV2XG5cblx0XHRcdGlmKCFnU3QgfHwgIWdTdC5lbmFibGVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtZ2FsbGVyeSc7XG5cblx0XHRcdF9tZnBPbihPUEVOX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRpZihnU3QubmF2aWdhdGVCeUltZ0NsaWNrKSB7XG5cdFx0XHRcdFx0bWZwLndyYXAub24oJ2NsaWNrJytucywgJy5tZnAtaW1nJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihtZnAuaXRlbXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfZG9jdW1lbnQub24oJ2tleWRvd24nK25zLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcblx0XHRcdFx0XHRcdG1mcC5wcmV2KCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XG5cdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdVcGRhdGVTdGF0dXMnK25zLCBmdW5jdGlvbihlLCBkYXRhKSB7XG5cdFx0XHRcdGlmKGRhdGEudGV4dCkge1xuXHRcdFx0XHRcdGRhdGEudGV4dCA9IF9yZXBsYWNlQ3VyclRvdGFsKGRhdGEudGV4dCwgbWZwLmN1cnJJdGVtLmluZGV4LCBtZnAuaXRlbXMubGVuZ3RoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihNQVJLVVBfUEFSU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKGUsIGVsZW1lbnQsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHR2YXIgbCA9IG1mcC5pdGVtcy5sZW5ndGg7XG5cdFx0XHRcdHZhbHVlcy5jb3VudGVyID0gbCA+IDEgPyBfcmVwbGFjZUN1cnJUb3RhbChnU3QudENvdW50ZXIsIGl0ZW0uaW5kZXgsIGwpIDogJyc7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJyArIG5zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLml0ZW1zLmxlbmd0aCA+IDEgJiYgZ1N0LmFycm93cyAmJiAhbWZwLmFycm93TGVmdCkge1xuXHRcdFx0XHRcdHZhciBtYXJrdXAgPSBnU3QuYXJyb3dNYXJrdXAsXG5cdFx0XHRcdFx0XHRhcnJvd0xlZnQgPSBtZnAuYXJyb3dMZWZ0ID0gJCggbWFya3VwLnJlcGxhY2UoLyV0aXRsZSUvZ2ksIGdTdC50UHJldikucmVwbGFjZSgvJWRpciUvZ2ksICdsZWZ0JykgKS5hZGRDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSxcblx0XHRcdFx0XHRcdGFycm93UmlnaHQgPSBtZnAuYXJyb3dSaWdodCA9ICQoIG1hcmt1cC5yZXBsYWNlKC8ldGl0bGUlL2dpLCBnU3QudE5leHQpLnJlcGxhY2UoLyVkaXIlL2dpLCAncmlnaHQnKSApLmFkZENsYXNzKFBSRVZFTlRfQ0xPU0VfQ0xBU1MpO1xuXG5cdFx0XHRcdFx0YXJyb3dMZWZ0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLnByZXYoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRhcnJvd1JpZ2h0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdG1mcC5jb250YWluZXIuYXBwZW5kKGFycm93TGVmdC5hZGQoYXJyb3dSaWdodCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENIQU5HRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fcHJlbG9hZFRpbWVvdXQpIGNsZWFyVGltZW91dChtZnAuX3ByZWxvYWRUaW1lb3V0KTtcblxuXHRcdFx0XHRtZnAuX3ByZWxvYWRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZnAucHJlbG9hZE5lYXJieUltYWdlcygpO1xuXHRcdFx0XHRcdG1mcC5fcHJlbG9hZFRpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHR9LCAxNik7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfZG9jdW1lbnQub2ZmKG5zKTtcblx0XHRcdFx0bWZwLndyYXAub2ZmKCdjbGljaycrbnMpO1xuXHRcdFx0XHRtZnAuYXJyb3dSaWdodCA9IG1mcC5hcnJvd0xlZnQgPSBudWxsO1xuXHRcdFx0fSk7XG5cblx0XHR9LFxuXHRcdG5leHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IHRydWU7XG5cdFx0XHRtZnAuaW5kZXggPSBfZ2V0TG9vcGVkSWQobWZwLmluZGV4ICsgMSk7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZXY6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IGZhbHNlO1xuXHRcdFx0bWZwLmluZGV4ID0gX2dldExvb3BlZElkKG1mcC5pbmRleCAtIDEpO1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRnb1RvOiBmdW5jdGlvbihuZXdJbmRleCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IChuZXdJbmRleCA+PSBtZnAuaW5kZXgpO1xuXHRcdFx0bWZwLmluZGV4ID0gbmV3SW5kZXg7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZWxvYWROZWFyYnlJbWFnZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHAgPSBtZnAuc3QuZ2FsbGVyeS5wcmVsb2FkLFxuXHRcdFx0XHRwcmVsb2FkQmVmb3JlID0gTWF0aC5taW4ocFswXSwgbWZwLml0ZW1zLmxlbmd0aCksXG5cdFx0XHRcdHByZWxvYWRBZnRlciA9IE1hdGgubWluKHBbMV0sIG1mcC5pdGVtcy5sZW5ndGgpLFxuXHRcdFx0XHRpO1xuXG5cdFx0XHRmb3IoaSA9IDE7IGkgPD0gKG1mcC5kaXJlY3Rpb24gPyBwcmVsb2FkQWZ0ZXIgOiBwcmVsb2FkQmVmb3JlKTsgaSsrKSB7XG5cdFx0XHRcdG1mcC5fcHJlbG9hZEl0ZW0obWZwLmluZGV4K2kpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChtZnAuZGlyZWN0aW9uID8gcHJlbG9hZEJlZm9yZSA6IHByZWxvYWRBZnRlcik7IGkrKykge1xuXHRcdFx0XHRtZnAuX3ByZWxvYWRJdGVtKG1mcC5pbmRleC1pKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9wcmVsb2FkSXRlbTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdGluZGV4ID0gX2dldExvb3BlZElkKGluZGV4KTtcblxuXHRcdFx0aWYobWZwLml0ZW1zW2luZGV4XS5wcmVsb2FkZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF07XG5cdFx0XHRpZighaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0aXRlbSA9IG1mcC5wYXJzZUVsKCBpbmRleCApO1xuXHRcdFx0fVxuXG5cdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWQnLCBpdGVtKTtcblxuXHRcdFx0aWYoaXRlbS50eXBlID09PSAnaW1hZ2UnKSB7XG5cdFx0XHRcdGl0ZW0uaW1nID0gJCgnPGltZyBjbGFzcz1cIm1mcC1pbWdcIiAvPicpLm9uKCdsb2FkLm1mcGxvYWRlcicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0pLm9uKCdlcnJvci5tZnBsb2FkZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWRFcnJvcicsIGl0ZW0pO1xuXHRcdFx0XHR9KS5hdHRyKCdzcmMnLCBpdGVtLnNyYyk7XG5cdFx0XHR9XG5cblxuXHRcdFx0aXRlbS5wcmVsb2FkZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5nYWxsZXJ5Ki9cblxuLyo+PnJldGluYSovXG5cbnZhciBSRVRJTkFfTlMgPSAncmV0aW5hJztcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKFJFVElOQV9OUywge1xuXHRvcHRpb25zOiB7XG5cdFx0cmVwbGFjZVNyYzogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0cmV0dXJuIGl0ZW0uc3JjLnJlcGxhY2UoL1xcLlxcdyskLywgZnVuY3Rpb24obSkgeyByZXR1cm4gJ0AyeCcgKyBtOyB9KTtcblx0XHR9LFxuXHRcdHJhdGlvOiAxIC8vIEZ1bmN0aW9uIG9yIG51bWJlci4gIFNldCB0byAxIHRvIGRpc2FibGUuXG5cdH0sXG5cdHByb3RvOiB7XG5cdFx0aW5pdFJldGluYTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEpIHtcblxuXHRcdFx0XHR2YXIgc3QgPSBtZnAuc3QucmV0aW5hLFxuXHRcdFx0XHRcdHJhdGlvID0gc3QucmF0aW87XG5cblx0XHRcdFx0cmF0aW8gPSAhaXNOYU4ocmF0aW8pID8gcmF0aW8gOiByYXRpbygpO1xuXG5cdFx0XHRcdGlmKHJhdGlvID4gMSkge1xuXHRcdFx0XHRcdF9tZnBPbignSW1hZ2VIYXNTaXplJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcuY3NzKHtcblx0XHRcdFx0XHRcdFx0J21heC13aWR0aCc6IGl0ZW0uaW1nWzBdLm5hdHVyYWxXaWR0aCAvIHJhdGlvLFxuXHRcdFx0XHRcdFx0XHQnd2lkdGgnOiAnMTAwJSdcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdF9tZnBPbignRWxlbWVudFBhcnNlJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5zcmMgPSBzdC5yZXBsYWNlU3JjKGl0ZW0sIHJhdGlvKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PnJldGluYSovXG4gX2NoZWNrSW5zdGFuY2UoKTsgfSkpOyIsIiIsIi8qISBQaG90b1N3aXBlIERlZmF1bHQgVUkgLSA0LjEuMSAtIDIwMTUtMTItMjRcbiogaHR0cDovL3Bob3Rvc3dpcGUuY29tXG4qIENvcHlyaWdodCAoYykgMjAxNSBEbWl0cnkgU2VtZW5vdjsgKi9cbi8qKlxuKlxuKiBVSSBvbiB0b3Agb2YgbWFpbiBzbGlkaW5nIGFyZWEgKGNhcHRpb24sIGFycm93cywgY2xvc2UgYnV0dG9uLCBldGMuKS5cbiogQnVpbHQganVzdCB1c2luZyBwdWJsaWMgbWV0aG9kcy9wcm9wZXJ0aWVzIG9mIFBob3RvU3dpcGUuXG4qIFxuKi9cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkgeyBcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdGRlZmluZShmYWN0b3J5KTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0fSBlbHNlIHtcblx0XHRyb290LlBob3RvU3dpcGVVSV9EZWZhdWx0ID0gZmFjdG9yeSgpO1xuXHR9XG59KSh0aGlzLCBmdW5jdGlvbiAoKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXG5cblxudmFyIFBob3RvU3dpcGVVSV9EZWZhdWx0ID1cbiBmdW5jdGlvbihwc3dwLCBmcmFtZXdvcmspIHtcblxuXHR2YXIgdWkgPSB0aGlzO1xuXHR2YXIgX292ZXJsYXlVSVVwZGF0ZWQgPSBmYWxzZSxcblx0XHRfY29udHJvbHNWaXNpYmxlID0gdHJ1ZSxcblx0XHRfZnVsbHNjcmVuQVBJLFxuXHRcdF9jb250cm9scyxcblx0XHRfY2FwdGlvbkNvbnRhaW5lcixcblx0XHRfZmFrZUNhcHRpb25Db250YWluZXIsXG5cdFx0X2luZGV4SW5kaWNhdG9yLFxuXHRcdF9zaGFyZUJ1dHRvbixcblx0XHRfc2hhcmVNb2RhbCxcblx0XHRfc2hhcmVNb2RhbEhpZGRlbiA9IHRydWUsXG5cdFx0X2luaXRhbENsb3NlT25TY3JvbGxWYWx1ZSxcblx0XHRfaXNJZGxlLFxuXHRcdF9saXN0ZW4sXG5cblx0XHRfbG9hZGluZ0luZGljYXRvcixcblx0XHRfbG9hZGluZ0luZGljYXRvckhpZGRlbixcblx0XHRfbG9hZGluZ0luZGljYXRvclRpbWVvdXQsXG5cblx0XHRfZ2FsbGVyeUhhc09uZVNsaWRlLFxuXG5cdFx0X29wdGlvbnMsXG5cdFx0X2RlZmF1bHRVSU9wdGlvbnMgPSB7XG5cdFx0XHRiYXJzU2l6ZToge3RvcDo0NCwgYm90dG9tOidhdXRvJ30sXG5cdFx0XHRjbG9zZUVsQ2xhc3NlczogWydpdGVtJywgJ2NhcHRpb24nLCAnem9vbS13cmFwJywgJ3VpJywgJ3RvcC1iYXInXSwgXG5cdFx0XHR0aW1lVG9JZGxlOiA0MDAwLCBcblx0XHRcdHRpbWVUb0lkbGVPdXRzaWRlOiAxMDAwLFxuXHRcdFx0bG9hZGluZ0luZGljYXRvckRlbGF5OiAxMDAwLCAvLyAyc1xuXHRcdFx0XG5cdFx0XHRhZGRDYXB0aW9uSFRNTEZuOiBmdW5jdGlvbihpdGVtLCBjYXB0aW9uRWwgLyosIGlzRmFrZSAqLykge1xuXHRcdFx0XHRpZighaXRlbS50aXRsZSkge1xuXHRcdFx0XHRcdGNhcHRpb25FbC5jaGlsZHJlblswXS5pbm5lckhUTUwgPSAnJztcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2FwdGlvbkVsLmNoaWxkcmVuWzBdLmlubmVySFRNTCA9IGl0ZW0udGl0bGU7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Y2xvc2VFbDp0cnVlLFxuXHRcdFx0Y2FwdGlvbkVsOiB0cnVlLFxuXHRcdFx0ZnVsbHNjcmVlbkVsOiB0cnVlLFxuXHRcdFx0em9vbUVsOiB0cnVlLFxuXHRcdFx0c2hhcmVFbDogdHJ1ZSxcblx0XHRcdGNvdW50ZXJFbDogdHJ1ZSxcblx0XHRcdGFycm93RWw6IHRydWUsXG5cdFx0XHRwcmVsb2FkZXJFbDogdHJ1ZSxcblxuXHRcdFx0dGFwVG9DbG9zZTogZmFsc2UsXG5cdFx0XHR0YXBUb1RvZ2dsZUNvbnRyb2xzOiB0cnVlLFxuXG5cdFx0XHRjbGlja1RvQ2xvc2VOb25ab29tYWJsZTogdHJ1ZSxcblxuXHRcdFx0c2hhcmVCdXR0b25zOiBbXG5cdFx0XHRcdHtpZDonZmFjZWJvb2snLCBsYWJlbDonU2hhcmUgb24gRmFjZWJvb2snLCB1cmw6J2h0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PXt7dXJsfX0nfSxcblx0XHRcdFx0e2lkOid0d2l0dGVyJywgbGFiZWw6J1R3ZWV0JywgdXJsOidodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD90ZXh0PXt7dGV4dH19JnVybD17e3VybH19J30sXG5cdFx0XHRcdHtpZDoncGludGVyZXN0JywgbGFiZWw6J1BpbiBpdCcsIHVybDonaHR0cDovL3d3dy5waW50ZXJlc3QuY29tL3Bpbi9jcmVhdGUvYnV0dG9uLycrXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCc/dXJsPXt7dXJsfX0mbWVkaWE9e3tpbWFnZV91cmx9fSZkZXNjcmlwdGlvbj17e3RleHR9fSd9LFxuXHRcdFx0XHR7aWQ6J2Rvd25sb2FkJywgbGFiZWw6J0Rvd25sb2FkIGltYWdlJywgdXJsOid7e3Jhd19pbWFnZV91cmx9fScsIGRvd25sb2FkOnRydWV9XG5cdFx0XHRdLFxuXHRcdFx0Z2V0SW1hZ2VVUkxGb3JTaGFyZTogZnVuY3Rpb24oIC8qIHNoYXJlQnV0dG9uRGF0YSAqLyApIHtcblx0XHRcdFx0cmV0dXJuIHBzd3AuY3Vyckl0ZW0uc3JjIHx8ICcnO1xuXHRcdFx0fSxcblx0XHRcdGdldFBhZ2VVUkxGb3JTaGFyZTogZnVuY3Rpb24oIC8qIHNoYXJlQnV0dG9uRGF0YSAqLyApIHtcblx0XHRcdFx0cmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0fSxcblx0XHRcdGdldFRleHRGb3JTaGFyZTogZnVuY3Rpb24oIC8qIHNoYXJlQnV0dG9uRGF0YSAqLyApIHtcblx0XHRcdFx0cmV0dXJuIHBzd3AuY3Vyckl0ZW0udGl0bGUgfHwgJyc7XG5cdFx0XHR9LFxuXHRcdFx0XHRcblx0XHRcdGluZGV4SW5kaWNhdG9yU2VwOiAnIC8gJyxcblx0XHRcdGZpdENvbnRyb2xzV2lkdGg6IDEyMDBcblxuXHRcdH0sXG5cdFx0X2Jsb2NrQ29udHJvbHNUYXAsXG5cdFx0X2Jsb2NrQ29udHJvbHNUYXBUaW1lb3V0O1xuXG5cblxuXHR2YXIgX29uQ29udHJvbHNUYXAgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRpZihfYmxvY2tDb250cm9sc1RhcCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXG5cdFx0XHRlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG5cblx0XHRcdGlmKF9vcHRpb25zLnRpbWVUb0lkbGUgJiYgX29wdGlvbnMubW91c2VVc2VkICYmICFfaXNJZGxlKSB7XG5cdFx0XHRcdC8vIHJlc2V0IGlkbGUgdGltZXJcblx0XHRcdFx0X29uSWRsZU1vdXNlTW92ZSgpO1xuXHRcdFx0fVxuXG5cblx0XHRcdHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsXG5cdFx0XHRcdHVpRWxlbWVudCxcblx0XHRcdFx0Y2xpY2tlZENsYXNzID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJyxcblx0XHRcdFx0Zm91bmQ7XG5cblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBfdWlFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR1aUVsZW1lbnQgPSBfdWlFbGVtZW50c1tpXTtcblx0XHRcdFx0aWYodWlFbGVtZW50Lm9uVGFwICYmIGNsaWNrZWRDbGFzcy5pbmRleE9mKCdwc3dwX18nICsgdWlFbGVtZW50Lm5hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHVpRWxlbWVudC5vblRhcCgpO1xuXHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKGZvdW5kKSB7XG5cdFx0XHRcdGlmKGUuc3RvcFByb3BhZ2F0aW9uKSB7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfYmxvY2tDb250cm9sc1RhcCA9IHRydWU7XG5cblx0XHRcdFx0Ly8gU29tZSB2ZXJzaW9ucyBvZiBBbmRyb2lkIGRvbid0IHByZXZlbnQgZ2hvc3QgY2xpY2sgZXZlbnQgXG5cdFx0XHRcdC8vIHdoZW4gcHJldmVudERlZmF1bHQoKSB3YXMgY2FsbGVkIG9uIHRvdWNoc3RhcnQgYW5kL29yIHRvdWNoZW5kLlxuXHRcdFx0XHQvLyBcblx0XHRcdFx0Ly8gVGhpcyBoYXBwZW5zIG9uIHY0LjMsIDQuMiwgNC4xLCBcblx0XHRcdFx0Ly8gb2xkZXIgdmVyc2lvbnMgc3RyYW5nZWx5IHdvcmsgY29ycmVjdGx5LCBcblx0XHRcdFx0Ly8gYnV0IGp1c3QgaW4gY2FzZSB3ZSBhZGQgZGVsYXkgb24gYWxsIG9mIHRoZW0pXHRcblx0XHRcdFx0dmFyIHRhcERlbGF5ID0gZnJhbWV3b3JrLmZlYXR1cmVzLmlzT2xkQW5kcm9pZCA/IDYwMCA6IDMwO1xuXHRcdFx0XHRfYmxvY2tDb250cm9sc1RhcFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdF9ibG9ja0NvbnRyb2xzVGFwID0gZmFsc2U7XG5cdFx0XHRcdH0sIHRhcERlbGF5KTtcblx0XHRcdH1cblxuXHRcdH0sXG5cdFx0X2ZpdENvbnRyb2xzSW5WaWV3cG9ydCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICFwc3dwLmxpa2VseVRvdWNoRGV2aWNlIHx8IF9vcHRpb25zLm1vdXNlVXNlZCB8fCBzY3JlZW4ud2lkdGggPiBfb3B0aW9ucy5maXRDb250cm9sc1dpZHRoO1xuXHRcdH0sXG5cdFx0X3RvZ2dsZVBzd3BDbGFzcyA9IGZ1bmN0aW9uKGVsLCBjTmFtZSwgYWRkKSB7XG5cdFx0XHRmcmFtZXdvcmtbIChhZGQgPyAnYWRkJyA6ICdyZW1vdmUnKSArICdDbGFzcycgXShlbCwgJ3Bzd3BfXycgKyBjTmFtZSk7XG5cdFx0fSxcblxuXHRcdC8vIGFkZCBjbGFzcyB3aGVuIHRoZXJlIGlzIGp1c3Qgb25lIGl0ZW0gaW4gdGhlIGdhbGxlcnlcblx0XHQvLyAoYnkgZGVmYXVsdCBpdCBoaWRlcyBsZWZ0L3JpZ2h0IGFycm93cyBhbmQgMW9mWCBjb3VudGVyKVxuXHRcdF9jb3VudE51bUl0ZW1zID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaGFzT25lU2xpZGUgPSAoX29wdGlvbnMuZ2V0TnVtSXRlbXNGbigpID09PSAxKTtcblxuXHRcdFx0aWYoaGFzT25lU2xpZGUgIT09IF9nYWxsZXJ5SGFzT25lU2xpZGUpIHtcblx0XHRcdFx0X3RvZ2dsZVBzd3BDbGFzcyhfY29udHJvbHMsICd1aS0tb25lLXNsaWRlJywgaGFzT25lU2xpZGUpO1xuXHRcdFx0XHRfZ2FsbGVyeUhhc09uZVNsaWRlID0gaGFzT25lU2xpZGU7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdG9nZ2xlU2hhcmVNb2RhbENsYXNzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRfdG9nZ2xlUHN3cENsYXNzKF9zaGFyZU1vZGFsLCAnc2hhcmUtbW9kYWwtLWhpZGRlbicsIF9zaGFyZU1vZGFsSGlkZGVuKTtcblx0XHR9LFxuXHRcdF90b2dnbGVTaGFyZU1vZGFsID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdF9zaGFyZU1vZGFsSGlkZGVuID0gIV9zaGFyZU1vZGFsSGlkZGVuO1xuXHRcdFx0XG5cdFx0XHRcblx0XHRcdGlmKCFfc2hhcmVNb2RhbEhpZGRlbikge1xuXHRcdFx0XHRfdG9nZ2xlU2hhcmVNb2RhbENsYXNzKCk7XG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoIV9zaGFyZU1vZGFsSGlkZGVuKSB7XG5cdFx0XHRcdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3MoX3NoYXJlTW9kYWwsICdwc3dwX19zaGFyZS1tb2RhbC0tZmFkZS1pbicpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgMzApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKF9zaGFyZU1vZGFsLCAncHN3cF9fc2hhcmUtbW9kYWwtLWZhZGUtaW4nKTtcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZihfc2hhcmVNb2RhbEhpZGRlbikge1xuXHRcdFx0XHRcdFx0X3RvZ2dsZVNoYXJlTW9kYWxDbGFzcygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgMzAwKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoIV9zaGFyZU1vZGFsSGlkZGVuKSB7XG5cdFx0XHRcdF91cGRhdGVTaGFyZVVSTHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXG5cdFx0X29wZW5XaW5kb3dQb3B1cCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcblx0XHRcdHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG5cblx0XHRcdHBzd3Auc2hvdXQoJ3NoYXJlTGlua0NsaWNrJywgZSwgdGFyZ2V0KTtcblxuXHRcdFx0aWYoIXRhcmdldC5ocmVmKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2Rvd25sb2FkJykgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHR3aW5kb3cub3Blbih0YXJnZXQuaHJlZiwgJ3Bzd3Bfc2hhcmUnLCAnc2Nyb2xsYmFycz15ZXMscmVzaXphYmxlPXllcyx0b29sYmFyPW5vLCcrXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCdsb2NhdGlvbj15ZXMsd2lkdGg9NTUwLGhlaWdodD00MjAsdG9wPTEwMCxsZWZ0PScgKyBcblx0XHRcdFx0XHRcdFx0XHRcdFx0KHdpbmRvdy5zY3JlZW4gPyBNYXRoLnJvdW5kKHNjcmVlbi53aWR0aCAvIDIgLSAyNzUpIDogMTAwKSAgKTtcblxuXHRcdFx0aWYoIV9zaGFyZU1vZGFsSGlkZGVuKSB7XG5cdFx0XHRcdF90b2dnbGVTaGFyZU1vZGFsKCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdF91cGRhdGVTaGFyZVVSTHMgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzaGFyZUJ1dHRvbk91dCA9ICcnLFxuXHRcdFx0XHRzaGFyZUJ1dHRvbkRhdGEsXG5cdFx0XHRcdHNoYXJlVVJMLFxuXHRcdFx0XHRpbWFnZV91cmwsXG5cdFx0XHRcdHBhZ2VfdXJsLFxuXHRcdFx0XHRzaGFyZV90ZXh0O1xuXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgX29wdGlvbnMuc2hhcmVCdXR0b25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHNoYXJlQnV0dG9uRGF0YSA9IF9vcHRpb25zLnNoYXJlQnV0dG9uc1tpXTtcblxuXHRcdFx0XHRpbWFnZV91cmwgPSBfb3B0aW9ucy5nZXRJbWFnZVVSTEZvclNoYXJlKHNoYXJlQnV0dG9uRGF0YSk7XG5cdFx0XHRcdHBhZ2VfdXJsID0gX29wdGlvbnMuZ2V0UGFnZVVSTEZvclNoYXJlKHNoYXJlQnV0dG9uRGF0YSk7XG5cdFx0XHRcdHNoYXJlX3RleHQgPSBfb3B0aW9ucy5nZXRUZXh0Rm9yU2hhcmUoc2hhcmVCdXR0b25EYXRhKTtcblxuXHRcdFx0XHRzaGFyZVVSTCA9IHNoYXJlQnV0dG9uRGF0YS51cmwucmVwbGFjZSgne3t1cmx9fScsIGVuY29kZVVSSUNvbXBvbmVudChwYWdlX3VybCkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0LnJlcGxhY2UoJ3t7aW1hZ2VfdXJsfX0nLCBlbmNvZGVVUklDb21wb25lbnQoaW1hZ2VfdXJsKSApXG5cdFx0XHRcdFx0XHRcdFx0XHQucmVwbGFjZSgne3tyYXdfaW1hZ2VfdXJsfX0nLCBpbWFnZV91cmwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0LnJlcGxhY2UoJ3t7dGV4dH19JywgZW5jb2RlVVJJQ29tcG9uZW50KHNoYXJlX3RleHQpICk7XG5cblx0XHRcdFx0c2hhcmVCdXR0b25PdXQgKz0gJzxhIGhyZWY9XCInICsgc2hhcmVVUkwgKyAnXCIgdGFyZ2V0PVwiX2JsYW5rXCIgJytcblx0XHRcdFx0XHRcdFx0XHRcdCdjbGFzcz1cInBzd3BfX3NoYXJlLS0nICsgc2hhcmVCdXR0b25EYXRhLmlkICsgJ1wiJyArXG5cdFx0XHRcdFx0XHRcdFx0XHQoc2hhcmVCdXR0b25EYXRhLmRvd25sb2FkID8gJ2Rvd25sb2FkJyA6ICcnKSArICc+JyArIFxuXHRcdFx0XHRcdFx0XHRcdFx0c2hhcmVCdXR0b25EYXRhLmxhYmVsICsgJzwvYT4nO1xuXG5cdFx0XHRcdGlmKF9vcHRpb25zLnBhcnNlU2hhcmVCdXR0b25PdXQpIHtcblx0XHRcdFx0XHRzaGFyZUJ1dHRvbk91dCA9IF9vcHRpb25zLnBhcnNlU2hhcmVCdXR0b25PdXQoc2hhcmVCdXR0b25EYXRhLCBzaGFyZUJ1dHRvbk91dCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdF9zaGFyZU1vZGFsLmNoaWxkcmVuWzBdLmlubmVySFRNTCA9IHNoYXJlQnV0dG9uT3V0O1xuXHRcdFx0X3NoYXJlTW9kYWwuY2hpbGRyZW5bMF0ub25jbGljayA9IF9vcGVuV2luZG93UG9wdXA7XG5cblx0XHR9LFxuXHRcdF9oYXNDbG9zZUNsYXNzID0gZnVuY3Rpb24odGFyZ2V0KSB7XG5cdFx0XHRmb3IodmFyICBpID0gMDsgaSA8IF9vcHRpb25zLmNsb3NlRWxDbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmKCBmcmFtZXdvcmsuaGFzQ2xhc3ModGFyZ2V0LCAncHN3cF9fJyArIF9vcHRpb25zLmNsb3NlRWxDbGFzc2VzW2ldKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2lkbGVJbnRlcnZhbCxcblx0XHRfaWRsZVRpbWVyLFxuXHRcdF9pZGxlSW5jcmVtZW50ID0gMCxcblx0XHRfb25JZGxlTW91c2VNb3ZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoX2lkbGVUaW1lcik7XG5cdFx0XHRfaWRsZUluY3JlbWVudCA9IDA7XG5cdFx0XHRpZihfaXNJZGxlKSB7XG5cdFx0XHRcdHVpLnNldElkbGUoZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X29uTW91c2VMZWF2ZVdpbmRvdyA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdGUgPSBlID8gZSA6IHdpbmRvdy5ldmVudDtcblx0XHRcdHZhciBmcm9tID0gZS5yZWxhdGVkVGFyZ2V0IHx8IGUudG9FbGVtZW50O1xuXHRcdFx0aWYgKCFmcm9tIHx8IGZyb20ubm9kZU5hbWUgPT09ICdIVE1MJykge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQoX2lkbGVUaW1lcik7XG5cdFx0XHRcdF9pZGxlVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHVpLnNldElkbGUodHJ1ZSk7XG5cdFx0XHRcdH0sIF9vcHRpb25zLnRpbWVUb0lkbGVPdXRzaWRlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9zZXR1cEZ1bGxzY3JlZW5BUEkgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmKF9vcHRpb25zLmZ1bGxzY3JlZW5FbCAmJiAhZnJhbWV3b3JrLmZlYXR1cmVzLmlzT2xkQW5kcm9pZCkge1xuXHRcdFx0XHRpZighX2Z1bGxzY3JlbkFQSSkge1xuXHRcdFx0XHRcdF9mdWxsc2NyZW5BUEkgPSB1aS5nZXRGdWxsc2NyZWVuQVBJKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoX2Z1bGxzY3JlbkFQSSkge1xuXHRcdFx0XHRcdGZyYW1ld29yay5iaW5kKGRvY3VtZW50LCBfZnVsbHNjcmVuQVBJLmV2ZW50SywgdWkudXBkYXRlRnVsbHNjcmVlbik7XG5cdFx0XHRcdFx0dWkudXBkYXRlRnVsbHNjcmVlbigpO1xuXHRcdFx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyhwc3dwLnRlbXBsYXRlLCAncHN3cC0tc3VwcG9ydHMtZnMnKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MocHN3cC50ZW1wbGF0ZSwgJ3Bzd3AtLXN1cHBvcnRzLWZzJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdF9zZXR1cExvYWRpbmdJbmRpY2F0b3IgPSBmdW5jdGlvbigpIHtcblx0XHRcdC8vIFNldHVwIGxvYWRpbmcgaW5kaWNhdG9yXG5cdFx0XHRpZihfb3B0aW9ucy5wcmVsb2FkZXJFbCkge1xuXHRcdFx0XG5cdFx0XHRcdF90b2dnbGVMb2FkaW5nSW5kaWNhdG9yKHRydWUpO1xuXG5cdFx0XHRcdF9saXN0ZW4oJ2JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KF9sb2FkaW5nSW5kaWNhdG9yVGltZW91dCk7XG5cblx0XHRcdFx0XHQvLyBkaXNwbGF5IGxvYWRpbmcgaW5kaWNhdG9yIHdpdGggZGVsYXlcblx0XHRcdFx0XHRfbG9hZGluZ0luZGljYXRvclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHRpZihwc3dwLmN1cnJJdGVtICYmIHBzd3AuY3Vyckl0ZW0ubG9hZGluZykge1xuXG5cdFx0XHRcdFx0XHRcdGlmKCAhcHN3cC5hbGxvd1Byb2dyZXNzaXZlSW1nKCkgfHwgKHBzd3AuY3Vyckl0ZW0uaW1nICYmICFwc3dwLmN1cnJJdGVtLmltZy5uYXR1cmFsV2lkdGgpICApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBzaG93IHByZWxvYWRlciBpZiBwcm9ncmVzc2l2ZSBsb2FkaW5nIGlzIG5vdCBlbmFibGVkLCBcblx0XHRcdFx0XHRcdFx0XHQvLyBvciBpbWFnZSB3aWR0aCBpcyBub3QgZGVmaW5lZCB5ZXQgKGJlY2F1c2Ugb2Ygc2xvdyBjb25uZWN0aW9uKVxuXHRcdFx0XHRcdFx0XHRcdF90b2dnbGVMb2FkaW5nSW5kaWNhdG9yKGZhbHNlKTsgXG5cdFx0XHRcdFx0XHRcdFx0Ly8gaXRlbXMtY29udHJvbGxlci5qcyBmdW5jdGlvbiBhbGxvd1Byb2dyZXNzaXZlSW1nXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRfdG9nZ2xlTG9hZGluZ0luZGljYXRvcih0cnVlKTsgLy8gaGlkZSBwcmVsb2FkZXJcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0sIF9vcHRpb25zLmxvYWRpbmdJbmRpY2F0b3JEZWxheSk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRfbGlzdGVuKCdpbWFnZUxvYWRDb21wbGV0ZScsIGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XG5cdFx0XHRcdFx0aWYocHN3cC5jdXJySXRlbSA9PT0gaXRlbSkge1xuXHRcdFx0XHRcdFx0X3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IgPSBmdW5jdGlvbihoaWRlKSB7XG5cdFx0XHRpZiggX2xvYWRpbmdJbmRpY2F0b3JIaWRkZW4gIT09IGhpZGUgKSB7XG5cdFx0XHRcdF90b2dnbGVQc3dwQ2xhc3MoX2xvYWRpbmdJbmRpY2F0b3IsICdwcmVsb2FkZXItLWFjdGl2ZScsICFoaWRlKTtcblx0XHRcdFx0X2xvYWRpbmdJbmRpY2F0b3JIaWRkZW4gPSBoaWRlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2FwcGx5TmF2QmFyR2FwcyA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdHZhciBnYXAgPSBpdGVtLnZHYXA7XG5cblx0XHRcdGlmKCBfZml0Q29udHJvbHNJblZpZXdwb3J0KCkgKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXIgYmFycyA9IF9vcHRpb25zLmJhcnNTaXplOyBcblx0XHRcdFx0aWYoX29wdGlvbnMuY2FwdGlvbkVsICYmIGJhcnMuYm90dG9tID09PSAnYXV0bycpIHtcblx0XHRcdFx0XHRpZighX2Zha2VDYXB0aW9uQ29udGFpbmVyKSB7XG5cdFx0XHRcdFx0XHRfZmFrZUNhcHRpb25Db250YWluZXIgPSBmcmFtZXdvcmsuY3JlYXRlRWwoJ3Bzd3BfX2NhcHRpb24gcHN3cF9fY2FwdGlvbi0tZmFrZScpO1xuXHRcdFx0XHRcdFx0X2Zha2VDYXB0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKCBmcmFtZXdvcmsuY3JlYXRlRWwoJ3Bzd3BfX2NhcHRpb25fX2NlbnRlcicpICk7XG5cdFx0XHRcdFx0XHRfY29udHJvbHMuaW5zZXJ0QmVmb3JlKF9mYWtlQ2FwdGlvbkNvbnRhaW5lciwgX2NhcHRpb25Db250YWluZXIpO1xuXHRcdFx0XHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKF9jb250cm9scywgJ3Bzd3BfX3VpLS1maXQnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoIF9vcHRpb25zLmFkZENhcHRpb25IVE1MRm4oaXRlbSwgX2Zha2VDYXB0aW9uQ29udGFpbmVyLCB0cnVlKSApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGNhcHRpb25TaXplID0gX2Zha2VDYXB0aW9uQ29udGFpbmVyLmNsaWVudEhlaWdodDtcblx0XHRcdFx0XHRcdGdhcC5ib3R0b20gPSBwYXJzZUludChjYXB0aW9uU2l6ZSwxMCkgfHwgNDQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGdhcC5ib3R0b20gPSBiYXJzLnRvcDsgLy8gaWYgbm8gY2FwdGlvbiwgc2V0IHNpemUgb2YgYm90dG9tIGdhcCB0byBzaXplIG9mIHRvcFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRnYXAuYm90dG9tID0gYmFycy5ib3R0b20gPT09ICdhdXRvJyA/IDAgOiBiYXJzLmJvdHRvbTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly8gaGVpZ2h0IG9mIHRvcCBiYXIgaXMgc3RhdGljLCBubyBuZWVkIHRvIGNhbGN1bGF0ZSBpdFxuXHRcdFx0XHRnYXAudG9wID0gYmFycy50b3A7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRnYXAudG9wID0gZ2FwLmJvdHRvbSA9IDA7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfc2V0dXBJZGxlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBIaWRlIGNvbnRyb2xzIHdoZW4gbW91c2UgaXMgdXNlZFxuXHRcdFx0aWYoX29wdGlvbnMudGltZVRvSWRsZSkge1xuXHRcdFx0XHRfbGlzdGVuKCdtb3VzZVVzZWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRmcmFtZXdvcmsuYmluZChkb2N1bWVudCwgJ21vdXNlbW92ZScsIF9vbklkbGVNb3VzZU1vdmUpO1xuXHRcdFx0XHRcdGZyYW1ld29yay5iaW5kKGRvY3VtZW50LCAnbW91c2VvdXQnLCBfb25Nb3VzZUxlYXZlV2luZG93KTtcblxuXHRcdFx0XHRcdF9pZGxlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdF9pZGxlSW5jcmVtZW50Kys7XG5cdFx0XHRcdFx0XHRpZihfaWRsZUluY3JlbWVudCA9PT0gMikge1xuXHRcdFx0XHRcdFx0XHR1aS5zZXRJZGxlKHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sIF9vcHRpb25zLnRpbWVUb0lkbGUgLyAyKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfc2V0dXBIaWRpbmdDb250cm9sc0R1cmluZ0dlc3R1cmVzID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEhpZGUgY29udHJvbHMgb24gdmVydGljYWwgZHJhZ1xuXHRcdFx0X2xpc3Rlbignb25WZXJ0aWNhbERyYWcnLCBmdW5jdGlvbihub3cpIHtcblx0XHRcdFx0aWYoX2NvbnRyb2xzVmlzaWJsZSAmJiBub3cgPCAwLjk1KSB7XG5cdFx0XHRcdFx0dWkuaGlkZUNvbnRyb2xzKCk7XG5cdFx0XHRcdH0gZWxzZSBpZighX2NvbnRyb2xzVmlzaWJsZSAmJiBub3cgPj0gMC45NSkge1xuXHRcdFx0XHRcdHVpLnNob3dDb250cm9scygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSGlkZSBjb250cm9scyB3aGVuIHBpbmNoaW5nIHRvIGNsb3NlXG5cdFx0XHR2YXIgcGluY2hDb250cm9sc0hpZGRlbjtcblx0XHRcdF9saXN0ZW4oJ29uUGluY2hDbG9zZScgLCBmdW5jdGlvbihub3cpIHtcblx0XHRcdFx0aWYoX2NvbnRyb2xzVmlzaWJsZSAmJiBub3cgPCAwLjkpIHtcblx0XHRcdFx0XHR1aS5oaWRlQ29udHJvbHMoKTtcblx0XHRcdFx0XHRwaW5jaENvbnRyb2xzSGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIGlmKHBpbmNoQ29udHJvbHNIaWRkZW4gJiYgIV9jb250cm9sc1Zpc2libGUgJiYgbm93ID4gMC45KSB7XG5cdFx0XHRcdFx0dWkuc2hvd0NvbnRyb2xzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRfbGlzdGVuKCd6b29tR2VzdHVyZUVuZGVkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHBpbmNoQ29udHJvbHNIaWRkZW4gPSBmYWxzZTtcblx0XHRcdFx0aWYocGluY2hDb250cm9sc0hpZGRlbiAmJiAhX2NvbnRyb2xzVmlzaWJsZSkge1xuXHRcdFx0XHRcdHVpLnNob3dDb250cm9scygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdH07XG5cblxuXG5cdHZhciBfdWlFbGVtZW50cyA9IFtcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2NhcHRpb24nLCBcblx0XHRcdG9wdGlvbjogJ2NhcHRpb25FbCcsXG5cdFx0XHRvbkluaXQ6IGZ1bmN0aW9uKGVsKSB7ICBcblx0XHRcdFx0X2NhcHRpb25Db250YWluZXIgPSBlbDsgXG5cdFx0XHR9IFxuXHRcdH0sXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdzaGFyZS1tb2RhbCcsIFxuXHRcdFx0b3B0aW9uOiAnc2hhcmVFbCcsXG5cdFx0XHRvbkluaXQ6IGZ1bmN0aW9uKGVsKSB7ICBcblx0XHRcdFx0X3NoYXJlTW9kYWwgPSBlbDtcblx0XHRcdH0sXG5cdFx0XHRvblRhcDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF90b2dnbGVTaGFyZU1vZGFsKCk7XG5cdFx0XHR9IFxuXHRcdH0sXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdidXR0b24tLXNoYXJlJywgXG5cdFx0XHRvcHRpb246ICdzaGFyZUVsJyxcblx0XHRcdG9uSW5pdDogZnVuY3Rpb24oZWwpIHsgXG5cdFx0XHRcdF9zaGFyZUJ1dHRvbiA9IGVsO1xuXHRcdFx0fSxcblx0XHRcdG9uVGFwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3RvZ2dsZVNoYXJlTW9kYWwoKTtcblx0XHRcdH0gXG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2J1dHRvbi0tem9vbScsIFxuXHRcdFx0b3B0aW9uOiAnem9vbUVsJyxcblx0XHRcdG9uVGFwOiBwc3dwLnRvZ2dsZURlc2t0b3Bab29tXG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2NvdW50ZXInLCBcblx0XHRcdG9wdGlvbjogJ2NvdW50ZXJFbCcsXG5cdFx0XHRvbkluaXQ6IGZ1bmN0aW9uKGVsKSB7ICBcblx0XHRcdFx0X2luZGV4SW5kaWNhdG9yID0gZWw7XG5cdFx0XHR9IFxuXHRcdH0sXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdidXR0b24tLWNsb3NlJywgXG5cdFx0XHRvcHRpb246ICdjbG9zZUVsJyxcblx0XHRcdG9uVGFwOiBwc3dwLmNsb3NlXG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2J1dHRvbi0tYXJyb3ctLWxlZnQnLCBcblx0XHRcdG9wdGlvbjogJ2Fycm93RWwnLFxuXHRcdFx0b25UYXA6IHBzd3AucHJldlxuXHRcdH0sXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdidXR0b24tLWFycm93LS1yaWdodCcsIFxuXHRcdFx0b3B0aW9uOiAnYXJyb3dFbCcsXG5cdFx0XHRvblRhcDogcHN3cC5uZXh0XG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ2J1dHRvbi0tZnMnLCBcblx0XHRcdG9wdGlvbjogJ2Z1bGxzY3JlZW5FbCcsXG5cdFx0XHRvblRhcDogZnVuY3Rpb24oKSB7ICBcblx0XHRcdFx0aWYoX2Z1bGxzY3JlbkFQSS5pc0Z1bGxzY3JlZW4oKSkge1xuXHRcdFx0XHRcdF9mdWxsc2NyZW5BUEkuZXhpdCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF9mdWxsc2NyZW5BUEkuZW50ZXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAncHJlbG9hZGVyJywgXG5cdFx0XHRvcHRpb246ICdwcmVsb2FkZXJFbCcsXG5cdFx0XHRvbkluaXQ6IGZ1bmN0aW9uKGVsKSB7ICBcblx0XHRcdFx0X2xvYWRpbmdJbmRpY2F0b3IgPSBlbDtcblx0XHRcdH0gXG5cdFx0fVxuXG5cdF07XG5cblx0dmFyIF9zZXR1cFVJRWxlbWVudHMgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaXRlbSxcblx0XHRcdGNsYXNzQXR0cixcblx0XHRcdHVpRWxlbWVudDtcblxuXHRcdHZhciBsb29wVGhyb3VnaENoaWxkRWxlbWVudHMgPSBmdW5jdGlvbihzQ2hpbGRyZW4pIHtcblx0XHRcdGlmKCFzQ2hpbGRyZW4pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbCA9IHNDaGlsZHJlbi5sZW5ndGg7XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdGl0ZW0gPSBzQ2hpbGRyZW5baV07XG5cdFx0XHRcdGNsYXNzQXR0ciA9IGl0ZW0uY2xhc3NOYW1lO1xuXG5cdFx0XHRcdGZvcih2YXIgYSA9IDA7IGEgPCBfdWlFbGVtZW50cy5sZW5ndGg7IGErKykge1xuXHRcdFx0XHRcdHVpRWxlbWVudCA9IF91aUVsZW1lbnRzW2FdO1xuXG5cdFx0XHRcdFx0aWYoY2xhc3NBdHRyLmluZGV4T2YoJ3Bzd3BfXycgKyB1aUVsZW1lbnQubmFtZSkgPiAtMSAgKSB7XG5cblx0XHRcdFx0XHRcdGlmKCBfb3B0aW9uc1t1aUVsZW1lbnQub3B0aW9uXSApIHsgLy8gaWYgZWxlbWVudCBpcyBub3QgZGlzYWJsZWQgZnJvbSBvcHRpb25zXG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoaXRlbSwgJ3Bzd3BfX2VsZW1lbnQtLWRpc2FibGVkJyk7XG5cdFx0XHRcdFx0XHRcdGlmKHVpRWxlbWVudC5vbkluaXQpIHtcblx0XHRcdFx0XHRcdFx0XHR1aUVsZW1lbnQub25Jbml0KGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHQvL2l0ZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3MoaXRlbSwgJ3Bzd3BfX2VsZW1lbnQtLWRpc2FibGVkJyk7XG5cdFx0XHRcdFx0XHRcdC8vaXRlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdFx0bG9vcFRocm91Z2hDaGlsZEVsZW1lbnRzKF9jb250cm9scy5jaGlsZHJlbik7XG5cblx0XHR2YXIgdG9wQmFyID0gIGZyYW1ld29yay5nZXRDaGlsZEJ5Q2xhc3MoX2NvbnRyb2xzLCAncHN3cF9fdG9wLWJhcicpO1xuXHRcdGlmKHRvcEJhcikge1xuXHRcdFx0bG9vcFRocm91Z2hDaGlsZEVsZW1lbnRzKCB0b3BCYXIuY2hpbGRyZW4gKTtcblx0XHR9XG5cdH07XG5cblxuXHRcblxuXHR1aS5pbml0ID0gZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBleHRlbmQgb3B0aW9uc1xuXHRcdGZyYW1ld29yay5leHRlbmQocHN3cC5vcHRpb25zLCBfZGVmYXVsdFVJT3B0aW9ucywgdHJ1ZSk7XG5cblx0XHQvLyBjcmVhdGUgbG9jYWwgbGluayBmb3IgZmFzdCBhY2Nlc3Ncblx0XHRfb3B0aW9ucyA9IHBzd3Aub3B0aW9ucztcblxuXHRcdC8vIGZpbmQgcHN3cF9fdWkgZWxlbWVudFxuXHRcdF9jb250cm9scyA9IGZyYW1ld29yay5nZXRDaGlsZEJ5Q2xhc3MocHN3cC5zY3JvbGxXcmFwLCAncHN3cF9fdWknKTtcblxuXHRcdC8vIGNyZWF0ZSBsb2NhbCBsaW5rXG5cdFx0X2xpc3RlbiA9IHBzd3AubGlzdGVuO1xuXG5cblx0XHRfc2V0dXBIaWRpbmdDb250cm9sc0R1cmluZ0dlc3R1cmVzKCk7XG5cblx0XHQvLyB1cGRhdGUgY29udHJvbHMgd2hlbiBzbGlkZXMgY2hhbmdlXG5cdFx0X2xpc3RlbignYmVmb3JlQ2hhbmdlJywgdWkudXBkYXRlKTtcblxuXHRcdC8vIHRvZ2dsZSB6b29tIG9uIGRvdWJsZS10YXBcblx0XHRfbGlzdGVuKCdkb3VibGVUYXAnLCBmdW5jdGlvbihwb2ludCkge1xuXHRcdFx0dmFyIGluaXRpYWxab29tTGV2ZWwgPSBwc3dwLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWw7XG5cdFx0XHRpZihwc3dwLmdldFpvb21MZXZlbCgpICE9PSBpbml0aWFsWm9vbUxldmVsKSB7XG5cdFx0XHRcdHBzd3Auem9vbVRvKGluaXRpYWxab29tTGV2ZWwsIHBvaW50LCAzMzMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHN3cC56b29tVG8oX29wdGlvbnMuZ2V0RG91YmxlVGFwWm9vbShmYWxzZSwgcHN3cC5jdXJySXRlbSksIHBvaW50LCAzMzMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gQWxsb3cgdGV4dCBzZWxlY3Rpb24gaW4gY2FwdGlvblxuXHRcdF9saXN0ZW4oJ3ByZXZlbnREcmFnRXZlbnQnLCBmdW5jdGlvbihlLCBpc0Rvd24sIHByZXZlbnRPYmopIHtcblx0XHRcdHZhciB0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuXHRcdFx0aWYoXG5cdFx0XHRcdHQgJiYgXG5cdFx0XHRcdHQuZ2V0QXR0cmlidXRlKCdjbGFzcycpICYmIGUudHlwZS5pbmRleE9mKCdtb3VzZScpID4gLTEgJiYgXG5cdFx0XHRcdCggdC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykuaW5kZXhPZignX19jYXB0aW9uJykgPiAwIHx8ICgvKFNNQUxMfFNUUk9OR3xFTSkvaSkudGVzdCh0LnRhZ05hbWUpICkgXG5cdFx0XHQpIHtcblx0XHRcdFx0cHJldmVudE9iai5wcmV2ZW50ID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBiaW5kIGV2ZW50cyBmb3IgVUlcblx0XHRfbGlzdGVuKCdiaW5kRXZlbnRzJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRmcmFtZXdvcmsuYmluZChfY29udHJvbHMsICdwc3dwVGFwIGNsaWNrJywgX29uQ29udHJvbHNUYXApO1xuXHRcdFx0ZnJhbWV3b3JrLmJpbmQocHN3cC5zY3JvbGxXcmFwLCAncHN3cFRhcCcsIHVpLm9uR2xvYmFsVGFwKTtcblxuXHRcdFx0aWYoIXBzd3AubGlrZWx5VG91Y2hEZXZpY2UpIHtcblx0XHRcdFx0ZnJhbWV3b3JrLmJpbmQocHN3cC5zY3JvbGxXcmFwLCAnbW91c2VvdmVyJywgdWkub25Nb3VzZU92ZXIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gdW5iaW5kIGV2ZW50cyBmb3IgVUlcblx0XHRfbGlzdGVuKCd1bmJpbmRFdmVudHMnLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmKCFfc2hhcmVNb2RhbEhpZGRlbikge1xuXHRcdFx0XHRfdG9nZ2xlU2hhcmVNb2RhbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihfaWRsZUludGVydmFsKSB7XG5cdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2lkbGVJbnRlcnZhbCk7XG5cdFx0XHR9XG5cdFx0XHRmcmFtZXdvcmsudW5iaW5kKGRvY3VtZW50LCAnbW91c2VvdXQnLCBfb25Nb3VzZUxlYXZlV2luZG93KTtcblx0XHRcdGZyYW1ld29yay51bmJpbmQoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfb25JZGxlTW91c2VNb3ZlKTtcblx0XHRcdGZyYW1ld29yay51bmJpbmQoX2NvbnRyb2xzLCAncHN3cFRhcCBjbGljaycsIF9vbkNvbnRyb2xzVGFwKTtcblx0XHRcdGZyYW1ld29yay51bmJpbmQocHN3cC5zY3JvbGxXcmFwLCAncHN3cFRhcCcsIHVpLm9uR2xvYmFsVGFwKTtcblx0XHRcdGZyYW1ld29yay51bmJpbmQocHN3cC5zY3JvbGxXcmFwLCAnbW91c2VvdmVyJywgdWkub25Nb3VzZU92ZXIpO1xuXG5cdFx0XHRpZihfZnVsbHNjcmVuQVBJKSB7XG5cdFx0XHRcdGZyYW1ld29yay51bmJpbmQoZG9jdW1lbnQsIF9mdWxsc2NyZW5BUEkuZXZlbnRLLCB1aS51cGRhdGVGdWxsc2NyZWVuKTtcblx0XHRcdFx0aWYoX2Z1bGxzY3JlbkFQSS5pc0Z1bGxzY3JlZW4oKSkge1xuXHRcdFx0XHRcdF9vcHRpb25zLmhpZGVBbmltYXRpb25EdXJhdGlvbiA9IDA7XG5cdFx0XHRcdFx0X2Z1bGxzY3JlbkFQSS5leGl0KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X2Z1bGxzY3JlbkFQSSA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblxuXHRcdC8vIGNsZWFuIHVwIHRoaW5ncyB3aGVuIGdhbGxlcnkgaXMgZGVzdHJveWVkXG5cdFx0X2xpc3RlbignZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYoX29wdGlvbnMuY2FwdGlvbkVsKSB7XG5cdFx0XHRcdGlmKF9mYWtlQ2FwdGlvbkNvbnRhaW5lcikge1xuXHRcdFx0XHRcdF9jb250cm9scy5yZW1vdmVDaGlsZChfZmFrZUNhcHRpb25Db250YWluZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyhfY2FwdGlvbkNvbnRhaW5lciwgJ3Bzd3BfX2NhcHRpb24tLWVtcHR5Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKF9zaGFyZU1vZGFsKSB7XG5cdFx0XHRcdF9zaGFyZU1vZGFsLmNoaWxkcmVuWzBdLm9uY2xpY2sgPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKF9jb250cm9scywgJ3Bzd3BfX3VpLS1vdmVyLWNsb3NlJyk7XG5cdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3MoIF9jb250cm9scywgJ3Bzd3BfX3VpLS1oaWRkZW4nKTtcblx0XHRcdHVpLnNldElkbGUoZmFsc2UpO1xuXHRcdH0pO1xuXHRcdFxuXG5cdFx0aWYoIV9vcHRpb25zLnNob3dBbmltYXRpb25EdXJhdGlvbikge1xuXHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKCBfY29udHJvbHMsICdwc3dwX191aS0taGlkZGVuJyk7XG5cdFx0fVxuXHRcdF9saXN0ZW4oJ2luaXRpYWxab29tSW4nLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmKF9vcHRpb25zLnNob3dBbmltYXRpb25EdXJhdGlvbikge1xuXHRcdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoIF9jb250cm9scywgJ3Bzd3BfX3VpLS1oaWRkZW4nKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRfbGlzdGVuKCdpbml0aWFsWm9vbU91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKCBfY29udHJvbHMsICdwc3dwX191aS0taGlkZGVuJyk7XG5cdFx0fSk7XG5cblx0XHRfbGlzdGVuKCdwYXJzZVZlcnRpY2FsTWFyZ2luJywgX2FwcGx5TmF2QmFyR2Fwcyk7XG5cdFx0XG5cdFx0X3NldHVwVUlFbGVtZW50cygpO1xuXG5cdFx0aWYoX29wdGlvbnMuc2hhcmVFbCAmJiBfc2hhcmVCdXR0b24gJiYgX3NoYXJlTW9kYWwpIHtcblx0XHRcdF9zaGFyZU1vZGFsSGlkZGVuID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRfY291bnROdW1JdGVtcygpO1xuXG5cdFx0X3NldHVwSWRsZSgpO1xuXG5cdFx0X3NldHVwRnVsbHNjcmVlbkFQSSgpO1xuXG5cdFx0X3NldHVwTG9hZGluZ0luZGljYXRvcigpO1xuXHR9O1xuXG5cdHVpLnNldElkbGUgPSBmdW5jdGlvbihpc0lkbGUpIHtcblx0XHRfaXNJZGxlID0gaXNJZGxlO1xuXHRcdF90b2dnbGVQc3dwQ2xhc3MoX2NvbnRyb2xzLCAndWktLWlkbGUnLCBpc0lkbGUpO1xuXHR9O1xuXG5cdHVpLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIERvbid0IHVwZGF0ZSBVSSBpZiBpdCdzIGhpZGRlblxuXHRcdGlmKF9jb250cm9sc1Zpc2libGUgJiYgcHN3cC5jdXJySXRlbSkge1xuXHRcdFx0XG5cdFx0XHR1aS51cGRhdGVJbmRleEluZGljYXRvcigpO1xuXG5cdFx0XHRpZihfb3B0aW9ucy5jYXB0aW9uRWwpIHtcblx0XHRcdFx0X29wdGlvbnMuYWRkQ2FwdGlvbkhUTUxGbihwc3dwLmN1cnJJdGVtLCBfY2FwdGlvbkNvbnRhaW5lcik7XG5cblx0XHRcdFx0X3RvZ2dsZVBzd3BDbGFzcyhfY2FwdGlvbkNvbnRhaW5lciwgJ2NhcHRpb24tLWVtcHR5JywgIXBzd3AuY3Vyckl0ZW0udGl0bGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRfb3ZlcmxheVVJVXBkYXRlZCA9IHRydWU7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0X292ZXJsYXlVSVVwZGF0ZWQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRpZighX3NoYXJlTW9kYWxIaWRkZW4pIHtcblx0XHRcdF90b2dnbGVTaGFyZU1vZGFsKCk7XG5cdFx0fVxuXG5cdFx0X2NvdW50TnVtSXRlbXMoKTtcblx0fTtcblxuXHR1aS51cGRhdGVGdWxsc2NyZWVuID0gZnVuY3Rpb24oZSkge1xuXG5cdFx0aWYoZSkge1xuXHRcdFx0Ly8gc29tZSBicm93c2VycyBjaGFuZ2Ugd2luZG93IHNjcm9sbCBwb3NpdGlvbiBkdXJpbmcgdGhlIGZ1bGxzY3JlZW5cblx0XHRcdC8vIHNvIFBob3RvU3dpcGUgdXBkYXRlcyBpdCBqdXN0IGluIGNhc2Vcblx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHBzd3Auc2V0U2Nyb2xsT2Zmc2V0KCAwLCBmcmFtZXdvcmsuZ2V0U2Nyb2xsWSgpICk7XG5cdFx0XHR9LCA1MCk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIHRvb2dsZSBwc3dwLS1mcyBjbGFzcyBvbiByb290IGVsZW1lbnRcblx0XHRmcmFtZXdvcmtbIChfZnVsbHNjcmVuQVBJLmlzRnVsbHNjcmVlbigpID8gJ2FkZCcgOiAncmVtb3ZlJykgKyAnQ2xhc3MnIF0ocHN3cC50ZW1wbGF0ZSwgJ3Bzd3AtLWZzJyk7XG5cdH07XG5cblx0dWkudXBkYXRlSW5kZXhJbmRpY2F0b3IgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfb3B0aW9ucy5jb3VudGVyRWwpIHtcblx0XHRcdF9pbmRleEluZGljYXRvci5pbm5lckhUTUwgPSAocHN3cC5nZXRDdXJyZW50SW5kZXgoKSsxKSArIFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRfb3B0aW9ucy5pbmRleEluZGljYXRvclNlcCArIFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRfb3B0aW9ucy5nZXROdW1JdGVtc0ZuKCk7XG5cdFx0fVxuXHR9O1xuXHRcblx0dWkub25HbG9iYWxUYXAgPSBmdW5jdGlvbihlKSB7XG5cdFx0ZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXHRcdHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XG5cblx0XHRpZihfYmxvY2tDb250cm9sc1RhcCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmKGUuZGV0YWlsICYmIGUuZGV0YWlsLnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSB7XG5cblx0XHRcdC8vIGNsb3NlIGdhbGxlcnkgaWYgY2xpY2tlZCBvdXRzaWRlIG9mIHRoZSBpbWFnZVxuXHRcdFx0aWYoX2hhc0Nsb3NlQ2xhc3ModGFyZ2V0KSkge1xuXHRcdFx0XHRwc3dwLmNsb3NlKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYoZnJhbWV3b3JrLmhhc0NsYXNzKHRhcmdldCwgJ3Bzd3BfX2ltZycpKSB7XG5cdFx0XHRcdGlmKHBzd3AuZ2V0Wm9vbUxldmVsKCkgPT09IDEgJiYgcHN3cC5nZXRab29tTGV2ZWwoKSA8PSBwc3dwLmN1cnJJdGVtLmZpdFJhdGlvKSB7XG5cdFx0XHRcdFx0aWYoX29wdGlvbnMuY2xpY2tUb0Nsb3NlTm9uWm9vbWFibGUpIHtcblx0XHRcdFx0XHRcdHBzd3AuY2xvc2UoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHN3cC50b2dnbGVEZXNrdG9wWm9vbShlLmRldGFpbC5yZWxlYXNlUG9pbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyB0YXAgYW55d2hlcmUgKGV4Y2VwdCBidXR0b25zKSB0byB0b2dnbGUgdmlzaWJpbGl0eSBvZiBjb250cm9sc1xuXHRcdFx0aWYoX29wdGlvbnMudGFwVG9Ub2dnbGVDb250cm9scykge1xuXHRcdFx0XHRpZihfY29udHJvbHNWaXNpYmxlKSB7XG5cdFx0XHRcdFx0dWkuaGlkZUNvbnRyb2xzKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dWkuc2hvd0NvbnRyb2xzKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gdGFwIHRvIGNsb3NlIGdhbGxlcnlcblx0XHRcdGlmKF9vcHRpb25zLnRhcFRvQ2xvc2UgJiYgKGZyYW1ld29yay5oYXNDbGFzcyh0YXJnZXQsICdwc3dwX19pbWcnKSB8fCBfaGFzQ2xvc2VDbGFzcyh0YXJnZXQpKSApIHtcblx0XHRcdFx0cHN3cC5jbG9zZSgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9XG5cdH07XG5cdHVpLm9uTW91c2VPdmVyID0gZnVuY3Rpb24oZSkge1xuXHRcdGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcblx0XHR2YXIgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuXG5cdFx0Ly8gYWRkIGNsYXNzIHdoZW4gbW91c2UgaXMgb3ZlciBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGNsb3NlIHRoZSBnYWxsZXJ5XG5cdFx0X3RvZ2dsZVBzd3BDbGFzcyhfY29udHJvbHMsICd1aS0tb3Zlci1jbG9zZScsIF9oYXNDbG9zZUNsYXNzKHRhcmdldCkpO1xuXHR9O1xuXG5cdHVpLmhpZGVDb250cm9scyA9IGZ1bmN0aW9uKCkge1xuXHRcdGZyYW1ld29yay5hZGRDbGFzcyhfY29udHJvbHMsJ3Bzd3BfX3VpLS1oaWRkZW4nKTtcblx0XHRfY29udHJvbHNWaXNpYmxlID0gZmFsc2U7XG5cdH07XG5cblx0dWkuc2hvd0NvbnRyb2xzID0gZnVuY3Rpb24oKSB7XG5cdFx0X2NvbnRyb2xzVmlzaWJsZSA9IHRydWU7XG5cdFx0aWYoIV9vdmVybGF5VUlVcGRhdGVkKSB7XG5cdFx0XHR1aS51cGRhdGUoKTtcblx0XHR9XG5cdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKF9jb250cm9scywncHN3cF9fdWktLWhpZGRlbicpO1xuXHR9O1xuXG5cdHVpLnN1cHBvcnRzRnVsbHNjcmVlbiA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkID0gZG9jdW1lbnQ7XG5cdFx0cmV0dXJuICEhKGQuZXhpdEZ1bGxzY3JlZW4gfHwgZC5tb3pDYW5jZWxGdWxsU2NyZWVuIHx8IGQud2Via2l0RXhpdEZ1bGxzY3JlZW4gfHwgZC5tc0V4aXRGdWxsc2NyZWVuKTtcblx0fTtcblxuXHR1aS5nZXRGdWxsc2NyZWVuQVBJID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGRFID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuXHRcdFx0YXBpLFxuXHRcdFx0dEYgPSAnZnVsbHNjcmVlbmNoYW5nZSc7XG5cblx0XHRpZiAoZEUucmVxdWVzdEZ1bGxzY3JlZW4pIHtcblx0XHRcdGFwaSA9IHtcblx0XHRcdFx0ZW50ZXJLOiAncmVxdWVzdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRleGl0SzogJ2V4aXRGdWxsc2NyZWVuJyxcblx0XHRcdFx0ZWxlbWVudEs6ICdmdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdGV2ZW50SzogdEZcblx0XHRcdH07XG5cblx0XHR9IGVsc2UgaWYoZEUubW96UmVxdWVzdEZ1bGxTY3JlZW4gKSB7XG5cdFx0XHRhcGkgPSB7XG5cdFx0XHRcdGVudGVySzogJ21velJlcXVlc3RGdWxsU2NyZWVuJyxcblx0XHRcdFx0ZXhpdEs6ICdtb3pDYW5jZWxGdWxsU2NyZWVuJyxcblx0XHRcdFx0ZWxlbWVudEs6ICdtb3pGdWxsU2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdGV2ZW50SzogJ21veicgKyB0RlxuXHRcdFx0fTtcblxuXHRcdFx0XG5cblx0XHR9IGVsc2UgaWYoZEUud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4pIHtcblx0XHRcdGFwaSA9IHtcblx0XHRcdFx0ZW50ZXJLOiAnd2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRleGl0SzogJ3dlYmtpdEV4aXRGdWxsc2NyZWVuJyxcblx0XHRcdFx0ZWxlbWVudEs6ICd3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdGV2ZW50SzogJ3dlYmtpdCcgKyB0RlxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSBpZihkRS5tc1JlcXVlc3RGdWxsc2NyZWVuKSB7XG5cdFx0XHRhcGkgPSB7XG5cdFx0XHRcdGVudGVySzogJ21zUmVxdWVzdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRleGl0SzogJ21zRXhpdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRlbGVtZW50SzogJ21zRnVsbHNjcmVlbkVsZW1lbnQnLFxuXHRcdFx0XHRldmVudEs6ICdNU0Z1bGxzY3JlZW5DaGFuZ2UnXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGlmKGFwaSkge1xuXHRcdFx0YXBpLmVudGVyID0gZnVuY3Rpb24oKSB7IFxuXHRcdFx0XHQvLyBkaXNhYmxlIGNsb3NlLW9uLXNjcm9sbCBpbiBmdWxsc2NyZWVuXG5cdFx0XHRcdF9pbml0YWxDbG9zZU9uU2Nyb2xsVmFsdWUgPSBfb3B0aW9ucy5jbG9zZU9uU2Nyb2xsOyBcblx0XHRcdFx0X29wdGlvbnMuY2xvc2VPblNjcm9sbCA9IGZhbHNlOyBcblxuXHRcdFx0XHRpZih0aGlzLmVudGVySyA9PT0gJ3dlYmtpdFJlcXVlc3RGdWxsc2NyZWVuJykge1xuXHRcdFx0XHRcdHBzd3AudGVtcGxhdGVbdGhpcy5lbnRlcktdKCBFbGVtZW50LkFMTE9XX0tFWUJPQVJEX0lOUFVUICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBzd3AudGVtcGxhdGVbdGhpcy5lbnRlcktdKCk7IFxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0YXBpLmV4aXQgPSBmdW5jdGlvbigpIHsgXG5cdFx0XHRcdF9vcHRpb25zLmNsb3NlT25TY3JvbGwgPSBfaW5pdGFsQ2xvc2VPblNjcm9sbFZhbHVlO1xuXG5cdFx0XHRcdHJldHVybiBkb2N1bWVudFt0aGlzLmV4aXRLXSgpOyBcblxuXHRcdFx0fTtcblx0XHRcdGFwaS5pc0Z1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHsgcmV0dXJuIGRvY3VtZW50W3RoaXMuZWxlbWVudEtdOyB9O1xuXHRcdH1cblxuXHRcdHJldHVybiBhcGk7XG5cdH07XG5cblxuXG59O1xucmV0dXJuIFBob3RvU3dpcGVVSV9EZWZhdWx0O1xuXG5cbn0pO1xuIiwiLyohIFBob3RvU3dpcGUgLSB2NC4xLjEgLSAyMDE1LTEyLTI0XG4qIGh0dHA6Ly9waG90b3N3aXBlLmNvbVxuKiBDb3B5cmlnaHQgKGMpIDIwMTUgRG1pdHJ5IFNlbWVub3Y7ICovXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsgXG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZmFjdG9yeSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdH0gZWxzZSB7XG5cdFx0cm9vdC5QaG90b1N3aXBlID0gZmFjdG9yeSgpO1xuXHR9XG59KSh0aGlzLCBmdW5jdGlvbiAoKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgUGhvdG9Td2lwZSA9IGZ1bmN0aW9uKHRlbXBsYXRlLCBVaUNsYXNzLCBpdGVtcywgb3B0aW9ucyl7XG5cbi8qPj5mcmFtZXdvcmstYnJpZGdlKi9cbi8qKlxuICpcbiAqIFNldCBvZiBnZW5lcmljIGZ1bmN0aW9ucyB1c2VkIGJ5IGdhbGxlcnkuXG4gKiBcbiAqIFlvdSdyZSBmcmVlIHRvIG1vZGlmeSBhbnl0aGluZyBoZXJlIGFzIGxvbmcgYXMgZnVuY3Rpb25hbGl0eSBpcyBrZXB0LlxuICogXG4gKi9cbnZhciBmcmFtZXdvcmsgPSB7XG5cdGZlYXR1cmVzOiBudWxsLFxuXHRiaW5kOiBmdW5jdGlvbih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCB1bmJpbmQpIHtcblx0XHR2YXIgbWV0aG9kTmFtZSA9ICh1bmJpbmQgPyAncmVtb3ZlJyA6ICdhZGQnKSArICdFdmVudExpc3RlbmVyJztcblx0XHR0eXBlID0gdHlwZS5zcGxpdCgnICcpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZih0eXBlW2ldKSB7XG5cdFx0XHRcdHRhcmdldFttZXRob2ROYW1lXSggdHlwZVtpXSwgbGlzdGVuZXIsIGZhbHNlKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGlzQXJyYXk6IGZ1bmN0aW9uKG9iaikge1xuXHRcdHJldHVybiAob2JqIGluc3RhbmNlb2YgQXJyYXkpO1xuXHR9LFxuXHRjcmVhdGVFbDogZnVuY3Rpb24oY2xhc3NlcywgdGFnKSB7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcgfHwgJ2RpdicpO1xuXHRcdGlmKGNsYXNzZXMpIHtcblx0XHRcdGVsLmNsYXNzTmFtZSA9IGNsYXNzZXM7XG5cdFx0fVxuXHRcdHJldHVybiBlbDtcblx0fSxcblx0Z2V0U2Nyb2xsWTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHlPZmZzZXQgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG5cdFx0cmV0dXJuIHlPZmZzZXQgIT09IHVuZGVmaW5lZCA/IHlPZmZzZXQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcblx0XHRmcmFtZXdvcmsuYmluZCh0YXJnZXQsdHlwZSxsaXN0ZW5lcix0cnVlKTtcblx0fSxcblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsLCBjbGFzc05hbWUpIHtcblx0XHR2YXIgcmVnID0gbmV3IFJlZ0V4cCgnKFxcXFxzfF4pJyArIGNsYXNzTmFtZSArICcoXFxcXHN8JCknKTtcblx0XHRlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShyZWcsICcgJykucmVwbGFjZSgvXlxcc1xccyovLCAnJykucmVwbGFjZSgvXFxzXFxzKiQvLCAnJyk7IFxuXHR9LFxuXHRhZGRDbGFzczogZnVuY3Rpb24oZWwsIGNsYXNzTmFtZSkge1xuXHRcdGlmKCAhZnJhbWV3b3JrLmhhc0NsYXNzKGVsLGNsYXNzTmFtZSkgKSB7XG5cdFx0XHRlbC5jbGFzc05hbWUgKz0gKGVsLmNsYXNzTmFtZSA/ICcgJyA6ICcnKSArIGNsYXNzTmFtZTtcblx0XHR9XG5cdH0sXG5cdGhhc0NsYXNzOiBmdW5jdGlvbihlbCwgY2xhc3NOYW1lKSB7XG5cdFx0cmV0dXJuIGVsLmNsYXNzTmFtZSAmJiBuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgY2xhc3NOYW1lICsgJyhcXFxcc3wkKScpLnRlc3QoZWwuY2xhc3NOYW1lKTtcblx0fSxcblx0Z2V0Q2hpbGRCeUNsYXNzOiBmdW5jdGlvbihwYXJlbnRFbCwgY2hpbGRDbGFzc05hbWUpIHtcblx0XHR2YXIgbm9kZSA9IHBhcmVudEVsLmZpcnN0Q2hpbGQ7XG5cdFx0d2hpbGUobm9kZSkge1xuXHRcdFx0aWYoIGZyYW1ld29yay5oYXNDbGFzcyhub2RlLCBjaGlsZENsYXNzTmFtZSkgKSB7XG5cdFx0XHRcdHJldHVybiBub2RlO1xuXHRcdFx0fVxuXHRcdFx0bm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG5cdFx0fVxuXHR9LFxuXHRhcnJheVNlYXJjaDogZnVuY3Rpb24oYXJyYXksIHZhbHVlLCBrZXkpIHtcblx0XHR2YXIgaSA9IGFycmF5Lmxlbmd0aDtcblx0XHR3aGlsZShpLS0pIHtcblx0XHRcdGlmKGFycmF5W2ldW2tleV0gPT09IHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fSBcblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXHRleHRlbmQ6IGZ1bmN0aW9uKG8xLCBvMiwgcHJldmVudE92ZXJ3cml0ZSkge1xuXHRcdGZvciAodmFyIHByb3AgaW4gbzIpIHtcblx0XHRcdGlmIChvMi5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuXHRcdFx0XHRpZihwcmV2ZW50T3ZlcndyaXRlICYmIG8xLmhhc093blByb3BlcnR5KHByb3ApKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0bzFbcHJvcF0gPSBvMltwcm9wXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGVhc2luZzoge1xuXHRcdHNpbmU6IHtcblx0XHRcdG91dDogZnVuY3Rpb24oaykge1xuXHRcdFx0XHRyZXR1cm4gTWF0aC5zaW4oayAqIChNYXRoLlBJIC8gMikpO1xuXHRcdFx0fSxcblx0XHRcdGluT3V0OiBmdW5jdGlvbihrKSB7XG5cdFx0XHRcdHJldHVybiAtIChNYXRoLmNvcyhNYXRoLlBJICogaykgLSAxKSAvIDI7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRjdWJpYzoge1xuXHRcdFx0b3V0OiBmdW5jdGlvbihrKSB7XG5cdFx0XHRcdHJldHVybiAtLWsgKiBrICogayArIDE7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8qXG5cdFx0XHRlbGFzdGljOiB7XG5cdFx0XHRcdG91dDogZnVuY3Rpb24gKCBrICkge1xuXG5cdFx0XHRcdFx0dmFyIHMsIGEgPSAwLjEsIHAgPSAwLjQ7XG5cdFx0XHRcdFx0aWYgKCBrID09PSAwICkgcmV0dXJuIDA7XG5cdFx0XHRcdFx0aWYgKCBrID09PSAxICkgcmV0dXJuIDE7XG5cdFx0XHRcdFx0aWYgKCAhYSB8fCBhIDwgMSApIHsgYSA9IDE7IHMgPSBwIC8gNDsgfVxuXHRcdFx0XHRcdGVsc2UgcyA9IHAgKiBNYXRoLmFzaW4oIDEgLyBhICkgLyAoIDIgKiBNYXRoLlBJICk7XG5cdFx0XHRcdFx0cmV0dXJuICggYSAqIE1hdGgucG93KCAyLCAtIDEwICogaykgKiBNYXRoLnNpbiggKCBrIC0gcyApICogKCAyICogTWF0aC5QSSApIC8gcCApICsgMSApO1xuXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0YmFjazoge1xuXHRcdFx0XHRvdXQ6IGZ1bmN0aW9uICggayApIHtcblx0XHRcdFx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0XHRcdFx0cmV0dXJuIC0tayAqIGsgKiAoICggcyArIDEgKSAqIGsgKyBzICkgKyAxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0Ki9cblx0fSxcblxuXHQvKipcblx0ICogXG5cdCAqIEByZXR1cm4ge29iamVjdH1cblx0ICogXG5cdCAqIHtcblx0ICogIHJhZiA6IHJlcXVlc3QgYW5pbWF0aW9uIGZyYW1lIGZ1bmN0aW9uXG5cdCAqICBjYWYgOiBjYW5jZWwgYW5pbWF0aW9uIGZyYW1lIGZ1bmN0aW9uXG5cdCAqICB0cmFuc2Zyb20gOiB0cmFuc2Zvcm0gcHJvcGVydHkga2V5ICh3aXRoIHZlbmRvciksIG9yIG51bGwgaWYgbm90IHN1cHBvcnRlZFxuXHQgKiAgb2xkSUUgOiBJRTggb3IgYmVsb3dcblx0ICogfVxuXHQgKiBcblx0ICovXG5cdGRldGVjdEZlYXR1cmVzOiBmdW5jdGlvbigpIHtcblx0XHRpZihmcmFtZXdvcmsuZmVhdHVyZXMpIHtcblx0XHRcdHJldHVybiBmcmFtZXdvcmsuZmVhdHVyZXM7XG5cdFx0fVxuXHRcdHZhciBoZWxwZXJFbCA9IGZyYW1ld29yay5jcmVhdGVFbCgpLFxuXHRcdFx0aGVscGVyU3R5bGUgPSBoZWxwZXJFbC5zdHlsZSxcblx0XHRcdHZlbmRvciA9ICcnLFxuXHRcdFx0ZmVhdHVyZXMgPSB7fTtcblxuXHRcdC8vIElFOCBhbmQgYmVsb3dcblx0XHRmZWF0dXJlcy5vbGRJRSA9IGRvY3VtZW50LmFsbCAmJiAhZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcjtcblxuXHRcdGZlYXR1cmVzLnRvdWNoID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93O1xuXG5cdFx0aWYod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuXHRcdFx0ZmVhdHVyZXMucmFmID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcblx0XHRcdGZlYXR1cmVzLmNhZiA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcblx0XHR9XG5cblx0XHRmZWF0dXJlcy5wb2ludGVyRXZlbnQgPSBuYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQgfHwgbmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQ7XG5cblx0XHQvLyBmaXggZmFsc2UtcG9zaXRpdmUgZGV0ZWN0aW9uIG9mIG9sZCBBbmRyb2lkIGluIG5ldyBJRVxuXHRcdC8vIChJRTExIHVhIHN0cmluZyBjb250YWlucyBcIkFuZHJvaWQgNC4wXCIpXG5cdFx0XG5cdFx0aWYoIWZlYXR1cmVzLnBvaW50ZXJFdmVudCkgeyBcblxuXHRcdFx0dmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuXHRcdFx0Ly8gRGV0ZWN0IGlmIGRldmljZSBpcyBpUGhvbmUgb3IgaVBvZCBhbmQgaWYgaXQncyBvbGRlciB0aGFuIGlPUyA4XG5cdFx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNDIyMzkyMFxuXHRcdFx0Ly8gXG5cdFx0XHQvLyBUaGlzIGRldGVjdGlvbiBpcyBtYWRlIGJlY2F1c2Ugb2YgYnVnZ3kgdG9wL2JvdHRvbSB0b29sYmFyc1xuXHRcdFx0Ly8gdGhhdCBkb24ndCB0cmlnZ2VyIHdpbmRvdy5yZXNpemUgZXZlbnQuXG5cdFx0XHQvLyBGb3IgbW9yZSBpbmZvIHJlZmVyIHRvIF9pc0ZpeGVkUG9zaXRpb24gdmFyaWFibGUgaW4gY29yZS5qc1xuXG5cdFx0XHRpZiAoL2lQKGhvbmV8b2QpLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkpIHtcblx0XHRcdFx0dmFyIHYgPSAobmF2aWdhdG9yLmFwcFZlcnNpb24pLm1hdGNoKC9PUyAoXFxkKylfKFxcZCspXz8oXFxkKyk/Lyk7XG5cdFx0XHRcdGlmKHYgJiYgdi5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0diA9IHBhcnNlSW50KHZbMV0sIDEwKTtcblx0XHRcdFx0XHRpZih2ID49IDEgJiYgdiA8IDggKSB7XG5cdFx0XHRcdFx0XHRmZWF0dXJlcy5pc09sZElPU1Bob25lID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRGV0ZWN0IG9sZCBBbmRyb2lkIChiZWZvcmUgS2l0S2F0KVxuXHRcdFx0Ly8gZHVlIHRvIGJ1Z3MgcmVsYXRlZCB0byBwb3NpdGlvbjpmaXhlZFxuXHRcdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MTg0NTczL3BpY2stdXAtdGhlLWFuZHJvaWQtdmVyc2lvbi1pbi10aGUtYnJvd3Nlci1ieS1qYXZhc2NyaXB0XG5cdFx0XHRcblx0XHRcdHZhciBtYXRjaCA9IHVhLm1hdGNoKC9BbmRyb2lkXFxzKFswLTlcXC5dKikvKTtcblx0XHRcdHZhciBhbmRyb2lkdmVyc2lvbiA9ICBtYXRjaCA/IG1hdGNoWzFdIDogMDtcblx0XHRcdGFuZHJvaWR2ZXJzaW9uID0gcGFyc2VGbG9hdChhbmRyb2lkdmVyc2lvbik7XG5cdFx0XHRpZihhbmRyb2lkdmVyc2lvbiA+PSAxICkge1xuXHRcdFx0XHRpZihhbmRyb2lkdmVyc2lvbiA8IDQuNCkge1xuXHRcdFx0XHRcdGZlYXR1cmVzLmlzT2xkQW5kcm9pZCA9IHRydWU7IC8vIGZvciBmaXhlZCBwb3NpdGlvbiBidWcgJiBwZXJmb3JtYW5jZVxuXHRcdFx0XHR9XG5cdFx0XHRcdGZlYXR1cmVzLmFuZHJvaWRWZXJzaW9uID0gYW5kcm9pZHZlcnNpb247IC8vIGZvciB0b3VjaGVuZCBidWdcblx0XHRcdH1cdFxuXHRcdFx0ZmVhdHVyZXMuaXNNb2JpbGVPcGVyYSA9IC9vcGVyYSBtaW5pfG9wZXJhIG1vYmkvaS50ZXN0KHVhKTtcblxuXHRcdFx0Ly8gcC5zLiB5ZXMsIHllcywgVUEgc25pZmZpbmcgaXMgYmFkLCBwcm9wb3NlIHlvdXIgc29sdXRpb24gZm9yIGFib3ZlIGJ1Z3MuXG5cdFx0fVxuXHRcdFxuXHRcdHZhciBzdHlsZUNoZWNrcyA9IFsndHJhbnNmb3JtJywgJ3BlcnNwZWN0aXZlJywgJ2FuaW1hdGlvbk5hbWUnXSxcblx0XHRcdHZlbmRvcnMgPSBbJycsICd3ZWJraXQnLCdNb3onLCdtcycsJ08nXSxcblx0XHRcdHN0eWxlQ2hlY2tJdGVtLFxuXHRcdFx0c3R5bGVOYW1lO1xuXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHRcdFx0dmVuZG9yID0gdmVuZG9yc1tpXTtcblxuXHRcdFx0Zm9yKHZhciBhID0gMDsgYSA8IDM7IGErKykge1xuXHRcdFx0XHRzdHlsZUNoZWNrSXRlbSA9IHN0eWxlQ2hlY2tzW2FdO1xuXG5cdFx0XHRcdC8vIHVwcGVyY2FzZSBmaXJzdCBsZXR0ZXIgb2YgcHJvcGVydHkgbmFtZSwgaWYgdmVuZG9yIGlzIHByZXNlbnRcblx0XHRcdFx0c3R5bGVOYW1lID0gdmVuZG9yICsgKHZlbmRvciA/IFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzdHlsZUNoZWNrSXRlbS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0eWxlQ2hlY2tJdGVtLnNsaWNlKDEpIDogXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHN0eWxlQ2hlY2tJdGVtKTtcblx0XHRcdFxuXHRcdFx0XHRpZighZmVhdHVyZXNbc3R5bGVDaGVja0l0ZW1dICYmIHN0eWxlTmFtZSBpbiBoZWxwZXJTdHlsZSApIHtcblx0XHRcdFx0XHRmZWF0dXJlc1tzdHlsZUNoZWNrSXRlbV0gPSBzdHlsZU5hbWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYodmVuZG9yICYmICFmZWF0dXJlcy5yYWYpIHtcblx0XHRcdFx0dmVuZG9yID0gdmVuZG9yLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdGZlYXR1cmVzLnJhZiA9IHdpbmRvd1t2ZW5kb3IrJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuXHRcdFx0XHRpZihmZWF0dXJlcy5yYWYpIHtcblx0XHRcdFx0XHRmZWF0dXJlcy5jYWYgPSB3aW5kb3dbdmVuZG9yKydDYW5jZWxBbmltYXRpb25GcmFtZSddIHx8IFxuXHRcdFx0XHRcdFx0XHRcdFx0d2luZG93W3ZlbmRvcisnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0XHRcblx0XHRpZighZmVhdHVyZXMucmFmKSB7XG5cdFx0XHR2YXIgbGFzdFRpbWUgPSAwO1xuXHRcdFx0ZmVhdHVyZXMucmFmID0gZnVuY3Rpb24oZm4pIHtcblx0XHRcdFx0dmFyIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdFx0XHRcdHZhciB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpO1xuXHRcdFx0XHR2YXIgaWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHsgZm4oY3VyclRpbWUgKyB0aW1lVG9DYWxsKTsgfSwgdGltZVRvQ2FsbCk7XG5cdFx0XHRcdGxhc3RUaW1lID0gY3VyclRpbWUgKyB0aW1lVG9DYWxsO1xuXHRcdFx0XHRyZXR1cm4gaWQ7XG5cdFx0XHR9O1xuXHRcdFx0ZmVhdHVyZXMuY2FmID0gZnVuY3Rpb24oaWQpIHsgY2xlYXJUaW1lb3V0KGlkKTsgfTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgU1ZHIHN1cHBvcnRcblx0XHRmZWF0dXJlcy5zdmcgPSAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyAmJiBcblx0XHRcdFx0XHRcdCEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKS5jcmVhdGVTVkdSZWN0O1xuXG5cdFx0ZnJhbWV3b3JrLmZlYXR1cmVzID0gZmVhdHVyZXM7XG5cblx0XHRyZXR1cm4gZmVhdHVyZXM7XG5cdH1cbn07XG5cbmZyYW1ld29yay5kZXRlY3RGZWF0dXJlcygpO1xuXG4vLyBPdmVycmlkZSBhZGRFdmVudExpc3RlbmVyIGZvciBvbGQgdmVyc2lvbnMgb2YgSUVcbmlmKGZyYW1ld29yay5mZWF0dXJlcy5vbGRJRSkge1xuXG5cdGZyYW1ld29yay5iaW5kID0gZnVuY3Rpb24odGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgdW5iaW5kKSB7XG5cdFx0XG5cdFx0dHlwZSA9IHR5cGUuc3BsaXQoJyAnKTtcblxuXHRcdHZhciBtZXRob2ROYW1lID0gKHVuYmluZCA/ICdkZXRhY2gnIDogJ2F0dGFjaCcpICsgJ0V2ZW50Jyxcblx0XHRcdGV2TmFtZSxcblx0XHRcdF9oYW5kbGVFdiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsaXN0ZW5lci5oYW5kbGVFdmVudC5jYWxsKGxpc3RlbmVyKTtcblx0XHRcdH07XG5cblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0ZXZOYW1lID0gdHlwZVtpXTtcblx0XHRcdGlmKGV2TmFtZSkge1xuXG5cdFx0XHRcdGlmKHR5cGVvZiBsaXN0ZW5lciA9PT0gJ29iamVjdCcgJiYgbGlzdGVuZXIuaGFuZGxlRXZlbnQpIHtcblx0XHRcdFx0XHRpZighdW5iaW5kKSB7XG5cdFx0XHRcdFx0XHRsaXN0ZW5lclsnb2xkSUUnICsgZXZOYW1lXSA9IF9oYW5kbGVFdjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYoIWxpc3RlbmVyWydvbGRJRScgKyBldk5hbWVdKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0YXJnZXRbbWV0aG9kTmFtZV0oICdvbicgKyBldk5hbWUsIGxpc3RlbmVyWydvbGRJRScgKyBldk5hbWVdKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0YXJnZXRbbWV0aG9kTmFtZV0oICdvbicgKyBldk5hbWUsIGxpc3RlbmVyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRcbn1cblxuLyo+PmZyYW1ld29yay1icmlkZ2UqL1xuXG4vKj4+Y29yZSovXG4vL2Z1bmN0aW9uKHRlbXBsYXRlLCBVaUNsYXNzLCBpdGVtcywgb3B0aW9ucylcblxudmFyIHNlbGYgPSB0aGlzO1xuXG4vKipcbiAqIFN0YXRpYyB2YXJzLCBkb24ndCBjaGFuZ2UgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91J3JlIGRvaW5nLlxuICovXG52YXIgRE9VQkxFX1RBUF9SQURJVVMgPSAyNSwgXG5cdE5VTV9IT0xERVJTID0gMztcblxuLyoqXG4gKiBPcHRpb25zXG4gKi9cbnZhciBfb3B0aW9ucyA9IHtcblx0YWxsb3dQYW5Ub05leHQ6dHJ1ZSxcblx0c3BhY2luZzogMC4xMixcblx0YmdPcGFjaXR5OiAxLFxuXHRtb3VzZVVzZWQ6IGZhbHNlLFxuXHRsb29wOiB0cnVlLFxuXHRwaW5jaFRvQ2xvc2U6IHRydWUsXG5cdGNsb3NlT25TY3JvbGw6IHRydWUsXG5cdGNsb3NlT25WZXJ0aWNhbERyYWc6IHRydWUsXG5cdHZlcnRpY2FsRHJhZ1JhbmdlOiAwLjc1LFxuXHRoaWRlQW5pbWF0aW9uRHVyYXRpb246IDMzMyxcblx0c2hvd0FuaW1hdGlvbkR1cmF0aW9uOiAzMzMsXG5cdHNob3dIaWRlT3BhY2l0eTogZmFsc2UsXG5cdGZvY3VzOiB0cnVlLFxuXHRlc2NLZXk6IHRydWUsXG5cdGFycm93S2V5czogdHJ1ZSxcblx0bWFpblNjcm9sbEVuZEZyaWN0aW9uOiAwLjM1LFxuXHRwYW5FbmRGcmljdGlvbjogMC4zNSxcblx0aXNDbGlja2FibGVFbGVtZW50OiBmdW5jdGlvbihlbCkge1xuICAgICAgICByZXR1cm4gZWwudGFnTmFtZSA9PT0gJ0EnO1xuICAgIH0sXG4gICAgZ2V0RG91YmxlVGFwWm9vbTogZnVuY3Rpb24oaXNNb3VzZUNsaWNrLCBpdGVtKSB7XG4gICAgXHRpZihpc01vdXNlQ2xpY2spIHtcbiAgICBcdFx0cmV0dXJuIDE7XG4gICAgXHR9IGVsc2Uge1xuICAgIFx0XHRyZXR1cm4gaXRlbS5pbml0aWFsWm9vbUxldmVsIDwgMC43ID8gMSA6IDEuMzM7XG4gICAgXHR9XG4gICAgfSxcbiAgICBtYXhTcHJlYWRab29tOiAxLjMzLFxuXHRtb2RhbDogdHJ1ZSxcblxuXHQvLyBub3QgZnVsbHkgaW1wbGVtZW50ZWQgeWV0XG5cdHNjYWxlTW9kZTogJ2ZpdCcgLy8gVE9ET1xufTtcbmZyYW1ld29yay5leHRlbmQoX29wdGlvbnMsIG9wdGlvbnMpO1xuXG5cbi8qKlxuICogUHJpdmF0ZSBoZWxwZXIgdmFyaWFibGVzICYgZnVuY3Rpb25zXG4gKi9cblxudmFyIF9nZXRFbXB0eVBvaW50ID0gZnVuY3Rpb24oKSB7IFxuXHRcdHJldHVybiB7eDowLHk6MH07IFxuXHR9O1xuXG52YXIgX2lzT3Blbixcblx0X2lzRGVzdHJveWluZyxcblx0X2Nsb3NlZEJ5U2Nyb2xsLFxuXHRfY3VycmVudEl0ZW1JbmRleCxcblx0X2NvbnRhaW5lclN0eWxlLFxuXHRfY29udGFpbmVyU2hpZnRJbmRleCxcblx0X2N1cnJQYW5EaXN0ID0gX2dldEVtcHR5UG9pbnQoKSxcblx0X3N0YXJ0UGFuT2Zmc2V0ID0gX2dldEVtcHR5UG9pbnQoKSxcblx0X3Bhbk9mZnNldCA9IF9nZXRFbXB0eVBvaW50KCksXG5cdF91cE1vdmVFdmVudHMsIC8vIGRyYWcgbW92ZSwgZHJhZyBlbmQgJiBkcmFnIGNhbmNlbCBldmVudHMgYXJyYXlcblx0X2Rvd25FdmVudHMsIC8vIGRyYWcgc3RhcnQgZXZlbnRzIGFycmF5XG5cdF9nbG9iYWxFdmVudEhhbmRsZXJzLFxuXHRfdmlld3BvcnRTaXplID0ge30sXG5cdF9jdXJyWm9vbUxldmVsLFxuXHRfc3RhcnRab29tTGV2ZWwsXG5cdF90cmFuc2xhdGVQcmVmaXgsXG5cdF90cmFuc2xhdGVTdWZpeCxcblx0X3VwZGF0ZVNpemVJbnRlcnZhbCxcblx0X2l0ZW1zTmVlZFVwZGF0ZSxcblx0X2N1cnJQb3NpdGlvbkluZGV4ID0gMCxcblx0X29mZnNldCA9IHt9LFxuXHRfc2xpZGVTaXplID0gX2dldEVtcHR5UG9pbnQoKSwgLy8gc2l6ZSBvZiBzbGlkZSBhcmVhLCBpbmNsdWRpbmcgc3BhY2luZ1xuXHRfaXRlbUhvbGRlcnMsXG5cdF9wcmV2SXRlbUluZGV4LFxuXHRfaW5kZXhEaWZmID0gMCwgLy8gZGlmZmVyZW5jZSBvZiBpbmRleGVzIHNpbmNlIGxhc3QgY29udGVudCB1cGRhdGVcblx0X2RyYWdTdGFydEV2ZW50LFxuXHRfZHJhZ01vdmVFdmVudCxcblx0X2RyYWdFbmRFdmVudCxcblx0X2RyYWdDYW5jZWxFdmVudCxcblx0X3RyYW5zZm9ybUtleSxcblx0X3BvaW50ZXJFdmVudEVuYWJsZWQsXG5cdF9pc0ZpeGVkUG9zaXRpb24gPSB0cnVlLFxuXHRfbGlrZWx5VG91Y2hEZXZpY2UsXG5cdF9tb2R1bGVzID0gW10sXG5cdF9yZXF1ZXN0QUYsXG5cdF9jYW5jZWxBRixcblx0X2luaXRhbENsYXNzTmFtZSxcblx0X2luaXRhbFdpbmRvd1Njcm9sbFksXG5cdF9vbGRJRSxcblx0X2N1cnJlbnRXaW5kb3dTY3JvbGxZLFxuXHRfZmVhdHVyZXMsXG5cdF93aW5kb3dWaXNpYmxlU2l6ZSA9IHt9LFxuXHRfcmVuZGVyTWF4UmVzb2x1dGlvbiA9IGZhbHNlLFxuXG5cdC8vIFJlZ2lzdGVycyBQaG90b1NXaXBlIG1vZHVsZSAoSGlzdG9yeSwgQ29udHJvbGxlciAuLi4pXG5cdF9yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uKG5hbWUsIG1vZHVsZSkge1xuXHRcdGZyYW1ld29yay5leHRlbmQoc2VsZiwgbW9kdWxlLnB1YmxpY01ldGhvZHMpO1xuXHRcdF9tb2R1bGVzLnB1c2gobmFtZSk7XG5cdH0sXG5cblx0X2dldExvb3BlZElkID0gZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgbnVtU2xpZGVzID0gX2dldE51bUl0ZW1zKCk7XG5cdFx0aWYoaW5kZXggPiBudW1TbGlkZXMgLSAxKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggLSBudW1TbGlkZXM7XG5cdFx0fSBlbHNlICBpZihpbmRleCA8IDApIHtcblx0XHRcdHJldHVybiBudW1TbGlkZXMgKyBpbmRleDtcblx0XHR9XG5cdFx0cmV0dXJuIGluZGV4O1xuXHR9LFxuXHRcblx0Ly8gTWljcm8gYmluZC90cmlnZ2VyXG5cdF9saXN0ZW5lcnMgPSB7fSxcblx0X2xpc3RlbiA9IGZ1bmN0aW9uKG5hbWUsIGZuKSB7XG5cdFx0aWYoIV9saXN0ZW5lcnNbbmFtZV0pIHtcblx0XHRcdF9saXN0ZW5lcnNbbmFtZV0gPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIF9saXN0ZW5lcnNbbmFtZV0ucHVzaChmbik7XG5cdH0sXG5cdF9zaG91dCA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0XHR2YXIgbGlzdGVuZXJzID0gX2xpc3RlbmVyc1tuYW1lXTtcblxuXHRcdGlmKGxpc3RlbmVycykge1xuXHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdFx0YXJncy5zaGlmdCgpO1xuXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGxpc3RlbmVyc1tpXS5hcHBseShzZWxmLCBhcmdzKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0X2dldEN1cnJlbnRUaW1lID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHR9LFxuXHRfYXBwbHlCZ09wYWNpdHkgPSBmdW5jdGlvbihvcGFjaXR5KSB7XG5cdFx0X2JnT3BhY2l0eSA9IG9wYWNpdHk7XG5cdFx0c2VsZi5iZy5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eSAqIF9vcHRpb25zLmJnT3BhY2l0eTtcblx0fSxcblxuXHRfYXBwbHlab29tVHJhbnNmb3JtID0gZnVuY3Rpb24oc3R5bGVPYmoseCx5LHpvb20saXRlbSkge1xuXHRcdGlmKCFfcmVuZGVyTWF4UmVzb2x1dGlvbiB8fCAoaXRlbSAmJiBpdGVtICE9PSBzZWxmLmN1cnJJdGVtKSApIHtcblx0XHRcdHpvb20gPSB6b29tIC8gKGl0ZW0gPyBpdGVtLmZpdFJhdGlvIDogc2VsZi5jdXJySXRlbS5maXRSYXRpbyk7XHRcblx0XHR9XG5cdFx0XHRcblx0XHRzdHlsZU9ialtfdHJhbnNmb3JtS2V5XSA9IF90cmFuc2xhdGVQcmVmaXggKyB4ICsgJ3B4LCAnICsgeSArICdweCcgKyBfdHJhbnNsYXRlU3VmaXggKyAnIHNjYWxlKCcgKyB6b29tICsgJyknO1xuXHR9LFxuXHRfYXBwbHlDdXJyZW50Wm9vbVBhbiA9IGZ1bmN0aW9uKCBhbGxvd1JlbmRlclJlc29sdXRpb24gKSB7XG5cdFx0aWYoX2N1cnJab29tRWxlbWVudFN0eWxlKSB7XG5cblx0XHRcdGlmKGFsbG93UmVuZGVyUmVzb2x1dGlvbikge1xuXHRcdFx0XHRpZihfY3Vyclpvb21MZXZlbCA+IHNlbGYuY3Vyckl0ZW0uZml0UmF0aW8pIHtcblx0XHRcdFx0XHRpZighX3JlbmRlck1heFJlc29sdXRpb24pIHtcblx0XHRcdFx0XHRcdF9zZXRJbWFnZVNpemUoc2VsZi5jdXJySXRlbSwgZmFsc2UsIHRydWUpO1xuXHRcdFx0XHRcdFx0X3JlbmRlck1heFJlc29sdXRpb24gPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZihfcmVuZGVyTWF4UmVzb2x1dGlvbikge1xuXHRcdFx0XHRcdFx0X3NldEltYWdlU2l6ZShzZWxmLmN1cnJJdGVtKTtcblx0XHRcdFx0XHRcdF9yZW5kZXJNYXhSZXNvbHV0aW9uID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblxuXHRcdFx0X2FwcGx5Wm9vbVRyYW5zZm9ybShfY3Vyclpvb21FbGVtZW50U3R5bGUsIF9wYW5PZmZzZXQueCwgX3Bhbk9mZnNldC55LCBfY3Vyclpvb21MZXZlbCk7XG5cdFx0fVxuXHR9LFxuXHRfYXBwbHlab29tUGFuVG9JdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdGlmKGl0ZW0uY29udGFpbmVyKSB7XG5cblx0XHRcdF9hcHBseVpvb21UcmFuc2Zvcm0oaXRlbS5jb250YWluZXIuc3R5bGUsIFxuXHRcdFx0XHRcdFx0XHRcdGl0ZW0uaW5pdGlhbFBvc2l0aW9uLngsIFxuXHRcdFx0XHRcdFx0XHRcdGl0ZW0uaW5pdGlhbFBvc2l0aW9uLnksIFxuXHRcdFx0XHRcdFx0XHRcdGl0ZW0uaW5pdGlhbFpvb21MZXZlbCxcblx0XHRcdFx0XHRcdFx0XHRpdGVtKTtcblx0XHR9XG5cdH0sXG5cdF9zZXRUcmFuc2xhdGVYID0gZnVuY3Rpb24oeCwgZWxTdHlsZSkge1xuXHRcdGVsU3R5bGVbX3RyYW5zZm9ybUtleV0gPSBfdHJhbnNsYXRlUHJlZml4ICsgeCArICdweCwgMHB4JyArIF90cmFuc2xhdGVTdWZpeDtcblx0fSxcblx0X21vdmVNYWluU2Nyb2xsID0gZnVuY3Rpb24oeCwgZHJhZ2dpbmcpIHtcblxuXHRcdGlmKCFfb3B0aW9ucy5sb29wICYmIGRyYWdnaW5nKSB7XG5cdFx0XHR2YXIgbmV3U2xpZGVJbmRleE9mZnNldCA9IF9jdXJyZW50SXRlbUluZGV4ICsgKF9zbGlkZVNpemUueCAqIF9jdXJyUG9zaXRpb25JbmRleCAtIHgpIC8gX3NsaWRlU2l6ZS54LFxuXHRcdFx0XHRkZWx0YSA9IE1hdGgucm91bmQoeCAtIF9tYWluU2Nyb2xsUG9zLngpO1xuXG5cdFx0XHRpZiggKG5ld1NsaWRlSW5kZXhPZmZzZXQgPCAwICYmIGRlbHRhID4gMCkgfHwgXG5cdFx0XHRcdChuZXdTbGlkZUluZGV4T2Zmc2V0ID49IF9nZXROdW1JdGVtcygpIC0gMSAmJiBkZWx0YSA8IDApICkge1xuXHRcdFx0XHR4ID0gX21haW5TY3JvbGxQb3MueCArIGRlbHRhICogX29wdGlvbnMubWFpblNjcm9sbEVuZEZyaWN0aW9uO1xuXHRcdFx0fSBcblx0XHR9XG5cdFx0XG5cdFx0X21haW5TY3JvbGxQb3MueCA9IHg7XG5cdFx0X3NldFRyYW5zbGF0ZVgoeCwgX2NvbnRhaW5lclN0eWxlKTtcblx0fSxcblx0X2NhbGN1bGF0ZVBhbk9mZnNldCA9IGZ1bmN0aW9uKGF4aXMsIHpvb21MZXZlbCkge1xuXHRcdHZhciBtID0gX21pZFpvb21Qb2ludFtheGlzXSAtIF9vZmZzZXRbYXhpc107XG5cdFx0cmV0dXJuIF9zdGFydFBhbk9mZnNldFtheGlzXSArIF9jdXJyUGFuRGlzdFtheGlzXSArIG0gLSBtICogKCB6b29tTGV2ZWwgLyBfc3RhcnRab29tTGV2ZWwgKTtcblx0fSxcblx0XG5cdF9lcXVhbGl6ZVBvaW50cyA9IGZ1bmN0aW9uKHAxLCBwMikge1xuXHRcdHAxLnggPSBwMi54O1xuXHRcdHAxLnkgPSBwMi55O1xuXHRcdGlmKHAyLmlkKSB7XG5cdFx0XHRwMS5pZCA9IHAyLmlkO1xuXHRcdH1cblx0fSxcblx0X3JvdW5kUG9pbnQgPSBmdW5jdGlvbihwKSB7XG5cdFx0cC54ID0gTWF0aC5yb3VuZChwLngpO1xuXHRcdHAueSA9IE1hdGgucm91bmQocC55KTtcblx0fSxcblxuXHRfbW91c2VNb3ZlVGltZW91dCA9IG51bGwsXG5cdF9vbkZpcnN0TW91c2VNb3ZlID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gV2FpdCB1bnRpbCBtb3VzZSBtb3ZlIGV2ZW50IGlzIGZpcmVkIGF0IGxlYXN0IHR3aWNlIGR1cmluZyAxMDBtc1xuXHRcdC8vIFdlIGRvIHRoaXMsIGJlY2F1c2Ugc29tZSBtb2JpbGUgYnJvd3NlcnMgdHJpZ2dlciBpdCBvbiB0b3VjaHN0YXJ0XG5cdFx0aWYoX21vdXNlTW92ZVRpbWVvdXQgKSB7IFxuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChkb2N1bWVudCwgJ21vdXNlbW92ZScsIF9vbkZpcnN0TW91c2VNb3ZlKTtcblx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLWhhc19tb3VzZScpO1xuXHRcdFx0X29wdGlvbnMubW91c2VVc2VkID0gdHJ1ZTtcblx0XHRcdF9zaG91dCgnbW91c2VVc2VkJyk7XG5cdFx0fVxuXHRcdF9tb3VzZU1vdmVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdF9tb3VzZU1vdmVUaW1lb3V0ID0gbnVsbDtcblx0XHR9LCAxMDApO1xuXHR9LFxuXG5cdF9iaW5kRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0ZnJhbWV3b3JrLmJpbmQoZG9jdW1lbnQsICdrZXlkb3duJywgc2VsZik7XG5cblx0XHRpZihfZmVhdHVyZXMudHJhbnNmb3JtKSB7XG5cdFx0XHQvLyBkb24ndCBiaW5kIGNsaWNrIGV2ZW50IGluIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCB0cmFuc2Zvcm0gKG1vc3RseSBJRTgpXG5cdFx0XHRmcmFtZXdvcmsuYmluZChzZWxmLnNjcm9sbFdyYXAsICdjbGljaycsIHNlbGYpO1xuXHRcdH1cblx0XHRcblxuXHRcdGlmKCFfb3B0aW9ucy5tb3VzZVVzZWQpIHtcblx0XHRcdGZyYW1ld29yay5iaW5kKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgX29uRmlyc3RNb3VzZU1vdmUpO1xuXHRcdH1cblxuXHRcdGZyYW1ld29yay5iaW5kKHdpbmRvdywgJ3Jlc2l6ZSBzY3JvbGwnLCBzZWxmKTtcblxuXHRcdF9zaG91dCgnYmluZEV2ZW50cycpO1xuXHR9LFxuXG5cdF91bmJpbmRFdmVudHMgPSBmdW5jdGlvbigpIHtcblx0XHRmcmFtZXdvcmsudW5iaW5kKHdpbmRvdywgJ3Jlc2l6ZScsIHNlbGYpO1xuXHRcdGZyYW1ld29yay51bmJpbmQod2luZG93LCAnc2Nyb2xsJywgX2dsb2JhbEV2ZW50SGFuZGxlcnMuc2Nyb2xsKTtcblx0XHRmcmFtZXdvcmsudW5iaW5kKGRvY3VtZW50LCAna2V5ZG93bicsIHNlbGYpO1xuXHRcdGZyYW1ld29yay51bmJpbmQoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfb25GaXJzdE1vdXNlTW92ZSk7XG5cblx0XHRpZihfZmVhdHVyZXMudHJhbnNmb3JtKSB7XG5cdFx0XHRmcmFtZXdvcmsudW5iaW5kKHNlbGYuc2Nyb2xsV3JhcCwgJ2NsaWNrJywgc2VsZik7XG5cdFx0fVxuXG5cdFx0aWYoX2lzRHJhZ2dpbmcpIHtcblx0XHRcdGZyYW1ld29yay51bmJpbmQod2luZG93LCBfdXBNb3ZlRXZlbnRzLCBzZWxmKTtcblx0XHR9XG5cblx0XHRfc2hvdXQoJ3VuYmluZEV2ZW50cycpO1xuXHR9LFxuXHRcblx0X2NhbGN1bGF0ZVBhbkJvdW5kcyA9IGZ1bmN0aW9uKHpvb21MZXZlbCwgdXBkYXRlKSB7XG5cdFx0dmFyIGJvdW5kcyA9IF9jYWxjdWxhdGVJdGVtU2l6ZSggc2VsZi5jdXJySXRlbSwgX3ZpZXdwb3J0U2l6ZSwgem9vbUxldmVsICk7XG5cdFx0aWYodXBkYXRlKSB7XG5cdFx0XHRfY3VyclBhbkJvdW5kcyA9IGJvdW5kcztcblx0XHR9XG5cdFx0cmV0dXJuIGJvdW5kcztcblx0fSxcblx0XG5cdF9nZXRNaW5ab29tTGV2ZWwgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYoIWl0ZW0pIHtcblx0XHRcdGl0ZW0gPSBzZWxmLmN1cnJJdGVtO1xuXHRcdH1cblx0XHRyZXR1cm4gaXRlbS5pbml0aWFsWm9vbUxldmVsO1xuXHR9LFxuXHRfZ2V0TWF4Wm9vbUxldmVsID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdGlmKCFpdGVtKSB7XG5cdFx0XHRpdGVtID0gc2VsZi5jdXJySXRlbTtcblx0XHR9XG5cdFx0cmV0dXJuIGl0ZW0udyA+IDAgPyBfb3B0aW9ucy5tYXhTcHJlYWRab29tIDogMTtcblx0fSxcblxuXHQvLyBSZXR1cm4gdHJ1ZSBpZiBvZmZzZXQgaXMgb3V0IG9mIHRoZSBib3VuZHNcblx0X21vZGlmeURlc3RQYW5PZmZzZXQgPSBmdW5jdGlvbihheGlzLCBkZXN0UGFuQm91bmRzLCBkZXN0UGFuT2Zmc2V0LCBkZXN0Wm9vbUxldmVsKSB7XG5cdFx0aWYoZGVzdFpvb21MZXZlbCA9PT0gc2VsZi5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsKSB7XG5cdFx0XHRkZXN0UGFuT2Zmc2V0W2F4aXNdID0gc2VsZi5jdXJySXRlbS5pbml0aWFsUG9zaXRpb25bYXhpc107XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVzdFBhbk9mZnNldFtheGlzXSA9IF9jYWxjdWxhdGVQYW5PZmZzZXQoYXhpcywgZGVzdFpvb21MZXZlbCk7IFxuXG5cdFx0XHRpZihkZXN0UGFuT2Zmc2V0W2F4aXNdID4gZGVzdFBhbkJvdW5kcy5taW5bYXhpc10pIHtcblx0XHRcdFx0ZGVzdFBhbk9mZnNldFtheGlzXSA9IGRlc3RQYW5Cb3VuZHMubWluW2F4aXNdO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0gZWxzZSBpZihkZXN0UGFuT2Zmc2V0W2F4aXNdIDwgZGVzdFBhbkJvdW5kcy5tYXhbYXhpc10gKSB7XG5cdFx0XHRcdGRlc3RQYW5PZmZzZXRbYXhpc10gPSBkZXN0UGFuQm91bmRzLm1heFtheGlzXTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRfc2V0dXBUcmFuc2Zvcm1zID0gZnVuY3Rpb24oKSB7XG5cblx0XHRpZihfdHJhbnNmb3JtS2V5KSB7XG5cdFx0XHQvLyBzZXR1cCAzZCB0cmFuc2Zvcm1zXG5cdFx0XHR2YXIgYWxsb3czZFRyYW5zZm9ybSA9IF9mZWF0dXJlcy5wZXJzcGVjdGl2ZSAmJiAhX2xpa2VseVRvdWNoRGV2aWNlO1xuXHRcdFx0X3RyYW5zbGF0ZVByZWZpeCA9ICd0cmFuc2xhdGUnICsgKGFsbG93M2RUcmFuc2Zvcm0gPyAnM2QoJyA6ICcoJyk7XG5cdFx0XHRfdHJhbnNsYXRlU3VmaXggPSBfZmVhdHVyZXMucGVyc3BlY3RpdmUgPyAnLCAwcHgpJyA6ICcpJztcdFxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE92ZXJyaWRlIHpvb20vcGFuL21vdmUgZnVuY3Rpb25zIGluIGNhc2Ugb2xkIGJyb3dzZXIgaXMgdXNlZCAobW9zdCBsaWtlbHkgSUUpXG5cdFx0Ly8gKHNvIHRoZXkgdXNlIGxlZnQvdG9wL3dpZHRoL2hlaWdodCwgaW5zdGVhZCBvZiBDU1MgdHJhbnNmb3JtKVxuXHRcblx0XHRfdHJhbnNmb3JtS2V5ID0gJ2xlZnQnO1xuXHRcdGZyYW1ld29yay5hZGRDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLWllJyk7XG5cblx0XHRfc2V0VHJhbnNsYXRlWCA9IGZ1bmN0aW9uKHgsIGVsU3R5bGUpIHtcblx0XHRcdGVsU3R5bGUubGVmdCA9IHggKyAncHgnO1xuXHRcdH07XG5cdFx0X2FwcGx5Wm9vbVBhblRvSXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcblxuXHRcdFx0dmFyIHpvb21SYXRpbyA9IGl0ZW0uZml0UmF0aW8gPiAxID8gMSA6IGl0ZW0uZml0UmF0aW8sXG5cdFx0XHRcdHMgPSBpdGVtLmNvbnRhaW5lci5zdHlsZSxcblx0XHRcdFx0dyA9IHpvb21SYXRpbyAqIGl0ZW0udyxcblx0XHRcdFx0aCA9IHpvb21SYXRpbyAqIGl0ZW0uaDtcblxuXHRcdFx0cy53aWR0aCA9IHcgKyAncHgnO1xuXHRcdFx0cy5oZWlnaHQgPSBoICsgJ3B4Jztcblx0XHRcdHMubGVmdCA9IGl0ZW0uaW5pdGlhbFBvc2l0aW9uLnggKyAncHgnO1xuXHRcdFx0cy50b3AgPSBpdGVtLmluaXRpYWxQb3NpdGlvbi55ICsgJ3B4JztcblxuXHRcdH07XG5cdFx0X2FwcGx5Q3VycmVudFpvb21QYW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmKF9jdXJyWm9vbUVsZW1lbnRTdHlsZSkge1xuXG5cdFx0XHRcdHZhciBzID0gX2N1cnJab29tRWxlbWVudFN0eWxlLFxuXHRcdFx0XHRcdGl0ZW0gPSBzZWxmLmN1cnJJdGVtLFxuXHRcdFx0XHRcdHpvb21SYXRpbyA9IGl0ZW0uZml0UmF0aW8gPiAxID8gMSA6IGl0ZW0uZml0UmF0aW8sXG5cdFx0XHRcdFx0dyA9IHpvb21SYXRpbyAqIGl0ZW0udyxcblx0XHRcdFx0XHRoID0gem9vbVJhdGlvICogaXRlbS5oO1xuXG5cdFx0XHRcdHMud2lkdGggPSB3ICsgJ3B4Jztcblx0XHRcdFx0cy5oZWlnaHQgPSBoICsgJ3B4JztcblxuXG5cdFx0XHRcdHMubGVmdCA9IF9wYW5PZmZzZXQueCArICdweCc7XG5cdFx0XHRcdHMudG9wID0gX3Bhbk9mZnNldC55ICsgJ3B4Jztcblx0XHRcdH1cblx0XHRcdFxuXHRcdH07XG5cdH0sXG5cblx0X29uS2V5RG93biA9IGZ1bmN0aW9uKGUpIHtcblx0XHR2YXIga2V5ZG93bkFjdGlvbiA9ICcnO1xuXHRcdGlmKF9vcHRpb25zLmVzY0tleSAmJiBlLmtleUNvZGUgPT09IDI3KSB7IFxuXHRcdFx0a2V5ZG93bkFjdGlvbiA9ICdjbG9zZSc7XG5cdFx0fSBlbHNlIGlmKF9vcHRpb25zLmFycm93S2V5cykge1xuXHRcdFx0aWYoZS5rZXlDb2RlID09PSAzNykge1xuXHRcdFx0XHRrZXlkb3duQWN0aW9uID0gJ3ByZXYnO1xuXHRcdFx0fSBlbHNlIGlmKGUua2V5Q29kZSA9PT0gMzkpIHsgXG5cdFx0XHRcdGtleWRvd25BY3Rpb24gPSAnbmV4dCc7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoa2V5ZG93bkFjdGlvbikge1xuXHRcdFx0Ly8gZG9uJ3QgZG8gYW55dGhpbmcgaWYgc3BlY2lhbCBrZXkgcHJlc3NlZCB0byBwcmV2ZW50IGZyb20gb3ZlcnJpZGluZyBkZWZhdWx0IGJyb3dzZXIgYWN0aW9uc1xuXHRcdFx0Ly8gZS5nLiBpbiBDaHJvbWUgb24gTWFjIGNtZCthcnJvdy1sZWZ0IHJldHVybnMgdG8gcHJldmlvdXMgcGFnZVxuXHRcdFx0aWYoICFlLmN0cmxLZXkgJiYgIWUuYWx0S2V5ICYmICFlLnNoaWZ0S2V5ICYmICFlLm1ldGFLZXkgKSB7XG5cdFx0XHRcdGlmKGUucHJldmVudERlZmF1bHQpIHtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuXHRcdFx0XHR9IFxuXHRcdFx0XHRzZWxmW2tleWRvd25BY3Rpb25dKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdF9vbkdsb2JhbENsaWNrID0gZnVuY3Rpb24oZSkge1xuXHRcdGlmKCFlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZG9uJ3QgYWxsb3cgY2xpY2sgZXZlbnQgdG8gcGFzcyB0aHJvdWdoIHdoZW4gdHJpZ2dlcmluZyBhZnRlciBkcmFnIG9yIHNvbWUgb3RoZXIgZ2VzdHVyZVxuXHRcdGlmKF9tb3ZlZCB8fCBfem9vbVN0YXJ0ZWQgfHwgX21haW5TY3JvbGxBbmltYXRpbmcgfHwgX3ZlcnRpY2FsRHJhZ0luaXRpYXRlZCkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cblx0X3VwZGF0ZVBhZ2VTY3JvbGxPZmZzZXQgPSBmdW5jdGlvbigpIHtcblx0XHRzZWxmLnNldFNjcm9sbE9mZnNldCgwLCBmcmFtZXdvcmsuZ2V0U2Nyb2xsWSgpKTtcdFx0XG5cdH07XG5cdFxuXG5cblx0XG5cblxuXG4vLyBNaWNybyBhbmltYXRpb24gZW5naW5lXG52YXIgX2FuaW1hdGlvbnMgPSB7fSxcblx0X251bUFuaW1hdGlvbnMgPSAwLFxuXHRfc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRpZihfYW5pbWF0aW9uc1tuYW1lXSkge1xuXHRcdFx0aWYoX2FuaW1hdGlvbnNbbmFtZV0ucmFmKSB7XG5cdFx0XHRcdF9jYW5jZWxBRiggX2FuaW1hdGlvbnNbbmFtZV0ucmFmICk7XG5cdFx0XHR9XG5cdFx0XHRfbnVtQW5pbWF0aW9ucy0tO1xuXHRcdFx0ZGVsZXRlIF9hbmltYXRpb25zW25hbWVdO1xuXHRcdH1cblx0fSxcblx0X3JlZ2lzdGVyU3RhcnRBbmltYXRpb24gPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0aWYoX2FuaW1hdGlvbnNbbmFtZV0pIHtcblx0XHRcdF9zdG9wQW5pbWF0aW9uKG5hbWUpO1xuXHRcdH1cblx0XHRpZighX2FuaW1hdGlvbnNbbmFtZV0pIHtcblx0XHRcdF9udW1BbmltYXRpb25zKys7XG5cdFx0XHRfYW5pbWF0aW9uc1tuYW1lXSA9IHt9O1xuXHRcdH1cblx0fSxcblx0X3N0b3BBbGxBbmltYXRpb25zID0gZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICh2YXIgcHJvcCBpbiBfYW5pbWF0aW9ucykge1xuXG5cdFx0XHRpZiggX2FuaW1hdGlvbnMuaGFzT3duUHJvcGVydHkoIHByb3AgKSApIHtcblx0XHRcdFx0X3N0b3BBbmltYXRpb24ocHJvcCk7XG5cdFx0XHR9IFxuXHRcdFx0XG5cdFx0fVxuXHR9LFxuXHRfYW5pbWF0ZVByb3AgPSBmdW5jdGlvbihuYW1lLCBiLCBlbmRQcm9wLCBkLCBlYXNpbmdGbiwgb25VcGRhdGUsIG9uQ29tcGxldGUpIHtcblx0XHR2YXIgc3RhcnRBbmltVGltZSA9IF9nZXRDdXJyZW50VGltZSgpLCB0O1xuXHRcdF9yZWdpc3RlclN0YXJ0QW5pbWF0aW9uKG5hbWUpO1xuXG5cdFx0dmFyIGFuaW1sb29wID0gZnVuY3Rpb24oKXtcblx0XHRcdGlmICggX2FuaW1hdGlvbnNbbmFtZV0gKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHR0ID0gX2dldEN1cnJlbnRUaW1lKCkgLSBzdGFydEFuaW1UaW1lOyAvLyB0aW1lIGRpZmZcblx0XHRcdFx0Ly9iIC0gYmVnaW5uaW5nIChzdGFydCBwcm9wKVxuXHRcdFx0XHQvL2QgLSBhbmltIGR1cmF0aW9uXG5cblx0XHRcdFx0aWYgKCB0ID49IGQgKSB7XG5cdFx0XHRcdFx0X3N0b3BBbmltYXRpb24obmFtZSk7XG5cdFx0XHRcdFx0b25VcGRhdGUoZW5kUHJvcCk7XG5cdFx0XHRcdFx0aWYob25Db21wbGV0ZSkge1xuXHRcdFx0XHRcdFx0b25Db21wbGV0ZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0b25VcGRhdGUoIChlbmRQcm9wIC0gYikgKiBlYXNpbmdGbih0L2QpICsgYiApO1xuXG5cdFx0XHRcdF9hbmltYXRpb25zW25hbWVdLnJhZiA9IF9yZXF1ZXN0QUYoYW5pbWxvb3ApO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0YW5pbWxvb3AoKTtcblx0fTtcblx0XG5cblxudmFyIHB1YmxpY01ldGhvZHMgPSB7XG5cblx0Ly8gbWFrZSBhIGZldyBsb2NhbCB2YXJpYWJsZXMgYW5kIGZ1bmN0aW9ucyBwdWJsaWNcblx0c2hvdXQ6IF9zaG91dCxcblx0bGlzdGVuOiBfbGlzdGVuLFxuXHR2aWV3cG9ydFNpemU6IF92aWV3cG9ydFNpemUsXG5cdG9wdGlvbnM6IF9vcHRpb25zLFxuXG5cdGlzTWFpblNjcm9sbEFuaW1hdGluZzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIF9tYWluU2Nyb2xsQW5pbWF0aW5nO1xuXHR9LFxuXHRnZXRab29tTGV2ZWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBfY3Vyclpvb21MZXZlbDtcblx0fSxcblx0Z2V0Q3VycmVudEluZGV4OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gX2N1cnJlbnRJdGVtSW5kZXg7XG5cdH0sXG5cdGlzRHJhZ2dpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBfaXNEcmFnZ2luZztcblx0fSxcdFxuXHRpc1pvb21pbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBfaXNab29taW5nO1xuXHR9LFxuXHRzZXRTY3JvbGxPZmZzZXQ6IGZ1bmN0aW9uKHgseSkge1xuXHRcdF9vZmZzZXQueCA9IHg7XG5cdFx0X2N1cnJlbnRXaW5kb3dTY3JvbGxZID0gX29mZnNldC55ID0geTtcblx0XHRfc2hvdXQoJ3VwZGF0ZVNjcm9sbE9mZnNldCcsIF9vZmZzZXQpO1xuXHR9LFxuXHRhcHBseVpvb21QYW46IGZ1bmN0aW9uKHpvb21MZXZlbCxwYW5YLHBhblksYWxsb3dSZW5kZXJSZXNvbHV0aW9uKSB7XG5cdFx0X3Bhbk9mZnNldC54ID0gcGFuWDtcblx0XHRfcGFuT2Zmc2V0LnkgPSBwYW5ZO1xuXHRcdF9jdXJyWm9vbUxldmVsID0gem9vbUxldmVsO1xuXHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCBhbGxvd1JlbmRlclJlc29sdXRpb24gKTtcblx0fSxcblxuXHRpbml0OiBmdW5jdGlvbigpIHtcblxuXHRcdGlmKF9pc09wZW4gfHwgX2lzRGVzdHJveWluZykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBpO1xuXG5cdFx0c2VsZi5mcmFtZXdvcmsgPSBmcmFtZXdvcms7IC8vIGJhc2ljIGZ1bmN0aW9uYWxpdHlcblx0XHRzZWxmLnRlbXBsYXRlID0gdGVtcGxhdGU7IC8vIHJvb3QgRE9NIGVsZW1lbnQgb2YgUGhvdG9Td2lwZVxuXHRcdHNlbGYuYmcgPSBmcmFtZXdvcmsuZ2V0Q2hpbGRCeUNsYXNzKHRlbXBsYXRlLCAncHN3cF9fYmcnKTtcblxuXHRcdF9pbml0YWxDbGFzc05hbWUgPSB0ZW1wbGF0ZS5jbGFzc05hbWU7XG5cdFx0X2lzT3BlbiA9IHRydWU7XG5cdFx0XHRcdFxuXHRcdF9mZWF0dXJlcyA9IGZyYW1ld29yay5kZXRlY3RGZWF0dXJlcygpO1xuXHRcdF9yZXF1ZXN0QUYgPSBfZmVhdHVyZXMucmFmO1xuXHRcdF9jYW5jZWxBRiA9IF9mZWF0dXJlcy5jYWY7XG5cdFx0X3RyYW5zZm9ybUtleSA9IF9mZWF0dXJlcy50cmFuc2Zvcm07XG5cdFx0X29sZElFID0gX2ZlYXR1cmVzLm9sZElFO1xuXHRcdFxuXHRcdHNlbGYuc2Nyb2xsV3JhcCA9IGZyYW1ld29yay5nZXRDaGlsZEJ5Q2xhc3ModGVtcGxhdGUsICdwc3dwX19zY3JvbGwtd3JhcCcpO1xuXHRcdHNlbGYuY29udGFpbmVyID0gZnJhbWV3b3JrLmdldENoaWxkQnlDbGFzcyhzZWxmLnNjcm9sbFdyYXAsICdwc3dwX19jb250YWluZXInKTtcblxuXHRcdF9jb250YWluZXJTdHlsZSA9IHNlbGYuY29udGFpbmVyLnN0eWxlOyAvLyBmb3IgZmFzdCBhY2Nlc3NcblxuXHRcdC8vIE9iamVjdHMgdGhhdCBob2xkIHNsaWRlcyAodGhlcmUgYXJlIG9ubHkgMyBpbiBET00pXG5cdFx0c2VsZi5pdGVtSG9sZGVycyA9IF9pdGVtSG9sZGVycyA9IFtcblx0XHRcdHtlbDpzZWxmLmNvbnRhaW5lci5jaGlsZHJlblswXSAsIHdyYXA6MCwgaW5kZXg6IC0xfSxcblx0XHRcdHtlbDpzZWxmLmNvbnRhaW5lci5jaGlsZHJlblsxXSAsIHdyYXA6MCwgaW5kZXg6IC0xfSxcblx0XHRcdHtlbDpzZWxmLmNvbnRhaW5lci5jaGlsZHJlblsyXSAsIHdyYXA6MCwgaW5kZXg6IC0xfVxuXHRcdF07XG5cblx0XHQvLyBoaWRlIG5lYXJieSBpdGVtIGhvbGRlcnMgdW50aWwgaW5pdGlhbCB6b29tIGFuaW1hdGlvbiBmaW5pc2hlcyAodG8gYXZvaWQgZXh0cmEgUGFpbnRzKVxuXHRcdF9pdGVtSG9sZGVyc1swXS5lbC5zdHlsZS5kaXNwbGF5ID0gX2l0ZW1Ib2xkZXJzWzJdLmVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cblx0XHRfc2V0dXBUcmFuc2Zvcm1zKCk7XG5cblx0XHQvLyBTZXR1cCBnbG9iYWwgZXZlbnRzXG5cdFx0X2dsb2JhbEV2ZW50SGFuZGxlcnMgPSB7XG5cdFx0XHRyZXNpemU6IHNlbGYudXBkYXRlU2l6ZSxcblx0XHRcdHNjcm9sbDogX3VwZGF0ZVBhZ2VTY3JvbGxPZmZzZXQsXG5cdFx0XHRrZXlkb3duOiBfb25LZXlEb3duLFxuXHRcdFx0Y2xpY2s6IF9vbkdsb2JhbENsaWNrXG5cdFx0fTtcblxuXHRcdC8vIGRpc2FibGUgc2hvdy9oaWRlIGVmZmVjdHMgb24gb2xkIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBDU1MgYW5pbWF0aW9ucyBvciB0cmFuc2Zvcm1zLCBcblx0XHQvLyBvbGQgSU9TLCBBbmRyb2lkIGFuZCBPcGVyYSBtb2JpbGUuIEJsYWNrYmVycnkgc2VlbXMgdG8gd29yayBmaW5lLCBldmVuIG9sZGVyIG1vZGVscy5cblx0XHR2YXIgb2xkUGhvbmUgPSBfZmVhdHVyZXMuaXNPbGRJT1NQaG9uZSB8fCBfZmVhdHVyZXMuaXNPbGRBbmRyb2lkIHx8IF9mZWF0dXJlcy5pc01vYmlsZU9wZXJhO1xuXHRcdGlmKCFfZmVhdHVyZXMuYW5pbWF0aW9uTmFtZSB8fCAhX2ZlYXR1cmVzLnRyYW5zZm9ybSB8fCBvbGRQaG9uZSkge1xuXHRcdFx0X29wdGlvbnMuc2hvd0FuaW1hdGlvbkR1cmF0aW9uID0gX29wdGlvbnMuaGlkZUFuaW1hdGlvbkR1cmF0aW9uID0gMDtcblx0XHR9XG5cblx0XHQvLyBpbml0IG1vZHVsZXNcblx0XHRmb3IoaSA9IDA7IGkgPCBfbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0c2VsZlsnaW5pdCcgKyBfbW9kdWxlc1tpXV0oKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gaW5pdFxuXHRcdGlmKFVpQ2xhc3MpIHtcblx0XHRcdHZhciB1aSA9IHNlbGYudWkgPSBuZXcgVWlDbGFzcyhzZWxmLCBmcmFtZXdvcmspO1xuXHRcdFx0dWkuaW5pdCgpO1xuXHRcdH1cblxuXHRcdF9zaG91dCgnZmlyc3RVcGRhdGUnKTtcblx0XHRfY3VycmVudEl0ZW1JbmRleCA9IF9jdXJyZW50SXRlbUluZGV4IHx8IF9vcHRpb25zLmluZGV4IHx8IDA7XG5cdFx0Ly8gdmFsaWRhdGUgaW5kZXhcblx0XHRpZiggaXNOYU4oX2N1cnJlbnRJdGVtSW5kZXgpIHx8IF9jdXJyZW50SXRlbUluZGV4IDwgMCB8fCBfY3VycmVudEl0ZW1JbmRleCA+PSBfZ2V0TnVtSXRlbXMoKSApIHtcblx0XHRcdF9jdXJyZW50SXRlbUluZGV4ID0gMDtcblx0XHR9XG5cdFx0c2VsZi5jdXJySXRlbSA9IF9nZXRJdGVtQXQoIF9jdXJyZW50SXRlbUluZGV4ICk7XG5cblx0XHRcblx0XHRpZihfZmVhdHVyZXMuaXNPbGRJT1NQaG9uZSB8fCBfZmVhdHVyZXMuaXNPbGRBbmRyb2lkKSB7XG5cdFx0XHRfaXNGaXhlZFBvc2l0aW9uID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdHRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblx0XHRpZihfb3B0aW9ucy5tb2RhbCkge1xuXHRcdFx0aWYoIV9pc0ZpeGVkUG9zaXRpb24pIHtcblx0XHRcdFx0dGVtcGxhdGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHRcdFx0XHR0ZW1wbGF0ZS5zdHlsZS50b3AgPSBmcmFtZXdvcmsuZ2V0U2Nyb2xsWSgpICsgJ3B4Jztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRlbXBsYXRlLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihfY3VycmVudFdpbmRvd1Njcm9sbFkgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0X3Nob3V0KCdpbml0aWFsTGF5b3V0Jyk7XG5cdFx0XHRfY3VycmVudFdpbmRvd1Njcm9sbFkgPSBfaW5pdGFsV2luZG93U2Nyb2xsWSA9IGZyYW1ld29yay5nZXRTY3JvbGxZKCk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIGFkZCBjbGFzc2VzIHRvIHJvb3QgZWxlbWVudCBvZiBQaG90b1N3aXBlXG5cdFx0dmFyIHJvb3RDbGFzc2VzID0gJ3Bzd3AtLW9wZW4gJztcblx0XHRpZihfb3B0aW9ucy5tYWluQ2xhc3MpIHtcblx0XHRcdHJvb3RDbGFzc2VzICs9IF9vcHRpb25zLm1haW5DbGFzcyArICcgJztcblx0XHR9XG5cdFx0aWYoX29wdGlvbnMuc2hvd0hpZGVPcGFjaXR5KSB7XG5cdFx0XHRyb290Q2xhc3NlcyArPSAncHN3cC0tYW5pbWF0ZV9vcGFjaXR5ICc7XG5cdFx0fVxuXHRcdHJvb3RDbGFzc2VzICs9IF9saWtlbHlUb3VjaERldmljZSA/ICdwc3dwLS10b3VjaCcgOiAncHN3cC0tbm90b3VjaCc7XG5cdFx0cm9vdENsYXNzZXMgKz0gX2ZlYXR1cmVzLmFuaW1hdGlvbk5hbWUgPyAnIHBzd3AtLWNzc19hbmltYXRpb24nIDogJyc7XG5cdFx0cm9vdENsYXNzZXMgKz0gX2ZlYXR1cmVzLnN2ZyA/ICcgcHN3cC0tc3ZnJyA6ICcnO1xuXHRcdGZyYW1ld29yay5hZGRDbGFzcyh0ZW1wbGF0ZSwgcm9vdENsYXNzZXMpO1xuXG5cdFx0c2VsZi51cGRhdGVTaXplKCk7XG5cblx0XHQvLyBpbml0aWFsIHVwZGF0ZVxuXHRcdF9jb250YWluZXJTaGlmdEluZGV4ID0gLTE7XG5cdFx0X2luZGV4RGlmZiA9IG51bGw7XG5cdFx0Zm9yKGkgPSAwOyBpIDwgTlVNX0hPTERFUlM7IGkrKykge1xuXHRcdFx0X3NldFRyYW5zbGF0ZVgoIChpK19jb250YWluZXJTaGlmdEluZGV4KSAqIF9zbGlkZVNpemUueCwgX2l0ZW1Ib2xkZXJzW2ldLmVsLnN0eWxlKTtcblx0XHR9XG5cblx0XHRpZighX29sZElFKSB7XG5cdFx0XHRmcmFtZXdvcmsuYmluZChzZWxmLnNjcm9sbFdyYXAsIF9kb3duRXZlbnRzLCBzZWxmKTsgLy8gbm8gZHJhZ2dpbmcgZm9yIG9sZCBJRVxuXHRcdH1cdFxuXG5cdFx0X2xpc3RlbignaW5pdGlhbFpvb21JbkVuZCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0c2VsZi5zZXRDb250ZW50KF9pdGVtSG9sZGVyc1swXSwgX2N1cnJlbnRJdGVtSW5kZXgtMSk7XG5cdFx0XHRzZWxmLnNldENvbnRlbnQoX2l0ZW1Ib2xkZXJzWzJdLCBfY3VycmVudEl0ZW1JbmRleCsxKTtcblxuXHRcdFx0X2l0ZW1Ib2xkZXJzWzBdLmVsLnN0eWxlLmRpc3BsYXkgPSBfaXRlbUhvbGRlcnNbMl0uZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cblx0XHRcdGlmKF9vcHRpb25zLmZvY3VzKSB7XG5cdFx0XHRcdC8vIGZvY3VzIGNhdXNlcyBsYXlvdXQsIFxuXHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgbGFnIGR1cmluZyB0aGUgYW5pbWF0aW9uLCBcblx0XHRcdFx0Ly8gdGhhdCdzIHdoeSB3ZSBkZWxheSBpdCB1bnRpbGwgdGhlIGluaXRpYWwgem9vbSB0cmFuc2l0aW9uIGVuZHNcblx0XHRcdFx0dGVtcGxhdGUuZm9jdXMoKTtcblx0XHRcdH1cblx0XHRcdCBcblxuXHRcdFx0X2JpbmRFdmVudHMoKTtcblx0XHR9KTtcblxuXHRcdC8vIHNldCBjb250ZW50IGZvciBjZW50ZXIgc2xpZGUgKGZpcnN0IHRpbWUpXG5cdFx0c2VsZi5zZXRDb250ZW50KF9pdGVtSG9sZGVyc1sxXSwgX2N1cnJlbnRJdGVtSW5kZXgpO1xuXHRcdFxuXHRcdHNlbGYudXBkYXRlQ3Vyckl0ZW0oKTtcblxuXHRcdF9zaG91dCgnYWZ0ZXJJbml0Jyk7XG5cblx0XHRpZighX2lzRml4ZWRQb3NpdGlvbikge1xuXG5cdFx0XHQvLyBPbiBhbGwgdmVyc2lvbnMgb2YgaU9TIGxvd2VyIHRoYW4gOC4wLCB3ZSBjaGVjayBzaXplIG9mIHZpZXdwb3J0IGV2ZXJ5IHNlY29uZC5cblx0XHRcdC8vIFxuXHRcdFx0Ly8gVGhpcyBpcyBkb25lIHRvIGRldGVjdCB3aGVuIFNhZmFyaSB0b3AgJiBib3R0b20gYmFycyBhcHBlYXIsIFxuXHRcdFx0Ly8gYXMgdGhpcyBhY3Rpb24gZG9lc24ndCB0cmlnZ2VyIGFueSBldmVudHMgKGxpa2UgcmVzaXplKS4gXG5cdFx0XHQvLyBcblx0XHRcdC8vIE9uIGlPUzggdGhleSBmaXhlZCB0aGlzLlxuXHRcdFx0Ly8gXG5cdFx0XHQvLyAxMCBOb3YgMjAxNDogaU9TIDcgdXNhZ2UgfjQwJS4gaU9TIDggdXNhZ2UgNTYlLlxuXHRcdFx0XG5cdFx0XHRfdXBkYXRlU2l6ZUludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKCFfbnVtQW5pbWF0aW9ucyAmJiAhX2lzRHJhZ2dpbmcgJiYgIV9pc1pvb21pbmcgJiYgKF9jdXJyWm9vbUxldmVsID09PSBzZWxmLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWwpICApIHtcblx0XHRcdFx0XHRzZWxmLnVwZGF0ZVNpemUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgMTAwMCk7XG5cdFx0fVxuXG5cdFx0ZnJhbWV3b3JrLmFkZENsYXNzKHRlbXBsYXRlLCAncHN3cC0tdmlzaWJsZScpO1xuXHR9LFxuXG5cdC8vIENsb3NlIHRoZSBnYWxsZXJ5LCB0aGVuIGRlc3Ryb3kgaXRcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCFfaXNPcGVuKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0X2lzT3BlbiA9IGZhbHNlO1xuXHRcdF9pc0Rlc3Ryb3lpbmcgPSB0cnVlO1xuXHRcdF9zaG91dCgnY2xvc2UnKTtcblx0XHRfdW5iaW5kRXZlbnRzKCk7XG5cblx0XHRfc2hvd09ySGlkZShzZWxmLmN1cnJJdGVtLCBudWxsLCB0cnVlLCBzZWxmLmRlc3Ryb3kpO1xuXHR9LFxuXG5cdC8vIGRlc3Ryb3lzIHRoZSBnYWxsZXJ5ICh1bmJpbmRzIGV2ZW50cywgY2xlYW5zIHVwIGludGVydmFscyBhbmQgdGltZW91dHMgdG8gYXZvaWQgbWVtb3J5IGxlYWtzKVxuXHRkZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHRfc2hvdXQoJ2Rlc3Ryb3knKTtcblxuXHRcdGlmKF9zaG93T3JIaWRlVGltZW91dCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KF9zaG93T3JIaWRlVGltZW91dCk7XG5cdFx0fVxuXHRcdFxuXHRcdHRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXHRcdHRlbXBsYXRlLmNsYXNzTmFtZSA9IF9pbml0YWxDbGFzc05hbWU7XG5cblx0XHRpZihfdXBkYXRlU2l6ZUludGVydmFsKSB7XG5cdFx0XHRjbGVhckludGVydmFsKF91cGRhdGVTaXplSW50ZXJ2YWwpO1xuXHRcdH1cblxuXHRcdGZyYW1ld29yay51bmJpbmQoc2VsZi5zY3JvbGxXcmFwLCBfZG93bkV2ZW50cywgc2VsZik7XG5cblx0XHQvLyB3ZSB1bmJpbmQgc2Nyb2xsIGV2ZW50IGF0IHRoZSBlbmQsIGFzIGNsb3NpbmcgYW5pbWF0aW9uIG1heSBkZXBlbmQgb24gaXRcblx0XHRmcmFtZXdvcmsudW5iaW5kKHdpbmRvdywgJ3Njcm9sbCcsIHNlbGYpO1xuXG5cdFx0X3N0b3BEcmFnVXBkYXRlTG9vcCgpO1xuXG5cdFx0X3N0b3BBbGxBbmltYXRpb25zKCk7XG5cblx0XHRfbGlzdGVuZXJzID0gbnVsbDtcblx0fSxcblxuXHQvKipcblx0ICogUGFuIGltYWdlIHRvIHBvc2l0aW9uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB4ICAgICBcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHkgICAgIFxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGZvcmNlIFdpbGwgaWdub3JlIGJvdW5kcyBpZiBzZXQgdG8gdHJ1ZS5cblx0ICovXG5cdHBhblRvOiBmdW5jdGlvbih4LHksZm9yY2UpIHtcblx0XHRpZighZm9yY2UpIHtcblx0XHRcdGlmKHggPiBfY3VyclBhbkJvdW5kcy5taW4ueCkge1xuXHRcdFx0XHR4ID0gX2N1cnJQYW5Cb3VuZHMubWluLng7XG5cdFx0XHR9IGVsc2UgaWYoeCA8IF9jdXJyUGFuQm91bmRzLm1heC54KSB7XG5cdFx0XHRcdHggPSBfY3VyclBhbkJvdW5kcy5tYXgueDtcblx0XHRcdH1cblxuXHRcdFx0aWYoeSA+IF9jdXJyUGFuQm91bmRzLm1pbi55KSB7XG5cdFx0XHRcdHkgPSBfY3VyclBhbkJvdW5kcy5taW4ueTtcblx0XHRcdH0gZWxzZSBpZih5IDwgX2N1cnJQYW5Cb3VuZHMubWF4LnkpIHtcblx0XHRcdFx0eSA9IF9jdXJyUGFuQm91bmRzLm1heC55O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRfcGFuT2Zmc2V0LnggPSB4O1xuXHRcdF9wYW5PZmZzZXQueSA9IHk7XG5cdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblx0fSxcblx0XG5cdGhhbmRsZUV2ZW50OiBmdW5jdGlvbiAoZSkge1xuXHRcdGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcblx0XHRpZihfZ2xvYmFsRXZlbnRIYW5kbGVyc1tlLnR5cGVdKSB7XG5cdFx0XHRfZ2xvYmFsRXZlbnRIYW5kbGVyc1tlLnR5cGVdKGUpO1xuXHRcdH1cblx0fSxcblxuXG5cdGdvVG86IGZ1bmN0aW9uKGluZGV4KSB7XG5cblx0XHRpbmRleCA9IF9nZXRMb29wZWRJZChpbmRleCk7XG5cblx0XHR2YXIgZGlmZiA9IGluZGV4IC0gX2N1cnJlbnRJdGVtSW5kZXg7XG5cdFx0X2luZGV4RGlmZiA9IGRpZmY7XG5cblx0XHRfY3VycmVudEl0ZW1JbmRleCA9IGluZGV4O1xuXHRcdHNlbGYuY3Vyckl0ZW0gPSBfZ2V0SXRlbUF0KCBfY3VycmVudEl0ZW1JbmRleCApO1xuXHRcdF9jdXJyUG9zaXRpb25JbmRleCAtPSBkaWZmO1xuXHRcdFxuXHRcdF9tb3ZlTWFpblNjcm9sbChfc2xpZGVTaXplLnggKiBfY3VyclBvc2l0aW9uSW5kZXgpO1xuXHRcdFxuXG5cdFx0X3N0b3BBbGxBbmltYXRpb25zKCk7XG5cdFx0X21haW5TY3JvbGxBbmltYXRpbmcgPSBmYWxzZTtcblxuXHRcdHNlbGYudXBkYXRlQ3Vyckl0ZW0oKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oKSB7XG5cdFx0c2VsZi5nb1RvKCBfY3VycmVudEl0ZW1JbmRleCArIDEpO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbigpIHtcblx0XHRzZWxmLmdvVG8oIF9jdXJyZW50SXRlbUluZGV4IC0gMSk7XG5cdH0sXG5cblx0Ly8gdXBkYXRlIGN1cnJlbnQgem9vbS9wYW4gb2JqZWN0c1xuXHR1cGRhdGVDdXJyWm9vbUl0ZW06IGZ1bmN0aW9uKGVtdWxhdGVTZXRDb250ZW50KSB7XG5cdFx0aWYoZW11bGF0ZVNldENvbnRlbnQpIHtcblx0XHRcdF9zaG91dCgnYmVmb3JlQ2hhbmdlJywgMCk7XG5cdFx0fVxuXG5cdFx0Ly8gaXRlbUhvbGRlclsxXSBpcyBtaWRkbGUgKGN1cnJlbnQpIGl0ZW1cblx0XHRpZihfaXRlbUhvbGRlcnNbMV0uZWwuY2hpbGRyZW4ubGVuZ3RoKSB7XG5cdFx0XHR2YXIgem9vbUVsZW1lbnQgPSBfaXRlbUhvbGRlcnNbMV0uZWwuY2hpbGRyZW5bMF07XG5cdFx0XHRpZiggZnJhbWV3b3JrLmhhc0NsYXNzKHpvb21FbGVtZW50LCAncHN3cF9fem9vbS13cmFwJykgKSB7XG5cdFx0XHRcdF9jdXJyWm9vbUVsZW1lbnRTdHlsZSA9IHpvb21FbGVtZW50LnN0eWxlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X2N1cnJab29tRWxlbWVudFN0eWxlID0gbnVsbDtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0X2N1cnJab29tRWxlbWVudFN0eWxlID0gbnVsbDtcblx0XHR9XG5cdFx0XG5cdFx0X2N1cnJQYW5Cb3VuZHMgPSBzZWxmLmN1cnJJdGVtLmJvdW5kcztcdFxuXHRcdF9zdGFydFpvb21MZXZlbCA9IF9jdXJyWm9vbUxldmVsID0gc2VsZi5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsO1xuXG5cdFx0X3Bhbk9mZnNldC54ID0gX2N1cnJQYW5Cb3VuZHMuY2VudGVyLng7XG5cdFx0X3Bhbk9mZnNldC55ID0gX2N1cnJQYW5Cb3VuZHMuY2VudGVyLnk7XG5cblx0XHRpZihlbXVsYXRlU2V0Q29udGVudCkge1xuXHRcdFx0X3Nob3V0KCdhZnRlckNoYW5nZScpO1xuXHRcdH1cblx0fSxcblxuXG5cdGludmFsaWRhdGVDdXJySXRlbXM6IGZ1bmN0aW9uKCkge1xuXHRcdF9pdGVtc05lZWRVcGRhdGUgPSB0cnVlO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBOVU1fSE9MREVSUzsgaSsrKSB7XG5cdFx0XHRpZiggX2l0ZW1Ib2xkZXJzW2ldLml0ZW0gKSB7XG5cdFx0XHRcdF9pdGVtSG9sZGVyc1tpXS5pdGVtLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0dXBkYXRlQ3Vyckl0ZW06IGZ1bmN0aW9uKGJlZm9yZUFuaW1hdGlvbikge1xuXG5cdFx0aWYoX2luZGV4RGlmZiA9PT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBkaWZmQWJzID0gTWF0aC5hYnMoX2luZGV4RGlmZiksXG5cdFx0XHR0ZW1wSG9sZGVyO1xuXG5cdFx0aWYoYmVmb3JlQW5pbWF0aW9uICYmIGRpZmZBYnMgPCAyKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cblx0XHRzZWxmLmN1cnJJdGVtID0gX2dldEl0ZW1BdCggX2N1cnJlbnRJdGVtSW5kZXggKTtcblx0XHRfcmVuZGVyTWF4UmVzb2x1dGlvbiA9IGZhbHNlO1xuXHRcdFxuXHRcdF9zaG91dCgnYmVmb3JlQ2hhbmdlJywgX2luZGV4RGlmZik7XG5cblx0XHRpZihkaWZmQWJzID49IE5VTV9IT0xERVJTKSB7XG5cdFx0XHRfY29udGFpbmVyU2hpZnRJbmRleCArPSBfaW5kZXhEaWZmICsgKF9pbmRleERpZmYgPiAwID8gLU5VTV9IT0xERVJTIDogTlVNX0hPTERFUlMpO1xuXHRcdFx0ZGlmZkFicyA9IE5VTV9IT0xERVJTO1xuXHRcdH1cblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGlmZkFiczsgaSsrKSB7XG5cdFx0XHRpZihfaW5kZXhEaWZmID4gMCkge1xuXHRcdFx0XHR0ZW1wSG9sZGVyID0gX2l0ZW1Ib2xkZXJzLnNoaWZ0KCk7XG5cdFx0XHRcdF9pdGVtSG9sZGVyc1tOVU1fSE9MREVSUy0xXSA9IHRlbXBIb2xkZXI7IC8vIG1vdmUgZmlyc3QgdG8gbGFzdFxuXG5cdFx0XHRcdF9jb250YWluZXJTaGlmdEluZGV4Kys7XG5cdFx0XHRcdF9zZXRUcmFuc2xhdGVYKCAoX2NvbnRhaW5lclNoaWZ0SW5kZXgrMikgKiBfc2xpZGVTaXplLngsIHRlbXBIb2xkZXIuZWwuc3R5bGUpO1xuXHRcdFx0XHRzZWxmLnNldENvbnRlbnQodGVtcEhvbGRlciwgX2N1cnJlbnRJdGVtSW5kZXggLSBkaWZmQWJzICsgaSArIDEgKyAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRlbXBIb2xkZXIgPSBfaXRlbUhvbGRlcnMucG9wKCk7XG5cdFx0XHRcdF9pdGVtSG9sZGVycy51bnNoaWZ0KCB0ZW1wSG9sZGVyICk7IC8vIG1vdmUgbGFzdCB0byBmaXJzdFxuXG5cdFx0XHRcdF9jb250YWluZXJTaGlmdEluZGV4LS07XG5cdFx0XHRcdF9zZXRUcmFuc2xhdGVYKCBfY29udGFpbmVyU2hpZnRJbmRleCAqIF9zbGlkZVNpemUueCwgdGVtcEhvbGRlci5lbC5zdHlsZSk7XG5cdFx0XHRcdHNlbGYuc2V0Q29udGVudCh0ZW1wSG9sZGVyLCBfY3VycmVudEl0ZW1JbmRleCArIGRpZmZBYnMgLSBpIC0gMSAtIDEpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fVxuXG5cdFx0Ly8gcmVzZXQgem9vbS9wYW4gb24gcHJldmlvdXMgaXRlbVxuXHRcdGlmKF9jdXJyWm9vbUVsZW1lbnRTdHlsZSAmJiBNYXRoLmFicyhfaW5kZXhEaWZmKSA9PT0gMSkge1xuXG5cdFx0XHR2YXIgcHJldkl0ZW0gPSBfZ2V0SXRlbUF0KF9wcmV2SXRlbUluZGV4KTtcblx0XHRcdGlmKHByZXZJdGVtLmluaXRpYWxab29tTGV2ZWwgIT09IF9jdXJyWm9vbUxldmVsKSB7XG5cdFx0XHRcdF9jYWxjdWxhdGVJdGVtU2l6ZShwcmV2SXRlbSAsIF92aWV3cG9ydFNpemUgKTtcblx0XHRcdFx0X3NldEltYWdlU2l6ZShwcmV2SXRlbSk7XG5cdFx0XHRcdF9hcHBseVpvb21QYW5Ub0l0ZW0oIHByZXZJdGVtICk7IFx0XHRcdFx0XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyByZXNldCBkaWZmIGFmdGVyIHVwZGF0ZVxuXHRcdF9pbmRleERpZmYgPSAwO1xuXG5cdFx0c2VsZi51cGRhdGVDdXJyWm9vbUl0ZW0oKTtcblxuXHRcdF9wcmV2SXRlbUluZGV4ID0gX2N1cnJlbnRJdGVtSW5kZXg7XG5cblx0XHRfc2hvdXQoJ2FmdGVyQ2hhbmdlJyk7XG5cdFx0XG5cdH0sXG5cblxuXG5cdHVwZGF0ZVNpemU6IGZ1bmN0aW9uKGZvcmNlKSB7XG5cdFx0XG5cdFx0aWYoIV9pc0ZpeGVkUG9zaXRpb24gJiYgX29wdGlvbnMubW9kYWwpIHtcblx0XHRcdHZhciB3aW5kb3dTY3JvbGxZID0gZnJhbWV3b3JrLmdldFNjcm9sbFkoKTtcblx0XHRcdGlmKF9jdXJyZW50V2luZG93U2Nyb2xsWSAhPT0gd2luZG93U2Nyb2xsWSkge1xuXHRcdFx0XHR0ZW1wbGF0ZS5zdHlsZS50b3AgPSB3aW5kb3dTY3JvbGxZICsgJ3B4Jztcblx0XHRcdFx0X2N1cnJlbnRXaW5kb3dTY3JvbGxZID0gd2luZG93U2Nyb2xsWTtcblx0XHRcdH1cblx0XHRcdGlmKCFmb3JjZSAmJiBfd2luZG93VmlzaWJsZVNpemUueCA9PT0gd2luZG93LmlubmVyV2lkdGggJiYgX3dpbmRvd1Zpc2libGVTaXplLnkgPT09IHdpbmRvdy5pbm5lckhlaWdodCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRfd2luZG93VmlzaWJsZVNpemUueCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdFx0X3dpbmRvd1Zpc2libGVTaXplLnkgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cblx0XHRcdC8vdGVtcGxhdGUuc3R5bGUud2lkdGggPSBfd2luZG93VmlzaWJsZVNpemUueCArICdweCc7XG5cdFx0XHR0ZW1wbGF0ZS5zdHlsZS5oZWlnaHQgPSBfd2luZG93VmlzaWJsZVNpemUueSArICdweCc7XG5cdFx0fVxuXG5cblxuXHRcdF92aWV3cG9ydFNpemUueCA9IHNlbGYuc2Nyb2xsV3JhcC5jbGllbnRXaWR0aDtcblx0XHRfdmlld3BvcnRTaXplLnkgPSBzZWxmLnNjcm9sbFdyYXAuY2xpZW50SGVpZ2h0O1xuXG5cdFx0X3VwZGF0ZVBhZ2VTY3JvbGxPZmZzZXQoKTtcblxuXHRcdF9zbGlkZVNpemUueCA9IF92aWV3cG9ydFNpemUueCArIE1hdGgucm91bmQoX3ZpZXdwb3J0U2l6ZS54ICogX29wdGlvbnMuc3BhY2luZyk7XG5cdFx0X3NsaWRlU2l6ZS55ID0gX3ZpZXdwb3J0U2l6ZS55O1xuXG5cdFx0X21vdmVNYWluU2Nyb2xsKF9zbGlkZVNpemUueCAqIF9jdXJyUG9zaXRpb25JbmRleCk7XG5cblx0XHRfc2hvdXQoJ2JlZm9yZVJlc2l6ZScpOyAvLyBldmVuIG1heSBiZSB1c2VkIGZvciBleGFtcGxlIHRvIHN3aXRjaCBpbWFnZSBzb3VyY2VzXG5cblxuXHRcdC8vIGRvbid0IHJlLWNhbGN1bGF0ZSBzaXplIG9uIGluaXRhbCBzaXplIHVwZGF0ZVxuXHRcdGlmKF9jb250YWluZXJTaGlmdEluZGV4ICE9PSB1bmRlZmluZWQpIHtcblxuXHRcdFx0dmFyIGhvbGRlcixcblx0XHRcdFx0aXRlbSxcblx0XHRcdFx0aEluZGV4O1xuXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgTlVNX0hPTERFUlM7IGkrKykge1xuXHRcdFx0XHRob2xkZXIgPSBfaXRlbUhvbGRlcnNbaV07XG5cdFx0XHRcdF9zZXRUcmFuc2xhdGVYKCAoaStfY29udGFpbmVyU2hpZnRJbmRleCkgKiBfc2xpZGVTaXplLngsIGhvbGRlci5lbC5zdHlsZSk7XG5cblx0XHRcdFx0aEluZGV4ID0gX2N1cnJlbnRJdGVtSW5kZXgraS0xO1xuXG5cdFx0XHRcdGlmKF9vcHRpb25zLmxvb3AgJiYgX2dldE51bUl0ZW1zKCkgPiAyKSB7XG5cdFx0XHRcdFx0aEluZGV4ID0gX2dldExvb3BlZElkKGhJbmRleCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyB1cGRhdGUgem9vbSBsZXZlbCBvbiBpdGVtcyBhbmQgcmVmcmVzaCBzb3VyY2UgKGlmIG5lZWRzVXBkYXRlKVxuXHRcdFx0XHRpdGVtID0gX2dldEl0ZW1BdCggaEluZGV4ICk7XG5cblx0XHRcdFx0Ly8gcmUtcmVuZGVyIGdhbGxlcnkgaXRlbSBpZiBgbmVlZHNVcGRhdGVgLFxuXHRcdFx0XHQvLyBvciBkb2Vzbid0IGhhdmUgYGJvdW5kc2AgKGVudGlyZWx5IG5ldyBzbGlkZSBvYmplY3QpXG5cdFx0XHRcdGlmKCBpdGVtICYmIChfaXRlbXNOZWVkVXBkYXRlIHx8IGl0ZW0ubmVlZHNVcGRhdGUgfHwgIWl0ZW0uYm91bmRzKSApIHtcblxuXHRcdFx0XHRcdHNlbGYuY2xlYW5TbGlkZSggaXRlbSApO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHNlbGYuc2V0Q29udGVudCggaG9sZGVyLCBoSW5kZXggKTtcblxuXHRcdFx0XHRcdC8vIGlmIFwiY2VudGVyXCIgc2xpZGVcblx0XHRcdFx0XHRpZihpID09PSAxKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmN1cnJJdGVtID0gaXRlbTtcblx0XHRcdFx0XHRcdHNlbGYudXBkYXRlQ3Vyclpvb21JdGVtKHRydWUpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGl0ZW0ubmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuXHRcdFx0XHR9IGVsc2UgaWYoaG9sZGVyLmluZGV4ID09PSAtMSAmJiBoSW5kZXggPj0gMCkge1xuXHRcdFx0XHRcdC8vIGFkZCBjb250ZW50IGZpcnN0IHRpbWVcblx0XHRcdFx0XHRzZWxmLnNldENvbnRlbnQoIGhvbGRlciwgaEluZGV4ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoaXRlbSAmJiBpdGVtLmNvbnRhaW5lcikge1xuXHRcdFx0XHRcdF9jYWxjdWxhdGVJdGVtU2l6ZShpdGVtLCBfdmlld3BvcnRTaXplKTtcblx0XHRcdFx0XHRfc2V0SW1hZ2VTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdF9hcHBseVpvb21QYW5Ub0l0ZW0oIGl0ZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH1cblx0XHRcdF9pdGVtc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0XHR9XHRcblxuXHRcdF9zdGFydFpvb21MZXZlbCA9IF9jdXJyWm9vbUxldmVsID0gc2VsZi5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsO1xuXHRcdF9jdXJyUGFuQm91bmRzID0gc2VsZi5jdXJySXRlbS5ib3VuZHM7XG5cblx0XHRpZihfY3VyclBhbkJvdW5kcykge1xuXHRcdFx0X3Bhbk9mZnNldC54ID0gX2N1cnJQYW5Cb3VuZHMuY2VudGVyLng7XG5cdFx0XHRfcGFuT2Zmc2V0LnkgPSBfY3VyclBhbkJvdW5kcy5jZW50ZXIueTtcblx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCB0cnVlICk7XG5cdFx0fVxuXHRcdFxuXHRcdF9zaG91dCgncmVzaXplJyk7XG5cdH0sXG5cdFxuXHQvLyBab29tIGN1cnJlbnQgaXRlbSB0b1xuXHR6b29tVG86IGZ1bmN0aW9uKGRlc3Rab29tTGV2ZWwsIGNlbnRlclBvaW50LCBzcGVlZCwgZWFzaW5nRm4sIHVwZGF0ZUZuKSB7XG5cdFx0Lypcblx0XHRcdGlmKGRlc3Rab29tTGV2ZWwgPT09ICdmaXQnKSB7XG5cdFx0XHRcdGRlc3Rab29tTGV2ZWwgPSBzZWxmLmN1cnJJdGVtLmZpdFJhdGlvO1xuXHRcdFx0fSBlbHNlIGlmKGRlc3Rab29tTGV2ZWwgPT09ICdmaWxsJykge1xuXHRcdFx0XHRkZXN0Wm9vbUxldmVsID0gc2VsZi5jdXJySXRlbS5maWxsUmF0aW87XG5cdFx0XHR9XG5cdFx0Ki9cblxuXHRcdGlmKGNlbnRlclBvaW50KSB7XG5cdFx0XHRfc3RhcnRab29tTGV2ZWwgPSBfY3Vyclpvb21MZXZlbDtcblx0XHRcdF9taWRab29tUG9pbnQueCA9IE1hdGguYWJzKGNlbnRlclBvaW50LngpIC0gX3Bhbk9mZnNldC54IDtcblx0XHRcdF9taWRab29tUG9pbnQueSA9IE1hdGguYWJzKGNlbnRlclBvaW50LnkpIC0gX3Bhbk9mZnNldC55IDtcblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhfc3RhcnRQYW5PZmZzZXQsIF9wYW5PZmZzZXQpO1xuXHRcdH1cblxuXHRcdHZhciBkZXN0UGFuQm91bmRzID0gX2NhbGN1bGF0ZVBhbkJvdW5kcyhkZXN0Wm9vbUxldmVsLCBmYWxzZSksXG5cdFx0XHRkZXN0UGFuT2Zmc2V0ID0ge307XG5cblx0XHRfbW9kaWZ5RGVzdFBhbk9mZnNldCgneCcsIGRlc3RQYW5Cb3VuZHMsIGRlc3RQYW5PZmZzZXQsIGRlc3Rab29tTGV2ZWwpO1xuXHRcdF9tb2RpZnlEZXN0UGFuT2Zmc2V0KCd5JywgZGVzdFBhbkJvdW5kcywgZGVzdFBhbk9mZnNldCwgZGVzdFpvb21MZXZlbCk7XG5cblx0XHR2YXIgaW5pdGlhbFpvb21MZXZlbCA9IF9jdXJyWm9vbUxldmVsO1xuXHRcdHZhciBpbml0aWFsUGFuT2Zmc2V0ID0ge1xuXHRcdFx0eDogX3Bhbk9mZnNldC54LFxuXHRcdFx0eTogX3Bhbk9mZnNldC55XG5cdFx0fTtcblxuXHRcdF9yb3VuZFBvaW50KGRlc3RQYW5PZmZzZXQpO1xuXG5cdFx0dmFyIG9uVXBkYXRlID0gZnVuY3Rpb24obm93KSB7XG5cdFx0XHRpZihub3cgPT09IDEpIHtcblx0XHRcdFx0X2N1cnJab29tTGV2ZWwgPSBkZXN0Wm9vbUxldmVsO1xuXHRcdFx0XHRfcGFuT2Zmc2V0LnggPSBkZXN0UGFuT2Zmc2V0Lng7XG5cdFx0XHRcdF9wYW5PZmZzZXQueSA9IGRlc3RQYW5PZmZzZXQueTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9jdXJyWm9vbUxldmVsID0gKGRlc3Rab29tTGV2ZWwgLSBpbml0aWFsWm9vbUxldmVsKSAqIG5vdyArIGluaXRpYWxab29tTGV2ZWw7XG5cdFx0XHRcdF9wYW5PZmZzZXQueCA9IChkZXN0UGFuT2Zmc2V0LnggLSBpbml0aWFsUGFuT2Zmc2V0LngpICogbm93ICsgaW5pdGlhbFBhbk9mZnNldC54O1xuXHRcdFx0XHRfcGFuT2Zmc2V0LnkgPSAoZGVzdFBhbk9mZnNldC55IC0gaW5pdGlhbFBhbk9mZnNldC55KSAqIG5vdyArIGluaXRpYWxQYW5PZmZzZXQueTtcblx0XHRcdH1cblxuXHRcdFx0aWYodXBkYXRlRm4pIHtcblx0XHRcdFx0dXBkYXRlRm4obm93KTtcblx0XHRcdH1cblxuXHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oIG5vdyA9PT0gMSApO1xuXHRcdH07XG5cblx0XHRpZihzcGVlZCkge1xuXHRcdFx0X2FuaW1hdGVQcm9wKCdjdXN0b21ab29tVG8nLCAwLCAxLCBzcGVlZCwgZWFzaW5nRm4gfHwgZnJhbWV3b3JrLmVhc2luZy5zaW5lLmluT3V0LCBvblVwZGF0ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG9uVXBkYXRlKDEpO1xuXHRcdH1cblx0fVxuXG5cbn07XG5cblxuLyo+PmNvcmUqL1xuXG4vKj4+Z2VzdHVyZXMqL1xuLyoqXG4gKiBNb3VzZS90b3VjaC9wb2ludGVyIGV2ZW50IGhhbmRsZXJzLlxuICogXG4gKiBzZXBhcmF0ZWQgZnJvbSBAY29yZS5qcyBmb3IgcmVhZGFiaWxpdHlcbiAqL1xuXG52YXIgTUlOX1NXSVBFX0RJU1RBTkNFID0gMzAsXG5cdERJUkVDVElPTl9DSEVDS19PRkZTRVQgPSAxMDsgLy8gYW1vdW50IG9mIHBpeGVscyB0byBkcmFnIHRvIGRldGVybWluZSBkaXJlY3Rpb24gb2Ygc3dpcGVcblxudmFyIF9nZXN0dXJlU3RhcnRUaW1lLFxuXHRfZ2VzdHVyZUNoZWNrU3BlZWRUaW1lLFxuXG5cdC8vIHBvb2wgb2Ygb2JqZWN0cyB0aGF0IGFyZSB1c2VkIGR1cmluZyBkcmFnZ2luZyBvZiB6b29taW5nXG5cdHAgPSB7fSwgLy8gZmlyc3QgcG9pbnRcblx0cDIgPSB7fSwgLy8gc2Vjb25kIHBvaW50IChmb3Igem9vbSBnZXN0dXJlKVxuXHRkZWx0YSA9IHt9LFxuXHRfY3VyclBvaW50ID0ge30sXG5cdF9zdGFydFBvaW50ID0ge30sXG5cdF9jdXJyUG9pbnRlcnMgPSBbXSxcblx0X3N0YXJ0TWFpblNjcm9sbFBvcyA9IHt9LFxuXHRfcmVsZWFzZUFuaW1EYXRhLFxuXHRfcG9zUG9pbnRzID0gW10sIC8vIGFycmF5IG9mIHBvaW50cyBkdXJpbmcgZHJhZ2dpbmcsIHVzZWQgdG8gZGV0ZXJtaW5lIHR5cGUgb2YgZ2VzdHVyZVxuXHRfdGVtcFBvaW50ID0ge30sXG5cblx0X2lzWm9vbWluZ0luLFxuXHRfdmVydGljYWxEcmFnSW5pdGlhdGVkLFxuXHRfb2xkQW5kcm9pZFRvdWNoRW5kVGltZW91dCxcblx0X2N1cnJab29tZWRJdGVtSW5kZXggPSAwLFxuXHRfY2VudGVyUG9pbnQgPSBfZ2V0RW1wdHlQb2ludCgpLFxuXHRfbGFzdFJlbGVhc2VUaW1lID0gMCxcblx0X2lzRHJhZ2dpbmcsIC8vIGF0IGxlYXN0IG9uZSBwb2ludGVyIGlzIGRvd25cblx0X2lzTXVsdGl0b3VjaCwgLy8gYXQgbGVhc3QgdHdvIF9wb2ludGVycyBhcmUgZG93blxuXHRfem9vbVN0YXJ0ZWQsIC8vIHpvb20gbGV2ZWwgY2hhbmdlZCBkdXJpbmcgem9vbSBnZXN0dXJlXG5cdF9tb3ZlZCxcblx0X2RyYWdBbmltRnJhbWUsXG5cdF9tYWluU2Nyb2xsU2hpZnRlZCxcblx0X2N1cnJlbnRQb2ludHMsIC8vIGFycmF5IG9mIGN1cnJlbnQgdG91Y2ggcG9pbnRzXG5cdF9pc1pvb21pbmcsXG5cdF9jdXJyUG9pbnRzRGlzdGFuY2UsXG5cdF9zdGFydFBvaW50c0Rpc3RhbmNlLFxuXHRfY3VyclBhbkJvdW5kcyxcblx0X21haW5TY3JvbGxQb3MgPSBfZ2V0RW1wdHlQb2ludCgpLFxuXHRfY3Vyclpvb21FbGVtZW50U3R5bGUsXG5cdF9tYWluU2Nyb2xsQW5pbWF0aW5nLCAvLyB0cnVlLCBpZiBhbmltYXRpb24gYWZ0ZXIgc3dpcGUgZ2VzdHVyZSBpcyBydW5uaW5nXG5cdF9taWRab29tUG9pbnQgPSBfZ2V0RW1wdHlQb2ludCgpLFxuXHRfY3VyckNlbnRlclBvaW50ID0gX2dldEVtcHR5UG9pbnQoKSxcblx0X2RpcmVjdGlvbixcblx0X2lzRmlyc3RNb3ZlLFxuXHRfb3BhY2l0eUNoYW5nZWQsXG5cdF9iZ09wYWNpdHksXG5cdF93YXNPdmVySW5pdGlhbFpvb20sXG5cblx0X2lzRXF1YWxQb2ludHMgPSBmdW5jdGlvbihwMSwgcDIpIHtcblx0XHRyZXR1cm4gcDEueCA9PT0gcDIueCAmJiBwMS55ID09PSBwMi55O1xuXHR9LFxuXHRfaXNOZWFyYnlQb2ludHMgPSBmdW5jdGlvbih0b3VjaDAsIHRvdWNoMSkge1xuXHRcdHJldHVybiBNYXRoLmFicyh0b3VjaDAueCAtIHRvdWNoMS54KSA8IERPVUJMRV9UQVBfUkFESVVTICYmIE1hdGguYWJzKHRvdWNoMC55IC0gdG91Y2gxLnkpIDwgRE9VQkxFX1RBUF9SQURJVVM7XG5cdH0sXG5cdF9jYWxjdWxhdGVQb2ludHNEaXN0YW5jZSA9IGZ1bmN0aW9uKHAxLCBwMikge1xuXHRcdF90ZW1wUG9pbnQueCA9IE1hdGguYWJzKCBwMS54IC0gcDIueCApO1xuXHRcdF90ZW1wUG9pbnQueSA9IE1hdGguYWJzKCBwMS55IC0gcDIueSApO1xuXHRcdHJldHVybiBNYXRoLnNxcnQoX3RlbXBQb2ludC54ICogX3RlbXBQb2ludC54ICsgX3RlbXBQb2ludC55ICogX3RlbXBQb2ludC55KTtcblx0fSxcblx0X3N0b3BEcmFnVXBkYXRlTG9vcCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKF9kcmFnQW5pbUZyYW1lKSB7XG5cdFx0XHRfY2FuY2VsQUYoX2RyYWdBbmltRnJhbWUpO1xuXHRcdFx0X2RyYWdBbmltRnJhbWUgPSBudWxsO1xuXHRcdH1cblx0fSxcblx0X2RyYWdVcGRhdGVMb29wID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoX2lzRHJhZ2dpbmcpIHtcblx0XHRcdF9kcmFnQW5pbUZyYW1lID0gX3JlcXVlc3RBRihfZHJhZ1VwZGF0ZUxvb3ApO1xuXHRcdFx0X3JlbmRlck1vdmVtZW50KCk7XG5cdFx0fVxuXHR9LFxuXHRfY2FuUGFuID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICEoX29wdGlvbnMuc2NhbGVNb2RlID09PSAnZml0JyAmJiBfY3Vyclpvb21MZXZlbCA9PT0gIHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbCk7XG5cdH0sXG5cdFxuXHQvLyBmaW5kIHRoZSBjbG9zZXN0IHBhcmVudCBET00gZWxlbWVudFxuXHRfY2xvc2VzdEVsZW1lbnQgPSBmdW5jdGlvbihlbCwgZm4pIHtcblx0ICBcdGlmKCFlbCB8fCBlbCA9PT0gZG9jdW1lbnQpIHtcblx0ICBcdFx0cmV0dXJuIGZhbHNlO1xuXHQgIFx0fVxuXG5cdCAgXHQvLyBkb24ndCBzZWFyY2ggZWxlbWVudHMgYWJvdmUgcHN3cF9fc2Nyb2xsLXdyYXBcblx0ICBcdGlmKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSAmJiBlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykuaW5kZXhPZigncHN3cF9fc2Nyb2xsLXdyYXAnKSA+IC0xICkge1xuXHQgIFx0XHRyZXR1cm4gZmFsc2U7XG5cdCAgXHR9XG5cblx0ICBcdGlmKCBmbihlbCkgKSB7XG5cdCAgXHRcdHJldHVybiBlbDtcblx0ICBcdH1cblxuXHQgIFx0cmV0dXJuIF9jbG9zZXN0RWxlbWVudChlbC5wYXJlbnROb2RlLCBmbik7XG5cdH0sXG5cblx0X3ByZXZlbnRPYmogPSB7fSxcblx0X3ByZXZlbnREZWZhdWx0RXZlbnRCZWhhdmlvdXIgPSBmdW5jdGlvbihlLCBpc0Rvd24pIHtcblx0ICAgIF9wcmV2ZW50T2JqLnByZXZlbnQgPSAhX2Nsb3Nlc3RFbGVtZW50KGUudGFyZ2V0LCBfb3B0aW9ucy5pc0NsaWNrYWJsZUVsZW1lbnQpO1xuXG5cdFx0X3Nob3V0KCdwcmV2ZW50RHJhZ0V2ZW50JywgZSwgaXNEb3duLCBfcHJldmVudE9iaik7XG5cdFx0cmV0dXJuIF9wcmV2ZW50T2JqLnByZXZlbnQ7XG5cblx0fSxcblx0X2NvbnZlcnRUb3VjaFRvUG9pbnQgPSBmdW5jdGlvbih0b3VjaCwgcCkge1xuXHRcdHAueCA9IHRvdWNoLnBhZ2VYO1xuXHRcdHAueSA9IHRvdWNoLnBhZ2VZO1xuXHRcdHAuaWQgPSB0b3VjaC5pZGVudGlmaWVyO1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRfZmluZENlbnRlck9mUG9pbnRzID0gZnVuY3Rpb24ocDEsIHAyLCBwQ2VudGVyKSB7XG5cdFx0cENlbnRlci54ID0gKHAxLnggKyBwMi54KSAqIDAuNTtcblx0XHRwQ2VudGVyLnkgPSAocDEueSArIHAyLnkpICogMC41O1xuXHR9LFxuXHRfcHVzaFBvc1BvaW50ID0gZnVuY3Rpb24odGltZSwgeCwgeSkge1xuXHRcdGlmKHRpbWUgLSBfZ2VzdHVyZUNoZWNrU3BlZWRUaW1lID4gNTApIHtcblx0XHRcdHZhciBvID0gX3Bvc1BvaW50cy5sZW5ndGggPiAyID8gX3Bvc1BvaW50cy5zaGlmdCgpIDoge307XG5cdFx0XHRvLnggPSB4O1xuXHRcdFx0by55ID0geTsgXG5cdFx0XHRfcG9zUG9pbnRzLnB1c2gobyk7XG5cdFx0XHRfZ2VzdHVyZUNoZWNrU3BlZWRUaW1lID0gdGltZTtcblx0XHR9XG5cdH0sXG5cblx0X2NhbGN1bGF0ZVZlcnRpY2FsRHJhZ09wYWNpdHlSYXRpbyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB5T2Zmc2V0ID0gX3Bhbk9mZnNldC55IC0gc2VsZi5jdXJySXRlbS5pbml0aWFsUG9zaXRpb24ueTsgLy8gZGlmZmVyZW5jZSBiZXR3ZWVuIGluaXRpYWwgYW5kIGN1cnJlbnQgcG9zaXRpb25cblx0XHRyZXR1cm4gMSAtICBNYXRoLmFicyggeU9mZnNldCAvIChfdmlld3BvcnRTaXplLnkgLyAyKSAgKTtcblx0fSxcblxuXHRcblx0Ly8gcG9pbnRzIHBvb2wsIHJldXNlZCBkdXJpbmcgdG91Y2ggZXZlbnRzXG5cdF9lUG9pbnQxID0ge30sXG5cdF9lUG9pbnQyID0ge30sXG5cdF90ZW1wUG9pbnRzQXJyID0gW10sXG5cdF90ZW1wQ291bnRlcixcblx0X2dldFRvdWNoUG9pbnRzID0gZnVuY3Rpb24oZSkge1xuXHRcdC8vIGNsZWFuIHVwIHByZXZpb3VzIHBvaW50cywgd2l0aG91dCByZWNyZWF0aW5nIGFycmF5XG5cdFx0d2hpbGUoX3RlbXBQb2ludHNBcnIubGVuZ3RoID4gMCkge1xuXHRcdFx0X3RlbXBQb2ludHNBcnIucG9wKCk7XG5cdFx0fVxuXG5cdFx0aWYoIV9wb2ludGVyRXZlbnRFbmFibGVkKSB7XG5cdFx0XHRpZihlLnR5cGUuaW5kZXhPZigndG91Y2gnKSA+IC0xKSB7XG5cblx0XHRcdFx0aWYoZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0X3RlbXBQb2ludHNBcnJbMF0gPSBfY29udmVydFRvdWNoVG9Qb2ludChlLnRvdWNoZXNbMF0sIF9lUG9pbnQxKTtcblx0XHRcdFx0XHRpZihlLnRvdWNoZXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0X3RlbXBQb2ludHNBcnJbMV0gPSBfY29udmVydFRvdWNoVG9Qb2ludChlLnRvdWNoZXNbMV0sIF9lUG9pbnQyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfZVBvaW50MS54ID0gZS5wYWdlWDtcblx0XHRcdFx0X2VQb2ludDEueSA9IGUucGFnZVk7XG5cdFx0XHRcdF9lUG9pbnQxLmlkID0gJyc7XG5cdFx0XHRcdF90ZW1wUG9pbnRzQXJyWzBdID0gX2VQb2ludDE7Ly9fZVBvaW50MTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0X3RlbXBDb3VudGVyID0gMDtcblx0XHRcdC8vIHdlIGNhbiB1c2UgZm9yRWFjaCwgYXMgcG9pbnRlciBldmVudHMgYXJlIHN1cHBvcnRlZCBvbmx5IGluIG1vZGVybiBicm93c2Vyc1xuXHRcdFx0X2N1cnJQb2ludGVycy5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0aWYoX3RlbXBDb3VudGVyID09PSAwKSB7XG5cdFx0XHRcdFx0X3RlbXBQb2ludHNBcnJbMF0gPSBwO1xuXHRcdFx0XHR9IGVsc2UgaWYoX3RlbXBDb3VudGVyID09PSAxKSB7XG5cdFx0XHRcdFx0X3RlbXBQb2ludHNBcnJbMV0gPSBwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF90ZW1wQ291bnRlcisrO1xuXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIF90ZW1wUG9pbnRzQXJyO1xuXHR9LFxuXG5cdF9wYW5Pck1vdmVNYWluU2Nyb2xsID0gZnVuY3Rpb24oYXhpcywgZGVsdGEpIHtcblxuXHRcdHZhciBwYW5GcmljdGlvbixcblx0XHRcdG92ZXJEaWZmID0gMCxcblx0XHRcdG5ld09mZnNldCA9IF9wYW5PZmZzZXRbYXhpc10gKyBkZWx0YVtheGlzXSxcblx0XHRcdHN0YXJ0T3ZlckRpZmYsXG5cdFx0XHRkaXIgPSBkZWx0YVtheGlzXSA+IDAsXG5cdFx0XHRuZXdNYWluU2Nyb2xsUG9zaXRpb24gPSBfbWFpblNjcm9sbFBvcy54ICsgZGVsdGEueCxcblx0XHRcdG1haW5TY3JvbGxEaWZmID0gX21haW5TY3JvbGxQb3MueCAtIF9zdGFydE1haW5TY3JvbGxQb3MueCxcblx0XHRcdG5ld1BhblBvcyxcblx0XHRcdG5ld01haW5TY3JvbGxQb3M7XG5cblx0XHQvLyBjYWxjdWxhdGUgZmRpc3RhbmNlIG92ZXIgdGhlIGJvdW5kcyBhbmQgZnJpY3Rpb25cblx0XHRpZihuZXdPZmZzZXQgPiBfY3VyclBhbkJvdW5kcy5taW5bYXhpc10gfHwgbmV3T2Zmc2V0IDwgX2N1cnJQYW5Cb3VuZHMubWF4W2F4aXNdKSB7XG5cdFx0XHRwYW5GcmljdGlvbiA9IF9vcHRpb25zLnBhbkVuZEZyaWN0aW9uO1xuXHRcdFx0Ly8gTGluZWFyIGluY3JlYXNpbmcgb2YgZnJpY3Rpb24sIHNvIGF0IDEvNCBvZiB2aWV3cG9ydCBpdCdzIGF0IG1heCB2YWx1ZS4gXG5cdFx0XHQvLyBMb29rcyBub3QgYXMgbmljZSBhcyB3YXMgZXhwZWN0ZWQuIExlZnQgZm9yIGhpc3RvcnkuXG5cdFx0XHQvLyBwYW5GcmljdGlvbiA9ICgxIC0gKF9wYW5PZmZzZXRbYXhpc10gKyBkZWx0YVtheGlzXSArIHBhbkJvdW5kcy5taW5bYXhpc10pIC8gKF92aWV3cG9ydFNpemVbYXhpc10gLyA0KSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwYW5GcmljdGlvbiA9IDE7XG5cdFx0fVxuXHRcdFxuXHRcdG5ld09mZnNldCA9IF9wYW5PZmZzZXRbYXhpc10gKyBkZWx0YVtheGlzXSAqIHBhbkZyaWN0aW9uO1xuXG5cdFx0Ly8gbW92ZSBtYWluIHNjcm9sbCBvciBzdGFydCBwYW5uaW5nXG5cdFx0aWYoX29wdGlvbnMuYWxsb3dQYW5Ub05leHQgfHwgX2N1cnJab29tTGV2ZWwgPT09IHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbCkge1xuXG5cblx0XHRcdGlmKCFfY3Vyclpvb21FbGVtZW50U3R5bGUpIHtcblx0XHRcdFx0XG5cdFx0XHRcdG5ld01haW5TY3JvbGxQb3MgPSBuZXdNYWluU2Nyb2xsUG9zaXRpb247XG5cblx0XHRcdH0gZWxzZSBpZihfZGlyZWN0aW9uID09PSAnaCcgJiYgYXhpcyA9PT0gJ3gnICYmICFfem9vbVN0YXJ0ZWQgKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihkaXIpIHtcblx0XHRcdFx0XHRpZihuZXdPZmZzZXQgPiBfY3VyclBhbkJvdW5kcy5taW5bYXhpc10pIHtcblx0XHRcdFx0XHRcdHBhbkZyaWN0aW9uID0gX29wdGlvbnMucGFuRW5kRnJpY3Rpb247XG5cdFx0XHRcdFx0XHRvdmVyRGlmZiA9IF9jdXJyUGFuQm91bmRzLm1pbltheGlzXSAtIG5ld09mZnNldDtcblx0XHRcdFx0XHRcdHN0YXJ0T3ZlckRpZmYgPSBfY3VyclBhbkJvdW5kcy5taW5bYXhpc10gLSBfc3RhcnRQYW5PZmZzZXRbYXhpc107XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIGRyYWcgcmlnaHRcblx0XHRcdFx0XHRpZiggKHN0YXJ0T3ZlckRpZmYgPD0gMCB8fCBtYWluU2Nyb2xsRGlmZiA8IDApICYmIF9nZXROdW1JdGVtcygpID4gMSApIHtcblx0XHRcdFx0XHRcdG5ld01haW5TY3JvbGxQb3MgPSBuZXdNYWluU2Nyb2xsUG9zaXRpb247XG5cdFx0XHRcdFx0XHRpZihtYWluU2Nyb2xsRGlmZiA8IDAgJiYgbmV3TWFpblNjcm9sbFBvc2l0aW9uID4gX3N0YXJ0TWFpblNjcm9sbFBvcy54KSB7XG5cdFx0XHRcdFx0XHRcdG5ld01haW5TY3JvbGxQb3MgPSBfc3RhcnRNYWluU2Nyb2xsUG9zLng7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmKF9jdXJyUGFuQm91bmRzLm1pbi54ICE9PSBfY3VyclBhbkJvdW5kcy5tYXgueCkge1xuXHRcdFx0XHRcdFx0XHRuZXdQYW5Qb3MgPSBuZXdPZmZzZXQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmKG5ld09mZnNldCA8IF9jdXJyUGFuQm91bmRzLm1heFtheGlzXSApIHtcblx0XHRcdFx0XHRcdHBhbkZyaWN0aW9uID1fb3B0aW9ucy5wYW5FbmRGcmljdGlvbjtcblx0XHRcdFx0XHRcdG92ZXJEaWZmID0gbmV3T2Zmc2V0IC0gX2N1cnJQYW5Cb3VuZHMubWF4W2F4aXNdO1xuXHRcdFx0XHRcdFx0c3RhcnRPdmVyRGlmZiA9IF9zdGFydFBhbk9mZnNldFtheGlzXSAtIF9jdXJyUGFuQm91bmRzLm1heFtheGlzXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiggKHN0YXJ0T3ZlckRpZmYgPD0gMCB8fCBtYWluU2Nyb2xsRGlmZiA+IDApICYmIF9nZXROdW1JdGVtcygpID4gMSApIHtcblx0XHRcdFx0XHRcdG5ld01haW5TY3JvbGxQb3MgPSBuZXdNYWluU2Nyb2xsUG9zaXRpb247XG5cblx0XHRcdFx0XHRcdGlmKG1haW5TY3JvbGxEaWZmID4gMCAmJiBuZXdNYWluU2Nyb2xsUG9zaXRpb24gPCBfc3RhcnRNYWluU2Nyb2xsUG9zLngpIHtcblx0XHRcdFx0XHRcdFx0bmV3TWFpblNjcm9sbFBvcyA9IF9zdGFydE1haW5TY3JvbGxQb3MueDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihfY3VyclBhbkJvdW5kcy5taW4ueCAhPT0gX2N1cnJQYW5Cb3VuZHMubWF4LngpIHtcblx0XHRcdFx0XHRcdFx0bmV3UGFuUG9zID0gbmV3T2Zmc2V0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHQvL1xuXHRcdFx0fVxuXG5cdFx0XHRpZihheGlzID09PSAneCcpIHtcblxuXHRcdFx0XHRpZihuZXdNYWluU2Nyb2xsUG9zICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRfbW92ZU1haW5TY3JvbGwobmV3TWFpblNjcm9sbFBvcywgdHJ1ZSk7XG5cdFx0XHRcdFx0aWYobmV3TWFpblNjcm9sbFBvcyA9PT0gX3N0YXJ0TWFpblNjcm9sbFBvcy54KSB7XG5cdFx0XHRcdFx0XHRfbWFpblNjcm9sbFNoaWZ0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0X21haW5TY3JvbGxTaGlmdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihfY3VyclBhbkJvdW5kcy5taW4ueCAhPT0gX2N1cnJQYW5Cb3VuZHMubWF4LngpIHtcblx0XHRcdFx0XHRpZihuZXdQYW5Qb3MgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0X3Bhbk9mZnNldC54ID0gbmV3UGFuUG9zO1xuXHRcdFx0XHRcdH0gZWxzZSBpZighX21haW5TY3JvbGxTaGlmdGVkKSB7XG5cdFx0XHRcdFx0XHRfcGFuT2Zmc2V0LnggKz0gZGVsdGEueCAqIHBhbkZyaWN0aW9uO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBuZXdNYWluU2Nyb2xsUG9zICE9PSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZighX21haW5TY3JvbGxBbmltYXRpbmcpIHtcblx0XHRcdFxuXHRcdFx0aWYoIV9tYWluU2Nyb2xsU2hpZnRlZCkge1xuXHRcdFx0XHRpZihfY3Vyclpvb21MZXZlbCA+IHNlbGYuY3Vyckl0ZW0uZml0UmF0aW8pIHtcblx0XHRcdFx0XHRfcGFuT2Zmc2V0W2F4aXNdICs9IGRlbHRhW2F4aXNdICogcGFuRnJpY3Rpb247XG5cdFx0XHRcdFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdFxuXHRcdH1cblx0XHRcblx0fSxcblxuXHQvLyBQb2ludGVyZG93bi90b3VjaHN0YXJ0L21vdXNlZG93biBoYW5kbGVyXG5cdF9vbkRyYWdTdGFydCA9IGZ1bmN0aW9uKGUpIHtcblxuXHRcdC8vIEFsbG93IGRyYWdnaW5nIG9ubHkgdmlhIGxlZnQgbW91c2UgYnV0dG9uLlxuXHRcdC8vIEFzIHRoaXMgaGFuZGxlciBpcyBub3QgYWRkZWQgaW4gSUU4IC0gd2UgaWdub3JlIGUud2hpY2hcblx0XHQvLyBcblx0XHQvLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2V2ZW50c19wcm9wZXJ0aWVzLmh0bWxcblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvZXZlbnQuYnV0dG9uXG5cdFx0aWYoZS50eXBlID09PSAnbW91c2Vkb3duJyAmJiBlLmJ1dHRvbiA+IDAgICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmKF9pbml0aWFsWm9vbVJ1bm5pbmcpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZihfb2xkQW5kcm9pZFRvdWNoRW5kVGltZW91dCAmJiBlLnR5cGUgPT09ICdtb3VzZWRvd24nKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYoX3ByZXZlbnREZWZhdWx0RXZlbnRCZWhhdmlvdXIoZSwgdHJ1ZSkpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cblxuXG5cdFx0X3Nob3V0KCdwb2ludGVyRG93bicpO1xuXG5cdFx0aWYoX3BvaW50ZXJFdmVudEVuYWJsZWQpIHtcblx0XHRcdHZhciBwb2ludGVySW5kZXggPSBmcmFtZXdvcmsuYXJyYXlTZWFyY2goX2N1cnJQb2ludGVycywgZS5wb2ludGVySWQsICdpZCcpO1xuXHRcdFx0aWYocG9pbnRlckluZGV4IDwgMCkge1xuXHRcdFx0XHRwb2ludGVySW5kZXggPSBfY3VyclBvaW50ZXJzLmxlbmd0aDtcblx0XHRcdH1cblx0XHRcdF9jdXJyUG9pbnRlcnNbcG9pbnRlckluZGV4XSA9IHt4OmUucGFnZVgsIHk6ZS5wYWdlWSwgaWQ6IGUucG9pbnRlcklkfTtcblx0XHR9XG5cdFx0XG5cblxuXHRcdHZhciBzdGFydFBvaW50c0xpc3QgPSBfZ2V0VG91Y2hQb2ludHMoZSksXG5cdFx0XHRudW1Qb2ludHMgPSBzdGFydFBvaW50c0xpc3QubGVuZ3RoO1xuXG5cdFx0X2N1cnJlbnRQb2ludHMgPSBudWxsO1xuXG5cdFx0X3N0b3BBbGxBbmltYXRpb25zKCk7XG5cblx0XHQvLyBpbml0IGRyYWdcblx0XHRpZighX2lzRHJhZ2dpbmcgfHwgbnVtUG9pbnRzID09PSAxKSB7XG5cblx0XHRcdFxuXG5cdFx0XHRfaXNEcmFnZ2luZyA9IF9pc0ZpcnN0TW92ZSA9IHRydWU7XG5cdFx0XHRmcmFtZXdvcmsuYmluZCh3aW5kb3csIF91cE1vdmVFdmVudHMsIHNlbGYpO1xuXG5cdFx0XHRfaXNab29taW5nSW4gPSBcblx0XHRcdFx0X3dhc092ZXJJbml0aWFsWm9vbSA9IFxuXHRcdFx0XHRfb3BhY2l0eUNoYW5nZWQgPSBcblx0XHRcdFx0X3ZlcnRpY2FsRHJhZ0luaXRpYXRlZCA9IFxuXHRcdFx0XHRfbWFpblNjcm9sbFNoaWZ0ZWQgPSBcblx0XHRcdFx0X21vdmVkID0gXG5cdFx0XHRcdF9pc011bHRpdG91Y2ggPSBcblx0XHRcdFx0X3pvb21TdGFydGVkID0gZmFsc2U7XG5cblx0XHRcdF9kaXJlY3Rpb24gPSBudWxsO1xuXG5cdFx0XHRfc2hvdXQoJ2ZpcnN0VG91Y2hTdGFydCcsIHN0YXJ0UG9pbnRzTGlzdCk7XG5cblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhfc3RhcnRQYW5PZmZzZXQsIF9wYW5PZmZzZXQpO1xuXG5cdFx0XHRfY3VyclBhbkRpc3QueCA9IF9jdXJyUGFuRGlzdC55ID0gMDtcblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhfY3VyclBvaW50LCBzdGFydFBvaW50c0xpc3RbMF0pO1xuXHRcdFx0X2VxdWFsaXplUG9pbnRzKF9zdGFydFBvaW50LCBfY3VyclBvaW50KTtcblxuXHRcdFx0Ly9fZXF1YWxpemVQb2ludHMoX3N0YXJ0TWFpblNjcm9sbFBvcywgX21haW5TY3JvbGxQb3MpO1xuXHRcdFx0X3N0YXJ0TWFpblNjcm9sbFBvcy54ID0gX3NsaWRlU2l6ZS54ICogX2N1cnJQb3NpdGlvbkluZGV4O1xuXG5cdFx0XHRfcG9zUG9pbnRzID0gW3tcblx0XHRcdFx0eDogX2N1cnJQb2ludC54LFxuXHRcdFx0XHR5OiBfY3VyclBvaW50Lnlcblx0XHRcdH1dO1xuXG5cdFx0XHRfZ2VzdHVyZUNoZWNrU3BlZWRUaW1lID0gX2dlc3R1cmVTdGFydFRpbWUgPSBfZ2V0Q3VycmVudFRpbWUoKTtcblxuXHRcdFx0Ly9fbWFpblNjcm9sbEFuaW1hdGlvbkVuZCh0cnVlKTtcblx0XHRcdF9jYWxjdWxhdGVQYW5Cb3VuZHMoIF9jdXJyWm9vbUxldmVsLCB0cnVlICk7XG5cdFx0XHRcblx0XHRcdC8vIFN0YXJ0IHJlbmRlcmluZ1xuXHRcdFx0X3N0b3BEcmFnVXBkYXRlTG9vcCgpO1xuXHRcdFx0X2RyYWdVcGRhdGVMb29wKCk7XG5cdFx0XHRcblx0XHR9XG5cblx0XHQvLyBpbml0IHpvb21cblx0XHRpZighX2lzWm9vbWluZyAmJiBudW1Qb2ludHMgPiAxICYmICFfbWFpblNjcm9sbEFuaW1hdGluZyAmJiAhX21haW5TY3JvbGxTaGlmdGVkKSB7XG5cdFx0XHRfc3RhcnRab29tTGV2ZWwgPSBfY3Vyclpvb21MZXZlbDtcblx0XHRcdF96b29tU3RhcnRlZCA9IGZhbHNlOyAvLyB0cnVlIGlmIHpvb20gY2hhbmdlZCBhdCBsZWFzdCBvbmNlXG5cblx0XHRcdF9pc1pvb21pbmcgPSBfaXNNdWx0aXRvdWNoID0gdHJ1ZTtcblx0XHRcdF9jdXJyUGFuRGlzdC55ID0gX2N1cnJQYW5EaXN0LnggPSAwO1xuXG5cdFx0XHRfZXF1YWxpemVQb2ludHMoX3N0YXJ0UGFuT2Zmc2V0LCBfcGFuT2Zmc2V0KTtcblxuXHRcdFx0X2VxdWFsaXplUG9pbnRzKHAsIHN0YXJ0UG9pbnRzTGlzdFswXSk7XG5cdFx0XHRfZXF1YWxpemVQb2ludHMocDIsIHN0YXJ0UG9pbnRzTGlzdFsxXSk7XG5cblx0XHRcdF9maW5kQ2VudGVyT2ZQb2ludHMocCwgcDIsIF9jdXJyQ2VudGVyUG9pbnQpO1xuXG5cdFx0XHRfbWlkWm9vbVBvaW50LnggPSBNYXRoLmFicyhfY3VyckNlbnRlclBvaW50LngpIC0gX3Bhbk9mZnNldC54O1xuXHRcdFx0X21pZFpvb21Qb2ludC55ID0gTWF0aC5hYnMoX2N1cnJDZW50ZXJQb2ludC55KSAtIF9wYW5PZmZzZXQueTtcblx0XHRcdF9jdXJyUG9pbnRzRGlzdGFuY2UgPSBfc3RhcnRQb2ludHNEaXN0YW5jZSA9IF9jYWxjdWxhdGVQb2ludHNEaXN0YW5jZShwLCBwMik7XG5cdFx0fVxuXG5cblx0fSxcblxuXHQvLyBQb2ludGVybW92ZS90b3VjaG1vdmUvbW91c2Vtb3ZlIGhhbmRsZXJcblx0X29uRHJhZ01vdmUgPSBmdW5jdGlvbihlKSB7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRpZihfcG9pbnRlckV2ZW50RW5hYmxlZCkge1xuXHRcdFx0dmFyIHBvaW50ZXJJbmRleCA9IGZyYW1ld29yay5hcnJheVNlYXJjaChfY3VyclBvaW50ZXJzLCBlLnBvaW50ZXJJZCwgJ2lkJyk7XG5cdFx0XHRpZihwb2ludGVySW5kZXggPiAtMSkge1xuXHRcdFx0XHR2YXIgcCA9IF9jdXJyUG9pbnRlcnNbcG9pbnRlckluZGV4XTtcblx0XHRcdFx0cC54ID0gZS5wYWdlWDtcblx0XHRcdFx0cC55ID0gZS5wYWdlWTsgXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoX2lzRHJhZ2dpbmcpIHtcblx0XHRcdHZhciB0b3VjaGVzTGlzdCA9IF9nZXRUb3VjaFBvaW50cyhlKTtcblx0XHRcdGlmKCFfZGlyZWN0aW9uICYmICFfbW92ZWQgJiYgIV9pc1pvb21pbmcpIHtcblxuXHRcdFx0XHRpZihfbWFpblNjcm9sbFBvcy54ICE9PSBfc2xpZGVTaXplLnggKiBfY3VyclBvc2l0aW9uSW5kZXgpIHtcblx0XHRcdFx0XHQvLyBpZiBtYWluIHNjcm9sbCBwb3NpdGlvbiBpcyBzaGlmdGVkIOKAkyBkaXJlY3Rpb24gaXMgYWx3YXlzIGhvcml6b250YWxcblx0XHRcdFx0XHRfZGlyZWN0aW9uID0gJ2gnO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBkaWZmID0gTWF0aC5hYnModG91Y2hlc0xpc3RbMF0ueCAtIF9jdXJyUG9pbnQueCkgLSBNYXRoLmFicyh0b3VjaGVzTGlzdFswXS55IC0gX2N1cnJQb2ludC55KTtcblx0XHRcdFx0XHQvLyBjaGVjayB0aGUgZGlyZWN0aW9uIG9mIG1vdmVtZW50XG5cdFx0XHRcdFx0aWYoTWF0aC5hYnMoZGlmZikgPj0gRElSRUNUSU9OX0NIRUNLX09GRlNFVCkge1xuXHRcdFx0XHRcdFx0X2RpcmVjdGlvbiA9IGRpZmYgPiAwID8gJ2gnIDogJ3YnO1xuXHRcdFx0XHRcdFx0X2N1cnJlbnRQb2ludHMgPSB0b3VjaGVzTGlzdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfY3VycmVudFBvaW50cyA9IHRvdWNoZXNMaXN0O1xuXHRcdFx0fVxuXHRcdH1cdFxuXHR9LFxuXHQvLyBcblx0X3JlbmRlck1vdmVtZW50ID0gIGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYoIV9jdXJyZW50UG9pbnRzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG51bVBvaW50cyA9IF9jdXJyZW50UG9pbnRzLmxlbmd0aDtcblxuXHRcdGlmKG51bVBvaW50cyA9PT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdF9lcXVhbGl6ZVBvaW50cyhwLCBfY3VycmVudFBvaW50c1swXSk7XG5cblx0XHRkZWx0YS54ID0gcC54IC0gX2N1cnJQb2ludC54O1xuXHRcdGRlbHRhLnkgPSBwLnkgLSBfY3VyclBvaW50Lnk7XG5cblx0XHRpZihfaXNab29taW5nICYmIG51bVBvaW50cyA+IDEpIHtcblx0XHRcdC8vIEhhbmRsZSBiZWhhdmlvdXIgZm9yIG1vcmUgdGhhbiAxIHBvaW50XG5cblx0XHRcdF9jdXJyUG9pbnQueCA9IHAueDtcblx0XHRcdF9jdXJyUG9pbnQueSA9IHAueTtcblx0XHRcblx0XHRcdC8vIGNoZWNrIGlmIG9uZSBvZiB0d28gcG9pbnRzIGNoYW5nZWRcblx0XHRcdGlmKCAhZGVsdGEueCAmJiAhZGVsdGEueSAmJiBfaXNFcXVhbFBvaW50cyhfY3VycmVudFBvaW50c1sxXSwgcDIpICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhwMiwgX2N1cnJlbnRQb2ludHNbMV0pO1xuXG5cblx0XHRcdGlmKCFfem9vbVN0YXJ0ZWQpIHtcblx0XHRcdFx0X3pvb21TdGFydGVkID0gdHJ1ZTtcblx0XHRcdFx0X3Nob3V0KCd6b29tR2VzdHVyZVN0YXJ0ZWQnKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gRGlzdGFuY2UgYmV0d2VlbiB0d28gcG9pbnRzXG5cdFx0XHR2YXIgcG9pbnRzRGlzdGFuY2UgPSBfY2FsY3VsYXRlUG9pbnRzRGlzdGFuY2UocCxwMik7XG5cblx0XHRcdHZhciB6b29tTGV2ZWwgPSBfY2FsY3VsYXRlWm9vbUxldmVsKHBvaW50c0Rpc3RhbmNlKTtcblxuXHRcdFx0Ly8gc2xpZ2h0bHkgb3ZlciB0aGUgb2YgaW5pdGlhbCB6b29tIGxldmVsXG5cdFx0XHRpZih6b29tTGV2ZWwgPiBzZWxmLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWwgKyBzZWxmLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWwgLyAxNSkge1xuXHRcdFx0XHRfd2FzT3ZlckluaXRpYWxab29tID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgdGhlIGZyaWN0aW9uIGlmIHpvb20gbGV2ZWwgaXMgb3V0IG9mIHRoZSBib3VuZHNcblx0XHRcdHZhciB6b29tRnJpY3Rpb24gPSAxLFxuXHRcdFx0XHRtaW5ab29tTGV2ZWwgPSBfZ2V0TWluWm9vbUxldmVsKCksXG5cdFx0XHRcdG1heFpvb21MZXZlbCA9IF9nZXRNYXhab29tTGV2ZWwoKTtcblxuXHRcdFx0aWYgKCB6b29tTGV2ZWwgPCBtaW5ab29tTGV2ZWwgKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihfb3B0aW9ucy5waW5jaFRvQ2xvc2UgJiYgIV93YXNPdmVySW5pdGlhbFpvb20gJiYgX3N0YXJ0Wm9vbUxldmVsIDw9IHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbCkge1xuXHRcdFx0XHRcdC8vIGZhZGUgb3V0IGJhY2tncm91bmQgaWYgem9vbWluZyBvdXRcblx0XHRcdFx0XHR2YXIgbWludXNEaWZmID0gbWluWm9vbUxldmVsIC0gem9vbUxldmVsO1xuXHRcdFx0XHRcdHZhciBwZXJjZW50ID0gMSAtIG1pbnVzRGlmZiAvIChtaW5ab29tTGV2ZWwgLyAxLjIpO1xuXG5cdFx0XHRcdFx0X2FwcGx5QmdPcGFjaXR5KHBlcmNlbnQpO1xuXHRcdFx0XHRcdF9zaG91dCgnb25QaW5jaENsb3NlJywgcGVyY2VudCk7XG5cdFx0XHRcdFx0X29wYWNpdHlDaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR6b29tRnJpY3Rpb24gPSAobWluWm9vbUxldmVsIC0gem9vbUxldmVsKSAvIG1pblpvb21MZXZlbDtcblx0XHRcdFx0XHRpZih6b29tRnJpY3Rpb24gPiAxKSB7XG5cdFx0XHRcdFx0XHR6b29tRnJpY3Rpb24gPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR6b29tTGV2ZWwgPSBtaW5ab29tTGV2ZWwgLSB6b29tRnJpY3Rpb24gKiAobWluWm9vbUxldmVsIC8gMyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHR9IGVsc2UgaWYgKCB6b29tTGV2ZWwgPiBtYXhab29tTGV2ZWwgKSB7XG5cdFx0XHRcdC8vIDEuNSAtIGV4dHJhIHpvb20gbGV2ZWwgYWJvdmUgdGhlIG1heC4gRS5nLiBpZiBtYXggaXMgeDYsIHJlYWwgbWF4IDYgKyAxLjUgPSA3LjVcblx0XHRcdFx0em9vbUZyaWN0aW9uID0gKHpvb21MZXZlbCAtIG1heFpvb21MZXZlbCkgLyAoIG1pblpvb21MZXZlbCAqIDYgKTtcblx0XHRcdFx0aWYoem9vbUZyaWN0aW9uID4gMSkge1xuXHRcdFx0XHRcdHpvb21GcmljdGlvbiA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0em9vbUxldmVsID0gbWF4Wm9vbUxldmVsICsgem9vbUZyaWN0aW9uICogbWluWm9vbUxldmVsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZih6b29tRnJpY3Rpb24gPCAwKSB7XG5cdFx0XHRcdHpvb21GcmljdGlvbiA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRpc3RhbmNlIGJldHdlZW4gdG91Y2ggcG9pbnRzIGFmdGVyIGZyaWN0aW9uIGlzIGFwcGxpZWRcblx0XHRcdF9jdXJyUG9pbnRzRGlzdGFuY2UgPSBwb2ludHNEaXN0YW5jZTtcblxuXHRcdFx0Ly8gX2NlbnRlclBvaW50IC0gVGhlIHBvaW50IGluIHRoZSBtaWRkbGUgb2YgdHdvIHBvaW50ZXJzXG5cdFx0XHRfZmluZENlbnRlck9mUG9pbnRzKHAsIHAyLCBfY2VudGVyUG9pbnQpO1xuXHRcdFxuXHRcdFx0Ly8gcGFuaW5nIHdpdGggdHdvIHBvaW50ZXJzIHByZXNzZWRcblx0XHRcdF9jdXJyUGFuRGlzdC54ICs9IF9jZW50ZXJQb2ludC54IC0gX2N1cnJDZW50ZXJQb2ludC54O1xuXHRcdFx0X2N1cnJQYW5EaXN0LnkgKz0gX2NlbnRlclBvaW50LnkgLSBfY3VyckNlbnRlclBvaW50Lnk7XG5cdFx0XHRfZXF1YWxpemVQb2ludHMoX2N1cnJDZW50ZXJQb2ludCwgX2NlbnRlclBvaW50KTtcblxuXHRcdFx0X3Bhbk9mZnNldC54ID0gX2NhbGN1bGF0ZVBhbk9mZnNldCgneCcsIHpvb21MZXZlbCk7XG5cdFx0XHRfcGFuT2Zmc2V0LnkgPSBfY2FsY3VsYXRlUGFuT2Zmc2V0KCd5Jywgem9vbUxldmVsKTtcblxuXHRcdFx0X2lzWm9vbWluZ0luID0gem9vbUxldmVsID4gX2N1cnJab29tTGV2ZWw7XG5cdFx0XHRfY3Vyclpvb21MZXZlbCA9IHpvb21MZXZlbDtcblx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBoYW5kbGUgYmVoYXZpb3VyIGZvciBvbmUgcG9pbnQgKGRyYWdnaW5nIG9yIHBhbm5pbmcpXG5cblx0XHRcdGlmKCFfZGlyZWN0aW9uKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYoX2lzRmlyc3RNb3ZlKSB7XG5cdFx0XHRcdF9pc0ZpcnN0TW92ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHN1YnRyYWN0IGRyYWcgZGlzdGFuY2UgdGhhdCB3YXMgdXNlZCBkdXJpbmcgdGhlIGRldGVjdGlvbiBkaXJlY3Rpb24gIFxuXG5cdFx0XHRcdGlmKCBNYXRoLmFicyhkZWx0YS54KSA+PSBESVJFQ1RJT05fQ0hFQ0tfT0ZGU0VUKSB7XG5cdFx0XHRcdFx0ZGVsdGEueCAtPSBfY3VycmVudFBvaW50c1swXS54IC0gX3N0YXJ0UG9pbnQueDtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0aWYoIE1hdGguYWJzKGRlbHRhLnkpID49IERJUkVDVElPTl9DSEVDS19PRkZTRVQpIHtcblx0XHRcdFx0XHRkZWx0YS55IC09IF9jdXJyZW50UG9pbnRzWzBdLnkgLSBfc3RhcnRQb2ludC55O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdF9jdXJyUG9pbnQueCA9IHAueDtcblx0XHRcdF9jdXJyUG9pbnQueSA9IHAueTtcblxuXHRcdFx0Ly8gZG8gbm90aGluZyBpZiBwb2ludGVycyBwb3NpdGlvbiBoYXNuJ3QgY2hhbmdlZFxuXHRcdFx0aWYoZGVsdGEueCA9PT0gMCAmJiBkZWx0YS55ID09PSAwKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYoX2RpcmVjdGlvbiA9PT0gJ3YnICYmIF9vcHRpb25zLmNsb3NlT25WZXJ0aWNhbERyYWcpIHtcblx0XHRcdFx0aWYoIV9jYW5QYW4oKSkge1xuXHRcdFx0XHRcdF9jdXJyUGFuRGlzdC55ICs9IGRlbHRhLnk7XG5cdFx0XHRcdFx0X3Bhbk9mZnNldC55ICs9IGRlbHRhLnk7XG5cblx0XHRcdFx0XHR2YXIgb3BhY2l0eVJhdGlvID0gX2NhbGN1bGF0ZVZlcnRpY2FsRHJhZ09wYWNpdHlSYXRpbygpO1xuXG5cdFx0XHRcdFx0X3ZlcnRpY2FsRHJhZ0luaXRpYXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0X3Nob3V0KCdvblZlcnRpY2FsRHJhZycsIG9wYWNpdHlSYXRpbyk7XG5cblx0XHRcdFx0XHRfYXBwbHlCZ09wYWNpdHkob3BhY2l0eVJhdGlvKTtcblx0XHRcdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXHRcdFx0XHRcdHJldHVybiA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0X3B1c2hQb3NQb2ludChfZ2V0Q3VycmVudFRpbWUoKSwgcC54LCBwLnkpO1xuXG5cdFx0XHRfbW92ZWQgPSB0cnVlO1xuXHRcdFx0X2N1cnJQYW5Cb3VuZHMgPSBzZWxmLmN1cnJJdGVtLmJvdW5kcztcblx0XHRcdFxuXHRcdFx0dmFyIG1haW5TY3JvbGxDaGFuZ2VkID0gX3Bhbk9yTW92ZU1haW5TY3JvbGwoJ3gnLCBkZWx0YSk7XG5cdFx0XHRpZighbWFpblNjcm9sbENoYW5nZWQpIHtcblx0XHRcdFx0X3Bhbk9yTW92ZU1haW5TY3JvbGwoJ3knLCBkZWx0YSk7XG5cblx0XHRcdFx0X3JvdW5kUG9pbnQoX3Bhbk9mZnNldCk7XG5cdFx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblx0XG5cdC8vIFBvaW50ZXJ1cC9wb2ludGVyY2FuY2VsL3RvdWNoZW5kL3RvdWNoY2FuY2VsL21vdXNldXAgZXZlbnQgaGFuZGxlclxuXHRfb25EcmFnUmVsZWFzZSA9IGZ1bmN0aW9uKGUpIHtcblxuXHRcdGlmKF9mZWF0dXJlcy5pc09sZEFuZHJvaWQgKSB7XG5cblx0XHRcdGlmKF9vbGRBbmRyb2lkVG91Y2hFbmRUaW1lb3V0ICYmIGUudHlwZSA9PT0gJ21vdXNldXAnKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gb24gQW5kcm9pZCAodjQuMSwgNC4yLCA0LjMgJiBwb3NzaWJseSBvbGRlcikgXG5cdFx0XHQvLyBnaG9zdCBtb3VzZWRvd24vdXAgZXZlbnQgaXNuJ3QgcHJldmVudGFibGUgdmlhIGUucHJldmVudERlZmF1bHQsXG5cdFx0XHQvLyB3aGljaCBjYXVzZXMgZmFrZSBtb3VzZWRvd24gZXZlbnRcblx0XHRcdC8vIHNvIHdlIGJsb2NrIG1vdXNlZG93bi91cCBmb3IgNjAwbXNcblx0XHRcdGlmKCBlLnR5cGUuaW5kZXhPZigndG91Y2gnKSA+IC0xICkge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQoX29sZEFuZHJvaWRUb3VjaEVuZFRpbWVvdXQpO1xuXHRcdFx0XHRfb2xkQW5kcm9pZFRvdWNoRW5kVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0X29sZEFuZHJvaWRUb3VjaEVuZFRpbWVvdXQgPSAwO1xuXHRcdFx0XHR9LCA2MDApO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fVxuXG5cdFx0X3Nob3V0KCdwb2ludGVyVXAnKTtcblxuXHRcdGlmKF9wcmV2ZW50RGVmYXVsdEV2ZW50QmVoYXZpb3VyKGUsIGZhbHNlKSkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblxuXHRcdHZhciByZWxlYXNlUG9pbnQ7XG5cblx0XHRpZihfcG9pbnRlckV2ZW50RW5hYmxlZCkge1xuXHRcdFx0dmFyIHBvaW50ZXJJbmRleCA9IGZyYW1ld29yay5hcnJheVNlYXJjaChfY3VyclBvaW50ZXJzLCBlLnBvaW50ZXJJZCwgJ2lkJyk7XG5cdFx0XHRcblx0XHRcdGlmKHBvaW50ZXJJbmRleCA+IC0xKSB7XG5cdFx0XHRcdHJlbGVhc2VQb2ludCA9IF9jdXJyUG9pbnRlcnMuc3BsaWNlKHBvaW50ZXJJbmRleCwgMSlbMF07XG5cblx0XHRcdFx0aWYobmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkKSB7XG5cdFx0XHRcdFx0cmVsZWFzZVBvaW50LnR5cGUgPSBlLnBvaW50ZXJUeXBlIHx8ICdtb3VzZSc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIE1TUE9JTlRFUl9UWVBFUyA9IHtcblx0XHRcdFx0XHRcdDQ6ICdtb3VzZScsIC8vIGV2ZW50Lk1TUE9JTlRFUl9UWVBFX01PVVNFXG5cdFx0XHRcdFx0XHQyOiAndG91Y2gnLCAvLyBldmVudC5NU1BPSU5URVJfVFlQRV9UT1VDSCBcblx0XHRcdFx0XHRcdDM6ICdwZW4nIC8vIGV2ZW50Lk1TUE9JTlRFUl9UWVBFX1BFTlxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0cmVsZWFzZVBvaW50LnR5cGUgPSBNU1BPSU5URVJfVFlQRVNbZS5wb2ludGVyVHlwZV07XG5cblx0XHRcdFx0XHRpZighcmVsZWFzZVBvaW50LnR5cGUpIHtcblx0XHRcdFx0XHRcdHJlbGVhc2VQb2ludC50eXBlID0gZS5wb2ludGVyVHlwZSB8fCAnbW91c2UnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIHRvdWNoTGlzdCA9IF9nZXRUb3VjaFBvaW50cyhlKSxcblx0XHRcdGdlc3R1cmVUeXBlLFxuXHRcdFx0bnVtUG9pbnRzID0gdG91Y2hMaXN0Lmxlbmd0aDtcblxuXHRcdGlmKGUudHlwZSA9PT0gJ21vdXNldXAnKSB7XG5cdFx0XHRudW1Qb2ludHMgPSAwO1xuXHRcdH1cblxuXHRcdC8vIERvIG5vdGhpbmcgaWYgdGhlcmUgd2VyZSAzIHRvdWNoIHBvaW50cyBvciBtb3JlXG5cdFx0aWYobnVtUG9pbnRzID09PSAyKSB7XG5cdFx0XHRfY3VycmVudFBvaW50cyA9IG51bGw7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBpZiBzZWNvbmQgcG9pbnRlciByZWxlYXNlZFxuXHRcdGlmKG51bVBvaW50cyA9PT0gMSkge1xuXHRcdFx0X2VxdWFsaXplUG9pbnRzKF9zdGFydFBvaW50LCB0b3VjaExpc3RbMF0pO1xuXHRcdH1cdFx0XHRcdFxuXG5cblx0XHQvLyBwb2ludGVyIGhhc24ndCBtb3ZlZCwgc2VuZCBcInRhcCByZWxlYXNlXCIgcG9pbnRcblx0XHRpZihudW1Qb2ludHMgPT09IDAgJiYgIV9kaXJlY3Rpb24gJiYgIV9tYWluU2Nyb2xsQW5pbWF0aW5nKSB7XG5cdFx0XHRpZighcmVsZWFzZVBvaW50KSB7XG5cdFx0XHRcdGlmKGUudHlwZSA9PT0gJ21vdXNldXAnKSB7XG5cdFx0XHRcdFx0cmVsZWFzZVBvaW50ID0ge3g6IGUucGFnZVgsIHk6IGUucGFnZVksIHR5cGU6J21vdXNlJ307XG5cdFx0XHRcdH0gZWxzZSBpZihlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXNbMF0pIHtcblx0XHRcdFx0XHRyZWxlYXNlUG9pbnQgPSB7eDogZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCwgeTogZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSwgdHlwZTondG91Y2gnfTtcblx0XHRcdFx0fVx0XHRcblx0XHRcdH1cblxuXHRcdFx0X3Nob3V0KCd0b3VjaFJlbGVhc2UnLCBlLCByZWxlYXNlUG9pbnQpO1xuXHRcdH1cblxuXHRcdC8vIERpZmZlcmVuY2UgaW4gdGltZSBiZXR3ZWVuIHJlbGVhc2luZyBvZiB0d28gbGFzdCB0b3VjaCBwb2ludHMgKHpvb20gZ2VzdHVyZSlcblx0XHR2YXIgcmVsZWFzZVRpbWVEaWZmID0gLTE7XG5cblx0XHQvLyBHZXN0dXJlIGNvbXBsZXRlZCwgbm8gcG9pbnRlcnMgbGVmdFxuXHRcdGlmKG51bVBvaW50cyA9PT0gMCkge1xuXHRcdFx0X2lzRHJhZ2dpbmcgPSBmYWxzZTtcblx0XHRcdGZyYW1ld29yay51bmJpbmQod2luZG93LCBfdXBNb3ZlRXZlbnRzLCBzZWxmKTtcblxuXHRcdFx0X3N0b3BEcmFnVXBkYXRlTG9vcCgpO1xuXG5cdFx0XHRpZihfaXNab29taW5nKSB7XG5cdFx0XHRcdC8vIFR3byBwb2ludHMgcmVsZWFzZWQgYXQgdGhlIHNhbWUgdGltZVxuXHRcdFx0XHRyZWxlYXNlVGltZURpZmYgPSAwO1xuXHRcdFx0fSBlbHNlIGlmKF9sYXN0UmVsZWFzZVRpbWUgIT09IC0xKSB7XG5cdFx0XHRcdHJlbGVhc2VUaW1lRGlmZiA9IF9nZXRDdXJyZW50VGltZSgpIC0gX2xhc3RSZWxlYXNlVGltZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0X2xhc3RSZWxlYXNlVGltZSA9IG51bVBvaW50cyA9PT0gMSA/IF9nZXRDdXJyZW50VGltZSgpIDogLTE7XG5cdFx0XG5cdFx0aWYocmVsZWFzZVRpbWVEaWZmICE9PSAtMSAmJiByZWxlYXNlVGltZURpZmYgPCAxNTApIHtcblx0XHRcdGdlc3R1cmVUeXBlID0gJ3pvb20nO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRnZXN0dXJlVHlwZSA9ICdzd2lwZSc7XG5cdFx0fVxuXG5cdFx0aWYoX2lzWm9vbWluZyAmJiBudW1Qb2ludHMgPCAyKSB7XG5cdFx0XHRfaXNab29taW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIE9ubHkgc2Vjb25kIHBvaW50IHJlbGVhc2VkXG5cdFx0XHRpZihudW1Qb2ludHMgPT09IDEpIHtcblx0XHRcdFx0Z2VzdHVyZVR5cGUgPSAnem9vbVBvaW50ZXJVcCc7XG5cdFx0XHR9XG5cdFx0XHRfc2hvdXQoJ3pvb21HZXN0dXJlRW5kZWQnKTtcblx0XHR9XG5cblx0XHRfY3VycmVudFBvaW50cyA9IG51bGw7XG5cdFx0aWYoIV9tb3ZlZCAmJiAhX3pvb21TdGFydGVkICYmICFfbWFpblNjcm9sbEFuaW1hdGluZyAmJiAhX3ZlcnRpY2FsRHJhZ0luaXRpYXRlZCkge1xuXHRcdFx0Ly8gbm90aGluZyB0byBhbmltYXRlXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcblx0XHRfc3RvcEFsbEFuaW1hdGlvbnMoKTtcblxuXHRcdFxuXHRcdGlmKCFfcmVsZWFzZUFuaW1EYXRhKSB7XG5cdFx0XHRfcmVsZWFzZUFuaW1EYXRhID0gX2luaXREcmFnUmVsZWFzZUFuaW1hdGlvbkRhdGEoKTtcblx0XHR9XG5cdFx0XG5cdFx0X3JlbGVhc2VBbmltRGF0YS5jYWxjdWxhdGVTd2lwZVNwZWVkKCd4Jyk7XG5cblxuXHRcdGlmKF92ZXJ0aWNhbERyYWdJbml0aWF0ZWQpIHtcblxuXHRcdFx0dmFyIG9wYWNpdHlSYXRpbyA9IF9jYWxjdWxhdGVWZXJ0aWNhbERyYWdPcGFjaXR5UmF0aW8oKTtcblxuXHRcdFx0aWYob3BhY2l0eVJhdGlvIDwgX29wdGlvbnMudmVydGljYWxEcmFnUmFuZ2UpIHtcblx0XHRcdFx0c2VsZi5jbG9zZSgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIGluaXRhbFBhblkgPSBfcGFuT2Zmc2V0LnksXG5cdFx0XHRcdFx0aW5pdGlhbEJnT3BhY2l0eSA9IF9iZ09wYWNpdHk7XG5cblx0XHRcdFx0X2FuaW1hdGVQcm9wKCd2ZXJ0aWNhbERyYWcnLCAwLCAxLCAzMDAsIGZyYW1ld29yay5lYXNpbmcuY3ViaWMub3V0LCBmdW5jdGlvbihub3cpIHtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRfcGFuT2Zmc2V0LnkgPSAoc2VsZi5jdXJySXRlbS5pbml0aWFsUG9zaXRpb24ueSAtIGluaXRhbFBhblkpICogbm93ICsgaW5pdGFsUGFuWTtcblxuXHRcdFx0XHRcdF9hcHBseUJnT3BhY2l0eSggICgxIC0gaW5pdGlhbEJnT3BhY2l0eSkgKiBub3cgKyBpbml0aWFsQmdPcGFjaXR5ICk7XG5cdFx0XHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0X3Nob3V0KCdvblZlcnRpY2FsRHJhZycsIDEpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cblx0XHQvLyBtYWluIHNjcm9sbCBcblx0XHRpZiggIChfbWFpblNjcm9sbFNoaWZ0ZWQgfHwgX21haW5TY3JvbGxBbmltYXRpbmcpICYmIG51bVBvaW50cyA9PT0gMCkge1xuXHRcdFx0dmFyIGl0ZW1DaGFuZ2VkID0gX2ZpbmlzaFN3aXBlTWFpblNjcm9sbEdlc3R1cmUoZ2VzdHVyZVR5cGUsIF9yZWxlYXNlQW5pbURhdGEpO1xuXHRcdFx0aWYoaXRlbUNoYW5nZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Z2VzdHVyZVR5cGUgPSAnem9vbVBvaW50ZXJVcCc7XG5cdFx0fVxuXG5cdFx0Ly8gcHJldmVudCB6b29tL3BhbiBhbmltYXRpb24gd2hlbiBtYWluIHNjcm9sbCBhbmltYXRpb24gcnVuc1xuXHRcdGlmKF9tYWluU2Nyb2xsQW5pbWF0aW5nKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdC8vIENvbXBsZXRlIHNpbXBsZSB6b29tIGdlc3R1cmUgKHJlc2V0IHpvb20gbGV2ZWwgaWYgaXQncyBvdXQgb2YgdGhlIGJvdW5kcykgIFxuXHRcdGlmKGdlc3R1cmVUeXBlICE9PSAnc3dpcGUnKSB7XG5cdFx0XHRfY29tcGxldGVab29tR2VzdHVyZSgpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0Ly8gQ29tcGxldGUgcGFuIGdlc3R1cmUgaWYgbWFpbiBzY3JvbGwgaXMgbm90IHNoaWZ0ZWQsIGFuZCBpdCdzIHBvc3NpYmxlIHRvIHBhbiBjdXJyZW50IGltYWdlXG5cdFx0aWYoIV9tYWluU2Nyb2xsU2hpZnRlZCAmJiBfY3Vyclpvb21MZXZlbCA+IHNlbGYuY3Vyckl0ZW0uZml0UmF0aW8pIHtcblx0XHRcdF9jb21wbGV0ZVBhbkdlc3R1cmUoX3JlbGVhc2VBbmltRGF0YSk7XG5cdFx0fVxuXHR9LFxuXG5cblx0Ly8gUmV0dXJucyBvYmplY3Qgd2l0aCBkYXRhIGFib3V0IGdlc3R1cmVcblx0Ly8gSXQncyBjcmVhdGVkIG9ubHkgb25jZSBhbmQgdGhlbiByZXVzZWRcblx0X2luaXREcmFnUmVsZWFzZUFuaW1hdGlvbkRhdGEgID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gdGVtcCBsb2NhbCB2YXJzXG5cdFx0dmFyIGxhc3RGbGlja0R1cmF0aW9uLFxuXHRcdFx0dGVtcFJlbGVhc2VQb3M7XG5cblx0XHQvLyBzID0gdGhpc1xuXHRcdHZhciBzID0ge1xuXHRcdFx0bGFzdEZsaWNrT2Zmc2V0OiB7fSxcblx0XHRcdGxhc3RGbGlja0Rpc3Q6IHt9LFxuXHRcdFx0bGFzdEZsaWNrU3BlZWQ6IHt9LFxuXHRcdFx0c2xvd0Rvd25SYXRpbzogIHt9LFxuXHRcdFx0c2xvd0Rvd25SYXRpb1JldmVyc2U6ICB7fSxcblx0XHRcdHNwZWVkRGVjZWxlcmF0aW9uUmF0aW86ICB7fSxcblx0XHRcdHNwZWVkRGVjZWxlcmF0aW9uUmF0aW9BYnM6ICB7fSxcblx0XHRcdGRpc3RhbmNlT2Zmc2V0OiAge30sXG5cdFx0XHRiYWNrQW5pbURlc3RpbmF0aW9uOiB7fSxcblx0XHRcdGJhY2tBbmltU3RhcnRlZDoge30sXG5cdFx0XHRjYWxjdWxhdGVTd2lwZVNwZWVkOiBmdW5jdGlvbihheGlzKSB7XG5cdFx0XHRcdFxuXG5cdFx0XHRcdGlmKCBfcG9zUG9pbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRsYXN0RmxpY2tEdXJhdGlvbiA9IF9nZXRDdXJyZW50VGltZSgpIC0gX2dlc3R1cmVDaGVja1NwZWVkVGltZSArIDUwO1xuXHRcdFx0XHRcdHRlbXBSZWxlYXNlUG9zID0gX3Bvc1BvaW50c1tfcG9zUG9pbnRzLmxlbmd0aC0yXVtheGlzXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsYXN0RmxpY2tEdXJhdGlvbiA9IF9nZXRDdXJyZW50VGltZSgpIC0gX2dlc3R1cmVTdGFydFRpbWU7IC8vIHRvdGFsIGdlc3R1cmUgZHVyYXRpb25cblx0XHRcdFx0XHR0ZW1wUmVsZWFzZVBvcyA9IF9zdGFydFBvaW50W2F4aXNdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHMubGFzdEZsaWNrT2Zmc2V0W2F4aXNdID0gX2N1cnJQb2ludFtheGlzXSAtIHRlbXBSZWxlYXNlUG9zO1xuXHRcdFx0XHRzLmxhc3RGbGlja0Rpc3RbYXhpc10gPSBNYXRoLmFicyhzLmxhc3RGbGlja09mZnNldFtheGlzXSk7XG5cdFx0XHRcdGlmKHMubGFzdEZsaWNrRGlzdFtheGlzXSA+IDIwKSB7XG5cdFx0XHRcdFx0cy5sYXN0RmxpY2tTcGVlZFtheGlzXSA9IHMubGFzdEZsaWNrT2Zmc2V0W2F4aXNdIC8gbGFzdEZsaWNrRHVyYXRpb247XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cy5sYXN0RmxpY2tTcGVlZFtheGlzXSA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoIE1hdGguYWJzKHMubGFzdEZsaWNrU3BlZWRbYXhpc10pIDwgMC4xICkge1xuXHRcdFx0XHRcdHMubGFzdEZsaWNrU3BlZWRbYXhpc10gPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRzLnNsb3dEb3duUmF0aW9bYXhpc10gPSAwLjk1O1xuXHRcdFx0XHRzLnNsb3dEb3duUmF0aW9SZXZlcnNlW2F4aXNdID0gMSAtIHMuc2xvd0Rvd25SYXRpb1theGlzXTtcblx0XHRcdFx0cy5zcGVlZERlY2VsZXJhdGlvblJhdGlvW2F4aXNdID0gMTtcblx0XHRcdH0sXG5cblx0XHRcdGNhbGN1bGF0ZU92ZXJCb3VuZHNBbmltT2Zmc2V0OiBmdW5jdGlvbihheGlzLCBzcGVlZCkge1xuXHRcdFx0XHRpZighcy5iYWNrQW5pbVN0YXJ0ZWRbYXhpc10pIHtcblxuXHRcdFx0XHRcdGlmKF9wYW5PZmZzZXRbYXhpc10gPiBfY3VyclBhbkJvdW5kcy5taW5bYXhpc10pIHtcblx0XHRcdFx0XHRcdHMuYmFja0FuaW1EZXN0aW5hdGlvbltheGlzXSA9IF9jdXJyUGFuQm91bmRzLm1pbltheGlzXTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdH0gZWxzZSBpZihfcGFuT2Zmc2V0W2F4aXNdIDwgX2N1cnJQYW5Cb3VuZHMubWF4W2F4aXNdKSB7XG5cdFx0XHRcdFx0XHRzLmJhY2tBbmltRGVzdGluYXRpb25bYXhpc10gPSBfY3VyclBhbkJvdW5kcy5tYXhbYXhpc107XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYocy5iYWNrQW5pbURlc3RpbmF0aW9uW2F4aXNdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdHMuc2xvd0Rvd25SYXRpb1theGlzXSA9IDAuNztcblx0XHRcdFx0XHRcdHMuc2xvd0Rvd25SYXRpb1JldmVyc2VbYXhpc10gPSAxIC0gcy5zbG93RG93blJhdGlvW2F4aXNdO1xuXHRcdFx0XHRcdFx0aWYocy5zcGVlZERlY2VsZXJhdGlvblJhdGlvQWJzW2F4aXNdIDwgMC4wNSkge1xuXG5cdFx0XHRcdFx0XHRcdHMubGFzdEZsaWNrU3BlZWRbYXhpc10gPSAwO1xuXHRcdFx0XHRcdFx0XHRzLmJhY2tBbmltU3RhcnRlZFtheGlzXSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0X2FuaW1hdGVQcm9wKCdib3VuY2Vab29tUGFuJytheGlzLF9wYW5PZmZzZXRbYXhpc10sIFxuXHRcdFx0XHRcdFx0XHRcdHMuYmFja0FuaW1EZXN0aW5hdGlvbltheGlzXSwgXG5cdFx0XHRcdFx0XHRcdFx0c3BlZWQgfHwgMzAwLCBcblx0XHRcdFx0XHRcdFx0XHRmcmFtZXdvcmsuZWFzaW5nLnNpbmUub3V0LCBcblx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbihwb3MpIHtcblx0XHRcdFx0XHRcdFx0XHRcdF9wYW5PZmZzZXRbYXhpc10gPSBwb3M7XG5cdFx0XHRcdFx0XHRcdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVkdWNlcyB0aGUgc3BlZWQgYnkgc2xvd0Rvd25SYXRpbyAocGVyIDEwbXMpXG5cdFx0XHRjYWxjdWxhdGVBbmltT2Zmc2V0OiBmdW5jdGlvbihheGlzKSB7XG5cdFx0XHRcdGlmKCFzLmJhY2tBbmltU3RhcnRlZFtheGlzXSkge1xuXHRcdFx0XHRcdHMuc3BlZWREZWNlbGVyYXRpb25SYXRpb1theGlzXSA9IHMuc3BlZWREZWNlbGVyYXRpb25SYXRpb1theGlzXSAqIChzLnNsb3dEb3duUmF0aW9bYXhpc10gKyBcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHMuc2xvd0Rvd25SYXRpb1JldmVyc2VbYXhpc10gLSBcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHMuc2xvd0Rvd25SYXRpb1JldmVyc2VbYXhpc10gKiBzLnRpbWVEaWZmIC8gMTApO1xuXG5cdFx0XHRcdFx0cy5zcGVlZERlY2VsZXJhdGlvblJhdGlvQWJzW2F4aXNdID0gTWF0aC5hYnMocy5sYXN0RmxpY2tTcGVlZFtheGlzXSAqIHMuc3BlZWREZWNlbGVyYXRpb25SYXRpb1theGlzXSk7XG5cdFx0XHRcdFx0cy5kaXN0YW5jZU9mZnNldFtheGlzXSA9IHMubGFzdEZsaWNrU3BlZWRbYXhpc10gKiBzLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9bYXhpc10gKiBzLnRpbWVEaWZmO1xuXHRcdFx0XHRcdF9wYW5PZmZzZXRbYXhpc10gKz0gcy5kaXN0YW5jZU9mZnNldFtheGlzXTtcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRwYW5BbmltTG9vcDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggX2FuaW1hdGlvbnMuem9vbVBhbiApIHtcblx0XHRcdFx0XHRfYW5pbWF0aW9ucy56b29tUGFuLnJhZiA9IF9yZXF1ZXN0QUYocy5wYW5BbmltTG9vcCk7XG5cblx0XHRcdFx0XHRzLm5vdyA9IF9nZXRDdXJyZW50VGltZSgpO1xuXHRcdFx0XHRcdHMudGltZURpZmYgPSBzLm5vdyAtIHMubGFzdE5vdztcblx0XHRcdFx0XHRzLmxhc3ROb3cgPSBzLm5vdztcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzLmNhbGN1bGF0ZUFuaW1PZmZzZXQoJ3gnKTtcblx0XHRcdFx0XHRzLmNhbGN1bGF0ZUFuaW1PZmZzZXQoJ3knKTtcblxuXHRcdFx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cy5jYWxjdWxhdGVPdmVyQm91bmRzQW5pbU9mZnNldCgneCcpO1xuXHRcdFx0XHRcdHMuY2FsY3VsYXRlT3ZlckJvdW5kc0FuaW1PZmZzZXQoJ3knKTtcblxuXG5cdFx0XHRcdFx0aWYgKHMuc3BlZWREZWNlbGVyYXRpb25SYXRpb0Ficy54IDwgMC4wNSAmJiBzLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9BYnMueSA8IDAuMDUpIHtcblxuXHRcdFx0XHRcdFx0Ly8gcm91bmQgcGFuIHBvc2l0aW9uXG5cdFx0XHRcdFx0XHRfcGFuT2Zmc2V0LnggPSBNYXRoLnJvdW5kKF9wYW5PZmZzZXQueCk7XG5cdFx0XHRcdFx0XHRfcGFuT2Zmc2V0LnkgPSBNYXRoLnJvdW5kKF9wYW5PZmZzZXQueSk7XG5cdFx0XHRcdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRfc3RvcEFuaW1hdGlvbignem9vbVBhbicpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRyZXR1cm4gcztcblx0fSxcblxuXHRfY29tcGxldGVQYW5HZXN0dXJlID0gZnVuY3Rpb24oYW5pbURhdGEpIHtcblx0XHQvLyBjYWxjdWxhdGUgc3dpcGUgc3BlZWQgZm9yIFkgYXhpcyAocGFhbm5pbmcpXG5cdFx0YW5pbURhdGEuY2FsY3VsYXRlU3dpcGVTcGVlZCgneScpO1xuXG5cdFx0X2N1cnJQYW5Cb3VuZHMgPSBzZWxmLmN1cnJJdGVtLmJvdW5kcztcblx0XHRcblx0XHRhbmltRGF0YS5iYWNrQW5pbURlc3RpbmF0aW9uID0ge307XG5cdFx0YW5pbURhdGEuYmFja0FuaW1TdGFydGVkID0ge307XG5cblx0XHQvLyBBdm9pZCBhY2NlbGVyYXRpb24gYW5pbWF0aW9uIGlmIHNwZWVkIGlzIHRvbyBsb3dcblx0XHRpZihNYXRoLmFicyhhbmltRGF0YS5sYXN0RmxpY2tTcGVlZC54KSA8PSAwLjA1ICYmIE1hdGguYWJzKGFuaW1EYXRhLmxhc3RGbGlja1NwZWVkLnkpIDw9IDAuMDUgKSB7XG5cdFx0XHRhbmltRGF0YS5zcGVlZERlY2VsZXJhdGlvblJhdGlvQWJzLnggPSBhbmltRGF0YS5zcGVlZERlY2VsZXJhdGlvblJhdGlvQWJzLnkgPSAwO1xuXG5cdFx0XHQvLyBSdW4gcGFuIGRyYWcgcmVsZWFzZSBhbmltYXRpb24uIEUuZy4gaWYgeW91IGRyYWcgaW1hZ2UgYW5kIHJlbGVhc2UgZmluZ2VyIHdpdGhvdXQgbW9tZW50dW0uXG5cdFx0XHRhbmltRGF0YS5jYWxjdWxhdGVPdmVyQm91bmRzQW5pbU9mZnNldCgneCcpO1xuXHRcdFx0YW5pbURhdGEuY2FsY3VsYXRlT3ZlckJvdW5kc0FuaW1PZmZzZXQoJ3knKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGlvbiBsb29wIHRoYXQgY29udHJvbHMgdGhlIGFjY2VsZXJhdGlvbiBhZnRlciBwYW4gZ2VzdHVyZSBlbmRzXG5cdFx0X3JlZ2lzdGVyU3RhcnRBbmltYXRpb24oJ3pvb21QYW4nKTtcblx0XHRhbmltRGF0YS5sYXN0Tm93ID0gX2dldEN1cnJlbnRUaW1lKCk7XG5cdFx0YW5pbURhdGEucGFuQW5pbUxvb3AoKTtcblx0fSxcblxuXG5cdF9maW5pc2hTd2lwZU1haW5TY3JvbGxHZXN0dXJlID0gZnVuY3Rpb24oZ2VzdHVyZVR5cGUsIF9yZWxlYXNlQW5pbURhdGEpIHtcblx0XHR2YXIgaXRlbUNoYW5nZWQ7XG5cdFx0aWYoIV9tYWluU2Nyb2xsQW5pbWF0aW5nKSB7XG5cdFx0XHRfY3Vyclpvb21lZEl0ZW1JbmRleCA9IF9jdXJyZW50SXRlbUluZGV4O1xuXHRcdH1cblxuXG5cdFx0XG5cdFx0dmFyIGl0ZW1zRGlmZjtcblxuXHRcdGlmKGdlc3R1cmVUeXBlID09PSAnc3dpcGUnKSB7XG5cdFx0XHR2YXIgdG90YWxTaGlmdERpc3QgPSBfY3VyclBvaW50LnggLSBfc3RhcnRQb2ludC54LFxuXHRcdFx0XHRpc0Zhc3RMYXN0RmxpY2sgPSBfcmVsZWFzZUFuaW1EYXRhLmxhc3RGbGlja0Rpc3QueCA8IDEwO1xuXG5cdFx0XHQvLyBpZiBjb250YWluZXIgaXMgc2hpZnRlZCBmb3IgbW9yZSB0aGFuIE1JTl9TV0lQRV9ESVNUQU5DRSwgXG5cdFx0XHQvLyBhbmQgbGFzdCBmbGljayBnZXN0dXJlIHdhcyBpbiByaWdodCBkaXJlY3Rpb25cblx0XHRcdGlmKHRvdGFsU2hpZnREaXN0ID4gTUlOX1NXSVBFX0RJU1RBTkNFICYmIFxuXHRcdFx0XHQoaXNGYXN0TGFzdEZsaWNrIHx8IF9yZWxlYXNlQW5pbURhdGEubGFzdEZsaWNrT2Zmc2V0LnggPiAyMCkgKSB7XG5cdFx0XHRcdC8vIGdvIHRvIHByZXYgaXRlbVxuXHRcdFx0XHRpdGVtc0RpZmYgPSAtMTtcblx0XHRcdH0gZWxzZSBpZih0b3RhbFNoaWZ0RGlzdCA8IC1NSU5fU1dJUEVfRElTVEFOQ0UgJiYgXG5cdFx0XHRcdChpc0Zhc3RMYXN0RmxpY2sgfHwgX3JlbGVhc2VBbmltRGF0YS5sYXN0RmxpY2tPZmZzZXQueCA8IC0yMCkgKSB7XG5cdFx0XHRcdC8vIGdvIHRvIG5leHQgaXRlbVxuXHRcdFx0XHRpdGVtc0RpZmYgPSAxO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBuZXh0Q2lyY2xlO1xuXG5cdFx0aWYoaXRlbXNEaWZmKSB7XG5cdFx0XHRcblx0XHRcdF9jdXJyZW50SXRlbUluZGV4ICs9IGl0ZW1zRGlmZjtcblxuXHRcdFx0aWYoX2N1cnJlbnRJdGVtSW5kZXggPCAwKSB7XG5cdFx0XHRcdF9jdXJyZW50SXRlbUluZGV4ID0gX29wdGlvbnMubG9vcCA/IF9nZXROdW1JdGVtcygpLTEgOiAwO1xuXHRcdFx0XHRuZXh0Q2lyY2xlID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSBpZihfY3VycmVudEl0ZW1JbmRleCA+PSBfZ2V0TnVtSXRlbXMoKSkge1xuXHRcdFx0XHRfY3VycmVudEl0ZW1JbmRleCA9IF9vcHRpb25zLmxvb3AgPyAwIDogX2dldE51bUl0ZW1zKCktMTtcblx0XHRcdFx0bmV4dENpcmNsZSA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFuZXh0Q2lyY2xlIHx8IF9vcHRpb25zLmxvb3ApIHtcblx0XHRcdFx0X2luZGV4RGlmZiArPSBpdGVtc0RpZmY7XG5cdFx0XHRcdF9jdXJyUG9zaXRpb25JbmRleCAtPSBpdGVtc0RpZmY7XG5cdFx0XHRcdGl0ZW1DaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdFxuXG5cdFx0XHRcblx0XHR9XG5cblx0XHR2YXIgYW5pbWF0ZVRvWCA9IF9zbGlkZVNpemUueCAqIF9jdXJyUG9zaXRpb25JbmRleDtcblx0XHR2YXIgYW5pbWF0ZVRvRGlzdCA9IE1hdGguYWJzKCBhbmltYXRlVG9YIC0gX21haW5TY3JvbGxQb3MueCApO1xuXHRcdHZhciBmaW5pc2hBbmltRHVyYXRpb247XG5cblxuXHRcdGlmKCFpdGVtQ2hhbmdlZCAmJiBhbmltYXRlVG9YID4gX21haW5TY3JvbGxQb3MueCAhPT0gX3JlbGVhc2VBbmltRGF0YS5sYXN0RmxpY2tTcGVlZC54ID4gMCkge1xuXHRcdFx0Ly8gXCJyZXR1cm4gdG8gY3VycmVudFwiIGR1cmF0aW9uLCBlLmcuIHdoZW4gZHJhZ2dpbmcgZnJvbSBzbGlkZSAwIHRvIC0xXG5cdFx0XHRmaW5pc2hBbmltRHVyYXRpb24gPSAzMzM7IFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmaW5pc2hBbmltRHVyYXRpb24gPSBNYXRoLmFicyhfcmVsZWFzZUFuaW1EYXRhLmxhc3RGbGlja1NwZWVkLngpID4gMCA/IFxuXHRcdFx0XHRcdFx0XHRcdFx0YW5pbWF0ZVRvRGlzdCAvIE1hdGguYWJzKF9yZWxlYXNlQW5pbURhdGEubGFzdEZsaWNrU3BlZWQueCkgOiBcblx0XHRcdFx0XHRcdFx0XHRcdDMzMztcblxuXHRcdFx0ZmluaXNoQW5pbUR1cmF0aW9uID0gTWF0aC5taW4oZmluaXNoQW5pbUR1cmF0aW9uLCA0MDApO1xuXHRcdFx0ZmluaXNoQW5pbUR1cmF0aW9uID0gTWF0aC5tYXgoZmluaXNoQW5pbUR1cmF0aW9uLCAyNTApO1xuXHRcdH1cblxuXHRcdGlmKF9jdXJyWm9vbWVkSXRlbUluZGV4ID09PSBfY3VycmVudEl0ZW1JbmRleCkge1xuXHRcdFx0aXRlbUNoYW5nZWQgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cdFx0X21haW5TY3JvbGxBbmltYXRpbmcgPSB0cnVlO1xuXHRcdFxuXHRcdF9zaG91dCgnbWFpblNjcm9sbEFuaW1TdGFydCcpO1xuXG5cdFx0X2FuaW1hdGVQcm9wKCdtYWluU2Nyb2xsJywgX21haW5TY3JvbGxQb3MueCwgYW5pbWF0ZVRvWCwgZmluaXNoQW5pbUR1cmF0aW9uLCBmcmFtZXdvcmsuZWFzaW5nLmN1YmljLm91dCwgXG5cdFx0XHRfbW92ZU1haW5TY3JvbGwsXG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0X3N0b3BBbGxBbmltYXRpb25zKCk7XG5cdFx0XHRcdF9tYWluU2Nyb2xsQW5pbWF0aW5nID0gZmFsc2U7XG5cdFx0XHRcdF9jdXJyWm9vbWVkSXRlbUluZGV4ID0gLTE7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZihpdGVtQ2hhbmdlZCB8fCBfY3Vyclpvb21lZEl0ZW1JbmRleCAhPT0gX2N1cnJlbnRJdGVtSW5kZXgpIHtcblx0XHRcdFx0XHRzZWxmLnVwZGF0ZUN1cnJJdGVtKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdF9zaG91dCgnbWFpblNjcm9sbEFuaW1Db21wbGV0ZScpO1xuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRpZihpdGVtQ2hhbmdlZCkge1xuXHRcdFx0c2VsZi51cGRhdGVDdXJySXRlbSh0cnVlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaXRlbUNoYW5nZWQ7XG5cdH0sXG5cblx0X2NhbGN1bGF0ZVpvb21MZXZlbCA9IGZ1bmN0aW9uKHRvdWNoZXNEaXN0YW5jZSkge1xuXHRcdHJldHVybiAgMSAvIF9zdGFydFBvaW50c0Rpc3RhbmNlICogdG91Y2hlc0Rpc3RhbmNlICogX3N0YXJ0Wm9vbUxldmVsO1xuXHR9LFxuXG5cdC8vIFJlc2V0cyB6b29tIGlmIGl0J3Mgb3V0IG9mIGJvdW5kc1xuXHRfY29tcGxldGVab29tR2VzdHVyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkZXN0Wm9vbUxldmVsID0gX2N1cnJab29tTGV2ZWwsXG5cdFx0XHRtaW5ab29tTGV2ZWwgPSBfZ2V0TWluWm9vbUxldmVsKCksXG5cdFx0XHRtYXhab29tTGV2ZWwgPSBfZ2V0TWF4Wm9vbUxldmVsKCk7XG5cblx0XHRpZiAoIF9jdXJyWm9vbUxldmVsIDwgbWluWm9vbUxldmVsICkge1xuXHRcdFx0ZGVzdFpvb21MZXZlbCA9IG1pblpvb21MZXZlbDtcblx0XHR9IGVsc2UgaWYgKCBfY3Vyclpvb21MZXZlbCA+IG1heFpvb21MZXZlbCApIHtcblx0XHRcdGRlc3Rab29tTGV2ZWwgPSBtYXhab29tTGV2ZWw7XG5cdFx0fVxuXG5cdFx0dmFyIGRlc3RPcGFjaXR5ID0gMSxcblx0XHRcdG9uVXBkYXRlLFxuXHRcdFx0aW5pdGlhbE9wYWNpdHkgPSBfYmdPcGFjaXR5O1xuXG5cdFx0aWYoX29wYWNpdHlDaGFuZ2VkICYmICFfaXNab29taW5nSW4gJiYgIV93YXNPdmVySW5pdGlhbFpvb20gJiYgX2N1cnJab29tTGV2ZWwgPCBtaW5ab29tTGV2ZWwpIHtcblx0XHRcdC8vX2Nsb3NlZEJ5U2Nyb2xsID0gdHJ1ZTtcblx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmKF9vcGFjaXR5Q2hhbmdlZCkge1xuXHRcdFx0b25VcGRhdGUgPSBmdW5jdGlvbihub3cpIHtcblx0XHRcdFx0X2FwcGx5QmdPcGFjaXR5KCAgKGRlc3RPcGFjaXR5IC0gaW5pdGlhbE9wYWNpdHkpICogbm93ICsgaW5pdGlhbE9wYWNpdHkgKTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0c2VsZi56b29tVG8oZGVzdFpvb21MZXZlbCwgMCwgMjAwLCAgZnJhbWV3b3JrLmVhc2luZy5jdWJpYy5vdXQsIG9uVXBkYXRlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXG5fcmVnaXN0ZXJNb2R1bGUoJ0dlc3R1cmVzJywge1xuXHRwdWJsaWNNZXRob2RzOiB7XG5cblx0XHRpbml0R2VzdHVyZXM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBoZWxwZXIgZnVuY3Rpb24gdGhhdCBidWlsZHMgdG91Y2gvcG9pbnRlci9tb3VzZSBldmVudHNcblx0XHRcdHZhciBhZGRFdmVudE5hbWVzID0gZnVuY3Rpb24ocHJlZiwgZG93biwgbW92ZSwgdXAsIGNhbmNlbCkge1xuXHRcdFx0XHRfZHJhZ1N0YXJ0RXZlbnQgPSBwcmVmICsgZG93bjtcblx0XHRcdFx0X2RyYWdNb3ZlRXZlbnQgPSBwcmVmICsgbW92ZTtcblx0XHRcdFx0X2RyYWdFbmRFdmVudCA9IHByZWYgKyB1cDtcblx0XHRcdFx0aWYoY2FuY2VsKSB7XG5cdFx0XHRcdFx0X2RyYWdDYW5jZWxFdmVudCA9IHByZWYgKyBjYW5jZWw7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X2RyYWdDYW5jZWxFdmVudCA9ICcnO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRfcG9pbnRlckV2ZW50RW5hYmxlZCA9IF9mZWF0dXJlcy5wb2ludGVyRXZlbnQ7XG5cdFx0XHRpZihfcG9pbnRlckV2ZW50RW5hYmxlZCAmJiBfZmVhdHVyZXMudG91Y2gpIHtcblx0XHRcdFx0Ly8gd2UgZG9uJ3QgbmVlZCB0b3VjaCBldmVudHMsIGlmIGJyb3dzZXIgc3VwcG9ydHMgcG9pbnRlciBldmVudHNcblx0XHRcdFx0X2ZlYXR1cmVzLnRvdWNoID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmKF9wb2ludGVyRXZlbnRFbmFibGVkKSB7XG5cdFx0XHRcdGlmKG5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCkge1xuXHRcdFx0XHRcdGFkZEV2ZW50TmFtZXMoJ3BvaW50ZXInLCAnZG93bicsICdtb3ZlJywgJ3VwJywgJ2NhbmNlbCcpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIElFMTAgcG9pbnRlciBldmVudHMgYXJlIGNhc2Utc2Vuc2l0aXZlXG5cdFx0XHRcdFx0YWRkRXZlbnROYW1lcygnTVNQb2ludGVyJywgJ0Rvd24nLCAnTW92ZScsICdVcCcsICdDYW5jZWwnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmKF9mZWF0dXJlcy50b3VjaCkge1xuXHRcdFx0XHRhZGRFdmVudE5hbWVzKCd0b3VjaCcsICdzdGFydCcsICdtb3ZlJywgJ2VuZCcsICdjYW5jZWwnKTtcblx0XHRcdFx0X2xpa2VseVRvdWNoRGV2aWNlID0gdHJ1ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGFkZEV2ZW50TmFtZXMoJ21vdXNlJywgJ2Rvd24nLCAnbW92ZScsICd1cCcpO1x0XG5cdFx0XHR9XG5cblx0XHRcdF91cE1vdmVFdmVudHMgPSBfZHJhZ01vdmVFdmVudCArICcgJyArIF9kcmFnRW5kRXZlbnQgICsgJyAnICsgIF9kcmFnQ2FuY2VsRXZlbnQ7XG5cdFx0XHRfZG93bkV2ZW50cyA9IF9kcmFnU3RhcnRFdmVudDtcblxuXHRcdFx0aWYoX3BvaW50ZXJFdmVudEVuYWJsZWQgJiYgIV9saWtlbHlUb3VjaERldmljZSkge1xuXHRcdFx0XHRfbGlrZWx5VG91Y2hEZXZpY2UgPSAobmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMSkgfHwgKG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMSk7XG5cdFx0XHR9XG5cdFx0XHQvLyBtYWtlIHZhcmlhYmxlIHB1YmxpY1xuXHRcdFx0c2VsZi5saWtlbHlUb3VjaERldmljZSA9IF9saWtlbHlUb3VjaERldmljZTsgXG5cdFx0XHRcblx0XHRcdF9nbG9iYWxFdmVudEhhbmRsZXJzW19kcmFnU3RhcnRFdmVudF0gPSBfb25EcmFnU3RhcnQ7XG5cdFx0XHRfZ2xvYmFsRXZlbnRIYW5kbGVyc1tfZHJhZ01vdmVFdmVudF0gPSBfb25EcmFnTW92ZTtcblx0XHRcdF9nbG9iYWxFdmVudEhhbmRsZXJzW19kcmFnRW5kRXZlbnRdID0gX29uRHJhZ1JlbGVhc2U7IC8vIHRoZSBLcmFrZW5cblxuXHRcdFx0aWYoX2RyYWdDYW5jZWxFdmVudCkge1xuXHRcdFx0XHRfZ2xvYmFsRXZlbnRIYW5kbGVyc1tfZHJhZ0NhbmNlbEV2ZW50XSA9IF9nbG9iYWxFdmVudEhhbmRsZXJzW19kcmFnRW5kRXZlbnRdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCaW5kIG1vdXNlIGV2ZW50cyBvbiBkZXZpY2Ugd2l0aCBkZXRlY3RlZCBoYXJkd2FyZSB0b3VjaCBzdXBwb3J0LCBpbiBjYXNlIGl0IHN1cHBvcnRzIG11bHRpcGxlIHR5cGVzIG9mIGlucHV0LlxuXHRcdFx0aWYoX2ZlYXR1cmVzLnRvdWNoKSB7XG5cdFx0XHRcdF9kb3duRXZlbnRzICs9ICcgbW91c2Vkb3duJztcblx0XHRcdFx0X3VwTW92ZUV2ZW50cyArPSAnIG1vdXNlbW92ZSBtb3VzZXVwJztcblx0XHRcdFx0X2dsb2JhbEV2ZW50SGFuZGxlcnMubW91c2Vkb3duID0gX2dsb2JhbEV2ZW50SGFuZGxlcnNbX2RyYWdTdGFydEV2ZW50XTtcblx0XHRcdFx0X2dsb2JhbEV2ZW50SGFuZGxlcnMubW91c2Vtb3ZlID0gX2dsb2JhbEV2ZW50SGFuZGxlcnNbX2RyYWdNb3ZlRXZlbnRdO1xuXHRcdFx0XHRfZ2xvYmFsRXZlbnRIYW5kbGVycy5tb3VzZXVwID0gX2dsb2JhbEV2ZW50SGFuZGxlcnNbX2RyYWdFbmRFdmVudF07XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFfbGlrZWx5VG91Y2hEZXZpY2UpIHtcblx0XHRcdFx0Ly8gZG9uJ3QgYWxsb3cgcGFuIHRvIG5leHQgc2xpZGUgZnJvbSB6b29tZWQgc3RhdGUgb24gRGVza3RvcFxuXHRcdFx0XHRfb3B0aW9ucy5hbGxvd1BhblRvTmV4dCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHR9XG59KTtcblxuXG4vKj4+Z2VzdHVyZXMqL1xuXG4vKj4+c2hvdy1oaWRlLXRyYW5zaXRpb24qL1xuLyoqXG4gKiBzaG93LWhpZGUtdHJhbnNpdGlvbi5qczpcbiAqXG4gKiBNYW5hZ2VzIGluaXRpYWwgb3BlbmluZyBvciBjbG9zaW5nIHRyYW5zaXRpb24uXG4gKlxuICogSWYgeW91J3JlIG5vdCBwbGFubmluZyB0byB1c2UgdHJhbnNpdGlvbiBmb3IgZ2FsbGVyeSBhdCBhbGwsXG4gKiB5b3UgbWF5IHNldCBvcHRpb25zIGhpZGVBbmltYXRpb25EdXJhdGlvbiBhbmQgc2hvd0FuaW1hdGlvbkR1cmF0aW9uIHRvIDAsXG4gKiBhbmQganVzdCBkZWxldGUgc3RhcnRBbmltYXRpb24gZnVuY3Rpb24uXG4gKiBcbiAqL1xuXG5cbnZhciBfc2hvd09ySGlkZVRpbWVvdXQsXG5cdF9zaG93T3JIaWRlID0gZnVuY3Rpb24oaXRlbSwgaW1nLCBvdXQsIGNvbXBsZXRlRm4pIHtcblxuXHRcdGlmKF9zaG93T3JIaWRlVGltZW91dCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KF9zaG93T3JIaWRlVGltZW91dCk7XG5cdFx0fVxuXG5cdFx0X2luaXRpYWxab29tUnVubmluZyA9IHRydWU7XG5cdFx0X2luaXRpYWxDb250ZW50U2V0ID0gdHJ1ZTtcblx0XHRcblx0XHQvLyBkaW1lbnNpb25zIG9mIHNtYWxsIHRodW1ibmFpbCB7eDoseTosdzp9LlxuXHRcdC8vIEhlaWdodCBpcyBvcHRpb25hbCwgYXMgY2FsY3VsYXRlZCBiYXNlZCBvbiBsYXJnZSBpbWFnZS5cblx0XHR2YXIgdGh1bWJCb3VuZHM7IFxuXHRcdGlmKGl0ZW0uaW5pdGlhbExheW91dCkge1xuXHRcdFx0dGh1bWJCb3VuZHMgPSBpdGVtLmluaXRpYWxMYXlvdXQ7XG5cdFx0XHRpdGVtLmluaXRpYWxMYXlvdXQgPSBudWxsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHVtYkJvdW5kcyA9IF9vcHRpb25zLmdldFRodW1iQm91bmRzRm4gJiYgX29wdGlvbnMuZ2V0VGh1bWJCb3VuZHNGbihfY3VycmVudEl0ZW1JbmRleCk7XG5cdFx0fVxuXG5cdFx0dmFyIGR1cmF0aW9uID0gb3V0ID8gX29wdGlvbnMuaGlkZUFuaW1hdGlvbkR1cmF0aW9uIDogX29wdGlvbnMuc2hvd0FuaW1hdGlvbkR1cmF0aW9uO1xuXG5cdFx0dmFyIG9uQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdF9zdG9wQW5pbWF0aW9uKCdpbml0aWFsWm9vbScpO1xuXHRcdFx0aWYoIW91dCkge1xuXHRcdFx0XHRfYXBwbHlCZ09wYWNpdHkoMSk7XG5cdFx0XHRcdGlmKGltZykge1xuXHRcdFx0XHRcdGltZy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0XHRcdFx0fVxuXHRcdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3ModGVtcGxhdGUsICdwc3dwLS1hbmltYXRlZC1pbicpO1xuXHRcdFx0XHRfc2hvdXQoJ2luaXRpYWxab29tJyArIChvdXQgPyAnT3V0RW5kJyA6ICdJbkVuZCcpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYudGVtcGxhdGUucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuXHRcdFx0XHRzZWxmLmJnLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoY29tcGxldGVGbikge1xuXHRcdFx0XHRjb21wbGV0ZUZuKCk7XG5cdFx0XHR9XG5cdFx0XHRfaW5pdGlhbFpvb21SdW5uaW5nID0gZmFsc2U7XG5cdFx0fTtcblxuXHRcdC8vIGlmIGJvdW5kcyBhcmVuJ3QgcHJvdmlkZWQsIGp1c3Qgb3BlbiBnYWxsZXJ5IHdpdGhvdXQgYW5pbWF0aW9uXG5cdFx0aWYoIWR1cmF0aW9uIHx8ICF0aHVtYkJvdW5kcyB8fCB0aHVtYkJvdW5kcy54ID09PSB1bmRlZmluZWQpIHtcblxuXHRcdFx0X3Nob3V0KCdpbml0aWFsWm9vbScgKyAob3V0ID8gJ091dCcgOiAnSW4nKSApO1xuXG5cdFx0XHRfY3Vyclpvb21MZXZlbCA9IGl0ZW0uaW5pdGlhbFpvb21MZXZlbDtcblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhfcGFuT2Zmc2V0LCAgaXRlbS5pbml0aWFsUG9zaXRpb24gKTtcblx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cblx0XHRcdHRlbXBsYXRlLnN0eWxlLm9wYWNpdHkgPSBvdXQgPyAwIDogMTtcblx0XHRcdF9hcHBseUJnT3BhY2l0eSgxKTtcblxuXHRcdFx0aWYoZHVyYXRpb24pIHtcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRvbkNvbXBsZXRlKCk7XG5cdFx0XHRcdH0sIGR1cmF0aW9uKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9uQ29tcGxldGUoKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBzdGFydEFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsb3NlV2l0aFJhZiA9IF9jbG9zZWRCeVNjcm9sbCxcblx0XHRcdFx0ZmFkZUV2ZXJ5dGhpbmcgPSAhc2VsZi5jdXJySXRlbS5zcmMgfHwgc2VsZi5jdXJySXRlbS5sb2FkRXJyb3IgfHwgX29wdGlvbnMuc2hvd0hpZGVPcGFjaXR5O1xuXHRcdFx0XG5cdFx0XHQvLyBhcHBseSBody1hY2NlbGVyYXRpb24gdG8gaW1hZ2Vcblx0XHRcdGlmKGl0ZW0ubWluaUltZykge1xuXHRcdFx0XHRpdGVtLm1pbmlJbWcuc3R5bGUud2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5ID0gJ2hpZGRlbic7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFvdXQpIHtcblx0XHRcdFx0X2N1cnJab29tTGV2ZWwgPSB0aHVtYkJvdW5kcy53IC8gaXRlbS53O1xuXHRcdFx0XHRfcGFuT2Zmc2V0LnggPSB0aHVtYkJvdW5kcy54O1xuXHRcdFx0XHRfcGFuT2Zmc2V0LnkgPSB0aHVtYkJvdW5kcy55IC0gX2luaXRhbFdpbmRvd1Njcm9sbFk7XG5cblx0XHRcdFx0c2VsZltmYWRlRXZlcnl0aGluZyA/ICd0ZW1wbGF0ZScgOiAnYmcnXS5zdHlsZS5vcGFjaXR5ID0gMC4wMDE7XG5cdFx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cdFx0XHR9XG5cblx0XHRcdF9yZWdpc3RlclN0YXJ0QW5pbWF0aW9uKCdpbml0aWFsWm9vbScpO1xuXHRcdFx0XG5cdFx0XHRpZihvdXQgJiYgIWNsb3NlV2l0aFJhZikge1xuXHRcdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3ModGVtcGxhdGUsICdwc3dwLS1hbmltYXRlZC1pbicpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihmYWRlRXZlcnl0aGluZykge1xuXHRcdFx0XHRpZihvdXQpIHtcblx0XHRcdFx0XHRmcmFtZXdvcmtbIChjbG9zZVdpdGhSYWYgPyAncmVtb3ZlJyA6ICdhZGQnKSArICdDbGFzcycgXSh0ZW1wbGF0ZSwgJ3Bzd3AtLWFuaW1hdGVfb3BhY2l0eScpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3ModGVtcGxhdGUsICdwc3dwLS1hbmltYXRlX29wYWNpdHknKTtcblx0XHRcdFx0XHR9LCAzMCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0X3Nob3dPckhpZGVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRfc2hvdXQoJ2luaXRpYWxab29tJyArIChvdXQgPyAnT3V0JyA6ICdJbicpICk7XG5cdFx0XHRcdFxuXG5cdFx0XHRcdGlmKCFvdXQpIHtcblxuXHRcdFx0XHRcdC8vIFwiaW5cIiBhbmltYXRpb24gYWx3YXlzIHVzZXMgQ1NTIHRyYW5zaXRpb25zIChpbnN0ZWFkIG9mIHJBRikuXG5cdFx0XHRcdFx0Ly8gQ1NTIHRyYW5zaXRpb24gd29yayBmYXN0ZXIgaGVyZSwgXG5cdFx0XHRcdFx0Ly8gYXMgZGV2ZWxvcGVyIG1heSBhbHNvIHdhbnQgdG8gYW5pbWF0ZSBvdGhlciB0aGluZ3MsIFxuXHRcdFx0XHRcdC8vIGxpa2UgdWkgb24gdG9wIG9mIHNsaWRpbmcgYXJlYSwgd2hpY2ggY2FuIGJlIGFuaW1hdGVkIGp1c3QgdmlhIENTU1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdF9jdXJyWm9vbUxldmVsID0gaXRlbS5pbml0aWFsWm9vbUxldmVsO1xuXHRcdFx0XHRcdF9lcXVhbGl6ZVBvaW50cyhfcGFuT2Zmc2V0LCAgaXRlbS5pbml0aWFsUG9zaXRpb24gKTtcblx0XHRcdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXHRcdFx0XHRcdF9hcHBseUJnT3BhY2l0eSgxKTtcblxuXHRcdFx0XHRcdGlmKGZhZGVFdmVyeXRoaW5nKSB7XG5cdFx0XHRcdFx0XHR0ZW1wbGF0ZS5zdHlsZS5vcGFjaXR5ID0gMTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0X2FwcGx5QmdPcGFjaXR5KDEpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdF9zaG93T3JIaWRlVGltZW91dCA9IHNldFRpbWVvdXQob25Db21wbGV0ZSwgZHVyYXRpb24gKyAyMCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBcIm91dFwiIGFuaW1hdGlvbiB1c2VzIHJBRiBvbmx5IHdoZW4gUGhvdG9Td2lwZSBpcyBjbG9zZWQgYnkgYnJvd3NlciBzY3JvbGwsIHRvIHJlY2FsY3VsYXRlIHBvc2l0aW9uXG5cdFx0XHRcdFx0dmFyIGRlc3Rab29tTGV2ZWwgPSB0aHVtYkJvdW5kcy53IC8gaXRlbS53LFxuXHRcdFx0XHRcdFx0aW5pdGlhbFBhbk9mZnNldCA9IHtcblx0XHRcdFx0XHRcdFx0eDogX3Bhbk9mZnNldC54LFxuXHRcdFx0XHRcdFx0XHR5OiBfcGFuT2Zmc2V0Lnlcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRpbml0aWFsWm9vbUxldmVsID0gX2N1cnJab29tTGV2ZWwsXG5cdFx0XHRcdFx0XHRpbml0YWxCZ09wYWNpdHkgPSBfYmdPcGFjaXR5LFxuXHRcdFx0XHRcdFx0b25VcGRhdGUgPSBmdW5jdGlvbihub3cpIHtcblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdGlmKG5vdyA9PT0gMSkge1xuXHRcdFx0XHRcdFx0XHRcdF9jdXJyWm9vbUxldmVsID0gZGVzdFpvb21MZXZlbDtcblx0XHRcdFx0XHRcdFx0XHRfcGFuT2Zmc2V0LnggPSB0aHVtYkJvdW5kcy54O1xuXHRcdFx0XHRcdFx0XHRcdF9wYW5PZmZzZXQueSA9IHRodW1iQm91bmRzLnkgIC0gX2N1cnJlbnRXaW5kb3dTY3JvbGxZO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdF9jdXJyWm9vbUxldmVsID0gKGRlc3Rab29tTGV2ZWwgLSBpbml0aWFsWm9vbUxldmVsKSAqIG5vdyArIGluaXRpYWxab29tTGV2ZWw7XG5cdFx0XHRcdFx0XHRcdFx0X3Bhbk9mZnNldC54ID0gKHRodW1iQm91bmRzLnggLSBpbml0aWFsUGFuT2Zmc2V0LngpICogbm93ICsgaW5pdGlhbFBhbk9mZnNldC54O1xuXHRcdFx0XHRcdFx0XHRcdF9wYW5PZmZzZXQueSA9ICh0aHVtYkJvdW5kcy55IC0gX2N1cnJlbnRXaW5kb3dTY3JvbGxZIC0gaW5pdGlhbFBhbk9mZnNldC55KSAqIG5vdyArIGluaXRpYWxQYW5PZmZzZXQueTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblx0XHRcdFx0XHRcdFx0aWYoZmFkZUV2ZXJ5dGhpbmcpIHtcblx0XHRcdFx0XHRcdFx0XHR0ZW1wbGF0ZS5zdHlsZS5vcGFjaXR5ID0gMSAtIG5vdztcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRfYXBwbHlCZ09wYWNpdHkoIGluaXRhbEJnT3BhY2l0eSAtIG5vdyAqIGluaXRhbEJnT3BhY2l0eSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0aWYoY2xvc2VXaXRoUmFmKSB7XG5cdFx0XHRcdFx0XHRfYW5pbWF0ZVByb3AoJ2luaXRpYWxab29tJywgMCwgMSwgZHVyYXRpb24sIGZyYW1ld29yay5lYXNpbmcuY3ViaWMub3V0LCBvblVwZGF0ZSwgb25Db21wbGV0ZSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG9uVXBkYXRlKDEpO1xuXHRcdFx0XHRcdFx0X3Nob3dPckhpZGVUaW1lb3V0ID0gc2V0VGltZW91dChvbkNvbXBsZXRlLCBkdXJhdGlvbiArIDIwKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFxuXHRcdFx0fSwgb3V0ID8gMjUgOiA5MCk7IC8vIE1haW4gcHVycG9zZSBvZiB0aGlzIGRlbGF5IGlzIHRvIGdpdmUgYnJvd3NlciB0aW1lIHRvIHBhaW50IGFuZFxuXHRcdFx0XHRcdC8vIGNyZWF0ZSBjb21wb3NpdGUgbGF5ZXJzIG9mIFBob3RvU3dpcGUgVUkgcGFydHMgKGJhY2tncm91bmQsIGNvbnRyb2xzLCBjYXB0aW9uLCBhcnJvd3MpLlxuXHRcdFx0XHRcdC8vIFdoaWNoIGF2b2lkcyBsYWcgYXQgdGhlIGJlZ2lubmluZyBvZiBzY2FsZSB0cmFuc2l0aW9uLlxuXHRcdH07XG5cdFx0c3RhcnRBbmltYXRpb24oKTtcblxuXHRcdFxuXHR9O1xuXG4vKj4+c2hvdy1oaWRlLXRyYW5zaXRpb24qL1xuXG4vKj4+aXRlbXMtY29udHJvbGxlciovXG4vKipcbipcbiogQ29udHJvbGxlciBtYW5hZ2VzIGdhbGxlcnkgaXRlbXMsIHRoZWlyIGRpbWVuc2lvbnMsIGFuZCB0aGVpciBjb250ZW50LlxuKiBcbiovXG5cbnZhciBfaXRlbXMsXG5cdF90ZW1wUGFuQXJlYVNpemUgPSB7fSxcblx0X2ltYWdlc1RvQXBwZW5kUG9vbCA9IFtdLFxuXHRfaW5pdGlhbENvbnRlbnRTZXQsXG5cdF9pbml0aWFsWm9vbVJ1bm5pbmcsXG5cdF9jb250cm9sbGVyRGVmYXVsdE9wdGlvbnMgPSB7XG5cdFx0aW5kZXg6IDAsXG5cdFx0ZXJyb3JNc2c6ICc8ZGl2IGNsYXNzPVwicHN3cF9fZXJyb3ItbXNnXCI+PGEgaHJlZj1cIiV1cmwlXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VGhlIGltYWdlPC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLjwvZGl2PicsXG5cdFx0Zm9yY2VQcm9ncmVzc2l2ZUxvYWRpbmc6IGZhbHNlLCAvLyBUT0RPXG5cdFx0cHJlbG9hZDogWzEsMV0sXG5cdFx0Z2V0TnVtSXRlbXNGbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gX2l0ZW1zLmxlbmd0aDtcblx0XHR9XG5cdH07XG5cblxudmFyIF9nZXRJdGVtQXQsXG5cdF9nZXROdW1JdGVtcyxcblx0X2luaXRpYWxJc0xvb3AsXG5cdF9nZXRaZXJvQm91bmRzID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNlbnRlcjp7eDowLHk6MH0sIFxuXHRcdFx0bWF4Ont4OjAseTowfSwgXG5cdFx0XHRtaW46e3g6MCx5OjB9XG5cdFx0fTtcblx0fSxcblx0X2NhbGN1bGF0ZVNpbmdsZUl0ZW1QYW5Cb3VuZHMgPSBmdW5jdGlvbihpdGVtLCByZWFsUGFuRWxlbWVudFcsIHJlYWxQYW5FbGVtZW50SCApIHtcblx0XHR2YXIgYm91bmRzID0gaXRlbS5ib3VuZHM7XG5cblx0XHQvLyBwb3NpdGlvbiBvZiBlbGVtZW50IHdoZW4gaXQncyBjZW50ZXJlZFxuXHRcdGJvdW5kcy5jZW50ZXIueCA9IE1hdGgucm91bmQoKF90ZW1wUGFuQXJlYVNpemUueCAtIHJlYWxQYW5FbGVtZW50VykgLyAyKTtcblx0XHRib3VuZHMuY2VudGVyLnkgPSBNYXRoLnJvdW5kKChfdGVtcFBhbkFyZWFTaXplLnkgLSByZWFsUGFuRWxlbWVudEgpIC8gMikgKyBpdGVtLnZHYXAudG9wO1xuXG5cdFx0Ly8gbWF4aW11bSBwYW4gcG9zaXRpb25cblx0XHRib3VuZHMubWF4LnggPSAocmVhbFBhbkVsZW1lbnRXID4gX3RlbXBQYW5BcmVhU2l6ZS54KSA/IFxuXHRcdFx0XHRcdFx0XHRNYXRoLnJvdW5kKF90ZW1wUGFuQXJlYVNpemUueCAtIHJlYWxQYW5FbGVtZW50VykgOiBcblx0XHRcdFx0XHRcdFx0Ym91bmRzLmNlbnRlci54O1xuXHRcdFxuXHRcdGJvdW5kcy5tYXgueSA9IChyZWFsUGFuRWxlbWVudEggPiBfdGVtcFBhbkFyZWFTaXplLnkpID8gXG5cdFx0XHRcdFx0XHRcdE1hdGgucm91bmQoX3RlbXBQYW5BcmVhU2l6ZS55IC0gcmVhbFBhbkVsZW1lbnRIKSArIGl0ZW0udkdhcC50b3AgOiBcblx0XHRcdFx0XHRcdFx0Ym91bmRzLmNlbnRlci55O1xuXHRcdFxuXHRcdC8vIG1pbmltdW0gcGFuIHBvc2l0aW9uXG5cdFx0Ym91bmRzLm1pbi54ID0gKHJlYWxQYW5FbGVtZW50VyA+IF90ZW1wUGFuQXJlYVNpemUueCkgPyAwIDogYm91bmRzLmNlbnRlci54O1xuXHRcdGJvdW5kcy5taW4ueSA9IChyZWFsUGFuRWxlbWVudEggPiBfdGVtcFBhbkFyZWFTaXplLnkpID8gaXRlbS52R2FwLnRvcCA6IGJvdW5kcy5jZW50ZXIueTtcblx0fSxcblx0X2NhbGN1bGF0ZUl0ZW1TaXplID0gZnVuY3Rpb24oaXRlbSwgdmlld3BvcnRTaXplLCB6b29tTGV2ZWwpIHtcblxuXHRcdGlmIChpdGVtLnNyYyAmJiAhaXRlbS5sb2FkRXJyb3IpIHtcblx0XHRcdHZhciBpc0luaXRpYWwgPSAhem9vbUxldmVsO1xuXHRcdFx0XG5cdFx0XHRpZihpc0luaXRpYWwpIHtcblx0XHRcdFx0aWYoIWl0ZW0udkdhcCkge1xuXHRcdFx0XHRcdGl0ZW0udkdhcCA9IHt0b3A6MCxib3R0b206MH07XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gYWxsb3dzIG92ZXJyaWRpbmcgdmVydGljYWwgbWFyZ2luIGZvciBpbmRpdmlkdWFsIGl0ZW1zXG5cdFx0XHRcdF9zaG91dCgncGFyc2VWZXJ0aWNhbE1hcmdpbicsIGl0ZW0pO1xuXHRcdFx0fVxuXG5cblx0XHRcdF90ZW1wUGFuQXJlYVNpemUueCA9IHZpZXdwb3J0U2l6ZS54O1xuXHRcdFx0X3RlbXBQYW5BcmVhU2l6ZS55ID0gdmlld3BvcnRTaXplLnkgLSBpdGVtLnZHYXAudG9wIC0gaXRlbS52R2FwLmJvdHRvbTtcblxuXHRcdFx0aWYgKGlzSW5pdGlhbCkge1xuXHRcdFx0XHR2YXIgaFJhdGlvID0gX3RlbXBQYW5BcmVhU2l6ZS54IC8gaXRlbS53O1xuXHRcdFx0XHR2YXIgdlJhdGlvID0gX3RlbXBQYW5BcmVhU2l6ZS55IC8gaXRlbS5oO1xuXG5cdFx0XHRcdGl0ZW0uZml0UmF0aW8gPSBoUmF0aW8gPCB2UmF0aW8gPyBoUmF0aW8gOiB2UmF0aW87XG5cdFx0XHRcdC8vaXRlbS5maWxsUmF0aW8gPSBoUmF0aW8gPiB2UmF0aW8gPyBoUmF0aW8gOiB2UmF0aW87XG5cblx0XHRcdFx0dmFyIHNjYWxlTW9kZSA9IF9vcHRpb25zLnNjYWxlTW9kZTtcblxuXHRcdFx0XHRpZiAoc2NhbGVNb2RlID09PSAnb3JpZycpIHtcblx0XHRcdFx0XHR6b29tTGV2ZWwgPSAxO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHNjYWxlTW9kZSA9PT0gJ2ZpdCcpIHtcblx0XHRcdFx0XHR6b29tTGV2ZWwgPSBpdGVtLmZpdFJhdGlvO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHpvb21MZXZlbCA+IDEpIHtcblx0XHRcdFx0XHR6b29tTGV2ZWwgPSAxO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aXRlbS5pbml0aWFsWm9vbUxldmVsID0gem9vbUxldmVsO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoIWl0ZW0uYm91bmRzKSB7XG5cdFx0XHRcdFx0Ly8gcmV1c2UgYm91bmRzIG9iamVjdFxuXHRcdFx0XHRcdGl0ZW0uYm91bmRzID0gX2dldFplcm9Cb3VuZHMoKTsgXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYoIXpvb21MZXZlbCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdF9jYWxjdWxhdGVTaW5nbGVJdGVtUGFuQm91bmRzKGl0ZW0sIGl0ZW0udyAqIHpvb21MZXZlbCwgaXRlbS5oICogem9vbUxldmVsKTtcblxuXHRcdFx0aWYgKGlzSW5pdGlhbCAmJiB6b29tTGV2ZWwgPT09IGl0ZW0uaW5pdGlhbFpvb21MZXZlbCkge1xuXHRcdFx0XHRpdGVtLmluaXRpYWxQb3NpdGlvbiA9IGl0ZW0uYm91bmRzLmNlbnRlcjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGl0ZW0uYm91bmRzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpdGVtLncgPSBpdGVtLmggPSAwO1xuXHRcdFx0aXRlbS5pbml0aWFsWm9vbUxldmVsID0gaXRlbS5maXRSYXRpbyA9IDE7XG5cdFx0XHRpdGVtLmJvdW5kcyA9IF9nZXRaZXJvQm91bmRzKCk7XG5cdFx0XHRpdGVtLmluaXRpYWxQb3NpdGlvbiA9IGl0ZW0uYm91bmRzLmNlbnRlcjtcblxuXHRcdFx0Ly8gaWYgaXQncyBub3QgaW1hZ2UsIHdlIHJldHVybiB6ZXJvIGJvdW5kcyAoY29udGVudCBpcyBub3Qgem9vbWFibGUpXG5cdFx0XHRyZXR1cm4gaXRlbS5ib3VuZHM7XG5cdFx0fVxuXHRcdFxuXHR9LFxuXG5cdFxuXG5cblx0X2FwcGVuZEltYWdlID0gZnVuY3Rpb24oaW5kZXgsIGl0ZW0sIGJhc2VEaXYsIGltZywgcHJldmVudEFuaW1hdGlvbiwga2VlcFBsYWNlaG9sZGVyKSB7XG5cdFx0XG5cblx0XHRpZihpdGVtLmxvYWRFcnJvcikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmKGltZykge1xuXG5cdFx0XHRpdGVtLmltYWdlQXBwZW5kZWQgPSB0cnVlO1xuXHRcdFx0X3NldEltYWdlU2l6ZShpdGVtLCBpbWcsIChpdGVtID09PSBzZWxmLmN1cnJJdGVtICYmIF9yZW5kZXJNYXhSZXNvbHV0aW9uKSApO1xuXHRcdFx0XG5cdFx0XHRiYXNlRGl2LmFwcGVuZENoaWxkKGltZyk7XG5cblx0XHRcdGlmKGtlZXBQbGFjZWhvbGRlcikge1xuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKGl0ZW0gJiYgaXRlbS5sb2FkZWQgJiYgaXRlbS5wbGFjZWhvbGRlcikge1xuXHRcdFx0XHRcdFx0aXRlbS5wbGFjZWhvbGRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0XHRcdFx0aXRlbS5wbGFjZWhvbGRlciA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCA1MDApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0XG5cblxuXHRfcHJlbG9hZEltYWdlID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdGl0ZW0ubG9hZGluZyA9IHRydWU7XG5cdFx0aXRlbS5sb2FkZWQgPSBmYWxzZTtcblx0XHR2YXIgaW1nID0gaXRlbS5pbWcgPSBmcmFtZXdvcmsuY3JlYXRlRWwoJ3Bzd3BfX2ltZycsICdpbWcnKTtcblx0XHR2YXIgb25Db21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aXRlbS5sb2FkaW5nID0gZmFsc2U7XG5cdFx0XHRpdGVtLmxvYWRlZCA9IHRydWU7XG5cblx0XHRcdGlmKGl0ZW0ubG9hZENvbXBsZXRlKSB7XG5cdFx0XHRcdGl0ZW0ubG9hZENvbXBsZXRlKGl0ZW0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXRlbS5pbWcgPSBudWxsOyAvLyBubyBuZWVkIHRvIHN0b3JlIGltYWdlIG9iamVjdFxuXHRcdFx0fVxuXHRcdFx0aW1nLm9ubG9hZCA9IGltZy5vbmVycm9yID0gbnVsbDtcblx0XHRcdGltZyA9IG51bGw7XG5cdFx0fTtcblx0XHRpbWcub25sb2FkID0gb25Db21wbGV0ZTtcblx0XHRpbWcub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0b25Db21wbGV0ZSgpO1xuXHRcdH07XHRcdFxuXG5cdFx0aW1nLnNyYyA9IGl0ZW0uc3JjOy8vICsgJz9hPScgKyBNYXRoLnJhbmRvbSgpO1xuXG5cdFx0cmV0dXJuIGltZztcblx0fSxcblx0X2NoZWNrRm9yRXJyb3IgPSBmdW5jdGlvbihpdGVtLCBjbGVhblVwKSB7XG5cdFx0aWYoaXRlbS5zcmMgJiYgaXRlbS5sb2FkRXJyb3IgJiYgaXRlbS5jb250YWluZXIpIHtcblxuXHRcdFx0aWYoY2xlYW5VcCkge1xuXHRcdFx0XHRpdGVtLmNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcblx0XHRcdH1cblxuXHRcdFx0aXRlbS5jb250YWluZXIuaW5uZXJIVE1MID0gX29wdGlvbnMuZXJyb3JNc2cucmVwbGFjZSgnJXVybCUnLCAgaXRlbS5zcmMgKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XG5cdFx0fVxuXHR9LFxuXHRfc2V0SW1hZ2VTaXplID0gZnVuY3Rpb24oaXRlbSwgaW1nLCBtYXhSZXMpIHtcblx0XHRpZighaXRlbS5zcmMpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZighaW1nKSB7XG5cdFx0XHRpbWcgPSBpdGVtLmNvbnRhaW5lci5sYXN0Q2hpbGQ7XG5cdFx0fVxuXG5cdFx0dmFyIHcgPSBtYXhSZXMgPyBpdGVtLncgOiBNYXRoLnJvdW5kKGl0ZW0udyAqIGl0ZW0uZml0UmF0aW8pLFxuXHRcdFx0aCA9IG1heFJlcyA/IGl0ZW0uaCA6IE1hdGgucm91bmQoaXRlbS5oICogaXRlbS5maXRSYXRpbyk7XG5cdFx0XG5cdFx0aWYoaXRlbS5wbGFjZWhvbGRlciAmJiAhaXRlbS5sb2FkZWQpIHtcblx0XHRcdGl0ZW0ucGxhY2Vob2xkZXIuc3R5bGUud2lkdGggPSB3ICsgJ3B4Jztcblx0XHRcdGl0ZW0ucGxhY2Vob2xkZXIuc3R5bGUuaGVpZ2h0ID0gaCArICdweCc7XG5cdFx0fVxuXG5cdFx0aW1nLnN0eWxlLndpZHRoID0gdyArICdweCc7XG5cdFx0aW1nLnN0eWxlLmhlaWdodCA9IGggKyAncHgnO1xuXHR9LFxuXHRfYXBwZW5kSW1hZ2VzUG9vbCA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYoX2ltYWdlc1RvQXBwZW5kUG9vbC5sZW5ndGgpIHtcblx0XHRcdHZhciBwb29sSXRlbTtcblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IF9pbWFnZXNUb0FwcGVuZFBvb2wubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0cG9vbEl0ZW0gPSBfaW1hZ2VzVG9BcHBlbmRQb29sW2ldO1xuXHRcdFx0XHRpZiggcG9vbEl0ZW0uaG9sZGVyLmluZGV4ID09PSBwb29sSXRlbS5pbmRleCApIHtcblx0XHRcdFx0XHRfYXBwZW5kSW1hZ2UocG9vbEl0ZW0uaW5kZXgsIHBvb2xJdGVtLml0ZW0sIHBvb2xJdGVtLmJhc2VEaXYsIHBvb2xJdGVtLmltZywgZmFsc2UsIHBvb2xJdGVtLmNsZWFyUGxhY2Vob2xkZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRfaW1hZ2VzVG9BcHBlbmRQb29sID0gW107XG5cdFx0fVxuXHR9O1xuXHRcblxuXG5fcmVnaXN0ZXJNb2R1bGUoJ0NvbnRyb2xsZXInLCB7XG5cblx0cHVibGljTWV0aG9kczoge1xuXG5cdFx0bGF6eUxvYWRJdGVtOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdFx0aW5kZXggPSBfZ2V0TG9vcGVkSWQoaW5kZXgpO1xuXHRcdFx0dmFyIGl0ZW0gPSBfZ2V0SXRlbUF0KGluZGV4KTtcblxuXHRcdFx0aWYoIWl0ZW0gfHwgKChpdGVtLmxvYWRlZCB8fCBpdGVtLmxvYWRpbmcpICYmICFfaXRlbXNOZWVkVXBkYXRlKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdF9zaG91dCgnZ2V0dGluZ0RhdGEnLCBpbmRleCwgaXRlbSk7XG5cblx0XHRcdGlmICghaXRlbS5zcmMpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRfcHJlbG9hZEltYWdlKGl0ZW0pO1xuXHRcdH0sXG5cdFx0aW5pdENvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0ZnJhbWV3b3JrLmV4dGVuZChfb3B0aW9ucywgX2NvbnRyb2xsZXJEZWZhdWx0T3B0aW9ucywgdHJ1ZSk7XG5cdFx0XHRzZWxmLml0ZW1zID0gX2l0ZW1zID0gaXRlbXM7XG5cdFx0XHRfZ2V0SXRlbUF0ID0gc2VsZi5nZXRJdGVtQXQ7XG5cdFx0XHRfZ2V0TnVtSXRlbXMgPSBfb3B0aW9ucy5nZXROdW1JdGVtc0ZuOyAvL3NlbGYuZ2V0TnVtSXRlbXM7XG5cblxuXG5cdFx0XHRfaW5pdGlhbElzTG9vcCA9IF9vcHRpb25zLmxvb3A7XG5cdFx0XHRpZihfZ2V0TnVtSXRlbXMoKSA8IDMpIHtcblx0XHRcdFx0X29wdGlvbnMubG9vcCA9IGZhbHNlOyAvLyBkaXNhYmxlIGxvb3AgaWYgbGVzcyB0aGVuIDMgaXRlbXNcblx0XHRcdH1cblxuXHRcdFx0X2xpc3RlbignYmVmb3JlQ2hhbmdlJywgZnVuY3Rpb24oZGlmZikge1xuXG5cdFx0XHRcdHZhciBwID0gX29wdGlvbnMucHJlbG9hZCxcblx0XHRcdFx0XHRpc05leHQgPSBkaWZmID09PSBudWxsID8gdHJ1ZSA6IChkaWZmID49IDApLFxuXHRcdFx0XHRcdHByZWxvYWRCZWZvcmUgPSBNYXRoLm1pbihwWzBdLCBfZ2V0TnVtSXRlbXMoKSApLFxuXHRcdFx0XHRcdHByZWxvYWRBZnRlciA9IE1hdGgubWluKHBbMV0sIF9nZXROdW1JdGVtcygpICksXG5cdFx0XHRcdFx0aTtcblxuXG5cdFx0XHRcdGZvcihpID0gMTsgaSA8PSAoaXNOZXh0ID8gcHJlbG9hZEFmdGVyIDogcHJlbG9hZEJlZm9yZSk7IGkrKykge1xuXHRcdFx0XHRcdHNlbGYubGF6eUxvYWRJdGVtKF9jdXJyZW50SXRlbUluZGV4K2kpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvcihpID0gMTsgaSA8PSAoaXNOZXh0ID8gcHJlbG9hZEJlZm9yZSA6IHByZWxvYWRBZnRlcik7IGkrKykge1xuXHRcdFx0XHRcdHNlbGYubGF6eUxvYWRJdGVtKF9jdXJyZW50SXRlbUluZGV4LWkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0X2xpc3RlbignaW5pdGlhbExheW91dCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmN1cnJJdGVtLmluaXRpYWxMYXlvdXQgPSBfb3B0aW9ucy5nZXRUaHVtYkJvdW5kc0ZuICYmIF9vcHRpb25zLmdldFRodW1iQm91bmRzRm4oX2N1cnJlbnRJdGVtSW5kZXgpO1xuXHRcdFx0fSk7XG5cblx0XHRcdF9saXN0ZW4oJ21haW5TY3JvbGxBbmltQ29tcGxldGUnLCBfYXBwZW5kSW1hZ2VzUG9vbCk7XG5cdFx0XHRfbGlzdGVuKCdpbml0aWFsWm9vbUluRW5kJywgX2FwcGVuZEltYWdlc1Bvb2wpO1xuXG5cblxuXHRcdFx0X2xpc3RlbignZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgaXRlbTtcblx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IF9pdGVtcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGl0ZW0gPSBfaXRlbXNbaV07XG5cdFx0XHRcdFx0Ly8gcmVtb3ZlIHJlZmVyZW5jZSB0byBET00gZWxlbWVudHMsIGZvciBHQ1xuXHRcdFx0XHRcdGlmKGl0ZW0uY29udGFpbmVyKSB7XG5cdFx0XHRcdFx0XHRpdGVtLmNvbnRhaW5lciA9IG51bGw7IFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZihpdGVtLnBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdFx0XHRpdGVtLnBsYWNlaG9sZGVyID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoaXRlbS5pbWcpIHtcblx0XHRcdFx0XHRcdGl0ZW0uaW1nID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoaXRlbS5wcmVsb2FkZXIpIHtcblx0XHRcdFx0XHRcdGl0ZW0ucHJlbG9hZGVyID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoaXRlbS5sb2FkRXJyb3IpIHtcblx0XHRcdFx0XHRcdGl0ZW0ubG9hZGVkID0gaXRlbS5sb2FkRXJyb3IgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0X2ltYWdlc1RvQXBwZW5kUG9vbCA9IG51bGw7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cblx0XHRnZXRJdGVtQXQ6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0XHRpZiAoaW5kZXggPj0gMCkge1xuXHRcdFx0XHRyZXR1cm4gX2l0ZW1zW2luZGV4XSAhPT0gdW5kZWZpbmVkID8gX2l0ZW1zW2luZGV4XSA6IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cblx0XHRhbGxvd1Byb2dyZXNzaXZlSW1nOiBmdW5jdGlvbigpIHtcblx0XHRcdC8vIDEuIFByb2dyZXNzaXZlIGltYWdlIGxvYWRpbmcgaXNuJ3Qgd29ya2luZyBvbiB3ZWJraXQvYmxpbmsgXG5cdFx0XHQvLyAgICB3aGVuIGh3LWFjY2VsZXJhdGlvbiAoZS5nLiB0cmFuc2xhdGVaKSBpcyBhcHBsaWVkIHRvIElNRyBlbGVtZW50LlxuXHRcdFx0Ly8gICAgVGhhdCdzIHdoeSBpbiBQaG90b1N3aXBlIHBhcmVudCBlbGVtZW50IGdldHMgem9vbSB0cmFuc2Zvcm0sIG5vdCBpbWFnZSBpdHNlbGYuXG5cdFx0XHQvLyAgICBcblx0XHRcdC8vIDIuIFByb2dyZXNzaXZlIGltYWdlIGxvYWRpbmcgc29tZXRpbWVzIGJsaW5rcyBpbiB3ZWJraXQvYmxpbmsgd2hlbiBhcHBseWluZyBhbmltYXRpb24gdG8gcGFyZW50IGVsZW1lbnQuXG5cdFx0XHQvLyAgICBUaGF0J3Mgd2h5IGl0J3MgZGlzYWJsZWQgb24gdG91Y2ggZGV2aWNlcyAobWFpbmx5IGJlY2F1c2Ugb2Ygc3dpcGUgdHJhbnNpdGlvbilcblx0XHRcdC8vICAgIFxuXHRcdFx0Ly8gMy4gUHJvZ3Jlc3NpdmUgaW1hZ2UgbG9hZGluZyBzb21ldGltZXMgZG9lc24ndCB3b3JrIGluIElFICh1cCB0byAxMSkuXG5cblx0XHRcdC8vIERvbid0IGFsbG93IHByb2dyZXNzaXZlIGxvYWRpbmcgb24gbm9uLWxhcmdlIHRvdWNoIGRldmljZXNcblx0XHRcdHJldHVybiBfb3B0aW9ucy5mb3JjZVByb2dyZXNzaXZlTG9hZGluZyB8fCAhX2xpa2VseVRvdWNoRGV2aWNlIHx8IF9vcHRpb25zLm1vdXNlVXNlZCB8fCBzY3JlZW4ud2lkdGggPiAxMjAwOyBcblx0XHRcdC8vIDEyMDAgLSB0byBlbGltaW5hdGUgdG91Y2ggZGV2aWNlcyB3aXRoIGxhcmdlIHNjcmVlbiAobGlrZSBDaHJvbWVib29rIFBpeGVsKVxuXHRcdH0sXG5cblx0XHRzZXRDb250ZW50OiBmdW5jdGlvbihob2xkZXIsIGluZGV4KSB7XG5cblx0XHRcdGlmKF9vcHRpb25zLmxvb3ApIHtcblx0XHRcdFx0aW5kZXggPSBfZ2V0TG9vcGVkSWQoaW5kZXgpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcHJldkl0ZW0gPSBzZWxmLmdldEl0ZW1BdChob2xkZXIuaW5kZXgpO1xuXHRcdFx0aWYocHJldkl0ZW0pIHtcblx0XHRcdFx0cHJldkl0ZW0uY29udGFpbmVyID0gbnVsbDtcblx0XHRcdH1cblx0XG5cdFx0XHR2YXIgaXRlbSA9IHNlbGYuZ2V0SXRlbUF0KGluZGV4KSxcblx0XHRcdFx0aW1nO1xuXHRcdFx0XG5cdFx0XHRpZighaXRlbSkge1xuXHRcdFx0XHRob2xkZXIuZWwuaW5uZXJIVE1MID0gJyc7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYWxsb3cgdG8gb3ZlcnJpZGUgZGF0YVxuXHRcdFx0X3Nob3V0KCdnZXR0aW5nRGF0YScsIGluZGV4LCBpdGVtKTtcblxuXHRcdFx0aG9sZGVyLmluZGV4ID0gaW5kZXg7XG5cdFx0XHRob2xkZXIuaXRlbSA9IGl0ZW07XG5cblx0XHRcdC8vIGJhc2UgY29udGFpbmVyIERJViBpcyBjcmVhdGVkIG9ubHkgb25jZSBmb3IgZWFjaCBvZiAzIGhvbGRlcnNcblx0XHRcdHZhciBiYXNlRGl2ID0gaXRlbS5jb250YWluZXIgPSBmcmFtZXdvcmsuY3JlYXRlRWwoJ3Bzd3BfX3pvb20td3JhcCcpOyBcblxuXHRcdFx0XG5cblx0XHRcdGlmKCFpdGVtLnNyYyAmJiBpdGVtLmh0bWwpIHtcblx0XHRcdFx0aWYoaXRlbS5odG1sLnRhZ05hbWUpIHtcblx0XHRcdFx0XHRiYXNlRGl2LmFwcGVuZENoaWxkKGl0ZW0uaHRtbCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YmFzZURpdi5pbm5lckhUTUwgPSBpdGVtLmh0bWw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0X2NoZWNrRm9yRXJyb3IoaXRlbSk7XG5cblx0XHRcdF9jYWxjdWxhdGVJdGVtU2l6ZShpdGVtLCBfdmlld3BvcnRTaXplKTtcblx0XHRcdFxuXHRcdFx0aWYoaXRlbS5zcmMgJiYgIWl0ZW0ubG9hZEVycm9yICYmICFpdGVtLmxvYWRlZCkge1xuXG5cdFx0XHRcdGl0ZW0ubG9hZENvbXBsZXRlID0gZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHRcdFx0Ly8gZ2FsbGVyeSBjbG9zZWQgYmVmb3JlIGltYWdlIGZpbmlzaGVkIGxvYWRpbmdcblx0XHRcdFx0XHRpZighX2lzT3Blbikge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGNoZWNrIGlmIGhvbGRlciBoYXNuJ3QgY2hhbmdlZCB3aGlsZSBpbWFnZSB3YXMgbG9hZGluZ1xuXHRcdFx0XHRcdGlmKGhvbGRlciAmJiBob2xkZXIuaW5kZXggPT09IGluZGV4ICkge1xuXHRcdFx0XHRcdFx0aWYoIF9jaGVja0ZvckVycm9yKGl0ZW0sIHRydWUpICkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmxvYWRDb21wbGV0ZSA9IGl0ZW0uaW1nID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0X2NhbGN1bGF0ZUl0ZW1TaXplKGl0ZW0sIF92aWV3cG9ydFNpemUpO1xuXHRcdFx0XHRcdFx0XHRfYXBwbHlab29tUGFuVG9JdGVtKGl0ZW0pO1xuXG5cdFx0XHRcdFx0XHRcdGlmKGhvbGRlci5pbmRleCA9PT0gX2N1cnJlbnRJdGVtSW5kZXgpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyByZWNhbGN1bGF0ZSBkaW1lbnNpb25zXG5cdFx0XHRcdFx0XHRcdFx0c2VsZi51cGRhdGVDdXJyWm9vbUl0ZW0oKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiggIWl0ZW0uaW1hZ2VBcHBlbmRlZCApIHtcblx0XHRcdFx0XHRcdFx0aWYoX2ZlYXR1cmVzLnRyYW5zZm9ybSAmJiAoX21haW5TY3JvbGxBbmltYXRpbmcgfHwgX2luaXRpYWxab29tUnVubmluZykgKSB7XG5cdFx0XHRcdFx0XHRcdFx0X2ltYWdlc1RvQXBwZW5kUG9vbC5wdXNoKHtcblx0XHRcdFx0XHRcdFx0XHRcdGl0ZW06aXRlbSxcblx0XHRcdFx0XHRcdFx0XHRcdGJhc2VEaXY6YmFzZURpdixcblx0XHRcdFx0XHRcdFx0XHRcdGltZzppdGVtLmltZyxcblx0XHRcdFx0XHRcdFx0XHRcdGluZGV4OmluZGV4LFxuXHRcdFx0XHRcdFx0XHRcdFx0aG9sZGVyOmhvbGRlcixcblx0XHRcdFx0XHRcdFx0XHRcdGNsZWFyUGxhY2Vob2xkZXI6dHJ1ZVxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdF9hcHBlbmRJbWFnZShpbmRleCwgaXRlbSwgYmFzZURpdiwgaXRlbS5pbWcsIF9tYWluU2Nyb2xsQW5pbWF0aW5nIHx8IF9pbml0aWFsWm9vbVJ1bm5pbmcsIHRydWUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyByZW1vdmUgcHJlbG9hZGVyICYgbWluaS1pbWdcblx0XHRcdFx0XHRcdFx0aWYoIV9pbml0aWFsWm9vbVJ1bm5pbmcgJiYgaXRlbS5wbGFjZWhvbGRlcikge1xuXHRcdFx0XHRcdFx0XHRcdGl0ZW0ucGxhY2Vob2xkZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdFx0XHRcdFx0XHRpdGVtLnBsYWNlaG9sZGVyID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGl0ZW0ubG9hZENvbXBsZXRlID0gbnVsbDtcblx0XHRcdFx0XHRpdGVtLmltZyA9IG51bGw7IC8vIG5vIG5lZWQgdG8gc3RvcmUgaW1hZ2UgZWxlbWVudCBhZnRlciBpdCdzIGFkZGVkXG5cblx0XHRcdFx0XHRfc2hvdXQoJ2ltYWdlTG9hZENvbXBsZXRlJywgaW5kZXgsIGl0ZW0pO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGlmKGZyYW1ld29yay5mZWF0dXJlcy50cmFuc2Zvcm0pIHtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHR2YXIgcGxhY2Vob2xkZXJDbGFzc05hbWUgPSAncHN3cF9faW1nIHBzd3BfX2ltZy0tcGxhY2Vob2xkZXInOyBcblx0XHRcdFx0XHRwbGFjZWhvbGRlckNsYXNzTmFtZSArPSAoaXRlbS5tc3JjID8gJycgOiAnIHBzd3BfX2ltZy0tcGxhY2Vob2xkZXItLWJsYW5rJyk7XG5cblx0XHRcdFx0XHR2YXIgcGxhY2Vob2xkZXIgPSBmcmFtZXdvcmsuY3JlYXRlRWwocGxhY2Vob2xkZXJDbGFzc05hbWUsIGl0ZW0ubXNyYyA/ICdpbWcnIDogJycpO1xuXHRcdFx0XHRcdGlmKGl0ZW0ubXNyYykge1xuXHRcdFx0XHRcdFx0cGxhY2Vob2xkZXIuc3JjID0gaXRlbS5tc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHRfc2V0SW1hZ2VTaXplKGl0ZW0sIHBsYWNlaG9sZGVyKTtcblxuXHRcdFx0XHRcdGJhc2VEaXYuYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXIpO1xuXHRcdFx0XHRcdGl0ZW0ucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcblxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXG5cdFx0XHRcdFxuXG5cdFx0XHRcdGlmKCFpdGVtLmxvYWRpbmcpIHtcblx0XHRcdFx0XHRfcHJlbG9hZEltYWdlKGl0ZW0pO1xuXHRcdFx0XHR9XG5cblxuXHRcdFx0XHRpZiggc2VsZi5hbGxvd1Byb2dyZXNzaXZlSW1nKCkgKSB7XG5cdFx0XHRcdFx0Ly8ganVzdCBhcHBlbmQgaW1hZ2Vcblx0XHRcdFx0XHRpZighX2luaXRpYWxDb250ZW50U2V0ICYmIF9mZWF0dXJlcy50cmFuc2Zvcm0pIHtcblx0XHRcdFx0XHRcdF9pbWFnZXNUb0FwcGVuZFBvb2wucHVzaCh7XG5cdFx0XHRcdFx0XHRcdGl0ZW06aXRlbSwgXG5cdFx0XHRcdFx0XHRcdGJhc2VEaXY6YmFzZURpdiwgXG5cdFx0XHRcdFx0XHRcdGltZzppdGVtLmltZywgXG5cdFx0XHRcdFx0XHRcdGluZGV4OmluZGV4LCBcblx0XHRcdFx0XHRcdFx0aG9sZGVyOmhvbGRlclxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdF9hcHBlbmRJbWFnZShpbmRleCwgaXRlbSwgYmFzZURpdiwgaXRlbS5pbWcsIHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH0gZWxzZSBpZihpdGVtLnNyYyAmJiAhaXRlbS5sb2FkRXJyb3IpIHtcblx0XHRcdFx0Ly8gaW1hZ2Ugb2JqZWN0IGlzIGNyZWF0ZWQgZXZlcnkgdGltZSwgZHVlIHRvIGJ1Z3Mgb2YgaW1hZ2UgbG9hZGluZyAmIGRlbGF5IHdoZW4gc3dpdGNoaW5nIGltYWdlc1xuXHRcdFx0XHRpbWcgPSBmcmFtZXdvcmsuY3JlYXRlRWwoJ3Bzd3BfX2ltZycsICdpbWcnKTtcblx0XHRcdFx0aW1nLnN0eWxlLm9wYWNpdHkgPSAxO1xuXHRcdFx0XHRpbWcuc3JjID0gaXRlbS5zcmM7XG5cdFx0XHRcdF9zZXRJbWFnZVNpemUoaXRlbSwgaW1nKTtcblx0XHRcdFx0X2FwcGVuZEltYWdlKGluZGV4LCBpdGVtLCBiYXNlRGl2LCBpbWcsIHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0XG5cblx0XHRcdGlmKCFfaW5pdGlhbENvbnRlbnRTZXQgJiYgaW5kZXggPT09IF9jdXJyZW50SXRlbUluZGV4KSB7XG5cdFx0XHRcdF9jdXJyWm9vbUVsZW1lbnRTdHlsZSA9IGJhc2VEaXYuc3R5bGU7XG5cdFx0XHRcdF9zaG93T3JIaWRlKGl0ZW0sIChpbWcgfHxpdGVtLmltZykgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9hcHBseVpvb21QYW5Ub0l0ZW0oaXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdGhvbGRlci5lbC5pbm5lckhUTUwgPSAnJztcblx0XHRcdGhvbGRlci5lbC5hcHBlbmRDaGlsZChiYXNlRGl2KTtcblx0XHR9LFxuXG5cdFx0Y2xlYW5TbGlkZTogZnVuY3Rpb24oIGl0ZW0gKSB7XG5cdFx0XHRpZihpdGVtLmltZyApIHtcblx0XHRcdFx0aXRlbS5pbWcub25sb2FkID0gaXRlbS5pbWcub25lcnJvciA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRpdGVtLmxvYWRlZCA9IGl0ZW0ubG9hZGluZyA9IGl0ZW0uaW1nID0gaXRlbS5pbWFnZUFwcGVuZGVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdH1cbn0pO1xuXG4vKj4+aXRlbXMtY29udHJvbGxlciovXG5cbi8qPj50YXAqL1xuLyoqXG4gKiB0YXAuanM6XG4gKlxuICogRGlzcGxhdGNoZXMgdGFwIGFuZCBkb3VibGUtdGFwIGV2ZW50cy5cbiAqIFxuICovXG5cbnZhciB0YXBUaW1lcixcblx0dGFwUmVsZWFzZVBvaW50ID0ge30sXG5cdF9kaXNwYXRjaFRhcEV2ZW50ID0gZnVuY3Rpb24ob3JpZ0V2ZW50LCByZWxlYXNlUG9pbnQsIHBvaW50ZXJUeXBlKSB7XHRcdFxuXHRcdHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoICdDdXN0b21FdmVudCcgKSxcblx0XHRcdGVEZXRhaWwgPSB7XG5cdFx0XHRcdG9yaWdFdmVudDpvcmlnRXZlbnQsIFxuXHRcdFx0XHR0YXJnZXQ6b3JpZ0V2ZW50LnRhcmdldCwgXG5cdFx0XHRcdHJlbGVhc2VQb2ludDogcmVsZWFzZVBvaW50LCBcblx0XHRcdFx0cG9pbnRlclR5cGU6cG9pbnRlclR5cGUgfHwgJ3RvdWNoJ1xuXHRcdFx0fTtcblxuXHRcdGUuaW5pdEN1c3RvbUV2ZW50KCAncHN3cFRhcCcsIHRydWUsIHRydWUsIGVEZXRhaWwgKTtcblx0XHRvcmlnRXZlbnQudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZSk7XG5cdH07XG5cbl9yZWdpc3Rlck1vZHVsZSgnVGFwJywge1xuXHRwdWJsaWNNZXRob2RzOiB7XG5cdFx0aW5pdFRhcDogZnVuY3Rpb24oKSB7XG5cdFx0XHRfbGlzdGVuKCdmaXJzdFRvdWNoU3RhcnQnLCBzZWxmLm9uVGFwU3RhcnQpO1xuXHRcdFx0X2xpc3RlbigndG91Y2hSZWxlYXNlJywgc2VsZi5vblRhcFJlbGVhc2UpO1xuXHRcdFx0X2xpc3RlbignZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0YXBSZWxlYXNlUG9pbnQgPSB7fTtcblx0XHRcdFx0dGFwVGltZXIgPSBudWxsO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRvblRhcFN0YXJ0OiBmdW5jdGlvbih0b3VjaExpc3QpIHtcblx0XHRcdGlmKHRvdWNoTGlzdC5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdGNsZWFyVGltZW91dCh0YXBUaW1lcik7XG5cdFx0XHRcdHRhcFRpbWVyID0gbnVsbDtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9uVGFwUmVsZWFzZTogZnVuY3Rpb24oZSwgcmVsZWFzZVBvaW50KSB7XG5cdFx0XHRpZighcmVsZWFzZVBvaW50KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYoIV9tb3ZlZCAmJiAhX2lzTXVsdGl0b3VjaCAmJiAhX251bUFuaW1hdGlvbnMpIHtcblx0XHRcdFx0dmFyIHAwID0gcmVsZWFzZVBvaW50O1xuXHRcdFx0XHRpZih0YXBUaW1lcikge1xuXHRcdFx0XHRcdGNsZWFyVGltZW91dCh0YXBUaW1lcik7XG5cdFx0XHRcdFx0dGFwVGltZXIgPSBudWxsO1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgaWYgdGFwZWQgb24gdGhlIHNhbWUgcGxhY2Vcblx0XHRcdFx0XHRpZiAoIF9pc05lYXJieVBvaW50cyhwMCwgdGFwUmVsZWFzZVBvaW50KSApIHtcblx0XHRcdFx0XHRcdF9zaG91dCgnZG91YmxlVGFwJywgcDApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHJlbGVhc2VQb2ludC50eXBlID09PSAnbW91c2UnKSB7XG5cdFx0XHRcdFx0X2Rpc3BhdGNoVGFwRXZlbnQoZSwgcmVsZWFzZVBvaW50LCAnbW91c2UnKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgY2xpY2tlZFRhZ05hbWUgPSBlLnRhcmdldC50YWdOYW1lLnRvVXBwZXJDYXNlKCk7XG5cdFx0XHRcdC8vIGF2b2lkIGRvdWJsZSB0YXAgZGVsYXkgb24gYnV0dG9ucyBhbmQgZWxlbWVudHMgdGhhdCBoYXZlIGNsYXNzIHBzd3BfX3NpbmdsZS10YXBcblx0XHRcdFx0aWYoY2xpY2tlZFRhZ05hbWUgPT09ICdCVVRUT04nIHx8IGZyYW1ld29yay5oYXNDbGFzcyhlLnRhcmdldCwgJ3Bzd3BfX3NpbmdsZS10YXAnKSApIHtcblx0XHRcdFx0XHRfZGlzcGF0Y2hUYXBFdmVudChlLCByZWxlYXNlUG9pbnQpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdF9lcXVhbGl6ZVBvaW50cyh0YXBSZWxlYXNlUG9pbnQsIHAwKTtcblxuXHRcdFx0XHR0YXBUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0X2Rpc3BhdGNoVGFwRXZlbnQoZSwgcmVsZWFzZVBvaW50KTtcblx0XHRcdFx0XHR0YXBUaW1lciA9IG51bGw7XG5cdFx0XHRcdH0sIDMwMCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PnRhcCovXG5cbi8qPj5kZXNrdG9wLXpvb20qL1xuLyoqXG4gKlxuICogZGVza3RvcC16b29tLmpzOlxuICpcbiAqIC0gQmluZHMgbW91c2V3aGVlbCBldmVudCBmb3IgcGFuaW5nIHpvb21lZCBpbWFnZS5cbiAqIC0gTWFuYWdlcyBcImRyYWdnaW5nXCIsIFwiem9vbWVkLWluXCIsIFwiem9vbS1vdXRcIiBjbGFzc2VzLlxuICogICAod2hpY2ggYXJlIHVzZWQgZm9yIGN1cnNvcnMgYW5kIHpvb20gaWNvbilcbiAqIC0gQWRkcyB0b2dnbGVEZXNrdG9wWm9vbSBmdW5jdGlvbi5cbiAqIFxuICovXG5cbnZhciBfd2hlZWxEZWx0YTtcblx0XG5fcmVnaXN0ZXJNb2R1bGUoJ0Rlc2t0b3Bab29tJywge1xuXG5cdHB1YmxpY01ldGhvZHM6IHtcblxuXHRcdGluaXREZXNrdG9wWm9vbTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdGlmKF9vbGRJRSkge1xuXHRcdFx0XHQvLyBubyB6b29tIGZvciBvbGQgSUUgKDw9OClcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihfbGlrZWx5VG91Y2hEZXZpY2UpIHtcblx0XHRcdFx0Ly8gaWYgZGV0ZWN0ZWQgaGFyZHdhcmUgdG91Y2ggc3VwcG9ydCwgd2Ugd2FpdCB1bnRpbCBtb3VzZSBpcyB1c2VkLFxuXHRcdFx0XHQvLyBhbmQgb25seSB0aGVuIGFwcGx5IGRlc2t0b3Atem9vbSBmZWF0dXJlc1xuXHRcdFx0XHRfbGlzdGVuKCdtb3VzZVVzZWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRzZWxmLnNldHVwRGVza3RvcFpvb20oKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLnNldHVwRGVza3RvcFpvb20odHJ1ZSk7XG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0c2V0dXBEZXNrdG9wWm9vbTogZnVuY3Rpb24ob25Jbml0KSB7XG5cblx0XHRcdF93aGVlbERlbHRhID0ge307XG5cblx0XHRcdHZhciBldmVudHMgPSAnd2hlZWwgbW91c2V3aGVlbCBET01Nb3VzZVNjcm9sbCc7XG5cdFx0XHRcblx0XHRcdF9saXN0ZW4oJ2JpbmRFdmVudHMnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZnJhbWV3b3JrLmJpbmQodGVtcGxhdGUsIGV2ZW50cywgIHNlbGYuaGFuZGxlTW91c2VXaGVlbCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X2xpc3RlbigndW5iaW5kRXZlbnRzJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKF93aGVlbERlbHRhKSB7XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLnVuYmluZCh0ZW1wbGF0ZSwgZXZlbnRzLCBzZWxmLmhhbmRsZU1vdXNlV2hlZWwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0c2VsZi5tb3VzZVpvb21lZEluID0gZmFsc2U7XG5cblx0XHRcdHZhciBoYXNEcmFnZ2luZ0NsYXNzLFxuXHRcdFx0XHR1cGRhdGVab29tYWJsZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKHNlbGYubW91c2Vab29tZWRJbikge1xuXHRcdFx0XHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKHRlbXBsYXRlLCAncHN3cC0tem9vbWVkLWluJyk7XG5cdFx0XHRcdFx0XHRzZWxmLm1vdXNlWm9vbWVkSW4gPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoX2N1cnJab29tTGV2ZWwgPCAxKSB7XG5cdFx0XHRcdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3ModGVtcGxhdGUsICdwc3dwLS16b29tLWFsbG93ZWQnKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKHRlbXBsYXRlLCAncHN3cC0tem9vbS1hbGxvd2VkJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlbW92ZURyYWdnaW5nQ2xhc3MoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0cmVtb3ZlRHJhZ2dpbmdDbGFzcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKGhhc0RyYWdnaW5nQ2xhc3MpIHtcblx0XHRcdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLWRyYWdnaW5nJyk7XG5cdFx0XHRcdFx0XHRoYXNEcmFnZ2luZ0NsYXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRfbGlzdGVuKCdyZXNpemUnICwgdXBkYXRlWm9vbWFibGUpO1xuXHRcdFx0X2xpc3RlbignYWZ0ZXJDaGFuZ2UnICwgdXBkYXRlWm9vbWFibGUpO1xuXHRcdFx0X2xpc3RlbigncG9pbnRlckRvd24nLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoc2VsZi5tb3VzZVpvb21lZEluKSB7XG5cdFx0XHRcdFx0aGFzRHJhZ2dpbmdDbGFzcyA9IHRydWU7XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKHRlbXBsYXRlLCAncHN3cC0tZHJhZ2dpbmcnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRfbGlzdGVuKCdwb2ludGVyVXAnLCByZW1vdmVEcmFnZ2luZ0NsYXNzKTtcblxuXHRcdFx0aWYoIW9uSW5pdCkge1xuXHRcdFx0XHR1cGRhdGVab29tYWJsZSgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fSxcblxuXHRcdGhhbmRsZU1vdXNlV2hlZWw6IGZ1bmN0aW9uKGUpIHtcblxuXHRcdFx0aWYoX2N1cnJab29tTGV2ZWwgPD0gc2VsZi5jdXJySXRlbS5maXRSYXRpbykge1xuXHRcdFx0XHRpZiggX29wdGlvbnMubW9kYWwgKSB7XG5cblx0XHRcdFx0XHRpZiAoIV9vcHRpb25zLmNsb3NlT25TY3JvbGwgfHwgX251bUFuaW1hdGlvbnMgfHwgX2lzRHJhZ2dpbmcpIHtcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYoX3RyYW5zZm9ybUtleSAmJiBNYXRoLmFicyhlLmRlbHRhWSkgPiAyKSB7XG5cdFx0XHRcdFx0XHQvLyBjbG9zZSBQaG90b1N3aXBlXG5cdFx0XHRcdFx0XHQvLyBpZiBicm93c2VyIHN1cHBvcnRzIHRyYW5zZm9ybXMgJiBzY3JvbGwgY2hhbmdlZCBlbm91Z2hcblx0XHRcdFx0XHRcdF9jbG9zZWRCeVNjcm9sbCA9IHRydWU7XG5cdFx0XHRcdFx0XHRzZWxmLmNsb3NlKCk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGFsbG93IGp1c3Qgb25lIGV2ZW50IHRvIGZpcmVcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy93aGVlbFxuXHRcdFx0X3doZWVsRGVsdGEueCA9IDA7XG5cblx0XHRcdGlmKCdkZWx0YVgnIGluIGUpIHtcblx0XHRcdFx0aWYoZS5kZWx0YU1vZGUgPT09IDEgLyogRE9NX0RFTFRBX0xJTkUgKi8pIHtcblx0XHRcdFx0XHQvLyAxOCAtIGF2ZXJhZ2UgbGluZSBoZWlnaHRcblx0XHRcdFx0XHRfd2hlZWxEZWx0YS54ID0gZS5kZWx0YVggKiAxODtcblx0XHRcdFx0XHRfd2hlZWxEZWx0YS55ID0gZS5kZWx0YVkgKiAxODtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfd2hlZWxEZWx0YS54ID0gZS5kZWx0YVg7XG5cdFx0XHRcdFx0X3doZWVsRGVsdGEueSA9IGUuZGVsdGFZO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYoJ3doZWVsRGVsdGEnIGluIGUpIHtcblx0XHRcdFx0aWYoZS53aGVlbERlbHRhWCkge1xuXHRcdFx0XHRcdF93aGVlbERlbHRhLnggPSAtMC4xNiAqIGUud2hlZWxEZWx0YVg7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoZS53aGVlbERlbHRhWSkge1xuXHRcdFx0XHRcdF93aGVlbERlbHRhLnkgPSAtMC4xNiAqIGUud2hlZWxEZWx0YVk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X3doZWVsRGVsdGEueSA9IC0wLjE2ICogZS53aGVlbERlbHRhO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYoJ2RldGFpbCcgaW4gZSkge1xuXHRcdFx0XHRfd2hlZWxEZWx0YS55ID0gZS5kZXRhaWw7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdF9jYWxjdWxhdGVQYW5Cb3VuZHMoX2N1cnJab29tTGV2ZWwsIHRydWUpO1xuXG5cdFx0XHR2YXIgbmV3UGFuWCA9IF9wYW5PZmZzZXQueCAtIF93aGVlbERlbHRhLngsXG5cdFx0XHRcdG5ld1BhblkgPSBfcGFuT2Zmc2V0LnkgLSBfd2hlZWxEZWx0YS55O1xuXG5cdFx0XHQvLyBvbmx5IHByZXZlbnQgc2Nyb2xsaW5nIGluIG5vbm1vZGFsIG1vZGUgd2hlbiBub3QgYXQgZWRnZXNcblx0XHRcdGlmIChfb3B0aW9ucy5tb2RhbCB8fFxuXHRcdFx0XHQoXG5cdFx0XHRcdG5ld1BhblggPD0gX2N1cnJQYW5Cb3VuZHMubWluLnggJiYgbmV3UGFuWCA+PSBfY3VyclBhbkJvdW5kcy5tYXgueCAmJlxuXHRcdFx0XHRuZXdQYW5ZIDw9IF9jdXJyUGFuQm91bmRzLm1pbi55ICYmIG5ld1BhblkgPj0gX2N1cnJQYW5Cb3VuZHMubWF4Lnlcblx0XHRcdFx0KSApIHtcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUT0RPOiB1c2UgckFGIGluc3RlYWQgb2YgbW91c2V3aGVlbD9cblx0XHRcdHNlbGYucGFuVG8obmV3UGFuWCwgbmV3UGFuWSk7XG5cdFx0fSxcblxuXHRcdHRvZ2dsZURlc2t0b3Bab29tOiBmdW5jdGlvbihjZW50ZXJQb2ludCkge1xuXHRcdFx0Y2VudGVyUG9pbnQgPSBjZW50ZXJQb2ludCB8fCB7eDpfdmlld3BvcnRTaXplLngvMiArIF9vZmZzZXQueCwgeTpfdmlld3BvcnRTaXplLnkvMiArIF9vZmZzZXQueSB9O1xuXG5cdFx0XHR2YXIgZG91YmxlVGFwWm9vbUxldmVsID0gX29wdGlvbnMuZ2V0RG91YmxlVGFwWm9vbSh0cnVlLCBzZWxmLmN1cnJJdGVtKTtcblx0XHRcdHZhciB6b29tT3V0ID0gX2N1cnJab29tTGV2ZWwgPT09IGRvdWJsZVRhcFpvb21MZXZlbDtcblx0XHRcdFxuXHRcdFx0c2VsZi5tb3VzZVpvb21lZEluID0gIXpvb21PdXQ7XG5cblx0XHRcdHNlbGYuem9vbVRvKHpvb21PdXQgPyBzZWxmLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWwgOiBkb3VibGVUYXBab29tTGV2ZWwsIGNlbnRlclBvaW50LCAzMzMpO1xuXHRcdFx0ZnJhbWV3b3JrWyAoIXpvb21PdXQgPyAnYWRkJyA6ICdyZW1vdmUnKSArICdDbGFzcyddKHRlbXBsYXRlLCAncHN3cC0tem9vbWVkLWluJyk7XG5cdFx0fVxuXG5cdH1cbn0pO1xuXG5cbi8qPj5kZXNrdG9wLXpvb20qL1xuXG4vKj4+aGlzdG9yeSovXG4vKipcbiAqXG4gKiBoaXN0b3J5LmpzOlxuICpcbiAqIC0gQmFjayBidXR0b24gdG8gY2xvc2UgZ2FsbGVyeS5cbiAqIFxuICogLSBVbmlxdWUgVVJMIGZvciBlYWNoIHNsaWRlOiBleGFtcGxlLmNvbS8mcGlkPTEmZ2lkPTNcbiAqICAgKHdoZXJlIFBJRCBpcyBwaWN0dXJlIGluZGV4LCBhbmQgR0lEIGFuZCBnYWxsZXJ5IGluZGV4KVxuICogICBcbiAqIC0gU3dpdGNoIFVSTCB3aGVuIHNsaWRlcyBjaGFuZ2UuXG4gKiBcbiAqL1xuXG5cbnZhciBfaGlzdG9yeURlZmF1bHRPcHRpb25zID0ge1xuXHRoaXN0b3J5OiB0cnVlLFxuXHRnYWxsZXJ5VUlEOiAxXG59O1xuXG52YXIgX2hpc3RvcnlVcGRhdGVUaW1lb3V0LFxuXHRfaGFzaENoYW5nZVRpbWVvdXQsXG5cdF9oYXNoQW5pbUNoZWNrVGltZW91dCxcblx0X2hhc2hDaGFuZ2VkQnlTY3JpcHQsXG5cdF9oYXNoQ2hhbmdlZEJ5SGlzdG9yeSxcblx0X2hhc2hSZXNldGVkLFxuXHRfaW5pdGlhbEhhc2gsXG5cdF9oaXN0b3J5Q2hhbmdlZCxcblx0X2Nsb3NlZEZyb21VUkwsXG5cdF91cmxDaGFuZ2VkT25jZSxcblx0X3dpbmRvd0xvYyxcblxuXHRfc3VwcG9ydHNQdXNoU3RhdGUsXG5cblx0X2dldEhhc2ggPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gX3dpbmRvd0xvYy5oYXNoLnN1YnN0cmluZygxKTtcblx0fSxcblx0X2NsZWFuSGlzdG9yeVRpbWVvdXRzID0gZnVuY3Rpb24oKSB7XG5cblx0XHRpZihfaGlzdG9yeVVwZGF0ZVRpbWVvdXQpIHtcblx0XHRcdGNsZWFyVGltZW91dChfaGlzdG9yeVVwZGF0ZVRpbWVvdXQpO1xuXHRcdH1cblxuXHRcdGlmKF9oYXNoQW5pbUNoZWNrVGltZW91dCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KF9oYXNoQW5pbUNoZWNrVGltZW91dCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIHBpZCAtIFBpY3R1cmUgaW5kZXhcblx0Ly8gZ2lkIC0gR2FsbGVyeSBpbmRleFxuXHRfcGFyc2VJdGVtSW5kZXhGcm9tVVJMID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhc2ggPSBfZ2V0SGFzaCgpLFxuXHRcdFx0cGFyYW1zID0ge307XG5cblx0XHRpZihoYXNoLmxlbmd0aCA8IDUpIHsgLy8gcGlkPTFcblx0XHRcdHJldHVybiBwYXJhbXM7XG5cdFx0fVxuXG5cdFx0dmFyIGksIHZhcnMgPSBoYXNoLnNwbGl0KCcmJyk7XG5cdFx0Zm9yIChpID0gMDsgaSA8IHZhcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmKCF2YXJzW2ldKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHBhaXIgPSB2YXJzW2ldLnNwbGl0KCc9Jyk7XHRcblx0XHRcdGlmKHBhaXIubGVuZ3RoIDwgMikge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdHBhcmFtc1twYWlyWzBdXSA9IHBhaXJbMV07XG5cdFx0fVxuXHRcdGlmKF9vcHRpb25zLmdhbGxlcnlQSURzKSB7XG5cdFx0XHQvLyBkZXRlY3QgY3VzdG9tIHBpZCBpbiBoYXNoIGFuZCBzZWFyY2ggZm9yIGl0IGFtb25nIHRoZSBpdGVtcyBjb2xsZWN0aW9uXG5cdFx0XHR2YXIgc2VhcmNoZm9yID0gcGFyYW1zLnBpZDtcblx0XHRcdHBhcmFtcy5waWQgPSAwOyAvLyBpZiBjdXN0b20gcGlkIGNhbm5vdCBiZSBmb3VuZCwgZmFsbGJhY2sgdG8gdGhlIGZpcnN0IGl0ZW1cblx0XHRcdGZvcihpID0gMDsgaSA8IF9pdGVtcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZihfaXRlbXNbaV0ucGlkID09PSBzZWFyY2hmb3IpIHtcblx0XHRcdFx0XHRwYXJhbXMucGlkID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRwYXJhbXMucGlkID0gcGFyc2VJbnQocGFyYW1zLnBpZCwxMCktMTtcblx0XHR9XG5cdFx0aWYoIHBhcmFtcy5waWQgPCAwICkge1xuXHRcdFx0cGFyYW1zLnBpZCA9IDA7XG5cdFx0fVxuXHRcdHJldHVybiBwYXJhbXM7XG5cdH0sXG5cdF91cGRhdGVIYXNoID0gZnVuY3Rpb24oKSB7XG5cblx0XHRpZihfaGFzaEFuaW1DaGVja1RpbWVvdXQpIHtcblx0XHRcdGNsZWFyVGltZW91dChfaGFzaEFuaW1DaGVja1RpbWVvdXQpO1xuXHRcdH1cblxuXG5cdFx0aWYoX251bUFuaW1hdGlvbnMgfHwgX2lzRHJhZ2dpbmcpIHtcblx0XHRcdC8vIGNoYW5naW5nIGJyb3dzZXIgVVJMIGZvcmNlcyBsYXlvdXQvcGFpbnQgaW4gc29tZSBicm93c2Vycywgd2hpY2ggY2F1c2VzIG5vdGljYWJsZSBsYWcgZHVyaW5nIGFuaW1hdGlvblxuXHRcdFx0Ly8gdGhhdCdzIHdoeSB3ZSB1cGRhdGUgaGFzaCBvbmx5IHdoZW4gbm8gYW5pbWF0aW9ucyBydW5uaW5nXG5cdFx0XHRfaGFzaEFuaW1DaGVja1RpbWVvdXQgPSBzZXRUaW1lb3V0KF91cGRhdGVIYXNoLCA1MDApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0XHRpZihfaGFzaENoYW5nZWRCeVNjcmlwdCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KF9oYXNoQ2hhbmdlVGltZW91dCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdF9oYXNoQ2hhbmdlZEJ5U2NyaXB0ID0gdHJ1ZTtcblx0XHR9XG5cblxuXHRcdHZhciBwaWQgPSAoX2N1cnJlbnRJdGVtSW5kZXggKyAxKTtcblx0XHR2YXIgaXRlbSA9IF9nZXRJdGVtQXQoIF9jdXJyZW50SXRlbUluZGV4ICk7XG5cdFx0aWYoaXRlbS5oYXNPd25Qcm9wZXJ0eSgncGlkJykpIHtcblx0XHRcdC8vIGNhcnJ5IGZvcndhcmQgYW55IGN1c3RvbSBwaWQgYXNzaWduZWQgdG8gdGhlIGl0ZW1cblx0XHRcdHBpZCA9IGl0ZW0ucGlkO1xuXHRcdH1cblx0XHR2YXIgbmV3SGFzaCA9IF9pbml0aWFsSGFzaCArICcmJyAgKyAgJ2dpZD0nICsgX29wdGlvbnMuZ2FsbGVyeVVJRCArICcmJyArICdwaWQ9JyArIHBpZDtcblxuXHRcdGlmKCFfaGlzdG9yeUNoYW5nZWQpIHtcblx0XHRcdGlmKF93aW5kb3dMb2MuaGFzaC5pbmRleE9mKG5ld0hhc2gpID09PSAtMSkge1xuXHRcdFx0XHRfdXJsQ2hhbmdlZE9uY2UgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0Ly8gZmlyc3QgdGltZSAtIGFkZCBuZXcgaGlzb3J5IHJlY29yZCwgdGhlbiBqdXN0IHJlcGxhY2Vcblx0XHR9XG5cblx0XHR2YXIgbmV3VVJMID0gX3dpbmRvd0xvYy5ocmVmLnNwbGl0KCcjJylbMF0gKyAnIycgKyAgbmV3SGFzaDtcblxuXHRcdGlmKCBfc3VwcG9ydHNQdXNoU3RhdGUgKSB7XG5cblx0XHRcdGlmKCcjJyArIG5ld0hhc2ggIT09IHdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG5cdFx0XHRcdGhpc3RvcnlbX2hpc3RvcnlDaGFuZ2VkID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oJycsIGRvY3VtZW50LnRpdGxlLCBuZXdVUkwpO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKF9oaXN0b3J5Q2hhbmdlZCkge1xuXHRcdFx0XHRfd2luZG93TG9jLnJlcGxhY2UoIG5ld1VSTCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X3dpbmRvd0xvYy5oYXNoID0gbmV3SGFzaDtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0XG5cblx0XHRfaGlzdG9yeUNoYW5nZWQgPSB0cnVlO1xuXHRcdF9oYXNoQ2hhbmdlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRfaGFzaENoYW5nZWRCeVNjcmlwdCA9IGZhbHNlO1xuXHRcdH0sIDYwKTtcblx0fTtcblxuXG5cblx0XG5cbl9yZWdpc3Rlck1vZHVsZSgnSGlzdG9yeScsIHtcblxuXHRcblxuXHRwdWJsaWNNZXRob2RzOiB7XG5cdFx0aW5pdEhpc3Rvcnk6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRmcmFtZXdvcmsuZXh0ZW5kKF9vcHRpb25zLCBfaGlzdG9yeURlZmF1bHRPcHRpb25zLCB0cnVlKTtcblxuXHRcdFx0aWYoICFfb3B0aW9ucy5oaXN0b3J5ICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblxuXHRcdFx0X3dpbmRvd0xvYyA9IHdpbmRvdy5sb2NhdGlvbjtcblx0XHRcdF91cmxDaGFuZ2VkT25jZSA9IGZhbHNlO1xuXHRcdFx0X2Nsb3NlZEZyb21VUkwgPSBmYWxzZTtcblx0XHRcdF9oaXN0b3J5Q2hhbmdlZCA9IGZhbHNlO1xuXHRcdFx0X2luaXRpYWxIYXNoID0gX2dldEhhc2goKTtcblx0XHRcdF9zdXBwb3J0c1B1c2hTdGF0ZSA9ICgncHVzaFN0YXRlJyBpbiBoaXN0b3J5KTtcblxuXG5cdFx0XHRpZihfaW5pdGlhbEhhc2guaW5kZXhPZignZ2lkPScpID4gLTEpIHtcblx0XHRcdFx0X2luaXRpYWxIYXNoID0gX2luaXRpYWxIYXNoLnNwbGl0KCcmZ2lkPScpWzBdO1xuXHRcdFx0XHRfaW5pdGlhbEhhc2ggPSBfaW5pdGlhbEhhc2guc3BsaXQoJz9naWQ9JylbMF07XG5cdFx0XHR9XG5cdFx0XHRcblxuXHRcdFx0X2xpc3RlbignYWZ0ZXJDaGFuZ2UnLCBzZWxmLnVwZGF0ZVVSTCk7XG5cdFx0XHRfbGlzdGVuKCd1bmJpbmRFdmVudHMnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZnJhbWV3b3JrLnVuYmluZCh3aW5kb3csICdoYXNoY2hhbmdlJywgc2VsZi5vbkhhc2hDaGFuZ2UpO1xuXHRcdFx0fSk7XG5cblxuXHRcdFx0dmFyIHJldHVyblRvT3JpZ2luYWwgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2hhc2hSZXNldGVkID0gdHJ1ZTtcblx0XHRcdFx0aWYoIV9jbG9zZWRGcm9tVVJMKSB7XG5cblx0XHRcdFx0XHRpZihfdXJsQ2hhbmdlZE9uY2UpIHtcblx0XHRcdFx0XHRcdGhpc3RvcnkuYmFjaygpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGlmKF9pbml0aWFsSGFzaCkge1xuXHRcdFx0XHRcdFx0XHRfd2luZG93TG9jLmhhc2ggPSBfaW5pdGlhbEhhc2g7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZiAoX3N1cHBvcnRzUHVzaFN0YXRlKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyByZW1vdmUgaGFzaCBmcm9tIHVybCB3aXRob3V0IHJlZnJlc2hpbmcgaXQgb3Igc2Nyb2xsaW5nIHRvIHRvcFxuXHRcdFx0XHRcdFx0XHRcdGhpc3RvcnkucHVzaFN0YXRlKCcnLCBkb2N1bWVudC50aXRsZSwgIF93aW5kb3dMb2MucGF0aG5hbWUgKyBfd2luZG93TG9jLnNlYXJjaCApO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdF93aW5kb3dMb2MuaGFzaCA9ICcnO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2NsZWFuSGlzdG9yeVRpbWVvdXRzKCk7XG5cdFx0XHR9O1xuXG5cblx0XHRcdF9saXN0ZW4oJ3VuYmluZEV2ZW50cycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihfY2xvc2VkQnlTY3JvbGwpIHtcblx0XHRcdFx0XHQvLyBpZiBQaG90b1N3aXBlIGlzIGNsb3NlZCBieSBzY3JvbGwsIHdlIGdvIFwiYmFja1wiIGJlZm9yZSB0aGUgY2xvc2luZyBhbmltYXRpb24gc3RhcnRzXG5cdFx0XHRcdFx0Ly8gdGhpcyBpcyBkb25lIHRvIGtlZXAgdGhlIHNjcm9sbCBwb3NpdGlvblxuXHRcdFx0XHRcdHJldHVyblRvT3JpZ2luYWwoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRfbGlzdGVuKCdkZXN0cm95JywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKCFfaGFzaFJlc2V0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm5Ub09yaWdpbmFsKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0X2xpc3RlbignZmlyc3RVcGRhdGUnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2N1cnJlbnRJdGVtSW5kZXggPSBfcGFyc2VJdGVtSW5kZXhGcm9tVVJMKCkucGlkO1xuXHRcdFx0fSk7XG5cblx0XHRcdFxuXG5cdFx0XHRcblx0XHRcdHZhciBpbmRleCA9IF9pbml0aWFsSGFzaC5pbmRleE9mKCdwaWQ9Jyk7XG5cdFx0XHRpZihpbmRleCA+IC0xKSB7XG5cdFx0XHRcdF9pbml0aWFsSGFzaCA9IF9pbml0aWFsSGFzaC5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuXHRcdFx0XHRpZihfaW5pdGlhbEhhc2guc2xpY2UoLTEpID09PSAnJicpIHtcblx0XHRcdFx0XHRfaW5pdGlhbEhhc2ggPSBfaW5pdGlhbEhhc2guc2xpY2UoMCwgLTEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoX2lzT3BlbikgeyAvLyBoYXNuJ3QgZGVzdHJveWVkIHlldFxuXHRcdFx0XHRcdGZyYW1ld29yay5iaW5kKHdpbmRvdywgJ2hhc2hjaGFuZ2UnLCBzZWxmLm9uSGFzaENoYW5nZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIDQwKTtcblx0XHRcdFxuXHRcdH0sXG5cdFx0b25IYXNoQ2hhbmdlOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0aWYoX2dldEhhc2goKSA9PT0gX2luaXRpYWxIYXNoKSB7XG5cblx0XHRcdFx0X2Nsb3NlZEZyb21VUkwgPSB0cnVlO1xuXHRcdFx0XHRzZWxmLmNsb3NlKCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGlmKCFfaGFzaENoYW5nZWRCeVNjcmlwdCkge1xuXG5cdFx0XHRcdF9oYXNoQ2hhbmdlZEJ5SGlzdG9yeSA9IHRydWU7XG5cdFx0XHRcdHNlbGYuZ29UbyggX3BhcnNlSXRlbUluZGV4RnJvbVVSTCgpLnBpZCApO1xuXHRcdFx0XHRfaGFzaENoYW5nZWRCeUhpc3RvcnkgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdH0sXG5cdFx0dXBkYXRlVVJMOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRGVsYXkgdGhlIHVwZGF0ZSBvZiBVUkwsIHRvIGF2b2lkIGxhZyBkdXJpbmcgdHJhbnNpdGlvbiwgXG5cdFx0XHQvLyBhbmQgdG8gbm90IHRvIHRyaWdnZXIgYWN0aW9ucyBsaWtlIFwicmVmcmVzaCBwYWdlIHNvdW5kXCIgb3IgXCJibGlua2luZyBmYXZpY29uXCIgdG8gb2Z0ZW5cblx0XHRcdFxuXHRcdFx0X2NsZWFuSGlzdG9yeVRpbWVvdXRzKCk7XG5cdFx0XHRcblxuXHRcdFx0aWYoX2hhc2hDaGFuZ2VkQnlIaXN0b3J5KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYoIV9oaXN0b3J5Q2hhbmdlZCkge1xuXHRcdFx0XHRfdXBkYXRlSGFzaCgpOyAvLyBmaXJzdCB0aW1lXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfaGlzdG9yeVVwZGF0ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KF91cGRhdGVIYXNoLCA4MDApO1xuXHRcdFx0fVxuXHRcdH1cblx0XG5cdH1cbn0pO1xuXG5cbi8qPj5oaXN0b3J5Ki9cblx0ZnJhbWV3b3JrLmV4dGVuZChzZWxmLCBwdWJsaWNNZXRob2RzKTsgfTtcblx0cmV0dXJuIFBob3RvU3dpcGU7XG59KTsiLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gUGx5clxuLy8gcGx5ci5qcyB2Mi4wLjEwXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2Vsei9wbHlyXG4vLyBMaWNlbnNlOiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBDcmVkaXRzOiBodHRwOi8vcGF5cGFsLmdpdGh1Yi5pby9hY2Nlc3NpYmxlLWh0bWw1LXZpZGVvLXBsYXllci9cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbjsoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICAvKmdsb2JhbCBkZWZpbmUsbW9kdWxlKi9cblxuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIE5vZGUsIENvbW1vbkpTLWxpa2VcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJvb3QsIGRvY3VtZW50KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTURcbiAgICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWN0b3J5KHJvb3QsIGRvY3VtZW50KTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5wbHlyID0gZmFjdG9yeShyb290LCBkb2N1bWVudCk7XG4gICAgfVxufSh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBHbG9iYWxzXG4gICAgdmFyIGZ1bGxzY3JlZW4sXG4gICAgc2Nyb2xsID0geyB4OiAwLCB5OiAwIH0sXG5cbiAgICAvLyBEZWZhdWx0IGNvbmZpZ1xuICAgIGRlZmF1bHRzID0ge1xuICAgICAgICBlbmFibGVkOiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBkZWJ1ZzogICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgYXV0b3BsYXk6ICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgIGxvb3A6ICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICBzZWVrVGltZTogICAgICAgICAgICAgICAxMCxcbiAgICAgICAgdm9sdW1lOiAgICAgICAgICAgICAgICAgMTAsXG4gICAgICAgIHZvbHVtZU1pbjogICAgICAgICAgICAgIDAsXG4gICAgICAgIHZvbHVtZU1heDogICAgICAgICAgICAgIDEwLFxuICAgICAgICB2b2x1bWVTdGVwOiAgICAgICAgICAgICAxLFxuICAgICAgICBkdXJhdGlvbjogICAgICAgICAgICAgICBudWxsLFxuICAgICAgICBkaXNwbGF5RHVyYXRpb246ICAgICAgICB0cnVlLFxuICAgICAgICBsb2FkU3ByaXRlOiAgICAgICAgICAgICB0cnVlLFxuICAgICAgICBpY29uUHJlZml4OiAgICAgICAgICAgICAncGx5cicsXG4gICAgICAgIGljb25Vcmw6ICAgICAgICAgICAgICAgICdodHRwczovL2Nkbi5wbHlyLmlvLzIuMC4xMC9wbHlyLnN2ZycsXG4gICAgICAgIGNsaWNrVG9QbGF5OiAgICAgICAgICAgIHRydWUsXG4gICAgICAgIGhpZGVDb250cm9sczogICAgICAgICAgIHRydWUsXG4gICAgICAgIHNob3dQb3N0ZXJPbkVuZDogICAgICAgIGZhbHNlLFxuICAgICAgICBkaXNhYmxlQ29udGV4dE1lbnU6ICAgICB0cnVlLFxuICAgICAgICBrZXlib2FyZFNob3JjdXRzOiAgICAgICB7XG4gICAgICAgICAgICBmb2N1c2VkOiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBnbG9iYWw6ICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHRvb2x0aXBzOiB7XG4gICAgICAgICAgICBjb250cm9sczogICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgc2VlazogICAgICAgICAgICAgICB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdG9yczoge1xuICAgICAgICAgICAgaHRtbDU6ICAgICAgICAgICAgICAndmlkZW8sIGF1ZGlvJyxcbiAgICAgICAgICAgIGVtYmVkOiAgICAgICAgICAgICAgJ1tkYXRhLXR5cGVdJyxcbiAgICAgICAgICAgIGVkaXRhYmxlOiAgICAgICAgICAgJ2lucHV0LCB0ZXh0YXJlYSwgc2VsZWN0LCBbY29udGVudGVkaXRhYmxlXScsXG4gICAgICAgICAgICBjb250YWluZXI6ICAgICAgICAgICcucGx5cicsXG4gICAgICAgICAgICBjb250cm9sczoge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHdyYXBwZXI6ICAgICAgICAnLnBseXJfX2NvbnRyb2xzJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhYmVsczogICAgICAgICAgICAgJ1tkYXRhLXBseXJdJyxcbiAgICAgICAgICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgICAgICAgICBzZWVrOiAgICAgICAgICAgJ1tkYXRhLXBseXI9XCJzZWVrXCJdJyxcbiAgICAgICAgICAgICAgICBwbGF5OiAgICAgICAgICAgJ1tkYXRhLXBseXI9XCJwbGF5XCJdJyxcbiAgICAgICAgICAgICAgICBwYXVzZTogICAgICAgICAgJ1tkYXRhLXBseXI9XCJwYXVzZVwiXScsXG4gICAgICAgICAgICAgICAgcmVzdGFydDogICAgICAgICdbZGF0YS1wbHlyPVwicmVzdGFydFwiXScsXG4gICAgICAgICAgICAgICAgcmV3aW5kOiAgICAgICAgICdbZGF0YS1wbHlyPVwicmV3aW5kXCJdJyxcbiAgICAgICAgICAgICAgICBmb3J3YXJkOiAgICAgICAgJ1tkYXRhLXBseXI9XCJmYXN0LWZvcndhcmRcIl0nLFxuICAgICAgICAgICAgICAgIG11dGU6ICAgICAgICAgICAnW2RhdGEtcGx5cj1cIm11dGVcIl0nLFxuICAgICAgICAgICAgICAgIGNhcHRpb25zOiAgICAgICAnW2RhdGEtcGx5cj1cImNhcHRpb25zXCJdJyxcbiAgICAgICAgICAgICAgICBmdWxsc2NyZWVuOiAgICAgJ1tkYXRhLXBseXI9XCJmdWxsc2NyZWVuXCJdJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHZvbHVtZToge1xuICAgICAgICAgICAgICAgIGlucHV0OiAgICAgICAgICAnW2RhdGEtcGx5cj1cInZvbHVtZVwiXScsXG4gICAgICAgICAgICAgICAgZGlzcGxheTogICAgICAgICcucGx5cl9fdm9sdW1lLS1kaXNwbGF5J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb2dyZXNzOiB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiAgICAgICcucGx5cl9fcHJvZ3Jlc3MnLFxuICAgICAgICAgICAgICAgIGJ1ZmZlcjogICAgICAgICAnLnBseXJfX3Byb2dyZXNzLS1idWZmZXInLFxuICAgICAgICAgICAgICAgIHBsYXllZDogICAgICAgICAnLnBseXJfX3Byb2dyZXNzLS1wbGF5ZWQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2FwdGlvbnM6ICAgICAgICAgICAnLnBseXJfX2NhcHRpb25zJyxcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lOiAgICAgICAgJy5wbHlyX190aW1lLS1jdXJyZW50JyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAgICAgICAgICAgJy5wbHlyX190aW1lLS1kdXJhdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgY2xhc3Nlczoge1xuICAgICAgICAgICAgc2V0dXA6ICAgICAgICAgICAgICAncGx5ci0tc2V0dXAnLFxuICAgICAgICAgICAgcmVhZHk6ICAgICAgICAgICAgICAncGx5ci0tcmVhZHknLFxuICAgICAgICAgICAgdmlkZW9XcmFwcGVyOiAgICAgICAncGx5cl9fdmlkZW8td3JhcHBlcicsXG4gICAgICAgICAgICBlbWJlZFdyYXBwZXI6ICAgICAgICdwbHlyX192aWRlby1lbWJlZCcsXG4gICAgICAgICAgICB0eXBlOiAgICAgICAgICAgICAgICdwbHlyLS17MH0nLFxuICAgICAgICAgICAgc3RvcHBlZDogICAgICAgICAgICAncGx5ci0tc3RvcHBlZCcsXG4gICAgICAgICAgICBwbGF5aW5nOiAgICAgICAgICAgICdwbHlyLS1wbGF5aW5nJyxcbiAgICAgICAgICAgIG11dGVkOiAgICAgICAgICAgICAgJ3BseXItLW11dGVkJyxcbiAgICAgICAgICAgIGxvYWRpbmc6ICAgICAgICAgICAgJ3BseXItLWxvYWRpbmcnLFxuICAgICAgICAgICAgaG92ZXI6ICAgICAgICAgICAgICAncGx5ci0taG92ZXInLFxuICAgICAgICAgICAgdG9vbHRpcDogICAgICAgICAgICAncGx5cl9fdG9vbHRpcCcsXG4gICAgICAgICAgICBoaWRkZW46ICAgICAgICAgICAgICdwbHlyX19zci1vbmx5JyxcbiAgICAgICAgICAgIGhpZGVDb250cm9sczogICAgICAgJ3BseXItLWhpZGUtY29udHJvbHMnLFxuICAgICAgICAgICAgaXNJb3M6ICAgICAgICAgICAgICAncGx5ci0taXMtaW9zJyxcbiAgICAgICAgICAgIGlzVG91Y2g6ICAgICAgICAgICAgJ3BseXItLWlzLXRvdWNoJyxcbiAgICAgICAgICAgIGNhcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogICAgICAgICdwbHlyLS1jYXB0aW9ucy1lbmFibGVkJyxcbiAgICAgICAgICAgICAgICBhY3RpdmU6ICAgICAgICAgJ3BseXItLWNhcHRpb25zLWFjdGl2ZSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdWxsc2NyZWVuOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogICAgICAgICdwbHlyLS1mdWxsc2NyZWVuLWVuYWJsZWQnLFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogICAgICAgICAncGx5ci0tZnVsbHNjcmVlbi1hY3RpdmUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGFiRm9jdXM6ICAgICAgICAgICAndGFiLWZvY3VzJ1xuICAgICAgICB9LFxuICAgICAgICBjYXB0aW9uczoge1xuICAgICAgICAgICAgZGVmYXVsdEFjdGl2ZTogICAgICBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBmdWxsc2NyZWVuOiB7XG4gICAgICAgICAgICBlbmFibGVkOiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBmYWxsYmFjazogICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBhbGxvd0F1ZGlvOiAgICAgICAgIGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHN0b3JhZ2U6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6ICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgIGtleTogICAgICAgICAgICAgICAgJ3BseXInXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xzOiAgICAgICAgICAgICAgIFsncGxheS1sYXJnZScsICdwbGF5JywgJ3Byb2dyZXNzJywgJ2N1cnJlbnQtdGltZScsICdtdXRlJywgJ3ZvbHVtZScsICdjYXB0aW9ucycsICdmdWxsc2NyZWVuJ10sXG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICAgIHJlc3RhcnQ6ICAgICAgICAgICAgJ1Jlc3RhcnQnLFxuICAgICAgICAgICAgcmV3aW5kOiAgICAgICAgICAgICAnUmV3aW5kIHtzZWVrdGltZX0gc2VjcycsXG4gICAgICAgICAgICBwbGF5OiAgICAgICAgICAgICAgICdQbGF5JyxcbiAgICAgICAgICAgIHBhdXNlOiAgICAgICAgICAgICAgJ1BhdXNlJyxcbiAgICAgICAgICAgIGZvcndhcmQ6ICAgICAgICAgICAgJ0ZvcndhcmQge3NlZWt0aW1lfSBzZWNzJyxcbiAgICAgICAgICAgIHBsYXllZDogICAgICAgICAgICAgJ3BsYXllZCcsXG4gICAgICAgICAgICBidWZmZXJlZDogICAgICAgICAgICdidWZmZXJlZCcsXG4gICAgICAgICAgICBjdXJyZW50VGltZTogICAgICAgICdDdXJyZW50IHRpbWUnLFxuICAgICAgICAgICAgZHVyYXRpb246ICAgICAgICAgICAnRHVyYXRpb24nLFxuICAgICAgICAgICAgdm9sdW1lOiAgICAgICAgICAgICAnVm9sdW1lJyxcbiAgICAgICAgICAgIHRvZ2dsZU11dGU6ICAgICAgICAgJ1RvZ2dsZSBNdXRlJyxcbiAgICAgICAgICAgIHRvZ2dsZUNhcHRpb25zOiAgICAgJ1RvZ2dsZSBDYXB0aW9ucycsXG4gICAgICAgICAgICB0b2dnbGVGdWxsc2NyZWVuOiAgICdUb2dnbGUgRnVsbHNjcmVlbicsXG4gICAgICAgICAgICBmcmFtZVRpdGxlOiAgICAgICAgICdQbGF5ZXIgZm9yIHt0aXRsZX0nXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGVzOiB7XG4gICAgICAgICAgICBlbWJlZDogICAgICAgICAgICAgIFsneW91dHViZScsICd2aW1lbycsICdzb3VuZGNsb3VkJ10sXG4gICAgICAgICAgICBodG1sNTogICAgICAgICAgICAgIFsndmlkZW8nLCAnYXVkaW8nXVxuICAgICAgICB9LFxuICAgICAgICAvLyBVUkxzXG4gICAgICAgIHVybHM6IHtcbiAgICAgICAgICAgIHZpbWVvOiB7XG4gICAgICAgICAgICAgICAgYXBpOiAgICAgICAgICAgICdodHRwczovL3BsYXllci52aW1lby5jb20vYXBpL3BsYXllci5qcycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeW91dHViZToge1xuICAgICAgICAgICAgICAgIGFwaTogICAgICAgICAgICAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vaWZyYW1lX2FwaSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzb3VuZGNsb3VkOiB7XG4gICAgICAgICAgICAgICAgYXBpOiAgICAgICAgICAgICdodHRwczovL3cuc291bmRjbG91ZC5jb20vcGxheWVyL2FwaS5qcydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgLy8gQ3VzdG9tIGNvbnRyb2wgbGlzdGVuZXJzXG4gICAgICAgIGxpc3RlbmVyczoge1xuICAgICAgICAgICAgc2VlazogICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcGxheTogICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcGF1c2U6ICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcmVzdGFydDogICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcmV3aW5kOiAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgZm9yd2FyZDogICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbXV0ZTogICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdm9sdW1lOiAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgY2FwdGlvbnM6ICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgZnVsbHNjcmVlbjogICAgICAgICBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIEV2ZW50cyB0byB3YXRjaCBvbiBIVE1MNSBtZWRpYSBlbGVtZW50c1xuICAgICAgICBldmVudHM6ICAgICAgICAgICAgICAgICBbJ3JlYWR5JywgJ2VuZGVkJywgJ3Byb2dyZXNzJywgJ3N0YWxsZWQnLCAncGxheWluZycsICd3YWl0aW5nJywgJ2NhbnBsYXknLCAnY2FucGxheXRocm91Z2gnLCAnbG9hZHN0YXJ0JywgJ2xvYWRlZGRhdGEnLCAnbG9hZGVkbWV0YWRhdGEnLCAndGltZXVwZGF0ZScsICd2b2x1bWVjaGFuZ2UnLCAncGxheScsICdwYXVzZScsICdlcnJvcicsICdzZWVraW5nJywgJ3NlZWtlZCcsICdlbXB0aWVkJ10sXG4gICAgICAgIC8vIExvZ2dpbmdcbiAgICAgICAgbG9nUHJlZml4OiAgICAgICAgICAgICAgJ1tQbHlyXSdcbiAgICB9O1xuXG4gICAgLy8gQ3JlZGl0czogaHR0cDovL3BheXBhbC5naXRodWIuaW8vYWNjZXNzaWJsZS1odG1sNS12aWRlby1wbGF5ZXIvXG4gICAgLy8gVW5mb3J0dW5hdGVseSwgZHVlIHRvIG1peGVkIHN1cHBvcnQsIFVBIHNuaWZmaW5nIGlzIHJlcXVpcmVkXG4gICAgZnVuY3Rpb24gX2Jyb3dzZXJTbmlmZigpIHtcbiAgICAgICAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudCxcbiAgICAgICAgICAgIG5hbWUgPSBuYXZpZ2F0b3IuYXBwTmFtZSxcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gJycgKyBwYXJzZUZsb2F0KG5hdmlnYXRvci5hcHBWZXJzaW9uKSxcbiAgICAgICAgICAgIG1ham9yVmVyc2lvbiA9IHBhcnNlSW50KG5hdmlnYXRvci5hcHBWZXJzaW9uLCAxMCksXG4gICAgICAgICAgICBuYW1lT2Zmc2V0LFxuICAgICAgICAgICAgdmVyT2Zmc2V0LFxuICAgICAgICAgICAgaXgsXG4gICAgICAgICAgICBpc0lFID0gZmFsc2UsXG4gICAgICAgICAgICBpc0ZpcmVmb3ggPSBmYWxzZSxcbiAgICAgICAgICAgIGlzQ2hyb21lID0gZmFsc2UsXG4gICAgICAgICAgICBpc1NhZmFyaSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICgobmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZignV2luZG93cyBOVCcpICE9PSAtMSkgJiYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoJ3J2OjExJykgIT09IC0xKSkge1xuICAgICAgICAgICAgLy8gTVNJRSAxMVxuICAgICAgICAgICAgaXNJRSA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gJ0lFJztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gJzExJztcbiAgICAgICAgfSBlbHNlIGlmICgodmVyT2Zmc2V0ID0gdWEuaW5kZXhPZignTVNJRScpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIE1TSUVcbiAgICAgICAgICAgIGlzSUUgPSB0cnVlO1xuICAgICAgICAgICAgbmFtZSA9ICdJRSc7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9IHVhLnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA1KTtcbiAgICAgICAgfSBlbHNlIGlmICgodmVyT2Zmc2V0ID0gdWEuaW5kZXhPZignQ2hyb21lJykpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gQ2hyb21lXG4gICAgICAgICAgICBpc0Nocm9tZSA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gJ0Nocm9tZSc7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9IHVhLnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA3KTtcbiAgICAgICAgfSBlbHNlIGlmICgodmVyT2Zmc2V0ID0gdWEuaW5kZXhPZignU2FmYXJpJykpICE9PSAtMSkge1xuICAgICAgICAgICAgLy8gU2FmYXJpXG4gICAgICAgICAgICBpc1NhZmFyaSA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gJ1NhZmFyaSc7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9IHVhLnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA3KTtcbiAgICAgICAgICAgIGlmICgodmVyT2Zmc2V0ID0gdWEuaW5kZXhPZignVmVyc2lvbicpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBmdWxsVmVyc2lvbiA9IHVhLnN1YnN0cmluZyh2ZXJPZmZzZXQgKyA4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgodmVyT2Zmc2V0ID0gdWEuaW5kZXhPZignRmlyZWZveCcpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIEZpcmVmb3hcbiAgICAgICAgICAgIGlzRmlyZWZveCA9IHRydWU7XG4gICAgICAgICAgICBuYW1lID0gJ0ZpcmVmb3gnO1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSB1YS5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgOCk7XG4gICAgICAgIH0gZWxzZSBpZiAoKG5hbWVPZmZzZXQgPSB1YS5sYXN0SW5kZXhPZignICcpICsgMSkgPCAodmVyT2Zmc2V0ID0gdWEubGFzdEluZGV4T2YoJy8nKSkpIHtcbiAgICAgICAgICAgIC8vIEluIG1vc3Qgb3RoZXIgYnJvd3NlcnMsICduYW1lL3ZlcnNpb24nIGlzIGF0IHRoZSBlbmQgb2YgdXNlckFnZW50XG4gICAgICAgICAgICBuYW1lID0gdWEuc3Vic3RyaW5nKG5hbWVPZmZzZXQsdmVyT2Zmc2V0KTtcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDEpO1xuXG4gICAgICAgICAgICBpZiAobmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICBuYW1lID0gbmF2aWdhdG9yLmFwcE5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmltIHRoZSBmdWxsVmVyc2lvbiBzdHJpbmcgYXQgc2VtaWNvbG9uL3NwYWNlIGlmIHByZXNlbnRcbiAgICAgICAgaWYgKChpeCA9IGZ1bGxWZXJzaW9uLmluZGV4T2YoJzsnKSkgIT09IC0xKSB7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9IGZ1bGxWZXJzaW9uLnN1YnN0cmluZygwLCBpeCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChpeCA9IGZ1bGxWZXJzaW9uLmluZGV4T2YoJyAnKSkgIT09IC0xKSB7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9IGZ1bGxWZXJzaW9uLnN1YnN0cmluZygwLCBpeCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgbWFqb3IgdmVyc2lvblxuICAgICAgICBtYWpvclZlcnNpb24gPSBwYXJzZUludCgnJyArIGZ1bGxWZXJzaW9uLCAxMCk7XG4gICAgICAgIGlmIChpc05hTihtYWpvclZlcnNpb24pKSB7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9ICcnICsgcGFyc2VGbG9hdChuYXZpZ2F0b3IuYXBwVmVyc2lvbik7XG4gICAgICAgICAgICBtYWpvclZlcnNpb24gPSBwYXJzZUludChuYXZpZ2F0b3IuYXBwVmVyc2lvbiwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV0dXJuIGRhdGFcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6ICAgICAgIG5hbWUsXG4gICAgICAgICAgICB2ZXJzaW9uOiAgICBtYWpvclZlcnNpb24sXG4gICAgICAgICAgICBpc0lFOiAgICAgICBpc0lFLFxuICAgICAgICAgICAgaXNGaXJlZm94OiAgaXNGaXJlZm94LFxuICAgICAgICAgICAgaXNDaHJvbWU6ICAgaXNDaHJvbWUsXG4gICAgICAgICAgICBpc1NhZmFyaTogICBpc1NhZmFyaSxcbiAgICAgICAgICAgIGlzSW9zOiAgICAgIC8oaVBhZHxpUGhvbmV8aVBvZCkvZy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSksXG4gICAgICAgICAgICBpc1RvdWNoOiAgICAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbWltZSB0eXBlIHN1cHBvcnQgYWdhaW5zdCBhIHBsYXllciBpbnN0YW5jZVxuICAgIC8vIENyZWRpdHM6IGh0dHA6Ly9kaXZlaW50b2h0bWw1LmluZm8vZXZlcnl0aGluZy5odG1sXG4gICAgLy8gUmVsYXRlZDogaHR0cDovL3d3dy5sZWFuYmFja3BseXIuY29tL3Rlc3QvaDVtdC5odG1sXG4gICAgZnVuY3Rpb24gX3N1cHBvcnRNaW1lKHBseXIsIG1pbWVUeXBlKSB7XG4gICAgICAgIHZhciBtZWRpYSA9IHBseXIubWVkaWE7XG5cbiAgICAgICAgaWYgKHBseXIudHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgLy8gQ2hlY2sgdHlwZVxuICAgICAgICAgICAgc3dpdGNoIChtaW1lVHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvL3dlYm0nOiAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgndmlkZW8vd2VibTsgY29kZWNzPVwidnA4LCB2b3JiaXNcIicpLnJlcGxhY2UoL25vLywgJycpKTtcbiAgICAgICAgICAgICAgICBjYXNlICd2aWRlby9tcDQnOiAgICByZXR1cm4gISEobWVkaWEuY2FuUGxheVR5cGUgJiYgbWVkaWEuY2FuUGxheVR5cGUoJ3ZpZGVvL21wNDsgY29kZWNzPVwiYXZjMS40MkUwMUUsIG1wNGEuNDAuMlwiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpZGVvL29nZyc6ICAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgndmlkZW8vb2dnOyBjb2RlY3M9XCJ0aGVvcmFcIicpLnJlcGxhY2UoL25vLywgJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwbHlyLnR5cGUgPT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIHR5cGVcbiAgICAgICAgICAgIHN3aXRjaCAobWltZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdhdWRpby9tcGVnJzogICByZXR1cm4gISEobWVkaWEuY2FuUGxheVR5cGUgJiYgbWVkaWEuY2FuUGxheVR5cGUoJ2F1ZGlvL21wZWc7JykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvL29nZyc6ICAgIHJldHVybiAhIShtZWRpYS5jYW5QbGF5VHlwZSAmJiBtZWRpYS5jYW5QbGF5VHlwZSgnYXVkaW8vb2dnOyBjb2RlY3M9XCJ2b3JiaXNcIicpLnJlcGxhY2UoL25vLywgJycpKTtcbiAgICAgICAgICAgICAgICBjYXNlICdhdWRpby93YXYnOiAgICByZXR1cm4gISEobWVkaWEuY2FuUGxheVR5cGUgJiYgbWVkaWEuY2FuUGxheVR5cGUoJ2F1ZGlvL3dhdjsgY29kZWNzPVwiMVwiJykucmVwbGFjZSgvbm8vLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgd2UgZ290IHRoaXMgZmFyLCB3ZSdyZSBzdHVmZmVkXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBJbmplY3QgYSBzY3JpcHRcbiAgICBmdW5jdGlvbiBfaW5qZWN0U2NyaXB0KHNvdXJjZSkge1xuICAgICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc2NyaXB0W3NyYz1cIicgKyBzb3VyY2UgKyAnXCJdJykubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgIHRhZy5zcmMgPSBzb3VyY2U7XG4gICAgICAgIHZhciBmaXJzdFNjcmlwdFRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgICAgICAgZmlyc3RTY3JpcHRUYWcucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGFnLCBmaXJzdFNjcmlwdFRhZyk7XG4gICAgfVxuXG4gICAgLy8gRWxlbWVudCBleGlzdHMgaW4gYW4gYXJyYXlcbiAgICBmdW5jdGlvbiBfaW5BcnJheShoYXlzdGFjaywgbmVlZGxlKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiAmJiAoaGF5c3RhY2suaW5kZXhPZihuZWVkbGUpICE9PSAtMSk7XG4gICAgfVxuXG4gICAgLy8gUmVwbGFjZSBhbGxcbiAgICBmdW5jdGlvbiBfcmVwbGFjZUFsbChzdHJpbmcsIGZpbmQsIHJlcGxhY2UpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKG5ldyBSZWdFeHAoZmluZC5yZXBsYWNlKC8oWy4qKz9cXF49IToke30oKXxcXFtcXF1cXC9cXFxcXSkvZywgJ1xcXFwkMScpLCAnZycpLCByZXBsYWNlKTtcbiAgICB9XG5cbiAgICAvLyBXcmFwIGFuIGVsZW1lbnRcbiAgICBmdW5jdGlvbiBfd3JhcChlbGVtZW50cywgd3JhcHBlcikge1xuICAgICAgICAvLyBDb252ZXJ0IGBlbGVtZW50c2AgdG8gYW4gYXJyYXksIGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgaWYgKCFlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExvb3BzIGJhY2t3YXJkcyB0byBwcmV2ZW50IGhhdmluZyB0byBjbG9uZSB0aGUgd3JhcHBlciBvbiB0aGVcbiAgICAgICAgLy8gZmlyc3QgZWxlbWVudCAoc2VlIGBjaGlsZGAgYmVsb3cpLlxuICAgICAgICBmb3IgKHZhciBpID0gZWxlbWVudHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCAgID0gKGkgPiAwKSA/IHdyYXBwZXIuY2xvbmVOb2RlKHRydWUpIDogd3JhcHBlcjtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudHNbaV07XG5cbiAgICAgICAgICAgIC8vIENhY2hlIHRoZSBjdXJyZW50IHBhcmVudCBhbmQgc2libGluZy5cbiAgICAgICAgICAgIHZhciBwYXJlbnQgID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBlbGVtZW50Lm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAvLyBXcmFwIHRoZSBlbGVtZW50IChpcyBhdXRvbWF0aWNhbGx5IHJlbW92ZWQgZnJvbSBpdHMgY3VycmVudFxuICAgICAgICAgICAgLy8gcGFyZW50KS5cbiAgICAgICAgICAgIGNoaWxkLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBoYWQgYSBzaWJsaW5nLCBpbnNlcnQgdGhlIHdyYXBwZXIgYmVmb3JlXG4gICAgICAgICAgICAvLyB0aGUgc2libGluZyB0byBtYWludGFpbiB0aGUgSFRNTCBzdHJ1Y3R1cmU7IG90aGVyd2lzZSwganVzdFxuICAgICAgICAgICAgLy8gYXBwZW5kIGl0IHRvIHRoZSBwYXJlbnQuXG4gICAgICAgICAgICBpZiAoc2libGluZykge1xuICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHNpYmxpbmcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVbndyYXAgYW4gZWxlbWVudFxuICAgIC8vIGh0dHA6Ly9wbGFpbmpzLmNvbS9qYXZhc2NyaXB0L21hbmlwdWxhdGlvbi91bndyYXAtYS1kb20tZWxlbWVudC0zNS9cbiAgICAvKmZ1bmN0aW9uIF91bndyYXAod3JhcHBlcikge1xuICAgICAgICAvLyBHZXQgdGhlIGVsZW1lbnQncyBwYXJlbnQgbm9kZVxuICAgICAgICB2YXIgcGFyZW50ID0gd3JhcHBlci5wYXJlbnROb2RlO1xuXG4gICAgICAgIC8vIE1vdmUgYWxsIGNoaWxkcmVuIG91dCBvZiB0aGUgZWxlbWVudFxuICAgICAgICB3aGlsZSAod3JhcHBlci5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHdyYXBwZXIuZmlyc3RDaGlsZCwgd3JhcHBlcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgdGhlIGVtcHR5IGVsZW1lbnRcbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHdyYXBwZXIpO1xuICAgIH0qL1xuXG4gICAgLy8gUmVtb3ZlIGFuIGVsZW1lbnRcbiAgICBmdW5jdGlvbiBfcmVtb3ZlKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIFByZXBlbmQgY2hpbGRcbiAgICBmdW5jdGlvbiBfcHJlcGVuZENoaWxkKHBhcmVudCwgZWxlbWVudCkge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIHBhcmVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgYXR0cmlidXRlc1xuICAgIGZ1bmN0aW9uIF9zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgKF9pcy5ib29sZWFuKGF0dHJpYnV0ZXNba2V5XSkgJiYgYXR0cmlidXRlc1trZXldKSA/ICcnIDogYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluc2VydCBhIEhUTUwgZWxlbWVudFxuICAgIGZ1bmN0aW9uIF9pbnNlcnRFbGVtZW50KHR5cGUsIHBhcmVudCwgYXR0cmlidXRlcykge1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgPGVsZW1lbnQ+XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcblxuICAgICAgICAvLyBTZXQgYWxsIHBhc3NlZCBhdHRyaWJ1dGVzXG4gICAgICAgIF9zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpO1xuXG4gICAgICAgIC8vIEluamVjdCB0aGUgbmV3IGVsZW1lbnRcbiAgICAgICAgX3ByZXBlbmRDaGlsZChwYXJlbnQsIGVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIEdldCBhIGNsYXNzbmFtZSBmcm9tIHNlbGVjdG9yXG4gICAgZnVuY3Rpb24gX2dldENsYXNzbmFtZShzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IucmVwbGFjZSgnLicsICcnKTtcbiAgICB9XG5cbiAgICAvLyBUb2dnbGUgY2xhc3Mgb24gYW4gZWxlbWVudFxuICAgIGZ1bmN0aW9uIF90b2dnbGVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUsIHN0YXRlKSB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdFtzdGF0ZSA/ICdhZGQnIDogJ3JlbW92ZSddKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gKCcgJyArIGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnKS5yZXBsYWNlKC9cXHMrL2csICcgJykucmVwbGFjZSgnICcgKyBjbGFzc05hbWUgKyAnICcsICcnKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IG5hbWUgKyAoc3RhdGUgPyAnICcgKyBjbGFzc05hbWUgOiAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYXMgY2xhc3MgbmFtZVxuICAgIGZ1bmN0aW9uIF9oYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnKFxcXFxzfF4pJyArIGNsYXNzTmFtZSArICcoXFxcXHN8JCknKS50ZXN0KGVsZW1lbnQuY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gRWxlbWVudCBtYXRjaGVzIHNlbGVjdG9yXG4gICAgZnVuY3Rpb24gX21hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIHAgPSBFbGVtZW50LnByb3RvdHlwZTtcblxuICAgICAgICB2YXIgZiA9IHAubWF0Y2hlcyB8fCBwLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBwLm1vek1hdGNoZXNTZWxlY3RvciB8fCBwLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXS5pbmRleE9mLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzKSwgdGhpcykgIT09IC0xO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpO1xuICAgIH1cblxuICAgIC8vIEJpbmQgYWxvbmcgd2l0aCBjdXN0b20gaGFuZGxlclxuICAgIGZ1bmN0aW9uIF9wcm94eUxpc3RlbmVyKGVsZW1lbnQsIGV2ZW50TmFtZSwgdXNlckxpc3RlbmVyLCBkZWZhdWx0TGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgX29uKGVsZW1lbnQsIGV2ZW50TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICh1c2VyTGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICB1c2VyTGlzdGVuZXIuYXBwbHkoZWxlbWVudCwgW2V2ZW50XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0TGlzdGVuZXIuYXBwbHkoZWxlbWVudCwgW2V2ZW50XSk7XG4gICAgICAgIH0sIHVzZUNhcHR1cmUpO1xuICAgIH1cblxuICAgIC8vIFRvZ2dsZSBldmVudCBsaXN0ZW5lclxuICAgIGZ1bmN0aW9uIF90b2dnbGVMaXN0ZW5lcihlbGVtZW50LCBldmVudHMsIGNhbGxiYWNrLCB0b2dnbGUsIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgdmFyIGV2ZW50TGlzdCA9IGV2ZW50cy5zcGxpdCgnICcpO1xuXG4gICAgICAgIC8vIFdoZXRoZXIgdGhlIGxpc3RlbmVyIGlzIGEgY2FwdHVyaW5nIGxpc3RlbmVyIG9yIG5vdFxuICAgICAgICAvLyBEZWZhdWx0IHRvIGZhbHNlXG4gICAgICAgIGlmICghX2lzLmJvb2xlYW4odXNlQ2FwdHVyZSkpIHtcbiAgICAgICAgICAgIHVzZUNhcHR1cmUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGEgbm9kZWxpc3QgaXMgcGFzc2VkLCBjYWxsIGl0c2VsZiBvbiBlYWNoIG5vZGVcbiAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBOb2RlTGlzdCkge1xuICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBlbGVtZW50Lmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRbeF0gaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVMaXN0ZW5lcihlbGVtZW50W3hdLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBhIHNpbmdsZSBub2RlIGlzIHBhc3NlZCwgYmluZCB0aGUgZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGVsZW1lbnRbdG9nZ2xlID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInXShldmVudExpc3RbaV0sIGNhbGxiYWNrLCB1c2VDYXB0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJpbmQgZXZlbnRcbiAgICBmdW5jdGlvbiBfb24oZWxlbWVudCwgZXZlbnRzLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgX3RvZ2dsZUxpc3RlbmVyKGVsZW1lbnQsIGV2ZW50cywgY2FsbGJhY2ssIHRydWUsIHVzZUNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVW5iaW5kIGV2ZW50XG4gICAgLypmdW5jdGlvbiBfb2ZmKGVsZW1lbnQsIGV2ZW50cywgY2FsbGJhY2ssIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIF90b2dnbGVMaXN0ZW5lcihlbGVtZW50LCBldmVudHMsIGNhbGxiYWNrLCBmYWxzZSwgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICB9Ki9cblxuICAgIC8vIFRyaWdnZXIgZXZlbnRcbiAgICBmdW5jdGlvbiBfZXZlbnQoZWxlbWVudCwgdHlwZSwgYnViYmxlcywgcHJvcGVydGllcykge1xuICAgICAgICAvLyBCYWlsIGlmIG5vIGVsZW1lbnRcbiAgICAgICAgaWYgKCFlbGVtZW50IHx8ICF0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IGJ1YmJsZXMgdG8gZmFsc2VcbiAgICAgICAgaWYgKCFfaXMuYm9vbGVhbihidWJibGVzKSkge1xuICAgICAgICAgICAgYnViYmxlcyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuZCBkaXNwYXRjaCB0aGUgZXZlbnRcbiAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KHR5cGUsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6ICAgIGJ1YmJsZXMsXG4gICAgICAgICAgICBkZXRhaWw6ICAgICBwcm9wZXJ0aWVzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIERpc3BhdGNoIHRoZSBldmVudFxuICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgIH1cblxuICAgIC8vIFRvZ2dsZSBhcmlhLXByZXNzZWQgc3RhdGUgb24gYSB0b2dnbGUgYnV0dG9uXG4gICAgLy8gaHR0cDovL3d3dy5zc2JiYXJ0Z3JvdXAuY29tL2Jsb2cvaG93LW5vdC10by1taXN1c2UtYXJpYS1zdGF0ZXMtcHJvcGVydGllcy1hbmQtcm9sZXNcbiAgICBmdW5jdGlvbiBfdG9nZ2xlU3RhdGUodGFyZ2V0LCBzdGF0ZSkge1xuICAgICAgICAvLyBCYWlsIGlmIG5vIHRhcmdldFxuICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHN0YXRlXG4gICAgICAgIHN0YXRlID0gKF9pcy5ib29sZWFuKHN0YXRlKSA/IHN0YXRlIDogIXRhcmdldC5nZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcpKTtcblxuICAgICAgICAvLyBTZXQgdGhlIGF0dHJpYnV0ZSBvbiB0YXJnZXRcbiAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgc3RhdGUpO1xuXG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICAvLyBHZXQgcGVyY2VudGFnZVxuICAgIGZ1bmN0aW9uIF9nZXRQZXJjZW50YWdlKGN1cnJlbnQsIG1heCkge1xuICAgICAgICBpZiAoY3VycmVudCA9PT0gMCB8fCBtYXggPT09IDAgfHwgaXNOYU4oY3VycmVudCkgfHwgaXNOYU4obWF4KSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgoY3VycmVudCAvIG1heCkgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgfVxuXG4gICAgLy8gRGVlcCBleHRlbmQvbWVyZ2UgZGVzdGluYXRpb24gb2JqZWN0IHdpdGggTiBtb3JlIG9iamVjdHNcbiAgICAvLyBodHRwOi8vYW5kcmV3ZHVwb250Lm5ldC8yMDA5LzA4LzI4L2RlZXAtZXh0ZW5kaW5nLW9iamVjdHMtaW4tamF2YXNjcmlwdC9cbiAgICAvLyBSZW1vdmVkIGNhbGwgdG8gYXJndW1lbnRzLmNhbGxlZSAodXNlZCBleHBsaWNpdCBmdW5jdGlvbiBuYW1lIGluc3RlYWQpXG4gICAgZnVuY3Rpb24gX2V4dGVuZCgpIHtcbiAgICAgICAgLy8gR2V0IGFyZ3VtZW50c1xuICAgICAgICB2YXIgb2JqZWN0cyA9IGFyZ3VtZW50cztcblxuICAgICAgICAvLyBCYWlsIGlmIG5vdGhpbmcgdG8gbWVyZ2VcbiAgICAgICAgaWYgKCFvYmplY3RzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV0dXJuIGZpcnN0IGlmIHNwZWNpZmllZCBidXQgbm90aGluZyB0byBtZXJnZVxuICAgICAgICBpZiAob2JqZWN0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3RzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlyc3Qgb2JqZWN0IGlzIHRoZSBkZXN0aW5hdGlvblxuICAgICAgICB2YXIgZGVzdGluYXRpb24gPSBBcnJheS5wcm90b3R5cGUuc2hpZnQuY2FsbChvYmplY3RzKSxcbiAgICAgICAgICAgIGxlbmd0aCAgICAgID0gb2JqZWN0cy5sZW5ndGg7XG5cbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBvYmplY3RzIHRvIG1lcmdlXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBvYmplY3RzW2ldO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlW3Byb3BlcnR5XSAmJiBzb3VyY2VbcHJvcGVydHldLmNvbnN0cnVjdG9yICYmIHNvdXJjZVtwcm9wZXJ0eV0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltwcm9wZXJ0eV0gPSBkZXN0aW5hdGlvbltwcm9wZXJ0eV0gfHwge307XG4gICAgICAgICAgICAgICAgICAgIF9leHRlbmQoZGVzdGluYXRpb25bcHJvcGVydHldLCBzb3VyY2VbcHJvcGVydHldKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltwcm9wZXJ0eV0gPSBzb3VyY2VbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayB2YXJpYWJsZSB0eXBlc1xuICAgIHZhciBfaXMgPSB7XG4gICAgICAgIG9iamVjdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YoaW5wdXQpID09PSAnb2JqZWN0JztcbiAgICAgICAgfSxcbiAgICAgICAgYXJyYXk6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgKHR5cGVvZihpbnB1dCkgPT09ICdvYmplY3QnICYmIGlucHV0LmNvbnN0cnVjdG9yID09PSBBcnJheSk7XG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlcjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiAodHlwZW9mKGlucHV0KSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKGlucHV0IC0gMCkgfHwgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgaW5wdXQuY29uc3RydWN0b3IgPT09IE51bWJlcikpO1xuICAgICAgICB9LFxuICAgICAgICBzdHJpbmc6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgfHwgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgaW5wdXQuY29uc3RydWN0b3IgPT09IFN0cmluZykpO1xuICAgICAgICB9LFxuICAgICAgICBib29sZWFuOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ2Jvb2xlYW4nO1xuICAgICAgICB9LFxuICAgICAgICBub2RlTGlzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiBpbnB1dCBpbnN0YW5jZW9mIE5vZGVMaXN0O1xuICAgICAgICB9LFxuICAgICAgICBodG1sRWxlbWVudDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiBpbnB1dCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIH0sXG4gICAgICAgIHVuZGVmaW5lZDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFBhcnNlIFlvdVR1YmUgSUQgZnJvbSB1cmxcbiAgICBmdW5jdGlvbiBfcGFyc2VZb3VUdWJlSWQodXJsKSB7XG4gICAgICAgIHZhciByZWdleCA9IC9eLiooeW91dHUuYmVcXC98dlxcL3x1XFwvXFx3XFwvfGVtYmVkXFwvfHdhdGNoXFw/dj18XFwmdj0pKFteI1xcJlxcP10qKS4qLztcbiAgICAgICAgcmV0dXJuICh1cmwubWF0Y2gocmVnZXgpKSA/IFJlZ0V4cC4kMiA6IHVybDtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSBWaW1lbyBJRCBmcm9tIHVybFxuICAgIGZ1bmN0aW9uIF9wYXJzZVZpbWVvSWQodXJsKSB7XG4gICAgICAgIHZhciByZWdleCA9IC9eLioodmltZW8uY29tXFwvfHZpZGVvXFwvKShcXGQrKS4qLztcbiAgICAgICAgcmV0dXJuICh1cmwubWF0Y2gocmVnZXgpKSA/IFJlZ0V4cC4kMiA6IHVybDtcbiAgICB9XG5cbiAgICAvLyBGdWxsc2NyZWVuIEFQSVxuICAgIGZ1bmN0aW9uIF9mdWxsc2NyZWVuKCkge1xuICAgICAgICB2YXIgZnVsbHNjcmVlbiA9IHtcbiAgICAgICAgICAgICAgICBzdXBwb3J0c0Z1bGxTY3JlZW46IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlzRnVsbFNjcmVlbjogZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0RnVsbFNjcmVlbjogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgICAgICBjYW5jZWxGdWxsU2NyZWVuOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW5FdmVudE5hbWU6ICcnLFxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJlZml4OiAnJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJyb3dzZXJQcmVmaXhlcyA9ICd3ZWJraXQgbyBtb3ogbXMga2h0bWwnLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIG5hdGl2ZSBzdXBwb3J0XG4gICAgICAgIGlmICghX2lzLnVuZGVmaW5lZChkb2N1bWVudC5jYW5jZWxGdWxsU2NyZWVuKSkge1xuICAgICAgICAgICAgZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4gPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGZ1bGxzY3JlZW4gc3VwcG9ydCBieSB2ZW5kb3IgcHJlZml4XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBicm93c2VyUHJlZml4ZXMubGVuZ3RoOyBpIDwgaWw7IGkrKyApIHtcbiAgICAgICAgICAgICAgICBmdWxsc2NyZWVuLnByZWZpeCA9IGJyb3dzZXJQcmVmaXhlc1tpXTtcblxuICAgICAgICAgICAgICAgIGlmICghX2lzLnVuZGVmaW5lZChkb2N1bWVudFtmdWxsc2NyZWVuLnByZWZpeCArICdDYW5jZWxGdWxsU2NyZWVuJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghX2lzLnVuZGVmaW5lZChkb2N1bWVudC5tc0V4aXRGdWxsc2NyZWVuKSAmJiBkb2N1bWVudC5tc0Z1bGxzY3JlZW5FbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgTVMgKHdoZW4gaXNuJ3QgaXQ/KVxuICAgICAgICAgICAgICAgICAgICBmdWxsc2NyZWVuLnByZWZpeCA9ICdtcyc7XG4gICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIG1ldGhvZHMgdG8gZG8gc29tZXRoaW5nIHVzZWZ1bFxuICAgICAgICBpZiAoZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4pIHtcbiAgICAgICAgICAgIC8vIFlldCBhZ2FpbiBNaWNyb3NvZnQgYXdlc29tZW5lc3MsXG4gICAgICAgICAgICAvLyBTb21ldGltZXMgdGhlIHByZWZpeCBpcyAnbXMnLCBzb21ldGltZXMgJ01TJyB0byBrZWVwIHlvdSBvbiB5b3VyIHRvZXNcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uZnVsbFNjcmVlbkV2ZW50TmFtZSA9IChmdWxsc2NyZWVuLnByZWZpeCA9PT0gJ21zJyA/ICdNU0Z1bGxzY3JlZW5DaGFuZ2UnIDogZnVsbHNjcmVlbi5wcmVmaXggKyAnZnVsbHNjcmVlbmNoYW5nZScpO1xuXG4gICAgICAgICAgICBmdWxsc2NyZWVuLmlzRnVsbFNjcmVlbiA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnByZWZpeCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50ID09PSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3onOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50Lm1vekZ1bGxTY3JlZW5FbGVtZW50ID09PSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50W3RoaXMucHJlZml4ICsgJ0Z1bGxzY3JlZW5FbGVtZW50J10gPT09IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4ucmVxdWVzdEZ1bGxTY3JlZW4gPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKF9pcy51bmRlZmluZWQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5wcmVmaXggPT09ICcnKSA/IGVsZW1lbnQucmVxdWVzdEZ1bGxTY3JlZW4oKSA6IGVsZW1lbnRbdGhpcy5wcmVmaXggKyAodGhpcy5wcmVmaXggPT09ICdtcycgPyAnUmVxdWVzdEZ1bGxzY3JlZW4nIDogJ1JlcXVlc3RGdWxsU2NyZWVuJyldKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZnVsbHNjcmVlbi5jYW5jZWxGdWxsU2NyZWVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnByZWZpeCA9PT0gJycpID8gZG9jdW1lbnQuY2FuY2VsRnVsbFNjcmVlbigpIDogZG9jdW1lbnRbdGhpcy5wcmVmaXggKyAodGhpcy5wcmVmaXggPT09ICdtcycgPyAnRXhpdEZ1bGxzY3JlZW4nIDogJ0NhbmNlbEZ1bGxTY3JlZW4nKV0oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmdWxsc2NyZWVuLmVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucHJlZml4ID09PSAnJykgPyBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCA6IGRvY3VtZW50W3RoaXMucHJlZml4ICsgJ0Z1bGxzY3JlZW5FbGVtZW50J107XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bGxzY3JlZW47XG4gICAgfVxuXG4gICAgLy8gTG9jYWwgc3RvcmFnZVxuICAgIHZhciBfc3RvcmFnZSA9IHtcbiAgICAgICAgc3VwcG9ydGVkOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoISgnbG9jYWxTdG9yYWdlJyBpbiB3aW5kb3cpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUcnkgdG8gdXNlIGl0IChpdCBtaWdodCBiZSBkaXNhYmxlZCwgZS5nLiB1c2VyIGlzIGluIHByaXZhdGUvcG9ybiBtb2RlKVxuICAgICAgICAgICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xMzFcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIHRlc3QgaXRlbVxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnX19fdGVzdCcsICdPSycpO1xuXG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSB0ZXN0IGl0ZW1cbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdfX190ZXN0Jyk7XG5cbiAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnX19fdGVzdCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdmFsdWUgbWF0Y2hlc1xuICAgICAgICAgICAgICAgIHJldHVybiAocmVzdWx0ID09PSAnT0snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pKClcbiAgICB9O1xuXG4gICAgLy8gUGxheWVyIGluc3RhbmNlXG4gICAgZnVuY3Rpb24gUGx5cihtZWRpYSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwbHlyID0gdGhpcyxcbiAgICAgICAgdGltZXJzID0ge30sXG4gICAgICAgIGFwaTtcblxuICAgICAgICAvLyBTZXQgbWVkaWFcbiAgICAgICAgcGx5ci5tZWRpYSA9IG1lZGlhO1xuICAgICAgICB2YXIgb3JpZ2luYWwgPSBtZWRpYS5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAgICAgLy8gVHJpZ2dlciBldmVudHMsIHdpdGggcGx5ciBpbnN0YW5jZSBwYXNzZWRcbiAgICAgICAgZnVuY3Rpb24gX3RyaWdnZXJFdmVudChlbGVtZW50LCB0eXBlLCBidWJibGVzLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBfZXZlbnQoZWxlbWVudCwgdHlwZSwgYnViYmxlcywgX2V4dGVuZCh7fSwgcHJvcGVydGllcywge1xuICAgICAgICAgICAgICAgIHBseXI6IGFwaVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVidWdnaW5nXG4gICAgICAgIGZ1bmN0aW9uIF9jb25zb2xlKHR5cGUsIGFyZ3MpIHtcbiAgICAgICAgICAgIGlmIChjb25maWcuZGVidWcgJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICAgICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoX2lzLnN0cmluZyhjb25maWcubG9nUHJlZml4KSAmJiBjb25maWcubG9nUHJlZml4Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBhcmdzLnVuc2hpZnQoY29uZmlnLmxvZ1ByZWZpeCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc29sZVt0eXBlXS5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgX2xvZyA9IGZ1bmN0aW9uKCkgeyBfY29uc29sZSgnbG9nJywgYXJndW1lbnRzKSB9LFxuICAgICAgICAgICAgX3dhcm4gPSBmdW5jdGlvbigpIHsgX2NvbnNvbGUoJ3dhcm4nLCBhcmd1bWVudHMpIH07XG5cbiAgICAgICAgLy8gTG9nIGNvbmZpZyBvcHRpb25zXG4gICAgICAgIF9sb2coJ0NvbmZpZycsIGNvbmZpZyk7XG5cbiAgICAgICAgLy8gR2V0IGljb24gVVJMXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRJY29uVXJsKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6ICAgICAgICBjb25maWcuaWNvblVybCxcbiAgICAgICAgICAgICAgICBhYnNvbHV0ZTogICAoY29uZmlnLmljb25VcmwuaW5kZXhPZihcImh0dHBcIikgPT09IDApIHx8IHBseXIuYnJvd3Nlci5pc0lFXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQnVpbGQgdGhlIGRlZmF1bHQgSFRNTFxuICAgICAgICBmdW5jdGlvbiBfYnVpbGRDb250cm9scygpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBodG1sIGFycmF5XG4gICAgICAgICAgICB2YXIgaHRtbCAgICAgICAgPSBbXSxcbiAgICAgICAgICAgICAgICBpY29uVXJsICAgICA9IF9nZXRJY29uVXJsKCksXG4gICAgICAgICAgICAgICAgaWNvblBhdGggICAgPSAoIWljb25VcmwuYWJzb2x1dGUgPyBpY29uVXJsLnVybCA6ICcnKSArICcjJyArIGNvbmZpZy5pY29uUHJlZml4O1xuXG4gICAgICAgICAgICAvLyBMYXJnZXIgb3ZlcmxhaWQgcGxheSBidXR0b25cbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdwbGF5LWxhcmdlJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJwbGF5XCIgY2xhc3M9XCJwbHlyX19wbGF5LWxhcmdlXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctcGxheVwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4ucGxheSArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBodG1sLnB1c2goJzxkaXYgY2xhc3M9XCJwbHlyX19jb250cm9sc1wiPicpO1xuXG4gICAgICAgICAgICAvLyBSZXN0YXJ0IGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ3Jlc3RhcnQnKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cInJlc3RhcnRcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1yZXN0YXJ0XCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5yZXN0YXJ0ICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJld2luZCBidXR0b25cbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdyZXdpbmQnKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cInJld2luZFwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLXJld2luZFwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4ucmV3aW5kICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFBsYXkgUGF1c2UgYnV0dG9uXG4gICAgICAgICAgICAvLyBUT0RPOiBUaGlzIHNob3VsZCBiZSBhIHRvZ2dsZSBidXR0b24gcmVhbGx5P1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ3BsYXknKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cInBsYXlcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1wbGF5XCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5wbGF5ICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cInBhdXNlXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctcGF1c2VcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnBhdXNlICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZhc3QgZm9yd2FyZCBidXR0b25cbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdmYXN0LWZvcndhcmQnKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cImZhc3QtZm9yd2FyZFwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLWZhc3QtZm9yd2FyZFwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4uZm9yd2FyZCArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQcm9ncmVzc1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ3Byb2dyZXNzJykpIHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goJzxzcGFuIGNsYXNzPVwicGx5cl9fcHJvZ3Jlc3NcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPGxhYmVsIGZvcj1cInNlZWt7aWR9XCIgY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+U2VlazwvbGFiZWw+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCBpZD1cInNlZWt7aWR9XCIgY2xhc3M9XCJwbHlyX19wcm9ncmVzcy0tc2Vla1wiIHR5cGU9XCJyYW5nZVwiIG1pbj1cIjBcIiBtYXg9XCIxMDBcIiBzdGVwPVwiMC4xXCIgdmFsdWU9XCIwXCIgZGF0YS1wbHlyPVwic2Vla1wiPicsXG4gICAgICAgICAgICAgICAgICAgICc8cHJvZ3Jlc3MgY2xhc3M9XCJwbHlyX19wcm9ncmVzcy0tcGxheWVkXCIgbWF4PVwiMTAwXCIgdmFsdWU9XCIwXCIgcm9sZT1cInByZXNlbnRhdGlvblwiPjwvcHJvZ3Jlc3M+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxwcm9ncmVzcyBjbGFzcz1cInBseXJfX3Byb2dyZXNzLS1idWZmZXJcIiBtYXg9XCIxMDBcIiB2YWx1ZT1cIjBcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuPjA8L3NwYW4+JSAnICsgY29uZmlnLmkxOG4uYnVmZmVyZWQsXG4gICAgICAgICAgICAgICAgICAgICc8L3Byb2dyZXNzPicpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2VlayB0b29sdGlwXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy50b29sdGlwcy5zZWVrKSB7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHNwYW4gY2xhc3M9XCJwbHlyX190b29sdGlwXCI+MDA6MDA8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2xvc2VcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goJzwvc3Bhbj4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWVkaWEgY3VycmVudCB0aW1lIGRpc3BsYXlcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdjdXJyZW50LXRpbWUnKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fdGltZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLmN1cnJlbnRUaW1lICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fdGltZS0tY3VycmVudFwiPjAwOjAwPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L3NwYW4+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1lZGlhIGR1cmF0aW9uIGRpc3BsYXlcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdkdXJhdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX190aW1lXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4uZHVyYXRpb24gKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX190aW1lLS1kdXJhdGlvblwiPjAwOjAwPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L3NwYW4+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRvZ2dsZSBtdXRlIGJ1dHRvblxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ211dGUnKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cIm11dGVcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmcgY2xhc3M9XCJpY29uLS1tdXRlZFwiPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctbXV0ZWRcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLXZvbHVtZVwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4udG9nZ2xlTXV0ZSArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBWb2x1bWUgcmFuZ2UgY29udHJvbFxuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy5jb250cm9scywgJ3ZvbHVtZScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX192b2x1bWVcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBmb3I9XCJ2b2x1bWV7aWR9XCIgY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnZvbHVtZSArICc8L2xhYmVsPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGlkPVwidm9sdW1le2lkfVwiIGNsYXNzPVwicGx5cl9fdm9sdW1lLS1pbnB1dFwiIHR5cGU9XCJyYW5nZVwiIG1pbj1cIicgKyBjb25maWcudm9sdW1lTWluICsgJ1wiIG1heD1cIicgKyBjb25maWcudm9sdW1lTWF4ICsgJ1wiIHZhbHVlPVwiJyArIGNvbmZpZy52b2x1bWUgKyAnXCIgZGF0YS1wbHlyPVwidm9sdW1lXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8cHJvZ3Jlc3MgY2xhc3M9XCJwbHlyX192b2x1bWUtLWRpc3BsYXlcIiBtYXg9XCInICsgY29uZmlnLnZvbHVtZU1heCArICdcIiB2YWx1ZT1cIicgKyBjb25maWcudm9sdW1lTWluICsgJ1wiIHJvbGU9XCJwcmVzZW50YXRpb25cIj48L3Byb2dyZXNzPicsXG4gICAgICAgICAgICAgICAgICAgICc8L3NwYW4+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRvZ2dsZSBjYXB0aW9ucyBidXR0b25cbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdjYXB0aW9ucycpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwiY2FwdGlvbnNcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmcgY2xhc3M9XCJpY29uLS1jYXB0aW9ucy1vblwiPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctY2FwdGlvbnMtb25cIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGgrICctY2FwdGlvbnMtb2ZmXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi50b2dnbGVDYXB0aW9ucyArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUb2dnbGUgZnVsbHNjcmVlbiBidXR0b25cbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdmdWxsc2NyZWVuJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJmdWxsc2NyZWVuXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnIGNsYXNzPVwiaWNvbi0tZXhpdC1mdWxsc2NyZWVuXCI+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1leGl0LWZ1bGxzY3JlZW5cIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLWVudGVyLWZ1bGxzY3JlZW5cIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnRvZ2dsZUZ1bGxzY3JlZW4gKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2xvc2UgZXZlcnl0aGluZ1xuICAgICAgICAgICAgaHRtbC5wdXNoKCc8L2Rpdj4nKTtcblxuICAgICAgICAgICAgcmV0dXJuIGh0bWwuam9pbignJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBmdWxsc2NyZWVuXG4gICAgICAgIGZ1bmN0aW9uIF9zZXR1cEZ1bGxzY3JlZW4oKSB7XG4gICAgICAgICAgICBpZiAoIXBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgocGx5ci50eXBlICE9PSAnYXVkaW8nIHx8IGNvbmZpZy5mdWxsc2NyZWVuLmFsbG93QXVkaW8pICYmIGNvbmZpZy5mdWxsc2NyZWVuLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgbmF0aXZlIHN1cHBvcnRcbiAgICAgICAgICAgICAgICB2YXIgbmF0aXZlU3VwcG9ydCA9IGZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsU2NyZWVuO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5hdGl2ZVN1cHBvcnQgfHwgKGNvbmZpZy5mdWxsc2NyZWVuLmZhbGxiYWNrICYmICFfaW5GcmFtZSgpKSkge1xuICAgICAgICAgICAgICAgICAgICBfbG9nKChuYXRpdmVTdXBwb3J0ID8gJ05hdGl2ZScgOiAnRmFsbGJhY2snKSArICcgZnVsbHNjcmVlbiBlbmFibGVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHN0eWxpbmcgaG9va1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmZ1bGxzY3JlZW4uZW5hYmxlZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvZygnRnVsbHNjcmVlbiBub3Qgc3VwcG9ydGVkIGFuZCBmYWxsYmFjayBkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRvZ2dsZSBzdGF0ZVxuICAgICAgICAgICAgICAgIGlmIChwbHlyLmJ1dHRvbnMgJiYgcGx5ci5idXR0b25zLmZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZVN0YXRlKHBseXIuYnV0dG9ucy5mdWxsc2NyZWVuLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0dXAgZm9jdXMgdHJhcFxuICAgICAgICAgICAgICAgIF9mb2N1c1RyYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGNhcHRpb25zXG4gICAgICAgIGZ1bmN0aW9uIF9zZXR1cENhcHRpb25zKCkge1xuICAgICAgICAgICAgLy8gQmFpbCBpZiBub3QgSFRNTDUgdmlkZW9cbiAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgIT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluamVjdCB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICBpZiAoIV9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuY2FwdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgcGx5ci52aWRlb0NvbnRhaW5lci5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCAnPGRpdiBjbGFzcz1cIicgKyBfZ2V0Q2xhc3NuYW1lKGNvbmZpZy5zZWxlY3RvcnMuY2FwdGlvbnMpICsgJ1wiPjwvZGl2PicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgSFRNTDUgdGV4dFRyYWNrcyBpcyBzdXBwb3J0ZWRcbiAgICAgICAgICAgIHBseXIudXNpbmdUZXh0VHJhY2tzID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAocGx5ci5tZWRpYS50ZXh0VHJhY2tzKSB7XG4gICAgICAgICAgICAgICAgcGx5ci51c2luZ1RleHRUcmFja3MgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgVVJMIG9mIGNhcHRpb24gZmlsZSBpZiBleGlzdHNcbiAgICAgICAgICAgIHZhciBjYXB0aW9uU3JjID0gJycsXG4gICAgICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IHBseXIubWVkaWEuY2hpbGROb2RlcztcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZHJlbltpXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndHJhY2snKSB7XG4gICAgICAgICAgICAgICAgICAgIGtpbmQgPSBjaGlsZHJlbltpXS5raW5kO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2luZCA9PT0gJ2NhcHRpb25zJyB8fCBraW5kID09PSAnc3VidGl0bGVzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FwdGlvblNyYyA9IGNoaWxkcmVuW2ldLmdldEF0dHJpYnV0ZSgnc3JjJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlY29yZCBpZiBjYXB0aW9uIGZpbGUgZXhpc3RzIG9yIG5vdFxuICAgICAgICAgICAgcGx5ci5jYXB0aW9uRXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChjYXB0aW9uU3JjID09PSAnJykge1xuICAgICAgICAgICAgICAgIHBseXIuY2FwdGlvbkV4aXN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF9sb2coJ05vIGNhcHRpb24gdHJhY2sgZm91bmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX2xvZygnQ2FwdGlvbiB0cmFjayBmb3VuZDsgVVJJOiAnICsgY2FwdGlvblNyYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIG5vIGNhcHRpb24gZmlsZSBleGlzdHMsIGhpZGUgY29udGFpbmVyIGZvciBjYXB0aW9uIHRleHRcbiAgICAgICAgICAgIGlmICghcGx5ci5jYXB0aW9uRXhpc3RzKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5jYXB0aW9ucy5lbmFibGVkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVHVybiBvZmYgbmF0aXZlIGNhcHRpb24gcmVuZGVyaW5nIHRvIGF2b2lkIGRvdWJsZSBjYXB0aW9uc1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgZG9lc24ndCBzZWVtIHRvIHdvcmsgaW4gU2FmYXJpIDcrLCBzbyB0aGUgPHRyYWNrPiBlbGVtZW50cyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBkb20gYmVsb3dcbiAgICAgICAgICAgICAgICB2YXIgdHJhY2tzID0gcGx5ci5tZWRpYS50ZXh0VHJhY2tzO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdHJhY2tzLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrc1t4XS5tb2RlID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRW5hYmxlIFVJXG4gICAgICAgICAgICAgICAgX3Nob3dDYXB0aW9ucyhwbHlyKTtcblxuICAgICAgICAgICAgICAgIC8vIERpc2FibGUgdW5zdXBwb3J0ZWQgYnJvd3NlcnMgdGhhbiByZXBvcnQgZmFsc2UgcG9zaXRpdmVcbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IGJ1ZzogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTAzMzE0NFxuICAgICAgICAgICAgICAgIGlmICgocGx5ci5icm93c2VyLmlzSUUgJiYgcGx5ci5icm93c2VyLnZlcnNpb24gPj0gMTApIHx8XG4gICAgICAgICAgICAgICAgICAgIChwbHlyLmJyb3dzZXIuaXNGaXJlZm94ICYmIHBseXIuYnJvd3Nlci52ZXJzaW9uID49IDMxKSkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIERlYnVnZ2luZ1xuICAgICAgICAgICAgICAgICAgICBfbG9nKCdEZXRlY3RlZCBicm93c2VyIHdpdGgga25vd24gVGV4dFRyYWNrIGlzc3VlcyAtIHVzaW5nIG1hbnVhbCBmYWxsYmFjaycpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCB0byBmYWxzZSBzbyBza2lwcyB0byAnbWFudWFsJyBjYXB0aW9uaW5nXG4gICAgICAgICAgICAgICAgICAgIHBseXIudXNpbmdUZXh0VHJhY2tzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmVuZGVyaW5nIGNhcHRpb24gdHJhY2tzXG4gICAgICAgICAgICAgICAgLy8gTmF0aXZlIHN1cHBvcnQgcmVxdWlyZWQgLSBodHRwOi8vY2FuaXVzZS5jb20vd2VidnR0XG4gICAgICAgICAgICAgICAgaWYgKHBseXIudXNpbmdUZXh0VHJhY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2coJ1RleHRUcmFja3Mgc3VwcG9ydGVkJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCB0cmFja3MubGVuZ3RoOyB5KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFjayA9IHRyYWNrc1t5XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09ICdjYXB0aW9ucycgfHwgdHJhY2sua2luZCA9PT0gJ3N1YnRpdGxlcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb24odHJhY2ssICdjdWVjaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGxheSBhIGN1ZSwgaWYgdGhlcmUgaXMgb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUN1ZXNbMF0gJiYgJ3RleHQnIGluIHRoaXMuYWN0aXZlQ3Vlc1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NldENhcHRpb24odGhpcy5hY3RpdmVDdWVzWzBdLmdldEN1ZUFzSFRNTCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRDYXB0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENhcHRpb24gdHJhY2tzIG5vdCBuYXRpdmVseSBzdXBwb3J0ZWRcbiAgICAgICAgICAgICAgICAgICAgX2xvZygnVGV4dFRyYWNrcyBub3Qgc3VwcG9ydGVkIHNvIHJlbmRlcmluZyBjYXB0aW9ucyBtYW51YWxseScpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbmRlciBjYXB0aW9ucyBmcm9tIGFycmF5IGF0IGFwcHJvcHJpYXRlIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5jdXJyZW50Q2FwdGlvbiA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmNhcHRpb25zID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcHRpb25TcmMgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgWE1MSHR0cFJlcXVlc3QgT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcHRpb25zID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXEgPSB4aHIucmVzcG9uc2VUZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0FjY29yZGluZyB0byB3ZWJ2dHQgc3BlYywgbGluZSB0ZXJtaW5hdG9yIGNvbnNpc3RzIG9mIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDUkxGIChVKzAwMEQgVSswMDBBKSwgTEYgKFUrMDAwQSkgb3IgQ1IgKFUrMDAwRClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaW5lU2VwYXJhdG9yID0gJ1xcclxcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihyZXEuaW5kZXhPZihsaW5lU2VwYXJhdG9yK2xpbmVTZXBhcmF0b3IpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlcS5pbmRleE9mKCdcXHJcXHInKSAhPT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU2VwYXJhdG9yID0gJ1xccic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVNlcGFyYXRvciA9ICdcXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdGlvbnMgPSByZXEuc3BsaXQobGluZVNlcGFyYXRvcitsaW5lU2VwYXJhdG9yKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCBjYXB0aW9ucy5sZW5ndGg7IHIrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHRpb24gPSBjYXB0aW9uc1tyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmNhcHRpb25zW3JdID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHBhcnRzIG9mIHRoZSBjYXB0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IGNhcHRpb24uc3BsaXQobGluZVNlcGFyYXRvciksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluY2FzZSBjYXB0aW9uIG51bWJlcnMgYXJlIGFkZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnRzW2luZGV4XS5pbmRleE9mKFwiOlwiKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuY2FwdGlvbnNbcl0gPSBbcGFydHNbaW5kZXhdLCBwYXJ0c1tpbmRleCArIDFdXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGZpcnN0IGVsZW1lbnQgKCdWVFQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5jYXB0aW9ucy5zaGlmdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9nKCdTdWNjZXNzZnVsbHkgbG9hZGVkIHRoZSBjYXB0aW9uIGZpbGUgdmlhIEFKQVgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF93YXJuKGNvbmZpZy5sb2dQcmVmaXggKyAnVGhlcmUgd2FzIGEgcHJvYmxlbSBsb2FkaW5nIHRoZSBjYXB0aW9uIGZpbGUgdmlhIEFKQVgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vcGVuKCdnZXQnLCBjYXB0aW9uU3JjLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgY3VycmVudCBjYXB0aW9uXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRDYXB0aW9uKGNhcHRpb24pIHtcbiAgICAgICAgICAgIC8qIGpzaGludCB1bnVzZWQ6ZmFsc2UgKi9cbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmNhcHRpb25zKSxcbiAgICAgICAgICAgICAgICBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXG4gICAgICAgICAgICAvLyBFbXB0eSB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gZW1wdHlcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKGNhcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgY2FwdGlvbiA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIHNwYW4gY29udGVudFxuICAgICAgICAgICAgaWYgKF9pcy5zdHJpbmcoY2FwdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LmlubmVySFRNTCA9IGNhcHRpb24udHJpbSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGNhcHRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgbmV3IGNhcHRpb24gdGV4dFxuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAvLyBGb3JjZSByZWRyYXcgKGZvciBTYWZhcmkpXG4gICAgICAgICAgICB2YXIgcmVkcmF3ID0gY29udGFpbmVyLm9mZnNldEhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhcHRpb25zIGZ1bmN0aW9uc1xuICAgICAgICAvLyBTZWVrIHRoZSBtYW51YWwgY2FwdGlvbiB0aW1lIGFuZCB1cGRhdGUgVUlcbiAgICAgICAgZnVuY3Rpb24gX3NlZWtNYW51YWxDYXB0aW9ucyh0aW1lKSB7XG4gICAgICAgICAgICAvLyBVdGlsaXRpZXMgZm9yIGNhcHRpb24gdGltZSBjb2Rlc1xuICAgICAgICAgICAgZnVuY3Rpb24gX3RpbWVjb2RlQ29tbW9uKHRjLCBwb3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGNwYWlyID0gW107XG4gICAgICAgICAgICAgICAgdGNwYWlyID0gdGMuc3BsaXQoJyAtLT4gJyk7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRjcGFpci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZWJWVFQgYWxsb3dzIGZvciBleHRyYSBtZXRhIGRhdGEgYWZ0ZXIgdGhlIHRpbWVzdGFtcCBsaW5lXG4gICAgICAgICAgICAgICAgICAgIC8vIFNvIGdldCByaWQgb2YgdGhpcyBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgdGNwYWlyW2ldID0gdGNwYWlyW2ldLnJlcGxhY2UoLyhcXGQrOlxcZCs6XFxkK1xcLlxcZCspLiovLCBcIiQxXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX3N1YlRjU2Vjcyh0Y3BhaXJbcG9zXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBfdGltZWNvZGVNaW4odGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RpbWVjb2RlQ29tbW9uKHRjLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIF90aW1lY29kZU1heCh0Yykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGltZWNvZGVDb21tb24odGMsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gX3N1YlRjU2Vjcyh0Yykge1xuICAgICAgICAgICAgICAgIGlmICh0YyA9PT0gbnVsbCB8fCB0YyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YzEgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRjMiA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kcztcbiAgICAgICAgICAgICAgICAgICAgdGMxID0gdGMuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgdGMyID0gdGMxWzBdLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSBNYXRoLmZsb29yKHRjMlswXSo2MCo2MCkgKyBNYXRoLmZsb29yKHRjMlsxXSo2MCkgKyBNYXRoLmZsb29yKHRjMlsyXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWNvbmRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgaXQncyBub3QgdmlkZW8sIG9yIHdlJ3JlIHVzaW5nIHRleHRUcmFja3MsIGJhaWwuXG4gICAgICAgICAgICBpZiAocGx5ci51c2luZ1RleHRUcmFja3MgfHwgcGx5ci50eXBlICE9PSAndmlkZW8nIHx8ICFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXNldCBzdWJjb3VudFxuICAgICAgICAgICAgcGx5ci5zdWJjb3VudCA9IDA7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIHRpbWUgaXMgYSBudW1iZXIsIGlmIG5vdCB1c2UgY3VycmVudFRpbWVcbiAgICAgICAgICAgIC8vIElFIGhhcyBhIGJ1ZyB3aGVyZSBjdXJyZW50VGltZSBkb2Vzbid0IGdvIHRvIDBcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vdHdpdHRlci5jb20vU2FtX1BvdHRzL3N0YXR1cy81NzM3MTU3NDY1MDY3MzE1MjFcbiAgICAgICAgICAgIHRpbWUgPSBfaXMubnVtYmVyKHRpbWUpID8gdGltZSA6IHBseXIubWVkaWEuY3VycmVudFRpbWU7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gc3VicyBhdmFpbGFibGUsIGJhaWxcbiAgICAgICAgICAgIGlmICghcGx5ci5jYXB0aW9uc1twbHlyLnN1YmNvdW50XSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2hpbGUgKF90aW1lY29kZU1heChwbHlyLmNhcHRpb25zW3BseXIuc3ViY291bnRdWzBdKSA8IHRpbWUudG9GaXhlZCgxKSkge1xuICAgICAgICAgICAgICAgIHBseXIuc3ViY291bnQrKztcbiAgICAgICAgICAgICAgICBpZiAocGx5ci5zdWJjb3VudCA+IHBseXIuY2FwdGlvbnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLnN1YmNvdW50ID0gcGx5ci5jYXB0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBuZXh0IGNhcHRpb24gaXMgaW4gdGhlIGN1cnJlbnQgdGltZSByYW5nZVxuICAgICAgICAgICAgaWYgKHBseXIubWVkaWEuY3VycmVudFRpbWUudG9GaXhlZCgxKSA+PSBfdGltZWNvZGVNaW4ocGx5ci5jYXB0aW9uc1twbHlyLnN1YmNvdW50XVswXSkgJiZcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lLnRvRml4ZWQoMSkgPD0gX3RpbWVjb2RlTWF4KHBseXIuY2FwdGlvbnNbcGx5ci5zdWJjb3VudF1bMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY3VycmVudENhcHRpb24gPSBwbHlyLmNhcHRpb25zW3BseXIuc3ViY291bnRdWzFdO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVuZGVyIHRoZSBjYXB0aW9uXG4gICAgICAgICAgICAgICAgX3NldENhcHRpb24ocGx5ci5jdXJyZW50Q2FwdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9zZXRDYXB0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEaXNwbGF5IGNhcHRpb25zIGNvbnRhaW5lciBhbmQgYnV0dG9uIChmb3IgaW5pdGlhbGl6YXRpb24pXG4gICAgICAgIGZ1bmN0aW9uIF9zaG93Q2FwdGlvbnMoKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGNhcHRpb24gdG9nZ2xlLCBiYWlsXG4gICAgICAgICAgICBpZiAoIXBseXIuYnV0dG9ucy5jYXB0aW9ucykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5jYXB0aW9ucy5lbmFibGVkLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gVHJ5IHRvIGxvYWQgdGhlIHZhbHVlIGZyb20gc3RvcmFnZVxuICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHBseXIuc3RvcmFnZS5jYXB0aW9uc0VuYWJsZWQ7XG5cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSBmYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgY29uZmlnXG4gICAgICAgICAgICBpZiAoIV9pcy5ib29sZWFuKGFjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmUgPSBjb25maWcuY2FwdGlvbnMuZGVmYXVsdEFjdGl2ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuY2FwdGlvbnMuYWN0aXZlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLmNhcHRpb25zLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmQgYWxsIGVsZW1lbnRzXG4gICAgICAgIGZ1bmN0aW9uIF9nZXRFbGVtZW50cyhzZWxlY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIHBseXIuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZCBhIHNpbmdsZSBlbGVtZW50XG4gICAgICAgIGZ1bmN0aW9uIF9nZXRFbGVtZW50KHNlbGVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gX2dldEVsZW1lbnRzKHNlbGVjdG9yKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERldGVybWluZSBpZiB3ZSdyZSBpbiBhbiBpZnJhbWVcbiAgICAgICAgZnVuY3Rpb24gX2luRnJhbWUoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuc2VsZiAhPT0gd2luZG93LnRvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmFwIGZvY3VzIGluc2lkZSBjb250YWluZXJcbiAgICAgICAgZnVuY3Rpb24gX2ZvY3VzVHJhcCgpIHtcbiAgICAgICAgICAgIHZhciB0YWJiYWJsZXMgICA9IF9nZXRFbGVtZW50cygnaW5wdXQ6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pJyksXG4gICAgICAgICAgICAgICAgZmlyc3QgICAgICAgPSB0YWJiYWJsZXNbMF0sXG4gICAgICAgICAgICAgICAgbGFzdCAgICAgICAgPSB0YWJiYWJsZXNbdGFiYmFibGVzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBfY2hlY2tGb2N1cyhldmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIGl0IGlzIFRBQlxuICAgICAgICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gOSAmJiBwbHlyLmlzRnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBsYXN0ICYmICFldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW92ZSBmb2N1cyB0byBmaXJzdCBlbGVtZW50IHRoYXQgY2FuIGJlIHRhYmJlZCBpZiBTaGlmdCBpc24ndCB1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQgPT09IGZpcnN0ICYmIGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIGZvY3VzIHRvIGxhc3QgZWxlbWVudCB0aGF0IGNhbiBiZSB0YWJiZWQgaWYgU2hpZnQgaXMgdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQmluZCB0aGUgaGFuZGxlclxuICAgICAgICAgICAgX29uKHBseXIuY29udGFpbmVyLCAna2V5ZG93bicsIF9jaGVja0ZvY3VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBlbGVtZW50cyB0byBIVE1MNSBtZWRpYSAoc291cmNlLCB0cmFja3MsIGV0YylcbiAgICAgICAgZnVuY3Rpb24gX2luc2VydENoaWxkRWxlbWVudHModHlwZSwgYXR0cmlidXRlcykge1xuICAgICAgICAgICAgaWYgKF9pcy5zdHJpbmcoYXR0cmlidXRlcykpIHtcbiAgICAgICAgICAgICAgIF9pbnNlcnRFbGVtZW50KHR5cGUsIHBseXIubWVkaWEsIHsgc3JjOiBhdHRyaWJ1dGVzIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRyaWJ1dGVzLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBhdHRyaWJ1dGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pbnNlcnRFbGVtZW50KHR5cGUsIHBseXIubWVkaWEsIGF0dHJpYnV0ZXNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluc2VydCBjb250cm9sc1xuICAgICAgICBmdW5jdGlvbiBfaW5qZWN0Q29udHJvbHMoKSB7XG4gICAgICAgICAgICAvLyBTcHJpdGVcbiAgICAgICAgICAgIGlmIChjb25maWcubG9hZFNwcml0ZSkge1xuICAgICAgICAgICAgICAgIHZhciBpY29uVXJsID0gX2dldEljb25VcmwoKTtcblxuICAgICAgICAgICAgICAgIC8vIE9ubHkgbG9hZCBleHRlcm5hbCBzcHJpdGUgdXNpbmcgQUpBWFxuICAgICAgICAgICAgICAgIGlmIChpY29uVXJsLmFic29sdXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2coJ0FKQVggbG9hZGluZyBhYnNvbHV0ZSBTVkcgc3ByaXRlJyArIChwbHlyLmJyb3dzZXIuaXNJRSA/ICcgKGR1ZSB0byBJRSknIDogJycpKTtcbiAgICAgICAgICAgICAgICAgICAgbG9hZFNwcml0ZShpY29uVXJsLnVybCwgXCJzcHJpdGUtcGx5clwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfbG9nKCdTcHJpdGUgd2lsbCBiZSB1c2VkIGFzIGV4dGVybmFsIHJlc291cmNlIGRpcmVjdGx5Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNYWtlIGEgY29weSBvZiB0aGUgaHRtbFxuICAgICAgICAgICAgdmFyIGh0bWwgPSBjb25maWcuaHRtbDtcblxuICAgICAgICAgICAgLy8gSW5zZXJ0IGN1c3RvbSB2aWRlbyBjb250cm9sc1xuICAgICAgICAgICAgX2xvZygnSW5qZWN0aW5nIGN1c3RvbSBjb250cm9scycpO1xuXG4gICAgICAgICAgICAvLyBJZiBubyBjb250cm9scyBhcmUgc3BlY2lmaWVkLCBjcmVhdGUgZGVmYXVsdFxuICAgICAgICAgICAgaWYgKCFodG1sKSB7XG4gICAgICAgICAgICAgICAgaHRtbCA9IF9idWlsZENvbnRyb2xzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlcGxhY2Ugc2VlayB0aW1lIGluc3RhbmNlc1xuICAgICAgICAgICAgaHRtbCA9IF9yZXBsYWNlQWxsKGh0bWwsICd7c2Vla3RpbWV9JywgY29uZmlnLnNlZWtUaW1lKTtcblxuICAgICAgICAgICAgLy8gUmVwbGFjZSBhbGwgaWQgcmVmZXJlbmNlcyB3aXRoIHJhbmRvbSBudW1iZXJzXG4gICAgICAgICAgICBodG1sID0gX3JlcGxhY2VBbGwoaHRtbCwgJ3tpZH0nLCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAwMDApKSk7XG5cbiAgICAgICAgICAgIC8vIENvbnRyb2xzIGNvbnRhaW5lclxuICAgICAgICAgICAgdmFyIHRhcmdldDtcblxuICAgICAgICAgICAgLy8gSW5qZWN0IHRvIGN1c3RvbSBsb2NhdGlvblxuICAgICAgICAgICAgaWYgKF9pcy5zdHJpbmcoY29uZmlnLnNlbGVjdG9ycy5jb250cm9scy5jb250YWluZXIpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLmNvbnRhaW5lcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluamVjdCBpbnRvIHRoZSBjb250YWluZXIgYnkgZGVmYXVsdFxuICAgICAgICAgICAgaWYgKCFfaXMuaHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IHBseXIuY29udGFpbmVyXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluamVjdCBjb250cm9scyBIVE1MXG4gICAgICAgICAgICB0YXJnZXQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBodG1sKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgdG9vbHRpcHNcbiAgICAgICAgICAgIGlmIChjb25maWcudG9vbHRpcHMuY29udHJvbHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFiZWxzID0gX2dldEVsZW1lbnRzKFtjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLndyYXBwZXIsICcgJywgY29uZmlnLnNlbGVjdG9ycy5sYWJlbHMsICcgLicsIGNvbmZpZy5jbGFzc2VzLmhpZGRlbl0uam9pbignJykpO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGxhYmVscy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBsYWJlbHNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKGxhYmVsLCBjb25maWcuY2xhc3Nlcy5oaWRkZW4sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKGxhYmVsLCBjb25maWcuY2xhc3Nlcy50b29sdGlwLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIHRoZSBVSSBjb250cm9scyBhbmQgc3RvcmUgcmVmZXJlbmNlc1xuICAgICAgICBmdW5jdGlvbiBfZmluZEVsZW1lbnRzKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwbHlyLmNvbnRyb2xzICAgICAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuY29udHJvbHMud3JhcHBlcik7XG5cbiAgICAgICAgICAgICAgICAvLyBCdXR0b25zXG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zID0ge307XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnNlZWsgICAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMuc2Vlayk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnBsYXkgICAgICAgICAgICAgPSBfZ2V0RWxlbWVudHMoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLnBsYXkpO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5wYXVzZSAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLnBhdXNlKTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMucmVzdGFydCAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5yZXN0YXJ0KTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMucmV3aW5kICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5yZXdpbmQpO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5mb3J3YXJkICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLmZvcndhcmQpO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5mdWxsc2NyZWVuICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLmZ1bGxzY3JlZW4pO1xuXG4gICAgICAgICAgICAgICAgLy8gSW5wdXRzXG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLm11dGUgICAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMubXV0ZSk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLmNhcHRpb25zICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMuY2FwdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gUHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzID0ge307XG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5jb250YWluZXIgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLnByb2dyZXNzLmNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAvLyBQcm9ncmVzcyAtIEJ1ZmZlcmluZ1xuICAgICAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MuYnVmZmVyICAgICAgICAgID0ge307XG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5idWZmZXIuYmFyICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLnByb2dyZXNzLmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy5idWZmZXIudGV4dCAgICAgPSBwbHlyLnByb2dyZXNzLmJ1ZmZlci5iYXIgJiYgcGx5ci5wcm9ncmVzcy5idWZmZXIuYmFyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzcGFuJylbMF07XG5cbiAgICAgICAgICAgICAgICAvLyBQcm9ncmVzcyAtIFBsYXllZFxuICAgICAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MucGxheWVkICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5wcm9ncmVzcy5wbGF5ZWQpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2VlayB0b29sdGlwXG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy50b29sdGlwICAgICAgICAgPSBwbHlyLnByb2dyZXNzLmNvbnRhaW5lciAmJiBwbHlyLnByb2dyZXNzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuJyArIGNvbmZpZy5jbGFzc2VzLnRvb2x0aXApO1xuXG4gICAgICAgICAgICAgICAgLy8gVm9sdW1lXG4gICAgICAgICAgICAgICAgcGx5ci52b2x1bWUgICAgICAgICAgICAgICAgICAgPSB7fTtcbiAgICAgICAgICAgICAgICBwbHlyLnZvbHVtZS5pbnB1dCAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMudm9sdW1lLmlucHV0KTtcbiAgICAgICAgICAgICAgICBwbHlyLnZvbHVtZS5kaXNwbGF5ICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMudm9sdW1lLmRpc3BsYXkpO1xuXG4gICAgICAgICAgICAgICAgLy8gVGltaW5nXG4gICAgICAgICAgICAgICAgcGx5ci5kdXJhdGlvbiAgICAgICAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICBwbHlyLmN1cnJlbnRUaW1lICAgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICAgIHBseXIuc2Vla1RpbWUgICAgICAgICAgICAgICAgID0gX2dldEVsZW1lbnRzKGNvbmZpZy5zZWxlY3RvcnMuc2Vla1RpbWUpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgX3dhcm4oJ0l0IGxvb2tzIGxpa2UgdGhlcmUgaXMgYSBwcm9ibGVtIHdpdGggeW91ciBjb250cm9scyBIVE1MJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZXN0b3JlIG5hdGl2ZSB2aWRlbyBjb250cm9sc1xuICAgICAgICAgICAgICAgIF90b2dnbGVOYXRpdmVDb250cm9scyh0cnVlKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBzdHlsZSBob29rXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVTdHlsZUhvb2soKSB7XG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5zZWxlY3RvcnMuY29udGFpbmVyLnJlcGxhY2UoJy4nLCAnJyksIHBseXIuc3VwcG9ydGVkLmZ1bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG9nZ2xlIG5hdGl2ZSBjb250cm9sc1xuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlTmF0aXZlQ29udHJvbHModG9nZ2xlKSB7XG4gICAgICAgICAgICBpZiAodG9nZ2xlICYmIF9pbkFycmF5KGNvbmZpZy50eXBlcy5odG1sNSwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdjb250cm9scycsICcnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5yZW1vdmVBdHRyaWJ1dGUoJ2NvbnRyb2xzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBhcmlhIGF0dHJpYnV0ZSBmb3IgcGxheSBhbmQgaWZyYW1lIHRpdGxlXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRUaXRsZShpZnJhbWUpIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGN1cnJlbnQgdGV4dFxuICAgICAgICAgICAgdmFyIGxhYmVsID0gY29uZmlnLmkxOG4ucGxheTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBhIG1lZGlhIHRpdGxlIHNldCwgdXNlIHRoYXQgZm9yIHRoZSBsYWJlbFxuICAgICAgICAgICAgaWYgKF9pcy5zdHJpbmcoY29uZmlnLnRpdGxlKSAmJiBjb25maWcudGl0bGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbGFiZWwgKz0gJywgJyArIGNvbmZpZy50aXRsZTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCBjb250YWluZXIgbGFiZWxcbiAgICAgICAgICAgICAgICBwbHlyLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBjb25maWcudGl0bGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGEgcGxheSBidXR0b24sIHNldCBsYWJlbFxuICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwgJiYgcGx5ci5idXR0b25zLnBsYXkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gcGx5ci5idXR0b25zLnBsYXkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnBsYXlbaV0uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IGlmcmFtZSB0aXRsZVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9pc3N1ZXMvMTI0XG4gICAgICAgICAgICBpZiAoX2lzLmh0bWxFbGVtZW50KGlmcmFtZSkpIHtcbiAgICAgICAgICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCd0aXRsZScsIGNvbmZpZy5pMThuLmZyYW1lVGl0bGUucmVwbGFjZSgne3RpdGxlfScsIGNvbmZpZy50aXRsZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgbG9jYWxTdG9yYWdlXG4gICAgICAgIGZ1bmN0aW9uIF9zZXR1cFN0b3JhZ2UoKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgcGx5ci5zdG9yYWdlID0ge307XG5cbiAgICAgICAgICAgIC8vIEJhaWwgaWYgd2UgZG9uJ3QgaGF2ZSBsb2NhbFN0b3JhZ2Ugc3VwcG9ydCBvciBpdCdzIGRpc2FibGVkXG4gICAgICAgICAgICBpZiAoIV9zdG9yYWdlLnN1cHBvcnRlZCB8fCAhY29uZmlnLnN0b3JhZ2UuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgb2xkIHZvbHVtZVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9pc3N1ZXMvMTcxXG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3BseXItdm9sdW1lJyk7XG5cbiAgICAgICAgICAgIC8vIGxvYWQgdmFsdWUgZnJvbSB0aGUgY3VycmVudCBrZXlcbiAgICAgICAgICAgIHZhbHVlID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGNvbmZpZy5zdG9yYWdlLmtleSk7XG5cbiAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBLZXkgd2Fzbid0IHNldCAob3IgaGFkIGJlZW4gY2xlYXJlZCksIG1vdmUgYWxvbmdcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC9eXFxkKyhcXC5cXGQrKT8kLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIHZhbHVlIGlzIGEgbnVtYmVyLCBpdCdzIHByb2JhYmx5IHZvbHVtZSBmcm9tIGFuIG9sZGVyXG4gICAgICAgICAgICAgICAgLy8gdmVyc2lvbiBvZiBwbHlyLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvcHVsbC8zMTNcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGtleSB0byBiZSBKU09OXG4gICAgICAgICAgICAgICAgX3VwZGF0ZVN0b3JhZ2Uoe3ZvbHVtZTogcGFyc2VGbG9hdCh2YWx1ZSl9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQXNzdW1lIGl0J3MgSlNPTiBmcm9tIHRoaXMgb3IgYSBsYXRlciB2ZXJzaW9uIG9mIHBseXJcbiAgICAgICAgICAgICAgICBwbHlyLnN0b3JhZ2UgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNhdmUgYSB2YWx1ZSBiYWNrIHRvIGxvY2FsIHN0b3JhZ2VcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVN0b3JhZ2UodmFsdWUpIHtcbiAgICAgICAgICAgIC8vIEJhaWwgaWYgd2UgZG9uJ3QgaGF2ZSBsb2NhbFN0b3JhZ2Ugc3VwcG9ydCBvciBpdCdzIGRpc2FibGVkXG4gICAgICAgICAgICBpZiAoIV9zdG9yYWdlLnN1cHBvcnRlZCB8fCAhY29uZmlnLnN0b3JhZ2UuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB3b3JraW5nIGNvcHkgb2YgdGhlIHZhbHVlc1xuICAgICAgICAgICAgX2V4dGVuZChwbHlyLnN0b3JhZ2UsIHZhbHVlKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHN0b3JhZ2VcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShjb25maWcuc3RvcmFnZS5rZXksIEpTT04uc3RyaW5naWZ5KHBseXIuc3RvcmFnZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgbWVkaWFcbiAgICAgICAgZnVuY3Rpb24gX3NldHVwTWVkaWEoKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIG1lZGlhLCBiYWlsXG4gICAgICAgICAgICBpZiAoIXBseXIubWVkaWEpIHtcbiAgICAgICAgICAgICAgICBfd2FybignTm8gbWVkaWEgZWxlbWVudCBmb3VuZCEnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIHR5cGUgY2xhc3NcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnR5cGUucmVwbGFjZSgnezB9JywgcGx5ci50eXBlKSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdmlkZW8gY2xhc3MgZm9yIGVtYmVkc1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCByZXF1aXJlIGNoYW5nZXMgaWYgYXVkaW8gZW1iZWRzIGFyZSBhZGRlZFxuICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy50eXBlLnJlcGxhY2UoJ3swfScsICd2aWRlbycpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGF1dG9wbGF5IGF0dHJpYnV0ZSwgYXNzdW1lIHRoZSB2aWRlbyBpcyBzdG9wcGVkIGFuZCBhZGQgc3RhdGUgY2xhc3NcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnN0b3BwZWQsIGNvbmZpZy5hdXRvcGxheSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgaU9TIGNsYXNzXG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIub250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmlzSW9zLCBwbHlyLmJyb3dzZXIuaXNJb3MpO1xuXG4gICAgICAgICAgICAgICAgLy8gQWRkIHRvdWNoIGNsYXNzXG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5pc1RvdWNoLCBwbHlyLmJyb3dzZXIuaXNUb3VjaCk7XG5cbiAgICAgICAgICAgICAgICAvLyBJbmplY3QgdGhlIHBsYXllciB3cmFwcGVyXG4gICAgICAgICAgICAgICAgaWYgKHBseXIudHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHdyYXBwZXIgZGl2XG4gICAgICAgICAgICAgICAgICAgIHZhciB3cmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNvbmZpZy5jbGFzc2VzLnZpZGVvV3JhcHBlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gV3JhcCB0aGUgdmlkZW8gaW4gYSBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgX3dyYXAocGx5ci5tZWRpYSwgd3JhcHBlcik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FjaGUgdGhlIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICBwbHlyLnZpZGVvQ29udGFpbmVyID0gd3JhcHBlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEVtYmVkc1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgIF9zZXR1cEVtYmVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBZb3VUdWJlL1ZpbWVvXG4gICAgICAgIGZ1bmN0aW9uIF9zZXR1cEVtYmVkKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgICAgICAgIG1lZGlhSWQsXG4gICAgICAgICAgICAgICAgaWQgPSBwbHlyLnR5cGUgKyAnLScgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAwMDApKTtcblxuICAgICAgICAgICAgLy8gUGFyc2UgSURzIGZyb20gVVJMcyBpZiBzdXBwbGllZFxuICAgICAgICAgICAgc3dpdGNoIChwbHlyLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFJZCA9IF9wYXJzZVlvdVR1YmVJZChwbHlyLmVtYmVkSWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpbWVvJzpcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFJZCA9IF9wYXJzZVZpbWVvSWQocGx5ci5lbWJlZElkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBtZWRpYUlkID0gcGx5ci5lbWJlZElkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZW1vdmUgb2xkIGNvbnRhaW5lcnNcbiAgICAgICAgICAgIHZhciBjb250YWluZXJzID0gX2dldEVsZW1lbnRzKCdbaWRePVwiJyArIHBseXIudHlwZSArICctXCJdJyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gY29udGFpbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIF9yZW1vdmUoY29udGFpbmVyc1tpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkZCBlbWJlZCBjbGFzcyBmb3IgcmVzcG9uc2l2ZVxuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIubWVkaWEsIGNvbmZpZy5jbGFzc2VzLnZpZGVvV3JhcHBlciwgdHJ1ZSk7XG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5tZWRpYSwgY29uZmlnLmNsYXNzZXMuZW1iZWRXcmFwcGVyLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKHBseXIudHlwZSA9PT0gJ3lvdXR1YmUnKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBZb3VUdWJlIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCBJRFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0dXAgQVBJXG4gICAgICAgICAgICAgICAgaWYgKF9pcy5vYmplY3Qod2luZG93LllUKSkge1xuICAgICAgICAgICAgICAgICAgICBfeW91VHViZVJlYWR5KG1lZGlhSWQsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTG9hZCB0aGUgQVBJXG4gICAgICAgICAgICAgICAgICAgIF9pbmplY3RTY3JpcHQoY29uZmlnLnVybHMueW91dHViZS5hcGkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldHVwIGNhbGxiYWNrIGZvciB0aGUgQVBJXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vbllvdVR1YmVSZWFkeUNhbGxiYWNrcyA9IHdpbmRvdy5vbllvdVR1YmVSZWFkeUNhbGxiYWNrcyB8fCBbXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdG8gcXVldWVcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9uWW91VHViZVJlYWR5Q2FsbGJhY2tzLnB1c2goZnVuY3Rpb24oKSB7IF95b3VUdWJlUmVhZHkobWVkaWFJZCwgY29udGFpbmVyKTsgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGNhbGxiYWNrIHRvIHByb2Nlc3MgcXVldWVcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9uWW91VHViZUlmcmFtZUFQSVJlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9uWW91VHViZVJlYWR5Q2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oY2FsbGJhY2spIHsgY2FsbGJhY2soKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwbHlyLnR5cGUgPT09ICd2aW1lbycpIHtcbiAgICAgICAgICAgICAgICAvLyBWaW1lbyBuZWVkcyBhbiBleHRyYSBkaXYgdG8gaGlkZSBjb250cm9scyBvbiBkZXNrdG9wICh3aGljaCBoYXMgZnVsbCBzdXBwb3J0KVxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIgPSBwbHlyLm1lZGlhO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldCBJRFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuXG4gICAgICAgICAgICAgICAgLy8gTG9hZCB0aGUgQVBJIGlmIG5vdCBhbHJlYWR5XG4gICAgICAgICAgICAgICAgaWYgKCFfaXMub2JqZWN0KHdpbmRvdy5WaW1lbykpIHtcbiAgICAgICAgICAgICAgICAgICAgX2luamVjdFNjcmlwdChjb25maWcudXJscy52aW1lby5hcGkpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdhaXQgZm9yIGZyYWdhbG9vcCBsb2FkXG4gICAgICAgICAgICAgICAgICAgIHZhciB2aW1lb1RpbWVyID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pcy5vYmplY3Qod2luZG93LlZpbWVvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHZpbWVvVGltZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aW1lb1JlYWR5KG1lZGlhSWQsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdmltZW9SZWFkeShtZWRpYUlkLCBjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGx5ci50eXBlID09PSAnc291bmRjbG91ZCcpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBDdXJyZW50bHkgdW5zdXBwb3J0ZWQgYW5kIHVuZG9jdW1lbnRlZFxuICAgICAgICAgICAgICAgIC8vIEluamVjdCB0aGUgaWZyYW1lXG4gICAgICAgICAgICAgICAgdmFyIHNvdW5kQ2xvdWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdhdGNoIGZvciBpZnJhbWUgbG9hZFxuICAgICAgICAgICAgICAgIHNvdW5kQ2xvdWQubG9hZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX29uKHNvdW5kQ2xvdWQsICdsb2FkJywgZnVuY3Rpb24oKSB7IHNvdW5kQ2xvdWQubG9hZGVkID0gdHJ1ZTsgfSk7XG5cbiAgICAgICAgICAgICAgICBfc2V0QXR0cmlidXRlcyhzb3VuZENsb3VkLCB7XG4gICAgICAgICAgICAgICAgICAgICdzcmMnOiAgJ2h0dHBzOi8vdy5zb3VuZGNsb3VkLmNvbS9wbGF5ZXIvP3VybD1odHRwczovL2FwaS5zb3VuZGNsb3VkLmNvbS90cmFja3MvJyArIG1lZGlhSWQsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICAgaWRcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzb3VuZENsb3VkKTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAvLyBMb2FkIHRoZSBBUEkgaWYgbm90IGFscmVhZHlcbiAgICAgICAgICAgICAgICBpZiAoIXdpbmRvdy5TQykge1xuICAgICAgICAgICAgICAgICAgICBfaW5qZWN0U2NyaXB0KGNvbmZpZy51cmxzLnNvdW5kY2xvdWQuYXBpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciBTQyBsb2FkXG4gICAgICAgICAgICAgICAgdmFyIHNvdW5kQ2xvdWRUaW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5TQyAmJiBzb3VuZENsb3VkLmxvYWRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoc291bmRDbG91ZFRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zb3VuZGNsb3VkUmVhZHkuY2FsbChzb3VuZENsb3VkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gZW1iZWRzIGFyZSByZWFkeVxuICAgICAgICBmdW5jdGlvbiBfZW1iZWRSZWFkeSgpIHtcbiAgICAgICAgICAgIC8vIFNldHVwIHRoZSBVSSBhbmQgY2FsbCByZWFkeSBpZiBmdWxsIHN1cHBvcnRcbiAgICAgICAgICAgIGlmIChwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgX3NldHVwSW50ZXJmYWNlKCk7XG4gICAgICAgICAgICAgICAgX3JlYWR5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aXRsZVxuICAgICAgICAgICAgX3NldFRpdGxlKF9nZXRFbGVtZW50KCdpZnJhbWUnKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgWW91VHViZSBBUEkgcmVhZHlcbiAgICAgICAgZnVuY3Rpb24gX3lvdVR1YmVSZWFkeSh2aWRlb0lkLCBjb250YWluZXIpIHtcbiAgICAgICAgICAgIC8vIFNldHVwIGluc3RhbmNlXG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS95b3V0dWJlL2lmcmFtZV9hcGlfcmVmZXJlbmNlXG4gICAgICAgICAgICBwbHlyLmVtYmVkID0gbmV3IHdpbmRvdy5ZVC5QbGF5ZXIoY29udGFpbmVyLmlkLCB7XG4gICAgICAgICAgICAgICAgdmlkZW9JZDogdmlkZW9JZCxcbiAgICAgICAgICAgICAgICBwbGF5ZXJWYXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiAgICAgICAoY29uZmlnLmF1dG9wbGF5ID8gMSA6IDApLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sczogICAgICAgKHBseXIuc3VwcG9ydGVkLmZ1bGwgPyAwIDogMSksXG4gICAgICAgICAgICAgICAgICAgIHJlbDogICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICBzaG93aW5mbzogICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgaXZfbG9hZF9wb2xpY3k6IDMsXG4gICAgICAgICAgICAgICAgICAgIGNjX2xvYWRfcG9saWN5OiAoY29uZmlnLmNhcHRpb25zLmRlZmF1bHRBY3RpdmUgPyAxIDogMCksXG4gICAgICAgICAgICAgICAgICAgIGNjX2xhbmdfcHJlZjogICAnZW4nLFxuICAgICAgICAgICAgICAgICAgICB3bW9kZTogICAgICAgICAgJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgICAgICAgICAgICAgbW9kZXN0YnJhbmRpbmc6IDEsXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVrYjogICAgICAxLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW46ICAgICAgICAgJyonIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvZ2RhdGEtaXNzdWVzL2lzc3Vlcy9kZXRhaWw/aWQ9NTc4OCNjNDVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgICAgICAnb25FcnJvcic6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIuY29udGFpbmVyLCAnZXJyb3InLCB0cnVlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogICBldmVudC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkOiAgZXZlbnQudGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ29uUmVhZHknOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBmYXV4IEhUTUw1IEFQSSB1c2luZyB0aGUgWW91VHViZSBBUElcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGxheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnBsYXlWaWRlbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhdXNlVmlkZW8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3RvcFZpZGVvKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuZHVyYXRpb24gPSBpbnN0YW5jZS5nZXREdXJhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLm11dGVkID0gaW5zdGFuY2UuaXNNdXRlZCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGl0bGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy50aXRsZSA9IGluc3RhbmNlLmdldFZpZGVvRGF0YSgpLnRpdGxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHRhYmluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucXVlcnlTZWxlY3RvcignaWZyYW1lJykuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgVUlcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lbWJlZFJlYWR5KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndGltZXVwZGF0ZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRpbWV1cGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2R1cmF0aW9uY2hhbmdlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRpbWVyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcnMuYnVmZmVyaW5nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0dXAgYnVmZmVyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lcnMuYnVmZmVyaW5nID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCBsb2FkZWQgJSBmcm9tIFlvdVR1YmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmJ1ZmZlcmVkID0gaW5zdGFuY2UuZ2V0VmlkZW9Mb2FkZWRGcmFjdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBwcm9ncmVzcyBvbmx5IHdoZW4gd2UgYWN0dWFsbHkgYnVmZmVyIHNvbWV0aGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLmxhc3RCdWZmZXJlZCA9PT0gbnVsbCB8fCBwbHlyLm1lZGlhLmxhc3RCdWZmZXJlZCA8IHBseXIubWVkaWEuYnVmZmVyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncHJvZ3Jlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgbGFzdCBidWZmZXIgcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmxhc3RCdWZmZXJlZCA9IHBseXIubWVkaWEuYnVmZmVyZWQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIGlmIHdlJ3JlIGF0IDEwMCVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5idWZmZXJlZCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcnMuYnVmZmVyaW5nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2NhbnBsYXl0aHJvdWdoJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ29uU3RhdGVDaGFuZ2UnOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB0aW1lclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXJzLnBsYXlpbmcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAtMSAgIFVuc3RhcnRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCAgICBFbmRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMSAgICBQbGF5aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAyICAgIFBhdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMyAgICBCdWZmZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDUgICAgVmlkZW8gY3VlZFxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChldmVudC5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2VuZGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHdlcmUgc2Vla2luZywgZmlyZSBzZWVrZWQgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIubWVkaWEuc2Vla2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnc2Vla2VkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNlZWtpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5aW5nJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG9sbCB0byBnZXQgcGxheWJhY2sgcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXJzLnBsYXlpbmcgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IGluc3RhbmNlLmdldEN1cnJlbnRUaW1lKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndGltZXVwZGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGR1cmF0aW9uIGFnYWluIGR1ZSB0byBZb3VUdWJlIGJ1Z1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8zNzRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9nZGF0YS1pc3N1ZXMvaXNzdWVzL2RldGFpbD9pZD04NjkwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLmR1cmF0aW9uICE9PSBpbnN0YW5jZS5nZXREdXJhdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmR1cmF0aW9uID0gaW5zdGFuY2UuZ2V0RHVyYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2R1cmF0aW9uY2hhbmdlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwYXVzZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLmNvbnRhaW5lciwgJ3N0YXRlY2hhbmdlJywgZmFsc2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBldmVudC5kYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVmltZW8gcmVhZHlcbiAgICAgICAgZnVuY3Rpb24gX3ZpbWVvUmVhZHkobWVkaWFJZCwgY29udGFpbmVyKSB7XG4gICAgICAgICAgICAvLyBTZXR1cCBpbnN0YW5jZVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZpbWVvL3BsYXllci5qc1xuICAgICAgICAgICAgcGx5ci5lbWJlZCA9IG5ldyB3aW5kb3cuVmltZW8uUGxheWVyKGNvbnRhaW5lciwge1xuICAgICAgICAgICAgICAgIGlkOiAgICAgICAgIHBhcnNlSW50KG1lZGlhSWQpLFxuICAgICAgICAgICAgICAgIGxvb3A6ICAgICAgIGNvbmZpZy5sb29wLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5OiAgIGNvbmZpZy5hdXRvcGxheSxcbiAgICAgICAgICAgICAgICBieWxpbmU6ICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICBwb3J0cmFpdDogICBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aXRsZTogICAgICBmYWxzZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGZhdXggSFRNTDUgQVBJIHVzaW5nIHRoZSBWaW1lbyBBUElcbiAgICAgICAgICAgIHBseXIubWVkaWEucGxheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQucGxheSgpO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQucGF1c2UoKTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcGx5ci5tZWRpYS5zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zdG9wKCk7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IDA7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBVSVxuICAgICAgICAgICAgX2VtYmVkUmVhZHkoKTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5nZXRDdXJyZW50VGltZSgpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRpbWV1cGRhdGVcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5nZXREdXJhdGlvbigpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmR1cmF0aW9uID0gdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRpbWV1cGRhdGVcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdkdXJhdGlvbmNoYW5nZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IENhcHRpb25zXG4gICAgICAgICAgICAvKmlmIChjb25maWcuY2FwdGlvbnMuZGVmYXVsdEFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZW5hYmxlVGV4dFRyYWNrKCdlbicpO1xuICAgICAgICAgICAgfSovXG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ2xvYWRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIEZpeCBrZXlib2FyZCBmb2N1cyBpc3N1ZXNcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8zMTdcbiAgICAgICAgICAgICAgICBpZiAoX2lzLmh0bWxFbGVtZW50KHBseXIuZW1iZWQuZWxlbWVudCkgJiYgcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmVsZW1lbnQuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLm9uKCdwbGF5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5Jyk7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheWluZycpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ3BhdXNlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BhdXNlJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbigndGltZXVwZGF0ZScsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNlZWtpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gZGF0YS5zZWNvbmRzO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLm9uKCdwcm9ncmVzcycsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmJ1ZmZlcmVkID0gZGF0YS5wZXJjZW50O1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3Byb2dyZXNzJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoZGF0YS5wZXJjZW50KSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2NhbnBsYXl0aHJvdWdoJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ3NlZWtlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2Vla2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3NlZWtlZCcpO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXknKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLm9uKCdlbmRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdlbmRlZCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb3VuZGNsb3VkIHJlYWR5XG4gICAgICAgIGZ1bmN0aW9uIF9zb3VuZGNsb3VkUmVhZHkoKSB7XG4gICAgICAgICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICAgICAgICBwbHlyLmVtYmVkID0gd2luZG93LlNDLldpZGdldCh0aGlzKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgb24gcmVhZHlcbiAgICAgICAgICAgIHBseXIuZW1iZWQuYmluZCh3aW5kb3cuU0MuV2lkZ2V0LkV2ZW50cy5SRUFEWSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgZmF1eCBIVE1MNSBBUEkgdXNpbmcgdGhlIFNvdW5kY2xvdWQgQVBJXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQucGxheSgpO1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnNlZWtUbygwKTtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wYXVzZSgpO1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gMDtcblxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZ2V0RHVyYXRpb24oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5kdXJhdGlvbiA9IHZhbHVlLzEwMDA7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIFVJXG4gICAgICAgICAgICAgICAgICAgIF9lbWJlZFJlYWR5KCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmdldFBvc2l0aW9uKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRpbWV1cGRhdGVcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndGltZXVwZGF0ZScpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLlBMQVksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5Jyk7XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXlpbmcnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuYmluZCh3aW5kb3cuU0MuV2lkZ2V0LkV2ZW50cy5QQVVTRSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGF1c2UnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuYmluZCh3aW5kb3cuU0MuV2lkZ2V0LkV2ZW50cy5QTEFZX1BST0dSRVNTLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2Vla2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gZGF0YS5jdXJyZW50UG9zaXRpb24vMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndGltZXVwZGF0ZScpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5iaW5kKHdpbmRvdy5TQy5XaWRnZXQuRXZlbnRzLkxPQURfUFJPR1JFU1MsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5idWZmZXJlZCA9IGRhdGEubG9hZFByb2dyZXNzO1xuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwcm9ncmVzcycpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChkYXRhLmxvYWRQcm9ncmVzcykgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2NhbnBsYXl0aHJvdWdoJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuYmluZCh3aW5kb3cuU0MuV2lkZ2V0LkV2ZW50cy5GSU5JU0gsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ2VuZGVkJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBsYXkgbWVkaWFcbiAgICAgICAgZnVuY3Rpb24gX3BsYXkoKSB7XG4gICAgICAgICAgICBpZiAoJ3BsYXknIGluIHBseXIubWVkaWEpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBhdXNlIG1lZGlhXG4gICAgICAgIGZ1bmN0aW9uIF9wYXVzZSgpIHtcbiAgICAgICAgICAgIGlmICgncGF1c2UnIGluIHBseXIubWVkaWEpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUb2dnbGUgcGxheWJhY2tcbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZVBsYXkodG9nZ2xlKSB7XG4gICAgICAgICAgICAvLyBUcnVlIHRvZ2dsZVxuICAgICAgICAgICAgaWYgKCFfaXMuYm9vbGVhbih0b2dnbGUpKSB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlID0gcGx5ci5tZWRpYS5wYXVzZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0b2dnbGUpIHtcbiAgICAgICAgICAgICAgICBfcGxheSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfcGF1c2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRvZ2dsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJld2luZFxuICAgICAgICBmdW5jdGlvbiBfcmV3aW5kKHNlZWtUaW1lKSB7XG4gICAgICAgICAgICAvLyBVc2UgZGVmYXVsdCBpZiBuZWVkZWRcbiAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihzZWVrVGltZSkpIHtcbiAgICAgICAgICAgICAgICBzZWVrVGltZSA9IGNvbmZpZy5zZWVrVGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9zZWVrKHBseXIubWVkaWEuY3VycmVudFRpbWUgLSBzZWVrVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGYXN0IGZvcndhcmRcbiAgICAgICAgZnVuY3Rpb24gX2ZvcndhcmQoc2Vla1RpbWUpIHtcbiAgICAgICAgICAgIC8vIFVzZSBkZWZhdWx0IGlmIG5lZWRlZFxuICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKHNlZWtUaW1lKSkge1xuICAgICAgICAgICAgICAgIHNlZWtUaW1lID0gY29uZmlnLnNlZWtUaW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3NlZWsocGx5ci5tZWRpYS5jdXJyZW50VGltZSArIHNlZWtUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlZWsgdG8gdGltZVxuICAgICAgICAvLyBUaGUgaW5wdXQgcGFyYW1ldGVyIGNhbiBiZSBhbiBldmVudCBvciBhIG51bWJlclxuICAgICAgICBmdW5jdGlvbiBfc2VlayhpbnB1dCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldFRpbWUgID0gMCxcbiAgICAgICAgICAgICAgICBwYXVzZWQgICAgICA9IHBseXIubWVkaWEucGF1c2VkLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uICAgID0gX2dldER1cmF0aW9uKCk7XG5cbiAgICAgICAgICAgIGlmIChfaXMubnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFRpbWUgPSBpbnB1dDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX2lzLm9iamVjdChpbnB1dCkgJiYgX2luQXJyYXkoWydpbnB1dCcsICdjaGFuZ2UnXSwgaW5wdXQudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJdCdzIHRoZSBzZWVrIHNsaWRlclxuICAgICAgICAgICAgICAgIC8vIFNlZWsgdG8gdGhlIHNlbGVjdGVkIHRpbWVcbiAgICAgICAgICAgICAgICB0YXJnZXRUaW1lID0gKChpbnB1dC50YXJnZXQudmFsdWUgLyBpbnB1dC50YXJnZXQubWF4KSAqIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTm9ybWFsaXNlIHRhcmdldFRpbWVcbiAgICAgICAgICAgIGlmICh0YXJnZXRUaW1lIDwgMCkge1xuICAgICAgICAgICAgICAgIHRhcmdldFRpbWUgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRUaW1lID4gZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRUaW1lID0gZHVyYXRpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBzZWVrIHJhbmdlIGFuZCBwcm9ncmVzc1xuICAgICAgICAgICAgX3VwZGF0ZVNlZWtEaXNwbGF5KHRhcmdldFRpbWUpO1xuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIGN1cnJlbnQgdGltZVxuICAgICAgICAgICAgLy8gVHJ5L2NhdGNoIGluY2FzZSB0aGUgbWVkaWEgaXNuJ3Qgc2V0IGFuZCB3ZSdyZSBjYWxsaW5nIHNlZWsoKSBmcm9tIHNvdXJjZSgpIGFuZCBJRSBtb2Fuc1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gdGFyZ2V0VGltZS50b0ZpeGVkKDQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2goZSkge31cblxuICAgICAgICAgICAgLy8gRW1iZWRzXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmVtYmVkLCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2Vla1RvKHRhcmdldFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm91bmQgdG8gbmVhcmVzdCBzZWNvbmQgZm9yIHZpbWVvXG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnNldEN1cnJlbnRUaW1lKHRhcmdldFRpbWUudG9GaXhlZCgwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2Vla1RvKHRhcmdldFRpbWUgKiAxMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwYXVzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhdXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndGltZXVwZGF0ZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0IHNlZWtpbmcgZmxhZ1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2Vla2luZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHNlZWtpbmdcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdzZWVraW5nJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExvZ2dpbmdcbiAgICAgICAgICAgIF9sb2coJ1NlZWtpbmcgdG8gJyArIHBseXIubWVkaWEuY3VycmVudFRpbWUgKyAnIHNlY29uZHMnKTtcblxuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgJ21hbnVhbCcgY2FwdGlvbnNcbiAgICAgICAgICAgIF9zZWVrTWFudWFsQ2FwdGlvbnModGFyZ2V0VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIGR1cmF0aW9uIChvciBjdXN0b20gaWYgc2V0KVxuICAgICAgICBmdW5jdGlvbiBfZ2V0RHVyYXRpb24oKSB7XG4gICAgICAgICAgICAvLyBJdCBzaG91bGQgYmUgYSBudW1iZXIsIGJ1dCBwYXJzZSBpdCBqdXN0IGluY2FzZVxuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gcGFyc2VJbnQoY29uZmlnLmR1cmF0aW9uKSxcblxuICAgICAgICAgICAgLy8gVHJ1ZSBkdXJhdGlvblxuICAgICAgICAgICAgbWVkaWFEdXJhdGlvbiA9IDA7XG5cbiAgICAgICAgICAgIC8vIE9ubHkgaWYgZHVyYXRpb24gYXZhaWxhYmxlXG4gICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5kdXJhdGlvbiAhPT0gbnVsbCAmJiAhaXNOYU4ocGx5ci5tZWRpYS5kdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgICBtZWRpYUR1cmF0aW9uID0gcGx5ci5tZWRpYS5kdXJhdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgY3VzdG9tIGR1cmF0aW9uIGlzIGZ1bmt5LCB1c2UgcmVndWxhciBkdXJhdGlvblxuICAgICAgICAgICAgcmV0dXJuIChpc05hTihkdXJhdGlvbikgPyBtZWRpYUR1cmF0aW9uIDogZHVyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgcGxheWluZyBzdGF0ZVxuICAgICAgICBmdW5jdGlvbiBfY2hlY2tQbGF5aW5nKCkge1xuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5wbGF5aW5nLCAhcGx5ci5tZWRpYS5wYXVzZWQpO1xuXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnN0b3BwZWQsIHBseXIubWVkaWEucGF1c2VkKTtcblxuICAgICAgICAgICAgX3RvZ2dsZUNvbnRyb2xzKHBseXIubWVkaWEucGF1c2VkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNhdmUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICAgIGZ1bmN0aW9uIF9zYXZlU2Nyb2xsUG9zaXRpb24oKSB7XG4gICAgICAgICAgICBzY3JvbGwgPSB7XG4gICAgICAgICAgICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICAgICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0IHx8IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXN0b3JlIHNjcm9sbCBwb3NpdGlvblxuICAgICAgICBmdW5jdGlvbiBfcmVzdG9yZVNjcm9sbFBvc2l0aW9uKCkge1xuICAgICAgICAgICAgd2luZG93LnNjcm9sbFRvKHNjcm9sbC54LCBzY3JvbGwueSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUb2dnbGUgZnVsbHNjcmVlblxuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlRnVsbHNjcmVlbihldmVudCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIG5hdGl2ZSBzdXBwb3J0XG4gICAgICAgICAgICB2YXIgbmF0aXZlU3VwcG9ydCA9IGZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsU2NyZWVuO1xuXG4gICAgICAgICAgICBpZiAobmF0aXZlU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgIC8vIElmIGl0J3MgYSBmdWxsc2NyZWVuIGNoYW5nZSBldmVudCwgdXBkYXRlIHRoZSBVSVxuICAgICAgICAgICAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSBmdWxsc2NyZWVuLmZ1bGxTY3JlZW5FdmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5pc0Z1bGxzY3JlZW4gPSBmdWxsc2NyZWVuLmlzRnVsbFNjcmVlbihwbHlyLmNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRWxzZSBpdCdzIGEgdXNlciByZXF1ZXN0IHRvIGVudGVyIG9yIGV4aXRcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmdWxsc2NyZWVuLmlzRnVsbFNjcmVlbihwbHlyLmNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhdmUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBfc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlcXVlc3QgZnVsbCBzY3JlZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4ucmVxdWVzdEZ1bGxTY3JlZW4ocGx5ci5jb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFpbCBmcm9tIGZ1bGxzY3JlZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4uY2FuY2VsRnVsbFNjcmVlbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgZnVsbCBzY3JlZW4gKGl0IGNvdWxkIGZhaWwpXG4gICAgICAgICAgICAgICAgICAgIHBseXIuaXNGdWxsc2NyZWVuID0gZnVsbHNjcmVlbi5pc0Z1bGxTY3JlZW4ocGx5ci5jb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgaXQncyBhIHNpbXBsZSB0b2dnbGVcbiAgICAgICAgICAgICAgICBwbHlyLmlzRnVsbHNjcmVlbiA9ICFwbHlyLmlzRnVsbHNjcmVlbjtcblxuICAgICAgICAgICAgICAgIC8vIEJpbmQvdW5iaW5kIGVzY2FwZSBrZXlcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gcGx5ci5pc0Z1bGxzY3JlZW4gPyAnaGlkZGVuJyA6ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgY2xhc3MgaG9va1xuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5mdWxsc2NyZWVuLmFjdGl2ZSwgcGx5ci5pc0Z1bGxzY3JlZW4pO1xuXG4gICAgICAgICAgICAvLyBUcmFwIGZvY3VzXG4gICAgICAgICAgICBfZm9jdXNUcmFwKHBseXIuaXNGdWxsc2NyZWVuKTtcblxuICAgICAgICAgICAgLy8gU2V0IGJ1dHRvbiBzdGF0ZVxuICAgICAgICAgICAgaWYgKHBseXIuYnV0dG9ucyAmJiBwbHlyLmJ1dHRvbnMuZnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgIF90b2dnbGVTdGF0ZShwbHlyLmJ1dHRvbnMuZnVsbHNjcmVlbiwgcGx5ci5pc0Z1bGxzY3JlZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGFuIGV2ZW50XG4gICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIuY29udGFpbmVyLCBwbHlyLmlzRnVsbHNjcmVlbiA/ICdlbnRlcmZ1bGxzY3JlZW4nIDogJ2V4aXRmdWxsc2NyZWVuJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIFJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICAgICAgICBpZiAoIXBseXIuaXNGdWxsc2NyZWVuICYmIG5hdGl2ZVN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICBfcmVzdG9yZVNjcm9sbFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNdXRlXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVNdXRlKG11dGVkKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgbWV0aG9kIGlzIGNhbGxlZCB3aXRob3V0IHBhcmFtZXRlciwgdG9nZ2xlIGJhc2VkIG9uIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4obXV0ZWQpKSB7XG4gICAgICAgICAgICAgICAgbXV0ZWQgPSAhcGx5ci5tZWRpYS5tdXRlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IGJ1dHRvbiBzdGF0ZVxuICAgICAgICAgICAgX3RvZ2dsZVN0YXRlKHBseXIuYnV0dG9ucy5tdXRlLCBtdXRlZCk7XG5cbiAgICAgICAgICAgIC8vIFNldCBtdXRlIG9uIHRoZSBwbGF5ZXJcbiAgICAgICAgICAgIHBseXIubWVkaWEubXV0ZWQgPSBtdXRlZDtcblxuICAgICAgICAgICAgLy8gSWYgdm9sdW1lIGlzIDAgYWZ0ZXIgdW5tdXRpbmcsIHNldCB0byBkZWZhdWx0XG4gICAgICAgICAgICBpZiAocGx5ci5tZWRpYS52b2x1bWUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBfc2V0Vm9sdW1lKGNvbmZpZy52b2x1bWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFbWJlZHNcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBZb3VUdWJlXG4gICAgICAgICAgICAgICAgc3dpdGNoKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWRbcGx5ci5tZWRpYS5tdXRlZCA/ICdtdXRlJyA6ICd1bk11dGUnXSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2V0Vm9sdW1lKHBseXIubWVkaWEubXV0ZWQgPyAwIDogcGFyc2VGbG9hdChjb25maWcudm9sdW1lIC8gY29uZmlnLnZvbHVtZU1heCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB2b2x1bWVjaGFuZ2UgZm9yIGVtYmVkc1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3ZvbHVtZWNoYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHZvbHVtZVxuICAgICAgICBmdW5jdGlvbiBfc2V0Vm9sdW1lKHZvbHVtZSkge1xuICAgICAgICAgICAgdmFyIG1heCA9IGNvbmZpZy52b2x1bWVNYXgsXG4gICAgICAgICAgICAgICAgbWluID0gY29uZmlnLnZvbHVtZU1pbjtcblxuICAgICAgICAgICAgLy8gTG9hZCB2b2x1bWUgZnJvbSBzdG9yYWdlIGlmIG5vIHZhbHVlIHNwZWNpZmllZFxuICAgICAgICAgICAgaWYgKF9pcy51bmRlZmluZWQodm9sdW1lKSkge1xuICAgICAgICAgICAgICAgIHZvbHVtZSA9IHBseXIuc3RvcmFnZS52b2x1bWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVzZSBjb25maWcgaWYgYWxsIGVsc2UgZmFpbHNcbiAgICAgICAgICAgIGlmICh2b2x1bWUgPT09IG51bGwgfHwgaXNOYU4odm9sdW1lKSkge1xuICAgICAgICAgICAgICAgIHZvbHVtZSA9IGNvbmZpZy52b2x1bWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1heGltdW0gaXMgdm9sdW1lTWF4XG4gICAgICAgICAgICBpZiAodm9sdW1lID4gbWF4KSB7XG4gICAgICAgICAgICAgICAgdm9sdW1lID0gbWF4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWluaW11bSBpcyB2b2x1bWVNaW5cbiAgICAgICAgICAgIGlmICh2b2x1bWUgPCBtaW4pIHtcbiAgICAgICAgICAgICAgICB2b2x1bWUgPSBtaW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgcGxheWVyIHZvbHVtZVxuICAgICAgICAgICAgcGx5ci5tZWRpYS52b2x1bWUgPSBwYXJzZUZsb2F0KHZvbHVtZSAvIG1heCk7XG5cbiAgICAgICAgICAgIC8vIFNldCB0aGUgZGlzcGxheVxuICAgICAgICAgICAgaWYgKHBseXIudm9sdW1lLmRpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnZvbHVtZS5kaXNwbGF5LnZhbHVlID0gdm9sdW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFbWJlZHNcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2gocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZXRWb2x1bWUocGx5ci5tZWRpYS52b2x1bWUgKiAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzb3VuZGNsb3VkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2V0Vm9sdW1lKHBseXIubWVkaWEudm9sdW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdm9sdW1lY2hhbmdlIGZvciBlbWJlZHNcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd2b2x1bWVjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVG9nZ2xlIG11dGVkIHN0YXRlXG4gICAgICAgICAgICBpZiAodm9sdW1lID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5tdXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBseXIubWVkaWEubXV0ZWQgJiYgdm9sdW1lID4gMCkge1xuICAgICAgICAgICAgICAgIF90b2dnbGVNdXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmNyZWFzZSB2b2x1bWVcbiAgICAgICAgZnVuY3Rpb24gX2luY3JlYXNlVm9sdW1lKHN0ZXApIHtcbiAgICAgICAgICAgIHZhciB2b2x1bWUgPSBwbHlyLm1lZGlhLm11dGVkID8gMCA6IChwbHlyLm1lZGlhLnZvbHVtZSAqIGNvbmZpZy52b2x1bWVNYXgpO1xuXG4gICAgICAgICAgICBpZiAoIV9pcy5udW1iZXIoc3RlcCkpIHtcbiAgICAgICAgICAgICAgICBzdGVwID0gY29uZmlnLnZvbHVtZVN0ZXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9zZXRWb2x1bWUodm9sdW1lICsgc3RlcCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWNyZWFzZSB2b2x1bWVcbiAgICAgICAgZnVuY3Rpb24gX2RlY3JlYXNlVm9sdW1lKHN0ZXApIHtcbiAgICAgICAgICAgIHZhciB2b2x1bWUgPSBwbHlyLm1lZGlhLm11dGVkID8gMCA6IChwbHlyLm1lZGlhLnZvbHVtZSAqIGNvbmZpZy52b2x1bWVNYXgpO1xuXG4gICAgICAgICAgICBpZiAoIV9pcy5udW1iZXIoc3RlcCkpIHtcbiAgICAgICAgICAgICAgICBzdGVwID0gY29uZmlnLnZvbHVtZVN0ZXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9zZXRWb2x1bWUodm9sdW1lIC0gc3RlcCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgdm9sdW1lIFVJIGFuZCBzdG9yYWdlXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVWb2x1bWUoKSB7XG4gICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgdm9sdW1lXG4gICAgICAgICAgICB2YXIgdm9sdW1lID0gcGx5ci5tZWRpYS5tdXRlZCA/IDAgOiAocGx5ci5tZWRpYS52b2x1bWUgKiBjb25maWcudm9sdW1lTWF4KTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSA8aW5wdXQgdHlwZT1cInJhbmdlXCI+IGlmIHByZXNlbnRcbiAgICAgICAgICAgIGlmIChwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBseXIudm9sdW1lLmlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIudm9sdW1lLmlucHV0LnZhbHVlID0gdm9sdW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGx5ci52b2x1bWUuZGlzcGxheSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLnZvbHVtZS5kaXNwbGF5LnZhbHVlID0gdm9sdW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB2b2x1bWUgaW4gc3RvcmFnZVxuICAgICAgICAgICAgX3VwZGF0ZVN0b3JhZ2Uoe3ZvbHVtZTogdm9sdW1lfSk7XG5cbiAgICAgICAgICAgIC8vIFRvZ2dsZSBjbGFzcyBpZiBtdXRlZFxuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5tdXRlZCwgKHZvbHVtZSA9PT0gMCkpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2hlY2tib3ggZm9yIG11dGUgc3RhdGVcbiAgICAgICAgICAgIGlmIChwbHlyLnN1cHBvcnRlZC5mdWxsICYmIHBseXIuYnV0dG9ucy5tdXRlKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZVN0YXRlKHBseXIuYnV0dG9ucy5tdXRlLCAodm9sdW1lID09PSAwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUb2dnbGUgY2FwdGlvbnNcbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZUNhcHRpb25zKHNob3cpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gZnVsbCBzdXBwb3J0LCBvciB0aGVyZSdzIG5vIGNhcHRpb24gdG9nZ2xlXG4gICAgICAgICAgICBpZiAoIXBseXIuc3VwcG9ydGVkLmZ1bGwgfHwgIXBseXIuYnV0dG9ucy5jYXB0aW9ucykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIG1ldGhvZCBpcyBjYWxsZWQgd2l0aG91dCBwYXJhbWV0ZXIsIHRvZ2dsZSBiYXNlZCBvbiBjdXJyZW50IHZhbHVlXG4gICAgICAgICAgICBpZiAoIV9pcy5ib29sZWFuKHNob3cpKSB7XG4gICAgICAgICAgICAgICAgc2hvdyA9IChwbHlyLmNvbnRhaW5lci5jbGFzc05hbWUuaW5kZXhPZihjb25maWcuY2xhc3Nlcy5jYXB0aW9ucy5hY3RpdmUpID09PSAtMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBnbG9iYWxcbiAgICAgICAgICAgIHBseXIuY2FwdGlvbnNFbmFibGVkID0gc2hvdztcblxuICAgICAgICAgICAgLy8gVG9nZ2xlIHN0YXRlXG4gICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLmNhcHRpb25zLCBwbHlyLmNhcHRpb25zRW5hYmxlZCk7XG5cbiAgICAgICAgICAgIC8vIEFkZCBjbGFzcyBob29rXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmFjdGl2ZSwgcGx5ci5jYXB0aW9uc0VuYWJsZWQpO1xuXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGFuIGV2ZW50XG4gICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIuY29udGFpbmVyLCBwbHlyLmNhcHRpb25zRW5hYmxlZCA/ICdjYXB0aW9uc2VuYWJsZWQnIDogJ2NhcHRpb25zZGlzYWJsZWQnLCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gU2F2ZSBjYXB0aW9ucyBzdGF0ZSB0byBsb2NhbFN0b3JhZ2VcbiAgICAgICAgICAgIF91cGRhdGVTdG9yYWdlKHtjYXB0aW9uc0VuYWJsZWQ6IHBseXIuY2FwdGlvbnNFbmFibGVkfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiBtZWRpYSBpcyBsb2FkaW5nXG4gICAgICAgIGZ1bmN0aW9uIF9jaGVja0xvYWRpbmcoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBsb2FkaW5nID0gKGV2ZW50LnR5cGUgPT09ICd3YWl0aW5nJyk7XG5cbiAgICAgICAgICAgIC8vIENsZWFyIHRpbWVyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJzLmxvYWRpbmcpO1xuXG4gICAgICAgICAgICAvLyBUaW1lciB0byBwcmV2ZW50IGZsaWNrZXIgd2hlbiBzZWVraW5nXG4gICAgICAgICAgICB0aW1lcnMubG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gVG9nZ2xlIGNvbnRhaW5lciBjbGFzcyBob29rXG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5sb2FkaW5nLCBsb2FkaW5nKTtcblxuICAgICAgICAgICAgICAgIC8vIFNob3cgY29udHJvbHMgaWYgbG9hZGluZywgaGlkZSBpZiBkb25lXG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNvbnRyb2xzKGxvYWRpbmcpO1xuICAgICAgICAgICAgfSwgKGxvYWRpbmcgPyAyNTAgOiAwKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgPHByb2dyZXNzPiBlbGVtZW50c1xuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlUHJvZ3Jlc3MoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHByb2dyZXNzICAgID0gcGx5ci5wcm9ncmVzcy5wbGF5ZWQsXG4gICAgICAgICAgICAgICAgdmFsdWUgICAgICAgPSAwLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uICAgID0gX2dldER1cmF0aW9uKCk7XG5cbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBWaWRlbyBwbGF5aW5nXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RpbWV1cGRhdGUnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzZWVraW5nJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLmNvbnRyb2xzLnByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gX2dldFBlcmNlbnRhZ2UocGx5ci5tZWRpYS5jdXJyZW50VGltZSwgZHVyYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTZXQgc2VlayByYW5nZSB2YWx1ZSBvbmx5IGlmIGl0J3MgYSAnbmF0dXJhbCcgdGltZSBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICd0aW1ldXBkYXRlJyAmJiBwbHlyLmJ1dHRvbnMuc2Vlaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5zZWVrLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGJ1ZmZlciBzdGF0dXNcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncGxheWluZyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Byb2dyZXNzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzICAgID0gcGx5ci5wcm9ncmVzcy5idWZmZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAgICAgICA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZWQgPSBwbHlyLm1lZGlhLmJ1ZmZlcmVkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcmVkICYmIGJ1ZmZlcmVkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIVE1MNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2dldFBlcmNlbnRhZ2UoYnVmZmVyZWQuZW5kKDApLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfaXMubnVtYmVyKGJ1ZmZlcmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBZb3VUdWJlIHJldHVybnMgYmV0d2VlbiAwIGFuZCAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYnVmZmVyZWQgKiAxMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdmFsdWVzXG4gICAgICAgICAgICBfc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCA8cHJvZ3Jlc3M+IHZhbHVlXG4gICAgICAgIGZ1bmN0aW9uIF9zZXRQcm9ncmVzcyhwcm9ncmVzcywgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byAwXG4gICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGJ1ZmZlciBvciBiYWlsXG4gICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZChwcm9ncmVzcykpIHtcbiAgICAgICAgICAgICAgICBpZiAocGx5ci5wcm9ncmVzcyAmJiBwbHlyLnByb2dyZXNzLmJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyA9IHBseXIucHJvZ3Jlc3MuYnVmZmVyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE9uZSBwcm9ncmVzcyBlbGVtZW50IHBhc3NlZFxuICAgICAgICAgICAgaWYgKF9pcy5odG1sRWxlbWVudChwcm9ncmVzcykpIHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIC8vIE9iamVjdCBvZiBwcm9ncmVzcyArIHRleHQgZWxlbWVudFxuICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzcy5iYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MuYmFyLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcm9ncmVzcy50ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzLnRleHQuaW5uZXJIVE1MID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBkaXNwbGF5ZWQgdGltZVxuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlVGltZURpc3BsYXkodGltZSwgZWxlbWVudCkge1xuICAgICAgICAgICAgLy8gQmFpbCBpZiB0aGVyZSdzIG5vIGR1cmF0aW9uIGRpc3BsYXlcbiAgICAgICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmFsbGJhY2sgdG8gMFxuICAgICAgICAgICAgaWYgKGlzTmFOKHRpbWUpKSB7XG4gICAgICAgICAgICAgICAgdGltZSA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBseXIuc2VjcyA9IHBhcnNlSW50KHRpbWUgJSA2MCk7XG4gICAgICAgICAgICBwbHlyLm1pbnMgPSBwYXJzZUludCgodGltZSAvIDYwKSAlIDYwKTtcbiAgICAgICAgICAgIHBseXIuaG91cnMgPSBwYXJzZUludCgoKHRpbWUgLyA2MCkgLyA2MCkgJSA2MCk7XG5cbiAgICAgICAgICAgIC8vIERvIHdlIG5lZWQgdG8gZGlzcGxheSBob3Vycz9cbiAgICAgICAgICAgIHZhciBkaXNwbGF5SG91cnMgPSAocGFyc2VJbnQoKChfZ2V0RHVyYXRpb24oKSAvIDYwKSAvIDYwKSAlIDYwKSA+IDApO1xuXG4gICAgICAgICAgICAvLyBFbnN1cmUgaXQncyB0d28gZGlnaXRzLiBGb3IgZXhhbXBsZSwgMDMgcmF0aGVyIHRoYW4gMy5cbiAgICAgICAgICAgIHBseXIuc2VjcyA9ICgnMCcgKyBwbHlyLnNlY3MpLnNsaWNlKC0yKTtcbiAgICAgICAgICAgIHBseXIubWlucyA9ICgnMCcgKyBwbHlyLm1pbnMpLnNsaWNlKC0yKTtcblxuICAgICAgICAgICAgLy8gUmVuZGVyXG4gICAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IChkaXNwbGF5SG91cnMgPyBwbHlyLmhvdXJzICsgJzonIDogJycpICsgcGx5ci5taW5zICsgJzonICsgcGx5ci5zZWNzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hvdyB0aGUgZHVyYXRpb24gb24gbWV0YWRhdGFsb2FkZWRcbiAgICAgICAgZnVuY3Rpb24gX2Rpc3BsYXlEdXJhdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGR1cmF0aW9uXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBfZ2V0RHVyYXRpb24oKSB8fCAwO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG9ubHkgb25lIHRpbWUgZGlzcGxheSwgZGlzcGxheSBkdXJhdGlvbiB0aGVyZVxuICAgICAgICAgICAgaWYgKCFwbHlyLmR1cmF0aW9uICYmIGNvbmZpZy5kaXNwbGF5RHVyYXRpb24gJiYgcGx5ci5tZWRpYS5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICBfdXBkYXRlVGltZURpc3BsYXkoZHVyYXRpb24sIHBseXIuY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGEgZHVyYXRpb24gZWxlbWVudCwgdXBkYXRlIGNvbnRlbnRcbiAgICAgICAgICAgIGlmIChwbHlyLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgX3VwZGF0ZVRpbWVEaXNwbGF5KGR1cmF0aW9uLCBwbHlyLmR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSB0b29sdGlwIChpZiB2aXNpYmxlKVxuICAgICAgICAgICAgX3VwZGF0ZVNlZWtUb29sdGlwKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgdGltZSBjaGFuZ2UgZXZlbnRcbiAgICAgICAgZnVuY3Rpb24gX3RpbWVVcGRhdGUoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIER1cmF0aW9uXG4gICAgICAgICAgICBfdXBkYXRlVGltZURpc3BsYXkocGx5ci5tZWRpYS5jdXJyZW50VGltZSwgcGx5ci5jdXJyZW50VGltZSk7XG5cbiAgICAgICAgICAgIC8vIElnbm9yZSB1cGRhdGVzIHdoaWxlIHNlZWtpbmdcbiAgICAgICAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSAndGltZXVwZGF0ZScgJiYgcGx5ci5tZWRpYS5zZWVraW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQbGF5aW5nIHByb2dyZXNzXG4gICAgICAgICAgICBfdXBkYXRlUHJvZ3Jlc3MoZXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHNlZWsgcmFuZ2UgYW5kIHByb2dyZXNzXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVTZWVrRGlzcGxheSh0aW1lKSB7XG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIDBcbiAgICAgICAgICAgIGlmICghX2lzLm51bWJlcih0aW1lKSkge1xuICAgICAgICAgICAgICAgIHRpbWUgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gICAgPSBfZ2V0RHVyYXRpb24oKSxcbiAgICAgICAgICAgICAgICB2YWx1ZSAgICAgICA9IF9nZXRQZXJjZW50YWdlKHRpbWUsIGR1cmF0aW9uKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHByb2dyZXNzXG4gICAgICAgICAgICBpZiAocGx5ci5wcm9ncmVzcyAmJiBwbHlyLnByb2dyZXNzLnBsYXllZCkge1xuICAgICAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MucGxheWVkLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBzZWVrIHJhbmdlIGlucHV0XG4gICAgICAgICAgICBpZiAocGx5ci5idXR0b25zICYmIHBseXIuYnV0dG9ucy5zZWVrKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnNlZWsudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBob3ZlciB0b29sdGlwIGZvciBzZWVraW5nXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVTZWVrVG9vbHRpcChldmVudCkge1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gX2dldER1cmF0aW9uKCk7XG5cbiAgICAgICAgICAgIC8vIEJhaWwgaWYgc2V0dGluZyBub3QgdHJ1ZVxuICAgICAgICAgICAgaWYgKCFjb25maWcudG9vbHRpcHMuc2VlayB8fCAhcGx5ci5wcm9ncmVzcy5jb250YWluZXIgfHwgZHVyYXRpb24gPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBwZXJjZW50YWdlXG4gICAgICAgICAgICB2YXIgY2xpZW50UmVjdCAgPSBwbHlyLnByb2dyZXNzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICBwZXJjZW50ICAgICA9IDAsXG4gICAgICAgICAgICAgICAgdmlzaWJsZSAgICAgPSBjb25maWcuY2xhc3Nlcy50b29sdGlwICsgJy0tdmlzaWJsZSc7XG5cbiAgICAgICAgICAgIC8vIERldGVybWluZSBwZXJjZW50YWdlLCBpZiBhbHJlYWR5IHZpc2libGVcbiAgICAgICAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2hhc0NsYXNzKHBseXIucHJvZ3Jlc3MudG9vbHRpcCwgdmlzaWJsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudCA9IHBseXIucHJvZ3Jlc3MudG9vbHRpcC5zdHlsZS5sZWZ0LnJlcGxhY2UoJyUnLCAnJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudCA9ICgoMTAwIC8gY2xpZW50UmVjdC53aWR0aCkgKiAoZXZlbnQucGFnZVggLSBjbGllbnRSZWN0LmxlZnQpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IGJvdW5kc1xuICAgICAgICAgICAgaWYgKHBlcmNlbnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBlcmNlbnQgPiAxMDApIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50ID0gMTAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEaXNwbGF5IHRoZSB0aW1lIGEgY2xpY2sgd291bGQgc2VlayB0b1xuICAgICAgICAgICAgX3VwZGF0ZVRpbWVEaXNwbGF5KCgoZHVyYXRpb24gLyAxMDApICogcGVyY2VudCksIHBseXIucHJvZ3Jlc3MudG9vbHRpcCk7XG5cbiAgICAgICAgICAgIC8vIFNldCBwb3NpdGlvblxuICAgICAgICAgICAgcGx5ci5wcm9ncmVzcy50b29sdGlwLnN0eWxlLmxlZnQgPSBwZXJjZW50ICsgXCIlXCI7XG5cbiAgICAgICAgICAgIC8vIFNob3cvaGlkZSB0aGUgdG9vbHRpcFxuICAgICAgICAgICAgLy8gSWYgdGhlIGV2ZW50IGlzIGEgbW91ZXMgaW4vb3V0IGFuZCBwZXJjZW50YWdlIGlzIGluc2lkZSBib3VuZHNcbiAgICAgICAgICAgIGlmIChldmVudCAmJiBfaW5BcnJheShbJ21vdXNlZW50ZXInLCAnbW91c2VsZWF2ZSddLCBldmVudC50eXBlKSkge1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLnByb2dyZXNzLnRvb2x0aXAsIHZpc2libGUsIChldmVudC50eXBlID09PSAnbW91c2VlbnRlcicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cgdGhlIHBsYXllciBjb250cm9scyBpbiBmdWxsc2NyZWVuIG1vZGVcbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZUNvbnRyb2xzKHRvZ2dsZSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgaGlkZSBpZiBjb25maWcgc2F5cyBub3QgdG8sIGl0J3MgYXVkaW8sIG9yIG5vdCByZWFkeSBvciBsb2FkaW5nXG4gICAgICAgICAgICBpZiAoIWNvbmZpZy5oaWRlQ29udHJvbHMgfHwgcGx5ci50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGVsYXkgPSAwLFxuICAgICAgICAgICAgICAgIGlzRW50ZXJGdWxsc2NyZWVuID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvdyA9IHRvZ2dsZSxcbiAgICAgICAgICAgICAgICBsb2FkaW5nID0gX2hhc0NsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5sb2FkaW5nKTtcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBmYWxzZSBpZiBubyBib29sZWFuXG4gICAgICAgICAgICBpZiAoIV9pcy5ib29sZWFuKHRvZ2dsZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9nZ2xlICYmIHRvZ2dsZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElzIHRoZSBlbnRlciBmdWxsc2NyZWVuIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIGlzRW50ZXJGdWxsc2NyZWVuID0gKHRvZ2dsZS50eXBlID09PSAnZW50ZXJmdWxsc2NyZWVuJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gV2hldGhlciB0byBzaG93IGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgICAgIHNob3cgPSBfaW5BcnJheShbJ21vdXNlbW92ZScsICd0b3VjaHN0YXJ0JywgJ21vdXNlZW50ZXInLCAnZm9jdXMnXSwgdG9nZ2xlLnR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIERlbGF5IGhpZGluZyBvbiBtb3ZlIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2luQXJyYXkoWydtb3VzZW1vdmUnLCAndG91Y2htb3ZlJ10sIHRvZ2dsZS50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXkgPSAyMDAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVsYXkgYSBsaXR0bGUgbW9yZSBmb3Iga2V5Ym9hcmQgdXNlcnNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvZ2dsZS50eXBlID09PSAnZm9jdXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheSA9IDMwMDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzaG93ID0gX2hhc0NsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5oaWRlQ29udHJvbHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2xlYXIgdGltZXIgZXZlcnkgbW92ZW1lbnRcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXJzLmhvdmVyKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIG1vdXNlIGlzIG5vdCBvdmVyIHRoZSBjb250cm9scywgc2V0IGEgdGltZW91dCB0byBoaWRlIHRoZW1cbiAgICAgICAgICAgIGlmIChzaG93IHx8IHBseXIubWVkaWEucGF1c2VkIHx8IGxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmhpZGVDb250cm9scywgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgLy8gQWx3YXlzIHNob3cgY29udHJvbHMgd2hlbiBwYXVzZWQgb3IgaWYgdG91Y2hcbiAgICAgICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5wYXVzZWQgfHwgbG9hZGluZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRGVsYXkgZm9yIGhpZGluZyBvbiB0b3VjaFxuICAgICAgICAgICAgICAgIGlmIChwbHlyLmJyb3dzZXIuaXNUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxheSA9IDMwMDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0b2dnbGUgaXMgZmFsc2Ugb3IgaWYgd2UncmUgcGxheWluZyAocmVnYXJkbGVzcyBvZiB0b2dnbGUpLFxuICAgICAgICAgICAgLy8gdGhlbiBzZXQgdGhlIHRpbWVyIHRvIGhpZGUgdGhlIGNvbnRyb2xzXG4gICAgICAgICAgICBpZiAoIXNob3cgfHwgIXBseXIubWVkaWEucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgdGltZXJzLmhvdmVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBtb3VzZSBpcyBvdmVyIHRoZSBjb250cm9scyAoYW5kIG5vdCBlbnRlcmluZyBmdWxsc2NyZWVuKSwgYmFpbFxuICAgICAgICAgICAgICAgICAgICBpZiAoKHBseXIuY29udHJvbHMucHJlc3NlZCB8fCBwbHlyLmNvbnRyb2xzLmhvdmVyKSAmJiAhaXNFbnRlckZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuaGlkZUNvbnRyb2xzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgY29tbW9uIGZ1bmN0aW9uIHRvIHJldHJpZXZlIG1lZGlhIHNvdXJjZVxuICAgICAgICBmdW5jdGlvbiBfc291cmNlKHNvdXJjZSkge1xuICAgICAgICAgICAgLy8gSWYgbm90IG51bGwgb3IgdW5kZWZpbmVkLCBwYXJzZSBpdFxuICAgICAgICAgICAgaWYgKCFfaXMudW5kZWZpbmVkKHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBfdXBkYXRlU291cmNlKHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGN1cnJlbnQgc291cmNlXG4gICAgICAgICAgICB2YXIgdXJsO1xuICAgICAgICAgICAgc3dpdGNoKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBwbHlyLmVtYmVkLmdldFZpZGVvVXJsKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmdldFZpZGVvVXJsLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnc291bmRjbG91ZCc6XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuZ2V0Q3VycmVudFNvdW5kKGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gb2JqZWN0LnBlcm1hbGlua191cmw7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHVybCA9IHBseXIubWVkaWEuY3VycmVudFNyYztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1cmwgfHwgJyc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgc291cmNlXG4gICAgICAgIC8vIFNvdXJjZXMgYXJlIG5vdCBjaGVja2VkIGZvciBzdXBwb3J0IHNvIGJlIGNhcmVmdWxcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVNvdXJjZShzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICghX2lzLm9iamVjdChzb3VyY2UpIHx8ICEoJ3NvdXJjZXMnIGluIHNvdXJjZSkgfHwgIXNvdXJjZS5zb3VyY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIF93YXJuKCdJbnZhbGlkIHNvdXJjZSBmb3JtYXQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSByZWFkeSBjbGFzcyBob29rXG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnJlYWR5LCBmYWxzZSk7XG5cbiAgICAgICAgICAgIC8vIFBhdXNlIHBsYXliYWNrXG4gICAgICAgICAgICBfcGF1c2UoKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHNlZWsgcmFuZ2UgYW5kIHByb2dyZXNzXG4gICAgICAgICAgICBfdXBkYXRlU2Vla0Rpc3BsYXkoKTtcblxuICAgICAgICAgICAgLy8gUmVzZXQgYnVmZmVyIHByb2dyZXNzXG4gICAgICAgICAgICBfc2V0UHJvZ3Jlc3MoKTtcblxuICAgICAgICAgICAgLy8gQ2FuY2VsIGN1cnJlbnQgbmV0d29yayByZXF1ZXN0c1xuICAgICAgICAgICAgX2NhbmNlbFJlcXVlc3RzKCk7XG5cbiAgICAgICAgICAgIC8vIFNldHVwIG5ldyBzb3VyY2VcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldHVwKCkge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBlbWJlZCBvYmplY3RcbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgb2xkIG1lZGlhXG4gICAgICAgICAgICAgICAgX3JlbW92ZShwbHlyLm1lZGlhKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB2aWRlbyBjb250YWluZXJcbiAgICAgICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nICYmIHBseXIudmlkZW9Db250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgX3JlbW92ZShwbHlyLnZpZGVvQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZXNldCBjbGFzcyBuYW1lXG4gICAgICAgICAgICAgICAgaWYgKHBseXIuY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuY29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgdGhlIHR5cGVcbiAgICAgICAgICAgICAgICBpZiAoJ3R5cGUnIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLnR5cGUgPSBzb3VyY2UudHlwZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgY2hpbGQgdHlwZSBmb3IgdmlkZW8gKGl0IG1pZ2h0IGJlIGFuIGVtYmVkKVxuICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RTb3VyY2UgPSBzb3VyY2Uuc291cmNlc1swXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCd0eXBlJyBpbiBmaXJzdFNvdXJjZSAmJiBfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIGZpcnN0U291cmNlLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci50eXBlID0gZmlyc3RTb3VyY2UudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBzdXBwb3J0XG4gICAgICAgICAgICAgICAgcGx5ci5zdXBwb3J0ZWQgPSBzdXBwb3J0ZWQocGx5ci50eXBlKTtcblxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgbWFya3VwXG4gICAgICAgICAgICAgICAgc3dpdGNoKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZpbWVvJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc291bmRjbG91ZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkSWQgPSBzb3VyY2Uuc291cmNlc1swXS5zcmM7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJbmplY3QgdGhlIG5ldyBlbGVtZW50XG4gICAgICAgICAgICAgICAgX3ByZXBlbmRDaGlsZChwbHlyLmNvbnRhaW5lciwgcGx5ci5tZWRpYSk7XG5cbiAgICAgICAgICAgICAgICAvLyBBdXRvcGxheSB0aGUgbmV3IHNvdXJjZT9cbiAgICAgICAgICAgICAgICBpZiAoX2lzLmJvb2xlYW4oc291cmNlLmF1dG9wbGF5KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuYXV0b3BsYXkgPSBzb3VyY2UuYXV0b3BsYXk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IGF0dHJpYnV0ZXMgZm9yIGF1ZGlvIGFuZCB2aWRlb1xuICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5jcm9zc29yaWdpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ2Nyb3Nzb3JpZ2luJywgJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcuYXV0b3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdhdXRvcGxheScsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoJ3Bvc3RlcicgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgncG9zdGVyJywgc291cmNlLnBvc3Rlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5sb29wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgnbG9vcCcsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgY2xhc3MgaG9va3NcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmZ1bGxzY3JlZW4uYWN0aXZlLCBwbHlyLmlzRnVsbHNjcmVlbik7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5jYXB0aW9ucy5hY3RpdmUsIHBseXIuY2FwdGlvbnNFbmFibGVkKTtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlU3R5bGVIb29rKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgbmV3IHNvdXJjZXMgZm9yIGh0bWw1XG4gICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5odG1sNSwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICBfaW5zZXJ0Q2hpbGRFbGVtZW50cygnc291cmNlJywgc291cmNlLnNvdXJjZXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldCB1cCBmcm9tIHNjcmF0Y2hcbiAgICAgICAgICAgICAgICBfc2V0dXBNZWRpYSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gSFRNTDUgc3R1ZmZcbiAgICAgICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldHVwIGNhcHRpb25zXG4gICAgICAgICAgICAgICAgICAgIGlmICgndHJhY2tzJyBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbnNlcnRDaGlsZEVsZW1lbnRzKCd0cmFjaycsIHNvdXJjZS50cmFja3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTG9hZCBIVE1MNSBzb3VyY2VzXG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEubG9hZCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIEhUTUw1IG9yIGVtYmVkIGJ1dCBub3QgZnVsbHkgc3VwcG9ydGVkLCBzZXR1cEludGVyZmFjZSBhbmQgY2FsbCByZWFkeSBub3dcbiAgICAgICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpIHx8IChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkgJiYgIXBseXIuc3VwcG9ydGVkLmZ1bGwpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNldHVwIGludGVyZmFjZVxuICAgICAgICAgICAgICAgICAgICBfc2V0dXBJbnRlcmZhY2UoKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsIHJlYWR5XG4gICAgICAgICAgICAgICAgICAgIF9yZWFkeSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldCBhcmlhIHRpdGxlIGFuZCBpZnJhbWUgdGl0bGVcbiAgICAgICAgICAgICAgICBjb25maWcudGl0bGUgPSBzb3VyY2UudGl0bGU7XG4gICAgICAgICAgICAgICAgX3NldFRpdGxlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlc3Ryb3kgaW5zdGFuY2UgYWRuIHdhaXQgZm9yIGNhbGxiYWNrXG4gICAgICAgICAgICAvLyBWaW1lbyB0aHJvd3MgYSB3b2JibHkgaWYgeW91IGRvbid0IHdhaXRcbiAgICAgICAgICAgIF9kZXN0cm95KHNldHVwLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgcG9zdGVyXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVQb3N0ZXIoc291cmNlKSB7XG4gICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ3Bvc3RlcicsIHNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMaXN0ZW4gZm9yIGNvbnRyb2wgZXZlbnRzXG4gICAgICAgIGZ1bmN0aW9uIF9jb250cm9sTGlzdGVuZXJzKCkge1xuICAgICAgICAgICAgLy8gSUUgZG9lc24ndCBzdXBwb3J0IGlucHV0IGV2ZW50LCBzbyB3ZSBmYWxsYmFjayB0byBjaGFuZ2VcbiAgICAgICAgICAgIHZhciBpbnB1dEV2ZW50ID0gKHBseXIuYnJvd3Nlci5pc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnKTtcblxuICAgICAgICAgICAgLy8gQ2xpY2sgcGxheS9wYXVzZSBoZWxwZXJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvZ2dsZVBsYXkoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBsYXkgPSBfdG9nZ2xlUGxheSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGJ1dHRvbnNcbiAgICAgICAgICAgICAgICB2YXIgdHJpZ2dlciA9IHBseXIuYnV0dG9uc1twbGF5ID8gJ3BsYXknIDogJ3BhdXNlJ10sXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHBseXIuYnV0dG9uc1twbGF5ID8gJ3BhdXNlJyA6ICdwbGF5J107XG5cbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGxhc3QgcGxheSBidXR0b24gdG8gYWNjb3VudCBmb3IgdGhlIGxhcmdlIHBsYXkgYnV0dG9uXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXRbdGFyZ2V0Lmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldFswXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXR1cCBmb2N1cyBhbmQgdGFiIGZvY3VzXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFkVGFiRm9jdXMgPSBfaGFzQ2xhc3ModHJpZ2dlciwgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuZm9jdXMoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhZFRhYkZvY3VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHRyaWdnZXIsIGNvbmZpZy5jbGFzc2VzLnRhYkZvY3VzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHRhcmdldCwgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBmb2N1c2VkIGVsZW1lbnRcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEZvY3VzRWxlbWVudCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZm9jdXNlZCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWZvY3VzZWQgfHwgZm9jdXNlZCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgICAgICAgICBmb2N1c2VkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb2N1c2VkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignOmZvY3VzJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvY3VzZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUga2V5IGNvZGUgZm9yIGFuIGV2ZW50XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRLZXlDb2RlKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGUgPyBldmVudC5rZXlDb2RlIDogZXZlbnQud2hpY2g7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERldGVjdCB0YWIgZm9jdXNcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrVGFiRm9jdXMoZm9jdXNlZCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGJ1dHRvbiBpbiBwbHlyLmJ1dHRvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBwbHlyLmJ1dHRvbnNbYnV0dG9uXTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoX2lzLm5vZGVMaXN0KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MoZWxlbWVudFtpXSwgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMsIChlbGVtZW50W2ldID09PSBmb2N1c2VkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MoZWxlbWVudCwgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMsIChlbGVtZW50ID09PSBmb2N1c2VkKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEtleWJvYXJkIHNob3J0Y3V0c1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5rZXlib2FyZFNob3JjdXRzLmZvY3VzZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgZ2xvYmFsIHByZXNzZXNcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmtleWJvYXJkU2hvcmN1dHMuZ2xvYmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIF9vbih3aW5kb3csICdrZXlkb3duIGtleXVwJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZ2V0S2V5Q29kZShldmVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c2VkID0gZ2V0Rm9jdXNFbGVtZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2VkID0gWzQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU2LDU3LDc1LDc3LDcwLDY3XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ICAgPSBnZXQoKS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgaGFuZGxlIGdsb2JhbCBrZXkgcHJlc3MgaWYgdGhlcmUncyBvbmx5IG9uZSBwbGF5ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0aGUga2V5IGlzIGluIHRoZSBhbGxvd2VkIGtleXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBpZiB0aGUgZm9jdXNlZCBlbGVtZW50IGlzIG5vdCBlZGl0YWJsZSAoZS5nLiB0ZXh0IGlucHV0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGFueSB0aGF0IGFjY2VwdCBrZXkgaW5wdXQgaHR0cDovL3dlYmFpbS5vcmcvdGVjaG5pcXVlcy9rZXlib2FyZC9cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMSAmJiBfaW5BcnJheShhbGxvd2VkLCBjb2RlKSAmJiAoIV9pcy5odG1sRWxlbWVudChmb2N1c2VkKSB8fCAhX21hdGNoZXMoZm9jdXNlZCwgY29uZmlnLnNlbGVjdG9ycy5lZGl0YWJsZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlS2V5KGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIHByZXNzZXMgb24gZm9jdXNlZFxuICAgICAgICAgICAgICAgIF9vbihwbHlyLmNvbnRhaW5lciwgJ2tleWRvd24ga2V5dXAnLCBoYW5kbGVLZXkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVLZXkoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IGdldEtleUNvZGUoZXZlbnQpLFxuICAgICAgICAgICAgICAgICAgICBwcmVzc2VkID0gZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nLFxuICAgICAgICAgICAgICAgICAgICBoZWxkID0gcHJlc3NlZCAmJiBjb2RlID09PSBsYXN0O1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGV2ZW50IGlzIGJ1YmJsZWQgZnJvbSB0aGUgbWVkaWEgZWxlbWVudFxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggZG9lc24ndCBnZXQgdGhlIGtleWNvZGUgZm9yIHdoYXRldmVyIHJlYXNvblxuICAgICAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihjb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2VlayBieSB0aGUgbnVtYmVyIGtleXNcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZWVrQnlLZXkoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IGR1cmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHBseXIubWVkaWEuZHVyYXRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQmFpbCBpZiB3ZSBoYXZlIG5vIGR1cmF0aW9uIHNldFxuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pcy5udW1iZXIoZHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBEaXZpZGUgdGhlIG1heCBkdXJhdGlvbiBpbnRvIDEwdGgncyBhbmQgdGltZXMgYnkgdGhlIG51bWJlciB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBfc2VlaygoZHVyYXRpb24gLyAxMCkgKiAoY29kZSAtIDQ4KSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBrZXkgb24ga2V5ZG93blxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IG9uIGtleXVwXG4gICAgICAgICAgICAgICAgaWYgKHByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hpY2gga2V5Y29kZXMgc2hvdWxkIHdlIHByZXZlbnQgZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmVudERlZmF1bHQgPSBbNDgsNDksNTAsNTEsNTIsNTMsNTQsNTYsNTcsMzIsNzUsMzgsNDAsNzcsMzksMzcsNzAsNjddO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBjb2RlIGlzIGZvdW5kIHByZXZlbnQgZGVmYXVsdCAoZS5nLiBwcmV2ZW50IHNjcm9sbGluZyBmb3IgYXJyb3dzKVxuICAgICAgICAgICAgICAgICAgICBpZiAoX2luQXJyYXkocHJldmVudERlZmF1bHQsIGNvZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2goY29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMC05XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ4OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTA6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDUxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1MjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU0OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1NTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTY6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU3OiBpZiAoIWhlbGQpIHsgc2Vla0J5S2V5KCk7IH0gYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTcGFjZSBhbmQgSyBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc1OiBpZiAoIWhlbGQpIHsgX3RvZ2dsZVBsYXkoKTsgfSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFycm93IHVwXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OiBfaW5jcmVhc2VWb2x1bWUoKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcnJvdyBkb3duXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOiBfZGVjcmVhc2VWb2x1bWUoKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNIGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3NzogaWYgKCFoZWxkKSB7IF90b2dnbGVNdXRlKCkgfSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFycm93IGZvcndhcmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzk6IF9mb3J3YXJkKCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJyb3cgYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNzogX3Jld2luZCgpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEYga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDcwOiBfdG9nZ2xlRnVsbHNjcmVlbigpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEMga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY3OiBpZiAoIWhlbGQpIHsgX3RvZ2dsZUNhcHRpb25zKCk7IH0gYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBFc2NhcGUgaXMgaGFuZGxlIG5hdGl2ZWx5IHdoZW4gaW4gZnVsbCBzY3JlZW5cbiAgICAgICAgICAgICAgICAgICAgLy8gU28gd2Ugb25seSBuZWVkIHRvIHdvcnJ5IGFib3V0IG5vbiBuYXRpdmVcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbiAmJiBwbHlyLmlzRnVsbHNjcmVlbiAmJiBjb2RlID09PSAyNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIGxhc3QgY29kZSBmb3IgbmV4dCBjeWNsZVxuICAgICAgICAgICAgICAgICAgICBsYXN0ID0gY29kZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsYXN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZvY3VzL3RhYiBtYW5hZ2VtZW50XG4gICAgICAgICAgICBfb24od2luZG93LCAna2V5dXAnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gZ2V0S2V5Q29kZShldmVudCksXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWQgPSBnZXRGb2N1c0VsZW1lbnQoKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrVGFiRm9jdXMoZm9jdXNlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfb24oZG9jdW1lbnQuYm9keSwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKF9nZXRFbGVtZW50KCcuJyArIGNvbmZpZy5jbGFzc2VzLnRhYkZvY3VzKSwgY29uZmlnLmNsYXNzZXMudGFiRm9jdXMsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgYnV0dG9uIGluIHBseXIuYnV0dG9ucykge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gcGx5ci5idXR0b25zW2J1dHRvbl07XG5cbiAgICAgICAgICAgICAgICBfb24oZWxlbWVudCwgJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKGVsZW1lbnQsICd0YWItZm9jdXMnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFBsYXlcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5wbGF5LCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLnBsYXksIHRvZ2dsZVBsYXkpO1xuXG4gICAgICAgICAgICAvLyBQYXVzZVxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnBhdXNlLCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLnBhdXNlLCB0b2dnbGVQbGF5KTtcblxuICAgICAgICAgICAgLy8gUmVzdGFydFxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLnJlc3RhcnQsICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMucmVzdGFydCwgX3NlZWspO1xuXG4gICAgICAgICAgICAvLyBSZXdpbmRcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5yZXdpbmQsICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMucmV3aW5kLCBfcmV3aW5kKTtcblxuICAgICAgICAgICAgLy8gRmFzdCBmb3J3YXJkXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMuZm9yd2FyZCwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5mb3J3YXJkLCBfZm9yd2FyZCk7XG5cbiAgICAgICAgICAgIC8vIFNlZWtcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5zZWVrLCBpbnB1dEV2ZW50LCBjb25maWcubGlzdGVuZXJzLnNlZWssIF9zZWVrKTtcblxuICAgICAgICAgICAgLy8gU2V0IHZvbHVtZVxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci52b2x1bWUuaW5wdXQsIGlucHV0RXZlbnQsIGNvbmZpZy5saXN0ZW5lcnMudm9sdW1lLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfc2V0Vm9sdW1lKHBseXIudm9sdW1lLmlucHV0LnZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBNdXRlXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMubXV0ZSwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5tdXRlLCBfdG9nZ2xlTXV0ZSk7XG5cbiAgICAgICAgICAgIC8vIEZ1bGxzY3JlZW5cbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5mdWxsc2NyZWVuLCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLmZ1bGxzY3JlZW4sIF90b2dnbGVGdWxsc2NyZWVuKTtcblxuICAgICAgICAgICAgLy8gSGFuZGxlIHVzZXIgZXhpdGluZyBmdWxsc2NyZWVuIGJ5IGVzY2FwaW5nIGV0Y1xuICAgICAgICAgICAgaWYgKGZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgX29uKGRvY3VtZW50LCBmdWxsc2NyZWVuLmZ1bGxTY3JlZW5FdmVudE5hbWUsIF90b2dnbGVGdWxsc2NyZWVuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FwdGlvbnNcbiAgICAgICAgICAgIF9vbihwbHlyLmJ1dHRvbnMuY2FwdGlvbnMsICdjbGljaycsIF90b2dnbGVDYXB0aW9ucyk7XG5cbiAgICAgICAgICAgIC8vIFNlZWsgdG9vbHRpcFxuICAgICAgICAgICAgX29uKHBseXIucHJvZ3Jlc3MuY29udGFpbmVyLCAnbW91c2VlbnRlciBtb3VzZWxlYXZlIG1vdXNlbW92ZScsIF91cGRhdGVTZWVrVG9vbHRpcCk7XG5cbiAgICAgICAgICAgIC8vIFRvZ2dsZSBjb250cm9scyB2aXNpYmlsaXR5IGJhc2VkIG9uIG1vdXNlIG1vdmVtZW50XG4gICAgICAgICAgICBpZiAoY29uZmlnLmhpZGVDb250cm9scykge1xuICAgICAgICAgICAgICAgIC8vIFRvZ2dsZSBjb250cm9scyBvbiBtb3VzZSBldmVudHMgYW5kIGVudGVyaW5nIGZ1bGxzY3JlZW5cbiAgICAgICAgICAgICAgICBfb24ocGx5ci5jb250YWluZXIsICdtb3VzZWVudGVyIG1vdXNlbGVhdmUgbW91c2Vtb3ZlIHRvdWNoc3RhcnQgdG91Y2hlbmQgdG91Y2hjYW5jZWwgdG91Y2htb3ZlIGVudGVyZnVsbHNjcmVlbicsIF90b2dnbGVDb250cm9scyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXYXRjaCBmb3IgY3Vyc29yIG92ZXIgY29udHJvbHMgc28gdGhleSBkb24ndCBoaWRlIHdoZW4gdHJ5aW5nIHRvIGludGVyYWN0XG4gICAgICAgICAgICAgICAgX29uKHBseXIuY29udHJvbHMsICdtb3VzZWVudGVyIG1vdXNlbGVhdmUnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmNvbnRyb2xzLmhvdmVyID0gZXZlbnQudHlwZSA9PT0gJ21vdXNlZW50ZXInO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgIC8vIFdhdGNoIGZvciBjdXJzb3Igb3ZlciBjb250cm9scyBzbyB0aGV5IGRvbid0IGhpZGUgd2hlbiB0cnlpbmcgdG8gaW50ZXJhY3RcbiAgICAgICAgICAgICAgICBfb24ocGx5ci5jb250cm9scywgJ21vdXNlZG93biBtb3VzZXVwIHRvdWNoc3RhcnQgdG91Y2hlbmQgdG91Y2hjYW5jZWwnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmNvbnRyb2xzLnByZXNzZWQgPSBfaW5BcnJheShbJ21vdXNlZG93bicsICd0b3VjaHN0YXJ0J10sIGV2ZW50LnR5cGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gRm9jdXMgaW4vb3V0IG9uIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX29uKHBseXIuY29udHJvbHMsICdmb2N1cyBibHVyJywgX3RvZ2dsZUNvbnRyb2xzLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQWRqdXN0IHZvbHVtZSBvbiBzY3JvbGxcbiAgICAgICAgICAgIF9vbihwbHlyLnZvbHVtZS5pbnB1dCwgJ3doZWVsJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gRGV0ZWN0IFwibmF0dXJhbFwiIHNjcm9sbCAtIHN1cHBvcmVkIG9uIE9TIFggU2FmYXJpIG9ubHlcbiAgICAgICAgICAgICAgICAvLyBPdGhlciBicm93c2VycyBvbiBPUyBYIHdpbGwgYmUgaW52ZXJ0ZWQgdW50aWwgc3VwcG9ydCBpbXByb3Zlc1xuICAgICAgICAgICAgICAgIHZhciBpbnZlcnRlZCA9IGV2ZW50LndlYmtpdERpcmVjdGlvbkludmVydGVkRnJvbURldmljZSxcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IChjb25maWcudm9sdW1lU3RlcCAvIDUpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2Nyb2xsIGRvd24gKG9yIHVwIG9uIG5hdHVyYWwpIHRvIGRlY3JlYXNlXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmRlbHRhWSA8IDAgfHwgZXZlbnQuZGVsdGFYID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW52ZXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kZWNyZWFzZVZvbHVtZShzdGVwKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pbmNyZWFzZVZvbHVtZShzdGVwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNjcm9sbCB1cCAob3IgZG93biBvbiBuYXR1cmFsKSB0byBpbmNyZWFzZVxuICAgICAgICAgICAgICAgIGlmIChldmVudC5kZWx0YVkgPiAwIHx8IGV2ZW50LmRlbHRhWCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGludmVydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5jcmVhc2VWb2x1bWUoc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZGVjcmVhc2VWb2x1bWUoc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIExpc3RlbiBmb3IgbWVkaWEgZXZlbnRzXG4gICAgICAgIGZ1bmN0aW9uIF9tZWRpYUxpc3RlbmVycygpIHtcbiAgICAgICAgICAgIC8vIFRpbWUgY2hhbmdlIG9uIG1lZGlhXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUgc2Vla2luZycsIF90aW1lVXBkYXRlKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIG1hbnVhbCBjYXB0aW9uc1xuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICd0aW1ldXBkYXRlJywgX3NlZWtNYW51YWxDYXB0aW9ucyk7XG5cbiAgICAgICAgICAgIC8vIERpc3BsYXkgZHVyYXRpb25cbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAnZHVyYXRpb25jaGFuZ2UgbG9hZGVkbWV0YWRhdGEnLCBfZGlzcGxheUR1cmF0aW9uKTtcblxuICAgICAgICAgICAgLy8gSGFuZGxlIHRoZSBtZWRpYSBmaW5pc2hpbmdcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAnZW5kZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBTaG93IHBvc3RlciBvbiBlbmRcbiAgICAgICAgICAgICAgICBpZiAocGx5ci50eXBlID09PSAndmlkZW8nICYmIGNvbmZpZy5zaG93UG9zdGVyT25FbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIudHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NldENhcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc3RhcnRcbiAgICAgICAgICAgICAgICAgICAgX3NlZWsoKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZS1sb2FkIG1lZGlhXG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEubG9hZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgYnVmZmVyIHByb2dyZXNzXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ3Byb2dyZXNzIHBsYXlpbmcnLCBfdXBkYXRlUHJvZ3Jlc3MpO1xuXG4gICAgICAgICAgICAvLyBIYW5kbGUgbmF0aXZlIG11dGVcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAndm9sdW1lY2hhbmdlJywgX3VwZGF0ZVZvbHVtZSk7XG5cbiAgICAgICAgICAgIC8vIEhhbmRsZSBuYXRpdmUgcGxheS9wYXVzZVxuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICdwbGF5IHBhdXNlIGVuZGVkJywgX2NoZWNrUGxheWluZyk7XG5cbiAgICAgICAgICAgIC8vIExvYWRpbmdcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAnd2FpdGluZyBjYW5wbGF5IHNlZWtlZCcsIF9jaGVja0xvYWRpbmcpO1xuXG4gICAgICAgICAgICAvLyBDbGljayB2aWRlb1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5jbGlja1RvUGxheSAmJiBwbHlyLnR5cGUgIT09ICdhdWRpbycpIHtcbiAgICAgICAgICAgICAgICAvLyBSZS1mZXRjaCB0aGUgd3JhcHBlclxuICAgICAgICAgICAgICAgIHZhciB3cmFwcGVyID0gX2dldEVsZW1lbnQoJy4nICsgY29uZmlnLmNsYXNzZXMudmlkZW9XcmFwcGVyKTtcblxuICAgICAgICAgICAgICAgIC8vIEJhaWwgaWYgdGhlcmUncyBubyB3cmFwcGVyICh0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4pXG4gICAgICAgICAgICAgICAgaWYgKCF3cmFwcGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgY3Vyc29yXG4gICAgICAgICAgICAgICAgd3JhcHBlci5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcblxuICAgICAgICAgICAgICAgIC8vIE9uIGNsaWNrIHBsYXksIHBhdXNlIG9yZSByZXN0YXJ0XG4gICAgICAgICAgICAgICAgX29uKHdyYXBwZXIsICdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUb3VjaCBkZXZpY2VzIHdpbGwganVzdCBzaG93IGNvbnRyb2xzIChpZiB3ZSdyZSBoaWRpbmcgY29udHJvbHMpXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcuaGlkZUNvbnRyb2xzICYmIHBseXIuYnJvd3Nlci5pc1RvdWNoICYmICFwbHlyLm1lZGlhLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIubWVkaWEucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcGxheSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBseXIubWVkaWEuZW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZWVrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfcGxheSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3BhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGlzYWJsZSByaWdodCBjbGlja1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5kaXNhYmxlQ29udGV4dE1lbnUpIHtcbiAgICAgICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ2NvbnRleHRtZW51JywgZnVuY3Rpb24oZXZlbnQpIHsgZXZlbnQucHJldmVudERlZmF1bHQoKTsgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFByb3h5IGV2ZW50cyB0byBjb250YWluZXJcbiAgICAgICAgICAgIC8vIEJ1YmJsZSB1cCBrZXkgZXZlbnRzIGZvciBFZGdlXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgY29uZmlnLmV2ZW50cy5jb25jYXQoWydrZXl1cCcsICdrZXlkb3duJ10pLmpvaW4oJyAnKSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIuY29udGFpbmVyLCBldmVudC50eXBlLCB0cnVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2FuY2VsIGN1cnJlbnQgbmV0d29yayByZXF1ZXN0c1xuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9pc3N1ZXMvMTc0XG4gICAgICAgIGZ1bmN0aW9uIF9jYW5jZWxSZXF1ZXN0cygpIHtcbiAgICAgICAgICAgIGlmICghX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZW1vdmUgY2hpbGQgc291cmNlc1xuICAgICAgICAgICAgdmFyIHNvdXJjZXMgPSBwbHlyLm1lZGlhLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NvdXJjZScpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgX3JlbW92ZShzb3VyY2VzW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IGJsYW5rIHZpZGVvIHNyYyBhdHRyaWJ1dGVcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdG8gcHJldmVudCBhIE1FRElBX0VSUl9TUkNfTk9UX1NVUFBPUlRFRCBlcnJvclxuICAgICAgICAgICAgLy8gSW5mbzogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMjIzMTU3OS9ob3ctdG8tcHJvcGVybHktZGlzcG9zZS1vZi1hbi1odG1sNS12aWRlby1hbmQtY2xvc2Utc29ja2V0LW9yLWNvbm5lY3Rpb25cbiAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdzcmMnLCAnaHR0cHM6Ly9jZG4uc2Vsei5jb20vcGx5ci9ibGFuay5tcDQnKTtcblxuICAgICAgICAgICAgLy8gTG9hZCB0aGUgbmV3IGVtcHR5IHNvdXJjZVxuICAgICAgICAgICAgLy8gVGhpcyB3aWxsIGNhbmNlbCBleGlzdGluZyByZXF1ZXN0c1xuICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzE3NFxuICAgICAgICAgICAgcGx5ci5tZWRpYS5sb2FkKCk7XG5cbiAgICAgICAgICAgIC8vIERlYnVnZ2luZ1xuICAgICAgICAgICAgX2xvZygnQ2FuY2VsbGVkIG5ldHdvcmsgcmVxdWVzdHMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlc3Ryb3kgYW4gaW5zdGFuY2VcbiAgICAgICAgLy8gRXZlbnQgbGlzdGVuZXJzIGFyZSByZW1vdmVkIHdoZW4gZWxlbWVudHMgYXJlIHJlbW92ZWRcbiAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMjUyODA0OS9pZi1hLWRvbS1lbGVtZW50LWlzLXJlbW92ZWQtYXJlLWl0cy1saXN0ZW5lcnMtYWxzby1yZW1vdmVkLWZyb20tbWVtb3J5XG4gICAgICAgIGZ1bmN0aW9uIF9kZXN0cm95KGNhbGxiYWNrLCByZXN0b3JlKSB7XG4gICAgICAgICAgICAvLyBCYWlsIGlmIHRoZSBlbGVtZW50IGlzIG5vdCBpbml0aWFsaXplZFxuICAgICAgICAgICAgaWYgKCFwbHlyLmluaXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVHlwZSBzcGVjaWZpYyBzdHVmZlxuICAgICAgICAgICAgc3dpdGNoIChwbHlyLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGltZXJzXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5idWZmZXJpbmcpO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcnMucGxheWluZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGVzdHJveSBZb3VUdWJlIEFQSVxuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmRlc3Ryb3koKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cFxuICAgICAgICAgICAgICAgICAgICBjbGVhblVwKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIC8vIERlc3Ryb3kgVmltZW8gQVBJXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZW4gY2xlYW4gdXAgKHdhaXQsIHRvIHByZXZlbnQgcG9zdG1lc3NhZ2UgZXJyb3JzKVxuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnVubG9hZCgpLnRoZW4oY2xlYW5VcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVmltZW8gZG9lcyBub3QgYWx3YXlzIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB0aW1lcnMuY2xlYW5VcCA9IHdpbmRvdy5zZXRUaW1lb3V0KGNsZWFuVXAsIDIwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgICAgICAgICAgICAgICAvLyBSZXN0b3JlIG5hdGl2ZSB2aWRlbyBjb250cm9sc1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlTmF0aXZlQ29udHJvbHModHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5VcCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjbGVhblVwKCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcnMuY2xlYW5VcCk7XG5cbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHRvIHJlc3RvcmUgb3JpZ2luYWwgZWxlbWVudFxuICAgICAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4ocmVzdG9yZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2FsbGJhY2tcbiAgICAgICAgICAgICAgICBpZiAoX2lzLmZ1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKG9yaWdpbmFsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBCYWlsIGlmIHdlIGRvbid0IG5lZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgZWxlbWVudFxuICAgICAgICAgICAgICAgIGlmICghcmVzdG9yZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGluaXQgZmxhZ1xuICAgICAgICAgICAgICAgIHBseXIuaW5pdCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVwbGFjZSB0aGUgY29udGFpbmVyIHdpdGggdGhlIG9yaWdpbmFsIGVsZW1lbnQgcHJvdmlkZWRcbiAgICAgICAgICAgICAgICBwbHlyLmNvbnRhaW5lci5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChvcmlnaW5hbCwgcGx5ci5jb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gRXZlbnRcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KG9yaWdpbmFsLCAnZGVzdHJveWVkJywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBhIHBsYXllclxuICAgICAgICBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICAgICAgICAgIC8vIEJhaWwgaWYgdGhlIGVsZW1lbnQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgICAgICAgIGlmIChwbHlyLmluaXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0dXAgdGhlIGZ1bGxzY3JlZW4gYXBpXG4gICAgICAgICAgICBmdWxsc2NyZWVuID0gX2Z1bGxzY3JlZW4oKTtcblxuICAgICAgICAgICAgLy8gU25pZmYgb3V0IHRoZSBicm93c2VyXG4gICAgICAgICAgICBwbHlyLmJyb3dzZXIgPSBfYnJvd3NlclNuaWZmKCk7XG5cbiAgICAgICAgICAgIC8vIEJhaWwgaWYgbm90aGluZyB0byBzZXR1cFxuICAgICAgICAgICAgaWYgKCFfaXMuaHRtbEVsZW1lbnQocGx5ci5tZWRpYSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExvYWQgc2F2ZWQgc2V0dGluZ3MgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgICAgICAgICAgIF9zZXR1cFN0b3JhZ2UoKTtcblxuICAgICAgICAgICAgLy8gU2V0IG1lZGlhIHR5cGUgYmFzZWQgb24gdGFnIG9yIGRhdGEgYXR0cmlidXRlXG4gICAgICAgICAgICAvLyBTdXBwb3J0ZWQ6IHZpZGVvLCBhdWRpbywgdmltZW8sIHlvdXR1YmVcbiAgICAgICAgICAgIHZhciB0YWdOYW1lID0gbWVkaWEudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKHRhZ05hbWUgPT09ICdkaXYnKSB7XG4gICAgICAgICAgICAgICAgcGx5ci50eXBlICAgICA9IG1lZGlhLmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZElkICA9IG1lZGlhLmdldEF0dHJpYnV0ZSgnZGF0YS12aWRlby1pZCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgICAgICAgICAgICBtZWRpYS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtdHlwZScpO1xuICAgICAgICAgICAgICAgIG1lZGlhLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12aWRlby1pZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwbHlyLnR5cGUgICAgICAgICAgID0gdGFnTmFtZTtcbiAgICAgICAgICAgICAgICBjb25maWcuY3Jvc3NvcmlnaW4gID0gKG1lZGlhLmdldEF0dHJpYnV0ZSgnY3Jvc3NvcmlnaW4nKSAhPT0gbnVsbCk7XG4gICAgICAgICAgICAgICAgY29uZmlnLmF1dG9wbGF5ICAgICA9IChjb25maWcuYXV0b3BsYXkgfHwgKG1lZGlhLmdldEF0dHJpYnV0ZSgnYXV0b3BsYXknKSAhPT0gbnVsbCkpO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5sb29wICAgICAgICAgPSAoY29uZmlnLmxvb3AgfHwgKG1lZGlhLmdldEF0dHJpYnV0ZSgnbG9vcCcpICE9PSBudWxsKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBzdXBwb3J0XG4gICAgICAgICAgICBwbHlyLnN1cHBvcnRlZCA9IHN1cHBvcnRlZChwbHlyLnR5cGUpO1xuXG4gICAgICAgICAgICAvLyBJZiBubyBuYXRpdmUgc3VwcG9ydCwgYmFpbFxuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5iYXNpYykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gV3JhcCBtZWRpYVxuICAgICAgICAgICAgcGx5ci5jb250YWluZXIgPSBfd3JhcChtZWRpYSwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuXG4gICAgICAgICAgICAvLyBBbGxvdyBmb2N1cyB0byBiZSBjYXB0dXJlZFxuICAgICAgICAgICAgcGx5ci5jb250YWluZXIuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsIDApO1xuXG4gICAgICAgICAgICAvLyBBZGQgc3R5bGUgaG9va1xuICAgICAgICAgICAgX3RvZ2dsZVN0eWxlSG9vaygpO1xuXG4gICAgICAgICAgICAvLyBEZWJ1ZyBpbmZvXG4gICAgICAgICAgICBfbG9nKCcnICsgcGx5ci5icm93c2VyLm5hbWUgKyAnICcgKyBwbHlyLmJyb3dzZXIudmVyc2lvbik7XG5cbiAgICAgICAgICAgIC8vIFNldHVwIG1lZGlhXG4gICAgICAgICAgICBfc2V0dXBNZWRpYSgpO1xuXG4gICAgICAgICAgICAvLyBTZXR1cCBpbnRlcmZhY2VcbiAgICAgICAgICAgIC8vIElmIGVtYmVkIGJ1dCBub3QgZnVsbHkgc3VwcG9ydGVkLCBzZXR1cEludGVyZmFjZSAodG8gYXZvaWQgZmxhc2ggb2YgY29udHJvbHMpIGFuZCBjYWxsIHJlYWR5IG5vd1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5odG1sNSwgcGx5ci50eXBlKSB8fCAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmVtYmVkLCBwbHlyLnR5cGUpICYmICFwbHlyLnN1cHBvcnRlZC5mdWxsKSkge1xuICAgICAgICAgICAgICAgIC8vIFNldHVwIFVJXG4gICAgICAgICAgICAgICAgX3NldHVwSW50ZXJmYWNlKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxsIHJlYWR5XG4gICAgICAgICAgICAgICAgX3JlYWR5KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgdGl0bGUgb24gYnV0dG9uIGFuZCBmcmFtZVxuICAgICAgICAgICAgICAgIF9zZXRUaXRsZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTdWNjZXNzZnVsIHNldHVwXG4gICAgICAgICAgICBwbHlyLmluaXQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgdGhlIFVJXG4gICAgICAgIGZ1bmN0aW9uIF9zZXR1cEludGVyZmFjZSgpIHtcbiAgICAgICAgICAgIC8vIERvbid0IHNldHVwIGludGVyZmFjZSBpZiBubyBzdXBwb3J0XG4gICAgICAgICAgICBpZiAoIXBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICBfd2FybignQmFzaWMgc3VwcG9ydCBvbmx5JywgcGx5ci50eXBlKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjb250cm9sc1xuICAgICAgICAgICAgICAgIF9yZW1vdmUoX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jb250cm9scy53cmFwcGVyKSk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgbGFyZ2UgcGxheVxuICAgICAgICAgICAgICAgIF9yZW1vdmUoX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLnBsYXkpKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgbmF0aXZlIGNvbnRyb2xzXG4gICAgICAgICAgICAgICAgX3RvZ2dsZU5hdGl2ZUNvbnRyb2xzKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgLy8gQmFpbFxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5qZWN0IGN1c3RvbSBjb250cm9scyBpZiBub3QgcHJlc2VudFxuICAgICAgICAgICAgdmFyIGNvbnRyb2xzTWlzc2luZyA9ICFfZ2V0RWxlbWVudHMoY29uZmlnLnNlbGVjdG9ycy5jb250cm9scy53cmFwcGVyKS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoY29udHJvbHNNaXNzaW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gSW5qZWN0IGN1c3RvbSBjb250cm9sc1xuICAgICAgICAgICAgICAgIF9pbmplY3RDb250cm9scygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBlbGVtZW50c1xuICAgICAgICAgICAgaWYgKCFfZmluZEVsZW1lbnRzKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBjb250cm9scyBhcmUgaW5qZWN0ZWQsIHJlLWJpbmQgbGlzdGVuZXJzIGZvciBjb250cm9sc1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xzTWlzc2luZykge1xuICAgICAgICAgICAgICAgIF9jb250cm9sTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1lZGlhIGVsZW1lbnQgbGlzdGVuZXJzXG4gICAgICAgICAgICBfbWVkaWFMaXN0ZW5lcnMoKTtcblxuICAgICAgICAgICAgLy8gUmVtb3ZlIG5hdGl2ZSBjb250cm9sc1xuICAgICAgICAgICAgX3RvZ2dsZU5hdGl2ZUNvbnRyb2xzKCk7XG5cbiAgICAgICAgICAgIC8vIFNldHVwIGZ1bGxzY3JlZW5cbiAgICAgICAgICAgIF9zZXR1cEZ1bGxzY3JlZW4oKTtcblxuICAgICAgICAgICAgLy8gQ2FwdGlvbnNcbiAgICAgICAgICAgIF9zZXR1cENhcHRpb25zKCk7XG5cbiAgICAgICAgICAgIC8vIFNldCB2b2x1bWVcbiAgICAgICAgICAgIF9zZXRWb2x1bWUoKTtcbiAgICAgICAgICAgIF91cGRhdGVWb2x1bWUoKTtcblxuICAgICAgICAgICAgLy8gUmVzZXQgdGltZSBkaXNwbGF5XG4gICAgICAgICAgICBfdGltZVVwZGF0ZSgpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIFVJXG4gICAgICAgICAgICBfY2hlY2tQbGF5aW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBhcGkgPSB7XG4gICAgICAgICAgICBnZXRPcmlnaW5hbDogICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gb3JpZ2luYWw7IH0sXG4gICAgICAgICAgICBnZXRDb250YWluZXI6ICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5jb250YWluZXIgfSxcbiAgICAgICAgICAgIGdldEVtYmVkOiAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLmVtYmVkOyB9LFxuICAgICAgICAgICAgZ2V0TWVkaWE6ICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIubWVkaWE7IH0sXG4gICAgICAgICAgICBnZXRUeXBlOiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci50eXBlOyB9LFxuICAgICAgICAgICAgZ2V0RHVyYXRpb246ICAgICAgICBfZ2V0RHVyYXRpb24sXG4gICAgICAgICAgICBnZXRDdXJyZW50VGltZTogICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5tZWRpYS5jdXJyZW50VGltZTsgfSxcbiAgICAgICAgICAgIGdldFZvbHVtZTogICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLm1lZGlhLnZvbHVtZTsgfSxcbiAgICAgICAgICAgIGlzTXV0ZWQ6ICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLm1lZGlhLm11dGVkOyB9LFxuICAgICAgICAgICAgaXNSZWFkeTogICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIF9oYXNDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMucmVhZHkpOyB9LFxuICAgICAgICAgICAgaXNMb2FkaW5nOiAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIF9oYXNDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMubG9hZGluZyk7IH0sXG4gICAgICAgICAgICBpc1BhdXNlZDogICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5tZWRpYS5wYXVzZWQ7IH0sXG4gICAgICAgICAgICBvbjogICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjaykgeyBfb24ocGx5ci5jb250YWluZXIsIGV2ZW50LCBjYWxsYmFjayk7IHJldHVybiB0aGlzOyB9LFxuICAgICAgICAgICAgcGxheTogICAgICAgICAgICAgICBfcGxheSxcbiAgICAgICAgICAgIHBhdXNlOiAgICAgICAgICAgICAgX3BhdXNlLFxuICAgICAgICAgICAgc3RvcDogICAgICAgICAgICAgICBmdW5jdGlvbigpIHsgX3BhdXNlKCk7IF9zZWVrKCk7IH0sXG4gICAgICAgICAgICByZXN0YXJ0OiAgICAgICAgICAgIF9zZWVrLFxuICAgICAgICAgICAgcmV3aW5kOiAgICAgICAgICAgICBfcmV3aW5kLFxuICAgICAgICAgICAgZm9yd2FyZDogICAgICAgICAgICBfZm9yd2FyZCxcbiAgICAgICAgICAgIHNlZWs6ICAgICAgICAgICAgICAgX3NlZWssXG4gICAgICAgICAgICBzb3VyY2U6ICAgICAgICAgICAgIF9zb3VyY2UsXG4gICAgICAgICAgICBwb3N0ZXI6ICAgICAgICAgICAgIF91cGRhdGVQb3N0ZXIsXG4gICAgICAgICAgICBzZXRWb2x1bWU6ICAgICAgICAgIF9zZXRWb2x1bWUsXG4gICAgICAgICAgICB0b2dnbGVQbGF5OiAgICAgICAgIF90b2dnbGVQbGF5LFxuICAgICAgICAgICAgdG9nZ2xlTXV0ZTogICAgICAgICBfdG9nZ2xlTXV0ZSxcbiAgICAgICAgICAgIHRvZ2dsZUNhcHRpb25zOiAgICAgX3RvZ2dsZUNhcHRpb25zLFxuICAgICAgICAgICAgdG9nZ2xlRnVsbHNjcmVlbjogICBfdG9nZ2xlRnVsbHNjcmVlbixcbiAgICAgICAgICAgIHRvZ2dsZUNvbnRyb2xzOiAgICAgX3RvZ2dsZUNvbnRyb2xzLFxuICAgICAgICAgICAgaXNGdWxsc2NyZWVuOiAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIuaXNGdWxsc2NyZWVuIHx8IGZhbHNlOyB9LFxuICAgICAgICAgICAgc3VwcG9ydDogICAgICAgICAgICBmdW5jdGlvbihtaW1lVHlwZSkgeyByZXR1cm4gX3N1cHBvcnRNaW1lKHBseXIsIG1pbWVUeXBlKTsgfSxcbiAgICAgICAgICAgIGRlc3Ryb3k6ICAgICAgICAgICAgX2Rlc3Ryb3lcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBFdmVyeXRoaW5nIGRvbmVcbiAgICAgICAgZnVuY3Rpb24gX3JlYWR5KCkge1xuICAgICAgICAgICAgLy8gUmVhZHkgZXZlbnQgYXQgZW5kIG9mIGV4ZWN1dGlvbiBzdGFja1xuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncmVhZHknKTtcbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgICAgICAvLyBTZXQgY2xhc3MgaG9vayBvbiBtZWRpYSBlbGVtZW50XG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5tZWRpYSwgZGVmYXVsdHMuY2xhc3Nlcy5zZXR1cCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIFNldCBjb250YWluZXIgY2xhc3MgZm9yIHJlYWR5XG4gICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnJlYWR5LCB0cnVlKTtcblxuICAgICAgICAgICAgLy8gU3RvcmUgYSByZWZlcm5jZSB0byBpbnN0YW5jZVxuICAgICAgICAgICAgcGx5ci5tZWRpYS5wbHlyID0gYXBpO1xuXG4gICAgICAgICAgICAvLyBBdXRvcGxheVxuICAgICAgICAgICAgaWYgKGNvbmZpZy5hdXRvcGxheSkge1xuICAgICAgICAgICAgICAgIF9wbGF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWFsaXplIGluc3RhbmNlXG4gICAgICAgIF9pbml0KCk7XG5cbiAgICAgICAgLy8gSWYgaW5pdCBmYWlsZWQsIHJldHVybiBudWxsXG4gICAgICAgIGlmICghcGx5ci5pbml0KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcGk7XG4gICAgfVxuXG4gICAgLy8gTG9hZCBhIHNwcml0ZVxuICAgIGZ1bmN0aW9uIGxvYWRTcHJpdGUodXJsLCBpZCkge1xuICAgICAgICB2YXIgeCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgIC8vIElmIHRoZSBpZCBpcyBzZXQgYW5kIHNwcml0ZSBleGlzdHMsIGJhaWxcbiAgICAgICAgaWYgKF9pcy5zdHJpbmcoaWQpICYmIF9pcy5odG1sRWxlbWVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIGlkKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBwbGFjZWhvbGRlciAodG8gcHJldmVudCBsb2FkaW5nIHR3aWNlKVxuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2hpZGRlbicsICcnKTtcbiAgICAgICAgaWYgKF9pcy5zdHJpbmcoaWQpKSB7XG4gICAgICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZShjb250YWluZXIsIGRvY3VtZW50LmJvZHkuY2hpbGROb2Rlc1swXSk7XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIENPUlMgc3VwcG9ydFxuICAgICAgICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geCkge1xuICAgICAgICAgICAgeC5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5qZWN0IGhpZGRlbiBkaXYgd2l0aCBzcHJpdGUgb24gbG9hZFxuICAgICAgICB4Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IHgucmVzcG9uc2VUZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgeC5zZW5kKCk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIHN1cHBvcnRcbiAgICBmdW5jdGlvbiBzdXBwb3J0ZWQodHlwZSkge1xuICAgICAgICB2YXIgYnJvd3NlciAgICAgPSBfYnJvd3NlclNuaWZmKCksXG4gICAgICAgICAgICBpc09sZElFICAgICA9IChicm93c2VyLmlzSUUgJiYgYnJvd3Nlci52ZXJzaW9uIDw9IDkpLFxuICAgICAgICAgICAgaXNJb3MgICAgICAgPSBicm93c2VyLmlzSW9zLFxuICAgICAgICAgICAgaXNJcGhvbmUgICAgPSAvaVBob25lfGlQb2QvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLFxuICAgICAgICAgICAgYXVkaW8gICAgICAgPSAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJykuY2FuUGxheVR5cGUsXG4gICAgICAgICAgICB2aWRlbyAgICAgICA9ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKS5jYW5QbGF5VHlwZSxcbiAgICAgICAgICAgIGJhc2ljLCBmdWxsO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAndmlkZW8nOlxuICAgICAgICAgICAgICAgIGJhc2ljID0gdmlkZW87XG4gICAgICAgICAgICAgICAgZnVsbCAgPSAoYmFzaWMgJiYgKCFpc09sZElFICYmICFpc0lwaG9uZSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgICAgICAgICAgYmFzaWMgPSBhdWRpbztcbiAgICAgICAgICAgICAgICBmdWxsICA9IChiYXNpYyAmJiAhaXNPbGRJRSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3ZpbWVvJzpcbiAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgY2FzZSAnc291bmRjbG91ZCc6XG4gICAgICAgICAgICAgICAgYmFzaWMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZ1bGwgID0gKCFpc09sZElFICYmICFpc0lvcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYmFzaWMgPSAoYXVkaW8gJiYgdmlkZW8pO1xuICAgICAgICAgICAgICAgIGZ1bGwgID0gKGJhc2ljICYmICFpc09sZElFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiYXNpYzogIGJhc2ljLFxuICAgICAgICAgICAgZnVsbDogICBmdWxsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gU2V0dXAgZnVuY3Rpb25cbiAgICBmdW5jdGlvbiBzZXR1cCh0YXJnZXRzLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIEdldCB0aGUgcGxheWVyc1xuICAgICAgICB2YXIgcGxheWVycyAgICAgPSBbXSxcbiAgICAgICAgICAgIGluc3RhbmNlcyAgID0gW10sXG4gICAgICAgICAgICBzZWxlY3RvciAgICA9IFtkZWZhdWx0cy5zZWxlY3RvcnMuaHRtbDUsIGRlZmF1bHRzLnNlbGVjdG9ycy5lbWJlZF0uam9pbignLCcpO1xuXG4gICAgICAgIC8vIFNlbGVjdCB0aGUgZWxlbWVudHNcbiAgICAgICAgaWYgKF9pcy5zdHJpbmcodGFyZ2V0cykpIHtcbiAgICAgICAgICAgIC8vIFN0cmluZyBzZWxlY3RvciBwYXNzZWRcbiAgICAgICAgICAgIHRhcmdldHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhcmdldHMpO1xuICAgICAgICB9ICBlbHNlIGlmIChfaXMuaHRtbEVsZW1lbnQodGFyZ2V0cykpIHtcbiAgICAgICAgICAgIC8vIFNpbmdsZSBIVE1MRWxlbWVudCBwYXNzZWRcbiAgICAgICAgICAgIHRhcmdldHMgPSBbdGFyZ2V0c107XG4gICAgICAgIH0gIGVsc2UgaWYgKCFfaXMubm9kZUxpc3QodGFyZ2V0cykgJiYgIV9pcy5hcnJheSh0YXJnZXRzKSAmJiAhX2lzLnN0cmluZyh0YXJnZXRzKSkgIHtcbiAgICAgICAgICAgIC8vIE5vIHNlbGVjdG9yIHBhc3NlZCwgcG9zc2libHkgb3B0aW9ucyBhcyBmaXJzdCBhcmd1bWVudFxuICAgICAgICAgICAgLy8gSWYgb3B0aW9ucyBhcmUgdGhlIGZpcnN0IGFyZ3VtZW50XG4gICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZChvcHRpb25zKSAmJiBfaXMub2JqZWN0KHRhcmdldHMpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHRhcmdldHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVzZSBkZWZhdWx0IHNlbGVjdG9yXG4gICAgICAgICAgICB0YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IE5vZGVMaXN0IHRvIGFycmF5XG4gICAgICAgIGlmIChfaXMubm9kZUxpc3QodGFyZ2V0cykpIHtcbiAgICAgICAgICAgIHRhcmdldHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0YXJnZXRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJhaWwgaWYgZGlzYWJsZWQgb3Igbm8gYmFzaWMgc3VwcG9ydFxuICAgICAgICAvLyBZb3UgbWF5IHdhbnQgdG8gZGlzYWJsZSBjZXJ0YWluIFVBcyBldGNcbiAgICAgICAgaWYgKCFzdXBwb3J0ZWQoKS5iYXNpYyB8fCAhdGFyZ2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCB0byBjb250YWluZXIgbGlzdFxuICAgICAgICBmdW5jdGlvbiBhZGQodGFyZ2V0LCBtZWRpYSkge1xuICAgICAgICAgICAgaWYgKCFfaGFzQ2xhc3MobWVkaWEsIGRlZmF1bHRzLmNsYXNzZXMuaG9vaykpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAvLyBBbHdheXMgd3JhcCBpbiBhIDxkaXY+IGZvciBzdHlsaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vY29udGFpbmVyOiAgX3dyYXAobWVkaWEsIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gQ291bGQgYmUgYSBjb250YWluZXIgb3IgdGhlIG1lZGlhIGl0c2VsZlxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIHRoZSA8dmlkZW8+LCA8YXVkaW8+IG9yIDxkaXY+IChZb3VUdWJlL1ZpbWVvKVxuICAgICAgICAgICAgICAgICAgICBtZWRpYTogICAgICBtZWRpYVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHRhcmdldHMgaGF2ZSBtdWx0aXBsZSBtZWRpYSBlbGVtZW50c1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0YXJnZXRzW2ldO1xuXG4gICAgICAgICAgICAvLyBHZXQgY2hpbGRyZW5cbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRhcmdldC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBtb3JlIHRoYW4gb25lIG1lZGlhIGVsZW1lbnQgY2hpbGQsIHdyYXAgdGhlbVxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgY2hpbGRyZW4ubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkKHRhcmdldCwgY2hpbGRyZW5beF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX21hdGNoZXModGFyZ2V0LCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICAvLyBUYXJnZXQgaXMgbWVkaWEgZWxlbWVudFxuICAgICAgICAgICAgICAgIGFkZCh0YXJnZXQsIHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYSBwbGF5ZXIgaW5zdGFuY2UgZm9yIGVhY2ggZWxlbWVudFxuICAgICAgICBwbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24ocGxheWVyKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCAgICAgPSBwbGF5ZXIudGFyZ2V0LFxuICAgICAgICAgICAgICAgIG1lZGlhICAgICAgID0gcGxheWVyLm1lZGlhLFxuICAgICAgICAgICAgICAgIG1hdGNoICAgICAgID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIFRoZSB0YXJnZXQgZWxlbWVudCBjYW4gYWxzbyBiZSB0aGUgbWVkaWEgZWxlbWVudFxuICAgICAgICAgICAgaWYgKG1lZGlhID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXR1cCBhIHBsYXllciBpbnN0YW5jZSBhbmQgYWRkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAvLyBDcmVhdGUgaW5zdGFuY2Utc3BlY2lmaWMgY29uZmlnXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgICAgICAgICAvLyBUcnkgcGFyc2luZyBkYXRhIGF0dHJpYnV0ZSBjb25maWdcbiAgICAgICAgICAgIHRyeSB7IGRhdGEgPSBKU09OLnBhcnNlKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXBseXInKSk7IH1cbiAgICAgICAgICAgIGNhdGNoKGUpIHsgfVxuXG4gICAgICAgICAgICB2YXIgY29uZmlnID0gX2V4dGVuZCh7fSwgZGVmYXVsdHMsIG9wdGlvbnMsIGRhdGEpO1xuXG4gICAgICAgICAgICAvLyBCYWlsIGlmIG5vdCBlbmFibGVkXG4gICAgICAgICAgICBpZiAoIWNvbmZpZy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgaW5zdGFuY2VcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBQbHlyKG1lZGlhLCBjb25maWcpO1xuXG4gICAgICAgICAgICAvLyBHbyB0byBuZXh0IGlmIHNldHVwIGZhaWxlZFxuICAgICAgICAgICAgaWYgKCFfaXMub2JqZWN0KGluc3RhbmNlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBldmVudHMgaWYgZGVidWdnaW5nXG4gICAgICAgICAgICBpZiAoY29uZmlnLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IGNvbmZpZy5ldmVudHMuY29uY2F0KFsnc2V0dXAnLCAnc3RhdGVjaGFuZ2UnLCAnZW50ZXJmdWxsc2NyZWVuJywgJ2V4aXRmdWxsc2NyZWVuJywgJ2NhcHRpb25zZW5hYmxlZCcsICdjYXB0aW9uc2Rpc2FibGVkJ10pO1xuXG4gICAgICAgICAgICAgICAgX29uKGluc3RhbmNlLmdldENvbnRhaW5lcigpLCBldmVudHMuam9pbignICcpLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhbY29uZmlnLmxvZ1ByZWZpeCwgJ2V2ZW50OicsIGV2ZW50LnR5cGVdLmpvaW4oJyAnKSwgZXZlbnQuZGV0YWlsLnBseXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYWxsYmFja1xuICAgICAgICAgICAgX2V2ZW50KGluc3RhbmNlLmdldENvbnRhaW5lcigpLCAnc2V0dXAnLCB0cnVlLCB7XG4gICAgICAgICAgICAgICAgcGx5cjogaW5zdGFuY2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBBZGQgdG8gcmV0dXJuIGFycmF5IGV2ZW4gaWYgaXQncyBhbHJlYWR5IHNldHVwXG4gICAgICAgICAgICBpbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBpbnN0YW5jZXM7XG4gICAgfVxuXG4gICAgLy8gR2V0IGFsbCBpbnN0YW5jZXMgd2l0aGluIGEgcHJvdmlkZWQgY29udGFpbmVyXG4gICAgZnVuY3Rpb24gZ2V0KGNvbnRhaW5lcikge1xuICAgICAgICBpZiAoX2lzLnN0cmluZyhjb250YWluZXIpKSB7XG4gICAgICAgICAgICAvLyBHZXQgc2VsZWN0b3IgaWYgc3RyaW5nIHBhc3NlZFxuICAgICAgICAgICAgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKF9pcy51bmRlZmluZWQoY29udGFpbmVyKSkge1xuICAgICAgICAgICAgLy8gVXNlIGJvZHkgYnkgZGVmYXVsdCB0byBnZXQgYWxsIG9uIHBhZ2VcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmJvZHk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgSFRNTCBlbGVtZW50XG4gICAgICAgIGlmIChfaXMuaHRtbEVsZW1lbnQoY29udGFpbmVyKSkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgZGVmYXVsdHMuY2xhc3Nlcy5zZXR1cCksXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VzID0gW107XG5cbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX2lzLm9iamVjdChlbGVtZW50LnBseXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlcy5wdXNoKGVsZW1lbnQucGx5cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0dXA6ICAgICAgc2V0dXAsXG4gICAgICAgIHN1cHBvcnRlZDogIHN1cHBvcnRlZCxcbiAgICAgICAgbG9hZFNwcml0ZTogbG9hZFNwcml0ZSxcbiAgICAgICAgZ2V0OiAgICAgICAgZ2V0XG4gICAgfTtcbn0pKTtcblxuLy8gQ3VzdG9tIGV2ZW50IHBvbHlmaWxsXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQvQ3VzdG9tRXZlbnRcbihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMpIHtcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHsgYnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IGZhbHNlLCBkZXRhaWw6IHVuZGVmaW5lZCB9O1xuICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICAgIHJldHVybiBldnQ7XG4gICAgfVxuXG4gICAgQ3VzdG9tRXZlbnQucHJvdG90eXBlID0gd2luZG93LkV2ZW50LnByb3RvdHlwZTtcblxuICAgIHdpbmRvdy5DdXN0b21FdmVudCA9IEN1c3RvbUV2ZW50O1xufSkoKTtcbiIsIi8qXG4gICAgIF8gXyAgICAgIF8gICAgICAgX1xuIF9fX3wgKF8pIF9fX3wgfCBfXyAgKF8pX19fXG4vIF9ffCB8IHwvIF9ffCB8LyAvICB8IC8gX198XG5cXF9fIFxcIHwgfCAoX198ICAgPCBfIHwgXFxfXyBcXFxufF9fXy9ffF98XFxfX198X3xcXF8oXykvIHxfX18vXG4gICAgICAgICAgICAgICAgICAgfF9fL1xuXG4gVmVyc2lvbjogMS42LjBcbiAgQXV0aG9yOiBLZW4gV2hlZWxlclxuIFdlYnNpdGU6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pb1xuICAgIERvY3M6IGh0dHA6Ly9rZW53aGVlbGVyLmdpdGh1Yi5pby9zbGlja1xuICAgIFJlcG86IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2tcbiAgSXNzdWVzOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrL2lzc3Vlc1xuXG4gKi9cbi8qIGdsb2JhbCB3aW5kb3csIGRvY3VtZW50LCBkZWZpbmUsIGpRdWVyeSwgc2V0SW50ZXJ2YWwsIGNsZWFySW50ZXJ2YWwgKi9cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cblxufShmdW5jdGlvbigkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBTbGljayA9IHdpbmRvdy5TbGljayB8fCB7fTtcblxuICAgIFNsaWNrID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBpbnN0YW5jZVVpZCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gU2xpY2soZWxlbWVudCwgc2V0dGluZ3MpIHtcblxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLCBkYXRhU2V0dGluZ3M7XG5cbiAgICAgICAgICAgIF8uZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXBwZW5kQXJyb3dzOiAkKGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGFwcGVuZERvdHM6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFzTmF2Rm9yOiBudWxsLFxuICAgICAgICAgICAgICAgIHByZXZBcnJvdzogJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcm9sZT1cIm5vbmVcIiBjbGFzcz1cInNsaWNrLXByZXZcIiBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIiB0YWJpbmRleD1cIjBcIiByb2xlPVwiYnV0dG9uXCI+UHJldmlvdXM8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIG5leHRBcnJvdzogJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcm9sZT1cIm5vbmVcIiBjbGFzcz1cInNsaWNrLW5leHRcIiBhcmlhLWxhYmVsPVwiTmV4dFwiIHRhYmluZGV4PVwiMFwiIHJvbGU9XCJidXR0b25cIj5OZXh0PC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogMzAwMCxcbiAgICAgICAgICAgICAgICBjZW50ZXJNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjZW50ZXJQYWRkaW5nOiAnNTBweCcsXG4gICAgICAgICAgICAgICAgY3NzRWFzZTogJ2Vhc2UnLFxuICAgICAgICAgICAgICAgIGN1c3RvbVBhZ2luZzogZnVuY3Rpb24oc2xpZGVyLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXJvbGU9XCJub25lXCIgcm9sZT1cImJ1dHRvblwiIHRhYmluZGV4PVwiMFwiIC8+JykudGV4dChpICsgMSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkb3RzQ2xhc3M6ICdzbGljay1kb3RzJyxcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBlZGdlRnJpY3Rpb246IDAuMzUsXG4gICAgICAgICAgICAgICAgZmFkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiAwLFxuICAgICAgICAgICAgICAgIGxhenlMb2FkOiAnb25kZW1hbmQnLFxuICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Eb3RzSG92ZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlc3BvbmRUbzogJ3dpbmRvdycsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogbnVsbCxcbiAgICAgICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgICAgIHJ0bDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGU6ICcnLFxuICAgICAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcbiAgICAgICAgICAgICAgICBzd2lwZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzd2lwZVRvU2xpZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRvdWNoTW92ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0b3VjaFRocmVzaG9sZDogNSxcbiAgICAgICAgICAgICAgICB1c2VDU1M6IHRydWUsXG4gICAgICAgICAgICAgICAgdXNlVHJhbnNmb3JtOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlV2lkdGg6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbFN3aXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhaXRGb3JBbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHpJbmRleDogMTAwMFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgXy5pbml0aWFscyA9IHtcbiAgICAgICAgICAgICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvUGxheVRpbWVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnREaXJlY3Rpb246IDAsXG4gICAgICAgICAgICAgICAgY3VycmVudExlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudFNsaWRlOiAwLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogMSxcbiAgICAgICAgICAgICAgICAkZG90czogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0V2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgbGlzdEhlaWdodDogbnVsbCxcbiAgICAgICAgICAgICAgICBsb2FkSW5kZXg6IDAsXG4gICAgICAgICAgICAgICAgJG5leHRBcnJvdzogbnVsbCxcbiAgICAgICAgICAgICAgICAkcHJldkFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRlQ291bnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGVXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICAkc2xpZGVUcmFjazogbnVsbCxcbiAgICAgICAgICAgICAgICAkc2xpZGVzOiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0OiAwLFxuICAgICAgICAgICAgICAgIHN3aXBlTGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICAkbGlzdDogbnVsbCxcbiAgICAgICAgICAgICAgICB0b3VjaE9iamVjdDoge30sXG4gICAgICAgICAgICAgICAgdHJhbnNmb3Jtc0VuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuc2xpY2tlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMpO1xuXG4gICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMgPSBbXTtcbiAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzID0gW107XG4gICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gZmFsc2U7XG4gICAgICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmhpZGRlbiA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgXy5wb3NpdGlvblByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5yZXNwb25kVG8gPSBudWxsO1xuICAgICAgICAgICAgXy5yb3dDb3VudCA9IDE7XG4gICAgICAgICAgICBfLnNob3VsZENsaWNrID0gdHJ1ZTtcbiAgICAgICAgICAgIF8uJHNsaWRlciA9ICQoZWxlbWVudCk7XG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAndmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gMDtcbiAgICAgICAgICAgIF8ud2luZG93VGltZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBkYXRhU2V0dGluZ3MgPSAkKGVsZW1lbnQpLmRhdGEoJ3NsaWNrJykgfHwge307XG5cbiAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLmRlZmF1bHRzLCBzZXR0aW5ncywgZGF0YVNldHRpbmdzKTtcblxuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuXG4gICAgICAgICAgICBfLm9yaWdpbmFsU2V0dGluZ3MgPSBfLm9wdGlvbnM7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQubW96SGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIF8uaGlkZGVuID0gJ21vekhpZGRlbic7XG4gICAgICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ21venZpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQud2Via2l0SGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIF8uaGlkZGVuID0gJ3dlYmtpdEhpZGRlbic7XG4gICAgICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3dlYmtpdHZpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLmF1dG9QbGF5ID0gJC5wcm94eShfLmF1dG9QbGF5LCBfKTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlDbGVhciA9ICQucHJveHkoXy5hdXRvUGxheUNsZWFyLCBfKTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlJdGVyYXRvciA9ICQucHJveHkoXy5hdXRvUGxheUl0ZXJhdG9yLCBfKTtcbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUgPSAkLnByb3h5KF8uY2hhbmdlU2xpZGUsIF8pO1xuICAgICAgICAgICAgXy5jbGlja0hhbmRsZXIgPSAkLnByb3h5KF8uY2xpY2tIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uc2VsZWN0SGFuZGxlciA9ICQucHJveHkoXy5zZWxlY3RIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uc2V0UG9zaXRpb24gPSAkLnByb3h5KF8uc2V0UG9zaXRpb24sIF8pO1xuICAgICAgICAgICAgXy5zd2lwZUhhbmRsZXIgPSAkLnByb3h5KF8uc3dpcGVIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8uZHJhZ0hhbmRsZXIgPSAkLnByb3h5KF8uZHJhZ0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5rZXlIYW5kbGVyID0gJC5wcm94eShfLmtleUhhbmRsZXIsIF8pO1xuXG4gICAgICAgICAgICBfLmluc3RhbmNlVWlkID0gaW5zdGFuY2VVaWQrKztcblxuICAgICAgICAgICAgLy8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3NcbiAgICAgICAgICAgIC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uIChtdXN0IHN0YXJ0IHdpdGggPClcbiAgICAgICAgICAgIC8vIEV4dHJhY3RlZCBmcm9tIGpRdWVyeSB2MS4xMSBzb3VyY2VcbiAgICAgICAgICAgIF8uaHRtbEV4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSopJC87XG5cblxuICAgICAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG4gICAgICAgICAgICBfLmluaXQodHJ1ZSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBTbGljaztcblxuICAgIH0oKSk7XG5cbiAgICBTbGljay5wcm90b3R5cGUuYWN0aXZhdGVBREEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWFjdGl2ZScpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ2ZhbHNlJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYWRkU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tBZGQgPSBmdW5jdGlvbihtYXJrdXAsIGluZGV4LCBhZGRCZWZvcmUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgYWRkQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPCAwIHx8IChpbmRleCA+PSBfLnNsaWRlQ291bnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwICYmIF8uJHNsaWRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFkZEJlZm9yZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5pbnNlcnRCZWZvcmUoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5pbnNlcnRBZnRlcihfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhZGRCZWZvcmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkucHJlcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudCkuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZUhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0YXJnZXRIZWlnaHRcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFuaW1hdGVTbGlkZSA9IGZ1bmN0aW9uKHRhcmdldExlZnQsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIGFuaW1Qcm9wcyA9IHt9LFxuICAgICAgICAgICAgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IC10YXJnZXRMZWZ0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudExlZnQgPSAtKF8uY3VycmVudExlZnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiBfLmN1cnJlbnRMZWZ0XG4gICAgICAgICAgICAgICAgfSkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IF8ub3B0aW9ucy5zcGVlZCxcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nOiBfLm9wdGlvbnMuZWFzaW5nLFxuICAgICAgICAgICAgICAgICAgICBzdGVwOiBmdW5jdGlvbihub3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdyA9IE1hdGguY2VpbChub3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoMHB4LCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3cgKyAncHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IE1hdGguY2VpbCh0YXJnZXRMZWZ0KTtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4LCAwcHgpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoMHB4LCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdlRhcmdldCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5vcHRpb25zLmFzTmF2Rm9yO1xuXG4gICAgICAgIGlmICggYXNOYXZGb3IgJiYgYXNOYXZGb3IgIT09IG51bGwgKSB7XG4gICAgICAgICAgICBhc05hdkZvciA9ICQoYXNOYXZGb3IpLm5vdChfLiRzbGlkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFzTmF2Rm9yO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hc05hdkZvciA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLmdldE5hdlRhcmdldCgpO1xuXG4gICAgICAgIGlmICggYXNOYXZGb3IgIT09IG51bGwgJiYgdHlwZW9mIGFzTmF2Rm9yID09PSAnb2JqZWN0JyApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9ICQodGhpcykuc2xpY2soJ2dldFNsaWNrJyk7XG4gICAgICAgICAgICAgICAgaWYoIXRhcmdldC51bnNsaWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNsaWRlSGFuZGxlcihpbmRleCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXBwbHlUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9IF8udHJhbnNmb3JtVHlwZSArICcgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gJ29wYWNpdHkgJyArIF8ub3B0aW9ucy5zcGVlZCArICdtcyAnICsgXy5vcHRpb25zLmNzc0Vhc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuXG4gICAgICAgIGlmICggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXlUaW1lciA9IHNldEludGVydmFsKCBfLmF1dG9QbGF5SXRlcmF0b3IsIF8ub3B0aW9ucy5hdXRvcGxheVNwZWVkICk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlDbGVhciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5hdXRvUGxheVRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXlJdGVyYXRvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlVG8gPSBfLmN1cnJlbnRTbGlkZSArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICBpZiAoICFfLnBhdXNlZCAmJiAhXy5pbnRlcnJ1cHRlZCAmJiAhXy5mb2N1c3NlZCApIHtcblxuICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMSAmJiAoIF8uY3VycmVudFNsaWRlICsgMSApID09PSAoIF8uc2xpZGVDb3VudCAtIDEgKSkge1xuICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIF8uZGlyZWN0aW9uID09PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlVG8gPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIF8uY3VycmVudFNsaWRlIC0gMSA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBzbGlkZVRvICk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZEFycm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93ID0gJChfLm9wdGlvbnMucHJldkFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdyA9ICQoXy5vcHRpb25zLm5leHRBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG5cbiAgICAgICAgICAgIGlmKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnByZXBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hcHBlbmRUbyhfLm9wdGlvbnMuYXBwZW5kQXJyb3dzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZCggXy4kbmV4dEFycm93IClcblxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWRpc2FibGVkJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGREb3RzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgaSwgZG90O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgICAgIGRvdCA9ICQoJzx1bCAvPicpLmFkZENsYXNzKF8ub3B0aW9ucy5kb3RzQ2xhc3MpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IF8uZ2V0RG90Q291bnQoKTsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgZG90LmFwcGVuZCgkKCc8bGkgLz4nKS5hcHBlbmQoXy5vcHRpb25zLmN1c3RvbVBhZ2luZy5jYWxsKHRoaXMsIF8sIGkpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJGRvdHMgPSBkb3QuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZERvdHMpO1xuXG4gICAgICAgICAgICBfLiRkb3RzLmZpbmQoJ2xpJykuZmlyc3QoKS5hZGRDbGFzcygnc2xpY2stYWN0aXZlJykuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkT3V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlcyA9XG4gICAgICAgICAgICBfLiRzbGlkZXJcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oIF8ub3B0aW9ucy5zbGlkZSArICc6bm90KC5zbGljay1jbG9uZWQpJylcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgXy5zbGlkZUNvdW50ID0gXy4kc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KVxuICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpXG4gICAgICAgICAgICAgICAgLmRhdGEoJ29yaWdpbmFsU3R5bGluZycsICQoZWxlbWVudCkuYXR0cignc3R5bGUnKSB8fCAnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stc2xpZGVyJyk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjayA9IChfLnNsaWRlQ291bnQgPT09IDApID9cbiAgICAgICAgICAgICQoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5hcHBlbmRUbyhfLiRzbGlkZXIpIDpcbiAgICAgICAgICAgIF8uJHNsaWRlcy53cmFwQWxsKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykucGFyZW50KCk7XG5cbiAgICAgICAgXy4kbGlzdCA9IF8uJHNsaWRlVHJhY2sud3JhcChcbiAgICAgICAgICAgICc8ZGl2IGFyaWEtbGl2ZT1cInBvbGl0ZVwiIGNsYXNzPVwic2xpY2stbGlzdFwiLz4nKS5wYXJlbnQoKTtcbiAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoJ29wYWNpdHknLCAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgfHwgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyKS5ub3QoJ1tzcmNdJykuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcblxuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XG5cbiAgICAgICAgXy5idWlsZERvdHMoKTtcblxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcblxuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKHR5cGVvZiBfLmN1cnJlbnRTbGlkZSA9PT0gJ251bWJlcicgPyBfLmN1cnJlbnRTbGlkZSA6IDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZHJhZ2dhYmxlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0LmFkZENsYXNzKCdkcmFnZ2FibGUnKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZFJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGEsIGIsIGMsIG5ld1NsaWRlcywgbnVtT2ZTbGlkZXMsIG9yaWdpbmFsU2xpZGVzLHNsaWRlc1BlclNlY3Rpb247XG5cbiAgICAgICAgbmV3U2xpZGVzID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBvcmlnaW5hbFNsaWRlcyA9IF8uJHNsaWRlci5jaGlsZHJlbigpO1xuXG4gICAgICAgIGlmKF8ub3B0aW9ucy5yb3dzID4gMSkge1xuXG4gICAgICAgICAgICBzbGlkZXNQZXJTZWN0aW9uID0gXy5vcHRpb25zLnNsaWRlc1BlclJvdyAqIF8ub3B0aW9ucy5yb3dzO1xuICAgICAgICAgICAgbnVtT2ZTbGlkZXMgPSBNYXRoLmNlaWwoXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMubGVuZ3RoIC8gc2xpZGVzUGVyU2VjdGlvblxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZm9yKGEgPSAwOyBhIDwgbnVtT2ZTbGlkZXM7IGErKyl7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgZm9yKGIgPSAwOyBiIDwgXy5vcHRpb25zLnJvd3M7IGIrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgIGZvcihjID0gMDsgYyA8IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3c7IGMrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IChhICogc2xpZGVzUGVyU2VjdGlvbiArICgoYiAqIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgYykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsU2xpZGVzLmdldCh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKG9yaWdpbmFsU2xpZGVzLmdldCh0YXJnZXQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdTbGlkZXMuYXBwZW5kQ2hpbGQoc2xpZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQobmV3U2xpZGVzKTtcbiAgICAgICAgICAgIF8uJHNsaWRlci5jaGlsZHJlbigpLmNoaWxkcmVuKCkuY2hpbGRyZW4oKVxuICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOigxMDAgLyBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArICclJyxcbiAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tSZXNwb25zaXZlID0gZnVuY3Rpb24oaW5pdGlhbCwgZm9yY2VVcGRhdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBicmVha3BvaW50LCB0YXJnZXRCcmVha3BvaW50LCByZXNwb25kVG9XaWR0aCwgdHJpZ2dlckJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNsaWRlcldpZHRoID0gXy4kc2xpZGVyLndpZHRoKCk7XG4gICAgICAgIHZhciB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIHx8ICQod2luZG93KS53aWR0aCgpO1xuXG4gICAgICAgIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3dpbmRvdycpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gd2luZG93V2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdzbGlkZXInKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHNsaWRlcldpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnbWluJykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSBNYXRoLm1pbih3aW5kb3dXaWR0aCwgc2xpZGVyV2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSAmJlxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoICYmXG4gICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gbnVsbDtcblxuICAgICAgICAgICAgZm9yIChicmVha3BvaW50IGluIF8uYnJlYWtwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50cy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcmlnaW5hbFNldHRpbmdzLm1vYmlsZUZpcnN0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbmRUb1dpZHRoIDwgXy5icmVha3BvaW50c1ticmVha3BvaW50XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbmRUb1dpZHRoID4gXy5icmVha3BvaW50c1ticmVha3BvaW50XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChfLmFjdGl2ZUJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IF8uYWN0aXZlQnJlYWtwb2ludCB8fCBmb3JjZVVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludFNldHRpbmdzW3RhcmdldEJyZWFrcG9pbnRdID09PSAndW5zbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnVuc2xpY2sodGFyZ2V0QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLm9yaWdpbmFsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludFNldHRpbmdzW3RhcmdldEJyZWFrcG9pbnRdID09PSAndW5zbGljaycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBfLm9yaWdpbmFsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChfLmFjdGl2ZUJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gXy5vcmlnaW5hbFNldHRpbmdzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gb25seSB0cmlnZ2VyIGJyZWFrcG9pbnRzIGR1cmluZyBhbiBhY3R1YWwgYnJlYWsuIG5vdCBvbiBpbml0aWFsaXplLlxuICAgICAgICAgICAgaWYoICFpbml0aWFsICYmIHRyaWdnZXJCcmVha3BvaW50ICE9PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYnJlYWtwb2ludCcsIFtfLCB0cmlnZ2VyQnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoYW5nZVNsaWRlID0gZnVuY3Rpb24oZXZlbnQsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgJHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCksXG4gICAgICAgICAgICBpbmRleE9mZnNldCwgc2xpZGVPZmZzZXQsIHVuZXZlbk9mZnNldDtcblxuICAgICAgICAvLyBJZiB0YXJnZXQgaXMgYSBsaW5rLCBwcmV2ZW50IGRlZmF1bHQgYWN0aW9uLlxuICAgICAgICBpZigkdGFyZ2V0LmlzKCdhJykpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0YXJnZXQgaXMgbm90IHRoZSA8bGk+IGVsZW1lbnQgKGllOiBhIGNoaWxkKSwgZmluZCB0aGUgPGxpPi5cbiAgICAgICAgaWYoISR0YXJnZXQuaXMoJ2xpJykpIHtcbiAgICAgICAgICAgICR0YXJnZXQgPSAkdGFyZ2V0LmNsb3Nlc3QoJ2xpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB1bmV2ZW5PZmZzZXQgPSAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKTtcbiAgICAgICAgaW5kZXhPZmZzZXQgPSB1bmV2ZW5PZmZzZXQgPyAwIDogKF8uc2xpZGVDb3VudCAtIF8uY3VycmVudFNsaWRlKSAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEubWVzc2FnZSkge1xuXG4gICAgICAgICAgICBjYXNlICdwcmV2aW91cyc6XG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSBpbmRleE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSAtIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQgPSBpbmRleE9mZnNldCA9PT0gMCA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IGluZGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlICsgc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdpbmRleCc6XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZXZlbnQuZGF0YS5pbmRleCA9PT0gMCA/IDAgOlxuICAgICAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4IHx8ICR0YXJnZXQuaW5kZXgoKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY2hlY2tOYXZpZ2FibGUoaW5kZXgpLCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgICR0YXJnZXQuY2hpbGRyZW4oKS50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja05hdmlnYWJsZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgbmF2aWdhYmxlcywgcHJldk5hdmlnYWJsZTtcblxuICAgICAgICBuYXZpZ2FibGVzID0gXy5nZXROYXZpZ2FibGVJbmRleGVzKCk7XG4gICAgICAgIHByZXZOYXZpZ2FibGUgPSAwO1xuICAgICAgICBpZiAoaW5kZXggPiBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgIGluZGV4ID0gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgbiBpbiBuYXZpZ2FibGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgbmF2aWdhYmxlc1tuXSkge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHByZXZOYXZpZ2FibGU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmV2TmF2aWdhYmxlID0gbmF2aWdhYmxlc1tuXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzICYmIF8uJGRvdHMgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci5vZmYoJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vZmYoXy52aXNpYmlsaXR5Q2hhbmdlLCBfLnZpc2liaWxpdHkpO1xuXG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vZmYoJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQod2luZG93KS5vZmYoJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLm9yaWVudGF0aW9uQ2hhbmdlKTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ucmVzaXplKTtcblxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9mZignZHJhZ3N0YXJ0JywgXy5wcmV2ZW50RGVmYXVsdCk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG4gICAgICAgICQoZG9jdW1lbnQpLm9mZigncmVhZHkuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwU2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIG9yaWdpbmFsU2xpZGVzO1xuXG4gICAgICAgIGlmKF8ub3B0aW9ucy5yb3dzID4gMSkge1xuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXMuY2hpbGRyZW4oKS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChvcmlnaW5hbFNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uc2hvdWxkQ2xpY2sgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24ocmVmcmVzaCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgXy5jbGVhblVwRXZlbnRzKCk7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikuZGV0YWNoKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICggXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xuXG4gICAgICAgICAgICBpZiAoIF8uaHRtbEV4cHIudGVzdCggXy5vcHRpb25zLnByZXZBcnJvdyApKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy4kbmV4dEFycm93XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywnJyk7XG5cbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMubmV4dEFycm93ICkpIHtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKF8uJHNsaWRlcykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXNsaWNrLWluZGV4JylcbiAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ3N0eWxlJywgJCh0aGlzKS5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kbGlzdC5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFwcGVuZChfLiRzbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5jbGVhblVwUm93cygpO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGVyJyk7XG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICBfLnVuc2xpY2tlZCA9IHRydWU7XG5cbiAgICAgICAgaWYoIXJlZnJlc2gpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdkZXN0cm95JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnJztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlT3V0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0ZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoZmlsdGVyICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmZpbHRlcihmaWx0ZXIpLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZm9jdXNIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpXG4gICAgICAgICAgICAub24oJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snLFxuICAgICAgICAgICAgICAgICcqOm5vdCguc2xpY2stYXJyb3cpJywgZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB2YXIgJHNmID0gJCh0aGlzKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMucGF1c2VPbkZvY3VzICkge1xuICAgICAgICAgICAgICAgICAgICBfLmZvY3Vzc2VkID0gJHNmLmlzKCc6Zm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRDdXJyZW50ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQ3VycmVudFNsaWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICByZXR1cm4gXy5jdXJyZW50U2xpZGU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldERvdENvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHZhciBicmVha1BvaW50ID0gMDtcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgICB2YXIgcGFnZXJRdHkgPSAwO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSBpZighXy5vcHRpb25zLmFzTmF2Rm9yKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IDEgKyBNYXRoLmNlaWwoKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhZ2VyUXR5IC0gMTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TGVmdCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgdmVydGljYWxIZWlnaHQsXG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDAsXG4gICAgICAgICAgICB0YXJnZXRTbGlkZTtcblxuICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmVydGljYWxIZWlnaHQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoXy5zbGlkZVdpZHRoICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiAtMTtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICh2ZXJ0aWNhbEhlaWdodCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPiBfLnNsaWRlQ291bnQgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KSkgKiBfLnNsaWRlV2lkdGgpICogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIChzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KSkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiBfLnNsaWRlV2lkdGgpICogLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC0gXy5zbGlkZUNvdW50KSAqIF8uc2xpZGVXaWR0aDtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICgoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC0gXy5zbGlkZUNvdW50KSAqIHZlcnRpY2FsSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgLSBfLnNsaWRlV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogXy5zbGlkZVdpZHRoKSAqIC0xKSArIF8uc2xpZGVPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogdmVydGljYWxIZWlnaHQpICogLTEpICsgdmVydGljYWxPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgKz0gKF8uJGxpc3Qud2lkdGgoKSAtIHRhcmdldFNsaWRlLm91dGVyV2lkdGgoKSkgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldExlZnQ7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE9wdGlvbiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dldE9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICByZXR1cm4gXy5vcHRpb25zW29wdGlvbl07XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBicmVha1BvaW50ID0gMCxcbiAgICAgICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgICAgbWF4O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBjb3VudGVyID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQgKiAyO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBtYXgpIHtcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChicmVha1BvaW50KTtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXhlcztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpY2sgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpZGVDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCwgc3dpcGVkU2xpZGUsIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSA/IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIDogMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stc2xpZGUnKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBzbGlkZSkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZS5vZmZzZXRMZWZ0IC0gY2VudGVyT2Zmc2V0ICsgKCQoc2xpZGUpLm91dGVyV2lkdGgoKSAvIDIpID4gKF8uc3dpcGVMZWZ0ICogLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkID0gTWF0aC5hYnMoJChzd2lwZWRTbGlkZSkuYXR0cignZGF0YS1zbGljay1pbmRleCcpIC0gXy5jdXJyZW50U2xpZGUpIHx8IDE7XG5cbiAgICAgICAgICAgIHJldHVybiBzbGlkZXNUcmF2ZXJzZWQ7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ29UbyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dvVG8gPSBmdW5jdGlvbihzbGlkZSwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICBpbmRleDogcGFyc2VJbnQoc2xpZGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGRvbnRBbmltYXRlKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGNyZWF0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICghJChfLiRzbGlkZXIpLmhhc0NsYXNzKCdzbGljay1pbml0aWFsaXplZCcpKSB7XG5cbiAgICAgICAgICAgICQoXy4kc2xpZGVyKS5hZGRDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcblxuICAgICAgICAgICAgXy5idWlsZFJvd3MoKTtcbiAgICAgICAgICAgIF8uYnVpbGRPdXQoKTtcbiAgICAgICAgICAgIF8uc2V0UHJvcHMoKTtcbiAgICAgICAgICAgIF8uc3RhcnRMb2FkKCk7XG4gICAgICAgICAgICBfLmxvYWRTbGlkZXIoKTtcbiAgICAgICAgICAgIF8uaW5pdGlhbGl6ZUV2ZW50cygpO1xuICAgICAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcbiAgICAgICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUodHJ1ZSk7XG4gICAgICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JlYXRpb24pIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdpbml0JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5pbml0QURBKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcblxuICAgICAgICAgICAgXy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBREEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBfLiRzbGlkZXMuYWRkKF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpKS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSkuZmluZCgnYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0JykuYXR0cih7XG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXR0cigncm9sZScsICdsaXN0Ym94Jyk7XG5cbiAgICAgICAgXy4kc2xpZGVzLm5vdChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICdyb2xlJzogJ29wdGlvbicsXG4gICAgICAgICAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIGkgKyAnJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBfLiRkb3RzLmF0dHIoJ3JvbGUnLCAndGFibGlzdCcpLmZpbmQoJ2xpJykuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAncHJlc2VudGF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiAnZmFsc2UnLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1jb250cm9scyc6ICduYXZpZ2F0aW9uJyArIF8uaW5zdGFuY2VVaWQgKyBpICsgJycsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgaSArICcnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5maXJzdCgpLmF0dHIoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpLmVuZCgpXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2J1dHRvbicpLmF0dHIoJ3JvbGUnLCAnYnV0dG9uJykuZW5kKClcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnZGl2JykuYXR0cigncm9sZScsICd0b29sYmFyJyk7XG4gICAgICAgIH1cbiAgICAgICAgXy5hY3RpdmF0ZUFEQSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QXJyb3dFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0RG90RXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnXG4gICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5vcHRpb25zLnBhdXNlT25Eb3RzSG92ZXIgPT09IHRydWUgKSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnBhdXNlT25Ib3ZlciApIHtcblxuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdGlhbGl6ZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuXG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xuICAgICAgICBfLmluaXRTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnc3RhcnQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ21vdmUnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vbignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oXy52aXNpYmlsaXR5Q2hhbmdlLCAkLnByb3h5KF8udmlzaWJpbGl0eSwgXykpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLm9yaWVudGF0aW9uQ2hhbmdlLCBfKSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5yZXNpemUsIF8pKTtcblxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9uKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuICAgICAgICAkKGRvY3VtZW50KS5vbigncmVhZHkuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0VUkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuc2hvdygpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5zaG93KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5rZXlIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgICAvL0RvbnQgc2xpZGUgaWYgdGhlIGN1cnNvciBpcyBpbnNpZGUgdGhlIGZvcm0gZmllbGRzIGFuZCBhcnJvdyBrZXlzIGFyZSBwcmVzc2VkXG4gICAgICAgIGlmKCFldmVudC50YXJnZXQudGFnTmFtZS5tYXRjaCgnVEVYVEFSRUF8SU5QVVR8U0VMRUNUJykpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAzNyAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ25leHQnIDogICdwcmV2aW91cydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSAzOSAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ3ByZXZpb3VzJyA6ICduZXh0J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBsb2FkUmFuZ2UsIGNsb25lUmFuZ2UsIHJhbmdlU3RhcnQsIHJhbmdlRW5kO1xuXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRJbWFnZXMoaW1hZ2VzU2NvcGUpIHtcblxuICAgICAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBpbWFnZXNTY29wZSkuZWFjaChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU291cmNlID0gJCh0aGlzKS5hdHRyKCdkYXRhLWxhenknKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDAgfSwgMTAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgaW1hZ2VTb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMSB9LCAyMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbXywgaW1hZ2UsIGltYWdlU291cmNlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdzbGljay1sb2FkaW5nJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdzbGljay1sYXp5bG9hZC1lcnJvcicgKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF8uY3VycmVudFNsaWRlICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSByYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBNYXRoLm1heCgwLCBfLmN1cnJlbnRTbGlkZSAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IDIgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKSArIF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBfLmN1cnJlbnRTbGlkZSA6IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgcmFuZ2VFbmQgPSBNYXRoLmNlaWwocmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlU3RhcnQgPiAwKSByYW5nZVN0YXJ0LS07XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlRW5kIDw9IF8uc2xpZGVDb3VudCkgcmFuZ2VFbmQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKS5zbGljZShyYW5nZVN0YXJ0LCByYW5nZUVuZCk7XG4gICAgICAgIGxvYWRJbWFnZXMobG9hZFJhbmdlKTtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKDAsIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAqIC0xKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubG9hZFNsaWRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jc3Moe1xuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICBfLmluaXRVSSgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdwcm9ncmVzc2l2ZScpIHtcbiAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLm5leHQgPSBTbGljay5wcm90b3R5cGUuc2xpY2tOZXh0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICduZXh0J1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUub3JpZW50YXRpb25DaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wYXVzZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BhdXNlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXlDbGVhcigpO1xuICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBsYXkgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQbGF5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgXy5vcHRpb25zLmF1dG9wbGF5ID0gdHJ1ZTtcbiAgICAgICAgXy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgXy5mb2N1c3NlZCA9IGZhbHNlO1xuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBvc3RTbGlkZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmKCAhXy51bnNsaWNrZWQgKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdhZnRlckNoYW5nZScsIFtfLCBpbmRleF0pO1xuXG4gICAgICAgICAgICBfLmFuaW1hdGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmluaXRBREEoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXYgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQcmV2ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdwcmV2aW91cydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcm9ncmVzc2l2ZUxhenlMb2FkID0gZnVuY3Rpb24oIHRyeUNvdW50ICkge1xuXG4gICAgICAgIHRyeUNvdW50ID0gdHJ5Q291bnQgfHwgMTtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkaW1nc1RvTG9hZCA9ICQoICdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlciApLFxuICAgICAgICAgICAgaW1hZ2UsXG4gICAgICAgICAgICBpbWFnZVNvdXJjZSxcbiAgICAgICAgICAgIGltYWdlVG9Mb2FkO1xuXG4gICAgICAgIGlmICggJGltZ3NUb0xvYWQubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBpbWFnZSA9ICRpbWdzVG9Mb2FkLmZpcnN0KCk7XG4gICAgICAgICAgICBpbWFnZVNvdXJjZSA9IGltYWdlLmF0dHIoJ2RhdGEtbGF6eScpO1xuICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAuYXR0ciggJ3NyYycsIGltYWdlU291cmNlIClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eScpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIHRyeUNvdW50IDwgMyApIHtcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogdHJ5IHRvIGxvYWQgdGhlIGltYWdlIDMgdGltZXMsXG4gICAgICAgICAgICAgICAgICAgICAqIGxlYXZlIGEgc2xpZ2h0IGRlbGF5IHNvIHdlIGRvbid0IGdldFxuICAgICAgICAgICAgICAgICAgICAgKiBzZXJ2ZXJzIGJsb2NraW5nIHRoZSByZXF1ZXN0LlxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoIHRyeUNvdW50ICsgMSApO1xuICAgICAgICAgICAgICAgICAgICB9LCA1MDAgKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdzbGljay1sb2FkaW5nJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdzbGljay1sYXp5bG9hZC1lcnJvcicgKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuXG4gICAgICAgICAgICAgICAgICAgIF8ucHJvZ3Jlc3NpdmVMYXp5TG9hZCgpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWxsSW1hZ2VzTG9hZGVkJywgWyBfIF0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCBpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBjdXJyZW50U2xpZGUsIGxhc3RWaXNpYmxlSW5kZXg7XG5cbiAgICAgICAgbGFzdFZpc2libGVJbmRleCA9IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG5cbiAgICAgICAgLy8gaW4gbm9uLWluZmluaXRlIHNsaWRlcnMsIHdlIGRvbid0IHdhbnQgdG8gZ28gcGFzdCB0aGVcbiAgICAgICAgLy8gbGFzdCB2aXNpYmxlIGluZGV4LlxuICAgICAgICBpZiggIV8ub3B0aW9ucy5pbmZpbml0ZSAmJiAoIF8uY3VycmVudFNsaWRlID4gbGFzdFZpc2libGVJbmRleCApKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGxhc3RWaXNpYmxlSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBsZXNzIHNsaWRlcyB0aGFuIHRvIHNob3csIGdvIHRvIHN0YXJ0LlxuICAgICAgICBpZiAoIF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuXG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcblxuICAgICAgICBfLmRlc3Ryb3kodHJ1ZSk7XG5cbiAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscywgeyBjdXJyZW50U2xpZGU6IGN1cnJlbnRTbGlkZSB9KTtcblxuICAgICAgICBfLmluaXQoKTtcblxuICAgICAgICBpZiggIWluaXRpYWxpemluZyApIHtcblxuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaW5kZXgnLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogY3VycmVudFNsaWRlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVnaXN0ZXJCcmVha3BvaW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYnJlYWtwb2ludCwgY3VycmVudEJyZWFrcG9pbnQsIGwsXG4gICAgICAgICAgICByZXNwb25zaXZlU2V0dGluZ3MgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZSB8fCBudWxsO1xuXG4gICAgICAgIGlmICggJC50eXBlKHJlc3BvbnNpdmVTZXR0aW5ncykgPT09ICdhcnJheScgJiYgcmVzcG9uc2l2ZVNldHRpbmdzLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy5yZXNwb25kVG8gPSBfLm9wdGlvbnMucmVzcG9uZFRvIHx8ICd3aW5kb3cnO1xuXG4gICAgICAgICAgICBmb3IgKCBicmVha3BvaW50IGluIHJlc3BvbnNpdmVTZXR0aW5ncyApIHtcblxuICAgICAgICAgICAgICAgIGwgPSBfLmJyZWFrcG9pbnRzLmxlbmd0aC0xO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRCcmVha3BvaW50ID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLmJyZWFrcG9pbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2l2ZVNldHRpbmdzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSBicmVha3BvaW50cyBhbmQgY3V0IG91dCBhbnkgZXhpc3RpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gb25lcyB3aXRoIHRoZSBzYW1lIGJyZWFrcG9pbnQgbnVtYmVyLCB3ZSBkb24ndCB3YW50IGR1cGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF8uYnJlYWtwb2ludHNbbF0gJiYgXy5icmVha3BvaW50c1tsXSA9PT0gY3VycmVudEJyZWFrcG9pbnQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5zcGxpY2UobCwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludHMucHVzaChjdXJyZW50QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW2N1cnJlbnRCcmVha3BvaW50XSA9IHJlc3BvbnNpdmVTZXR0aW5nc1ticmVha3BvaW50XS5zZXR0aW5ncztcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoIF8ub3B0aW9ucy5tb2JpbGVGaXJzdCApID8gYS1iIDogYi1hO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZWluaXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2tcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oXy5vcHRpb25zLnNsaWRlKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgJiYgXy5jdXJyZW50U2xpZGUgIT09IDApIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xuXG4gICAgICAgIF8uc2V0UHJvcHMoKTtcbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcbiAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcbiAgICAgICAgXy5pbml0QXJyb3dFdmVudHMoKTtcbiAgICAgICAgXy5idWlsZERvdHMoKTtcbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xuICAgICAgICBfLmNsZWFuVXBTbGlkZUV2ZW50cygpO1xuICAgICAgICBfLmluaXRTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKGZhbHNlLCB0cnVlKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xuXG4gICAgICAgIF8ucGF1c2VkID0gIV8ub3B0aW9ucy5hdXRvcGxheTtcbiAgICAgICAgXy5hdXRvUGxheSgpO1xuXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdyZUluaXQnLCBbX10pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCQod2luZG93KS53aWR0aCgpICE9PSBfLndpbmRvd1dpZHRoKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoXy53aW5kb3dEZWxheSk7XG4gICAgICAgICAgICBfLndpbmRvd0RlbGF5ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgICAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHsgXy5zZXRQb3NpdGlvbigpOyB9XG4gICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlbW92ZVNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUmVtb3ZlID0gZnVuY3Rpb24oaW5kZXgsIHJlbW92ZUJlZm9yZSwgcmVtb3ZlQWxsKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHJlbW92ZUJlZm9yZSA9IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAwIDogXy5zbGlkZUNvdW50IC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4ID0gcmVtb3ZlQmVmb3JlID09PSB0cnVlID8gLS1pbmRleCA6IGluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8IDEgfHwgaW5kZXggPCAwIHx8IGluZGV4ID4gXy5zbGlkZUNvdW50IC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICBpZiAocmVtb3ZlQWxsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCkucmVtb3ZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZXEoaW5kZXgpLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xuXG4gICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldENTUyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgcG9zaXRpb25Qcm9wcyA9IHt9LFxuICAgICAgICAgICAgeCwgeTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcG9zaXRpb24gPSAtcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgeCA9IF8ucG9zaXRpb25Qcm9wID09ICdsZWZ0JyA/IE1hdGguY2VpbChwb3NpdGlvbikgKyAncHgnIDogJzBweCc7XG4gICAgICAgIHkgPSBfLnBvc2l0aW9uUHJvcCA9PSAndG9wJyA/IE1hdGguY2VpbChwb3NpdGlvbikgKyAncHgnIDogJzBweCc7XG5cbiAgICAgICAgcG9zaXRpb25Qcm9wc1tfLnBvc2l0aW9uUHJvcF0gPSBwb3NpdGlvbjtcblxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9zaXRpb25Qcm9wcyA9IHt9O1xuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoJyArIHggKyAnLCAnICsgeSArICcpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgnICsgeCArICcsICcgKyB5ICsgJywgMHB4KSc7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0RGltZW5zaW9ucyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kbGlzdC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAoJzBweCAnICsgXy5vcHRpb25zLmNlbnRlclBhZGRpbmcpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRsaXN0LmhlaWdodChfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kbGlzdC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAoXy5vcHRpb25zLmNlbnRlclBhZGRpbmcgKyAnIDBweCcpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLmxpc3RXaWR0aCA9IF8uJGxpc3Qud2lkdGgoKTtcbiAgICAgICAgXy5saXN0SGVpZ2h0ID0gXy4kbGlzdC5oZWlnaHQoKTtcblxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlICYmIF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zbGlkZVdpZHRoID0gTWF0aC5jZWlsKF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLndpZHRoKE1hdGguY2VpbCgoXy5zbGlkZVdpZHRoICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoNTAwMCAqIF8uc2xpZGVDb3VudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGgpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5oZWlnaHQoTWF0aC5jZWlsKChfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKSAqIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmxlbmd0aCkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvZmZzZXQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlcldpZHRoKHRydWUpIC0gXy4kc2xpZGVzLmZpcnN0KCkud2lkdGgoKTtcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSBmYWxzZSkgXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykud2lkdGgoXy5zbGlkZVdpZHRoIC0gb2Zmc2V0KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0RmFkZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQ7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy5zbGlkZVdpZHRoICogaW5kZXgpICogLTE7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkuY3NzKHtcbiAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDEsXG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEgJiYgXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgXy4kbGlzdC5jc3MoJ2hlaWdodCcsIHRhcmdldEhlaWdodCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0T3B0aW9uID1cbiAgICBTbGljay5wcm90b3R5cGUuc2xpY2tTZXRPcHRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogYWNjZXB0cyBhcmd1bWVudHMgaW4gZm9ybWF0IG9mOlxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgY2hhbmdpbmcgYSBzaW5nbGUgb3B0aW9uJ3MgdmFsdWU6XG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgb3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNldCBvZiByZXNwb25zaXZlIG9wdGlvbnM6XG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgJ3Jlc3BvbnNpdmUnLCBbe30sIC4uLl0sIHJlZnJlc2ggKVxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgdXBkYXRpbmcgbXVsdGlwbGUgdmFsdWVzIGF0IG9uY2UgKG5vdCByZXNwb25zaXZlKVxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsIHsgJ29wdGlvbic6IHZhbHVlLCAuLi4gfSwgcmVmcmVzaCApXG4gICAgICAgICAqL1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgbCwgaXRlbSwgb3B0aW9uLCB2YWx1ZSwgcmVmcmVzaCA9IGZhbHNlLCB0eXBlO1xuXG4gICAgICAgIGlmKCAkLnR5cGUoIGFyZ3VtZW50c1swXSApID09PSAnb2JqZWN0JyApIHtcblxuICAgICAgICAgICAgb3B0aW9uID0gIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHJlZnJlc2ggPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB0eXBlID0gJ211bHRpcGxlJztcblxuICAgICAgICB9IGVsc2UgaWYgKCAkLnR5cGUoIGFyZ3VtZW50c1swXSApID09PSAnc3RyaW5nJyApIHtcblxuICAgICAgICAgICAgb3B0aW9uID0gIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHZhbHVlID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1syXTtcblxuICAgICAgICAgICAgaWYgKCBhcmd1bWVudHNbMF0gPT09ICdyZXNwb25zaXZlJyAmJiAkLnR5cGUoIGFyZ3VtZW50c1sxXSApID09PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdyZXNwb25zaXZlJztcblxuICAgICAgICAgICAgfSBlbHNlIGlmICggdHlwZW9mIGFyZ3VtZW50c1sxXSAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3NpbmdsZSc7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCB0eXBlID09PSAnc2luZ2xlJyApIHtcblxuICAgICAgICAgICAgXy5vcHRpb25zW29wdGlvbl0gPSB2YWx1ZTtcblxuXG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGUgPT09ICdtdWx0aXBsZScgKSB7XG5cbiAgICAgICAgICAgICQuZWFjaCggb3B0aW9uICwgZnVuY3Rpb24oIG9wdCwgdmFsICkge1xuXG4gICAgICAgICAgICAgICAgXy5vcHRpb25zW29wdF0gPSB2YWw7XG5cbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ3Jlc3BvbnNpdmUnICkge1xuXG4gICAgICAgICAgICBmb3IgKCBpdGVtIGluIHZhbHVlICkge1xuXG4gICAgICAgICAgICAgICAgaWYoICQudHlwZSggXy5vcHRpb25zLnJlc3BvbnNpdmUgKSAhPT0gJ2FycmF5JyApIHtcblxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZSA9IFsgdmFsdWVbaXRlbV0gXTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgbCA9IF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aC0xO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgcmVzcG9uc2l2ZSBvYmplY3QgYW5kIHNwbGljZSBvdXQgZHVwbGljYXRlcy5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoIGwgPj0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy5yZXNwb25zaXZlW2xdLmJyZWFrcG9pbnQgPT09IHZhbHVlW2l0ZW1dLmJyZWFrcG9pbnQgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5zcGxpY2UobCwxKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsLS07XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnB1c2goIHZhbHVlW2l0ZW1dICk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCByZWZyZXNoICkge1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0RGltZW5zaW9ucygpO1xuXG4gICAgICAgIF8uc2V0SGVpZ2h0KCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5zZXRDU1MoXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnNldEZhZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdzZXRQb3NpdGlvbicsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFByb3BzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keS5zdHlsZTtcblxuICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gdHJ1ZSA/ICd0b3AnIDogJ2xlZnQnO1xuXG4gICAgICAgIGlmIChfLnBvc2l0aW9uUHJvcCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stdmVydGljYWwnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stdmVydGljYWwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5U3R5bGUuV2Via2l0VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBib2R5U3R5bGUuTW96VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICBib2R5U3R5bGUubXNUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudXNlQ1NTID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5mYWRlICkge1xuICAgICAgICAgICAgaWYgKCB0eXBlb2YgXy5vcHRpb25zLnpJbmRleCA9PT0gJ251bWJlcicgKSB7XG4gICAgICAgICAgICAgICAgaWYoIF8ub3B0aW9ucy56SW5kZXggPCAzICkge1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuekluZGV4ID0gMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSBfLmRlZmF1bHRzLnpJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5U3R5bGUuT1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ09UcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy1vLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ09UcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5Nb3pUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdNb3pUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy1tb3otdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnTW96VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUuTW96UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUud2Via2l0VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnd2Via2l0VHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctd2Via2l0LXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ3dlYmtpdFRyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnbXNUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy1tcy10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdtc1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ3RyYW5zaXRpb24nO1xuICAgICAgICB9XG4gICAgICAgIF8udHJhbnNmb3Jtc0VuYWJsZWQgPSBfLm9wdGlvbnMudXNlVHJhbnNmb3JtICYmIChfLmFuaW1UeXBlICE9PSBudWxsICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKTtcbiAgICB9O1xuXG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0U2xpZGVDbGFzc2VzID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQsIGFsbFNsaWRlcywgaW5kZXhPZmZzZXQsIHJlbWFpbmRlcjtcblxuICAgICAgICBhbGxTbGlkZXMgPSBfLiRzbGlkZXJcbiAgICAgICAgICAgIC5maW5kKCcuc2xpY2stc2xpZGUnKVxuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgIC5lcShpbmRleClcbiAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY3VycmVudCcpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IGNlbnRlck9mZnNldCAmJiBpbmRleCA8PSAoXy5zbGlkZUNvdW50IC0gMSkgLSBjZW50ZXJPZmZzZXQpIHtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCAtIGNlbnRlck9mZnNldCwgaW5kZXggKyBjZW50ZXJPZmZzZXQgKyAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGluZGV4T2Zmc2V0ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCAtIGNlbnRlck9mZnNldCArIDEsIGluZGV4T2Zmc2V0ICsgY2VudGVyT2Zmc2V0ICsgMilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoYWxsU2xpZGVzLmxlbmd0aCAtIDEgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IF8uc2xpZGVDb3VudCAtIDEpIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lcShfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jZW50ZXInKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8PSAoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykpIHtcblxuICAgICAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXgsIGluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChhbGxTbGlkZXMubGVuZ3RoIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgcmVtYWluZGVyID0gXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleCA6IGluZGV4O1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICYmIChfLnNsaWRlQ291bnQgLSBpbmRleCkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIHJlbWFpbmRlciksIGluZGV4T2Zmc2V0ICsgcmVtYWluZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0LCBpbmRleE9mZnNldCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAnb25kZW1hbmQnKSB7XG4gICAgICAgICAgICBfLmxhenlMb2FkKCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0dXBJbmZpbml0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIHNsaWRlSW5kZXgsIGluZmluaXRlQ291bnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuY2VudGVyTW9kZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgc2xpZGVJbmRleCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IF8uc2xpZGVDb3VudDsgaSA+IChfLnNsaWRlQ291bnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCk7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmZpbml0ZUNvdW50OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4ICsgXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spLmFkZENsYXNzKCdzbGljay1jbG9uZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykuZmluZCgnW2lkXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignaWQnLCAnJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmludGVycnVwdCA9IGZ1bmN0aW9uKCB0b2dnbGUgKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmKCAhdG9nZ2xlICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICB9XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0b2dnbGU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNlbGVjdEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9XG4gICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkuaXMoJy5zbGljay1zbGlkZScpID9cbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkgOlxuICAgICAgICAgICAgICAgICQoZXZlbnQudGFyZ2V0KS5wYXJlbnRzKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCh0YXJnZXRFbGVtZW50LmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSk7XG5cbiAgICAgICAgaWYgKCFpbmRleCkgaW5kZXggPSAwO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLnNldFNsaWRlQ2xhc3NlcyhpbmRleCk7XG4gICAgICAgICAgICBfLmFzTmF2Rm9yKGluZGV4KTtcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlkZUhhbmRsZXIgPSBmdW5jdGlvbihpbmRleCwgc3luYywgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgdGFyZ2V0U2xpZGUsIGFuaW1TbGlkZSwgb2xkU2xpZGUsIHNsaWRlTGVmdCwgdGFyZ2V0TGVmdCA9IG51bGwsXG4gICAgICAgICAgICBfID0gdGhpcywgbmF2VGFyZ2V0O1xuXG4gICAgICAgIHN5bmMgPSBzeW5jIHx8IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMud2FpdEZvckFuaW1hdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSAmJiBfLmN1cnJlbnRTbGlkZSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN5bmMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFzTmF2Rm9yKGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldFNsaWRlID0gaW5kZXg7XG4gICAgICAgIHRhcmdldExlZnQgPSBfLmdldExlZnQodGFyZ2V0U2xpZGUpO1xuICAgICAgICBzbGlkZUxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8uY3VycmVudExlZnQgPSBfLnN3aXBlTGVmdCA9PT0gbnVsbCA/IHNsaWRlTGVmdCA6IF8uc3dpcGVMZWZ0O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSBmYWxzZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gXy5nZXREb3RDb3VudCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUoc2xpZGVMZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhcmdldFNsaWRlIDwgMCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCAtIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgKyB0YXJnZXRTbGlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRTbGlkZSA+PSBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZSAtIF8uc2xpZGVDb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdiZWZvcmVDaGFuZ2UnLCBbXywgXy5jdXJyZW50U2xpZGUsIGFuaW1TbGlkZV0pO1xuXG4gICAgICAgIG9sZFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgIF8uY3VycmVudFNsaWRlID0gYW5pbVNsaWRlO1xuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hc05hdkZvciApIHtcblxuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gXy5nZXROYXZUYXJnZXQoKTtcbiAgICAgICAgICAgIG5hdlRhcmdldCA9IG5hdlRhcmdldC5zbGljaygnZ2V0U2xpY2snKTtcblxuICAgICAgICAgICAgaWYgKCBuYXZUYXJnZXQuc2xpZGVDb3VudCA8PSBuYXZUYXJnZXQub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICAgICAgbmF2VGFyZ2V0LnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBfLmZhZGVTbGlkZU91dChvbGRTbGlkZSk7XG5cbiAgICAgICAgICAgICAgICBfLmZhZGVTbGlkZShhbmltU2xpZGUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5hbmltYXRlU2xpZGUodGFyZ2V0TGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zdGFydExvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuaGlkZSgpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LmhpZGUoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZURpcmVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciB4RGlzdCwgeURpc3QsIHIsIHN3aXBlQW5nbGUsIF8gPSB0aGlzO1xuXG4gICAgICAgIHhEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFggLSBfLnRvdWNoT2JqZWN0LmN1clg7XG4gICAgICAgIHlEaXN0ID0gXy50b3VjaE9iamVjdC5zdGFydFkgLSBfLnRvdWNoT2JqZWN0LmN1clk7XG4gICAgICAgIHIgPSBNYXRoLmF0YW4yKHlEaXN0LCB4RGlzdCk7XG5cbiAgICAgICAgc3dpcGVBbmdsZSA9IE1hdGgucm91bmQociAqIDE4MCAvIE1hdGguUEkpO1xuICAgICAgICBpZiAoc3dpcGVBbmdsZSA8IDApIHtcbiAgICAgICAgICAgIHN3aXBlQW5nbGUgPSAzNjAgLSBNYXRoLmFicyhzd2lwZUFuZ2xlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA8PSA0NSkgJiYgKHN3aXBlQW5nbGUgPj0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAnbGVmdCcgOiAncmlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gMzYwKSAmJiAoc3dpcGVBbmdsZSA+PSAzMTUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDEzNSkgJiYgKHN3aXBlQW5nbGUgPD0gMjI1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdyaWdodCcgOiAnbGVmdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPj0gMzUpICYmIChzd2lwZUFuZ2xlIDw9IDEzNSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Rvd24nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3VwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAndmVydGljYWwnO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVDb3VudCxcbiAgICAgICAgICAgIGRpcmVjdGlvbjtcblxuICAgICAgICBfLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgXy5zaG91bGRDbGljayA9ICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDEwICkgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LmN1clggPT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5lZGdlSGl0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2VkZ2UnLCBbXywgXy5zd2lwZURpcmVjdGlvbigpIF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID49IF8udG91Y2hPYmplY3QubWluU3dpcGUgKSB7XG5cbiAgICAgICAgICAgIGRpcmVjdGlvbiA9IF8uc3dpcGVEaXJlY3Rpb24oKTtcblxuICAgICAgICAgICAgc3dpdGNoICggZGlyZWN0aW9uICkge1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG93bic6XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDb3VudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKCBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpICkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlICsgXy5nZXRTbGlkZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50RGlyZWN0aW9uID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBjYXNlICd1cCc6XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVDb3VudCA9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrTmF2aWdhYmxlKCBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpICkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlIC0gXy5nZXRTbGlkZUNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50RGlyZWN0aW9uID0gMTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggZGlyZWN0aW9uICE9ICd2ZXJ0aWNhbCcgKSB7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVDb3VudCApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc3dpcGUnLCBbXywgZGlyZWN0aW9uIF0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKCBfLnRvdWNoT2JqZWN0LnN0YXJ0WCAhPT0gXy50b3VjaE9iamVjdC5jdXJYICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIF8uY3VycmVudFNsaWRlICk7XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoKF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpIHx8ICgnb250b3VjaGVuZCcgaW4gZG9jdW1lbnQgJiYgXy5vcHRpb25zLnN3aXBlID09PSBmYWxzZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuZHJhZ2dhYmxlID09PSBmYWxzZSAmJiBldmVudC50eXBlLmluZGV4T2YoJ21vdXNlJykgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50ID0gZXZlbnQub3JpZ2luYWxFdmVudCAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMgIT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgICBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoIDogMTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlID0gXy5saXN0V2lkdGggLyBfLm9wdGlvbnNcbiAgICAgICAgICAgIC50b3VjaFRocmVzaG9sZDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdEhlaWdodCAvIF8ub3B0aW9uc1xuICAgICAgICAgICAgICAgIC50b3VjaFRocmVzaG9sZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5hY3Rpb24pIHtcblxuICAgICAgICAgICAgY2FzZSAnc3RhcnQnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVTdGFydChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ21vdmUnOlxuICAgICAgICAgICAgICAgIF8uc3dpcGVNb3ZlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlRW5kKGV2ZW50KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlTW92ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgZWRnZVdhc0hpdCA9IGZhbHNlLFxuICAgICAgICAgICAgY3VyTGVmdCwgc3dpcGVEaXJlY3Rpb24sIHN3aXBlTGVuZ3RoLCBwb3NpdGlvbk9mZnNldCwgdG91Y2hlcztcblxuICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkID8gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzIDogbnVsbDtcblxuICAgICAgICBpZiAoIV8uZHJhZ2dpbmcgfHwgdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VyTGVmdCA9IF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5jdXJYID0gdG91Y2hlcyAhPT0gdW5kZWZpbmVkID8gdG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSBNYXRoLnJvdW5kKE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWCAtIF8udG91Y2hPYmplY3Quc3RhcnRYLCAyKSkpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWxTd2lwaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICAgICAgTWF0aC5wb3coXy50b3VjaE9iamVjdC5jdXJZIC0gXy50b3VjaE9iamVjdC5zdGFydFksIDIpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZURpcmVjdGlvbiA9IF8uc3dpcGVEaXJlY3Rpb24oKTtcblxuICAgICAgICBpZiAoc3dpcGVEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbk9mZnNldCA9IChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/IDEgOiAtMSkgKiAoXy50b3VjaE9iamVjdC5jdXJYID4gXy50b3VjaE9iamVjdC5zdGFydFggPyAxIDogLTEpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcG9zaXRpb25PZmZzZXQgPSBfLnRvdWNoT2JqZWN0LmN1clkgPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA/IDEgOiAtMTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoKF8uY3VycmVudFNsaWRlID09PSAwICYmIHN3aXBlRGlyZWN0aW9uID09PSAncmlnaHQnKSB8fCAoXy5jdXJyZW50U2xpZGUgPj0gXy5nZXREb3RDb3VudCgpICYmIHN3aXBlRGlyZWN0aW9uID09PSAnbGVmdCcpKSB7XG4gICAgICAgICAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoICogXy5vcHRpb25zLmVkZ2VGcmljdGlvbjtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyAoc3dpcGVMZW5ndGggKiAoXy4kbGlzdC5oZWlnaHQoKSAvIF8ubGlzdFdpZHRoKSkgKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMudG91Y2hNb3ZlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldENTUyhfLnN3aXBlTGVmdCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlU3RhcnQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRvdWNoZXM7XG5cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgIT09IDEgfHwgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF07XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA9IF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA9IF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1VuZmlsdGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRzbGlkZXNDYWNoZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJHByZXZBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRuZXh0QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAgICAgICAuY3NzKCd3aWR0aCcsICcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5zbGljayA9IGZ1bmN0aW9uKGZyb21CcmVha3BvaW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigndW5zbGljaycsIFtfLCBmcm9tQnJlYWtwb2ludF0pO1xuICAgICAgICBfLmRlc3Ryb3koKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJlxuICAgICAgICAgICAgIV8ub3B0aW9ucy5pbmZpbml0ZSApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIDEgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVEb3RzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgICAgICBfLiRkb3RzXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgICAgICAgICAuZXEoTWF0aC5mbG9vcihfLmN1cnJlbnRTbGlkZSAvIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudmlzaWJpbGl0eSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcblxuICAgICAgICAgICAgaWYgKCBkb2N1bWVudFtfLmhpZGRlbl0gKSB7XG5cbiAgICAgICAgICAgICAgICBfLmludGVycnVwdGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICAkLmZuLnNsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG9wdCA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgbCA9IF8ubGVuZ3RoLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIHJldDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHQgPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9wdCA9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICBfW2ldLnNsaWNrID0gbmV3IFNsaWNrKF9baV0sIG9wdCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmV0ID0gX1tpXS5zbGlja1tvcHRdLmFwcGx5KF9baV0uc2xpY2ssIGFyZ3MpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXQgIT0gJ3VuZGVmaW5lZCcpIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF87XG4gICAgfTtcblxufSkpO1xuIiwiXG4kKHdpbmRvdykuYmluZCgnIGxvYWQgcmVzaXplIG9yaWVudGF0aW9uQ2hhbmdlICcsIGZ1bmN0aW9uICgpIHtcbiAgIHZhciBmb290ZXIgPSAkKFwiI2Zvb3Rlci1jb250YWluZXJcIik7XG4gICB2YXIgcG9zID0gZm9vdGVyLnBvc2l0aW9uKCk7XG4gICB2YXIgaGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcG9zLnRvcDtcbiAgIGhlaWdodCA9IGhlaWdodCAtIGZvb3Rlci5oZWlnaHQoKSAtMTtcblxuICAgZnVuY3Rpb24gc3RpY2t5Rm9vdGVyKCkge1xuICAgICBmb290ZXIuY3NzKHtcbiAgICAgICAgICdtYXJnaW4tdG9wJzogaGVpZ2h0ICsgJ3B4J1xuICAgICB9KTtcbiAgIH1cblxuICAgaWYgKGhlaWdodCA+IDApIHtcbiAgICAgc3RpY2t5Rm9vdGVyKCk7XG4gICB9XG59KTtcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogd2lhd1VuaXZlcnNhbEFqYXguanMgdjEuMFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbiFmdW5jdGlvbigkKSB7XG5cblx0JChmdW5jdGlvbigpe1xuXG5cblx0XHQvLyBDbGljayB0aGUgYnV0dG9uIVxuXHRcdCQoXCIuYXJjaGl2ZV9fbG9hZC1tb3JlIGFcIikuY2xpY2soIGZ1bmN0aW9uKCl7XG5cblx0XHRcdC8vIGFsZXJ0KCdzYXkgd2hhYWE/Jyk7XG5cblx0XHRcdHZhciB1cmwgPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKSxcblx0XHRcdFx0c3BsaXRfdXJsID0gdXJsLnNsaWNlKDAsIC0xKS5zcGxpdCgnLycpLFxuXHRcdFx0XHRwYWdlX251bSA9IHNwbGl0X3VybFsgc3BsaXRfdXJsLmxlbmd0aC0xXSxcblx0XHRcdFx0dmFycyA9IHt9O1xuXG5cblx0XHRcdGlmICggaXNOYU4ocGFnZV9udW0pICl7XG5cdFx0XHRcdHBhZ2VfbnVtID0gc3BsaXRfdXJsWyBzcGxpdF91cmwubGVuZ3RoLTJdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdXAgdGhlIGNvcnJlY3QgdmFyc1xuXHRcdFx0aWYgKCAkKFwiI3dpYXdfdGF4b25vbXlcIikubGVuZ3RoID49IDEpIHtcblx0XHRcdFx0dmFycy50YXhvbm9teSBcdD0gJChcIiN3aWF3X3RheG9ub215XCIpLnZhbCgpO1xuXHRcdFx0XHR2YXJzLnRlcm1faWQgXHQ9ICQoXCIjd2lhd190ZXJtX2lkXCIpLnZhbCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFycy5wb3N0X3R5cGUgXHQ9ICQoXCIjd2lhd19wb3N0X3R5cGVcIikudmFsKCk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnNvbGUubG9nKHNwbGl0X3VybCk7XG5cdFx0XHRjb25zb2xlLmxvZyh2YXJzKTtcblx0XHRcdGNvbnNvbGUubG9nKHBhZ2VfbnVtKTtcblxuXHRcdFx0d2lhd19nZXRfbW9yZV9wb3N0cyggcGFnZV9udW0sIHZhcnMpO1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSk7XG5cblxuXG5cdFx0Ly8gR2V0IFBvc3RzIEFKQVggQ2FsbFxuXHRcdGZ1bmN0aW9uIHdpYXdfZ2V0X21vcmVfcG9zdHMoIHBhZ2VfbnVtLCB2YXJzICkge1xuXG5cdFx0XHQvLyBTaG93IHRoZSBhamF4IGxvYWRlclxuXHRcdFx0JChcIi5hamF4LXNwaW5uZXJcIikuc2hvdygpO1xuXG5cdFx0XHQvLyBtYWtlIHN1cmUgcGFnZV9udW0gaXMgYmVpbmcgcmVhZCBhcyBhbiBJTlRcblx0XHRcdHZhciBwYWdlX251bSA9IHBhcnNlSW50KCBwYWdlX251bSk7XG5cblx0XHRcdC8vIERvIHRoZSBBSkFYIGNhbGxcblx0XHRcdCQuYWpheCh7XG5cdFx0XHRcdHVybDoganNfdmFycy5hamF4dXJsLFxuXHRcdFx0XHR0eXBlOiAncG9zdCcsXG5cdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRhY3Rpb246ICdhcmNoaXZlX2xvYWRfbW9yZScsXG5cdFx0XHRcdFx0cGFnZTogXHRwYWdlX251bSxcblx0XHRcdFx0XHRkYXRhOlx0dmFyc1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRlcnJvcjogZnVuY3Rpb24oZXhjZXB0aW9uKXtcblx0XHRcdFx0XHRhbGVydCgnRXhlcHRpb246JytleGNlcHRpb24pO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbiggaHRtbCApIHtcblxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKGh0bWwpO1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgd2VyZSBhbnkgcmVzdWx0c1xuXHRcdFx0XHRcdGlmICggaHRtbCAhPSAnJykge1xuXG5cblx0XHRcdFx0XHRcdC8vIFVwZGF0ZSB0aGUgbmV4dCBwYWdlIFVSTFxuXHRcdFx0XHRcdFx0dmFyIGJ0biBcdFx0XHRcdFx0PSAkKFwiLmFyY2hpdmVfX2xvYWQtbW9yZSBhXCIpLFxuXHRcdFx0XHRcdFx0XHRidG5fdXJsIFx0XHRcdFx0PSBidG4uYXR0cignaHJlZicpO1xuXG5cdFx0XHRcdFx0XHRidG5fdXJsIFx0XHRcdFx0XHQ9IGJ0bl91cmwuc2xpY2UoMCwgLTEpLnNwbGl0KCcvJyksXG5cdFx0XHRcdFx0XHRidG5fdXJsWyBidG5fdXJsLmxlbmd0aC0xXSBcdD0gKHBhZ2VfbnVtICsgMSksXG5cdFx0XHRcdFx0XHRidG5fdXJsIFx0XHRcdFx0XHQ9IGJ0bl91cmwuam9pbignLycpICsgJy8nO1xuXG5cdFx0XHRcdFx0XHRidG4uYXR0cignaHJlZicsIGJ0bl91cmwpO1xuXG5cblx0XHRcdFx0XHRcdC8vIEluc2VydCB0aGUgSFRNTFxuXHRcdFx0XHRcdFx0JChcIiNhamF4LWJlZm9yZS1tZVwiKS5iZWZvcmUoIGh0bWwpO1xuXG5cdFx0XHRcdFx0XHRRdWlja0xvb2tJbml0KCk7IC8vIGFkZGVkIHRoaXMgc28gdGhhdCB0aGUgcXVpY2tsb29rIHdvcmtzIGFmdGVyIGxvYWQgbW9yZS4gU2VlIGFwcC5qcyBmdW5jdGlvbiBjYWxsZWQgUXVpY2tMb29rSW5pdFxuXG5cdFx0XHRcdFx0Ly8gTm8gcmVzdWx0c1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIHNheSBubyBwb3N0c1xuXHRcdFx0XHRcdFx0JChcIiNhamF4LWJlZm9yZS1tZVwiKS5iZWZvcmUoICc8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPjxwPk5vIGZ1cnRoZXIgcmVzdWx0cy48L3A+PC9kaXY+Jyk7XG5cblx0XHRcdFx0XHRcdC8vIGhpZGUgdGhlIG5leHQgYnV0dG9uXG5cdFx0XHRcdFx0XHQkKFwiLmFyY2hpdmVfX2xvYWQtbW9yZVwiKS5oaWRlKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBIaWRlIHRoZSBhamF4IGxvYWRlclxuXHRcdFx0XHRcdCQoXCIuYWpheC1zcGlubmVyXCIpLmhpZGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fTtcblx0fSk7XG5cblxuXG59KHdpbmRvdy5qUXVlcnkpO1xuIl19
>>>>>>> 7da9563730d1d0f4f4bc73e6a0356b5152b1a269
