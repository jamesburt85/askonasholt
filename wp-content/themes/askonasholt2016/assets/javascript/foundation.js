!function ($) {

  "use strict";

  var FOUNDATION_VERSION = '6.2.4';

  // Global Foundation object
  // This is attached to the window, or used as a module for AMD/Browserify
  var Foundation = {
    version: FOUNDATION_VERSION,

    /**
     * Stores initialized plugins.
     */
    _plugins: {},

    /**
     * Stores generated unique ids for plugin instances
     */
    _uuids: [],

    /**
     * Returns a boolean for RTL support
     */
    rtl: function () {
      return $('html').attr('dir') === 'rtl';
    },
    /**
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.
     */
    plugin: function (plugin, name) {
      // Object key to use when adding to global Foundation object
      // Examples: Foundation.Reveal, Foundation.OffCanvas
      var className = name || functionName(plugin);
      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
      // Examples: data-reveal, data-off-canvas
      var attrName = hyphenate(className);

      // Add to the Foundation object and the plugins list (for reflowing)
      this._plugins[attrName] = this[className] = plugin;
    },
    /**
     * @function
     * Populates the _uuids array with pointers to each individual plugin instance.
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @param {String} name - the name of the plugin, passed as a camelCased string.
     * @fires Plugin#init
     */
    registerPlugin: function (plugin, name) {
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
      plugin.uuid = this.GetYoDigits(6, pluginName);

      if (!plugin.$element.attr(`data-${pluginName}`)) {
        plugin.$element.attr(`data-${pluginName}`, plugin.uuid);
      }
      if (!plugin.$element.data('zfPlugin')) {
        plugin.$element.data('zfPlugin', plugin);
      }
      /**
       * Fires when the plugin has initialized.
       * @event Plugin#init
       */
      plugin.$element.trigger(`init.zf.${pluginName}`);

      this._uuids.push(plugin.uuid);

      return;
    },
    /**
     * @function
     * Removes the plugins uuid from the _uuids array.
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
     * Also fires the destroyed event for the plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @fires Plugin#destroyed
     */
    unregisterPlugin: function (plugin) {
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
      plugin.$element.removeAttr(`data-${pluginName}`).removeData('zfPlugin')
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      .trigger(`destroyed.zf.${pluginName}`);
      for (var prop in plugin) {
        plugin[prop] = null; //clean up script to prep for garbage collection.
      }
      return;
    },

    /**
     * @function
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.
     */
    reInit: function (plugins) {
      var isJQ = plugins instanceof $;
      try {
        if (isJQ) {
          plugins.each(function () {
            $(this).data('zfPlugin')._init();
          });
        } else {
          var type = typeof plugins,
              _this = this,
              fns = {
            'object': function (plgs) {
              plgs.forEach(function (p) {
                p = hyphenate(p);
                $('[data-' + p + ']').foundation('_init');
              });
            },
            'string': function () {
              plugins = hyphenate(plugins);
              $('[data-' + plugins + ']').foundation('_init');
            },
            'undefined': function () {
              this['object'](Object.keys(_this._plugins));
            }
          };
          fns[type](plugins);
        }
      } catch (err) {
        console.error(err);
      } finally {
        return plugins;
      }
    },

    /**
     * returns a random base-36 uid with namespacing
     * @function
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
     * @returns {String} - unique id
     */
    GetYoDigits: function (length, namespace) {
      length = length || 6;
      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? `-${namespace}` : '');
    },
    /**
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
     */
    reflow: function (elem, plugins) {

      // If plugins is undefined, just grab everything
      if (typeof plugins === 'undefined') {
        plugins = Object.keys(this._plugins);
      }
      // If plugins is a string, convert it to an array with one item
      else if (typeof plugins === 'string') {
          plugins = [plugins];
        }

      var _this = this;

      // Iterate through each plugin
      $.each(plugins, function (i, name) {
        // Get the current plugin
        var plugin = _this._plugins[name];

        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

        // For each plugin found, initialize it
        $elem.each(function () {
          var $el = $(this),
              opts = {};
          // Don't double-dip on plugins
          if ($el.data('zfPlugin')) {
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
            return;
          }

          if ($el.attr('data-options')) {
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
              var opt = e.split(':').map(function (el) {
                return el.trim();
              });
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
            });
          }
          try {
            $el.data('zfPlugin', new plugin($(this), opts));
          } catch (er) {
            console.error(er);
          } finally {
            return;
          }
        });
      });
    },
    getFnName: functionName,
    transitionend: function ($elem) {
      var transitions = {
        'transition': 'transitionend',
        'WebkitTransition': 'webkitTransitionEnd',
        'MozTransition': 'transitionend',
        'OTransition': 'otransitionend'
      };
      var elem = document.createElement('div'),
          end;

      for (var t in transitions) {
        if (typeof elem.style[t] !== 'undefined') {
          end = transitions[t];
        }
      }
      if (end) {
        return end;
      } else {
        end = setTimeout(function () {
          $elem.triggerHandler('transitionend', [$elem]);
        }, 1);
        return 'transitionend';
      }
    }
  };

  Foundation.util = {
    /**
     * Function for applying a debounce effect to a function call.
     * @function
     * @param {Function} func - Function to be called at end of timeout.
     * @param {Number} delay - Time in ms to delay the call of `func`.
     * @returns function
     */
    throttle: function (func, delay) {
      var timer = null;

      return function () {
        var context = this,
            args = arguments;

        if (timer === null) {
          timer = setTimeout(function () {
            func.apply(context, args);
            timer = null;
          }, delay);
        }
      };
    }
  };

  // TODO: consider not making this a jQuery function
  // TODO: need way to reflow vs. re-initialize
  /**
   * The Foundation jQuery method.
   * @param {String|Array} method - An action to perform on the current jQuery object.
   */
  var foundation = function (method) {
    var type = typeof method,
        $meta = $('meta.foundation-mq'),
        $noJS = $('.no-js');

    if (!$meta.length) {
      $('<meta class="foundation-mq">').appendTo(document.head);
    }
    if ($noJS.length) {
      $noJS.removeClass('no-js');
    }

    if (type === 'undefined') {
      //needs to initialize the Foundation object, or an individual plugin.
      Foundation.MediaQuery._init();
      Foundation.reflow(this);
    } else if (type === 'string') {
      //an individual method to invoke on a plugin or group of plugins
      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
      var plugClass = this.data('zfPlugin'); //determine the class of plugin

      if (plugClass !== undefined && plugClass[method] !== undefined) {
        //make sure both the class and method exist
        if (this.length === 1) {
          //if there's only one, call it directly.
          plugClass[method].apply(plugClass, args);
        } else {
          this.each(function (i, el) {
            //otherwise loop through the jQuery collection and invoke the method on each
            plugClass[method].apply($(el).data('zfPlugin'), args);
          });
        }
      } else {
        //error for no class or no method
        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
      }
    } else {
      //error for invalid argument type
      throw new TypeError(`We're sorry, ${type} is not a valid parameter. You must use a string representing the method you wish to invoke.`);
    }
    return this;
  };

  window.Foundation = Foundation;
  $.fn.foundation = foundation;

  // Polyfill for requestAnimationFrame
  (function () {
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
      return new Date().getTime();
    };

    var vendors = ['webkit', 'moz'];
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
      var vp = vendors[i];
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;
      window.requestAnimationFrame = function (callback) {
        var now = Date.now();
        var nextTime = Math.max(lastTime + 16, now);
        return setTimeout(function () {
          callback(lastTime = nextTime);
        }, nextTime - now);
      };
      window.cancelAnimationFrame = clearTimeout;
    }
    /**
     * Polyfill for performance.now, required by rAF
     */
    if (!window.performance || !window.performance.now) {
      window.performance = {
        start: Date.now(),
        now: function () {
          return Date.now() - this.start;
        }
      };
    }
  })();
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // closest thing possible to the ECMAScript 5
        // internal IsCallable function
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };

      if (this.prototype) {
        // native functions don't have a prototype
        fNOP.prototype = this.prototype;
      }
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
  // Polyfill to get the name of a function in IE9
  function functionName(fn) {
    if (Function.prototype.name === undefined) {
      var funcNameRegex = /function\s([^(]{1,})\(/;
      var results = funcNameRegex.exec(fn.toString());
      return results && results.length > 1 ? results[1].trim() : "";
    } else if (fn.prototype === undefined) {
      return fn.constructor.name;
    } else {
      return fn.prototype.constructor.name;
    }
  }
  function parseValue(str) {
    if (/true/.test(str)) return true;else if (/false/.test(str)) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;
  }
  // Convert PascalCase to kebab-case
  // Thank you: http://stackoverflow.com/a/8955580
  function hyphenate(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  }
}(jQuery);
;'use strict';

!function ($) {

  Foundation.Box = {
    ImNotTouchingYou: ImNotTouchingYou,
    GetDimensions: GetDimensions,
    GetOffsets: GetOffsets
  };

  /**
   * Compares the dimensions of an element to a container and determines collision events with container.
   * @function
   * @param {jQuery} element - jQuery object to test for collisions.
   * @param {jQuery} parent - jQuery object to use as bounding container.
   * @param {Boolean} lrOnly - set to true to check left and right values only.
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.
   * @default if no parent object passed, detects collisions with `window`.
   * @returns {Boolean} - true if collision free, false if a collision in any direction.
   */
  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {
    var eleDims = GetDimensions(element),
        top,
        bottom,
        left,
        right;

    if (parent) {
      var parDims = GetDimensions(parent);

      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;
      top = eleDims.offset.top >= parDims.offset.top;
      left = eleDims.offset.left >= parDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;
    } else {
      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;
      top = eleDims.offset.top >= eleDims.windowDims.offset.top;
      left = eleDims.offset.left >= eleDims.windowDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;
    }

    var allDirs = [bottom, top, left, right];

    if (lrOnly) {
      return left === right === true;
    }

    if (tbOnly) {
      return top === bottom === true;
    }

    return allDirs.indexOf(false) === -1;
  };

  /**
   * Uses native methods to return an object of dimension values.
   * @function
   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
   * @returns {Object} - nested object of integer pixel values
   * TODO - if element is window, return only those values.
   */
  function GetDimensions(elem, test) {
    elem = elem.length ? elem[0] : elem;

    if (elem === window || elem === document) {
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
    }

    var rect = elem.getBoundingClientRect(),
        parRect = elem.parentNode.getBoundingClientRect(),
        winRect = document.body.getBoundingClientRect(),
        winY = window.pageYOffset,
        winX = window.pageXOffset;

    return {
      width: rect.width,
      height: rect.height,
      offset: {
        top: rect.top + winY,
        left: rect.left + winX
      },
      parentDims: {
        width: parRect.width,
        height: parRect.height,
        offset: {
          top: parRect.top + winY,
          left: parRect.left + winX
        }
      },
      windowDims: {
        width: winRect.width,
        height: winRect.height,
        offset: {
          top: winY,
          left: winX
        }
      }
    };
  }

  /**
   * Returns an object of top and left integer pixel values for dynamically rendered elements,
   * such as: Tooltip, Reveal, and Dropdown
   * @function
   * @param {jQuery} element - jQuery object for the element being positioned.
   * @param {jQuery} anchor - jQuery object for the element's anchor point.
   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
   * TODO alter/rewrite to work with `em` values as well/instead of pixels
   */
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
    var $eleDims = GetDimensions(element),
        $anchorDims = anchor ? GetDimensions(anchor) : null;

    switch (position) {
      case 'top':
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top
        };
        break;
      case 'right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset,
          top: $anchorDims.offset.top
        };
        break;
      case 'center top':
        return {
          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'center bottom':
        return {
          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'center left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center':
        return {
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'reveal':
        return {
          left: ($eleDims.windowDims.width - $eleDims.width) / 2,
          top: $eleDims.windowDims.offset.top + vOffset
        };
      case 'reveal full':
        return {
          left: $eleDims.windowDims.offset.left,
          top: $eleDims.windowDims.offset.top
        };
        break;
      case 'left bottom':
        return {
          left: $anchorDims.offset.left,
          top: $anchorDims.offset.top + $anchorDims.height
        };
        break;
      case 'right bottom':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,
          top: $anchorDims.offset.top + $anchorDims.height
        };
        break;
      default:
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
    }
  }
}(jQuery);
;/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/

'use strict';

!function ($) {

  const keyCodes = {
    9: 'TAB',
    13: 'ENTER',
    27: 'ESCAPE',
    32: 'SPACE',
    37: 'ARROW_LEFT',
    38: 'ARROW_UP',
    39: 'ARROW_RIGHT',
    40: 'ARROW_DOWN'
  };

  var commands = {};

  var Keyboard = {
    keys: getKeyCodes(keyCodes),

    /**
     * Parses the (keyboard) event and returns a String that represents its key
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
     * @param {Event} event - the event generated by the event handler
     * @return String key - String that represents the key pressed
     */
    parseKey(event) {
      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();
      if (event.shiftKey) key = `SHIFT_${key}`;
      if (event.ctrlKey) key = `CTRL_${key}`;
      if (event.altKey) key = `ALT_${key}`;
      return key;
    },

    /**
     * Handles the given (keyboard) event
     * @param {Event} event - the event generated by the event handler
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal
     * @param {Objects} functions - collection of functions that are to be executed
     */
    handleKey(event, component, functions) {
      var commandList = commands[component],
          keyCode = this.parseKey(event),
          cmds,
          command,
          fn;

      if (!commandList) return console.warn('Component not defined!');

      if (typeof commandList.ltr === 'undefined') {
        // this component does not differentiate between ltr and rtl
        cmds = commandList; // use plain list
      } else {
        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
      }
      command = cmds[keyCode];

      fn = functions[command];
      if (fn && typeof fn === 'function') {
        // execute function  if exists
        var returnValue = fn.apply();
        if (functions.handled || typeof functions.handled === 'function') {
          // execute function when event was handled
          functions.handled(returnValue);
        }
      } else {
        if (functions.unhandled || typeof functions.unhandled === 'function') {
          // execute function when event was not handled
          functions.unhandled();
        }
      }
    },

    /**
     * Finds all focusable elements within the given `$element`
     * @param {jQuery} $element - jQuery object to search within
     * @return {jQuery} $focusable - all focusable elements within `$element`
     */
    findFocusable($element) {
      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {
          return false;
        } //only have visible elements and those that have a tabindex greater or equal 0
        return true;
      });
    },

    /**
     * Returns the component name name
     * @param {Object} component - Foundation component, e.g. Slider or Reveal
     * @return String componentName
     */

    register(componentName, cmds) {
      commands[componentName] = cmds;
    }
  };

  /*
   * Constants for easier comparing.
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   */
  function getKeyCodes(kcs) {
    var k = {};
    for (var kc in kcs) k[kcs[kc]] = kcs[kc];
    return k;
  }

  Foundation.Keyboard = Keyboard;
}(jQuery);
;'use strict';

!function ($) {

  // Default set of media queries
  const defaultQueries = {
    'default': 'only screen',
    landscape: 'only screen and (orientation: landscape)',
    portrait: 'only screen and (orientation: portrait)',
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };

  var MediaQuery = {
    queries: [],

    current: '',

    /**
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function
     * @private
     */
    _init() {
      var self = this;
      var extractedStyles = $('.foundation-mq').css('font-family');
      var namedQueries;

      namedQueries = parseStyleToObject(extractedStyles);

      for (var key in namedQueries) {
        if (namedQueries.hasOwnProperty(key)) {
          self.queries.push({
            name: key,
            value: `only screen and (min-width: ${namedQueries[key]})`
          });
        }
      }

      this.current = this._getCurrentSize();

      this._watcher();
    },

    /**
     * Checks if the screen is at least as wide as a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
     */
    atLeast(size) {
      var query = this.get(size);

      if (query) {
        return window.matchMedia(query).matches;
      }

      return false;
    },

    /**
     * Gets the media query of a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to get.
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
     */
    get(size) {
      for (var i in this.queries) {
        if (this.queries.hasOwnProperty(i)) {
          var query = this.queries[i];
          if (size === query.name) return query.value;
        }
      }

      return null;
    },

    /**
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function
     * @private
     * @returns {String} Name of the current breakpoint.
     */
    _getCurrentSize() {
      var matched;

      for (var i = 0; i < this.queries.length; i++) {
        var query = this.queries[i];

        if (window.matchMedia(query.value).matches) {
          matched = query;
        }
      }

      if (typeof matched === 'object') {
        return matched.name;
      } else {
        return matched;
      }
    },

    /**
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
     * @function
     * @private
     */
    _watcher() {
      $(window).on('resize.zf.mediaquery', () => {
        var newSize = this._getCurrentSize(),
            currentSize = this.current;

        if (newSize !== currentSize) {
          // Change the current media query
          this.current = newSize;

          // Broadcast the media query change on the window
          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
        }
      });
    }
  };

  Foundation.MediaQuery = MediaQuery;

  // matchMedia() polyfill - Test a CSS media type/query in JS.
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
  window.matchMedia || (window.matchMedia = function () {
    'use strict';

    // For browsers that support matchMedium api such as IE 9 and webkit

    var styleMedia = window.styleMedia || window.media;

    // For those that don't support matchMedium
    if (!styleMedia) {
      var style = document.createElement('style'),
          script = document.getElementsByTagName('script')[0],
          info = null;

      style.type = 'text/css';
      style.id = 'matchmediajs-test';

      script && script.parentNode && script.parentNode.insertBefore(style, script);

      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

      styleMedia = {
        matchMedium(media) {
          var text = `@media ${media}{ #matchmediajs-test { width: 1px; } }`;

          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
          if (style.styleSheet) {
            style.styleSheet.cssText = text;
          } else {
            style.textContent = text;
          }

          // Test if media query is true or false
          return info.width === '1px';
        }
      };
    }

    return function (media) {
      return {
        matches: styleMedia.matchMedium(media || 'all'),
        media: media || 'all'
      };
    };
  }());

  // Thank you: https://github.com/sindresorhus/query-string
  function parseStyleToObject(str) {
    var styleObject = {};

    if (typeof str !== 'string') {
      return styleObject;
    }

    str = str.trim().slice(1, -1); // browsers re-quote string style values

    if (!str) {
      return styleObject;
    }

    styleObject = str.split('&').reduce(function (ret, param) {
      var parts = param.replace(/\+/g, ' ').split('=');
      var key = parts[0];
      var val = parts[1];
      key = decodeURIComponent(key);

      // missing `=` should be `null`:
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
      val = val === undefined ? null : decodeURIComponent(val);

      if (!ret.hasOwnProperty(key)) {
        ret[key] = val;
      } else if (Array.isArray(ret[key])) {
        ret[key].push(val);
      } else {
        ret[key] = [ret[key], val];
      }
      return ret;
    }, {});

    return styleObject;
  }

  Foundation.MediaQuery = MediaQuery;
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Motion module.
   * @module foundation.motion
   */

  const initClasses = ['mui-enter', 'mui-leave'];
  const activeClasses = ['mui-enter-active', 'mui-leave-active'];

  const Motion = {
    animateIn: function (element, animation, cb) {
      animate(true, element, animation, cb);
    },

    animateOut: function (element, animation, cb) {
      animate(false, element, animation, cb);
    }
  };

  function Move(duration, elem, fn) {
    var anim,
        prog,
        start = null;
    // console.log('called');

    function move(ts) {
      if (!start) start = window.performance.now();
      // console.log(start, ts);
      prog = ts - start;
      fn.apply(elem);

      if (prog < duration) {
        anim = window.requestAnimationFrame(move, elem);
      } else {
        window.cancelAnimationFrame(anim);
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      }
    }
    anim = window.requestAnimationFrame(move);
  }

  /**
   * Animates an element in or out using a CSS transition class.
   * @function
   * @private
   * @param {Boolean} isIn - Defines if the animation is in or out.
   * @param {Object} element - jQuery or HTML object to animate.
   * @param {String} animation - CSS class to use.
   * @param {Function} cb - Callback to run when animation is finished.
   */
  function animate(isIn, element, animation, cb) {
    element = $(element).eq(0);

    if (!element.length) return;

    var initClass = isIn ? initClasses[0] : initClasses[1];
    var activeClass = isIn ? activeClasses[0] : activeClasses[1];

    // Set up the animation
    reset();

    element.addClass(animation).css('transition', 'none');

    requestAnimationFrame(() => {
      element.addClass(initClass);
      if (isIn) element.show();
    });

    // Start the animation
    requestAnimationFrame(() => {
      element[0].offsetWidth;
      element.css('transition', '').addClass(activeClass);
    });

    // Clean up the animation when it finishes
    element.one(Foundation.transitionend(element), finish);

    // Hides the element (for out animations), resets the element, and runs a callback
    function finish() {
      if (!isIn) element.hide();
      reset();
      if (cb) cb.apply(element);
    }

    // Resets transitions and removes motion-specific classes
    function reset() {
      element[0].style.transitionDuration = 0;
      element.removeClass(`${initClass} ${activeClass} ${animation}`);
    }
  }

  Foundation.Move = Move;
  Foundation.Motion = Motion;
}(jQuery);
;'use strict';

!function ($) {

  const Nest = {
    Feather(menu, type = 'zf') {
      menu.attr('role', 'menubar');

      var items = menu.find('li').attr({ 'role': 'menuitem' }),
          subMenuClass = `is-${type}-submenu`,
          subItemClass = `${subMenuClass}-item`,
          hasSubClass = `is-${type}-submenu-parent`;

      menu.find('a:first').attr('tabindex', 0);

      items.each(function () {
        var $item = $(this),
            $sub = $item.children('ul');

        if ($sub.length) {
          $item.addClass(hasSubClass).attr({
            'aria-haspopup': true,
            'aria-expanded': false,
            'aria-label': $item.children('a:first').text()
          });

          $sub.addClass(`submenu ${subMenuClass}`).attr({
            'data-submenu': '',
            'aria-hidden': true,
            'role': 'menu'
          });
        }

        if ($item.parent('[data-submenu]').length) {
          $item.addClass(`is-submenu-item ${subItemClass}`);
        }
      });

      return;
    },

    Burn(menu, type) {
      var items = menu.find('li').removeAttr('tabindex'),
          subMenuClass = `is-${type}-submenu`,
          subItemClass = `${subMenuClass}-item`,
          hasSubClass = `is-${type}-submenu-parent`;

      menu.find('>li, .menu, .menu > li').removeClass(`${subMenuClass} ${subItemClass} ${hasSubClass} is-submenu-item submenu is-active`).removeAttr('data-submenu').css('display', '');

      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')
      //           .removeAttr('data-submenu'));
      // items.each(function(){
      //   var $item = $(this),
      //       $sub = $item.children('ul');
      //   if($item.parent('[data-submenu]').length){
      //     $item.removeClass('is-submenu-item ' + subItemClass);
      //   }
      //   if($sub.length){
      //     $item.removeClass('has-submenu');
      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');
      //   }
      // });
    }
  };

  Foundation.Nest = Nest;
}(jQuery);
;'use strict';

!function ($) {

  function Timer(elem, options, cb) {
    var _this = this,
        duration = options.duration,
        //options is an object for easily adding features later.
    nameSpace = Object.keys(elem.data())[0] || 'timer',
        remain = -1,
        start,
        timer;

    this.isPaused = false;

    this.restart = function () {
      remain = -1;
      clearTimeout(timer);
      this.start();
    };

    this.start = function () {
      this.isPaused = false;
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      remain = remain <= 0 ? duration : remain;
      elem.data('paused', false);
      start = Date.now();
      timer = setTimeout(function () {
        if (options.infinite) {
          _this.restart(); //rerun the timer.
        }
        if (cb && typeof cb === 'function') {
          cb();
        }
      }, remain);
      elem.trigger(`timerstart.zf.${nameSpace}`);
    };

    this.pause = function () {
      this.isPaused = true;
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      elem.data('paused', true);
      var end = Date.now();
      remain = remain - (end - start);
      elem.trigger(`timerpaused.zf.${nameSpace}`);
    };
  }

  /**
   * Runs a callback function when images are fully loaded.
   * @param {Object} images - Image(s) to check if loaded.
   * @param {Func} callback - Function to execute when image is fully loaded.
   */
  function onImagesLoaded(images, callback) {
    var self = this,
        unloaded = images.length;

    if (unloaded === 0) {
      callback();
    }

    images.each(function () {
      if (this.complete) {
        singleImageLoaded();
      } else if (typeof this.naturalWidth !== 'undefined' && this.naturalWidth > 0) {
        singleImageLoaded();
      } else {
        $(this).one('load', function () {
          singleImageLoaded();
        });
      }
    });

    function singleImageLoaded() {
      unloaded--;
      if (unloaded === 0) {
        callback();
      }
    }
  }

  Foundation.Timer = Timer;
  Foundation.onImagesLoaded = onImagesLoaded;
}(jQuery);
;//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************
(function ($) {

	$.spotSwipe = {
		version: '1.0.0',
		enabled: 'ontouchstart' in document.documentElement,
		preventDefault: false,
		moveThreshold: 75,
		timeThreshold: 200
	};

	var startPosX,
	    startPosY,
	    startTime,
	    elapsedTime,
	    isMoving = false;

	function onTouchEnd() {
		//  alert(this);
		this.removeEventListener('touchmove', onTouchMove);
		this.removeEventListener('touchend', onTouchEnd);
		isMoving = false;
	}

	function onTouchMove(e) {
		if ($.spotSwipe.preventDefault) {
			e.preventDefault();
		}
		if (isMoving) {
			var x = e.touches[0].pageX;
			var y = e.touches[0].pageY;
			var dx = startPosX - x;
			var dy = startPosY - y;
			var dir;
			elapsedTime = new Date().getTime() - startTime;
			if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
				dir = dx > 0 ? 'left' : 'right';
			}
			// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
			//   dir = dy > 0 ? 'down' : 'up';
			// }
			if (dir) {
				e.preventDefault();
				onTouchEnd.call(this);
				$(this).trigger('swipe', dir).trigger(`swipe${dir}`);
			}
		}
	}

	function onTouchStart(e) {
		if (e.touches.length == 1) {
			startPosX = e.touches[0].pageX;
			startPosY = e.touches[0].pageY;
			isMoving = true;
			startTime = new Date().getTime();
			this.addEventListener('touchmove', onTouchMove, false);
			this.addEventListener('touchend', onTouchEnd, false);
		}
	}

	function init() {
		this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
	}

	function teardown() {
		this.removeEventListener('touchstart', onTouchStart);
	}

	$.event.special.swipe = { setup: init };

	$.each(['left', 'up', 'down', 'right'], function () {
		$.event.special[`swipe${this}`] = { setup: function () {
				$(this).on('swipe', $.noop);
			} };
	});
})(jQuery);
/****************************************************
 * Method for adding psuedo drag events to elements *
 ***************************************************/
!function ($) {
	$.fn.addTouch = function () {
		this.each(function (i, el) {
			$(el).bind('touchstart touchmove touchend touchcancel', function () {
				//we pass the original event object because the jQuery event
				//object is normalized to w3c specs and does not provide the TouchList
				handleTouch(event);
			});
		});

		var handleTouch = function (event) {
			var touches = event.changedTouches,
			    first = touches[0],
			    eventTypes = {
				touchstart: 'mousedown',
				touchmove: 'mousemove',
				touchend: 'mouseup'
			},
			    type = eventTypes[event.type],
			    simulatedEvent;

			if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
				simulatedEvent = new window.MouseEvent(type, {
					'bubbles': true,
					'cancelable': true,
					'screenX': first.screenX,
					'screenY': first.screenY,
					'clientX': first.clientX,
					'clientY': first.clientY
				});
			} else {
				simulatedEvent = document.createEvent('MouseEvent');
				simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
			}
			first.target.dispatchEvent(simulatedEvent);
		};
	};
}(jQuery);

//**********************************
//**From the jQuery Mobile Library**
//**need to recreate functionality**
//**and try to improve if possible**
//**********************************

/* Removing the jQuery function ****
************************************

(function( $, window, undefined ) {

	var $document = $( document ),
		// supportTouch = $.mobile.support.touch,
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";

	// setup new event shortcuts
	$.each( ( "touchstart touchmove touchend " +
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {

		$.fn[ name ] = function( fn ) {
			return fn ? this.bind( name, fn ) : this.trigger( name );
		};

		// jQuery < 1.8
		if ( $.attrFn ) {
			$.attrFn[ name ] = true;
		}
	});

	function triggerCustomEvent( obj, eventType, event, bubble ) {
		var originalType = event.type;
		event.type = eventType;
		if ( bubble ) {
			$.event.trigger( event, undefined, obj );
		} else {
			$.event.dispatch.call( obj, event );
		}
		event.type = originalType;
	}

	// also handles taphold

	// Also handles swipeleft, swiperight
	$.event.special.swipe = {

		// More than this horizontal displacement, and we will suppress scrolling.
		scrollSupressionThreshold: 30,

		// More time than this, and it isn't a swipe.
		durationThreshold: 1000,

		// Swipe horizontal displacement must be more than this.
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		// Swipe vertical displacement must be less than this.
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		getLocation: function ( event ) {
			var winPageX = window.pageXOffset,
				winPageY = window.pageYOffset,
				x = event.clientX,
				y = event.clientY;

			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {

				// iOS4 clientX/clientY have the value that should have been
				// in pageX/pageY. While pageX/page/ have the value 0
				x = x - winPageX;
				y = y - winPageY;
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {

				// Some Android browsers have totally bogus values for clientX/Y
				// when scrolling/zooming a page. Detectable since clientX/clientY
				// should never be smaller than pageX/pageY minus page scroll
				x = event.pageX - winPageX;
				y = event.pageY - winPageY;
			}

			return {
				x: x,
				y: y
			};
		},

		start: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ],
						origin: $( event.target )
					};
		},

		stop: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ]
					};
		},

		handleSwipe: function( start, stop, thisObject, origTarget ) {
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";

				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;
			}
			return false;

		},

		// This serves as a flag to ensure that at most one swipe event event is
		// in work at any given time
		eventInProgress: false,

		setup: function() {
			var events,
				thisObject = this,
				$this = $( thisObject ),
				context = {};

			// Retrieve the events data for this element and add the swipe context
			events = $.data( this, "mobile-events" );
			if ( !events ) {
				events = { length: 0 };
				$.data( this, "mobile-events", events );
			}
			events.length++;
			events.swipe = context;

			context.start = function( event ) {

				// Bail if we're already working on a swipe event
				if ( $.event.special.swipe.eventInProgress ) {
					return;
				}
				$.event.special.swipe.eventInProgress = true;

				var stop,
					start = $.event.special.swipe.start( event ),
					origTarget = event.target,
					emitted = false;

				context.move = function( event ) {
					if ( !start || event.isDefaultPrevented() ) {
						return;
					}

					stop = $.event.special.swipe.stop( event );
					if ( !emitted ) {
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );
						if ( emitted ) {

							// Reset the context to make way for the next swipe event
							$.event.special.swipe.eventInProgress = false;
						}
					}
					// prevent scrolling
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
						event.preventDefault();
					}
				};

				context.stop = function() {
						emitted = true;

						// Reset the context to make way for the next swipe event
						$.event.special.swipe.eventInProgress = false;
						$document.off( touchMoveEvent, context.move );
						context.move = null;
				};

				$document.on( touchMoveEvent, context.move )
					.one( touchStopEvent, context.stop );
			};
			$this.on( touchStartEvent, context.start );
		},

		teardown: function() {
			var events, context;

			events = $.data( this, "mobile-events" );
			if ( events ) {
				context = events.swipe;
				delete events.swipe;
				events.length--;
				if ( events.length === 0 ) {
					$.removeData( this, "mobile-events" );
				}
			}

			if ( context ) {
				if ( context.start ) {
					$( this ).off( touchStartEvent, context.start );
				}
				if ( context.move ) {
					$document.off( touchMoveEvent, context.move );
				}
				if ( context.stop ) {
					$document.off( touchStopEvent, context.stop );
				}
			}
		}
	};
	$.each({
		swipeleft: "swipe.left",
		swiperight: "swipe.right"
	}, function( event, sourceEvent ) {

		$.event.special[ event ] = {
			setup: function() {
				$( this ).bind( sourceEvent, $.noop );
			},
			teardown: function() {
				$( this ).unbind( sourceEvent );
			}
		};
	});
})( jQuery, this );
*/
;'use strict';

!function ($) {

  const MutationObserver = function () {
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
    for (var i = 0; i < prefixes.length; i++) {
      if (`${prefixes[i]}MutationObserver` in window) {
        return window[`${prefixes[i]}MutationObserver`];
      }
    }
    return false;
  }();

  const triggers = (el, type) => {
    el.data(type).split(' ').forEach(id => {
      $(`#${id}`)[type === 'close' ? 'trigger' : 'triggerHandler'](`${type}.zf.trigger`, [el]);
    });
  };
  // Elements with [data-open] will reveal a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-open]', function () {
    triggers($(this), 'open');
  });

  // Elements with [data-close] will close a plugin that supports it when clicked.
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
  $(document).on('click.zf.trigger', '[data-close]', function () {
    let id = $(this).data('close');
    if (id) {
      triggers($(this), 'close');
    } else {
      $(this).trigger('close.zf.trigger');
    }
  });

  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-toggle]', function () {
    triggers($(this), 'toggle');
  });

  // Elements with [data-closable] will respond to close.zf.trigger events.
  $(document).on('close.zf.trigger', '[data-closable]', function (e) {
    e.stopPropagation();
    let animation = $(this).data('closable');

    if (animation !== '') {
      Foundation.Motion.animateOut($(this), animation, function () {
        $(this).trigger('closed.zf');
      });
    } else {
      $(this).fadeOut().trigger('closed.zf');
    }
  });

  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {
    let id = $(this).data('toggle-focus');
    $(`#${id}`).triggerHandler('toggle.zf.trigger', [$(this)]);
  });

  /**
  * Fires once after all other scripts have loaded
  * @function
  * @private
  */
  $(window).on('load', () => {
    checkListeners();
  });

  function checkListeners() {
    eventsListener();
    resizeListener();
    scrollListener();
    closemeListener();
  }

  //******** only fires this function once on load, if there's something to watch ********
  function closemeListener(pluginName) {
    var yetiBoxes = $('[data-yeti-box]'),
        plugNames = ['dropdown', 'tooltip', 'reveal'];

    if (pluginName) {
      if (typeof pluginName === 'string') {
        plugNames.push(pluginName);
      } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
        plugNames.concat(pluginName);
      } else {
        console.error('Plugin names must be strings');
      }
    }
    if (yetiBoxes.length) {
      let listeners = plugNames.map(name => {
        return `closeme.zf.${name}`;
      }).join(' ');

      $(window).off(listeners).on(listeners, function (e, pluginId) {
        let plugin = e.namespace.split('.')[0];
        let plugins = $(`[data-${plugin}]`).not(`[data-yeti-box="${pluginId}"]`);

        plugins.each(function () {
          let _this = $(this);

          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      });
    }
  }

  function resizeListener(debounce) {
    let timer,
        $nodes = $('[data-resize]');
    if ($nodes.length) {
      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('resizeme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a resize event
          $nodes.attr('data-events', "resize");
        }, debounce || 10); //default time to emit resize event
      });
    }
  }

  function scrollListener(debounce) {
    let timer,
        $nodes = $('[data-scroll]');
    if ($nodes.length) {
      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('scrollme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a scroll event
          $nodes.attr('data-events', "scroll");
        }, debounce || 10); //default time to emit scroll event
      });
    }
  }

  function eventsListener() {
    if (!MutationObserver) {
      return false;
    }
    let nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');

    //element callback
    var listeningElementsMutation = function (mutationRecordsList) {
      var $target = $(mutationRecordsList[0].target);
      //trigger the event handler for the element depending on type
      switch ($target.attr("data-events")) {

        case "resize":
          $target.triggerHandler('resizeme.zf.trigger', [$target]);
          break;

        case "scroll":
          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
          break;

        // case "mutate" :
        // console.log('mutate', $target);
        // $target.triggerHandler('mutate.zf.trigger');
        //
        // //make sure we don't get stuck in an infinite loop from sloppy codeing
        // if ($target.index('[data-mutate]') == $("[data-mutate]").length-1) {
        //   domMutationObserver();
        // }
        // break;

        default:
          return false;
        //nothing
      }
    };

    if (nodes.length) {
      //for each element that needs to listen for resizing, scrolling, (or coming soon mutation) add a single observer
      for (var i = 0; i <= nodes.length - 1; i++) {
        let elementObserver = new MutationObserver(listeningElementsMutation);
        elementObserver.observe(nodes[i], { attributes: true, childList: false, characterData: false, subtree: false, attributeFilter: ["data-events"] });
      }
    }
  }

  // ------------------------------------

  // [PH]
  // Foundation.CheckWatchers = checkWatchers;
  Foundation.IHearYou = checkListeners;
  // Foundation.ISeeYou = scrollListener;
  // Foundation.IFeelYou = closemeListener;
}(jQuery);

// function domMutationObserver(debounce) {
//   // !!! This is coming soon and needs more work; not active  !!! //
//   var timer,
//   nodes = document.querySelectorAll('[data-mutate]');
//   //
//   if (nodes.length) {
//     // var MutationObserver = (function () {
//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
//     //   for (var i=0; i < prefixes.length; i++) {
//     //     if (prefixes[i] + 'MutationObserver' in window) {
//     //       return window[prefixes[i] + 'MutationObserver'];
//     //     }
//     //   }
//     //   return false;
//     // }());
//
//
//     //for the body, we need to listen for all changes effecting the style and class attributes
//     var bodyObserver = new MutationObserver(bodyMutation);
//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:["style", "class"]});
//
//
//     //body callback
//     function bodyMutation(mutate) {
//       //trigger all listening elements and signal a mutation event
//       if (timer) { clearTimeout(timer); }
//
//       timer = setTimeout(function() {
//         bodyObserver.disconnect();
//         $('[data-mutate]').attr('data-events',"mutate");
//       }, debounce || 150);
//     }
//   }
// }
;window.whatInput = function () {

  'use strict';

  /*
    ---------------
    variables
    ---------------
  */

  // array of actively pressed keys

  var activeKeys = [];

  // cache document.body
  var body;

  // boolean: true if touch buffer timer is running
  var buffer = false;

  // the last used input type
  var currentInput = null;

  // `input` types that don't accept text
  var nonTypingInputs = ['button', 'checkbox', 'file', 'image', 'radio', 'reset', 'submit'];

  // detect version of mouse wheel event to use
  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
  var mouseWheel = detectWheel();

  // list of modifier keys commonly used with the mouse and
  // can be safely ignored to prevent false keyboard detection
  var ignoreMap = [16, // shift
  17, // control
  18, // alt
  91, // Windows key / left Apple cmd
  93 // Windows menu / right Apple cmd
  ];

  // mapping of events to input types
  var inputMap = {
    'keydown': 'keyboard',
    'keyup': 'keyboard',
    'mousedown': 'mouse',
    'mousemove': 'mouse',
    'MSPointerDown': 'pointer',
    'MSPointerMove': 'pointer',
    'pointerdown': 'pointer',
    'pointermove': 'pointer',
    'touchstart': 'touch'
  };

  // add correct mouse wheel event mapping to `inputMap`
  inputMap[detectWheel()] = 'mouse';

  // array of all used input types
  var inputTypes = [];

  // mapping of key codes to a common name
  var keyMap = {
    9: 'tab',
    13: 'enter',
    16: 'shift',
    27: 'esc',
    32: 'space',
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down'
  };

  // map of IE 10 pointer events
  var pointerMap = {
    2: 'touch',
    3: 'touch', // treat pen like touch
    4: 'mouse'
  };

  // touch buffer timer
  var timer;

  /*
    ---------------
    functions
    ---------------
  */

  // allows events that are also triggered to be filtered out for `touchstart`
  function eventBuffer() {
    clearTimer();
    setInput(event);

    buffer = true;
    timer = window.setTimeout(function () {
      buffer = false;
    }, 650);
  }

  function bufferedEvent(event) {
    if (!buffer) setInput(event);
  }

  function unBufferedEvent(event) {
    clearTimer();
    setInput(event);
  }

  function clearTimer() {
    window.clearTimeout(timer);
  }

  function setInput(event) {
    var eventKey = key(event);
    var value = inputMap[event.type];
    if (value === 'pointer') value = pointerType(event);

    // don't do anything if the value matches the input type already set
    if (currentInput !== value) {
      var eventTarget = target(event);
      var eventTargetNode = eventTarget.nodeName.toLowerCase();
      var eventTargetType = eventTargetNode === 'input' ? eventTarget.getAttribute('type') : null;

      if ( // only if the user flag to allow typing in form fields isn't set
      !body.hasAttribute('data-whatinput-formtyping') &&

      // only if currentInput has a value
      currentInput &&

      // only if the input is `keyboard`
      value === 'keyboard' &&

      // not if the key is `TAB`
      keyMap[eventKey] !== 'tab' && (

      // only if the target is a form input that accepts text
      eventTargetNode === 'textarea' || eventTargetNode === 'select' || eventTargetNode === 'input' && nonTypingInputs.indexOf(eventTargetType) < 0) ||
      // ignore modifier keys
      ignoreMap.indexOf(eventKey) > -1) {
        // ignore keyboard typing
      } else {
        switchInput(value);
      }
    }

    if (value === 'keyboard') logKeys(eventKey);
  }

  function switchInput(string) {
    currentInput = string;
    body.setAttribute('data-whatinput', currentInput);

    if (inputTypes.indexOf(currentInput) === -1) inputTypes.push(currentInput);
  }

  function key(event) {
    return event.keyCode ? event.keyCode : event.which;
  }

  function target(event) {
    return event.target || event.srcElement;
  }

  function pointerType(event) {
    if (typeof event.pointerType === 'number') {
      return pointerMap[event.pointerType];
    } else {
      return event.pointerType === 'pen' ? 'touch' : event.pointerType; // treat pen like touch
    }
  }

  // keyboard logging
  function logKeys(eventKey) {
    if (activeKeys.indexOf(keyMap[eventKey]) === -1 && keyMap[eventKey]) activeKeys.push(keyMap[eventKey]);
  }

  function unLogKeys(event) {
    var eventKey = key(event);
    var arrayPos = activeKeys.indexOf(keyMap[eventKey]);

    if (arrayPos !== -1) activeKeys.splice(arrayPos, 1);
  }

  function bindEvents() {
    body = document.body;

    // pointer events (mouse, pen, touch)
    if (window.PointerEvent) {
      body.addEventListener('pointerdown', bufferedEvent);
      body.addEventListener('pointermove', bufferedEvent);
    } else if (window.MSPointerEvent) {
      body.addEventListener('MSPointerDown', bufferedEvent);
      body.addEventListener('MSPointerMove', bufferedEvent);
    } else {

      // mouse events
      body.addEventListener('mousedown', bufferedEvent);
      body.addEventListener('mousemove', bufferedEvent);

      // touch events
      if ('ontouchstart' in window) {
        body.addEventListener('touchstart', eventBuffer);
      }
    }

    // mouse wheel
    body.addEventListener(mouseWheel, bufferedEvent);

    // keyboard events
    body.addEventListener('keydown', unBufferedEvent);
    body.addEventListener('keyup', unBufferedEvent);
    document.addEventListener('keyup', unLogKeys);
  }

  /*
    ---------------
    utilities
    ---------------
  */

  // detect version of mouse wheel event to use
  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel
  function detectWheel() {
    return mouseWheel = 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support "wheel"

    document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least "mousewheel"
    'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox
  }

  /*
    ---------------
    init
     don't start script unless browser cuts the mustard,
    also passes if polyfills are used
    ---------------
  */

  if ('addEventListener' in window && Array.prototype.indexOf) {

    // if the dom is already ready already (script was placed at bottom of <body>)
    if (document.body) {
      bindEvents();

      // otherwise wait for the dom to load (script was placed in the <head>)
    } else {
      document.addEventListener('DOMContentLoaded', bindEvents);
    }
  }

  /*
    ---------------
    api
    ---------------
  */

  return {

    // returns string: the current input type
    ask: function () {
      return currentInput;
    },

    // returns array: currently pressed keys
    keys: function () {
      return activeKeys;
    },

    // returns array: all the detected input types
    types: function () {
      return inputTypes;
    },

    // accepts string: manually set the input type
    set: switchInput
  };
}();
;'use strict';

!function ($) {

  /**
   * Accordion module.
   * @module foundation.accordion
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   */

  class Accordion {
    /**
     * Creates a new instance of an accordion.
     * @class
     * @fires Accordion#init
     * @param {jQuery} element - jQuery object to make into an accordion.
     * @param {Object} options - a plain object with settings to override the default options.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Accordion');
      Foundation.Keyboard.register('Accordion', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_DOWN': 'next',
        'ARROW_UP': 'previous'
      });
    }

    /**
     * Initializes the accordion by animating the preset active pane(s).
     * @private
     */
    _init() {
      this.$element.attr('role', 'tablist');
      this.$tabs = this.$element.children('li, [data-accordion-item]');

      this.$tabs.each(function (idx, el) {
        var $el = $(el),
            $content = $el.children('[data-tab-content]'),
            id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),
            linkId = el.id || `${id}-label`;

        $el.find('a:first').attr({
          'aria-controls': id,
          'role': 'tab',
          'id': linkId,
          'aria-expanded': false,
          'aria-selected': false
        });

        $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });
      });
      var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
      if ($initActive.length) {
        this.down($initActive, true);
      }
      this._events();
    }

    /**
     * Adds event handlers for items within the accordion.
     * @private
     */
    _events() {
      var _this = this;

      this.$tabs.each(function () {
        var $elem = $(this);
        var $tabContent = $elem.children('[data-tab-content]');
        if ($tabContent.length) {
          $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
            e.preventDefault();
            _this.toggle($tabContent);
          }).on('keydown.zf.accordion', function (e) {
            Foundation.Keyboard.handleKey(e, 'Accordion', {
              toggle: function () {
                _this.toggle($tabContent);
              },
              next: function () {
                var $a = $elem.next().find('a').focus();
                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              previous: function () {
                var $a = $elem.prev().find('a').focus();
                if (!_this.options.multiExpand) {
                  $a.trigger('click.zf.accordion');
                }
              },
              handled: function () {
                e.preventDefault();
                e.stopPropagation();
              }
            });
          });
        }
      });
    }

    /**
     * Toggles the selected content pane's open/close state.
     * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
     * @function
     */
    toggle($target) {
      if ($target.parent().hasClass('is-active')) {
        this.up($target);
      } else {
        this.down($target);
      }
    }

    /**
     * Opens the accordion tab defined by `$target`.
     * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
     * @param {Boolean} firstTime - flag to determine if reflow should happen.
     * @fires Accordion#down
     * @function
     */
    down($target, firstTime) {
      $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

      if (!this.options.multiExpand && !firstTime) {
        var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');
        if ($currentActive.length) {
          this.up($currentActive.not($target));
        }
      }

      $target.slideDown(this.options.slideSpeed, () => {
        /**
         * Fires when the tab is done opening.
         * @event Accordion#down
         */
        this.$element.trigger('down.zf.accordion', [$target]);
      });

      $(`#${$target.attr('aria-labelledby')}`).attr({
        'aria-expanded': true,
        'aria-selected': true
      });
    }

    /**
     * Closes the tab defined by `$target`.
     * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
     * @fires Accordion#up
     * @function
     */
    up($target) {
      var $aunts = $target.parent().siblings(),
          _this = this;

      if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
        return;
      }

      // Foundation.Move(this.options.slideSpeed, $target, function(){
      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the tab is done collapsing up.
         * @event Accordion#up
         */
        _this.$element.trigger('up.zf.accordion', [$target]);
      });
      // });

      $target.attr('aria-hidden', true).parent().removeClass('is-active');

      $(`#${$target.attr('aria-labelledby')}`).attr({
        'aria-expanded': false,
        'aria-selected': false
      });
    }

    /**
     * Destroys an instance of an accordion.
     * @fires Accordion#destroyed
     * @function
     */
    destroy() {
      this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
      this.$element.find('a').off('.zf.accordion');

      Foundation.unregisterPlugin(this);
    }
  }

  Accordion.defaults = {
    /**
     * Amount of time to animate the opening of an accordion pane.
     * @option
     * @example 250
     */
    slideSpeed: 250,
    /**
     * Allow the accordion to have multiple open panes.
     * @option
     * @example false
     */
    multiExpand: false,
    /**
     * Allow the accordion to close all panes.
     * @option
     * @example false
     */
    allowAllClosed: false
  };

  // Window exports
  Foundation.plugin(Accordion, 'Accordion');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * AccordionMenu module.
   * @module foundation.accordionMenu
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   * @requires foundation.util.nest
   */

  class AccordionMenu {
    /**
     * Creates a new instance of an accordion menu.
     * @class
     * @fires AccordionMenu#init
     * @param {jQuery} element - jQuery object to make into an accordion menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'accordion');

      this._init();

      Foundation.registerPlugin(this, 'AccordionMenu');
      Foundation.Keyboard.register('AccordionMenu', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_RIGHT': 'open',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'close',
        'ESCAPE': 'closeAll'
      });
    }

    /**
     * Initializes the accordion menu by hiding all nested menus.
     * @private
     */
    _init() {
      this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
      this.$element.attr({
        'role': 'menu',
        'aria-multiselectable': this.options.multiOpen
      });

      this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
      this.$menuLinks.each(function () {
        var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),
            $elem = $(this),
            $sub = $elem.children('[data-submenu]'),
            subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),
            isActive = $sub.hasClass('is-active');
        $elem.attr({
          'aria-controls': subId,
          'aria-expanded': isActive,
          'role': 'menuitem',
          'id': linkId
        });
        $sub.attr({
          'aria-labelledby': linkId,
          'aria-hidden': !isActive,
          'role': 'menu',
          'id': subId
        });
      });
      var initPanes = this.$element.find('.is-active');
      if (initPanes.length) {
        var _this = this;
        initPanes.each(function () {
          _this.down($(this));
        });
      }
      this._events();
    }

    /**
     * Adds event handlers for items within the menu.
     * @private
     */
    _events() {
      var _this = this;

      this.$element.find('li').each(function () {
        var $submenu = $(this).children('[data-submenu]');

        if ($submenu.length) {
          $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
            e.preventDefault();

            _this.toggle($submenu);
          });
        }
      }).on('keydown.zf.accordionmenu', function (e) {
        var $element = $(this),
            $elements = $element.parent('ul').children('li'),
            $prevElement,
            $nextElement,
            $target = $element.children('[data-submenu]');

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

            if ($(this).children('[data-submenu]:visible').length) {
              // has open sub menu
              $nextElement = $element.find('li:first-child').find('a').first();
            }
            if ($(this).is(':first-child')) {
              // is first element of sub menu
              $prevElement = $element.parents('li').first().find('a').first();
            } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
              // if previous element has open sub menu
              $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
            }
            if ($(this).is(':last-child')) {
              // is last element of sub menu
              $nextElement = $element.parents('li').first().next('li').find('a').first();
            }

            return;
          }
        });

        Foundation.Keyboard.handleKey(e, 'AccordionMenu', {
          open: function () {
            if ($target.is(':hidden')) {
              _this.down($target);
              $target.find('li').first().find('a').first().focus();
            }
          },
          close: function () {
            if ($target.length && !$target.is(':hidden')) {
              // close active sub of this item
              _this.up($target);
            } else if ($element.parent('[data-submenu]').length) {
              // close currently open sub
              _this.up($element.parent('[data-submenu]'));
              $element.parents('li').first().find('a').first().focus();
            }
          },
          up: function () {
            $prevElement.focus();
            return true;
          },
          down: function () {
            $nextElement.focus();
            return true;
          },
          toggle: function () {
            if ($element.children('[data-submenu]').length) {
              _this.toggle($element.children('[data-submenu]'));
            }
          },
          closeAll: function () {
            _this.hideAll();
          },
          handled: function (preventDefault) {
            if (preventDefault) {
              e.preventDefault();
            }
            e.stopImmediatePropagation();
          }
        });
      }); //.attr('tabindex', 0);
    }

    /**
     * Closes all panes of the menu.
     * @function
     */
    hideAll() {
      this.$element.find('[data-submenu]').slideUp(this.options.slideSpeed);
    }

    /**
     * Toggles the open/close state of a submenu.
     * @function
     * @param {jQuery} $target - the submenu to toggle
     */
    toggle($target) {
      if (!$target.is(':animated')) {
        if (!$target.is(':hidden')) {
          this.up($target);
        } else {
          this.down($target);
        }
      }
    }

    /**
     * Opens the sub-menu defined by `$target`.
     * @param {jQuery} $target - Sub-menu to open.
     * @fires AccordionMenu#down
     */
    down($target) {
      var _this = this;

      if (!this.options.multiOpen) {
        this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
      }

      $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });

      //Foundation.Move(this.options.slideSpeed, $target, function() {
      $target.slideDown(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done opening.
         * @event AccordionMenu#down
         */
        _this.$element.trigger('down.zf.accordionMenu', [$target]);
      });
      //});
    }

    /**
     * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
     * @param {jQuery} $target - Sub-menu to close.
     * @fires AccordionMenu#up
     */
    up($target) {
      var _this = this;
      //Foundation.Move(this.options.slideSpeed, $target, function(){
      $target.slideUp(_this.options.slideSpeed, function () {
        /**
         * Fires when the menu is done collapsing up.
         * @event AccordionMenu#up
         */
        _this.$element.trigger('up.zf.accordionMenu', [$target]);
      });
      //});

      var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);

      $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
    }

    /**
     * Destroys an instance of accordion menu.
     * @fires AccordionMenu#destroyed
     */
    destroy() {
      this.$element.find('[data-submenu]').slideDown(0).css('display', '');
      this.$element.find('a').off('click.zf.accordionMenu');

      Foundation.Nest.Burn(this.$element, 'accordion');
      Foundation.unregisterPlugin(this);
    }
  }

  AccordionMenu.defaults = {
    /**
     * Amount of time to animate the opening of a submenu in ms.
     * @option
     * @example 250
     */
    slideSpeed: 250,
    /**
     * Allow the menu to have multiple open panes.
     * @option
     * @example true
     */
    multiOpen: true
  };

  // Window exports
  Foundation.plugin(AccordionMenu, 'AccordionMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Dropdown module.
   * @module foundation.dropdown
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   */

  class Dropdown {
    /**
     * Creates a new instance of a dropdown.
     * @class
     * @param {jQuery} element - jQuery object to make into a dropdown.
     *        Object should be of the dropdown panel, rather than its anchor.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Dropdown');
      Foundation.Keyboard.register('Dropdown', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close',
        'TAB': 'tab_forward',
        'SHIFT_TAB': 'tab_backward'
      });
    }

    /**
     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
     * @function
     * @private
     */
    _init() {
      var $id = this.$element.attr('id');

      this.$anchor = $(`[data-toggle="${$id}"]`).length ? $(`[data-toggle="${$id}"]`) : $(`[data-open="${$id}"]`);
      this.$anchor.attr({
        'aria-controls': $id,
        'data-is-focus': false,
        'data-yeti-box': $id,
        'aria-haspopup': true,
        'aria-expanded': false

      });

      this.options.positionClass = this.getPositionClass();
      this.counter = 4;
      this.usedPositions = [];
      this.$element.attr({
        'aria-hidden': 'true',
        'data-yeti-box': $id,
        'data-resize': $id,
        'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')
      });
      this._events();
    }

    /**
     * Helper function to determine current orientation of dropdown pane.
     * @function
     * @returns {String} position - string value of a position class.
     */
    getPositionClass() {
      var verticalPosition = this.$element[0].className.match(/(top|left|right|bottom)/g);
      verticalPosition = verticalPosition ? verticalPosition[0] : '';
      var horizontalPosition = /float-(\S+)/.exec(this.$anchor[0].className);
      horizontalPosition = horizontalPosition ? horizontalPosition[1] : '';
      var position = horizontalPosition ? horizontalPosition + ' ' + verticalPosition : verticalPosition;

      return position;
    }

    /**
     * Adjusts the dropdown panes orientation by adding/removing positioning classes.
     * @function
     * @private
     * @param {String} position - position class to remove.
     */
    _reposition(position) {
      this.usedPositions.push(position ? position : 'bottom');
      //default, try switching to opposite side
      if (!position && this.usedPositions.indexOf('top') < 0) {
        this.$element.addClass('top');
      } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {
        this.$element.removeClass(position);
      } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {
        this.$element.removeClass(position).addClass('right');
      } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {
        this.$element.removeClass(position).addClass('left');
      }

      //if default change didn't work, try bottom or left first
      else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.$element.addClass('left');
        } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {
          this.$element.removeClass(position).addClass('left');
        } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.$element.removeClass(position);
        } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {
          this.$element.removeClass(position);
        }
        //if nothing cleared, set to bottom
        else {
            this.$element.removeClass(position);
          }
      this.classChanged = true;
      this.counter--;
    }

    /**
     * Sets the position and orientation of the dropdown pane, checks for collisions.
     * Recursively calls itself if a collision is detected, with a new position class.
     * @function
     * @private
     */
    _setPosition() {
      if (this.$anchor.attr('aria-expanded') === 'false') {
        return false;
      }
      var position = this.getPositionClass(),
          $eleDims = Foundation.Box.GetDimensions(this.$element),
          $anchorDims = Foundation.Box.GetDimensions(this.$anchor),
          _this = this,
          direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',
          param = direction === 'top' ? 'height' : 'width',
          offset = param === 'height' ? this.options.vOffset : this.options.hOffset;

      if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element)) {
        this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({
          'width': $eleDims.windowDims.width - this.options.hOffset * 2,
          'height': 'auto'
        });
        this.classChanged = true;
        return false;
      }

      this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));

      while (!Foundation.Box.ImNotTouchingYou(this.$element, false, true) && this.counter) {
        this._reposition(position);
        this._setPosition();
      }
    }

    /**
     * Adds event listeners to the element utilizing the triggers utility library.
     * @function
     * @private
     */
    _events() {
      var _this = this;
      this.$element.on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'resizeme.zf.trigger': this._setPosition.bind(this)
      });

      if (this.options.hover) {
        this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
          if ($('body[data-whatinput="mouse"]').is('*')) {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.open();
              _this.$anchor.data('hover', true);
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.dropdown', function () {
          clearTimeout(_this.timeout);
          _this.timeout = setTimeout(function () {
            _this.close();
            _this.$anchor.data('hover', false);
          }, _this.options.hoverDelay);
        });
        if (this.options.hoverPane) {
          this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
            clearTimeout(_this.timeout);
          }).on('mouseleave.zf.dropdown', function () {
            clearTimeout(_this.timeout);
            _this.timeout = setTimeout(function () {
              _this.close();
              _this.$anchor.data('hover', false);
            }, _this.options.hoverDelay);
          });
        }
      }
      this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {

        var $target = $(this),
            visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);

        Foundation.Keyboard.handleKey(e, 'Dropdown', {
          tab_forward: function () {
            if (_this.$element.find(':focus').is(visibleFocusableElements.eq(-1))) {
              // left modal downwards, setting focus to first element
              if (_this.options.trapFocus) {
                // if focus shall be trapped
                visibleFocusableElements.eq(0).focus();
                e.preventDefault();
              } else {
                // if focus is not trapped, close dropdown on focus out
                _this.close();
              }
            }
          },
          tab_backward: function () {
            if (_this.$element.find(':focus').is(visibleFocusableElements.eq(0)) || _this.$element.is(':focus')) {
              // left modal upwards, setting focus to last element
              if (_this.options.trapFocus) {
                // if focus shall be trapped
                visibleFocusableElements.eq(-1).focus();
                e.preventDefault();
              } else {
                // if focus is not trapped, close dropdown on focus out
                _this.close();
              }
            }
          },
          open: function () {
            if ($target.is(_this.$anchor)) {
              _this.open();
              _this.$element.attr('tabindex', -1).focus();
              e.preventDefault();
            }
          },
          close: function () {
            _this.close();
            _this.$anchor.focus();
          }
        });
      });
    }

    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */
    _addBodyHandler() {
      var $body = $(document.body).not(this.$element),
          _this = this;
      $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {
        if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {
          return;
        }
        if (_this.$element.find(e.target).length) {
          return;
        }
        _this.close();
        $body.off('click.zf.dropdown');
      });
    }

    /**
     * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
     * @function
     * @fires Dropdown#closeme
     * @fires Dropdown#show
     */
    open() {
      // var _this = this;
      /**
       * Fires to close other open dropdowns
       * @event Dropdown#closeme
       */
      this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));
      this.$anchor.addClass('hover').attr({ 'aria-expanded': true });
      // this.$element/*.show()*/;
      this._setPosition();
      this.$element.addClass('is-open').attr({ 'aria-hidden': false });

      if (this.options.autoFocus) {
        var $focusable = Foundation.Keyboard.findFocusable(this.$element);
        if ($focusable.length) {
          $focusable.eq(0).focus();
        }
      }

      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }

      /**
       * Fires once the dropdown is visible.
       * @event Dropdown#show
       */
      this.$element.trigger('show.zf.dropdown', [this.$element]);
    }

    /**
     * Closes the open dropdown pane.
     * @function
     * @fires Dropdown#hide
     */
    close() {
      if (!this.$element.hasClass('is-open')) {
        return false;
      }
      this.$element.removeClass('is-open').attr({ 'aria-hidden': true });

      this.$anchor.removeClass('hover').attr('aria-expanded', false);

      if (this.classChanged) {
        var curPositionClass = this.getPositionClass();
        if (curPositionClass) {
          this.$element.removeClass(curPositionClass);
        }
        this.$element.addClass(this.options.positionClass)
        /*.hide()*/.css({ height: '', width: '' });
        this.classChanged = false;
        this.counter = 4;
        this.usedPositions.length = 0;
      }
      this.$element.trigger('hide.zf.dropdown', [this.$element]);
    }

    /**
     * Toggles the dropdown pane's visibility.
     * @function
     */
    toggle() {
      if (this.$element.hasClass('is-open')) {
        if (this.$anchor.data('hover')) return;
        this.close();
      } else {
        this.open();
      }
    }

    /**
     * Destroys the dropdown.
     * @function
     */
    destroy() {
      this.$element.off('.zf.trigger').hide();
      this.$anchor.off('.zf.dropdown');

      Foundation.unregisterPlugin(this);
    }
  }

  Dropdown.defaults = {
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @example 250
     */
    hoverDelay: 250,
    /**
     * Allow submenus to open on hover events
     * @option
     * @example false
     */
    hover: false,
    /**
     * Don't close dropdown when hovering over dropdown pane
     * @option
     * @example true
     */
    hoverPane: false,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @example 1
     */
    vOffset: 1,
    /**
     * Number of pixels between the dropdown pane and the triggering element on open.
     * @option
     * @example 1
     */
    hOffset: 1,
    /**
     * Class applied to adjust open position. JS will test and fill this in.
     * @option
     * @example 'top'
     */
    positionClass: '',
    /**
     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
     * @option
     * @example false
     */
    trapFocus: false,
    /**
     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
     * @option
     * @example true
     */
    autoFocus: false,
    /**
     * Allows a click on the body to close the dropdown.
     * @option
     * @example false
     */
    closeOnClick: false
  };

  // Window exports
  Foundation.plugin(Dropdown, 'Dropdown');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * DropdownMenu module.
   * @module foundation.dropdown-menu
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.nest
   */

  class DropdownMenu {
    /**
     * Creates a new instance of DropdownMenu.
     * @class
     * @fires DropdownMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);

      Foundation.Nest.Feather(this.$element, 'dropdown');
      this._init();

      Foundation.registerPlugin(this, 'DropdownMenu');
      Foundation.Keyboard.register('DropdownMenu', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'up',
        'ARROW_DOWN': 'down',
        'ARROW_LEFT': 'previous',
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the plugin, and calls _prepareMenu
     * @private
     * @function
     */
    _init() {
      var subs = this.$element.find('li.is-dropdown-submenu-parent');
      this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');

      this.$menuItems = this.$element.find('[role="menuitem"]');
      this.$tabs = this.$element.children('[role="menuitem"]');
      this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);

      if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl() || this.$element.parents('.top-bar-right').is('*')) {
        this.options.alignment = 'right';
        subs.addClass('opens-left');
      } else {
        subs.addClass('opens-right');
      }
      this.changed = false;
      this._events();
    }

    _isVertical() {
      return this.$tabs.css('display') === 'block';
    }

    /**
     * Adds event listeners to elements within the menu
     * @private
     * @function
     */
    _events() {
      var _this = this,
          hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',
          parClass = 'is-dropdown-submenu-parent';

      // used for onClick and in the keyboard handlers
      var handleClickFn = function (e) {
        var $elem = $(e.target).parentsUntil('ul', `.${parClass}`),
            hasSub = $elem.hasClass(parClass),
            hasClicked = $elem.attr('data-is-click') === 'true',
            $sub = $elem.children('.is-dropdown-submenu');

        if (hasSub) {
          if (hasClicked) {
            if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
              return;
            } else {
              e.stopImmediatePropagation();
              e.preventDefault();
              _this._hide($elem);
            }
          } else {
            e.preventDefault();
            e.stopImmediatePropagation();
            _this._show($sub);
            $elem.add($elem.parentsUntil(_this.$element, `.${parClass}`)).attr('data-is-click', true);
          }
        } else {
          if (_this.options.closeOnClickInside) {
            _this._hide($elem);
          }
          return;
        }
      };

      if (this.options.clickOpen || hasTouch) {
        this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);
      }

      if (!this.options.disableHover) {
        this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {
          var $elem = $(this),
              hasSub = $elem.hasClass(parClass);

          if (hasSub) {
            clearTimeout(_this.delay);
            _this.delay = setTimeout(function () {
              _this._show($elem.children('.is-dropdown-submenu'));
            }, _this.options.hoverDelay);
          }
        }).on('mouseleave.zf.dropdownmenu', function (e) {
          var $elem = $(this),
              hasSub = $elem.hasClass(parClass);
          if (hasSub && _this.options.autoclose) {
            if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {
              return false;
            }

            clearTimeout(_this.delay);
            _this.delay = setTimeout(function () {
              _this._hide($elem);
            }, _this.options.closingTime);
          }
        });
      }
      this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {
        var $element = $(e.target).parentsUntil('ul', '[role="menuitem"]'),
            isTab = _this.$tabs.index($element) > -1,
            $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),
            $prevElement,
            $nextElement;

        $elements.each(function (i) {
          if ($(this).is($element)) {
            $prevElement = $elements.eq(i - 1);
            $nextElement = $elements.eq(i + 1);
            return;
          }
        });

        var nextSibling = function () {
          if (!$element.is(':last-child')) {
            $nextElement.children('a:first').focus();
            e.preventDefault();
          }
        },
            prevSibling = function () {
          $prevElement.children('a:first').focus();
          e.preventDefault();
        },
            openSub = function () {
          var $sub = $element.children('ul.is-dropdown-submenu');
          if ($sub.length) {
            _this._show($sub);
            $element.find('li > a:first').focus();
            e.preventDefault();
          } else {
            return;
          }
        },
            closeSub = function () {
          //if ($element.is(':first-child')) {
          var close = $element.parent('ul').parent('li');
          close.children('a:first').focus();
          _this._hide(close);
          e.preventDefault();
          //}
        };
        var functions = {
          open: openSub,
          close: function () {
            _this._hide(_this.$element);
            _this.$menuItems.find('a:first').focus(); // focus to first element
            e.preventDefault();
          },
          handled: function () {
            e.stopImmediatePropagation();
          }
        };

        if (isTab) {
          if (_this._isVertical()) {
            // vertical menu
            if (Foundation.rtl()) {
              // right aligned
              $.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: closeSub,
                previous: openSub
              });
            } else {
              // left aligned
              $.extend(functions, {
                down: nextSibling,
                up: prevSibling,
                next: openSub,
                previous: closeSub
              });
            }
          } else {
            // horizontal menu
            if (Foundation.rtl()) {
              // right aligned
              $.extend(functions, {
                next: prevSibling,
                previous: nextSibling,
                down: openSub,
                up: closeSub
              });
            } else {
              // left aligned
              $.extend(functions, {
                next: nextSibling,
                previous: prevSibling,
                down: openSub,
                up: closeSub
              });
            }
          }
        } else {
          // not tabs -> one sub
          if (Foundation.rtl()) {
            // right aligned
            $.extend(functions, {
              next: closeSub,
              previous: openSub,
              down: nextSibling,
              up: prevSibling
            });
          } else {
            // left aligned
            $.extend(functions, {
              next: openSub,
              previous: closeSub,
              down: nextSibling,
              up: prevSibling
            });
          }
        }
        Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);
      });
    }

    /**
     * Adds an event handler to the body to close any dropdowns on a click.
     * @function
     * @private
     */
    _addBodyHandler() {
      var $body = $(document.body),
          _this = this;
      $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
        var $link = _this.$element.find(e.target);
        if ($link.length) {
          return;
        }

        _this._hide();
        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');
      });
    }

    /**
     * Opens a dropdown pane, and checks for collisions first.
     * @param {jQuery} $sub - ul element that is a submenu to show
     * @function
     * @private
     * @fires DropdownMenu#show
     */
    _show($sub) {
      var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {
        return $(el).find($sub).length > 0;
      }));
      var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');
      this._hide($sibs, idx);
      $sub.css('visibility', 'hidden').addClass('js-dropdown-active').attr({ 'aria-hidden': false }).parent('li.is-dropdown-submenu-parent').addClass('is-active').attr({ 'aria-expanded': true });
      var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
      if (!clear) {
        var oldClass = this.options.alignment === 'left' ? '-right' : '-left',
            $parentLi = $sub.parent('.is-dropdown-submenu-parent');
        $parentLi.removeClass(`opens${oldClass}`).addClass(`opens-${this.options.alignment}`);
        clear = Foundation.Box.ImNotTouchingYou($sub, null, true);
        if (!clear) {
          $parentLi.removeClass(`opens-${this.options.alignment}`).addClass('opens-inner');
        }
        this.changed = true;
      }
      $sub.css('visibility', '');
      if (this.options.closeOnClick) {
        this._addBodyHandler();
      }
      /**
       * Fires when the new dropdown pane is visible.
       * @event DropdownMenu#show
       */
      this.$element.trigger('show.zf.dropdownmenu', [$sub]);
    }

    /**
     * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
     * @function
     * @param {jQuery} $elem - element with a submenu to hide
     * @param {Number} idx - index of the $tabs collection to hide
     * @private
     */
    _hide($elem, idx) {
      var $toClose;
      if ($elem && $elem.length) {
        $toClose = $elem;
      } else if (idx !== undefined) {
        $toClose = this.$tabs.not(function (i, el) {
          return i === idx;
        });
      } else {
        $toClose = this.$element;
      }
      var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;

      if (somethingToClose) {
        $toClose.find('li.is-active').add($toClose).attr({
          'aria-expanded': false,
          'data-is-click': false
        }).removeClass('is-active');

        $toClose.find('ul.js-dropdown-active').attr({
          'aria-hidden': true
        }).removeClass('js-dropdown-active');

        if (this.changed || $toClose.find('opens-inner').length) {
          var oldClass = this.options.alignment === 'left' ? 'right' : 'left';
          $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass(`opens-inner opens-${this.options.alignment}`).addClass(`opens-${oldClass}`);
          this.changed = false;
        }
        /**
         * Fires when the open menus are closed.
         * @event DropdownMenu#hide
         */
        this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);
      }
    }

    /**
     * Destroys the plugin.
     * @function
     */
    destroy() {
      this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
      $(document.body).off('.zf.dropdownmenu');
      Foundation.Nest.Burn(this.$element, 'dropdown');
      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  DropdownMenu.defaults = {
    /**
     * Disallows hover events from opening submenus
     * @option
     * @example false
     */
    disableHover: false,
    /**
     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
     * @option
     * @example true
     */
    autoclose: true,
    /**
     * Amount of time to delay opening a submenu on hover event.
     * @option
     * @example 50
     */
    hoverDelay: 50,
    /**
     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
     * @option
     * @example true
     */
    clickOpen: false,
    /**
     * Amount of time to delay closing a submenu on a mouseleave event.
     * @option
     * @example 500
     */

    closingTime: 500,
    /**
     * Position of the menu relative to what direction the submenus should open. Handled by JS.
     * @option
     * @example 'left'
     */
    alignment: 'left',
    /**
     * Allow clicks on the body to close any open submenus.
     * @option
     * @example true
     */
    closeOnClick: true,
    /**
     * Allow clicks on leaf anchor links to close any open submenus.
     * @option
     * @example true
     */
    closeOnClickInside: true,
    /**
     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
     * @option
     * @example 'vertical'
     */
    verticalClass: 'vertical',
    /**
     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
     * @option
     * @example 'align-right'
     */
    rightClass: 'align-right',
    /**
     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
     * @option
     * @example false
     */
    forceFollow: true
  };

  // Window exports
  Foundation.plugin(DropdownMenu, 'DropdownMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Equalizer module.
   * @module foundation.equalizer
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader if equalizer contains images
   */

  class Equalizer {
    /**
     * Creates a new instance of Equalizer.
     * @class
     * @fires Equalizer#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Equalizer');
    }

    /**
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
     * @private
     */
    _init() {
      var eqId = this.$element.attr('data-equalizer') || '';
      var $watched = this.$element.find(`[data-equalizer-watch="${eqId}"]`);

      this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
      this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));

      this.hasNested = this.$element.find('[data-equalizer]').length > 0;
      this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
      this.isOn = false;
      this._bindHandler = {
        onResizeMeBound: this._onResizeMe.bind(this),
        onPostEqualizedBound: this._onPostEqualized.bind(this)
      };

      var imgs = this.$element.find('img');
      var tooSmall;
      if (this.options.equalizeOn) {
        tooSmall = this._checkMQ();
        $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
      } else {
        this._events();
      }
      if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {
        if (imgs.length) {
          Foundation.onImagesLoaded(imgs, this._reflow.bind(this));
        } else {
          this._reflow();
        }
      }
    }

    /**
     * Removes event listeners if the breakpoint is too small.
     * @private
     */
    _pauseEvents() {
      this.isOn = false;
      this.$element.off({
        '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
        'resizeme.zf.trigger': this._bindHandler.onResizeMeBound
      });
    }

    /**
     * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
     * @private
     */
    _onResizeMe(e) {
      this._reflow();
    }

    /**
     * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
     * @private
     */
    _onPostEqualized(e) {
      if (e.target !== this.$element[0]) {
        this._reflow();
      }
    }

    /**
     * Initializes events for Equalizer.
     * @private
     */
    _events() {
      var _this = this;
      this._pauseEvents();
      if (this.hasNested) {
        this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
      } else {
        this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
      }
      this.isOn = true;
    }

    /**
     * Checks the current breakpoint to the minimum required size.
     * @private
     */
    _checkMQ() {
      var tooSmall = !Foundation.MediaQuery.atLeast(this.options.equalizeOn);
      if (tooSmall) {
        if (this.isOn) {
          this._pauseEvents();
          this.$watched.css('height', 'auto');
        }
      } else {
        if (!this.isOn) {
          this._events();
        }
      }
      return tooSmall;
    }

    /**
     * A noop version for the plugin
     * @private
     */
    _killswitch() {
      return;
    }

    /**
     * Calls necessary functions to update Equalizer upon DOM change
     * @private
     */
    _reflow() {
      if (!this.options.equalizeOnStack) {
        if (this._isStacked()) {
          this.$watched.css('height', 'auto');
          return false;
        }
      }
      if (this.options.equalizeByRow) {
        this.getHeightsByRow(this.applyHeightByRow.bind(this));
      } else {
        this.getHeights(this.applyHeight.bind(this));
      }
    }

    /**
     * Manually determines if the first 2 elements are *NOT* stacked.
     * @private
     */
    _isStacked() {
      return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
    }

    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} heights - An array of heights of children within Equalizer container
     */
    getHeights(cb) {
      var heights = [];
      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        heights.push(this.$watched[i].offsetHeight);
      }
      cb(heights);
    }

    /**
     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
     * @param {Function} cb - A non-optional callback to return the heights array to.
     * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     */
    getHeightsByRow(cb) {
      var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
          groups = [],
          group = 0;
      //group by Row
      groups[group] = [];
      for (var i = 0, len = this.$watched.length; i < len; i++) {
        this.$watched[i].style.height = 'auto';
        //maybe could use this.$watched[i].offsetTop
        var elOffsetTop = $(this.$watched[i]).offset().top;
        if (elOffsetTop != lastElTopOffset) {
          group++;
          groups[group] = [];
          lastElTopOffset = elOffsetTop;
        }
        groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
      }

      for (var j = 0, ln = groups.length; j < ln; j++) {
        var heights = $(groups[j]).map(function () {
          return this[1];
        }).get();
        var max = Math.max.apply(null, heights);
        groups[j].push(max);
      }
      cb(groups);
    }

    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest
     * @param {array} heights - An array of heights of children within Equalizer container
     * @fires Equalizer#preequalized
     * @fires Equalizer#postequalized
     */
    applyHeight(heights) {
      var max = Math.max.apply(null, heights);
      /**
       * Fires before the heights are applied
       * @event Equalizer#preequalized
       */
      this.$element.trigger('preequalized.zf.equalizer');

      this.$watched.css('height', max);

      /**
       * Fires when the heights have been applied
       * @event Equalizer#postequalized
       */
      this.$element.trigger('postequalized.zf.equalizer');
    }

    /**
     * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
     * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
     * @fires Equalizer#preequalized
     * @fires Equalizer#preequalizedRow
     * @fires Equalizer#postequalizedRow
     * @fires Equalizer#postequalized
     */
    applyHeightByRow(groups) {
      /**
       * Fires before the heights are applied
       */
      this.$element.trigger('preequalized.zf.equalizer');
      for (var i = 0, len = groups.length; i < len; i++) {
        var groupsILength = groups[i].length,
            max = groups[i][groupsILength - 1];
        if (groupsILength <= 2) {
          $(groups[i][0][0]).css({ 'height': 'auto' });
          continue;
        }
        /**
          * Fires before the heights per row are applied
          * @event Equalizer#preequalizedRow
          */
        this.$element.trigger('preequalizedrow.zf.equalizer');
        for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
          $(groups[i][j][0]).css({ 'height': max });
        }
        /**
          * Fires when the heights per row have been applied
          * @event Equalizer#postequalizedRow
          */
        this.$element.trigger('postequalizedrow.zf.equalizer');
      }
      /**
       * Fires when the heights have been applied
       */
      this.$element.trigger('postequalized.zf.equalizer');
    }

    /**
     * Destroys an instance of Equalizer.
     * @function
     */
    destroy() {
      this._pauseEvents();
      this.$watched.css('height', 'auto');

      Foundation.unregisterPlugin(this);
    }
  }

  /**
   * Default settings for plugin
   */
  Equalizer.defaults = {
    /**
     * Enable height equalization when stacked on smaller screens.
     * @option
     * @example true
     */
    equalizeOnStack: false,
    /**
     * Enable height equalization row by row.
     * @option
     * @example false
     */
    equalizeByRow: false,
    /**
     * String representing the minimum breakpoint size the plugin should equalize heights on.
     * @option
     * @example 'medium'
     */
    equalizeOn: ''
  };

  // Window exports
  Foundation.plugin(Equalizer, 'Equalizer');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Interchange module.
   * @module foundation.interchange
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader
   */

  class Interchange {
    /**
     * Creates a new instance of Interchange.
     * @class
     * @fires Interchange#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Interchange.defaults, options);
      this.rules = [];
      this.currentPath = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Interchange');
    }

    /**
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
     * @function
     * @private
     */
    _init() {
      this._addBreakpoints();
      this._generateRules();
      this._reflow();
    }

    /**
     * Initializes events for Interchange.
     * @function
     * @private
     */
    _events() {
      $(window).on('resize.zf.interchange', Foundation.util.throttle(this._reflow.bind(this), 50));
    }

    /**
     * Calls necessary functions to update Interchange upon DOM change
     * @function
     * @private
     */
    _reflow() {
      var match;

      // Iterate through each rule, but only save the last match
      for (var i in this.rules) {
        if (this.rules.hasOwnProperty(i)) {
          var rule = this.rules[i];

          if (window.matchMedia(rule.query).matches) {
            match = rule;
          }
        }
      }

      if (match) {
        this.replace(match.path);
      }
    }

    /**
     * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
     * @function
     * @private
     */
    _addBreakpoints() {
      for (var i in Foundation.MediaQuery.queries) {
        if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {
          var query = Foundation.MediaQuery.queries[i];
          Interchange.SPECIAL_QUERIES[query.name] = query.value;
        }
      }
    }

    /**
     * Checks the Interchange element for the provided media query + content pairings
     * @function
     * @private
     * @param {Object} element - jQuery object that is an Interchange instance
     * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
     */
    _generateRules(element) {
      var rulesList = [];
      var rules;

      if (this.options.rules) {
        rules = this.options.rules;
      } else {
        rules = this.$element.data('interchange').match(/\[.*?\]/g);
      }

      for (var i in rules) {
        if (rules.hasOwnProperty(i)) {
          var rule = rules[i].slice(1, -1).split(', ');
          var path = rule.slice(0, -1).join('');
          var query = rule[rule.length - 1];

          if (Interchange.SPECIAL_QUERIES[query]) {
            query = Interchange.SPECIAL_QUERIES[query];
          }

          rulesList.push({
            path: path,
            query: query
          });
        }
      }

      this.rules = rulesList;
    }

    /**
     * Update the `src` property of an image, or change the HTML of a container, to the specified path.
     * @function
     * @param {String} path - Path to the image or HTML partial.
     * @fires Interchange#replaced
     */
    replace(path) {
      if (this.currentPath === path) return;

      var _this = this,
          trigger = 'replaced.zf.interchange';

      // Replacing images
      if (this.$element[0].nodeName === 'IMG') {
        this.$element.attr('src', path).on('load', function () {
          _this.currentPath = path;
        }).trigger(trigger);
      }
      // Replacing background images
      else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
          this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);
        }
        // Replacing HTML
        else {
            $.get(path, function (response) {
              _this.$element.html(response).trigger(trigger);
              $(response).foundation();
              _this.currentPath = path;
            });
          }

      /**
       * Fires when content in an Interchange element is done being loaded.
       * @event Interchange#replaced
       */
      // this.$element.trigger('replaced.zf.interchange');
    }

    /**
     * Destroys an instance of interchange.
     * @function
     */
    destroy() {
      //TODO this.
    }
  }

  /**
   * Default settings for plugin
   */
  Interchange.defaults = {
    /**
     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
     * @option
     */
    rules: null
  };

  Interchange.SPECIAL_QUERIES = {
    'landscape': 'screen and (orientation: landscape)',
    'portrait': 'screen and (orientation: portrait)',
    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
  };

  // Window exports
  Foundation.plugin(Interchange, 'Interchange');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * OffCanvas module.
   * @module foundation.offcanvas
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   * @requires foundation.util.motion
   */

  class OffCanvas {
    /**
     * Creates a new instance of an off-canvas wrapper.
     * @class
     * @fires OffCanvas#init
     * @param {Object} element - jQuery object to initialize.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);
      this.$lastTrigger = $();
      this.$triggers = $();

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'OffCanvas');
      Foundation.Keyboard.register('OffCanvas', {
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
     * @function
     * @private
     */
    _init() {
      var id = this.$element.attr('id');

      this.$element.attr('aria-hidden', 'true');

      // Find triggers that affect this element and add aria-expanded to them
      this.$triggers = $(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);

      // Add a close trigger over the body if necessary
      if (this.options.closeOnClick) {
        if ($('.js-off-canvas-exit').length) {
          this.$exiter = $('.js-off-canvas-exit');
        } else {
          var exiter = document.createElement('div');
          exiter.setAttribute('class', 'js-off-canvas-exit');
          $('[data-off-canvas-content]').append(exiter);

          this.$exiter = $(exiter);
        }
      }

      this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);

      if (this.options.isRevealed) {
        this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
        this._setMQChecker();
      }
      if (!this.options.transitionTime) {
        this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas-wrapper]')[0]).transitionDuration) * 1000;
      }
    }

    /**
     * Adds event handlers to the off-canvas wrapper and the exit overlay.
     * @function
     * @private
     */
    _events() {
      this.$element.off('.zf.trigger .zf.offcanvas').on({
        'open.zf.trigger': this.open.bind(this),
        'close.zf.trigger': this.close.bind(this),
        'toggle.zf.trigger': this.toggle.bind(this),
        'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
      });

      if (this.options.closeOnClick && this.$exiter.length) {
        this.$exiter.on({ 'click.zf.offcanvas': this.close.bind(this) });
      }
    }

    /**
     * Applies event listener for elements that will reveal at certain breakpoints.
     * @private
     */
    _setMQChecker() {
      var _this = this;

      $(window).on('changed.zf.mediaquery', function () {
        if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        } else {
          _this.reveal(false);
        }
      }).one('load.zf.offcanvas', function () {
        if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
          _this.reveal(true);
        }
      });
    }

    /**
     * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
     * @param {Boolean} isRevealed - true if element should be revealed.
     * @function
     */
    reveal(isRevealed) {
      var $closer = this.$element.find('[data-close]');
      if (isRevealed) {
        this.close();
        this.isRevealed = true;
        // if (!this.options.forceTop) {
        //   var scrollPos = parseInt(window.pageYOffset);
        //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
        // }
        // if (this.options.isSticky) { this._stick(); }
        this.$element.off('open.zf.trigger toggle.zf.trigger');
        if ($closer.length) {
          $closer.hide();
        }
      } else {
        this.isRevealed = false;
        // if (this.options.isSticky || !this.options.forceTop) {
        //   this.$element[0].style.transform = '';
        //   $(window).off('scroll.zf.offcanvas');
        // }
        this.$element.on({
          'open.zf.trigger': this.open.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this)
        });
        if ($closer.length) {
          $closer.show();
        }
      }
    }

    /**
     * Opens the off-canvas menu.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     * @fires OffCanvas#opened
     */
    open(event, trigger) {
      if (this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }
      var _this = this,
          $body = $(document.body);

      if (this.options.forceTop) {
        $('body').scrollTop(0);
      }
      // window.pageYOffset = 0;

      // if (!this.options.forceTop) {
      //   var scrollPos = parseInt(window.pageYOffset);
      //   this.$element[0].style.transform = 'translate(0,' + scrollPos + 'px)';
      //   if (this.$exiter.length) {
      //     this.$exiter[0].style.transform = 'translate(0,' + scrollPos + 'px)';
      //   }
      // }
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#opened
       */

      var $wrapper = $('[data-off-canvas-wrapper]');
      $wrapper.addClass('is-off-canvas-open is-open-' + _this.options.position);

      _this.$element.addClass('is-open');

      // if (_this.options.isSticky) {
      //   _this._stick();
      // }

      this.$triggers.attr('aria-expanded', 'true');
      this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');

      if (this.options.closeOnClick) {
        this.$exiter.addClass('is-visible');
      }

      if (trigger) {
        this.$lastTrigger = trigger;
      }

      if (this.options.autoFocus) {
        $wrapper.one(Foundation.transitionend($wrapper), function () {
          if (_this.$element.hasClass('is-open')) {
            // handle double clicks
            _this.$element.attr('tabindex', '-1');
            _this.$element.focus();
          }
        });
      }

      if (this.options.trapFocus) {
        $wrapper.one(Foundation.transitionend($wrapper), function () {
          if (_this.$element.hasClass('is-open')) {
            // handle double clicks
            _this.$element.attr('tabindex', '-1');
            _this.trapFocus();
          }
        });
      }
    }

    /**
     * Traps focus within the offcanvas on open.
     * @private
     */
    _trapFocus() {
      var focusable = Foundation.Keyboard.findFocusable(this.$element),
          first = focusable.eq(0),
          last = focusable.eq(-1);

      focusable.off('.zf.offcanvas').on('keydown.zf.offcanvas', function (e) {
        var key = Foundation.Keyboard.parseKey(e);
        if (key === 'TAB' && e.target === last[0]) {
          e.preventDefault();
          first.focus();
        }
        if (key === 'SHIFT_TAB' && e.target === first[0]) {
          e.preventDefault();
          last.focus();
        }
      });
    }

    /**
     * Allows the offcanvas to appear sticky utilizing translate properties.
     * @private
     */
    // OffCanvas.prototype._stick = function() {
    //   var elStyle = this.$element[0].style;
    //
    //   if (this.options.closeOnClick) {
    //     var exitStyle = this.$exiter[0].style;
    //   }
    //
    //   $(window).on('scroll.zf.offcanvas', function(e) {
    //     console.log(e);
    //     var pageY = window.pageYOffset;
    //     elStyle.transform = 'translate(0,' + pageY + 'px)';
    //     if (exitStyle !== undefined) { exitStyle.transform = 'translate(0,' + pageY + 'px)'; }
    //   });
    //   // this.$element.trigger('stuck.zf.offcanvas');
    // };
    /**
     * Closes the off-canvas menu.
     * @function
     * @param {Function} cb - optional cb to fire after closure.
     * @fires OffCanvas#closed
     */
    close(cb) {
      if (!this.$element.hasClass('is-open') || this.isRevealed) {
        return;
      }

      var _this = this;

      //  Foundation.Move(this.options.transitionTime, this.$element, function() {
      $('[data-off-canvas-wrapper]').removeClass(`is-off-canvas-open is-open-${_this.options.position}`);
      _this.$element.removeClass('is-open');
      // Foundation._reflow();
      // });
      this.$element.attr('aria-hidden', 'true')
      /**
       * Fires when the off-canvas menu opens.
       * @event OffCanvas#closed
       */
      .trigger('closed.zf.offcanvas');
      // if (_this.options.isSticky || !_this.options.forceTop) {
      //   setTimeout(function() {
      //     _this.$element[0].style.transform = '';
      //     $(window).off('scroll.zf.offcanvas');
      //   }, this.options.transitionTime);
      // }
      if (this.options.closeOnClick) {
        this.$exiter.removeClass('is-visible');
      }

      this.$triggers.attr('aria-expanded', 'false');
      if (this.options.trapFocus) {
        $('[data-off-canvas-content]').removeAttr('tabindex');
      }
    }

    /**
     * Toggles the off-canvas menu open or closed.
     * @function
     * @param {Object} event - Event object passed from listener.
     * @param {jQuery} trigger - element that triggered the off-canvas to open.
     */
    toggle(event, trigger) {
      if (this.$element.hasClass('is-open')) {
        this.close(event, trigger);
      } else {
        this.open(event, trigger);
      }
    }

    /**
     * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
     * @function
     * @private
     */
    _handleKeyboard(e) {
      Foundation.Keyboard.handleKey(e, 'OffCanvas', {
        close: () => {
          this.close();
          this.$lastTrigger.focus();
          return true;
        },
        handled: () => {
          e.stopPropagation();
          e.preventDefault();
        }
      });
    }

    /**
     * Destroys the offcanvas plugin.
     * @function
     */
    destroy() {
      this.close();
      this.$element.off('.zf.trigger .zf.offcanvas');
      this.$exiter.off('.zf.offcanvas');

      Foundation.unregisterPlugin(this);
    }
  }

  OffCanvas.defaults = {
    /**
     * Allow the user to click outside of the menu to close it.
     * @option
     * @example true
     */
    closeOnClick: true,

    /**
     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
     * @option
     * @example 500
     */
    transitionTime: 0,

    /**
     * Direction the offcanvas opens from. Determines class applied to body.
     * @option
     * @example left
     */
    position: 'left',

    /**
     * Force the page to scroll to top on open.
     * @option
     * @example true
     */
    forceTop: true,

    /**
     * Allow the offcanvas to remain open for certain breakpoints.
     * @option
     * @example false
     */
    isRevealed: false,

    /**
     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
     * @option
     * @example reveal-for-large
     */
    revealOn: null,

    /**
     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @example true
     */
    autoFocus: true,

    /**
     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
     * @option
     * TODO improve the regex testing for this.
     * @example reveal-for-large
     */
    revealClass: 'reveal-for-',

    /**
     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @example true
     */
    trapFocus: false
  };

  // Window exports
  Foundation.plugin(OffCanvas, 'OffCanvas');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * ResponsiveMenu module.
   * @module foundation.responsiveMenu
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.accordionMenu
   * @requires foundation.util.drilldown
   * @requires foundation.util.dropdown-menu
   */

  class ResponsiveMenu {
    /**
     * Creates a new instance of a responsive menu.
     * @class
     * @fires ResponsiveMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = $(element);
      this.rules = this.$element.data('responsive-menu');
      this.currentMq = null;
      this.currentPlugin = null;

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveMenu');
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
     * @function
     * @private
     */
    _init() {
      // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
      if (typeof this.rules === 'string') {
        let rulesTree = {};

        // Parse rules from "classes" pulled from data attribute
        let rules = this.rules.split(' ');

        // Iterate through every rule found
        for (let i = 0; i < rules.length; i++) {
          let rule = rules[i].split('-');
          let ruleSize = rule.length > 1 ? rule[0] : 'small';
          let rulePlugin = rule.length > 1 ? rule[1] : rule[0];

          if (MenuPlugins[rulePlugin] !== null) {
            rulesTree[ruleSize] = MenuPlugins[rulePlugin];
          }
        }

        this.rules = rulesTree;
      }

      if (!$.isEmptyObject(this.rules)) {
        this._checkMediaQueries();
      }
    }

    /**
     * Initializes events for the Menu.
     * @function
     * @private
     */
    _events() {
      var _this = this;

      $(window).on('changed.zf.mediaquery', function () {
        _this._checkMediaQueries();
      });
      // $(window).on('resize.zf.ResponsiveMenu', function() {
      //   _this._checkMediaQueries();
      // });
    }

    /**
     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
     * @function
     * @private
     */
    _checkMediaQueries() {
      var matchedMq,
          _this = this;
      // Iterate through each rule and find the last matching rule
      $.each(this.rules, function (key) {
        if (Foundation.MediaQuery.atLeast(key)) {
          matchedMq = key;
        }
      });

      // No match? No dice
      if (!matchedMq) return;

      // Plugin already initialized? We good
      if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

      // Remove existing plugin-specific CSS classes
      $.each(MenuPlugins, function (key, value) {
        _this.$element.removeClass(value.cssClass);
      });

      // Add the CSS class for the new plugin
      this.$element.addClass(this.rules[matchedMq].cssClass);

      // Create an instance of the new plugin
      if (this.currentPlugin) this.currentPlugin.destroy();
      this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
    }

    /**
     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
     * @function
     */
    destroy() {
      this.currentPlugin.destroy();
      $(window).off('.zf.ResponsiveMenu');
      Foundation.unregisterPlugin(this);
    }
  }

  ResponsiveMenu.defaults = {};

  // The plugin matches the plugin classes with these plugin instances.
  var MenuPlugins = {
    dropdown: {
      cssClass: 'dropdown',
      plugin: Foundation._plugins['dropdown-menu'] || null
    },
    drilldown: {
      cssClass: 'drilldown',
      plugin: Foundation._plugins['drilldown'] || null
    },
    accordion: {
      cssClass: 'accordion-menu',
      plugin: Foundation._plugins['accordion-menu'] || null
    }
  };

  // Window exports
  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * ResponsiveToggle module.
   * @module foundation.responsiveToggle
   * @requires foundation.util.mediaQuery
   */

  class ResponsiveToggle {
    /**
     * Creates a new instance of Tab Bar.
     * @class
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = $(element);
      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveToggle');
    }

    /**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */
    _init() {
      var targetID = this.$element.data('responsive-toggle');
      if (!targetID) {
        console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
      }

      this.$targetMenu = $(`#${targetID}`);
      this.$toggler = this.$element.find('[data-toggle]');

      this._update();
    }

    /**
     * Adds necessary event handlers for the tab bar to work.
     * @function
     * @private
     */
    _events() {
      var _this = this;

      this._updateMqHandler = this._update.bind(this);

      $(window).on('changed.zf.mediaquery', this._updateMqHandler);

      this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
    }

    /**
     * Checks the current media query to determine if the tab bar should be visible or hidden.
     * @function
     * @private
     */
    _update() {
      // Mobile
      if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
        this.$element.show();
        this.$targetMenu.hide();
      }

      // Desktop
      else {
          this.$element.hide();
          this.$targetMenu.show();
        }
    }

    /**
     * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
     * @function
     * @fires ResponsiveToggle#toggled
     */
    toggleMenu() {
      if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
        this.$targetMenu.toggle(0);

        /**
         * Fires when the element attached to the tab bar toggles.
         * @event ResponsiveToggle#toggled
         */
        this.$element.trigger('toggled.zf.responsiveToggle');
      }
    }

    destroy() {
      this.$element.off('.zf.responsiveToggle');
      this.$toggler.off('.zf.responsiveToggle');

      $(window).off('changed.zf.mediaquery', this._updateMqHandler);

      Foundation.unregisterPlugin(this);
    }
  }

  ResponsiveToggle.defaults = {
    /**
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.
     * @option
     * @example 'medium'
     */
    hideFor: 'medium'
  };

  // Window exports
  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Sticky module.
   * @module foundation.sticky
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   */

  class Sticky {
    /**
     * Creates a new instance of a sticky thing.
     * @class
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Sticky');
    }

    /**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */
    _init() {
      var $parent = this.$element.parent('[data-sticky-container]'),
          id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),
          _this = this;

      if (!$parent.length) {
        this.wasWrapped = true;
      }
      this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);
      this.$container.addClass(this.options.containerClass);

      this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });

      this.scrollCount = this.options.checkEvery;
      this.isStuck = false;
      $(window).one('load.zf.sticky', function () {
        //We calculate the container height to have correct values for anchor points offset calculation.
        _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
        _this.$container.css('height', _this.containerHeight);
        _this.elemHeight = _this.containerHeight;
        if (_this.options.anchor !== '') {
          _this.$anchor = $('#' + _this.options.anchor);
        } else {
          _this._parsePoints();
        }

        _this._setSizes(function () {
          _this._calc(false);
        });
        _this._events(id.split('-').reverse().join('-'));
      });
    }

    /**
     * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
     * @function
     * @private
     */
    _parsePoints() {
      var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
          btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
          pts = [top, btm],
          breaks = {};
      for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
        var pt;
        if (typeof pts[i] === 'number') {
          pt = pts[i];
        } else {
          var place = pts[i].split(':'),
              anchor = $(`#${place[0]}`);

          pt = anchor.offset().top;
          if (place[1] && place[1].toLowerCase() === 'bottom') {
            pt += anchor[0].getBoundingClientRect().height;
          }
        }
        breaks[i] = pt;
      }

      this.points = breaks;
      return;
    }

    /**
     * Adds event handlers for the scrolling element.
     * @private
     * @param {String} id - psuedo-random id for unique scroll event listener.
     */
    _events(id) {
      var _this = this,
          scrollListener = this.scrollListener = `scroll.zf.${id}`;
      if (this.isOn) {
        return;
      }
      if (this.canStick) {
        this.isOn = true;
        $(window).off(scrollListener).on(scrollListener, function (e) {
          if (_this.scrollCount === 0) {
            _this.scrollCount = _this.options.checkEvery;
            _this._setSizes(function () {
              _this._calc(false, window.pageYOffset);
            });
          } else {
            _this.scrollCount--;
            _this._calc(false, window.pageYOffset);
          }
        });
      }

      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
        _this._setSizes(function () {
          _this._calc(false);
          if (_this.canStick) {
            if (!_this.isOn) {
              _this._events(id);
            }
          } else if (_this.isOn) {
            _this._pauseListeners(scrollListener);
          }
        });
      });
    }

    /**
     * Removes event handlers for scroll and change events on anchor.
     * @fires Sticky#pause
     * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
     */
    _pauseListeners(scrollListener) {
      this.isOn = false;
      $(window).off(scrollListener);

      /**
       * Fires when the plugin is paused due to resize event shrinking the view.
       * @event Sticky#pause
       * @private
       */
      this.$element.trigger('pause.zf.sticky');
    }

    /**
     * Called on every `scroll` event and on `_init`
     * fires functions based on booleans and cached values
     * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
     * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
     */
    _calc(checkSizes, scroll) {
      if (checkSizes) {
        this._setSizes();
      }

      if (!this.canStick) {
        if (this.isStuck) {
          this._removeSticky(true);
        }
        return false;
      }

      if (!scroll) {
        scroll = window.pageYOffset;
      }

      if (scroll >= this.topPoint) {
        if (scroll <= this.bottomPoint) {
          if (!this.isStuck) {
            this._setSticky();
          }
        } else {
          if (this.isStuck) {
            this._removeSticky(false);
          }
        }
      } else {
        if (this.isStuck) {
          this._removeSticky(true);
        }
      }
    }

    /**
     * Causes the $element to become stuck.
     * Adds `position: fixed;`, and helper classes.
     * @fires Sticky#stuckto
     * @function
     * @private
     */
    _setSticky() {
      var _this = this,
          stickTo = this.options.stickTo,
          mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
          notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
          css = {};

      css[mrgn] = `${this.options[mrgn]}em`;
      css[stickTo] = 0;
      css[notStuckTo] = 'auto';
      css['left'] = this.$container.offset().left + parseInt(window.getComputedStyle(this.$container[0])["padding-left"], 10);
      this.isStuck = true;
      this.$element.removeClass(`is-anchored is-at-${notStuckTo}`).addClass(`is-stuck is-at-${stickTo}`).css(css)
      /**
       * Fires when the $element has become `position: fixed;`
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
       * @event Sticky#stuckto
       */
      .trigger(`sticky.zf.stuckto:${stickTo}`);
      this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
        _this._setSizes();
      });
    }

    /**
     * Causes the $element to become unstuck.
     * Removes `position: fixed;`, and helper classes.
     * Adds other helper classes.
     * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
     * @fires Sticky#unstuckfrom
     * @private
     */
    _removeSticky(isTop) {
      var stickTo = this.options.stickTo,
          stickToTop = stickTo === 'top',
          css = {},
          anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
          mrgn = stickToTop ? 'marginTop' : 'marginBottom',
          notStuckTo = stickToTop ? 'bottom' : 'top',
          topOrBottom = isTop ? 'top' : 'bottom';

      css[mrgn] = 0;

      css['bottom'] = 'auto';
      if (isTop) {
        css['top'] = 0;
      } else {
        css['top'] = anchorPt;
      }

      css['left'] = '';
      this.isStuck = false;
      this.$element.removeClass(`is-stuck is-at-${stickTo}`).addClass(`is-anchored is-at-${topOrBottom}`).css(css)
      /**
       * Fires when the $element has become anchored.
       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
       * @event Sticky#unstuckfrom
       */
      .trigger(`sticky.zf.unstuckfrom:${topOrBottom}`);
    }

    /**
     * Sets the $element and $container sizes for plugin.
     * Calls `_setBreakPoints`.
     * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
     * @private
     */
    _setSizes(cb) {
      this.canStick = Foundation.MediaQuery.atLeast(this.options.stickyOn);
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        }
      }
      var _this = this,
          newElemWidth = this.$container[0].getBoundingClientRect().width,
          comp = window.getComputedStyle(this.$container[0]),
          pdng = parseInt(comp['padding-right'], 10);

      if (this.$anchor && this.$anchor.length) {
        this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
      } else {
        this._parsePoints();
      }

      this.$element.css({
        'max-width': `${newElemWidth - pdng}px`
      });

      var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
      if (this.$element.css("display") == "none") {
        newContainerHeight = 0;
      }
      this.containerHeight = newContainerHeight;
      this.$container.css({
        height: newContainerHeight
      });
      this.elemHeight = newContainerHeight;

      if (this.isStuck) {
        this.$element.css({ "left": this.$container.offset().left + parseInt(comp['padding-left'], 10) });
      } else {
        if (this.$element.hasClass('is-at-bottom')) {
          var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
          this.$element.css('top', anchorPt);
        }
      }

      this._setBreakPoints(newContainerHeight, function () {
        if (cb && typeof cb === 'function') {
          cb();
        }
      });
    }

    /**
     * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
     * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
     * @param {Function} cb - optional callback function to be called on completion.
     * @private
     */
    _setBreakPoints(elemHeight, cb) {
      if (!this.canStick) {
        if (cb && typeof cb === 'function') {
          cb();
        } else {
          return false;
        }
      }
      var mTop = emCalc(this.options.marginTop),
          mBtm = emCalc(this.options.marginBottom),
          topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
          bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,

      // topPoint = this.$anchor.offset().top || this.points[0],
      // bottomPoint = topPoint + this.anchorHeight || this.points[1],
      winHeight = window.innerHeight;

      if (this.options.stickTo === 'top') {
        topPoint -= mTop;
        bottomPoint -= elemHeight + mTop;
      } else if (this.options.stickTo === 'bottom') {
        topPoint -= winHeight - (elemHeight + mBtm);
        bottomPoint -= winHeight - mBtm;
      } else {
        //this would be the stickTo: both option... tricky
      }

      this.topPoint = topPoint;
      this.bottomPoint = bottomPoint;

      if (cb && typeof cb === 'function') {
        cb();
      }
    }

    /**
     * Destroys the current sticky element.
     * Resets the element to the top position first.
     * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
     * @function
     */
    destroy() {
      this._removeSticky(true);

      this.$element.removeClass(`${this.options.stickyClass} is-anchored is-at-top`).css({
        height: '',
        top: '',
        bottom: '',
        'max-width': ''
      }).off('resizeme.zf.trigger');
      if (this.$anchor && this.$anchor.length) {
        this.$anchor.off('change.zf.sticky');
      }
      $(window).off(this.scrollListener);

      if (this.wasWrapped) {
        this.$element.unwrap();
      } else {
        this.$container.removeClass(this.options.containerClass).css({
          height: ''
        });
      }
      Foundation.unregisterPlugin(this);
    }
  }

  Sticky.defaults = {
    /**
     * Customizable container template. Add your own classes for styling and sizing.
     * @option
     * @example '&lt;div data-sticky-container class="small-6 columns"&gt;&lt;/div&gt;'
     */
    container: '<div data-sticky-container></div>',
    /**
     * Location in the view the element sticks to.
     * @option
     * @example 'top'
     */
    stickTo: 'top',
    /**
     * If anchored to a single element, the id of that element.
     * @option
     * @example 'exampleId'
     */
    anchor: '',
    /**
     * If using more than one element as anchor points, the id of the top anchor.
     * @option
     * @example 'exampleId:top'
     */
    topAnchor: '',
    /**
     * If using more than one element as anchor points, the id of the bottom anchor.
     * @option
     * @example 'exampleId:bottom'
     */
    btmAnchor: '',
    /**
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
     * @option
     * @example 1
     */
    marginTop: 1,
    /**
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
     * @option
     * @example 1
     */
    marginBottom: 1,
    /**
     * Breakpoint string that is the minimum screen size an element should become sticky.
     * @option
     * @example 'medium'
     */
    stickyOn: 'medium',
    /**
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
     * @option
     * @example 'sticky'
     */
    stickyClass: 'sticky',
    /**
     * Class applied to sticky container. Foundation defaults to `sticky-container`.
     * @option
     * @example 'sticky-container'
     */
    containerClass: 'sticky-container',
    /**
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option
     * @example 50
     */
    checkEvery: -1
  };

  /**
   * Helper function to calculate em values
   * @param Number {em} - number of em's to calculate into pixels
   */
  function emCalc(em) {
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
  }

  // Window exports
  Foundation.plugin(Sticky, 'Sticky');
}(jQuery);
;'use strict';

!function ($) {

  /**
   * Toggler module.
   * @module foundation.toggler
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   */

  class Toggler {
    /**
     * Creates a new instance of Toggler.
     * @class
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    constructor(element, options) {
      this.$element = element;
      this.options = $.extend({}, Toggler.defaults, element.data(), options);
      this.className = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Toggler');
    }

    /**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */
    _init() {
      var input;
      // Parse animation classes if they were set
      if (this.options.animate) {
        input = this.options.animate.split(' ');

        this.animationIn = input[0];
        this.animationOut = input[1] || null;
      }
      // Otherwise, parse toggle class
      else {
          input = this.$element.data('toggler');
          // Allow for a . at the beginning of the string
          this.className = input[0] === '.' ? input.slice(1) : input;
        }

      // Add ARIA attributes to triggers
      var id = this.$element[0].id;
      $(`[data-open="${id}"], [data-close="${id}"], [data-toggle="${id}"]`).attr('aria-controls', id);
      // If the target is hidden, add aria-hidden
      this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
    }

    /**
     * Initializes events for the toggle trigger.
     * @function
     * @private
     */
    _events() {
      this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
    }

    /**
     * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
     * @function
     * @fires Toggler#on
     * @fires Toggler#off
     */
    toggle() {
      this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
    }

    _toggleClass() {
      this.$element.toggleClass(this.className);

      var isOn = this.$element.hasClass(this.className);
      if (isOn) {
        /**
         * Fires if the target element has the class after a toggle.
         * @event Toggler#on
         */
        this.$element.trigger('on.zf.toggler');
      } else {
        /**
         * Fires if the target element does not have the class after a toggle.
         * @event Toggler#off
         */
        this.$element.trigger('off.zf.toggler');
      }

      this._updateARIA(isOn);
    }

    _toggleAnimate() {
      var _this = this;

      if (this.$element.is(':hidden')) {
        Foundation.Motion.animateIn(this.$element, this.animationIn, function () {
          _this._updateARIA(true);
          this.trigger('on.zf.toggler');
        });
      } else {
        Foundation.Motion.animateOut(this.$element, this.animationOut, function () {
          _this._updateARIA(false);
          this.trigger('off.zf.toggler');
        });
      }
    }

    _updateARIA(isOn) {
      this.$element.attr('aria-expanded', isOn ? true : false);
    }

    /**
     * Destroys the instance of Toggler on the element.
     * @function
     */
    destroy() {
      this.$element.off('.zf.toggler');
      Foundation.unregisterPlugin(this);
    }
  }

  Toggler.defaults = {
    /**
     * Tells the plugin if the element should animated when toggled.
     * @option
     * @example false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(Toggler, 'Toggler');
}(jQuery);
;'use strict';

// Polyfill for requestAnimationFrame

(function () {
  if (!Date.now) Date.now = function () {
    return new Date().getTime();
  };

  var vendors = ['webkit', 'moz'];
  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
    var vp = vendors[i];
    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
  }
  if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
    var lastTime = 0;
    window.requestAnimationFrame = function (callback) {
      var now = Date.now();
      var nextTime = Math.max(lastTime + 16, now);
      return setTimeout(function () {
        callback(lastTime = nextTime);
      }, nextTime - now);
    };
    window.cancelAnimationFrame = clearTimeout;
  }
})();

var initClasses = ['mui-enter', 'mui-leave'];
var activeClasses = ['mui-enter-active', 'mui-leave-active'];

// Find the right "transitionend" event for this browser
var endEvent = function () {
  var transitions = {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'otransitionend'
  };
  var elem = window.document.createElement('div');

  for (var t in transitions) {
    if (typeof elem.style[t] !== 'undefined') {
      return transitions[t];
    }
  }

  return null;
}();

function animate(isIn, element, animation, cb) {
  element = $(element).eq(0);

  if (!element.length) return;

  if (endEvent === null) {
    isIn ? element.show() : element.hide();
    cb();
    return;
  }

  var initClass = isIn ? initClasses[0] : initClasses[1];
  var activeClass = isIn ? activeClasses[0] : activeClasses[1];

  // Set up the animation
  reset();
  element.addClass(animation);
  element.css('transition', 'none');
  requestAnimationFrame(function () {
    element.addClass(initClass);
    if (isIn) element.show();
  });

  // Start the animation
  requestAnimationFrame(function () {
    element[0].offsetWidth;
    element.css('transition', '');
    element.addClass(activeClass);
  });

  // Clean up the animation when it finishes
  element.one('transitionend', finish);

  // Hides the element (for out animations), resets the element, and runs a callback
  function finish() {
    if (!isIn) element.hide();
    reset();
    if (cb) cb.apply(element);
  }

  // Resets transitions and removes motion-specific classes
  function reset() {
    element[0].style.transitionDuration = 0;
    element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
  }
}

var MotionUI = {
  animateIn: function (element, animation, cb) {
    animate(true, element, animation, cb);
  },

  animateOut: function (element, animation, cb) {
    animate(false, element, animation, cb);
  }
};
;/* =========================================================
 * foundation-datepicker.js
 * Copyright 2015 Peter Beno, najlepsiwebdesigner@gmail.com, @benopeter
 * project website http://foundation-datepicker.peterbeno.com
 * ========================================================= */
!function ($) {

    function UTCDate() {
        return new Date(Date.UTC.apply(Date, arguments));
    }

    function UTCToday() {
        var today = new Date();
        return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());
    }

    var Datepicker = function (element, options) {
        var that = this;

        this.element = $(element);
        this.autoShow = options.autoShow == undefined ? true : options.autoShow;
        this.appendTo = options.appendTo || 'body';
        this.closeButton = options.closeButton;
        this.language = options.language || this.element.data('date-language') || "en";
        this.language = this.language in dates ? this.language : this.language.split('-')[0]; //Check if "de-DE" style date is available, if not language should fallback to 2 letter code eg "de"
        this.language = this.language in dates ? this.language : "en";
        this.isRTL = dates[this.language].rtl || false;
        this.format = DPGlobal.parseFormat(options.format || this.element.data('date-format') || dates[this.language].format || 'mm/dd/yyyy');
        this.formatText = options.format || this.element.data('date-format') || dates[this.language].format || 'mm/dd/yyyy';
        this.isInline = false;
        this.isInput = this.element.is('input');
        this.component = this.element.is('.date') ? this.element.find('.prefix, .postfix') : false;
        this.hasInput = this.component && this.element.find('input').length;
        this.disableDblClickSelection = options.disableDblClickSelection;
        this.onRender = options.onRender || function () {};
        if (this.component && this.component.length === 0) {
            this.component = false;
        }
        this.linkField = options.linkField || this.element.data('link-field') || false;
        this.linkFormat = DPGlobal.parseFormat(options.linkFormat || this.element.data('link-format') || 'yyyy-mm-dd hh:ii:ss');
        this.minuteStep = options.minuteStep || this.element.data('minute-step') || 5;
        this.pickerPosition = options.pickerPosition || this.element.data('picker-position') || 'bottom-right';
        this.initialDate = options.initialDate || null;
        this.faCSSprefix = options.faCSSprefix || 'fa';
        this.leftArrow = options.leftArrow || '<i class="' + this.faCSSprefix + ' ' + this.faCSSprefix + '-chevron-left fi-arrow-left"/>';
        this.rightArrow = options.rightArrow || '<i class="' + this.faCSSprefix + ' ' + this.faCSSprefix + '-chevron-right fi-arrow-right"/>';
        this.closeIcon = options.closeIcon || '<i class="' + this.faCSSprefix + ' ' + this.faCSSprefix + '-remove ' + this.faCSSprefix + '-times fi-x"></i>';

        this.minView = 0;
        if ('minView' in options) {
            this.minView = options.minView;
        } else if ('minView' in this.element.data()) {
            this.minView = this.element.data('min-view');
        }
        this.minView = DPGlobal.convertViewMode(this.minView);

        this.maxView = DPGlobal.modes.length - 1;
        if ('maxView' in options) {
            this.maxView = options.maxView;
        } else if ('maxView' in this.element.data()) {
            this.maxView = this.element.data('max-view');
        }
        this.maxView = DPGlobal.convertViewMode(this.maxView);

        this.startViewMode = 'month';
        if ('startView' in options) {
            this.startViewMode = options.startView;
        } else if ('startView' in this.element.data()) {
            this.startViewMode = this.element.data('start-view');
        }
        this.startViewMode = DPGlobal.convertViewMode(this.startViewMode);
        this.viewMode = this.startViewMode;

        if (!('minView' in options) && !('maxView' in options) && !this.element.data('min-view') && !this.element.data('max-view')) {
            this.pickTime = false;
            if ('pickTime' in options) {
                this.pickTime = options.pickTime;
            }
            if (this.pickTime == true) {
                this.minView = 0;
                this.maxView = 4;
            } else {
                this.minView = 2;
                this.maxView = 4;
            }
        }

        this.forceParse = true;
        if ('forceParse' in options) {
            this.forceParse = options.forceParse;
        } else if ('dateForceParse' in this.element.data()) {
            this.forceParse = this.element.data('date-force-parse');
        }

        this.picker = $(DPGlobal.template(this.leftArrow, this.rightArrow, this.closeIcon)).appendTo(this.isInline ? this.element : this.appendTo).on({
            click: $.proxy(this.click, this),
            mousedown: $.proxy(this.mousedown, this)
        });
        if (this.closeButton) {
            this.picker.find('a.datepicker-close').show();
        } else {
            this.picker.find('a.datepicker-close').hide();
        }

        if (this.isInline) {
            this.picker.addClass('datepicker-inline');
        } else {
            this.picker.addClass('datepicker-dropdown dropdown-menu');
        }
        if (this.isRTL) {
            this.picker.addClass('datepicker-rtl');

            this.picker.find('.date-switch').each(function () {
                $(this).parent().prepend($(this).siblings('.next'));
                $(this).parent().append($(this).siblings('.prev'));
            });
            this.picker.find('.prev, .next').toggleClass('prev next');
        }
        $(document).on('mousedown', function (e) {
            if (that.isInput && e.target === that.element[0]) {
                return;
            }

            // Clicked outside the datepicker, hide it
            if ($(e.target).closest('.datepicker.datepicker-inline, .datepicker.datepicker-dropdown').length === 0) {
                that.hide();
            }
        });

        this.autoclose = true;
        if ('autoclose' in options) {
            this.autoclose = options.autoclose;
        } else if ('dateAutoclose' in this.element.data()) {
            this.autoclose = this.element.data('date-autoclose');
        }

        this.keyboardNavigation = true;
        if ('keyboardNavigation' in options) {
            this.keyboardNavigation = options.keyboardNavigation;
        } else if ('dateKeyboardNavigation' in this.element.data()) {
            this.keyboardNavigation = this.element.data('date-keyboard-navigation');
        }

        this.todayBtn = options.todayBtn || this.element.data('date-today-btn') || false;
        this.todayHighlight = options.todayHighlight || this.element.data('date-today-highlight') || false;

        this.calendarWeeks = false;
        if ('calendarWeeks' in options) {
            this.calendarWeeks = options.calendarWeeks;
        } else if ('dateCalendarWeeks' in this.element.data()) {
            this.calendarWeeks = this.element.data('date-calendar-weeks');
        }
        if (this.calendarWeeks) this.picker.find('tfoot th.today').attr('colspan', function (i, val) {
            return parseInt(val) + 1;
        });

        this.weekStart = (options.weekStart || this.element.data('date-weekstart') || dates[this.language].weekStart || 0) % 7;
        this.weekEnd = (this.weekStart + 6) % 7;
        this.startDate = -Infinity;
        this.endDate = Infinity;
        this.daysOfWeekDisabled = [];
        this.datesDisabled = [];
        this.setStartDate(options.startDate || this.element.data('date-startdate'));
        this.setEndDate(options.endDate || this.element.data('date-enddate'));
        this.setDaysOfWeekDisabled(options.daysOfWeekDisabled || this.element.data('date-days-of-week-disabled'));
        this.setDatesDisabled(options.datesDisabled || this.element.data('dates-disabled'));

        this.fillDow();
        this.fillMonths();
        this.update();

        this.showMode();

        if (this.isInline) {
            this.show();
        }

        this._attachEvents();
    };

    Datepicker.prototype = {
        constructor: Datepicker,

        _events: [],
        _attachEvents: function () {
            this._detachEvents();
            if (this.isInput) {
                // single input
                if (!this.keyboardNavigation) {
                    this._events = [[this.element, {
                        focus: this.autoShow ? $.proxy(this.show, this) : function () {}
                    }]];
                } else {
                    this._events = [[this.element, {
                        focus: this.autoShow ? $.proxy(this.show, this) : function () {},
                        keyup: $.proxy(this.update, this),
                        keydown: $.proxy(this.keydown, this),
                        click: this.element.attr('readonly') ? $.proxy(this.show, this) : function () {}
                    }]];
                }
            } else if (this.component && this.hasInput) {
                // component: input + button
                this._events = [
                // For components that are not readonly, allow keyboard nav
                [this.element.find('input'), {
                    focus: this.autoShow ? $.proxy(this.show, this) : function () {},
                    keyup: $.proxy(this.update, this),
                    keydown: $.proxy(this.keydown, this)
                }], [this.component, {
                    click: $.proxy(this.show, this)
                }]];
            } else if (this.element.is('div')) {
                // inline datepicker
                this.isInline = true;
            } else {
                this._events = [[this.element, {
                    click: $.proxy(this.show, this)
                }]];
            }

            if (this.disableDblClickSelection) {
                this._events[this._events.length] = [this.element, {
                    dblclick: function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        $(this).blur();
                    }
                }];
            }

            for (var i = 0, el, ev; i < this._events.length; i++) {
                el = this._events[i][0];
                ev = this._events[i][1];
                el.on(ev);
            }
        },
        _detachEvents: function () {
            for (var i = 0, el, ev; i < this._events.length; i++) {
                el = this._events[i][0];
                ev = this._events[i][1];
                el.off(ev);
            }
            this._events = [];
        },

        show: function (e) {
            this.picker.show();
            this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
            this.update();
            this.place();
            $(window).on('resize', $.proxy(this.place, this));
            if (e) {
                e.stopPropagation();
                e.preventDefault();
            }
            this.element.trigger({
                type: 'show',
                date: this.date
            });
        },

        hide: function (e) {
            if (this.isInline) return;
            if (!this.picker.is(':visible')) return;
            this.picker.hide();
            $(window).off('resize', this.place);
            this.viewMode = this.startViewMode;
            this.showMode();
            if (!this.isInput) {
                $(document).off('mousedown', this.hide);
            }

            if (this.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find('input').val())) this.setValue();
            this.element.trigger({
                type: 'hide',
                date: this.date
            });
        },

        remove: function () {
            this._detachEvents();
            this.picker.remove();
            delete this.element.data().datepicker;
        },

        getDate: function () {
            var d = this.getUTCDate();
            return new Date(d.getTime() + d.getTimezoneOffset() * 60000);
        },

        getUTCDate: function () {
            return this.date;
        },

        setDate: function (d) {
            this.setUTCDate(new Date(d.getTime() - d.getTimezoneOffset() * 60000));
        },

        setUTCDate: function (d) {
            this.date = d;
            this.setValue();
        },

        setValue: function () {
            var formatted = this.getFormattedDate();
            if (!this.isInput) {
                if (this.component) {
                    this.element.find('input').val(formatted);
                }
                this.element.data('date', formatted);
            } else {
                this.element.val(formatted);
            }
        },

        getFormattedDate: function (format) {
            if (format === undefined) format = this.format;
            return DPGlobal.formatDate(this.date, format, this.language);
        },

        setStartDate: function (startDate) {
            this.startDate = startDate || -Infinity;
            if (this.startDate !== -Infinity) {
                this.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language);
            }
            this.update();
            this.updateNavArrows();
        },

        setEndDate: function (endDate) {
            this.endDate = endDate || Infinity;
            if (this.endDate !== Infinity) {
                this.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language);
            }
            this.update();
            this.updateNavArrows();
        },

        setDaysOfWeekDisabled: function (daysOfWeekDisabled) {
            this.daysOfWeekDisabled = daysOfWeekDisabled || [];
            if (!$.isArray(this.daysOfWeekDisabled)) {
                this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\s*/);
            }
            this.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function (d) {
                return parseInt(d, 10);
            });
            this.update();
            this.updateNavArrows();
        },

        setDatesDisabled: function (datesDisabled) {
            this.datesDisabled = datesDisabled || [];
            if (!$.isArray(this.datesDisabled)) {
                this.datesDisabled = this.datesDisabled.split(/,\s*/);
            }
            this.datesDisabled = $.map(this.datesDisabled, function (d) {
                return DPGlobal.parseDate(d, this.format, this.language).valueOf();
            });
            this.update();
            this.updateNavArrows();
        },

        place: function () {
            if (this.isInline) return;
            var zIndex = parseInt(this.element.parents().filter(function () {
                return $(this).css('z-index') != 'auto';
            }).first().css('z-index')) + 10;
            var textbox = this.component ? this.component : this.element;
            var offset = textbox.offset();
            var height = textbox.outerHeight() + parseInt(textbox.css('margin-top'));
            var width = textbox.outerWidth() + parseInt(textbox.css('margin-left'));
            var fullOffsetTop = offset.top + height;
            var offsetLeft = offset.left;
            this.picker.removeClass('datepicker-top datepicker-bottom');
            // if the datepicker is going to be below the window, show it on top of the input
            if (fullOffsetTop + this.picker.outerHeight() >= $(window).scrollTop() + $(window).height()) {
                fullOffsetTop = offset.top - this.picker.outerHeight();
                this.picker.addClass('datepicker-top');
            } else {
                this.picker.addClass('datepicker-bottom');
            }

            // if the datepicker is going to go past the right side of the window, we want
            // to set the right position so the datepicker lines up with the textbox
            if (offset.left + this.picker.width() >= $(window).width()) {
                offsetLeft = offset.left + width - this.picker.width();
            }
            this.picker.css({
                top: fullOffsetTop,
                left: offsetLeft,
                zIndex: zIndex
            });
        },

        update: function () {
            var date,
                fromArgs = false;
            var currentVal = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();
            if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {
                date = arguments[0];
                fromArgs = true;
            } else if (!currentVal && this.initialDate != null) {
                // If value is not set, set it to the initialDate 
                date = this.initialDate;
            } else {
                date = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();
            }

            if (date && date.length > this.formatText.length) {
                $(this.picker).addClass('is-invalid');
                $(this.element).addClass('is-invalid-input');
                return;
            } else {
                $(this.picker).removeClass('is-invalid');
                $(this.element).removeClass('is-invalid-input');
            }

            this.date = DPGlobal.parseDate(date, this.format, this.language);

            if (fromArgs || this.initialDate != null) this.setValue();

            if (this.date < this.startDate) {
                this.viewDate = new Date(this.startDate.valueOf());
            } else if (this.date > this.endDate) {
                this.viewDate = new Date(this.endDate.valueOf());
            } else {
                this.viewDate = new Date(this.date.valueOf());
            }
            this.fill();
        },

        fillDow: function () {
            var dowCnt = this.weekStart,
                html = '<tr>';
            if (this.calendarWeeks) {
                var cell = '<th class="cw">&nbsp;</th>';
                html += cell;
                this.picker.find('.datepicker-days thead tr:first-child').prepend(cell);
            }
            while (dowCnt < this.weekStart + 7) {
                html += '<th class="dow">' + dates[this.language].daysMin[dowCnt++ % 7] + '</th>';
            }
            html += '</tr>';
            this.picker.find('.datepicker-days thead').append(html);
        },

        fillMonths: function () {
            var html = '',
                i = 0;
            while (i < 12) {
                html += '<span class="month">' + dates[this.language].monthsShort[i++] + '</span>';
            }
            this.picker.find('.datepicker-months td').html(html);
        },

        fill: function () {
            if (this.date == null || this.viewDate == null) {
                return;
            }

            var d = new Date(this.viewDate.valueOf()),
                year = d.getUTCFullYear(),
                month = d.getUTCMonth(),
                dayMonth = d.getUTCDate(),
                hours = d.getUTCHours(),
                minutes = d.getUTCMinutes(),
                startYear = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity,
                startMonth = this.startDate !== -Infinity ? this.startDate.getUTCMonth() : -Infinity,
                endYear = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity,
                endMonth = this.endDate !== Infinity ? this.endDate.getUTCMonth() : Infinity,
                currentDate = this.date && UTCDate(this.date.getUTCFullYear(), this.date.getUTCMonth(), this.date.getUTCDate()).valueOf(),
                today = new Date(),
                titleFormat = dates[this.language].titleFormat || dates['en'].titleFormat;
            // this.picker.find('.datepicker-days thead th.date-switch')
            // 			.text(DPGlobal.formatDate(new UTCDate(year, month), titleFormat, this.language));

            this.picker.find('.datepicker-days thead th:eq(1)').text(dates[this.language].months[month] + ' ' + year);
            this.picker.find('.datepicker-hours thead th:eq(1)').text(dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);
            this.picker.find('.datepicker-minutes thead th:eq(1)').text(dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);

            this.picker.find('tfoot th.today').text(dates[this.language].today).toggle(this.todayBtn !== false);
            this.updateNavArrows();
            this.fillMonths();
            var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),
                day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());
            prevMonth.setUTCDate(day);
            prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7);
            var nextMonth = new Date(prevMonth.valueOf());
            nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);
            nextMonth = nextMonth.valueOf();
            var html = [];
            var clsName;
            while (prevMonth.valueOf() < nextMonth) {
                if (prevMonth.getUTCDay() == this.weekStart) {
                    html.push('<tr>');
                    if (this.calendarWeeks) {
                        // adapted from https://github.com/timrwood/moment/blob/master/moment.js#L128
                        var a = new Date(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth(), prevMonth.getUTCDate() - prevMonth.getDay() + 10 - (this.weekStart && this.weekStart % 7 < 5 && 7)),
                            b = new Date(a.getFullYear(), 0, 4),
                            calWeek = ~~((a - b) / 864e5 / 7 + 1.5);
                        html.push('<td class="cw">' + calWeek + '</td>');
                    }
                }
                clsName = ' ' + this.onRender(prevMonth) + ' ';
                if (prevMonth.getUTCFullYear() < year || prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() < month) {
                    clsName += ' old';
                } else if (prevMonth.getUTCFullYear() > year || prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() > month) {
                    clsName += ' new';
                }
                // Compare internal UTC date with local today, not UTC today
                if (this.todayHighlight && prevMonth.getUTCFullYear() == today.getFullYear() && prevMonth.getUTCMonth() == today.getMonth() && prevMonth.getUTCDate() == today.getDate()) {
                    clsName += ' today';
                }
                if (currentDate && prevMonth.valueOf() == currentDate) {
                    clsName += ' active';
                }
                if (prevMonth.valueOf() < this.startDate || prevMonth.valueOf() > this.endDate || $.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1 || $.inArray(prevMonth.valueOf(), this.datesDisabled) !== -1) {
                    clsName += ' disabled';
                }
                html.push('<td class="day' + clsName + '">' + prevMonth.getUTCDate() + '</td>');
                if (prevMonth.getUTCDay() == this.weekEnd) {
                    html.push('</tr>');
                }
                prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);
            }
            this.picker.find('.datepicker-days tbody').empty().append(html.join(''));

            html = [];
            for (var i = 0; i < 24; i++) {
                var actual = UTCDate(year, month, dayMonth, i);
                clsName = '';
                // We want the previous hour for the startDate
                if (actual.valueOf() + 3600000 < this.startDate || actual.valueOf() > this.endDate) {
                    clsName += ' disabled';
                } else if (hours == i) {
                    clsName += ' active';
                }
                html.push('<span class="hour' + clsName + '">' + i + ':00</span>');
            }
            this.picker.find('.datepicker-hours td').html(html.join(''));

            html = [];
            for (var i = 0; i < 60; i += this.minuteStep) {
                var actual = UTCDate(year, month, dayMonth, hours, i);
                clsName = '';
                if (actual.valueOf() < this.startDate || actual.valueOf() > this.endDate) {
                    clsName += ' disabled';
                } else if (Math.floor(minutes / this.minuteStep) == Math.floor(i / this.minuteStep)) {
                    clsName += ' active';
                }
                html.push('<span class="minute' + clsName + '">' + hours + ':' + (i < 10 ? '0' + i : i) + '</span>');
            }
            this.picker.find('.datepicker-minutes td').html(html.join(''));

            var currentYear = this.date && this.date.getUTCFullYear();
            var months = this.picker.find('.datepicker-months').find('th:eq(1)').text(year).end().find('span').removeClass('active');
            if (currentYear && currentYear == year) {
                months.eq(this.date.getUTCMonth()).addClass('active');
            }
            if (year < startYear || year > endYear) {
                months.addClass('disabled');
            }
            if (year == startYear) {
                months.slice(0, startMonth).addClass('disabled');
            }
            if (year == endYear) {
                months.slice(endMonth + 1).addClass('disabled');
            }

            html = '';
            year = parseInt(year / 10, 10) * 10;
            var yearCont = this.picker.find('.datepicker-years').find('th:eq(1)').text(year + '-' + (year + 9)).end().find('td');
            year -= 1;
            for (var i = -1; i < 11; i++) {
                html += '<span class="year' + (i == -1 || i == 10 ? ' old' : '') + (currentYear == year ? ' active' : '') + (year < startYear || year > endYear ? ' disabled' : '') + '">' + year + '</span>';
                year += 1;
            }
            yearCont.html(html);
        },

        updateNavArrows: function () {
            var d = new Date(this.viewDate),
                year = d.getUTCFullYear(),
                month = d.getUTCMonth(),
                day = d.getUTCDate(),
                hour = d.getUTCHours();
            switch (this.viewMode) {
                case 0:
                    if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth() && day <= this.startDate.getUTCDate() && hour <= this.startDate.getUTCHours()) {
                        this.picker.find('.prev').css({
                            visibility: 'hidden'
                        });
                    } else {
                        this.picker.find('.prev').css({
                            visibility: 'visible'
                        });
                    }
                    if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth() && day >= this.endDate.getUTCDate() && hour >= this.endDate.getUTCHours()) {
                        this.picker.find('.next').css({
                            visibility: 'hidden'
                        });
                    } else {
                        this.picker.find('.next').css({
                            visibility: 'visible'
                        });
                    }
                    break;
                case 1:
                    if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth() && day <= this.startDate.getUTCDate()) {
                        this.picker.find('.prev').css({
                            visibility: 'hidden'
                        });
                    } else {
                        this.picker.find('.prev').css({
                            visibility: 'visible'
                        });
                    }
                    if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth() && day >= this.endDate.getUTCDate()) {
                        this.picker.find('.next').css({
                            visibility: 'hidden'
                        });
                    } else {
                        this.picker.find('.next').css({
                            visibility: 'visible'
                        });
                    }
                    break;
                case 2:
                    if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth()) {
                        this.picker.find('.prev').css({
                            visibility: 'hidden'
                        });
                    } else {
                        this.picker.find('.prev').css({
                            visibility: 'visible'
                        });
                    }
                    if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth()) {
                        this.picker.find('.next').css({
                            visibility: 'hidden'
                        });
                    } else {
                        this.picker.find('.next').css({
                            visibility: 'visible'
                        });
                    }
                    break;
                case 3:
                case 4:
                    if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()) {
                        this.picker.find('.prev').css({
                            visibility: 'hidden'
                        });
                    } else {
                        this.picker.find('.prev').css({
                            visibility: 'visible'
                        });
                    }
                    if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()) {
                        this.picker.find('.next').css({
                            visibility: 'hidden'
                        });
                    } else {
                        this.picker.find('.next').css({
                            visibility: 'visible'
                        });
                    }
                    break;
            }
        },

        click: function (e) {
            e.stopPropagation();
            e.preventDefault();

            if ($(e.target).hasClass('datepicker-close') || $(e.target).parent().hasClass('datepicker-close')) {
                this.hide();
            }

            var target = $(e.target).closest('span, td, th');
            if (target.length == 1) {
                if (target.is('.disabled')) {
                    this.element.trigger({
                        type: 'outOfRange',
                        date: this.viewDate,
                        startDate: this.startDate,
                        endDate: this.endDate
                    });
                    return;
                }

                switch (target[0].nodeName.toLowerCase()) {
                    case 'th':
                        switch (target[0].className) {
                            case 'date-switch':
                                this.showMode(1);
                                break;
                            case 'prev':
                            case 'next':
                                var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);
                                switch (this.viewMode) {
                                    case 0:
                                        this.viewDate = this.moveHour(this.viewDate, dir);
                                        break;
                                    case 1:
                                        this.viewDate = this.moveDate(this.viewDate, dir);
                                        break;
                                    case 2:
                                        this.viewDate = this.moveMonth(this.viewDate, dir);
                                        break;
                                    case 3:
                                    case 4:
                                        this.viewDate = this.moveYear(this.viewDate, dir);
                                        break;
                                }
                                this.fill();
                                break;
                            case 'today':
                                var date = new Date();
                                date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());

                                this.viewMode = this.startViewMode;
                                this.showMode(0);
                                this._setDate(date);
                                break;
                        }
                        break;
                    case 'span':
                        if (!target.is('.disabled')) {
                            if (target.is('.month')) {
                                if (this.minView === 3) {
                                    var month = target.parent().find('span').index(target) || 0;
                                    var year = this.viewDate.getUTCFullYear(),
                                        day = 1,
                                        hours = this.viewDate.getUTCHours(),
                                        minutes = this.viewDate.getUTCMinutes(),
                                        seconds = this.viewDate.getUTCSeconds();
                                    this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                                } else {
                                    this.viewDate.setUTCDate(1);
                                    var month = target.parent().find('span').index(target);
                                    this.viewDate.setUTCMonth(month);
                                    this.element.trigger({
                                        type: 'changeMonth',
                                        date: this.viewDate
                                    });
                                }
                            } else if (target.is('.year')) {
                                if (this.minView === 4) {
                                    var year = parseInt(target.text(), 10) || 0;
                                    var month = 0,
                                        day = 1,
                                        hours = this.viewDate.getUTCHours(),
                                        minutes = this.viewDate.getUTCMinutes(),
                                        seconds = this.viewDate.getUTCSeconds();
                                    this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                                } else {
                                    this.viewDate.setUTCDate(1);
                                    var year = parseInt(target.text(), 10) || 0;
                                    this.viewDate.setUTCFullYear(year);
                                    this.element.trigger({
                                        type: 'changeYear',
                                        date: this.viewDate
                                    });
                                }
                            } else if (target.is('.hour')) {
                                var hours = parseInt(target.text(), 10) || 0;
                                var year = this.viewDate.getUTCFullYear(),
                                    month = this.viewDate.getUTCMonth(),
                                    day = this.viewDate.getUTCDate(),
                                    minutes = this.viewDate.getUTCMinutes(),
                                    seconds = this.viewDate.getUTCSeconds();
                                this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                            } else if (target.is('.minute')) {
                                var minutes = parseInt(target.text().substr(target.text().indexOf(':') + 1), 10) || 0;
                                var year = this.viewDate.getUTCFullYear(),
                                    month = this.viewDate.getUTCMonth(),
                                    day = this.viewDate.getUTCDate(),
                                    hours = this.viewDate.getUTCHours(),
                                    seconds = this.viewDate.getUTCSeconds();
                                this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                            }

                            if (this.viewMode != 0) {

                                var oldViewMode = this.viewMode;
                                this.showMode(-1);
                                this.fill();
                                if (oldViewMode == this.viewMode && this.autoclose) {
                                    this.hide();
                                }
                            } else {
                                this.fill();
                                if (this.autoclose) {
                                    this.hide();
                                }
                            }
                        }
                        break;
                    case 'td':

                        if (target.is('.day') && !target.is('.disabled')) {
                            var day = parseInt(target.text(), 10) || 1;
                            var year = this.viewDate.getUTCFullYear(),
                                month = this.viewDate.getUTCMonth(),
                                hours = this.viewDate.getUTCHours(),
                                minutes = this.viewDate.getUTCMinutes(),
                                seconds = this.viewDate.getUTCSeconds();
                            if (target.is('.old')) {
                                if (month === 0) {
                                    month = 11;
                                    year -= 1;
                                } else {
                                    month -= 1;
                                }
                            } else if (target.is('.new')) {
                                if (month == 11) {
                                    month = 0;
                                    year += 1;
                                } else {
                                    month += 1;
                                }
                            }
                            this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));
                        }

                        var oldViewMode = this.viewMode;

                        this.showMode(-1);

                        this.fill();
                        if (oldViewMode == this.viewMode && this.autoclose) {
                            this.hide();
                        }
                        break;
                }
            }
        },

        _setDate: function (date, which) {

            if (!which || which == 'date') this.date = date;
            if (!which || which == 'view') this.viewDate = date;
            this.fill();
            this.setValue();
            this.element.trigger({
                type: 'changeDate',
                date: this.date
            });
            var element;
            if (this.isInput) {
                element = this.element;
            } else if (this.component) {
                element = this.element.find('input');
            }
            if (element) {
                element.change();
                if (this.autoclose && (!which || which == 'date')) {
                    // this.hide();
                }
            }
        },

        moveHour: function (date, dir) {
            if (!dir) return date;
            var new_date = new Date(date.valueOf());
            dir = dir > 0 ? 1 : -1;
            new_date.setUTCHours(new_date.getUTCHours() + dir);
            return new_date;
        },

        moveDate: function (date, dir) {
            if (!dir) return date;
            var new_date = new Date(date.valueOf());
            dir = dir > 0 ? 1 : -1;
            new_date.setUTCDate(new_date.getUTCDate() + dir);
            return new_date;
        },

        moveMonth: function (date, dir) {
            if (!dir) return date;
            var new_date = new Date(date.valueOf()),
                day = new_date.getUTCDate(),
                month = new_date.getUTCMonth(),
                mag = Math.abs(dir),
                new_month,
                test;
            dir = dir > 0 ? 1 : -1;
            if (mag == 1) {
                test = dir == -1
                // If going back one month, make sure month is not current month
                // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)
                ? function () {
                    return new_date.getUTCMonth() == month;
                }
                // If going forward one month, make sure month is as expected
                // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)
                : function () {
                    return new_date.getUTCMonth() != new_month;
                };
                new_month = month + dir;
                new_date.setUTCMonth(new_month);
                // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11
                if (new_month < 0 || new_month > 11) new_month = (new_month + 12) % 12;
            } else {
                // For magnitudes >1, move one month at a time...
                for (var i = 0; i < mag; i++)
                // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...
                new_date = this.moveMonth(new_date, dir);
                // ...then reset the day, keeping it in the new month
                new_month = new_date.getUTCMonth();
                new_date.setUTCDate(day);
                test = function () {
                    return new_month != new_date.getUTCMonth();
                };
            }
            // Common date-resetting loop -- if date is beyond end of month, make it
            // end of month
            while (test()) {
                new_date.setUTCDate(--day);
                new_date.setUTCMonth(new_month);
            }
            return new_date;
        },

        moveYear: function (date, dir) {
            return this.moveMonth(date, dir * 12);
        },

        dateWithinRange: function (date) {
            return date >= this.startDate && date <= this.endDate;
        },

        keydown: function (e) {
            if (!this.keyboardNavigation) {
                return true;
            }
            if (this.picker.is(':not(:visible)')) {
                if (e.keyCode == 27) // allow escape to hide and re-show picker
                    this.show();
                return;
            }
            var dateChanged = false,
                dir,
                day,
                month,
                newDate,
                newViewDate;
            switch (e.keyCode) {
                case 27:
                    // escape
                    this.hide();
                    e.preventDefault();
                    break;
                case 37: // left
                case 39:
                    // right
                    if (!this.keyboardNavigation) break;
                    dir = e.keyCode == 37 ? -1 : 1;
                    if (e.ctrlKey) {
                        newDate = this.moveYear(this.date, dir);
                        newViewDate = this.moveYear(this.viewDate, dir);
                    } else if (e.shiftKey) {
                        newDate = this.moveMonth(this.date, dir);
                        newViewDate = this.moveMonth(this.viewDate, dir);
                    } else {
                        newDate = new Date(this.date.valueOf());
                        newDate.setUTCDate(this.date.getUTCDate() + dir);
                        newViewDate = new Date(this.viewDate.valueOf());
                        newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);
                    }
                    if (this.dateWithinRange(newDate)) {
                        this.date = newDate;
                        this.viewDate = newViewDate;
                        this.setValue();
                        this.update();
                        e.preventDefault();
                        dateChanged = true;
                    }
                    break;
                case 38: // up
                case 40:
                    // down
                    if (!this.keyboardNavigation) break;
                    dir = e.keyCode == 38 ? -1 : 1;
                    if (e.ctrlKey) {
                        newDate = this.moveYear(this.date, dir);
                        newViewDate = this.moveYear(this.viewDate, dir);
                    } else if (e.shiftKey) {
                        newDate = this.moveMonth(this.date, dir);
                        newViewDate = this.moveMonth(this.viewDate, dir);
                    } else {
                        newDate = new Date(this.date.valueOf());
                        newDate.setUTCDate(this.date.getUTCDate() + dir * 7);
                        newViewDate = new Date(this.viewDate.valueOf());
                        newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);
                    }
                    if (this.dateWithinRange(newDate)) {
                        this.date = newDate;
                        this.viewDate = newViewDate;
                        this.setValue();
                        this.update();
                        e.preventDefault();
                        dateChanged = true;
                    }
                    break;
                case 13:
                    // enter
                    this.hide();
                    e.preventDefault();
                    break;
                case 9:
                    // tab
                    this.hide();
                    break;
            }
            if (dateChanged) {
                this.element.trigger({
                    type: 'changeDate',
                    date: this.date
                });
                var element;
                if (this.isInput) {
                    element = this.element;
                } else if (this.component) {
                    element = this.element.find('input');
                }
                if (element) {
                    element.change();
                }
            }
        },

        showMode: function (dir) {

            if (dir) {
                var newViewMode = Math.max(0, Math.min(DPGlobal.modes.length - 1, this.viewMode + dir));
                if (newViewMode >= this.minView && newViewMode <= this.maxView) {
                    this.viewMode = newViewMode;
                }
            }
            /*
            	vitalets: fixing bug of very special conditions:
            	jquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.
            	Method show() does not set display css correctly and datepicker is not shown.
            	Changed to .css('display', 'block') solve the problem.
            	See https://github.com/vitalets/x-editable/issues/37
             	In jquery 1.7.2+ everything works fine.
            */
            //this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();
            this.picker.find('>div').hide().filter('.datepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
            this.updateNavArrows();
        },
        reset: function (e) {
            this._setDate(null, 'date');
        }
    };

    $.fn.fdatepicker = function (option) {
        var args = Array.apply(null, arguments);
        args.shift();
        return this.each(function () {
            var $this = $(this),
                data = $this.data('datepicker'),
                options = typeof option == 'object' && option;
            if (!data) {
                $this.data('datepicker', data = new Datepicker(this, $.extend({}, $.fn.fdatepicker.defaults, options)));
            }
            if (typeof option == 'string' && typeof data[option] == 'function') {
                data[option].apply(data, args);
            }
        });
    };

    $.fn.fdatepicker.defaults = {
        onRender: function (date) {
            return '';
        }
    };
    $.fn.fdatepicker.Constructor = Datepicker;
    var dates = $.fn.fdatepicker.dates = {
        'en': {
            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
            daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            today: "Today",
            titleFormat: "MM yyyy"
        }
    };

    var DPGlobal = {
        modes: [{
            clsName: 'minutes',
            navFnc: 'Hours',
            navStep: 1
        }, {
            clsName: 'hours',
            navFnc: 'Date',
            navStep: 1
        }, {
            clsName: 'days',
            navFnc: 'Month',
            navStep: 1
        }, {
            clsName: 'months',
            navFnc: 'FullYear',
            navStep: 1
        }, {
            clsName: 'years',
            navFnc: 'FullYear',
            navStep: 10
        }],
        isLeapYear: function (year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        },
        getDaysInMonth: function (year, month) {
            return [31, DPGlobal.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
        },
        validParts: /hh?|ii?|ss?|dd?|mm?|MM?|yy(?:yy)?/g,
        nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,
        parseFormat: function (format) {
            // IE treats \0 as a string end in inputs (truncating the value),
            // so it's a bad format delimiter, anyway
            var separators = format.replace(this.validParts, '\0').split('\0'),
                parts = format.match(this.validParts);
            if (!separators || !separators.length || !parts || parts.length === 0) {
                throw new Error("Invalid date format.");
            }
            this.formatText = format;
            return {
                separators: separators,
                parts: parts
            };
        },
        parseDate: function (date, format, language) {
            if (date instanceof Date) return new Date(date.valueOf() - date.getTimezoneOffset() * 60000);
            if (/^\d{4}\-\d{1,2}\-\d{1,2}$/.test(date)) {
                format = this.parseFormat('yyyy-mm-dd');
            }
            if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}$/.test(date)) {
                format = this.parseFormat('yyyy-mm-dd hh:ii');
            }
            if (/^\d{4}\-\d{1,2}\-\d{1,2}[T ]\d{1,2}\:\d{1,2}\:\d{1,2}[Z]{0,1}$/.test(date)) {
                format = this.parseFormat('yyyy-mm-dd hh:ii:ss');
            }
            if (/^[-+]\d+[dmwy]([\s,]+[-+]\d+[dmwy])*$/.test(date)) {
                var part_re = /([-+]\d+)([dmwy])/,
                    parts = date.match(/([-+]\d+)([dmwy])/g),
                    part,
                    dir;
                date = new Date();
                for (var i = 0; i < parts.length; i++) {
                    part = part_re.exec(parts[i]);
                    dir = parseInt(part[1]);
                    switch (part[2]) {
                        case 'd':
                            date.setUTCDate(date.getUTCDate() + dir);
                            break;
                        case 'm':
                            date = Datetimepicker.prototype.moveMonth.call(Datetimepicker.prototype, date, dir);
                            break;
                        case 'w':
                            date.setUTCDate(date.getUTCDate() + dir * 7);
                            break;
                        case 'y':
                            date = Datetimepicker.prototype.moveYear.call(Datetimepicker.prototype, date, dir);
                            break;
                    }
                }
                return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
            }
            var parts = date && date.match(this.nonpunctuation) || [],
                date = new Date(),
                parsed = {},
                setters_order = ['hh', 'h', 'ii', 'i', 'ss', 's', 'yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],
                setters_map = {
                hh: function (d, v) {
                    return d.setUTCHours(v);
                },
                h: function (d, v) {
                    return d.setUTCHours(v);
                },
                ii: function (d, v) {
                    return d.setUTCMinutes(v);
                },
                i: function (d, v) {
                    return d.setUTCMinutes(v);
                },
                ss: function (d, v) {
                    return d.setUTCSeconds(v);
                },
                s: function (d, v) {
                    return d.setUTCSeconds(v);
                },
                yyyy: function (d, v) {
                    return d.setUTCFullYear(v);
                },
                yy: function (d, v) {
                    return d.setUTCFullYear(2000 + v);
                },
                m: function (d, v) {
                    v -= 1;
                    while (v < 0) v += 12;
                    v %= 12;
                    d.setUTCMonth(v);
                    while (d.getUTCMonth() != v) d.setUTCDate(d.getUTCDate() - 1);
                    return d;
                },
                d: function (d, v) {
                    return d.setUTCDate(v);
                }
            },
                val,
                filtered,
                part;
            setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];
            setters_map['dd'] = setters_map['d'];
            date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0); //date.getHours(), date.getMinutes(), date.getSeconds());
            if (parts.length == format.parts.length) {
                for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
                    val = parseInt(parts[i], 10);
                    part = format.parts[i];
                    if (isNaN(val)) {
                        switch (part) {
                            case 'MM':
                                filtered = $(dates[language].months).filter(function () {
                                    var m = this.slice(0, parts[i].length),
                                        p = parts[i].slice(0, m.length);
                                    return m == p;
                                });
                                val = $.inArray(filtered[0], dates[language].months) + 1;
                                break;
                            case 'M':
                                filtered = $(dates[language].monthsShort).filter(function () {
                                    var m = this.slice(0, parts[i].length),
                                        p = parts[i].slice(0, m.length);
                                    return m == p;
                                });
                                val = $.inArray(filtered[0], dates[language].monthsShort) + 1;
                                break;
                        }
                    }
                    parsed[part] = val;
                }
                for (var i = 0, s; i < setters_order.length; i++) {
                    s = setters_order[i];
                    if (s in parsed && !isNaN(parsed[s])) setters_map[s](date, parsed[s]);
                }
            }
            return date;
        },
        formatDate: function (date, format, language) {
            if (date == null) {
                return '';
            }
            var val = {
                h: date.getUTCHours(),
                i: date.getUTCMinutes(),
                s: date.getUTCSeconds(),
                d: date.getUTCDate(),
                m: date.getUTCMonth() + 1,
                M: dates[language].monthsShort[date.getUTCMonth()],
                MM: dates[language].months[date.getUTCMonth()],
                yy: date.getUTCFullYear().toString().substring(2),
                yyyy: date.getUTCFullYear()
            };
            val.hh = (val.h < 10 ? '0' : '') + val.h;
            val.ii = (val.i < 10 ? '0' : '') + val.i;
            val.ss = (val.s < 10 ? '0' : '') + val.s;
            val.dd = (val.d < 10 ? '0' : '') + val.d;
            val.mm = (val.m < 10 ? '0' : '') + val.m;
            var date = [],
                seps = $.extend([], format.separators);
            for (var i = 0, cnt = format.parts.length; i < cnt; i++) {
                if (seps.length) date.push(seps.shift());
                date.push(val[format.parts[i]]);
            }
            return date.join('');
        },
        convertViewMode: function (viewMode) {
            switch (viewMode) {
                case 4:
                case 'decade':
                    viewMode = 4;
                    break;
                case 3:
                case 'year':
                    viewMode = 3;
                    break;
                case 2:
                case 'month':
                    viewMode = 2;
                    break;
                case 1:
                case 'day':
                    viewMode = 1;
                    break;
                case 0:
                case 'hour':
                    viewMode = 0;
                    break;
            }

            return viewMode;
        },
        headTemplate: function (leftArrow, rightArrow) {
            return '<thead>' + '<tr>' + '<th class="prev">' + leftArrow + '</th>' + '<th colspan="5" class="date-switch"></th>' + '<th class="next">' + rightArrow + '</th>' + '</tr>' + '</thead>';
        },
        contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
        footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr></tfoot>'
    };
    DPGlobal.template = function (leftArrow, rightArrow, closeIcon) {
        return '<div class="datepicker">' + '<div class="datepicker-minutes">' + '<table class=" table-condensed">' + DPGlobal.headTemplate(leftArrow, rightArrow) + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-hours">' + '<table class=" table-condensed">' + DPGlobal.headTemplate(leftArrow, rightArrow) + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-days">' + '<table class=" table-condensed">' + DPGlobal.headTemplate(leftArrow, rightArrow) + '<tbody></tbody>' + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-months">' + '<table class="table-condensed">' + DPGlobal.headTemplate(leftArrow, rightArrow) + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class="datepicker-years">' + '<table class="table-condensed">' + DPGlobal.headTemplate(leftArrow, rightArrow) + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<a class="button datepicker-close tiny alert right" style="width:auto;">' + closeIcon + '</a>' + '</div>';
    };

    $.fn.fdatepicker.DPGlobal = DPGlobal;
}(window.jQuery);
;!function ($) {

    $(document).ready(function () {

        //
        // date picker
        //
        $('#datepicker').fdatepicker({
            format: 'yyyymmdd'
        }).on('changeDate', function (ev) {
            var new_date = $('#datepicker').data('date');
            // assign to hidden input
            $('#date').val(new_date);
            // show in select drop down
            var dateAr = new_date.split('-');
            $('#date_display').text(new_date.substring(6, 8) + '/' + new_date.substring(4, 6) + '/' + new_date.substring(2, 4));
            $('#date_type').val('date');
        });

        //
        // speceifc day click
        //
        $('#date_type').change(function () {
            // show datepicker
            if ($(this).val() == 'date') {
                $('#datepicker').click();
            }
        });

        // submit events form
        $('#events-form').on('submit', function (e) {

            e.preventDefault();

            $('#events-results-spinner').show();
            $('#load-more-events').hide();
            $('#no-events-found').hide();

            // reset page number
            $('input[name="page_number"]').val(1);

            var data = $("#events-form").serializeArray();

            var ajax_data = {
                'action': 'events_ajax_get_events',
                'data': data
            };

            jQuery.post(js_vars.ajaxurl + window.location.search, ajax_data, function (response) {

                // replace events list
                $('#events-results-spinner').hide();
                $('#events-results').html(response);

                if (response.indexOf("accordion") >= 0) {
                    // has results

                    // count how many rows and if 20 or more then show load more
                    var number_of_rows = $($.parseHTML(response)).find('li').length;
                    if (number_of_rows == $('input[name="per_page"]').val()) {
                        $('#load-more-events').show();
                    } else {
                        $('#load-more-events').hide();
                    }

                    //  page number
                    $('input[name="page_number"]').val(2);

                    // recalc accordians
                    $(document).foundation();
                } else {
                    //no results
                    $('#no-events-found').show();
                }
            });
        });

        // load more
        $('#load-more-events').on('click', function (e) {

            $('#load-more-events').prop("disabled", true);
            $('#load-more-events-spinner').show();

            var data = $("#events-form").serializeArray();

            var ajax_data = {
                'action': 'events_ajax_get_events',
                'data': data
            };

            jQuery.post(js_vars.ajaxurl + window.location.search, ajax_data, function (response) {

                $('#load-more-events').prop("disabled", false);
                $('#load-more-events-spinner').hide();

                // replace events list
                $('#events-results').append(response);

                if (response.indexOf("accordion") >= 0) {
                    // has results

                    // count how many rows and if 20 or more then show load more
                    var number_of_rows = $($.parseHTML(response)).find('li').length;
                    if (number_of_rows == $('input[name="per_page"]').val()) {
                        $('#load-more-events').show();
                    } else {
                        $('#load-more-events').hide();
                    }

                    // increase page number
                    page_number = parseInt($('input[name="page_number"]').val());
                    $('input[name="page_number"]').val(page_number + 1);

                    // recalc accordians
                    $(document).foundation();
                } else {
                    //no results
                    $('#load-more-events').hide();
                }
            });
        });
    });
}(window.jQuery);
;jQuery('iframe[src*="youtube.com"]').wrap("<div class='flex-video widescreen'/>");
jQuery('iframe[src*="vimeo.com"]').wrap("<div class='flex-video widescreen vimeo'/>");
;jQuery(document).foundation();
;// Joyride demo
$('#start-jr').on('click', function () {
  $(document).foundation('joyride', 'start');
});
;/**
 * author Christopher Blum
 *    - based on the idea of Remy Sharp, http://remysharp.com/2009/01/26/element-in-view-event-plugin/
 *    - forked from http://github.com/zuk/jquery.inview/
 */
(function (factory) {
  if (typeof define == 'function' && define.amd) {
    // AMD
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    // Node, CommonJS
    module.exports = factory(require('jquery'));
  } else {
    // Browser globals
    factory(jQuery);
  }
})(function ($) {

  var inviewObjects = [],
      viewportSize,
      viewportOffset,
      d = document,
      w = window,
      documentElement = d.documentElement,
      timer;

  $.event.special.inview = {
    add: function (data) {
      inviewObjects.push({ data: data, $element: $(this), element: this });
      // Use setInterval in order to also make sure this captures elements within
      // "overflow:scroll" elements or elements that appeared in the dom tree due to
      // dom manipulation and reflow
      // old: $(window).scroll(checkInView);
      //
      // By the way, iOS (iPad, iPhone, ...) seems to not execute, or at least delays
      // intervals while the user scrolls. Therefore the inview event might fire a bit late there
      //
      // Don't waste cycles with an interval until we get at least one element that
      // has bound to the inview event.
      if (!timer && inviewObjects.length) {
        timer = setInterval(checkInView, 250);
      }
    },

    remove: function (data) {
      for (var i = 0; i < inviewObjects.length; i++) {
        var inviewObject = inviewObjects[i];
        if (inviewObject.element === this && inviewObject.data.guid === data.guid) {
          inviewObjects.splice(i, 1);
          break;
        }
      }

      // Clear interval when we no longer have any elements listening
      if (!inviewObjects.length) {
        clearInterval(timer);
        timer = null;
      }
    }
  };

  function getViewportSize() {
    var mode,
        domObject,
        size = { height: w.innerHeight, width: w.innerWidth };

    // if this is correct then return it. iPad has compat Mode, so will
    // go into check clientHeight/clientWidth (which has the wrong value).
    if (!size.height) {
      mode = d.compatMode;
      if (mode || !$.support.boxModel) {
        // IE, Gecko
        domObject = mode === 'CSS1Compat' ? documentElement : // Standards
        d.body; // Quirks
        size = {
          height: domObject.clientHeight,
          width: domObject.clientWidth
        };
      }
    }

    return size;
  }

  function getViewportOffset() {
    return {
      top: w.pageYOffset || documentElement.scrollTop || d.body.scrollTop,
      left: w.pageXOffset || documentElement.scrollLeft || d.body.scrollLeft
    };
  }

  function checkInView() {
    if (!inviewObjects.length) {
      return;
    }

    var i = 0,
        $elements = $.map(inviewObjects, function (inviewObject) {
      var selector = inviewObject.data.selector,
          $element = inviewObject.$element;
      return selector ? $element.find(selector) : $element;
    });

    viewportSize = viewportSize || getViewportSize();
    viewportOffset = viewportOffset || getViewportOffset();

    for (; i < inviewObjects.length; i++) {
      // Ignore elements that are not in the DOM tree
      if (!$.contains(documentElement, $elements[i][0])) {
        continue;
      }

      var $element = $($elements[i]),
          elementSize = { height: $element[0].offsetHeight, width: $element[0].offsetWidth },
          elementOffset = $element.offset(),
          inView = $element.data('inview');

      // Don't ask me why because I haven't figured out yet:
      // viewportOffset and viewportSize are sometimes suddenly null in Firefox 5.
      // Even though it sounds weird:
      // It seems that the execution of this function is interferred by the onresize/onscroll event
      // where viewportOffset and viewportSize are unset
      if (!viewportOffset || !viewportSize) {
        return;
      }

      if (elementOffset.top + elementSize.height > viewportOffset.top && elementOffset.top < viewportOffset.top + viewportSize.height * 2 && elementOffset.left + elementSize.width > viewportOffset.left && elementOffset.left < viewportOffset.left + viewportSize.width) {
        if (!inView) {
          $element.data('inview', true).trigger('inview', [true]);
        }
      } else if (inView) {
        $element.data('inview', false).trigger('inview', [false]);
      }
    }
  }

  $(w).on("scroll resize scrollstop", function () {
    viewportSize = viewportOffset = null;
  });

  // IE < 9 scrolls to focused elements without firing the "scroll" event
  if (!documentElement.addEventListener && documentElement.attachEvent) {
    documentElement.attachEvent("onfocusin", function () {
      viewportOffset = null;
    });
  }
});
;/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */
;(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module. 
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// Node/CommonJS 
		factory(require('jquery'));
	} else {
		// Browser globals 
		factory(window.jQuery || window.Zepto);
	}
})(function ($) {

	/*>>core*/
	/**
  * 
  * Magnific Popup Core JS file
  * 
  */

	/**
  * Private static constants
  */
	var CLOSE_EVENT = 'Close',
	    BEFORE_CLOSE_EVENT = 'BeforeClose',
	    AFTER_CLOSE_EVENT = 'AfterClose',
	    BEFORE_APPEND_EVENT = 'BeforeAppend',
	    MARKUP_PARSE_EVENT = 'MarkupParse',
	    OPEN_EVENT = 'Open',
	    CHANGE_EVENT = 'Change',
	    NS = 'mfp',
	    EVENT_NS = '.' + NS,
	    READY_CLASS = 'mfp-ready',
	    REMOVING_CLASS = 'mfp-removing',
	    PREVENT_CLOSE_CLASS = 'mfp-prevent-close';

	/**
  * Private vars 
  */
	/*jshint -W079 */
	var mfp,
	    // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
	MagnificPopup = function () {},
	    _isJQ = !!window.jQuery,
	    _prevStatus,
	    _window = $(window),
	    _document,
	    _prevContentType,
	    _wrapClasses,
	    _currPopupType;

	/**
  * Private functions
  */
	var _mfpOn = function (name, f) {
		mfp.ev.on(NS + name + EVENT_NS, f);
	},
	    _getEl = function (className, appendTo, html, raw) {
		var el = document.createElement('div');
		el.className = 'mfp-' + className;
		if (html) {
			el.innerHTML = html;
		}
		if (!raw) {
			el = $(el);
			if (appendTo) {
				el.appendTo(appendTo);
			}
		} else if (appendTo) {
			appendTo.appendChild(el);
		}
		return el;
	},
	    _mfpTrigger = function (e, data) {
		mfp.ev.triggerHandler(NS + e, data);

		if (mfp.st.callbacks) {
			// converts "mfpEventName" to "eventName" callback and triggers it if it's present
			e = e.charAt(0).toLowerCase() + e.slice(1);
			if (mfp.st.callbacks[e]) {
				mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
			}
		}
	},
	    _getCloseBtn = function (type) {
		if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
			mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace('%title%', mfp.st.tClose));
			_currPopupType = type;
		}
		return mfp.currTemplate.closeBtn;
	},

	// Initialize Magnific Popup only when called at least once
	_checkInstance = function () {
		if (!$.magnificPopup.instance) {
			/*jshint -W020 */
			mfp = new MagnificPopup();
			mfp.init();
			$.magnificPopup.instance = mfp;
		}
	},

	// CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
	supportsTransitions = function () {
		var s = document.createElement('p').style,
		    // 's' for style. better to create an element if body yet to exist
		v = ['ms', 'O', 'Moz', 'Webkit']; // 'v' for vendor

		if (s['transition'] !== undefined) {
			return true;
		}

		while (v.length) {
			if (v.pop() + 'Transition' in s) {
				return true;
			}
		}

		return false;
	};

	/**
  * Public functions
  */
	MagnificPopup.prototype = {

		constructor: MagnificPopup,

		/**
   * Initializes Magnific Popup plugin. 
   * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
   */
		init: function () {
			var appVersion = navigator.appVersion;
			mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;
			mfp.isAndroid = /android/gi.test(appVersion);
			mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion);
			mfp.supportsTransition = supportsTransitions();

			// We disable fixed positioned lightbox on devices that don't handle it nicely.
			// If you know a better way of detecting this - let me know.
			mfp.probablyMobile = mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent);
			_document = $(document);

			mfp.popupsCache = {};
		},

		/**
   * Opens popup
   * @param  data [description]
   */
		open: function (data) {

			var i;

			if (data.isObj === false) {
				// convert jQuery collection to array to avoid conflicts later
				mfp.items = data.items.toArray();

				mfp.index = 0;
				var items = data.items,
				    item;
				for (i = 0; i < items.length; i++) {
					item = items[i];
					if (item.parsed) {
						item = item.el[0];
					}
					if (item === data.el[0]) {
						mfp.index = i;
						break;
					}
				}
			} else {
				mfp.items = $.isArray(data.items) ? data.items : [data.items];
				mfp.index = data.index || 0;
			}

			// if popup is already opened - we just update the content
			if (mfp.isOpen) {
				mfp.updateItemHTML();
				return;
			}

			mfp.types = [];
			_wrapClasses = '';
			if (data.mainEl && data.mainEl.length) {
				mfp.ev = data.mainEl.eq(0);
			} else {
				mfp.ev = _document;
			}

			if (data.key) {
				if (!mfp.popupsCache[data.key]) {
					mfp.popupsCache[data.key] = {};
				}
				mfp.currTemplate = mfp.popupsCache[data.key];
			} else {
				mfp.currTemplate = {};
			}

			mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
			mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;

			if (mfp.st.modal) {
				mfp.st.closeOnContentClick = false;
				mfp.st.closeOnBgClick = false;
				mfp.st.showCloseBtn = false;
				mfp.st.enableEscapeKey = false;
			}

			// Building markup
			// main containers are created only once
			if (!mfp.bgOverlay) {

				// Dark overlay
				mfp.bgOverlay = _getEl('bg').on('click' + EVENT_NS, function () {
					mfp.close();
				});

				mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click' + EVENT_NS, function (e) {
					if (mfp._checkIfClose(e.target)) {
						mfp.close();
					}
				});

				mfp.container = _getEl('container', mfp.wrap);
			}

			mfp.contentContainer = _getEl('content');
			if (mfp.st.preloader) {
				mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);
			}

			// Initializing modules
			var modules = $.magnificPopup.modules;
			for (i = 0; i < modules.length; i++) {
				var n = modules[i];
				n = n.charAt(0).toUpperCase() + n.slice(1);
				mfp['init' + n].call(mfp);
			}
			_mfpTrigger('BeforeOpen');

			if (mfp.st.showCloseBtn) {
				// Close button
				if (!mfp.st.closeBtnInside) {
					mfp.wrap.append(_getCloseBtn());
				} else {
					_mfpOn(MARKUP_PARSE_EVENT, function (e, template, values, item) {
						values.close_replaceWith = _getCloseBtn(item.type);
					});
					_wrapClasses += ' mfp-close-btn-in';
				}
			}

			if (mfp.st.alignTop) {
				_wrapClasses += ' mfp-align-top';
			}

			if (mfp.fixedContentPos) {
				mfp.wrap.css({
					overflow: mfp.st.overflowY,
					overflowX: 'hidden',
					overflowY: mfp.st.overflowY
				});
			} else {
				mfp.wrap.css({
					top: _window.scrollTop(),
					position: 'absolute'
				});
			}
			if (mfp.st.fixedBgPos === false || mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos) {
				mfp.bgOverlay.css({
					height: _document.height(),
					position: 'absolute'
				});
			}

			if (mfp.st.enableEscapeKey) {
				// Close on ESC key
				_document.on('keyup' + EVENT_NS, function (e) {
					if (e.keyCode === 27) {
						mfp.close();
					}
				});
			}

			_window.on('resize' + EVENT_NS, function () {
				mfp.updateSize();
			});

			if (!mfp.st.closeOnContentClick) {
				_wrapClasses += ' mfp-auto-cursor';
			}

			if (_wrapClasses) mfp.wrap.addClass(_wrapClasses);

			// this triggers recalculation of layout, so we get it once to not to trigger twice
			var windowHeight = mfp.wH = _window.height();

			var windowStyles = {};

			if (mfp.fixedContentPos) {
				if (mfp._hasScrollBar(windowHeight)) {
					var s = mfp._getScrollbarSize();
					if (s) {
						windowStyles.marginRight = s;
					}
				}
			}

			if (mfp.fixedContentPos) {
				if (!mfp.isIE7) {
					windowStyles.overflow = 'hidden';
				} else {
					// ie7 double-scroll bug
					$('body, html').css('overflow', 'hidden');
				}
			}

			var classesToadd = mfp.st.mainClass;
			if (mfp.isIE7) {
				classesToadd += ' mfp-ie7';
			}
			if (classesToadd) {
				mfp._addClassToMFP(classesToadd);
			}

			// add content
			mfp.updateItemHTML();

			_mfpTrigger('BuildControls');

			// remove scrollbar, add margin e.t.c
			$('html').css(windowStyles);

			// add everything to DOM
			mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || $(document.body));

			// Save last focused element
			mfp._lastFocusedEl = document.activeElement;

			// Wait for next cycle to allow CSS transition
			setTimeout(function () {

				if (mfp.content) {
					mfp._addClassToMFP(READY_CLASS);
					mfp._setFocus();
				} else {
					// if content is not defined (not loaded e.t.c) we add class only for BG
					mfp.bgOverlay.addClass(READY_CLASS);
				}

				// Trap the focus in popup
				_document.on('focusin' + EVENT_NS, mfp._onFocusIn);
			}, 16);

			mfp.isOpen = true;
			mfp.updateSize(windowHeight);
			_mfpTrigger(OPEN_EVENT);

			return data;
		},

		/**
   * Closes the popup
   */
		close: function () {
			if (!mfp.isOpen) return;
			_mfpTrigger(BEFORE_CLOSE_EVENT);

			mfp.isOpen = false;
			// for CSS3 animation
			if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
				mfp._addClassToMFP(REMOVING_CLASS);
				setTimeout(function () {
					mfp._close();
				}, mfp.st.removalDelay);
			} else {
				mfp._close();
			}
		},

		/**
   * Helper for close() function
   */
		_close: function () {
			_mfpTrigger(CLOSE_EVENT);

			var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';

			mfp.bgOverlay.detach();
			mfp.wrap.detach();
			mfp.container.empty();

			if (mfp.st.mainClass) {
				classesToRemove += mfp.st.mainClass + ' ';
			}

			mfp._removeClassFromMFP(classesToRemove);

			if (mfp.fixedContentPos) {
				var windowStyles = { marginRight: '' };
				if (mfp.isIE7) {
					$('body, html').css('overflow', '');
				} else {
					windowStyles.overflow = '';
				}
				$('html').css(windowStyles);
			}

			_document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);
			mfp.ev.off(EVENT_NS);

			// clean up DOM elements that aren't removed
			mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');
			mfp.bgOverlay.attr('class', 'mfp-bg');
			mfp.container.attr('class', 'mfp-container');

			// remove close button from target element
			if (mfp.st.showCloseBtn && (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
				if (mfp.currTemplate.closeBtn) mfp.currTemplate.closeBtn.detach();
			}

			if (mfp.st.autoFocusLast && mfp._lastFocusedEl) {
				$(mfp._lastFocusedEl).focus(); // put tab focus back
			}
			mfp.currItem = null;
			mfp.content = null;
			mfp.currTemplate = null;
			mfp.prevHeight = 0;

			_mfpTrigger(AFTER_CLOSE_EVENT);
		},

		updateSize: function (winHeight) {

			if (mfp.isIOS) {
				// fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
				var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
				var height = window.innerHeight * zoomLevel;
				mfp.wrap.css('height', height);
				mfp.wH = height;
			} else {
				mfp.wH = winHeight || _window.height();
			}
			// Fixes #84: popup incorrectly positioned with position:relative on body
			if (!mfp.fixedContentPos) {
				mfp.wrap.css('height', mfp.wH);
			}

			_mfpTrigger('Resize');
		},

		/**
   * Set content of popup based on current index
   */
		updateItemHTML: function () {
			var item = mfp.items[mfp.index];

			// Detach and perform modifications
			mfp.contentContainer.detach();

			if (mfp.content) mfp.content.detach();

			if (!item.parsed) {
				item = mfp.parseEl(mfp.index);
			}

			var type = item.type;

			_mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]);
			// BeforeChange event works like so:
			// _mfpOn('BeforeChange', function(e, prevType, newType) { });

			mfp.currItem = item;

			if (!mfp.currTemplate[type]) {
				var markup = mfp.st[type] ? mfp.st[type].markup : false;

				// allows to modify markup
				_mfpTrigger('FirstMarkupParse', markup);

				if (markup) {
					mfp.currTemplate[type] = $(markup);
				} else {
					// if there is no markup found we just define that template is parsed
					mfp.currTemplate[type] = true;
				}
			}

			if (_prevContentType && _prevContentType !== item.type) {
				mfp.container.removeClass('mfp-' + _prevContentType + '-holder');
			}

			var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
			mfp.appendContent(newContent, type);

			item.preloaded = true;

			_mfpTrigger(CHANGE_EVENT, item);
			_prevContentType = item.type;

			// Append container back after its content changed
			mfp.container.prepend(mfp.contentContainer);

			_mfpTrigger('AfterChange');
		},

		/**
   * Set HTML content of popup
   */
		appendContent: function (newContent, type) {
			mfp.content = newContent;

			if (newContent) {
				if (mfp.st.showCloseBtn && mfp.st.closeBtnInside && mfp.currTemplate[type] === true) {
					// if there is no markup, we just append close button element inside
					if (!mfp.content.find('.mfp-close').length) {
						mfp.content.append(_getCloseBtn());
					}
				} else {
					mfp.content = newContent;
				}
			} else {
				mfp.content = '';
			}

			_mfpTrigger(BEFORE_APPEND_EVENT);
			mfp.container.addClass('mfp-' + type + '-holder');

			mfp.contentContainer.append(mfp.content);
		},

		/**
   * Creates Magnific Popup data object based on given data
   * @param  {int} index Index of item to parse
   */
		parseEl: function (index) {
			var item = mfp.items[index],
			    type;

			if (item.tagName) {
				item = { el: $(item) };
			} else {
				type = item.type;
				item = { data: item, src: item.src };
			}

			if (item.el) {
				var types = mfp.types;

				// check for 'mfp-TYPE' class
				for (var i = 0; i < types.length; i++) {
					if (item.el.hasClass('mfp-' + types[i])) {
						type = types[i];
						break;
					}
				}

				item.src = item.el.attr('data-mfp-src');
				if (!item.src) {
					item.src = item.el.attr('href');
				}
			}

			item.type = type || mfp.st.type || 'inline';
			item.index = index;
			item.parsed = true;
			mfp.items[index] = item;
			_mfpTrigger('ElementParse', item);

			return mfp.items[index];
		},

		/**
   * Initializes single popup or a group of popups
   */
		addGroup: function (el, options) {
			var eHandler = function (e) {
				e.mfpEl = this;
				mfp._openClick(e, el, options);
			};

			if (!options) {
				options = {};
			}

			var eName = 'click.magnificPopup';
			options.mainEl = el;

			if (options.items) {
				options.isObj = true;
				el.off(eName).on(eName, eHandler);
			} else {
				options.isObj = false;
				if (options.delegate) {
					el.off(eName).on(eName, options.delegate, eHandler);
				} else {
					options.items = el;
					el.off(eName).on(eName, eHandler);
				}
			}
		},
		_openClick: function (e, el, options) {
			var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;

			if (!midClick && (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)) {
				return;
			}

			var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;

			if (disableOn) {
				if ($.isFunction(disableOn)) {
					if (!disableOn.call(mfp)) {
						return true;
					}
				} else {
					// else it's number
					if (_window.width() < disableOn) {
						return true;
					}
				}
			}

			if (e.type) {
				e.preventDefault();

				// This will prevent popup from closing if element is inside and popup is already opened
				if (mfp.isOpen) {
					e.stopPropagation();
				}
			}

			options.el = $(e.mfpEl);
			if (options.delegate) {
				options.items = el.find(options.delegate);
			}
			mfp.open(options);
		},

		/**
   * Updates text on preloader
   */
		updateStatus: function (status, text) {

			if (mfp.preloader) {
				if (_prevStatus !== status) {
					mfp.container.removeClass('mfp-s-' + _prevStatus);
				}

				if (!text && status === 'loading') {
					text = mfp.st.tLoading;
				}

				var data = {
					status: status,
					text: text
				};
				// allows to modify status
				_mfpTrigger('UpdateStatus', data);

				status = data.status;
				text = data.text;

				mfp.preloader.html(text);

				mfp.preloader.find('a').on('click', function (e) {
					e.stopImmediatePropagation();
				});

				mfp.container.addClass('mfp-s-' + status);
				_prevStatus = status;
			}
		},

		/*
  	"Private" helpers that aren't private at all
   */
		// Check to close popup or not
		// "target" is an element that was clicked
		_checkIfClose: function (target) {

			if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
				return;
			}

			var closeOnContent = mfp.st.closeOnContentClick;
			var closeOnBg = mfp.st.closeOnBgClick;

			if (closeOnContent && closeOnBg) {
				return true;
			} else {

				// We close the popup if click is on close button or on preloader. Or if there is no content.
				if (!mfp.content || $(target).hasClass('mfp-close') || mfp.preloader && target === mfp.preloader[0]) {
					return true;
				}

				// if click is outside the content
				if (target !== mfp.content[0] && !$.contains(mfp.content[0], target)) {
					if (closeOnBg) {
						// last check, if the clicked element is in DOM, (in case it's removed onclick)
						if ($.contains(document, target)) {
							return true;
						}
					}
				} else if (closeOnContent) {
					return true;
				}
			}
			return false;
		},
		_addClassToMFP: function (cName) {
			mfp.bgOverlay.addClass(cName);
			mfp.wrap.addClass(cName);
		},
		_removeClassFromMFP: function (cName) {
			this.bgOverlay.removeClass(cName);
			mfp.wrap.removeClass(cName);
		},
		_hasScrollBar: function (winHeight) {
			return (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height());
		},
		_setFocus: function () {
			(mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
		},
		_onFocusIn: function (e) {
			if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
				mfp._setFocus();
				return false;
			}
		},
		_parseMarkup: function (template, values, item) {
			var arr;
			if (item.data) {
				values = $.extend(item.data, values);
			}
			_mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);

			$.each(values, function (key, value) {
				if (value === undefined || value === false) {
					return true;
				}
				arr = key.split('_');
				if (arr.length > 1) {
					var el = template.find(EVENT_NS + '-' + arr[0]);

					if (el.length > 0) {
						var attr = arr[1];
						if (attr === 'replaceWith') {
							if (el[0] !== value[0]) {
								el.replaceWith(value);
							}
						} else if (attr === 'img') {
							if (el.is('img')) {
								el.attr('src', value);
							} else {
								el.replaceWith($('<img>').attr('src', value).attr('class', el.attr('class')));
							}
						} else {
							el.attr(arr[1], value);
						}
					}
				} else {
					template.find(EVENT_NS + '-' + key).html(value);
				}
			});
		},

		_getScrollbarSize: function () {
			// thx David
			if (mfp.scrollbarSize === undefined) {
				var scrollDiv = document.createElement("div");
				scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
				document.body.appendChild(scrollDiv);
				mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
				document.body.removeChild(scrollDiv);
			}
			return mfp.scrollbarSize;
		}

	}; /* MagnificPopup core prototype end */

	/**
  * Public static functions
  */
	$.magnificPopup = {
		instance: null,
		proto: MagnificPopup.prototype,
		modules: [],

		open: function (options, index) {
			_checkInstance();

			if (!options) {
				options = {};
			} else {
				options = $.extend(true, {}, options);
			}

			options.isObj = true;
			options.index = index || 0;
			return this.instance.open(options);
		},

		close: function () {
			return $.magnificPopup.instance && $.magnificPopup.instance.close();
		},

		registerModule: function (name, module) {
			if (module.options) {
				$.magnificPopup.defaults[name] = module.options;
			}
			$.extend(this.proto, module.proto);
			this.modules.push(name);
		},

		defaults: {

			// Info about options is in docs:
			// http://dimsemenov.com/plugins/magnific-popup/documentation.html#options

			disableOn: 0,

			key: null,

			midClick: false,

			mainClass: '',

			preloader: true,

			focus: '', // CSS selector of input to focus after popup is opened

			closeOnContentClick: false,

			closeOnBgClick: true,

			closeBtnInside: true,

			showCloseBtn: true,

			enableEscapeKey: true,

			modal: false,

			alignTop: false,

			removalDelay: 0,

			prependTo: null,

			fixedContentPos: 'auto',

			fixedBgPos: 'auto',

			overflowY: 'auto',

			closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',

			tClose: 'Close (Esc)',

			tLoading: 'Loading...',

			autoFocusLast: true

		}
	};

	$.fn.magnificPopup = function (options) {
		_checkInstance();

		var jqEl = $(this);

		// We call some API method of first param is a string
		if (typeof options === "string") {

			if (options === 'open') {
				var items,
				    itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,
				    index = parseInt(arguments[1], 10) || 0;

				if (itemOpts.items) {
					items = itemOpts.items[index];
				} else {
					items = jqEl;
					if (itemOpts.delegate) {
						items = items.find(itemOpts.delegate);
					}
					items = items.eq(index);
				}
				mfp._openClick({ mfpEl: items }, jqEl, itemOpts);
			} else {
				if (mfp.isOpen) mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
			}
		} else {
			// clone options obj
			options = $.extend(true, {}, options);

			/*
    * As Zepto doesn't support .data() method for objects
    * and it works only in normal browsers
    * we assign "options" object directly to the DOM element. FTW!
    */
			if (_isJQ) {
				jqEl.data('magnificPopup', options);
			} else {
				jqEl[0].magnificPopup = options;
			}

			mfp.addGroup(jqEl, options);
		}
		return jqEl;
	};

	/*>>core*/

	/*>>inline*/

	var INLINE_NS = 'inline',
	    _hiddenClass,
	    _inlinePlaceholder,
	    _lastInlineElement,
	    _putInlineElementsBack = function () {
		if (_lastInlineElement) {
			_inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();
			_lastInlineElement = null;
		}
	};

	$.magnificPopup.registerModule(INLINE_NS, {
		options: {
			hiddenClass: 'hide', // will be appended with `mfp-` prefix
			markup: '',
			tNotFound: 'Content not found'
		},
		proto: {

			initInline: function () {
				mfp.types.push(INLINE_NS);

				_mfpOn(CLOSE_EVENT + '.' + INLINE_NS, function () {
					_putInlineElementsBack();
				});
			},

			getInline: function (item, template) {

				_putInlineElementsBack();

				if (item.src) {
					var inlineSt = mfp.st.inline,
					    el = $(item.src);

					if (el.length) {

						// If target element has parent - we replace it with placeholder and put it back after popup is closed
						var parent = el[0].parentNode;
						if (parent && parent.tagName) {
							if (!_inlinePlaceholder) {
								_hiddenClass = inlineSt.hiddenClass;
								_inlinePlaceholder = _getEl(_hiddenClass);
								_hiddenClass = 'mfp-' + _hiddenClass;
							}
							// replace target inline element with placeholder
							_lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
						}

						mfp.updateStatus('ready');
					} else {
						mfp.updateStatus('error', inlineSt.tNotFound);
						el = $('<div>');
					}

					item.inlineElement = el;
					return el;
				}

				mfp.updateStatus('ready');
				mfp._parseMarkup(template, {}, item);
				return template;
			}
		}
	});

	/*>>inline*/

	/*>>ajax*/
	var AJAX_NS = 'ajax',
	    _ajaxCur,
	    _removeAjaxCursor = function () {
		if (_ajaxCur) {
			$(document.body).removeClass(_ajaxCur);
		}
	},
	    _destroyAjaxRequest = function () {
		_removeAjaxCursor();
		if (mfp.req) {
			mfp.req.abort();
		}
	};

	$.magnificPopup.registerModule(AJAX_NS, {

		options: {
			settings: null,
			cursor: 'mfp-ajax-cur',
			tError: '<a href="%url%">The content</a> could not be loaded.'
		},

		proto: {
			initAjax: function () {
				mfp.types.push(AJAX_NS);
				_ajaxCur = mfp.st.ajax.cursor;

				_mfpOn(CLOSE_EVENT + '.' + AJAX_NS, _destroyAjaxRequest);
				_mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);
			},
			getAjax: function (item) {

				if (_ajaxCur) {
					$(document.body).addClass(_ajaxCur);
				}

				mfp.updateStatus('loading');

				var opts = $.extend({
					url: item.src,
					success: function (data, textStatus, jqXHR) {
						var temp = {
							data: data,
							xhr: jqXHR
						};

						_mfpTrigger('ParseAjax', temp);

						mfp.appendContent($(temp.data), AJAX_NS);

						item.finished = true;

						_removeAjaxCursor();

						mfp._setFocus();

						setTimeout(function () {
							mfp.wrap.addClass(READY_CLASS);
						}, 16);

						mfp.updateStatus('ready');

						_mfpTrigger('AjaxContentAdded');
					},
					error: function () {
						_removeAjaxCursor();
						item.finished = item.loadError = true;
						mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));
					}
				}, mfp.st.ajax.settings);

				mfp.req = $.ajax(opts);

				return '';
			}
		}
	});

	/*>>ajax*/

	/*>>image*/
	var _imgInterval,
	    _getTitle = function (item) {
		if (item.data && item.data.title !== undefined) return item.data.title;

		var src = mfp.st.image.titleSrc;

		if (src) {
			if ($.isFunction(src)) {
				return src.call(mfp, item);
			} else if (item.el) {
				return item.el.attr(src) || '';
			}
		}
		return '';
	};

	$.magnificPopup.registerModule('image', {

		options: {
			markup: '<div class="mfp-figure">' + '<div class="mfp-close"></div>' + '<figure>' + '<div class="mfp-img"></div>' + '<figcaption>' + '<div class="mfp-bottom-bar">' + '<div class="mfp-title"></div>' + '<div class="mfp-counter"></div>' + '</div>' + '</figcaption>' + '</figure>' + '</div>',
			cursor: 'mfp-zoom-out-cur',
			titleSrc: 'title',
			verticalFit: true,
			tError: '<a href="%url%">The image</a> could not be loaded.'
		},

		proto: {
			initImage: function () {
				var imgSt = mfp.st.image,
				    ns = '.image';

				mfp.types.push('image');

				_mfpOn(OPEN_EVENT + ns, function () {
					if (mfp.currItem.type === 'image' && imgSt.cursor) {
						$(document.body).addClass(imgSt.cursor);
					}
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					if (imgSt.cursor) {
						$(document.body).removeClass(imgSt.cursor);
					}
					_window.off('resize' + EVENT_NS);
				});

				_mfpOn('Resize' + ns, mfp.resizeImage);
				if (mfp.isLowIE) {
					_mfpOn('AfterChange', mfp.resizeImage);
				}
			},
			resizeImage: function () {
				var item = mfp.currItem;
				if (!item || !item.img) return;

				if (mfp.st.image.verticalFit) {
					var decr = 0;
					// fix box-sizing in ie7/8
					if (mfp.isLowIE) {
						decr = parseInt(item.img.css('padding-top'), 10) + parseInt(item.img.css('padding-bottom'), 10);
					}
					item.img.css('max-height', mfp.wH - decr);
				}
			},
			_onImageHasSize: function (item) {
				if (item.img) {

					item.hasSize = true;

					if (_imgInterval) {
						clearInterval(_imgInterval);
					}

					item.isCheckingImgSize = false;

					_mfpTrigger('ImageHasSize', item);

					if (item.imgHidden) {
						if (mfp.content) mfp.content.removeClass('mfp-loading');

						item.imgHidden = false;
					}
				}
			},

			/**
    * Function that loops until the image has size to display elements that rely on it asap
    */
			findImageSize: function (item) {

				var counter = 0,
				    img = item.img[0],
				    mfpSetInterval = function (delay) {

					if (_imgInterval) {
						clearInterval(_imgInterval);
					}
					// decelerating interval that checks for size of an image
					_imgInterval = setInterval(function () {
						if (img.naturalWidth > 0) {
							mfp._onImageHasSize(item);
							return;
						}

						if (counter > 200) {
							clearInterval(_imgInterval);
						}

						counter++;
						if (counter === 3) {
							mfpSetInterval(10);
						} else if (counter === 40) {
							mfpSetInterval(50);
						} else if (counter === 100) {
							mfpSetInterval(500);
						}
					}, delay);
				};

				mfpSetInterval(1);
			},

			getImage: function (item, template) {

				var guard = 0,


				// image load complete handler
				onLoadComplete = function () {
					if (item) {
						if (item.img[0].complete) {
							item.img.off('.mfploader');

							if (item === mfp.currItem) {
								mfp._onImageHasSize(item);

								mfp.updateStatus('ready');
							}

							item.hasSize = true;
							item.loaded = true;

							_mfpTrigger('ImageLoadComplete');
						} else {
							// if image complete check fails 200 times (20 sec), we assume that there was an error.
							guard++;
							if (guard < 200) {
								setTimeout(onLoadComplete, 100);
							} else {
								onLoadError();
							}
						}
					}
				},


				// image error handler
				onLoadError = function () {
					if (item) {
						item.img.off('.mfploader');
						if (item === mfp.currItem) {
							mfp._onImageHasSize(item);
							mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
						}

						item.hasSize = true;
						item.loaded = true;
						item.loadError = true;
					}
				},
				    imgSt = mfp.st.image;

				var el = template.find('.mfp-img');
				if (el.length) {
					var img = document.createElement('img');
					img.className = 'mfp-img';
					if (item.el && item.el.find('img').length) {
						img.alt = item.el.find('img').attr('alt');
					}
					item.img = $(img).on('load.mfploader', onLoadComplete).on('error.mfploader', onLoadError);
					img.src = item.src;

					// without clone() "error" event is not firing when IMG is replaced by new IMG
					// TODO: find a way to avoid such cloning
					if (el.is('img')) {
						item.img = item.img.clone();
					}

					img = item.img[0];
					if (img.naturalWidth > 0) {
						item.hasSize = true;
					} else if (!img.width) {
						item.hasSize = false;
					}
				}

				mfp._parseMarkup(template, {
					title: _getTitle(item),
					img_replaceWith: item.img
				}, item);

				mfp.resizeImage();

				if (item.hasSize) {
					if (_imgInterval) clearInterval(_imgInterval);

					if (item.loadError) {
						template.addClass('mfp-loading');
						mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
					} else {
						template.removeClass('mfp-loading');
						mfp.updateStatus('ready');
					}
					return template;
				}

				mfp.updateStatus('loading');
				item.loading = true;

				if (!item.hasSize) {
					item.imgHidden = true;
					template.addClass('mfp-loading');
					mfp.findImageSize(item);
				}

				return template;
			}
		}
	});

	/*>>image*/

	/*>>zoom*/
	var hasMozTransform,
	    getHasMozTransform = function () {
		if (hasMozTransform === undefined) {
			hasMozTransform = document.createElement('p').style.MozTransform !== undefined;
		}
		return hasMozTransform;
	};

	$.magnificPopup.registerModule('zoom', {

		options: {
			enabled: false,
			easing: 'ease-in-out',
			duration: 300,
			opener: function (element) {
				return element.is('img') ? element : element.find('img');
			}
		},

		proto: {

			initZoom: function () {
				var zoomSt = mfp.st.zoom,
				    ns = '.zoom',
				    image;

				if (!zoomSt.enabled || !mfp.supportsTransition) {
					return;
				}

				var duration = zoomSt.duration,
				    getElToAnimate = function (image) {
					var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),
					    transition = 'all ' + zoomSt.duration / 1000 + 's ' + zoomSt.easing,
					    cssObj = {
						position: 'fixed',
						zIndex: 9999,
						left: 0,
						top: 0,
						'-webkit-backface-visibility': 'hidden'
					},
					    t = 'transition';

					cssObj['-webkit-' + t] = cssObj['-moz-' + t] = cssObj['-o-' + t] = cssObj[t] = transition;

					newImg.css(cssObj);
					return newImg;
				},
				    showMainContent = function () {
					mfp.content.css('visibility', 'visible');
				},
				    openTimeout,
				    animatedImg;

				_mfpOn('BuildControls' + ns, function () {
					if (mfp._allowZoom()) {

						clearTimeout(openTimeout);
						mfp.content.css('visibility', 'hidden');

						// Basically, all code below does is clones existing image, puts in on top of the current one and animated it

						image = mfp._getItemToZoom();

						if (!image) {
							showMainContent();
							return;
						}

						animatedImg = getElToAnimate(image);

						animatedImg.css(mfp._getOffset());

						mfp.wrap.append(animatedImg);

						openTimeout = setTimeout(function () {
							animatedImg.css(mfp._getOffset(true));
							openTimeout = setTimeout(function () {

								showMainContent();

								setTimeout(function () {
									animatedImg.remove();
									image = animatedImg = null;
									_mfpTrigger('ZoomAnimationEnded');
								}, 16); // avoid blink when switching images
							}, duration); // this timeout equals animation duration
						}, 16); // by adding this timeout we avoid short glitch at the beginning of animation


						// Lots of timeouts...
					}
				});
				_mfpOn(BEFORE_CLOSE_EVENT + ns, function () {
					if (mfp._allowZoom()) {

						clearTimeout(openTimeout);

						mfp.st.removalDelay = duration;

						if (!image) {
							image = mfp._getItemToZoom();
							if (!image) {
								return;
							}
							animatedImg = getElToAnimate(image);
						}

						animatedImg.css(mfp._getOffset(true));
						mfp.wrap.append(animatedImg);
						mfp.content.css('visibility', 'hidden');

						setTimeout(function () {
							animatedImg.css(mfp._getOffset());
						}, 16);
					}
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					if (mfp._allowZoom()) {
						showMainContent();
						if (animatedImg) {
							animatedImg.remove();
						}
						image = null;
					}
				});
			},

			_allowZoom: function () {
				return mfp.currItem.type === 'image';
			},

			_getItemToZoom: function () {
				if (mfp.currItem.hasSize) {
					return mfp.currItem.img;
				} else {
					return false;
				}
			},

			// Get element postion relative to viewport
			_getOffset: function (isLarge) {
				var el;
				if (isLarge) {
					el = mfp.currItem.img;
				} else {
					el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
				}

				var offset = el.offset();
				var paddingTop = parseInt(el.css('padding-top'), 10);
				var paddingBottom = parseInt(el.css('padding-bottom'), 10);
				offset.top -= $(window).scrollTop() - paddingTop;

				/*
    	Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.
    	 */
				var obj = {
					width: el.width(),
					// fix Zepto height+padding issue
					height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
				};

				// I hate to do this, but there is no another option
				if (getHasMozTransform()) {
					obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';
				} else {
					obj.left = offset.left;
					obj.top = offset.top;
				}
				return obj;
			}

		}
	});

	/*>>zoom*/

	/*>>iframe*/

	var IFRAME_NS = 'iframe',
	    _emptyPage = '//about:blank',
	    _fixIframeBugs = function (isShowing) {
		if (mfp.currTemplate[IFRAME_NS]) {
			var el = mfp.currTemplate[IFRAME_NS].find('iframe');
			if (el.length) {
				// reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
				if (!isShowing) {
					el[0].src = _emptyPage;
				}

				// IE8 black screen bug fix
				if (mfp.isIE8) {
					el.css('display', isShowing ? 'block' : 'none');
				}
			}
		}
	};

	$.magnificPopup.registerModule(IFRAME_NS, {

		options: {
			markup: '<div class="mfp-iframe-scaler">' + '<div class="mfp-close"></div>' + '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>' + '</div>',

			srcAction: 'iframe_src',

			// we don't care and support only one default type of URL by default
			patterns: {
				youtube: {
					index: 'youtube.com',
					id: 'v=',
					src: '//www.youtube.com/embed/%id%?autoplay=1'
				},
				vimeo: {
					index: 'vimeo.com/',
					id: '/',
					src: '//player.vimeo.com/video/%id%?autoplay=1'
				},
				gmaps: {
					index: '//maps.google.',
					src: '%id%&output=embed'
				}
			}
		},

		proto: {
			initIframe: function () {
				mfp.types.push(IFRAME_NS);

				_mfpOn('BeforeChange', function (e, prevType, newType) {
					if (prevType !== newType) {
						if (prevType === IFRAME_NS) {
							_fixIframeBugs(); // iframe if removed
						} else if (newType === IFRAME_NS) {
							_fixIframeBugs(true); // iframe is showing
						}
					} // else {
					// iframe source is switched, don't do anything
					//}
				});

				_mfpOn(CLOSE_EVENT + '.' + IFRAME_NS, function () {
					_fixIframeBugs();
				});
			},

			getIframe: function (item, template) {
				var embedSrc = item.src;
				var iframeSt = mfp.st.iframe;

				$.each(iframeSt.patterns, function () {
					if (embedSrc.indexOf(this.index) > -1) {
						if (this.id) {
							if (typeof this.id === 'string') {
								embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length);
							} else {
								embedSrc = this.id.call(this, embedSrc);
							}
						}
						embedSrc = this.src.replace('%id%', embedSrc);
						return false; // break;
					}
				});

				var dataObj = {};
				if (iframeSt.srcAction) {
					dataObj[iframeSt.srcAction] = embedSrc;
				}
				mfp._parseMarkup(template, dataObj, item);

				mfp.updateStatus('ready');

				return template;
			}
		}
	});

	/*>>iframe*/

	/*>>gallery*/
	/**
  * Get looped index depending on number of slides
  */
	var _getLoopedId = function (index) {
		var numSlides = mfp.items.length;
		if (index > numSlides - 1) {
			return index - numSlides;
		} else if (index < 0) {
			return numSlides + index;
		}
		return index;
	},
	    _replaceCurrTotal = function (text, curr, total) {
		return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
	};

	$.magnificPopup.registerModule('gallery', {

		options: {
			enabled: false,
			arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
			preload: [0, 2],
			navigateByImgClick: true,
			arrows: true,

			tPrev: 'Previous (Left arrow key)',
			tNext: 'Next (Right arrow key)',
			tCounter: '%curr% of %total%'
		},

		proto: {
			initGallery: function () {

				var gSt = mfp.st.gallery,
				    ns = '.mfp-gallery';

				mfp.direction = true; // true - next, false - prev

				if (!gSt || !gSt.enabled) return false;

				_wrapClasses += ' mfp-gallery';

				_mfpOn(OPEN_EVENT + ns, function () {

					if (gSt.navigateByImgClick) {
						mfp.wrap.on('click' + ns, '.mfp-img', function () {
							if (mfp.items.length > 1) {
								mfp.next();
								return false;
							}
						});
					}

					_document.on('keydown' + ns, function (e) {
						if (e.keyCode === 37) {
							mfp.prev();
						} else if (e.keyCode === 39) {
							mfp.next();
						}
					});
				});

				_mfpOn('UpdateStatus' + ns, function (e, data) {
					if (data.text) {
						data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);
					}
				});

				_mfpOn(MARKUP_PARSE_EVENT + ns, function (e, element, values, item) {
					var l = mfp.items.length;
					values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : '';
				});

				_mfpOn('BuildControls' + ns, function () {
					if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
						var markup = gSt.arrowMarkup,
						    arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, 'left')).addClass(PREVENT_CLOSE_CLASS),
						    arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, 'right')).addClass(PREVENT_CLOSE_CLASS);

						arrowLeft.click(function () {
							mfp.prev();
						});
						arrowRight.click(function () {
							mfp.next();
						});

						mfp.container.append(arrowLeft.add(arrowRight));
					}
				});

				_mfpOn(CHANGE_EVENT + ns, function () {
					if (mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);

					mfp._preloadTimeout = setTimeout(function () {
						mfp.preloadNearbyImages();
						mfp._preloadTimeout = null;
					}, 16);
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					_document.off(ns);
					mfp.wrap.off('click' + ns);
					mfp.arrowRight = mfp.arrowLeft = null;
				});
			},
			next: function () {
				mfp.direction = true;
				mfp.index = _getLoopedId(mfp.index + 1);
				mfp.updateItemHTML();
			},
			prev: function () {
				mfp.direction = false;
				mfp.index = _getLoopedId(mfp.index - 1);
				mfp.updateItemHTML();
			},
			goTo: function (newIndex) {
				mfp.direction = newIndex >= mfp.index;
				mfp.index = newIndex;
				mfp.updateItemHTML();
			},
			preloadNearbyImages: function () {
				var p = mfp.st.gallery.preload,
				    preloadBefore = Math.min(p[0], mfp.items.length),
				    preloadAfter = Math.min(p[1], mfp.items.length),
				    i;

				for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
					mfp._preloadItem(mfp.index + i);
				}
				for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
					mfp._preloadItem(mfp.index - i);
				}
			},
			_preloadItem: function (index) {
				index = _getLoopedId(index);

				if (mfp.items[index].preloaded) {
					return;
				}

				var item = mfp.items[index];
				if (!item.parsed) {
					item = mfp.parseEl(index);
				}

				_mfpTrigger('LazyLoad', item);

				if (item.type === 'image') {
					item.img = $('<img class="mfp-img" />').on('load.mfploader', function () {
						item.hasSize = true;
					}).on('error.mfploader', function () {
						item.hasSize = true;
						item.loadError = true;
						_mfpTrigger('LazyLoadError', item);
					}).attr('src', item.src);
				}

				item.preloaded = true;
			}
		}
	});

	/*>>gallery*/

	/*>>retina*/

	var RETINA_NS = 'retina';

	$.magnificPopup.registerModule(RETINA_NS, {
		options: {
			replaceSrc: function (item) {
				return item.src.replace(/\.\w+$/, function (m) {
					return '@2x' + m;
				});
			},
			ratio: 1 // Function or number.  Set to 1 to disable.
		},
		proto: {
			initRetina: function () {
				if (window.devicePixelRatio > 1) {

					var st = mfp.st.retina,
					    ratio = st.ratio;

					ratio = !isNaN(ratio) ? ratio : ratio();

					if (ratio > 1) {
						_mfpOn('ImageHasSize' + '.' + RETINA_NS, function (e, item) {
							item.img.css({
								'max-width': item.img[0].naturalWidth / ratio,
								'width': '100%'
							});
						});
						_mfpOn('ElementParse' + '.' + RETINA_NS, function (e, item) {
							item.src = st.replaceSrc(item, ratio);
						});
					}
				}
			}
		}
	});

	/*>>retina*/
	_checkInstance();
});
;/*!
Waypoints - 4.0.1
Copyright © 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
(function () {
  'use strict';

  var keyCounter = 0;
  var allWaypoints = {};

  /* http://imakewebthings.com/waypoints/api/waypoint */
  function Waypoint(options) {
    if (!options) {
      throw new Error('No options passed to Waypoint constructor');
    }
    if (!options.element) {
      throw new Error('No element option passed to Waypoint constructor');
    }
    if (!options.handler) {
      throw new Error('No handler option passed to Waypoint constructor');
    }

    this.key = 'waypoint-' + keyCounter;
    this.options = Waypoint.Adapter.extend({}, Waypoint.defaults, options);
    this.element = this.options.element;
    this.adapter = new Waypoint.Adapter(this.element);
    this.callback = options.handler;
    this.axis = this.options.horizontal ? 'horizontal' : 'vertical';
    this.enabled = this.options.enabled;
    this.triggerPoint = null;
    this.group = Waypoint.Group.findOrCreate({
      name: this.options.group,
      axis: this.axis
    });
    this.context = Waypoint.Context.findOrCreateByElement(this.options.context);

    if (Waypoint.offsetAliases[this.options.offset]) {
      this.options.offset = Waypoint.offsetAliases[this.options.offset];
    }
    this.group.add(this);
    this.context.add(this);
    allWaypoints[this.key] = this;
    keyCounter += 1;
  }

  /* Private */
  Waypoint.prototype.queueTrigger = function (direction) {
    this.group.queueTrigger(this, direction);
  };

  /* Private */
  Waypoint.prototype.trigger = function (args) {
    if (!this.enabled) {
      return;
    }
    if (this.callback) {
      this.callback.apply(this, args);
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/destroy */
  Waypoint.prototype.destroy = function () {
    this.context.remove(this);
    this.group.remove(this);
    delete allWaypoints[this.key];
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/disable */
  Waypoint.prototype.disable = function () {
    this.enabled = false;
    return this;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/enable */
  Waypoint.prototype.enable = function () {
    this.context.refresh();
    this.enabled = true;
    return this;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/next */
  Waypoint.prototype.next = function () {
    return this.group.next(this);
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/previous */
  Waypoint.prototype.previous = function () {
    return this.group.previous(this);
  };

  /* Private */
  Waypoint.invokeAll = function (method) {
    var allWaypointsArray = [];
    for (var waypointKey in allWaypoints) {
      allWaypointsArray.push(allWaypoints[waypointKey]);
    }
    for (var i = 0, end = allWaypointsArray.length; i < end; i++) {
      allWaypointsArray[i][method]();
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/destroy-all */
  Waypoint.destroyAll = function () {
    Waypoint.invokeAll('destroy');
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/disable-all */
  Waypoint.disableAll = function () {
    Waypoint.invokeAll('disable');
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/enable-all */
  Waypoint.enableAll = function () {
    Waypoint.Context.refreshAll();
    for (var waypointKey in allWaypoints) {
      allWaypoints[waypointKey].enabled = true;
    }
    return this;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/refresh-all */
  Waypoint.refreshAll = function () {
    Waypoint.Context.refreshAll();
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/viewport-height */
  Waypoint.viewportHeight = function () {
    return window.innerHeight || document.documentElement.clientHeight;
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/viewport-width */
  Waypoint.viewportWidth = function () {
    return document.documentElement.clientWidth;
  };

  Waypoint.adapters = [];

  Waypoint.defaults = {
    context: window,
    continuous: true,
    enabled: true,
    group: 'default',
    horizontal: false,
    offset: 0
  };

  Waypoint.offsetAliases = {
    'bottom-in-view': function () {
      return this.context.innerHeight() - this.adapter.outerHeight();
    },
    'right-in-view': function () {
      return this.context.innerWidth() - this.adapter.outerWidth();
    }
  };

  window.Waypoint = Waypoint;
})();(function () {
  'use strict';

  function requestAnimationFrameShim(callback) {
    window.setTimeout(callback, 1000 / 60);
  }

  var keyCounter = 0;
  var contexts = {};
  var Waypoint = window.Waypoint;
  var oldWindowLoad = window.onload;

  /* http://imakewebthings.com/waypoints/api/context */
  function Context(element) {
    this.element = element;
    this.Adapter = Waypoint.Adapter;
    this.adapter = new this.Adapter(element);
    this.key = 'waypoint-context-' + keyCounter;
    this.didScroll = false;
    this.didResize = false;
    this.oldScroll = {
      x: this.adapter.scrollLeft(),
      y: this.adapter.scrollTop()
    };
    this.waypoints = {
      vertical: {},
      horizontal: {}
    };

    element.waypointContextKey = this.key;
    contexts[element.waypointContextKey] = this;
    keyCounter += 1;
    if (!Waypoint.windowContext) {
      Waypoint.windowContext = true;
      Waypoint.windowContext = new Context(window);
    }

    this.createThrottledScrollHandler();
    this.createThrottledResizeHandler();
  }

  /* Private */
  Context.prototype.add = function (waypoint) {
    var axis = waypoint.options.horizontal ? 'horizontal' : 'vertical';
    this.waypoints[axis][waypoint.key] = waypoint;
    this.refresh();
  };

  /* Private */
  Context.prototype.checkEmpty = function () {
    var horizontalEmpty = this.Adapter.isEmptyObject(this.waypoints.horizontal);
    var verticalEmpty = this.Adapter.isEmptyObject(this.waypoints.vertical);
    var isWindow = this.element == this.element.window;
    if (horizontalEmpty && verticalEmpty && !isWindow) {
      this.adapter.off('.waypoints');
      delete contexts[this.key];
    }
  };

  /* Private */
  Context.prototype.createThrottledResizeHandler = function () {
    var self = this;

    function resizeHandler() {
      self.handleResize();
      self.didResize = false;
    }

    this.adapter.on('resize.waypoints', function () {
      if (!self.didResize) {
        self.didResize = true;
        Waypoint.requestAnimationFrame(resizeHandler);
      }
    });
  };

  /* Private */
  Context.prototype.createThrottledScrollHandler = function () {
    var self = this;
    function scrollHandler() {
      self.handleScroll();
      self.didScroll = false;
    }

    this.adapter.on('scroll.waypoints', function () {
      if (!self.didScroll || Waypoint.isTouch) {
        self.didScroll = true;
        Waypoint.requestAnimationFrame(scrollHandler);
      }
    });
  };

  /* Private */
  Context.prototype.handleResize = function () {
    Waypoint.Context.refreshAll();
  };

  /* Private */
  Context.prototype.handleScroll = function () {
    var triggeredGroups = {};
    var axes = {
      horizontal: {
        newScroll: this.adapter.scrollLeft(),
        oldScroll: this.oldScroll.x,
        forward: 'right',
        backward: 'left'
      },
      vertical: {
        newScroll: this.adapter.scrollTop(),
        oldScroll: this.oldScroll.y,
        forward: 'down',
        backward: 'up'
      }
    };

    for (var axisKey in axes) {
      var axis = axes[axisKey];
      var isForward = axis.newScroll > axis.oldScroll;
      var direction = isForward ? axis.forward : axis.backward;

      for (var waypointKey in this.waypoints[axisKey]) {
        var waypoint = this.waypoints[axisKey][waypointKey];
        if (waypoint.triggerPoint === null) {
          continue;
        }
        var wasBeforeTriggerPoint = axis.oldScroll < waypoint.triggerPoint;
        var nowAfterTriggerPoint = axis.newScroll >= waypoint.triggerPoint;
        var crossedForward = wasBeforeTriggerPoint && nowAfterTriggerPoint;
        var crossedBackward = !wasBeforeTriggerPoint && !nowAfterTriggerPoint;
        if (crossedForward || crossedBackward) {
          waypoint.queueTrigger(direction);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        }
      }
    }

    for (var groupKey in triggeredGroups) {
      triggeredGroups[groupKey].flushTriggers();
    }

    this.oldScroll = {
      x: axes.horizontal.newScroll,
      y: axes.vertical.newScroll
    };
  };

  /* Private */
  Context.prototype.innerHeight = function () {
    /*eslint-disable eqeqeq */
    if (this.element == this.element.window) {
      return Waypoint.viewportHeight();
    }
    /*eslint-enable eqeqeq */
    return this.adapter.innerHeight();
  };

  /* Private */
  Context.prototype.remove = function (waypoint) {
    delete this.waypoints[waypoint.axis][waypoint.key];
    this.checkEmpty();
  };

  /* Private */
  Context.prototype.innerWidth = function () {
    /*eslint-disable eqeqeq */
    if (this.element == this.element.window) {
      return Waypoint.viewportWidth();
    }
    /*eslint-enable eqeqeq */
    return this.adapter.innerWidth();
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/context-destroy */
  Context.prototype.destroy = function () {
    var allWaypoints = [];
    for (var axis in this.waypoints) {
      for (var waypointKey in this.waypoints[axis]) {
        allWaypoints.push(this.waypoints[axis][waypointKey]);
      }
    }
    for (var i = 0, end = allWaypoints.length; i < end; i++) {
      allWaypoints[i].destroy();
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/context-refresh */
  Context.prototype.refresh = function () {
    /*eslint-disable eqeqeq */
    var isWindow = this.element == this.element.window;
    /*eslint-enable eqeqeq */
    var contextOffset = isWindow ? undefined : this.adapter.offset();
    var triggeredGroups = {};
    var axes;

    this.handleScroll();
    axes = {
      horizontal: {
        contextOffset: isWindow ? 0 : contextOffset.left,
        contextScroll: isWindow ? 0 : this.oldScroll.x,
        contextDimension: this.innerWidth(),
        oldScroll: this.oldScroll.x,
        forward: 'right',
        backward: 'left',
        offsetProp: 'left'
      },
      vertical: {
        contextOffset: isWindow ? 0 : contextOffset.top,
        contextScroll: isWindow ? 0 : this.oldScroll.y,
        contextDimension: this.innerHeight(),
        oldScroll: this.oldScroll.y,
        forward: 'down',
        backward: 'up',
        offsetProp: 'top'
      }
    };

    for (var axisKey in axes) {
      var axis = axes[axisKey];
      for (var waypointKey in this.waypoints[axisKey]) {
        var waypoint = this.waypoints[axisKey][waypointKey];
        var adjustment = waypoint.options.offset;
        var oldTriggerPoint = waypoint.triggerPoint;
        var elementOffset = 0;
        var freshWaypoint = oldTriggerPoint == null;
        var contextModifier, wasBeforeScroll, nowAfterScroll;
        var triggeredBackward, triggeredForward;

        if (waypoint.element !== waypoint.element.window) {
          elementOffset = waypoint.adapter.offset()[axis.offsetProp];
        }

        if (typeof adjustment === 'function') {
          adjustment = adjustment.apply(waypoint);
        } else if (typeof adjustment === 'string') {
          adjustment = parseFloat(adjustment);
          if (waypoint.options.offset.indexOf('%') > -1) {
            adjustment = Math.ceil(axis.contextDimension * adjustment / 100);
          }
        }

        contextModifier = axis.contextScroll - axis.contextOffset;
        waypoint.triggerPoint = Math.floor(elementOffset + contextModifier - adjustment);
        wasBeforeScroll = oldTriggerPoint < axis.oldScroll;
        nowAfterScroll = waypoint.triggerPoint >= axis.oldScroll;
        triggeredBackward = wasBeforeScroll && nowAfterScroll;
        triggeredForward = !wasBeforeScroll && !nowAfterScroll;

        if (!freshWaypoint && triggeredBackward) {
          waypoint.queueTrigger(axis.backward);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        } else if (!freshWaypoint && triggeredForward) {
          waypoint.queueTrigger(axis.forward);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        } else if (freshWaypoint && axis.oldScroll >= waypoint.triggerPoint) {
          waypoint.queueTrigger(axis.forward);
          triggeredGroups[waypoint.group.id] = waypoint.group;
        }
      }
    }

    Waypoint.requestAnimationFrame(function () {
      for (var groupKey in triggeredGroups) {
        triggeredGroups[groupKey].flushTriggers();
      }
    });

    return this;
  };

  /* Private */
  Context.findOrCreateByElement = function (element) {
    return Context.findByElement(element) || new Context(element);
  };

  /* Private */
  Context.refreshAll = function () {
    for (var contextId in contexts) {
      contexts[contextId].refresh();
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/context-find-by-element */
  Context.findByElement = function (element) {
    return contexts[element.waypointContextKey];
  };

  window.onload = function () {
    if (oldWindowLoad) {
      oldWindowLoad();
    }
    Context.refreshAll();
  };

  Waypoint.requestAnimationFrame = function (callback) {
    var requestFn = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || requestAnimationFrameShim;
    requestFn.call(window, callback);
  };
  Waypoint.Context = Context;
})();(function () {
  'use strict';

  function byTriggerPoint(a, b) {
    return a.triggerPoint - b.triggerPoint;
  }

  function byReverseTriggerPoint(a, b) {
    return b.triggerPoint - a.triggerPoint;
  }

  var groups = {
    vertical: {},
    horizontal: {}
  };
  var Waypoint = window.Waypoint;

  /* http://imakewebthings.com/waypoints/api/group */
  function Group(options) {
    this.name = options.name;
    this.axis = options.axis;
    this.id = this.name + '-' + this.axis;
    this.waypoints = [];
    this.clearTriggerQueues();
    groups[this.axis][this.name] = this;
  }

  /* Private */
  Group.prototype.add = function (waypoint) {
    this.waypoints.push(waypoint);
  };

  /* Private */
  Group.prototype.clearTriggerQueues = function () {
    this.triggerQueues = {
      up: [],
      down: [],
      left: [],
      right: []
    };
  };

  /* Private */
  Group.prototype.flushTriggers = function () {
    for (var direction in this.triggerQueues) {
      var waypoints = this.triggerQueues[direction];
      var reverse = direction === 'up' || direction === 'left';
      waypoints.sort(reverse ? byReverseTriggerPoint : byTriggerPoint);
      for (var i = 0, end = waypoints.length; i < end; i += 1) {
        var waypoint = waypoints[i];
        if (waypoint.options.continuous || i === waypoints.length - 1) {
          waypoint.trigger([direction]);
        }
      }
    }
    this.clearTriggerQueues();
  };

  /* Private */
  Group.prototype.next = function (waypoint) {
    this.waypoints.sort(byTriggerPoint);
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    var isLast = index === this.waypoints.length - 1;
    return isLast ? null : this.waypoints[index + 1];
  };

  /* Private */
  Group.prototype.previous = function (waypoint) {
    this.waypoints.sort(byTriggerPoint);
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    return index ? this.waypoints[index - 1] : null;
  };

  /* Private */
  Group.prototype.queueTrigger = function (waypoint, direction) {
    this.triggerQueues[direction].push(waypoint);
  };

  /* Private */
  Group.prototype.remove = function (waypoint) {
    var index = Waypoint.Adapter.inArray(waypoint, this.waypoints);
    if (index > -1) {
      this.waypoints.splice(index, 1);
    }
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/first */
  Group.prototype.first = function () {
    return this.waypoints[0];
  };

  /* Public */
  /* http://imakewebthings.com/waypoints/api/last */
  Group.prototype.last = function () {
    return this.waypoints[this.waypoints.length - 1];
  };

  /* Private */
  Group.findOrCreate = function (options) {
    return groups[options.axis][options.name] || new Group(options);
  };

  Waypoint.Group = Group;
})();(function () {
  'use strict';

  var $ = window.jQuery;
  var Waypoint = window.Waypoint;

  function JQueryAdapter(element) {
    this.$element = $(element);
  }

  $.each(['innerHeight', 'innerWidth', 'off', 'offset', 'on', 'outerHeight', 'outerWidth', 'scrollLeft', 'scrollTop'], function (i, method) {
    JQueryAdapter.prototype[method] = function () {
      var args = Array.prototype.slice.call(arguments);
      return this.$element[method].apply(this.$element, args);
    };
  });

  $.each(['extend', 'inArray', 'isEmptyObject'], function (i, method) {
    JQueryAdapter[method] = $[method];
  });

  Waypoint.adapters.push({
    name: 'jquery',
    Adapter: JQueryAdapter
  });
  Waypoint.Adapter = JQueryAdapter;
})();(function () {
  'use strict';

  var Waypoint = window.Waypoint;

  function createExtension(framework) {
    return function () {
      var waypoints = [];
      var overrides = arguments[0];

      if (framework.isFunction(arguments[0])) {
        overrides = framework.extend({}, arguments[1]);
        overrides.handler = arguments[0];
      }

      this.each(function () {
        var options = framework.extend({}, overrides, {
          element: this
        });
        if (typeof options.context === 'string') {
          options.context = framework(this).closest(options.context)[0];
        }
        waypoints.push(new Waypoint(options));
      });

      return waypoints;
    };
  }

  if (window.jQuery) {
    window.jQuery.fn.waypoint = createExtension(window.jQuery);
  }
  if (window.Zepto) {
    window.Zepto.fn.waypoint = createExtension(window.Zepto);
  }
})();
;
;/*! PhotoSwipe Default UI - 4.1.1 - 2015-12-24
* http://photoswipe.com
* Copyright (c) 2015 Dmitry Semenov; */
/**
*
* UI on top of main sliding area (caption, arrows, close button, etc.).
* Built just using public methods/properties of PhotoSwipe.
* 
*/
(function (root, factory) {
	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		root.PhotoSwipeUI_Default = factory();
	}
})(this, function () {

	'use strict';

	var PhotoSwipeUI_Default = function (pswp, framework) {

		var ui = this;
		var _overlayUIUpdated = false,
		    _controlsVisible = true,
		    _fullscrenAPI,
		    _controls,
		    _captionContainer,
		    _fakeCaptionContainer,
		    _indexIndicator,
		    _shareButton,
		    _shareModal,
		    _shareModalHidden = true,
		    _initalCloseOnScrollValue,
		    _isIdle,
		    _listen,
		    _loadingIndicator,
		    _loadingIndicatorHidden,
		    _loadingIndicatorTimeout,
		    _galleryHasOneSlide,
		    _options,
		    _defaultUIOptions = {
			barsSize: { top: 44, bottom: 'auto' },
			closeElClasses: ['item', 'caption', 'zoom-wrap', 'ui', 'top-bar'],
			timeToIdle: 4000,
			timeToIdleOutside: 1000,
			loadingIndicatorDelay: 1000, // 2s

			addCaptionHTMLFn: function (item, captionEl /*, isFake */) {
				if (!item.title) {
					captionEl.children[0].innerHTML = '';
					return false;
				}
				captionEl.children[0].innerHTML = item.title;
				return true;
			},

			closeEl: true,
			captionEl: true,
			fullscreenEl: true,
			zoomEl: true,
			shareEl: true,
			counterEl: true,
			arrowEl: true,
			preloaderEl: true,

			tapToClose: false,
			tapToToggleControls: true,

			clickToCloseNonZoomable: true,

			shareButtons: [{ id: 'facebook', label: 'Share on Facebook', url: 'https://www.facebook.com/sharer/sharer.php?u={{url}}' }, { id: 'twitter', label: 'Tweet', url: 'https://twitter.com/intent/tweet?text={{text}}&url={{url}}' }, { id: 'pinterest', label: 'Pin it', url: 'http://www.pinterest.com/pin/create/button/' + '?url={{url}}&media={{image_url}}&description={{text}}' }, { id: 'download', label: 'Download image', url: '{{raw_image_url}}', download: true }],
			getImageURLForShare: function () /* shareButtonData */{
				return pswp.currItem.src || '';
			},
			getPageURLForShare: function () /* shareButtonData */{
				return window.location.href;
			},
			getTextForShare: function () /* shareButtonData */{
				return pswp.currItem.title || '';
			},

			indexIndicatorSep: ' / ',
			fitControlsWidth: 1200

		},
		    _blockControlsTap,
		    _blockControlsTapTimeout;

		var _onControlsTap = function (e) {
			if (_blockControlsTap) {
				return true;
			}

			e = e || window.event;

			if (_options.timeToIdle && _options.mouseUsed && !_isIdle) {
				// reset idle timer
				_onIdleMouseMove();
			}

			var target = e.target || e.srcElement,
			    uiElement,
			    clickedClass = target.getAttribute('class') || '',
			    found;

			for (var i = 0; i < _uiElements.length; i++) {
				uiElement = _uiElements[i];
				if (uiElement.onTap && clickedClass.indexOf('pswp__' + uiElement.name) > -1) {
					uiElement.onTap();
					found = true;
				}
			}

			if (found) {
				if (e.stopPropagation) {
					e.stopPropagation();
				}
				_blockControlsTap = true;

				// Some versions of Android don't prevent ghost click event 
				// when preventDefault() was called on touchstart and/or touchend.
				// 
				// This happens on v4.3, 4.2, 4.1, 
				// older versions strangely work correctly, 
				// but just in case we add delay on all of them)	
				var tapDelay = framework.features.isOldAndroid ? 600 : 30;
				_blockControlsTapTimeout = setTimeout(function () {
					_blockControlsTap = false;
				}, tapDelay);
			}
		},
		    _fitControlsInViewport = function () {
			return !pswp.likelyTouchDevice || _options.mouseUsed || screen.width > _options.fitControlsWidth;
		},
		    _togglePswpClass = function (el, cName, add) {
			framework[(add ? 'add' : 'remove') + 'Class'](el, 'pswp__' + cName);
		},


		// add class when there is just one item in the gallery
		// (by default it hides left/right arrows and 1ofX counter)
		_countNumItems = function () {
			var hasOneSlide = _options.getNumItemsFn() === 1;

			if (hasOneSlide !== _galleryHasOneSlide) {
				_togglePswpClass(_controls, 'ui--one-slide', hasOneSlide);
				_galleryHasOneSlide = hasOneSlide;
			}
		},
		    _toggleShareModalClass = function () {
			_togglePswpClass(_shareModal, 'share-modal--hidden', _shareModalHidden);
		},
		    _toggleShareModal = function () {

			_shareModalHidden = !_shareModalHidden;

			if (!_shareModalHidden) {
				_toggleShareModalClass();
				setTimeout(function () {
					if (!_shareModalHidden) {
						framework.addClass(_shareModal, 'pswp__share-modal--fade-in');
					}
				}, 30);
			} else {
				framework.removeClass(_shareModal, 'pswp__share-modal--fade-in');
				setTimeout(function () {
					if (_shareModalHidden) {
						_toggleShareModalClass();
					}
				}, 300);
			}

			if (!_shareModalHidden) {
				_updateShareURLs();
			}
			return false;
		},
		    _openWindowPopup = function (e) {
			e = e || window.event;
			var target = e.target || e.srcElement;

			pswp.shout('shareLinkClick', e, target);

			if (!target.href) {
				return false;
			}

			if (target.hasAttribute('download')) {
				return true;
			}

			window.open(target.href, 'pswp_share', 'scrollbars=yes,resizable=yes,toolbar=no,' + 'location=yes,width=550,height=420,top=100,left=' + (window.screen ? Math.round(screen.width / 2 - 275) : 100));

			if (!_shareModalHidden) {
				_toggleShareModal();
			}

			return false;
		},
		    _updateShareURLs = function () {
			var shareButtonOut = '',
			    shareButtonData,
			    shareURL,
			    image_url,
			    page_url,
			    share_text;

			for (var i = 0; i < _options.shareButtons.length; i++) {
				shareButtonData = _options.shareButtons[i];

				image_url = _options.getImageURLForShare(shareButtonData);
				page_url = _options.getPageURLForShare(shareButtonData);
				share_text = _options.getTextForShare(shareButtonData);

				shareURL = shareButtonData.url.replace('{{url}}', encodeURIComponent(page_url)).replace('{{image_url}}', encodeURIComponent(image_url)).replace('{{raw_image_url}}', image_url).replace('{{text}}', encodeURIComponent(share_text));

				shareButtonOut += '<a href="' + shareURL + '" target="_blank" ' + 'class="pswp__share--' + shareButtonData.id + '"' + (shareButtonData.download ? 'download' : '') + '>' + shareButtonData.label + '</a>';

				if (_options.parseShareButtonOut) {
					shareButtonOut = _options.parseShareButtonOut(shareButtonData, shareButtonOut);
				}
			}
			_shareModal.children[0].innerHTML = shareButtonOut;
			_shareModal.children[0].onclick = _openWindowPopup;
		},
		    _hasCloseClass = function (target) {
			for (var i = 0; i < _options.closeElClasses.length; i++) {
				if (framework.hasClass(target, 'pswp__' + _options.closeElClasses[i])) {
					return true;
				}
			}
		},
		    _idleInterval,
		    _idleTimer,
		    _idleIncrement = 0,
		    _onIdleMouseMove = function () {
			clearTimeout(_idleTimer);
			_idleIncrement = 0;
			if (_isIdle) {
				ui.setIdle(false);
			}
		},
		    _onMouseLeaveWindow = function (e) {
			e = e ? e : window.event;
			var from = e.relatedTarget || e.toElement;
			if (!from || from.nodeName === 'HTML') {
				clearTimeout(_idleTimer);
				_idleTimer = setTimeout(function () {
					ui.setIdle(true);
				}, _options.timeToIdleOutside);
			}
		},
		    _setupFullscreenAPI = function () {
			if (_options.fullscreenEl && !framework.features.isOldAndroid) {
				if (!_fullscrenAPI) {
					_fullscrenAPI = ui.getFullscreenAPI();
				}
				if (_fullscrenAPI) {
					framework.bind(document, _fullscrenAPI.eventK, ui.updateFullscreen);
					ui.updateFullscreen();
					framework.addClass(pswp.template, 'pswp--supports-fs');
				} else {
					framework.removeClass(pswp.template, 'pswp--supports-fs');
				}
			}
		},
		    _setupLoadingIndicator = function () {
			// Setup loading indicator
			if (_options.preloaderEl) {

				_toggleLoadingIndicator(true);

				_listen('beforeChange', function () {

					clearTimeout(_loadingIndicatorTimeout);

					// display loading indicator with delay
					_loadingIndicatorTimeout = setTimeout(function () {

						if (pswp.currItem && pswp.currItem.loading) {

							if (!pswp.allowProgressiveImg() || pswp.currItem.img && !pswp.currItem.img.naturalWidth) {
								// show preloader if progressive loading is not enabled, 
								// or image width is not defined yet (because of slow connection)
								_toggleLoadingIndicator(false);
								// items-controller.js function allowProgressiveImg
							}
						} else {
							_toggleLoadingIndicator(true); // hide preloader
						}
					}, _options.loadingIndicatorDelay);
				});
				_listen('imageLoadComplete', function (index, item) {
					if (pswp.currItem === item) {
						_toggleLoadingIndicator(true);
					}
				});
			}
		},
		    _toggleLoadingIndicator = function (hide) {
			if (_loadingIndicatorHidden !== hide) {
				_togglePswpClass(_loadingIndicator, 'preloader--active', !hide);
				_loadingIndicatorHidden = hide;
			}
		},
		    _applyNavBarGaps = function (item) {
			var gap = item.vGap;

			if (_fitControlsInViewport()) {

				var bars = _options.barsSize;
				if (_options.captionEl && bars.bottom === 'auto') {
					if (!_fakeCaptionContainer) {
						_fakeCaptionContainer = framework.createEl('pswp__caption pswp__caption--fake');
						_fakeCaptionContainer.appendChild(framework.createEl('pswp__caption__center'));
						_controls.insertBefore(_fakeCaptionContainer, _captionContainer);
						framework.addClass(_controls, 'pswp__ui--fit');
					}
					if (_options.addCaptionHTMLFn(item, _fakeCaptionContainer, true)) {

						var captionSize = _fakeCaptionContainer.clientHeight;
						gap.bottom = parseInt(captionSize, 10) || 44;
					} else {
						gap.bottom = bars.top; // if no caption, set size of bottom gap to size of top
					}
				} else {
					gap.bottom = bars.bottom === 'auto' ? 0 : bars.bottom;
				}

				// height of top bar is static, no need to calculate it
				gap.top = bars.top;
			} else {
				gap.top = gap.bottom = 0;
			}
		},
		    _setupIdle = function () {
			// Hide controls when mouse is used
			if (_options.timeToIdle) {
				_listen('mouseUsed', function () {

					framework.bind(document, 'mousemove', _onIdleMouseMove);
					framework.bind(document, 'mouseout', _onMouseLeaveWindow);

					_idleInterval = setInterval(function () {
						_idleIncrement++;
						if (_idleIncrement === 2) {
							ui.setIdle(true);
						}
					}, _options.timeToIdle / 2);
				});
			}
		},
		    _setupHidingControlsDuringGestures = function () {

			// Hide controls on vertical drag
			_listen('onVerticalDrag', function (now) {
				if (_controlsVisible && now < 0.95) {
					ui.hideControls();
				} else if (!_controlsVisible && now >= 0.95) {
					ui.showControls();
				}
			});

			// Hide controls when pinching to close
			var pinchControlsHidden;
			_listen('onPinchClose', function (now) {
				if (_controlsVisible && now < 0.9) {
					ui.hideControls();
					pinchControlsHidden = true;
				} else if (pinchControlsHidden && !_controlsVisible && now > 0.9) {
					ui.showControls();
				}
			});

			_listen('zoomGestureEnded', function () {
				pinchControlsHidden = false;
				if (pinchControlsHidden && !_controlsVisible) {
					ui.showControls();
				}
			});
		};

		var _uiElements = [{
			name: 'caption',
			option: 'captionEl',
			onInit: function (el) {
				_captionContainer = el;
			}
		}, {
			name: 'share-modal',
			option: 'shareEl',
			onInit: function (el) {
				_shareModal = el;
			},
			onTap: function () {
				_toggleShareModal();
			}
		}, {
			name: 'button--share',
			option: 'shareEl',
			onInit: function (el) {
				_shareButton = el;
			},
			onTap: function () {
				_toggleShareModal();
			}
		}, {
			name: 'button--zoom',
			option: 'zoomEl',
			onTap: pswp.toggleDesktopZoom
		}, {
			name: 'counter',
			option: 'counterEl',
			onInit: function (el) {
				_indexIndicator = el;
			}
		}, {
			name: 'button--close',
			option: 'closeEl',
			onTap: pswp.close
		}, {
			name: 'button--arrow--left',
			option: 'arrowEl',
			onTap: pswp.prev
		}, {
			name: 'button--arrow--right',
			option: 'arrowEl',
			onTap: pswp.next
		}, {
			name: 'button--fs',
			option: 'fullscreenEl',
			onTap: function () {
				if (_fullscrenAPI.isFullscreen()) {
					_fullscrenAPI.exit();
				} else {
					_fullscrenAPI.enter();
				}
			}
		}, {
			name: 'preloader',
			option: 'preloaderEl',
			onInit: function (el) {
				_loadingIndicator = el;
			}
		}];

		var _setupUIElements = function () {
			var item, classAttr, uiElement;

			var loopThroughChildElements = function (sChildren) {
				if (!sChildren) {
					return;
				}

				var l = sChildren.length;
				for (var i = 0; i < l; i++) {
					item = sChildren[i];
					classAttr = item.className;

					for (var a = 0; a < _uiElements.length; a++) {
						uiElement = _uiElements[a];

						if (classAttr.indexOf('pswp__' + uiElement.name) > -1) {

							if (_options[uiElement.option]) {
								// if element is not disabled from options

								framework.removeClass(item, 'pswp__element--disabled');
								if (uiElement.onInit) {
									uiElement.onInit(item);
								}

								//item.style.display = 'block';
							} else {
								framework.addClass(item, 'pswp__element--disabled');
								//item.style.display = 'none';
							}
						}
					}
				}
			};
			loopThroughChildElements(_controls.children);

			var topBar = framework.getChildByClass(_controls, 'pswp__top-bar');
			if (topBar) {
				loopThroughChildElements(topBar.children);
			}
		};

		ui.init = function () {

			// extend options
			framework.extend(pswp.options, _defaultUIOptions, true);

			// create local link for fast access
			_options = pswp.options;

			// find pswp__ui element
			_controls = framework.getChildByClass(pswp.scrollWrap, 'pswp__ui');

			// create local link
			_listen = pswp.listen;

			_setupHidingControlsDuringGestures();

			// update controls when slides change
			_listen('beforeChange', ui.update);

			// toggle zoom on double-tap
			_listen('doubleTap', function (point) {
				var initialZoomLevel = pswp.currItem.initialZoomLevel;
				if (pswp.getZoomLevel() !== initialZoomLevel) {
					pswp.zoomTo(initialZoomLevel, point, 333);
				} else {
					pswp.zoomTo(_options.getDoubleTapZoom(false, pswp.currItem), point, 333);
				}
			});

			// Allow text selection in caption
			_listen('preventDragEvent', function (e, isDown, preventObj) {
				var t = e.target || e.srcElement;
				if (t && t.getAttribute('class') && e.type.indexOf('mouse') > -1 && (t.getAttribute('class').indexOf('__caption') > 0 || /(SMALL|STRONG|EM)/i.test(t.tagName))) {
					preventObj.prevent = false;
				}
			});

			// bind events for UI
			_listen('bindEvents', function () {
				framework.bind(_controls, 'pswpTap click', _onControlsTap);
				framework.bind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);

				if (!pswp.likelyTouchDevice) {
					framework.bind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);
				}
			});

			// unbind events for UI
			_listen('unbindEvents', function () {
				if (!_shareModalHidden) {
					_toggleShareModal();
				}

				if (_idleInterval) {
					clearInterval(_idleInterval);
				}
				framework.unbind(document, 'mouseout', _onMouseLeaveWindow);
				framework.unbind(document, 'mousemove', _onIdleMouseMove);
				framework.unbind(_controls, 'pswpTap click', _onControlsTap);
				framework.unbind(pswp.scrollWrap, 'pswpTap', ui.onGlobalTap);
				framework.unbind(pswp.scrollWrap, 'mouseover', ui.onMouseOver);

				if (_fullscrenAPI) {
					framework.unbind(document, _fullscrenAPI.eventK, ui.updateFullscreen);
					if (_fullscrenAPI.isFullscreen()) {
						_options.hideAnimationDuration = 0;
						_fullscrenAPI.exit();
					}
					_fullscrenAPI = null;
				}
			});

			// clean up things when gallery is destroyed
			_listen('destroy', function () {
				if (_options.captionEl) {
					if (_fakeCaptionContainer) {
						_controls.removeChild(_fakeCaptionContainer);
					}
					framework.removeClass(_captionContainer, 'pswp__caption--empty');
				}

				if (_shareModal) {
					_shareModal.children[0].onclick = null;
				}
				framework.removeClass(_controls, 'pswp__ui--over-close');
				framework.addClass(_controls, 'pswp__ui--hidden');
				ui.setIdle(false);
			});

			if (!_options.showAnimationDuration) {
				framework.removeClass(_controls, 'pswp__ui--hidden');
			}
			_listen('initialZoomIn', function () {
				if (_options.showAnimationDuration) {
					framework.removeClass(_controls, 'pswp__ui--hidden');
				}
			});
			_listen('initialZoomOut', function () {
				framework.addClass(_controls, 'pswp__ui--hidden');
			});

			_listen('parseVerticalMargin', _applyNavBarGaps);

			_setupUIElements();

			if (_options.shareEl && _shareButton && _shareModal) {
				_shareModalHidden = true;
			}

			_countNumItems();

			_setupIdle();

			_setupFullscreenAPI();

			_setupLoadingIndicator();
		};

		ui.setIdle = function (isIdle) {
			_isIdle = isIdle;
			_togglePswpClass(_controls, 'ui--idle', isIdle);
		};

		ui.update = function () {
			// Don't update UI if it's hidden
			if (_controlsVisible && pswp.currItem) {

				ui.updateIndexIndicator();

				if (_options.captionEl) {
					_options.addCaptionHTMLFn(pswp.currItem, _captionContainer);

					_togglePswpClass(_captionContainer, 'caption--empty', !pswp.currItem.title);
				}

				_overlayUIUpdated = true;
			} else {
				_overlayUIUpdated = false;
			}

			if (!_shareModalHidden) {
				_toggleShareModal();
			}

			_countNumItems();
		};

		ui.updateFullscreen = function (e) {

			if (e) {
				// some browsers change window scroll position during the fullscreen
				// so PhotoSwipe updates it just in case
				setTimeout(function () {
					pswp.setScrollOffset(0, framework.getScrollY());
				}, 50);
			}

			// toogle pswp--fs class on root element
			framework[(_fullscrenAPI.isFullscreen() ? 'add' : 'remove') + 'Class'](pswp.template, 'pswp--fs');
		};

		ui.updateIndexIndicator = function () {
			if (_options.counterEl) {
				_indexIndicator.innerHTML = pswp.getCurrentIndex() + 1 + _options.indexIndicatorSep + _options.getNumItemsFn();
			}
		};

		ui.onGlobalTap = function (e) {
			e = e || window.event;
			var target = e.target || e.srcElement;

			if (_blockControlsTap) {
				return;
			}

			if (e.detail && e.detail.pointerType === 'mouse') {

				// close gallery if clicked outside of the image
				if (_hasCloseClass(target)) {
					pswp.close();
					return;
				}

				if (framework.hasClass(target, 'pswp__img')) {
					if (pswp.getZoomLevel() === 1 && pswp.getZoomLevel() <= pswp.currItem.fitRatio) {
						if (_options.clickToCloseNonZoomable) {
							pswp.close();
						}
					} else {
						pswp.toggleDesktopZoom(e.detail.releasePoint);
					}
				}
			} else {

				// tap anywhere (except buttons) to toggle visibility of controls
				if (_options.tapToToggleControls) {
					if (_controlsVisible) {
						ui.hideControls();
					} else {
						ui.showControls();
					}
				}

				// tap to close gallery
				if (_options.tapToClose && (framework.hasClass(target, 'pswp__img') || _hasCloseClass(target))) {
					pswp.close();
					return;
				}
			}
		};
		ui.onMouseOver = function (e) {
			e = e || window.event;
			var target = e.target || e.srcElement;

			// add class when mouse is over an element that should close the gallery
			_togglePswpClass(_controls, 'ui--over-close', _hasCloseClass(target));
		};

		ui.hideControls = function () {
			framework.addClass(_controls, 'pswp__ui--hidden');
			_controlsVisible = false;
		};

		ui.showControls = function () {
			_controlsVisible = true;
			if (!_overlayUIUpdated) {
				ui.update();
			}
			framework.removeClass(_controls, 'pswp__ui--hidden');
		};

		ui.supportsFullscreen = function () {
			var d = document;
			return !!(d.exitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen || d.msExitFullscreen);
		};

		ui.getFullscreenAPI = function () {
			var dE = document.documentElement,
			    api,
			    tF = 'fullscreenchange';

			if (dE.requestFullscreen) {
				api = {
					enterK: 'requestFullscreen',
					exitK: 'exitFullscreen',
					elementK: 'fullscreenElement',
					eventK: tF
				};
			} else if (dE.mozRequestFullScreen) {
				api = {
					enterK: 'mozRequestFullScreen',
					exitK: 'mozCancelFullScreen',
					elementK: 'mozFullScreenElement',
					eventK: 'moz' + tF
				};
			} else if (dE.webkitRequestFullscreen) {
				api = {
					enterK: 'webkitRequestFullscreen',
					exitK: 'webkitExitFullscreen',
					elementK: 'webkitFullscreenElement',
					eventK: 'webkit' + tF
				};
			} else if (dE.msRequestFullscreen) {
				api = {
					enterK: 'msRequestFullscreen',
					exitK: 'msExitFullscreen',
					elementK: 'msFullscreenElement',
					eventK: 'MSFullscreenChange'
				};
			}

			if (api) {
				api.enter = function () {
					// disable close-on-scroll in fullscreen
					_initalCloseOnScrollValue = _options.closeOnScroll;
					_options.closeOnScroll = false;

					if (this.enterK === 'webkitRequestFullscreen') {
						pswp.template[this.enterK](Element.ALLOW_KEYBOARD_INPUT);
					} else {
						return pswp.template[this.enterK]();
					}
				};
				api.exit = function () {
					_options.closeOnScroll = _initalCloseOnScrollValue;

					return document[this.exitK]();
				};
				api.isFullscreen = function () {
					return document[this.elementK];
				};
			}

			return api;
		};
	};
	return PhotoSwipeUI_Default;
});
;/*! PhotoSwipe - v4.1.1 - 2015-12-24
* http://photoswipe.com
* Copyright (c) 2015 Dmitry Semenov; */
(function (root, factory) {
	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		root.PhotoSwipe = factory();
	}
})(this, function () {

	'use strict';

	var PhotoSwipe = function (template, UiClass, items, options) {

		/*>>framework-bridge*/
		/**
   *
   * Set of generic functions used by gallery.
   * 
   * You're free to modify anything here as long as functionality is kept.
   * 
   */
		var framework = {
			features: null,
			bind: function (target, type, listener, unbind) {
				var methodName = (unbind ? 'remove' : 'add') + 'EventListener';
				type = type.split(' ');
				for (var i = 0; i < type.length; i++) {
					if (type[i]) {
						target[methodName](type[i], listener, false);
					}
				}
			},
			isArray: function (obj) {
				return obj instanceof Array;
			},
			createEl: function (classes, tag) {
				var el = document.createElement(tag || 'div');
				if (classes) {
					el.className = classes;
				}
				return el;
			},
			getScrollY: function () {
				var yOffset = window.pageYOffset;
				return yOffset !== undefined ? yOffset : document.documentElement.scrollTop;
			},
			unbind: function (target, type, listener) {
				framework.bind(target, type, listener, true);
			},
			removeClass: function (el, className) {
				var reg = new RegExp('(\\s|^)' + className + '(\\s|$)');
				el.className = el.className.replace(reg, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
			},
			addClass: function (el, className) {
				if (!framework.hasClass(el, className)) {
					el.className += (el.className ? ' ' : '') + className;
				}
			},
			hasClass: function (el, className) {
				return el.className && new RegExp('(^|\\s)' + className + '(\\s|$)').test(el.className);
			},
			getChildByClass: function (parentEl, childClassName) {
				var node = parentEl.firstChild;
				while (node) {
					if (framework.hasClass(node, childClassName)) {
						return node;
					}
					node = node.nextSibling;
				}
			},
			arraySearch: function (array, value, key) {
				var i = array.length;
				while (i--) {
					if (array[i][key] === value) {
						return i;
					}
				}
				return -1;
			},
			extend: function (o1, o2, preventOverwrite) {
				for (var prop in o2) {
					if (o2.hasOwnProperty(prop)) {
						if (preventOverwrite && o1.hasOwnProperty(prop)) {
							continue;
						}
						o1[prop] = o2[prop];
					}
				}
			},
			easing: {
				sine: {
					out: function (k) {
						return Math.sin(k * (Math.PI / 2));
					},
					inOut: function (k) {
						return -(Math.cos(Math.PI * k) - 1) / 2;
					}
				},
				cubic: {
					out: function (k) {
						return --k * k * k + 1;
					}
				}
				/*
    	elastic: {
    		out: function ( k ) {
    				var s, a = 0.1, p = 0.4;
    			if ( k === 0 ) return 0;
    			if ( k === 1 ) return 1;
    			if ( !a || a < 1 ) { a = 1; s = p / 4; }
    			else s = p * Math.asin( 1 / a ) / ( 2 * Math.PI );
    			return ( a * Math.pow( 2, - 10 * k) * Math.sin( ( k - s ) * ( 2 * Math.PI ) / p ) + 1 );
    			},
    	},
    	back: {
    		out: function ( k ) {
    			var s = 1.70158;
    			return --k * k * ( ( s + 1 ) * k + s ) + 1;
    		}
    	}
    */
			},

			/**
    * 
    * @return {object}
    * 
    * {
    *  raf : request animation frame function
    *  caf : cancel animation frame function
    *  transfrom : transform property key (with vendor), or null if not supported
    *  oldIE : IE8 or below
    * }
    * 
    */
			detectFeatures: function () {
				if (framework.features) {
					return framework.features;
				}
				var helperEl = framework.createEl(),
				    helperStyle = helperEl.style,
				    vendor = '',
				    features = {};

				// IE8 and below
				features.oldIE = document.all && !document.addEventListener;

				features.touch = 'ontouchstart' in window;

				if (window.requestAnimationFrame) {
					features.raf = window.requestAnimationFrame;
					features.caf = window.cancelAnimationFrame;
				}

				features.pointerEvent = navigator.pointerEnabled || navigator.msPointerEnabled;

				// fix false-positive detection of old Android in new IE
				// (IE11 ua string contains "Android 4.0")

				if (!features.pointerEvent) {

					var ua = navigator.userAgent;

					// Detect if device is iPhone or iPod and if it's older than iOS 8
					// http://stackoverflow.com/a/14223920
					// 
					// This detection is made because of buggy top/bottom toolbars
					// that don't trigger window.resize event.
					// For more info refer to _isFixedPosition variable in core.js

					if (/iP(hone|od)/.test(navigator.platform)) {
						var v = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
						if (v && v.length > 0) {
							v = parseInt(v[1], 10);
							if (v >= 1 && v < 8) {
								features.isOldIOSPhone = true;
							}
						}
					}

					// Detect old Android (before KitKat)
					// due to bugs related to position:fixed
					// http://stackoverflow.com/questions/7184573/pick-up-the-android-version-in-the-browser-by-javascript

					var match = ua.match(/Android\s([0-9\.]*)/);
					var androidversion = match ? match[1] : 0;
					androidversion = parseFloat(androidversion);
					if (androidversion >= 1) {
						if (androidversion < 4.4) {
							features.isOldAndroid = true; // for fixed position bug & performance
						}
						features.androidVersion = androidversion; // for touchend bug
					}
					features.isMobileOpera = /opera mini|opera mobi/i.test(ua);

					// p.s. yes, yes, UA sniffing is bad, propose your solution for above bugs.
				}

				var styleChecks = ['transform', 'perspective', 'animationName'],
				    vendors = ['', 'webkit', 'Moz', 'ms', 'O'],
				    styleCheckItem,
				    styleName;

				for (var i = 0; i < 4; i++) {
					vendor = vendors[i];

					for (var a = 0; a < 3; a++) {
						styleCheckItem = styleChecks[a];

						// uppercase first letter of property name, if vendor is present
						styleName = vendor + (vendor ? styleCheckItem.charAt(0).toUpperCase() + styleCheckItem.slice(1) : styleCheckItem);

						if (!features[styleCheckItem] && styleName in helperStyle) {
							features[styleCheckItem] = styleName;
						}
					}

					if (vendor && !features.raf) {
						vendor = vendor.toLowerCase();
						features.raf = window[vendor + 'RequestAnimationFrame'];
						if (features.raf) {
							features.caf = window[vendor + 'CancelAnimationFrame'] || window[vendor + 'CancelRequestAnimationFrame'];
						}
					}
				}

				if (!features.raf) {
					var lastTime = 0;
					features.raf = function (fn) {
						var currTime = new Date().getTime();
						var timeToCall = Math.max(0, 16 - (currTime - lastTime));
						var id = window.setTimeout(function () {
							fn(currTime + timeToCall);
						}, timeToCall);
						lastTime = currTime + timeToCall;
						return id;
					};
					features.caf = function (id) {
						clearTimeout(id);
					};
				}

				// Detect SVG support
				features.svg = !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect;

				framework.features = features;

				return features;
			}
		};

		framework.detectFeatures();

		// Override addEventListener for old versions of IE
		if (framework.features.oldIE) {

			framework.bind = function (target, type, listener, unbind) {

				type = type.split(' ');

				var methodName = (unbind ? 'detach' : 'attach') + 'Event',
				    evName,
				    _handleEv = function () {
					listener.handleEvent.call(listener);
				};

				for (var i = 0; i < type.length; i++) {
					evName = type[i];
					if (evName) {

						if (typeof listener === 'object' && listener.handleEvent) {
							if (!unbind) {
								listener['oldIE' + evName] = _handleEv;
							} else {
								if (!listener['oldIE' + evName]) {
									return false;
								}
							}

							target[methodName]('on' + evName, listener['oldIE' + evName]);
						} else {
							target[methodName]('on' + evName, listener);
						}
					}
				}
			};
		}

		/*>>framework-bridge*/

		/*>>core*/
		//function(template, UiClass, items, options)

		var self = this;

		/**
   * Static vars, don't change unless you know what you're doing.
   */
		var DOUBLE_TAP_RADIUS = 25,
		    NUM_HOLDERS = 3;

		/**
   * Options
   */
		var _options = {
			allowPanToNext: true,
			spacing: 0.12,
			bgOpacity: 1,
			mouseUsed: false,
			loop: true,
			pinchToClose: true,
			closeOnScroll: true,
			closeOnVerticalDrag: true,
			verticalDragRange: 0.75,
			hideAnimationDuration: 333,
			showAnimationDuration: 333,
			showHideOpacity: false,
			focus: true,
			escKey: true,
			arrowKeys: true,
			mainScrollEndFriction: 0.35,
			panEndFriction: 0.35,
			isClickableElement: function (el) {
				return el.tagName === 'A';
			},
			getDoubleTapZoom: function (isMouseClick, item) {
				if (isMouseClick) {
					return 1;
				} else {
					return item.initialZoomLevel < 0.7 ? 1 : 1.33;
				}
			},
			maxSpreadZoom: 1.33,
			modal: true,

			// not fully implemented yet
			scaleMode: 'fit' // TODO
		};
		framework.extend(_options, options);

		/**
   * Private helper variables & functions
   */

		var _getEmptyPoint = function () {
			return { x: 0, y: 0 };
		};

		var _isOpen,
		    _isDestroying,
		    _closedByScroll,
		    _currentItemIndex,
		    _containerStyle,
		    _containerShiftIndex,
		    _currPanDist = _getEmptyPoint(),
		    _startPanOffset = _getEmptyPoint(),
		    _panOffset = _getEmptyPoint(),
		    _upMoveEvents,
		    // drag move, drag end & drag cancel events array
		_downEvents,
		    // drag start events array
		_globalEventHandlers,
		    _viewportSize = {},
		    _currZoomLevel,
		    _startZoomLevel,
		    _translatePrefix,
		    _translateSufix,
		    _updateSizeInterval,
		    _itemsNeedUpdate,
		    _currPositionIndex = 0,
		    _offset = {},
		    _slideSize = _getEmptyPoint(),
		    // size of slide area, including spacing
		_itemHolders,
		    _prevItemIndex,
		    _indexDiff = 0,
		    // difference of indexes since last content update
		_dragStartEvent,
		    _dragMoveEvent,
		    _dragEndEvent,
		    _dragCancelEvent,
		    _transformKey,
		    _pointerEventEnabled,
		    _isFixedPosition = true,
		    _likelyTouchDevice,
		    _modules = [],
		    _requestAF,
		    _cancelAF,
		    _initalClassName,
		    _initalWindowScrollY,
		    _oldIE,
		    _currentWindowScrollY,
		    _features,
		    _windowVisibleSize = {},
		    _renderMaxResolution = false,


		// Registers PhotoSWipe module (History, Controller ...)
		_registerModule = function (name, module) {
			framework.extend(self, module.publicMethods);
			_modules.push(name);
		},
		    _getLoopedId = function (index) {
			var numSlides = _getNumItems();
			if (index > numSlides - 1) {
				return index - numSlides;
			} else if (index < 0) {
				return numSlides + index;
			}
			return index;
		},


		// Micro bind/trigger
		_listeners = {},
		    _listen = function (name, fn) {
			if (!_listeners[name]) {
				_listeners[name] = [];
			}
			return _listeners[name].push(fn);
		},
		    _shout = function (name) {
			var listeners = _listeners[name];

			if (listeners) {
				var args = Array.prototype.slice.call(arguments);
				args.shift();

				for (var i = 0; i < listeners.length; i++) {
					listeners[i].apply(self, args);
				}
			}
		},
		    _getCurrentTime = function () {
			return new Date().getTime();
		},
		    _applyBgOpacity = function (opacity) {
			_bgOpacity = opacity;
			self.bg.style.opacity = opacity * _options.bgOpacity;
		},
		    _applyZoomTransform = function (styleObj, x, y, zoom, item) {
			if (!_renderMaxResolution || item && item !== self.currItem) {
				zoom = zoom / (item ? item.fitRatio : self.currItem.fitRatio);
			}

			styleObj[_transformKey] = _translatePrefix + x + 'px, ' + y + 'px' + _translateSufix + ' scale(' + zoom + ')';
		},
		    _applyCurrentZoomPan = function (allowRenderResolution) {
			if (_currZoomElementStyle) {

				if (allowRenderResolution) {
					if (_currZoomLevel > self.currItem.fitRatio) {
						if (!_renderMaxResolution) {
							_setImageSize(self.currItem, false, true);
							_renderMaxResolution = true;
						}
					} else {
						if (_renderMaxResolution) {
							_setImageSize(self.currItem);
							_renderMaxResolution = false;
						}
					}
				}

				_applyZoomTransform(_currZoomElementStyle, _panOffset.x, _panOffset.y, _currZoomLevel);
			}
		},
		    _applyZoomPanToItem = function (item) {
			if (item.container) {

				_applyZoomTransform(item.container.style, item.initialPosition.x, item.initialPosition.y, item.initialZoomLevel, item);
			}
		},
		    _setTranslateX = function (x, elStyle) {
			elStyle[_transformKey] = _translatePrefix + x + 'px, 0px' + _translateSufix;
		},
		    _moveMainScroll = function (x, dragging) {

			if (!_options.loop && dragging) {
				var newSlideIndexOffset = _currentItemIndex + (_slideSize.x * _currPositionIndex - x) / _slideSize.x,
				    delta = Math.round(x - _mainScrollPos.x);

				if (newSlideIndexOffset < 0 && delta > 0 || newSlideIndexOffset >= _getNumItems() - 1 && delta < 0) {
					x = _mainScrollPos.x + delta * _options.mainScrollEndFriction;
				}
			}

			_mainScrollPos.x = x;
			_setTranslateX(x, _containerStyle);
		},
		    _calculatePanOffset = function (axis, zoomLevel) {
			var m = _midZoomPoint[axis] - _offset[axis];
			return _startPanOffset[axis] + _currPanDist[axis] + m - m * (zoomLevel / _startZoomLevel);
		},
		    _equalizePoints = function (p1, p2) {
			p1.x = p2.x;
			p1.y = p2.y;
			if (p2.id) {
				p1.id = p2.id;
			}
		},
		    _roundPoint = function (p) {
			p.x = Math.round(p.x);
			p.y = Math.round(p.y);
		},
		    _mouseMoveTimeout = null,
		    _onFirstMouseMove = function () {
			// Wait until mouse move event is fired at least twice during 100ms
			// We do this, because some mobile browsers trigger it on touchstart
			if (_mouseMoveTimeout) {
				framework.unbind(document, 'mousemove', _onFirstMouseMove);
				framework.addClass(template, 'pswp--has_mouse');
				_options.mouseUsed = true;
				_shout('mouseUsed');
			}
			_mouseMoveTimeout = setTimeout(function () {
				_mouseMoveTimeout = null;
			}, 100);
		},
		    _bindEvents = function () {
			framework.bind(document, 'keydown', self);

			if (_features.transform) {
				// don't bind click event in browsers that don't support transform (mostly IE8)
				framework.bind(self.scrollWrap, 'click', self);
			}

			if (!_options.mouseUsed) {
				framework.bind(document, 'mousemove', _onFirstMouseMove);
			}

			framework.bind(window, 'resize scroll', self);

			_shout('bindEvents');
		},
		    _unbindEvents = function () {
			framework.unbind(window, 'resize', self);
			framework.unbind(window, 'scroll', _globalEventHandlers.scroll);
			framework.unbind(document, 'keydown', self);
			framework.unbind(document, 'mousemove', _onFirstMouseMove);

			if (_features.transform) {
				framework.unbind(self.scrollWrap, 'click', self);
			}

			if (_isDragging) {
				framework.unbind(window, _upMoveEvents, self);
			}

			_shout('unbindEvents');
		},
		    _calculatePanBounds = function (zoomLevel, update) {
			var bounds = _calculateItemSize(self.currItem, _viewportSize, zoomLevel);
			if (update) {
				_currPanBounds = bounds;
			}
			return bounds;
		},
		    _getMinZoomLevel = function (item) {
			if (!item) {
				item = self.currItem;
			}
			return item.initialZoomLevel;
		},
		    _getMaxZoomLevel = function (item) {
			if (!item) {
				item = self.currItem;
			}
			return item.w > 0 ? _options.maxSpreadZoom : 1;
		},


		// Return true if offset is out of the bounds
		_modifyDestPanOffset = function (axis, destPanBounds, destPanOffset, destZoomLevel) {
			if (destZoomLevel === self.currItem.initialZoomLevel) {
				destPanOffset[axis] = self.currItem.initialPosition[axis];
				return true;
			} else {
				destPanOffset[axis] = _calculatePanOffset(axis, destZoomLevel);

				if (destPanOffset[axis] > destPanBounds.min[axis]) {
					destPanOffset[axis] = destPanBounds.min[axis];
					return true;
				} else if (destPanOffset[axis] < destPanBounds.max[axis]) {
					destPanOffset[axis] = destPanBounds.max[axis];
					return true;
				}
			}
			return false;
		},
		    _setupTransforms = function () {

			if (_transformKey) {
				// setup 3d transforms
				var allow3dTransform = _features.perspective && !_likelyTouchDevice;
				_translatePrefix = 'translate' + (allow3dTransform ? '3d(' : '(');
				_translateSufix = _features.perspective ? ', 0px)' : ')';
				return;
			}

			// Override zoom/pan/move functions in case old browser is used (most likely IE)
			// (so they use left/top/width/height, instead of CSS transform)

			_transformKey = 'left';
			framework.addClass(template, 'pswp--ie');

			_setTranslateX = function (x, elStyle) {
				elStyle.left = x + 'px';
			};
			_applyZoomPanToItem = function (item) {

				var zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio,
				    s = item.container.style,
				    w = zoomRatio * item.w,
				    h = zoomRatio * item.h;

				s.width = w + 'px';
				s.height = h + 'px';
				s.left = item.initialPosition.x + 'px';
				s.top = item.initialPosition.y + 'px';
			};
			_applyCurrentZoomPan = function () {
				if (_currZoomElementStyle) {

					var s = _currZoomElementStyle,
					    item = self.currItem,
					    zoomRatio = item.fitRatio > 1 ? 1 : item.fitRatio,
					    w = zoomRatio * item.w,
					    h = zoomRatio * item.h;

					s.width = w + 'px';
					s.height = h + 'px';

					s.left = _panOffset.x + 'px';
					s.top = _panOffset.y + 'px';
				}
			};
		},
		    _onKeyDown = function (e) {
			var keydownAction = '';
			if (_options.escKey && e.keyCode === 27) {
				keydownAction = 'close';
			} else if (_options.arrowKeys) {
				if (e.keyCode === 37) {
					keydownAction = 'prev';
				} else if (e.keyCode === 39) {
					keydownAction = 'next';
				}
			}

			if (keydownAction) {
				// don't do anything if special key pressed to prevent from overriding default browser actions
				// e.g. in Chrome on Mac cmd+arrow-left returns to previous page
				if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey) {
					if (e.preventDefault) {
						e.preventDefault();
					} else {
						e.returnValue = false;
					}
					self[keydownAction]();
				}
			}
		},
		    _onGlobalClick = function (e) {
			if (!e) {
				return;
			}

			// don't allow click event to pass through when triggering after drag or some other gesture
			if (_moved || _zoomStarted || _mainScrollAnimating || _verticalDragInitiated) {
				e.preventDefault();
				e.stopPropagation();
			}
		},
		    _updatePageScrollOffset = function () {
			self.setScrollOffset(0, framework.getScrollY());
		};

		// Micro animation engine
		var _animations = {},
		    _numAnimations = 0,
		    _stopAnimation = function (name) {
			if (_animations[name]) {
				if (_animations[name].raf) {
					_cancelAF(_animations[name].raf);
				}
				_numAnimations--;
				delete _animations[name];
			}
		},
		    _registerStartAnimation = function (name) {
			if (_animations[name]) {
				_stopAnimation(name);
			}
			if (!_animations[name]) {
				_numAnimations++;
				_animations[name] = {};
			}
		},
		    _stopAllAnimations = function () {
			for (var prop in _animations) {

				if (_animations.hasOwnProperty(prop)) {
					_stopAnimation(prop);
				}
			}
		},
		    _animateProp = function (name, b, endProp, d, easingFn, onUpdate, onComplete) {
			var startAnimTime = _getCurrentTime(),
			    t;
			_registerStartAnimation(name);

			var animloop = function () {
				if (_animations[name]) {

					t = _getCurrentTime() - startAnimTime; // time diff
					//b - beginning (start prop)
					//d - anim duration

					if (t >= d) {
						_stopAnimation(name);
						onUpdate(endProp);
						if (onComplete) {
							onComplete();
						}
						return;
					}
					onUpdate((endProp - b) * easingFn(t / d) + b);

					_animations[name].raf = _requestAF(animloop);
				}
			};
			animloop();
		};

		var publicMethods = {

			// make a few local variables and functions public
			shout: _shout,
			listen: _listen,
			viewportSize: _viewportSize,
			options: _options,

			isMainScrollAnimating: function () {
				return _mainScrollAnimating;
			},
			getZoomLevel: function () {
				return _currZoomLevel;
			},
			getCurrentIndex: function () {
				return _currentItemIndex;
			},
			isDragging: function () {
				return _isDragging;
			},
			isZooming: function () {
				return _isZooming;
			},
			setScrollOffset: function (x, y) {
				_offset.x = x;
				_currentWindowScrollY = _offset.y = y;
				_shout('updateScrollOffset', _offset);
			},
			applyZoomPan: function (zoomLevel, panX, panY, allowRenderResolution) {
				_panOffset.x = panX;
				_panOffset.y = panY;
				_currZoomLevel = zoomLevel;
				_applyCurrentZoomPan(allowRenderResolution);
			},

			init: function () {

				if (_isOpen || _isDestroying) {
					return;
				}

				var i;

				self.framework = framework; // basic functionality
				self.template = template; // root DOM element of PhotoSwipe
				self.bg = framework.getChildByClass(template, 'pswp__bg');

				_initalClassName = template.className;
				_isOpen = true;

				_features = framework.detectFeatures();
				_requestAF = _features.raf;
				_cancelAF = _features.caf;
				_transformKey = _features.transform;
				_oldIE = _features.oldIE;

				self.scrollWrap = framework.getChildByClass(template, 'pswp__scroll-wrap');
				self.container = framework.getChildByClass(self.scrollWrap, 'pswp__container');

				_containerStyle = self.container.style; // for fast access

				// Objects that hold slides (there are only 3 in DOM)
				self.itemHolders = _itemHolders = [{ el: self.container.children[0], wrap: 0, index: -1 }, { el: self.container.children[1], wrap: 0, index: -1 }, { el: self.container.children[2], wrap: 0, index: -1 }];

				// hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)
				_itemHolders[0].el.style.display = _itemHolders[2].el.style.display = 'none';

				_setupTransforms();

				// Setup global events
				_globalEventHandlers = {
					resize: self.updateSize,
					scroll: _updatePageScrollOffset,
					keydown: _onKeyDown,
					click: _onGlobalClick
				};

				// disable show/hide effects on old browsers that don't support CSS animations or transforms, 
				// old IOS, Android and Opera mobile. Blackberry seems to work fine, even older models.
				var oldPhone = _features.isOldIOSPhone || _features.isOldAndroid || _features.isMobileOpera;
				if (!_features.animationName || !_features.transform || oldPhone) {
					_options.showAnimationDuration = _options.hideAnimationDuration = 0;
				}

				// init modules
				for (i = 0; i < _modules.length; i++) {
					self['init' + _modules[i]]();
				}

				// init
				if (UiClass) {
					var ui = self.ui = new UiClass(self, framework);
					ui.init();
				}

				_shout('firstUpdate');
				_currentItemIndex = _currentItemIndex || _options.index || 0;
				// validate index
				if (isNaN(_currentItemIndex) || _currentItemIndex < 0 || _currentItemIndex >= _getNumItems()) {
					_currentItemIndex = 0;
				}
				self.currItem = _getItemAt(_currentItemIndex);

				if (_features.isOldIOSPhone || _features.isOldAndroid) {
					_isFixedPosition = false;
				}

				template.setAttribute('aria-hidden', 'false');
				if (_options.modal) {
					if (!_isFixedPosition) {
						template.style.position = 'absolute';
						template.style.top = framework.getScrollY() + 'px';
					} else {
						template.style.position = 'fixed';
					}
				}

				if (_currentWindowScrollY === undefined) {
					_shout('initialLayout');
					_currentWindowScrollY = _initalWindowScrollY = framework.getScrollY();
				}

				// add classes to root element of PhotoSwipe
				var rootClasses = 'pswp--open ';
				if (_options.mainClass) {
					rootClasses += _options.mainClass + ' ';
				}
				if (_options.showHideOpacity) {
					rootClasses += 'pswp--animate_opacity ';
				}
				rootClasses += _likelyTouchDevice ? 'pswp--touch' : 'pswp--notouch';
				rootClasses += _features.animationName ? ' pswp--css_animation' : '';
				rootClasses += _features.svg ? ' pswp--svg' : '';
				framework.addClass(template, rootClasses);

				self.updateSize();

				// initial update
				_containerShiftIndex = -1;
				_indexDiff = null;
				for (i = 0; i < NUM_HOLDERS; i++) {
					_setTranslateX((i + _containerShiftIndex) * _slideSize.x, _itemHolders[i].el.style);
				}

				if (!_oldIE) {
					framework.bind(self.scrollWrap, _downEvents, self); // no dragging for old IE
				}

				_listen('initialZoomInEnd', function () {
					self.setContent(_itemHolders[0], _currentItemIndex - 1);
					self.setContent(_itemHolders[2], _currentItemIndex + 1);

					_itemHolders[0].el.style.display = _itemHolders[2].el.style.display = 'block';

					if (_options.focus) {
						// focus causes layout, 
						// which causes lag during the animation, 
						// that's why we delay it untill the initial zoom transition ends
						template.focus();
					}

					_bindEvents();
				});

				// set content for center slide (first time)
				self.setContent(_itemHolders[1], _currentItemIndex);

				self.updateCurrItem();

				_shout('afterInit');

				if (!_isFixedPosition) {

					// On all versions of iOS lower than 8.0, we check size of viewport every second.
					// 
					// This is done to detect when Safari top & bottom bars appear, 
					// as this action doesn't trigger any events (like resize). 
					// 
					// On iOS8 they fixed this.
					// 
					// 10 Nov 2014: iOS 7 usage ~40%. iOS 8 usage 56%.

					_updateSizeInterval = setInterval(function () {
						if (!_numAnimations && !_isDragging && !_isZooming && _currZoomLevel === self.currItem.initialZoomLevel) {
							self.updateSize();
						}
					}, 1000);
				}

				framework.addClass(template, 'pswp--visible');
			},

			// Close the gallery, then destroy it
			close: function () {
				if (!_isOpen) {
					return;
				}

				_isOpen = false;
				_isDestroying = true;
				_shout('close');
				_unbindEvents();

				_showOrHide(self.currItem, null, true, self.destroy);
			},

			// destroys the gallery (unbinds events, cleans up intervals and timeouts to avoid memory leaks)
			destroy: function () {
				_shout('destroy');

				if (_showOrHideTimeout) {
					clearTimeout(_showOrHideTimeout);
				}

				template.setAttribute('aria-hidden', 'true');
				template.className = _initalClassName;

				if (_updateSizeInterval) {
					clearInterval(_updateSizeInterval);
				}

				framework.unbind(self.scrollWrap, _downEvents, self);

				// we unbind scroll event at the end, as closing animation may depend on it
				framework.unbind(window, 'scroll', self);

				_stopDragUpdateLoop();

				_stopAllAnimations();

				_listeners = null;
			},

			/**
    * Pan image to position
    * @param {Number} x     
    * @param {Number} y     
    * @param {Boolean} force Will ignore bounds if set to true.
    */
			panTo: function (x, y, force) {
				if (!force) {
					if (x > _currPanBounds.min.x) {
						x = _currPanBounds.min.x;
					} else if (x < _currPanBounds.max.x) {
						x = _currPanBounds.max.x;
					}

					if (y > _currPanBounds.min.y) {
						y = _currPanBounds.min.y;
					} else if (y < _currPanBounds.max.y) {
						y = _currPanBounds.max.y;
					}
				}

				_panOffset.x = x;
				_panOffset.y = y;
				_applyCurrentZoomPan();
			},

			handleEvent: function (e) {
				e = e || window.event;
				if (_globalEventHandlers[e.type]) {
					_globalEventHandlers[e.type](e);
				}
			},

			goTo: function (index) {

				index = _getLoopedId(index);

				var diff = index - _currentItemIndex;
				_indexDiff = diff;

				_currentItemIndex = index;
				self.currItem = _getItemAt(_currentItemIndex);
				_currPositionIndex -= diff;

				_moveMainScroll(_slideSize.x * _currPositionIndex);

				_stopAllAnimations();
				_mainScrollAnimating = false;

				self.updateCurrItem();
			},
			next: function () {
				self.goTo(_currentItemIndex + 1);
			},
			prev: function () {
				self.goTo(_currentItemIndex - 1);
			},

			// update current zoom/pan objects
			updateCurrZoomItem: function (emulateSetContent) {
				if (emulateSetContent) {
					_shout('beforeChange', 0);
				}

				// itemHolder[1] is middle (current) item
				if (_itemHolders[1].el.children.length) {
					var zoomElement = _itemHolders[1].el.children[0];
					if (framework.hasClass(zoomElement, 'pswp__zoom-wrap')) {
						_currZoomElementStyle = zoomElement.style;
					} else {
						_currZoomElementStyle = null;
					}
				} else {
					_currZoomElementStyle = null;
				}

				_currPanBounds = self.currItem.bounds;
				_startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;

				_panOffset.x = _currPanBounds.center.x;
				_panOffset.y = _currPanBounds.center.y;

				if (emulateSetContent) {
					_shout('afterChange');
				}
			},

			invalidateCurrItems: function () {
				_itemsNeedUpdate = true;
				for (var i = 0; i < NUM_HOLDERS; i++) {
					if (_itemHolders[i].item) {
						_itemHolders[i].item.needsUpdate = true;
					}
				}
			},

			updateCurrItem: function (beforeAnimation) {

				if (_indexDiff === 0) {
					return;
				}

				var diffAbs = Math.abs(_indexDiff),
				    tempHolder;

				if (beforeAnimation && diffAbs < 2) {
					return;
				}

				self.currItem = _getItemAt(_currentItemIndex);
				_renderMaxResolution = false;

				_shout('beforeChange', _indexDiff);

				if (diffAbs >= NUM_HOLDERS) {
					_containerShiftIndex += _indexDiff + (_indexDiff > 0 ? -NUM_HOLDERS : NUM_HOLDERS);
					diffAbs = NUM_HOLDERS;
				}
				for (var i = 0; i < diffAbs; i++) {
					if (_indexDiff > 0) {
						tempHolder = _itemHolders.shift();
						_itemHolders[NUM_HOLDERS - 1] = tempHolder; // move first to last

						_containerShiftIndex++;
						_setTranslateX((_containerShiftIndex + 2) * _slideSize.x, tempHolder.el.style);
						self.setContent(tempHolder, _currentItemIndex - diffAbs + i + 1 + 1);
					} else {
						tempHolder = _itemHolders.pop();
						_itemHolders.unshift(tempHolder); // move last to first

						_containerShiftIndex--;
						_setTranslateX(_containerShiftIndex * _slideSize.x, tempHolder.el.style);
						self.setContent(tempHolder, _currentItemIndex + diffAbs - i - 1 - 1);
					}
				}

				// reset zoom/pan on previous item
				if (_currZoomElementStyle && Math.abs(_indexDiff) === 1) {

					var prevItem = _getItemAt(_prevItemIndex);
					if (prevItem.initialZoomLevel !== _currZoomLevel) {
						_calculateItemSize(prevItem, _viewportSize);
						_setImageSize(prevItem);
						_applyZoomPanToItem(prevItem);
					}
				}

				// reset diff after update
				_indexDiff = 0;

				self.updateCurrZoomItem();

				_prevItemIndex = _currentItemIndex;

				_shout('afterChange');
			},

			updateSize: function (force) {

				if (!_isFixedPosition && _options.modal) {
					var windowScrollY = framework.getScrollY();
					if (_currentWindowScrollY !== windowScrollY) {
						template.style.top = windowScrollY + 'px';
						_currentWindowScrollY = windowScrollY;
					}
					if (!force && _windowVisibleSize.x === window.innerWidth && _windowVisibleSize.y === window.innerHeight) {
						return;
					}
					_windowVisibleSize.x = window.innerWidth;
					_windowVisibleSize.y = window.innerHeight;

					//template.style.width = _windowVisibleSize.x + 'px';
					template.style.height = _windowVisibleSize.y + 'px';
				}

				_viewportSize.x = self.scrollWrap.clientWidth;
				_viewportSize.y = self.scrollWrap.clientHeight;

				_updatePageScrollOffset();

				_slideSize.x = _viewportSize.x + Math.round(_viewportSize.x * _options.spacing);
				_slideSize.y = _viewportSize.y;

				_moveMainScroll(_slideSize.x * _currPositionIndex);

				_shout('beforeResize'); // even may be used for example to switch image sources


				// don't re-calculate size on inital size update
				if (_containerShiftIndex !== undefined) {

					var holder, item, hIndex;

					for (var i = 0; i < NUM_HOLDERS; i++) {
						holder = _itemHolders[i];
						_setTranslateX((i + _containerShiftIndex) * _slideSize.x, holder.el.style);

						hIndex = _currentItemIndex + i - 1;

						if (_options.loop && _getNumItems() > 2) {
							hIndex = _getLoopedId(hIndex);
						}

						// update zoom level on items and refresh source (if needsUpdate)
						item = _getItemAt(hIndex);

						// re-render gallery item if `needsUpdate`,
						// or doesn't have `bounds` (entirely new slide object)
						if (item && (_itemsNeedUpdate || item.needsUpdate || !item.bounds)) {

							self.cleanSlide(item);

							self.setContent(holder, hIndex);

							// if "center" slide
							if (i === 1) {
								self.currItem = item;
								self.updateCurrZoomItem(true);
							}

							item.needsUpdate = false;
						} else if (holder.index === -1 && hIndex >= 0) {
							// add content first time
							self.setContent(holder, hIndex);
						}
						if (item && item.container) {
							_calculateItemSize(item, _viewportSize);
							_setImageSize(item);
							_applyZoomPanToItem(item);
						}
					}
					_itemsNeedUpdate = false;
				}

				_startZoomLevel = _currZoomLevel = self.currItem.initialZoomLevel;
				_currPanBounds = self.currItem.bounds;

				if (_currPanBounds) {
					_panOffset.x = _currPanBounds.center.x;
					_panOffset.y = _currPanBounds.center.y;
					_applyCurrentZoomPan(true);
				}

				_shout('resize');
			},

			// Zoom current item to
			zoomTo: function (destZoomLevel, centerPoint, speed, easingFn, updateFn) {
				/*
    	if(destZoomLevel === 'fit') {
    		destZoomLevel = self.currItem.fitRatio;
    	} else if(destZoomLevel === 'fill') {
    		destZoomLevel = self.currItem.fillRatio;
    	}
    */

				if (centerPoint) {
					_startZoomLevel = _currZoomLevel;
					_midZoomPoint.x = Math.abs(centerPoint.x) - _panOffset.x;
					_midZoomPoint.y = Math.abs(centerPoint.y) - _panOffset.y;
					_equalizePoints(_startPanOffset, _panOffset);
				}

				var destPanBounds = _calculatePanBounds(destZoomLevel, false),
				    destPanOffset = {};

				_modifyDestPanOffset('x', destPanBounds, destPanOffset, destZoomLevel);
				_modifyDestPanOffset('y', destPanBounds, destPanOffset, destZoomLevel);

				var initialZoomLevel = _currZoomLevel;
				var initialPanOffset = {
					x: _panOffset.x,
					y: _panOffset.y
				};

				_roundPoint(destPanOffset);

				var onUpdate = function (now) {
					if (now === 1) {
						_currZoomLevel = destZoomLevel;
						_panOffset.x = destPanOffset.x;
						_panOffset.y = destPanOffset.y;
					} else {
						_currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;
						_panOffset.x = (destPanOffset.x - initialPanOffset.x) * now + initialPanOffset.x;
						_panOffset.y = (destPanOffset.y - initialPanOffset.y) * now + initialPanOffset.y;
					}

					if (updateFn) {
						updateFn(now);
					}

					_applyCurrentZoomPan(now === 1);
				};

				if (speed) {
					_animateProp('customZoomTo', 0, 1, speed, easingFn || framework.easing.sine.inOut, onUpdate);
				} else {
					onUpdate(1);
				}
			}

		};

		/*>>core*/

		/*>>gestures*/
		/**
   * Mouse/touch/pointer event handlers.
   * 
   * separated from @core.js for readability
   */

		var MIN_SWIPE_DISTANCE = 30,
		    DIRECTION_CHECK_OFFSET = 10; // amount of pixels to drag to determine direction of swipe

		var _gestureStartTime,
		    _gestureCheckSpeedTime,


		// pool of objects that are used during dragging of zooming
		p = {},
		    // first point
		p2 = {},
		    // second point (for zoom gesture)
		delta = {},
		    _currPoint = {},
		    _startPoint = {},
		    _currPointers = [],
		    _startMainScrollPos = {},
		    _releaseAnimData,
		    _posPoints = [],
		    // array of points during dragging, used to determine type of gesture
		_tempPoint = {},
		    _isZoomingIn,
		    _verticalDragInitiated,
		    _oldAndroidTouchEndTimeout,
		    _currZoomedItemIndex = 0,
		    _centerPoint = _getEmptyPoint(),
		    _lastReleaseTime = 0,
		    _isDragging,
		    // at least one pointer is down
		_isMultitouch,
		    // at least two _pointers are down
		_zoomStarted,
		    // zoom level changed during zoom gesture
		_moved,
		    _dragAnimFrame,
		    _mainScrollShifted,
		    _currentPoints,
		    // array of current touch points
		_isZooming,
		    _currPointsDistance,
		    _startPointsDistance,
		    _currPanBounds,
		    _mainScrollPos = _getEmptyPoint(),
		    _currZoomElementStyle,
		    _mainScrollAnimating,
		    // true, if animation after swipe gesture is running
		_midZoomPoint = _getEmptyPoint(),
		    _currCenterPoint = _getEmptyPoint(),
		    _direction,
		    _isFirstMove,
		    _opacityChanged,
		    _bgOpacity,
		    _wasOverInitialZoom,
		    _isEqualPoints = function (p1, p2) {
			return p1.x === p2.x && p1.y === p2.y;
		},
		    _isNearbyPoints = function (touch0, touch1) {
			return Math.abs(touch0.x - touch1.x) < DOUBLE_TAP_RADIUS && Math.abs(touch0.y - touch1.y) < DOUBLE_TAP_RADIUS;
		},
		    _calculatePointsDistance = function (p1, p2) {
			_tempPoint.x = Math.abs(p1.x - p2.x);
			_tempPoint.y = Math.abs(p1.y - p2.y);
			return Math.sqrt(_tempPoint.x * _tempPoint.x + _tempPoint.y * _tempPoint.y);
		},
		    _stopDragUpdateLoop = function () {
			if (_dragAnimFrame) {
				_cancelAF(_dragAnimFrame);
				_dragAnimFrame = null;
			}
		},
		    _dragUpdateLoop = function () {
			if (_isDragging) {
				_dragAnimFrame = _requestAF(_dragUpdateLoop);
				_renderMovement();
			}
		},
		    _canPan = function () {
			return !(_options.scaleMode === 'fit' && _currZoomLevel === self.currItem.initialZoomLevel);
		},


		// find the closest parent DOM element
		_closestElement = function (el, fn) {
			if (!el || el === document) {
				return false;
			}

			// don't search elements above pswp__scroll-wrap
			if (el.getAttribute('class') && el.getAttribute('class').indexOf('pswp__scroll-wrap') > -1) {
				return false;
			}

			if (fn(el)) {
				return el;
			}

			return _closestElement(el.parentNode, fn);
		},
		    _preventObj = {},
		    _preventDefaultEventBehaviour = function (e, isDown) {
			_preventObj.prevent = !_closestElement(e.target, _options.isClickableElement);

			_shout('preventDragEvent', e, isDown, _preventObj);
			return _preventObj.prevent;
		},
		    _convertTouchToPoint = function (touch, p) {
			p.x = touch.pageX;
			p.y = touch.pageY;
			p.id = touch.identifier;
			return p;
		},
		    _findCenterOfPoints = function (p1, p2, pCenter) {
			pCenter.x = (p1.x + p2.x) * 0.5;
			pCenter.y = (p1.y + p2.y) * 0.5;
		},
		    _pushPosPoint = function (time, x, y) {
			if (time - _gestureCheckSpeedTime > 50) {
				var o = _posPoints.length > 2 ? _posPoints.shift() : {};
				o.x = x;
				o.y = y;
				_posPoints.push(o);
				_gestureCheckSpeedTime = time;
			}
		},
		    _calculateVerticalDragOpacityRatio = function () {
			var yOffset = _panOffset.y - self.currItem.initialPosition.y; // difference between initial and current position
			return 1 - Math.abs(yOffset / (_viewportSize.y / 2));
		},


		// points pool, reused during touch events
		_ePoint1 = {},
		    _ePoint2 = {},
		    _tempPointsArr = [],
		    _tempCounter,
		    _getTouchPoints = function (e) {
			// clean up previous points, without recreating array
			while (_tempPointsArr.length > 0) {
				_tempPointsArr.pop();
			}

			if (!_pointerEventEnabled) {
				if (e.type.indexOf('touch') > -1) {

					if (e.touches && e.touches.length > 0) {
						_tempPointsArr[0] = _convertTouchToPoint(e.touches[0], _ePoint1);
						if (e.touches.length > 1) {
							_tempPointsArr[1] = _convertTouchToPoint(e.touches[1], _ePoint2);
						}
					}
				} else {
					_ePoint1.x = e.pageX;
					_ePoint1.y = e.pageY;
					_ePoint1.id = '';
					_tempPointsArr[0] = _ePoint1; //_ePoint1;
				}
			} else {
				_tempCounter = 0;
				// we can use forEach, as pointer events are supported only in modern browsers
				_currPointers.forEach(function (p) {
					if (_tempCounter === 0) {
						_tempPointsArr[0] = p;
					} else if (_tempCounter === 1) {
						_tempPointsArr[1] = p;
					}
					_tempCounter++;
				});
			}
			return _tempPointsArr;
		},
		    _panOrMoveMainScroll = function (axis, delta) {

			var panFriction,
			    overDiff = 0,
			    newOffset = _panOffset[axis] + delta[axis],
			    startOverDiff,
			    dir = delta[axis] > 0,
			    newMainScrollPosition = _mainScrollPos.x + delta.x,
			    mainScrollDiff = _mainScrollPos.x - _startMainScrollPos.x,
			    newPanPos,
			    newMainScrollPos;

			// calculate fdistance over the bounds and friction
			if (newOffset > _currPanBounds.min[axis] || newOffset < _currPanBounds.max[axis]) {
				panFriction = _options.panEndFriction;
				// Linear increasing of friction, so at 1/4 of viewport it's at max value. 
				// Looks not as nice as was expected. Left for history.
				// panFriction = (1 - (_panOffset[axis] + delta[axis] + panBounds.min[axis]) / (_viewportSize[axis] / 4) );
			} else {
				panFriction = 1;
			}

			newOffset = _panOffset[axis] + delta[axis] * panFriction;

			// move main scroll or start panning
			if (_options.allowPanToNext || _currZoomLevel === self.currItem.initialZoomLevel) {

				if (!_currZoomElementStyle) {

					newMainScrollPos = newMainScrollPosition;
				} else if (_direction === 'h' && axis === 'x' && !_zoomStarted) {

					if (dir) {
						if (newOffset > _currPanBounds.min[axis]) {
							panFriction = _options.panEndFriction;
							overDiff = _currPanBounds.min[axis] - newOffset;
							startOverDiff = _currPanBounds.min[axis] - _startPanOffset[axis];
						}

						// drag right
						if ((startOverDiff <= 0 || mainScrollDiff < 0) && _getNumItems() > 1) {
							newMainScrollPos = newMainScrollPosition;
							if (mainScrollDiff < 0 && newMainScrollPosition > _startMainScrollPos.x) {
								newMainScrollPos = _startMainScrollPos.x;
							}
						} else {
							if (_currPanBounds.min.x !== _currPanBounds.max.x) {
								newPanPos = newOffset;
							}
						}
					} else {

						if (newOffset < _currPanBounds.max[axis]) {
							panFriction = _options.panEndFriction;
							overDiff = newOffset - _currPanBounds.max[axis];
							startOverDiff = _startPanOffset[axis] - _currPanBounds.max[axis];
						}

						if ((startOverDiff <= 0 || mainScrollDiff > 0) && _getNumItems() > 1) {
							newMainScrollPos = newMainScrollPosition;

							if (mainScrollDiff > 0 && newMainScrollPosition < _startMainScrollPos.x) {
								newMainScrollPos = _startMainScrollPos.x;
							}
						} else {
							if (_currPanBounds.min.x !== _currPanBounds.max.x) {
								newPanPos = newOffset;
							}
						}
					}

					//
				}

				if (axis === 'x') {

					if (newMainScrollPos !== undefined) {
						_moveMainScroll(newMainScrollPos, true);
						if (newMainScrollPos === _startMainScrollPos.x) {
							_mainScrollShifted = false;
						} else {
							_mainScrollShifted = true;
						}
					}

					if (_currPanBounds.min.x !== _currPanBounds.max.x) {
						if (newPanPos !== undefined) {
							_panOffset.x = newPanPos;
						} else if (!_mainScrollShifted) {
							_panOffset.x += delta.x * panFriction;
						}
					}

					return newMainScrollPos !== undefined;
				}
			}

			if (!_mainScrollAnimating) {

				if (!_mainScrollShifted) {
					if (_currZoomLevel > self.currItem.fitRatio) {
						_panOffset[axis] += delta[axis] * panFriction;
					}
				}
			}
		},


		// Pointerdown/touchstart/mousedown handler
		_onDragStart = function (e) {

			// Allow dragging only via left mouse button.
			// As this handler is not added in IE8 - we ignore e.which
			// 
			// http://www.quirksmode.org/js/events_properties.html
			// https://developer.mozilla.org/en-US/docs/Web/API/event.button
			if (e.type === 'mousedown' && e.button > 0) {
				return;
			}

			if (_initialZoomRunning) {
				e.preventDefault();
				return;
			}

			if (_oldAndroidTouchEndTimeout && e.type === 'mousedown') {
				return;
			}

			if (_preventDefaultEventBehaviour(e, true)) {
				e.preventDefault();
			}

			_shout('pointerDown');

			if (_pointerEventEnabled) {
				var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');
				if (pointerIndex < 0) {
					pointerIndex = _currPointers.length;
				}
				_currPointers[pointerIndex] = { x: e.pageX, y: e.pageY, id: e.pointerId };
			}

			var startPointsList = _getTouchPoints(e),
			    numPoints = startPointsList.length;

			_currentPoints = null;

			_stopAllAnimations();

			// init drag
			if (!_isDragging || numPoints === 1) {

				_isDragging = _isFirstMove = true;
				framework.bind(window, _upMoveEvents, self);

				_isZoomingIn = _wasOverInitialZoom = _opacityChanged = _verticalDragInitiated = _mainScrollShifted = _moved = _isMultitouch = _zoomStarted = false;

				_direction = null;

				_shout('firstTouchStart', startPointsList);

				_equalizePoints(_startPanOffset, _panOffset);

				_currPanDist.x = _currPanDist.y = 0;
				_equalizePoints(_currPoint, startPointsList[0]);
				_equalizePoints(_startPoint, _currPoint);

				//_equalizePoints(_startMainScrollPos, _mainScrollPos);
				_startMainScrollPos.x = _slideSize.x * _currPositionIndex;

				_posPoints = [{
					x: _currPoint.x,
					y: _currPoint.y
				}];

				_gestureCheckSpeedTime = _gestureStartTime = _getCurrentTime();

				//_mainScrollAnimationEnd(true);
				_calculatePanBounds(_currZoomLevel, true);

				// Start rendering
				_stopDragUpdateLoop();
				_dragUpdateLoop();
			}

			// init zoom
			if (!_isZooming && numPoints > 1 && !_mainScrollAnimating && !_mainScrollShifted) {
				_startZoomLevel = _currZoomLevel;
				_zoomStarted = false; // true if zoom changed at least once

				_isZooming = _isMultitouch = true;
				_currPanDist.y = _currPanDist.x = 0;

				_equalizePoints(_startPanOffset, _panOffset);

				_equalizePoints(p, startPointsList[0]);
				_equalizePoints(p2, startPointsList[1]);

				_findCenterOfPoints(p, p2, _currCenterPoint);

				_midZoomPoint.x = Math.abs(_currCenterPoint.x) - _panOffset.x;
				_midZoomPoint.y = Math.abs(_currCenterPoint.y) - _panOffset.y;
				_currPointsDistance = _startPointsDistance = _calculatePointsDistance(p, p2);
			}
		},


		// Pointermove/touchmove/mousemove handler
		_onDragMove = function (e) {

			e.preventDefault();

			if (_pointerEventEnabled) {
				var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');
				if (pointerIndex > -1) {
					var p = _currPointers[pointerIndex];
					p.x = e.pageX;
					p.y = e.pageY;
				}
			}

			if (_isDragging) {
				var touchesList = _getTouchPoints(e);
				if (!_direction && !_moved && !_isZooming) {

					if (_mainScrollPos.x !== _slideSize.x * _currPositionIndex) {
						// if main scroll position is shifted – direction is always horizontal
						_direction = 'h';
					} else {
						var diff = Math.abs(touchesList[0].x - _currPoint.x) - Math.abs(touchesList[0].y - _currPoint.y);
						// check the direction of movement
						if (Math.abs(diff) >= DIRECTION_CHECK_OFFSET) {
							_direction = diff > 0 ? 'h' : 'v';
							_currentPoints = touchesList;
						}
					}
				} else {
					_currentPoints = touchesList;
				}
			}
		},

		// 
		_renderMovement = function () {

			if (!_currentPoints) {
				return;
			}

			var numPoints = _currentPoints.length;

			if (numPoints === 0) {
				return;
			}

			_equalizePoints(p, _currentPoints[0]);

			delta.x = p.x - _currPoint.x;
			delta.y = p.y - _currPoint.y;

			if (_isZooming && numPoints > 1) {
				// Handle behaviour for more than 1 point

				_currPoint.x = p.x;
				_currPoint.y = p.y;

				// check if one of two points changed
				if (!delta.x && !delta.y && _isEqualPoints(_currentPoints[1], p2)) {
					return;
				}

				_equalizePoints(p2, _currentPoints[1]);

				if (!_zoomStarted) {
					_zoomStarted = true;
					_shout('zoomGestureStarted');
				}

				// Distance between two points
				var pointsDistance = _calculatePointsDistance(p, p2);

				var zoomLevel = _calculateZoomLevel(pointsDistance);

				// slightly over the of initial zoom level
				if (zoomLevel > self.currItem.initialZoomLevel + self.currItem.initialZoomLevel / 15) {
					_wasOverInitialZoom = true;
				}

				// Apply the friction if zoom level is out of the bounds
				var zoomFriction = 1,
				    minZoomLevel = _getMinZoomLevel(),
				    maxZoomLevel = _getMaxZoomLevel();

				if (zoomLevel < minZoomLevel) {

					if (_options.pinchToClose && !_wasOverInitialZoom && _startZoomLevel <= self.currItem.initialZoomLevel) {
						// fade out background if zooming out
						var minusDiff = minZoomLevel - zoomLevel;
						var percent = 1 - minusDiff / (minZoomLevel / 1.2);

						_applyBgOpacity(percent);
						_shout('onPinchClose', percent);
						_opacityChanged = true;
					} else {
						zoomFriction = (minZoomLevel - zoomLevel) / minZoomLevel;
						if (zoomFriction > 1) {
							zoomFriction = 1;
						}
						zoomLevel = minZoomLevel - zoomFriction * (minZoomLevel / 3);
					}
				} else if (zoomLevel > maxZoomLevel) {
					// 1.5 - extra zoom level above the max. E.g. if max is x6, real max 6 + 1.5 = 7.5
					zoomFriction = (zoomLevel - maxZoomLevel) / (minZoomLevel * 6);
					if (zoomFriction > 1) {
						zoomFriction = 1;
					}
					zoomLevel = maxZoomLevel + zoomFriction * minZoomLevel;
				}

				if (zoomFriction < 0) {
					zoomFriction = 0;
				}

				// distance between touch points after friction is applied
				_currPointsDistance = pointsDistance;

				// _centerPoint - The point in the middle of two pointers
				_findCenterOfPoints(p, p2, _centerPoint);

				// paning with two pointers pressed
				_currPanDist.x += _centerPoint.x - _currCenterPoint.x;
				_currPanDist.y += _centerPoint.y - _currCenterPoint.y;
				_equalizePoints(_currCenterPoint, _centerPoint);

				_panOffset.x = _calculatePanOffset('x', zoomLevel);
				_panOffset.y = _calculatePanOffset('y', zoomLevel);

				_isZoomingIn = zoomLevel > _currZoomLevel;
				_currZoomLevel = zoomLevel;
				_applyCurrentZoomPan();
			} else {

				// handle behaviour for one point (dragging or panning)

				if (!_direction) {
					return;
				}

				if (_isFirstMove) {
					_isFirstMove = false;

					// subtract drag distance that was used during the detection direction  

					if (Math.abs(delta.x) >= DIRECTION_CHECK_OFFSET) {
						delta.x -= _currentPoints[0].x - _startPoint.x;
					}

					if (Math.abs(delta.y) >= DIRECTION_CHECK_OFFSET) {
						delta.y -= _currentPoints[0].y - _startPoint.y;
					}
				}

				_currPoint.x = p.x;
				_currPoint.y = p.y;

				// do nothing if pointers position hasn't changed
				if (delta.x === 0 && delta.y === 0) {
					return;
				}

				if (_direction === 'v' && _options.closeOnVerticalDrag) {
					if (!_canPan()) {
						_currPanDist.y += delta.y;
						_panOffset.y += delta.y;

						var opacityRatio = _calculateVerticalDragOpacityRatio();

						_verticalDragInitiated = true;
						_shout('onVerticalDrag', opacityRatio);

						_applyBgOpacity(opacityRatio);
						_applyCurrentZoomPan();
						return;
					}
				}

				_pushPosPoint(_getCurrentTime(), p.x, p.y);

				_moved = true;
				_currPanBounds = self.currItem.bounds;

				var mainScrollChanged = _panOrMoveMainScroll('x', delta);
				if (!mainScrollChanged) {
					_panOrMoveMainScroll('y', delta);

					_roundPoint(_panOffset);
					_applyCurrentZoomPan();
				}
			}
		},


		// Pointerup/pointercancel/touchend/touchcancel/mouseup event handler
		_onDragRelease = function (e) {

			if (_features.isOldAndroid) {

				if (_oldAndroidTouchEndTimeout && e.type === 'mouseup') {
					return;
				}

				// on Android (v4.1, 4.2, 4.3 & possibly older) 
				// ghost mousedown/up event isn't preventable via e.preventDefault,
				// which causes fake mousedown event
				// so we block mousedown/up for 600ms
				if (e.type.indexOf('touch') > -1) {
					clearTimeout(_oldAndroidTouchEndTimeout);
					_oldAndroidTouchEndTimeout = setTimeout(function () {
						_oldAndroidTouchEndTimeout = 0;
					}, 600);
				}
			}

			_shout('pointerUp');

			if (_preventDefaultEventBehaviour(e, false)) {
				e.preventDefault();
			}

			var releasePoint;

			if (_pointerEventEnabled) {
				var pointerIndex = framework.arraySearch(_currPointers, e.pointerId, 'id');

				if (pointerIndex > -1) {
					releasePoint = _currPointers.splice(pointerIndex, 1)[0];

					if (navigator.pointerEnabled) {
						releasePoint.type = e.pointerType || 'mouse';
					} else {
						var MSPOINTER_TYPES = {
							4: 'mouse', // event.MSPOINTER_TYPE_MOUSE
							2: 'touch', // event.MSPOINTER_TYPE_TOUCH 
							3: 'pen' // event.MSPOINTER_TYPE_PEN
						};
						releasePoint.type = MSPOINTER_TYPES[e.pointerType];

						if (!releasePoint.type) {
							releasePoint.type = e.pointerType || 'mouse';
						}
					}
				}
			}

			var touchList = _getTouchPoints(e),
			    gestureType,
			    numPoints = touchList.length;

			if (e.type === 'mouseup') {
				numPoints = 0;
			}

			// Do nothing if there were 3 touch points or more
			if (numPoints === 2) {
				_currentPoints = null;
				return true;
			}

			// if second pointer released
			if (numPoints === 1) {
				_equalizePoints(_startPoint, touchList[0]);
			}

			// pointer hasn't moved, send "tap release" point
			if (numPoints === 0 && !_direction && !_mainScrollAnimating) {
				if (!releasePoint) {
					if (e.type === 'mouseup') {
						releasePoint = { x: e.pageX, y: e.pageY, type: 'mouse' };
					} else if (e.changedTouches && e.changedTouches[0]) {
						releasePoint = { x: e.changedTouches[0].pageX, y: e.changedTouches[0].pageY, type: 'touch' };
					}
				}

				_shout('touchRelease', e, releasePoint);
			}

			// Difference in time between releasing of two last touch points (zoom gesture)
			var releaseTimeDiff = -1;

			// Gesture completed, no pointers left
			if (numPoints === 0) {
				_isDragging = false;
				framework.unbind(window, _upMoveEvents, self);

				_stopDragUpdateLoop();

				if (_isZooming) {
					// Two points released at the same time
					releaseTimeDiff = 0;
				} else if (_lastReleaseTime !== -1) {
					releaseTimeDiff = _getCurrentTime() - _lastReleaseTime;
				}
			}
			_lastReleaseTime = numPoints === 1 ? _getCurrentTime() : -1;

			if (releaseTimeDiff !== -1 && releaseTimeDiff < 150) {
				gestureType = 'zoom';
			} else {
				gestureType = 'swipe';
			}

			if (_isZooming && numPoints < 2) {
				_isZooming = false;

				// Only second point released
				if (numPoints === 1) {
					gestureType = 'zoomPointerUp';
				}
				_shout('zoomGestureEnded');
			}

			_currentPoints = null;
			if (!_moved && !_zoomStarted && !_mainScrollAnimating && !_verticalDragInitiated) {
				// nothing to animate
				return;
			}

			_stopAllAnimations();

			if (!_releaseAnimData) {
				_releaseAnimData = _initDragReleaseAnimationData();
			}

			_releaseAnimData.calculateSwipeSpeed('x');

			if (_verticalDragInitiated) {

				var opacityRatio = _calculateVerticalDragOpacityRatio();

				if (opacityRatio < _options.verticalDragRange) {
					self.close();
				} else {
					var initalPanY = _panOffset.y,
					    initialBgOpacity = _bgOpacity;

					_animateProp('verticalDrag', 0, 1, 300, framework.easing.cubic.out, function (now) {

						_panOffset.y = (self.currItem.initialPosition.y - initalPanY) * now + initalPanY;

						_applyBgOpacity((1 - initialBgOpacity) * now + initialBgOpacity);
						_applyCurrentZoomPan();
					});

					_shout('onVerticalDrag', 1);
				}

				return;
			}

			// main scroll 
			if ((_mainScrollShifted || _mainScrollAnimating) && numPoints === 0) {
				var itemChanged = _finishSwipeMainScrollGesture(gestureType, _releaseAnimData);
				if (itemChanged) {
					return;
				}
				gestureType = 'zoomPointerUp';
			}

			// prevent zoom/pan animation when main scroll animation runs
			if (_mainScrollAnimating) {
				return;
			}

			// Complete simple zoom gesture (reset zoom level if it's out of the bounds)  
			if (gestureType !== 'swipe') {
				_completeZoomGesture();
				return;
			}

			// Complete pan gesture if main scroll is not shifted, and it's possible to pan current image
			if (!_mainScrollShifted && _currZoomLevel > self.currItem.fitRatio) {
				_completePanGesture(_releaseAnimData);
			}
		},


		// Returns object with data about gesture
		// It's created only once and then reused
		_initDragReleaseAnimationData = function () {
			// temp local vars
			var lastFlickDuration, tempReleasePos;

			// s = this
			var s = {
				lastFlickOffset: {},
				lastFlickDist: {},
				lastFlickSpeed: {},
				slowDownRatio: {},
				slowDownRatioReverse: {},
				speedDecelerationRatio: {},
				speedDecelerationRatioAbs: {},
				distanceOffset: {},
				backAnimDestination: {},
				backAnimStarted: {},
				calculateSwipeSpeed: function (axis) {

					if (_posPoints.length > 1) {
						lastFlickDuration = _getCurrentTime() - _gestureCheckSpeedTime + 50;
						tempReleasePos = _posPoints[_posPoints.length - 2][axis];
					} else {
						lastFlickDuration = _getCurrentTime() - _gestureStartTime; // total gesture duration
						tempReleasePos = _startPoint[axis];
					}
					s.lastFlickOffset[axis] = _currPoint[axis] - tempReleasePos;
					s.lastFlickDist[axis] = Math.abs(s.lastFlickOffset[axis]);
					if (s.lastFlickDist[axis] > 20) {
						s.lastFlickSpeed[axis] = s.lastFlickOffset[axis] / lastFlickDuration;
					} else {
						s.lastFlickSpeed[axis] = 0;
					}
					if (Math.abs(s.lastFlickSpeed[axis]) < 0.1) {
						s.lastFlickSpeed[axis] = 0;
					}

					s.slowDownRatio[axis] = 0.95;
					s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];
					s.speedDecelerationRatio[axis] = 1;
				},

				calculateOverBoundsAnimOffset: function (axis, speed) {
					if (!s.backAnimStarted[axis]) {

						if (_panOffset[axis] > _currPanBounds.min[axis]) {
							s.backAnimDestination[axis] = _currPanBounds.min[axis];
						} else if (_panOffset[axis] < _currPanBounds.max[axis]) {
							s.backAnimDestination[axis] = _currPanBounds.max[axis];
						}

						if (s.backAnimDestination[axis] !== undefined) {
							s.slowDownRatio[axis] = 0.7;
							s.slowDownRatioReverse[axis] = 1 - s.slowDownRatio[axis];
							if (s.speedDecelerationRatioAbs[axis] < 0.05) {

								s.lastFlickSpeed[axis] = 0;
								s.backAnimStarted[axis] = true;

								_animateProp('bounceZoomPan' + axis, _panOffset[axis], s.backAnimDestination[axis], speed || 300, framework.easing.sine.out, function (pos) {
									_panOffset[axis] = pos;
									_applyCurrentZoomPan();
								});
							}
						}
					}
				},

				// Reduces the speed by slowDownRatio (per 10ms)
				calculateAnimOffset: function (axis) {
					if (!s.backAnimStarted[axis]) {
						s.speedDecelerationRatio[axis] = s.speedDecelerationRatio[axis] * (s.slowDownRatio[axis] + s.slowDownRatioReverse[axis] - s.slowDownRatioReverse[axis] * s.timeDiff / 10);

						s.speedDecelerationRatioAbs[axis] = Math.abs(s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis]);
						s.distanceOffset[axis] = s.lastFlickSpeed[axis] * s.speedDecelerationRatio[axis] * s.timeDiff;
						_panOffset[axis] += s.distanceOffset[axis];
					}
				},

				panAnimLoop: function () {
					if (_animations.zoomPan) {
						_animations.zoomPan.raf = _requestAF(s.panAnimLoop);

						s.now = _getCurrentTime();
						s.timeDiff = s.now - s.lastNow;
						s.lastNow = s.now;

						s.calculateAnimOffset('x');
						s.calculateAnimOffset('y');

						_applyCurrentZoomPan();

						s.calculateOverBoundsAnimOffset('x');
						s.calculateOverBoundsAnimOffset('y');

						if (s.speedDecelerationRatioAbs.x < 0.05 && s.speedDecelerationRatioAbs.y < 0.05) {

							// round pan position
							_panOffset.x = Math.round(_panOffset.x);
							_panOffset.y = Math.round(_panOffset.y);
							_applyCurrentZoomPan();

							_stopAnimation('zoomPan');
							return;
						}
					}
				}
			};
			return s;
		},
		    _completePanGesture = function (animData) {
			// calculate swipe speed for Y axis (paanning)
			animData.calculateSwipeSpeed('y');

			_currPanBounds = self.currItem.bounds;

			animData.backAnimDestination = {};
			animData.backAnimStarted = {};

			// Avoid acceleration animation if speed is too low
			if (Math.abs(animData.lastFlickSpeed.x) <= 0.05 && Math.abs(animData.lastFlickSpeed.y) <= 0.05) {
				animData.speedDecelerationRatioAbs.x = animData.speedDecelerationRatioAbs.y = 0;

				// Run pan drag release animation. E.g. if you drag image and release finger without momentum.
				animData.calculateOverBoundsAnimOffset('x');
				animData.calculateOverBoundsAnimOffset('y');
				return true;
			}

			// Animation loop that controls the acceleration after pan gesture ends
			_registerStartAnimation('zoomPan');
			animData.lastNow = _getCurrentTime();
			animData.panAnimLoop();
		},
		    _finishSwipeMainScrollGesture = function (gestureType, _releaseAnimData) {
			var itemChanged;
			if (!_mainScrollAnimating) {
				_currZoomedItemIndex = _currentItemIndex;
			}

			var itemsDiff;

			if (gestureType === 'swipe') {
				var totalShiftDist = _currPoint.x - _startPoint.x,
				    isFastLastFlick = _releaseAnimData.lastFlickDist.x < 10;

				// if container is shifted for more than MIN_SWIPE_DISTANCE, 
				// and last flick gesture was in right direction
				if (totalShiftDist > MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData.lastFlickOffset.x > 20)) {
					// go to prev item
					itemsDiff = -1;
				} else if (totalShiftDist < -MIN_SWIPE_DISTANCE && (isFastLastFlick || _releaseAnimData.lastFlickOffset.x < -20)) {
					// go to next item
					itemsDiff = 1;
				}
			}

			var nextCircle;

			if (itemsDiff) {

				_currentItemIndex += itemsDiff;

				if (_currentItemIndex < 0) {
					_currentItemIndex = _options.loop ? _getNumItems() - 1 : 0;
					nextCircle = true;
				} else if (_currentItemIndex >= _getNumItems()) {
					_currentItemIndex = _options.loop ? 0 : _getNumItems() - 1;
					nextCircle = true;
				}

				if (!nextCircle || _options.loop) {
					_indexDiff += itemsDiff;
					_currPositionIndex -= itemsDiff;
					itemChanged = true;
				}
			}

			var animateToX = _slideSize.x * _currPositionIndex;
			var animateToDist = Math.abs(animateToX - _mainScrollPos.x);
			var finishAnimDuration;

			if (!itemChanged && animateToX > _mainScrollPos.x !== _releaseAnimData.lastFlickSpeed.x > 0) {
				// "return to current" duration, e.g. when dragging from slide 0 to -1
				finishAnimDuration = 333;
			} else {
				finishAnimDuration = Math.abs(_releaseAnimData.lastFlickSpeed.x) > 0 ? animateToDist / Math.abs(_releaseAnimData.lastFlickSpeed.x) : 333;

				finishAnimDuration = Math.min(finishAnimDuration, 400);
				finishAnimDuration = Math.max(finishAnimDuration, 250);
			}

			if (_currZoomedItemIndex === _currentItemIndex) {
				itemChanged = false;
			}

			_mainScrollAnimating = true;

			_shout('mainScrollAnimStart');

			_animateProp('mainScroll', _mainScrollPos.x, animateToX, finishAnimDuration, framework.easing.cubic.out, _moveMainScroll, function () {
				_stopAllAnimations();
				_mainScrollAnimating = false;
				_currZoomedItemIndex = -1;

				if (itemChanged || _currZoomedItemIndex !== _currentItemIndex) {
					self.updateCurrItem();
				}

				_shout('mainScrollAnimComplete');
			});

			if (itemChanged) {
				self.updateCurrItem(true);
			}

			return itemChanged;
		},
		    _calculateZoomLevel = function (touchesDistance) {
			return 1 / _startPointsDistance * touchesDistance * _startZoomLevel;
		},


		// Resets zoom if it's out of bounds
		_completeZoomGesture = function () {
			var destZoomLevel = _currZoomLevel,
			    minZoomLevel = _getMinZoomLevel(),
			    maxZoomLevel = _getMaxZoomLevel();

			if (_currZoomLevel < minZoomLevel) {
				destZoomLevel = minZoomLevel;
			} else if (_currZoomLevel > maxZoomLevel) {
				destZoomLevel = maxZoomLevel;
			}

			var destOpacity = 1,
			    onUpdate,
			    initialOpacity = _bgOpacity;

			if (_opacityChanged && !_isZoomingIn && !_wasOverInitialZoom && _currZoomLevel < minZoomLevel) {
				//_closedByScroll = true;
				self.close();
				return true;
			}

			if (_opacityChanged) {
				onUpdate = function (now) {
					_applyBgOpacity((destOpacity - initialOpacity) * now + initialOpacity);
				};
			}

			self.zoomTo(destZoomLevel, 0, 200, framework.easing.cubic.out, onUpdate);
			return true;
		};

		_registerModule('Gestures', {
			publicMethods: {

				initGestures: function () {

					// helper function that builds touch/pointer/mouse events
					var addEventNames = function (pref, down, move, up, cancel) {
						_dragStartEvent = pref + down;
						_dragMoveEvent = pref + move;
						_dragEndEvent = pref + up;
						if (cancel) {
							_dragCancelEvent = pref + cancel;
						} else {
							_dragCancelEvent = '';
						}
					};

					_pointerEventEnabled = _features.pointerEvent;
					if (_pointerEventEnabled && _features.touch) {
						// we don't need touch events, if browser supports pointer events
						_features.touch = false;
					}

					if (_pointerEventEnabled) {
						if (navigator.pointerEnabled) {
							addEventNames('pointer', 'down', 'move', 'up', 'cancel');
						} else {
							// IE10 pointer events are case-sensitive
							addEventNames('MSPointer', 'Down', 'Move', 'Up', 'Cancel');
						}
					} else if (_features.touch) {
						addEventNames('touch', 'start', 'move', 'end', 'cancel');
						_likelyTouchDevice = true;
					} else {
						addEventNames('mouse', 'down', 'move', 'up');
					}

					_upMoveEvents = _dragMoveEvent + ' ' + _dragEndEvent + ' ' + _dragCancelEvent;
					_downEvents = _dragStartEvent;

					if (_pointerEventEnabled && !_likelyTouchDevice) {
						_likelyTouchDevice = navigator.maxTouchPoints > 1 || navigator.msMaxTouchPoints > 1;
					}
					// make variable public
					self.likelyTouchDevice = _likelyTouchDevice;

					_globalEventHandlers[_dragStartEvent] = _onDragStart;
					_globalEventHandlers[_dragMoveEvent] = _onDragMove;
					_globalEventHandlers[_dragEndEvent] = _onDragRelease; // the Kraken

					if (_dragCancelEvent) {
						_globalEventHandlers[_dragCancelEvent] = _globalEventHandlers[_dragEndEvent];
					}

					// Bind mouse events on device with detected hardware touch support, in case it supports multiple types of input.
					if (_features.touch) {
						_downEvents += ' mousedown';
						_upMoveEvents += ' mousemove mouseup';
						_globalEventHandlers.mousedown = _globalEventHandlers[_dragStartEvent];
						_globalEventHandlers.mousemove = _globalEventHandlers[_dragMoveEvent];
						_globalEventHandlers.mouseup = _globalEventHandlers[_dragEndEvent];
					}

					if (!_likelyTouchDevice) {
						// don't allow pan to next slide from zoomed state on Desktop
						_options.allowPanToNext = false;
					}
				}

			}
		});

		/*>>gestures*/

		/*>>show-hide-transition*/
		/**
   * show-hide-transition.js:
   *
   * Manages initial opening or closing transition.
   *
   * If you're not planning to use transition for gallery at all,
   * you may set options hideAnimationDuration and showAnimationDuration to 0,
   * and just delete startAnimation function.
   * 
   */

		var _showOrHideTimeout,
		    _showOrHide = function (item, img, out, completeFn) {

			if (_showOrHideTimeout) {
				clearTimeout(_showOrHideTimeout);
			}

			_initialZoomRunning = true;
			_initialContentSet = true;

			// dimensions of small thumbnail {x:,y:,w:}.
			// Height is optional, as calculated based on large image.
			var thumbBounds;
			if (item.initialLayout) {
				thumbBounds = item.initialLayout;
				item.initialLayout = null;
			} else {
				thumbBounds = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);
			}

			var duration = out ? _options.hideAnimationDuration : _options.showAnimationDuration;

			var onComplete = function () {
				_stopAnimation('initialZoom');
				if (!out) {
					_applyBgOpacity(1);
					if (img) {
						img.style.display = 'block';
					}
					framework.addClass(template, 'pswp--animated-in');
					_shout('initialZoom' + (out ? 'OutEnd' : 'InEnd'));
				} else {
					self.template.removeAttribute('style');
					self.bg.removeAttribute('style');
				}

				if (completeFn) {
					completeFn();
				}
				_initialZoomRunning = false;
			};

			// if bounds aren't provided, just open gallery without animation
			if (!duration || !thumbBounds || thumbBounds.x === undefined) {

				_shout('initialZoom' + (out ? 'Out' : 'In'));

				_currZoomLevel = item.initialZoomLevel;
				_equalizePoints(_panOffset, item.initialPosition);
				_applyCurrentZoomPan();

				template.style.opacity = out ? 0 : 1;
				_applyBgOpacity(1);

				if (duration) {
					setTimeout(function () {
						onComplete();
					}, duration);
				} else {
					onComplete();
				}

				return;
			}

			var startAnimation = function () {
				var closeWithRaf = _closedByScroll,
				    fadeEverything = !self.currItem.src || self.currItem.loadError || _options.showHideOpacity;

				// apply hw-acceleration to image
				if (item.miniImg) {
					item.miniImg.style.webkitBackfaceVisibility = 'hidden';
				}

				if (!out) {
					_currZoomLevel = thumbBounds.w / item.w;
					_panOffset.x = thumbBounds.x;
					_panOffset.y = thumbBounds.y - _initalWindowScrollY;

					self[fadeEverything ? 'template' : 'bg'].style.opacity = 0.001;
					_applyCurrentZoomPan();
				}

				_registerStartAnimation('initialZoom');

				if (out && !closeWithRaf) {
					framework.removeClass(template, 'pswp--animated-in');
				}

				if (fadeEverything) {
					if (out) {
						framework[(closeWithRaf ? 'remove' : 'add') + 'Class'](template, 'pswp--animate_opacity');
					} else {
						setTimeout(function () {
							framework.addClass(template, 'pswp--animate_opacity');
						}, 30);
					}
				}

				_showOrHideTimeout = setTimeout(function () {

					_shout('initialZoom' + (out ? 'Out' : 'In'));

					if (!out) {

						// "in" animation always uses CSS transitions (instead of rAF).
						// CSS transition work faster here, 
						// as developer may also want to animate other things, 
						// like ui on top of sliding area, which can be animated just via CSS

						_currZoomLevel = item.initialZoomLevel;
						_equalizePoints(_panOffset, item.initialPosition);
						_applyCurrentZoomPan();
						_applyBgOpacity(1);

						if (fadeEverything) {
							template.style.opacity = 1;
						} else {
							_applyBgOpacity(1);
						}

						_showOrHideTimeout = setTimeout(onComplete, duration + 20);
					} else {

						// "out" animation uses rAF only when PhotoSwipe is closed by browser scroll, to recalculate position
						var destZoomLevel = thumbBounds.w / item.w,
						    initialPanOffset = {
							x: _panOffset.x,
							y: _panOffset.y
						},
						    initialZoomLevel = _currZoomLevel,
						    initalBgOpacity = _bgOpacity,
						    onUpdate = function (now) {

							if (now === 1) {
								_currZoomLevel = destZoomLevel;
								_panOffset.x = thumbBounds.x;
								_panOffset.y = thumbBounds.y - _currentWindowScrollY;
							} else {
								_currZoomLevel = (destZoomLevel - initialZoomLevel) * now + initialZoomLevel;
								_panOffset.x = (thumbBounds.x - initialPanOffset.x) * now + initialPanOffset.x;
								_panOffset.y = (thumbBounds.y - _currentWindowScrollY - initialPanOffset.y) * now + initialPanOffset.y;
							}

							_applyCurrentZoomPan();
							if (fadeEverything) {
								template.style.opacity = 1 - now;
							} else {
								_applyBgOpacity(initalBgOpacity - now * initalBgOpacity);
							}
						};

						if (closeWithRaf) {
							_animateProp('initialZoom', 0, 1, duration, framework.easing.cubic.out, onUpdate, onComplete);
						} else {
							onUpdate(1);
							_showOrHideTimeout = setTimeout(onComplete, duration + 20);
						}
					}
				}, out ? 25 : 90); // Main purpose of this delay is to give browser time to paint and
				// create composite layers of PhotoSwipe UI parts (background, controls, caption, arrows).
				// Which avoids lag at the beginning of scale transition.
			};
			startAnimation();
		};

		/*>>show-hide-transition*/

		/*>>items-controller*/
		/**
  *
  * Controller manages gallery items, their dimensions, and their content.
  * 
  */

		var _items,
		    _tempPanAreaSize = {},
		    _imagesToAppendPool = [],
		    _initialContentSet,
		    _initialZoomRunning,
		    _controllerDefaultOptions = {
			index: 0,
			errorMsg: '<div class="pswp__error-msg"><a href="%url%" target="_blank">The image</a> could not be loaded.</div>',
			forceProgressiveLoading: false, // TODO
			preload: [1, 1],
			getNumItemsFn: function () {
				return _items.length;
			}
		};

		var _getItemAt,
		    _getNumItems,
		    _initialIsLoop,
		    _getZeroBounds = function () {
			return {
				center: { x: 0, y: 0 },
				max: { x: 0, y: 0 },
				min: { x: 0, y: 0 }
			};
		},
		    _calculateSingleItemPanBounds = function (item, realPanElementW, realPanElementH) {
			var bounds = item.bounds;

			// position of element when it's centered
			bounds.center.x = Math.round((_tempPanAreaSize.x - realPanElementW) / 2);
			bounds.center.y = Math.round((_tempPanAreaSize.y - realPanElementH) / 2) + item.vGap.top;

			// maximum pan position
			bounds.max.x = realPanElementW > _tempPanAreaSize.x ? Math.round(_tempPanAreaSize.x - realPanElementW) : bounds.center.x;

			bounds.max.y = realPanElementH > _tempPanAreaSize.y ? Math.round(_tempPanAreaSize.y - realPanElementH) + item.vGap.top : bounds.center.y;

			// minimum pan position
			bounds.min.x = realPanElementW > _tempPanAreaSize.x ? 0 : bounds.center.x;
			bounds.min.y = realPanElementH > _tempPanAreaSize.y ? item.vGap.top : bounds.center.y;
		},
		    _calculateItemSize = function (item, viewportSize, zoomLevel) {

			if (item.src && !item.loadError) {
				var isInitial = !zoomLevel;

				if (isInitial) {
					if (!item.vGap) {
						item.vGap = { top: 0, bottom: 0 };
					}
					// allows overriding vertical margin for individual items
					_shout('parseVerticalMargin', item);
				}

				_tempPanAreaSize.x = viewportSize.x;
				_tempPanAreaSize.y = viewportSize.y - item.vGap.top - item.vGap.bottom;

				if (isInitial) {
					var hRatio = _tempPanAreaSize.x / item.w;
					var vRatio = _tempPanAreaSize.y / item.h;

					item.fitRatio = hRatio < vRatio ? hRatio : vRatio;
					//item.fillRatio = hRatio > vRatio ? hRatio : vRatio;

					var scaleMode = _options.scaleMode;

					if (scaleMode === 'orig') {
						zoomLevel = 1;
					} else if (scaleMode === 'fit') {
						zoomLevel = item.fitRatio;
					}

					if (zoomLevel > 1) {
						zoomLevel = 1;
					}

					item.initialZoomLevel = zoomLevel;

					if (!item.bounds) {
						// reuse bounds object
						item.bounds = _getZeroBounds();
					}
				}

				if (!zoomLevel) {
					return;
				}

				_calculateSingleItemPanBounds(item, item.w * zoomLevel, item.h * zoomLevel);

				if (isInitial && zoomLevel === item.initialZoomLevel) {
					item.initialPosition = item.bounds.center;
				}

				return item.bounds;
			} else {
				item.w = item.h = 0;
				item.initialZoomLevel = item.fitRatio = 1;
				item.bounds = _getZeroBounds();
				item.initialPosition = item.bounds.center;

				// if it's not image, we return zero bounds (content is not zoomable)
				return item.bounds;
			}
		},
		    _appendImage = function (index, item, baseDiv, img, preventAnimation, keepPlaceholder) {

			if (item.loadError) {
				return;
			}

			if (img) {

				item.imageAppended = true;
				_setImageSize(item, img, item === self.currItem && _renderMaxResolution);

				baseDiv.appendChild(img);

				if (keepPlaceholder) {
					setTimeout(function () {
						if (item && item.loaded && item.placeholder) {
							item.placeholder.style.display = 'none';
							item.placeholder = null;
						}
					}, 500);
				}
			}
		},
		    _preloadImage = function (item) {
			item.loading = true;
			item.loaded = false;
			var img = item.img = framework.createEl('pswp__img', 'img');
			var onComplete = function () {
				item.loading = false;
				item.loaded = true;

				if (item.loadComplete) {
					item.loadComplete(item);
				} else {
					item.img = null; // no need to store image object
				}
				img.onload = img.onerror = null;
				img = null;
			};
			img.onload = onComplete;
			img.onerror = function () {
				item.loadError = true;
				onComplete();
			};

			img.src = item.src; // + '?a=' + Math.random();

			return img;
		},
		    _checkForError = function (item, cleanUp) {
			if (item.src && item.loadError && item.container) {

				if (cleanUp) {
					item.container.innerHTML = '';
				}

				item.container.innerHTML = _options.errorMsg.replace('%url%', item.src);
				return true;
			}
		},
		    _setImageSize = function (item, img, maxRes) {
			if (!item.src) {
				return;
			}

			if (!img) {
				img = item.container.lastChild;
			}

			var w = maxRes ? item.w : Math.round(item.w * item.fitRatio),
			    h = maxRes ? item.h : Math.round(item.h * item.fitRatio);

			if (item.placeholder && !item.loaded) {
				item.placeholder.style.width = w + 'px';
				item.placeholder.style.height = h + 'px';
			}

			img.style.width = w + 'px';
			img.style.height = h + 'px';
		},
		    _appendImagesPool = function () {

			if (_imagesToAppendPool.length) {
				var poolItem;

				for (var i = 0; i < _imagesToAppendPool.length; i++) {
					poolItem = _imagesToAppendPool[i];
					if (poolItem.holder.index === poolItem.index) {
						_appendImage(poolItem.index, poolItem.item, poolItem.baseDiv, poolItem.img, false, poolItem.clearPlaceholder);
					}
				}
				_imagesToAppendPool = [];
			}
		};

		_registerModule('Controller', {

			publicMethods: {

				lazyLoadItem: function (index) {
					index = _getLoopedId(index);
					var item = _getItemAt(index);

					if (!item || (item.loaded || item.loading) && !_itemsNeedUpdate) {
						return;
					}

					_shout('gettingData', index, item);

					if (!item.src) {
						return;
					}

					_preloadImage(item);
				},
				initController: function () {
					framework.extend(_options, _controllerDefaultOptions, true);
					self.items = _items = items;
					_getItemAt = self.getItemAt;
					_getNumItems = _options.getNumItemsFn; //self.getNumItems;


					_initialIsLoop = _options.loop;
					if (_getNumItems() < 3) {
						_options.loop = false; // disable loop if less then 3 items
					}

					_listen('beforeChange', function (diff) {

						var p = _options.preload,
						    isNext = diff === null ? true : diff >= 0,
						    preloadBefore = Math.min(p[0], _getNumItems()),
						    preloadAfter = Math.min(p[1], _getNumItems()),
						    i;

						for (i = 1; i <= (isNext ? preloadAfter : preloadBefore); i++) {
							self.lazyLoadItem(_currentItemIndex + i);
						}
						for (i = 1; i <= (isNext ? preloadBefore : preloadAfter); i++) {
							self.lazyLoadItem(_currentItemIndex - i);
						}
					});

					_listen('initialLayout', function () {
						self.currItem.initialLayout = _options.getThumbBoundsFn && _options.getThumbBoundsFn(_currentItemIndex);
					});

					_listen('mainScrollAnimComplete', _appendImagesPool);
					_listen('initialZoomInEnd', _appendImagesPool);

					_listen('destroy', function () {
						var item;
						for (var i = 0; i < _items.length; i++) {
							item = _items[i];
							// remove reference to DOM elements, for GC
							if (item.container) {
								item.container = null;
							}
							if (item.placeholder) {
								item.placeholder = null;
							}
							if (item.img) {
								item.img = null;
							}
							if (item.preloader) {
								item.preloader = null;
							}
							if (item.loadError) {
								item.loaded = item.loadError = false;
							}
						}
						_imagesToAppendPool = null;
					});
				},

				getItemAt: function (index) {
					if (index >= 0) {
						return _items[index] !== undefined ? _items[index] : false;
					}
					return false;
				},

				allowProgressiveImg: function () {
					// 1. Progressive image loading isn't working on webkit/blink 
					//    when hw-acceleration (e.g. translateZ) is applied to IMG element.
					//    That's why in PhotoSwipe parent element gets zoom transform, not image itself.
					//    
					// 2. Progressive image loading sometimes blinks in webkit/blink when applying animation to parent element.
					//    That's why it's disabled on touch devices (mainly because of swipe transition)
					//    
					// 3. Progressive image loading sometimes doesn't work in IE (up to 11).

					// Don't allow progressive loading on non-large touch devices
					return _options.forceProgressiveLoading || !_likelyTouchDevice || _options.mouseUsed || screen.width > 1200;
					// 1200 - to eliminate touch devices with large screen (like Chromebook Pixel)
				},

				setContent: function (holder, index) {

					if (_options.loop) {
						index = _getLoopedId(index);
					}

					var prevItem = self.getItemAt(holder.index);
					if (prevItem) {
						prevItem.container = null;
					}

					var item = self.getItemAt(index),
					    img;

					if (!item) {
						holder.el.innerHTML = '';
						return;
					}

					// allow to override data
					_shout('gettingData', index, item);

					holder.index = index;
					holder.item = item;

					// base container DIV is created only once for each of 3 holders
					var baseDiv = item.container = framework.createEl('pswp__zoom-wrap');

					if (!item.src && item.html) {
						if (item.html.tagName) {
							baseDiv.appendChild(item.html);
						} else {
							baseDiv.innerHTML = item.html;
						}
					}

					_checkForError(item);

					_calculateItemSize(item, _viewportSize);

					if (item.src && !item.loadError && !item.loaded) {

						item.loadComplete = function (item) {

							// gallery closed before image finished loading
							if (!_isOpen) {
								return;
							}

							// check if holder hasn't changed while image was loading
							if (holder && holder.index === index) {
								if (_checkForError(item, true)) {
									item.loadComplete = item.img = null;
									_calculateItemSize(item, _viewportSize);
									_applyZoomPanToItem(item);

									if (holder.index === _currentItemIndex) {
										// recalculate dimensions
										self.updateCurrZoomItem();
									}
									return;
								}
								if (!item.imageAppended) {
									if (_features.transform && (_mainScrollAnimating || _initialZoomRunning)) {
										_imagesToAppendPool.push({
											item: item,
											baseDiv: baseDiv,
											img: item.img,
											index: index,
											holder: holder,
											clearPlaceholder: true
										});
									} else {
										_appendImage(index, item, baseDiv, item.img, _mainScrollAnimating || _initialZoomRunning, true);
									}
								} else {
									// remove preloader & mini-img
									if (!_initialZoomRunning && item.placeholder) {
										item.placeholder.style.display = 'none';
										item.placeholder = null;
									}
								}
							}

							item.loadComplete = null;
							item.img = null; // no need to store image element after it's added

							_shout('imageLoadComplete', index, item);
						};

						if (framework.features.transform) {

							var placeholderClassName = 'pswp__img pswp__img--placeholder';
							placeholderClassName += item.msrc ? '' : ' pswp__img--placeholder--blank';

							var placeholder = framework.createEl(placeholderClassName, item.msrc ? 'img' : '');
							if (item.msrc) {
								placeholder.src = item.msrc;
							}

							_setImageSize(item, placeholder);

							baseDiv.appendChild(placeholder);
							item.placeholder = placeholder;
						}

						if (!item.loading) {
							_preloadImage(item);
						}

						if (self.allowProgressiveImg()) {
							// just append image
							if (!_initialContentSet && _features.transform) {
								_imagesToAppendPool.push({
									item: item,
									baseDiv: baseDiv,
									img: item.img,
									index: index,
									holder: holder
								});
							} else {
								_appendImage(index, item, baseDiv, item.img, true, true);
							}
						}
					} else if (item.src && !item.loadError) {
						// image object is created every time, due to bugs of image loading & delay when switching images
						img = framework.createEl('pswp__img', 'img');
						img.style.opacity = 1;
						img.src = item.src;
						_setImageSize(item, img);
						_appendImage(index, item, baseDiv, img, true);
					}

					if (!_initialContentSet && index === _currentItemIndex) {
						_currZoomElementStyle = baseDiv.style;
						_showOrHide(item, img || item.img);
					} else {
						_applyZoomPanToItem(item);
					}

					holder.el.innerHTML = '';
					holder.el.appendChild(baseDiv);
				},

				cleanSlide: function (item) {
					if (item.img) {
						item.img.onload = item.img.onerror = null;
					}
					item.loaded = item.loading = item.img = item.imageAppended = false;
				}

			}
		});

		/*>>items-controller*/

		/*>>tap*/
		/**
   * tap.js:
   *
   * Displatches tap and double-tap events.
   * 
   */

		var tapTimer,
		    tapReleasePoint = {},
		    _dispatchTapEvent = function (origEvent, releasePoint, pointerType) {
			var e = document.createEvent('CustomEvent'),
			    eDetail = {
				origEvent: origEvent,
				target: origEvent.target,
				releasePoint: releasePoint,
				pointerType: pointerType || 'touch'
			};

			e.initCustomEvent('pswpTap', true, true, eDetail);
			origEvent.target.dispatchEvent(e);
		};

		_registerModule('Tap', {
			publicMethods: {
				initTap: function () {
					_listen('firstTouchStart', self.onTapStart);
					_listen('touchRelease', self.onTapRelease);
					_listen('destroy', function () {
						tapReleasePoint = {};
						tapTimer = null;
					});
				},
				onTapStart: function (touchList) {
					if (touchList.length > 1) {
						clearTimeout(tapTimer);
						tapTimer = null;
					}
				},
				onTapRelease: function (e, releasePoint) {
					if (!releasePoint) {
						return;
					}

					if (!_moved && !_isMultitouch && !_numAnimations) {
						var p0 = releasePoint;
						if (tapTimer) {
							clearTimeout(tapTimer);
							tapTimer = null;

							// Check if taped on the same place
							if (_isNearbyPoints(p0, tapReleasePoint)) {
								_shout('doubleTap', p0);
								return;
							}
						}

						if (releasePoint.type === 'mouse') {
							_dispatchTapEvent(e, releasePoint, 'mouse');
							return;
						}

						var clickedTagName = e.target.tagName.toUpperCase();
						// avoid double tap delay on buttons and elements that have class pswp__single-tap
						if (clickedTagName === 'BUTTON' || framework.hasClass(e.target, 'pswp__single-tap')) {
							_dispatchTapEvent(e, releasePoint);
							return;
						}

						_equalizePoints(tapReleasePoint, p0);

						tapTimer = setTimeout(function () {
							_dispatchTapEvent(e, releasePoint);
							tapTimer = null;
						}, 300);
					}
				}
			}
		});

		/*>>tap*/

		/*>>desktop-zoom*/
		/**
   *
   * desktop-zoom.js:
   *
   * - Binds mousewheel event for paning zoomed image.
   * - Manages "dragging", "zoomed-in", "zoom-out" classes.
   *   (which are used for cursors and zoom icon)
   * - Adds toggleDesktopZoom function.
   * 
   */

		var _wheelDelta;

		_registerModule('DesktopZoom', {

			publicMethods: {

				initDesktopZoom: function () {

					if (_oldIE) {
						// no zoom for old IE (<=8)
						return;
					}

					if (_likelyTouchDevice) {
						// if detected hardware touch support, we wait until mouse is used,
						// and only then apply desktop-zoom features
						_listen('mouseUsed', function () {
							self.setupDesktopZoom();
						});
					} else {
						self.setupDesktopZoom(true);
					}
				},

				setupDesktopZoom: function (onInit) {

					_wheelDelta = {};

					var events = 'wheel mousewheel DOMMouseScroll';

					_listen('bindEvents', function () {
						framework.bind(template, events, self.handleMouseWheel);
					});

					_listen('unbindEvents', function () {
						if (_wheelDelta) {
							framework.unbind(template, events, self.handleMouseWheel);
						}
					});

					self.mouseZoomedIn = false;

					var hasDraggingClass,
					    updateZoomable = function () {
						if (self.mouseZoomedIn) {
							framework.removeClass(template, 'pswp--zoomed-in');
							self.mouseZoomedIn = false;
						}
						if (_currZoomLevel < 1) {
							framework.addClass(template, 'pswp--zoom-allowed');
						} else {
							framework.removeClass(template, 'pswp--zoom-allowed');
						}
						removeDraggingClass();
					},
					    removeDraggingClass = function () {
						if (hasDraggingClass) {
							framework.removeClass(template, 'pswp--dragging');
							hasDraggingClass = false;
						}
					};

					_listen('resize', updateZoomable);
					_listen('afterChange', updateZoomable);
					_listen('pointerDown', function () {
						if (self.mouseZoomedIn) {
							hasDraggingClass = true;
							framework.addClass(template, 'pswp--dragging');
						}
					});
					_listen('pointerUp', removeDraggingClass);

					if (!onInit) {
						updateZoomable();
					}
				},

				handleMouseWheel: function (e) {

					if (_currZoomLevel <= self.currItem.fitRatio) {
						if (_options.modal) {

							if (!_options.closeOnScroll || _numAnimations || _isDragging) {
								e.preventDefault();
							} else if (_transformKey && Math.abs(e.deltaY) > 2) {
								// close PhotoSwipe
								// if browser supports transforms & scroll changed enough
								_closedByScroll = true;
								self.close();
							}
						}
						return true;
					}

					// allow just one event to fire
					e.stopPropagation();

					// https://developer.mozilla.org/en-US/docs/Web/Events/wheel
					_wheelDelta.x = 0;

					if ('deltaX' in e) {
						if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {
								// 18 - average line height
								_wheelDelta.x = e.deltaX * 18;
								_wheelDelta.y = e.deltaY * 18;
							} else {
							_wheelDelta.x = e.deltaX;
							_wheelDelta.y = e.deltaY;
						}
					} else if ('wheelDelta' in e) {
						if (e.wheelDeltaX) {
							_wheelDelta.x = -0.16 * e.wheelDeltaX;
						}
						if (e.wheelDeltaY) {
							_wheelDelta.y = -0.16 * e.wheelDeltaY;
						} else {
							_wheelDelta.y = -0.16 * e.wheelDelta;
						}
					} else if ('detail' in e) {
						_wheelDelta.y = e.detail;
					} else {
						return;
					}

					_calculatePanBounds(_currZoomLevel, true);

					var newPanX = _panOffset.x - _wheelDelta.x,
					    newPanY = _panOffset.y - _wheelDelta.y;

					// only prevent scrolling in nonmodal mode when not at edges
					if (_options.modal || newPanX <= _currPanBounds.min.x && newPanX >= _currPanBounds.max.x && newPanY <= _currPanBounds.min.y && newPanY >= _currPanBounds.max.y) {
						e.preventDefault();
					}

					// TODO: use rAF instead of mousewheel?
					self.panTo(newPanX, newPanY);
				},

				toggleDesktopZoom: function (centerPoint) {
					centerPoint = centerPoint || { x: _viewportSize.x / 2 + _offset.x, y: _viewportSize.y / 2 + _offset.y };

					var doubleTapZoomLevel = _options.getDoubleTapZoom(true, self.currItem);
					var zoomOut = _currZoomLevel === doubleTapZoomLevel;

					self.mouseZoomedIn = !zoomOut;

					self.zoomTo(zoomOut ? self.currItem.initialZoomLevel : doubleTapZoomLevel, centerPoint, 333);
					framework[(!zoomOut ? 'add' : 'remove') + 'Class'](template, 'pswp--zoomed-in');
				}

			}
		});

		/*>>desktop-zoom*/

		/*>>history*/
		/**
   *
   * history.js:
   *
   * - Back button to close gallery.
   * 
   * - Unique URL for each slide: example.com/&pid=1&gid=3
   *   (where PID is picture index, and GID and gallery index)
   *   
   * - Switch URL when slides change.
   * 
   */

		var _historyDefaultOptions = {
			history: true,
			galleryUID: 1
		};

		var _historyUpdateTimeout,
		    _hashChangeTimeout,
		    _hashAnimCheckTimeout,
		    _hashChangedByScript,
		    _hashChangedByHistory,
		    _hashReseted,
		    _initialHash,
		    _historyChanged,
		    _closedFromURL,
		    _urlChangedOnce,
		    _windowLoc,
		    _supportsPushState,
		    _getHash = function () {
			return _windowLoc.hash.substring(1);
		},
		    _cleanHistoryTimeouts = function () {

			if (_historyUpdateTimeout) {
				clearTimeout(_historyUpdateTimeout);
			}

			if (_hashAnimCheckTimeout) {
				clearTimeout(_hashAnimCheckTimeout);
			}
		},


		// pid - Picture index
		// gid - Gallery index
		_parseItemIndexFromURL = function () {
			var hash = _getHash(),
			    params = {};

			if (hash.length < 5) {
				// pid=1
				return params;
			}

			var i,
			    vars = hash.split('&');
			for (i = 0; i < vars.length; i++) {
				if (!vars[i]) {
					continue;
				}
				var pair = vars[i].split('=');
				if (pair.length < 2) {
					continue;
				}
				params[pair[0]] = pair[1];
			}
			if (_options.galleryPIDs) {
				// detect custom pid in hash and search for it among the items collection
				var searchfor = params.pid;
				params.pid = 0; // if custom pid cannot be found, fallback to the first item
				for (i = 0; i < _items.length; i++) {
					if (_items[i].pid === searchfor) {
						params.pid = i;
						break;
					}
				}
			} else {
				params.pid = parseInt(params.pid, 10) - 1;
			}
			if (params.pid < 0) {
				params.pid = 0;
			}
			return params;
		},
		    _updateHash = function () {

			if (_hashAnimCheckTimeout) {
				clearTimeout(_hashAnimCheckTimeout);
			}

			if (_numAnimations || _isDragging) {
				// changing browser URL forces layout/paint in some browsers, which causes noticable lag during animation
				// that's why we update hash only when no animations running
				_hashAnimCheckTimeout = setTimeout(_updateHash, 500);
				return;
			}

			if (_hashChangedByScript) {
				clearTimeout(_hashChangeTimeout);
			} else {
				_hashChangedByScript = true;
			}

			var pid = _currentItemIndex + 1;
			var item = _getItemAt(_currentItemIndex);
			if (item.hasOwnProperty('pid')) {
				// carry forward any custom pid assigned to the item
				pid = item.pid;
			}
			var newHash = _initialHash + '&' + 'gid=' + _options.galleryUID + '&' + 'pid=' + pid;

			if (!_historyChanged) {
				if (_windowLoc.hash.indexOf(newHash) === -1) {
					_urlChangedOnce = true;
				}
				// first time - add new hisory record, then just replace
			}

			var newURL = _windowLoc.href.split('#')[0] + '#' + newHash;

			if (_supportsPushState) {

				if ('#' + newHash !== window.location.hash) {
					history[_historyChanged ? 'replaceState' : 'pushState']('', document.title, newURL);
				}
			} else {
				if (_historyChanged) {
					_windowLoc.replace(newURL);
				} else {
					_windowLoc.hash = newHash;
				}
			}

			_historyChanged = true;
			_hashChangeTimeout = setTimeout(function () {
				_hashChangedByScript = false;
			}, 60);
		};

		_registerModule('History', {

			publicMethods: {
				initHistory: function () {

					framework.extend(_options, _historyDefaultOptions, true);

					if (!_options.history) {
						return;
					}

					_windowLoc = window.location;
					_urlChangedOnce = false;
					_closedFromURL = false;
					_historyChanged = false;
					_initialHash = _getHash();
					_supportsPushState = 'pushState' in history;

					if (_initialHash.indexOf('gid=') > -1) {
						_initialHash = _initialHash.split('&gid=')[0];
						_initialHash = _initialHash.split('?gid=')[0];
					}

					_listen('afterChange', self.updateURL);
					_listen('unbindEvents', function () {
						framework.unbind(window, 'hashchange', self.onHashChange);
					});

					var returnToOriginal = function () {
						_hashReseted = true;
						if (!_closedFromURL) {

							if (_urlChangedOnce) {
								history.back();
							} else {

								if (_initialHash) {
									_windowLoc.hash = _initialHash;
								} else {
									if (_supportsPushState) {

										// remove hash from url without refreshing it or scrolling to top
										history.pushState('', document.title, _windowLoc.pathname + _windowLoc.search);
									} else {
										_windowLoc.hash = '';
									}
								}
							}
						}

						_cleanHistoryTimeouts();
					};

					_listen('unbindEvents', function () {
						if (_closedByScroll) {
							// if PhotoSwipe is closed by scroll, we go "back" before the closing animation starts
							// this is done to keep the scroll position
							returnToOriginal();
						}
					});
					_listen('destroy', function () {
						if (!_hashReseted) {
							returnToOriginal();
						}
					});
					_listen('firstUpdate', function () {
						_currentItemIndex = _parseItemIndexFromURL().pid;
					});

					var index = _initialHash.indexOf('pid=');
					if (index > -1) {
						_initialHash = _initialHash.substring(0, index);
						if (_initialHash.slice(-1) === '&') {
							_initialHash = _initialHash.slice(0, -1);
						}
					}

					setTimeout(function () {
						if (_isOpen) {
							// hasn't destroyed yet
							framework.bind(window, 'hashchange', self.onHashChange);
						}
					}, 40);
				},
				onHashChange: function () {

					if (_getHash() === _initialHash) {

						_closedFromURL = true;
						self.close();
						return;
					}
					if (!_hashChangedByScript) {

						_hashChangedByHistory = true;
						self.goTo(_parseItemIndexFromURL().pid);
						_hashChangedByHistory = false;
					}
				},
				updateURL: function () {

					// Delay the update of URL, to avoid lag during transition, 
					// and to not to trigger actions like "refresh page sound" or "blinking favicon" to often

					_cleanHistoryTimeouts();

					if (_hashChangedByHistory) {
						return;
					}

					if (!_historyChanged) {
						_updateHash(); // first time
					} else {
						_historyUpdateTimeout = setTimeout(_updateHash, 800);
					}
				}

			}
		});

		/*>>history*/
		framework.extend(self, publicMethods);
	};
	return PhotoSwipe;
});
;// ==========================================================================
// Plyr
// plyr.js v2.0.10
// https://github.com/selz/plyr
// License: The MIT License (MIT)
// ==========================================================================
// Credits: http://paypal.github.io/accessible-html5-video-player/
// ==========================================================================

;(function (root, factory) {
    'use strict';
    /*global define,module*/

    if (typeof module === 'object' && typeof module.exports === 'object') {
        // Node, CommonJS-like
        module.exports = factory(root, document);
    } else if (typeof define === 'function' && define.amd) {
        // AMD
        define([], function () {
            return factory(root, document);
        });
    } else {
        // Browser globals (root is window)
        root.plyr = factory(root, document);
    }
})(typeof window !== 'undefined' ? window : this, function (window, document) {
    'use strict';

    // Globals

    var fullscreen,
        scroll = { x: 0, y: 0 },


    // Default config
    defaults = {
        enabled: true,
        debug: false,
        autoplay: false,
        loop: false,
        seekTime: 10,
        volume: 10,
        volumeMin: 0,
        volumeMax: 10,
        volumeStep: 1,
        duration: null,
        displayDuration: true,
        loadSprite: true,
        iconPrefix: 'plyr',
        iconUrl: 'https://cdn.plyr.io/2.0.10/plyr.svg',
        clickToPlay: true,
        hideControls: true,
        showPosterOnEnd: false,
        disableContextMenu: true,
        keyboardShorcuts: {
            focused: true,
            global: false
        },
        tooltips: {
            controls: false,
            seek: true
        },
        selectors: {
            html5: 'video, audio',
            embed: '[data-type]',
            editable: 'input, textarea, select, [contenteditable]',
            container: '.plyr',
            controls: {
                container: null,
                wrapper: '.plyr__controls'
            },
            labels: '[data-plyr]',
            buttons: {
                seek: '[data-plyr="seek"]',
                play: '[data-plyr="play"]',
                pause: '[data-plyr="pause"]',
                restart: '[data-plyr="restart"]',
                rewind: '[data-plyr="rewind"]',
                forward: '[data-plyr="fast-forward"]',
                mute: '[data-plyr="mute"]',
                captions: '[data-plyr="captions"]',
                fullscreen: '[data-plyr="fullscreen"]'
            },
            volume: {
                input: '[data-plyr="volume"]',
                display: '.plyr__volume--display'
            },
            progress: {
                container: '.plyr__progress',
                buffer: '.plyr__progress--buffer',
                played: '.plyr__progress--played'
            },
            captions: '.plyr__captions',
            currentTime: '.plyr__time--current',
            duration: '.plyr__time--duration'
        },
        classes: {
            setup: 'plyr--setup',
            ready: 'plyr--ready',
            videoWrapper: 'plyr__video-wrapper',
            embedWrapper: 'plyr__video-embed',
            type: 'plyr--{0}',
            stopped: 'plyr--stopped',
            playing: 'plyr--playing',
            muted: 'plyr--muted',
            loading: 'plyr--loading',
            hover: 'plyr--hover',
            tooltip: 'plyr__tooltip',
            hidden: 'plyr__sr-only',
            hideControls: 'plyr--hide-controls',
            isIos: 'plyr--is-ios',
            isTouch: 'plyr--is-touch',
            captions: {
                enabled: 'plyr--captions-enabled',
                active: 'plyr--captions-active'
            },
            fullscreen: {
                enabled: 'plyr--fullscreen-enabled',
                active: 'plyr--fullscreen-active'
            },
            tabFocus: 'tab-focus'
        },
        captions: {
            defaultActive: false
        },
        fullscreen: {
            enabled: true,
            fallback: true,
            allowAudio: false
        },
        storage: {
            enabled: true,
            key: 'plyr'
        },
        controls: ['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'captions', 'fullscreen'],
        i18n: {
            restart: 'Restart',
            rewind: 'Rewind {seektime} secs',
            play: 'Play',
            pause: 'Pause',
            forward: 'Forward {seektime} secs',
            played: 'played',
            buffered: 'buffered',
            currentTime: 'Current time',
            duration: 'Duration',
            volume: 'Volume',
            toggleMute: 'Toggle Mute',
            toggleCaptions: 'Toggle Captions',
            toggleFullscreen: 'Toggle Fullscreen',
            frameTitle: 'Player for {title}'
        },
        types: {
            embed: ['youtube', 'vimeo', 'soundcloud'],
            html5: ['video', 'audio']
        },
        // URLs
        urls: {
            vimeo: {
                api: 'https://player.vimeo.com/api/player.js'
            },
            youtube: {
                api: 'https://www.youtube.com/iframe_api'
            },
            soundcloud: {
                api: 'https://w.soundcloud.com/player/api.js'
            }
        },
        // Custom control listeners
        listeners: {
            seek: null,
            play: null,
            pause: null,
            restart: null,
            rewind: null,
            forward: null,
            mute: null,
            volume: null,
            captions: null,
            fullscreen: null
        },
        // Events to watch on HTML5 media elements
        events: ['ready', 'ended', 'progress', 'stalled', 'playing', 'waiting', 'canplay', 'canplaythrough', 'loadstart', 'loadeddata', 'loadedmetadata', 'timeupdate', 'volumechange', 'play', 'pause', 'error', 'seeking', 'seeked', 'emptied'],
        // Logging
        logPrefix: '[Plyr]'
    };

    // Credits: http://paypal.github.io/accessible-html5-video-player/
    // Unfortunately, due to mixed support, UA sniffing is required
    function _browserSniff() {
        var ua = navigator.userAgent,
            name = navigator.appName,
            fullVersion = '' + parseFloat(navigator.appVersion),
            majorVersion = parseInt(navigator.appVersion, 10),
            nameOffset,
            verOffset,
            ix,
            isIE = false,
            isFirefox = false,
            isChrome = false,
            isSafari = false;

        if (navigator.appVersion.indexOf('Windows NT') !== -1 && navigator.appVersion.indexOf('rv:11') !== -1) {
            // MSIE 11
            isIE = true;
            name = 'IE';
            fullVersion = '11';
        } else if ((verOffset = ua.indexOf('MSIE')) !== -1) {
            // MSIE
            isIE = true;
            name = 'IE';
            fullVersion = ua.substring(verOffset + 5);
        } else if ((verOffset = ua.indexOf('Chrome')) !== -1) {
            // Chrome
            isChrome = true;
            name = 'Chrome';
            fullVersion = ua.substring(verOffset + 7);
        } else if ((verOffset = ua.indexOf('Safari')) !== -1) {
            // Safari
            isSafari = true;
            name = 'Safari';
            fullVersion = ua.substring(verOffset + 7);
            if ((verOffset = ua.indexOf('Version')) !== -1) {
                fullVersion = ua.substring(verOffset + 8);
            }
        } else if ((verOffset = ua.indexOf('Firefox')) !== -1) {
            // Firefox
            isFirefox = true;
            name = 'Firefox';
            fullVersion = ua.substring(verOffset + 8);
        } else if ((nameOffset = ua.lastIndexOf(' ') + 1) < (verOffset = ua.lastIndexOf('/'))) {
            // In most other browsers, 'name/version' is at the end of userAgent
            name = ua.substring(nameOffset, verOffset);
            fullVersion = ua.substring(verOffset + 1);

            if (name.toLowerCase() === name.toUpperCase()) {
                name = navigator.appName;
            }
        }

        // Trim the fullVersion string at semicolon/space if present
        if ((ix = fullVersion.indexOf(';')) !== -1) {
            fullVersion = fullVersion.substring(0, ix);
        }
        if ((ix = fullVersion.indexOf(' ')) !== -1) {
            fullVersion = fullVersion.substring(0, ix);
        }

        // Get major version
        majorVersion = parseInt('' + fullVersion, 10);
        if (isNaN(majorVersion)) {
            fullVersion = '' + parseFloat(navigator.appVersion);
            majorVersion = parseInt(navigator.appVersion, 10);
        }

        // Return data
        return {
            name: name,
            version: majorVersion,
            isIE: isIE,
            isFirefox: isFirefox,
            isChrome: isChrome,
            isSafari: isSafari,
            isIos: /(iPad|iPhone|iPod)/g.test(navigator.platform),
            isTouch: 'ontouchstart' in document.documentElement
        };
    }

    // Check for mime type support against a player instance
    // Credits: http://diveintohtml5.info/everything.html
    // Related: http://www.leanbackplyr.com/test/h5mt.html
    function _supportMime(plyr, mimeType) {
        var media = plyr.media;

        if (plyr.type === 'video') {
            // Check type
            switch (mimeType) {
                case 'video/webm':
                    return !!(media.canPlayType && media.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/no/, ''));
                case 'video/mp4':
                    return !!(media.canPlayType && media.canPlayType('video/mp4; codecs="avc1.42E01E, mp4a.40.2"').replace(/no/, ''));
                case 'video/ogg':
                    return !!(media.canPlayType && media.canPlayType('video/ogg; codecs="theora"').replace(/no/, ''));
            }
        } else if (plyr.type === 'audio') {
            // Check type
            switch (mimeType) {
                case 'audio/mpeg':
                    return !!(media.canPlayType && media.canPlayType('audio/mpeg;').replace(/no/, ''));
                case 'audio/ogg':
                    return !!(media.canPlayType && media.canPlayType('audio/ogg; codecs="vorbis"').replace(/no/, ''));
                case 'audio/wav':
                    return !!(media.canPlayType && media.canPlayType('audio/wav; codecs="1"').replace(/no/, ''));
            }
        }

        // If we got this far, we're stuffed
        return false;
    }

    // Inject a script
    function _injectScript(source) {
        if (document.querySelectorAll('script[src="' + source + '"]').length) {
            return;
        }

        var tag = document.createElement('script');
        tag.src = source;
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    }

    // Element exists in an array
    function _inArray(haystack, needle) {
        return Array.prototype.indexOf && haystack.indexOf(needle) !== -1;
    }

    // Replace all
    function _replaceAll(string, find, replace) {
        return string.replace(new RegExp(find.replace(/([.*+?\^=!:${}()|\[\]\/\\])/g, '\\$1'), 'g'), replace);
    }

    // Wrap an element
    function _wrap(elements, wrapper) {
        // Convert `elements` to an array, if necessary.
        if (!elements.length) {
            elements = [elements];
        }

        // Loops backwards to prevent having to clone the wrapper on the
        // first element (see `child` below).
        for (var i = elements.length - 1; i >= 0; i--) {
            var child = i > 0 ? wrapper.cloneNode(true) : wrapper;
            var element = elements[i];

            // Cache the current parent and sibling.
            var parent = element.parentNode;
            var sibling = element.nextSibling;

            // Wrap the element (is automatically removed from its current
            // parent).
            child.appendChild(element);

            // If the element had a sibling, insert the wrapper before
            // the sibling to maintain the HTML structure; otherwise, just
            // append it to the parent.
            if (sibling) {
                parent.insertBefore(child, sibling);
            } else {
                parent.appendChild(child);
            }

            return child;
        }
    }

    // Unwrap an element
    // http://plainjs.com/javascript/manipulation/unwrap-a-dom-element-35/
    /*function _unwrap(wrapper) {
        // Get the element's parent node
        var parent = wrapper.parentNode;
         // Move all children out of the element
        while (wrapper.firstChild) {
            parent.insertBefore(wrapper.firstChild, wrapper);
        }
         // Remove the empty element
        parent.removeChild(wrapper);
    }*/

    // Remove an element
    function _remove(element) {
        if (!element) {
            return;
        }
        element.parentNode.removeChild(element);
    }

    // Prepend child
    function _prependChild(parent, element) {
        parent.insertBefore(element, parent.firstChild);
    }

    // Set attributes
    function _setAttributes(element, attributes) {
        for (var key in attributes) {
            element.setAttribute(key, _is.boolean(attributes[key]) && attributes[key] ? '' : attributes[key]);
        }
    }

    // Insert a HTML element
    function _insertElement(type, parent, attributes) {
        // Create a new <element>
        var element = document.createElement(type);

        // Set all passed attributes
        _setAttributes(element, attributes);

        // Inject the new element
        _prependChild(parent, element);
    }

    // Get a classname from selector
    function _getClassname(selector) {
        return selector.replace('.', '');
    }

    // Toggle class on an element
    function _toggleClass(element, className, state) {
        if (element) {
            if (element.classList) {
                element.classList[state ? 'add' : 'remove'](className);
            } else {
                var name = (' ' + element.className + ' ').replace(/\s+/g, ' ').replace(' ' + className + ' ', '');
                element.className = name + (state ? ' ' + className : '');
            }
        }
    }

    // Has class name
    function _hasClass(element, className) {
        if (element) {
            if (element.classList) {
                return element.classList.contains(className);
            } else {
                return new RegExp('(\\s|^)' + className + '(\\s|$)').test(element.className);
            }
        }
        return false;
    }

    // Element matches selector
    function _matches(element, selector) {
        var p = Element.prototype;

        var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {
            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
        };

        return f.call(element, selector);
    }

    // Bind along with custom handler
    function _proxyListener(element, eventName, userListener, defaultListener, useCapture) {
        _on(element, eventName, function (event) {
            if (userListener) {
                userListener.apply(element, [event]);
            }
            defaultListener.apply(element, [event]);
        }, useCapture);
    }

    // Toggle event listener
    function _toggleListener(element, events, callback, toggle, useCapture) {
        var eventList = events.split(' ');

        // Whether the listener is a capturing listener or not
        // Default to false
        if (!_is.boolean(useCapture)) {
            useCapture = false;
        }

        // If a nodelist is passed, call itself on each node
        if (element instanceof NodeList) {
            for (var x = 0; x < element.length; x++) {
                if (element[x] instanceof Node) {
                    _toggleListener(element[x], arguments[1], arguments[2], arguments[3]);
                }
            }
            return;
        }

        // If a single node is passed, bind the event listener
        for (var i = 0; i < eventList.length; i++) {
            element[toggle ? 'addEventListener' : 'removeEventListener'](eventList[i], callback, useCapture);
        }
    }

    // Bind event
    function _on(element, events, callback, useCapture) {
        if (element) {
            _toggleListener(element, events, callback, true, useCapture);
        }
    }

    // Unbind event
    /*function _off(element, events, callback, useCapture) {
        if (element) {
            _toggleListener(element, events, callback, false, useCapture);
        }
    }*/

    // Trigger event
    function _event(element, type, bubbles, properties) {
        // Bail if no element
        if (!element || !type) {
            return;
        }

        // Default bubbles to false
        if (!_is.boolean(bubbles)) {
            bubbles = false;
        }

        // Create and dispatch the event
        var event = new CustomEvent(type, {
            bubbles: bubbles,
            detail: properties
        });

        // Dispatch the event
        element.dispatchEvent(event);
    }

    // Toggle aria-pressed state on a toggle button
    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles
    function _toggleState(target, state) {
        // Bail if no target
        if (!target) {
            return;
        }

        // Get state
        state = _is.boolean(state) ? state : !target.getAttribute('aria-pressed');

        // Set the attribute on target
        target.setAttribute('aria-pressed', state);

        return state;
    }

    // Get percentage
    function _getPercentage(current, max) {
        if (current === 0 || max === 0 || isNaN(current) || isNaN(max)) {
            return 0;
        }
        return (current / max * 100).toFixed(2);
    }

    // Deep extend/merge destination object with N more objects
    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/
    // Removed call to arguments.callee (used explicit function name instead)
    function _extend() {
        // Get arguments
        var objects = arguments;

        // Bail if nothing to merge
        if (!objects.length) {
            return;
        }

        // Return first if specified but nothing to merge
        if (objects.length === 1) {
            return objects[0];
        }

        // First object is the destination
        var destination = Array.prototype.shift.call(objects),
            length = objects.length;

        // Loop through all objects to merge
        for (var i = 0; i < length; i++) {
            var source = objects[i];

            for (var property in source) {
                if (source[property] && source[property].constructor && source[property].constructor === Object) {
                    destination[property] = destination[property] || {};
                    _extend(destination[property], source[property]);
                } else {
                    destination[property] = source[property];
                }
            }
        }

        return destination;
    }

    // Check variable types
    var _is = {
        object: function (input) {
            return input !== null && typeof input === 'object';
        },
        array: function (input) {
            return input !== null && typeof input === 'object' && input.constructor === Array;
        },
        number: function (input) {
            return input !== null && (typeof input === 'number' && !isNaN(input - 0) || typeof input === 'object' && input.constructor === Number);
        },
        string: function (input) {
            return input !== null && (typeof input === 'string' || typeof input === 'object' && input.constructor === String);
        },
        boolean: function (input) {
            return input !== null && typeof input === 'boolean';
        },
        nodeList: function (input) {
            return input !== null && input instanceof NodeList;
        },
        htmlElement: function (input) {
            return input !== null && input instanceof HTMLElement;
        },
        function: function (input) {
            return input !== null && typeof input === 'function';
        },
        undefined: function (input) {
            return input !== null && typeof input === 'undefined';
        }
    };

    // Parse YouTube ID from url
    function _parseYouTubeId(url) {
        var regex = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
        return url.match(regex) ? RegExp.$2 : url;
    }

    // Parse Vimeo ID from url
    function _parseVimeoId(url) {
        var regex = /^.*(vimeo.com\/|video\/)(\d+).*/;
        return url.match(regex) ? RegExp.$2 : url;
    }

    // Fullscreen API
    function _fullscreen() {
        var fullscreen = {
            supportsFullScreen: false,
            isFullScreen: function () {
                return false;
            },
            requestFullScreen: function () {},
            cancelFullScreen: function () {},
            fullScreenEventName: '',
            element: null,
            prefix: ''
        },
            browserPrefixes = 'webkit o moz ms khtml'.split(' ');

        // Check for native support
        if (!_is.undefined(document.cancelFullScreen)) {
            fullscreen.supportsFullScreen = true;
        } else {
            // Check for fullscreen support by vendor prefix
            for (var i = 0, il = browserPrefixes.length; i < il; i++) {
                fullscreen.prefix = browserPrefixes[i];

                if (!_is.undefined(document[fullscreen.prefix + 'CancelFullScreen'])) {
                    fullscreen.supportsFullScreen = true;
                    break;
                } else if (!_is.undefined(document.msExitFullscreen) && document.msFullscreenEnabled) {
                    // Special case for MS (when isn't it?)
                    fullscreen.prefix = 'ms';
                    fullscreen.supportsFullScreen = true;
                    break;
                }
            }
        }

        // Update methods to do something useful
        if (fullscreen.supportsFullScreen) {
            // Yet again Microsoft awesomeness,
            // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes
            fullscreen.fullScreenEventName = fullscreen.prefix === 'ms' ? 'MSFullscreenChange' : fullscreen.prefix + 'fullscreenchange';

            fullscreen.isFullScreen = function (element) {
                if (_is.undefined(element)) {
                    element = document.body;
                }
                switch (this.prefix) {
                    case '':
                        return document.fullscreenElement === element;
                    case 'moz':
                        return document.mozFullScreenElement === element;
                    default:
                        return document[this.prefix + 'FullscreenElement'] === element;
                }
            };
            fullscreen.requestFullScreen = function (element) {
                if (_is.undefined(element)) {
                    element = document.body;
                }
                return this.prefix === '' ? element.requestFullScreen() : element[this.prefix + (this.prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();
            };
            fullscreen.cancelFullScreen = function () {
                return this.prefix === '' ? document.cancelFullScreen() : document[this.prefix + (this.prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();
            };
            fullscreen.element = function () {
                return this.prefix === '' ? document.fullscreenElement : document[this.prefix + 'FullscreenElement'];
            };
        }

        return fullscreen;
    }

    // Local storage
    var _storage = {
        supported: function () {
            if (!('localStorage' in window)) {
                return false;
            }

            // Try to use it (it might be disabled, e.g. user is in private/porn mode)
            // see: https://github.com/Selz/plyr/issues/131
            try {
                // Add test item
                window.localStorage.setItem('___test', 'OK');

                // Get the test item
                var result = window.localStorage.getItem('___test');

                // Clean up
                window.localStorage.removeItem('___test');

                // Check if value matches
                return result === 'OK';
            } catch (e) {
                return false;
            }

            return false;
        }()
    };

    // Player instance
    function Plyr(media, config) {
        var plyr = this,
            timers = {},
            api;

        // Set media
        plyr.media = media;
        var original = media.cloneNode(true);

        // Trigger events, with plyr instance passed
        function _triggerEvent(element, type, bubbles, properties) {
            _event(element, type, bubbles, _extend({}, properties, {
                plyr: api
            }));
        }

        // Debugging
        function _console(type, args) {
            if (config.debug && window.console) {
                args = Array.prototype.slice.call(args);

                if (_is.string(config.logPrefix) && config.logPrefix.length) {
                    args.unshift(config.logPrefix);
                }

                console[type].apply(console, args);
            }
        }
        var _log = function () {
            _console('log', arguments);
        },
            _warn = function () {
            _console('warn', arguments);
        };

        // Log config options
        _log('Config', config);

        // Get icon URL
        function _getIconUrl() {
            return {
                url: config.iconUrl,
                absolute: config.iconUrl.indexOf("http") === 0 || plyr.browser.isIE
            };
        }

        // Build the default HTML
        function _buildControls() {
            // Create html array
            var html = [],
                iconUrl = _getIconUrl(),
                iconPath = (!iconUrl.absolute ? iconUrl.url : '') + '#' + config.iconPrefix;

            // Larger overlaid play button
            if (_inArray(config.controls, 'play-large')) {
                html.push('<button type="button" data-plyr="play" class="plyr__play-large">', '<svg><use xlink:href="' + iconPath + '-play" /></svg>', '<span class="plyr__sr-only">' + config.i18n.play + '</span>', '</button>');
            }

            html.push('<div class="plyr__controls">');

            // Restart button
            if (_inArray(config.controls, 'restart')) {
                html.push('<button type="button" data-plyr="restart">', '<svg><use xlink:href="' + iconPath + '-restart" /></svg>', '<span class="plyr__sr-only">' + config.i18n.restart + '</span>', '</button>');
            }

            // Rewind button
            if (_inArray(config.controls, 'rewind')) {
                html.push('<button type="button" data-plyr="rewind">', '<svg><use xlink:href="' + iconPath + '-rewind" /></svg>', '<span class="plyr__sr-only">' + config.i18n.rewind + '</span>', '</button>');
            }

            // Play Pause button
            // TODO: This should be a toggle button really?
            if (_inArray(config.controls, 'play')) {
                html.push('<button type="button" data-plyr="play">', '<svg><use xlink:href="' + iconPath + '-play" /></svg>', '<span class="plyr__sr-only">' + config.i18n.play + '</span>', '</button>', '<button type="button" data-plyr="pause">', '<svg><use xlink:href="' + iconPath + '-pause" /></svg>', '<span class="plyr__sr-only">' + config.i18n.pause + '</span>', '</button>');
            }

            // Fast forward button
            if (_inArray(config.controls, 'fast-forward')) {
                html.push('<button type="button" data-plyr="fast-forward">', '<svg><use xlink:href="' + iconPath + '-fast-forward" /></svg>', '<span class="plyr__sr-only">' + config.i18n.forward + '</span>', '</button>');
            }

            // Progress
            if (_inArray(config.controls, 'progress')) {
                // Create progress
                html.push('<span class="plyr__progress">', '<label for="seek{id}" class="plyr__sr-only">Seek</label>', '<input id="seek{id}" class="plyr__progress--seek" type="range" min="0" max="100" step="0.1" value="0" data-plyr="seek">', '<progress class="plyr__progress--played" max="100" value="0" role="presentation"></progress>', '<progress class="plyr__progress--buffer" max="100" value="0">', '<span>0</span>% ' + config.i18n.buffered, '</progress>');

                // Seek tooltip
                if (config.tooltips.seek) {
                    html.push('<span class="plyr__tooltip">00:00</span>');
                }

                // Close
                html.push('</span>');
            }

            // Media current time display
            if (_inArray(config.controls, 'current-time')) {
                html.push('<span class="plyr__time">', '<span class="plyr__sr-only">' + config.i18n.currentTime + '</span>', '<span class="plyr__time--current">00:00</span>', '</span>');
            }

            // Media duration display
            if (_inArray(config.controls, 'duration')) {
                html.push('<span class="plyr__time">', '<span class="plyr__sr-only">' + config.i18n.duration + '</span>', '<span class="plyr__time--duration">00:00</span>', '</span>');
            }

            // Toggle mute button
            if (_inArray(config.controls, 'mute')) {
                html.push('<button type="button" data-plyr="mute">', '<svg class="icon--muted"><use xlink:href="' + iconPath + '-muted" /></svg>', '<svg><use xlink:href="' + iconPath + '-volume" /></svg>', '<span class="plyr__sr-only">' + config.i18n.toggleMute + '</span>', '</button>');
            }

            // Volume range control
            if (_inArray(config.controls, 'volume')) {
                html.push('<span class="plyr__volume">', '<label for="volume{id}" class="plyr__sr-only">' + config.i18n.volume + '</label>', '<input id="volume{id}" class="plyr__volume--input" type="range" min="' + config.volumeMin + '" max="' + config.volumeMax + '" value="' + config.volume + '" data-plyr="volume">', '<progress class="plyr__volume--display" max="' + config.volumeMax + '" value="' + config.volumeMin + '" role="presentation"></progress>', '</span>');
            }

            // Toggle captions button
            if (_inArray(config.controls, 'captions')) {
                html.push('<button type="button" data-plyr="captions">', '<svg class="icon--captions-on"><use xlink:href="' + iconPath + '-captions-on" /></svg>', '<svg><use xlink:href="' + iconPath + '-captions-off" /></svg>', '<span class="plyr__sr-only">' + config.i18n.toggleCaptions + '</span>', '</button>');
            }

            // Toggle fullscreen button
            if (_inArray(config.controls, 'fullscreen')) {
                html.push('<button type="button" data-plyr="fullscreen">', '<svg class="icon--exit-fullscreen"><use xlink:href="' + iconPath + '-exit-fullscreen" /></svg>', '<svg><use xlink:href="' + iconPath + '-enter-fullscreen" /></svg>', '<span class="plyr__sr-only">' + config.i18n.toggleFullscreen + '</span>', '</button>');
            }

            // Close everything
            html.push('</div>');

            return html.join('');
        }

        // Setup fullscreen
        function _setupFullscreen() {
            if (!plyr.supported.full) {
                return;
            }

            if ((plyr.type !== 'audio' || config.fullscreen.allowAudio) && config.fullscreen.enabled) {
                // Check for native support
                var nativeSupport = fullscreen.supportsFullScreen;

                if (nativeSupport || config.fullscreen.fallback && !_inFrame()) {
                    _log((nativeSupport ? 'Native' : 'Fallback') + ' fullscreen enabled');

                    // Add styling hook
                    _toggleClass(plyr.container, config.classes.fullscreen.enabled, true);
                } else {
                    _log('Fullscreen not supported and fallback disabled');
                }

                // Toggle state
                if (plyr.buttons && plyr.buttons.fullscreen) {
                    _toggleState(plyr.buttons.fullscreen, false);
                }

                // Setup focus trap
                _focusTrap();
            }
        }

        // Setup captions
        function _setupCaptions() {
            // Bail if not HTML5 video
            if (plyr.type !== 'video') {
                return;
            }

            // Inject the container
            if (!_getElement(config.selectors.captions)) {
                plyr.videoContainer.insertAdjacentHTML('afterbegin', '<div class="' + _getClassname(config.selectors.captions) + '"></div>');
            }

            // Determine if HTML5 textTracks is supported
            plyr.usingTextTracks = false;
            if (plyr.media.textTracks) {
                plyr.usingTextTracks = true;
            }

            // Get URL of caption file if exists
            var captionSrc = '',
                kind,
                children = plyr.media.childNodes;

            for (var i = 0; i < children.length; i++) {
                if (children[i].nodeName.toLowerCase() === 'track') {
                    kind = children[i].kind;
                    if (kind === 'captions' || kind === 'subtitles') {
                        captionSrc = children[i].getAttribute('src');
                    }
                }
            }

            // Record if caption file exists or not
            plyr.captionExists = true;
            if (captionSrc === '') {
                plyr.captionExists = false;
                _log('No caption track found');
            } else {
                _log('Caption track found; URI: ' + captionSrc);
            }

            // If no caption file exists, hide container for caption text
            if (!plyr.captionExists) {
                _toggleClass(plyr.container, config.classes.captions.enabled);
            } else {
                // Turn off native caption rendering to avoid double captions
                // This doesn't seem to work in Safari 7+, so the <track> elements are removed from the dom below
                var tracks = plyr.media.textTracks;
                for (var x = 0; x < tracks.length; x++) {
                    tracks[x].mode = 'hidden';
                }

                // Enable UI
                _showCaptions(plyr);

                // Disable unsupported browsers than report false positive
                // Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1033144
                if (plyr.browser.isIE && plyr.browser.version >= 10 || plyr.browser.isFirefox && plyr.browser.version >= 31) {

                    // Debugging
                    _log('Detected browser with known TextTrack issues - using manual fallback');

                    // Set to false so skips to 'manual' captioning
                    plyr.usingTextTracks = false;
                }

                // Rendering caption tracks
                // Native support required - http://caniuse.com/webvtt
                if (plyr.usingTextTracks) {
                    _log('TextTracks supported');

                    for (var y = 0; y < tracks.length; y++) {
                        var track = tracks[y];

                        if (track.kind === 'captions' || track.kind === 'subtitles') {
                            _on(track, 'cuechange', function () {
                                // Display a cue, if there is one
                                if (this.activeCues[0] && 'text' in this.activeCues[0]) {
                                    _setCaption(this.activeCues[0].getCueAsHTML());
                                } else {
                                    _setCaption();
                                }
                            });
                        }
                    }
                } else {
                    // Caption tracks not natively supported
                    _log('TextTracks not supported so rendering captions manually');

                    // Render captions from array at appropriate time
                    plyr.currentCaption = '';
                    plyr.captions = [];

                    if (captionSrc !== '') {
                        // Create XMLHttpRequest Object
                        var xhr = new XMLHttpRequest();

                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4) {
                                if (xhr.status === 200) {
                                    var captions = [],
                                        caption,
                                        req = xhr.responseText;

                                    //According to webvtt spec, line terminator consists of one of the following
                                    // CRLF (U+000D U+000A), LF (U+000A) or CR (U+000D)
                                    var lineSeparator = '\r\n';
                                    if (req.indexOf(lineSeparator + lineSeparator) === -1) {
                                        if (req.indexOf('\r\r') !== -1) {
                                            lineSeparator = '\r';
                                        } else {
                                            lineSeparator = '\n';
                                        }
                                    }

                                    captions = req.split(lineSeparator + lineSeparator);

                                    for (var r = 0; r < captions.length; r++) {
                                        caption = captions[r];
                                        plyr.captions[r] = [];

                                        // Get the parts of the captions
                                        var parts = caption.split(lineSeparator),
                                            index = 0;

                                        // Incase caption numbers are added
                                        if (parts[index].indexOf(":") === -1) {
                                            index = 1;
                                        }

                                        plyr.captions[r] = [parts[index], parts[index + 1]];
                                    }

                                    // Remove first element ('VTT')
                                    plyr.captions.shift();

                                    _log('Successfully loaded the caption file via AJAX');
                                } else {
                                    _warn(config.logPrefix + 'There was a problem loading the caption file via AJAX');
                                }
                            }
                        };

                        xhr.open('get', captionSrc, true);

                        xhr.send();
                    }
                }
            }
        }

        // Set the current caption
        function _setCaption(caption) {
            /* jshint unused:false */
            var container = _getElement(config.selectors.captions),
                content = document.createElement('span');

            // Empty the container
            container.innerHTML = '';

            // Default to empty
            if (_is.undefined(caption)) {
                caption = '';
            }

            // Set the span content
            if (_is.string(caption)) {
                content.innerHTML = caption.trim();
            } else {
                content.appendChild(caption);
            }

            // Set new caption text
            container.appendChild(content);

            // Force redraw (for Safari)
            var redraw = container.offsetHeight;
        }

        // Captions functions
        // Seek the manual caption time and update UI
        function _seekManualCaptions(time) {
            // Utilities for caption time codes
            function _timecodeCommon(tc, pos) {
                var tcpair = [];
                tcpair = tc.split(' --> ');
                for (var i = 0; i < tcpair.length; i++) {
                    // WebVTT allows for extra meta data after the timestamp line
                    // So get rid of this if it exists
                    tcpair[i] = tcpair[i].replace(/(\d+:\d+:\d+\.\d+).*/, "$1");
                }
                return _subTcSecs(tcpair[pos]);
            }
            function _timecodeMin(tc) {
                return _timecodeCommon(tc, 0);
            }
            function _timecodeMax(tc) {
                return _timecodeCommon(tc, 1);
            }
            function _subTcSecs(tc) {
                if (tc === null || tc === undefined) {
                    return 0;
                } else {
                    var tc1 = [],
                        tc2 = [],
                        seconds;
                    tc1 = tc.split(',');
                    tc2 = tc1[0].split(':');
                    seconds = Math.floor(tc2[0] * 60 * 60) + Math.floor(tc2[1] * 60) + Math.floor(tc2[2]);
                    return seconds;
                }
            }

            // If it's not video, or we're using textTracks, bail.
            if (plyr.usingTextTracks || plyr.type !== 'video' || !plyr.supported.full) {
                return;
            }

            // Reset subcount
            plyr.subcount = 0;

            // Check time is a number, if not use currentTime
            // IE has a bug where currentTime doesn't go to 0
            // https://twitter.com/Sam_Potts/status/573715746506731521
            time = _is.number(time) ? time : plyr.media.currentTime;

            // If there's no subs available, bail
            if (!plyr.captions[plyr.subcount]) {
                return;
            }

            while (_timecodeMax(plyr.captions[plyr.subcount][0]) < time.toFixed(1)) {
                plyr.subcount++;
                if (plyr.subcount > plyr.captions.length - 1) {
                    plyr.subcount = plyr.captions.length - 1;
                    break;
                }
            }

            // Check if the next caption is in the current time range
            if (plyr.media.currentTime.toFixed(1) >= _timecodeMin(plyr.captions[plyr.subcount][0]) && plyr.media.currentTime.toFixed(1) <= _timecodeMax(plyr.captions[plyr.subcount][0])) {
                plyr.currentCaption = plyr.captions[plyr.subcount][1];

                // Render the caption
                _setCaption(plyr.currentCaption);
            } else {
                _setCaption();
            }
        }

        // Display captions container and button (for initialization)
        function _showCaptions() {
            // If there's no caption toggle, bail
            if (!plyr.buttons.captions) {
                return;
            }

            _toggleClass(plyr.container, config.classes.captions.enabled, true);

            // Try to load the value from storage
            var active = plyr.storage.captionsEnabled;

            // Otherwise fall back to the default config
            if (!_is.boolean(active)) {
                active = config.captions.defaultActive;
            }

            if (active) {
                _toggleClass(plyr.container, config.classes.captions.active, true);
                _toggleState(plyr.buttons.captions, true);
            }
        }

        // Find all elements
        function _getElements(selector) {
            return plyr.container.querySelectorAll(selector);
        }

        // Find a single element
        function _getElement(selector) {
            return _getElements(selector)[0];
        }

        // Determine if we're in an iframe
        function _inFrame() {
            try {
                return window.self !== window.top;
            } catch (e) {
                return true;
            }
        }

        // Trap focus inside container
        function _focusTrap() {
            var tabbables = _getElements('input:not([disabled]), button:not([disabled])'),
                first = tabbables[0],
                last = tabbables[tabbables.length - 1];

            function _checkFocus(event) {
                // If it is TAB
                if (event.which === 9 && plyr.isFullscreen) {
                    if (event.target === last && !event.shiftKey) {
                        // Move focus to first element that can be tabbed if Shift isn't used
                        event.preventDefault();
                        first.focus();
                    } else if (event.target === first && event.shiftKey) {
                        // Move focus to last element that can be tabbed if Shift is used
                        event.preventDefault();
                        last.focus();
                    }
                }
            }

            // Bind the handler
            _on(plyr.container, 'keydown', _checkFocus);
        }

        // Add elements to HTML5 media (source, tracks, etc)
        function _insertChildElements(type, attributes) {
            if (_is.string(attributes)) {
                _insertElement(type, plyr.media, { src: attributes });
            } else if (attributes.constructor === Array) {
                for (var i = attributes.length - 1; i >= 0; i--) {
                    _insertElement(type, plyr.media, attributes[i]);
                }
            }
        }

        // Insert controls
        function _injectControls() {
            // Sprite
            if (config.loadSprite) {
                var iconUrl = _getIconUrl();

                // Only load external sprite using AJAX
                if (iconUrl.absolute) {
                    _log('AJAX loading absolute SVG sprite' + (plyr.browser.isIE ? ' (due to IE)' : ''));
                    loadSprite(iconUrl.url, "sprite-plyr");
                } else {
                    _log('Sprite will be used as external resource directly');
                }
            }

            // Make a copy of the html
            var html = config.html;

            // Insert custom video controls
            _log('Injecting custom controls');

            // If no controls are specified, create default
            if (!html) {
                html = _buildControls();
            }

            // Replace seek time instances
            html = _replaceAll(html, '{seektime}', config.seekTime);

            // Replace all id references with random numbers
            html = _replaceAll(html, '{id}', Math.floor(Math.random() * 10000));

            // Controls container
            var target;

            // Inject to custom location
            if (_is.string(config.selectors.controls.container)) {
                target = document.querySelector(config.selectors.controls.container);
            }

            // Inject into the container by default
            if (!_is.htmlElement(target)) {
                target = plyr.container;
            }

            // Inject controls HTML
            target.insertAdjacentHTML('beforeend', html);

            // Setup tooltips
            if (config.tooltips.controls) {
                var labels = _getElements([config.selectors.controls.wrapper, ' ', config.selectors.labels, ' .', config.classes.hidden].join(''));

                for (var i = labels.length - 1; i >= 0; i--) {
                    var label = labels[i];

                    _toggleClass(label, config.classes.hidden, false);
                    _toggleClass(label, config.classes.tooltip, true);
                }
            }
        }

        // Find the UI controls and store references
        function _findElements() {
            try {
                plyr.controls = _getElement(config.selectors.controls.wrapper);

                // Buttons
                plyr.buttons = {};
                plyr.buttons.seek = _getElement(config.selectors.buttons.seek);
                plyr.buttons.play = _getElements(config.selectors.buttons.play);
                plyr.buttons.pause = _getElement(config.selectors.buttons.pause);
                plyr.buttons.restart = _getElement(config.selectors.buttons.restart);
                plyr.buttons.rewind = _getElement(config.selectors.buttons.rewind);
                plyr.buttons.forward = _getElement(config.selectors.buttons.forward);
                plyr.buttons.fullscreen = _getElement(config.selectors.buttons.fullscreen);

                // Inputs
                plyr.buttons.mute = _getElement(config.selectors.buttons.mute);
                plyr.buttons.captions = _getElement(config.selectors.buttons.captions);

                // Progress
                plyr.progress = {};
                plyr.progress.container = _getElement(config.selectors.progress.container);

                // Progress - Buffering
                plyr.progress.buffer = {};
                plyr.progress.buffer.bar = _getElement(config.selectors.progress.buffer);
                plyr.progress.buffer.text = plyr.progress.buffer.bar && plyr.progress.buffer.bar.getElementsByTagName('span')[0];

                // Progress - Played
                plyr.progress.played = _getElement(config.selectors.progress.played);

                // Seek tooltip
                plyr.progress.tooltip = plyr.progress.container && plyr.progress.container.querySelector('.' + config.classes.tooltip);

                // Volume
                plyr.volume = {};
                plyr.volume.input = _getElement(config.selectors.volume.input);
                plyr.volume.display = _getElement(config.selectors.volume.display);

                // Timing
                plyr.duration = _getElement(config.selectors.duration);
                plyr.currentTime = _getElement(config.selectors.currentTime);
                plyr.seekTime = _getElements(config.selectors.seekTime);

                return true;
            } catch (e) {
                _warn('It looks like there is a problem with your controls HTML');

                // Restore native video controls
                _toggleNativeControls(true);

                return false;
            }
        }

        // Toggle style hook
        function _toggleStyleHook() {
            _toggleClass(plyr.container, config.selectors.container.replace('.', ''), plyr.supported.full);
        }

        // Toggle native controls
        function _toggleNativeControls(toggle) {
            if (toggle && _inArray(config.types.html5, plyr.type)) {
                plyr.media.setAttribute('controls', '');
            } else {
                plyr.media.removeAttribute('controls');
            }
        }

        // Setup aria attribute for play and iframe title
        function _setTitle(iframe) {
            // Find the current text
            var label = config.i18n.play;

            // If there's a media title set, use that for the label
            if (_is.string(config.title) && config.title.length) {
                label += ', ' + config.title;

                // Set container label
                plyr.container.setAttribute('aria-label', config.title);
            }

            // If there's a play button, set label
            if (plyr.supported.full && plyr.buttons.play) {
                for (var i = plyr.buttons.play.length - 1; i >= 0; i--) {
                    plyr.buttons.play[i].setAttribute('aria-label', label);
                }
            }

            // Set iframe title
            // https://github.com/Selz/plyr/issues/124
            if (_is.htmlElement(iframe)) {
                iframe.setAttribute('title', config.i18n.frameTitle.replace('{title}', config.title));
            }
        }

        // Setup localStorage
        function _setupStorage() {
            var value = null;
            plyr.storage = {};

            // Bail if we don't have localStorage support or it's disabled
            if (!_storage.supported || !config.storage.enabled) {
                return;
            }

            // Clean up old volume
            // https://github.com/Selz/plyr/issues/171
            window.localStorage.removeItem('plyr-volume');

            // load value from the current key
            value = window.localStorage.getItem(config.storage.key);

            if (!value) {
                // Key wasn't set (or had been cleared), move along
                return;
            } else if (/^\d+(\.\d+)?$/.test(value)) {
                // If value is a number, it's probably volume from an older
                // version of plyr. See: https://github.com/Selz/plyr/pull/313
                // Update the key to be JSON
                _updateStorage({ volume: parseFloat(value) });
            } else {
                // Assume it's JSON from this or a later version of plyr
                plyr.storage = JSON.parse(value);
            }
        }

        // Save a value back to local storage
        function _updateStorage(value) {
            // Bail if we don't have localStorage support or it's disabled
            if (!_storage.supported || !config.storage.enabled) {
                return;
            }

            // Update the working copy of the values
            _extend(plyr.storage, value);

            // Update storage
            window.localStorage.setItem(config.storage.key, JSON.stringify(plyr.storage));
        }

        // Setup media
        function _setupMedia() {
            // If there's no media, bail
            if (!plyr.media) {
                _warn('No media element found!');
                return;
            }

            if (plyr.supported.full) {
                // Add type class
                _toggleClass(plyr.container, config.classes.type.replace('{0}', plyr.type), true);

                // Add video class for embeds
                // This will require changes if audio embeds are added
                if (_inArray(config.types.embed, plyr.type)) {
                    _toggleClass(plyr.container, config.classes.type.replace('{0}', 'video'), true);
                }

                // If there's no autoplay attribute, assume the video is stopped and add state class
                _toggleClass(plyr.container, config.classes.stopped, config.autoplay);

                // Add iOS class
                _toggleClass(plyr.ontainer, config.classes.isIos, plyr.browser.isIos);

                // Add touch class
                _toggleClass(plyr.container, config.classes.isTouch, plyr.browser.isTouch);

                // Inject the player wrapper
                if (plyr.type === 'video') {
                    // Create the wrapper div
                    var wrapper = document.createElement('div');
                    wrapper.setAttribute('class', config.classes.videoWrapper);

                    // Wrap the video in a container
                    _wrap(plyr.media, wrapper);

                    // Cache the container
                    plyr.videoContainer = wrapper;
                }
            }

            // Embeds
            if (_inArray(config.types.embed, plyr.type)) {
                _setupEmbed();
            }
        }

        // Setup YouTube/Vimeo
        function _setupEmbed() {
            var container = document.createElement('div'),
                mediaId,
                id = plyr.type + '-' + Math.floor(Math.random() * 10000);

            // Parse IDs from URLs if supplied
            switch (plyr.type) {
                case 'youtube':
                    mediaId = _parseYouTubeId(plyr.embedId);
                    break;

                case 'vimeo':
                    mediaId = _parseVimeoId(plyr.embedId);
                    break;

                default:
                    mediaId = plyr.embedId;
            }

            // Remove old containers
            var containers = _getElements('[id^="' + plyr.type + '-"]');
            for (var i = containers.length - 1; i >= 0; i--) {
                _remove(containers[i]);
            }

            // Add embed class for responsive
            _toggleClass(plyr.media, config.classes.videoWrapper, true);
            _toggleClass(plyr.media, config.classes.embedWrapper, true);

            if (plyr.type === 'youtube') {
                // Create the YouTube container
                plyr.media.appendChild(container);

                // Set ID
                container.setAttribute('id', id);

                // Setup API
                if (_is.object(window.YT)) {
                    _youTubeReady(mediaId, container);
                } else {
                    // Load the API
                    _injectScript(config.urls.youtube.api);

                    // Setup callback for the API
                    window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];

                    // Add to queue
                    window.onYouTubeReadyCallbacks.push(function () {
                        _youTubeReady(mediaId, container);
                    });

                    // Set callback to process queue
                    window.onYouTubeIframeAPIReady = function () {
                        window.onYouTubeReadyCallbacks.forEach(function (callback) {
                            callback();
                        });
                    };
                }
            } else if (plyr.type === 'vimeo') {
                // Vimeo needs an extra div to hide controls on desktop (which has full support)
                if (plyr.supported.full) {
                    plyr.media.appendChild(container);
                } else {
                    container = plyr.media;
                }

                // Set ID
                container.setAttribute('id', id);

                // Load the API if not already
                if (!_is.object(window.Vimeo)) {
                    _injectScript(config.urls.vimeo.api);

                    // Wait for fragaloop load
                    var vimeoTimer = window.setInterval(function () {
                        if (_is.object(window.Vimeo)) {
                            window.clearInterval(vimeoTimer);
                            _vimeoReady(mediaId, container);
                        }
                    }, 50);
                } else {
                    _vimeoReady(mediaId, container);
                }
            } else if (plyr.type === 'soundcloud') {
                // TODO: Currently unsupported and undocumented
                // Inject the iframe
                var soundCloud = document.createElement('iframe');

                // Watch for iframe load
                soundCloud.loaded = false;
                _on(soundCloud, 'load', function () {
                    soundCloud.loaded = true;
                });

                _setAttributes(soundCloud, {
                    'src': 'https://w.soundcloud.com/player/?url=https://api.soundcloud.com/tracks/' + mediaId,
                    'id': id
                });

                container.appendChild(soundCloud);
                plyr.media.appendChild(container);

                // Load the API if not already
                if (!window.SC) {
                    _injectScript(config.urls.soundcloud.api);
                }

                // Wait for SC load
                var soundCloudTimer = window.setInterval(function () {
                    if (window.SC && soundCloud.loaded) {
                        window.clearInterval(soundCloudTimer);
                        _soundcloudReady.call(soundCloud);
                    }
                }, 50);
            }
        }

        // When embeds are ready
        function _embedReady() {
            // Setup the UI and call ready if full support
            if (plyr.supported.full) {
                _setupInterface();
                _ready();
            }

            // Set title
            _setTitle(_getElement('iframe'));
        }

        // Handle YouTube API ready
        function _youTubeReady(videoId, container) {
            // Setup instance
            // https://developers.google.com/youtube/iframe_api_reference
            plyr.embed = new window.YT.Player(container.id, {
                videoId: videoId,
                playerVars: {
                    autoplay: config.autoplay ? 1 : 0,
                    controls: plyr.supported.full ? 0 : 1,
                    rel: 0,
                    showinfo: 0,
                    iv_load_policy: 3,
                    cc_load_policy: config.captions.defaultActive ? 1 : 0,
                    cc_lang_pref: 'en',
                    wmode: 'transparent',
                    modestbranding: 1,
                    disablekb: 1,
                    origin: '*' // https://code.google.com/p/gdata-issues/issues/detail?id=5788#c45
                },
                events: {
                    'onError': function (event) {
                        _triggerEvent(plyr.container, 'error', true, {
                            code: event.data,
                            embed: event.target
                        });
                    },
                    'onReady': function (event) {
                        // Get the instance
                        var instance = event.target;

                        // Create a faux HTML5 API using the YouTube API
                        plyr.media.play = function () {
                            instance.playVideo();
                            plyr.media.paused = false;
                        };
                        plyr.media.pause = function () {
                            instance.pauseVideo();
                            plyr.media.paused = true;
                        };
                        plyr.media.stop = function () {
                            instance.stopVideo();
                            plyr.media.paused = true;
                        };
                        plyr.media.duration = instance.getDuration();
                        plyr.media.paused = true;
                        plyr.media.currentTime = 0;
                        plyr.media.muted = instance.isMuted();

                        // Set title
                        config.title = instance.getVideoData().title;

                        // Set the tabindex
                        if (plyr.supported.full) {
                            plyr.media.querySelector('iframe').setAttribute('tabindex', '-1');
                        }

                        // Update UI
                        _embedReady();

                        // Trigger timeupdate
                        _triggerEvent(plyr.media, 'timeupdate');

                        // Trigger timeupdate
                        _triggerEvent(plyr.media, 'durationchange');

                        // Reset timer
                        window.clearInterval(timers.buffering);

                        // Setup buffering
                        timers.buffering = window.setInterval(function () {
                            // Get loaded % from YouTube
                            plyr.media.buffered = instance.getVideoLoadedFraction();

                            // Trigger progress only when we actually buffer something
                            if (plyr.media.lastBuffered === null || plyr.media.lastBuffered < plyr.media.buffered) {
                                _triggerEvent(plyr.media, 'progress');
                            }

                            // Set last buffer point
                            plyr.media.lastBuffered = plyr.media.buffered;

                            // Bail if we're at 100%
                            if (plyr.media.buffered === 1) {
                                window.clearInterval(timers.buffering);

                                // Trigger event
                                _triggerEvent(plyr.media, 'canplaythrough');
                            }
                        }, 200);
                    },
                    'onStateChange': function (event) {
                        // Get the instance
                        var instance = event.target;

                        // Reset timer
                        window.clearInterval(timers.playing);

                        // Handle events
                        // -1   Unstarted
                        // 0    Ended
                        // 1    Playing
                        // 2    Paused
                        // 3    Buffering
                        // 5    Video cued
                        switch (event.data) {
                            case 0:
                                plyr.media.paused = true;
                                _triggerEvent(plyr.media, 'ended');
                                break;

                            case 1:
                                plyr.media.paused = false;

                                // If we were seeking, fire seeked event
                                if (plyr.media.seeking) {
                                    _triggerEvent(plyr.media, 'seeked');
                                }

                                plyr.media.seeking = false;
                                _triggerEvent(plyr.media, 'play');
                                _triggerEvent(plyr.media, 'playing');

                                // Poll to get playback progress
                                timers.playing = window.setInterval(function () {
                                    // Set the current time
                                    plyr.media.currentTime = instance.getCurrentTime();

                                    // Trigger timeupdate
                                    _triggerEvent(plyr.media, 'timeupdate');
                                }, 100);

                                // Check duration again due to YouTube bug
                                // https://github.com/Selz/plyr/issues/374
                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690
                                if (plyr.media.duration !== instance.getDuration()) {
                                    plyr.media.duration = instance.getDuration();
                                    _triggerEvent(plyr.media, 'durationchange');
                                }

                                break;

                            case 2:
                                plyr.media.paused = true;
                                _triggerEvent(plyr.media, 'pause');
                                break;
                        }

                        _triggerEvent(plyr.container, 'statechange', false, {
                            code: event.data
                        });
                    }
                }
            });
        }

        // Vimeo ready
        function _vimeoReady(mediaId, container) {
            // Setup instance
            // https://github.com/vimeo/player.js
            plyr.embed = new window.Vimeo.Player(container, {
                id: parseInt(mediaId),
                loop: config.loop,
                autoplay: config.autoplay,
                byline: false,
                portrait: false,
                title: false
            });

            // Create a faux HTML5 API using the Vimeo API
            plyr.media.play = function () {
                plyr.embed.play();
                plyr.media.paused = false;
            };
            plyr.media.pause = function () {
                plyr.embed.pause();
                plyr.media.paused = true;
            };
            plyr.media.stop = function () {
                plyr.embed.stop();
                plyr.media.paused = true;
            };

            plyr.media.paused = true;
            plyr.media.currentTime = 0;

            // Update UI
            _embedReady();

            plyr.embed.getCurrentTime().then(function (value) {
                plyr.media.currentTime = value;

                // Trigger timeupdate
                _triggerEvent(plyr.media, 'timeupdate');
            });

            plyr.embed.getDuration().then(function (value) {
                plyr.media.duration = value;

                // Trigger timeupdate
                _triggerEvent(plyr.media, 'durationchange');
            });

            // TODO: Captions
            /*if (config.captions.defaultActive) {
                plyr.embed.enableTextTrack('en');
            }*/

            plyr.embed.on('loaded', function () {
                // Fix keyboard focus issues
                // https://github.com/Selz/plyr/issues/317
                if (_is.htmlElement(plyr.embed.element) && plyr.supported.full) {
                    plyr.embed.element.setAttribute('tabindex', '-1');
                }
            });

            plyr.embed.on('play', function () {
                plyr.media.paused = false;
                _triggerEvent(plyr.media, 'play');
                _triggerEvent(plyr.media, 'playing');
            });

            plyr.embed.on('pause', function () {
                plyr.media.paused = true;
                _triggerEvent(plyr.media, 'pause');
            });

            plyr.embed.on('timeupdate', function (data) {
                plyr.media.seeking = false;
                plyr.media.currentTime = data.seconds;
                _triggerEvent(plyr.media, 'timeupdate');
            });

            plyr.embed.on('progress', function (data) {
                plyr.media.buffered = data.percent;
                _triggerEvent(plyr.media, 'progress');

                if (parseInt(data.percent) === 1) {
                    // Trigger event
                    _triggerEvent(plyr.media, 'canplaythrough');
                }
            });

            plyr.embed.on('seeked', function () {
                plyr.media.seeking = false;
                _triggerEvent(plyr.media, 'seeked');
                _triggerEvent(plyr.media, 'play');
            });

            plyr.embed.on('ended', function () {
                plyr.media.paused = true;
                _triggerEvent(plyr.media, 'ended');
            });
        }

        // Soundcloud ready
        function _soundcloudReady() {
            /* jshint validthis: true */
            plyr.embed = window.SC.Widget(this);

            // Setup on ready
            plyr.embed.bind(window.SC.Widget.Events.READY, function () {
                // Create a faux HTML5 API using the Soundcloud API
                plyr.media.play = function () {
                    plyr.embed.play();
                    plyr.media.paused = false;
                };
                plyr.media.pause = function () {
                    plyr.embed.pause();
                    plyr.media.paused = true;
                };
                plyr.media.stop = function () {
                    plyr.embed.seekTo(0);
                    plyr.embed.pause();
                    plyr.media.paused = true;
                };

                plyr.media.paused = true;
                plyr.media.currentTime = 0;

                plyr.embed.getDuration(function (value) {
                    plyr.media.duration = value / 1000;

                    // Update UI
                    _embedReady();
                });

                plyr.embed.getPosition(function (value) {
                    plyr.media.currentTime = value;

                    // Trigger timeupdate
                    _triggerEvent(plyr.media, 'timeupdate');
                });

                plyr.embed.bind(window.SC.Widget.Events.PLAY, function () {
                    plyr.media.paused = false;
                    _triggerEvent(plyr.media, 'play');
                    _triggerEvent(plyr.media, 'playing');
                });

                plyr.embed.bind(window.SC.Widget.Events.PAUSE, function () {
                    plyr.media.paused = true;
                    _triggerEvent(plyr.media, 'pause');
                });

                plyr.embed.bind(window.SC.Widget.Events.PLAY_PROGRESS, function (data) {
                    plyr.media.seeking = false;
                    plyr.media.currentTime = data.currentPosition / 1000;
                    _triggerEvent(plyr.media, 'timeupdate');
                });

                plyr.embed.bind(window.SC.Widget.Events.LOAD_PROGRESS, function (data) {
                    plyr.media.buffered = data.loadProgress;
                    _triggerEvent(plyr.media, 'progress');

                    if (parseInt(data.loadProgress) === 1) {
                        // Trigger event
                        _triggerEvent(plyr.media, 'canplaythrough');
                    }
                });

                plyr.embed.bind(window.SC.Widget.Events.FINISH, function () {
                    plyr.media.paused = true;
                    _triggerEvent(plyr.media, 'ended');
                });
            });
        }

        // Play media
        function _play() {
            if ('play' in plyr.media) {
                plyr.media.play();
            }
        }

        // Pause media
        function _pause() {
            if ('pause' in plyr.media) {
                plyr.media.pause();
            }
        }

        // Toggle playback
        function _togglePlay(toggle) {
            // True toggle
            if (!_is.boolean(toggle)) {
                toggle = plyr.media.paused;
            }

            if (toggle) {
                _play();
            } else {
                _pause();
            }

            return toggle;
        }

        // Rewind
        function _rewind(seekTime) {
            // Use default if needed
            if (!_is.number(seekTime)) {
                seekTime = config.seekTime;
            }
            _seek(plyr.media.currentTime - seekTime);
        }

        // Fast forward
        function _forward(seekTime) {
            // Use default if needed
            if (!_is.number(seekTime)) {
                seekTime = config.seekTime;
            }
            _seek(plyr.media.currentTime + seekTime);
        }

        // Seek to time
        // The input parameter can be an event or a number
        function _seek(input) {
            var targetTime = 0,
                paused = plyr.media.paused,
                duration = _getDuration();

            if (_is.number(input)) {
                targetTime = input;
            } else if (_is.object(input) && _inArray(['input', 'change'], input.type)) {
                // It's the seek slider
                // Seek to the selected time
                targetTime = input.target.value / input.target.max * duration;
            }

            // Normalise targetTime
            if (targetTime < 0) {
                targetTime = 0;
            } else if (targetTime > duration) {
                targetTime = duration;
            }

            // Update seek range and progress
            _updateSeekDisplay(targetTime);

            // Set the current time
            // Try/catch incase the media isn't set and we're calling seek() from source() and IE moans
            try {
                plyr.media.currentTime = targetTime.toFixed(4);
            } catch (e) {}

            // Embeds
            if (_inArray(config.types.embed, plyr.type)) {
                switch (plyr.type) {
                    case 'youtube':
                        plyr.embed.seekTo(targetTime);
                        break;

                    case 'vimeo':
                        // Round to nearest second for vimeo
                        plyr.embed.setCurrentTime(targetTime.toFixed(0));
                        break;

                    case 'soundcloud':
                        plyr.embed.seekTo(targetTime * 1000);
                        break;
                }

                if (paused) {
                    _pause();
                }

                // Trigger timeupdate
                _triggerEvent(plyr.media, 'timeupdate');

                // Set seeking flag
                plyr.media.seeking = true;

                // Trigger seeking
                _triggerEvent(plyr.media, 'seeking');
            }

            // Logging
            _log('Seeking to ' + plyr.media.currentTime + ' seconds');

            // Special handling for 'manual' captions
            _seekManualCaptions(targetTime);
        }

        // Get the duration (or custom if set)
        function _getDuration() {
            // It should be a number, but parse it just incase
            var duration = parseInt(config.duration),


            // True duration
            mediaDuration = 0;

            // Only if duration available
            if (plyr.media.duration !== null && !isNaN(plyr.media.duration)) {
                mediaDuration = plyr.media.duration;
            }

            // If custom duration is funky, use regular duration
            return isNaN(duration) ? mediaDuration : duration;
        }

        // Check playing state
        function _checkPlaying() {
            _toggleClass(plyr.container, config.classes.playing, !plyr.media.paused);

            _toggleClass(plyr.container, config.classes.stopped, plyr.media.paused);

            _toggleControls(plyr.media.paused);
        }

        // Save scroll position
        function _saveScrollPosition() {
            scroll = {
                x: window.pageXOffset || 0,
                y: window.pageYOffset || 0
            };
        }

        // Restore scroll position
        function _restoreScrollPosition() {
            window.scrollTo(scroll.x, scroll.y);
        }

        // Toggle fullscreen
        function _toggleFullscreen(event) {
            // Check for native support
            var nativeSupport = fullscreen.supportsFullScreen;

            if (nativeSupport) {
                // If it's a fullscreen change event, update the UI
                if (event && event.type === fullscreen.fullScreenEventName) {
                    plyr.isFullscreen = fullscreen.isFullScreen(plyr.container);
                } else {
                    // Else it's a user request to enter or exit
                    if (!fullscreen.isFullScreen(plyr.container)) {
                        // Save scroll position
                        _saveScrollPosition();

                        // Request full screen
                        fullscreen.requestFullScreen(plyr.container);
                    } else {
                        // Bail from fullscreen
                        fullscreen.cancelFullScreen();
                    }

                    // Check if we're actually full screen (it could fail)
                    plyr.isFullscreen = fullscreen.isFullScreen(plyr.container);

                    return;
                }
            } else {
                // Otherwise, it's a simple toggle
                plyr.isFullscreen = !plyr.isFullscreen;

                // Bind/unbind escape key
                document.body.style.overflow = plyr.isFullscreen ? 'hidden' : '';
            }

            // Set class hook
            _toggleClass(plyr.container, config.classes.fullscreen.active, plyr.isFullscreen);

            // Trap focus
            _focusTrap(plyr.isFullscreen);

            // Set button state
            if (plyr.buttons && plyr.buttons.fullscreen) {
                _toggleState(plyr.buttons.fullscreen, plyr.isFullscreen);
            }

            // Trigger an event
            _triggerEvent(plyr.container, plyr.isFullscreen ? 'enterfullscreen' : 'exitfullscreen', true);

            // Restore scroll position
            if (!plyr.isFullscreen && nativeSupport) {
                _restoreScrollPosition();
            }
        }

        // Mute
        function _toggleMute(muted) {
            // If the method is called without parameter, toggle based on current value
            if (!_is.boolean(muted)) {
                muted = !plyr.media.muted;
            }

            // Set button state
            _toggleState(plyr.buttons.mute, muted);

            // Set mute on the player
            plyr.media.muted = muted;

            // If volume is 0 after unmuting, set to default
            if (plyr.media.volume === 0) {
                _setVolume(config.volume);
            }

            // Embeds
            if (_inArray(config.types.embed, plyr.type)) {
                // YouTube
                switch (plyr.type) {
                    case 'youtube':
                        plyr.embed[plyr.media.muted ? 'mute' : 'unMute']();
                        break;

                    case 'vimeo':
                    case 'soundcloud':
                        plyr.embed.setVolume(plyr.media.muted ? 0 : parseFloat(config.volume / config.volumeMax));
                        break;
                }

                // Trigger volumechange for embeds
                _triggerEvent(plyr.media, 'volumechange');
            }
        }

        // Set volume
        function _setVolume(volume) {
            var max = config.volumeMax,
                min = config.volumeMin;

            // Load volume from storage if no value specified
            if (_is.undefined(volume)) {
                volume = plyr.storage.volume;
            }

            // Use config if all else fails
            if (volume === null || isNaN(volume)) {
                volume = config.volume;
            }

            // Maximum is volumeMax
            if (volume > max) {
                volume = max;
            }
            // Minimum is volumeMin
            if (volume < min) {
                volume = min;
            }

            // Set the player volume
            plyr.media.volume = parseFloat(volume / max);

            // Set the display
            if (plyr.volume.display) {
                plyr.volume.display.value = volume;
            }

            // Embeds
            if (_inArray(config.types.embed, plyr.type)) {
                switch (plyr.type) {
                    case 'youtube':
                        plyr.embed.setVolume(plyr.media.volume * 100);
                        break;

                    case 'vimeo':
                    case 'soundcloud':
                        plyr.embed.setVolume(plyr.media.volume);
                        break;
                }

                // Trigger volumechange for embeds
                _triggerEvent(plyr.media, 'volumechange');
            }

            // Toggle muted state
            if (volume === 0) {
                plyr.media.muted = true;
            } else if (plyr.media.muted && volume > 0) {
                _toggleMute();
            }
        }

        // Increase volume
        function _increaseVolume(step) {
            var volume = plyr.media.muted ? 0 : plyr.media.volume * config.volumeMax;

            if (!_is.number(step)) {
                step = config.volumeStep;
            }

            _setVolume(volume + step);
        }

        // Decrease volume
        function _decreaseVolume(step) {
            var volume = plyr.media.muted ? 0 : plyr.media.volume * config.volumeMax;

            if (!_is.number(step)) {
                step = config.volumeStep;
            }

            _setVolume(volume - step);
        }

        // Update volume UI and storage
        function _updateVolume() {
            // Get the current volume
            var volume = plyr.media.muted ? 0 : plyr.media.volume * config.volumeMax;

            // Update the <input type="range"> if present
            if (plyr.supported.full) {
                if (plyr.volume.input) {
                    plyr.volume.input.value = volume;
                }
                if (plyr.volume.display) {
                    plyr.volume.display.value = volume;
                }
            }

            // Update the volume in storage
            _updateStorage({ volume: volume });

            // Toggle class if muted
            _toggleClass(plyr.container, config.classes.muted, volume === 0);

            // Update checkbox for mute state
            if (plyr.supported.full && plyr.buttons.mute) {
                _toggleState(plyr.buttons.mute, volume === 0);
            }
        }

        // Toggle captions
        function _toggleCaptions(show) {
            // If there's no full support, or there's no caption toggle
            if (!plyr.supported.full || !plyr.buttons.captions) {
                return;
            }

            // If the method is called without parameter, toggle based on current value
            if (!_is.boolean(show)) {
                show = plyr.container.className.indexOf(config.classes.captions.active) === -1;
            }

            // Set global
            plyr.captionsEnabled = show;

            // Toggle state
            _toggleState(plyr.buttons.captions, plyr.captionsEnabled);

            // Add class hook
            _toggleClass(plyr.container, config.classes.captions.active, plyr.captionsEnabled);

            // Trigger an event
            _triggerEvent(plyr.container, plyr.captionsEnabled ? 'captionsenabled' : 'captionsdisabled', true);

            // Save captions state to localStorage
            _updateStorage({ captionsEnabled: plyr.captionsEnabled });
        }

        // Check if media is loading
        function _checkLoading(event) {
            var loading = event.type === 'waiting';

            // Clear timer
            clearTimeout(timers.loading);

            // Timer to prevent flicker when seeking
            timers.loading = setTimeout(function () {
                // Toggle container class hook
                _toggleClass(plyr.container, config.classes.loading, loading);

                // Show controls if loading, hide if done
                _toggleControls(loading);
            }, loading ? 250 : 0);
        }

        // Update <progress> elements
        function _updateProgress(event) {
            if (!plyr.supported.full) {
                return;
            }

            var progress = plyr.progress.played,
                value = 0,
                duration = _getDuration();

            if (event) {
                switch (event.type) {
                    // Video playing
                    case 'timeupdate':
                    case 'seeking':
                        if (plyr.controls.pressed) {
                            return;
                        }

                        value = _getPercentage(plyr.media.currentTime, duration);

                        // Set seek range value only if it's a 'natural' time event
                        if (event.type === 'timeupdate' && plyr.buttons.seek) {
                            plyr.buttons.seek.value = value;
                        }

                        break;

                    // Check buffer status
                    case 'playing':
                    case 'progress':
                        progress = plyr.progress.buffer;
                        value = function () {
                            var buffered = plyr.media.buffered;

                            if (buffered && buffered.length) {
                                // HTML5
                                return _getPercentage(buffered.end(0), duration);
                            } else if (_is.number(buffered)) {
                                // YouTube returns between 0 and 1
                                return buffered * 100;
                            }

                            return 0;
                        }();

                        break;
                }
            }

            // Set values
            _setProgress(progress, value);
        }

        // Set <progress> value
        function _setProgress(progress, value) {
            if (!plyr.supported.full) {
                return;
            }

            // Default to 0
            if (_is.undefined(value)) {
                value = 0;
            }
            // Default to buffer or bail
            if (_is.undefined(progress)) {
                if (plyr.progress && plyr.progress.buffer) {
                    progress = plyr.progress.buffer;
                } else {
                    return;
                }
            }

            // One progress element passed
            if (_is.htmlElement(progress)) {
                progress.value = value;
            } else if (progress) {
                // Object of progress + text element
                if (progress.bar) {
                    progress.bar.value = value;
                }
                if (progress.text) {
                    progress.text.innerHTML = value;
                }
            }
        }

        // Update the displayed time
        function _updateTimeDisplay(time, element) {
            // Bail if there's no duration display
            if (!element) {
                return;
            }

            // Fallback to 0
            if (isNaN(time)) {
                time = 0;
            }

            plyr.secs = parseInt(time % 60);
            plyr.mins = parseInt(time / 60 % 60);
            plyr.hours = parseInt(time / 60 / 60 % 60);

            // Do we need to display hours?
            var displayHours = parseInt(_getDuration() / 60 / 60 % 60) > 0;

            // Ensure it's two digits. For example, 03 rather than 3.
            plyr.secs = ('0' + plyr.secs).slice(-2);
            plyr.mins = ('0' + plyr.mins).slice(-2);

            // Render
            element.innerHTML = (displayHours ? plyr.hours + ':' : '') + plyr.mins + ':' + plyr.secs;
        }

        // Show the duration on metadataloaded
        function _displayDuration() {
            if (!plyr.supported.full) {
                return;
            }

            // Determine duration
            var duration = _getDuration() || 0;

            // If there's only one time display, display duration there
            if (!plyr.duration && config.displayDuration && plyr.media.paused) {
                _updateTimeDisplay(duration, plyr.currentTime);
            }

            // If there's a duration element, update content
            if (plyr.duration) {
                _updateTimeDisplay(duration, plyr.duration);
            }

            // Update the tooltip (if visible)
            _updateSeekTooltip();
        }

        // Handle time change event
        function _timeUpdate(event) {
            // Duration
            _updateTimeDisplay(plyr.media.currentTime, plyr.currentTime);

            // Ignore updates while seeking
            if (event && event.type === 'timeupdate' && plyr.media.seeking) {
                return;
            }

            // Playing progress
            _updateProgress(event);
        }

        // Update seek range and progress
        function _updateSeekDisplay(time) {
            // Default to 0
            if (!_is.number(time)) {
                time = 0;
            }

            var duration = _getDuration(),
                value = _getPercentage(time, duration);

            // Update progress
            if (plyr.progress && plyr.progress.played) {
                plyr.progress.played.value = value;
            }

            // Update seek range input
            if (plyr.buttons && plyr.buttons.seek) {
                plyr.buttons.seek.value = value;
            }
        }

        // Update hover tooltip for seeking
        function _updateSeekTooltip(event) {
            var duration = _getDuration();

            // Bail if setting not true
            if (!config.tooltips.seek || !plyr.progress.container || duration === 0) {
                return;
            }

            // Calculate percentage
            var clientRect = plyr.progress.container.getBoundingClientRect(),
                percent = 0,
                visible = config.classes.tooltip + '--visible';

            // Determine percentage, if already visible
            if (!event) {
                if (_hasClass(plyr.progress.tooltip, visible)) {
                    percent = plyr.progress.tooltip.style.left.replace('%', '');
                } else {
                    return;
                }
            } else {
                percent = 100 / clientRect.width * (event.pageX - clientRect.left);
            }

            // Set bounds
            if (percent < 0) {
                percent = 0;
            } else if (percent > 100) {
                percent = 100;
            }

            // Display the time a click would seek to
            _updateTimeDisplay(duration / 100 * percent, plyr.progress.tooltip);

            // Set position
            plyr.progress.tooltip.style.left = percent + "%";

            // Show/hide the tooltip
            // If the event is a moues in/out and percentage is inside bounds
            if (event && _inArray(['mouseenter', 'mouseleave'], event.type)) {
                _toggleClass(plyr.progress.tooltip, visible, event.type === 'mouseenter');
            }
        }

        // Show the player controls in fullscreen mode
        function _toggleControls(toggle) {
            // Don't hide if config says not to, it's audio, or not ready or loading
            if (!config.hideControls || plyr.type === 'audio') {
                return;
            }

            var delay = 0,
                isEnterFullscreen = false,
                show = toggle,
                loading = _hasClass(plyr.container, config.classes.loading);

            // Default to false if no boolean
            if (!_is.boolean(toggle)) {
                if (toggle && toggle.type) {
                    // Is the enter fullscreen event
                    isEnterFullscreen = toggle.type === 'enterfullscreen';

                    // Whether to show controls
                    show = _inArray(['mousemove', 'touchstart', 'mouseenter', 'focus'], toggle.type);

                    // Delay hiding on move events
                    if (_inArray(['mousemove', 'touchmove'], toggle.type)) {
                        delay = 2000;
                    }

                    // Delay a little more for keyboard users
                    if (toggle.type === 'focus') {
                        delay = 3000;
                    }
                } else {
                    show = _hasClass(plyr.container, config.classes.hideControls);
                }
            }

            // Clear timer every movement
            window.clearTimeout(timers.hover);

            // If the mouse is not over the controls, set a timeout to hide them
            if (show || plyr.media.paused || loading) {
                _toggleClass(plyr.container, config.classes.hideControls, false);

                // Always show controls when paused or if touch
                if (plyr.media.paused || loading) {
                    return;
                }

                // Delay for hiding on touch
                if (plyr.browser.isTouch) {
                    delay = 3000;
                }
            }

            // If toggle is false or if we're playing (regardless of toggle),
            // then set the timer to hide the controls
            if (!show || !plyr.media.paused) {
                timers.hover = window.setTimeout(function () {
                    // If the mouse is over the controls (and not entering fullscreen), bail
                    if ((plyr.controls.pressed || plyr.controls.hover) && !isEnterFullscreen) {
                        return;
                    }

                    _toggleClass(plyr.container, config.classes.hideControls, true);
                }, delay);
            }
        }

        // Add common function to retrieve media source
        function _source(source) {
            // If not null or undefined, parse it
            if (!_is.undefined(source)) {
                _updateSource(source);
                return;
            }

            // Return the current source
            var url;
            switch (plyr.type) {
                case 'youtube':
                    url = plyr.embed.getVideoUrl();
                    break;

                case 'vimeo':
                    plyr.embed.getVideoUrl.then(function (value) {
                        url = value;
                    });
                    break;

                case 'soundcloud':
                    plyr.embed.getCurrentSound(function (object) {
                        url = object.permalink_url;
                    });
                    break;

                default:
                    url = plyr.media.currentSrc;
                    break;
            }

            return url || '';
        }

        // Update source
        // Sources are not checked for support so be careful
        function _updateSource(source) {
            if (!_is.object(source) || !('sources' in source) || !source.sources.length) {
                _warn('Invalid source format');
                return;
            }

            // Remove ready class hook
            _toggleClass(plyr.container, config.classes.ready, false);

            // Pause playback
            _pause();

            // Update seek range and progress
            _updateSeekDisplay();

            // Reset buffer progress
            _setProgress();

            // Cancel current network requests
            _cancelRequests();

            // Setup new source
            function setup() {
                // Remove embed object
                plyr.embed = null;

                // Remove the old media
                _remove(plyr.media);

                // Remove video container
                if (plyr.type === 'video' && plyr.videoContainer) {
                    _remove(plyr.videoContainer);
                }

                // Reset class name
                if (plyr.container) {
                    plyr.container.removeAttribute('class');
                }

                // Set the type
                if ('type' in source) {
                    plyr.type = source.type;

                    // Get child type for video (it might be an embed)
                    if (plyr.type === 'video') {
                        var firstSource = source.sources[0];

                        if ('type' in firstSource && _inArray(config.types.embed, firstSource.type)) {
                            plyr.type = firstSource.type;
                        }
                    }
                }

                // Check for support
                plyr.supported = supported(plyr.type);

                // Create new markup
                switch (plyr.type) {
                    case 'video':
                        plyr.media = document.createElement('video');
                        break;

                    case 'audio':
                        plyr.media = document.createElement('audio');
                        break;

                    case 'youtube':
                    case 'vimeo':
                    case 'soundcloud':
                        plyr.media = document.createElement('div');
                        plyr.embedId = source.sources[0].src;
                        break;
                }

                // Inject the new element
                _prependChild(plyr.container, plyr.media);

                // Autoplay the new source?
                if (_is.boolean(source.autoplay)) {
                    config.autoplay = source.autoplay;
                }

                // Set attributes for audio and video
                if (_inArray(config.types.html5, plyr.type)) {
                    if (config.crossorigin) {
                        plyr.media.setAttribute('crossorigin', '');
                    }
                    if (config.autoplay) {
                        plyr.media.setAttribute('autoplay', '');
                    }
                    if ('poster' in source) {
                        plyr.media.setAttribute('poster', source.poster);
                    }
                    if (config.loop) {
                        plyr.media.setAttribute('loop', '');
                    }
                }

                // Restore class hooks
                _toggleClass(plyr.container, config.classes.fullscreen.active, plyr.isFullscreen);
                _toggleClass(plyr.container, config.classes.captions.active, plyr.captionsEnabled);
                _toggleStyleHook();

                // Set new sources for html5
                if (_inArray(config.types.html5, plyr.type)) {
                    _insertChildElements('source', source.sources);
                }

                // Set up from scratch
                _setupMedia();

                // HTML5 stuff
                if (_inArray(config.types.html5, plyr.type)) {
                    // Setup captions
                    if ('tracks' in source) {
                        _insertChildElements('track', source.tracks);
                    }

                    // Load HTML5 sources
                    plyr.media.load();
                }

                // If HTML5 or embed but not fully supported, setupInterface and call ready now
                if (_inArray(config.types.html5, plyr.type) || _inArray(config.types.embed, plyr.type) && !plyr.supported.full) {
                    // Setup interface
                    _setupInterface();

                    // Call ready
                    _ready();
                }

                // Set aria title and iframe title
                config.title = source.title;
                _setTitle();
            }

            // Destroy instance adn wait for callback
            // Vimeo throws a wobbly if you don't wait
            _destroy(setup, false);
        }

        // Update poster
        function _updatePoster(source) {
            if (plyr.type === 'video') {
                plyr.media.setAttribute('poster', source);
            }
        }

        // Listen for control events
        function _controlListeners() {
            // IE doesn't support input event, so we fallback to change
            var inputEvent = plyr.browser.isIE ? 'change' : 'input';

            // Click play/pause helper
            function togglePlay() {
                var play = _togglePlay();

                // Determine which buttons
                var trigger = plyr.buttons[play ? 'play' : 'pause'],
                    target = plyr.buttons[play ? 'pause' : 'play'];

                // Get the last play button to account for the large play button
                if (target && target.length > 1) {
                    target = target[target.length - 1];
                } else {
                    target = target[0];
                }

                // Setup focus and tab focus
                if (target) {
                    var hadTabFocus = _hasClass(trigger, config.classes.tabFocus);

                    setTimeout(function () {
                        target.focus();

                        if (hadTabFocus) {
                            _toggleClass(trigger, config.classes.tabFocus, false);
                            _toggleClass(target, config.classes.tabFocus, true);
                        }
                    }, 100);
                }
            }

            // Get the focused element
            function getFocusElement() {
                var focused = document.activeElement;

                if (!focused || focused === document.body) {
                    focused = null;
                } else {
                    focused = document.querySelector(':focus');
                }

                return focused;
            }

            // Get the key code for an event
            function getKeyCode(event) {
                return event.keyCode ? event.keyCode : event.which;
            }

            // Detect tab focus
            function checkTabFocus(focused) {
                for (var button in plyr.buttons) {
                    var element = plyr.buttons[button];

                    if (_is.nodeList(element)) {
                        for (var i = 0; i < element.length; i++) {
                            _toggleClass(element[i], config.classes.tabFocus, element[i] === focused);
                        }
                    } else {
                        _toggleClass(element, config.classes.tabFocus, element === focused);
                    }
                }
            }

            // Keyboard shortcuts
            if (config.keyboardShorcuts.focused) {
                var last = null;

                // Handle global presses
                if (config.keyboardShorcuts.global) {
                    _on(window, 'keydown keyup', function (event) {
                        var code = getKeyCode(event),
                            focused = getFocusElement(),
                            allowed = [48, 49, 50, 51, 52, 53, 54, 56, 57, 75, 77, 70, 67],
                            count = get().length;

                        // Only handle global key press if there's only one player
                        // and the key is in the allowed keys
                        // and if the focused element is not editable (e.g. text input)
                        // and any that accept key input http://webaim.org/techniques/keyboard/
                        if (count === 1 && _inArray(allowed, code) && (!_is.htmlElement(focused) || !_matches(focused, config.selectors.editable))) {
                            handleKey(event);
                        }
                    });
                }

                // Handle presses on focused
                _on(plyr.container, 'keydown keyup', handleKey);
            }

            function handleKey(event) {
                var code = getKeyCode(event),
                    pressed = event.type === 'keydown',
                    held = pressed && code === last;

                // If the event is bubbled from the media element
                // Firefox doesn't get the keycode for whatever reason
                if (!_is.number(code)) {
                    return;
                }

                // Seek by the number keys
                function seekByKey() {
                    // Get current duration
                    var duration = plyr.media.duration;

                    // Bail if we have no duration set
                    if (!_is.number(duration)) {
                        return;
                    }

                    // Divide the max duration into 10th's and times by the number value
                    _seek(duration / 10 * (code - 48));
                }

                // Handle the key on keydown
                // Reset on keyup
                if (pressed) {
                    // Which keycodes should we prevent default
                    var preventDefault = [48, 49, 50, 51, 52, 53, 54, 56, 57, 32, 75, 38, 40, 77, 39, 37, 70, 67];

                    // If the code is found prevent default (e.g. prevent scrolling for arrows)
                    if (_inArray(preventDefault, code)) {
                        event.preventDefault();
                        event.stopPropagation();
                    }

                    switch (code) {
                        // 0-9
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            if (!held) {
                                seekByKey();
                            }break;
                        // Space and K key
                        case 32:
                        case 75:
                            if (!held) {
                                _togglePlay();
                            }break;
                        // Arrow up
                        case 38:
                            _increaseVolume();break;
                        // Arrow down
                        case 40:
                            _decreaseVolume();break;
                        // M key
                        case 77:
                            if (!held) {
                                _toggleMute();
                            }break;
                        // Arrow forward
                        case 39:
                            _forward();break;
                        // Arrow back
                        case 37:
                            _rewind();break;
                        // F key
                        case 70:
                            _toggleFullscreen();break;
                        // C key
                        case 67:
                            if (!held) {
                                _toggleCaptions();
                            }break;
                    }

                    // Escape is handle natively when in full screen
                    // So we only need to worry about non native
                    if (!fullscreen.supportsFullScreen && plyr.isFullscreen && code === 27) {
                        _toggleFullscreen();
                    }

                    // Store last code for next cycle
                    last = code;
                } else {
                    last = null;
                }
            }

            // Focus/tab management
            _on(window, 'keyup', function (event) {
                var code = getKeyCode(event),
                    focused = getFocusElement();

                if (code === 9) {
                    checkTabFocus(focused);
                }
            });
            _on(document.body, 'click', function () {
                _toggleClass(_getElement('.' + config.classes.tabFocus), config.classes.tabFocus, false);
            });
            for (var button in plyr.buttons) {
                var element = plyr.buttons[button];

                _on(element, 'blur', function () {
                    _toggleClass(element, 'tab-focus', false);
                });
            }

            // Play
            _proxyListener(plyr.buttons.play, 'click', config.listeners.play, togglePlay);

            // Pause
            _proxyListener(plyr.buttons.pause, 'click', config.listeners.pause, togglePlay);

            // Restart
            _proxyListener(plyr.buttons.restart, 'click', config.listeners.restart, _seek);

            // Rewind
            _proxyListener(plyr.buttons.rewind, 'click', config.listeners.rewind, _rewind);

            // Fast forward
            _proxyListener(plyr.buttons.forward, 'click', config.listeners.forward, _forward);

            // Seek
            _proxyListener(plyr.buttons.seek, inputEvent, config.listeners.seek, _seek);

            // Set volume
            _proxyListener(plyr.volume.input, inputEvent, config.listeners.volume, function () {
                _setVolume(plyr.volume.input.value);
            });

            // Mute
            _proxyListener(plyr.buttons.mute, 'click', config.listeners.mute, _toggleMute);

            // Fullscreen
            _proxyListener(plyr.buttons.fullscreen, 'click', config.listeners.fullscreen, _toggleFullscreen);

            // Handle user exiting fullscreen by escaping etc
            if (fullscreen.supportsFullScreen) {
                _on(document, fullscreen.fullScreenEventName, _toggleFullscreen);
            }

            // Captions
            _on(plyr.buttons.captions, 'click', _toggleCaptions);

            // Seek tooltip
            _on(plyr.progress.container, 'mouseenter mouseleave mousemove', _updateSeekTooltip);

            // Toggle controls visibility based on mouse movement
            if (config.hideControls) {
                // Toggle controls on mouse events and entering fullscreen
                _on(plyr.container, 'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen', _toggleControls);

                // Watch for cursor over controls so they don't hide when trying to interact
                _on(plyr.controls, 'mouseenter mouseleave', function (event) {
                    plyr.controls.hover = event.type === 'mouseenter';
                });

                // Watch for cursor over controls so they don't hide when trying to interact
                _on(plyr.controls, 'mousedown mouseup touchstart touchend touchcancel', function (event) {
                    plyr.controls.pressed = _inArray(['mousedown', 'touchstart'], event.type);
                });

                // Focus in/out on controls
                _on(plyr.controls, 'focus blur', _toggleControls, true);
            }

            // Adjust volume on scroll
            _on(plyr.volume.input, 'wheel', function (event) {
                event.preventDefault();

                // Detect "natural" scroll - suppored on OS X Safari only
                // Other browsers on OS X will be inverted until support improves
                var inverted = event.webkitDirectionInvertedFromDevice,
                    step = config.volumeStep / 5;

                // Scroll down (or up on natural) to decrease
                if (event.deltaY < 0 || event.deltaX > 0) {
                    if (inverted) {
                        _decreaseVolume(step);
                    } else {
                        _increaseVolume(step);
                    }
                }

                // Scroll up (or down on natural) to increase
                if (event.deltaY > 0 || event.deltaX < 0) {
                    if (inverted) {
                        _increaseVolume(step);
                    } else {
                        _decreaseVolume(step);
                    }
                }
            });
        }

        // Listen for media events
        function _mediaListeners() {
            // Time change on media
            _on(plyr.media, 'timeupdate seeking', _timeUpdate);

            // Update manual captions
            _on(plyr.media, 'timeupdate', _seekManualCaptions);

            // Display duration
            _on(plyr.media, 'durationchange loadedmetadata', _displayDuration);

            // Handle the media finishing
            _on(plyr.media, 'ended', function () {
                // Show poster on end
                if (plyr.type === 'video' && config.showPosterOnEnd) {
                    // Clear
                    if (plyr.type === 'video') {
                        _setCaption();
                    }

                    // Restart
                    _seek();

                    // Re-load media
                    plyr.media.load();
                }
            });

            // Check for buffer progress
            _on(plyr.media, 'progress playing', _updateProgress);

            // Handle native mute
            _on(plyr.media, 'volumechange', _updateVolume);

            // Handle native play/pause
            _on(plyr.media, 'play pause ended', _checkPlaying);

            // Loading
            _on(plyr.media, 'waiting canplay seeked', _checkLoading);

            // Click video
            if (config.clickToPlay && plyr.type !== 'audio') {
                // Re-fetch the wrapper
                var wrapper = _getElement('.' + config.classes.videoWrapper);

                // Bail if there's no wrapper (this should never happen)
                if (!wrapper) {
                    return;
                }

                // Set cursor
                wrapper.style.cursor = "pointer";

                // On click play, pause ore restart
                _on(wrapper, 'click', function () {
                    // Touch devices will just show controls (if we're hiding controls)
                    if (config.hideControls && plyr.browser.isTouch && !plyr.media.paused) {
                        return;
                    }

                    if (plyr.media.paused) {
                        _play();
                    } else if (plyr.media.ended) {
                        _seek();
                        _play();
                    } else {
                        _pause();
                    }
                });
            }

            // Disable right click
            if (config.disableContextMenu) {
                _on(plyr.media, 'contextmenu', function (event) {
                    event.preventDefault();
                });
            }

            // Proxy events to container
            // Bubble up key events for Edge
            _on(plyr.media, config.events.concat(['keyup', 'keydown']).join(' '), function (event) {
                _triggerEvent(plyr.container, event.type, true);
            });
        }

        // Cancel current network requests
        // See https://github.com/Selz/plyr/issues/174
        function _cancelRequests() {
            if (!_inArray(config.types.html5, plyr.type)) {
                return;
            }

            // Remove child sources
            var sources = plyr.media.querySelectorAll('source');
            for (var i = 0; i < sources.length; i++) {
                _remove(sources[i]);
            }

            // Set blank video src attribute
            // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error
            // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection
            plyr.media.setAttribute('src', 'https://cdn.selz.com/plyr/blank.mp4');

            // Load the new empty source
            // This will cancel existing requests
            // See https://github.com/Selz/plyr/issues/174
            plyr.media.load();

            // Debugging
            _log('Cancelled network requests');
        }

        // Destroy an instance
        // Event listeners are removed when elements are removed
        // http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory
        function _destroy(callback, restore) {
            // Bail if the element is not initialized
            if (!plyr.init) {
                return null;
            }

            // Type specific stuff
            switch (plyr.type) {
                case 'youtube':
                    // Clear timers
                    window.clearInterval(timers.buffering);
                    window.clearInterval(timers.playing);

                    // Destroy YouTube API
                    plyr.embed.destroy();

                    // Clean up
                    cleanUp();

                    break;

                case 'vimeo':
                    // Destroy Vimeo API
                    // then clean up (wait, to prevent postmessage errors)
                    plyr.embed.unload().then(cleanUp);

                    // Vimeo does not always return
                    timers.cleanUp = window.setTimeout(cleanUp, 200);

                    break;

                case 'video':
                case 'audio':
                    // Restore native video controls
                    _toggleNativeControls(true);

                    // Clean up
                    cleanUp();

                    break;
            }

            function cleanUp() {
                clearTimeout(timers.cleanUp);

                // Default to restore original element
                if (!_is.boolean(restore)) {
                    restore = true;
                }

                // Callback
                if (_is.function(callback)) {
                    callback.call(original);
                }

                // Bail if we don't need to restore the original element
                if (!restore) {
                    return;
                }

                // Remove init flag
                plyr.init = false;

                // Replace the container with the original element provided
                plyr.container.parentNode.replaceChild(original, plyr.container);

                // Event
                _triggerEvent(original, 'destroyed', true);
            }
        }

        // Setup a player
        function _init() {
            // Bail if the element is initialized
            if (plyr.init) {
                return null;
            }

            // Setup the fullscreen api
            fullscreen = _fullscreen();

            // Sniff out the browser
            plyr.browser = _browserSniff();

            // Bail if nothing to setup
            if (!_is.htmlElement(plyr.media)) {
                return;
            }

            // Load saved settings from localStorage
            _setupStorage();

            // Set media type based on tag or data attribute
            // Supported: video, audio, vimeo, youtube
            var tagName = media.tagName.toLowerCase();
            if (tagName === 'div') {
                plyr.type = media.getAttribute('data-type');
                plyr.embedId = media.getAttribute('data-video-id');

                // Clean up
                media.removeAttribute('data-type');
                media.removeAttribute('data-video-id');
            } else {
                plyr.type = tagName;
                config.crossorigin = media.getAttribute('crossorigin') !== null;
                config.autoplay = config.autoplay || media.getAttribute('autoplay') !== null;
                config.loop = config.loop || media.getAttribute('loop') !== null;
            }

            // Check for support
            plyr.supported = supported(plyr.type);

            // If no native support, bail
            if (!plyr.supported.basic) {
                return;
            }

            // Wrap media
            plyr.container = _wrap(media, document.createElement('div'));

            // Allow focus to be captured
            plyr.container.setAttribute('tabindex', 0);

            // Add style hook
            _toggleStyleHook();

            // Debug info
            _log('' + plyr.browser.name + ' ' + plyr.browser.version);

            // Setup media
            _setupMedia();

            // Setup interface
            // If embed but not fully supported, setupInterface (to avoid flash of controls) and call ready now
            if (_inArray(config.types.html5, plyr.type) || _inArray(config.types.embed, plyr.type) && !plyr.supported.full) {
                // Setup UI
                _setupInterface();

                // Call ready
                _ready();

                // Set title on button and frame
                _setTitle();
            }

            // Successful setup
            plyr.init = true;
        }

        // Setup the UI
        function _setupInterface() {
            // Don't setup interface if no support
            if (!plyr.supported.full) {
                _warn('Basic support only', plyr.type);

                // Remove controls
                _remove(_getElement(config.selectors.controls.wrapper));

                // Remove large play
                _remove(_getElement(config.selectors.buttons.play));

                // Restore native controls
                _toggleNativeControls(true);

                // Bail
                return;
            }

            // Inject custom controls if not present
            var controlsMissing = !_getElements(config.selectors.controls.wrapper).length;
            if (controlsMissing) {
                // Inject custom controls
                _injectControls();
            }

            // Find the elements
            if (!_findElements()) {
                return;
            }

            // If the controls are injected, re-bind listeners for controls
            if (controlsMissing) {
                _controlListeners();
            }

            // Media element listeners
            _mediaListeners();

            // Remove native controls
            _toggleNativeControls();

            // Setup fullscreen
            _setupFullscreen();

            // Captions
            _setupCaptions();

            // Set volume
            _setVolume();
            _updateVolume();

            // Reset time display
            _timeUpdate();

            // Update the UI
            _checkPlaying();
        }

        api = {
            getOriginal: function () {
                return original;
            },
            getContainer: function () {
                return plyr.container;
            },
            getEmbed: function () {
                return plyr.embed;
            },
            getMedia: function () {
                return plyr.media;
            },
            getType: function () {
                return plyr.type;
            },
            getDuration: _getDuration,
            getCurrentTime: function () {
                return plyr.media.currentTime;
            },
            getVolume: function () {
                return plyr.media.volume;
            },
            isMuted: function () {
                return plyr.media.muted;
            },
            isReady: function () {
                return _hasClass(plyr.container, config.classes.ready);
            },
            isLoading: function () {
                return _hasClass(plyr.container, config.classes.loading);
            },
            isPaused: function () {
                return plyr.media.paused;
            },
            on: function (event, callback) {
                _on(plyr.container, event, callback);return this;
            },
            play: _play,
            pause: _pause,
            stop: function () {
                _pause();_seek();
            },
            restart: _seek,
            rewind: _rewind,
            forward: _forward,
            seek: _seek,
            source: _source,
            poster: _updatePoster,
            setVolume: _setVolume,
            togglePlay: _togglePlay,
            toggleMute: _toggleMute,
            toggleCaptions: _toggleCaptions,
            toggleFullscreen: _toggleFullscreen,
            toggleControls: _toggleControls,
            isFullscreen: function () {
                return plyr.isFullscreen || false;
            },
            support: function (mimeType) {
                return _supportMime(plyr, mimeType);
            },
            destroy: _destroy
        };

        // Everything done
        function _ready() {
            // Ready event at end of execution stack
            window.setTimeout(function () {
                _triggerEvent(plyr.media, 'ready');
            }, 0);

            // Set class hook on media element
            _toggleClass(plyr.media, defaults.classes.setup, true);

            // Set container class for ready
            _toggleClass(plyr.container, config.classes.ready, true);

            // Store a refernce to instance
            plyr.media.plyr = api;

            // Autoplay
            if (config.autoplay) {
                _play();
            }
        }

        // Initialize instance
        _init();

        // If init failed, return null
        if (!plyr.init) {
            return null;
        }

        return api;
    }

    // Load a sprite
    function loadSprite(url, id) {
        var x = new XMLHttpRequest();

        // If the id is set and sprite exists, bail
        if (_is.string(id) && _is.htmlElement(document.querySelector('#' + id))) {
            return;
        }

        // Create placeholder (to prevent loading twice)
        var container = document.createElement('div');
        container.setAttribute('hidden', '');
        if (_is.string(id)) {
            container.setAttribute('id', id);
        }
        document.body.insertBefore(container, document.body.childNodes[0]);

        // Check for CORS support
        if ('withCredentials' in x) {
            x.open('GET', url, true);
        } else {
            return;
        }

        // Inject hidden div with sprite on load
        x.onload = function () {
            container.innerHTML = x.responseText;
        };

        x.send();
    }

    // Check for support
    function supported(type) {
        var browser = _browserSniff(),
            isOldIE = browser.isIE && browser.version <= 9,
            isIos = browser.isIos,
            isIphone = /iPhone|iPod/i.test(navigator.userAgent),
            audio = !!document.createElement('audio').canPlayType,
            video = !!document.createElement('video').canPlayType,
            basic,
            full;

        switch (type) {
            case 'video':
                basic = video;
                full = basic && !isOldIE && !isIphone;
                break;

            case 'audio':
                basic = audio;
                full = basic && !isOldIE;
                break;

            case 'vimeo':
            case 'youtube':
            case 'soundcloud':
                basic = true;
                full = !isOldIE && !isIos;
                break;

            default:
                basic = audio && video;
                full = basic && !isOldIE;
        }

        return {
            basic: basic,
            full: full
        };
    }

    // Setup function
    function setup(targets, options) {
        // Get the players
        var players = [],
            instances = [],
            selector = [defaults.selectors.html5, defaults.selectors.embed].join(',');

        // Select the elements
        if (_is.string(targets)) {
            // String selector passed
            targets = document.querySelectorAll(targets);
        } else if (_is.htmlElement(targets)) {
            // Single HTMLElement passed
            targets = [targets];
        } else if (!_is.nodeList(targets) && !_is.array(targets) && !_is.string(targets)) {
            // No selector passed, possibly options as first argument
            // If options are the first argument
            if (_is.undefined(options) && _is.object(targets)) {
                options = targets;
            }

            // Use default selector
            targets = document.querySelectorAll(selector);
        }

        // Convert NodeList to array
        if (_is.nodeList(targets)) {
            targets = Array.prototype.slice.call(targets);
        }

        // Bail if disabled or no basic support
        // You may want to disable certain UAs etc
        if (!supported().basic || !targets.length) {
            return false;
        }

        // Add to container list
        function add(target, media) {
            if (!_hasClass(media, defaults.classes.hook)) {
                players.push({
                    // Always wrap in a <div> for styling
                    //container:  _wrap(media, document.createElement('div')),
                    // Could be a container or the media itself
                    target: target,
                    // This should be the <video>, <audio> or <div> (YouTube/Vimeo)
                    media: media
                });
            }
        }

        // Check if the targets have multiple media elements
        for (var i = 0; i < targets.length; i++) {
            var target = targets[i];

            // Get children
            var children = target.querySelectorAll(selector);

            // If there's more than one media element child, wrap them
            if (children.length) {
                for (var x = 0; x < children.length; x++) {
                    add(target, children[x]);
                }
            } else if (_matches(target, selector)) {
                // Target is media element
                add(target, target);
            }
        }

        // Create a player instance for each element
        players.forEach(function (player) {
            var element = player.target,
                media = player.media,
                match = false;

            // The target element can also be the media element
            if (media === element) {
                match = true;
            }

            // Setup a player instance and add to the element
            // Create instance-specific config
            var data = {};

            // Try parsing data attribute config
            try {
                data = JSON.parse(element.getAttribute('data-plyr'));
            } catch (e) {}

            var config = _extend({}, defaults, options, data);

            // Bail if not enabled
            if (!config.enabled) {
                return null;
            }

            // Create new instance
            var instance = new Plyr(media, config);

            // Go to next if setup failed
            if (!_is.object(instance)) {
                return;
            }

            // Listen for events if debugging
            if (config.debug) {
                var events = config.events.concat(['setup', 'statechange', 'enterfullscreen', 'exitfullscreen', 'captionsenabled', 'captionsdisabled']);

                _on(instance.getContainer(), events.join(' '), function (event) {
                    console.log([config.logPrefix, 'event:', event.type].join(' '), event.detail.plyr);
                });
            }

            // Callback
            _event(instance.getContainer(), 'setup', true, {
                plyr: instance
            });

            // Add to return array even if it's already setup
            instances.push(instance);
        });

        return instances;
    }

    // Get all instances within a provided container
    function get(container) {
        if (_is.string(container)) {
            // Get selector if string passed
            container = document.querySelector(container);
        } else if (_is.undefined(container)) {
            // Use body by default to get all on page
            container = document.body;
        }

        // If we have a HTML element
        if (_is.htmlElement(container)) {
            var elements = container.querySelectorAll('.' + defaults.classes.setup),
                instances = [];

            Array.prototype.slice.call(elements).forEach(function (element) {
                if (_is.object(element.plyr)) {
                    instances.push(element.plyr);
                }
            });

            return instances;
        }

        return [];
    }

    return {
        setup: setup,
        supported: supported,
        loadSprite: loadSprite,
        get: get
    };
});

// Custom event polyfill
// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
(function () {
    if (typeof window.CustomEvent === 'function') {
        return;
    }

    function CustomEvent(event, params) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
    }

    CustomEvent.prototype = window.Event.prototype;

    window.CustomEvent = CustomEvent;
})();
;/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.6.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
(function (factory) {
    'use strict';

    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }
})(function ($) {
    'use strict';

    var Slick = window.Slick || {};

    Slick = function () {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this,
                dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
                nextArrow: '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function (slider, i) {
                    return $('<button type="button" data-role="none" role="button" tabindex="0" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

            _.registerBreakpoints();
            _.init(true);
        }

        return Slick;
    }();

    Slick.prototype.activateADA = function () {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });
    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {

        var _ = this;

        if (typeof index === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || index >= _.slideCount) {
            return false;
        }

        _.unload();

        if (typeof index === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.animateHeight = function () {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function (targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }
        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -_.currentLeft;
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function (now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' + now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' + now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function () {
                        if (callback) {
                            callback.call();
                        }
                    }
                });
            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function () {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }
            }
        }
    };

    Slick.prototype.getNavTarget = function () {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if (asNavFor && asNavFor !== null) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;
    };

    Slick.prototype.asNavFor = function (index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if (asNavFor !== null && typeof asNavFor === 'object') {
            asNavFor.each(function () {
                var target = $(this).slick('getSlick');
                if (!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }
    };

    Slick.prototype.applyTransition = function (slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.autoPlay = function () {

        var _ = this;

        _.autoPlayClear();

        if (_.slideCount > _.options.slidesToShow) {
            _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
        }
    };

    Slick.prototype.autoPlayClear = function () {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }
    };

    Slick.prototype.autoPlayIterator = function () {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if (!_.paused && !_.interrupted && !_.focussed) {

            if (_.options.infinite === false) {

                if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {
                    _.direction = 0;
                } else if (_.direction === 0) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if (_.currentSlide - 1 === 0) {
                        _.direction = 1;
                    }
                }
            }

            _.slideHandler(slideTo);
        }
    };

    Slick.prototype.buildArrows = function () {

        var _ = this;

        if (_.options.arrows === true) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if (_.slideCount > _.options.slidesToShow) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                }
            } else {

                _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({
                    'aria-disabled': 'true',
                    'tabindex': '-1'
                });
            }
        }
    };

    Slick.prototype.buildDots = function () {

        var _ = this,
            i,
            dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');
        }
    };

    Slick.prototype.buildOut = function () {

        var _ = this;

        _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }
    };

    Slick.prototype.buildRows = function () {

        var _ = this,
            a,
            b,
            c,
            newSlides,
            numOfSlides,
            originalSlides,
            slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if (_.options.rows > 1) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);

            for (a = 0; a < numOfSlides; a++) {
                var slide = document.createElement('div');
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children().css({
                'width': 100 / _.options.slidesPerRow + '%',
                'display': 'inline-block'
            });
        }
    };

    Slick.prototype.checkResponsive = function (initial, forceUpdate) {

        var _ = this,
            breakpoint,
            targetBreakpoint,
            respondToWidth,
            triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if (!initial && triggerBreakpoint !== false) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }
    };

    Slick.prototype.changeSlide = function (event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset,
            slideOffset,
            unevenOffset;

        // If target is a link, prevent default action.
        if ($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if (!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }
    };

    Slick.prototype.checkNavigable = function (index) {

        var _ = this,
            navigables,
            prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function () {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);
    };

    Slick.prototype.cleanUpSlideEvents = function () {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
    };

    Slick.prototype.cleanUpRows = function () {

        var _ = this,
            originalSlides;

        if (_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }
    };

    Slick.prototype.clickHandler = function (event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }
    };

    Slick.prototype.destroy = function (refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.$prevArrow.length) {

            _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }
        }

        if (_.$nextArrow && _.$nextArrow.length) {

            _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }
        }

        if (_.$slides) {

            _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {
                $(this).attr('style', $(this).data('originalStyling'));
            });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if (!refresh) {
            _.$slider.trigger('destroy', [_]);
        }
    };

    Slick.prototype.disableTransition = function (slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.fadeSlide = function (slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function () {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }
        }
    };

    Slick.prototype.fadeSlideOut = function (slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });
        }
    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.focusHandler = function () {

        var _ = this;

        _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*:not(.slick-arrow)', function (event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function () {

                if (_.options.pauseOnFocus) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }
            }, 0);
        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {

        var _ = this;
        return _.currentSlide;
    };

    Slick.prototype.getDotCount = function () {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if (!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        } else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;
    };

    Slick.prototype.getLeft = function (slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
                verticalOffset = verticalHeight * _.options.slidesToShow * -1;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
                        verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;
                    } else {
                        _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
                        verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
                verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
        } else {
            targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft = 0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft = 0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;
    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {

        var _ = this;

        return _.options[option];
    };

    Slick.prototype.getNavigableIndexes = function () {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;
    };

    Slick.prototype.getSlick = function () {

        return this;
    };

    Slick.prototype.getSlideCount = function () {

        var _ = this,
            slidesTraversed,
            swipedSlide,
            centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function (index, slide) {
                if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;
        } else {
            return _.options.slidesToScroll;
        }
    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);
    };

    Slick.prototype.init = function (creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();
        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if (_.options.autoplay) {

            _.paused = false;
            _.autoPlay();
        }
    };

    Slick.prototype.initADA = function () {
        var _ = this;
        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        _.$slideTrack.attr('role', 'listbox');

        _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {
            $(this).attr({
                'role': 'option',
                'aria-describedby': 'slick-slide' + _.instanceUid + i + ''
            });
        });

        if (_.$dots !== null) {
            _.$dots.attr('role', 'tablist').find('li').each(function (i) {
                $(this).attr({
                    'role': 'presentation',
                    'aria-selected': 'false',
                    'aria-controls': 'navigation' + _.instanceUid + i + '',
                    'id': 'slick-slide' + _.instanceUid + i + ''
                });
            }).first().attr('aria-selected', 'true').end().find('button').attr('role', 'button').end().closest('div').attr('role', 'toolbar');
        }
        _.activateADA();
    };

    Slick.prototype.initArrowEvents = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.off('click.slick').on('click.slick', {
                message: 'previous'
            }, _.changeSlide);
            _.$nextArrow.off('click.slick').on('click.slick', {
                message: 'next'
            }, _.changeSlide);
        }
    };

    Slick.prototype.initDotEvents = function () {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);
        }

        if (_.options.dots === true && _.options.pauseOnDotsHover === true) {

            $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initSlideEvents = function () {

        var _ = this;

        if (_.options.pauseOnHover) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initializeEvents = function () {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);
    };

    Slick.prototype.initUI = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();
        }
    };

    Slick.prototype.keyHandler = function (event) {

        var _ = this;
        //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' : 'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }
    };

    Slick.prototype.lazyLoad = function () {

        var _ = this,
            loadRange,
            cloneRange,
            rangeStart,
            rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function () {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function () {

                    image.animate({ opacity: 0 }, 100, function () {
                        image.attr('src', imageSource).animate({ opacity: 1 }, 200, function () {
                            image.removeAttr('data-lazy').removeClass('slick-loading');
                        });
                        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                    });
                };

                imageToLoad.onerror = function () {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);
                };

                imageToLoad.src = imageSource;
            });
        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }
    };

    Slick.prototype.loadSlider = function () {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }
    };

    Slick.prototype.next = Slick.prototype.slickNext = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });
    };

    Slick.prototype.orientationChange = function () {

        var _ = this;

        _.checkResponsive();
        _.setPosition();
    };

    Slick.prototype.pause = Slick.prototype.slickPause = function () {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;
    };

    Slick.prototype.play = Slick.prototype.slickPlay = function () {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;
    };

    Slick.prototype.postSlide = function (index) {

        var _ = this;

        if (!_.unslicked) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            _.setPosition();

            _.swipeLeft = null;

            if (_.options.autoplay) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();
            }
        }
    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });
    };

    Slick.prototype.preventDefault = function (event) {

        event.preventDefault();
    };

    Slick.prototype.progressiveLazyLoad = function (tryCount) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $('img[data-lazy]', _.$slider),
            image,
            imageSource,
            imageToLoad;

        if ($imgsToLoad.length) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function () {

                image.attr('src', imageSource).removeAttr('data-lazy').removeClass('slick-loading');

                if (_.options.adaptiveHeight === true) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                _.progressiveLazyLoad();
            };

            imageToLoad.onerror = function () {

                if (tryCount < 3) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout(function () {
                        _.progressiveLazyLoad(tryCount + 1);
                    }, 500);
                } else {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                    _.progressiveLazyLoad();
                }
            };

            imageToLoad.src = imageSource;
        } else {

            _.$slider.trigger('allImagesLoaded', [_]);
        }
    };

    Slick.prototype.refresh = function (initializing) {

        var _ = this,
            currentSlide,
            lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if (!initializing) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);
        }
    };

    Slick.prototype.registerBreakpoints = function () {

        var _ = this,
            breakpoint,
            currentBreakpoint,
            l,
            responsiveSettings = _.options.responsive || null;

        if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {

            _.respondTo = _.options.respondTo || 'window';

            for (breakpoint in responsiveSettings) {

                l = _.breakpoints.length - 1;
                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while (l >= 0) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
                }
            }

            _.breakpoints.sort(function (a, b) {
                return _.options.mobileFirst ? a - b : b - a;
            });
        }
    };

    Slick.prototype.reinit = function () {

        var _ = this;

        _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);
    };

    Slick.prototype.resize = function () {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function () {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) {
                    _.setPosition();
                }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {

        var _ = this;

        if (typeof index === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.setCSS = function (position) {

        var _ = this,
            positionProps = {},
            x,
            y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }
    };

    Slick.prototype.setDimensions = function () {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: '0px ' + _.options.centerPadding
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: _.options.centerPadding + ' 0px'
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();

        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));
        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
    };

    Slick.prototype.setFade = function () {

        var _ = this,
            targetLeft;

        _.$slides.each(function (index, element) {
            targetLeft = _.slideWidth * index * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });
    };

    Slick.prototype.setHeight = function () {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }
    };

    Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {

        /**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */

        var _ = this,
            l,
            item,
            option,
            value,
            refresh = false,
            type;

        if ($.type(arguments[0]) === 'object') {

            option = arguments[0];
            refresh = arguments[1];
            type = 'multiple';
        } else if ($.type(arguments[0]) === 'string') {

            option = arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {

                type = 'responsive';
            } else if (typeof arguments[1] !== 'undefined') {

                type = 'single';
            }
        }

        if (type === 'single') {

            _.options[option] = value;
        } else if (type === 'multiple') {

            $.each(option, function (opt, val) {

                _.options[opt] = val;
            });
        } else if (type === 'responsive') {

            for (item in value) {

                if ($.type(_.options.responsive) !== 'array') {

                    _.options.responsive = [value[item]];
                } else {

                    l = _.options.responsive.length - 1;

                    // loop through the responsive object and splice out duplicates.
                    while (l >= 0) {

                        if (_.options.responsive[l].breakpoint === value[item].breakpoint) {

                            _.options.responsive.splice(l, 1);
                        }

                        l--;
                    }

                    _.options.responsive.push(value[item]);
                }
            }
        }

        if (refresh) {

            _.unload();
            _.reinit();
        }
    };

    Slick.prototype.setPosition = function () {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);
    };

    Slick.prototype.setProps = function () {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if (_.options.fade) {
            if (typeof _.options.zIndex === 'number') {
                if (_.options.zIndex < 3) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;
    };

    Slick.prototype.setSlideClasses = function (index) {

        var _ = this,
            centerOffset,
            allSlides,
            indexOffset,
            remainder;

        allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');

        _.$slides.eq(index).addClass('slick-current');

        if (_.options.centerMode === true) {

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {

                    _.$slides.slice(index - centerOffset, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides.slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');
                }

                if (index === 0) {

                    allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');
                } else if (index === _.slideCount - 1) {

                    allSlides.eq(_.options.slidesToShow).addClass('slick-center');
                }
            }

            _.$slides.eq(index).addClass('slick-center');
        } else {

            if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {

                _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides.addClass('slick-active').attr('aria-hidden', 'false');
            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {

                    allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
                }
            }
        }

        if (_.options.lazyLoad === 'ondemand') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function () {

        var _ = this,
            i,
            slideIndex,
            infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
                    $(this).attr('id', '');
                });
            }
        }
    };

    Slick.prototype.interrupt = function (toggle) {

        var _ = this;

        if (!toggle) {
            _.autoPlay();
        }
        _.interrupted = toggle;
    };

    Slick.prototype.selectHandler = function (event) {

        var _ = this;

        var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.setSlideClasses(index);
            _.asNavFor(index);
            return;
        }

        _.slideHandler(index);
    };

    Slick.prototype.slideHandler = function (index, sync, dontAnimate) {

        var targetSlide,
            animSlide,
            oldSlide,
            slideLeft,
            targetLeft = null,
            _ = this,
            navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if (_.options.autoplay) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if (_.options.asNavFor) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if (navTarget.slideCount <= navTarget.options.slidesToShow) {
                navTarget.setSlideClasses(_.currentSlide);
            }
        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function () {
                    _.postSlide(animSlide);
                });
            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function () {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }
    };

    Slick.prototype.startLoad = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();
        }

        _.$slider.addClass('slick-loading');
    };

    Slick.prototype.swipeDirection = function () {

        var xDist,
            yDist,
            r,
            swipeAngle,
            _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return _.options.rtl === false ? 'right' : 'left';
        }
        if (_.options.verticalSwiping === true) {
            if (swipeAngle >= 35 && swipeAngle <= 135) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';
    };

    Slick.prototype.swipeEnd = function (event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.interrupted = false;
        _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;

        if (_.touchObject.curX === undefined) {
            return false;
        }

        if (_.touchObject.edgeHit === true) {
            _.$slider.trigger('edge', [_, _.swipeDirection()]);
        }

        if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {

            direction = _.swipeDirection();

            switch (direction) {

                case 'left':
                case 'down':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:

            }

            if (direction != 'vertical') {

                _.slideHandler(slideCount);
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction]);
            }
        } else {

            if (_.touchObject.startX !== _.touchObject.curX) {

                _.slideHandler(_.currentSlide);
                _.touchObject = {};
            }
        }
    };

    Slick.prototype.swipeHandler = function (event) {

        var _ = this;

        if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }
    };

    Slick.prototype.swipeMove = function (event) {

        var _ = this,
            edgeWasHit = false,
            curLeft,
            swipeDirection,
            swipeLength,
            positionOffset,
            touches;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
        }

        swipeDirection = _.swipeDirection();

        if (swipeDirection === 'vertical') {
            return;
        }

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }

        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);
    };

    Slick.prototype.swipeStart = function (event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;
    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.unload = function () {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');
    };

    Slick.prototype.unslick = function (fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();
    };

    Slick.prototype.updateArrows = function () {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            }
        }
    };

    Slick.prototype.updateDots = function () {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots.find('li').removeClass('slick-active').attr('aria-hidden', 'true');

            _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active').attr('aria-hidden', 'false');
        }
    };

    Slick.prototype.visibility = function () {

        var _ = this;

        if (_.options.autoplay) {

            if (document[_.hidden]) {

                _.interrupted = true;
            } else {

                _.interrupted = false;
            }
        }
    };

    $.fn.slick = function () {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };
});
;
$(window).bind(' load resize orientationChange ', function () {
  var footer = $("#footer-container");
  var pos = footer.position();
  var height = $(window).height();
  height = height - pos.top;
  height = height - footer.height() - 1;

  function stickyFooter() {
    footer.css({
      'margin-top': height + 'px'
    });
  }

  if (height > 0) {
    stickyFooter();
  }
});
;(function () {
  'use strict';

  var displayNoneMessage = ['You have a Waypoint element with display none. For more information on ', 'why this is a bad idea read ', 'http://imakewebthings.com/waypoints/guides/debugging/#display-none'].join('');
  var fixedMessage = ['You have a Waypoint element with fixed positioning. For more ', 'information on why this is a bad idea read ', 'http://imakewebthings.com/waypoints/guides/debugging/#fixed-position'].join('');

  function checkWaypointStyles() {
    var originalRefresh = window.Waypoint.Context.prototype.refresh;

    window.Waypoint.Context.prototype.refresh = function () {
      for (var axis in this.waypoints) {
        for (var key in this.waypoints[axis]) {
          var waypoint = this.waypoints[axis][key];
          var style = window.getComputedStyle(waypoint.element);
          if (!waypoint.enabled) {
            continue;
          }
          if (style && style.display === 'none') {
            console.error(displayNoneMessage);
          }
          if (style && style.position === 'fixed') {
            console.error(fixedMessage);
          }
        }
      }
      return originalRefresh.call(this);
    };
  }

  checkWaypointStyles();
})();
;/* ===================================================
 * wiawUniversalAjax.js v1.0
 * ===================================================
 */
!function ($) {

	$(function () {

		// Click the button!
		$(".archive__load-more a").click(function () {

			// alert('say whaaa?');

			var url = $(this).attr('href'),
			    split_url = url.slice(0, -1).split('/'),
			    page_num = split_url[split_url.length - 1],
			    vars = {};

			if (isNaN(page_num)) {
				page_num = split_url[split_url.length - 2];
			}

			// Set up the correct vars
			if ($("#wiaw_taxonomy").length >= 1) {
				vars.taxonomy = $("#wiaw_taxonomy").val();
				vars.term_id = $("#wiaw_term_id").val();
			} else {
				vars.post_type = $("#wiaw_post_type").val();
			}

			console.log(split_url);
			console.log(vars);
			console.log(page_num);

			wiaw_get_more_posts(page_num, vars);

			return false;
		});

		// Get Posts AJAX Call
		function wiaw_get_more_posts(page_num, vars) {

			// Show the ajax loader
			$(".ajax-spinner").show();
			// hide the next button
			$(".archive__load-more").hide();

			// make sure page_num is being read as an INT
			var page_num = parseInt(page_num);

			// Do the AJAX call
			$.ajax({
				url: js_vars.ajaxurl,
				type: 'post',
				data: {
					action: 'archive_load_more',
					page: page_num,
					data: vars
				},
				error: function (exception) {
					alert('Exeption:' + exception);
				},
				success: function (html) {

					// console.log(html);

					// If there were any results
					if (html != '') {

						// Update the next page URL
						var btn = $(".archive__load-more a"),
						    btn_url = btn.attr('href');

						btn_url = btn_url.slice(0, -1).split('/'), btn_url[btn_url.length - 1] = page_num + 1, btn_url = btn_url.join('/') + '/';

						btn.attr('href', btn_url);

						// Insert the HTML
						$("#ajax-before-me").before(html);

						// show the next button
						$(".archive__load-more").show();

						QuickLookInit(); // added this so that the quicklook works after load more. See app.js function called QuickLookInit

						// No results
					} else {}

						// say no posts
						// $("#ajax-before-me").before( '<div class="alert alert-warning"><p>No further results.</p></div>');

						// Hide the ajax loader
					$(".ajax-spinner").hide();
				}
			});
		};
	});
}(window.jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24uY29yZS5qcyIsImZvdW5kYXRpb24udXRpbC5ib3guanMiLCJmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmQuanMiLCJmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeS5qcyIsImZvdW5kYXRpb24udXRpbC5tb3Rpb24uanMiLCJmb3VuZGF0aW9uLnV0aWwubmVzdC5qcyIsImZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyLmpzIiwiZm91bmRhdGlvbi51dGlsLnRvdWNoLmpzIiwiZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzLmpzIiwid2hhdC1pbnB1dC5qcyIsImZvdW5kYXRpb24uYWNjb3JkaW9uLmpzIiwiZm91bmRhdGlvbi5hY2NvcmRpb25NZW51LmpzIiwiZm91bmRhdGlvbi5kcm9wZG93bi5qcyIsImZvdW5kYXRpb24uZHJvcGRvd25NZW51LmpzIiwiZm91bmRhdGlvbi5lcXVhbGl6ZXIuanMiLCJmb3VuZGF0aW9uLmludGVyY2hhbmdlLmpzIiwiZm91bmRhdGlvbi5vZmZjYW52YXMuanMiLCJmb3VuZGF0aW9uLnJlc3BvbnNpdmVNZW51LmpzIiwiZm91bmRhdGlvbi5yZXNwb25zaXZlVG9nZ2xlLmpzIiwiZm91bmRhdGlvbi5zdGlja3kuanMiLCJmb3VuZGF0aW9uLnRvZ2dsZXIuanMiLCJtb3Rpb24tdWkuanMiLCJmb3VuZGF0aW9uLWRhdGVwaWNrZXIuanMiLCJldmVudHNGdW5jdGlvbnMuanMiLCJmbGV4LXZpZGVvLmpzIiwiaW5pdC1mb3VuZGF0aW9uLmpzIiwiam95cmlkZS1kZW1vLmpzIiwianF1ZXJ5Lmludmlldy5qcyIsImpxdWVyeS5tYWduaWZpYy1wb3B1cC5qcyIsImpxdWVyeS53YXlwb2ludHMuanMiLCJvZmZDYW52YXMuanMiLCJwaG90b3N3aXBlLXVpLWRlZmF1bHQuanMiLCJwaG90b3N3aXBlLmpzIiwicGx5ci5qcyIsInNsaWNrLmpzIiwic3RpY2t5Zm9vdGVyLmpzIiwid2F5cG9pbnRzLmRlYnVnLmpzIiwid2lhd1VuaXZlcnNhbEFqYXguanMiXSwibmFtZXMiOlsiJCIsIkZPVU5EQVRJT05fVkVSU0lPTiIsIkZvdW5kYXRpb24iLCJ2ZXJzaW9uIiwiX3BsdWdpbnMiLCJfdXVpZHMiLCJydGwiLCJhdHRyIiwicGx1Z2luIiwibmFtZSIsImNsYXNzTmFtZSIsImZ1bmN0aW9uTmFtZSIsImF0dHJOYW1lIiwiaHlwaGVuYXRlIiwicmVnaXN0ZXJQbHVnaW4iLCJwbHVnaW5OYW1lIiwiY29uc3RydWN0b3IiLCJ0b0xvd2VyQ2FzZSIsInV1aWQiLCJHZXRZb0RpZ2l0cyIsIiRlbGVtZW50IiwiZGF0YSIsInRyaWdnZXIiLCJwdXNoIiwidW5yZWdpc3RlclBsdWdpbiIsInNwbGljZSIsImluZGV4T2YiLCJyZW1vdmVBdHRyIiwicmVtb3ZlRGF0YSIsInByb3AiLCJyZUluaXQiLCJwbHVnaW5zIiwiaXNKUSIsImVhY2giLCJfaW5pdCIsInR5cGUiLCJfdGhpcyIsImZucyIsInBsZ3MiLCJmb3JFYWNoIiwicCIsImZvdW5kYXRpb24iLCJPYmplY3QiLCJrZXlzIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwibGVuZ3RoIiwibmFtZXNwYWNlIiwiTWF0aCIsInJvdW5kIiwicG93IiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsInJlZmxvdyIsImVsZW0iLCJpIiwiJGVsZW0iLCJmaW5kIiwiYWRkQmFjayIsIiRlbCIsIm9wdHMiLCJ3YXJuIiwidGhpbmciLCJzcGxpdCIsImUiLCJvcHQiLCJtYXAiLCJlbCIsInRyaW0iLCJwYXJzZVZhbHVlIiwiZXIiLCJnZXRGbk5hbWUiLCJ0cmFuc2l0aW9uZW5kIiwidHJhbnNpdGlvbnMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJlbmQiLCJ0Iiwic3R5bGUiLCJzZXRUaW1lb3V0IiwidHJpZ2dlckhhbmRsZXIiLCJ1dGlsIiwidGhyb3R0bGUiLCJmdW5jIiwiZGVsYXkiLCJ0aW1lciIsImNvbnRleHQiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJtZXRob2QiLCIkbWV0YSIsIiRub0pTIiwiYXBwZW5kVG8iLCJoZWFkIiwicmVtb3ZlQ2xhc3MiLCJNZWRpYVF1ZXJ5IiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjYWxsIiwicGx1Z0NsYXNzIiwidW5kZWZpbmVkIiwiUmVmZXJlbmNlRXJyb3IiLCJUeXBlRXJyb3IiLCJ3aW5kb3ciLCJmbiIsIkRhdGUiLCJub3ciLCJnZXRUaW1lIiwidmVuZG9ycyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInZwIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibGFzdFRpbWUiLCJjYWxsYmFjayIsIm5leHRUaW1lIiwibWF4IiwiY2xlYXJUaW1lb3V0IiwicGVyZm9ybWFuY2UiLCJzdGFydCIsIkZ1bmN0aW9uIiwiYmluZCIsIm9UaGlzIiwiYUFyZ3MiLCJmVG9CaW5kIiwiZk5PUCIsImZCb3VuZCIsImNvbmNhdCIsImZ1bmNOYW1lUmVnZXgiLCJyZXN1bHRzIiwiZXhlYyIsInN0ciIsImlzTmFOIiwicGFyc2VGbG9hdCIsInJlcGxhY2UiLCJqUXVlcnkiLCJCb3giLCJJbU5vdFRvdWNoaW5nWW91IiwiR2V0RGltZW5zaW9ucyIsIkdldE9mZnNldHMiLCJlbGVtZW50IiwicGFyZW50IiwibHJPbmx5IiwidGJPbmx5IiwiZWxlRGltcyIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInBhckRpbXMiLCJvZmZzZXQiLCJoZWlnaHQiLCJ3aWR0aCIsIndpbmRvd0RpbXMiLCJhbGxEaXJzIiwiRXJyb3IiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicGFyUmVjdCIsInBhcmVudE5vZGUiLCJ3aW5SZWN0IiwiYm9keSIsIndpblkiLCJwYWdlWU9mZnNldCIsIndpblgiLCJwYWdlWE9mZnNldCIsInBhcmVudERpbXMiLCJhbmNob3IiLCJwb3NpdGlvbiIsInZPZmZzZXQiLCJoT2Zmc2V0IiwiaXNPdmVyZmxvdyIsIiRlbGVEaW1zIiwiJGFuY2hvckRpbXMiLCJrZXlDb2RlcyIsImNvbW1hbmRzIiwiS2V5Ym9hcmQiLCJnZXRLZXlDb2RlcyIsInBhcnNlS2V5IiwiZXZlbnQiLCJrZXkiLCJ3aGljaCIsImtleUNvZGUiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ0b1VwcGVyQ2FzZSIsInNoaWZ0S2V5IiwiY3RybEtleSIsImFsdEtleSIsImhhbmRsZUtleSIsImNvbXBvbmVudCIsImZ1bmN0aW9ucyIsImNvbW1hbmRMaXN0IiwiY21kcyIsImNvbW1hbmQiLCJsdHIiLCJleHRlbmQiLCJyZXR1cm5WYWx1ZSIsImhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJmaW5kRm9jdXNhYmxlIiwiZmlsdGVyIiwiaXMiLCJyZWdpc3RlciIsImNvbXBvbmVudE5hbWUiLCJrY3MiLCJrIiwia2MiLCJkZWZhdWx0UXVlcmllcyIsImxhbmRzY2FwZSIsInBvcnRyYWl0IiwicmV0aW5hIiwicXVlcmllcyIsImN1cnJlbnQiLCJzZWxmIiwiZXh0cmFjdGVkU3R5bGVzIiwiY3NzIiwibmFtZWRRdWVyaWVzIiwicGFyc2VTdHlsZVRvT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJ2YWx1ZSIsIl9nZXRDdXJyZW50U2l6ZSIsIl93YXRjaGVyIiwiYXRMZWFzdCIsInNpemUiLCJxdWVyeSIsImdldCIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwibWF0Y2hlZCIsIm9uIiwibmV3U2l6ZSIsImN1cnJlbnRTaXplIiwic3R5bGVNZWRpYSIsIm1lZGlhIiwic2NyaXB0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpbmZvIiwiaWQiLCJpbnNlcnRCZWZvcmUiLCJnZXRDb21wdXRlZFN0eWxlIiwiY3VycmVudFN0eWxlIiwibWF0Y2hNZWRpdW0iLCJ0ZXh0Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJ0ZXh0Q29udGVudCIsInN0eWxlT2JqZWN0IiwicmVkdWNlIiwicmV0IiwicGFyYW0iLCJwYXJ0cyIsInZhbCIsImRlY29kZVVSSUNvbXBvbmVudCIsImlzQXJyYXkiLCJpbml0Q2xhc3NlcyIsImFjdGl2ZUNsYXNzZXMiLCJNb3Rpb24iLCJhbmltYXRlSW4iLCJhbmltYXRpb24iLCJjYiIsImFuaW1hdGUiLCJhbmltYXRlT3V0IiwiTW92ZSIsImR1cmF0aW9uIiwiYW5pbSIsInByb2ciLCJtb3ZlIiwidHMiLCJpc0luIiwiZXEiLCJpbml0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInJlc2V0IiwiYWRkQ2xhc3MiLCJzaG93Iiwib2Zmc2V0V2lkdGgiLCJvbmUiLCJmaW5pc2giLCJoaWRlIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiTmVzdCIsIkZlYXRoZXIiLCJtZW51IiwiaXRlbXMiLCJzdWJNZW51Q2xhc3MiLCJzdWJJdGVtQ2xhc3MiLCJoYXNTdWJDbGFzcyIsIiRpdGVtIiwiJHN1YiIsImNoaWxkcmVuIiwiQnVybiIsIlRpbWVyIiwib3B0aW9ucyIsIm5hbWVTcGFjZSIsInJlbWFpbiIsImlzUGF1c2VkIiwicmVzdGFydCIsImluZmluaXRlIiwicGF1c2UiLCJvbkltYWdlc0xvYWRlZCIsImltYWdlcyIsInVubG9hZGVkIiwiY29tcGxldGUiLCJzaW5nbGVJbWFnZUxvYWRlZCIsIm5hdHVyYWxXaWR0aCIsInNwb3RTd2lwZSIsImVuYWJsZWQiLCJkb2N1bWVudEVsZW1lbnQiLCJwcmV2ZW50RGVmYXVsdCIsIm1vdmVUaHJlc2hvbGQiLCJ0aW1lVGhyZXNob2xkIiwic3RhcnRQb3NYIiwic3RhcnRQb3NZIiwic3RhcnRUaW1lIiwiZWxhcHNlZFRpbWUiLCJpc01vdmluZyIsIm9uVG91Y2hFbmQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25Ub3VjaE1vdmUiLCJ4IiwidG91Y2hlcyIsInBhZ2VYIiwieSIsInBhZ2VZIiwiZHgiLCJkeSIsImRpciIsImFicyIsIm9uVG91Y2hTdGFydCIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbml0IiwidGVhcmRvd24iLCJzcGVjaWFsIiwic3dpcGUiLCJzZXR1cCIsIm5vb3AiLCJhZGRUb3VjaCIsImhhbmRsZVRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJmaXJzdCIsImV2ZW50VHlwZXMiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJzaW11bGF0ZWRFdmVudCIsIk1vdXNlRXZlbnQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsInRhcmdldCIsImRpc3BhdGNoRXZlbnQiLCJNdXRhdGlvbk9ic2VydmVyIiwicHJlZml4ZXMiLCJ0cmlnZ2VycyIsInN0b3BQcm9wYWdhdGlvbiIsImZhZGVPdXQiLCJjaGVja0xpc3RlbmVycyIsImV2ZW50c0xpc3RlbmVyIiwicmVzaXplTGlzdGVuZXIiLCJzY3JvbGxMaXN0ZW5lciIsImNsb3NlbWVMaXN0ZW5lciIsInlldGlCb3hlcyIsInBsdWdOYW1lcyIsImxpc3RlbmVycyIsImpvaW4iLCJvZmYiLCJwbHVnaW5JZCIsIm5vdCIsImRlYm91bmNlIiwiJG5vZGVzIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbiIsIm11dGF0aW9uUmVjb3Jkc0xpc3QiLCIkdGFyZ2V0IiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImF0dHJpYnV0ZUZpbHRlciIsIklIZWFyWW91Iiwid2hhdElucHV0IiwiYWN0aXZlS2V5cyIsImJ1ZmZlciIsImN1cnJlbnRJbnB1dCIsIm5vblR5cGluZ0lucHV0cyIsIm1vdXNlV2hlZWwiLCJkZXRlY3RXaGVlbCIsImlnbm9yZU1hcCIsImlucHV0TWFwIiwiaW5wdXRUeXBlcyIsImtleU1hcCIsInBvaW50ZXJNYXAiLCJldmVudEJ1ZmZlciIsImNsZWFyVGltZXIiLCJzZXRJbnB1dCIsImJ1ZmZlcmVkRXZlbnQiLCJ1bkJ1ZmZlcmVkRXZlbnQiLCJldmVudEtleSIsInBvaW50ZXJUeXBlIiwiZXZlbnRUYXJnZXQiLCJldmVudFRhcmdldE5vZGUiLCJub2RlTmFtZSIsImV2ZW50VGFyZ2V0VHlwZSIsImdldEF0dHJpYnV0ZSIsImhhc0F0dHJpYnV0ZSIsInN3aXRjaElucHV0IiwibG9nS2V5cyIsInN0cmluZyIsInNldEF0dHJpYnV0ZSIsInNyY0VsZW1lbnQiLCJ1bkxvZ0tleXMiLCJhcnJheVBvcyIsImJpbmRFdmVudHMiLCJQb2ludGVyRXZlbnQiLCJNU1BvaW50ZXJFdmVudCIsIm9ubW91c2V3aGVlbCIsImFzayIsInR5cGVzIiwic2V0IiwiQWNjb3JkaW9uIiwiZGVmYXVsdHMiLCIkdGFicyIsImlkeCIsIiRjb250ZW50IiwibGlua0lkIiwiJGluaXRBY3RpdmUiLCJkb3duIiwiX2V2ZW50cyIsIiR0YWJDb250ZW50IiwidG9nZ2xlIiwibmV4dCIsIiRhIiwiZm9jdXMiLCJtdWx0aUV4cGFuZCIsInByZXZpb3VzIiwicHJldiIsImhhc0NsYXNzIiwidXAiLCJmaXJzdFRpbWUiLCIkY3VycmVudEFjdGl2ZSIsInNsaWRlRG93biIsInNsaWRlU3BlZWQiLCIkYXVudHMiLCJzaWJsaW5ncyIsImFsbG93QWxsQ2xvc2VkIiwic2xpZGVVcCIsImRlc3Ryb3kiLCJzdG9wIiwiQWNjb3JkaW9uTWVudSIsIm11bHRpT3BlbiIsIiRtZW51TGlua3MiLCJzdWJJZCIsImlzQWN0aXZlIiwiaW5pdFBhbmVzIiwiJHN1Ym1lbnUiLCIkZWxlbWVudHMiLCIkcHJldkVsZW1lbnQiLCIkbmV4dEVsZW1lbnQiLCJtaW4iLCJwYXJlbnRzIiwib3BlbiIsImNsb3NlIiwiY2xvc2VBbGwiLCJoaWRlQWxsIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicGFyZW50c1VudGlsIiwiYWRkIiwiJG1lbnVzIiwiRHJvcGRvd24iLCIkaWQiLCIkYW5jaG9yIiwicG9zaXRpb25DbGFzcyIsImdldFBvc2l0aW9uQ2xhc3MiLCJjb3VudGVyIiwidXNlZFBvc2l0aW9ucyIsInZlcnRpY2FsUG9zaXRpb24iLCJtYXRjaCIsImhvcml6b250YWxQb3NpdGlvbiIsIl9yZXBvc2l0aW9uIiwiY2xhc3NDaGFuZ2VkIiwiX3NldFBvc2l0aW9uIiwiZGlyZWN0aW9uIiwiaG92ZXIiLCJ0aW1lb3V0IiwiaG92ZXJEZWxheSIsImhvdmVyUGFuZSIsInZpc2libGVGb2N1c2FibGVFbGVtZW50cyIsInRhYl9mb3J3YXJkIiwidHJhcEZvY3VzIiwidGFiX2JhY2t3YXJkIiwiX2FkZEJvZHlIYW5kbGVyIiwiJGJvZHkiLCJhdXRvRm9jdXMiLCIkZm9jdXNhYmxlIiwiY2xvc2VPbkNsaWNrIiwiY3VyUG9zaXRpb25DbGFzcyIsIkRyb3Bkb3duTWVudSIsInN1YnMiLCIkbWVudUl0ZW1zIiwidmVydGljYWxDbGFzcyIsInJpZ2h0Q2xhc3MiLCJhbGlnbm1lbnQiLCJjaGFuZ2VkIiwiX2lzVmVydGljYWwiLCJoYXNUb3VjaCIsIm9udG91Y2hzdGFydCIsInBhckNsYXNzIiwiaGFuZGxlQ2xpY2tGbiIsImhhc1N1YiIsImhhc0NsaWNrZWQiLCJjbGlja09wZW4iLCJmb3JjZUZvbGxvdyIsIl9oaWRlIiwiX3Nob3ciLCJjbG9zZU9uQ2xpY2tJbnNpZGUiLCJkaXNhYmxlSG92ZXIiLCJhdXRvY2xvc2UiLCJjbG9zaW5nVGltZSIsImlzVGFiIiwiaW5kZXgiLCJuZXh0U2libGluZyIsInByZXZTaWJsaW5nIiwib3BlblN1YiIsImNsb3NlU3ViIiwiJGxpbmsiLCIkc2licyIsImNsZWFyIiwib2xkQ2xhc3MiLCIkcGFyZW50TGkiLCIkdG9DbG9zZSIsInNvbWV0aGluZ1RvQ2xvc2UiLCJFcXVhbGl6ZXIiLCJlcUlkIiwiJHdhdGNoZWQiLCJoYXNOZXN0ZWQiLCJpc05lc3RlZCIsImlzT24iLCJfYmluZEhhbmRsZXIiLCJvblJlc2l6ZU1lQm91bmQiLCJfb25SZXNpemVNZSIsIm9uUG9zdEVxdWFsaXplZEJvdW5kIiwiX29uUG9zdEVxdWFsaXplZCIsImltZ3MiLCJ0b29TbWFsbCIsImVxdWFsaXplT24iLCJfY2hlY2tNUSIsIl9yZWZsb3ciLCJfcGF1c2VFdmVudHMiLCJfa2lsbHN3aXRjaCIsImVxdWFsaXplT25TdGFjayIsIl9pc1N0YWNrZWQiLCJlcXVhbGl6ZUJ5Um93IiwiZ2V0SGVpZ2h0c0J5Um93IiwiYXBwbHlIZWlnaHRCeVJvdyIsImdldEhlaWdodHMiLCJhcHBseUhlaWdodCIsImhlaWdodHMiLCJsZW4iLCJvZmZzZXRIZWlnaHQiLCJsYXN0RWxUb3BPZmZzZXQiLCJncm91cHMiLCJncm91cCIsImVsT2Zmc2V0VG9wIiwiaiIsImxuIiwiZ3JvdXBzSUxlbmd0aCIsImxlbkoiLCJJbnRlcmNoYW5nZSIsInJ1bGVzIiwiY3VycmVudFBhdGgiLCJfYWRkQnJlYWtwb2ludHMiLCJfZ2VuZXJhdGVSdWxlcyIsInJ1bGUiLCJwYXRoIiwiU1BFQ0lBTF9RVUVSSUVTIiwicnVsZXNMaXN0IiwicmVzcG9uc2UiLCJodG1sIiwiT2ZmQ2FudmFzIiwiJGxhc3RUcmlnZ2VyIiwiJHRyaWdnZXJzIiwiJGV4aXRlciIsImV4aXRlciIsImFwcGVuZCIsImlzUmV2ZWFsZWQiLCJSZWdFeHAiLCJyZXZlYWxDbGFzcyIsInJldmVhbE9uIiwiX3NldE1RQ2hlY2tlciIsInRyYW5zaXRpb25UaW1lIiwiX2hhbmRsZUtleWJvYXJkIiwicmV2ZWFsIiwiJGNsb3NlciIsImZvcmNlVG9wIiwic2Nyb2xsVG9wIiwiJHdyYXBwZXIiLCJfdHJhcEZvY3VzIiwiZm9jdXNhYmxlIiwibGFzdCIsIlJlc3BvbnNpdmVNZW51IiwiY3VycmVudE1xIiwiY3VycmVudFBsdWdpbiIsInJ1bGVzVHJlZSIsInJ1bGVTaXplIiwicnVsZVBsdWdpbiIsIk1lbnVQbHVnaW5zIiwiaXNFbXB0eU9iamVjdCIsIl9jaGVja01lZGlhUXVlcmllcyIsIm1hdGNoZWRNcSIsImNzc0NsYXNzIiwiZHJvcGRvd24iLCJkcmlsbGRvd24iLCJhY2NvcmRpb24iLCJSZXNwb25zaXZlVG9nZ2xlIiwidGFyZ2V0SUQiLCIkdGFyZ2V0TWVudSIsIiR0b2dnbGVyIiwiX3VwZGF0ZSIsIl91cGRhdGVNcUhhbmRsZXIiLCJ0b2dnbGVNZW51IiwiaGlkZUZvciIsIlN0aWNreSIsIiRwYXJlbnQiLCJ3YXNXcmFwcGVkIiwiJGNvbnRhaW5lciIsImNvbnRhaW5lciIsIndyYXBJbm5lciIsImNvbnRhaW5lckNsYXNzIiwic3RpY2t5Q2xhc3MiLCJzY3JvbGxDb3VudCIsImNoZWNrRXZlcnkiLCJpc1N0dWNrIiwiY29udGFpbmVySGVpZ2h0IiwiZWxlbUhlaWdodCIsIl9wYXJzZVBvaW50cyIsIl9zZXRTaXplcyIsIl9jYWxjIiwicmV2ZXJzZSIsInRvcEFuY2hvciIsImJ0bSIsImJ0bUFuY2hvciIsInNjcm9sbEhlaWdodCIsInB0cyIsImJyZWFrcyIsInB0IiwicGxhY2UiLCJwb2ludHMiLCJjYW5TdGljayIsIl9wYXVzZUxpc3RlbmVycyIsImNoZWNrU2l6ZXMiLCJzY3JvbGwiLCJfcmVtb3ZlU3RpY2t5IiwidG9wUG9pbnQiLCJib3R0b21Qb2ludCIsIl9zZXRTdGlja3kiLCJzdGlja1RvIiwibXJnbiIsIm5vdFN0dWNrVG8iLCJwYXJzZUludCIsImlzVG9wIiwic3RpY2tUb1RvcCIsImFuY2hvclB0IiwiYW5jaG9ySGVpZ2h0IiwidG9wT3JCb3R0b20iLCJzdGlja3lPbiIsIm5ld0VsZW1XaWR0aCIsImNvbXAiLCJwZG5nIiwibmV3Q29udGFpbmVySGVpZ2h0IiwiX3NldEJyZWFrUG9pbnRzIiwibVRvcCIsImVtQ2FsYyIsIm1hcmdpblRvcCIsIm1CdG0iLCJtYXJnaW5Cb3R0b20iLCJ3aW5IZWlnaHQiLCJpbm5lckhlaWdodCIsInVud3JhcCIsImVtIiwiZm9udFNpemUiLCJUb2dnbGVyIiwiaW5wdXQiLCJhbmltYXRpb25JbiIsImFuaW1hdGlvbk91dCIsIl90b2dnbGVDbGFzcyIsInRvZ2dsZUNsYXNzIiwiX3VwZGF0ZUFSSUEiLCJfdG9nZ2xlQW5pbWF0ZSIsImVuZEV2ZW50IiwiTW90aW9uVUkiLCJVVENEYXRlIiwiVVRDIiwiVVRDVG9kYXkiLCJ0b2RheSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiRGF0ZXBpY2tlciIsInRoYXQiLCJhdXRvU2hvdyIsImNsb3NlQnV0dG9uIiwibGFuZ3VhZ2UiLCJkYXRlcyIsImlzUlRMIiwiZm9ybWF0IiwiRFBHbG9iYWwiLCJwYXJzZUZvcm1hdCIsImZvcm1hdFRleHQiLCJpc0lubGluZSIsImlzSW5wdXQiLCJoYXNJbnB1dCIsImRpc2FibGVEYmxDbGlja1NlbGVjdGlvbiIsIm9uUmVuZGVyIiwibGlua0ZpZWxkIiwibGlua0Zvcm1hdCIsIm1pbnV0ZVN0ZXAiLCJwaWNrZXJQb3NpdGlvbiIsImluaXRpYWxEYXRlIiwiZmFDU1NwcmVmaXgiLCJsZWZ0QXJyb3ciLCJyaWdodEFycm93IiwiY2xvc2VJY29uIiwibWluVmlldyIsImNvbnZlcnRWaWV3TW9kZSIsIm1heFZpZXciLCJtb2RlcyIsInN0YXJ0Vmlld01vZGUiLCJzdGFydFZpZXciLCJ2aWV3TW9kZSIsInBpY2tUaW1lIiwiZm9yY2VQYXJzZSIsInBpY2tlciIsInRlbXBsYXRlIiwiY2xpY2siLCJwcm94eSIsIm1vdXNlZG93biIsInByZXBlbmQiLCJjbG9zZXN0Iiwia2V5Ym9hcmROYXZpZ2F0aW9uIiwidG9kYXlCdG4iLCJ0b2RheUhpZ2hsaWdodCIsImNhbGVuZGFyV2Vla3MiLCJ3ZWVrU3RhcnQiLCJ3ZWVrRW5kIiwic3RhcnREYXRlIiwiSW5maW5pdHkiLCJlbmREYXRlIiwiZGF5c09mV2Vla0Rpc2FibGVkIiwiZGF0ZXNEaXNhYmxlZCIsInNldFN0YXJ0RGF0ZSIsInNldEVuZERhdGUiLCJzZXREYXlzT2ZXZWVrRGlzYWJsZWQiLCJzZXREYXRlc0Rpc2FibGVkIiwiZmlsbERvdyIsImZpbGxNb250aHMiLCJ1cGRhdGUiLCJzaG93TW9kZSIsIl9hdHRhY2hFdmVudHMiLCJfZGV0YWNoRXZlbnRzIiwia2V5dXAiLCJrZXlkb3duIiwiZGJsY2xpY2siLCJibHVyIiwiZXYiLCJvdXRlckhlaWdodCIsImRhdGUiLCJzZXRWYWx1ZSIsInJlbW92ZSIsImRhdGVwaWNrZXIiLCJnZXREYXRlIiwiZCIsImdldFRpbWV6b25lT2Zmc2V0Iiwic2V0RGF0ZSIsInNldFVUQ0RhdGUiLCJmb3JtYXR0ZWQiLCJnZXRGb3JtYXR0ZWREYXRlIiwiZm9ybWF0RGF0ZSIsInBhcnNlRGF0ZSIsInVwZGF0ZU5hdkFycm93cyIsInZhbHVlT2YiLCJ6SW5kZXgiLCJ0ZXh0Ym94Iiwib3V0ZXJXaWR0aCIsImZ1bGxPZmZzZXRUb3AiLCJvZmZzZXRMZWZ0IiwiZnJvbUFyZ3MiLCJjdXJyZW50VmFsIiwidmlld0RhdGUiLCJmaWxsIiwiZG93Q250IiwiY2VsbCIsImRheXNNaW4iLCJtb250aHNTaG9ydCIsInllYXIiLCJtb250aCIsImRheU1vbnRoIiwiaG91cnMiLCJnZXRVVENIb3VycyIsIm1pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwic3RhcnRZZWFyIiwic3RhcnRNb250aCIsImVuZFllYXIiLCJlbmRNb250aCIsImN1cnJlbnREYXRlIiwidGl0bGVGb3JtYXQiLCJtb250aHMiLCJwcmV2TW9udGgiLCJkYXkiLCJnZXREYXlzSW5Nb250aCIsImdldFVUQ0RheSIsIm5leHRNb250aCIsImNsc05hbWUiLCJhIiwiZ2V0RGF5IiwiYiIsImdldEZ1bGxZZWFyIiwiY2FsV2VlayIsImdldE1vbnRoIiwiaW5BcnJheSIsImVtcHR5IiwiYWN0dWFsIiwiZmxvb3IiLCJjdXJyZW50WWVhciIsInllYXJDb250IiwiaG91ciIsInZpc2liaWxpdHkiLCJuYXZTdGVwIiwibW92ZUhvdXIiLCJtb3ZlRGF0ZSIsIm1vdmVNb250aCIsIm1vdmVZZWFyIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsIl9zZXREYXRlIiwic2Vjb25kcyIsImdldFVUQ1NlY29uZHMiLCJzZXRVVENNb250aCIsInNldFVUQ0Z1bGxZZWFyIiwic3Vic3RyIiwib2xkVmlld01vZGUiLCJjaGFuZ2UiLCJuZXdfZGF0ZSIsInNldFVUQ0hvdXJzIiwibWFnIiwibmV3X21vbnRoIiwiZGF0ZVdpdGhpblJhbmdlIiwiZGF0ZUNoYW5nZWQiLCJuZXdEYXRlIiwibmV3Vmlld0RhdGUiLCJuZXdWaWV3TW9kZSIsImZkYXRlcGlja2VyIiwib3B0aW9uIiwic2hpZnQiLCIkdGhpcyIsIkNvbnN0cnVjdG9yIiwiZGF5cyIsImRheXNTaG9ydCIsIm5hdkZuYyIsImlzTGVhcFllYXIiLCJ2YWxpZFBhcnRzIiwibm9ucHVuY3R1YXRpb24iLCJzZXBhcmF0b3JzIiwicGFydF9yZSIsInBhcnQiLCJEYXRldGltZXBpY2tlciIsInBhcnNlZCIsInNldHRlcnNfb3JkZXIiLCJzZXR0ZXJzX21hcCIsImhoIiwidiIsImgiLCJpaSIsInNldFVUQ01pbnV0ZXMiLCJzcyIsInNldFVUQ1NlY29uZHMiLCJzIiwieXl5eSIsInl5IiwibSIsImZpbHRlcmVkIiwiY250IiwiTSIsIk1NIiwic3Vic3RyaW5nIiwiZGQiLCJtbSIsInNlcHMiLCJoZWFkVGVtcGxhdGUiLCJjb250VGVtcGxhdGUiLCJmb290VGVtcGxhdGUiLCJyZWFkeSIsImRhdGVBciIsInNlcmlhbGl6ZUFycmF5IiwiYWpheF9kYXRhIiwicG9zdCIsImpzX3ZhcnMiLCJhamF4dXJsIiwibG9jYXRpb24iLCJzZWFyY2giLCJudW1iZXJfb2Zfcm93cyIsInBhcnNlSFRNTCIsInBhZ2VfbnVtYmVyIiwid3JhcCIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImludmlld09iamVjdHMiLCJ2aWV3cG9ydFNpemUiLCJ2aWV3cG9ydE9mZnNldCIsInciLCJpbnZpZXciLCJzZXRJbnRlcnZhbCIsImNoZWNrSW5WaWV3IiwiaW52aWV3T2JqZWN0IiwiZ3VpZCIsImNsZWFySW50ZXJ2YWwiLCJnZXRWaWV3cG9ydFNpemUiLCJtb2RlIiwiZG9tT2JqZWN0IiwiaW5uZXJXaWR0aCIsImNvbXBhdE1vZGUiLCJzdXBwb3J0IiwiYm94TW9kZWwiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsImdldFZpZXdwb3J0T2Zmc2V0Iiwic2Nyb2xsTGVmdCIsInNlbGVjdG9yIiwiY29udGFpbnMiLCJlbGVtZW50U2l6ZSIsImVsZW1lbnRPZmZzZXQiLCJpblZpZXciLCJhdHRhY2hFdmVudCIsIlplcHRvIiwiQ0xPU0VfRVZFTlQiLCJCRUZPUkVfQ0xPU0VfRVZFTlQiLCJBRlRFUl9DTE9TRV9FVkVOVCIsIkJFRk9SRV9BUFBFTkRfRVZFTlQiLCJNQVJLVVBfUEFSU0VfRVZFTlQiLCJPUEVOX0VWRU5UIiwiQ0hBTkdFX0VWRU5UIiwiTlMiLCJFVkVOVF9OUyIsIlJFQURZX0NMQVNTIiwiUkVNT1ZJTkdfQ0xBU1MiLCJQUkVWRU5UX0NMT1NFX0NMQVNTIiwibWZwIiwiTWFnbmlmaWNQb3B1cCIsIl9pc0pRIiwiX3ByZXZTdGF0dXMiLCJfd2luZG93IiwiX2RvY3VtZW50IiwiX3ByZXZDb250ZW50VHlwZSIsIl93cmFwQ2xhc3NlcyIsIl9jdXJyUG9wdXBUeXBlIiwiX21mcE9uIiwiZiIsIl9nZXRFbCIsInJhdyIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwiX21mcFRyaWdnZXIiLCJzdCIsImNhbGxiYWNrcyIsImNoYXJBdCIsIl9nZXRDbG9zZUJ0biIsImN1cnJUZW1wbGF0ZSIsImNsb3NlQnRuIiwiY2xvc2VNYXJrdXAiLCJ0Q2xvc2UiLCJfY2hlY2tJbnN0YW5jZSIsIm1hZ25pZmljUG9wdXAiLCJpbnN0YW5jZSIsInN1cHBvcnRzVHJhbnNpdGlvbnMiLCJwb3AiLCJhcHBWZXJzaW9uIiwiaXNMb3dJRSIsImlzSUU4IiwiYWxsIiwiaXNBbmRyb2lkIiwiaXNJT1MiLCJzdXBwb3J0c1RyYW5zaXRpb24iLCJwcm9iYWJseU1vYmlsZSIsInBvcHVwc0NhY2hlIiwiaXNPYmoiLCJ0b0FycmF5IiwiaXRlbSIsImlzT3BlbiIsInVwZGF0ZUl0ZW1IVE1MIiwibWFpbkVsIiwiZml4ZWRDb250ZW50UG9zIiwibW9kYWwiLCJjbG9zZU9uQ29udGVudENsaWNrIiwiY2xvc2VPbkJnQ2xpY2siLCJzaG93Q2xvc2VCdG4iLCJlbmFibGVFc2NhcGVLZXkiLCJiZ092ZXJsYXkiLCJfY2hlY2tJZkNsb3NlIiwiY29udGVudENvbnRhaW5lciIsInByZWxvYWRlciIsInRMb2FkaW5nIiwibW9kdWxlcyIsIm4iLCJjbG9zZUJ0bkluc2lkZSIsInZhbHVlcyIsImNsb3NlX3JlcGxhY2VXaXRoIiwiYWxpZ25Ub3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsImZpeGVkQmdQb3MiLCJ1cGRhdGVTaXplIiwid2luZG93SGVpZ2h0Iiwid0giLCJ3aW5kb3dTdHlsZXMiLCJfaGFzU2Nyb2xsQmFyIiwiX2dldFNjcm9sbGJhclNpemUiLCJtYXJnaW5SaWdodCIsImlzSUU3IiwiY2xhc3Nlc1RvYWRkIiwibWFpbkNsYXNzIiwiX2FkZENsYXNzVG9NRlAiLCJwcmVwZW5kVG8iLCJfbGFzdEZvY3VzZWRFbCIsImFjdGl2ZUVsZW1lbnQiLCJjb250ZW50IiwiX3NldEZvY3VzIiwiX29uRm9jdXNJbiIsInJlbW92YWxEZWxheSIsIl9jbG9zZSIsImNsYXNzZXNUb1JlbW92ZSIsImRldGFjaCIsIl9yZW1vdmVDbGFzc0Zyb21NRlAiLCJjdXJySXRlbSIsImF1dG9Gb2N1c0xhc3QiLCJwcmV2SGVpZ2h0Iiwiem9vbUxldmVsIiwicGFyc2VFbCIsIm1hcmt1cCIsIm5ld0NvbnRlbnQiLCJhcHBlbmRDb250ZW50IiwicHJlbG9hZGVkIiwidGFnTmFtZSIsInNyYyIsImFkZEdyb3VwIiwiZUhhbmRsZXIiLCJtZnBFbCIsIl9vcGVuQ2xpY2siLCJlTmFtZSIsImRlbGVnYXRlIiwibWlkQ2xpY2siLCJtZXRhS2V5IiwiZGlzYWJsZU9uIiwiaXNGdW5jdGlvbiIsInVwZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNsb3NlT25Db250ZW50IiwiY2xvc2VPbkJnIiwiY05hbWUiLCJfcGFyc2VNYXJrdXAiLCJhcnIiLCJyZXBsYWNlV2l0aCIsInNjcm9sbGJhclNpemUiLCJzY3JvbGxEaXYiLCJyZW1vdmVDaGlsZCIsInByb3RvIiwicmVnaXN0ZXJNb2R1bGUiLCJqcUVsIiwiaXRlbU9wdHMiLCJJTkxJTkVfTlMiLCJfaGlkZGVuQ2xhc3MiLCJfaW5saW5lUGxhY2Vob2xkZXIiLCJfbGFzdElubGluZUVsZW1lbnQiLCJfcHV0SW5saW5lRWxlbWVudHNCYWNrIiwiYWZ0ZXIiLCJoaWRkZW5DbGFzcyIsInROb3RGb3VuZCIsImluaXRJbmxpbmUiLCJnZXRJbmxpbmUiLCJpbmxpbmVTdCIsImlubGluZSIsImlubGluZUVsZW1lbnQiLCJBSkFYX05TIiwiX2FqYXhDdXIiLCJfcmVtb3ZlQWpheEN1cnNvciIsIl9kZXN0cm95QWpheFJlcXVlc3QiLCJyZXEiLCJhYm9ydCIsInNldHRpbmdzIiwiY3Vyc29yIiwidEVycm9yIiwiaW5pdEFqYXgiLCJhamF4IiwiZ2V0QWpheCIsInVybCIsInN1Y2Nlc3MiLCJ0ZXh0U3RhdHVzIiwianFYSFIiLCJ0ZW1wIiwieGhyIiwiZmluaXNoZWQiLCJsb2FkRXJyb3IiLCJfaW1nSW50ZXJ2YWwiLCJfZ2V0VGl0bGUiLCJ0aXRsZSIsImltYWdlIiwidGl0bGVTcmMiLCJ2ZXJ0aWNhbEZpdCIsImluaXRJbWFnZSIsImltZ1N0IiwibnMiLCJyZXNpemVJbWFnZSIsImltZyIsImRlY3IiLCJfb25JbWFnZUhhc1NpemUiLCJoYXNTaXplIiwiaXNDaGVja2luZ0ltZ1NpemUiLCJpbWdIaWRkZW4iLCJmaW5kSW1hZ2VTaXplIiwibWZwU2V0SW50ZXJ2YWwiLCJnZXRJbWFnZSIsImd1YXJkIiwib25Mb2FkQ29tcGxldGUiLCJsb2FkZWQiLCJvbkxvYWRFcnJvciIsImFsdCIsImNsb25lIiwiaW1nX3JlcGxhY2VXaXRoIiwibG9hZGluZyIsImhhc01velRyYW5zZm9ybSIsImdldEhhc01velRyYW5zZm9ybSIsIk1velRyYW5zZm9ybSIsImVhc2luZyIsIm9wZW5lciIsImluaXRab29tIiwiem9vbVN0Iiwiem9vbSIsImdldEVsVG9BbmltYXRlIiwibmV3SW1nIiwidHJhbnNpdGlvbiIsImNzc09iaiIsInNob3dNYWluQ29udGVudCIsIm9wZW5UaW1lb3V0IiwiYW5pbWF0ZWRJbWciLCJfYWxsb3dab29tIiwiX2dldEl0ZW1Ub1pvb20iLCJfZ2V0T2Zmc2V0IiwiaXNMYXJnZSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwib2JqIiwiSUZSQU1FX05TIiwiX2VtcHR5UGFnZSIsIl9maXhJZnJhbWVCdWdzIiwiaXNTaG93aW5nIiwic3JjQWN0aW9uIiwicGF0dGVybnMiLCJ5b3V0dWJlIiwidmltZW8iLCJnbWFwcyIsImluaXRJZnJhbWUiLCJwcmV2VHlwZSIsIm5ld1R5cGUiLCJnZXRJZnJhbWUiLCJlbWJlZFNyYyIsImlmcmFtZVN0IiwiaWZyYW1lIiwibGFzdEluZGV4T2YiLCJkYXRhT2JqIiwiX2dldExvb3BlZElkIiwibnVtU2xpZGVzIiwiX3JlcGxhY2VDdXJyVG90YWwiLCJjdXJyIiwidG90YWwiLCJhcnJvd01hcmt1cCIsInByZWxvYWQiLCJuYXZpZ2F0ZUJ5SW1nQ2xpY2siLCJhcnJvd3MiLCJ0UHJldiIsInROZXh0IiwidENvdW50ZXIiLCJpbml0R2FsbGVyeSIsImdTdCIsImdhbGxlcnkiLCJsIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsIl9wcmVsb2FkVGltZW91dCIsInByZWxvYWROZWFyYnlJbWFnZXMiLCJnb1RvIiwibmV3SW5kZXgiLCJwcmVsb2FkQmVmb3JlIiwicHJlbG9hZEFmdGVyIiwiX3ByZWxvYWRJdGVtIiwiUkVUSU5BX05TIiwicmVwbGFjZVNyYyIsInJhdGlvIiwiaW5pdFJldGluYSIsImRldmljZVBpeGVsUmF0aW8iLCJrZXlDb3VudGVyIiwiYWxsV2F5cG9pbnRzIiwiV2F5cG9pbnQiLCJoYW5kbGVyIiwiQWRhcHRlciIsImFkYXB0ZXIiLCJheGlzIiwiaG9yaXpvbnRhbCIsInRyaWdnZXJQb2ludCIsIkdyb3VwIiwiZmluZE9yQ3JlYXRlIiwiQ29udGV4dCIsImZpbmRPckNyZWF0ZUJ5RWxlbWVudCIsIm9mZnNldEFsaWFzZXMiLCJxdWV1ZVRyaWdnZXIiLCJkaXNhYmxlIiwiZW5hYmxlIiwicmVmcmVzaCIsImludm9rZUFsbCIsImFsbFdheXBvaW50c0FycmF5Iiwid2F5cG9pbnRLZXkiLCJkZXN0cm95QWxsIiwiZGlzYWJsZUFsbCIsImVuYWJsZUFsbCIsInJlZnJlc2hBbGwiLCJ2aWV3cG9ydEhlaWdodCIsInZpZXdwb3J0V2lkdGgiLCJhZGFwdGVycyIsImNvbnRpbnVvdXMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVTaGltIiwiY29udGV4dHMiLCJvbGRXaW5kb3dMb2FkIiwib25sb2FkIiwiZGlkU2Nyb2xsIiwiZGlkUmVzaXplIiwib2xkU2Nyb2xsIiwid2F5cG9pbnRzIiwidmVydGljYWwiLCJ3YXlwb2ludENvbnRleHRLZXkiLCJ3aW5kb3dDb250ZXh0IiwiY3JlYXRlVGhyb3R0bGVkU2Nyb2xsSGFuZGxlciIsImNyZWF0ZVRocm90dGxlZFJlc2l6ZUhhbmRsZXIiLCJ3YXlwb2ludCIsImNoZWNrRW1wdHkiLCJob3Jpem9udGFsRW1wdHkiLCJ2ZXJ0aWNhbEVtcHR5IiwiaXNXaW5kb3ciLCJyZXNpemVIYW5kbGVyIiwiaGFuZGxlUmVzaXplIiwic2Nyb2xsSGFuZGxlciIsImhhbmRsZVNjcm9sbCIsImlzVG91Y2giLCJ0cmlnZ2VyZWRHcm91cHMiLCJheGVzIiwibmV3U2Nyb2xsIiwiZm9yd2FyZCIsImJhY2t3YXJkIiwiYXhpc0tleSIsImlzRm9yd2FyZCIsIndhc0JlZm9yZVRyaWdnZXJQb2ludCIsIm5vd0FmdGVyVHJpZ2dlclBvaW50IiwiY3Jvc3NlZEZvcndhcmQiLCJjcm9zc2VkQmFja3dhcmQiLCJncm91cEtleSIsImZsdXNoVHJpZ2dlcnMiLCJjb250ZXh0T2Zmc2V0IiwiY29udGV4dFNjcm9sbCIsImNvbnRleHREaW1lbnNpb24iLCJvZmZzZXRQcm9wIiwiYWRqdXN0bWVudCIsIm9sZFRyaWdnZXJQb2ludCIsImZyZXNoV2F5cG9pbnQiLCJjb250ZXh0TW9kaWZpZXIiLCJ3YXNCZWZvcmVTY3JvbGwiLCJub3dBZnRlclNjcm9sbCIsInRyaWdnZXJlZEJhY2t3YXJkIiwidHJpZ2dlcmVkRm9yd2FyZCIsImNlaWwiLCJmaW5kQnlFbGVtZW50IiwiY29udGV4dElkIiwicmVxdWVzdEZuIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiYnlUcmlnZ2VyUG9pbnQiLCJieVJldmVyc2VUcmlnZ2VyUG9pbnQiLCJjbGVhclRyaWdnZXJRdWV1ZXMiLCJ0cmlnZ2VyUXVldWVzIiwic29ydCIsImlzTGFzdCIsIkpRdWVyeUFkYXB0ZXIiLCJjcmVhdGVFeHRlbnNpb24iLCJmcmFtZXdvcmsiLCJvdmVycmlkZXMiLCJyb290IiwiUGhvdG9Td2lwZVVJX0RlZmF1bHQiLCJwc3dwIiwidWkiLCJfb3ZlcmxheVVJVXBkYXRlZCIsIl9jb250cm9sc1Zpc2libGUiLCJfZnVsbHNjcmVuQVBJIiwiX2NvbnRyb2xzIiwiX2NhcHRpb25Db250YWluZXIiLCJfZmFrZUNhcHRpb25Db250YWluZXIiLCJfaW5kZXhJbmRpY2F0b3IiLCJfc2hhcmVCdXR0b24iLCJfc2hhcmVNb2RhbCIsIl9zaGFyZU1vZGFsSGlkZGVuIiwiX2luaXRhbENsb3NlT25TY3JvbGxWYWx1ZSIsIl9pc0lkbGUiLCJfbGlzdGVuIiwiX2xvYWRpbmdJbmRpY2F0b3IiLCJfbG9hZGluZ0luZGljYXRvckhpZGRlbiIsIl9sb2FkaW5nSW5kaWNhdG9yVGltZW91dCIsIl9nYWxsZXJ5SGFzT25lU2xpZGUiLCJfb3B0aW9ucyIsIl9kZWZhdWx0VUlPcHRpb25zIiwiYmFyc1NpemUiLCJjbG9zZUVsQ2xhc3NlcyIsInRpbWVUb0lkbGUiLCJ0aW1lVG9JZGxlT3V0c2lkZSIsImxvYWRpbmdJbmRpY2F0b3JEZWxheSIsImFkZENhcHRpb25IVE1MRm4iLCJjYXB0aW9uRWwiLCJjbG9zZUVsIiwiZnVsbHNjcmVlbkVsIiwiem9vbUVsIiwic2hhcmVFbCIsImNvdW50ZXJFbCIsImFycm93RWwiLCJwcmVsb2FkZXJFbCIsInRhcFRvQ2xvc2UiLCJ0YXBUb1RvZ2dsZUNvbnRyb2xzIiwiY2xpY2tUb0Nsb3NlTm9uWm9vbWFibGUiLCJzaGFyZUJ1dHRvbnMiLCJsYWJlbCIsImRvd25sb2FkIiwiZ2V0SW1hZ2VVUkxGb3JTaGFyZSIsImdldFBhZ2VVUkxGb3JTaGFyZSIsImhyZWYiLCJnZXRUZXh0Rm9yU2hhcmUiLCJpbmRleEluZGljYXRvclNlcCIsImZpdENvbnRyb2xzV2lkdGgiLCJfYmxvY2tDb250cm9sc1RhcCIsIl9ibG9ja0NvbnRyb2xzVGFwVGltZW91dCIsIl9vbkNvbnRyb2xzVGFwIiwibW91c2VVc2VkIiwiX29uSWRsZU1vdXNlTW92ZSIsInVpRWxlbWVudCIsImNsaWNrZWRDbGFzcyIsImZvdW5kIiwiX3VpRWxlbWVudHMiLCJvblRhcCIsInRhcERlbGF5IiwiZmVhdHVyZXMiLCJpc09sZEFuZHJvaWQiLCJfZml0Q29udHJvbHNJblZpZXdwb3J0IiwibGlrZWx5VG91Y2hEZXZpY2UiLCJzY3JlZW4iLCJfdG9nZ2xlUHN3cENsYXNzIiwiX2NvdW50TnVtSXRlbXMiLCJoYXNPbmVTbGlkZSIsImdldE51bUl0ZW1zRm4iLCJfdG9nZ2xlU2hhcmVNb2RhbENsYXNzIiwiX3RvZ2dsZVNoYXJlTW9kYWwiLCJfdXBkYXRlU2hhcmVVUkxzIiwiX29wZW5XaW5kb3dQb3B1cCIsInNob3V0Iiwic2hhcmVCdXR0b25PdXQiLCJzaGFyZUJ1dHRvbkRhdGEiLCJzaGFyZVVSTCIsImltYWdlX3VybCIsInBhZ2VfdXJsIiwic2hhcmVfdGV4dCIsImVuY29kZVVSSUNvbXBvbmVudCIsInBhcnNlU2hhcmVCdXR0b25PdXQiLCJvbmNsaWNrIiwiX2hhc0Nsb3NlQ2xhc3MiLCJfaWRsZUludGVydmFsIiwiX2lkbGVUaW1lciIsIl9pZGxlSW5jcmVtZW50Iiwic2V0SWRsZSIsIl9vbk1vdXNlTGVhdmVXaW5kb3ciLCJmcm9tIiwicmVsYXRlZFRhcmdldCIsInRvRWxlbWVudCIsIl9zZXR1cEZ1bGxzY3JlZW5BUEkiLCJnZXRGdWxsc2NyZWVuQVBJIiwiZXZlbnRLIiwidXBkYXRlRnVsbHNjcmVlbiIsIl9zZXR1cExvYWRpbmdJbmRpY2F0b3IiLCJfdG9nZ2xlTG9hZGluZ0luZGljYXRvciIsImFsbG93UHJvZ3Jlc3NpdmVJbWciLCJfYXBwbHlOYXZCYXJHYXBzIiwiZ2FwIiwidkdhcCIsImJhcnMiLCJjcmVhdGVFbCIsImNhcHRpb25TaXplIiwiX3NldHVwSWRsZSIsIl9zZXR1cEhpZGluZ0NvbnRyb2xzRHVyaW5nR2VzdHVyZXMiLCJoaWRlQ29udHJvbHMiLCJzaG93Q29udHJvbHMiLCJwaW5jaENvbnRyb2xzSGlkZGVuIiwib25Jbml0IiwidG9nZ2xlRGVza3RvcFpvb20iLCJpc0Z1bGxzY3JlZW4iLCJleGl0IiwiZW50ZXIiLCJfc2V0dXBVSUVsZW1lbnRzIiwiY2xhc3NBdHRyIiwibG9vcFRocm91Z2hDaGlsZEVsZW1lbnRzIiwic0NoaWxkcmVuIiwidG9wQmFyIiwiZ2V0Q2hpbGRCeUNsYXNzIiwic2Nyb2xsV3JhcCIsImxpc3RlbiIsInBvaW50IiwiaW5pdGlhbFpvb21MZXZlbCIsImdldFpvb21MZXZlbCIsInpvb21UbyIsImdldERvdWJsZVRhcFpvb20iLCJpc0Rvd24iLCJwcmV2ZW50T2JqIiwicHJldmVudCIsIm9uR2xvYmFsVGFwIiwib25Nb3VzZU92ZXIiLCJ1bmJpbmQiLCJoaWRlQW5pbWF0aW9uRHVyYXRpb24iLCJzaG93QW5pbWF0aW9uRHVyYXRpb24iLCJpc0lkbGUiLCJ1cGRhdGVJbmRleEluZGljYXRvciIsInNldFNjcm9sbE9mZnNldCIsImdldFNjcm9sbFkiLCJnZXRDdXJyZW50SW5kZXgiLCJkZXRhaWwiLCJmaXRSYXRpbyIsInJlbGVhc2VQb2ludCIsInN1cHBvcnRzRnVsbHNjcmVlbiIsImV4aXRGdWxsc2NyZWVuIiwibW96Q2FuY2VsRnVsbFNjcmVlbiIsIndlYmtpdEV4aXRGdWxsc2NyZWVuIiwibXNFeGl0RnVsbHNjcmVlbiIsImRFIiwiYXBpIiwidEYiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsImVudGVySyIsImV4aXRLIiwiZWxlbWVudEsiLCJtb3pSZXF1ZXN0RnVsbFNjcmVlbiIsIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuIiwibXNSZXF1ZXN0RnVsbHNjcmVlbiIsImNsb3NlT25TY3JvbGwiLCJFbGVtZW50IiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJQaG90b1N3aXBlIiwiVWlDbGFzcyIsImxpc3RlbmVyIiwibWV0aG9kTmFtZSIsImNsYXNzZXMiLCJ0YWciLCJ5T2Zmc2V0IiwicmVnIiwicGFyZW50RWwiLCJjaGlsZENsYXNzTmFtZSIsIm5vZGUiLCJmaXJzdENoaWxkIiwiYXJyYXlTZWFyY2giLCJhcnJheSIsIm8xIiwibzIiLCJwcmV2ZW50T3ZlcndyaXRlIiwic2luZSIsIm91dCIsInNpbiIsIlBJIiwiaW5PdXQiLCJjb3MiLCJjdWJpYyIsImRldGVjdEZlYXR1cmVzIiwiaGVscGVyRWwiLCJoZWxwZXJTdHlsZSIsInZlbmRvciIsIm9sZElFIiwidG91Y2giLCJyYWYiLCJjYWYiLCJwb2ludGVyRXZlbnQiLCJwb2ludGVyRW5hYmxlZCIsIm1zUG9pbnRlckVuYWJsZWQiLCJ1YSIsInBsYXRmb3JtIiwiaXNPbGRJT1NQaG9uZSIsImFuZHJvaWR2ZXJzaW9uIiwiYW5kcm9pZFZlcnNpb24iLCJpc01vYmlsZU9wZXJhIiwic3R5bGVDaGVja3MiLCJzdHlsZUNoZWNrSXRlbSIsInN0eWxlTmFtZSIsImN1cnJUaW1lIiwidGltZVRvQ2FsbCIsInN2ZyIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVNWR1JlY3QiLCJldk5hbWUiLCJfaGFuZGxlRXYiLCJoYW5kbGVFdmVudCIsIkRPVUJMRV9UQVBfUkFESVVTIiwiTlVNX0hPTERFUlMiLCJhbGxvd1BhblRvTmV4dCIsInNwYWNpbmciLCJiZ09wYWNpdHkiLCJsb29wIiwicGluY2hUb0Nsb3NlIiwiY2xvc2VPblZlcnRpY2FsRHJhZyIsInZlcnRpY2FsRHJhZ1JhbmdlIiwic2hvd0hpZGVPcGFjaXR5IiwiZXNjS2V5IiwiYXJyb3dLZXlzIiwibWFpblNjcm9sbEVuZEZyaWN0aW9uIiwicGFuRW5kRnJpY3Rpb24iLCJpc0NsaWNrYWJsZUVsZW1lbnQiLCJpc01vdXNlQ2xpY2siLCJtYXhTcHJlYWRab29tIiwic2NhbGVNb2RlIiwiX2dldEVtcHR5UG9pbnQiLCJfaXNPcGVuIiwiX2lzRGVzdHJveWluZyIsIl9jbG9zZWRCeVNjcm9sbCIsIl9jdXJyZW50SXRlbUluZGV4IiwiX2NvbnRhaW5lclN0eWxlIiwiX2NvbnRhaW5lclNoaWZ0SW5kZXgiLCJfY3VyclBhbkRpc3QiLCJfc3RhcnRQYW5PZmZzZXQiLCJfcGFuT2Zmc2V0IiwiX3VwTW92ZUV2ZW50cyIsIl9kb3duRXZlbnRzIiwiX2dsb2JhbEV2ZW50SGFuZGxlcnMiLCJfdmlld3BvcnRTaXplIiwiX2N1cnJab29tTGV2ZWwiLCJfc3RhcnRab29tTGV2ZWwiLCJfdHJhbnNsYXRlUHJlZml4IiwiX3RyYW5zbGF0ZVN1Zml4IiwiX3VwZGF0ZVNpemVJbnRlcnZhbCIsIl9pdGVtc05lZWRVcGRhdGUiLCJfY3VyclBvc2l0aW9uSW5kZXgiLCJfb2Zmc2V0IiwiX3NsaWRlU2l6ZSIsIl9pdGVtSG9sZGVycyIsIl9wcmV2SXRlbUluZGV4IiwiX2luZGV4RGlmZiIsIl9kcmFnU3RhcnRFdmVudCIsIl9kcmFnTW92ZUV2ZW50IiwiX2RyYWdFbmRFdmVudCIsIl9kcmFnQ2FuY2VsRXZlbnQiLCJfdHJhbnNmb3JtS2V5IiwiX3BvaW50ZXJFdmVudEVuYWJsZWQiLCJfaXNGaXhlZFBvc2l0aW9uIiwiX2xpa2VseVRvdWNoRGV2aWNlIiwiX21vZHVsZXMiLCJfcmVxdWVzdEFGIiwiX2NhbmNlbEFGIiwiX2luaXRhbENsYXNzTmFtZSIsIl9pbml0YWxXaW5kb3dTY3JvbGxZIiwiX29sZElFIiwiX2N1cnJlbnRXaW5kb3dTY3JvbGxZIiwiX2ZlYXR1cmVzIiwiX3dpbmRvd1Zpc2libGVTaXplIiwiX3JlbmRlck1heFJlc29sdXRpb24iLCJfcmVnaXN0ZXJNb2R1bGUiLCJwdWJsaWNNZXRob2RzIiwiX2dldE51bUl0ZW1zIiwiX2xpc3RlbmVycyIsIl9zaG91dCIsIl9nZXRDdXJyZW50VGltZSIsIl9hcHBseUJnT3BhY2l0eSIsIm9wYWNpdHkiLCJfYmdPcGFjaXR5IiwiYmciLCJfYXBwbHlab29tVHJhbnNmb3JtIiwic3R5bGVPYmoiLCJfYXBwbHlDdXJyZW50Wm9vbVBhbiIsImFsbG93UmVuZGVyUmVzb2x1dGlvbiIsIl9jdXJyWm9vbUVsZW1lbnRTdHlsZSIsIl9zZXRJbWFnZVNpemUiLCJfYXBwbHlab29tUGFuVG9JdGVtIiwiaW5pdGlhbFBvc2l0aW9uIiwiX3NldFRyYW5zbGF0ZVgiLCJlbFN0eWxlIiwiX21vdmVNYWluU2Nyb2xsIiwiZHJhZ2dpbmciLCJuZXdTbGlkZUluZGV4T2Zmc2V0IiwiZGVsdGEiLCJfbWFpblNjcm9sbFBvcyIsIl9jYWxjdWxhdGVQYW5PZmZzZXQiLCJfbWlkWm9vbVBvaW50IiwiX2VxdWFsaXplUG9pbnRzIiwicDEiLCJwMiIsIl9yb3VuZFBvaW50IiwiX21vdXNlTW92ZVRpbWVvdXQiLCJfb25GaXJzdE1vdXNlTW92ZSIsIl9iaW5kRXZlbnRzIiwidHJhbnNmb3JtIiwiX3VuYmluZEV2ZW50cyIsIl9pc0RyYWdnaW5nIiwiX2NhbGN1bGF0ZVBhbkJvdW5kcyIsImJvdW5kcyIsIl9jYWxjdWxhdGVJdGVtU2l6ZSIsIl9jdXJyUGFuQm91bmRzIiwiX2dldE1pblpvb21MZXZlbCIsIl9nZXRNYXhab29tTGV2ZWwiLCJfbW9kaWZ5RGVzdFBhbk9mZnNldCIsImRlc3RQYW5Cb3VuZHMiLCJkZXN0UGFuT2Zmc2V0IiwiZGVzdFpvb21MZXZlbCIsIl9zZXR1cFRyYW5zZm9ybXMiLCJhbGxvdzNkVHJhbnNmb3JtIiwicGVyc3BlY3RpdmUiLCJ6b29tUmF0aW8iLCJfb25LZXlEb3duIiwia2V5ZG93bkFjdGlvbiIsIl9vbkdsb2JhbENsaWNrIiwiX21vdmVkIiwiX3pvb21TdGFydGVkIiwiX21haW5TY3JvbGxBbmltYXRpbmciLCJfdmVydGljYWxEcmFnSW5pdGlhdGVkIiwiX3VwZGF0ZVBhZ2VTY3JvbGxPZmZzZXQiLCJfYW5pbWF0aW9ucyIsIl9udW1BbmltYXRpb25zIiwiX3N0b3BBbmltYXRpb24iLCJfcmVnaXN0ZXJTdGFydEFuaW1hdGlvbiIsIl9zdG9wQWxsQW5pbWF0aW9ucyIsIl9hbmltYXRlUHJvcCIsImVuZFByb3AiLCJlYXNpbmdGbiIsIm9uVXBkYXRlIiwib25Db21wbGV0ZSIsInN0YXJ0QW5pbVRpbWUiLCJhbmltbG9vcCIsImlzTWFpblNjcm9sbEFuaW1hdGluZyIsImlzRHJhZ2dpbmciLCJpc1pvb21pbmciLCJfaXNab29taW5nIiwiYXBwbHlab29tUGFuIiwicGFuWCIsInBhblkiLCJpdGVtSG9sZGVycyIsImRpc3BsYXkiLCJyZXNpemUiLCJvbGRQaG9uZSIsImFuaW1hdGlvbk5hbWUiLCJfZ2V0SXRlbUF0Iiwicm9vdENsYXNzZXMiLCJzZXRDb250ZW50IiwidXBkYXRlQ3Vyckl0ZW0iLCJfc2hvd09ySGlkZSIsIl9zaG93T3JIaWRlVGltZW91dCIsIl9zdG9wRHJhZ1VwZGF0ZUxvb3AiLCJwYW5UbyIsImZvcmNlIiwiZGlmZiIsInVwZGF0ZUN1cnJab29tSXRlbSIsImVtdWxhdGVTZXRDb250ZW50Iiwiem9vbUVsZW1lbnQiLCJjZW50ZXIiLCJpbnZhbGlkYXRlQ3Vyckl0ZW1zIiwibmVlZHNVcGRhdGUiLCJiZWZvcmVBbmltYXRpb24iLCJkaWZmQWJzIiwidGVtcEhvbGRlciIsInVuc2hpZnQiLCJwcmV2SXRlbSIsIndpbmRvd1Njcm9sbFkiLCJob2xkZXIiLCJoSW5kZXgiLCJjbGVhblNsaWRlIiwiY2VudGVyUG9pbnQiLCJzcGVlZCIsInVwZGF0ZUZuIiwiaW5pdGlhbFBhbk9mZnNldCIsIk1JTl9TV0lQRV9ESVNUQU5DRSIsIkRJUkVDVElPTl9DSEVDS19PRkZTRVQiLCJfZ2VzdHVyZVN0YXJ0VGltZSIsIl9nZXN0dXJlQ2hlY2tTcGVlZFRpbWUiLCJfY3VyclBvaW50IiwiX3N0YXJ0UG9pbnQiLCJfY3VyclBvaW50ZXJzIiwiX3N0YXJ0TWFpblNjcm9sbFBvcyIsIl9yZWxlYXNlQW5pbURhdGEiLCJfcG9zUG9pbnRzIiwiX3RlbXBQb2ludCIsIl9pc1pvb21pbmdJbiIsIl9vbGRBbmRyb2lkVG91Y2hFbmRUaW1lb3V0IiwiX2N1cnJab29tZWRJdGVtSW5kZXgiLCJfY2VudGVyUG9pbnQiLCJfbGFzdFJlbGVhc2VUaW1lIiwiX2lzTXVsdGl0b3VjaCIsIl9kcmFnQW5pbUZyYW1lIiwiX21haW5TY3JvbGxTaGlmdGVkIiwiX2N1cnJlbnRQb2ludHMiLCJfY3VyclBvaW50c0Rpc3RhbmNlIiwiX3N0YXJ0UG9pbnRzRGlzdGFuY2UiLCJfY3VyckNlbnRlclBvaW50IiwiX2RpcmVjdGlvbiIsIl9pc0ZpcnN0TW92ZSIsIl9vcGFjaXR5Q2hhbmdlZCIsIl93YXNPdmVySW5pdGlhbFpvb20iLCJfaXNFcXVhbFBvaW50cyIsIl9pc05lYXJieVBvaW50cyIsInRvdWNoMCIsInRvdWNoMSIsIl9jYWxjdWxhdGVQb2ludHNEaXN0YW5jZSIsInNxcnQiLCJfZHJhZ1VwZGF0ZUxvb3AiLCJfcmVuZGVyTW92ZW1lbnQiLCJfY2FuUGFuIiwiX2Nsb3Nlc3RFbGVtZW50IiwiX3ByZXZlbnRPYmoiLCJfcHJldmVudERlZmF1bHRFdmVudEJlaGF2aW91ciIsIl9jb252ZXJ0VG91Y2hUb1BvaW50IiwiaWRlbnRpZmllciIsIl9maW5kQ2VudGVyT2ZQb2ludHMiLCJwQ2VudGVyIiwiX3B1c2hQb3NQb2ludCIsInRpbWUiLCJvIiwiX2NhbGN1bGF0ZVZlcnRpY2FsRHJhZ09wYWNpdHlSYXRpbyIsIl9lUG9pbnQxIiwiX2VQb2ludDIiLCJfdGVtcFBvaW50c0FyciIsIl90ZW1wQ291bnRlciIsIl9nZXRUb3VjaFBvaW50cyIsIl9wYW5Pck1vdmVNYWluU2Nyb2xsIiwicGFuRnJpY3Rpb24iLCJvdmVyRGlmZiIsIm5ld09mZnNldCIsInN0YXJ0T3ZlckRpZmYiLCJuZXdNYWluU2Nyb2xsUG9zaXRpb24iLCJtYWluU2Nyb2xsRGlmZiIsIm5ld1BhblBvcyIsIm5ld01haW5TY3JvbGxQb3MiLCJfb25EcmFnU3RhcnQiLCJidXR0b24iLCJfaW5pdGlhbFpvb21SdW5uaW5nIiwicG9pbnRlckluZGV4IiwicG9pbnRlcklkIiwic3RhcnRQb2ludHNMaXN0IiwibnVtUG9pbnRzIiwiX29uRHJhZ01vdmUiLCJ0b3VjaGVzTGlzdCIsInBvaW50c0Rpc3RhbmNlIiwiX2NhbGN1bGF0ZVpvb21MZXZlbCIsInpvb21GcmljdGlvbiIsIm1pblpvb21MZXZlbCIsIm1heFpvb21MZXZlbCIsIm1pbnVzRGlmZiIsInBlcmNlbnQiLCJvcGFjaXR5UmF0aW8iLCJtYWluU2Nyb2xsQ2hhbmdlZCIsIl9vbkRyYWdSZWxlYXNlIiwiTVNQT0lOVEVSX1RZUEVTIiwidG91Y2hMaXN0IiwiZ2VzdHVyZVR5cGUiLCJyZWxlYXNlVGltZURpZmYiLCJfaW5pdERyYWdSZWxlYXNlQW5pbWF0aW9uRGF0YSIsImNhbGN1bGF0ZVN3aXBlU3BlZWQiLCJpbml0YWxQYW5ZIiwiaW5pdGlhbEJnT3BhY2l0eSIsIml0ZW1DaGFuZ2VkIiwiX2ZpbmlzaFN3aXBlTWFpblNjcm9sbEdlc3R1cmUiLCJfY29tcGxldGVab29tR2VzdHVyZSIsIl9jb21wbGV0ZVBhbkdlc3R1cmUiLCJsYXN0RmxpY2tEdXJhdGlvbiIsInRlbXBSZWxlYXNlUG9zIiwibGFzdEZsaWNrT2Zmc2V0IiwibGFzdEZsaWNrRGlzdCIsImxhc3RGbGlja1NwZWVkIiwic2xvd0Rvd25SYXRpbyIsInNsb3dEb3duUmF0aW9SZXZlcnNlIiwic3BlZWREZWNlbGVyYXRpb25SYXRpbyIsInNwZWVkRGVjZWxlcmF0aW9uUmF0aW9BYnMiLCJkaXN0YW5jZU9mZnNldCIsImJhY2tBbmltRGVzdGluYXRpb24iLCJiYWNrQW5pbVN0YXJ0ZWQiLCJjYWxjdWxhdGVPdmVyQm91bmRzQW5pbU9mZnNldCIsInBvcyIsImNhbGN1bGF0ZUFuaW1PZmZzZXQiLCJ0aW1lRGlmZiIsInBhbkFuaW1Mb29wIiwiem9vbVBhbiIsImxhc3ROb3ciLCJhbmltRGF0YSIsIml0ZW1zRGlmZiIsInRvdGFsU2hpZnREaXN0IiwiaXNGYXN0TGFzdEZsaWNrIiwibmV4dENpcmNsZSIsImFuaW1hdGVUb1giLCJhbmltYXRlVG9EaXN0IiwiZmluaXNoQW5pbUR1cmF0aW9uIiwidG91Y2hlc0Rpc3RhbmNlIiwiZGVzdE9wYWNpdHkiLCJpbml0aWFsT3BhY2l0eSIsImluaXRHZXN0dXJlcyIsImFkZEV2ZW50TmFtZXMiLCJwcmVmIiwiY2FuY2VsIiwibWF4VG91Y2hQb2ludHMiLCJtc01heFRvdWNoUG9pbnRzIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsImNvbXBsZXRlRm4iLCJfaW5pdGlhbENvbnRlbnRTZXQiLCJ0aHVtYkJvdW5kcyIsImluaXRpYWxMYXlvdXQiLCJnZXRUaHVtYkJvdW5kc0ZuIiwicmVtb3ZlQXR0cmlidXRlIiwic3RhcnRBbmltYXRpb24iLCJjbG9zZVdpdGhSYWYiLCJmYWRlRXZlcnl0aGluZyIsIm1pbmlJbWciLCJ3ZWJraXRCYWNrZmFjZVZpc2liaWxpdHkiLCJpbml0YWxCZ09wYWNpdHkiLCJfaXRlbXMiLCJfdGVtcFBhbkFyZWFTaXplIiwiX2ltYWdlc1RvQXBwZW5kUG9vbCIsIl9jb250cm9sbGVyRGVmYXVsdE9wdGlvbnMiLCJlcnJvck1zZyIsImZvcmNlUHJvZ3Jlc3NpdmVMb2FkaW5nIiwiX2luaXRpYWxJc0xvb3AiLCJfZ2V0WmVyb0JvdW5kcyIsIl9jYWxjdWxhdGVTaW5nbGVJdGVtUGFuQm91bmRzIiwicmVhbFBhbkVsZW1lbnRXIiwicmVhbFBhbkVsZW1lbnRIIiwiaXNJbml0aWFsIiwiaFJhdGlvIiwidlJhdGlvIiwiX2FwcGVuZEltYWdlIiwiYmFzZURpdiIsInByZXZlbnRBbmltYXRpb24iLCJrZWVwUGxhY2Vob2xkZXIiLCJpbWFnZUFwcGVuZGVkIiwicGxhY2Vob2xkZXIiLCJfcHJlbG9hZEltYWdlIiwibG9hZENvbXBsZXRlIiwib25lcnJvciIsIl9jaGVja0ZvckVycm9yIiwiY2xlYW5VcCIsIm1heFJlcyIsImxhc3RDaGlsZCIsIl9hcHBlbmRJbWFnZXNQb29sIiwicG9vbEl0ZW0iLCJjbGVhclBsYWNlaG9sZGVyIiwibGF6eUxvYWRJdGVtIiwiaW5pdENvbnRyb2xsZXIiLCJnZXRJdGVtQXQiLCJpc05leHQiLCJwbGFjZWhvbGRlckNsYXNzTmFtZSIsIm1zcmMiLCJ0YXBUaW1lciIsInRhcFJlbGVhc2VQb2ludCIsIl9kaXNwYXRjaFRhcEV2ZW50Iiwib3JpZ0V2ZW50IiwiZURldGFpbCIsImluaXRDdXN0b21FdmVudCIsImluaXRUYXAiLCJvblRhcFN0YXJ0Iiwib25UYXBSZWxlYXNlIiwicDAiLCJjbGlja2VkVGFnTmFtZSIsIl93aGVlbERlbHRhIiwiaW5pdERlc2t0b3Bab29tIiwic2V0dXBEZXNrdG9wWm9vbSIsImV2ZW50cyIsImhhbmRsZU1vdXNlV2hlZWwiLCJtb3VzZVpvb21lZEluIiwiaGFzRHJhZ2dpbmdDbGFzcyIsInVwZGF0ZVpvb21hYmxlIiwicmVtb3ZlRHJhZ2dpbmdDbGFzcyIsImRlbHRhWSIsImRlbHRhTW9kZSIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwibmV3UGFuWCIsIm5ld1BhblkiLCJkb3VibGVUYXBab29tTGV2ZWwiLCJ6b29tT3V0IiwiX2hpc3RvcnlEZWZhdWx0T3B0aW9ucyIsImhpc3RvcnkiLCJnYWxsZXJ5VUlEIiwiX2hpc3RvcnlVcGRhdGVUaW1lb3V0IiwiX2hhc2hDaGFuZ2VUaW1lb3V0IiwiX2hhc2hBbmltQ2hlY2tUaW1lb3V0IiwiX2hhc2hDaGFuZ2VkQnlTY3JpcHQiLCJfaGFzaENoYW5nZWRCeUhpc3RvcnkiLCJfaGFzaFJlc2V0ZWQiLCJfaW5pdGlhbEhhc2giLCJfaGlzdG9yeUNoYW5nZWQiLCJfY2xvc2VkRnJvbVVSTCIsIl91cmxDaGFuZ2VkT25jZSIsIl93aW5kb3dMb2MiLCJfc3VwcG9ydHNQdXNoU3RhdGUiLCJfZ2V0SGFzaCIsImhhc2giLCJfY2xlYW5IaXN0b3J5VGltZW91dHMiLCJfcGFyc2VJdGVtSW5kZXhGcm9tVVJMIiwicGFyYW1zIiwidmFycyIsInBhaXIiLCJnYWxsZXJ5UElEcyIsInNlYXJjaGZvciIsInBpZCIsIl91cGRhdGVIYXNoIiwibmV3SGFzaCIsIm5ld1VSTCIsImluaXRIaXN0b3J5IiwidXBkYXRlVVJMIiwib25IYXNoQ2hhbmdlIiwicmV0dXJuVG9PcmlnaW5hbCIsImJhY2siLCJwdXNoU3RhdGUiLCJwYXRobmFtZSIsInBseXIiLCJmdWxsc2NyZWVuIiwiZGVidWciLCJhdXRvcGxheSIsInNlZWtUaW1lIiwidm9sdW1lIiwidm9sdW1lTWluIiwidm9sdW1lTWF4Iiwidm9sdW1lU3RlcCIsImRpc3BsYXlEdXJhdGlvbiIsImxvYWRTcHJpdGUiLCJpY29uUHJlZml4IiwiaWNvblVybCIsImNsaWNrVG9QbGF5Iiwic2hvd1Bvc3Rlck9uRW5kIiwiZGlzYWJsZUNvbnRleHRNZW51Iiwia2V5Ym9hcmRTaG9yY3V0cyIsImZvY3VzZWQiLCJnbG9iYWwiLCJ0b29sdGlwcyIsImNvbnRyb2xzIiwic2VlayIsInNlbGVjdG9ycyIsImh0bWw1IiwiZW1iZWQiLCJlZGl0YWJsZSIsIndyYXBwZXIiLCJsYWJlbHMiLCJidXR0b25zIiwicGxheSIsInJld2luZCIsIm11dGUiLCJjYXB0aW9ucyIsInByb2dyZXNzIiwicGxheWVkIiwiY3VycmVudFRpbWUiLCJ2aWRlb1dyYXBwZXIiLCJlbWJlZFdyYXBwZXIiLCJzdG9wcGVkIiwicGxheWluZyIsIm11dGVkIiwidG9vbHRpcCIsImhpZGRlbiIsImlzSW9zIiwiYWN0aXZlIiwidGFiRm9jdXMiLCJkZWZhdWx0QWN0aXZlIiwiZmFsbGJhY2siLCJhbGxvd0F1ZGlvIiwic3RvcmFnZSIsImkxOG4iLCJidWZmZXJlZCIsInRvZ2dsZU11dGUiLCJ0b2dnbGVDYXB0aW9ucyIsInRvZ2dsZUZ1bGxzY3JlZW4iLCJmcmFtZVRpdGxlIiwidXJscyIsInNvdW5kY2xvdWQiLCJsb2dQcmVmaXgiLCJfYnJvd3NlclNuaWZmIiwiYXBwTmFtZSIsImZ1bGxWZXJzaW9uIiwibWFqb3JWZXJzaW9uIiwibmFtZU9mZnNldCIsInZlck9mZnNldCIsIml4IiwiaXNJRSIsImlzRmlyZWZveCIsImlzQ2hyb21lIiwiaXNTYWZhcmkiLCJfc3VwcG9ydE1pbWUiLCJtaW1lVHlwZSIsImNhblBsYXlUeXBlIiwiX2luamVjdFNjcmlwdCIsInNvdXJjZSIsImZpcnN0U2NyaXB0VGFnIiwiX2luQXJyYXkiLCJoYXlzdGFjayIsIm5lZWRsZSIsIl9yZXBsYWNlQWxsIiwiX3dyYXAiLCJlbGVtZW50cyIsImNoaWxkIiwiY2xvbmVOb2RlIiwic2libGluZyIsIl9yZW1vdmUiLCJfcHJlcGVuZENoaWxkIiwiX3NldEF0dHJpYnV0ZXMiLCJfaXMiLCJib29sZWFuIiwiX2luc2VydEVsZW1lbnQiLCJfZ2V0Q2xhc3NuYW1lIiwic3RhdGUiLCJjbGFzc0xpc3QiLCJfaGFzQ2xhc3MiLCJfbWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiX3Byb3h5TGlzdGVuZXIiLCJldmVudE5hbWUiLCJ1c2VyTGlzdGVuZXIiLCJkZWZhdWx0TGlzdGVuZXIiLCJ1c2VDYXB0dXJlIiwiX29uIiwiX3RvZ2dsZUxpc3RlbmVyIiwiZXZlbnRMaXN0IiwiTm9kZUxpc3QiLCJOb2RlIiwiX2V2ZW50IiwiYnViYmxlcyIsInByb3BlcnRpZXMiLCJDdXN0b21FdmVudCIsIl90b2dnbGVTdGF0ZSIsIl9nZXRQZXJjZW50YWdlIiwidG9GaXhlZCIsIl9leHRlbmQiLCJvYmplY3RzIiwiZGVzdGluYXRpb24iLCJwcm9wZXJ0eSIsIm9iamVjdCIsIm51bWJlciIsIk51bWJlciIsIm5vZGVMaXN0IiwiaHRtbEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImZ1bmN0aW9uIiwiX3BhcnNlWW91VHViZUlkIiwicmVnZXgiLCIkMiIsIl9wYXJzZVZpbWVvSWQiLCJfZnVsbHNjcmVlbiIsInN1cHBvcnRzRnVsbFNjcmVlbiIsImlzRnVsbFNjcmVlbiIsInJlcXVlc3RGdWxsU2NyZWVuIiwiY2FuY2VsRnVsbFNjcmVlbiIsImZ1bGxTY3JlZW5FdmVudE5hbWUiLCJwcmVmaXgiLCJicm93c2VyUHJlZml4ZXMiLCJpbCIsIm1zRnVsbHNjcmVlbkVuYWJsZWQiLCJmdWxsc2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW5FbGVtZW50IiwiX3N0b3JhZ2UiLCJzdXBwb3J0ZWQiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVzdWx0IiwiZ2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJQbHlyIiwiY29uZmlnIiwidGltZXJzIiwib3JpZ2luYWwiLCJfdHJpZ2dlckV2ZW50IiwiX2NvbnNvbGUiLCJfbG9nIiwiX3dhcm4iLCJfZ2V0SWNvblVybCIsImFic29sdXRlIiwiYnJvd3NlciIsIl9idWlsZENvbnRyb2xzIiwiaWNvblBhdGgiLCJfc2V0dXBGdWxsc2NyZWVuIiwiZnVsbCIsIm5hdGl2ZVN1cHBvcnQiLCJfaW5GcmFtZSIsIl9mb2N1c1RyYXAiLCJfc2V0dXBDYXB0aW9ucyIsIl9nZXRFbGVtZW50IiwidmlkZW9Db250YWluZXIiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJ1c2luZ1RleHRUcmFja3MiLCJ0ZXh0VHJhY2tzIiwiY2FwdGlvblNyYyIsImtpbmQiLCJjaGlsZE5vZGVzIiwiY2FwdGlvbkV4aXN0cyIsInRyYWNrcyIsIl9zaG93Q2FwdGlvbnMiLCJ0cmFjayIsImFjdGl2ZUN1ZXMiLCJfc2V0Q2FwdGlvbiIsImdldEN1ZUFzSFRNTCIsImN1cnJlbnRDYXB0aW9uIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiY2FwdGlvbiIsInJlc3BvbnNlVGV4dCIsImxpbmVTZXBhcmF0b3IiLCJyIiwic2VuZCIsInJlZHJhdyIsIl9zZWVrTWFudWFsQ2FwdGlvbnMiLCJfdGltZWNvZGVDb21tb24iLCJ0YyIsInRjcGFpciIsIl9zdWJUY1NlY3MiLCJfdGltZWNvZGVNaW4iLCJfdGltZWNvZGVNYXgiLCJ0YzEiLCJ0YzIiLCJzdWJjb3VudCIsImNhcHRpb25zRW5hYmxlZCIsIl9nZXRFbGVtZW50cyIsInRhYmJhYmxlcyIsIl9jaGVja0ZvY3VzIiwiX2luc2VydENoaWxkRWxlbWVudHMiLCJfaW5qZWN0Q29udHJvbHMiLCJxdWVyeVNlbGVjdG9yIiwiX2ZpbmRFbGVtZW50cyIsImJhciIsIl90b2dnbGVOYXRpdmVDb250cm9scyIsIl90b2dnbGVTdHlsZUhvb2siLCJfc2V0VGl0bGUiLCJfc2V0dXBTdG9yYWdlIiwiX3VwZGF0ZVN0b3JhZ2UiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJfc2V0dXBNZWRpYSIsIm9udGFpbmVyIiwiX3NldHVwRW1iZWQiLCJtZWRpYUlkIiwiZW1iZWRJZCIsImNvbnRhaW5lcnMiLCJZVCIsIl95b3VUdWJlUmVhZHkiLCJvbllvdVR1YmVSZWFkeUNhbGxiYWNrcyIsIm9uWW91VHViZUlmcmFtZUFQSVJlYWR5IiwiVmltZW8iLCJ2aW1lb1RpbWVyIiwiX3ZpbWVvUmVhZHkiLCJzb3VuZENsb3VkIiwiU0MiLCJzb3VuZENsb3VkVGltZXIiLCJfc291bmRjbG91ZFJlYWR5IiwiX2VtYmVkUmVhZHkiLCJfc2V0dXBJbnRlcmZhY2UiLCJfcmVhZHkiLCJ2aWRlb0lkIiwiUGxheWVyIiwicGxheWVyVmFycyIsInJlbCIsInNob3dpbmZvIiwiaXZfbG9hZF9wb2xpY3kiLCJjY19sb2FkX3BvbGljeSIsImNjX2xhbmdfcHJlZiIsIndtb2RlIiwibW9kZXN0YnJhbmRpbmciLCJkaXNhYmxla2IiLCJvcmlnaW4iLCJjb2RlIiwicGxheVZpZGVvIiwicGF1c2VkIiwicGF1c2VWaWRlbyIsInN0b3BWaWRlbyIsImdldER1cmF0aW9uIiwiaXNNdXRlZCIsImdldFZpZGVvRGF0YSIsImJ1ZmZlcmluZyIsImdldFZpZGVvTG9hZGVkRnJhY3Rpb24iLCJsYXN0QnVmZmVyZWQiLCJzZWVraW5nIiwiZ2V0Q3VycmVudFRpbWUiLCJieWxpbmUiLCJ0aGVuIiwiV2lkZ2V0IiwiRXZlbnRzIiwiUkVBRFkiLCJzZWVrVG8iLCJnZXRQb3NpdGlvbiIsIlBMQVkiLCJQQVVTRSIsIlBMQVlfUFJPR1JFU1MiLCJjdXJyZW50UG9zaXRpb24iLCJMT0FEX1BST0dSRVNTIiwibG9hZFByb2dyZXNzIiwiRklOSVNIIiwiX3BsYXkiLCJfcGF1c2UiLCJfdG9nZ2xlUGxheSIsIl9yZXdpbmQiLCJfc2VlayIsIl9mb3J3YXJkIiwidGFyZ2V0VGltZSIsIl9nZXREdXJhdGlvbiIsIl91cGRhdGVTZWVrRGlzcGxheSIsInNldEN1cnJlbnRUaW1lIiwibWVkaWFEdXJhdGlvbiIsIl9jaGVja1BsYXlpbmciLCJfdG9nZ2xlQ29udHJvbHMiLCJfc2F2ZVNjcm9sbFBvc2l0aW9uIiwiX3Jlc3RvcmVTY3JvbGxQb3NpdGlvbiIsInNjcm9sbFRvIiwiX3RvZ2dsZUZ1bGxzY3JlZW4iLCJfdG9nZ2xlTXV0ZSIsIl9zZXRWb2x1bWUiLCJzZXRWb2x1bWUiLCJfaW5jcmVhc2VWb2x1bWUiLCJzdGVwIiwiX2RlY3JlYXNlVm9sdW1lIiwiX3VwZGF0ZVZvbHVtZSIsIl90b2dnbGVDYXB0aW9ucyIsIl9jaGVja0xvYWRpbmciLCJfdXBkYXRlUHJvZ3Jlc3MiLCJwcmVzc2VkIiwiX3NldFByb2dyZXNzIiwiX3VwZGF0ZVRpbWVEaXNwbGF5Iiwic2VjcyIsIm1pbnMiLCJkaXNwbGF5SG91cnMiLCJfZGlzcGxheUR1cmF0aW9uIiwiX3VwZGF0ZVNlZWtUb29sdGlwIiwiX3RpbWVVcGRhdGUiLCJjbGllbnRSZWN0IiwidmlzaWJsZSIsImlzRW50ZXJGdWxsc2NyZWVuIiwiX3NvdXJjZSIsIl91cGRhdGVTb3VyY2UiLCJnZXRWaWRlb1VybCIsImdldEN1cnJlbnRTb3VuZCIsInBlcm1hbGlua191cmwiLCJjdXJyZW50U3JjIiwic291cmNlcyIsIl9jYW5jZWxSZXF1ZXN0cyIsImZpcnN0U291cmNlIiwiY3Jvc3NvcmlnaW4iLCJwb3N0ZXIiLCJsb2FkIiwiX2Rlc3Ryb3kiLCJfdXBkYXRlUG9zdGVyIiwiX2NvbnRyb2xMaXN0ZW5lcnMiLCJpbnB1dEV2ZW50IiwidG9nZ2xlUGxheSIsImhhZFRhYkZvY3VzIiwiZ2V0Rm9jdXNFbGVtZW50IiwiZ2V0S2V5Q29kZSIsImNoZWNrVGFiRm9jdXMiLCJhbGxvd2VkIiwiY291bnQiLCJoZWxkIiwic2Vla0J5S2V5IiwiaW52ZXJ0ZWQiLCJ3ZWJraXREaXJlY3Rpb25JbnZlcnRlZEZyb21EZXZpY2UiLCJfbWVkaWFMaXN0ZW5lcnMiLCJlbmRlZCIsInJlc3RvcmUiLCJ1bmxvYWQiLCJyZXBsYWNlQ2hpbGQiLCJiYXNpYyIsImNvbnRyb2xzTWlzc2luZyIsImdldE9yaWdpbmFsIiwiZ2V0Q29udGFpbmVyIiwiZ2V0RW1iZWQiLCJnZXRNZWRpYSIsImdldFR5cGUiLCJnZXRWb2x1bWUiLCJpc1JlYWR5IiwiaXNMb2FkaW5nIiwidG9nZ2xlQ29udHJvbHMiLCJpc09sZElFIiwiaXNJcGhvbmUiLCJhdWRpbyIsInZpZGVvIiwidGFyZ2V0cyIsInBsYXllcnMiLCJpbnN0YW5jZXMiLCJob29rIiwicGxheWVyIiwibG9nIiwiY2FuY2VsYWJsZSIsImV2dCIsIkV2ZW50IiwiU2xpY2siLCJpbnN0YW5jZVVpZCIsIl8iLCJkYXRhU2V0dGluZ3MiLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhcHBlbmRBcnJvd3MiLCJhcHBlbmREb3RzIiwiYXNOYXZGb3IiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhdXRvcGxheVNwZWVkIiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwic2xpZGVyIiwiZG90cyIsImRvdHNDbGFzcyIsImRyYWdnYWJsZSIsImVkZ2VGcmljdGlvbiIsImZhZGUiLCJmb2N1c09uU2VsZWN0IiwiaW5pdGlhbFNsaWRlIiwibGF6eUxvYWQiLCJtb2JpbGVGaXJzdCIsInBhdXNlT25Ib3ZlciIsInBhdXNlT25Gb2N1cyIsInBhdXNlT25Eb3RzSG92ZXIiLCJyZXNwb25kVG8iLCJyZXNwb25zaXZlIiwicm93cyIsInNsaWRlIiwic2xpZGVzUGVyUm93Iiwic2xpZGVzVG9TaG93Iiwic2xpZGVzVG9TY3JvbGwiLCJzd2lwZVRvU2xpZGUiLCJ0b3VjaE1vdmUiLCJ0b3VjaFRocmVzaG9sZCIsInVzZUNTUyIsInVzZVRyYW5zZm9ybSIsInZhcmlhYmxlV2lkdGgiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiYXV0b1BsYXlUaW1lciIsImN1cnJlbnREaXJlY3Rpb24iLCJjdXJyZW50TGVmdCIsImN1cnJlbnRTbGlkZSIsIiRkb3RzIiwibGlzdFdpZHRoIiwibGlzdEhlaWdodCIsImxvYWRJbmRleCIsIiRuZXh0QXJyb3ciLCIkcHJldkFycm93Iiwic2xpZGVDb3VudCIsInNsaWRlV2lkdGgiLCIkc2xpZGVUcmFjayIsIiRzbGlkZXMiLCJzbGlkaW5nIiwic2xpZGVPZmZzZXQiLCJzd2lwZUxlZnQiLCIkbGlzdCIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludFNldHRpbmdzIiwiY3NzVHJhbnNpdGlvbnMiLCJmb2N1c3NlZCIsImludGVycnVwdGVkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsIm9yaWdpbmFsU2V0dGluZ3MiLCJtb3pIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJhdXRvUGxheSIsImF1dG9QbGF5Q2xlYXIiLCJhdXRvUGxheUl0ZXJhdG9yIiwiY2hhbmdlU2xpZGUiLCJjbGlja0hhbmRsZXIiLCJzZWxlY3RIYW5kbGVyIiwic2V0UG9zaXRpb24iLCJzd2lwZUhhbmRsZXIiLCJkcmFnSGFuZGxlciIsImtleUhhbmRsZXIiLCJodG1sRXhwciIsInJlZ2lzdGVyQnJlYWtwb2ludHMiLCJhY3RpdmF0ZUFEQSIsImFkZFNsaWRlIiwic2xpY2tBZGQiLCJhZGRCZWZvcmUiLCJpbnNlcnRBZnRlciIsInJlaW5pdCIsImFuaW1hdGVIZWlnaHQiLCJ0YXJnZXRIZWlnaHQiLCJhbmltYXRlU2xpZGUiLCJ0YXJnZXRMZWZ0IiwiYW5pbVByb3BzIiwiYW5pbVN0YXJ0IiwiYXBwbHlUcmFuc2l0aW9uIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJnZXROYXZUYXJnZXQiLCJzbGljayIsInNsaWRlSGFuZGxlciIsInNsaWRlVG8iLCJidWlsZEFycm93cyIsImJ1aWxkRG90cyIsImRvdCIsImdldERvdENvdW50IiwiYnVpbGRPdXQiLCJ3cmFwQWxsIiwic2V0dXBJbmZpbml0ZSIsInVwZGF0ZURvdHMiLCJzZXRTbGlkZUNsYXNzZXMiLCJidWlsZFJvd3MiLCJjIiwibmV3U2xpZGVzIiwibnVtT2ZTbGlkZXMiLCJvcmlnaW5hbFNsaWRlcyIsInNsaWRlc1BlclNlY3Rpb24iLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwicm93IiwiY2hlY2tSZXNwb25zaXZlIiwiaW5pdGlhbCIsImZvcmNlVXBkYXRlIiwiYnJlYWtwb2ludCIsInRhcmdldEJyZWFrcG9pbnQiLCJyZXNwb25kVG9XaWR0aCIsInRyaWdnZXJCcmVha3BvaW50Iiwic2xpZGVyV2lkdGgiLCJ1bnNsaWNrIiwiZG9udEFuaW1hdGUiLCJjdXJyZW50VGFyZ2V0IiwiaW5kZXhPZmZzZXQiLCJ1bmV2ZW5PZmZzZXQiLCJtZXNzYWdlIiwiY2hlY2tOYXZpZ2FibGUiLCJuYXZpZ2FibGVzIiwicHJldk5hdmlnYWJsZSIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJjbGVhblVwRXZlbnRzIiwiaW50ZXJydXB0IiwiY2xlYW5VcFNsaWRlRXZlbnRzIiwib3JpZW50YXRpb25DaGFuZ2UiLCJjbGVhblVwUm93cyIsImZhZGVTbGlkZSIsInNsaWRlSW5kZXgiLCJmYWRlU2xpZGVPdXQiLCJmaWx0ZXJTbGlkZXMiLCJzbGlja0ZpbHRlciIsImZvY3VzSGFuZGxlciIsIiRzZiIsImdldEN1cnJlbnQiLCJzbGlja0N1cnJlbnRTbGlkZSIsImJyZWFrUG9pbnQiLCJwYWdlclF0eSIsImdldExlZnQiLCJ2ZXJ0aWNhbEhlaWdodCIsInZlcnRpY2FsT2Zmc2V0IiwidGFyZ2V0U2xpZGUiLCJnZXRPcHRpb24iLCJzbGlja0dldE9wdGlvbiIsImluZGV4ZXMiLCJnZXRTbGljayIsImdldFNsaWRlQ291bnQiLCJzbGlkZXNUcmF2ZXJzZWQiLCJzd2lwZWRTbGlkZSIsImNlbnRlck9mZnNldCIsInNsaWNrR29UbyIsImNyZWF0aW9uIiwic2V0UHJvcHMiLCJzdGFydExvYWQiLCJsb2FkU2xpZGVyIiwiaW5pdGlhbGl6ZUV2ZW50cyIsInVwZGF0ZUFycm93cyIsImluaXRBREEiLCJpbml0QXJyb3dFdmVudHMiLCJpbml0RG90RXZlbnRzIiwiaW5pdFNsaWRlRXZlbnRzIiwiYWN0aW9uIiwiaW5pdFVJIiwibG9hZFJhbmdlIiwiY2xvbmVSYW5nZSIsInJhbmdlU3RhcnQiLCJyYW5nZUVuZCIsImxvYWRJbWFnZXMiLCJpbWFnZXNTY29wZSIsImltYWdlU291cmNlIiwiaW1hZ2VUb0xvYWQiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwic2xpY2tOZXh0Iiwic2xpY2tQYXVzZSIsInNsaWNrUGxheSIsInBvc3RTbGlkZSIsInNsaWNrUHJldiIsInRyeUNvdW50IiwiJGltZ3NUb0xvYWQiLCJpbml0aWFsaXppbmciLCJsYXN0VmlzaWJsZUluZGV4IiwiY3VycmVudEJyZWFrcG9pbnQiLCJyZXNwb25zaXZlU2V0dGluZ3MiLCJ3aW5kb3dEZWxheSIsInJlbW92ZVNsaWRlIiwic2xpY2tSZW1vdmUiLCJyZW1vdmVCZWZvcmUiLCJyZW1vdmVBbGwiLCJzZXRDU1MiLCJwb3NpdGlvblByb3BzIiwic2V0RGltZW5zaW9ucyIsInBhZGRpbmciLCJzZXRGYWRlIiwic2V0SGVpZ2h0Iiwic2V0T3B0aW9uIiwic2xpY2tTZXRPcHRpb24iLCJib2R5U3R5bGUiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsIk9UcmFuc2Zvcm0iLCJwZXJzcGVjdGl2ZVByb3BlcnR5Iiwid2Via2l0UGVyc3BlY3RpdmUiLCJNb3pQZXJzcGVjdGl2ZSIsIndlYmtpdFRyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwiYWxsU2xpZGVzIiwicmVtYWluZGVyIiwiaW5maW5pdGVDb3VudCIsInRhcmdldEVsZW1lbnQiLCJzeW5jIiwiYW5pbVNsaWRlIiwib2xkU2xpZGUiLCJzbGlkZUxlZnQiLCJuYXZUYXJnZXQiLCJzd2lwZURpcmVjdGlvbiIsInhEaXN0IiwieURpc3QiLCJzd2lwZUFuZ2xlIiwic3RhcnRYIiwiY3VyWCIsInN0YXJ0WSIsImN1clkiLCJhdGFuMiIsInN3aXBlRW5kIiwic3dpcGVMZW5ndGgiLCJlZGdlSGl0IiwibWluU3dpcGUiLCJmaW5nZXJDb3VudCIsIm9yaWdpbmFsRXZlbnQiLCJzd2lwZVN0YXJ0Iiwic3dpcGVNb3ZlIiwiZWRnZVdhc0hpdCIsImN1ckxlZnQiLCJwb3NpdGlvbk9mZnNldCIsInVuZmlsdGVyU2xpZGVzIiwic2xpY2tVbmZpbHRlciIsImZyb21CcmVha3BvaW50IiwiZm9vdGVyIiwic3RpY2t5Rm9vdGVyIiwiZGlzcGxheU5vbmVNZXNzYWdlIiwiZml4ZWRNZXNzYWdlIiwiY2hlY2tXYXlwb2ludFN0eWxlcyIsIm9yaWdpbmFsUmVmcmVzaCIsInNwbGl0X3VybCIsInBhZ2VfbnVtIiwidGF4b25vbXkiLCJ0ZXJtX2lkIiwicG9zdF90eXBlIiwid2lhd19nZXRfbW9yZV9wb3N0cyIsInBhZ2UiLCJleGNlcHRpb24iLCJhbGVydCIsImJ0biIsImJ0bl91cmwiLCJiZWZvcmUiLCJRdWlja0xvb2tJbml0Il0sIm1hcHBpbmdzIjoiQUFBQSxDQUFDLFVBQVNBLENBQVQsRUFBWTs7QUFFYjs7QUFFQSxNQUFJQyxxQkFBcUIsT0FBekI7O0FBRUE7QUFDQTtBQUNBLE1BQUlDLGFBQWE7QUFDZkMsYUFBU0Ysa0JBRE07O0FBR2Y7OztBQUdBRyxjQUFVLEVBTks7O0FBUWY7OztBQUdBQyxZQUFRLEVBWE87O0FBYWY7OztBQUdBQyxTQUFLLFlBQVU7QUFDYixhQUFP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QUFxQnlpRixNQUFyQixDQUE2QjU5RCxJQUE3Qjs7QUFFQTtBQUNBN2tCLFFBQUUscUJBQUYsRUFBeUJ3UixJQUF6Qjs7QUFFQWt4RSxzQkFwQmdCLENBb0JDOztBQUVsQjtBQUNDLE1BdkJELE1BdUJPLENBS047O0FBSEE7QUFDQTs7QUFJRDtBQUNBMWlGLE9BQUUsZUFBRixFQUFtQjRSLElBQW5CO0FBQ0E7QUFoREssSUFBUDtBQWtEQTtBQUNELEVBcEdEO0FBd0dBLENBMUdBLENBMEdDbEwsT0FBT2tDLE1BMUdSLENBQUQiLCJmaWxlIjoiZm91bmRhdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbigkKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgRk9VTkRBVElPTl9WRVJTSU9OID0gJzYuMi40JztcblxuLy8gR2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4vLyBUaGlzIGlzIGF0dGFjaGVkIHRvIHRoZSB3aW5kb3csIG9yIHVzZWQgYXMgYSBtb2R1bGUgZm9yIEFNRC9Ccm93c2VyaWZ5XG52YXIgRm91bmRhdGlvbiA9IHtcbiAgdmVyc2lvbjogRk9VTkRBVElPTl9WRVJTSU9OLFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgaW5pdGlhbGl6ZWQgcGx1Z2lucy5cbiAgICovXG4gIF9wbHVnaW5zOiB7fSxcblxuICAvKipcbiAgICogU3RvcmVzIGdlbmVyYXRlZCB1bmlxdWUgaWRzIGZvciBwbHVnaW4gaW5zdGFuY2VzXG4gICAqL1xuICBfdXVpZHM6IFtdLFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBmb3IgUlRMIHN1cHBvcnRcbiAgICovXG4gIHJ0bDogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gJCgnaHRtbCcpLmF0dHIoJ2RpcicpID09PSAncnRsJztcbiAgfSxcbiAgLyoqXG4gICAqIERlZmluZXMgYSBGb3VuZGF0aW9uIHBsdWdpbiwgYWRkaW5nIGl0IHRvIHRoZSBgRm91bmRhdGlvbmAgbmFtZXNwYWNlIGFuZCB0aGUgbGlzdCBvZiBwbHVnaW5zIHRvIGluaXRpYWxpemUgd2hlbiByZWZsb3dpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBUaGUgY29uc3RydWN0b3Igb2YgdGhlIHBsdWdpbi5cbiAgICovXG4gIHBsdWdpbjogZnVuY3Rpb24ocGx1Z2luLCBuYW1lKSB7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBhZGRpbmcgdG8gZ2xvYmFsIEZvdW5kYXRpb24gb2JqZWN0XG4gICAgLy8gRXhhbXBsZXM6IEZvdW5kYXRpb24uUmV2ZWFsLCBGb3VuZGF0aW9uLk9mZkNhbnZhc1xuICAgIHZhciBjbGFzc05hbWUgPSAobmFtZSB8fCBmdW5jdGlvbk5hbWUocGx1Z2luKSk7XG4gICAgLy8gT2JqZWN0IGtleSB0byB1c2Ugd2hlbiBzdG9yaW5nIHRoZSBwbHVnaW4sIGFsc28gdXNlZCB0byBjcmVhdGUgdGhlIGlkZW50aWZ5aW5nIGRhdGEgYXR0cmlidXRlIGZvciB0aGUgcGx1Z2luXG4gICAgLy8gRXhhbXBsZXM6IGRhdGEtcmV2ZWFsLCBkYXRhLW9mZi1jYW52YXNcbiAgICB2YXIgYXR0ck5hbWUgID0gaHlwaGVuYXRlKGNsYXNzTmFtZSk7XG5cbiAgICAvLyBBZGQgdG8gdGhlIEZvdW5kYXRpb24gb2JqZWN0IGFuZCB0aGUgcGx1Z2lucyBsaXN0IChmb3IgcmVmbG93aW5nKVxuICAgIHRoaXMuX3BsdWdpbnNbYXR0ck5hbWVdID0gdGhpc1tjbGFzc05hbWVdID0gcGx1Z2luO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFBvcHVsYXRlcyB0aGUgX3V1aWRzIGFycmF5IHdpdGggcG9pbnRlcnMgdG8gZWFjaCBpbmRpdmlkdWFsIHBsdWdpbiBpbnN0YW5jZS5cbiAgICogQWRkcyB0aGUgYHpmUGx1Z2luYCBkYXRhLWF0dHJpYnV0ZSB0byBwcm9ncmFtbWF0aWNhbGx5IGNyZWF0ZWQgcGx1Z2lucyB0byBhbGxvdyB1c2Ugb2YgJChzZWxlY3RvcikuZm91bmRhdGlvbihtZXRob2QpIGNhbGxzLlxuICAgKiBBbHNvIGZpcmVzIHRoZSBpbml0aWFsaXphdGlvbiBldmVudCBmb3IgZWFjaCBwbHVnaW4sIGNvbnNvbGlkYXRpbmcgcmVwZXRpdGl2ZSBjb2RlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gYW4gaW5zdGFuY2Ugb2YgYSBwbHVnaW4sIHVzdWFsbHkgYHRoaXNgIGluIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHBsdWdpbiwgcGFzc2VkIGFzIGEgY2FtZWxDYXNlZCBzdHJpbmcuXG4gICAqIEBmaXJlcyBQbHVnaW4jaW5pdFxuICAgKi9cbiAgcmVnaXN0ZXJQbHVnaW46IGZ1bmN0aW9uKHBsdWdpbiwgbmFtZSl7XG4gICAgdmFyIHBsdWdpbk5hbWUgPSBuYW1lID8gaHlwaGVuYXRlKG5hbWUpIDogZnVuY3Rpb25OYW1lKHBsdWdpbi5jb25zdHJ1Y3RvcikudG9Mb3dlckNhc2UoKTtcbiAgICBwbHVnaW4udXVpZCA9IHRoaXMuR2V0WW9EaWdpdHMoNiwgcGx1Z2luTmFtZSk7XG5cbiAgICBpZighcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApKXsgcGx1Z2luLiRlbGVtZW50LmF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWAsIHBsdWdpbi51dWlkKTsgfVxuICAgIGlmKCFwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKSl7IHBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicsIHBsdWdpbik7IH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGluaXRpYWxpemVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jaW5pdFxuICAgICAgICAgICAqL1xuICAgIHBsdWdpbi4kZWxlbWVudC50cmlnZ2VyKGBpbml0LnpmLiR7cGx1Z2luTmFtZX1gKTtcblxuICAgIHRoaXMuX3V1aWRzLnB1c2gocGx1Z2luLnV1aWQpO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuICAvKipcbiAgICogQGZ1bmN0aW9uXG4gICAqIFJlbW92ZXMgdGhlIHBsdWdpbnMgdXVpZCBmcm9tIHRoZSBfdXVpZHMgYXJyYXkuXG4gICAqIFJlbW92ZXMgdGhlIHpmUGx1Z2luIGRhdGEgYXR0cmlidXRlLCBhcyB3ZWxsIGFzIHRoZSBkYXRhLXBsdWdpbi1uYW1lIGF0dHJpYnV0ZS5cbiAgICogQWxzbyBmaXJlcyB0aGUgZGVzdHJveWVkIGV2ZW50IGZvciB0aGUgcGx1Z2luLCBjb25zb2xpZGF0aW5nIHJlcGV0aXRpdmUgY29kZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIGFuIGluc3RhbmNlIG9mIGEgcGx1Z2luLCB1c3VhbGx5IGB0aGlzYCBpbiBjb250ZXh0LlxuICAgKiBAZmlyZXMgUGx1Z2luI2Rlc3Ryb3llZFxuICAgKi9cbiAgdW5yZWdpc3RlclBsdWdpbjogZnVuY3Rpb24ocGx1Z2luKXtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IGh5cGhlbmF0ZShmdW5jdGlvbk5hbWUocGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJykuY29uc3RydWN0b3IpKTtcblxuICAgIHRoaXMuX3V1aWRzLnNwbGljZSh0aGlzLl91dWlkcy5pbmRleE9mKHBsdWdpbi51dWlkKSwgMSk7XG4gICAgcGx1Z2luLiRlbGVtZW50LnJlbW92ZUF0dHIoYGRhdGEtJHtwbHVnaW5OYW1lfWApLnJlbW92ZURhdGEoJ3pmUGx1Z2luJylcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwbHVnaW4gaGFzIGJlZW4gZGVzdHJveWVkLlxuICAgICAgICAgICAqIEBldmVudCBQbHVnaW4jZGVzdHJveWVkXG4gICAgICAgICAgICovXG4gICAgICAgICAgLnRyaWdnZXIoYGRlc3Ryb3llZC56Zi4ke3BsdWdpbk5hbWV9YCk7XG4gICAgZm9yKHZhciBwcm9wIGluIHBsdWdpbil7XG4gICAgICBwbHVnaW5bcHJvcF0gPSBudWxsOy8vY2xlYW4gdXAgc2NyaXB0IHRvIHByZXAgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbi5cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQ2F1c2VzIG9uZSBvciBtb3JlIGFjdGl2ZSBwbHVnaW5zIHRvIHJlLWluaXRpYWxpemUsIHJlc2V0dGluZyBldmVudCBsaXN0ZW5lcnMsIHJlY2FsY3VsYXRpbmcgcG9zaXRpb25zLCBldGMuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwbHVnaW5zIC0gb3B0aW9uYWwgc3RyaW5nIG9mIGFuIGluZGl2aWR1YWwgcGx1Z2luIGtleSwgYXR0YWluZWQgYnkgY2FsbGluZyBgJChlbGVtZW50KS5kYXRhKCdwbHVnaW5OYW1lJylgLCBvciBzdHJpbmcgb2YgYSBwbHVnaW4gY2xhc3MgaS5lLiBgJ2Ryb3Bkb3duJ2BcbiAgICogQGRlZmF1bHQgSWYgbm8gYXJndW1lbnQgaXMgcGFzc2VkLCByZWZsb3cgYWxsIGN1cnJlbnRseSBhY3RpdmUgcGx1Z2lucy5cbiAgICovXG4gICByZUluaXQ6IGZ1bmN0aW9uKHBsdWdpbnMpe1xuICAgICB2YXIgaXNKUSA9IHBsdWdpbnMgaW5zdGFuY2VvZiAkO1xuICAgICB0cnl7XG4gICAgICAgaWYoaXNKUSl7XG4gICAgICAgICBwbHVnaW5zLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgJCh0aGlzKS5kYXRhKCd6ZlBsdWdpbicpLl9pbml0KCk7XG4gICAgICAgICB9KTtcbiAgICAgICB9ZWxzZXtcbiAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHBsdWdpbnMsXG4gICAgICAgICBfdGhpcyA9IHRoaXMsXG4gICAgICAgICBmbnMgPSB7XG4gICAgICAgICAgICdvYmplY3QnOiBmdW5jdGlvbihwbGdzKXtcbiAgICAgICAgICAgICBwbGdzLmZvckVhY2goZnVuY3Rpb24ocCl7XG4gICAgICAgICAgICAgICBwID0gaHlwaGVuYXRlKHApO1xuICAgICAgICAgICAgICAgJCgnW2RhdGEtJysgcCArJ10nKS5mb3VuZGF0aW9uKCdfaW5pdCcpO1xuICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICB9LFxuICAgICAgICAgICAnc3RyaW5nJzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICBwbHVnaW5zID0gaHlwaGVuYXRlKHBsdWdpbnMpO1xuICAgICAgICAgICAgICQoJ1tkYXRhLScrIHBsdWdpbnMgKyddJykuZm91bmRhdGlvbignX2luaXQnKTtcbiAgICAgICAgICAgfSxcbiAgICAgICAgICAgJ3VuZGVmaW5lZCc6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgdGhpc1snb2JqZWN0J10oT2JqZWN0LmtleXMoX3RoaXMuX3BsdWdpbnMpKTtcbiAgICAgICAgICAgfVxuICAgICAgICAgfTtcbiAgICAgICAgIGZuc1t0eXBlXShwbHVnaW5zKTtcbiAgICAgICB9XG4gICAgIH1jYXRjaChlcnIpe1xuICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgfWZpbmFsbHl7XG4gICAgICAgcmV0dXJuIHBsdWdpbnM7XG4gICAgIH1cbiAgIH0sXG5cbiAgLyoqXG4gICAqIHJldHVybnMgYSByYW5kb20gYmFzZS0zNiB1aWQgd2l0aCBuYW1lc3BhY2luZ1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCAtIG51bWJlciBvZiByYW5kb20gYmFzZS0zNiBkaWdpdHMgZGVzaXJlZC4gSW5jcmVhc2UgZm9yIG1vcmUgcmFuZG9tIHN0cmluZ3MuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgLSBuYW1lIG9mIHBsdWdpbiB0byBiZSBpbmNvcnBvcmF0ZWQgaW4gdWlkLCBvcHRpb25hbC5cbiAgICogQGRlZmF1bHQge1N0cmluZ30gJycgLSBpZiBubyBwbHVnaW4gbmFtZSBpcyBwcm92aWRlZCwgbm90aGluZyBpcyBhcHBlbmRlZCB0byB0aGUgdWlkLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSAtIHVuaXF1ZSBpZFxuICAgKi9cbiAgR2V0WW9EaWdpdHM6IGZ1bmN0aW9uKGxlbmd0aCwgbmFtZXNwYWNlKXtcbiAgICBsZW5ndGggPSBsZW5ndGggfHwgNjtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoTWF0aC5wb3coMzYsIGxlbmd0aCArIDEpIC0gTWF0aC5yYW5kb20oKSAqIE1hdGgucG93KDM2LCBsZW5ndGgpKSkudG9TdHJpbmcoMzYpLnNsaWNlKDEpICsgKG5hbWVzcGFjZSA/IGAtJHtuYW1lc3BhY2V9YCA6ICcnKTtcbiAgfSxcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgcGx1Z2lucyBvbiBhbnkgZWxlbWVudHMgd2l0aGluIGBlbGVtYCAoYW5kIGBlbGVtYCBpdHNlbGYpIHRoYXQgYXJlbid0IGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIC0galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIHRoZSBlbGVtZW50IHRvIGNoZWNrIGluc2lkZS4gQWxzbyBjaGVja3MgdGhlIGVsZW1lbnQgaXRzZWxmLCB1bmxlc3MgaXQncyB0aGUgYGRvY3VtZW50YCBvYmplY3QuXG4gICAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBwbHVnaW5zIC0gQSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZS4gTGVhdmUgdGhpcyBvdXQgdG8gaW5pdGlhbGl6ZSBldmVyeXRoaW5nLlxuICAgKi9cbiAgcmVmbG93OiBmdW5jdGlvbihlbGVtLCBwbHVnaW5zKSB7XG5cbiAgICAvLyBJZiBwbHVnaW5zIGlzIHVuZGVmaW5lZCwganVzdCBncmFiIGV2ZXJ5dGhpbmdcbiAgICBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwbHVnaW5zID0gT2JqZWN0LmtleXModGhpcy5fcGx1Z2lucyk7XG4gICAgfVxuICAgIC8vIElmIHBsdWdpbnMgaXMgYSBzdHJpbmcsIGNvbnZlcnQgaXQgdG8gYW4gYXJyYXkgd2l0aCBvbmUgaXRlbVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAnc3RyaW5nJykge1xuICAgICAgcGx1Z2lucyA9IFtwbHVnaW5zXTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcGx1Z2luXG4gICAgJC5lYWNoKHBsdWdpbnMsIGZ1bmN0aW9uKGksIG5hbWUpIHtcbiAgICAgIC8vIEdldCB0aGUgY3VycmVudCBwbHVnaW5cbiAgICAgIHZhciBwbHVnaW4gPSBfdGhpcy5fcGx1Z2luc1tuYW1lXTtcblxuICAgICAgLy8gTG9jYWxpemUgdGhlIHNlYXJjaCB0byBhbGwgZWxlbWVudHMgaW5zaWRlIGVsZW0sIGFzIHdlbGwgYXMgZWxlbSBpdHNlbGYsIHVubGVzcyBlbGVtID09PSBkb2N1bWVudFxuICAgICAgdmFyICRlbGVtID0gJChlbGVtKS5maW5kKCdbZGF0YS0nK25hbWUrJ10nKS5hZGRCYWNrKCdbZGF0YS0nK25hbWUrJ10nKTtcblxuICAgICAgLy8gRm9yIGVhY2ggcGx1Z2luIGZvdW5kLCBpbml0aWFsaXplIGl0XG4gICAgICAkZWxlbS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgJGVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgLy8gRG9uJ3QgZG91YmxlLWRpcCBvbiBwbHVnaW5zXG4gICAgICAgIGlmICgkZWwuZGF0YSgnemZQbHVnaW4nKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyaWVkIHRvIGluaXRpYWxpemUgXCIrbmFtZStcIiBvbiBhbiBlbGVtZW50IHRoYXQgYWxyZWFkeSBoYXMgYSBGb3VuZGF0aW9uIHBsdWdpbi5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoJGVsLmF0dHIoJ2RhdGEtb3B0aW9ucycpKXtcbiAgICAgICAgICB2YXIgdGhpbmcgPSAkZWwuYXR0cignZGF0YS1vcHRpb25zJykuc3BsaXQoJzsnKS5mb3JFYWNoKGZ1bmN0aW9uKGUsIGkpe1xuICAgICAgICAgICAgdmFyIG9wdCA9IGUuc3BsaXQoJzonKS5tYXAoZnVuY3Rpb24oZWwpeyByZXR1cm4gZWwudHJpbSgpOyB9KTtcbiAgICAgICAgICAgIGlmKG9wdFswXSkgb3B0c1tvcHRbMF1dID0gcGFyc2VWYWx1ZShvcHRbMV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAkZWwuZGF0YSgnemZQbHVnaW4nLCBuZXcgcGx1Z2luKCQodGhpcyksIG9wdHMpKTtcbiAgICAgICAgfWNhdGNoKGVyKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVyKTtcbiAgICAgICAgfWZpbmFsbHl7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0Rm5OYW1lOiBmdW5jdGlvbk5hbWUsXG4gIHRyYW5zaXRpb25lbmQ6IGZ1bmN0aW9uKCRlbGVtKXtcbiAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XG4gICAgICAndHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgJ01velRyYW5zaXRpb24nOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAnT1RyYW5zaXRpb24nOiAnb3RyYW5zaXRpb25lbmQnXG4gICAgfTtcbiAgICB2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICBlbmQ7XG5cbiAgICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKXtcbiAgICAgIGlmICh0eXBlb2YgZWxlbS5zdHlsZVt0XSAhPT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBlbmQgPSB0cmFuc2l0aW9uc1t0XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoZW5kKXtcbiAgICAgIHJldHVybiBlbmQ7XG4gICAgfWVsc2V7XG4gICAgICBlbmQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICRlbGVtLnRyaWdnZXJIYW5kbGVyKCd0cmFuc2l0aW9uZW5kJywgWyRlbGVtXSk7XG4gICAgICB9LCAxKTtcbiAgICAgIHJldHVybiAndHJhbnNpdGlvbmVuZCc7XG4gICAgfVxuICB9XG59O1xuXG5Gb3VuZGF0aW9uLnV0aWwgPSB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiBmb3IgYXBwbHlpbmcgYSBkZWJvdW5jZSBlZmZlY3QgdG8gYSBmdW5jdGlvbiBjYWxsLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyAtIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBhdCBlbmQgb2YgdGltZW91dC5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5IC0gVGltZSBpbiBtcyB0byBkZWxheSB0aGUgY2FsbCBvZiBgZnVuY2AuXG4gICAqIEByZXR1cm5zIGZ1bmN0aW9uXG4gICAqL1xuICB0aHJvdHRsZTogZnVuY3Rpb24gKGZ1bmMsIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVyID0gbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICAgIGlmICh0aW1lciA9PT0gbnVsbCkge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuLy8gVE9ETzogY29uc2lkZXIgbm90IG1ha2luZyB0aGlzIGEgalF1ZXJ5IGZ1bmN0aW9uXG4vLyBUT0RPOiBuZWVkIHdheSB0byByZWZsb3cgdnMuIHJlLWluaXRpYWxpemVcbi8qKlxuICogVGhlIEZvdW5kYXRpb24galF1ZXJ5IG1ldGhvZC5cbiAqIEBwYXJhbSB7U3RyaW5nfEFycmF5fSBtZXRob2QgLSBBbiBhY3Rpb24gdG8gcGVyZm9ybSBvbiB0aGUgY3VycmVudCBqUXVlcnkgb2JqZWN0LlxuICovXG52YXIgZm91bmRhdGlvbiA9IGZ1bmN0aW9uKG1ldGhvZCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBtZXRob2QsXG4gICAgICAkbWV0YSA9ICQoJ21ldGEuZm91bmRhdGlvbi1tcScpLFxuICAgICAgJG5vSlMgPSAkKCcubm8tanMnKTtcblxuICBpZighJG1ldGEubGVuZ3RoKXtcbiAgICAkKCc8bWV0YSBjbGFzcz1cImZvdW5kYXRpb24tbXFcIj4nKS5hcHBlbmRUbyhkb2N1bWVudC5oZWFkKTtcbiAgfVxuICBpZigkbm9KUy5sZW5ndGgpe1xuICAgICRub0pTLnJlbW92ZUNsYXNzKCduby1qcycpO1xuICB9XG5cbiAgaWYodHlwZSA9PT0gJ3VuZGVmaW5lZCcpey8vbmVlZHMgdG8gaW5pdGlhbGl6ZSB0aGUgRm91bmRhdGlvbiBvYmplY3QsIG9yIGFuIGluZGl2aWR1YWwgcGx1Z2luLlxuICAgIEZvdW5kYXRpb24uTWVkaWFRdWVyeS5faW5pdCgpO1xuICAgIEZvdW5kYXRpb24ucmVmbG93KHRoaXMpO1xuICB9ZWxzZSBpZih0eXBlID09PSAnc3RyaW5nJyl7Ly9hbiBpbmRpdmlkdWFsIG1ldGhvZCB0byBpbnZva2Ugb24gYSBwbHVnaW4gb3IgZ3JvdXAgb2YgcGx1Z2luc1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsvL2NvbGxlY3QgYWxsIHRoZSBhcmd1bWVudHMsIGlmIG5lY2Vzc2FyeVxuICAgIHZhciBwbHVnQ2xhc3MgPSB0aGlzLmRhdGEoJ3pmUGx1Z2luJyk7Ly9kZXRlcm1pbmUgdGhlIGNsYXNzIG9mIHBsdWdpblxuXG4gICAgaWYocGx1Z0NsYXNzICE9PSB1bmRlZmluZWQgJiYgcGx1Z0NsYXNzW21ldGhvZF0gIT09IHVuZGVmaW5lZCl7Ly9tYWtlIHN1cmUgYm90aCB0aGUgY2xhc3MgYW5kIG1ldGhvZCBleGlzdFxuICAgICAgaWYodGhpcy5sZW5ndGggPT09IDEpey8vaWYgdGhlcmUncyBvbmx5IG9uZSwgY2FsbCBpdCBkaXJlY3RseS5cbiAgICAgICAgICBwbHVnQ2xhc3NbbWV0aG9kXS5hcHBseShwbHVnQ2xhc3MsIGFyZ3MpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihpLCBlbCl7Ly9vdGhlcndpc2UgbG9vcCB0aHJvdWdoIHRoZSBqUXVlcnkgY29sbGVjdGlvbiBhbmQgaW52b2tlIHRoZSBtZXRob2Qgb24gZWFjaFxuICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KCQoZWwpLmRhdGEoJ3pmUGx1Z2luJyksIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9ZWxzZXsvL2Vycm9yIGZvciBubyBjbGFzcyBvciBubyBtZXRob2RcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIldlJ3JlIHNvcnJ5LCAnXCIgKyBtZXRob2QgKyBcIicgaXMgbm90IGFuIGF2YWlsYWJsZSBtZXRob2QgZm9yIFwiICsgKHBsdWdDbGFzcyA/IGZ1bmN0aW9uTmFtZShwbHVnQ2xhc3MpIDogJ3RoaXMgZWxlbWVudCcpICsgJy4nKTtcbiAgICB9XG4gIH1lbHNley8vZXJyb3IgZm9yIGludmFsaWQgYXJndW1lbnQgdHlwZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFdlJ3JlIHNvcnJ5LCAke3R5cGV9IGlzIG5vdCBhIHZhbGlkIHBhcmFtZXRlci4gWW91IG11c3QgdXNlIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWV0aG9kIHlvdSB3aXNoIHRvIGludm9rZS5gKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbndpbmRvdy5Gb3VuZGF0aW9uID0gRm91bmRhdGlvbjtcbiQuZm4uZm91bmRhdGlvbiA9IGZvdW5kYXRpb247XG5cbi8vIFBvbHlmaWxsIGZvciByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbihmdW5jdGlvbigpIHtcbiAgaWYgKCFEYXRlLm5vdyB8fCAhd2luZG93LkRhdGUubm93KVxuICAgIHdpbmRvdy5EYXRlLm5vdyA9IERhdGUubm93ID0gZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcblxuICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoICYmICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2kpIHtcbiAgICAgIHZhciB2cCA9IHZlbmRvcnNbaV07XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZwKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9ICh3aW5kb3dbdnArJ0NhbmNlbEFuaW1hdGlvbkZyYW1lJ11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvd1t2cCsnQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ10pO1xuICB9XG4gIGlmICgvaVAoYWR8aG9uZXxvZCkuKk9TIDYvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgfHwgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkge1xuICAgIHZhciBsYXN0VGltZSA9IDA7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB2YXIgbmV4dFRpbWUgPSBNYXRoLm1heChsYXN0VGltZSArIDE2LCBub3cpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgY2FsbGJhY2sobGFzdFRpbWUgPSBuZXh0VGltZSk7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRUaW1lIC0gbm93KTtcbiAgICB9O1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGNsZWFyVGltZW91dDtcbiAgfVxuICAvKipcbiAgICogUG9seWZpbGwgZm9yIHBlcmZvcm1hbmNlLm5vdywgcmVxdWlyZWQgYnkgckFGXG4gICAqL1xuICBpZighd2luZG93LnBlcmZvcm1hbmNlIHx8ICF3aW5kb3cucGVyZm9ybWFuY2Uubm93KXtcbiAgICB3aW5kb3cucGVyZm9ybWFuY2UgPSB7XG4gICAgICBzdGFydDogRGF0ZS5ub3coKSxcbiAgICAgIG5vdzogZnVuY3Rpb24oKXsgcmV0dXJuIERhdGUubm93KCkgLSB0aGlzLnN0YXJ0OyB9XG4gICAgfTtcbiAgfVxufSkoKTtcbmlmICghRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQpIHtcbiAgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbihvVGhpcykge1xuICAgIGlmICh0eXBlb2YgdGhpcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gY2xvc2VzdCB0aGluZyBwb3NzaWJsZSB0byB0aGUgRUNNQVNjcmlwdCA1XG4gICAgICAvLyBpbnRlcm5hbCBJc0NhbGxhYmxlIGZ1bmN0aW9uXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCAtIHdoYXQgaXMgdHJ5aW5nIHRvIGJlIGJvdW5kIGlzIG5vdCBjYWxsYWJsZScpO1xuICAgIH1cblxuICAgIHZhciBhQXJncyAgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgZlRvQmluZCA9IHRoaXMsXG4gICAgICAgIGZOT1AgICAgPSBmdW5jdGlvbigpIHt9LFxuICAgICAgICBmQm91bmQgID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGZUb0JpbmQuYXBwbHkodGhpcyBpbnN0YW5jZW9mIGZOT1BcbiAgICAgICAgICAgICAgICAgPyB0aGlzXG4gICAgICAgICAgICAgICAgIDogb1RoaXMsXG4gICAgICAgICAgICAgICAgIGFBcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm90b3R5cGUpIHtcbiAgICAgIC8vIG5hdGl2ZSBmdW5jdGlvbnMgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZVxuICAgICAgZk5PUC5wcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcbiAgICB9XG4gICAgZkJvdW5kLnByb3RvdHlwZSA9IG5ldyBmTk9QKCk7XG5cbiAgICByZXR1cm4gZkJvdW5kO1xuICB9O1xufVxuLy8gUG9seWZpbGwgdG8gZ2V0IHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gaW4gSUU5XG5mdW5jdGlvbiBmdW5jdGlvbk5hbWUoZm4pIHtcbiAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvblxccyhbXihdezEsfSlcXCgvO1xuICAgIHZhciByZXN1bHRzID0gKGZ1bmNOYW1lUmVnZXgpLmV4ZWMoKGZuKS50b1N0cmluZygpKTtcbiAgICByZXR1cm4gKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGggPiAxKSA/IHJlc3VsdHNbMV0udHJpbSgpIDogXCJcIjtcbiAgfVxuICBlbHNlIGlmIChmbi5wcm90b3R5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmbi5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBmbi5wcm90b3R5cGUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VWYWx1ZShzdHIpe1xuICBpZigvdHJ1ZS8udGVzdChzdHIpKSByZXR1cm4gdHJ1ZTtcbiAgZWxzZSBpZigvZmFsc2UvLnRlc3Qoc3RyKSkgcmV0dXJuIGZhbHNlO1xuICBlbHNlIGlmKCFpc05hTihzdHIgKiAxKSkgcmV0dXJuIHBhcnNlRmxvYXQoc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cbi8vIENvbnZlcnQgUGFzY2FsQ2FzZSB0byBrZWJhYi1jYXNlXG4vLyBUaGFuayB5b3U6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg5NTU1ODBcbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xufVxuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbkZvdW5kYXRpb24uQm94ID0ge1xuICBJbU5vdFRvdWNoaW5nWW91OiBJbU5vdFRvdWNoaW5nWW91LFxuICBHZXREaW1lbnNpb25zOiBHZXREaW1lbnNpb25zLFxuICBHZXRPZmZzZXRzOiBHZXRPZmZzZXRzXG59XG5cbi8qKlxuICogQ29tcGFyZXMgdGhlIGRpbWVuc2lvbnMgb2YgYW4gZWxlbWVudCB0byBhIGNvbnRhaW5lciBhbmQgZGV0ZXJtaW5lcyBjb2xsaXNpb24gZXZlbnRzIHdpdGggY29udGFpbmVyLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdGVzdCBmb3IgY29sbGlzaW9ucy5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBwYXJlbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHVzZSBhcyBib3VuZGluZyBjb250YWluZXIuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGxyT25seSAtIHNldCB0byB0cnVlIHRvIGNoZWNrIGxlZnQgYW5kIHJpZ2h0IHZhbHVlcyBvbmx5LlxuICogQHBhcmFtIHtCb29sZWFufSB0Yk9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayB0b3AgYW5kIGJvdHRvbSB2YWx1ZXMgb25seS5cbiAqIEBkZWZhdWx0IGlmIG5vIHBhcmVudCBvYmplY3QgcGFzc2VkLCBkZXRlY3RzIGNvbGxpc2lvbnMgd2l0aCBgd2luZG93YC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgY29sbGlzaW9uIGZyZWUsIGZhbHNlIGlmIGEgY29sbGlzaW9uIGluIGFueSBkaXJlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIEltTm90VG91Y2hpbmdZb3UoZWxlbWVudCwgcGFyZW50LCBsck9ubHksIHRiT25seSkge1xuICB2YXIgZWxlRGltcyA9IEdldERpbWVuc2lvbnMoZWxlbWVudCksXG4gICAgICB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQ7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIHZhciBwYXJEaW1zID0gR2V0RGltZW5zaW9ucyhwYXJlbnQpO1xuXG4gICAgYm90dG9tID0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0IDw9IHBhckRpbXMuaGVpZ2h0ICsgcGFyRGltcy5vZmZzZXQudG9wKTtcbiAgICB0b3AgICAgPSAoZWxlRGltcy5vZmZzZXQudG9wID49IHBhckRpbXMub2Zmc2V0LnRvcCk7XG4gICAgbGVmdCAgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgPj0gcGFyRGltcy5vZmZzZXQubGVmdCk7XG4gICAgcmlnaHQgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgKyBlbGVEaW1zLndpZHRoIDw9IHBhckRpbXMud2lkdGggKyBwYXJEaW1zLm9mZnNldC5sZWZ0KTtcbiAgfVxuICBlbHNlIHtcbiAgICBib3R0b20gPSAoZWxlRGltcy5vZmZzZXQudG9wICsgZWxlRGltcy5oZWlnaHQgPD0gZWxlRGltcy53aW5kb3dEaW1zLmhlaWdodCArIGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wKTtcbiAgICB0b3AgICAgPSAoZWxlRGltcy5vZmZzZXQudG9wID49IGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wKTtcbiAgICBsZWZ0ICAgPSAoZWxlRGltcy5vZmZzZXQubGVmdCA+PSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LmxlZnQpO1xuICAgIHJpZ2h0ICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ICsgZWxlRGltcy53aWR0aCA8PSBlbGVEaW1zLndpbmRvd0RpbXMud2lkdGgpO1xuICB9XG5cbiAgdmFyIGFsbERpcnMgPSBbYm90dG9tLCB0b3AsIGxlZnQsIHJpZ2h0XTtcblxuICBpZiAobHJPbmx5KSB7XG4gICAgcmV0dXJuIGxlZnQgPT09IHJpZ2h0ID09PSB0cnVlO1xuICB9XG5cbiAgaWYgKHRiT25seSkge1xuICAgIHJldHVybiB0b3AgPT09IGJvdHRvbSA9PT0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBhbGxEaXJzLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbn07XG5cbi8qKlxuICogVXNlcyBuYXRpdmUgbWV0aG9kcyB0byByZXR1cm4gYW4gb2JqZWN0IG9mIGRpbWVuc2lvbiB2YWx1ZXMuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5IHx8IEhUTUx9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IG9yIERPTSBlbGVtZW50IGZvciB3aGljaCB0byBnZXQgdGhlIGRpbWVuc2lvbnMuIENhbiBiZSBhbnkgZWxlbWVudCBvdGhlciB0aGF0IGRvY3VtZW50IG9yIHdpbmRvdy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gbmVzdGVkIG9iamVjdCBvZiBpbnRlZ2VyIHBpeGVsIHZhbHVlc1xuICogVE9ETyAtIGlmIGVsZW1lbnQgaXMgd2luZG93LCByZXR1cm4gb25seSB0aG9zZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIEdldERpbWVuc2lvbnMoZWxlbSwgdGVzdCl7XG4gIGVsZW0gPSBlbGVtLmxlbmd0aCA/IGVsZW1bMF0gOiBlbGVtO1xuXG4gIGlmIChlbGVtID09PSB3aW5kb3cgfHwgZWxlbSA9PT0gZG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJJ20gc29ycnksIERhdmUuIEknbSBhZnJhaWQgSSBjYW4ndCBkbyB0aGF0LlwiKTtcbiAgfVxuXG4gIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHBhclJlY3QgPSBlbGVtLnBhcmVudE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5SZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgIHdpblkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICB3aW5YID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCxcbiAgICBvZmZzZXQ6IHtcbiAgICAgIHRvcDogcmVjdC50b3AgKyB3aW5ZLFxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luWFxuICAgIH0sXG4gICAgcGFyZW50RGltczoge1xuICAgICAgd2lkdGg6IHBhclJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHBhclJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogcGFyUmVjdC50b3AgKyB3aW5ZLFxuICAgICAgICBsZWZ0OiBwYXJSZWN0LmxlZnQgKyB3aW5YXG4gICAgICB9XG4gICAgfSxcbiAgICB3aW5kb3dEaW1zOiB7XG4gICAgICB3aWR0aDogd2luUmVjdC53aWR0aCxcbiAgICAgIGhlaWdodDogd2luUmVjdC5oZWlnaHQsXG4gICAgICBvZmZzZXQ6IHtcbiAgICAgICAgdG9wOiB3aW5ZLFxuICAgICAgICBsZWZ0OiB3aW5YXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2YgdG9wIGFuZCBsZWZ0IGludGVnZXIgcGl4ZWwgdmFsdWVzIGZvciBkeW5hbWljYWxseSByZW5kZXJlZCBlbGVtZW50cyxcbiAqIHN1Y2ggYXM6IFRvb2x0aXAsIFJldmVhbCwgYW5kIERyb3Bkb3duXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQgYmVpbmcgcG9zaXRpb25lZC5cbiAqIEBwYXJhbSB7alF1ZXJ5fSBhbmNob3IgLSBqUXVlcnkgb2JqZWN0IGZvciB0aGUgZWxlbWVudCdzIGFuY2hvciBwb2ludC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwb3NpdGlvbiAtIGEgc3RyaW5nIHJlbGF0aW5nIHRvIHRoZSBkZXNpcmVkIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LCByZWxhdGl2ZSB0byBpdCdzIGFuY2hvclxuICogQHBhcmFtIHtOdW1iZXJ9IHZPZmZzZXQgLSBpbnRlZ2VyIHBpeGVsIHZhbHVlIG9mIGRlc2lyZWQgdmVydGljYWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoT2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIGhvcml6b250YWwgc2VwYXJhdGlvbiBiZXR3ZWVuIGFuY2hvciBhbmQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNPdmVyZmxvdyAtIGlmIGEgY29sbGlzaW9uIGV2ZW50IGlzIGRldGVjdGVkLCBzZXRzIHRvIHRydWUgdG8gZGVmYXVsdCB0aGUgZWxlbWVudCB0byBmdWxsIHdpZHRoIC0gYW55IGRlc2lyZWQgb2Zmc2V0LlxuICogVE9ETyBhbHRlci9yZXdyaXRlIHRvIHdvcmsgd2l0aCBgZW1gIHZhbHVlcyBhcyB3ZWxsL2luc3RlYWQgb2YgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIEdldE9mZnNldHMoZWxlbWVudCwgYW5jaG9yLCBwb3NpdGlvbiwgdk9mZnNldCwgaE9mZnNldCwgaXNPdmVyZmxvdykge1xuICB2YXIgJGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgJGFuY2hvckRpbXMgPSBhbmNob3IgPyBHZXREaW1lbnNpb25zKGFuY2hvcikgOiBudWxsO1xuXG4gIHN3aXRjaCAocG9zaXRpb24pIHtcbiAgICBjYXNlICd0b3AnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCAtICgkZWxlRGltcy5oZWlnaHQgKyB2T2Zmc2V0KVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0LFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciB0b3AnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgKCRhbmNob3JEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMiksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCAtICgkZWxlRGltcy5oZWlnaHQgKyB2T2Zmc2V0KVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyIGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBpc092ZXJmbG93ID8gaE9mZnNldCA6ICgoJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAoJGFuY2hvckRpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSksXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXRcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciBsZWZ0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0IC0gKCRlbGVEaW1zLndpZHRoICsgaE9mZnNldCksXG4gICAgICAgIHRvcDogKCRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAoJGFuY2hvckRpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgcmlnaHQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgKyAkYW5jaG9yRGltcy53aWR0aCArIGhPZmZzZXQgKyAxLFxuICAgICAgICB0b3A6ICgkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgKCRhbmNob3JEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0ICsgKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLyAyKSkgLSAoJGVsZURpbXMud2lkdGggLyAyKSxcbiAgICAgICAgdG9wOiAoJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQudG9wICsgKCRlbGVEaW1zLndpbmRvd0RpbXMuaGVpZ2h0IC8gMikpIC0gKCRlbGVEaW1zLmhlaWdodCAvIDIpXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZXZlYWwnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKCRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGggLSAkZWxlRGltcy53aWR0aCkgLyAyLFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCArIHZPZmZzZXRcbiAgICAgIH1cbiAgICBjYXNlICdyZXZlYWwgZnVsbCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0LFxuICAgICAgICB0b3A6ICRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcFxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbGVmdCBib3R0b20nOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JpZ2h0IGJvdHRvbSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICRhbmNob3JEaW1zLndpZHRoICsgaE9mZnNldCAtICRlbGVEaW1zLndpZHRoLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9XG4gIH1cbn1cblxufShqUXVlcnkpO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBUaGlzIHV0aWwgd2FzIGNyZWF0ZWQgYnkgTWFyaXVzIE9sYmVydHogKlxuICogUGxlYXNlIHRoYW5rIE1hcml1cyBvbiBHaXRIdWIgL293bGJlcnR6ICpcbiAqIG9yIHRoZSB3ZWIgaHR0cDovL3d3dy5tYXJpdXNvbGJlcnR6LmRlLyAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBrZXlDb2RlcyA9IHtcbiAgOTogJ1RBQicsXG4gIDEzOiAnRU5URVInLFxuICAyNzogJ0VTQ0FQRScsXG4gIDMyOiAnU1BBQ0UnLFxuICAzNzogJ0FSUk9XX0xFRlQnLFxuICAzODogJ0FSUk9XX1VQJyxcbiAgMzk6ICdBUlJPV19SSUdIVCcsXG4gIDQwOiAnQVJST1dfRE9XTidcbn1cblxudmFyIGNvbW1hbmRzID0ge31cblxudmFyIEtleWJvYXJkID0ge1xuICBrZXlzOiBnZXRLZXlDb2RlcyhrZXlDb2RlcyksXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgKGtleWJvYXJkKSBldmVudCBhbmQgcmV0dXJucyBhIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgaXRzIGtleVxuICAgKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm4gU3RyaW5nIGtleSAtIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGtleSBwcmVzc2VkXG4gICAqL1xuICBwYXJzZUtleShldmVudCkge1xuICAgIHZhciBrZXkgPSBrZXlDb2Rlc1tldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlXSB8fCBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LndoaWNoKS50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChldmVudC5zaGlmdEtleSkga2V5ID0gYFNISUZUXyR7a2V5fWA7XG4gICAgaWYgKGV2ZW50LmN0cmxLZXkpIGtleSA9IGBDVFJMXyR7a2V5fWA7XG4gICAgaWYgKGV2ZW50LmFsdEtleSkga2V5ID0gYEFMVF8ke2tleX1gO1xuICAgIHJldHVybiBrZXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIGdpdmVuIChrZXlib2FyZCkgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb21wb25lbnQgLSBGb3VuZGF0aW9uIGNvbXBvbmVudCdzIG5hbWUsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcGFyYW0ge09iamVjdHN9IGZ1bmN0aW9ucyAtIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHRvIGJlIGV4ZWN1dGVkXG4gICAqL1xuICBoYW5kbGVLZXkoZXZlbnQsIGNvbXBvbmVudCwgZnVuY3Rpb25zKSB7XG4gICAgdmFyIGNvbW1hbmRMaXN0ID0gY29tbWFuZHNbY29tcG9uZW50XSxcbiAgICAgIGtleUNvZGUgPSB0aGlzLnBhcnNlS2V5KGV2ZW50KSxcbiAgICAgIGNtZHMsXG4gICAgICBjb21tYW5kLFxuICAgICAgZm47XG5cbiAgICBpZiAoIWNvbW1hbmRMaXN0KSByZXR1cm4gY29uc29sZS53YXJuKCdDb21wb25lbnQgbm90IGRlZmluZWQhJyk7XG5cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRMaXN0Lmx0ciA9PT0gJ3VuZGVmaW5lZCcpIHsgLy8gdGhpcyBjb21wb25lbnQgZG9lcyBub3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGx0ciBhbmQgcnRsXG4gICAgICAgIGNtZHMgPSBjb21tYW5kTGlzdDsgLy8gdXNlIHBsYWluIGxpc3RcbiAgICB9IGVsc2UgeyAvLyBtZXJnZSBsdHIgYW5kIHJ0bDogaWYgZG9jdW1lbnQgaXMgcnRsLCBydGwgb3ZlcndyaXRlcyBsdHIgYW5kIHZpY2UgdmVyc2FcbiAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIGNtZHMgPSAkLmV4dGVuZCh7fSwgY29tbWFuZExpc3QubHRyLCBjb21tYW5kTGlzdC5ydGwpO1xuXG4gICAgICAgIGVsc2UgY21kcyA9ICQuZXh0ZW5kKHt9LCBjb21tYW5kTGlzdC5ydGwsIGNvbW1hbmRMaXN0Lmx0cik7XG4gICAgfVxuICAgIGNvbW1hbmQgPSBjbWRzW2tleUNvZGVdO1xuXG4gICAgZm4gPSBmdW5jdGlvbnNbY29tbWFuZF07XG4gICAgaWYgKGZuICYmIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGVjdXRlIGZ1bmN0aW9uICBpZiBleGlzdHNcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGZuLmFwcGx5KCk7XG4gICAgICBpZiAoZnVuY3Rpb25zLmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy5oYW5kbGVkID09PSAnZnVuY3Rpb24nKSB7IC8vIGV4ZWN1dGUgZnVuY3Rpb24gd2hlbiBldmVudCB3YXMgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy5oYW5kbGVkKHJldHVyblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZ1bmN0aW9ucy51bmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy51bmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHsgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBub3QgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy51bmhhbmRsZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBmb2N1c2FibGUgZWxlbWVudHMgd2l0aGluIHRoZSBnaXZlbiBgJGVsZW1lbnRgXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICAgKiBAcmV0dXJuIHtqUXVlcnl9ICRmb2N1c2FibGUgLSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiBgJGVsZW1lbnRgXG4gICAqL1xuICBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSB7XG4gICAgcmV0dXJuICRlbGVtZW50LmZpbmQoJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdLCAqW2NvbnRlbnRlZGl0YWJsZV0nKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoISQodGhpcykuaXMoJzp2aXNpYmxlJykgfHwgJCh0aGlzKS5hdHRyKCd0YWJpbmRleCcpIDwgMCkgeyByZXR1cm4gZmFsc2U7IH0gLy9vbmx5IGhhdmUgdmlzaWJsZSBlbGVtZW50cyBhbmQgdGhvc2UgdGhhdCBoYXZlIGEgdGFiaW5kZXggZ3JlYXRlciBvciBlcXVhbCAwXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IG5hbWUgbmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcmV0dXJuIFN0cmluZyBjb21wb25lbnROYW1lXG4gICAqL1xuXG4gIHJlZ2lzdGVyKGNvbXBvbmVudE5hbWUsIGNtZHMpIHtcbiAgICBjb21tYW5kc1tjb21wb25lbnROYW1lXSA9IGNtZHM7XG4gIH1cbn1cblxuLypcbiAqIENvbnN0YW50cyBmb3IgZWFzaWVyIGNvbXBhcmluZy5cbiAqIENhbiBiZSB1c2VkIGxpa2UgRm91bmRhdGlvbi5wYXJzZUtleShldmVudCkgPT09IEZvdW5kYXRpb24ua2V5cy5TUEFDRVxuICovXG5mdW5jdGlvbiBnZXRLZXlDb2RlcyhrY3MpIHtcbiAgdmFyIGsgPSB7fTtcbiAgZm9yICh2YXIga2MgaW4ga2NzKSBrW2tjc1trY11dID0ga2NzW2tjXTtcbiAgcmV0dXJuIGs7XG59XG5cbkZvdW5kYXRpb24uS2V5Ym9hcmQgPSBLZXlib2FyZDtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vLyBEZWZhdWx0IHNldCBvZiBtZWRpYSBxdWVyaWVzXG5jb25zdCBkZWZhdWx0UXVlcmllcyA9IHtcbiAgJ2RlZmF1bHQnIDogJ29ubHkgc2NyZWVuJyxcbiAgbGFuZHNjYXBlIDogJ29ubHkgc2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSknLFxuICBwb3J0cmFpdCA6ICdvbmx5IHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCknLFxuICByZXRpbmEgOiAnb25seSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMi8xKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMmRwcHgpJ1xufTtcblxudmFyIE1lZGlhUXVlcnkgPSB7XG4gIHF1ZXJpZXM6IFtdLFxuXG4gIGN1cnJlbnQ6ICcnLFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgbWVkaWEgcXVlcnkgaGVscGVyLCBieSBleHRyYWN0aW5nIHRoZSBicmVha3BvaW50IGxpc3QgZnJvbSB0aGUgQ1NTIGFuZCBhY3RpdmF0aW5nIHRoZSBicmVha3BvaW50IHdhdGNoZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBleHRyYWN0ZWRTdHlsZXMgPSAkKCcuZm91bmRhdGlvbi1tcScpLmNzcygnZm9udC1mYW1pbHknKTtcbiAgICB2YXIgbmFtZWRRdWVyaWVzO1xuXG4gICAgbmFtZWRRdWVyaWVzID0gcGFyc2VTdHlsZVRvT2JqZWN0KGV4dHJhY3RlZFN0eWxlcyk7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gbmFtZWRRdWVyaWVzKSB7XG4gICAgICBpZihuYW1lZFF1ZXJpZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBzZWxmLnF1ZXJpZXMucHVzaCh7XG4gICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgIHZhbHVlOiBgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR7bmFtZWRRdWVyaWVzW2tleV19KWBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKTtcblxuICAgIHRoaXMuX3dhdGNoZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBzY3JlZW4gaXMgYXQgbGVhc3QgYXMgd2lkZSBhcyBhIGJyZWFrcG9pbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2l6ZSAtIE5hbWUgb2YgdGhlIGJyZWFrcG9pbnQgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGJyZWFrcG9pbnQgbWF0Y2hlcywgYGZhbHNlYCBpZiBpdCdzIHNtYWxsZXIuXG4gICAqL1xuICBhdExlYXN0KHNpemUpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmdldChzaXplKTtcblxuICAgIGlmIChxdWVyeSkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5KS5tYXRjaGVzO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgbWVkaWEgcXVlcnkgb2YgYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGdldC5cbiAgICogQHJldHVybnMge1N0cmluZ3xudWxsfSAtIFRoZSBtZWRpYSBxdWVyeSBvZiB0aGUgYnJlYWtwb2ludCwgb3IgYG51bGxgIGlmIHRoZSBicmVha3BvaW50IGRvZXNuJ3QgZXhpc3QuXG4gICAqL1xuICBnZXQoc2l6ZSkge1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5xdWVyaWVzKSB7XG4gICAgICBpZih0aGlzLnF1ZXJpZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuICAgICAgICBpZiAoc2l6ZSA9PT0gcXVlcnkubmFtZSkgcmV0dXJuIHF1ZXJ5LnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgbmFtZSBieSB0ZXN0aW5nIGV2ZXJ5IGJyZWFrcG9pbnQgYW5kIHJldHVybmluZyB0aGUgbGFzdCBvbmUgdG8gbWF0Y2ggKHRoZSBiaWdnZXN0IG9uZSkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBOYW1lIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICBfZ2V0Q3VycmVudFNpemUoKSB7XG4gICAgdmFyIG1hdGNoZWQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuXG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocXVlcnkudmFsdWUpLm1hdGNoZXMpIHtcbiAgICAgICAgbWF0Y2hlZCA9IHF1ZXJ5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbWF0Y2hlZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBtYXRjaGVkLm5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWN0aXZhdGVzIHRoZSBicmVha3BvaW50IHdhdGNoZXIsIHdoaWNoIGZpcmVzIGFuIGV2ZW50IG9uIHRoZSB3aW5kb3cgd2hlbmV2ZXIgdGhlIGJyZWFrcG9pbnQgY2hhbmdlcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfd2F0Y2hlcigpIHtcbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5tZWRpYXF1ZXJ5JywgKCkgPT4ge1xuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpLCBjdXJyZW50U2l6ZSA9IHRoaXMuY3VycmVudDtcblxuICAgICAgaWYgKG5ld1NpemUgIT09IGN1cnJlbnRTaXplKSB7XG4gICAgICAgIC8vIENoYW5nZSB0aGUgY3VycmVudCBtZWRpYSBxdWVyeVxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBuZXdTaXplO1xuXG4gICAgICAgIC8vIEJyb2FkY2FzdCB0aGUgbWVkaWEgcXVlcnkgY2hhbmdlIG9uIHRoZSB3aW5kb3dcbiAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIFtuZXdTaXplLCBjdXJyZW50U2l6ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG4vLyBtYXRjaE1lZGlhKCkgcG9seWZpbGwgLSBUZXN0IGEgQ1NTIG1lZGlhIHR5cGUvcXVlcnkgaW4gSlMuXG4vLyBBdXRob3JzICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLCBQYXVsIElyaXNoLCBOaWNob2xhcyBaYWthcywgRGF2aWQgS25pZ2h0LiBEdWFsIE1JVC9CU0QgbGljZW5zZVxud2luZG93Lm1hdGNoTWVkaWEgfHwgKHdpbmRvdy5tYXRjaE1lZGlhID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IG1hdGNoTWVkaXVtIGFwaSBzdWNoIGFzIElFIDkgYW5kIHdlYmtpdFxuICB2YXIgc3R5bGVNZWRpYSA9ICh3aW5kb3cuc3R5bGVNZWRpYSB8fCB3aW5kb3cubWVkaWEpO1xuXG4gIC8vIEZvciB0aG9zZSB0aGF0IGRvbid0IHN1cHBvcnQgbWF0Y2hNZWRpdW1cbiAgaWYgKCFzdHlsZU1lZGlhKSB7XG4gICAgdmFyIHN0eWxlICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgIHNjcmlwdCAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdLFxuICAgIGluZm8gICAgICAgID0gbnVsbDtcblxuICAgIHN0eWxlLnR5cGUgID0gJ3RleHQvY3NzJztcbiAgICBzdHlsZS5pZCAgICA9ICdtYXRjaG1lZGlhanMtdGVzdCc7XG5cbiAgICBzY3JpcHQgJiYgc2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBzY3JpcHQpO1xuXG4gICAgLy8gJ3N0eWxlLmN1cnJlbnRTdHlsZScgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnd2luZG93LmdldENvbXB1dGVkU3R5bGUnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICBpbmZvID0gKCdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cpICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN0eWxlLCBudWxsKSB8fCBzdHlsZS5jdXJyZW50U3R5bGU7XG5cbiAgICBzdHlsZU1lZGlhID0ge1xuICAgICAgbWF0Y2hNZWRpdW0obWVkaWEpIHtcbiAgICAgICAgdmFyIHRleHQgPSBgQG1lZGlhICR7bWVkaWF9eyAjbWF0Y2htZWRpYWpzLXRlc3QgeyB3aWR0aDogMXB4OyB9IH1gO1xuXG4gICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBpZiBtZWRpYSBxdWVyeSBpcyB0cnVlIG9yIGZhbHNlXG4gICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24obWVkaWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hlczogc3R5bGVNZWRpYS5tYXRjaE1lZGl1bShtZWRpYSB8fCAnYWxsJyksXG4gICAgICBtZWRpYTogbWVkaWEgfHwgJ2FsbCdcbiAgICB9O1xuICB9XG59KCkpO1xuXG4vLyBUaGFuayB5b3U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nXG5mdW5jdGlvbiBwYXJzZVN0eWxlVG9PYmplY3Qoc3RyKSB7XG4gIHZhciBzdHlsZU9iamVjdCA9IHt9O1xuXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgfVxuXG4gIHN0ciA9IHN0ci50cmltKCkuc2xpY2UoMSwgLTEpOyAvLyBicm93c2VycyByZS1xdW90ZSBzdHJpbmcgc3R5bGUgdmFsdWVzXG5cbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHlsZU9iamVjdCA9IHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbihyZXQsIHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gcGFydHNbMF07XG4gICAgdmFyIHZhbCA9IHBhcnRzWzFdO1xuICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuXG4gICAgLy8gbWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcbiAgICAvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG4gICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cbiAgICBpZiAoIXJldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXRba2V5XSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0W2tleV0pKSB7XG4gICAgICByZXRba2V5XS5wdXNoKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldFtrZXldID0gW3JldFtrZXldLCB2YWxdO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHN0eWxlT2JqZWN0O1xufVxuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogTW90aW9uIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tb3Rpb25cbiAqL1xuXG5jb25zdCBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG5jb25zdCBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuY29uc3QgTW90aW9uID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb3ZlKGR1cmF0aW9uLCBlbGVtLCBmbil7XG4gIHZhciBhbmltLCBwcm9nLCBzdGFydCA9IG51bGw7XG4gIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcblxuICBmdW5jdGlvbiBtb3ZlKHRzKXtcbiAgICBpZighc3RhcnQpIHN0YXJ0ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgIC8vIGNvbnNvbGUubG9nKHN0YXJ0LCB0cyk7XG4gICAgcHJvZyA9IHRzIC0gc3RhcnQ7XG4gICAgZm4uYXBwbHkoZWxlbSk7XG5cbiAgICBpZihwcm9nIDwgZHVyYXRpb24peyBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlLCBlbGVtKTsgfVxuICAgIGVsc2V7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbSk7XG4gICAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICB9XG4gIH1cbiAgYW5pbSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobW92ZSk7XG59XG5cbi8qKlxuICogQW5pbWF0ZXMgYW4gZWxlbWVudCBpbiBvciBvdXQgdXNpbmcgYSBDU1MgdHJhbnNpdGlvbiBjbGFzcy5cbiAqIEBmdW5jdGlvblxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJbiAtIERlZmluZXMgaWYgdGhlIGFuaW1hdGlvbiBpcyBpbiBvciBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvciBIVE1MIG9iamVjdCB0byBhbmltYXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IGFuaW1hdGlvbiAtIENTUyBjbGFzcyB0byB1c2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIHRvIHJ1biB3aGVuIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC5cbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZShpc0luLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gIGVsZW1lbnQgPSAkKGVsZW1lbnQpLmVxKDApO1xuXG4gIGlmICghZWxlbWVudC5sZW5ndGgpIHJldHVybjtcblxuICB2YXIgaW5pdENsYXNzID0gaXNJbiA/IGluaXRDbGFzc2VzWzBdIDogaW5pdENsYXNzZXNbMV07XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzSW4gPyBhY3RpdmVDbGFzc2VzWzBdIDogYWN0aXZlQ2xhc3Nlc1sxXTtcblxuICAvLyBTZXQgdXAgdGhlIGFuaW1hdGlvblxuICByZXNldCgpO1xuXG4gIGVsZW1lbnRcbiAgICAuYWRkQ2xhc3MoYW5pbWF0aW9uKVxuICAgIC5jc3MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhpbml0Q2xhc3MpO1xuICAgIGlmIChpc0luKSBlbGVtZW50LnNob3coKTtcbiAgfSk7XG5cbiAgLy8gU3RhcnQgdGhlIGFuaW1hdGlvblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7XG4gICAgZWxlbWVudFxuICAgICAgLmNzcygndHJhbnNpdGlvbicsICcnKVxuICAgICAgLmFkZENsYXNzKGFjdGl2ZUNsYXNzKTtcbiAgfSk7XG5cbiAgLy8gQ2xlYW4gdXAgdGhlIGFuaW1hdGlvbiB3aGVuIGl0IGZpbmlzaGVzXG4gIGVsZW1lbnQub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZChlbGVtZW50KSwgZmluaXNoKTtcblxuICAvLyBIaWRlcyB0aGUgZWxlbWVudCAoZm9yIG91dCBhbmltYXRpb25zKSwgcmVzZXRzIHRoZSBlbGVtZW50LCBhbmQgcnVucyBhIGNhbGxiYWNrXG4gIGZ1bmN0aW9uIGZpbmlzaCgpIHtcbiAgICBpZiAoIWlzSW4pIGVsZW1lbnQuaGlkZSgpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKGNiKSBjYi5hcHBseShlbGVtZW50KTtcbiAgfVxuXG4gIC8vIFJlc2V0cyB0cmFuc2l0aW9ucyBhbmQgcmVtb3ZlcyBtb3Rpb24tc3BlY2lmaWMgY2xhc3Nlc1xuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBlbGVtZW50WzBdLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IDA7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcyhgJHtpbml0Q2xhc3N9ICR7YWN0aXZlQ2xhc3N9ICR7YW5pbWF0aW9ufWApO1xuICB9XG59XG5cbkZvdW5kYXRpb24uTW92ZSA9IE1vdmU7XG5Gb3VuZGF0aW9uLk1vdGlvbiA9IE1vdGlvbjtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBOZXN0ID0ge1xuICBGZWF0aGVyKG1lbnUsIHR5cGUgPSAnemYnKSB7XG4gICAgbWVudS5hdHRyKCdyb2xlJywgJ21lbnViYXInKTtcblxuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5hdHRyKHsncm9sZSc6ICdtZW51aXRlbSd9KSxcbiAgICAgICAgc3ViTWVudUNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudWAsXG4gICAgICAgIHN1Ykl0ZW1DbGFzcyA9IGAke3N1Yk1lbnVDbGFzc30taXRlbWAsXG4gICAgICAgIGhhc1N1YkNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudS1wYXJlbnRgO1xuXG4gICAgbWVudS5maW5kKCdhOmZpcnN0JykuYXR0cigndGFiaW5kZXgnLCAwKTtcblxuICAgIGl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICRzdWIgPSAkaXRlbS5jaGlsZHJlbigndWwnKTtcblxuICAgICAgaWYgKCRzdWIubGVuZ3RoKSB7XG4gICAgICAgICRpdGVtXG4gICAgICAgICAgLmFkZENsYXNzKGhhc1N1YkNsYXNzKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICRpdGVtLmNoaWxkcmVuKCdhOmZpcnN0JykudGV4dCgpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgJHN1YlxuICAgICAgICAgIC5hZGRDbGFzcyhgc3VibWVudSAke3N1Yk1lbnVDbGFzc31gKVxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdkYXRhLXN1Ym1lbnUnOiAnJyxcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICAgICAncm9sZSc6ICdtZW51J1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGl0ZW0ucGFyZW50KCdbZGF0YS1zdWJtZW51XScpLmxlbmd0aCkge1xuICAgICAgICAkaXRlbS5hZGRDbGFzcyhgaXMtc3VibWVudS1pdGVtICR7c3ViSXRlbUNsYXNzfWApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIEJ1cm4obWVudSwgdHlwZSkge1xuICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpLFxuICAgICAgICBzdWJNZW51Q2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51YCxcbiAgICAgICAgc3ViSXRlbUNsYXNzID0gYCR7c3ViTWVudUNsYXNzfS1pdGVtYCxcbiAgICAgICAgaGFzU3ViQ2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51LXBhcmVudGA7XG5cbiAgICBtZW51XG4gICAgICAuZmluZCgnPmxpLCAubWVudSwgLm1lbnUgPiBsaScpXG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7c3ViTWVudUNsYXNzfSAke3N1Ykl0ZW1DbGFzc30gJHtoYXNTdWJDbGFzc30gaXMtc3VibWVudS1pdGVtIHN1Ym1lbnUgaXMtYWN0aXZlYClcbiAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyggICAgICBtZW51LmZpbmQoJy4nICsgc3ViTWVudUNsYXNzICsgJywgLicgKyBzdWJJdGVtQ2xhc3MgKyAnLCAuaGFzLXN1Ym1lbnUsIC5pcy1zdWJtZW51LWl0ZW0sIC5zdWJtZW51LCBbZGF0YS1zdWJtZW51XScpXG4gICAgLy8gICAgICAgICAgIC5yZW1vdmVDbGFzcyhzdWJNZW51Q2xhc3MgKyAnICcgKyBzdWJJdGVtQ2xhc3MgKyAnIGhhcy1zdWJtZW51IGlzLXN1Ym1lbnUtaXRlbSBzdWJtZW51JylcbiAgICAvLyAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3VibWVudScpKTtcbiAgICAvLyBpdGVtcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgLy8gICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgIC8vICAgICAgICRzdWIgPSAkaXRlbS5jaGlsZHJlbigndWwnKTtcbiAgICAvLyAgIGlmKCRpdGVtLnBhcmVudCgnW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpe1xuICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaXMtc3VibWVudS1pdGVtICcgKyBzdWJJdGVtQ2xhc3MpO1xuICAgIC8vICAgfVxuICAgIC8vICAgaWYoJHN1Yi5sZW5ndGgpe1xuICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaGFzLXN1Ym1lbnUnKTtcbiAgICAvLyAgICAgJHN1Yi5yZW1vdmVDbGFzcygnc3VibWVudSAnICsgc3ViTWVudUNsYXNzKS5yZW1vdmVBdHRyKCdkYXRhLXN1Ym1lbnUnKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9KTtcbiAgfVxufVxuXG5Gb3VuZGF0aW9uLk5lc3QgPSBOZXN0O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmZ1bmN0aW9uIFRpbWVyKGVsZW0sIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sLy9vcHRpb25zIGlzIGFuIG9iamVjdCBmb3IgZWFzaWx5IGFkZGluZyBmZWF0dXJlcyBsYXRlci5cbiAgICAgIG5hbWVTcGFjZSA9IE9iamVjdC5rZXlzKGVsZW0uZGF0YSgpKVswXSB8fCAndGltZXInLFxuICAgICAgcmVtYWluID0gLTEsXG4gICAgICBzdGFydCxcbiAgICAgIHRpbWVyO1xuXG4gIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcblxuICB0aGlzLnJlc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICByZW1haW4gPSAtMTtcbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfVxuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgLy8gaWYoIWVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICByZW1haW4gPSByZW1haW4gPD0gMCA/IGR1cmF0aW9uIDogcmVtYWluO1xuICAgIGVsZW0uZGF0YSgncGF1c2VkJywgZmFsc2UpO1xuICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIGlmKG9wdGlvbnMuaW5maW5pdGUpe1xuICAgICAgICBfdGhpcy5yZXN0YXJ0KCk7Ly9yZXJ1biB0aGUgdGltZXIuXG4gICAgICB9XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9LCByZW1haW4pO1xuICAgIGVsZW0udHJpZ2dlcihgdGltZXJzdGFydC56Zi4ke25hbWVTcGFjZX1gKTtcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAvL2lmKGVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIHRydWUpO1xuICAgIHZhciBlbmQgPSBEYXRlLm5vdygpO1xuICAgIHJlbWFpbiA9IHJlbWFpbiAtIChlbmQgLSBzdGFydCk7XG4gICAgZWxlbS50cmlnZ2VyKGB0aW1lcnBhdXNlZC56Zi4ke25hbWVTcGFjZX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGltYWdlcyAtIEltYWdlKHMpIHRvIGNoZWNrIGlmIGxvYWRlZC5cbiAqIEBwYXJhbSB7RnVuY30gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gaW1hZ2UgaXMgZnVsbHkgbG9hZGVkLlxuICovXG5mdW5jdGlvbiBvbkltYWdlc0xvYWRlZChpbWFnZXMsIGNhbGxiYWNrKXtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgdW5sb2FkZWQgPSBpbWFnZXMubGVuZ3RoO1xuXG4gIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBpbWFnZXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5jb21wbGV0ZSkge1xuICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHRoaXMubmF0dXJhbFdpZHRoICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLm5hdHVyYWxXaWR0aCA+IDApIHtcbiAgICAgIHNpbmdsZUltYWdlTG9hZGVkKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJCh0aGlzKS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2luZ2xlSW1hZ2VMb2FkZWQoKSB7XG4gICAgdW5sb2FkZWQtLTtcbiAgICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG59XG5cbkZvdW5kYXRpb24uVGltZXIgPSBUaW1lcjtcbkZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQgPSBvbkltYWdlc0xvYWRlZDtcblxufShqUXVlcnkpO1xuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKldvcmsgaW5zcGlyZWQgYnkgbXVsdGlwbGUganF1ZXJ5IHN3aXBlIHBsdWdpbnMqKlxuLy8qKkRvbmUgYnkgWW9oYWkgQXJhcmF0ICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuKGZ1bmN0aW9uKCQpIHtcblxuICAkLnNwb3RTd2lwZSA9IHtcbiAgICB2ZXJzaW9uOiAnMS4wLjAnLFxuICAgIGVuYWJsZWQ6ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICBwcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gICAgbW92ZVRocmVzaG9sZDogNzUsXG4gICAgdGltZVRocmVzaG9sZDogMjAwXG4gIH07XG5cbiAgdmFyICAgc3RhcnRQb3NYLFxuICAgICAgICBzdGFydFBvc1ksXG4gICAgICAgIHN0YXJ0VGltZSxcbiAgICAgICAgZWxhcHNlZFRpbWUsXG4gICAgICAgIGlzTW92aW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHtcbiAgICAvLyAgYWxlcnQodGhpcyk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQpO1xuICAgIGlzTW92aW5nID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgaWYgKCQuc3BvdFN3aXBlLnByZXZlbnREZWZhdWx0KSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgIGlmKGlzTW92aW5nKSB7XG4gICAgICB2YXIgeCA9IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIHZhciB5ID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgdmFyIGR4ID0gc3RhcnRQb3NYIC0geDtcbiAgICAgIHZhciBkeSA9IHN0YXJ0UG9zWSAtIHk7XG4gICAgICB2YXIgZGlyO1xuICAgICAgZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcbiAgICAgIGlmKE1hdGguYWJzKGR4KSA+PSAkLnNwb3RTd2lwZS5tb3ZlVGhyZXNob2xkICYmIGVsYXBzZWRUaW1lIDw9ICQuc3BvdFN3aXBlLnRpbWVUaHJlc2hvbGQpIHtcbiAgICAgICAgZGlyID0gZHggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgIH1cbiAgICAgIC8vIGVsc2UgaWYoTWF0aC5hYnMoZHkpID49ICQuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gJC5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuICAgICAgLy8gICBkaXIgPSBkeSA+IDAgPyAnZG93bicgOiAndXAnO1xuICAgICAgLy8gfVxuICAgICAgaWYoZGlyKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25Ub3VjaEVuZC5jYWxsKHRoaXMpO1xuICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ3N3aXBlJywgZGlyKS50cmlnZ2VyKGBzd2lwZSR7ZGlyfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT0gMSkge1xuICAgICAgc3RhcnRQb3NYID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgc3RhcnRQb3NZID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgaXNNb3ZpbmcgPSB0cnVlO1xuICAgICAgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyICYmIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGVhcmRvd24oKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgfVxuXG4gICQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHsgc2V0dXA6IGluaXQgfTtcblxuICAkLmVhY2goWydsZWZ0JywgJ3VwJywgJ2Rvd24nLCAncmlnaHQnXSwgZnVuY3Rpb24gKCkge1xuICAgICQuZXZlbnQuc3BlY2lhbFtgc3dpcGUke3RoaXN9YF0gPSB7IHNldHVwOiBmdW5jdGlvbigpe1xuICAgICAgJCh0aGlzKS5vbignc3dpcGUnLCAkLm5vb3ApO1xuICAgIH0gfTtcbiAgfSk7XG59KShqUXVlcnkpO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIE1ldGhvZCBmb3IgYWRkaW5nIHBzdWVkbyBkcmFnIGV2ZW50cyB0byBlbGVtZW50cyAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuIWZ1bmN0aW9uKCQpe1xuICAkLmZuLmFkZFRvdWNoID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oaSxlbCl7XG4gICAgICAkKGVsKS5iaW5kKCd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsZnVuY3Rpb24oKXtcbiAgICAgICAgLy93ZSBwYXNzIHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QgYmVjYXVzZSB0aGUgalF1ZXJ5IGV2ZW50XG4gICAgICAgIC8vb2JqZWN0IGlzIG5vcm1hbGl6ZWQgdG8gdzNjIHNwZWNzIGFuZCBkb2VzIG5vdCBwcm92aWRlIHRoZSBUb3VjaExpc3RcbiAgICAgICAgaGFuZGxlVG91Y2goZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGFuZGxlVG91Y2ggPSBmdW5jdGlvbihldmVudCl7XG4gICAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIGZpcnN0ID0gdG91Y2hlc1swXSxcbiAgICAgICAgICBldmVudFR5cGVzID0ge1xuICAgICAgICAgICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgICAgICAgICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgdG91Y2hlbmQ6ICdtb3VzZXVwJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHlwZSA9IGV2ZW50VHlwZXNbZXZlbnQudHlwZV0sXG4gICAgICAgICAgc2ltdWxhdGVkRXZlbnRcbiAgICAgICAgO1xuXG4gICAgICBpZignTW91c2VFdmVudCcgaW4gd2luZG93ICYmIHR5cGVvZiB3aW5kb3cuTW91c2VFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IG5ldyB3aW5kb3cuTW91c2VFdmVudCh0eXBlLCB7XG4gICAgICAgICAgJ2J1YmJsZXMnOiB0cnVlLFxuICAgICAgICAgICdjYW5jZWxhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnc2NyZWVuWCc6IGZpcnN0LnNjcmVlblgsXG4gICAgICAgICAgJ3NjcmVlblknOiBmaXJzdC5zY3JlZW5ZLFxuICAgICAgICAgICdjbGllbnRYJzogZmlyc3QuY2xpZW50WCxcbiAgICAgICAgICAnY2xpZW50WSc6IGZpcnN0LmNsaWVudFlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMSwgZmlyc3Quc2NyZWVuWCwgZmlyc3Quc2NyZWVuWSwgZmlyc3QuY2xpZW50WCwgZmlyc3QuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAvKmxlZnQqLywgbnVsbCk7XG4gICAgICB9XG4gICAgICBmaXJzdC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7XG4gICAgfTtcbiAgfTtcbn0oalF1ZXJ5KTtcblxuXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipGcm9tIHRoZSBqUXVlcnkgTW9iaWxlIExpYnJhcnkqKlxuLy8qKm5lZWQgdG8gcmVjcmVhdGUgZnVuY3Rpb25hbGl0eSoqXG4vLyoqYW5kIHRyeSB0byBpbXByb3ZlIGlmIHBvc3NpYmxlKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4vKiBSZW1vdmluZyB0aGUgalF1ZXJ5IGZ1bmN0aW9uICoqKipcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4oZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkge1xuXG5cdHZhciAkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLFxuXHRcdC8vIHN1cHBvcnRUb3VjaCA9ICQubW9iaWxlLnN1cHBvcnQudG91Y2gsXG5cdFx0dG91Y2hTdGFydEV2ZW50ID0gJ3RvdWNoc3RhcnQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoc3RhcnRcIiA6IFwibW91c2Vkb3duXCIsXG5cdFx0dG91Y2hTdG9wRXZlbnQgPSAndG91Y2hlbmQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoZW5kXCIgOiBcIm1vdXNldXBcIixcblx0XHR0b3VjaE1vdmVFdmVudCA9ICd0b3VjaG1vdmUnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNobW92ZVwiIDogXCJtb3VzZW1vdmVcIjtcblxuXHQvLyBzZXR1cCBuZXcgZXZlbnQgc2hvcnRjdXRzXG5cdCQuZWFjaCggKCBcInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIFwiICtcblx0XHRcInN3aXBlIHN3aXBlbGVmdCBzd2lwZXJpZ2h0XCIgKS5zcGxpdCggXCIgXCIgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0XHQkLmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRyZXR1cm4gZm4gPyB0aGlzLmJpbmQoIG5hbWUsIGZuICkgOiB0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXG5cdFx0Ly8galF1ZXJ5IDwgMS44XG5cdFx0aWYgKCAkLmF0dHJGbiApIHtcblx0XHRcdCQuYXR0ckZuWyBuYW1lIF0gPSB0cnVlO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gdHJpZ2dlckN1c3RvbUV2ZW50KCBvYmosIGV2ZW50VHlwZSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHR2YXIgb3JpZ2luYWxUeXBlID0gZXZlbnQudHlwZTtcblx0XHRldmVudC50eXBlID0gZXZlbnRUeXBlO1xuXHRcdGlmICggYnViYmxlICkge1xuXHRcdFx0JC5ldmVudC50cmlnZ2VyKCBldmVudCwgdW5kZWZpbmVkLCBvYmogKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5ldmVudC5kaXNwYXRjaC5jYWxsKCBvYmosIGV2ZW50ICk7XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSBvcmlnaW5hbFR5cGU7XG5cdH1cblxuXHQvLyBhbHNvIGhhbmRsZXMgdGFwaG9sZFxuXG5cdC8vIEFsc28gaGFuZGxlcyBzd2lwZWxlZnQsIHN3aXBlcmlnaHRcblx0JC5ldmVudC5zcGVjaWFsLnN3aXBlID0ge1xuXG5cdFx0Ly8gTW9yZSB0aGFuIHRoaXMgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQsIGFuZCB3ZSB3aWxsIHN1cHByZXNzIHNjcm9sbGluZy5cblx0XHRzY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkOiAzMCxcblxuXHRcdC8vIE1vcmUgdGltZSB0aGFuIHRoaXMsIGFuZCBpdCBpc24ndCBhIHN3aXBlLlxuXHRcdGR1cmF0aW9uVGhyZXNob2xkOiAxMDAwLFxuXG5cdFx0Ly8gU3dpcGUgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBtb3JlIHRoYW4gdGhpcy5cblx0XHRob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQ6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID49IDIgPyAxNSA6IDMwLFxuXG5cdFx0Ly8gU3dpcGUgdmVydGljYWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbGVzcyB0aGFuIHRoaXMuXG5cdFx0dmVydGljYWxEaXN0YW5jZVRocmVzaG9sZDogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPj0gMiA/IDE1IDogMzAsXG5cblx0XHRnZXRMb2NhdGlvbjogZnVuY3Rpb24gKCBldmVudCApIHtcblx0XHRcdHZhciB3aW5QYWdlWCA9IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0d2luUGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdFx0XHRcdHggPSBldmVudC5jbGllbnRYLFxuXHRcdFx0XHR5ID0gZXZlbnQuY2xpZW50WTtcblxuXHRcdFx0aWYgKCBldmVudC5wYWdlWSA9PT0gMCAmJiBNYXRoLmZsb29yKCB5ICkgPiBNYXRoLmZsb29yKCBldmVudC5wYWdlWSApIHx8XG5cdFx0XHRcdGV2ZW50LnBhZ2VYID09PSAwICYmIE1hdGguZmxvb3IoIHggKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gaU9TNCBjbGllbnRYL2NsaWVudFkgaGF2ZSB0aGUgdmFsdWUgdGhhdCBzaG91bGQgaGF2ZSBiZWVuXG5cdFx0XHRcdC8vIGluIHBhZ2VYL3BhZ2VZLiBXaGlsZSBwYWdlWC9wYWdlLyBoYXZlIHRoZSB2YWx1ZSAwXG5cdFx0XHRcdHggPSB4IC0gd2luUGFnZVg7XG5cdFx0XHRcdHkgPSB5IC0gd2luUGFnZVk7XG5cdFx0XHR9IGVsc2UgaWYgKCB5IDwgKCBldmVudC5wYWdlWSAtIHdpblBhZ2VZKSB8fCB4IDwgKCBldmVudC5wYWdlWCAtIHdpblBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gU29tZSBBbmRyb2lkIGJyb3dzZXJzIGhhdmUgdG90YWxseSBib2d1cyB2YWx1ZXMgZm9yIGNsaWVudFgvWVxuXHRcdFx0XHQvLyB3aGVuIHNjcm9sbGluZy96b29taW5nIGEgcGFnZS4gRGV0ZWN0YWJsZSBzaW5jZSBjbGllbnRYL2NsaWVudFlcblx0XHRcdFx0Ly8gc2hvdWxkIG5ldmVyIGJlIHNtYWxsZXIgdGhhbiBwYWdlWC9wYWdlWSBtaW51cyBwYWdlIHNjcm9sbFxuXHRcdFx0XHR4ID0gZXZlbnQucGFnZVggLSB3aW5QYWdlWDtcblx0XHRcdFx0eSA9IGV2ZW50LnBhZ2VZIC0gd2luUGFnZVk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHlcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZGF0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA/XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCxcblx0XHRcdFx0bG9jYXRpb24gPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZ2V0TG9jYXRpb24oIGRhdGEgKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksXG5cdFx0XHRcdFx0XHRjb29yZHM6IFsgbG9jYXRpb24ueCwgbG9jYXRpb24ueSBdLFxuXHRcdFx0XHRcdFx0b3JpZ2luOiAkKCBldmVudC50YXJnZXQgKVxuXHRcdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50LFxuXHRcdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdFx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF1cblx0XHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRoYW5kbGVTd2lwZTogZnVuY3Rpb24oIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICkge1xuXHRcdFx0aWYgKCBzdG9wLnRpbWUgLSBzdGFydC50aW1lIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLmR1cmF0aW9uVGhyZXNob2xkICYmXG5cdFx0XHRcdE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMSBdIC0gc3RvcC5jb29yZHNbIDEgXSApIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLnZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQgKSB7XG5cdFx0XHRcdHZhciBkaXJlY3Rpb24gPSBzdGFydC5jb29yZHNbMF0gPiBzdG9wLmNvb3Jkc1sgMCBdID8gXCJzd2lwZWxlZnRcIiA6IFwic3dpcGVyaWdodFwiO1xuXG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgXCJzd2lwZVwiLCAkLkV2ZW50KCBcInN3aXBlXCIsIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0LCBzd2lwZXN0YXJ0OiBzdGFydCwgc3dpcGVzdG9wOiBzdG9wIH0pLCB0cnVlICk7XG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgZGlyZWN0aW9uLCQuRXZlbnQoIGRpcmVjdGlvbiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQsIHN3aXBlc3RhcnQ6IHN0YXJ0LCBzd2lwZXN0b3A6IHN0b3AgfSApLCB0cnVlICk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdC8vIFRoaXMgc2VydmVzIGFzIGEgZmxhZyB0byBlbnN1cmUgdGhhdCBhdCBtb3N0IG9uZSBzd2lwZSBldmVudCBldmVudCBpc1xuXHRcdC8vIGluIHdvcmsgYXQgYW55IGdpdmVuIHRpbWVcblx0XHRldmVudEluUHJvZ3Jlc3M6IGZhbHNlLFxuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGV2ZW50cyxcblx0XHRcdFx0dGhpc09iamVjdCA9IHRoaXMsXG5cdFx0XHRcdCR0aGlzID0gJCggdGhpc09iamVjdCApLFxuXHRcdFx0XHRjb250ZXh0ID0ge307XG5cblx0XHRcdC8vIFJldHJpZXZlIHRoZSBldmVudHMgZGF0YSBmb3IgdGhpcyBlbGVtZW50IGFuZCBhZGQgdGhlIHN3aXBlIGNvbnRleHRcblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggIWV2ZW50cyApIHtcblx0XHRcdFx0ZXZlbnRzID0geyBsZW5ndGg6IDAgfTtcblx0XHRcdFx0JC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiwgZXZlbnRzICk7XG5cdFx0XHR9XG5cdFx0XHRldmVudHMubGVuZ3RoKys7XG5cdFx0XHRldmVudHMuc3dpcGUgPSBjb250ZXh0O1xuXG5cdFx0XHRjb250ZXh0LnN0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIEJhaWwgaWYgd2UncmUgYWxyZWFkeSB3b3JraW5nIG9uIGEgc3dpcGUgZXZlbnRcblx0XHRcdFx0aWYgKCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gdHJ1ZTtcblxuXHRcdFx0XHR2YXIgc3RvcCxcblx0XHRcdFx0XHRzdGFydCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdGFydCggZXZlbnQgKSxcblx0XHRcdFx0XHRvcmlnVGFyZ2V0ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRcdGVtaXR0ZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhcnQgfHwgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c3RvcCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdG9wKCBldmVudCApO1xuXHRcdFx0XHRcdGlmICggIWVtaXR0ZWQgKSB7XG5cdFx0XHRcdFx0XHRlbWl0dGVkID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmhhbmRsZVN3aXBlKCBzdGFydCwgc3RvcCwgdGhpc09iamVjdCwgb3JpZ1RhcmdldCApO1xuXHRcdFx0XHRcdFx0aWYgKCBlbWl0dGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHByZXZlbnQgc2Nyb2xsaW5nXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZCApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGNvbnRleHQuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0ZW1pdHRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlID0gbnVsbDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQkZG9jdW1lbnQub24oIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKVxuXHRcdFx0XHRcdC5vbmUoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdH07XG5cdFx0XHQkdGhpcy5vbiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0fSxcblxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBldmVudHMsIGNvbnRleHQ7XG5cblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0XHRjb250ZXh0ID0gZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRkZWxldGUgZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRldmVudHMubGVuZ3RoLS07XG5cdFx0XHRcdGlmICggZXZlbnRzLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0XHQkLnJlbW92ZURhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjb250ZXh0ICkge1xuXHRcdFx0XHRpZiAoIGNvbnRleHQuc3RhcnQgKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLm9mZiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBjb250ZXh0Lm1vdmUgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggY29udGV4dC5zdG9wICkge1xuXHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0JC5lYWNoKHtcblx0XHRzd2lwZWxlZnQ6IFwic3dpcGUubGVmdFwiLFxuXHRcdHN3aXBlcmlnaHQ6IFwic3dpcGUucmlnaHRcIlxuXHR9LCBmdW5jdGlvbiggZXZlbnQsIHNvdXJjZUV2ZW50ICkge1xuXG5cdFx0JC5ldmVudC5zcGVjaWFsWyBldmVudCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuYmluZCggc291cmNlRXZlbnQsICQubm9vcCApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLnVuYmluZCggc291cmNlRXZlbnQgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcbn0pKCBqUXVlcnksIHRoaXMgKTtcbiovXG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmNvbnN0IE11dGF0aW9uT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbiAgZm9yICh2YXIgaT0wOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYCR7cHJlZml4ZXNbaV19TXV0YXRpb25PYnNlcnZlcmAgaW4gd2luZG93KSB7XG4gICAgICByZXR1cm4gd2luZG93W2Ake3ByZWZpeGVzW2ldfU11dGF0aW9uT2JzZXJ2ZXJgXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSgpKTtcblxuY29uc3QgdHJpZ2dlcnMgPSAoZWwsIHR5cGUpID0+IHtcbiAgZWwuZGF0YSh0eXBlKS5zcGxpdCgnICcpLmZvckVhY2goaWQgPT4ge1xuICAgICQoYCMke2lkfWApWyB0eXBlID09PSAnY2xvc2UnID8gJ3RyaWdnZXInIDogJ3RyaWdnZXJIYW5kbGVyJ10oYCR7dHlwZX0uemYudHJpZ2dlcmAsIFtlbF0pO1xuICB9KTtcbn07XG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLW9wZW5dIHdpbGwgcmV2ZWFsIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtb3Blbl0nLCBmdW5jdGlvbigpIHtcbiAgdHJpZ2dlcnMoJCh0aGlzKSwgJ29wZW4nKTtcbn0pO1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NlXSB3aWxsIGNsb3NlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuLy8gSWYgdXNlZCB3aXRob3V0IGEgdmFsdWUgb24gW2RhdGEtY2xvc2VdLCB0aGUgZXZlbnQgd2lsbCBidWJibGUsIGFsbG93aW5nIGl0IHRvIGNsb3NlIGEgcGFyZW50IGNvbXBvbmVudC5cbiQoZG9jdW1lbnQpLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ2Nsb3NlJyk7XG4gIGlmIChpZCkge1xuICAgIHRyaWdnZXJzKCQodGhpcyksICdjbG9zZScpO1xuICB9XG4gIGVsc2Uge1xuICAgICQodGhpcykudHJpZ2dlcignY2xvc2UuemYudHJpZ2dlcicpO1xuICB9XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGVdIHdpbGwgdG9nZ2xlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlXScsIGZ1bmN0aW9uKCkge1xuICB0cmlnZ2VycygkKHRoaXMpLCAndG9nZ2xlJyk7XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zYWJsZV0gd2lsbCByZXNwb25kIHRvIGNsb3NlLnpmLnRyaWdnZXIgZXZlbnRzLlxuJChkb2N1bWVudCkub24oJ2Nsb3NlLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2FibGVdJywgZnVuY3Rpb24oZSl7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGxldCBhbmltYXRpb24gPSAkKHRoaXMpLmRhdGEoJ2Nsb3NhYmxlJyk7XG5cbiAgaWYoYW5pbWF0aW9uICE9PSAnJyl7XG4gICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCgkKHRoaXMpLCBhbmltYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICB9KTtcbiAgfWVsc2V7XG4gICAgJCh0aGlzKS5mYWRlT3V0KCkudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gIH1cbn0pO1xuXG4kKGRvY3VtZW50KS5vbignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlLWZvY3VzXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZS1mb2N1cycpO1xuICAkKGAjJHtpZH1gKS50cmlnZ2VySGFuZGxlcigndG9nZ2xlLnpmLnRyaWdnZXInLCBbJCh0aGlzKV0pO1xufSk7XG5cbi8qKlxuKiBGaXJlcyBvbmNlIGFmdGVyIGFsbCBvdGhlciBzY3JpcHRzIGhhdmUgbG9hZGVkXG4qIEBmdW5jdGlvblxuKiBAcHJpdmF0ZVxuKi9cbiQod2luZG93KS5vbignbG9hZCcsICgpID0+IHtcbiAgY2hlY2tMaXN0ZW5lcnMoKTtcbn0pO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVycygpIHtcbiAgZXZlbnRzTGlzdGVuZXIoKTtcbiAgcmVzaXplTGlzdGVuZXIoKTtcbiAgc2Nyb2xsTGlzdGVuZXIoKTtcbiAgY2xvc2VtZUxpc3RlbmVyKCk7XG59XG5cbi8vKioqKioqKiogb25seSBmaXJlcyB0aGlzIGZ1bmN0aW9uIG9uY2Ugb24gbG9hZCwgaWYgdGhlcmUncyBzb21ldGhpbmcgdG8gd2F0Y2ggKioqKioqKipcbmZ1bmN0aW9uIGNsb3NlbWVMaXN0ZW5lcihwbHVnaW5OYW1lKSB7XG4gIHZhciB5ZXRpQm94ZXMgPSAkKCdbZGF0YS15ZXRpLWJveF0nKSxcbiAgICAgIHBsdWdOYW1lcyA9IFsnZHJvcGRvd24nLCAndG9vbHRpcCcsICdyZXZlYWwnXTtcblxuICBpZihwbHVnaW5OYW1lKXtcbiAgICBpZih0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ3N0cmluZycpe1xuICAgICAgcGx1Z05hbWVzLnB1c2gocGx1Z2luTmFtZSk7XG4gICAgfWVsc2UgaWYodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwbHVnaW5OYW1lWzBdID09PSAnc3RyaW5nJyl7XG4gICAgICBwbHVnTmFtZXMuY29uY2F0KHBsdWdpbk5hbWUpO1xuICAgIH1lbHNle1xuICAgICAgY29uc29sZS5lcnJvcignUGx1Z2luIG5hbWVzIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgfVxuICBpZih5ZXRpQm94ZXMubGVuZ3RoKXtcbiAgICBsZXQgbGlzdGVuZXJzID0gcGx1Z05hbWVzLm1hcCgobmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIGBjbG9zZW1lLnpmLiR7bmFtZX1gO1xuICAgIH0pLmpvaW4oJyAnKTtcblxuICAgICQod2luZG93KS5vZmYobGlzdGVuZXJzKS5vbihsaXN0ZW5lcnMsIGZ1bmN0aW9uKGUsIHBsdWdpbklkKXtcbiAgICAgIGxldCBwbHVnaW4gPSBlLm5hbWVzcGFjZS5zcGxpdCgnLicpWzBdO1xuICAgICAgbGV0IHBsdWdpbnMgPSAkKGBbZGF0YS0ke3BsdWdpbn1dYCkubm90KGBbZGF0YS15ZXRpLWJveD1cIiR7cGx1Z2luSWR9XCJdYCk7XG5cbiAgICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICBsZXQgX3RoaXMgPSAkKHRoaXMpO1xuXG4gICAgICAgIF90aGlzLnRyaWdnZXJIYW5kbGVyKCdjbG9zZS56Zi50cmlnZ2VyJywgW190aGlzXSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNpemVMaXN0ZW5lcihkZWJvdW5jZSl7XG4gIGxldCB0aW1lcixcbiAgICAgICRub2RlcyA9ICQoJ1tkYXRhLXJlc2l6ZV0nKTtcbiAgaWYoJG5vZGVzLmxlbmd0aCl7XG4gICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnpmLnRyaWdnZXInKVxuICAgIC5vbigncmVzaXplLnpmLnRyaWdnZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAodGltZXIpIHsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgfVxuXG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblxuICAgICAgICBpZighTXV0YXRpb25PYnNlcnZlcil7Ly9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHJlc2l6ZSBldmVudFxuICAgICAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInJlc2l6ZVwiKTtcbiAgICAgIH0sIGRlYm91bmNlIHx8IDEwKTsvL2RlZmF1bHQgdGltZSB0byBlbWl0IHJlc2l6ZSBldmVudFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbExpc3RlbmVyKGRlYm91bmNlKXtcbiAgbGV0IHRpbWVyLFxuICAgICAgJG5vZGVzID0gJCgnW2RhdGEtc2Nyb2xsXScpO1xuICBpZigkbm9kZXMubGVuZ3RoKXtcbiAgICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYudHJpZ2dlcicpXG4gICAgLm9uKCdzY3JvbGwuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYodGltZXIpeyBjbGVhclRpbWVvdXQodGltZXIpOyB9XG5cbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgc2Nyb2xsIGV2ZW50XG4gICAgICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwic2Nyb2xsXCIpO1xuICAgICAgfSwgZGVib3VuY2UgfHwgMTApOy8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgc2Nyb2xsIGV2ZW50XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRzTGlzdGVuZXIoKSB7XG4gIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsgcmV0dXJuIGZhbHNlOyB9XG4gIGxldCBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXJlc2l6ZV0sIFtkYXRhLXNjcm9sbF0sIFtkYXRhLW11dGF0ZV0nKTtcblxuICAvL2VsZW1lbnQgY2FsbGJhY2tcbiAgdmFyIGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24gPSBmdW5jdGlvbihtdXRhdGlvblJlY29yZHNMaXN0KSB7XG4gICAgdmFyICR0YXJnZXQgPSAkKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udGFyZ2V0KTtcbiAgICAvL3RyaWdnZXIgdGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBlbGVtZW50IGRlcGVuZGluZyBvbiB0eXBlXG4gICAgc3dpdGNoICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSkge1xuXG4gICAgICBjYXNlIFwicmVzaXplXCIgOlxuICAgICAgJHRhcmdldC50cmlnZ2VySGFuZGxlcigncmVzaXplbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0XSk7XG4gICAgICBicmVhaztcblxuICAgICAgY2FzZSBcInNjcm9sbFwiIDpcbiAgICAgICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInLCBbJHRhcmdldCwgd2luZG93LnBhZ2VZT2Zmc2V0XSk7XG4gICAgICBicmVhaztcblxuICAgICAgLy8gY2FzZSBcIm11dGF0ZVwiIDpcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdtdXRhdGUnLCAkdGFyZ2V0KTtcbiAgICAgIC8vICR0YXJnZXQudHJpZ2dlckhhbmRsZXIoJ211dGF0ZS56Zi50cmlnZ2VyJyk7XG4gICAgICAvL1xuICAgICAgLy8gLy9tYWtlIHN1cmUgd2UgZG9uJ3QgZ2V0IHN0dWNrIGluIGFuIGluZmluaXRlIGxvb3AgZnJvbSBzbG9wcHkgY29kZWluZ1xuICAgICAgLy8gaWYgKCR0YXJnZXQuaW5kZXgoJ1tkYXRhLW11dGF0ZV0nKSA9PSAkKFwiW2RhdGEtbXV0YXRlXVwiKS5sZW5ndGgtMSkge1xuICAgICAgLy8gICBkb21NdXRhdGlvbk9ic2VydmVyKCk7XG4gICAgICAvLyB9XG4gICAgICAvLyBicmVhaztcblxuICAgICAgZGVmYXVsdCA6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAvL25vdGhpbmdcbiAgICB9XG4gIH1cblxuICBpZihub2Rlcy5sZW5ndGgpe1xuICAgIC8vZm9yIGVhY2ggZWxlbWVudCB0aGF0IG5lZWRzIHRvIGxpc3RlbiBmb3IgcmVzaXppbmcsIHNjcm9sbGluZywgKG9yIGNvbWluZyBzb29uIG11dGF0aW9uKSBhZGQgYSBzaW5nbGUgb2JzZXJ2ZXJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBub2Rlcy5sZW5ndGgtMTsgaSsrKSB7XG4gICAgICBsZXQgZWxlbWVudE9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIobGlzdGVuaW5nRWxlbWVudHNNdXRhdGlvbik7XG4gICAgICBlbGVtZW50T2JzZXJ2ZXIub2JzZXJ2ZShub2Rlc1tpXSwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IGZhbHNlLCBjaGFyYWN0ZXJEYXRhOiBmYWxzZSwgc3VidHJlZTpmYWxzZSwgYXR0cmlidXRlRmlsdGVyOltcImRhdGEtZXZlbnRzXCJdfSk7XG4gICAgfVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBbUEhdXG4vLyBGb3VuZGF0aW9uLkNoZWNrV2F0Y2hlcnMgPSBjaGVja1dhdGNoZXJzO1xuRm91bmRhdGlvbi5JSGVhcllvdSA9IGNoZWNrTGlzdGVuZXJzO1xuLy8gRm91bmRhdGlvbi5JU2VlWW91ID0gc2Nyb2xsTGlzdGVuZXI7XG4vLyBGb3VuZGF0aW9uLklGZWVsWW91ID0gY2xvc2VtZUxpc3RlbmVyO1xuXG59KGpRdWVyeSk7XG5cbi8vIGZ1bmN0aW9uIGRvbU11dGF0aW9uT2JzZXJ2ZXIoZGVib3VuY2UpIHtcbi8vICAgLy8gISEhIFRoaXMgaXMgY29taW5nIHNvb24gYW5kIG5lZWRzIG1vcmUgd29yazsgbm90IGFjdGl2ZSAgISEhIC8vXG4vLyAgIHZhciB0aW1lcixcbi8vICAgbm9kZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1tdXRhdGVdJyk7XG4vLyAgIC8vXG4vLyAgIGlmIChub2Rlcy5sZW5ndGgpIHtcbi8vICAgICAvLyB2YXIgTXV0YXRpb25PYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4vLyAgICAgLy8gICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbi8vICAgICAvLyAgIGZvciAodmFyIGk9MDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgLy8gICAgIGlmIChwcmVmaXhlc1tpXSArICdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHtcbi8vICAgICAvLyAgICAgICByZXR1cm4gd2luZG93W3ByZWZpeGVzW2ldICsgJ011dGF0aW9uT2JzZXJ2ZXInXTtcbi8vICAgICAvLyAgICAgfVxuLy8gICAgIC8vICAgfVxuLy8gICAgIC8vICAgcmV0dXJuIGZhbHNlO1xuLy8gICAgIC8vIH0oKSk7XG4vL1xuLy9cbi8vICAgICAvL2ZvciB0aGUgYm9keSwgd2UgbmVlZCB0byBsaXN0ZW4gZm9yIGFsbCBjaGFuZ2VzIGVmZmVjdGluZyB0aGUgc3R5bGUgYW5kIGNsYXNzIGF0dHJpYnV0ZXNcbi8vICAgICB2YXIgYm9keU9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoYm9keU11dGF0aW9uKTtcbi8vICAgICBib2R5T2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogZmFsc2UsIHN1YnRyZWU6dHJ1ZSwgYXR0cmlidXRlRmlsdGVyOltcInN0eWxlXCIsIFwiY2xhc3NcIl19KTtcbi8vXG4vL1xuLy8gICAgIC8vYm9keSBjYWxsYmFja1xuLy8gICAgIGZ1bmN0aW9uIGJvZHlNdXRhdGlvbihtdXRhdGUpIHtcbi8vICAgICAgIC8vdHJpZ2dlciBhbGwgbGlzdGVuaW5nIGVsZW1lbnRzIGFuZCBzaWduYWwgYSBtdXRhdGlvbiBldmVudFxuLy8gICAgICAgaWYgKHRpbWVyKSB7IGNsZWFyVGltZW91dCh0aW1lcik7IH1cbi8vXG4vLyAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgIGJvZHlPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4vLyAgICAgICAgICQoJ1tkYXRhLW11dGF0ZV0nKS5hdHRyKCdkYXRhLWV2ZW50cycsXCJtdXRhdGVcIik7XG4vLyAgICAgICB9LCBkZWJvdW5jZSB8fCAxNTApO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gfVxuIiwid2luZG93LndoYXRJbnB1dCA9IChmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICB2YXJpYWJsZXNcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICAvLyBhcnJheSBvZiBhY3RpdmVseSBwcmVzc2VkIGtleXNcbiAgdmFyIGFjdGl2ZUtleXMgPSBbXTtcblxuICAvLyBjYWNoZSBkb2N1bWVudC5ib2R5XG4gIHZhciBib2R5O1xuXG4gIC8vIGJvb2xlYW46IHRydWUgaWYgdG91Y2ggYnVmZmVyIHRpbWVyIGlzIHJ1bm5pbmdcbiAgdmFyIGJ1ZmZlciA9IGZhbHNlO1xuXG4gIC8vIHRoZSBsYXN0IHVzZWQgaW5wdXQgdHlwZVxuICB2YXIgY3VycmVudElucHV0ID0gbnVsbDtcblxuICAvLyBgaW5wdXRgIHR5cGVzIHRoYXQgZG9uJ3QgYWNjZXB0IHRleHRcbiAgdmFyIG5vblR5cGluZ0lucHV0cyA9IFtcbiAgICAnYnV0dG9uJyxcbiAgICAnY2hlY2tib3gnLFxuICAgICdmaWxlJyxcbiAgICAnaW1hZ2UnLFxuICAgICdyYWRpbycsXG4gICAgJ3Jlc2V0JyxcbiAgICAnc3VibWl0J1xuICBdO1xuXG4gIC8vIGRldGVjdCB2ZXJzaW9uIG9mIG1vdXNlIHdoZWVsIGV2ZW50IHRvIHVzZVxuICAvLyB2aWEgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3doZWVsXG4gIHZhciBtb3VzZVdoZWVsID0gZGV0ZWN0V2hlZWwoKTtcblxuICAvLyBsaXN0IG9mIG1vZGlmaWVyIGtleXMgY29tbW9ubHkgdXNlZCB3aXRoIHRoZSBtb3VzZSBhbmRcbiAgLy8gY2FuIGJlIHNhZmVseSBpZ25vcmVkIHRvIHByZXZlbnQgZmFsc2Uga2V5Ym9hcmQgZGV0ZWN0aW9uXG4gIHZhciBpZ25vcmVNYXAgPSBbXG4gICAgMTYsIC8vIHNoaWZ0XG4gICAgMTcsIC8vIGNvbnRyb2xcbiAgICAxOCwgLy8gYWx0XG4gICAgOTEsIC8vIFdpbmRvd3Mga2V5IC8gbGVmdCBBcHBsZSBjbWRcbiAgICA5MyAgLy8gV2luZG93cyBtZW51IC8gcmlnaHQgQXBwbGUgY21kXG4gIF07XG5cbiAgLy8gbWFwcGluZyBvZiBldmVudHMgdG8gaW5wdXQgdHlwZXNcbiAgdmFyIGlucHV0TWFwID0ge1xuICAgICdrZXlkb3duJzogJ2tleWJvYXJkJyxcbiAgICAna2V5dXAnOiAna2V5Ym9hcmQnLFxuICAgICdtb3VzZWRvd24nOiAnbW91c2UnLFxuICAgICdtb3VzZW1vdmUnOiAnbW91c2UnLFxuICAgICdNU1BvaW50ZXJEb3duJzogJ3BvaW50ZXInLFxuICAgICdNU1BvaW50ZXJNb3ZlJzogJ3BvaW50ZXInLFxuICAgICdwb2ludGVyZG93bic6ICdwb2ludGVyJyxcbiAgICAncG9pbnRlcm1vdmUnOiAncG9pbnRlcicsXG4gICAgJ3RvdWNoc3RhcnQnOiAndG91Y2gnXG4gIH07XG5cbiAgLy8gYWRkIGNvcnJlY3QgbW91c2Ugd2hlZWwgZXZlbnQgbWFwcGluZyB0byBgaW5wdXRNYXBgXG4gIGlucHV0TWFwW2RldGVjdFdoZWVsKCldID0gJ21vdXNlJztcblxuICAvLyBhcnJheSBvZiBhbGwgdXNlZCBpbnB1dCB0eXBlc1xuICB2YXIgaW5wdXRUeXBlcyA9IFtdO1xuXG4gIC8vIG1hcHBpbmcgb2Yga2V5IGNvZGVzIHRvIGEgY29tbW9uIG5hbWVcbiAgdmFyIGtleU1hcCA9IHtcbiAgICA5OiAndGFiJyxcbiAgICAxMzogJ2VudGVyJyxcbiAgICAxNjogJ3NoaWZ0JyxcbiAgICAyNzogJ2VzYycsXG4gICAgMzI6ICdzcGFjZScsXG4gICAgMzc6ICdsZWZ0JyxcbiAgICAzODogJ3VwJyxcbiAgICAzOTogJ3JpZ2h0JyxcbiAgICA0MDogJ2Rvd24nXG4gIH07XG5cbiAgLy8gbWFwIG9mIElFIDEwIHBvaW50ZXIgZXZlbnRzXG4gIHZhciBwb2ludGVyTWFwID0ge1xuICAgIDI6ICd0b3VjaCcsXG4gICAgMzogJ3RvdWNoJywgLy8gdHJlYXQgcGVuIGxpa2UgdG91Y2hcbiAgICA0OiAnbW91c2UnXG4gIH07XG5cbiAgLy8gdG91Y2ggYnVmZmVyIHRpbWVyXG4gIHZhciB0aW1lcjtcblxuXG4gIC8qXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb25zXG4gICAgLS0tLS0tLS0tLS0tLS0tXG4gICovXG5cbiAgLy8gYWxsb3dzIGV2ZW50cyB0aGF0IGFyZSBhbHNvIHRyaWdnZXJlZCB0byBiZSBmaWx0ZXJlZCBvdXQgZm9yIGB0b3VjaHN0YXJ0YFxuICBmdW5jdGlvbiBldmVudEJ1ZmZlcigpIHtcbiAgICBjbGVhclRpbWVyKCk7XG4gICAgc2V0SW5wdXQoZXZlbnQpO1xuXG4gICAgYnVmZmVyID0gdHJ1ZTtcbiAgICB0aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgYnVmZmVyID0gZmFsc2U7XG4gICAgfSwgNjUwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlcmVkRXZlbnQoZXZlbnQpIHtcbiAgICBpZiAoIWJ1ZmZlcikgc2V0SW5wdXQoZXZlbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5CdWZmZXJlZEV2ZW50KGV2ZW50KSB7XG4gICAgY2xlYXJUaW1lcigpO1xuICAgIHNldElucHV0KGV2ZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyVGltZXIoKSB7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lcik7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRJbnB1dChldmVudCkge1xuICAgIHZhciBldmVudEtleSA9IGtleShldmVudCk7XG4gICAgdmFyIHZhbHVlID0gaW5wdXRNYXBbZXZlbnQudHlwZV07XG4gICAgaWYgKHZhbHVlID09PSAncG9pbnRlcicpIHZhbHVlID0gcG9pbnRlclR5cGUoZXZlbnQpO1xuXG4gICAgLy8gZG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHZhbHVlIG1hdGNoZXMgdGhlIGlucHV0IHR5cGUgYWxyZWFkeSBzZXRcbiAgICBpZiAoY3VycmVudElucHV0ICE9PSB2YWx1ZSkge1xuICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gdGFyZ2V0KGV2ZW50KTtcbiAgICAgIHZhciBldmVudFRhcmdldE5vZGUgPSBldmVudFRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIGV2ZW50VGFyZ2V0VHlwZSA9IChldmVudFRhcmdldE5vZGUgPT09ICdpbnB1dCcpID8gZXZlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCd0eXBlJykgOiBudWxsO1xuXG4gICAgICBpZiAoXG4gICAgICAgICgvLyBvbmx5IGlmIHRoZSB1c2VyIGZsYWcgdG8gYWxsb3cgdHlwaW5nIGluIGZvcm0gZmllbGRzIGlzbid0IHNldFxuICAgICAgICAhYm9keS5oYXNBdHRyaWJ1dGUoJ2RhdGEtd2hhdGlucHV0LWZvcm10eXBpbmcnKSAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgY3VycmVudElucHV0IGhhcyBhIHZhbHVlXG4gICAgICAgIGN1cnJlbnRJbnB1dCAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgdGhlIGlucHV0IGlzIGBrZXlib2FyZGBcbiAgICAgICAgdmFsdWUgPT09ICdrZXlib2FyZCcgJiZcblxuICAgICAgICAvLyBub3QgaWYgdGhlIGtleSBpcyBgVEFCYFxuICAgICAgICBrZXlNYXBbZXZlbnRLZXldICE9PSAndGFiJyAmJlxuXG4gICAgICAgIC8vIG9ubHkgaWYgdGhlIHRhcmdldCBpcyBhIGZvcm0gaW5wdXQgdGhhdCBhY2NlcHRzIHRleHRcbiAgICAgICAgKFxuICAgICAgICAgICBldmVudFRhcmdldE5vZGUgPT09ICd0ZXh0YXJlYScgfHxcbiAgICAgICAgICAgZXZlbnRUYXJnZXROb2RlID09PSAnc2VsZWN0JyB8fFxuICAgICAgICAgICAoZXZlbnRUYXJnZXROb2RlID09PSAnaW5wdXQnICYmIG5vblR5cGluZ0lucHV0cy5pbmRleE9mKGV2ZW50VGFyZ2V0VHlwZSkgPCAwKVxuICAgICAgICApKSB8fCAoXG4gICAgICAgICAgLy8gaWdub3JlIG1vZGlmaWVyIGtleXNcbiAgICAgICAgICBpZ25vcmVNYXAuaW5kZXhPZihldmVudEtleSkgPiAtMVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgLy8gaWdub3JlIGtleWJvYXJkIHR5cGluZ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoSW5wdXQodmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PT0gJ2tleWJvYXJkJykgbG9nS2V5cyhldmVudEtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBzd2l0Y2hJbnB1dChzdHJpbmcpIHtcbiAgICBjdXJyZW50SW5wdXQgPSBzdHJpbmc7XG4gICAgYm9keS5zZXRBdHRyaWJ1dGUoJ2RhdGEtd2hhdGlucHV0JywgY3VycmVudElucHV0KTtcblxuICAgIGlmIChpbnB1dFR5cGVzLmluZGV4T2YoY3VycmVudElucHV0KSA9PT0gLTEpIGlucHV0VHlwZXMucHVzaChjdXJyZW50SW5wdXQpO1xuICB9XG5cbiAgZnVuY3Rpb24ga2V5KGV2ZW50KSB7XG4gICAgcmV0dXJuIChldmVudC5rZXlDb2RlKSA/IGV2ZW50LmtleUNvZGUgOiBldmVudC53aGljaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRhcmdldChldmVudCkge1xuICAgIHJldHVybiBldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50ZXJUeXBlKGV2ZW50KSB7XG4gICAgaWYgKHR5cGVvZiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBwb2ludGVyTWFwW2V2ZW50LnBvaW50ZXJUeXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChldmVudC5wb2ludGVyVHlwZSA9PT0gJ3BlbicpID8gJ3RvdWNoJyA6IGV2ZW50LnBvaW50ZXJUeXBlOyAvLyB0cmVhdCBwZW4gbGlrZSB0b3VjaFxuICAgIH1cbiAgfVxuXG4gIC8vIGtleWJvYXJkIGxvZ2dpbmdcbiAgZnVuY3Rpb24gbG9nS2V5cyhldmVudEtleSkge1xuICAgIGlmIChhY3RpdmVLZXlzLmluZGV4T2Yoa2V5TWFwW2V2ZW50S2V5XSkgPT09IC0xICYmIGtleU1hcFtldmVudEtleV0pIGFjdGl2ZUtleXMucHVzaChrZXlNYXBbZXZlbnRLZXldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuTG9nS2V5cyhldmVudCkge1xuICAgIHZhciBldmVudEtleSA9IGtleShldmVudCk7XG4gICAgdmFyIGFycmF5UG9zID0gYWN0aXZlS2V5cy5pbmRleE9mKGtleU1hcFtldmVudEtleV0pO1xuXG4gICAgaWYgKGFycmF5UG9zICE9PSAtMSkgYWN0aXZlS2V5cy5zcGxpY2UoYXJyYXlQb3MsIDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmluZEV2ZW50cygpIHtcbiAgICBib2R5ID0gZG9jdW1lbnQuYm9keTtcblxuICAgIC8vIHBvaW50ZXIgZXZlbnRzIChtb3VzZSwgcGVuLCB0b3VjaClcbiAgICBpZiAod2luZG93LlBvaW50ZXJFdmVudCkge1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgIH0gZWxzZSBpZiAod2luZG93Lk1TUG9pbnRlckV2ZW50KSB7XG4gICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ01TUG9pbnRlckRvd24nLCBidWZmZXJlZEV2ZW50KTtcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignTVNQb2ludGVyTW92ZScsIGJ1ZmZlcmVkRXZlbnQpO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vIG1vdXNlIGV2ZW50c1xuICAgICAgYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBidWZmZXJlZEV2ZW50KTtcbiAgICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgYnVmZmVyZWRFdmVudCk7XG5cbiAgICAgIC8vIHRvdWNoIGV2ZW50c1xuICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykge1xuICAgICAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBldmVudEJ1ZmZlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbW91c2Ugd2hlZWxcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIobW91c2VXaGVlbCwgYnVmZmVyZWRFdmVudCk7XG5cbiAgICAvLyBrZXlib2FyZCBldmVudHNcbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB1bkJ1ZmZlcmVkRXZlbnQpO1xuICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB1bkJ1ZmZlcmVkRXZlbnQpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdW5Mb2dLZXlzKTtcbiAgfVxuXG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICB1dGlsaXRpZXNcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICAvLyBkZXRlY3QgdmVyc2lvbiBvZiBtb3VzZSB3aGVlbCBldmVudCB0byB1c2VcbiAgLy8gdmlhIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy93aGVlbFxuICBmdW5jdGlvbiBkZXRlY3RXaGVlbCgpIHtcbiAgICByZXR1cm4gbW91c2VXaGVlbCA9ICdvbndoZWVsJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA/XG4gICAgICAnd2hlZWwnIDogLy8gTW9kZXJuIGJyb3dzZXJzIHN1cHBvcnQgXCJ3aGVlbFwiXG5cbiAgICAgIGRvY3VtZW50Lm9ubW91c2V3aGVlbCAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgJ21vdXNld2hlZWwnIDogLy8gV2Via2l0IGFuZCBJRSBzdXBwb3J0IGF0IGxlYXN0IFwibW91c2V3aGVlbFwiXG4gICAgICAgICdET01Nb3VzZVNjcm9sbCc7IC8vIGxldCdzIGFzc3VtZSB0aGF0IHJlbWFpbmluZyBicm93c2VycyBhcmUgb2xkZXIgRmlyZWZveFxuICB9XG5cblxuICAvKlxuICAgIC0tLS0tLS0tLS0tLS0tLVxuICAgIGluaXRcblxuICAgIGRvbid0IHN0YXJ0IHNjcmlwdCB1bmxlc3MgYnJvd3NlciBjdXRzIHRoZSBtdXN0YXJkLFxuICAgIGFsc28gcGFzc2VzIGlmIHBvbHlmaWxscyBhcmUgdXNlZFxuICAgIC0tLS0tLS0tLS0tLS0tLVxuICAqL1xuXG4gIGlmIChcbiAgICAnYWRkRXZlbnRMaXN0ZW5lcicgaW4gd2luZG93ICYmXG4gICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZcbiAgKSB7XG5cbiAgICAvLyBpZiB0aGUgZG9tIGlzIGFscmVhZHkgcmVhZHkgYWxyZWFkeSAoc2NyaXB0IHdhcyBwbGFjZWQgYXQgYm90dG9tIG9mIDxib2R5PilcbiAgICBpZiAoZG9jdW1lbnQuYm9keSkge1xuICAgICAgYmluZEV2ZW50cygpO1xuXG4gICAgLy8gb3RoZXJ3aXNlIHdhaXQgZm9yIHRoZSBkb20gdG8gbG9hZCAoc2NyaXB0IHdhcyBwbGFjZWQgaW4gdGhlIDxoZWFkPilcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGJpbmRFdmVudHMpO1xuICAgIH1cbiAgfVxuXG5cbiAgLypcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgICBhcGlcbiAgICAtLS0tLS0tLS0tLS0tLS1cbiAgKi9cblxuICByZXR1cm4ge1xuXG4gICAgLy8gcmV0dXJucyBzdHJpbmc6IHRoZSBjdXJyZW50IGlucHV0IHR5cGVcbiAgICBhc2s6IGZ1bmN0aW9uKCkgeyByZXR1cm4gY3VycmVudElucHV0OyB9LFxuXG4gICAgLy8gcmV0dXJucyBhcnJheTogY3VycmVudGx5IHByZXNzZWQga2V5c1xuICAgIGtleXM6IGZ1bmN0aW9uKCkgeyByZXR1cm4gYWN0aXZlS2V5czsgfSxcblxuICAgIC8vIHJldHVybnMgYXJyYXk6IGFsbCB0aGUgZGV0ZWN0ZWQgaW5wdXQgdHlwZXNcbiAgICB0eXBlczogZnVuY3Rpb24oKSB7IHJldHVybiBpbnB1dFR5cGVzOyB9LFxuXG4gICAgLy8gYWNjZXB0cyBzdHJpbmc6IG1hbnVhbGx5IHNldCB0aGUgaW5wdXQgdHlwZVxuICAgIHNldDogc3dpdGNoSW5wdXRcbiAgfTtcblxufSgpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBBY2NvcmRpb24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqL1xuXG5jbGFzcyBBY2NvcmRpb24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24uXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWNjb3JkaW9uI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYSBwbGFpbiBvYmplY3Qgd2l0aCBzZXR0aW5ncyB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBY2NvcmRpb24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0FjY29yZGlvbicpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbicsIHtcbiAgICAgICdFTlRFUic6ICd0b2dnbGUnLFxuICAgICAgJ1NQQUNFJzogJ3RvZ2dsZScsXG4gICAgICAnQVJST1dfRE9XTic6ICduZXh0JyxcbiAgICAgICdBUlJPV19VUCc6ICdwcmV2aW91cydcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIGJ5IGFuaW1hdGluZyB0aGUgcHJlc2V0IGFjdGl2ZSBwYW5lKHMpLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICB0aGlzLiR0YWJzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignbGksIFtkYXRhLWFjY29yZGlvbi1pdGVtXScpO1xuXG4gICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uKGlkeCwgZWwpIHtcbiAgICAgIHZhciAkZWwgPSAkKGVsKSxcbiAgICAgICAgICAkY29udGVudCA9ICRlbC5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyksXG4gICAgICAgICAgaWQgPSAkY29udGVudFswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdhY2NvcmRpb24nKSxcbiAgICAgICAgICBsaW5rSWQgPSBlbC5pZCB8fCBgJHtpZH0tbGFiZWxgO1xuXG4gICAgICAkZWwuZmluZCgnYTpmaXJzdCcpLmF0dHIoe1xuICAgICAgICAnYXJpYS1jb250cm9scyc6IGlkLFxuICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAnaWQnOiBsaW5rSWQsXG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICAkY29udGVudC5hdHRyKHsncm9sZSc6ICd0YWJwYW5lbCcsICdhcmlhLWxhYmVsbGVkYnknOiBsaW5rSWQsICdhcmlhLWhpZGRlbic6IHRydWUsICdpZCc6IGlkfSk7XG4gICAgfSk7XG4gICAgdmFyICRpbml0QWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJykuY2hpbGRyZW4oJ1tkYXRhLXRhYi1jb250ZW50XScpO1xuICAgIGlmKCRpbml0QWN0aXZlLmxlbmd0aCl7XG4gICAgICB0aGlzLmRvd24oJGluaXRBY3RpdmUsIHRydWUpO1xuICAgIH1cbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIGFjY29yZGlvbi5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJHRhYnMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciAkZWxlbSA9ICQodGhpcyk7XG4gICAgICB2YXIgJHRhYkNvbnRlbnQgPSAkZWxlbS5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyk7XG4gICAgICBpZiAoJHRhYkNvbnRlbnQubGVuZ3RoKSB7XG4gICAgICAgICRlbGVtLmNoaWxkcmVuKCdhJykub2ZmKCdjbGljay56Zi5hY2NvcmRpb24ga2V5ZG93bi56Zi5hY2NvcmRpb24nKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay56Zi5hY2NvcmRpb24nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIF90aGlzLnRvZ2dsZSgkdGFiQ29udGVudCk7XG4gICAgICAgIH0pLm9uKCdrZXlkb3duLnpmLmFjY29yZGlvbicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdBY2NvcmRpb24nLCB7XG4gICAgICAgICAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBfdGhpcy50b2dnbGUoJHRhYkNvbnRlbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgJGEgPSAkZWxlbS5uZXh0KCkuZmluZCgnYScpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIGlmICghX3RoaXMub3B0aW9ucy5tdWx0aUV4cGFuZCkge1xuICAgICAgICAgICAgICAgICRhLnRyaWdnZXIoJ2NsaWNrLnpmLmFjY29yZGlvbicpXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2aW91czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciAkYSA9ICRlbGVtLnByZXYoKS5maW5kKCdhJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgJGEudHJpZ2dlcignY2xpY2suemYuYWNjb3JkaW9uJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHNlbGVjdGVkIGNvbnRlbnQgcGFuZSdzIG9wZW4vY2xvc2Ugc3RhdGUuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0galF1ZXJ5IG9iamVjdCBvZiB0aGUgcGFuZSB0byB0b2dnbGUgKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoJHRhcmdldCkge1xuICAgIGlmKCR0YXJnZXQucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XG4gICAgICB0aGlzLnVwKCR0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvd24oJHRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBhY2NvcmRpb24gdGFiIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIEFjY29yZGlvbiBwYW5lIHRvIG9wZW4gKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICogQHBhcmFtIHtCb29sZWFufSBmaXJzdFRpbWUgLSBmbGFnIHRvIGRldGVybWluZSBpZiByZWZsb3cgc2hvdWxkIGhhcHBlbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbiNkb3duXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZG93bigkdGFyZ2V0LCBmaXJzdFRpbWUpIHtcbiAgICAkdGFyZ2V0XG4gICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSlcbiAgICAgIC5wYXJlbnQoJ1tkYXRhLXRhYi1jb250ZW50XScpXG4gICAgICAuYWRkQmFjaygpXG4gICAgICAucGFyZW50KCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQgJiYgIWZpcnN0VGltZSkge1xuICAgICAgdmFyICRjdXJyZW50QWN0aXZlID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWFjdGl2ZScpLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgIGlmICgkY3VycmVudEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy51cCgkY3VycmVudEFjdGl2ZS5ub3QoJHRhcmdldCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgICR0YXJnZXQuc2xpZGVEb3duKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAoKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHRhYiBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI2Rvd25cbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdkb3duLnpmLmFjY29yZGlvbicsIFskdGFyZ2V0XSk7XG4gICAgfSk7XG5cbiAgICAkKGAjJHskdGFyZ2V0LmF0dHIoJ2FyaWEtbGFiZWxsZWRieScpfWApLmF0dHIoe1xuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiB0cnVlLFxuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSB0YWIgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQWNjb3JkaW9uIHRhYiB0byBjbG9zZSAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uI3VwXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgdXAoJHRhcmdldCkge1xuICAgIHZhciAkYXVudHMgPSAkdGFyZ2V0LnBhcmVudCgpLnNpYmxpbmdzKCksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmKCghdGhpcy5vcHRpb25zLmFsbG93QWxsQ2xvc2VkICYmICEkYXVudHMuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB8fCAhJHRhcmdldC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsICR0YXJnZXQsIGZ1bmN0aW9uKCl7XG4gICAgICAkdGFyZ2V0LnNsaWRlVXAoX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB0YWIgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI3VwXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cC56Zi5hY2NvcmRpb24nLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG4gICAgLy8gfSk7XG5cbiAgICAkdGFyZ2V0LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICAgICAgICAgLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICQoYCMkeyR0YXJnZXQuYXR0cignYXJpYS1sYWJlbGxlZGJ5Jyl9YCkuYXR0cih7XG4gICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFuIGFjY29yZGlvbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbiNkZXN0cm95ZWRcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtdGFiLWNvbnRlbnRdJykuc3RvcCh0cnVlKS5zbGlkZVVwKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJy56Zi5hY2NvcmRpb24nKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5BY2NvcmRpb24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBhbmltYXRlIHRoZSBvcGVuaW5nIG9mIGFuIGFjY29yZGlvbiBwYW5lLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1MFxuICAgKi9cbiAgc2xpZGVTcGVlZDogMjUwLFxuICAvKipcbiAgICogQWxsb3cgdGhlIGFjY29yZGlvbiB0byBoYXZlIG11bHRpcGxlIG9wZW4gcGFuZXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIG11bHRpRXhwYW5kOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBhY2NvcmRpb24gdG8gY2xvc2UgYWxsIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBhbGxvd0FsbENsb3NlZDogZmFsc2Vcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBY2NvcmRpb24sICdBY2NvcmRpb24nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFjY29yZGlvbk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvbk1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG5jbGFzcyBBY2NvcmRpb25NZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQWNjb3JkaW9uTWVudS5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuXG4gICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnQWNjb3JkaW9uTWVudScpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbk1lbnUnLCB7XG4gICAgICAnRU5URVInOiAndG9nZ2xlJyxcbiAgICAgICdTUEFDRSc6ICd0b2dnbGUnLFxuICAgICAgJ0FSUk9XX1JJR0hUJzogJ29wZW4nLFxuICAgICAgJ0FSUk9XX1VQJzogJ3VwJyxcbiAgICAgICdBUlJPV19ET1dOJzogJ2Rvd24nLFxuICAgICAgJ0FSUk9XX0xFRlQnOiAnY2xvc2UnLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZUFsbCdcbiAgICB9KTtcbiAgfVxuXG5cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIGFjY29yZGlvbiBtZW51IGJ5IGhpZGluZyBhbGwgbmVzdGVkIG1lbnVzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLm5vdCgnLmlzLWFjdGl2ZScpLnNsaWRlVXAoMCk7Ly8uZmluZCgnYScpLmNzcygncGFkZGluZy1sZWZ0JywgJzFyZW0nKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoe1xuICAgICAgJ3JvbGUnOiAnbWVudScsXG4gICAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiB0aGlzLm9wdGlvbnMubXVsdGlPcGVuXG4gICAgfSk7XG5cbiAgICB0aGlzLiRtZW51TGlua3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY2NvcmRpb24tc3VibWVudS1wYXJlbnQnKTtcbiAgICB0aGlzLiRtZW51TGlua3MuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyIGxpbmtJZCA9IHRoaXMuaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnYWNjLW1lbnUtbGluaycpLFxuICAgICAgICAgICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAkc3ViID0gJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyksXG4gICAgICAgICAgc3ViSWQgPSAkc3ViWzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjYy1tZW51JyksXG4gICAgICAgICAgaXNBY3RpdmUgPSAkc3ViLmhhc0NsYXNzKCdpcy1hY3RpdmUnKTtcbiAgICAgICRlbGVtLmF0dHIoe1xuICAgICAgICAnYXJpYS1jb250cm9scyc6IHN1YklkLFxuICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGlzQWN0aXZlLFxuICAgICAgICAncm9sZSc6ICdtZW51aXRlbScsXG4gICAgICAgICdpZCc6IGxpbmtJZFxuICAgICAgfSk7XG4gICAgICAkc3ViLmF0dHIoe1xuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkLFxuICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICdyb2xlJzogJ21lbnUnLFxuICAgICAgICAnaWQnOiBzdWJJZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGluaXRQYW5lcyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpO1xuICAgIGlmKGluaXRQYW5lcy5sZW5ndGgpe1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIGluaXRQYW5lcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIF90aGlzLmRvd24oJCh0aGlzKSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSBtZW51LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJHN1Ym1lbnUgPSAkKHRoaXMpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XScpO1xuXG4gICAgICBpZiAoJHN1Ym1lbnUubGVuZ3RoKSB7XG4gICAgICAgICQodGhpcykuY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKS5vbignY2xpY2suemYuYWNjb3JkaW9uTWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICBfdGhpcy50b2dnbGUoJHN1Ym1lbnUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KS5vbigna2V5ZG93bi56Zi5hY2NvcmRpb25tZW51JywgZnVuY3Rpb24oZSl7XG4gICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50LFxuICAgICAgICAgICR0YXJnZXQgPSAkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKTtcblxuICAgICAgJGVsZW1lbnRzLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICBpZiAoJCh0aGlzKS5pcygkZWxlbWVudCkpIHtcbiAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaS0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkrMSwgJGVsZW1lbnRzLmxlbmd0aC0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG5cbiAgICAgICAgICBpZiAoJCh0aGlzKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV06dmlzaWJsZScpLmxlbmd0aCkgeyAvLyBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3QtY2hpbGQnKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpmaXJzdC1jaGlsZCcpKSB7IC8vIGlzIGZpcnN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdOnZpc2libGUnKS5sZW5ndGgpIHsgLy8gaWYgcHJldmlvdXMgZWxlbWVudCBoYXMgb3BlbiBzdWIgbWVudVxuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJHByZXZFbGVtZW50LnBhcmVudHMoJ2xpJykuZmluZCgnbGk6bGFzdC1jaGlsZCcpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJCh0aGlzKS5pcygnOmxhc3QtY2hpbGQnKSkgeyAvLyBpcyBsYXN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5uZXh0KCdsaScpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdBY2NvcmRpb25NZW51Jywge1xuICAgICAgICBvcGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgICBfdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgICAgICAgJHRhcmdldC5maW5kKCdsaScpLmZpcnN0KCkuZmluZCgnYScpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJHRhcmdldC5sZW5ndGggJiYgISR0YXJnZXQuaXMoJzpoaWRkZW4nKSkgeyAvLyBjbG9zZSBhY3RpdmUgc3ViIG9mIHRoaXMgaXRlbVxuICAgICAgICAgICAgX3RoaXMudXAoJHRhcmdldCk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7IC8vIGNsb3NlIGN1cnJlbnRseSBvcGVuIHN1YlxuICAgICAgICAgICAgX3RoaXMudXAoJGVsZW1lbnQucGFyZW50KCdbZGF0YS1zdWJtZW51XScpKTtcbiAgICAgICAgICAgICRlbGVtZW50LnBhcmVudHMoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7XG4gICAgICAgICAgICBfdGhpcy50b2dnbGUoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2VBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmhpZGVBbGwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24ocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7Ly8uYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgYWxsIHBhbmVzIG9mIHRoZSBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGhpZGVBbGwoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLnNsaWRlVXAodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2Ugc3RhdGUgb2YgYSBzdWJtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSB0aGUgc3VibWVudSB0byB0b2dnbGVcbiAgICovXG4gIHRvZ2dsZSgkdGFyZ2V0KXtcbiAgICBpZighJHRhcmdldC5pcygnOmFuaW1hdGVkJykpIHtcbiAgICAgIGlmICghJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgIHRoaXMudXAoJHRhcmdldCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5kb3duKCR0YXJnZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgc3ViLW1lbnUgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gb3Blbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjZG93blxuICAgKi9cbiAgZG93bigkdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmKCF0aGlzLm9wdGlvbnMubXVsdGlPcGVuKSB7XG4gICAgICB0aGlzLnVwKHRoaXMuJGVsZW1lbnQuZmluZCgnLmlzLWFjdGl2ZScpLm5vdCgkdGFyZ2V0LnBhcmVudHNVbnRpbCh0aGlzLiRlbGVtZW50KS5hZGQoJHRhcmdldCkpKTtcbiAgICB9XG5cbiAgICAkdGFyZ2V0LmFkZENsYXNzKCdpcy1hY3RpdmUnKS5hdHRyKHsnYXJpYS1oaWRkZW4nOiBmYWxzZX0pXG4gICAgICAucGFyZW50KCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50JykuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG5cbiAgICAgIC8vRm91bmRhdGlvbi5Nb3ZlKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAkdGFyZ2V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgJHRhcmdldC5zbGlkZURvd24oX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgbWVudSBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgICAgICogQGV2ZW50IEFjY29yZGlvbk1lbnUjZG93blxuICAgICAgICAgICAqL1xuICAgICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Rvd24uemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICAgIH0pO1xuICAgICAgLy99KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHN1Yi1tZW51IGRlZmluZWQgYnkgYCR0YXJnZXRgLiBBbGwgc3ViLW1lbnVzIGluc2lkZSB0aGUgdGFyZ2V0IHdpbGwgYmUgY2xvc2VkIGFzIHdlbGwuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gU3ViLW1lbnUgdG8gY2xvc2UuXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I3VwXG4gICAqL1xuICB1cCgkdGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAvL0ZvdW5kYXRpb24uTW92ZSh0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgJHRhcmdldCwgZnVuY3Rpb24oKXtcbiAgICAgICR0YXJnZXQuc2xpZGVVcChfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uTWVudSN1cFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuJGVsZW1lbnQudHJpZ2dlcigndXAuemYuYWNjb3JkaW9uTWVudScsIFskdGFyZ2V0XSk7XG4gICAgICB9KTtcbiAgICAvL30pO1xuXG4gICAgdmFyICRtZW51cyA9ICR0YXJnZXQuZmluZCgnW2RhdGEtc3VibWVudV0nKS5zbGlkZVVwKDApLmFkZEJhY2soKS5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgJG1lbnVzLnBhcmVudCgnLmlzLWFjY29yZGlvbi1zdWJtZW51LXBhcmVudCcpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgYWNjb3JkaW9uIG1lbnUuXG4gICAqIEBmaXJlcyBBY2NvcmRpb25NZW51I2Rlc3Ryb3llZFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykuc2xpZGVEb3duKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKTtcblxuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdhY2NvcmRpb24nKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuQWNjb3JkaW9uTWVudS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGFuaW1hdGUgdGhlIG9wZW5pbmcgb2YgYSBzdWJtZW51IGluIG1zLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDI1MFxuICAgKi9cbiAgc2xpZGVTcGVlZDogMjUwLFxuICAvKipcbiAgICogQWxsb3cgdGhlIG1lbnUgdG8gaGF2ZSBtdWx0aXBsZSBvcGVuIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIG11bHRpT3BlbjogdHJ1ZVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEFjY29yZGlvbk1lbnUsICdBY2NvcmRpb25NZW51Jyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBEcm9wZG93biBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uZHJvcGRvd25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKi9cblxuY2xhc3MgRHJvcGRvd24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGRyb3Bkb3duLlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhIGRyb3Bkb3duLlxuICAgKiAgICAgICAgT2JqZWN0IHNob3VsZCBiZSBvZiB0aGUgZHJvcGRvd24gcGFuZWwsIHJhdGhlciB0aGFuIGl0cyBhbmNob3IuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgRHJvcGRvd24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdEcm9wZG93bicpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0Ryb3Bkb3duJywge1xuICAgICAgJ0VOVEVSJzogJ29wZW4nLFxuICAgICAgJ1NQQUNFJzogJ29wZW4nLFxuICAgICAgJ0VTQ0FQRSc6ICdjbG9zZScsXG4gICAgICAnVEFCJzogJ3RhYl9mb3J3YXJkJyxcbiAgICAgICdTSElGVF9UQUInOiAndGFiX2JhY2t3YXJkJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4gYnkgc2V0dGluZy9jaGVja2luZyBvcHRpb25zIGFuZCBhdHRyaWJ1dGVzLCBhZGRpbmcgaGVscGVyIHZhcmlhYmxlcywgYW5kIHNhdmluZyB0aGUgYW5jaG9yLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciAkaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICB0aGlzLiRhbmNob3IgPSAkKGBbZGF0YS10b2dnbGU9XCIkeyRpZH1cIl1gKS5sZW5ndGggPyAkKGBbZGF0YS10b2dnbGU9XCIkeyRpZH1cIl1gKSA6ICQoYFtkYXRhLW9wZW49XCIkeyRpZH1cIl1gKTtcbiAgICB0aGlzLiRhbmNob3IuYXR0cih7XG4gICAgICAnYXJpYS1jb250cm9scyc6ICRpZCxcbiAgICAgICdkYXRhLWlzLWZvY3VzJzogZmFsc2UsXG4gICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2VcblxuICAgIH0pO1xuXG4gICAgdGhpcy5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgPSB0aGlzLmdldFBvc2l0aW9uQ2xhc3MoKTtcbiAgICB0aGlzLmNvdW50ZXIgPSA0O1xuICAgIHRoaXMudXNlZFBvc2l0aW9ucyA9IFtdO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAnZGF0YS15ZXRpLWJveCc6ICRpZCxcbiAgICAgICdkYXRhLXJlc2l6ZSc6ICRpZCxcbiAgICAgICdhcmlhLWxhYmVsbGVkYnknOiB0aGlzLiRhbmNob3JbMF0uaWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnZGQtYW5jaG9yJylcbiAgICB9KTtcbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGN1cnJlbnQgb3JpZW50YXRpb24gb2YgZHJvcGRvd24gcGFuZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHBvc2l0aW9uIC0gc3RyaW5nIHZhbHVlIG9mIGEgcG9zaXRpb24gY2xhc3MuXG4gICAqL1xuICBnZXRQb3NpdGlvbkNsYXNzKCkge1xuICAgIHZhciB2ZXJ0aWNhbFBvc2l0aW9uID0gdGhpcy4kZWxlbWVudFswXS5jbGFzc05hbWUubWF0Y2goLyh0b3B8bGVmdHxyaWdodHxib3R0b20pL2cpO1xuICAgICAgICB2ZXJ0aWNhbFBvc2l0aW9uID0gdmVydGljYWxQb3NpdGlvbiA/IHZlcnRpY2FsUG9zaXRpb25bMF0gOiAnJztcbiAgICB2YXIgaG9yaXpvbnRhbFBvc2l0aW9uID0gL2Zsb2F0LShcXFMrKS8uZXhlYyh0aGlzLiRhbmNob3JbMF0uY2xhc3NOYW1lKTtcbiAgICAgICAgaG9yaXpvbnRhbFBvc2l0aW9uID0gaG9yaXpvbnRhbFBvc2l0aW9uID8gaG9yaXpvbnRhbFBvc2l0aW9uWzFdIDogJyc7XG4gICAgdmFyIHBvc2l0aW9uID0gaG9yaXpvbnRhbFBvc2l0aW9uID8gaG9yaXpvbnRhbFBvc2l0aW9uICsgJyAnICsgdmVydGljYWxQb3NpdGlvbiA6IHZlcnRpY2FsUG9zaXRpb247XG5cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cblxuICAvKipcbiAgICogQWRqdXN0cyB0aGUgZHJvcGRvd24gcGFuZXMgb3JpZW50YXRpb24gYnkgYWRkaW5nL3JlbW92aW5nIHBvc2l0aW9uaW5nIGNsYXNzZXMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gcG9zaXRpb24gLSBwb3NpdGlvbiBjbGFzcyB0byByZW1vdmUuXG4gICAqL1xuICBfcmVwb3NpdGlvbihwb3NpdGlvbikge1xuICAgIHRoaXMudXNlZFBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uID8gcG9zaXRpb24gOiAnYm90dG9tJyk7XG4gICAgLy9kZWZhdWx0LCB0cnkgc3dpdGNoaW5nIHRvIG9wcG9zaXRlIHNpZGVcbiAgICBpZighcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ3RvcCcpO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAndG9wJyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2JvdHRvbScpIDwgMCkpe1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKVxuICAgICAgICAgIC5hZGRDbGFzcygncmlnaHQnKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3JpZ2h0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfVxuXG4gICAgLy9pZiBkZWZhdWx0IGNoYW5nZSBkaWRuJ3Qgd29yaywgdHJ5IGJvdHRvbSBvciBsZWZ0IGZpcnN0XG4gICAgZWxzZSBpZighcG9zaXRpb24gJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCd0b3AnKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoJ2xlZnQnKTtcbiAgICB9ZWxzZSBpZihwb3NpdGlvbiA9PT0gJ3RvcCcgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA+IC0xKSAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ2xlZnQnKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pXG4gICAgICAgICAgLmFkZENsYXNzKCdsZWZ0Jyk7XG4gICAgfWVsc2UgaWYocG9zaXRpb24gPT09ICdsZWZ0JyAmJiAodGhpcy51c2VkUG9zaXRpb25zLmluZGV4T2YoJ3JpZ2h0JykgPiAtMSkgJiYgKHRoaXMudXNlZFBvc2l0aW9ucy5pbmRleE9mKCdib3R0b20nKSA8IDApKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MocG9zaXRpb24pO1xuICAgIH1lbHNlIGlmKHBvc2l0aW9uID09PSAncmlnaHQnICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignbGVmdCcpID4gLTEpICYmICh0aGlzLnVzZWRQb3NpdGlvbnMuaW5kZXhPZignYm90dG9tJykgPCAwKSl7XG4gICAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHBvc2l0aW9uKTtcbiAgICB9XG4gICAgLy9pZiBub3RoaW5nIGNsZWFyZWQsIHNldCB0byBib3R0b21cbiAgICBlbHNle1xuICAgICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhwb3NpdGlvbik7XG4gICAgfVxuICAgIHRoaXMuY2xhc3NDaGFuZ2VkID0gdHJ1ZTtcbiAgICB0aGlzLmNvdW50ZXItLTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBhbmQgb3JpZW50YXRpb24gb2YgdGhlIGRyb3Bkb3duIHBhbmUsIGNoZWNrcyBmb3IgY29sbGlzaW9ucy5cbiAgICogUmVjdXJzaXZlbHkgY2FsbHMgaXRzZWxmIGlmIGEgY29sbGlzaW9uIGlzIGRldGVjdGVkLCB3aXRoIGEgbmV3IHBvc2l0aW9uIGNsYXNzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRQb3NpdGlvbigpIHtcbiAgICBpZih0aGlzLiRhbmNob3IuYXR0cignYXJpYS1leHBhbmRlZCcpID09PSAnZmFsc2UnKXsgcmV0dXJuIGZhbHNlOyB9XG4gICAgdmFyIHBvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbkNsYXNzKCksXG4gICAgICAgICRlbGVEaW1zID0gRm91bmRhdGlvbi5Cb3guR2V0RGltZW5zaW9ucyh0aGlzLiRlbGVtZW50KSxcbiAgICAgICAgJGFuY2hvckRpbXMgPSBGb3VuZGF0aW9uLkJveC5HZXREaW1lbnNpb25zKHRoaXMuJGFuY2hvciksXG4gICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgZGlyZWN0aW9uID0gKHBvc2l0aW9uID09PSAnbGVmdCcgPyAnbGVmdCcgOiAoKHBvc2l0aW9uID09PSAncmlnaHQnKSA/ICdsZWZ0JyA6ICd0b3AnKSksXG4gICAgICAgIHBhcmFtID0gKGRpcmVjdGlvbiA9PT0gJ3RvcCcpID8gJ2hlaWdodCcgOiAnd2lkdGgnLFxuICAgICAgICBvZmZzZXQgPSAocGFyYW0gPT09ICdoZWlnaHQnKSA/IHRoaXMub3B0aW9ucy52T2Zmc2V0IDogdGhpcy5vcHRpb25zLmhPZmZzZXQ7XG5cblxuXG4gICAgaWYoKCRlbGVEaW1zLndpZHRoID49ICRlbGVEaW1zLndpbmRvd0RpbXMud2lkdGgpIHx8ICghdGhpcy5jb3VudGVyICYmICFGb3VuZGF0aW9uLkJveC5JbU5vdFRvdWNoaW5nWW91KHRoaXMuJGVsZW1lbnQpKSl7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZnNldChGb3VuZGF0aW9uLkJveC5HZXRPZmZzZXRzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJGFuY2hvciwgJ2NlbnRlciBib3R0b20nLCB0aGlzLm9wdGlvbnMudk9mZnNldCwgdGhpcy5vcHRpb25zLmhPZmZzZXQsIHRydWUpKS5jc3Moe1xuICAgICAgICAnd2lkdGgnOiAkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC0gKHRoaXMub3B0aW9ucy5oT2Zmc2V0ICogMiksXG4gICAgICAgICdoZWlnaHQnOiAnYXV0bydcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jbGFzc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub2Zmc2V0KEZvdW5kYXRpb24uQm94LkdldE9mZnNldHModGhpcy4kZWxlbWVudCwgdGhpcy4kYW5jaG9yLCBwb3NpdGlvbiwgdGhpcy5vcHRpb25zLnZPZmZzZXQsIHRoaXMub3B0aW9ucy5oT2Zmc2V0KSk7XG5cbiAgICB3aGlsZSghRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSh0aGlzLiRlbGVtZW50LCBmYWxzZSwgdHJ1ZSkgJiYgdGhpcy5jb3VudGVyKXtcbiAgICAgIHRoaXMuX3JlcG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgdGhpcy5fc2V0UG9zaXRpb24oKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGVsZW1lbnQgdXRpbGl6aW5nIHRoZSB0cmlnZ2VycyB1dGlsaXR5IGxpYnJhcnkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuJGVsZW1lbnQub24oe1xuICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgJ2Nsb3NlLnpmLnRyaWdnZXInOiB0aGlzLmNsb3NlLmJpbmQodGhpcyksXG4gICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiB0aGlzLl9zZXRQb3NpdGlvbi5iaW5kKHRoaXMpXG4gICAgfSk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuaG92ZXIpe1xuICAgICAgdGhpcy4kYW5jaG9yLm9mZignbW91c2VlbnRlci56Zi5kcm9wZG93biBtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJylcbiAgICAgIC5vbignbW91c2VlbnRlci56Zi5kcm9wZG93bicsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZigkKCdib2R5W2RhdGEtd2hhdGlucHV0PVwibW91c2VcIl0nKS5pcygnKicpKSB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuJGFuY2hvci5kYXRhKCdob3ZlcicsIHRydWUpO1xuICAgICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLm9uKCdtb3VzZWxlYXZlLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZGF0YSgnaG92ZXInLCBmYWxzZSk7XG4gICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgICAgIH0pO1xuICAgICAgaWYodGhpcy5vcHRpb25zLmhvdmVyUGFuZSl7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3duIG1vdXNlbGVhdmUuemYuZHJvcGRvd24nKVxuICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3duJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVvdXQpO1xuICAgICAgICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYuZHJvcGRvd24nLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZW91dCk7XG4gICAgICAgICAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmRhdGEoJ2hvdmVyJywgZmFsc2UpO1xuICAgICAgICAgICAgICB9LCBfdGhpcy5vcHRpb25zLmhvdmVyRGVsYXkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuJGFuY2hvci5hZGQodGhpcy4kZWxlbWVudCkub24oJ2tleWRvd24uemYuZHJvcGRvd24nLCBmdW5jdGlvbihlKSB7XG5cbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKSxcbiAgICAgICAgdmlzaWJsZUZvY3VzYWJsZUVsZW1lbnRzID0gRm91bmRhdGlvbi5LZXlib2FyZC5maW5kRm9jdXNhYmxlKF90aGlzLiRlbGVtZW50KTtcblxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ0Ryb3Bkb3duJywge1xuICAgICAgICB0YWJfZm9yd2FyZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKF90aGlzLiRlbGVtZW50LmZpbmQoJzpmb2N1cycpLmlzKHZpc2libGVGb2N1c2FibGVFbGVtZW50cy5lcSgtMSkpKSB7IC8vIGxlZnQgbW9kYWwgZG93bndhcmRzLCBzZXR0aW5nIGZvY3VzIHRvIGZpcnN0IGVsZW1lbnRcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnRyYXBGb2N1cykgeyAvLyBpZiBmb2N1cyBzaGFsbCBiZSB0cmFwcGVkXG4gICAgICAgICAgICAgIHZpc2libGVGb2N1c2FibGVFbGVtZW50cy5lcSgwKS5mb2N1cygpO1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiBmb2N1cyBpcyBub3QgdHJhcHBlZCwgY2xvc2UgZHJvcGRvd24gb24gZm9jdXMgb3V0XG4gICAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0YWJfYmFja3dhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyh2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoMCkpIHx8IF90aGlzLiRlbGVtZW50LmlzKCc6Zm9jdXMnKSkgeyAvLyBsZWZ0IG1vZGFsIHVwd2FyZHMsIHNldHRpbmcgZm9jdXMgdG8gbGFzdCBlbGVtZW50XG4gICAgICAgICAgICBpZiAoX3RoaXMub3B0aW9ucy50cmFwRm9jdXMpIHsgLy8gaWYgZm9jdXMgc2hhbGwgYmUgdHJhcHBlZFxuICAgICAgICAgICAgICB2aXNpYmxlRm9jdXNhYmxlRWxlbWVudHMuZXEoLTEpLmZvY3VzKCk7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIGZvY3VzIGlzIG5vdCB0cmFwcGVkLCBjbG9zZSBkcm9wZG93biBvbiBmb2N1cyBvdXRcbiAgICAgICAgICAgICAgX3RoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICgkdGFyZ2V0LmlzKF90aGlzLiRhbmNob3IpKSB7XG4gICAgICAgICAgICBfdGhpcy5vcGVuKCk7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIC0xKS5mb2N1cygpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgX3RoaXMuJGFuY2hvci5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICAgdmFyICRib2R5ID0gJChkb2N1bWVudC5ib2R5KS5ub3QodGhpcy4kZWxlbWVudCksXG4gICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgICRib2R5Lm9mZignY2xpY2suemYuZHJvcGRvd24nKVxuICAgICAgICAgIC5vbignY2xpY2suemYuZHJvcGRvd24nLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGlmKF90aGlzLiRhbmNob3IuaXMoZS50YXJnZXQpIHx8IF90aGlzLiRhbmNob3IuZmluZChlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKF90aGlzLiRlbGVtZW50LmZpbmQoZS50YXJnZXQpLmxlbmd0aCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgJGJvZHkub2ZmKCdjbGljay56Zi5kcm9wZG93bicpO1xuICAgICAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBkcm9wZG93biBwYW5lLCBhbmQgZmlyZXMgYSBidWJibGluZyBldmVudCB0byBjbG9zZSBvdGhlciBkcm9wZG93bnMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgRHJvcGRvd24jY2xvc2VtZVxuICAgKiBAZmlyZXMgRHJvcGRvd24jc2hvd1xuICAgKi9cbiAgb3BlbigpIHtcbiAgICAvLyB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHRvIGNsb3NlIG90aGVyIG9wZW4gZHJvcGRvd25zXG4gICAgICogQGV2ZW50IERyb3Bkb3duI2Nsb3NlbWVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlbWUuemYuZHJvcGRvd24nLCB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgIHRoaXMuJGFuY2hvci5hZGRDbGFzcygnaG92ZXInKVxuICAgICAgICAuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG4gICAgLy8gdGhpcy4kZWxlbWVudC8qLnNob3coKSovO1xuICAgIHRoaXMuX3NldFBvc2l0aW9uKCk7XG4gICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnaXMtb3BlbicpXG4gICAgICAgIC5hdHRyKHsnYXJpYS1oaWRkZW4nOiBmYWxzZX0pO1xuXG4gICAgaWYodGhpcy5vcHRpb25zLmF1dG9Gb2N1cyl7XG4gICAgICB2YXIgJGZvY3VzYWJsZSA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcbiAgICAgIGlmKCRmb2N1c2FibGUubGVuZ3RoKXtcbiAgICAgICAgJGZvY3VzYWJsZS5lcSgwKS5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2speyB0aGlzLl9hZGRCb2R5SGFuZGxlcigpOyB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyBvbmNlIHRoZSBkcm9wZG93biBpcyB2aXNpYmxlLlxuICAgICAqIEBldmVudCBEcm9wZG93biNzaG93XG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdzaG93LnpmLmRyb3Bkb3duJywgW3RoaXMuJGVsZW1lbnRdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIG9wZW4gZHJvcGRvd24gcGFuZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBEcm9wZG93biNoaWRlXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZighdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpXG4gICAgICAgIC5hdHRyKHsnYXJpYS1oaWRkZW4nOiB0cnVlfSk7XG5cbiAgICB0aGlzLiRhbmNob3IucmVtb3ZlQ2xhc3MoJ2hvdmVyJylcbiAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG5cbiAgICBpZih0aGlzLmNsYXNzQ2hhbmdlZCl7XG4gICAgICB2YXIgY3VyUG9zaXRpb25DbGFzcyA9IHRoaXMuZ2V0UG9zaXRpb25DbGFzcygpO1xuICAgICAgaWYoY3VyUG9zaXRpb25DbGFzcyl7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoY3VyUG9zaXRpb25DbGFzcyk7XG4gICAgICB9XG4gICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5wb3NpdGlvbkNsYXNzKVxuICAgICAgICAgIC8qLmhpZGUoKSovLmNzcyh7aGVpZ2h0OiAnJywgd2lkdGg6ICcnfSk7XG4gICAgICB0aGlzLmNsYXNzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5jb3VudGVyID0gNDtcbiAgICAgIHRoaXMudXNlZFBvc2l0aW9ucy5sZW5ndGggPSAwO1xuICAgIH1cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYuZHJvcGRvd24nLCBbdGhpcy4kZWxlbWVudF0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIGRyb3Bkb3duIHBhbmUncyB2aXNpYmlsaXR5LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZih0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpe1xuICAgICAgaWYodGhpcy4kYW5jaG9yLmRhdGEoJ2hvdmVyJykpIHJldHVybjtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgZHJvcGRvd24uXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXInKS5oaWRlKCk7XG4gICAgdGhpcy4kYW5jaG9yLm9mZignLnpmLmRyb3Bkb3duJyk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuRHJvcGRvd24uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBkZWxheSBvcGVuaW5nIGEgc3VibWVudSBvbiBob3ZlciBldmVudC5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAyNTBcbiAgICovXG4gIGhvdmVyRGVsYXk6IDI1MCxcbiAgLyoqXG4gICAqIEFsbG93IHN1Ym1lbnVzIHRvIG9wZW4gb24gaG92ZXIgZXZlbnRzXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGhvdmVyOiBmYWxzZSxcbiAgLyoqXG4gICAqIERvbid0IGNsb3NlIGRyb3Bkb3duIHdoZW4gaG92ZXJpbmcgb3ZlciBkcm9wZG93biBwYW5lXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgaG92ZXJQYW5lOiBmYWxzZSxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwaXhlbHMgYmV0d2VlbiB0aGUgZHJvcGRvd24gcGFuZSBhbmQgdGhlIHRyaWdnZXJpbmcgZWxlbWVudCBvbiBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDFcbiAgICovXG4gIHZPZmZzZXQ6IDEsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIGJldHdlZW4gdGhlIGRyb3Bkb3duIHBhbmUgYW5kIHRoZSB0cmlnZ2VyaW5nIGVsZW1lbnQgb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxXG4gICAqL1xuICBoT2Zmc2V0OiAxLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byBhZGp1c3Qgb3BlbiBwb3NpdGlvbi4gSlMgd2lsbCB0ZXN0IGFuZCBmaWxsIHRoaXMgaW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ3RvcCdcbiAgICovXG4gIHBvc2l0aW9uQ2xhc3M6ICcnLFxuICAvKipcbiAgICogQWxsb3cgdGhlIHBsdWdpbiB0byB0cmFwIGZvY3VzIHRvIHRoZSBkcm9wZG93biBwYW5lIGlmIG9wZW5lZCB3aXRoIGtleWJvYXJkIGNvbW1hbmRzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICB0cmFwRm9jdXM6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgdGhlIHBsdWdpbiB0byBzZXQgZm9jdXMgdG8gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IHdpdGhpbiB0aGUgcGFuZSwgcmVnYXJkbGVzcyBvZiBtZXRob2Qgb2Ygb3BlbmluZy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIGEgY2xpY2sgb24gdGhlIGJvZHkgdG8gY2xvc2UgdGhlIGRyb3Bkb3duLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IGZhbHNlXG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihEcm9wZG93biwgJ0Ryb3Bkb3duJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBEcm9wZG93bk1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmRyb3Bkb3duLW1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYm94XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm5lc3RcbiAqL1xuXG5jbGFzcyBEcm9wZG93bk1lbnUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBEcm9wZG93bk1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgRHJvcGRvd25NZW51I2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhIGRyb3Bkb3duIG1lbnUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgRHJvcGRvd25NZW51LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICBGb3VuZGF0aW9uLk5lc3QuRmVhdGhlcih0aGlzLiRlbGVtZW50LCAnZHJvcGRvd24nKTtcbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdEcm9wZG93bk1lbnUnKTtcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdEcm9wZG93bk1lbnUnLCB7XG4gICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAnQVJST1dfVVAnOiAndXAnLFxuICAgICAgJ0FSUk9XX0RPV04nOiAnZG93bicsXG4gICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cycsXG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBwbHVnaW4sIGFuZCBjYWxscyBfcHJlcGFyZU1lbnVcbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgc3VicyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnbGkuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKTtcbiAgICB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCcuaXMtZHJvcGRvd24tc3VibWVudS1wYXJlbnQnKS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKS5hZGRDbGFzcygnZmlyc3Qtc3ViJyk7XG5cbiAgICB0aGlzLiRtZW51SXRlbXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tyb2xlPVwibWVudWl0ZW1cIl0nKTtcbiAgICB0aGlzLiR0YWJzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignW3JvbGU9XCJtZW51aXRlbVwiXScpO1xuICAgIHRoaXMuJHRhYnMuZmluZCgndWwuaXMtZHJvcGRvd24tc3VibWVudScpLmFkZENsYXNzKHRoaXMub3B0aW9ucy52ZXJ0aWNhbENsYXNzKTtcblxuICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMub3B0aW9ucy5yaWdodENsYXNzKSB8fCB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAncmlnaHQnIHx8IEZvdW5kYXRpb24ucnRsKCkgfHwgdGhpcy4kZWxlbWVudC5wYXJlbnRzKCcudG9wLWJhci1yaWdodCcpLmlzKCcqJykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5hbGlnbm1lbnQgPSAncmlnaHQnO1xuICAgICAgc3Vicy5hZGRDbGFzcygnb3BlbnMtbGVmdCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJzLmFkZENsYXNzKCdvcGVucy1yaWdodCcpO1xuICAgIH1cbiAgICB0aGlzLmNoYW5nZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9ldmVudHMoKTtcbiAgfTtcblxuICBfaXNWZXJ0aWNhbCgpIHtcbiAgICByZXR1cm4gdGhpcy4kdGFicy5jc3MoJ2Rpc3BsYXknKSA9PT0gJ2Jsb2NrJztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byBlbGVtZW50cyB3aXRoaW4gdGhlIG1lbnVcbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGhhc1RvdWNoID0gJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8ICh0eXBlb2Ygd2luZG93Lm9udG91Y2hzdGFydCAhPT0gJ3VuZGVmaW5lZCcpLFxuICAgICAgICBwYXJDbGFzcyA9ICdpcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCc7XG5cbiAgICAvLyB1c2VkIGZvciBvbkNsaWNrIGFuZCBpbiB0aGUga2V5Ym9hcmQgaGFuZGxlcnNcbiAgICB2YXIgaGFuZGxlQ2xpY2tGbiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkZWxlbSA9ICQoZS50YXJnZXQpLnBhcmVudHNVbnRpbCgndWwnLCBgLiR7cGFyQ2xhc3N9YCksXG4gICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpLFxuICAgICAgICAgIGhhc0NsaWNrZWQgPSAkZWxlbS5hdHRyKCdkYXRhLWlzLWNsaWNrJykgPT09ICd0cnVlJyxcbiAgICAgICAgICAkc3ViID0gJGVsZW0uY2hpbGRyZW4oJy5pcy1kcm9wZG93bi1zdWJtZW51Jyk7XG5cbiAgICAgIGlmIChoYXNTdWIpIHtcbiAgICAgICAgaWYgKGhhc0NsaWNrZWQpIHtcbiAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrIHx8ICghX3RoaXMub3B0aW9ucy5jbGlja09wZW4gJiYgIWhhc1RvdWNoKSB8fCAoX3RoaXMub3B0aW9ucy5mb3JjZUZvbGxvdyAmJiBoYXNUb3VjaCkpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgX3RoaXMuX2hpZGUoJGVsZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBfdGhpcy5fc2hvdygkc3ViKTtcbiAgICAgICAgICAkZWxlbS5hZGQoJGVsZW0ucGFyZW50c1VudGlsKF90aGlzLiRlbGVtZW50LCBgLiR7cGFyQ2xhc3N9YCkpLmF0dHIoJ2RhdGEtaXMtY2xpY2snLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYoX3RoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2tJbnNpZGUpe1xuICAgICAgICAgIF90aGlzLl9oaWRlKCRlbGVtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tPcGVuIHx8IGhhc1RvdWNoKSB7XG4gICAgICB0aGlzLiRtZW51SXRlbXMub24oJ2NsaWNrLnpmLmRyb3Bkb3dubWVudSB0b3VjaHN0YXJ0LnpmLmRyb3Bkb3dubWVudScsIGhhbmRsZUNsaWNrRm4pO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLmRpc2FibGVIb3Zlcikge1xuICAgICAgdGhpcy4kbWVudUl0ZW1zLm9uKCdtb3VzZWVudGVyLnpmLmRyb3Bkb3dubWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyICRlbGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGhhc1N1YiA9ICRlbGVtLmhhc0NsYXNzKHBhckNsYXNzKTtcblxuICAgICAgICBpZiAoaGFzU3ViKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmRlbGF5KTtcbiAgICAgICAgICBfdGhpcy5kZWxheSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2hvdygkZWxlbS5jaGlsZHJlbignLmlzLWRyb3Bkb3duLXN1Ym1lbnUnKSk7XG4gICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5ob3ZlckRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfSkub24oJ21vdXNlbGVhdmUuemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgaGFzU3ViID0gJGVsZW0uaGFzQ2xhc3MocGFyQ2xhc3MpO1xuICAgICAgICBpZiAoaGFzU3ViICYmIF90aGlzLm9wdGlvbnMuYXV0b2Nsb3NlKSB7XG4gICAgICAgICAgaWYgKCRlbGVtLmF0dHIoJ2RhdGEtaXMtY2xpY2snKSA9PT0gJ3RydWUnICYmIF90aGlzLm9wdGlvbnMuY2xpY2tPcGVuKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmRlbGF5KTtcbiAgICAgICAgICBfdGhpcy5kZWxheSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfdGhpcy5faGlkZSgkZWxlbSk7XG4gICAgICAgICAgfSwgX3RoaXMub3B0aW9ucy5jbG9zaW5nVGltZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLiRtZW51SXRlbXMub24oJ2tleWRvd24uemYuZHJvcGRvd25tZW51JywgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyICRlbGVtZW50ID0gJChlLnRhcmdldCkucGFyZW50c1VudGlsKCd1bCcsICdbcm9sZT1cIm1lbnVpdGVtXCJdJyksXG4gICAgICAgICAgaXNUYWIgPSBfdGhpcy4kdGFicy5pbmRleCgkZWxlbWVudCkgPiAtMSxcbiAgICAgICAgICAkZWxlbWVudHMgPSBpc1RhYiA/IF90aGlzLiR0YWJzIDogJGVsZW1lbnQuc2libGluZ3MoJ2xpJykuYWRkKCRlbGVtZW50KSxcbiAgICAgICAgICAkcHJldkVsZW1lbnQsXG4gICAgICAgICAgJG5leHRFbGVtZW50O1xuXG4gICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICRwcmV2RWxlbWVudCA9ICRlbGVtZW50cy5lcShpLTEpO1xuICAgICAgICAgICRuZXh0RWxlbWVudCA9ICRlbGVtZW50cy5lcShpKzEpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBuZXh0U2libGluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoISRlbGVtZW50LmlzKCc6bGFzdC1jaGlsZCcpKSB7XG4gICAgICAgICAgJG5leHRFbGVtZW50LmNoaWxkcmVuKCdhOmZpcnN0JykuZm9jdXMoKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHByZXZTaWJsaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRwcmV2RWxlbWVudC5jaGlsZHJlbignYTpmaXJzdCcpLmZvY3VzKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0sIG9wZW5TdWIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyICRzdWIgPSAkZWxlbWVudC5jaGlsZHJlbigndWwuaXMtZHJvcGRvd24tc3VibWVudScpO1xuICAgICAgICBpZiAoJHN1Yi5sZW5ndGgpIHtcbiAgICAgICAgICBfdGhpcy5fc2hvdygkc3ViKTtcbiAgICAgICAgICAkZWxlbWVudC5maW5kKCdsaSA+IGE6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIHsgcmV0dXJuOyB9XG4gICAgICB9LCBjbG9zZVN1YiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL2lmICgkZWxlbWVudC5pcygnOmZpcnN0LWNoaWxkJykpIHtcbiAgICAgICAgdmFyIGNsb3NlID0gJGVsZW1lbnQucGFyZW50KCd1bCcpLnBhcmVudCgnbGknKTtcbiAgICAgICAgY2xvc2UuY2hpbGRyZW4oJ2E6Zmlyc3QnKS5mb2N1cygpO1xuICAgICAgICBfdGhpcy5faGlkZShjbG9zZSk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy99XG4gICAgICB9O1xuICAgICAgdmFyIGZ1bmN0aW9ucyA9IHtcbiAgICAgICAgb3Blbjogb3BlblN1YixcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLl9oaWRlKF90aGlzLiRlbGVtZW50KTtcbiAgICAgICAgICBfdGhpcy4kbWVudUl0ZW1zLmZpbmQoJ2E6Zmlyc3QnKS5mb2N1cygpOyAvLyBmb2N1cyB0byBmaXJzdCBlbGVtZW50XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAoaXNUYWIpIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc1ZlcnRpY2FsKCkpIHsgLy8gdmVydGljYWwgbWVudVxuICAgICAgICAgIGlmIChGb3VuZGF0aW9uLnJ0bCgpKSB7IC8vIHJpZ2h0IGFsaWduZWRcbiAgICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBkb3duOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgdXA6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBuZXh0OiBjbG9zZVN1YixcbiAgICAgICAgICAgICAgcHJldmlvdXM6IG9wZW5TdWJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7IC8vIGxlZnQgYWxpZ25lZFxuICAgICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICAgIGRvd246IG5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICB1cDogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgIG5leHQ6IG9wZW5TdWIsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBjbG9zZVN1YlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgeyAvLyBob3Jpem9udGFsIG1lbnVcbiAgICAgICAgICBpZiAoRm91bmRhdGlvbi5ydGwoKSkgeyAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgICAkLmV4dGVuZChmdW5jdGlvbnMsIHtcbiAgICAgICAgICAgICAgbmV4dDogcHJldlNpYmxpbmcsXG4gICAgICAgICAgICAgIHByZXZpb3VzOiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgZG93bjogb3BlblN1YixcbiAgICAgICAgICAgICAgdXA6IGNsb3NlU3ViXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgeyAvLyBsZWZ0IGFsaWduZWRcbiAgICAgICAgICAgICQuZXh0ZW5kKGZ1bmN0aW9ucywge1xuICAgICAgICAgICAgICBuZXh0OiBuZXh0U2libGluZyxcbiAgICAgICAgICAgICAgcHJldmlvdXM6IHByZXZTaWJsaW5nLFxuICAgICAgICAgICAgICBkb3duOiBvcGVuU3ViLFxuICAgICAgICAgICAgICB1cDogY2xvc2VTdWJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLy8gbm90IHRhYnMgLT4gb25lIHN1YlxuICAgICAgICBpZiAoRm91bmRhdGlvbi5ydGwoKSkgeyAvLyByaWdodCBhbGlnbmVkXG4gICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICBuZXh0OiBjbG9zZVN1YixcbiAgICAgICAgICAgIHByZXZpb3VzOiBvcGVuU3ViLFxuICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICB1cDogcHJldlNpYmxpbmdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHsgLy8gbGVmdCBhbGlnbmVkXG4gICAgICAgICAgJC5leHRlbmQoZnVuY3Rpb25zLCB7XG4gICAgICAgICAgICBuZXh0OiBvcGVuU3ViLFxuICAgICAgICAgICAgcHJldmlvdXM6IGNsb3NlU3ViLFxuICAgICAgICAgICAgZG93bjogbmV4dFNpYmxpbmcsXG4gICAgICAgICAgICB1cDogcHJldlNpYmxpbmdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ0Ryb3Bkb3duTWVudScsIGZ1bmN0aW9ucyk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgdG8gdGhlIGJvZHkgdG8gY2xvc2UgYW55IGRyb3Bkb3ducyBvbiBhIGNsaWNrLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRCb2R5SGFuZGxlcigpIHtcbiAgICB2YXIgJGJvZHkgPSAkKGRvY3VtZW50LmJvZHkpLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG4gICAgJGJvZHkub2ZmKCdtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnUnKVxuICAgICAgICAgLm9uKCdtb3VzZXVwLnpmLmRyb3Bkb3dubWVudSB0b3VjaGVuZC56Zi5kcm9wZG93bm1lbnUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgIHZhciAkbGluayA9IF90aGlzLiRlbGVtZW50LmZpbmQoZS50YXJnZXQpO1xuICAgICAgICAgICBpZiAoJGxpbmsubGVuZ3RoKSB7IHJldHVybjsgfVxuXG4gICAgICAgICAgIF90aGlzLl9oaWRlKCk7XG4gICAgICAgICAgICRib2R5Lm9mZignbW91c2V1cC56Zi5kcm9wZG93bm1lbnUgdG91Y2hlbmQuemYuZHJvcGRvd25tZW51Jyk7XG4gICAgICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcGVucyBhIGRyb3Bkb3duIHBhbmUsIGFuZCBjaGVja3MgZm9yIGNvbGxpc2lvbnMgZmlyc3QuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkc3ViIC0gdWwgZWxlbWVudCB0aGF0IGlzIGEgc3VibWVudSB0byBzaG93XG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAZmlyZXMgRHJvcGRvd25NZW51I3Nob3dcbiAgICovXG4gIF9zaG93KCRzdWIpIHtcbiAgICB2YXIgaWR4ID0gdGhpcy4kdGFicy5pbmRleCh0aGlzLiR0YWJzLmZpbHRlcihmdW5jdGlvbihpLCBlbCkge1xuICAgICAgcmV0dXJuICQoZWwpLmZpbmQoJHN1YikubGVuZ3RoID4gMDtcbiAgICB9KSk7XG4gICAgdmFyICRzaWJzID0gJHN1Yi5wYXJlbnQoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jykuc2libGluZ3MoJ2xpLmlzLWRyb3Bkb3duLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgdGhpcy5faGlkZSgkc2licywgaWR4KTtcbiAgICAkc3ViLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKS5hZGRDbGFzcygnanMtZHJvcGRvd24tYWN0aXZlJykuYXR0cih7J2FyaWEtaGlkZGVuJzogZmFsc2V9KVxuICAgICAgICAucGFyZW50KCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLmFkZENsYXNzKCdpcy1hY3RpdmUnKVxuICAgICAgICAuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG4gICAgdmFyIGNsZWFyID0gRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSgkc3ViLCBudWxsLCB0cnVlKTtcbiAgICBpZiAoIWNsZWFyKSB7XG4gICAgICB2YXIgb2xkQ2xhc3MgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnbGVmdCcgPyAnLXJpZ2h0JyA6ICctbGVmdCcsXG4gICAgICAgICAgJHBhcmVudExpID0gJHN1Yi5wYXJlbnQoJy5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpO1xuICAgICAgJHBhcmVudExpLnJlbW92ZUNsYXNzKGBvcGVucyR7b2xkQ2xhc3N9YCkuYWRkQ2xhc3MoYG9wZW5zLSR7dGhpcy5vcHRpb25zLmFsaWdubWVudH1gKTtcbiAgICAgIGNsZWFyID0gRm91bmRhdGlvbi5Cb3guSW1Ob3RUb3VjaGluZ1lvdSgkc3ViLCBudWxsLCB0cnVlKTtcbiAgICAgIGlmICghY2xlYXIpIHtcbiAgICAgICAgJHBhcmVudExpLnJlbW92ZUNsYXNzKGBvcGVucy0ke3RoaXMub3B0aW9ucy5hbGlnbm1lbnR9YCkuYWRkQ2xhc3MoJ29wZW5zLWlubmVyJyk7XG4gICAgICB9XG4gICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgICAkc3ViLmNzcygndmlzaWJpbGl0eScsICcnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykgeyB0aGlzLl9hZGRCb2R5SGFuZGxlcigpOyB9XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgbmV3IGRyb3Bkb3duIHBhbmUgaXMgdmlzaWJsZS5cbiAgICAgKiBAZXZlbnQgRHJvcGRvd25NZW51I3Nob3dcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3Nob3cuemYuZHJvcGRvd25tZW51JywgWyRzdWJdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlcyBhIHNpbmdsZSwgY3VycmVudGx5IG9wZW4gZHJvcGRvd24gcGFuZSwgaWYgcGFzc2VkIGEgcGFyYW1ldGVyLCBvdGhlcndpc2UsIGhpZGVzIGV2ZXJ5dGhpbmcuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJGVsZW0gLSBlbGVtZW50IHdpdGggYSBzdWJtZW51IHRvIGhpZGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkeCAtIGluZGV4IG9mIHRoZSAkdGFicyBjb2xsZWN0aW9uIHRvIGhpZGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9oaWRlKCRlbGVtLCBpZHgpIHtcbiAgICB2YXIgJHRvQ2xvc2U7XG4gICAgaWYgKCRlbGVtICYmICRlbGVtLmxlbmd0aCkge1xuICAgICAgJHRvQ2xvc2UgPSAkZWxlbTtcbiAgICB9IGVsc2UgaWYgKGlkeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAkdG9DbG9zZSA9IHRoaXMuJHRhYnMubm90KGZ1bmN0aW9uKGksIGVsKSB7XG4gICAgICAgIHJldHVybiBpID09PSBpZHg7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAkdG9DbG9zZSA9IHRoaXMuJGVsZW1lbnQ7XG4gICAgfVxuICAgIHZhciBzb21ldGhpbmdUb0Nsb3NlID0gJHRvQ2xvc2UuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpIHx8ICR0b0Nsb3NlLmZpbmQoJy5pcy1hY3RpdmUnKS5sZW5ndGggPiAwO1xuXG4gICAgaWYgKHNvbWV0aGluZ1RvQ2xvc2UpIHtcbiAgICAgICR0b0Nsb3NlLmZpbmQoJ2xpLmlzLWFjdGl2ZScpLmFkZCgkdG9DbG9zZSkuYXR0cih7XG4gICAgICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICAgICdkYXRhLWlzLWNsaWNrJzogZmFsc2VcbiAgICAgIH0pLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICAgJHRvQ2xvc2UuZmluZCgndWwuanMtZHJvcGRvd24tYWN0aXZlJykuYXR0cih7XG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWVcbiAgICAgIH0pLnJlbW92ZUNsYXNzKCdqcy1kcm9wZG93bi1hY3RpdmUnKTtcblxuICAgICAgaWYgKHRoaXMuY2hhbmdlZCB8fCAkdG9DbG9zZS5maW5kKCdvcGVucy1pbm5lcicpLmxlbmd0aCkge1xuICAgICAgICB2YXIgb2xkQ2xhc3MgPSB0aGlzLm9wdGlvbnMuYWxpZ25tZW50ID09PSAnbGVmdCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICAkdG9DbG9zZS5maW5kKCdsaS5pcy1kcm9wZG93bi1zdWJtZW51LXBhcmVudCcpLmFkZCgkdG9DbG9zZSlcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoYG9wZW5zLWlubmVyIG9wZW5zLSR7dGhpcy5vcHRpb25zLmFsaWdubWVudH1gKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgb3BlbnMtJHtvbGRDbGFzc31gKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG9wZW4gbWVudXMgYXJlIGNsb3NlZC5cbiAgICAgICAqIEBldmVudCBEcm9wZG93bk1lbnUjaGlkZVxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2hpZGUuemYuZHJvcGRvd25tZW51JywgWyR0b0Nsb3NlXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRtZW51SXRlbXMub2ZmKCcuemYuZHJvcGRvd25tZW51JykucmVtb3ZlQXR0cignZGF0YS1pcy1jbGljaycpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnaXMtcmlnaHQtYXJyb3cgaXMtbGVmdC1hcnJvdyBpcy1kb3duLWFycm93IG9wZW5zLXJpZ2h0IG9wZW5zLWxlZnQgb3BlbnMtaW5uZXInKTtcbiAgICAkKGRvY3VtZW50LmJvZHkpLm9mZignLnpmLmRyb3Bkb3dubWVudScpO1xuICAgIEZvdW5kYXRpb24uTmVzdC5CdXJuKHRoaXMuJGVsZW1lbnQsICdkcm9wZG93bicpO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5Ecm9wZG93bk1lbnUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBEaXNhbGxvd3MgaG92ZXIgZXZlbnRzIGZyb20gb3BlbmluZyBzdWJtZW51c1xuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGZhbHNlXG4gICAqL1xuICBkaXNhYmxlSG92ZXI6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3cgYSBzdWJtZW51IHRvIGF1dG9tYXRpY2FsbHkgY2xvc2Ugb24gYSBtb3VzZWxlYXZlIGV2ZW50LCBpZiBub3QgY2xpY2tlZCBvcGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGF1dG9jbG9zZTogdHJ1ZSxcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGRlbGF5IG9wZW5pbmcgYSBzdWJtZW51IG9uIGhvdmVyIGV2ZW50LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwXG4gICAqL1xuICBob3ZlckRlbGF5OiA1MCxcbiAgLyoqXG4gICAqIEFsbG93IGEgc3VibWVudSB0byBvcGVuL3JlbWFpbiBvcGVuIG9uIHBhcmVudCBjbGljayBldmVudC4gQWxsb3dzIGN1cnNvciB0byBtb3ZlIGF3YXkgZnJvbSBtZW51LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGNsaWNrT3BlbjogZmFsc2UsXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSB0byBkZWxheSBjbG9zaW5nIGEgc3VibWVudSBvbiBhIG1vdXNlbGVhdmUgZXZlbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTAwXG4gICAqL1xuXG4gIGNsb3NpbmdUaW1lOiA1MDAsXG4gIC8qKlxuICAgKiBQb3NpdGlvbiBvZiB0aGUgbWVudSByZWxhdGl2ZSB0byB3aGF0IGRpcmVjdGlvbiB0aGUgc3VibWVudXMgc2hvdWxkIG9wZW4uIEhhbmRsZWQgYnkgSlMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2xlZnQnXG4gICAqL1xuICBhbGlnbm1lbnQ6ICdsZWZ0JyxcbiAgLyoqXG4gICAqIEFsbG93IGNsaWNrcyBvbiB0aGUgYm9keSB0byBjbG9zZSBhbnkgb3BlbiBzdWJtZW51cy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvdyBjbGlja3Mgb24gbGVhZiBhbmNob3IgbGlua3MgdG8gY2xvc2UgYW55IG9wZW4gc3VibWVudXMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrSW5zaWRlOiB0cnVlLFxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB2ZXJ0aWNhbCBvcmllbnRlZCBtZW51cywgRm91bmRhdGlvbiBkZWZhdWx0IGlzIGB2ZXJ0aWNhbGAuIFVwZGF0ZSB0aGlzIGlmIHVzaW5nIHlvdXIgb3duIGNsYXNzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd2ZXJ0aWNhbCdcbiAgICovXG4gIHZlcnRpY2FsQ2xhc3M6ICd2ZXJ0aWNhbCcsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHJpZ2h0LXNpZGUgb3JpZW50ZWQgbWVudXMsIEZvdW5kYXRpb24gZGVmYXVsdCBpcyBgYWxpZ24tcmlnaHRgLiBVcGRhdGUgdGhpcyBpZiB1c2luZyB5b3VyIG93biBjbGFzcy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnYWxpZ24tcmlnaHQnXG4gICAqL1xuICByaWdodENsYXNzOiAnYWxpZ24tcmlnaHQnLFxuICAvKipcbiAgICogQm9vbGVhbiB0byBmb3JjZSBvdmVyaWRlIHRoZSBjbGlja2luZyBvZiBsaW5rcyB0byBwZXJmb3JtIGRlZmF1bHQgYWN0aW9uLCBvbiBzZWNvbmQgdG91Y2ggZXZlbnQgZm9yIG1vYmlsZS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgZm9yY2VGb2xsb3c6IHRydWVcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihEcm9wZG93bk1lbnUsICdEcm9wZG93bk1lbnUnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEVxdWFsaXplciBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uZXF1YWxpemVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlciBpZiBlcXVhbGl6ZXIgY29udGFpbnMgaW1hZ2VzXG4gKi9cblxuY2xhc3MgRXF1YWxpemVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgRXF1YWxpemVyLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIEVxdWFsaXplciNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpe1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgRXF1YWxpemVyLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdFcXVhbGl6ZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgRXF1YWxpemVyIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBlcXVhbGl6ZXIgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciBlcUlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLWVxdWFsaXplcicpIHx8ICcnO1xuICAgIHZhciAkd2F0Y2hlZCA9IHRoaXMuJGVsZW1lbnQuZmluZChgW2RhdGEtZXF1YWxpemVyLXdhdGNoPVwiJHtlcUlkfVwiXWApO1xuXG4gICAgdGhpcy4kd2F0Y2hlZCA9ICR3YXRjaGVkLmxlbmd0aCA/ICR3YXRjaGVkIDogdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1lcXVhbGl6ZXItd2F0Y2hdJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLXJlc2l6ZScsIChlcUlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2VxJykpKTtcblxuICAgIHRoaXMuaGFzTmVzdGVkID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1lcXVhbGl6ZXJdJykubGVuZ3RoID4gMDtcbiAgICB0aGlzLmlzTmVzdGVkID0gdGhpcy4kZWxlbWVudC5wYXJlbnRzVW50aWwoZG9jdW1lbnQuYm9keSwgJ1tkYXRhLWVxdWFsaXplcl0nKS5sZW5ndGggPiAwO1xuICAgIHRoaXMuaXNPbiA9IGZhbHNlO1xuICAgIHRoaXMuX2JpbmRIYW5kbGVyID0ge1xuICAgICAgb25SZXNpemVNZUJvdW5kOiB0aGlzLl9vblJlc2l6ZU1lLmJpbmQodGhpcyksXG4gICAgICBvblBvc3RFcXVhbGl6ZWRCb3VuZDogdGhpcy5fb25Qb3N0RXF1YWxpemVkLmJpbmQodGhpcylcbiAgICB9O1xuXG4gICAgdmFyIGltZ3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2ltZycpO1xuICAgIHZhciB0b29TbWFsbDtcbiAgICBpZih0aGlzLm9wdGlvbnMuZXF1YWxpemVPbil7XG4gICAgICB0b29TbWFsbCA9IHRoaXMuX2NoZWNrTVEoKTtcbiAgICAgICQod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fY2hlY2tNUS5iaW5kKHRoaXMpKTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIH1cbiAgICBpZigodG9vU21hbGwgIT09IHVuZGVmaW5lZCAmJiB0b29TbWFsbCA9PT0gZmFsc2UpIHx8IHRvb1NtYWxsID09PSB1bmRlZmluZWQpe1xuICAgICAgaWYoaW1ncy5sZW5ndGgpe1xuICAgICAgICBGb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkKGltZ3MsIHRoaXMuX3JlZmxvdy5iaW5kKHRoaXMpKTtcbiAgICAgIH1lbHNle1xuICAgICAgICB0aGlzLl9yZWZsb3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMgaWYgdGhlIGJyZWFrcG9pbnQgaXMgdG9vIHNtYWxsLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhdXNlRXZlbnRzKCkge1xuICAgIHRoaXMuaXNPbiA9IGZhbHNlO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKHtcbiAgICAgICcuemYuZXF1YWxpemVyJzogdGhpcy5fYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmQsXG4gICAgICAncmVzaXplbWUuemYudHJpZ2dlcic6IHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIGZ1bmN0aW9uIHRvIGhhbmRsZSAkZWxlbWVudHMgcmVzaXplbWUuemYudHJpZ2dlciwgd2l0aCBib3VuZCB0aGlzIG9uIF9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblJlc2l6ZU1lKGUpIHtcbiAgICB0aGlzLl9yZWZsb3coKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBoYW5kbGUgJGVsZW1lbnRzIHBvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyLCB3aXRoIGJvdW5kIHRoaXMgb24gX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfb25Qb3N0RXF1YWxpemVkKGUpIHtcbiAgICBpZihlLnRhcmdldCAhPT0gdGhpcy4kZWxlbWVudFswXSl7IHRoaXMuX3JlZmxvdygpOyB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciBFcXVhbGl6ZXIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5fcGF1c2VFdmVudHMoKTtcbiAgICBpZih0aGlzLmhhc05lc3RlZCl7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplcicsIHRoaXMuX2JpbmRIYW5kbGVyLm9uUG9zdEVxdWFsaXplZEJvdW5kKTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCB0aGlzLl9iaW5kSGFuZGxlci5vblJlc2l6ZU1lQm91bmQpO1xuICAgIH1cbiAgICB0aGlzLmlzT24gPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgY3VycmVudCBicmVha3BvaW50IHRvIHRoZSBtaW5pbXVtIHJlcXVpcmVkIHNpemUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY2hlY2tNUSgpIHtcbiAgICB2YXIgdG9vU21hbGwgPSAhRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLmVxdWFsaXplT24pO1xuICAgIGlmKHRvb1NtYWxsKXtcbiAgICAgIGlmKHRoaXMuaXNPbil7XG4gICAgICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgaWYoIXRoaXMuaXNPbil7XG4gICAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG9vU21hbGw7XG4gIH1cblxuICAvKipcbiAgICogQSBub29wIHZlcnNpb24gZm9yIHRoZSBwbHVnaW5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9raWxsc3dpdGNoKCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBFcXVhbGl6ZXIgdXBvbiBET00gY2hhbmdlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVmbG93KCkge1xuICAgIGlmKCF0aGlzLm9wdGlvbnMuZXF1YWxpemVPblN0YWNrKXtcbiAgICAgIGlmKHRoaXMuX2lzU3RhY2tlZCgpKXtcbiAgICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lcXVhbGl6ZUJ5Um93KSB7XG4gICAgICB0aGlzLmdldEhlaWdodHNCeVJvdyh0aGlzLmFwcGx5SGVpZ2h0QnlSb3cuYmluZCh0aGlzKSk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLmdldEhlaWdodHModGhpcy5hcHBseUhlaWdodC5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWFudWFsbHkgZGV0ZXJtaW5lcyBpZiB0aGUgZmlyc3QgMiBlbGVtZW50cyBhcmUgKk5PVCogc3RhY2tlZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pc1N0YWNrZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHdhdGNoZWRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICE9PSB0aGlzLiR3YXRjaGVkWzFdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgb3V0ZXIgaGVpZ2h0cyBvZiBjaGlsZHJlbiBjb250YWluZWQgd2l0aGluIGFuIEVxdWFsaXplciBwYXJlbnQgYW5kIHJldHVybnMgdGhlbSBpbiBhbiBhcnJheVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIEEgbm9uLW9wdGlvbmFsIGNhbGxiYWNrIHRvIHJldHVybiB0aGUgaGVpZ2h0cyBhcnJheSB0by5cbiAgICogQHJldHVybnMge0FycmF5fSBoZWlnaHRzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lclxuICAgKi9cbiAgZ2V0SGVpZ2h0cyhjYikge1xuICAgIHZhciBoZWlnaHRzID0gW107XG4gICAgZm9yKHZhciBpID0gMCwgbGVuID0gdGhpcy4kd2F0Y2hlZC5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICB0aGlzLiR3YXRjaGVkW2ldLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgIGhlaWdodHMucHVzaCh0aGlzLiR3YXRjaGVkW2ldLm9mZnNldEhlaWdodCk7XG4gICAgfVxuICAgIGNiKGhlaWdodHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBvdXRlciBoZWlnaHRzIG9mIGNoaWxkcmVuIGNvbnRhaW5lZCB3aXRoaW4gYW4gRXF1YWxpemVyIHBhcmVudCBhbmQgcmV0dXJucyB0aGVtIGluIGFuIGFycmF5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gQSBub24tb3B0aW9uYWwgY2FsbGJhY2sgdG8gcmV0dXJuIHRoZSBoZWlnaHRzIGFycmF5IHRvLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGdyb3VwcyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXIgZ3JvdXBlZCBieSByb3cgd2l0aCBlbGVtZW50LGhlaWdodCBhbmQgbWF4IGFzIGxhc3QgY2hpbGRcbiAgICovXG4gIGdldEhlaWdodHNCeVJvdyhjYikge1xuICAgIHZhciBsYXN0RWxUb3BPZmZzZXQgPSAodGhpcy4kd2F0Y2hlZC5sZW5ndGggPyB0aGlzLiR3YXRjaGVkLmZpcnN0KCkub2Zmc2V0KCkudG9wIDogMCksXG4gICAgICAgIGdyb3VwcyA9IFtdLFxuICAgICAgICBncm91cCA9IDA7XG4gICAgLy9ncm91cCBieSBSb3dcbiAgICBncm91cHNbZ3JvdXBdID0gW107XG4gICAgZm9yKHZhciBpID0gMCwgbGVuID0gdGhpcy4kd2F0Y2hlZC5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICB0aGlzLiR3YXRjaGVkW2ldLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgIC8vbWF5YmUgY291bGQgdXNlIHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0VG9wXG4gICAgICB2YXIgZWxPZmZzZXRUb3AgPSAkKHRoaXMuJHdhdGNoZWRbaV0pLm9mZnNldCgpLnRvcDtcbiAgICAgIGlmIChlbE9mZnNldFRvcCE9bGFzdEVsVG9wT2Zmc2V0KSB7XG4gICAgICAgIGdyb3VwKys7XG4gICAgICAgIGdyb3Vwc1tncm91cF0gPSBbXTtcbiAgICAgICAgbGFzdEVsVG9wT2Zmc2V0PWVsT2Zmc2V0VG9wO1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2dyb3VwXS5wdXNoKFt0aGlzLiR3YXRjaGVkW2ldLHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0SGVpZ2h0XSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDAsIGxuID0gZ3JvdXBzLmxlbmd0aDsgaiA8IGxuOyBqKyspIHtcbiAgICAgIHZhciBoZWlnaHRzID0gJChncm91cHNbal0pLm1hcChmdW5jdGlvbigpeyByZXR1cm4gdGhpc1sxXTsgfSkuZ2V0KCk7XG4gICAgICB2YXIgbWF4ICAgICAgICAgPSBNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKTtcbiAgICAgIGdyb3Vwc1tqXS5wdXNoKG1heCk7XG4gICAgfVxuICAgIGNiKGdyb3Vwcyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlcyB0aGUgQ1NTIGhlaWdodCBwcm9wZXJ0eSBvZiBlYWNoIGNoaWxkIGluIGFuIEVxdWFsaXplciBwYXJlbnQgdG8gbWF0Y2ggdGhlIHRhbGxlc3RcbiAgICogQHBhcmFtIHthcnJheX0gaGVpZ2h0cyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXJcbiAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICogQGZpcmVzIEVxdWFsaXplciNwb3N0ZXF1YWxpemVkXG4gICAqL1xuICBhcHBseUhlaWdodChoZWlnaHRzKSB7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBhcmUgYXBwbGllZFxuICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG5cbiAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgbWF4KTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICAgKi9cbiAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIENTUyBoZWlnaHQgcHJvcGVydHkgb2YgZWFjaCBjaGlsZCBpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IHRvIG1hdGNoIHRoZSB0YWxsZXN0IGJ5IHJvd1xuICAgKiBAcGFyYW0ge2FycmF5fSBncm91cHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyIGdyb3VwZWQgYnkgcm93IHdpdGggZWxlbWVudCxoZWlnaHQgYW5kIG1heCBhcyBsYXN0IGNoaWxkXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkUm93XG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFJvd1xuICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICovXG4gIGFwcGx5SGVpZ2h0QnlSb3coZ3JvdXBzKSB7XG4gICAgLyoqXG4gICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIGFyZSBhcHBsaWVkXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsZW4gOyBpKyspIHtcbiAgICAgIHZhciBncm91cHNJTGVuZ3RoID0gZ3JvdXBzW2ldLmxlbmd0aCxcbiAgICAgICAgICBtYXggPSBncm91cHNbaV1bZ3JvdXBzSUxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGdyb3Vwc0lMZW5ndGg8PTIpIHtcbiAgICAgICAgJChncm91cHNbaV1bMF1bMF0pLmNzcyh7J2hlaWdodCc6J2F1dG8nfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIHBlciByb3cgYXJlIGFwcGxpZWRcbiAgICAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3ByZWVxdWFsaXplZFJvd1xuICAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWRyb3cuemYuZXF1YWxpemVyJyk7XG4gICAgICBmb3IgKHZhciBqID0gMCwgbGVuSiA9IChncm91cHNJTGVuZ3RoLTEpOyBqIDwgbGVuSiA7IGorKykge1xuICAgICAgICAkKGdyb3Vwc1tpXVtqXVswXSkuY3NzKHsnaGVpZ2h0JzptYXh9KTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgcGVyIHJvdyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZFJvd1xuICAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkcm93LnpmLmVxdWFsaXplcicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBFcXVhbGl6ZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cbkVxdWFsaXplci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEVuYWJsZSBoZWlnaHQgZXF1YWxpemF0aW9uIHdoZW4gc3RhY2tlZCBvbiBzbWFsbGVyIHNjcmVlbnMuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgZXF1YWxpemVPblN0YWNrOiBmYWxzZSxcbiAgLyoqXG4gICAqIEVuYWJsZSBoZWlnaHQgZXF1YWxpemF0aW9uIHJvdyBieSByb3cuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGVxdWFsaXplQnlSb3c6IGZhbHNlLFxuICAvKipcbiAgICogU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWluaW11bSBicmVha3BvaW50IHNpemUgdGhlIHBsdWdpbiBzaG91bGQgZXF1YWxpemUgaGVpZ2h0cyBvbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnbWVkaXVtJ1xuICAgKi9cbiAgZXF1YWxpemVPbjogJydcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihFcXVhbGl6ZXIsICdFcXVhbGl6ZXInKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEludGVyY2hhbmdlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5pbnRlcmNoYW5nZVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRpbWVyQW5kSW1hZ2VMb2FkZXJcbiAqL1xuXG5jbGFzcyBJbnRlcmNoYW5nZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEludGVyY2hhbmdlLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIEludGVyY2hhbmdlI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBJbnRlcmNoYW5nZS5kZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdGhpcy5ydWxlcyA9IFtdO1xuICAgIHRoaXMuY3VycmVudFBhdGggPSAnJztcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0ludGVyY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEludGVyY2hhbmdlIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBpbnRlcmNoYW5nZSBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuX2FkZEJyZWFrcG9pbnRzKCk7XG4gICAgdGhpcy5fZ2VuZXJhdGVSdWxlcygpO1xuICAgIHRoaXMuX3JlZmxvdygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgSW50ZXJjaGFuZ2UuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5pbnRlcmNoYW5nZScsIEZvdW5kYXRpb24udXRpbC50aHJvdHRsZSh0aGlzLl9yZWZsb3cuYmluZCh0aGlzKSwgNTApKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBJbnRlcmNoYW5nZSB1cG9uIERPTSBjaGFuZ2VcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVmbG93KCkge1xuICAgIHZhciBtYXRjaDtcblxuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHJ1bGUsIGJ1dCBvbmx5IHNhdmUgdGhlIGxhc3QgbWF0Y2hcbiAgICBmb3IgKHZhciBpIGluIHRoaXMucnVsZXMpIHtcbiAgICAgIGlmKHRoaXMucnVsZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzW2ldO1xuXG4gICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShydWxlLnF1ZXJ5KS5tYXRjaGVzKSB7XG4gICAgICAgICAgbWF0Y2ggPSBydWxlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB0aGlzLnJlcGxhY2UobWF0Y2gucGF0aCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIEZvdW5kYXRpb24gYnJlYWtwb2ludHMgYW5kIGFkZHMgdGhlbSB0byB0aGUgSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTIG9iamVjdC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQnJlYWtwb2ludHMoKSB7XG4gICAgZm9yICh2YXIgaSBpbiBGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllcykge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5xdWVyaWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IEZvdW5kYXRpb24uTWVkaWFRdWVyeS5xdWVyaWVzW2ldO1xuICAgICAgICBJbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVNbcXVlcnkubmFtZV0gPSBxdWVyeS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBJbnRlcmNoYW5nZSBlbGVtZW50IGZvciB0aGUgcHJvdmlkZWQgbWVkaWEgcXVlcnkgKyBjb250ZW50IHBhaXJpbmdzXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdGhhdCBpcyBhbiBJbnRlcmNoYW5nZSBpbnN0YW5jZVxuICAgKiBAcmV0dXJucyB7QXJyYXl9IHNjZW5hcmlvcyAtIEFycmF5IG9mIG9iamVjdHMgdGhhdCBoYXZlICdtcScgYW5kICdwYXRoJyBrZXlzIHdpdGggY29ycmVzcG9uZGluZyBrZXlzXG4gICAqL1xuICBfZ2VuZXJhdGVSdWxlcyhlbGVtZW50KSB7XG4gICAgdmFyIHJ1bGVzTGlzdCA9IFtdO1xuICAgIHZhciBydWxlcztcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucnVsZXMpIHtcbiAgICAgIHJ1bGVzID0gdGhpcy5vcHRpb25zLnJ1bGVzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJ1bGVzID0gdGhpcy4kZWxlbWVudC5kYXRhKCdpbnRlcmNoYW5nZScpLm1hdGNoKC9cXFsuKj9cXF0vZyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSBpbiBydWxlcykge1xuICAgICAgaWYocnVsZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tpXS5zbGljZSgxLCAtMSkuc3BsaXQoJywgJyk7XG4gICAgICAgIHZhciBwYXRoID0gcnVsZS5zbGljZSgwLCAtMSkuam9pbignJyk7XG4gICAgICAgIHZhciBxdWVyeSA9IHJ1bGVbcnVsZS5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAoSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5XSkge1xuICAgICAgICAgIHF1ZXJ5ID0gSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bGVzTGlzdC5wdXNoKHtcbiAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gcnVsZXNMaXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYHNyY2AgcHJvcGVydHkgb2YgYW4gaW1hZ2UsIG9yIGNoYW5nZSB0aGUgSFRNTCBvZiBhIGNvbnRhaW5lciwgdG8gdGhlIHNwZWNpZmllZCBwYXRoLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGggLSBQYXRoIHRvIHRoZSBpbWFnZSBvciBIVE1MIHBhcnRpYWwuXG4gICAqIEBmaXJlcyBJbnRlcmNoYW5nZSNyZXBsYWNlZFxuICAgKi9cbiAgcmVwbGFjZShwYXRoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFBhdGggPT09IHBhdGgpIHJldHVybjtcblxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHRyaWdnZXIgPSAncmVwbGFjZWQuemYuaW50ZXJjaGFuZ2UnO1xuXG4gICAgLy8gUmVwbGFjaW5nIGltYWdlc1xuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdLm5vZGVOYW1lID09PSAnSU1HJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdzcmMnLCBwYXRoKS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5jdXJyZW50UGF0aCA9IHBhdGg7XG4gICAgICB9KVxuICAgICAgLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgfVxuICAgIC8vIFJlcGxhY2luZyBiYWNrZ3JvdW5kIGltYWdlc1xuICAgIGVsc2UgaWYgKHBhdGgubWF0Y2goL1xcLihnaWZ8anBnfGpwZWd8cG5nfHN2Z3x0aWZmKShbPyNdLiopPy9pKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5jc3MoeyAnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoJytwYXRoKycpJyB9KVxuICAgICAgICAgIC50cmlnZ2VyKHRyaWdnZXIpO1xuICAgIH1cbiAgICAvLyBSZXBsYWNpbmcgSFRNTFxuICAgIGVsc2Uge1xuICAgICAgJC5nZXQocGF0aCwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgX3RoaXMuJGVsZW1lbnQuaHRtbChyZXNwb25zZSlcbiAgICAgICAgICAgICAudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICAgICAgJChyZXNwb25zZSkuZm91bmRhdGlvbigpO1xuICAgICAgICBfdGhpcy5jdXJyZW50UGF0aCA9IHBhdGg7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIGNvbnRlbnQgaW4gYW4gSW50ZXJjaGFuZ2UgZWxlbWVudCBpcyBkb25lIGJlaW5nIGxvYWRlZC5cbiAgICAgKiBAZXZlbnQgSW50ZXJjaGFuZ2UjcmVwbGFjZWRcbiAgICAgKi9cbiAgICAvLyB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgaW50ZXJjaGFuZ2UuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICAvL1RPRE8gdGhpcy5cbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5JbnRlcmNoYW5nZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFJ1bGVzIHRvIGJlIGFwcGxpZWQgdG8gSW50ZXJjaGFuZ2UgZWxlbWVudHMuIFNldCB3aXRoIHRoZSBgZGF0YS1pbnRlcmNoYW5nZWAgYXJyYXkgbm90YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICovXG4gIHJ1bGVzOiBudWxsXG59O1xuXG5JbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVMgPSB7XG4gICdsYW5kc2NhcGUnOiAnc2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSknLFxuICAncG9ydHJhaXQnOiAnc2NyZWVuIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KScsXG4gICdyZXRpbmEnOiAnb25seSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi0tbW96LWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogMi8xKSwgb25seSBzY3JlZW4gYW5kIChtaW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSwgb25seSBzY3JlZW4gYW5kIChtaW4tcmVzb2x1dGlvbjogMmRwcHgpJ1xufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKEludGVyY2hhbmdlLCAnSW50ZXJjaGFuZ2UnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE9mZkNhbnZhcyBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ub2ZmY2FudmFzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKi9cblxuY2xhc3MgT2ZmQ2FudmFzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gb2ZmLWNhbnZhcyB3cmFwcGVyLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE9mZkNhbnZhcyNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBpbml0aWFsaXplLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE9mZkNhbnZhcy5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gJCgpO1xuICAgIHRoaXMuJHRyaWdnZXJzID0gJCgpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnT2ZmQ2FudmFzJylcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdPZmZDYW52YXMnLCB7XG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG9mZi1jYW52YXMgd3JhcHBlciBieSBhZGRpbmcgdGhlIGV4aXQgb3ZlcmxheSAoaWYgbmVlZGVkKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgIC8vIEZpbmQgdHJpZ2dlcnMgdGhhdCBhZmZlY3QgdGhpcyBlbGVtZW50IGFuZCBhZGQgYXJpYS1leHBhbmRlZCB0byB0aGVtXG4gICAgdGhpcy4kdHJpZ2dlcnMgPSAkKGRvY3VtZW50KVxuICAgICAgLmZpbmQoJ1tkYXRhLW9wZW49XCInK2lkKydcIl0sIFtkYXRhLWNsb3NlPVwiJytpZCsnXCJdLCBbZGF0YS10b2dnbGU9XCInK2lkKydcIl0nKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG5cbiAgICAvLyBBZGQgYSBjbG9zZSB0cmlnZ2VyIG92ZXIgdGhlIGJvZHkgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIGlmICgkKCcuanMtb2ZmLWNhbnZhcy1leGl0JykubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuJGV4aXRlciA9ICQoJy5qcy1vZmYtY2FudmFzLWV4aXQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBleGl0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZXhpdGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnanMtb2ZmLWNhbnZhcy1leGl0Jyk7XG4gICAgICAgICQoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKS5hcHBlbmQoZXhpdGVyKTtcblxuICAgICAgICB0aGlzLiRleGl0ZXIgPSAkKGV4aXRlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCB8fCBuZXcgUmVnRXhwKHRoaXMub3B0aW9ucy5yZXZlYWxDbGFzcywgJ2cnKS50ZXN0KHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5vcHRpb25zLnJldmVhbE9uID0gdGhpcy5vcHRpb25zLnJldmVhbE9uIHx8IHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NOYW1lLm1hdGNoKC8ocmV2ZWFsLWZvci1tZWRpdW18cmV2ZWFsLWZvci1sYXJnZSkvZylbMF0uc3BsaXQoJy0nKVsyXTtcbiAgICAgIHRoaXMuX3NldE1RQ2hlY2tlcigpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZSkge1xuICAgICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSgkKCdbZGF0YS1vZmYtY2FudmFzLXdyYXBwZXJdJylbMF0pLnRyYW5zaXRpb25EdXJhdGlvbikgKiAxMDAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIHRvIHRoZSBvZmYtY2FudmFzIHdyYXBwZXIgYW5kIHRoZSBleGl0IG92ZXJsYXkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRyaWdnZXIgLnpmLm9mZmNhbnZhcycpLm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogdGhpcy5jbG9zZS5iaW5kKHRoaXMpLFxuICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKSxcbiAgICAgICdrZXlkb3duLnpmLm9mZmNhbnZhcyc6IHRoaXMuX2hhbmRsZUtleWJvYXJkLmJpbmQodGhpcylcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrICYmIHRoaXMuJGV4aXRlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuJGV4aXRlci5vbih7J2NsaWNrLnpmLm9mZmNhbnZhcyc6IHRoaXMuY2xvc2UuYmluZCh0aGlzKX0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGV2ZW50IGxpc3RlbmVyIGZvciBlbGVtZW50cyB0aGF0IHdpbGwgcmV2ZWFsIGF0IGNlcnRhaW4gYnJlYWtwb2ludHMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0TVFDaGVja2VyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnJldmVhbChmYWxzZSk7XG4gICAgICB9XG4gICAgfSkub25lKCdsb2FkLnpmLm9mZmNhbnZhcycsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KF90aGlzLm9wdGlvbnMucmV2ZWFsT24pKSB7XG4gICAgICAgIF90aGlzLnJldmVhbCh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSByZXZlYWxpbmcvaGlkaW5nIHRoZSBvZmYtY2FudmFzIGF0IGJyZWFrcG9pbnRzLCBub3QgdGhlIHNhbWUgYXMgb3Blbi5cbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1JldmVhbGVkIC0gdHJ1ZSBpZiBlbGVtZW50IHNob3VsZCBiZSByZXZlYWxlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICByZXZlYWwoaXNSZXZlYWxlZCkge1xuICAgIHZhciAkY2xvc2VyID0gdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1jbG9zZV0nKTtcbiAgICBpZiAoaXNSZXZlYWxlZCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgdGhpcy5pc1JldmVhbGVkID0gdHJ1ZTtcbiAgICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgICAvLyAgIHZhciBzY3JvbGxQb3MgPSBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgLy8gICB0aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMCwnICsgc2Nyb2xsUG9zICsgJ3B4KSc7XG4gICAgICAvLyB9XG4gICAgICAvLyBpZiAodGhpcy5vcHRpb25zLmlzU3RpY2t5KSB7IHRoaXMuX3N0aWNrKCk7IH1cbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdvcGVuLnpmLnRyaWdnZXIgdG9nZ2xlLnpmLnRyaWdnZXInKTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkgeyAkY2xvc2VyLmhpZGUoKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzUmV2ZWFsZWQgPSBmYWxzZTtcbiAgICAgIC8vIGlmICh0aGlzLm9wdGlvbnMuaXNTdGlja3kgfHwgIXRoaXMub3B0aW9ucy5mb3JjZVRvcCkge1xuICAgICAgLy8gICB0aGlzLiRlbGVtZW50WzBdLnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgICAgLy8gICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYub2ZmY2FudmFzJyk7XG4gICAgICAvLyB9XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpXG4gICAgICB9KTtcbiAgICAgIGlmICgkY2xvc2VyLmxlbmd0aCkge1xuICAgICAgICAkY2xvc2VyLnNob3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbnMgdGhlIG9mZi1jYW52YXMgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqIEBmaXJlcyBPZmZDYW52YXMjb3BlbmVkXG4gICAqL1xuICBvcGVuKGV2ZW50LCB0cmlnZ2VyKSB7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2lzLW9wZW4nKSB8fCB0aGlzLmlzUmV2ZWFsZWQpIHsgcmV0dXJuOyB9XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgJGJvZHkgPSAkKGRvY3VtZW50LmJvZHkpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5mb3JjZVRvcCkge1xuICAgICAgJCgnYm9keScpLnNjcm9sbFRvcCgwKTtcbiAgICB9XG4gICAgLy8gd2luZG93LnBhZ2VZT2Zmc2V0ID0gMDtcblxuICAgIC8vIGlmICghdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgLy8gICB2YXIgc2Nyb2xsUG9zID0gcGFyc2VJbnQod2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAvLyAgIHRoaXMuJGVsZW1lbnRbMF0uc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBzY3JvbGxQb3MgKyAncHgpJztcbiAgICAvLyAgIGlmICh0aGlzLiRleGl0ZXIubGVuZ3RoKSB7XG4gICAgLy8gICAgIHRoaXMuJGV4aXRlclswXS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHNjcm9sbFBvcyArICdweCknO1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbnMuXG4gICAgICogQGV2ZW50IE9mZkNhbnZhcyNvcGVuZWRcbiAgICAgKi9cblxuICAgIHZhciAkd3JhcHBlciA9ICQoJ1tkYXRhLW9mZi1jYW52YXMtd3JhcHBlcl0nKTtcbiAgICAkd3JhcHBlci5hZGRDbGFzcygnaXMtb2ZmLWNhbnZhcy1vcGVuIGlzLW9wZW4tJysgX3RoaXMub3B0aW9ucy5wb3NpdGlvbik7XG5cbiAgICBfdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnaXMtb3BlbicpXG5cbiAgICAgIC8vIGlmIChfdGhpcy5vcHRpb25zLmlzU3RpY2t5KSB7XG4gICAgICAvLyAgIF90aGlzLl9zdGljaygpO1xuICAgICAgLy8gfVxuXG4gICAgdGhpcy4kdHJpZ2dlcnMuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpXG4gICAgICAgIC50cmlnZ2VyKCdvcGVuZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgdGhpcy4kZXhpdGVyLmFkZENsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gdHJpZ2dlcjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmF1dG9Gb2N1cykge1xuICAgICAgJHdyYXBwZXIub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkd3JhcHBlciksIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7IC8vIGhhbmRsZSBkb3VibGUgY2xpY2tzXG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICBfdGhpcy4kZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgJHdyYXBwZXIub25lKEZvdW5kYXRpb24udHJhbnNpdGlvbmVuZCgkd3JhcHBlciksIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZihfdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7IC8vIGhhbmRsZSBkb3VibGUgY2xpY2tzXG4gICAgICAgICAgX3RoaXMuJGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICBfdGhpcy50cmFwRm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYXBzIGZvY3VzIHdpdGhpbiB0aGUgb2ZmY2FudmFzIG9uIG9wZW4uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdHJhcEZvY3VzKCkge1xuICAgIHZhciBmb2N1c2FibGUgPSBGb3VuZGF0aW9uLktleWJvYXJkLmZpbmRGb2N1c2FibGUodGhpcy4kZWxlbWVudCksXG4gICAgICAgIGZpcnN0ID0gZm9jdXNhYmxlLmVxKDApLFxuICAgICAgICBsYXN0ID0gZm9jdXNhYmxlLmVxKC0xKTtcblxuICAgIGZvY3VzYWJsZS5vZmYoJy56Zi5vZmZjYW52YXMnKS5vbigna2V5ZG93bi56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIga2V5ID0gRm91bmRhdGlvbi5LZXlib2FyZC5wYXJzZUtleShlKTtcbiAgICAgIGlmIChrZXkgPT09ICdUQUInICYmIGUudGFyZ2V0ID09PSBsYXN0WzBdKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZmlyc3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdTSElGVF9UQUInICYmIGUudGFyZ2V0ID09PSBmaXJzdFswXSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxhc3QuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG9mZmNhbnZhcyB0byBhcHBlYXIgc3RpY2t5IHV0aWxpemluZyB0cmFuc2xhdGUgcHJvcGVydGllcy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIC8vIE9mZkNhbnZhcy5wcm90b3R5cGUuX3N0aWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vICAgdmFyIGVsU3R5bGUgPSB0aGlzLiRlbGVtZW50WzBdLnN0eWxlO1xuICAvL1xuICAvLyAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrKSB7XG4gIC8vICAgICB2YXIgZXhpdFN0eWxlID0gdGhpcy4kZXhpdGVyWzBdLnN0eWxlO1xuICAvLyAgIH1cbiAgLy9cbiAgLy8gICAkKHdpbmRvdykub24oJ3Njcm9sbC56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbihlKSB7XG4gIC8vICAgICBjb25zb2xlLmxvZyhlKTtcbiAgLy8gICAgIHZhciBwYWdlWSA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgLy8gICAgIGVsU3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCcgKyBwYWdlWSArICdweCknO1xuICAvLyAgICAgaWYgKGV4aXRTdHlsZSAhPT0gdW5kZWZpbmVkKSB7IGV4aXRTdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsJyArIHBhZ2VZICsgJ3B4KSc7IH1cbiAgLy8gICB9KTtcbiAgLy8gICAvLyB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3N0dWNrLnpmLm9mZmNhbnZhcycpO1xuICAvLyB9O1xuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNiIHRvIGZpcmUgYWZ0ZXIgY2xvc3VyZS5cbiAgICogQGZpcmVzIE9mZkNhbnZhcyNjbG9zZWRcbiAgICovXG4gIGNsb3NlKGNiKSB7XG4gICAgaWYgKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykgfHwgdGhpcy5pc1JldmVhbGVkKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vICBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lLCB0aGlzLiRlbGVtZW50LCBmdW5jdGlvbigpIHtcbiAgICAkKCdbZGF0YS1vZmYtY2FudmFzLXdyYXBwZXJdJykucmVtb3ZlQ2xhc3MoYGlzLW9mZi1jYW52YXMtb3BlbiBpcy1vcGVuLSR7X3RoaXMub3B0aW9ucy5wb3NpdGlvbn1gKTtcbiAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcygnaXMtb3BlbicpO1xuICAgICAgLy8gRm91bmRhdGlvbi5fcmVmbG93KCk7XG4gICAgLy8gfSk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJylcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgb2ZmLWNhbnZhcyBtZW51IG9wZW5zLlxuICAgICAgICogQGV2ZW50IE9mZkNhbnZhcyNjbG9zZWRcbiAgICAgICAqL1xuICAgICAgICAudHJpZ2dlcignY2xvc2VkLnpmLm9mZmNhbnZhcycpO1xuICAgIC8vIGlmIChfdGhpcy5vcHRpb25zLmlzU3RpY2t5IHx8ICFfdGhpcy5vcHRpb25zLmZvcmNlVG9wKSB7XG4gICAgLy8gICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIC8vICAgICBfdGhpcy4kZWxlbWVudFswXS5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICAvLyAgICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsLnpmLm9mZmNhbnZhcycpO1xuICAgIC8vICAgfSwgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25UaW1lKTtcbiAgICAvLyB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgIHRoaXMuJGV4aXRlci5yZW1vdmVDbGFzcygnaXMtdmlzaWJsZScpO1xuICAgIH1cblxuICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cykge1xuICAgICAgJCgnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG9mZi1jYW52YXMgbWVudSBvcGVuIG9yIGNsb3NlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIEV2ZW50IG9iamVjdCBwYXNzZWQgZnJvbSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtqUXVlcnl9IHRyaWdnZXIgLSBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBvZmYtY2FudmFzIHRvIG9wZW4uXG4gICAqL1xuICB0b2dnbGUoZXZlbnQsIHRyaWdnZXIpIHtcbiAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtb3BlbicpKSB7XG4gICAgICB0aGlzLmNsb3NlKGV2ZW50LCB0cmlnZ2VyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLm9wZW4oZXZlbnQsIHRyaWdnZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGtleWJvYXJkIGlucHV0IHdoZW4gZGV0ZWN0ZWQuIFdoZW4gdGhlIGVzY2FwZSBrZXkgaXMgcHJlc3NlZCwgdGhlIG9mZi1jYW52YXMgbWVudSBjbG9zZXMsIGFuZCBmb2N1cyBpcyByZXN0b3JlZCB0byB0aGUgZWxlbWVudCB0aGF0IG9wZW5lZCB0aGUgbWVudS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaGFuZGxlS2V5Ym9hcmQoZSkge1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdPZmZDYW52YXMnLCB7XG4gICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIHRoaXMuJGxhc3RUcmlnZ2VyLmZvY3VzKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZWQ6ICgpID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBvZmZjYW52YXMgcGx1Z2luLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5jbG9zZSgpO1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYub2ZmY2FudmFzJyk7XG4gICAgdGhpcy4kZXhpdGVyLm9mZignLnpmLm9mZmNhbnZhcycpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbk9mZkNhbnZhcy5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFsbG93IHRoZSB1c2VyIHRvIGNsaWNrIG91dHNpZGUgb2YgdGhlIG1lbnUgdG8gY2xvc2UgaXQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgdHJ1ZVxuICAgKi9cbiAgY2xvc2VPbkNsaWNrOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSBpbiBtcyB0aGUgb3BlbiBhbmQgY2xvc2UgdHJhbnNpdGlvbiByZXF1aXJlcy4gSWYgbm9uZSBzZWxlY3RlZCwgcHVsbHMgZnJvbSBib2R5IHN0eWxlLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDUwMFxuICAgKi9cbiAgdHJhbnNpdGlvblRpbWU6IDAsXG5cbiAgLyoqXG4gICAqIERpcmVjdGlvbiB0aGUgb2ZmY2FudmFzIG9wZW5zIGZyb20uIERldGVybWluZXMgY2xhc3MgYXBwbGllZCB0byBib2R5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIGxlZnRcbiAgICovXG4gIHBvc2l0aW9uOiAnbGVmdCcsXG5cbiAgLyoqXG4gICAqIEZvcmNlIHRoZSBwYWdlIHRvIHNjcm9sbCB0byB0b3Agb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSB0cnVlXG4gICAqL1xuICBmb3JjZVRvcDogdHJ1ZSxcblxuICAvKipcbiAgICogQWxsb3cgdGhlIG9mZmNhbnZhcyB0byByZW1haW4gb3BlbiBmb3IgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSBmYWxzZVxuICAgKi9cbiAgaXNSZXZlYWxlZDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEJyZWFrcG9pbnQgYXQgd2hpY2ggdG8gcmV2ZWFsLiBKUyB3aWxsIHVzZSBhIFJlZ0V4cCB0byB0YXJnZXQgc3RhbmRhcmQgY2xhc3NlcywgaWYgY2hhbmdpbmcgY2xhc3NuYW1lcywgcGFzcyB5b3VyIGNsYXNzIHdpdGggdGhlIGByZXZlYWxDbGFzc2Agb3B0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHJldmVhbC1mb3ItbGFyZ2VcbiAgICovXG4gIHJldmVhbE9uOiBudWxsLFxuXG4gIC8qKlxuICAgKiBGb3JjZSBmb2N1cyB0byB0aGUgb2ZmY2FudmFzIG9uIG9wZW4uIElmIHRydWUsIHdpbGwgZm9jdXMgdGhlIG9wZW5pbmcgdHJpZ2dlciBvbiBjbG9zZS4gU2V0cyB0YWJpbmRleCBvZiBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdIHRvIC0xIGZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIGF1dG9Gb2N1czogdHJ1ZSxcblxuICAvKipcbiAgICogQ2xhc3MgdXNlZCB0byBmb3JjZSBhbiBvZmZjYW52YXMgdG8gcmVtYWluIG9wZW4uIEZvdW5kYXRpb24gZGVmYXVsdHMgZm9yIHRoaXMgYXJlIGByZXZlYWwtZm9yLWxhcmdlYCAmIGByZXZlYWwtZm9yLW1lZGl1bWAuXG4gICAqIEBvcHRpb25cbiAgICogVE9ETyBpbXByb3ZlIHRoZSByZWdleCB0ZXN0aW5nIGZvciB0aGlzLlxuICAgKiBAZXhhbXBsZSByZXZlYWwtZm9yLWxhcmdlXG4gICAqL1xuICByZXZlYWxDbGFzczogJ3JldmVhbC1mb3ItJyxcblxuICAvKipcbiAgICogVHJpZ2dlcnMgb3B0aW9uYWwgZm9jdXMgdHJhcHBpbmcgd2hlbiBvcGVuaW5nIGFuIG9mZmNhbnZhcy4gU2V0cyB0YWJpbmRleCBvZiBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdIHRvIC0xIGZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIHRydWVcbiAgICovXG4gIHRyYXBGb2N1czogZmFsc2Vcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE9mZkNhbnZhcywgJ09mZkNhbnZhcycpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogUmVzcG9uc2l2ZU1lbnUgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnJlc3BvbnNpdmVNZW51XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuYWNjb3JkaW9uTWVudVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5kcmlsbGRvd25cbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwuZHJvcGRvd24tbWVudVxuICovXG5cbmNsYXNzIFJlc3BvbnNpdmVNZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSByZXNwb25zaXZlIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZU1lbnUjaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgZHJvcGRvd24gbWVudS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgIHRoaXMucnVsZXMgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtbWVudScpO1xuICAgIHRoaXMuY3VycmVudE1xID0gbnVsbDtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBudWxsO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmVzcG9uc2l2ZU1lbnUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgTWVudSBieSBwYXJzaW5nIHRoZSBjbGFzc2VzIGZyb20gdGhlICdkYXRhLVJlc3BvbnNpdmVNZW51JyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgLy8gVGhlIGZpcnN0IHRpbWUgYW4gSW50ZXJjaGFuZ2UgcGx1Z2luIGlzIGluaXRpYWxpemVkLCB0aGlzLnJ1bGVzIGlzIGNvbnZlcnRlZCBmcm9tIGEgc3RyaW5nIG9mIFwiY2xhc3Nlc1wiIHRvIGFuIG9iamVjdCBvZiBydWxlc1xuICAgIGlmICh0eXBlb2YgdGhpcy5ydWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBydWxlc1RyZWUgPSB7fTtcblxuICAgICAgLy8gUGFyc2UgcnVsZXMgZnJvbSBcImNsYXNzZXNcIiBwdWxsZWQgZnJvbSBkYXRhIGF0dHJpYnV0ZVxuICAgICAgbGV0IHJ1bGVzID0gdGhpcy5ydWxlcy5zcGxpdCgnICcpO1xuXG4gICAgICAvLyBJdGVyYXRlIHRocm91Z2ggZXZlcnkgcnVsZSBmb3VuZFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcnVsZSA9IHJ1bGVzW2ldLnNwbGl0KCctJyk7XG4gICAgICAgIGxldCBydWxlU2l6ZSA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMF0gOiAnc21hbGwnO1xuICAgICAgICBsZXQgcnVsZVBsdWdpbiA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMV0gOiBydWxlWzBdO1xuXG4gICAgICAgIGlmIChNZW51UGx1Z2luc1tydWxlUGx1Z2luXSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJ1bGVzVHJlZVtydWxlU2l6ZV0gPSBNZW51UGx1Z2luc1tydWxlUGx1Z2luXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJ1bGVzID0gcnVsZXNUcmVlO1xuICAgIH1cblxuICAgIGlmICghJC5pc0VtcHR5T2JqZWN0KHRoaXMucnVsZXMpKSB7XG4gICAgICB0aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIHRoZSBNZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICQod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24oKSB7XG4gICAgICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICB9KTtcbiAgICAvLyAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5SZXNwb25zaXZlTWVudScsIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgX3RoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgLy8gfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBjdXJyZW50IHNjcmVlbiB3aWR0aCBhZ2FpbnN0IGF2YWlsYWJsZSBtZWRpYSBxdWVyaWVzLiBJZiB0aGUgbWVkaWEgcXVlcnkgaGFzIGNoYW5nZWQsIGFuZCB0aGUgcGx1Z2luIG5lZWRlZCBoYXMgY2hhbmdlZCwgdGhlIHBsdWdpbnMgd2lsbCBzd2FwIG91dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY2hlY2tNZWRpYVF1ZXJpZXMoKSB7XG4gICAgdmFyIG1hdGNoZWRNcSwgX3RoaXMgPSB0aGlzO1xuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHJ1bGUgYW5kIGZpbmQgdGhlIGxhc3QgbWF0Y2hpbmcgcnVsZVxuICAgICQuZWFjaCh0aGlzLnJ1bGVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIGlmIChGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdChrZXkpKSB7XG4gICAgICAgIG1hdGNoZWRNcSA9IGtleTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIE5vIG1hdGNoPyBObyBkaWNlXG4gICAgaWYgKCFtYXRjaGVkTXEpIHJldHVybjtcblxuICAgIC8vIFBsdWdpbiBhbHJlYWR5IGluaXRpYWxpemVkPyBXZSBnb29kXG4gICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbiBpbnN0YW5jZW9mIHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5wbHVnaW4pIHJldHVybjtcblxuICAgIC8vIFJlbW92ZSBleGlzdGluZyBwbHVnaW4tc3BlY2lmaWMgQ1NTIGNsYXNzZXNcbiAgICAkLmVhY2goTWVudVBsdWdpbnMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIF90aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHZhbHVlLmNzc0NsYXNzKTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCB0aGUgQ1NTIGNsYXNzIGZvciB0aGUgbmV3IHBsdWdpblxuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5ydWxlc1ttYXRjaGVkTXFdLmNzc0NsYXNzKTtcblxuICAgIC8vIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgbmV3IHBsdWdpblxuICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4pIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbmV3IHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5wbHVnaW4odGhpcy4kZWxlbWVudCwge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBpbnN0YW5jZSBvZiB0aGUgY3VycmVudCBwbHVnaW4gb24gdGhpcyBlbGVtZW50LCBhcyB3ZWxsIGFzIHRoZSB3aW5kb3cgcmVzaXplIGhhbmRsZXIgdGhhdCBzd2l0Y2hlcyB0aGUgcGx1Z2lucyBvdXQuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4uZGVzdHJveSgpO1xuICAgICQod2luZG93KS5vZmYoJy56Zi5SZXNwb25zaXZlTWVudScpO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5SZXNwb25zaXZlTWVudS5kZWZhdWx0cyA9IHt9O1xuXG4vLyBUaGUgcGx1Z2luIG1hdGNoZXMgdGhlIHBsdWdpbiBjbGFzc2VzIHdpdGggdGhlc2UgcGx1Z2luIGluc3RhbmNlcy5cbnZhciBNZW51UGx1Z2lucyA9IHtcbiAgZHJvcGRvd246IHtcbiAgICBjc3NDbGFzczogJ2Ryb3Bkb3duJyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnNbJ2Ryb3Bkb3duLW1lbnUnXSB8fCBudWxsXG4gIH0sXG4gZHJpbGxkb3duOiB7XG4gICAgY3NzQ2xhc3M6ICdkcmlsbGRvd24nLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snZHJpbGxkb3duJ10gfHwgbnVsbFxuICB9LFxuICBhY2NvcmRpb246IHtcbiAgICBjc3NDbGFzczogJ2FjY29yZGlvbi1tZW51JyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnNbJ2FjY29yZGlvbi1tZW51J10gfHwgbnVsbFxuICB9XG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oUmVzcG9uc2l2ZU1lbnUsICdSZXNwb25zaXZlTWVudScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogUmVzcG9uc2l2ZVRvZ2dsZSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmVzcG9uc2l2ZVRvZ2dsZVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxuY2xhc3MgUmVzcG9uc2l2ZVRvZ2dsZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFRhYiBCYXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZVRvZ2dsZSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhdHRhY2ggdGFiIGJhciBmdW5jdGlvbmFsaXR5IHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFJlc3BvbnNpdmVUb2dnbGUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1Jlc3BvbnNpdmVUb2dnbGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgdGFiIGJhciBieSBmaW5kaW5nIHRoZSB0YXJnZXQgZWxlbWVudCwgdG9nZ2xpbmcgZWxlbWVudCwgYW5kIHJ1bm5pbmcgdXBkYXRlKCkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHRhcmdldElEID0gdGhpcy4kZWxlbWVudC5kYXRhKCdyZXNwb25zaXZlLXRvZ2dsZScpO1xuICAgIGlmICghdGFyZ2V0SUQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdXIgdGFiIGJhciBuZWVkcyBhbiBJRCBvZiBhIE1lbnUgYXMgdGhlIHZhbHVlIG9mIGRhdGEtdGFiLWJhci4nKTtcbiAgICB9XG5cbiAgICB0aGlzLiR0YXJnZXRNZW51ID0gJChgIyR7dGFyZ2V0SUR9YCk7XG4gICAgdGhpcy4kdG9nZ2xlciA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtdG9nZ2xlXScpO1xuXG4gICAgdGhpcy5fdXBkYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBuZWNlc3NhcnkgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSB0YWIgYmFyIHRvIHdvcmsuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5fdXBkYXRlTXFIYW5kbGVyID0gdGhpcy5fdXBkYXRlLmJpbmQodGhpcyk7XG4gICAgXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl91cGRhdGVNcUhhbmRsZXIpO1xuXG4gICAgdGhpcy4kdG9nZ2xlci5vbignY2xpY2suemYucmVzcG9uc2l2ZVRvZ2dsZScsIHRoaXMudG9nZ2xlTWVudS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhlIGN1cnJlbnQgbWVkaWEgcXVlcnkgdG8gZGV0ZXJtaW5lIGlmIHRoZSB0YWIgYmFyIHNob3VsZCBiZSB2aXNpYmxlIG9yIGhpZGRlbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlKCkge1xuICAgIC8vIE1vYmlsZVxuICAgIGlmICghRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLmhpZGVGb3IpKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnNob3coKTtcbiAgICAgIHRoaXMuJHRhcmdldE1lbnUuaGlkZSgpO1xuICAgIH1cblxuICAgIC8vIERlc2t0b3BcbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpO1xuICAgICAgdGhpcy4kdGFyZ2V0TWVudS5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIGVsZW1lbnQgYXR0YWNoZWQgdG8gdGhlIHRhYiBiYXIuIFRoZSB0b2dnbGUgb25seSBoYXBwZW5zIGlmIHRoZSBzY3JlZW4gaXMgc21hbGwgZW5vdWdoIHRvIGFsbG93IGl0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQGZpcmVzIFJlc3BvbnNpdmVUb2dnbGUjdG9nZ2xlZFxuICAgKi9cbiAgdG9nZ2xlTWVudSgpIHsgICBcbiAgICBpZiAoIUZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5oaWRlRm9yKSkge1xuICAgICAgdGhpcy4kdGFyZ2V0TWVudS50b2dnbGUoMCk7XG5cbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgZWxlbWVudCBhdHRhY2hlZCB0byB0aGUgdGFiIGJhciB0b2dnbGVzLlxuICAgICAgICogQGV2ZW50IFJlc3BvbnNpdmVUb2dnbGUjdG9nZ2xlZFxuICAgICAgICovXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3RvZ2dsZWQuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgIH1cbiAgfTtcblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgIHRoaXMuJHRvZ2dsZXIub2ZmKCcuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgIFxuICAgICQod2luZG93KS5vZmYoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3VwZGF0ZU1xSGFuZGxlcik7XG4gICAgXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblJlc3BvbnNpdmVUb2dnbGUuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBUaGUgYnJlYWtwb2ludCBhZnRlciB3aGljaCB0aGUgbWVudSBpcyBhbHdheXMgc2hvd24sIGFuZCB0aGUgdGFiIGJhciBpcyBoaWRkZW4uXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ21lZGl1bSdcbiAgICovXG4gIGhpZGVGb3I6ICdtZWRpdW0nXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oUmVzcG9uc2l2ZVRvZ2dsZSwgJ1Jlc3BvbnNpdmVUb2dnbGUnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFN0aWNreSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24uc3RpY2t5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqL1xuXG5jbGFzcyBTdGlja3kge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHN0aWNreSB0aGluZy5cbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIHN0aWNreS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIG9iamVjdCBwYXNzZWQgd2hlbiBjcmVhdGluZyB0aGUgZWxlbWVudCBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBTdGlja3kuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1N0aWNreScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBzdGlja3kgZWxlbWVudCBieSBhZGRpbmcgY2xhc3NlcywgZ2V0dGluZy9zZXR0aW5nIGRpbWVuc2lvbnMsIGJyZWFrcG9pbnRzIGFuZCBhdHRyaWJ1dGVzXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyICRwYXJlbnQgPSB0aGlzLiRlbGVtZW50LnBhcmVudCgnW2RhdGEtc3RpY2t5LWNvbnRhaW5lcl0nKSxcbiAgICAgICAgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ3N0aWNreScpLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICB0aGlzLndhc1dyYXBwZWQgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLiRjb250YWluZXIgPSAkcGFyZW50Lmxlbmd0aCA/ICRwYXJlbnQgOiAkKHRoaXMub3B0aW9ucy5jb250YWluZXIpLndyYXBJbm5lcih0aGlzLiRlbGVtZW50KTtcbiAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzKTtcblxuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnN0aWNreUNsYXNzKVxuICAgICAgICAgICAgICAgICAuYXR0cih7J2RhdGEtcmVzaXplJzogaWR9KTtcblxuICAgIHRoaXMuc2Nyb2xsQ291bnQgPSB0aGlzLm9wdGlvbnMuY2hlY2tFdmVyeTtcbiAgICB0aGlzLmlzU3R1Y2sgPSBmYWxzZTtcbiAgICAkKHdpbmRvdykub25lKCdsb2FkLnpmLnN0aWNreScsIGZ1bmN0aW9uKCl7XG4gICAgICAvL1dlIGNhbGN1bGF0ZSB0aGUgY29udGFpbmVyIGhlaWdodCB0byBoYXZlIGNvcnJlY3QgdmFsdWVzIGZvciBhbmNob3IgcG9pbnRzIG9mZnNldCBjYWxjdWxhdGlvbi5cbiAgICAgIF90aGlzLmNvbnRhaW5lckhlaWdodCA9IF90aGlzLiRlbGVtZW50LmNzcyhcImRpc3BsYXlcIikgPT0gXCJub25lXCIgPyAwIDogX3RoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgX3RoaXMuJGNvbnRhaW5lci5jc3MoJ2hlaWdodCcsIF90aGlzLmNvbnRhaW5lckhlaWdodCk7XG4gICAgICBfdGhpcy5lbGVtSGVpZ2h0ID0gX3RoaXMuY29udGFpbmVySGVpZ2h0O1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5hbmNob3IgIT09ICcnKXtcbiAgICAgICAgX3RoaXMuJGFuY2hvciA9ICQoJyMnICsgX3RoaXMub3B0aW9ucy5hbmNob3IpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIF90aGlzLl9wYXJzZVBvaW50cygpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24oKXtcbiAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgICBfdGhpcy5fZXZlbnRzKGlkLnNwbGl0KCctJykucmV2ZXJzZSgpLmpvaW4oJy0nKSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSWYgdXNpbmcgbXVsdGlwbGUgZWxlbWVudHMgYXMgYW5jaG9ycywgY2FsY3VsYXRlcyB0aGUgdG9wIGFuZCBib3R0b20gcGl4ZWwgdmFsdWVzIHRoZSBzdGlja3kgdGhpbmcgc2hvdWxkIHN0aWNrIGFuZCB1bnN0aWNrIG9uLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wYXJzZVBvaW50cygpIHtcbiAgICB2YXIgdG9wID0gdGhpcy5vcHRpb25zLnRvcEFuY2hvciA9PSBcIlwiID8gMSA6IHRoaXMub3B0aW9ucy50b3BBbmNob3IsXG4gICAgICAgIGJ0bSA9IHRoaXMub3B0aW9ucy5idG1BbmNob3I9PSBcIlwiID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCA6IHRoaXMub3B0aW9ucy5idG1BbmNob3IsXG4gICAgICAgIHB0cyA9IFt0b3AsIGJ0bV0sXG4gICAgICAgIGJyZWFrcyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwdHMubGVuZ3RoOyBpIDwgbGVuICYmIHB0c1tpXTsgaSsrKSB7XG4gICAgICB2YXIgcHQ7XG4gICAgICBpZiAodHlwZW9mIHB0c1tpXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcHQgPSBwdHNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcGxhY2UgPSBwdHNbaV0uc3BsaXQoJzonKSxcbiAgICAgICAgICAgIGFuY2hvciA9ICQoYCMke3BsYWNlWzBdfWApO1xuXG4gICAgICAgIHB0ID0gYW5jaG9yLm9mZnNldCgpLnRvcDtcbiAgICAgICAgaWYgKHBsYWNlWzFdICYmIHBsYWNlWzFdLnRvTG93ZXJDYXNlKCkgPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgcHQgKz0gYW5jaG9yWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWtzW2ldID0gcHQ7XG4gICAgfVxuXG5cbiAgICB0aGlzLnBvaW50cyA9IGJyZWFrcztcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgdGhlIHNjcm9sbGluZyBlbGVtZW50LlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSBwc3VlZG8tcmFuZG9tIGlkIGZvciB1bmlxdWUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyLlxuICAgKi9cbiAgX2V2ZW50cyhpZCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHNjcm9sbExpc3RlbmVyID0gdGhpcy5zY3JvbGxMaXN0ZW5lciA9IGBzY3JvbGwuemYuJHtpZH1gO1xuICAgIGlmICh0aGlzLmlzT24pIHsgcmV0dXJuOyB9XG4gICAgaWYgKHRoaXMuY2FuU3RpY2spIHtcbiAgICAgIHRoaXMuaXNPbiA9IHRydWU7XG4gICAgICAkKHdpbmRvdykub2ZmKHNjcm9sbExpc3RlbmVyKVxuICAgICAgICAgICAgICAgLm9uKHNjcm9sbExpc3RlbmVyLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgIGlmIChfdGhpcy5zY3JvbGxDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgIF90aGlzLnNjcm9sbENvdW50ID0gX3RoaXMub3B0aW9ucy5jaGVja0V2ZXJ5O1xuICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9jYWxjKGZhbHNlLCB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgIF90aGlzLnNjcm9sbENvdW50LS07XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInKVxuICAgICAgICAgICAgICAgICAub24oJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbihlLCBlbCkge1xuICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3NldFNpemVzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jYW5TdGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMuaXNPbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2V2ZW50cyhpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzLmlzT24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcGF1c2VMaXN0ZW5lcnMoc2Nyb2xsTGlzdGVuZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXJzIGZvciBzY3JvbGwgYW5kIGNoYW5nZSBldmVudHMgb24gYW5jaG9yLlxuICAgKiBAZmlyZXMgU3RpY2t5I3BhdXNlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzY3JvbGxMaXN0ZW5lciAtIHVuaXF1ZSwgbmFtZXNwYWNlZCBzY3JvbGwgbGlzdGVuZXIgYXR0YWNoZWQgdG8gYHdpbmRvd2BcbiAgICovXG4gIF9wYXVzZUxpc3RlbmVycyhzY3JvbGxMaXN0ZW5lcikge1xuICAgIHRoaXMuaXNPbiA9IGZhbHNlO1xuICAgICQod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgcGx1Z2luIGlzIHBhdXNlZCBkdWUgdG8gcmVzaXplIGV2ZW50IHNocmlua2luZyB0aGUgdmlldy5cbiAgICAgKiBAZXZlbnQgU3RpY2t5I3BhdXNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwYXVzZS56Zi5zdGlja3knKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gZXZlcnkgYHNjcm9sbGAgZXZlbnQgYW5kIG9uIGBfaW5pdGBcbiAgICogZmlyZXMgZnVuY3Rpb25zIGJhc2VkIG9uIGJvb2xlYW5zIGFuZCBjYWNoZWQgdmFsdWVzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gY2hlY2tTaXplcyAtIHRydWUgaWYgcGx1Z2luIHNob3VsZCByZWNhbGN1bGF0ZSBzaXplcyBhbmQgYnJlYWtwb2ludHMuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY3JvbGwgLSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBwYXNzZWQgZnJvbSBzY3JvbGwgZXZlbnQgY2IgZnVuY3Rpb24uIElmIG5vdCBwYXNzZWQsIGRlZmF1bHRzIHRvIGB3aW5kb3cucGFnZVlPZmZzZXRgLlxuICAgKi9cbiAgX2NhbGMoY2hlY2tTaXplcywgc2Nyb2xsKSB7XG4gICAgaWYgKGNoZWNrU2l6ZXMpIHsgdGhpcy5fc2V0U2l6ZXMoKTsgfVxuXG4gICAgaWYgKCF0aGlzLmNhblN0aWNrKSB7XG4gICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIXNjcm9sbCkgeyBzY3JvbGwgPSB3aW5kb3cucGFnZVlPZmZzZXQ7IH1cblxuICAgIGlmIChzY3JvbGwgPj0gdGhpcy50b3BQb2ludCkge1xuICAgICAgaWYgKHNjcm9sbCA8PSB0aGlzLmJvdHRvbVBvaW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgdGhpcy5fc2V0U3RpY2t5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3koZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmlzU3R1Y2spIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYXVzZXMgdGhlICRlbGVtZW50IHRvIGJlY29tZSBzdHVjay5cbiAgICogQWRkcyBgcG9zaXRpb246IGZpeGVkO2AsIGFuZCBoZWxwZXIgY2xhc3Nlcy5cbiAgICogQGZpcmVzIFN0aWNreSNzdHVja3RvXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFN0aWNreSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBzdGlja1RvID0gdGhpcy5vcHRpb25zLnN0aWNrVG8sXG4gICAgICAgIG1yZ24gPSBzdGlja1RvID09PSAndG9wJyA/ICdtYXJnaW5Ub3AnIDogJ21hcmdpbkJvdHRvbScsXG4gICAgICAgIG5vdFN0dWNrVG8gPSBzdGlja1RvID09PSAndG9wJyA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgICAgIGNzcyA9IHt9O1xuXG4gICAgY3NzW21yZ25dID0gYCR7dGhpcy5vcHRpb25zW21yZ25dfWVtYDtcbiAgICBjc3Nbc3RpY2tUb10gPSAwO1xuICAgIGNzc1tub3RTdHVja1RvXSA9ICdhdXRvJztcbiAgICBjc3NbJ2xlZnQnXSA9IHRoaXMuJGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0ICsgcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy4kY29udGFpbmVyWzBdKVtcInBhZGRpbmctbGVmdFwiXSwgMTApO1xuICAgIHRoaXMuaXNTdHVjayA9IHRydWU7XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhgaXMtYW5jaG9yZWQgaXMtYXQtJHtub3RTdHVja1RvfWApXG4gICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgaXMtc3R1Y2sgaXMtYXQtJHtzdGlja1RvfWApXG4gICAgICAgICAgICAgICAgIC5jc3MoY3NzKVxuICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgJGVsZW1lbnQgaGFzIGJlY29tZSBgcG9zaXRpb246IGZpeGVkO2BcbiAgICAgICAgICAgICAgICAgICogTmFtZXNwYWNlZCB0byBgdG9wYCBvciBgYm90dG9tYCwgZS5nLiBgc3RpY2t5LnpmLnN0dWNrdG86dG9wYFxuICAgICAgICAgICAgICAgICAgKiBAZXZlbnQgU3RpY2t5I3N0dWNrdG9cbiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgIC50cmlnZ2VyKGBzdGlja3kuemYuc3R1Y2t0bzoke3N0aWNrVG99YCk7XG4gICAgdGhpcy4kZWxlbWVudC5vbihcInRyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCBNU1RyYW5zaXRpb25FbmRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBfdGhpcy5fc2V0U2l6ZXMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYXVzZXMgdGhlICRlbGVtZW50IHRvIGJlY29tZSB1bnN0dWNrLlxuICAgKiBSZW1vdmVzIGBwb3NpdGlvbjogZml4ZWQ7YCwgYW5kIGhlbHBlciBjbGFzc2VzLlxuICAgKiBBZGRzIG90aGVyIGhlbHBlciBjbGFzc2VzLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzVG9wIC0gdGVsbHMgdGhlIGZ1bmN0aW9uIGlmIHRoZSAkZWxlbWVudCBzaG91bGQgYW5jaG9yIHRvIHRoZSB0b3Agb3IgYm90dG9tIG9mIGl0cyAkYW5jaG9yIGVsZW1lbnQuXG4gICAqIEBmaXJlcyBTdGlja3kjdW5zdHVja2Zyb21cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW1vdmVTdGlja3koaXNUb3ApIHtcbiAgICB2YXIgc3RpY2tUbyA9IHRoaXMub3B0aW9ucy5zdGlja1RvLFxuICAgICAgICBzdGlja1RvVG9wID0gc3RpY2tUbyA9PT0gJ3RvcCcsXG4gICAgICAgIGNzcyA9IHt9LFxuICAgICAgICBhbmNob3JQdCA9ICh0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzFdIC0gdGhpcy5wb2ludHNbMF0gOiB0aGlzLmFuY2hvckhlaWdodCkgLSB0aGlzLmVsZW1IZWlnaHQsXG4gICAgICAgIG1yZ24gPSBzdGlja1RvVG9wID8gJ21hcmdpblRvcCcgOiAnbWFyZ2luQm90dG9tJyxcbiAgICAgICAgbm90U3R1Y2tUbyA9IHN0aWNrVG9Ub3AgPyAnYm90dG9tJyA6ICd0b3AnLFxuICAgICAgICB0b3BPckJvdHRvbSA9IGlzVG9wID8gJ3RvcCcgOiAnYm90dG9tJztcblxuICAgIGNzc1ttcmduXSA9IDA7XG5cbiAgICBjc3NbJ2JvdHRvbSddID0gJ2F1dG8nO1xuICAgIGlmKGlzVG9wKSB7XG4gICAgICBjc3NbJ3RvcCddID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzWyd0b3AnXSA9IGFuY2hvclB0O1xuICAgIH1cblxuICAgIGNzc1snbGVmdCddID0gJyc7XG4gICAgdGhpcy5pc1N0dWNrID0gZmFsc2U7XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhgaXMtc3R1Y2sgaXMtYXQtJHtzdGlja1RvfWApXG4gICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgaXMtYW5jaG9yZWQgaXMtYXQtJHt0b3BPckJvdHRvbX1gKVxuICAgICAgICAgICAgICAgICAuY3NzKGNzcylcbiAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlICRlbGVtZW50IGhhcyBiZWNvbWUgYW5jaG9yZWQuXG4gICAgICAgICAgICAgICAgICAqIE5hbWVzcGFjZWQgdG8gYHRvcGAgb3IgYGJvdHRvbWAsIGUuZy4gYHN0aWNreS56Zi51bnN0dWNrZnJvbTpib3R0b21gXG4gICAgICAgICAgICAgICAgICAqIEBldmVudCBTdGlja3kjdW5zdHVja2Zyb21cbiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgIC50cmlnZ2VyKGBzdGlja3kuemYudW5zdHVja2Zyb206JHt0b3BPckJvdHRvbX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSAkZWxlbWVudCBhbmQgJGNvbnRhaW5lciBzaXplcyBmb3IgcGx1Z2luLlxuICAgKiBDYWxscyBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIG9uIGNvbXBsZXRpb24gb2YgYF9zZXRCcmVha1BvaW50c2AuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0U2l6ZXMoY2IpIHtcbiAgICB0aGlzLmNhblN0aWNrID0gRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3QodGhpcy5vcHRpb25zLnN0aWNreU9uKTtcbiAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICAgIH1cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBuZXdFbGVtV2lkdGggPSB0aGlzLiRjb250YWluZXJbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsXG4gICAgICAgIGNvbXAgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLiRjb250YWluZXJbMF0pLFxuICAgICAgICBwZG5nID0gcGFyc2VJbnQoY29tcFsncGFkZGluZy1yaWdodCddLCAxMCk7XG5cbiAgICBpZiAodGhpcy4kYW5jaG9yICYmIHRoaXMuJGFuY2hvci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuYW5jaG9ySGVpZ2h0ID0gdGhpcy4kYW5jaG9yWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VQb2ludHMoKTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4gICAgICAnbWF4LXdpZHRoJzogYCR7bmV3RWxlbVdpZHRoIC0gcGRuZ31weGBcbiAgICB9KTtcblxuICAgIHZhciBuZXdDb250YWluZXJIZWlnaHQgPSB0aGlzLiRlbGVtZW50WzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCB8fCB0aGlzLmNvbnRhaW5lckhlaWdodDtcbiAgICBpZiAodGhpcy4kZWxlbWVudC5jc3MoXCJkaXNwbGF5XCIpID09IFwibm9uZVwiKSB7XG4gICAgICBuZXdDb250YWluZXJIZWlnaHQgPSAwO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lckhlaWdodCA9IG5ld0NvbnRhaW5lckhlaWdodDtcbiAgICB0aGlzLiRjb250YWluZXIuY3NzKHtcbiAgICAgIGhlaWdodDogbmV3Q29udGFpbmVySGVpZ2h0XG4gICAgfSk7XG4gICAgdGhpcy5lbGVtSGVpZ2h0ID0gbmV3Q29udGFpbmVySGVpZ2h0O1xuXG4gICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgdGhpcy4kZWxlbWVudC5jc3Moe1wibGVmdFwiOnRoaXMuJGNvbnRhaW5lci5vZmZzZXQoKS5sZWZ0ICsgcGFyc2VJbnQoY29tcFsncGFkZGluZy1sZWZ0J10sIDEwKX0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtYXQtYm90dG9tJykpIHtcbiAgICAgICAgdmFyIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLiRjb250YWluZXIub2Zmc2V0KCkudG9wIDogdGhpcy5hbmNob3JIZWlnaHQpIC0gdGhpcy5lbGVtSGVpZ2h0O1xuICAgICAgICB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgYW5jaG9yUHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3NldEJyZWFrUG9pbnRzKG5ld0NvbnRhaW5lckhlaWdodCwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB1cHBlciBhbmQgbG93ZXIgYnJlYWtwb2ludHMgZm9yIHRoZSBlbGVtZW50IHRvIGJlY29tZSBzdGlja3kvdW5zdGlja3kuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbGVtSGVpZ2h0IC0gcHggdmFsdWUgZm9yIHN0aWNreS4kZWxlbWVudCBoZWlnaHQsIGNhbGN1bGF0ZWQgYnkgYF9zZXRTaXplc2AuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGNvbXBsZXRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0QnJlYWtQb2ludHMoZWxlbUhlaWdodCwgY2IpIHtcbiAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICAgICAgZWxzZSB7IHJldHVybiBmYWxzZTsgfVxuICAgIH1cbiAgICB2YXIgbVRvcCA9IGVtQ2FsYyh0aGlzLm9wdGlvbnMubWFyZ2luVG9wKSxcbiAgICAgICAgbUJ0bSA9IGVtQ2FsYyh0aGlzLm9wdGlvbnMubWFyZ2luQm90dG9tKSxcbiAgICAgICAgdG9wUG9pbnQgPSB0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzBdIDogdGhpcy4kYW5jaG9yLm9mZnNldCgpLnRvcCxcbiAgICAgICAgYm90dG9tUG9pbnQgPSB0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzFdIDogdG9wUG9pbnQgKyB0aGlzLmFuY2hvckhlaWdodCxcbiAgICAgICAgLy8gdG9wUG9pbnQgPSB0aGlzLiRhbmNob3Iub2Zmc2V0KCkudG9wIHx8IHRoaXMucG9pbnRzWzBdLFxuICAgICAgICAvLyBib3R0b21Qb2ludCA9IHRvcFBvaW50ICsgdGhpcy5hbmNob3JIZWlnaHQgfHwgdGhpcy5wb2ludHNbMV0sXG4gICAgICAgIHdpbkhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuc3RpY2tUbyA9PT0gJ3RvcCcpIHtcbiAgICAgIHRvcFBvaW50IC09IG1Ub3A7XG4gICAgICBib3R0b21Qb2ludCAtPSAoZWxlbUhlaWdodCArIG1Ub3ApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnN0aWNrVG8gPT09ICdib3R0b20nKSB7XG4gICAgICB0b3BQb2ludCAtPSAod2luSGVpZ2h0IC0gKGVsZW1IZWlnaHQgKyBtQnRtKSk7XG4gICAgICBib3R0b21Qb2ludCAtPSAod2luSGVpZ2h0IC0gbUJ0bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vdGhpcyB3b3VsZCBiZSB0aGUgc3RpY2tUbzogYm90aCBvcHRpb24uLi4gdHJpY2t5XG4gICAgfVxuXG4gICAgdGhpcy50b3BQb2ludCA9IHRvcFBvaW50O1xuICAgIHRoaXMuYm90dG9tUG9pbnQgPSBib3R0b21Qb2ludDtcblxuICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBjdXJyZW50IHN0aWNreSBlbGVtZW50LlxuICAgKiBSZXNldHMgdGhlIGVsZW1lbnQgdG8gdGhlIHRvcCBwb3NpdGlvbiBmaXJzdC5cbiAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMsIEpTLWFkZGVkIGNzcyBwcm9wZXJ0aWVzIGFuZCBjbGFzc2VzLCBhbmQgdW53cmFwcyB0aGUgJGVsZW1lbnQgaWYgdGhlIEpTIGFkZGVkIHRoZSAkY29udGFpbmVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhgJHt0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3N9IGlzLWFuY2hvcmVkIGlzLWF0LXRvcGApXG4gICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICAgICAgICAgdG9wOiAnJyxcbiAgICAgICAgICAgICAgICAgICBib3R0b206ICcnLFxuICAgICAgICAgICAgICAgICAgICdtYXgtd2lkdGgnOiAnJ1xuICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgaWYgKHRoaXMuJGFuY2hvciAmJiB0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRhbmNob3Iub2ZmKCdjaGFuZ2UuemYuc3RpY2t5Jyk7XG4gICAgfVxuICAgICQod2luZG93KS5vZmYodGhpcy5zY3JvbGxMaXN0ZW5lcik7XG5cbiAgICBpZiAodGhpcy53YXNXcmFwcGVkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnVud3JhcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRjb250YWluZXIucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmNvbnRhaW5lckNsYXNzKVxuICAgICAgICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJydcbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuU3RpY2t5LmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQ3VzdG9taXphYmxlIGNvbnRhaW5lciB0ZW1wbGF0ZS4gQWRkIHlvdXIgb3duIGNsYXNzZXMgZm9yIHN0eWxpbmcgYW5kIHNpemluZy5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAnJmx0O2RpdiBkYXRhLXN0aWNreS1jb250YWluZXIgY2xhc3M9XCJzbWFsbC02IGNvbHVtbnNcIiZndDsmbHQ7L2RpdiZndDsnXG4gICAqL1xuICBjb250YWluZXI6ICc8ZGl2IGRhdGEtc3RpY2t5LWNvbnRhaW5lcj48L2Rpdj4nLFxuICAvKipcbiAgICogTG9jYXRpb24gaW4gdGhlIHZpZXcgdGhlIGVsZW1lbnQgc3RpY2tzIHRvLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICd0b3AnXG4gICAqL1xuICBzdGlja1RvOiAndG9wJyxcbiAgLyoqXG4gICAqIElmIGFuY2hvcmVkIHRvIGEgc2luZ2xlIGVsZW1lbnQsIHRoZSBpZCBvZiB0aGF0IGVsZW1lbnQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2V4YW1wbGVJZCdcbiAgICovXG4gIGFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtb3JlIHRoYW4gb25lIGVsZW1lbnQgYXMgYW5jaG9yIHBvaW50cywgdGhlIGlkIG9mIHRoZSB0b3AgYW5jaG9yLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdleGFtcGxlSWQ6dG9wJ1xuICAgKi9cbiAgdG9wQW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIGJvdHRvbSBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ2V4YW1wbGVJZDpib3R0b20nXG4gICAqL1xuICBidG1BbmNob3I6ICcnLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlIDFcbiAgICovXG4gIG1hcmdpblRvcDogMSxcbiAgLyoqXG4gICAqIE1hcmdpbiwgaW4gYGVtYCdzIHRvIGFwcGx5IHRvIHRoZSBib3R0b20gb2YgdGhlIGVsZW1lbnQgd2hlbiBpdCBiZWNvbWVzIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAZXhhbXBsZSAxXG4gICAqL1xuICBtYXJnaW5Cb3R0b206IDEsXG4gIC8qKlxuICAgKiBCcmVha3BvaW50IHN0cmluZyB0aGF0IGlzIHRoZSBtaW5pbXVtIHNjcmVlbiBzaXplIGFuIGVsZW1lbnQgc2hvdWxkIGJlY29tZSBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgJ21lZGl1bSdcbiAgICovXG4gIHN0aWNreU9uOiAnbWVkaXVtJyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGVsZW1lbnQsIGFuZCByZW1vdmVkIG9uIGRlc3RydWN0aW9uLiBGb3VuZGF0aW9uIGRlZmF1bHRzIHRvIGBzdGlja3lgLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdzdGlja3knXG4gICAqL1xuICBzdGlja3lDbGFzczogJ3N0aWNreScsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHN0aWNreSBjb250YWluZXIuIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreS1jb250YWluZXJgLlxuICAgKiBAb3B0aW9uXG4gICAqIEBleGFtcGxlICdzdGlja3ktY29udGFpbmVyJ1xuICAgKi9cbiAgY29udGFpbmVyQ2xhc3M6ICdzdGlja3ktY29udGFpbmVyJyxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBzY3JvbGwgZXZlbnRzIGJldHdlZW4gdGhlIHBsdWdpbidzIHJlY2FsY3VsYXRpbmcgc3RpY2t5IHBvaW50cy4gU2V0dGluZyBpdCB0byBgMGAgd2lsbCBjYXVzZSBpdCB0byByZWNhbGMgZXZlcnkgc2Nyb2xsIGV2ZW50LCBzZXR0aW5nIGl0IHRvIGAtMWAgd2lsbCBwcmV2ZW50IHJlY2FsYyBvbiBzY3JvbGwuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgNTBcbiAgICovXG4gIGNoZWNrRXZlcnk6IC0xXG59O1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgZW0gdmFsdWVzXG4gKiBAcGFyYW0gTnVtYmVyIHtlbX0gLSBudW1iZXIgb2YgZW0ncyB0byBjYWxjdWxhdGUgaW50byBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZW1DYWxjKGVtKSB7XG4gIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5LCBudWxsKS5mb250U2l6ZSwgMTApICogZW07XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihTdGlja3ksICdTdGlja3knKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFRvZ2dsZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRvZ2dsZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKi9cblxuY2xhc3MgVG9nZ2xlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFRvZ2dsZXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgVG9nZ2xlciNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVG9nZ2xlci5kZWZhdWx0cywgZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJyc7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdUb2dnbGVyJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIFRvZ2dsZXIgcGx1Z2luIGJ5IHBhcnNpbmcgdGhlIHRvZ2dsZSBjbGFzcyBmcm9tIGRhdGEtdG9nZ2xlciwgb3IgYW5pbWF0aW9uIGNsYXNzZXMgZnJvbSBkYXRhLWFuaW1hdGUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGlucHV0O1xuICAgIC8vIFBhcnNlIGFuaW1hdGlvbiBjbGFzc2VzIGlmIHRoZXkgd2VyZSBzZXRcbiAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGUpIHtcbiAgICAgIGlucHV0ID0gdGhpcy5vcHRpb25zLmFuaW1hdGUuc3BsaXQoJyAnKTtcblxuICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGlucHV0WzBdO1xuICAgICAgdGhpcy5hbmltYXRpb25PdXQgPSBpbnB1dFsxXSB8fCBudWxsO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIHBhcnNlIHRvZ2dsZSBjbGFzc1xuICAgIGVsc2Uge1xuICAgICAgaW5wdXQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3RvZ2dsZXInKTtcbiAgICAgIC8vIEFsbG93IGZvciBhIC4gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nXG4gICAgICB0aGlzLmNsYXNzTmFtZSA9IGlucHV0WzBdID09PSAnLicgPyBpbnB1dC5zbGljZSgxKSA6IGlucHV0O1xuICAgIH1cblxuICAgIC8vIEFkZCBBUklBIGF0dHJpYnV0ZXMgdG8gdHJpZ2dlcnNcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkO1xuICAgICQoYFtkYXRhLW9wZW49XCIke2lkfVwiXSwgW2RhdGEtY2xvc2U9XCIke2lkfVwiXSwgW2RhdGEtdG9nZ2xlPVwiJHtpZH1cIl1gKVxuICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG4gICAgLy8gSWYgdGhlIHRhcmdldCBpcyBoaWRkZW4sIGFkZCBhcmlhLWhpZGRlblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIHRoaXMuJGVsZW1lbnQuaXMoJzpoaWRkZW4nKSA/IGZhbHNlIDogdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciB0aGUgdG9nZ2xlIHRyaWdnZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZigndG9nZ2xlLnpmLnRyaWdnZXInKS5vbigndG9nZ2xlLnpmLnRyaWdnZXInLCB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSB0YXJnZXQgY2xhc3Mgb24gdGhlIHRhcmdldCBlbGVtZW50LiBBbiBldmVudCBpcyBmaXJlZCBmcm9tIHRoZSBvcmlnaW5hbCB0cmlnZ2VyIGRlcGVuZGluZyBvbiBpZiB0aGUgcmVzdWx0YW50IHN0YXRlIHdhcyBcIm9uXCIgb3IgXCJvZmZcIi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBUb2dnbGVyI29uXG4gICAqIEBmaXJlcyBUb2dnbGVyI29mZlxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXNbIHRoaXMub3B0aW9ucy5hbmltYXRlID8gJ190b2dnbGVBbmltYXRlJyA6ICdfdG9nZ2xlQ2xhc3MnXSgpO1xuICB9XG5cbiAgX3RvZ2dsZUNsYXNzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5jbGFzc05hbWUpO1xuXG4gICAgdmFyIGlzT24gPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMuY2xhc3NOYW1lKTtcbiAgICBpZiAoaXNPbikge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaGFzIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAqIEBldmVudCBUb2dnbGVyI29uXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgaWYgdGhlIHRhcmdldCBlbGVtZW50IGRvZXMgbm90IGhhdmUgdGhlIGNsYXNzIGFmdGVyIGEgdG9nZ2xlLlxuICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb2ZmXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb2ZmLnpmLnRvZ2dsZXInKTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVBUklBKGlzT24pO1xuICB9XG5cbiAgX3RvZ2dsZUFuaW1hdGUoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLiRlbGVtZW50LmlzKCc6aGlkZGVuJykpIHtcbiAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVJbih0aGlzLiRlbGVtZW50LCB0aGlzLmFuaW1hdGlvbkluLCBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZUFSSUEodHJ1ZSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiRlbGVtZW50LCB0aGlzLmFuaW1hdGlvbk91dCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLl91cGRhdGVBUklBKGZhbHNlKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdvZmYuemYudG9nZ2xlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgX3VwZGF0ZUFSSUEoaXNPbikge1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT24gPyB0cnVlIDogZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBpbnN0YW5jZSBvZiBUb2dnbGVyIG9uIHRoZSBlbGVtZW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50b2dnbGVyJyk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblRvZ2dsZXIuZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBUZWxscyB0aGUgcGx1Z2luIGlmIHRoZSBlbGVtZW50IHNob3VsZCBhbmltYXRlZCB3aGVuIHRvZ2dsZWQuXG4gICAqIEBvcHRpb25cbiAgICogQGV4YW1wbGUgZmFsc2VcbiAgICovXG4gIGFuaW1hdGU6IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oVG9nZ2xlciwgJ1RvZ2dsZXInKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBQb2x5ZmlsbCBmb3IgcmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4oZnVuY3Rpb24oKSB7XG4gIGlmICghRGF0ZS5ub3cpXG4gICAgRGF0ZS5ub3cgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9O1xuXG4gIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQnLCAnbW96J107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsraSkge1xuICAgICAgdmFyIHZwID0gdmVuZG9yc1tpXTtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdnArJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gKHdpbmRvd1t2cCsnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgd2luZG93W3ZwKydDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXSk7XG4gIH1cbiAgaWYgKC9pUChhZHxob25lfG9kKS4qT1MgNi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICB8fCAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAhd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgdmFyIGxhc3RUaW1lID0gMDtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciBuZXh0VGltZSA9IE1hdGgubWF4KGxhc3RUaW1lICsgMTYsIG5vdyk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhsYXN0VGltZSA9IG5leHRUaW1lKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFRpbWUgLSBub3cpO1xuICAgIH07XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2xlYXJUaW1lb3V0O1xuICB9XG59KSgpO1xuXG52YXIgaW5pdENsYXNzZXMgICA9IFsnbXVpLWVudGVyJywgJ211aS1sZWF2ZSddO1xudmFyIGFjdGl2ZUNsYXNzZXMgPSBbJ211aS1lbnRlci1hY3RpdmUnLCAnbXVpLWxlYXZlLWFjdGl2ZSddO1xuXG4vLyBGaW5kIHRoZSByaWdodCBcInRyYW5zaXRpb25lbmRcIiBldmVudCBmb3IgdGhpcyBicm93c2VyXG52YXIgZW5kRXZlbnQgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB0cmFuc2l0aW9ucyA9IHtcbiAgICAndHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAnV2Via2l0VHJhbnNpdGlvbic6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAnTW96VHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAnT1RyYW5zaXRpb24nOiAnb3RyYW5zaXRpb25lbmQnXG4gIH1cbiAgdmFyIGVsZW0gPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgZm9yICh2YXIgdCBpbiB0cmFuc2l0aW9ucykge1xuICAgIGlmICh0eXBlb2YgZWxlbS5zdHlsZVt0XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0cmFuc2l0aW9uc1t0XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFuaW1hdGUoaXNJbiwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYikge1xuICBlbGVtZW50ID0gJChlbGVtZW50KS5lcSgwKTtcblxuICBpZiAoIWVsZW1lbnQubGVuZ3RoKSByZXR1cm47XG5cbiAgaWYgKGVuZEV2ZW50ID09PSBudWxsKSB7XG4gICAgaXNJbiA/IGVsZW1lbnQuc2hvdygpIDogZWxlbWVudC5oaWRlKCk7XG4gICAgY2IoKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaW5pdENsYXNzID0gaXNJbiA/IGluaXRDbGFzc2VzWzBdIDogaW5pdENsYXNzZXNbMV07XG4gIHZhciBhY3RpdmVDbGFzcyA9IGlzSW4gPyBhY3RpdmVDbGFzc2VzWzBdIDogYWN0aXZlQ2xhc3Nlc1sxXTtcblxuICAvLyBTZXQgdXAgdGhlIGFuaW1hdGlvblxuICByZXNldCgpO1xuICBlbGVtZW50LmFkZENsYXNzKGFuaW1hdGlvbik7XG4gIGVsZW1lbnQuY3NzKCd0cmFuc2l0aW9uJywgJ25vbmUnKTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQuYWRkQ2xhc3MoaW5pdENsYXNzKTtcbiAgICBpZiAoaXNJbikgZWxlbWVudC5zaG93KCk7XG4gIH0pO1xuXG4gIC8vIFN0YXJ0IHRoZSBhbmltYXRpb25cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGg7XG4gICAgZWxlbWVudC5jc3MoJ3RyYW5zaXRpb24nLCAnJyk7XG4gICAgZWxlbWVudC5hZGRDbGFzcyhhY3RpdmVDbGFzcyk7XG4gIH0pO1xuXG4gIC8vIENsZWFuIHVwIHRoZSBhbmltYXRpb24gd2hlbiBpdCBmaW5pc2hlc1xuICBlbGVtZW50Lm9uZSgndHJhbnNpdGlvbmVuZCcsIGZpbmlzaCk7XG5cbiAgLy8gSGlkZXMgdGhlIGVsZW1lbnQgKGZvciBvdXQgYW5pbWF0aW9ucyksIHJlc2V0cyB0aGUgZWxlbWVudCwgYW5kIHJ1bnMgYSBjYWxsYmFja1xuICBmdW5jdGlvbiBmaW5pc2goKSB7XG4gICAgaWYgKCFpc0luKSBlbGVtZW50LmhpZGUoKTtcbiAgICByZXNldCgpO1xuICAgIGlmIChjYikgY2IuYXBwbHkoZWxlbWVudCk7XG4gIH1cblxuICAvLyBSZXNldHMgdHJhbnNpdGlvbnMgYW5kIHJlbW92ZXMgbW90aW9uLXNwZWNpZmljIGNsYXNzZXNcbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgZWxlbWVudFswXS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAwO1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoaW5pdENsYXNzICsgJyAnICsgYWN0aXZlQ2xhc3MgKyAnICcgKyBhbmltYXRpb24pO1xuICB9XG59XG5cbnZhciBNb3Rpb25VSSA9IHtcbiAgYW5pbWF0ZUluOiBmdW5jdGlvbihlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gICAgYW5pbWF0ZSh0cnVlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfSxcblxuICBhbmltYXRlT3V0OiBmdW5jdGlvbihlbGVtZW50LCBhbmltYXRpb24sIGNiKSB7XG4gICAgYW5pbWF0ZShmYWxzZSwgZWxlbWVudCwgYW5pbWF0aW9uLCBjYik7XG4gIH1cbn1cbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogZm91bmRhdGlvbi1kYXRlcGlja2VyLmpzXG4gKiBDb3B5cmlnaHQgMjAxNSBQZXRlciBCZW5vLCBuYWpsZXBzaXdlYmRlc2lnbmVyQGdtYWlsLmNvbSwgQGJlbm9wZXRlclxuICogcHJvamVjdCB3ZWJzaXRlIGh0dHA6Ly9mb3VuZGF0aW9uLWRhdGVwaWNrZXIucGV0ZXJiZW5vLmNvbVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4hIGZ1bmN0aW9uKCQpIHtcblxuICAgIGZ1bmN0aW9uIFVUQ0RhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShEYXRlLCBhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBVVENUb2RheSgpIHtcbiAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgcmV0dXJuIFVUQ0RhdGUodG9kYXkuZ2V0VVRDRnVsbFllYXIoKSwgdG9kYXkuZ2V0VVRDTW9udGgoKSwgdG9kYXkuZ2V0VVRDRGF0ZSgpKTtcbiAgICB9XG5cbiAgICB2YXIgRGF0ZXBpY2tlciA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgICAgIHRoaXMuYXV0b1Nob3cgPSAob3B0aW9ucy5hdXRvU2hvdyA9PSB1bmRlZmluZWQgPyB0cnVlIDogb3B0aW9ucy5hdXRvU2hvdyk7XG4gICAgICAgIHRoaXMuYXBwZW5kVG8gPSBvcHRpb25zLmFwcGVuZFRvIHx8ICdib2R5JztcbiAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbiA9IG9wdGlvbnMuY2xvc2VCdXR0b247XG4gICAgICAgIHRoaXMubGFuZ3VhZ2UgPSBvcHRpb25zLmxhbmd1YWdlIHx8IHRoaXMuZWxlbWVudC5kYXRhKCdkYXRlLWxhbmd1YWdlJykgfHwgXCJlblwiO1xuICAgICAgICB0aGlzLmxhbmd1YWdlID0gdGhpcy5sYW5ndWFnZSBpbiBkYXRlcyA/IHRoaXMubGFuZ3VhZ2UgOiB0aGlzLmxhbmd1YWdlLnNwbGl0KCctJylbMF07IC8vQ2hlY2sgaWYgXCJkZS1ERVwiIHN0eWxlIGRhdGUgaXMgYXZhaWxhYmxlLCBpZiBub3QgbGFuZ3VhZ2Ugc2hvdWxkIGZhbGxiYWNrIHRvIDIgbGV0dGVyIGNvZGUgZWcgXCJkZVwiXG4gICAgICAgIHRoaXMubGFuZ3VhZ2UgPSB0aGlzLmxhbmd1YWdlIGluIGRhdGVzID8gdGhpcy5sYW5ndWFnZSA6IFwiZW5cIjtcbiAgICAgICAgdGhpcy5pc1JUTCA9IGRhdGVzW3RoaXMubGFuZ3VhZ2VdLnJ0bCB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5mb3JtYXQgPSBEUEdsb2JhbC5wYXJzZUZvcm1hdChvcHRpb25zLmZvcm1hdCB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS1mb3JtYXQnKSB8fCBkYXRlc1t0aGlzLmxhbmd1YWdlXS5mb3JtYXQgfHwgJ21tL2RkL3l5eXknKTtcbiAgICAgICAgdGhpcy5mb3JtYXRUZXh0ID0gb3B0aW9ucy5mb3JtYXQgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUtZm9ybWF0JykgfHwgZGF0ZXNbdGhpcy5sYW5ndWFnZV0uZm9ybWF0IHx8ICdtbS9kZC95eXl5JztcbiAgICAgICAgdGhpcy5pc0lubGluZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzSW5wdXQgPSB0aGlzLmVsZW1lbnQuaXMoJ2lucHV0Jyk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gdGhpcy5lbGVtZW50LmlzKCcuZGF0ZScpID8gdGhpcy5lbGVtZW50LmZpbmQoJy5wcmVmaXgsIC5wb3N0Zml4JykgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5oYXNJbnB1dCA9IHRoaXMuY29tcG9uZW50ICYmIHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpLmxlbmd0aDtcbiAgICAgICAgdGhpcy5kaXNhYmxlRGJsQ2xpY2tTZWxlY3Rpb24gPSBvcHRpb25zLmRpc2FibGVEYmxDbGlja1NlbGVjdGlvbjtcbiAgICAgICAgdGhpcy5vblJlbmRlciA9IG9wdGlvbnMub25SZW5kZXIgfHwgZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50ICYmIHRoaXMuY29tcG9uZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpbmtGaWVsZCA9IG9wdGlvbnMubGlua0ZpZWxkIHx8IHRoaXMuZWxlbWVudC5kYXRhKCdsaW5rLWZpZWxkJykgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMubGlua0Zvcm1hdCA9IERQR2xvYmFsLnBhcnNlRm9ybWF0KG9wdGlvbnMubGlua0Zvcm1hdCB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnbGluay1mb3JtYXQnKSB8fCAneXl5eS1tbS1kZCBoaDppaTpzcycpO1xuICAgICAgICB0aGlzLm1pbnV0ZVN0ZXAgPSBvcHRpb25zLm1pbnV0ZVN0ZXAgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ21pbnV0ZS1zdGVwJykgfHwgNTtcbiAgICAgICAgdGhpcy5waWNrZXJQb3NpdGlvbiA9IG9wdGlvbnMucGlja2VyUG9zaXRpb24gfHwgdGhpcy5lbGVtZW50LmRhdGEoJ3BpY2tlci1wb3NpdGlvbicpIHx8ICdib3R0b20tcmlnaHQnO1xuICAgICAgICB0aGlzLmluaXRpYWxEYXRlID0gb3B0aW9ucy5pbml0aWFsRGF0ZSB8fCBudWxsO1xuICAgICAgICB0aGlzLmZhQ1NTcHJlZml4ID0gb3B0aW9ucy5mYUNTU3ByZWZpeCB8fCAnZmEnO1xuICAgICAgICB0aGlzLmxlZnRBcnJvdyA9IG9wdGlvbnMubGVmdEFycm93IHx8ICc8aSBjbGFzcz1cIicgKyB0aGlzLmZhQ1NTcHJlZml4ICsgJyAnICsgdGhpcy5mYUNTU3ByZWZpeCArICctY2hldnJvbi1sZWZ0IGZpLWFycm93LWxlZnRcIi8+JztcbiAgICAgICAgdGhpcy5yaWdodEFycm93ID0gb3B0aW9ucy5yaWdodEFycm93IHx8ICc8aSBjbGFzcz1cIicgKyB0aGlzLmZhQ1NTcHJlZml4ICsgJyAnICsgdGhpcy5mYUNTU3ByZWZpeCArICctY2hldnJvbi1yaWdodCBmaS1hcnJvdy1yaWdodFwiLz4nO1xuICAgICAgICB0aGlzLmNsb3NlSWNvbiA9IG9wdGlvbnMuY2xvc2VJY29uIHx8ICc8aSBjbGFzcz1cIicgKyB0aGlzLmZhQ1NTcHJlZml4ICsgJyAnICsgdGhpcy5mYUNTU3ByZWZpeCArICctcmVtb3ZlICcgKyB0aGlzLmZhQ1NTcHJlZml4ICsgJy10aW1lcyBmaS14XCI+PC9pPic7XG5cbiAgICAgICAgXG5cbiAgICAgICAgdGhpcy5taW5WaWV3ID0gMDtcbiAgICAgICAgaWYgKCdtaW5WaWV3JyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLm1pblZpZXcgPSBvcHRpb25zLm1pblZpZXc7XG4gICAgICAgIH0gZWxzZSBpZiAoJ21pblZpZXcnIGluIHRoaXMuZWxlbWVudC5kYXRhKCkpIHtcbiAgICAgICAgICAgIHRoaXMubWluVmlldyA9IHRoaXMuZWxlbWVudC5kYXRhKCdtaW4tdmlldycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWluVmlldyA9IERQR2xvYmFsLmNvbnZlcnRWaWV3TW9kZSh0aGlzLm1pblZpZXcpO1xuXG4gICAgICAgIHRoaXMubWF4VmlldyA9IERQR2xvYmFsLm1vZGVzLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmICgnbWF4VmlldycgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5tYXhWaWV3ID0gb3B0aW9ucy5tYXhWaWV3O1xuICAgICAgICB9IGVsc2UgaWYgKCdtYXhWaWV3JyBpbiB0aGlzLmVsZW1lbnQuZGF0YSgpKSB7XG4gICAgICAgICAgICB0aGlzLm1heFZpZXcgPSB0aGlzLmVsZW1lbnQuZGF0YSgnbWF4LXZpZXcnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1heFZpZXcgPSBEUEdsb2JhbC5jb252ZXJ0Vmlld01vZGUodGhpcy5tYXhWaWV3KTtcblxuICAgICAgICB0aGlzLnN0YXJ0Vmlld01vZGUgPSAnbW9udGgnO1xuICAgICAgICBpZiAoJ3N0YXJ0VmlldycgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5zdGFydFZpZXdNb2RlID0gb3B0aW9ucy5zdGFydFZpZXc7XG4gICAgICAgIH0gZWxzZSBpZiAoJ3N0YXJ0VmlldycgaW4gdGhpcy5lbGVtZW50LmRhdGEoKSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydFZpZXdNb2RlID0gdGhpcy5lbGVtZW50LmRhdGEoJ3N0YXJ0LXZpZXcnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXJ0Vmlld01vZGUgPSBEUEdsb2JhbC5jb252ZXJ0Vmlld01vZGUodGhpcy5zdGFydFZpZXdNb2RlKTtcbiAgICAgICAgdGhpcy52aWV3TW9kZSA9IHRoaXMuc3RhcnRWaWV3TW9kZTtcblxuICAgICAgICBpZiAoISgnbWluVmlldycgaW4gb3B0aW9ucykgJiYgISgnbWF4VmlldycgaW4gb3B0aW9ucykgJiYgISh0aGlzLmVsZW1lbnQuZGF0YSgnbWluLXZpZXcnKSkgJiYgISh0aGlzLmVsZW1lbnQuZGF0YSgnbWF4LXZpZXcnKSkpIHtcbiAgICAgICAgICAgIHRoaXMucGlja1RpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICgncGlja1RpbWUnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tUaW1lID0gb3B0aW9ucy5waWNrVGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnBpY2tUaW1lID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1pblZpZXcgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMubWF4VmlldyA9IDQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubWluVmlldyA9IDI7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhWaWV3ID0gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZm9yY2VQYXJzZSA9IHRydWU7XG4gICAgICAgIGlmICgnZm9yY2VQYXJzZScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5mb3JjZVBhcnNlID0gb3B0aW9ucy5mb3JjZVBhcnNlO1xuICAgICAgICB9IGVsc2UgaWYgKCdkYXRlRm9yY2VQYXJzZScgaW4gdGhpcy5lbGVtZW50LmRhdGEoKSkge1xuICAgICAgICAgICAgdGhpcy5mb3JjZVBhcnNlID0gdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUtZm9yY2UtcGFyc2UnKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgdGhpcy5waWNrZXIgPSAkKERQR2xvYmFsLnRlbXBsYXRlKHRoaXMubGVmdEFycm93LCB0aGlzLnJpZ2h0QXJyb3csIHRoaXMuY2xvc2VJY29uKSlcbiAgICAgICAgICAgIC5hcHBlbmRUbyh0aGlzLmlzSW5saW5lID8gdGhpcy5lbGVtZW50IDogdGhpcy5hcHBlbmRUbylcbiAgICAgICAgICAgIC5vbih7XG4gICAgICAgICAgICAgICAgY2xpY2s6ICQucHJveHkodGhpcy5jbGljaywgdGhpcyksXG4gICAgICAgICAgICAgICAgbW91c2Vkb3duOiAkLnByb3h5KHRoaXMubW91c2Vkb3duLCB0aGlzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlQnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCdhLmRhdGVwaWNrZXItY2xvc2UnKS5zaG93KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCdhLmRhdGVwaWNrZXItY2xvc2UnKS5oaWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc0lubGluZSkge1xuICAgICAgICAgICAgdGhpcy5waWNrZXIuYWRkQ2xhc3MoJ2RhdGVwaWNrZXItaW5saW5lJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5hZGRDbGFzcygnZGF0ZXBpY2tlci1kcm9wZG93biBkcm9wZG93bi1tZW51Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNSVEwpIHtcbiAgICAgICAgICAgIHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLXJ0bCcpO1xuXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcuZGF0ZS1zd2l0Y2gnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucHJlcGVuZCgkKHRoaXMpLnNpYmxpbmdzKCcubmV4dCcpKTtcbiAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5hcHBlbmQoJCh0aGlzKS5zaWJsaW5ncygnLnByZXYnKSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLnByZXYsIC5uZXh0JykudG9nZ2xlQ2xhc3MoJ3ByZXYgbmV4dCcpO1xuXG4gICAgICAgIH1cbiAgICAgICAgJChkb2N1bWVudCkub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmICh0aGF0LmlzSW5wdXQgJiYgZS50YXJnZXQgPT09IHRoYXQuZWxlbWVudFswXSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2xpY2tlZCBvdXRzaWRlIHRoZSBkYXRlcGlja2VyLCBoaWRlIGl0XG4gICAgICAgICAgICBpZiAoJChlLnRhcmdldCkuY2xvc2VzdCgnLmRhdGVwaWNrZXIuZGF0ZXBpY2tlci1pbmxpbmUsIC5kYXRlcGlja2VyLmRhdGVwaWNrZXItZHJvcGRvd24nKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGF0LmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hdXRvY2xvc2UgPSB0cnVlO1xuICAgICAgICBpZiAoJ2F1dG9jbG9zZScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5hdXRvY2xvc2UgPSBvcHRpb25zLmF1dG9jbG9zZTtcbiAgICAgICAgfSBlbHNlIGlmICgnZGF0ZUF1dG9jbG9zZScgaW4gdGhpcy5lbGVtZW50LmRhdGEoKSkge1xuICAgICAgICAgICAgdGhpcy5hdXRvY2xvc2UgPSB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS1hdXRvY2xvc2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMua2V5Ym9hcmROYXZpZ2F0aW9uID0gdHJ1ZTtcbiAgICAgICAgaWYgKCdrZXlib2FyZE5hdmlnYXRpb24nIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMua2V5Ym9hcmROYXZpZ2F0aW9uID0gb3B0aW9ucy5rZXlib2FyZE5hdmlnYXRpb247XG4gICAgICAgIH0gZWxzZSBpZiAoJ2RhdGVLZXlib2FyZE5hdmlnYXRpb24nIGluIHRoaXMuZWxlbWVudC5kYXRhKCkpIHtcbiAgICAgICAgICAgIHRoaXMua2V5Ym9hcmROYXZpZ2F0aW9uID0gdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGUta2V5Ym9hcmQtbmF2aWdhdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2RheUJ0biA9IChvcHRpb25zLnRvZGF5QnRuIHx8IHRoaXMuZWxlbWVudC5kYXRhKCdkYXRlLXRvZGF5LWJ0bicpIHx8IGZhbHNlKTtcbiAgICAgICAgdGhpcy50b2RheUhpZ2hsaWdodCA9IChvcHRpb25zLnRvZGF5SGlnaGxpZ2h0IHx8IHRoaXMuZWxlbWVudC5kYXRhKCdkYXRlLXRvZGF5LWhpZ2hsaWdodCcpIHx8IGZhbHNlKTtcblxuICAgICAgICB0aGlzLmNhbGVuZGFyV2Vla3MgPSBmYWxzZTtcbiAgICAgICAgaWYgKCdjYWxlbmRhcldlZWtzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyV2Vla3MgPSBvcHRpb25zLmNhbGVuZGFyV2Vla3M7XG4gICAgICAgIH0gZWxzZSBpZiAoJ2RhdGVDYWxlbmRhcldlZWtzJyBpbiB0aGlzLmVsZW1lbnQuZGF0YSgpKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFyV2Vla3MgPSB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS1jYWxlbmRhci13ZWVrcycpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNhbGVuZGFyV2Vla3MpXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCd0Zm9vdCB0aC50b2RheScpXG4gICAgICAgICAgICAuYXR0cignY29sc3BhbicsIGZ1bmN0aW9uKGksIHZhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh2YWwpICsgMTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMud2Vla1N0YXJ0ID0gKChvcHRpb25zLndlZWtTdGFydCB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS13ZWVrc3RhcnQnKSB8fCBkYXRlc1t0aGlzLmxhbmd1YWdlXS53ZWVrU3RhcnQgfHwgMCkgJSA3KTtcbiAgICAgICAgdGhpcy53ZWVrRW5kID0gKCh0aGlzLndlZWtTdGFydCArIDYpICUgNyk7XG4gICAgICAgIHRoaXMuc3RhcnREYXRlID0gLUluZmluaXR5O1xuICAgICAgICB0aGlzLmVuZERhdGUgPSBJbmZpbml0eTtcbiAgICAgICAgdGhpcy5kYXlzT2ZXZWVrRGlzYWJsZWQgPSBbXTtcbiAgICAgICAgdGhpcy5kYXRlc0Rpc2FibGVkID0gW107XG4gICAgICAgIHRoaXMuc2V0U3RhcnREYXRlKG9wdGlvbnMuc3RhcnREYXRlIHx8IHRoaXMuZWxlbWVudC5kYXRhKCdkYXRlLXN0YXJ0ZGF0ZScpKTtcbiAgICAgICAgdGhpcy5zZXRFbmREYXRlKG9wdGlvbnMuZW5kRGF0ZSB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS1lbmRkYXRlJykpO1xuICAgICAgICB0aGlzLnNldERheXNPZldlZWtEaXNhYmxlZChvcHRpb25zLmRheXNPZldlZWtEaXNhYmxlZCB8fCB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZS1kYXlzLW9mLXdlZWstZGlzYWJsZWQnKSk7XG4gICAgICAgIHRoaXMuc2V0RGF0ZXNEaXNhYmxlZChvcHRpb25zLmRhdGVzRGlzYWJsZWQgfHwgdGhpcy5lbGVtZW50LmRhdGEoJ2RhdGVzLWRpc2FibGVkJykpO1xuXG4gICAgICAgIHRoaXMuZmlsbERvdygpO1xuICAgICAgICB0aGlzLmZpbGxNb250aHMoKTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcblxuICAgICAgICB0aGlzLnNob3dNb2RlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNJbmxpbmUpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYXR0YWNoRXZlbnRzKCk7XG4gICAgfTtcblxuICAgIERhdGVwaWNrZXIucHJvdG90eXBlID0ge1xuICAgICAgICBjb25zdHJ1Y3RvcjogRGF0ZXBpY2tlcixcblxuICAgICAgICBfZXZlbnRzOiBbXSxcbiAgICAgICAgX2F0dGFjaEV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9kZXRhY2hFdmVudHMoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5wdXQpIHsgLy8gc2luZ2xlIGlucHV0XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmtleWJvYXJkTmF2aWdhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6ICh0aGlzLmF1dG9TaG93KSA/ICQucHJveHkodGhpcy5zaG93LCB0aGlzKSA6IGZ1bmN0aW9uKCkge31cbiAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgW3RoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzOiAodGhpcy5hdXRvU2hvdykgPyAkLnByb3h5KHRoaXMuc2hvdywgdGhpcykgOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXVwOiAkLnByb3h5KHRoaXMudXBkYXRlLCB0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duOiAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6ICh0aGlzLmVsZW1lbnQuYXR0cigncmVhZG9ubHknKSkgPyAkLnByb3h5KHRoaXMuc2hvdywgdGhpcykgOiBmdW5jdGlvbigpIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmNvbXBvbmVudCAmJiB0aGlzLmhhc0lucHV0KSB7IC8vIGNvbXBvbmVudDogaW5wdXQgKyBidXR0b25cbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBbXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBjb21wb25lbnRzIHRoYXQgYXJlIG5vdCByZWFkb25seSwgYWxsb3cga2V5Ym9hcmQgbmF2XG4gICAgICAgICAgICAgICAgICAgIFt0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6ICh0aGlzLmF1dG9TaG93KSA/ICQucHJveHkodGhpcy5zaG93LCB0aGlzKSA6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXl1cDogJC5wcm94eSh0aGlzLnVwZGF0ZSwgdGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlkb3duOiAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcylcbiAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgIFt0aGlzLmNvbXBvbmVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6ICQucHJveHkodGhpcy5zaG93LCB0aGlzKVxuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZWxlbWVudC5pcygnZGl2JykpIHsgLy8gaW5saW5lIGRhdGVwaWNrZXJcbiAgICAgICAgICAgICAgICB0aGlzLmlzSW5saW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gW1xuICAgICAgICAgICAgICAgICAgICBbdGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGljazogJC5wcm94eSh0aGlzLnNob3csIHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZGlzYWJsZURibENsaWNrU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3RoaXMuX2V2ZW50cy5sZW5ndGhdID0gW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRibGNsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5ibHVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBlbCwgZXY7IGkgPCB0aGlzLl9ldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBlbCA9IHRoaXMuX2V2ZW50c1tpXVswXTtcbiAgICAgICAgICAgICAgICBldiA9IHRoaXMuX2V2ZW50c1tpXVsxXTtcbiAgICAgICAgICAgICAgICBlbC5vbihldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9kZXRhY2hFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGVsLCBldjsgaSA8IHRoaXMuX2V2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGVsID0gdGhpcy5fZXZlbnRzW2ldWzBdO1xuICAgICAgICAgICAgICAgIGV2ID0gdGhpcy5fZXZlbnRzW2ldWzFdO1xuICAgICAgICAgICAgICAgIGVsLm9mZihldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBbXTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaG93OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5zaG93KCk7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuY29tcG9uZW50ID8gdGhpcy5jb21wb25lbnQub3V0ZXJIZWlnaHQoKSA6IHRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMucGxhY2UoKTtcbiAgICAgICAgICAgICQod2luZG93KS5vbigncmVzaXplJywgJC5wcm94eSh0aGlzLnBsYWNlLCB0aGlzKSk7XG4gICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzaG93JyxcbiAgICAgICAgICAgICAgICBkYXRlOiB0aGlzLmRhdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhpZGU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5saW5lKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoIXRoaXMucGlja2VyLmlzKCc6dmlzaWJsZScpKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5oaWRlKCk7XG4gICAgICAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUnLCB0aGlzLnBsYWNlKTtcbiAgICAgICAgICAgIHRoaXMudmlld01vZGUgPSB0aGlzLnN0YXJ0Vmlld01vZGU7XG4gICAgICAgICAgICB0aGlzLnNob3dNb2RlKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNJbnB1dCkge1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZignbW91c2Vkb3duJywgdGhpcy5oaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VQYXJzZSAmJlxuICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0lucHV0ICYmIHRoaXMuZWxlbWVudC52YWwoKSB8fFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhc0lucHV0ICYmIHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpLnZhbCgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUoKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaGlkZScsXG4gICAgICAgICAgICAgICAgZGF0ZTogdGhpcy5kYXRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fZGV0YWNoRXZlbnRzKCk7XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5yZW1vdmUoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQuZGF0YSgpLmRhdGVwaWNrZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZCA9IHRoaXMuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGQuZ2V0VGltZSgpICsgKGQuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0VVRDRGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldERhdGU6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VVRDRGF0ZShuZXcgRGF0ZShkLmdldFRpbWUoKSAtIChkLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MDAwMCkpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRVVENEYXRlOiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGUgPSBkO1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBmb3JtYXR0ZWQgPSB0aGlzLmdldEZvcm1hdHRlZERhdGUoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0lucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpLnZhbChmb3JtYXR0ZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZScsIGZvcm1hdHRlZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC52YWwoZm9ybWF0dGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBnZXRGb3JtYXR0ZWREYXRlOiBmdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB0aGlzLmZvcm1hdDtcbiAgICAgICAgICAgIHJldHVybiBEUEdsb2JhbC5mb3JtYXREYXRlKHRoaXMuZGF0ZSwgZm9ybWF0LCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRTdGFydERhdGU6IGZ1bmN0aW9uKHN0YXJ0RGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydERhdGUgPSBzdGFydERhdGUgfHwgLUluZmluaXR5O1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnREYXRlICE9PSAtSW5maW5pdHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IERQR2xvYmFsLnBhcnNlRGF0ZSh0aGlzLnN0YXJ0RGF0ZSwgdGhpcy5mb3JtYXQsIHRoaXMubGFuZ3VhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTmF2QXJyb3dzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0RW5kRGF0ZTogZnVuY3Rpb24oZW5kRGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5lbmREYXRlID0gZW5kRGF0ZSB8fCBJbmZpbml0eTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUgIT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmREYXRlID0gRFBHbG9iYWwucGFyc2VEYXRlKHRoaXMuZW5kRGF0ZSwgdGhpcy5mb3JtYXQsIHRoaXMubGFuZ3VhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTmF2QXJyb3dzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0RGF5c09mV2Vla0Rpc2FibGVkOiBmdW5jdGlvbihkYXlzT2ZXZWVrRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGF5c09mV2Vla0Rpc2FibGVkID0gZGF5c09mV2Vla0Rpc2FibGVkIHx8IFtdO1xuICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkodGhpcy5kYXlzT2ZXZWVrRGlzYWJsZWQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXlzT2ZXZWVrRGlzYWJsZWQgPSB0aGlzLmRheXNPZldlZWtEaXNhYmxlZC5zcGxpdCgvLFxccyovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF5c09mV2Vla0Rpc2FibGVkID0gJC5tYXAodGhpcy5kYXlzT2ZXZWVrRGlzYWJsZWQsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoZCwgMTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVOYXZBcnJvd3MoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXREYXRlc0Rpc2FibGVkOiBmdW5jdGlvbihkYXRlc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGVzRGlzYWJsZWQgPSBkYXRlc0Rpc2FibGVkIHx8IFtdO1xuICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkodGhpcy5kYXRlc0Rpc2FibGVkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZXNEaXNhYmxlZCA9IHRoaXMuZGF0ZXNEaXNhYmxlZC5zcGxpdCgvLFxccyovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0ZXNEaXNhYmxlZCA9ICQubWFwKHRoaXMuZGF0ZXNEaXNhYmxlZCwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBEUEdsb2JhbC5wYXJzZURhdGUoZCwgdGhpcy5mb3JtYXQsIHRoaXMubGFuZ3VhZ2UpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTmF2QXJyb3dzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGxhY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNJbmxpbmUpIHJldHVybjtcbiAgICAgICAgICAgIHZhciB6SW5kZXggPSBwYXJzZUludCh0aGlzLmVsZW1lbnQucGFyZW50cygpLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5jc3MoJ3otaW5kZXgnKSAhPSAnYXV0byc7XG4gICAgICAgICAgICB9KS5maXJzdCgpLmNzcygnei1pbmRleCcpKSArIDEwO1xuICAgICAgICAgICAgdmFyIHRleHRib3ggPSB0aGlzLmNvbXBvbmVudCA/IHRoaXMuY29tcG9uZW50IDogdGhpcy5lbGVtZW50O1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRleHRib3gub2Zmc2V0KCk7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGV4dGJveC5vdXRlckhlaWdodCgpICsgcGFyc2VJbnQodGV4dGJveC5jc3MoJ21hcmdpbi10b3AnKSk7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0ZXh0Ym94Lm91dGVyV2lkdGgoKSArIHBhcnNlSW50KHRleHRib3guY3NzKCdtYXJnaW4tbGVmdCcpKTtcbiAgICAgICAgICAgIHZhciBmdWxsT2Zmc2V0VG9wID0gb2Zmc2V0LnRvcCArIGhlaWdodDtcbiAgICAgICAgICAgIHZhciBvZmZzZXRMZWZ0ID0gb2Zmc2V0LmxlZnQ7XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5yZW1vdmVDbGFzcygnZGF0ZXBpY2tlci10b3AgZGF0ZXBpY2tlci1ib3R0b20nKTtcbiAgICAgICAgICAgIC8vIGlmIHRoZSBkYXRlcGlja2VyIGlzIGdvaW5nIHRvIGJlIGJlbG93IHRoZSB3aW5kb3csIHNob3cgaXQgb24gdG9wIG9mIHRoZSBpbnB1dFxuICAgICAgICAgICAgaWYgKChmdWxsT2Zmc2V0VG9wICsgdGhpcy5waWNrZXIub3V0ZXJIZWlnaHQoKSkgPj0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgJCh3aW5kb3cpLmhlaWdodCgpKSB7XG4gICAgICAgICAgICAgICAgZnVsbE9mZnNldFRvcCA9IG9mZnNldC50b3AgLSB0aGlzLnBpY2tlci5vdXRlckhlaWdodCgpO1xuICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmFkZENsYXNzKCdkYXRlcGlja2VyLXRvcCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuYWRkQ2xhc3MoJ2RhdGVwaWNrZXItYm90dG9tJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBkYXRlcGlja2VyIGlzIGdvaW5nIHRvIGdvIHBhc3QgdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIHdpbmRvdywgd2Ugd2FudFxuICAgICAgICAgICAgLy8gdG8gc2V0IHRoZSByaWdodCBwb3NpdGlvbiBzbyB0aGUgZGF0ZXBpY2tlciBsaW5lcyB1cCB3aXRoIHRoZSB0ZXh0Ym94XG4gICAgICAgICAgICBpZiAob2Zmc2V0LmxlZnQgKyB0aGlzLnBpY2tlci53aWR0aCgpID49ICQod2luZG93KS53aWR0aCgpKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0TGVmdCA9IChvZmZzZXQubGVmdCArIHdpZHRoKSAtIHRoaXMucGlja2VyLndpZHRoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5jc3Moe1xuICAgICAgICAgICAgICAgIHRvcDogZnVsbE9mZnNldFRvcCxcbiAgICAgICAgICAgICAgICBsZWZ0OiBvZmZzZXRMZWZ0LFxuICAgICAgICAgICAgICAgIHpJbmRleDogekluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGRhdGUsIGZyb21BcmdzID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgY3VycmVudFZhbCA9IHRoaXMuaXNJbnB1dCA/IHRoaXMuZWxlbWVudC52YWwoKSA6IHRoaXMuZWxlbWVudC5kYXRhKCdkYXRlJykgfHwgdGhpcy5lbGVtZW50LmZpbmQoJ2lucHV0JykudmFsKCk7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzICYmIGFyZ3VtZW50cy5sZW5ndGggJiYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdzdHJpbmcnIHx8IGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgICAgICBmcm9tQXJncyA9IHRydWU7XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgZWxzZSBpZiAoIWN1cnJlbnRWYWwgJiYgdGhpcy5pbml0aWFsRGF0ZSAhPSBudWxsKSB7IC8vIElmIHZhbHVlIGlzIG5vdCBzZXQsIHNldCBpdCB0byB0aGUgaW5pdGlhbERhdGUgXG4gICAgICAgICAgICAgICAgZGF0ZSA9IHRoaXMuaW5pdGlhbERhdGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGUgPSB0aGlzLmlzSW5wdXQgPyB0aGlzLmVsZW1lbnQudmFsKCkgOiB0aGlzLmVsZW1lbnQuZGF0YSgnZGF0ZScpIHx8IHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpLnZhbCgpO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKGRhdGUgJiYgZGF0ZS5sZW5ndGggPiB0aGlzLmZvcm1hdFRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcy5waWNrZXIpLmFkZENsYXNzKCdpcy1pbnZhbGlkJylcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmFkZENsYXNzKCdpcy1pbnZhbGlkLWlucHV0JylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMucGlja2VyKS5yZW1vdmVDbGFzcygnaXMtaW52YWxpZCcpXG4gICAgICAgICAgICAgICAgJCh0aGlzLmVsZW1lbnQpLnJlbW92ZUNsYXNzKCdpcy1pbnZhbGlkLWlucHV0JylcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZGF0ZSA9IERQR2xvYmFsLnBhcnNlRGF0ZShkYXRlLCB0aGlzLmZvcm1hdCwgdGhpcy5sYW5ndWFnZSk7ICBcblxuICAgICAgICAgICAgaWYgKGZyb21BcmdzIHx8IHRoaXMuaW5pdGlhbERhdGUgIT0gbnVsbCkgdGhpcy5zZXRWYWx1ZSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRlIDwgdGhpcy5zdGFydERhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlID0gbmV3IERhdGUodGhpcy5zdGFydERhdGUudmFsdWVPZigpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRlID4gdGhpcy5lbmREYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMuZW5kRGF0ZS52YWx1ZU9mKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlID0gbmV3IERhdGUodGhpcy5kYXRlLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZpbGwoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmaWxsRG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkb3dDbnQgPSB0aGlzLndlZWtTdGFydCxcbiAgICAgICAgICAgICAgICBodG1sID0gJzx0cj4nO1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FsZW5kYXJXZWVrcykge1xuICAgICAgICAgICAgICAgIHZhciBjZWxsID0gJzx0aCBjbGFzcz1cImN3XCI+Jm5ic3A7PC90aD4nO1xuICAgICAgICAgICAgICAgIGh0bWwgKz0gY2VsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci1kYXlzIHRoZWFkIHRyOmZpcnN0LWNoaWxkJykucHJlcGVuZChjZWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChkb3dDbnQgPCB0aGlzLndlZWtTdGFydCArIDcpIHtcbiAgICAgICAgICAgICAgICBodG1sICs9ICc8dGggY2xhc3M9XCJkb3dcIj4nICsgZGF0ZXNbdGhpcy5sYW5ndWFnZV0uZGF5c01pblsoZG93Q250KyspICUgN10gKyAnPC90aD4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbCArPSAnPC90cj4nO1xuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItZGF5cyB0aGVhZCcpLmFwcGVuZChodG1sKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmaWxsTW9udGhzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBodG1sID0gJycsXG4gICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IDEyKSB7XG4gICAgICAgICAgICAgICAgaHRtbCArPSAnPHNwYW4gY2xhc3M9XCJtb250aFwiPicgKyBkYXRlc1t0aGlzLmxhbmd1YWdlXS5tb250aHNTaG9ydFtpKytdICsgJzwvc3Bhbj4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItbW9udGhzIHRkJykuaHRtbChodG1sKTtcbiAgICAgICAgfSxcblxuICAgICAgICBmaWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGUgPT0gbnVsbCB8fCB0aGlzLnZpZXdEYXRlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUodGhpcy52aWV3RGF0ZS52YWx1ZU9mKCkpLFxuICAgICAgICAgICAgICAgIHllYXIgPSBkLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgbW9udGggPSBkLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICAgICAgZGF5TW9udGggPSBkLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgICAgICAgICBob3VycyA9IGQuZ2V0VVRDSG91cnMoKSxcbiAgICAgICAgICAgICAgICBtaW51dGVzID0gZC5nZXRVVENNaW51dGVzKCksXG4gICAgICAgICAgICAgICAgc3RhcnRZZWFyID0gdGhpcy5zdGFydERhdGUgIT09IC1JbmZpbml0eSA/IHRoaXMuc3RhcnREYXRlLmdldFVUQ0Z1bGxZZWFyKCkgOiAtSW5maW5pdHksXG4gICAgICAgICAgICAgICAgc3RhcnRNb250aCA9IHRoaXMuc3RhcnREYXRlICE9PSAtSW5maW5pdHkgPyB0aGlzLnN0YXJ0RGF0ZS5nZXRVVENNb250aCgpIDogLUluZmluaXR5LFxuICAgICAgICAgICAgICAgIGVuZFllYXIgPSB0aGlzLmVuZERhdGUgIT09IEluZmluaXR5ID8gdGhpcy5lbmREYXRlLmdldFVUQ0Z1bGxZZWFyKCkgOiBJbmZpbml0eSxcbiAgICAgICAgICAgICAgICBlbmRNb250aCA9IHRoaXMuZW5kRGF0ZSAhPT0gSW5maW5pdHkgPyB0aGlzLmVuZERhdGUuZ2V0VVRDTW9udGgoKSA6IEluZmluaXR5LFxuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlID0gdGhpcy5kYXRlICYmIFVUQ0RhdGUodGhpcy5kYXRlLmdldFVUQ0Z1bGxZZWFyKCksIHRoaXMuZGF0ZS5nZXRVVENNb250aCgpLCB0aGlzLmRhdGUuZ2V0VVRDRGF0ZSgpKS52YWx1ZU9mKCksXG4gICAgICAgICAgICAgICAgdG9kYXkgPSBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHRpdGxlRm9ybWF0ID0gZGF0ZXNbdGhpcy5sYW5ndWFnZV0udGl0bGVGb3JtYXQgfHwgZGF0ZXNbJ2VuJ10udGl0bGVGb3JtYXQ7XG4gICAgICAgICAgICAvLyB0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci1kYXlzIHRoZWFkIHRoLmRhdGUtc3dpdGNoJylcbiAgICAgICAgICAgIC8vIFx0XHRcdC50ZXh0KERQR2xvYmFsLmZvcm1hdERhdGUobmV3IFVUQ0RhdGUoeWVhciwgbW9udGgpLCB0aXRsZUZvcm1hdCwgdGhpcy5sYW5ndWFnZSkpO1xuXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci1kYXlzIHRoZWFkIHRoOmVxKDEpJylcbiAgICAgICAgICAgICAgICAudGV4dChkYXRlc1t0aGlzLmxhbmd1YWdlXS5tb250aHNbbW9udGhdICsgJyAnICsgeWVhcik7XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci1ob3VycyB0aGVhZCB0aDplcSgxKScpXG4gICAgICAgICAgICAgICAgLnRleHQoZGF5TW9udGggKyAnICcgKyBkYXRlc1t0aGlzLmxhbmd1YWdlXS5tb250aHNbbW9udGhdICsgJyAnICsgeWVhcik7XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci1taW51dGVzIHRoZWFkIHRoOmVxKDEpJylcbiAgICAgICAgICAgICAgICAudGV4dChkYXlNb250aCArICcgJyArIGRhdGVzW3RoaXMubGFuZ3VhZ2VdLm1vbnRoc1ttb250aF0gKyAnICcgKyB5ZWFyKTtcblxuXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCd0Zm9vdCB0aC50b2RheScpXG4gICAgICAgICAgICAgICAgLnRleHQoZGF0ZXNbdGhpcy5sYW5ndWFnZV0udG9kYXkpXG4gICAgICAgICAgICAgICAgLnRvZ2dsZSh0aGlzLnRvZGF5QnRuICE9PSBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU5hdkFycm93cygpO1xuICAgICAgICAgICAgdGhpcy5maWxsTW9udGhzKCk7XG4gICAgICAgICAgICB2YXIgcHJldk1vbnRoID0gVVRDRGF0ZSh5ZWFyLCBtb250aCAtIDEsIDI4LCAwLCAwLCAwLCAwKSxcbiAgICAgICAgICAgICAgICBkYXkgPSBEUEdsb2JhbC5nZXREYXlzSW5Nb250aChwcmV2TW9udGguZ2V0VVRDRnVsbFllYXIoKSwgcHJldk1vbnRoLmdldFVUQ01vbnRoKCkpO1xuICAgICAgICAgICAgcHJldk1vbnRoLnNldFVUQ0RhdGUoZGF5KTtcbiAgICAgICAgICAgIHByZXZNb250aC5zZXRVVENEYXRlKGRheSAtIChwcmV2TW9udGguZ2V0VVRDRGF5KCkgLSB0aGlzLndlZWtTdGFydCArIDcpICUgNyk7XG4gICAgICAgICAgICB2YXIgbmV4dE1vbnRoID0gbmV3IERhdGUocHJldk1vbnRoLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICBuZXh0TW9udGguc2V0VVRDRGF0ZShuZXh0TW9udGguZ2V0VVRDRGF0ZSgpICsgNDIpO1xuICAgICAgICAgICAgbmV4dE1vbnRoID0gbmV4dE1vbnRoLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIHZhciBodG1sID0gW107XG4gICAgICAgICAgICB2YXIgY2xzTmFtZTtcbiAgICAgICAgICAgIHdoaWxlIChwcmV2TW9udGgudmFsdWVPZigpIDwgbmV4dE1vbnRoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZNb250aC5nZXRVVENEYXkoKSA9PSB0aGlzLndlZWtTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2goJzx0cj4nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsZW5kYXJXZWVrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS90aW1yd29vZC9tb21lbnQvYmxvYi9tYXN0ZXIvbW9tZW50LmpzI0wxMjhcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gbmV3IERhdGUocHJldk1vbnRoLmdldFVUQ0Z1bGxZZWFyKCksIHByZXZNb250aC5nZXRVVENNb250aCgpLCBwcmV2TW9udGguZ2V0VVRDRGF0ZSgpIC0gcHJldk1vbnRoLmdldERheSgpICsgMTAgLSAodGhpcy53ZWVrU3RhcnQgJiYgdGhpcy53ZWVrU3RhcnQgJSA3IDwgNSAmJiA3KSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgMCwgNCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsV2VlayA9IH5+KChhIC0gYikgLyA4NjRlNSAvIDcgKyAxLjUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8dGQgY2xhc3M9XCJjd1wiPicgKyBjYWxXZWVrICsgJzwvdGQ+Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2xzTmFtZSA9ICcgJyArIHRoaXMub25SZW5kZXIocHJldk1vbnRoKSArICcgJztcbiAgICAgICAgICAgICAgICBpZiAocHJldk1vbnRoLmdldFVUQ0Z1bGxZZWFyKCkgPCB5ZWFyIHx8IChwcmV2TW9udGguZ2V0VVRDRnVsbFllYXIoKSA9PSB5ZWFyICYmIHByZXZNb250aC5nZXRVVENNb250aCgpIDwgbW9udGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsc05hbWUgKz0gJyBvbGQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJldk1vbnRoLmdldFVUQ0Z1bGxZZWFyKCkgPiB5ZWFyIHx8IChwcmV2TW9udGguZ2V0VVRDRnVsbFllYXIoKSA9PSB5ZWFyICYmIHByZXZNb250aC5nZXRVVENNb250aCgpID4gbW9udGgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsc05hbWUgKz0gJyBuZXcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBDb21wYXJlIGludGVybmFsIFVUQyBkYXRlIHdpdGggbG9jYWwgdG9kYXksIG5vdCBVVEMgdG9kYXlcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50b2RheUhpZ2hsaWdodCAmJlxuICAgICAgICAgICAgICAgICAgICBwcmV2TW9udGguZ2V0VVRDRnVsbFllYXIoKSA9PSB0b2RheS5nZXRGdWxsWWVhcigpICYmXG4gICAgICAgICAgICAgICAgICAgIHByZXZNb250aC5nZXRVVENNb250aCgpID09IHRvZGF5LmdldE1vbnRoKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJldk1vbnRoLmdldFVUQ0RhdGUoKSA9PSB0b2RheS5nZXREYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSArPSAnIHRvZGF5JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnREYXRlICYmIHByZXZNb250aC52YWx1ZU9mKCkgPT0gY3VycmVudERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSArPSAnIGFjdGl2ZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2TW9udGgudmFsdWVPZigpIDwgdGhpcy5zdGFydERhdGUgfHwgcHJldk1vbnRoLnZhbHVlT2YoKSA+IHRoaXMuZW5kRGF0ZSB8fFxuICAgICAgICAgICAgICAgICAgICAkLmluQXJyYXkocHJldk1vbnRoLmdldFVUQ0RheSgpLCB0aGlzLmRheXNPZldlZWtEaXNhYmxlZCkgIT09IC0xIHx8XG4gICAgICAgICAgICAgICAgICAgICQuaW5BcnJheShwcmV2TW9udGgudmFsdWVPZigpLCB0aGlzLmRhdGVzRGlzYWJsZWQpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjbHNOYW1lICs9ICcgZGlzYWJsZWQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBodG1sLnB1c2goJzx0ZCBjbGFzcz1cImRheScgKyBjbHNOYW1lICsgJ1wiPicgKyBwcmV2TW9udGguZ2V0VVRDRGF0ZSgpICsgJzwvdGQ+Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZNb250aC5nZXRVVENEYXkoKSA9PSB0aGlzLndlZWtFbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8L3RyPicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmV2TW9udGguc2V0VVRDRGF0ZShwcmV2TW9udGguZ2V0VVRDRGF0ZSgpICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcuZGF0ZXBpY2tlci1kYXlzIHRib2R5JykuZW1wdHkoKS5hcHBlbmQoaHRtbC5qb2luKCcnKSk7XG5cbiAgICAgICAgICAgIGh0bWwgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBhY3R1YWwgPSBVVENEYXRlKHllYXIsIG1vbnRoLCBkYXlNb250aCwgaSk7XG4gICAgICAgICAgICAgICAgY2xzTmFtZSA9ICcnO1xuICAgICAgICAgICAgICAgIC8vIFdlIHdhbnQgdGhlIHByZXZpb3VzIGhvdXIgZm9yIHRoZSBzdGFydERhdGVcbiAgICAgICAgICAgICAgICBpZiAoKGFjdHVhbC52YWx1ZU9mKCkgKyAzNjAwMDAwKSA8IHRoaXMuc3RhcnREYXRlIHx8IGFjdHVhbC52YWx1ZU9mKCkgPiB0aGlzLmVuZERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSArPSAnIGRpc2FibGVkJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzID09IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSArPSAnIGFjdGl2ZSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPHNwYW4gY2xhc3M9XCJob3VyJyArIGNsc05hbWUgKyAnXCI+JyArIGkgKyAnOjAwPC9zcGFuPicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItaG91cnMgdGQnKS5odG1sKGh0bWwuam9pbignJykpO1xuXG4gICAgICAgICAgICBodG1sID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDYwOyBpICs9IHRoaXMubWludXRlU3RlcCkge1xuICAgICAgICAgICAgICAgIHZhciBhY3R1YWwgPSBVVENEYXRlKHllYXIsIG1vbnRoLCBkYXlNb250aCwgaG91cnMsIGkpO1xuICAgICAgICAgICAgICAgIGNsc05hbWUgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoYWN0dWFsLnZhbHVlT2YoKSA8IHRoaXMuc3RhcnREYXRlIHx8IGFjdHVhbC52YWx1ZU9mKCkgPiB0aGlzLmVuZERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xzTmFtZSArPSAnIGRpc2FibGVkJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguZmxvb3IobWludXRlcyAvIHRoaXMubWludXRlU3RlcCkgPT0gTWF0aC5mbG9vcihpIC8gdGhpcy5taW51dGVTdGVwKSkge1xuICAgICAgICAgICAgICAgICAgICBjbHNOYW1lICs9ICcgYWN0aXZlJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8c3BhbiBjbGFzcz1cIm1pbnV0ZScgKyBjbHNOYW1lICsgJ1wiPicgKyBob3VycyArICc6JyArIChpIDwgMTAgPyAnMCcgKyBpIDogaSkgKyAnPC9zcGFuPicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLmRhdGVwaWNrZXItbWludXRlcyB0ZCcpLmh0bWwoaHRtbC5qb2luKCcnKSk7XG5cblxuICAgICAgICAgICAgdmFyIGN1cnJlbnRZZWFyID0gdGhpcy5kYXRlICYmIHRoaXMuZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgICAgdmFyIG1vbnRocyA9IHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLW1vbnRocycpXG4gICAgICAgICAgICAgICAgLmZpbmQoJ3RoOmVxKDEpJylcbiAgICAgICAgICAgICAgICAudGV4dCh5ZWFyKVxuICAgICAgICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgICAgICAgIC5maW5kKCdzcGFuJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRZZWFyICYmIGN1cnJlbnRZZWFyID09IHllYXIpIHtcbiAgICAgICAgICAgICAgICBtb250aHMuZXEodGhpcy5kYXRlLmdldFVUQ01vbnRoKCkpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh5ZWFyIDwgc3RhcnRZZWFyIHx8IHllYXIgPiBlbmRZZWFyKSB7XG4gICAgICAgICAgICAgICAgbW9udGhzLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHllYXIgPT0gc3RhcnRZZWFyKSB7XG4gICAgICAgICAgICAgICAgbW9udGhzLnNsaWNlKDAsIHN0YXJ0TW9udGgpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHllYXIgPT0gZW5kWWVhcikge1xuICAgICAgICAgICAgICAgIG1vbnRocy5zbGljZShlbmRNb250aCArIDEpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBodG1sID0gJyc7XG4gICAgICAgICAgICB5ZWFyID0gcGFyc2VJbnQoeWVhciAvIDEwLCAxMCkgKiAxMDtcbiAgICAgICAgICAgIHZhciB5ZWFyQ29udCA9IHRoaXMucGlja2VyLmZpbmQoJy5kYXRlcGlja2VyLXllYXJzJylcbiAgICAgICAgICAgICAgICAuZmluZCgndGg6ZXEoMSknKVxuICAgICAgICAgICAgICAgIC50ZXh0KHllYXIgKyAnLScgKyAoeWVhciArIDkpKVxuICAgICAgICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgICAgICAgIC5maW5kKCd0ZCcpO1xuICAgICAgICAgICAgeWVhciAtPSAxO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IC0xOyBpIDwgMTE7IGkrKykge1xuICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxzcGFuIGNsYXNzPVwieWVhcicgKyAoaSA9PSAtMSB8fCBpID09IDEwID8gJyBvbGQnIDogJycpICsgKGN1cnJlbnRZZWFyID09IHllYXIgPyAnIGFjdGl2ZScgOiAnJykgKyAoeWVhciA8IHN0YXJ0WWVhciB8fCB5ZWFyID4gZW5kWWVhciA/ICcgZGlzYWJsZWQnIDogJycpICsgJ1wiPicgKyB5ZWFyICsgJzwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgIHllYXIgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHllYXJDb250Lmh0bWwoaHRtbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlTmF2QXJyb3dzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUodGhpcy52aWV3RGF0ZSksXG4gICAgICAgICAgICAgICAgeWVhciA9IGQuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICBtb250aCA9IGQuZ2V0VVRDTW9udGgoKSxcbiAgICAgICAgICAgICAgICBkYXkgPSBkLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgICAgICAgICBob3VyID0gZC5nZXRVVENIb3VycygpO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnZpZXdNb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGFydERhdGUgIT09IC1JbmZpbml0eSAmJiB5ZWFyIDw9IHRoaXMuc3RhcnREYXRlLmdldFVUQ0Z1bGxZZWFyKCkgJiYgbW9udGggPD0gdGhpcy5zdGFydERhdGUuZ2V0VVRDTW9udGgoKSAmJiBkYXkgPD0gdGhpcy5zdGFydERhdGUuZ2V0VVRDRGF0ZSgpICYmIGhvdXIgPD0gdGhpcy5zdGFydERhdGUuZ2V0VVRDSG91cnMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUgIT09IEluZmluaXR5ICYmIHllYXIgPj0gdGhpcy5lbmREYXRlLmdldFVUQ0Z1bGxZZWFyKCkgJiYgbW9udGggPj0gdGhpcy5lbmREYXRlLmdldFVUQ01vbnRoKCkgJiYgZGF5ID49IHRoaXMuZW5kRGF0ZS5nZXRVVENEYXRlKCkgJiYgaG91ciA+PSB0aGlzLmVuZERhdGUuZ2V0VVRDSG91cnMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLm5leHQnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnREYXRlICE9PSAtSW5maW5pdHkgJiYgeWVhciA8PSB0aGlzLnN0YXJ0RGF0ZS5nZXRVVENGdWxsWWVhcigpICYmIG1vbnRoIDw9IHRoaXMuc3RhcnREYXRlLmdldFVUQ01vbnRoKCkgJiYgZGF5IDw9IHRoaXMuc3RhcnREYXRlLmdldFVUQ0RhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUgIT09IEluZmluaXR5ICYmIHllYXIgPj0gdGhpcy5lbmREYXRlLmdldFVUQ0Z1bGxZZWFyKCkgJiYgbW9udGggPj0gdGhpcy5lbmREYXRlLmdldFVUQ01vbnRoKCkgJiYgZGF5ID49IHRoaXMuZW5kRGF0ZS5nZXRVVENEYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcubmV4dCcpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0RGF0ZSAhPT0gLUluZmluaXR5ICYmIHllYXIgPD0gdGhpcy5zdGFydERhdGUuZ2V0VVRDRnVsbFllYXIoKSAmJiBtb250aCA8PSB0aGlzLnN0YXJ0RGF0ZS5nZXRVVENNb250aCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcucHJldicpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICd2aXNpYmxlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5kRGF0ZSAhPT0gSW5maW5pdHkgJiYgeWVhciA+PSB0aGlzLmVuZERhdGUuZ2V0VVRDRnVsbFllYXIoKSAmJiBtb250aCA+PSB0aGlzLmVuZERhdGUuZ2V0VVRDTW9udGgoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLm5leHQnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0RGF0ZSAhPT0gLUluZmluaXR5ICYmIHllYXIgPD0gdGhpcy5zdGFydERhdGUuZ2V0VVRDRnVsbFllYXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnLnByZXYnKS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5wcmV2JykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuZERhdGUgIT09IEluZmluaXR5ICYmIHllYXIgPj0gdGhpcy5lbmREYXRlLmdldFVUQ0Z1bGxZZWFyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyLmZpbmQoJy5uZXh0JykuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlci5maW5kKCcubmV4dCcpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjbGljazogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmhhc0NsYXNzKCdkYXRlcGlja2VyLWNsb3NlJykgfHwgJChlLnRhcmdldCkucGFyZW50KCkuaGFzQ2xhc3MoJ2RhdGVwaWNrZXItY2xvc2UnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJChlLnRhcmdldCkuY2xvc2VzdCgnc3BhbiwgdGQsIHRoJyk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0Lmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5pcygnLmRpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LnRyaWdnZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ291dE9mUmFuZ2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogdGhpcy52aWV3RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZTogdGhpcy5zdGFydERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlOiB0aGlzLmVuZERhdGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhcmdldFswXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RoJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGFyZ2V0WzBdLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGUtc3dpdGNoJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93TW9kZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJldic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXIgPSBEUEdsb2JhbC5tb2Rlc1t0aGlzLnZpZXdNb2RlXS5uYXZTdGVwICogKHRhcmdldFswXS5jbGFzc05hbWUgPT0gJ3ByZXYnID8gLTEgOiAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnZpZXdNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZSA9IHRoaXMubW92ZUhvdXIodGhpcy52aWV3RGF0ZSwgZGlyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlID0gdGhpcy5tb3ZlRGF0ZSh0aGlzLnZpZXdEYXRlLCBkaXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLnZpZXdEYXRlLCBkaXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0RhdGUgPSB0aGlzLm1vdmVZZWFyKHRoaXMudmlld0RhdGUsIGRpcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RvZGF5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlID0gVVRDRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlID0gdGhpcy5zdGFydFZpZXdNb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dNb2RlKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXREYXRlKGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGFuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0LmlzKCcuZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuaXMoJy5tb250aCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5taW5WaWV3ID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb250aCA9IHRhcmdldC5wYXJlbnQoKS5maW5kKCdzcGFuJykuaW5kZXgodGFyZ2V0KSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheSA9IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VycyA9IHRoaXMudmlld0RhdGUuZ2V0VVRDSG91cnMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RGF0ZShVVENEYXRlKHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCAwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlLnNldFVUQ0RhdGUoMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb250aCA9IHRhcmdldC5wYXJlbnQoKS5maW5kKCdzcGFuJykuaW5kZXgodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZS5zZXRVVENNb250aChtb250aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC50cmlnZ2VyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjaGFuZ2VNb250aCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiB0aGlzLnZpZXdEYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmlzKCcueWVhcicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5taW5WaWV3ID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQodGFyZ2V0LnRleHQoKSwgMTApIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb250aCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXkgPSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW51dGVzID0gdGhpcy52aWV3RGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gdGhpcy52aWV3RGF0ZS5nZXRVVENTZWNvbmRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldERhdGUoVVRDRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCBob3VycywgbWludXRlcywgc2Vjb25kcywgMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZS5zZXRVVENEYXRlKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KHRhcmdldC50ZXh0KCksIDEwKSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdEYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY2hhbmdlWWVhcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiB0aGlzLnZpZXdEYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmlzKCcuaG91cicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob3VycyA9IHBhcnNlSW50KHRhcmdldC50ZXh0KCksIDEwKSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHRoaXMudmlld0RhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gdGhpcy52aWV3RGF0ZS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5ID0gdGhpcy52aWV3RGF0ZS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW51dGVzID0gdGhpcy52aWV3RGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gdGhpcy52aWV3RGF0ZS5nZXRVVENTZWNvbmRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldERhdGUoVVRDRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCBob3VycywgbWludXRlcywgc2Vjb25kcywgMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmlzKCcubWludXRlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pbnV0ZXMgPSBwYXJzZUludCh0YXJnZXQudGV4dCgpLnN1YnN0cih0YXJnZXQudGV4dCgpLmluZGV4T2YoJzonKSArIDEpLCAxMCkgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb250aCA9IHRoaXMudmlld0RhdGUuZ2V0VVRDTW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheSA9IHRoaXMudmlld0RhdGUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gdGhpcy52aWV3RGF0ZS5nZXRVVENTZWNvbmRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldERhdGUoVVRDRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCBob3VycywgbWludXRlcywgc2Vjb25kcywgMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3TW9kZSAhPSAwKSB7XG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGRWaWV3TW9kZSA9IHRoaXMudmlld01vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd01vZGUoLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFZpZXdNb2RlID09IHRoaXMudmlld01vZGUgJiYgdGhpcy5hdXRvY2xvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dG9jbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndGQnOlxuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC5pcygnLmRheScpICYmICF0YXJnZXQuaXMoJy5kaXNhYmxlZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRheSA9IHBhcnNlSW50KHRhcmdldC50ZXh0KCksIDEwKSB8fCAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gdGhpcy52aWV3RGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb250aCA9IHRoaXMudmlld0RhdGUuZ2V0VVRDTW9udGgoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSB0aGlzLnZpZXdEYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IHRoaXMudmlld0RhdGUuZ2V0VVRDU2Vjb25kcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuaXMoJy5vbGQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9udGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gMTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ZWFyIC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb250aCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuaXMoJy5uZXcnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9udGggPT0gMTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoICs9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RGF0ZShVVENEYXRlKHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCAwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2xkVmlld01vZGUgPSB0aGlzLnZpZXdNb2RlO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd01vZGUoLTEpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFZpZXdNb2RlID09IHRoaXMudmlld01vZGUgJiYgdGhpcy5hdXRvY2xvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfc2V0RGF0ZTogZnVuY3Rpb24oZGF0ZSwgd2hpY2gpIHtcblxuICAgICAgICAgICAgaWYgKCF3aGljaCB8fCB3aGljaCA9PSAnZGF0ZScpXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gZGF0ZTtcbiAgICAgICAgICAgIGlmICghd2hpY2ggfHwgd2hpY2ggPT0gJ3ZpZXcnKVxuICAgICAgICAgICAgICAgIHRoaXMudmlld0RhdGUgPSBkYXRlO1xuICAgICAgICAgICAgdGhpcy5maWxsKCk7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKCk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcih7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2NoYW5nZURhdGUnLFxuICAgICAgICAgICAgICAgIGRhdGU6IHRoaXMuZGF0ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgZWxlbWVudDtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQuZmluZCgnaW5wdXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdXRvY2xvc2UgJiYgKCF3aGljaCB8fCB3aGljaCA9PSAnZGF0ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtb3ZlSG91cjogZnVuY3Rpb24oZGF0ZSwgZGlyKSB7XG4gICAgICAgICAgICBpZiAoIWRpcikgcmV0dXJuIGRhdGU7XG4gICAgICAgICAgICB2YXIgbmV3X2RhdGUgPSBuZXcgRGF0ZShkYXRlLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICBkaXIgPSBkaXIgPiAwID8gMSA6IC0xO1xuICAgICAgICAgICAgbmV3X2RhdGUuc2V0VVRDSG91cnMobmV3X2RhdGUuZ2V0VVRDSG91cnMoKSArIGRpcik7XG4gICAgICAgICAgICByZXR1cm4gbmV3X2RhdGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW92ZURhdGU6IGZ1bmN0aW9uKGRhdGUsIGRpcikge1xuICAgICAgICAgICAgaWYgKCFkaXIpIHJldHVybiBkYXRlO1xuICAgICAgICAgICAgdmFyIG5ld19kYXRlID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpO1xuICAgICAgICAgICAgZGlyID0gZGlyID4gMCA/IDEgOiAtMTtcbiAgICAgICAgICAgIG5ld19kYXRlLnNldFVUQ0RhdGUobmV3X2RhdGUuZ2V0VVRDRGF0ZSgpICsgZGlyKTtcbiAgICAgICAgICAgIHJldHVybiBuZXdfZGF0ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBtb3ZlTW9udGg6IGZ1bmN0aW9uKGRhdGUsIGRpcikge1xuICAgICAgICAgICAgaWYgKCFkaXIpIHJldHVybiBkYXRlO1xuICAgICAgICAgICAgdmFyIG5ld19kYXRlID0gbmV3IERhdGUoZGF0ZS52YWx1ZU9mKCkpLFxuICAgICAgICAgICAgICAgIGRheSA9IG5ld19kYXRlLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgICAgICAgICBtb250aCA9IG5ld19kYXRlLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICAgICAgbWFnID0gTWF0aC5hYnMoZGlyKSxcbiAgICAgICAgICAgICAgICBuZXdfbW9udGgsIHRlc3Q7XG4gICAgICAgICAgICBkaXIgPSBkaXIgPiAwID8gMSA6IC0xO1xuICAgICAgICAgICAgaWYgKG1hZyA9PSAxKSB7XG4gICAgICAgICAgICAgICAgdGVzdCA9IGRpciA9PSAtMVxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBnb2luZyBiYWNrIG9uZSBtb250aCwgbWFrZSBzdXJlIG1vbnRoIGlzIG5vdCBjdXJyZW50IG1vbnRoXG4gICAgICAgICAgICAgICAgICAgIC8vIChlZywgTWFyIDMxIC0+IEZlYiAzMSA9PSBGZWIgMjgsIG5vdCBNYXIgMDIpXG4gICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKSA9PSBtb250aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBnb2luZyBmb3J3YXJkIG9uZSBtb250aCwgbWFrZSBzdXJlIG1vbnRoIGlzIGFzIGV4cGVjdGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIChlZywgSmFuIDMxIC0+IEZlYiAzMSA9PSBGZWIgMjgsIG5vdCBNYXIgMDIpXG4gICAgICAgICAgICAgICAgICAgIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKSAhPSBuZXdfbW9udGg7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbmV3X21vbnRoID0gbW9udGggKyBkaXI7XG4gICAgICAgICAgICAgICAgbmV3X2RhdGUuc2V0VVRDTW9udGgobmV3X21vbnRoKTtcbiAgICAgICAgICAgICAgICAvLyBEZWMgLT4gSmFuICgxMikgb3IgSmFuIC0+IERlYyAoLTEpIC0tIGxpbWl0IGV4cGVjdGVkIGRhdGUgdG8gMC0xMVxuICAgICAgICAgICAgICAgIGlmIChuZXdfbW9udGggPCAwIHx8IG5ld19tb250aCA+IDExKVxuICAgICAgICAgICAgICAgICAgICBuZXdfbW9udGggPSAobmV3X21vbnRoICsgMTIpICUgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEZvciBtYWduaXR1ZGVzID4xLCBtb3ZlIG9uZSBtb250aCBhdCBhIHRpbWUuLi5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hZzsgaSsrKVxuICAgICAgICAgICAgICAgIC8vIC4uLndoaWNoIG1pZ2h0IGRlY3JlYXNlIHRoZSBkYXkgKGVnLCBKYW4gMzEgdG8gRmViIDI4LCBldGMpLi4uXG4gICAgICAgICAgICAgICAgICAgIG5ld19kYXRlID0gdGhpcy5tb3ZlTW9udGgobmV3X2RhdGUsIGRpcik7XG4gICAgICAgICAgICAgICAgLy8gLi4udGhlbiByZXNldCB0aGUgZGF5LCBrZWVwaW5nIGl0IGluIHRoZSBuZXcgbW9udGhcbiAgICAgICAgICAgICAgICBuZXdfbW9udGggPSBuZXdfZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgICAgIG5ld19kYXRlLnNldFVUQ0RhdGUoZGF5KTtcbiAgICAgICAgICAgICAgICB0ZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdfbW9udGggIT0gbmV3X2RhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ29tbW9uIGRhdGUtcmVzZXR0aW5nIGxvb3AgLS0gaWYgZGF0ZSBpcyBiZXlvbmQgZW5kIG9mIG1vbnRoLCBtYWtlIGl0XG4gICAgICAgICAgICAvLyBlbmQgb2YgbW9udGhcbiAgICAgICAgICAgIHdoaWxlICh0ZXN0KCkpIHtcbiAgICAgICAgICAgICAgICBuZXdfZGF0ZS5zZXRVVENEYXRlKC0tZGF5KTtcbiAgICAgICAgICAgICAgICBuZXdfZGF0ZS5zZXRVVENNb250aChuZXdfbW9udGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld19kYXRlO1xuICAgICAgICB9LFxuXG4gICAgICAgIG1vdmVZZWFyOiBmdW5jdGlvbihkYXRlLCBkaXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vdmVNb250aChkYXRlLCBkaXIgKiAxMik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0ZVdpdGhpblJhbmdlOiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZSA+PSB0aGlzLnN0YXJ0RGF0ZSAmJiBkYXRlIDw9IHRoaXMuZW5kRGF0ZTtcbiAgICAgICAgfSxcblxuICAgICAgICBrZXlkb3duOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMua2V5Ym9hcmROYXZpZ2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5waWNrZXIuaXMoJzpub3QoOnZpc2libGUpJykpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09IDI3KSAvLyBhbGxvdyBlc2NhcGUgdG8gaGlkZSBhbmQgcmUtc2hvdyBwaWNrZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRhdGVDaGFuZ2VkID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgZGlyLCBkYXksIG1vbnRoLFxuICAgICAgICAgICAgICAgIG5ld0RhdGUsIG5ld1ZpZXdEYXRlO1xuICAgICAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI3OiAvLyBlc2NhcGVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzNzogLy8gbGVmdFxuICAgICAgICAgICAgICAgIGNhc2UgMzk6IC8vIHJpZ2h0XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5rZXlib2FyZE5hdmlnYXRpb24pIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkaXIgPSBlLmtleUNvZGUgPT0gMzcgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGUgPSB0aGlzLm1vdmVZZWFyKHRoaXMuZGF0ZSwgZGlyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlWWVhcih0aGlzLnZpZXdEYXRlLCBkaXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLmRhdGUsIGRpcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWaWV3RGF0ZSA9IHRoaXMubW92ZU1vbnRoKHRoaXMudmlld0RhdGUsIGRpcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEYXRlID0gbmV3IERhdGUodGhpcy5kYXRlLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEYXRlLnNldFVUQ0RhdGUodGhpcy5kYXRlLmdldFVUQ0RhdGUoKSArIGRpcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWaWV3RGF0ZSA9IG5ldyBEYXRlKHRoaXMudmlld0RhdGUudmFsdWVPZigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZpZXdEYXRlLnNldFVUQ0RhdGUodGhpcy52aWV3RGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGVXaXRoaW5SYW5nZShuZXdEYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gbmV3RGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0RhdGUgPSBuZXdWaWV3RGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzODogLy8gdXBcbiAgICAgICAgICAgICAgICBjYXNlIDQwOiAvLyBkb3duXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5rZXlib2FyZE5hdmlnYXRpb24pIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkaXIgPSBlLmtleUNvZGUgPT0gMzggPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGUgPSB0aGlzLm1vdmVZZWFyKHRoaXMuZGF0ZSwgZGlyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZpZXdEYXRlID0gdGhpcy5tb3ZlWWVhcih0aGlzLnZpZXdEYXRlLCBkaXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RhdGUgPSB0aGlzLm1vdmVNb250aCh0aGlzLmRhdGUsIGRpcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWaWV3RGF0ZSA9IHRoaXMubW92ZU1vbnRoKHRoaXMudmlld0RhdGUsIGRpcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEYXRlID0gbmV3IERhdGUodGhpcy5kYXRlLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdEYXRlLnNldFVUQ0RhdGUodGhpcy5kYXRlLmdldFVUQ0RhdGUoKSArIGRpciAqIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Vmlld0RhdGUgPSBuZXcgRGF0ZSh0aGlzLnZpZXdEYXRlLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWaWV3RGF0ZS5zZXRVVENEYXRlKHRoaXMudmlld0RhdGUuZ2V0VVRDRGF0ZSgpICsgZGlyICogNyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0ZVdpdGhpblJhbmdlKG5ld0RhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGUgPSBuZXdEYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3RGF0ZSA9IG5ld1ZpZXdEYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEzOiAvLyBlbnRlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6IC8vIHRhYlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQudHJpZ2dlcih7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjaGFuZ2VEYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZTogdGhpcy5kYXRlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IHRoaXMuZWxlbWVudC5maW5kKCdpbnB1dCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNoYW5nZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzaG93TW9kZTogZnVuY3Rpb24oZGlyKSB7XG5cbiAgICAgICAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3Vmlld01vZGUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihEUEdsb2JhbC5tb2Rlcy5sZW5ndGggLSAxLCB0aGlzLnZpZXdNb2RlICsgZGlyKSk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZpZXdNb2RlID49IHRoaXMubWluVmlldyAmJiBuZXdWaWV3TW9kZSA8PSB0aGlzLm1heFZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3TW9kZSA9IG5ld1ZpZXdNb2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBcdHZpdGFsZXRzOiBmaXhpbmcgYnVnIG9mIHZlcnkgc3BlY2lhbCBjb25kaXRpb25zOlxuICAgICAgICAgICAgXHRqcXVlcnkgMS43LjEgKyB3ZWJraXQgKyBzaG93IGlubGluZSBkYXRlcGlja2VyIGluIGJvb3RzdHJhcCBwb3BvdmVyLlxuICAgICAgICAgICAgXHRNZXRob2Qgc2hvdygpIGRvZXMgbm90IHNldCBkaXNwbGF5IGNzcyBjb3JyZWN0bHkgYW5kIGRhdGVwaWNrZXIgaXMgbm90IHNob3duLlxuICAgICAgICAgICAgXHRDaGFuZ2VkIHRvIC5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKSBzb2x2ZSB0aGUgcHJvYmxlbS5cbiAgICAgICAgICAgIFx0U2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRhbGV0cy94LWVkaXRhYmxlL2lzc3Vlcy8zN1xuXG4gICAgICAgICAgICBcdEluIGpxdWVyeSAxLjcuMisgZXZlcnl0aGluZyB3b3JrcyBmaW5lLlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vdGhpcy5waWNrZXIuZmluZCgnPmRpdicpLmhpZGUoKS5maWx0ZXIoJy5kYXRlcGlja2VyLScrRFBHbG9iYWwubW9kZXNbdGhpcy52aWV3TW9kZV0uY2xzTmFtZSkuc2hvdygpO1xuICAgICAgICAgICAgdGhpcy5waWNrZXIuZmluZCgnPmRpdicpLmhpZGUoKS5maWx0ZXIoJy5kYXRlcGlja2VyLScgKyBEUEdsb2JhbC5tb2Rlc1t0aGlzLnZpZXdNb2RlXS5jbHNOYW1lKS5jc3MoJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTmF2QXJyb3dzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXREYXRlKG51bGwsICdkYXRlJyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5mZGF0ZXBpY2tlciA9IGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICB2YXIgYXJncyA9IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIGFyZ3Muc2hpZnQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgZGF0YSA9ICR0aGlzLmRhdGEoJ2RhdGVwaWNrZXInKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb247XG4gICAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdkYXRlcGlja2VyJywgKGRhdGEgPSBuZXcgRGF0ZXBpY2tlcih0aGlzLCAkLmV4dGVuZCh7fSwgJC5mbi5mZGF0ZXBpY2tlci5kZWZhdWx0cywgb3B0aW9ucykpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZGF0YVtvcHRpb25dID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBkYXRhW29wdGlvbl0uYXBwbHkoZGF0YSwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkLmZuLmZkYXRlcGlja2VyLmRlZmF1bHRzID0ge1xuICAgICAgICBvblJlbmRlcjogZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAkLmZuLmZkYXRlcGlja2VyLkNvbnN0cnVjdG9yID0gRGF0ZXBpY2tlcjtcbiAgICB2YXIgZGF0ZXMgPSAkLmZuLmZkYXRlcGlja2VyLmRhdGVzID0ge1xuICAgICAgICAnZW4nOiB7XG4gICAgICAgICAgICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiLCBcIlN1bmRheVwiXSxcbiAgICAgICAgICAgIGRheXNTaG9ydDogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCIsIFwiU3VuXCJdLFxuICAgICAgICAgICAgZGF5c01pbjogW1wiU3VcIiwgXCJNb1wiLCBcIlR1XCIsIFwiV2VcIiwgXCJUaFwiLCBcIkZyXCIsIFwiU2FcIiwgXCJTdVwiXSxcbiAgICAgICAgICAgIG1vbnRoczogW1wiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIl0sXG4gICAgICAgICAgICBtb250aHNTaG9ydDogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdLFxuICAgICAgICAgICAgdG9kYXk6IFwiVG9kYXlcIixcbiAgICAgICAgICAgIHRpdGxlRm9ybWF0OiBcIk1NIHl5eXlcIlxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBEUEdsb2JhbCA9IHtcbiAgICAgICAgbW9kZXM6IFt7XG4gICAgICAgICAgICBjbHNOYW1lOiAnbWludXRlcycsXG4gICAgICAgICAgICBuYXZGbmM6ICdIb3VycycsXG4gICAgICAgICAgICBuYXZTdGVwOiAxXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGNsc05hbWU6ICdob3VycycsXG4gICAgICAgICAgICBuYXZGbmM6ICdEYXRlJyxcbiAgICAgICAgICAgIG5hdlN0ZXA6IDFcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgY2xzTmFtZTogJ2RheXMnLFxuICAgICAgICAgICAgbmF2Rm5jOiAnTW9udGgnLFxuICAgICAgICAgICAgbmF2U3RlcDogMVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBjbHNOYW1lOiAnbW9udGhzJyxcbiAgICAgICAgICAgIG5hdkZuYzogJ0Z1bGxZZWFyJyxcbiAgICAgICAgICAgIG5hdlN0ZXA6IDFcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgY2xzTmFtZTogJ3llYXJzJyxcbiAgICAgICAgICAgIG5hdkZuYzogJ0Z1bGxZZWFyJyxcbiAgICAgICAgICAgIG5hdlN0ZXA6IDEwXG4gICAgICAgIH1dLFxuICAgICAgICBpc0xlYXBZZWFyOiBmdW5jdGlvbih5ZWFyKSB7XG4gICAgICAgICAgICByZXR1cm4gKCgoeWVhciAlIDQgPT09IDApICYmICh5ZWFyICUgMTAwICE9PSAwKSkgfHwgKHllYXIgJSA0MDAgPT09IDApKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0RGF5c0luTW9udGg6IGZ1bmN0aW9uKHllYXIsIG1vbnRoKSB7XG4gICAgICAgICAgICByZXR1cm4gWzMxLCAoRFBHbG9iYWwuaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV1bbW9udGhdO1xuICAgICAgICB9LFxuICAgICAgICB2YWxpZFBhcnRzOiAvaGg/fGlpP3xzcz98ZGQ/fG1tP3xNTT98eXkoPzp5eSk/L2csXG4gICAgICAgIG5vbnB1bmN0dWF0aW9uOiAvW14gLVxcLzotQFxcW1xcdTM0MDAtXFx1OWZmZi1gey1+XFx0XFxuXFxyXSsvZyxcbiAgICAgICAgcGFyc2VGb3JtYXQ6IGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICAgICAgLy8gSUUgdHJlYXRzIFxcMCBhcyBhIHN0cmluZyBlbmQgaW4gaW5wdXRzICh0cnVuY2F0aW5nIHRoZSB2YWx1ZSksXG4gICAgICAgICAgICAvLyBzbyBpdCdzIGEgYmFkIGZvcm1hdCBkZWxpbWl0ZXIsIGFueXdheVxuICAgICAgICAgICAgdmFyIHNlcGFyYXRvcnMgPSBmb3JtYXQucmVwbGFjZSh0aGlzLnZhbGlkUGFydHMsICdcXDAnKS5zcGxpdCgnXFwwJyksXG4gICAgICAgICAgICAgICAgcGFydHMgPSBmb3JtYXQubWF0Y2godGhpcy52YWxpZFBhcnRzKTtcbiAgICAgICAgICAgIGlmICghc2VwYXJhdG9ycyB8fCAhc2VwYXJhdG9ycy5sZW5ndGggfHwgIXBhcnRzIHx8IHBhcnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZGF0ZSBmb3JtYXQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5mb3JtYXRUZXh0ID0gZm9ybWF0O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3JzOiBzZXBhcmF0b3JzLFxuICAgICAgICAgICAgICAgIHBhcnRzOiBwYXJ0c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgcGFyc2VEYXRlOiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIGxhbmd1YWdlKSB7XG4gICAgICAgICAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHJldHVybiBuZXcgRGF0ZShkYXRlLnZhbHVlT2YoKSAtIGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAqIDYwMDAwKTtcbiAgICAgICAgICAgIGlmICgvXlxcZHs0fVxcLVxcZHsxLDJ9XFwtXFxkezEsMn0kLy50ZXN0KGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdGhpcy5wYXJzZUZvcm1hdCgneXl5eS1tbS1kZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKC9eXFxkezR9XFwtXFxkezEsMn1cXC1cXGR7MSwyfVtUIF1cXGR7MSwyfVxcOlxcZHsxLDJ9JC8udGVzdChkYXRlKSkge1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHRoaXMucGFyc2VGb3JtYXQoJ3l5eXktbW0tZGQgaGg6aWknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgvXlxcZHs0fVxcLVxcZHsxLDJ9XFwtXFxkezEsMn1bVCBdXFxkezEsMn1cXDpcXGR7MSwyfVxcOlxcZHsxLDJ9W1pdezAsMX0kLy50ZXN0KGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdGhpcy5wYXJzZUZvcm1hdCgneXl5eS1tbS1kZCBoaDppaTpzcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKC9eWy0rXVxcZCtbZG13eV0oW1xccyxdK1stK11cXGQrW2Rtd3ldKSokLy50ZXN0KGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnRfcmUgPSAvKFstK11cXGQrKShbZG13eV0pLyxcbiAgICAgICAgICAgICAgICAgICAgcGFydHMgPSBkYXRlLm1hdGNoKC8oWy0rXVxcZCspKFtkbXd5XSkvZyksXG4gICAgICAgICAgICAgICAgICAgIHBhcnQsIGRpcjtcbiAgICAgICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQgPSBwYXJ0X3JlLmV4ZWMocGFydHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBkaXIgPSBwYXJzZUludChwYXJ0WzFdKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChwYXJ0WzJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IERhdGV0aW1lcGlja2VyLnByb3RvdHlwZS5tb3ZlTW9udGguY2FsbChEYXRldGltZXBpY2tlci5wcm90b3R5cGUsIGRhdGUsIGRpcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaXIgKiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSBEYXRldGltZXBpY2tlci5wcm90b3R5cGUubW92ZVllYXIuY2FsbChEYXRldGltZXBpY2tlci5wcm90b3R5cGUsIGRhdGUsIGRpcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFVUQ0RhdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCksIGRhdGUuZ2V0VVRDRGF0ZSgpLCBkYXRlLmdldFVUQ0hvdXJzKCksIGRhdGUuZ2V0VVRDTWludXRlcygpLCBkYXRlLmdldFVUQ1NlY29uZHMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGFydHMgPSBkYXRlICYmIGRhdGUubWF0Y2godGhpcy5ub25wdW5jdHVhdGlvbikgfHwgW10sXG4gICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgcGFyc2VkID0ge30sXG4gICAgICAgICAgICAgICAgc2V0dGVyc19vcmRlciA9IFsnaGgnLCAnaCcsICdpaScsICdpJywgJ3NzJywgJ3MnLCAneXl5eScsICd5eScsICdNJywgJ01NJywgJ20nLCAnbW0nLCAnZCcsICdkZCddLFxuICAgICAgICAgICAgICAgIHNldHRlcnNfbWFwID0ge1xuICAgICAgICAgICAgICAgICAgICBoaDogZnVuY3Rpb24oZCwgdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDSG91cnModik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGg6IGZ1bmN0aW9uKGQsIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNldFVUQ0hvdXJzKHYpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBpaTogZnVuY3Rpb24oZCwgdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDTWludXRlcyh2KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaTogZnVuY3Rpb24oZCwgdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDTWludXRlcyh2KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3M6IGZ1bmN0aW9uKGQsIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNldFVUQ1NlY29uZHModik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHM6IGZ1bmN0aW9uKGQsIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNldFVUQ1NlY29uZHModik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHl5eXk6IGZ1bmN0aW9uKGQsIHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLnNldFVUQ0Z1bGxZZWFyKHYpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB5eTogZnVuY3Rpb24oZCwgdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuc2V0VVRDRnVsbFllYXIoMjAwMCArIHYpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtOiBmdW5jdGlvbihkLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2IC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodiA8IDApIHYgKz0gMTI7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ICU9IDEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5zZXRVVENNb250aCh2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChkLmdldFVUQ01vbnRoKCkgIT0gdilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNldFVUQ0RhdGUoZC5nZXRVVENEYXRlKCkgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkOiBmdW5jdGlvbihkLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5zZXRVVENEYXRlKHYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB2YWwsIGZpbHRlcmVkLCBwYXJ0O1xuICAgICAgICAgICAgc2V0dGVyc19tYXBbJ00nXSA9IHNldHRlcnNfbWFwWydNTSddID0gc2V0dGVyc19tYXBbJ21tJ10gPSBzZXR0ZXJzX21hcFsnbSddO1xuICAgICAgICAgICAgc2V0dGVyc19tYXBbJ2RkJ10gPSBzZXR0ZXJzX21hcFsnZCddO1xuICAgICAgICAgICAgZGF0ZSA9IFVUQ0RhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCAwLCAwLCAwKTsgLy9kYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoID09IGZvcm1hdC5wYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY250ID0gZm9ybWF0LnBhcnRzLmxlbmd0aDsgaSA8IGNudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IHBhcnNlSW50KHBhcnRzW2ldLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQgPSBmb3JtYXQucGFydHNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTih2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHBhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkID0gJChkYXRlc1tsYW5ndWFnZV0ubW9udGhzKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IHRoaXMuc2xpY2UoMCwgcGFydHNbaV0ubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gcGFydHNbaV0uc2xpY2UoMCwgbS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0gPT0gcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9ICQuaW5BcnJheShmaWx0ZXJlZFswXSwgZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRocykgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQgPSAkKGRhdGVzW2xhbmd1YWdlXS5tb250aHNTaG9ydCkuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSB0aGlzLnNsaWNlKDAsIHBhcnRzW2ldLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHBhcnRzW2ldLnNsaWNlKDAsIG0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtID09IHA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSAkLmluQXJyYXkoZmlsdGVyZWRbMF0sIGRhdGVzW2xhbmd1YWdlXS5tb250aHNTaG9ydCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXJzZWRbcGFydF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBzOyBpIDwgc2V0dGVyc19vcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBzID0gc2V0dGVyc19vcmRlcltpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgaW4gcGFyc2VkICYmICFpc05hTihwYXJzZWRbc10pKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dGVyc19tYXBbc10oZGF0ZSwgcGFyc2VkW3NdKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9LFxuICAgICAgICBmb3JtYXREYXRlOiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIGxhbmd1YWdlKSB7XG4gICAgICAgICAgICBpZiAoZGF0ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbCA9IHtcbiAgICAgICAgICAgICAgICBoOiBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICAgICAgICAgICAgaTogZGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICAgICAgICAgICAgczogZGF0ZS5nZXRVVENTZWNvbmRzKCksXG4gICAgICAgICAgICAgICAgZDogZGF0ZS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICAgICAgbTogZGF0ZS5nZXRVVENNb250aCgpICsgMSxcbiAgICAgICAgICAgICAgICBNOiBkYXRlc1tsYW5ndWFnZV0ubW9udGhzU2hvcnRbZGF0ZS5nZXRVVENNb250aCgpXSxcbiAgICAgICAgICAgICAgICBNTTogZGF0ZXNbbGFuZ3VhZ2VdLm1vbnRoc1tkYXRlLmdldFVUQ01vbnRoKCldLFxuICAgICAgICAgICAgICAgIHl5OiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXG4gICAgICAgICAgICAgICAgeXl5eTogZGF0ZS5nZXRVVENGdWxsWWVhcigpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFsLmhoID0gKHZhbC5oIDwgMTAgPyAnMCcgOiAnJykgKyB2YWwuaDtcbiAgICAgICAgICAgIHZhbC5paSA9ICh2YWwuaSA8IDEwID8gJzAnIDogJycpICsgdmFsLmk7XG4gICAgICAgICAgICB2YWwuc3MgPSAodmFsLnMgPCAxMCA/ICcwJyA6ICcnKSArIHZhbC5zO1xuICAgICAgICAgICAgdmFsLmRkID0gKHZhbC5kIDwgMTAgPyAnMCcgOiAnJykgKyB2YWwuZDtcbiAgICAgICAgICAgIHZhbC5tbSA9ICh2YWwubSA8IDEwID8gJzAnIDogJycpICsgdmFsLm07XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IFtdLFxuICAgICAgICAgICAgICAgIHNlcHMgPSAkLmV4dGVuZChbXSwgZm9ybWF0LnNlcGFyYXRvcnMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNudCA9IGZvcm1hdC5wYXJ0cy5sZW5ndGg7IGkgPCBjbnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChzZXBzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgZGF0ZS5wdXNoKHNlcHMuc2hpZnQoKSlcbiAgICAgICAgICAgICAgICBkYXRlLnB1c2godmFsW2Zvcm1hdC5wYXJ0c1tpXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGUuam9pbignJyk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRWaWV3TW9kZTogZnVuY3Rpb24odmlld01vZGUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodmlld01vZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnZGVjYWRlJzpcbiAgICAgICAgICAgICAgICAgICAgdmlld01vZGUgPSA0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgICAgIHZpZXdNb2RlID0gMztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICAgICAgdmlld01vZGUgPSAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgICAgICAgICAgdmlld01vZGUgPSAxO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgICAgIHZpZXdNb2RlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB2aWV3TW9kZTtcbiAgICAgICAgfSxcbiAgICAgICAgaGVhZFRlbXBsYXRlOiBmdW5jdGlvbihsZWZ0QXJyb3csIHJpZ2h0QXJyb3cpIHtyZXR1cm4oJzx0aGVhZD4nICtcbiAgICAgICAgICAgICc8dHI+JyArXG4gICAgICAgICAgICAnPHRoIGNsYXNzPVwicHJldlwiPicgKyBsZWZ0QXJyb3cgKyAnPC90aD4nICtcbiAgICAgICAgICAgICc8dGggY29sc3Bhbj1cIjVcIiBjbGFzcz1cImRhdGUtc3dpdGNoXCI+PC90aD4nICtcbiAgICAgICAgICAgICc8dGggY2xhc3M9XCJuZXh0XCI+JyArIHJpZ2h0QXJyb3cgKyAnPC90aD4nICtcbiAgICAgICAgICAgICc8L3RyPicgK1xuICAgICAgICAgICAgJzwvdGhlYWQ+Jyl9LFxuICAgICAgICBjb250VGVtcGxhdGU6ICc8dGJvZHk+PHRyPjx0ZCBjb2xzcGFuPVwiN1wiPjwvdGQ+PC90cj48L3Rib2R5PicsXG4gICAgICAgIGZvb3RUZW1wbGF0ZTogJzx0Zm9vdD48dHI+PHRoIGNvbHNwYW49XCI3XCIgY2xhc3M9XCJ0b2RheVwiPjwvdGg+PC90cj48L3Rmb290PidcbiAgICB9O1xuICAgIERQR2xvYmFsLnRlbXBsYXRlID0gZnVuY3Rpb24obGVmdEFycm93LCByaWdodEFycm93LCBjbG9zZUljb24pIHtyZXR1cm4oICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlclwiPicgK1xuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItbWludXRlc1wiPicgK1xuICAgICAgICAnPHRhYmxlIGNsYXNzPVwiIHRhYmxlLWNvbmRlbnNlZFwiPicgK1xuICAgICAgICBEUEdsb2JhbC5oZWFkVGVtcGxhdGUobGVmdEFycm93LCByaWdodEFycm93KSArXG4gICAgICAgIERQR2xvYmFsLmNvbnRUZW1wbGF0ZSArXG4gICAgICAgIERQR2xvYmFsLmZvb3RUZW1wbGF0ZSArXG4gICAgICAgICc8L3RhYmxlPicgK1xuICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci1ob3Vyc1wiPicgK1xuICAgICAgICAnPHRhYmxlIGNsYXNzPVwiIHRhYmxlLWNvbmRlbnNlZFwiPicgK1xuICAgICAgICBEUEdsb2JhbC5oZWFkVGVtcGxhdGUobGVmdEFycm93LCByaWdodEFycm93KSArXG4gICAgICAgIERQR2xvYmFsLmNvbnRUZW1wbGF0ZSArXG4gICAgICAgIERQR2xvYmFsLmZvb3RUZW1wbGF0ZSArXG4gICAgICAgICc8L3RhYmxlPicgK1xuICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci1kYXlzXCI+JyArXG4gICAgICAgICc8dGFibGUgY2xhc3M9XCIgdGFibGUtY29uZGVuc2VkXCI+JyArXG4gICAgICAgIERQR2xvYmFsLmhlYWRUZW1wbGF0ZShsZWZ0QXJyb3csIHJpZ2h0QXJyb3cpICtcbiAgICAgICAgJzx0Ym9keT48L3Rib2R5PicgK1xuICAgICAgICBEUEdsb2JhbC5mb290VGVtcGxhdGUgK1xuICAgICAgICAnPC90YWJsZT4nICtcbiAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItbW9udGhzXCI+JyArXG4gICAgICAgICc8dGFibGUgY2xhc3M9XCJ0YWJsZS1jb25kZW5zZWRcIj4nICtcbiAgICAgICAgRFBHbG9iYWwuaGVhZFRlbXBsYXRlKGxlZnRBcnJvdywgcmlnaHRBcnJvdykgK1xuICAgICAgICBEUEdsb2JhbC5jb250VGVtcGxhdGUgK1xuICAgICAgICBEUEdsb2JhbC5mb290VGVtcGxhdGUgK1xuICAgICAgICAnPC90YWJsZT4nICtcbiAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXIteWVhcnNcIj4nICtcbiAgICAgICAgJzx0YWJsZSBjbGFzcz1cInRhYmxlLWNvbmRlbnNlZFwiPicgK1xuICAgICAgICBEUEdsb2JhbC5oZWFkVGVtcGxhdGUobGVmdEFycm93LCByaWdodEFycm93KSArXG4gICAgICAgIERQR2xvYmFsLmNvbnRUZW1wbGF0ZSArXG4gICAgICAgIERQR2xvYmFsLmZvb3RUZW1wbGF0ZSArXG4gICAgICAgICc8L3RhYmxlPicgK1xuICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICc8YSBjbGFzcz1cImJ1dHRvbiBkYXRlcGlja2VyLWNsb3NlIHRpbnkgYWxlcnQgcmlnaHRcIiBzdHlsZT1cIndpZHRoOmF1dG87XCI+JyArIGNsb3NlSWNvbiArICc8L2E+JyArXG4gICAgICAgICc8L2Rpdj4nKX07XG5cbiAgICAkLmZuLmZkYXRlcGlja2VyLkRQR2xvYmFsID0gRFBHbG9iYWw7XG5cbn0od2luZG93LmpRdWVyeSk7XG4iLCIhZnVuY3Rpb24oJCkge1xuXG5cdCQoZG9jdW1lbnQpLnJlYWR5KCBmdW5jdGlvbigpe1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAvL1xuICAgICAgICAvLyBkYXRlIHBpY2tlclxuICAgICAgICAvL1xuICAgICAgICAkKCcjZGF0ZXBpY2tlcicpLmZkYXRlcGlja2VyKHtcbiAgICAgICAgICAgIGZvcm1hdDoneXl5eW1tZGQnICAgIFxuICAgICAgICB9KVxuICAgICAgICAub24oJ2NoYW5nZURhdGUnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBuZXdfZGF0ZSA9ICQoJyNkYXRlcGlja2VyJykuZGF0YSgnZGF0ZScpO1xuICAgICAgICAgICAgLy8gYXNzaWduIHRvIGhpZGRlbiBpbnB1dFxuICAgICAgICAgICAgJCgnI2RhdGUnKS52YWwoIG5ld19kYXRlICk7XG4gICAgICAgICAgICAvLyBzaG93IGluIHNlbGVjdCBkcm9wIGRvd25cbiAgICAgICAgICAgIHZhciBkYXRlQXIgPSBuZXdfZGF0ZS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgJCgnI2RhdGVfZGlzcGxheScpLnRleHQoIG5ld19kYXRlLnN1YnN0cmluZyg2LDgpKycvJytuZXdfZGF0ZS5zdWJzdHJpbmcoNCw2KSsnLycrbmV3X2RhdGUuc3Vic3RyaW5nKDIsNCkgKTtcbiAgICAgICAgICAgICQoJyNkYXRlX3R5cGUnKS52YWwoICdkYXRlJyApO1xuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHNwZWNlaWZjIGRheSBjbGlja1xuICAgICAgICAvL1xuICAgICAgICAkKCcjZGF0ZV90eXBlJykuY2hhbmdlKCBmdW5jdGlvbigpe1xuICAgICAgICAgICAvLyBzaG93IGRhdGVwaWNrZXJcbiAgICAgICAgICAgaWYoICQodGhpcykudmFsKCkgPT0gJ2RhdGUnICl7XG4gICAgICAgICAgICAgICAgJCgnI2RhdGVwaWNrZXInKS5jbGljaygpO1xuICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIC8vIHN1Ym1pdCBldmVudHMgZm9ybVxuICAgICAgICAkKCcjZXZlbnRzLWZvcm0nKS5vbignc3VibWl0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICQoJyNldmVudHMtcmVzdWx0cy1zcGlubmVyJykuc2hvdygpO1xuICAgICAgICAgICAgJCgnI2xvYWQtbW9yZS1ldmVudHMnKS5oaWRlKCk7XG4gICAgICAgICAgICAkKCcjbm8tZXZlbnRzLWZvdW5kJykuaGlkZSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyByZXNldCBwYWdlIG51bWJlclxuICAgICAgICAgICAgJCgnaW5wdXRbbmFtZT1cInBhZ2VfbnVtYmVyXCJdJykudmFsKCAxICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBkYXRhID0gJChcIiNldmVudHMtZm9ybVwiKS5zZXJpYWxpemVBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgYWpheF9kYXRhID0ge1xuICAgICAgICAgICAgICAgICdhY3Rpb24nOiAnZXZlbnRzX2FqYXhfZ2V0X2V2ZW50cycsXG4gICAgICAgICAgICAgICAgJ2RhdGEnOiBkYXRhLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgalF1ZXJ5LnBvc3QoIGpzX3ZhcnMuYWpheHVybCt3aW5kb3cubG9jYXRpb24uc2VhcmNoLCBhamF4X2RhdGEsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgICAgICAvLyByZXBsYWNlIGV2ZW50cyBsaXN0XG4gICAgICAgICAgICAgICAgJCgnI2V2ZW50cy1yZXN1bHRzLXNwaW5uZXInKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgJCgnI2V2ZW50cy1yZXN1bHRzJykuaHRtbCggcmVzcG9uc2UgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICggcmVzcG9uc2UuaW5kZXhPZihcImFjY29yZGlvblwiKSA+PSAwICl7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhcyByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBjb3VudCBob3cgbWFueSByb3dzIGFuZCBpZiAyMCBvciBtb3JlIHRoZW4gc2hvdyBsb2FkIG1vcmVcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWJlcl9vZl9yb3dzID0gJCggJC5wYXJzZUhUTUwoIHJlc3BvbnNlICkgKS5maW5kKCdsaScpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYoIG51bWJlcl9vZl9yb3dzID09ICQoJ2lucHV0W25hbWU9XCJwZXJfcGFnZVwiXScpLnZhbCgpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjbG9hZC1tb3JlLWV2ZW50cycpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNsb2FkLW1vcmUtZXZlbnRzJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyAgcGFnZSBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgJCgnaW5wdXRbbmFtZT1cInBhZ2VfbnVtYmVyXCJdJykudmFsKCAyICk7IFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVjYWxjIGFjY29yZGlhbnNcbiAgICAgICAgICAgICAgICAgICAgJChkb2N1bWVudCkuZm91bmRhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvL25vIHJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgJCgnI25vLWV2ZW50cy1mb3VuZCcpLnNob3coKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8vIGxvYWQgbW9yZVxuICAgICAgICAkKCcjbG9hZC1tb3JlLWV2ZW50cycpLm9uKCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICQoJyNsb2FkLW1vcmUtZXZlbnRzJykucHJvcChcImRpc2FibGVkXCIsIHRydWUpOyAgICAgICBcbiAgICAgICAgICAgICQoJyNsb2FkLW1vcmUtZXZlbnRzLXNwaW5uZXInKS5zaG93KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBkYXRhID0gJChcIiNldmVudHMtZm9ybVwiKS5zZXJpYWxpemVBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgYWpheF9kYXRhID0ge1xuICAgICAgICAgICAgICAgICdhY3Rpb24nOiAnZXZlbnRzX2FqYXhfZ2V0X2V2ZW50cycsXG4gICAgICAgICAgICAgICAgJ2RhdGEnOiBkYXRhLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgalF1ZXJ5LnBvc3QoIGpzX3ZhcnMuYWpheHVybCt3aW5kb3cubG9jYXRpb24uc2VhcmNoLCBhamF4X2RhdGEsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgJCgnI2xvYWQtbW9yZS1ldmVudHMnKS5wcm9wKFwiZGlzYWJsZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICQoJyNsb2FkLW1vcmUtZXZlbnRzLXNwaW5uZXInKS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBldmVudHMgbGlzdFxuICAgICAgICAgICAgICAgICQoJyNldmVudHMtcmVzdWx0cycpLmFwcGVuZCggcmVzcG9uc2UgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICggcmVzcG9uc2UuaW5kZXhPZihcImFjY29yZGlvblwiKSA+PSAwICl7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhcyByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBjb3VudCBob3cgbWFueSByb3dzIGFuZCBpZiAyMCBvciBtb3JlIHRoZW4gc2hvdyBsb2FkIG1vcmVcbiAgICAgICAgICAgICAgICAgICAgdmFyIG51bWJlcl9vZl9yb3dzID0gJCggJC5wYXJzZUhUTUwoIHJlc3BvbnNlICkgKS5maW5kKCdsaScpLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaWYoIG51bWJlcl9vZl9yb3dzID09ICQoJ2lucHV0W25hbWU9XCJwZXJfcGFnZVwiXScpLnZhbCgpICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjbG9hZC1tb3JlLWV2ZW50cycpLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNsb2FkLW1vcmUtZXZlbnRzJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBpbmNyZWFzZSBwYWdlIG51bWJlclxuICAgICAgICAgICAgICAgICAgICBwYWdlX251bWJlciA9IHBhcnNlSW50KCAkKCdpbnB1dFtuYW1lPVwicGFnZV9udW1iZXJcIl0nKS52YWwoKSApO1xuICAgICAgICAgICAgICAgICAgICAkKCdpbnB1dFtuYW1lPVwicGFnZV9udW1iZXJcIl0nKS52YWwoIHBhZ2VfbnVtYmVyKzEgKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY2FsYyBhY2NvcmRpYW5zXG4gICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLmZvdW5kYXRpb24oKTsgICBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9ubyByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgICQoJyNsb2FkLW1vcmUtZXZlbnRzJykuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcblxuXG5cbiAgICAgICAgICAgIH0pOyAgICAgICAgICAgIFxuICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgfSk7XG4gICAgXG59KHdpbmRvdy5qUXVlcnkpOyIsImpRdWVyeSggJ2lmcmFtZVtzcmMqPVwieW91dHViZS5jb21cIl0nKS53cmFwKFwiPGRpdiBjbGFzcz0nZmxleC12aWRlbyB3aWRlc2NyZWVuJy8+XCIpO1xualF1ZXJ5KCAnaWZyYW1lW3NyYyo9XCJ2aW1lby5jb21cIl0nKS53cmFwKFwiPGRpdiBjbGFzcz0nZmxleC12aWRlbyB3aWRlc2NyZWVuIHZpbWVvJy8+XCIpO1xuIiwialF1ZXJ5KGRvY3VtZW50KS5mb3VuZGF0aW9uKCk7XG4iLCIvLyBKb3lyaWRlIGRlbW9cbiQoJyNzdGFydC1qcicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAkKGRvY3VtZW50KS5mb3VuZGF0aW9uKCdqb3lyaWRlJywnc3RhcnQnKTtcbn0pOyIsIi8qKlxuICogYXV0aG9yIENocmlzdG9waGVyIEJsdW1cbiAqICAgIC0gYmFzZWQgb24gdGhlIGlkZWEgb2YgUmVteSBTaGFycCwgaHR0cDovL3JlbXlzaGFycC5jb20vMjAwOS8wMS8yNi9lbGVtZW50LWluLXZpZXctZXZlbnQtcGx1Z2luL1xuICogICAgLSBmb3JrZWQgZnJvbSBodHRwOi8vZ2l0aHViLmNvbS96dWsvanF1ZXJ5Lmludmlldy9cbiAqL1xuKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRFxuICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBOb2RlLCBDb21tb25KU1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gIH0gZWxzZSB7XG4gICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICBmYWN0b3J5KGpRdWVyeSk7XG4gIH1cbn0oZnVuY3Rpb24gKCQpIHtcblxuICB2YXIgaW52aWV3T2JqZWN0cyA9IFtdLCB2aWV3cG9ydFNpemUsIHZpZXdwb3J0T2Zmc2V0LFxuICAgICAgZCA9IGRvY3VtZW50LCB3ID0gd2luZG93LCBkb2N1bWVudEVsZW1lbnQgPSBkLmRvY3VtZW50RWxlbWVudCwgdGltZXI7XG5cbiAgJC5ldmVudC5zcGVjaWFsLmludmlldyA9IHtcbiAgICBhZGQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGludmlld09iamVjdHMucHVzaCh7IGRhdGE6IGRhdGEsICRlbGVtZW50OiAkKHRoaXMpLCBlbGVtZW50OiB0aGlzIH0pO1xuICAgICAgLy8gVXNlIHNldEludGVydmFsIGluIG9yZGVyIHRvIGFsc28gbWFrZSBzdXJlIHRoaXMgY2FwdHVyZXMgZWxlbWVudHMgd2l0aGluXG4gICAgICAvLyBcIm92ZXJmbG93OnNjcm9sbFwiIGVsZW1lbnRzIG9yIGVsZW1lbnRzIHRoYXQgYXBwZWFyZWQgaW4gdGhlIGRvbSB0cmVlIGR1ZSB0b1xuICAgICAgLy8gZG9tIG1hbmlwdWxhdGlvbiBhbmQgcmVmbG93XG4gICAgICAvLyBvbGQ6ICQod2luZG93KS5zY3JvbGwoY2hlY2tJblZpZXcpO1xuICAgICAgLy9cbiAgICAgIC8vIEJ5IHRoZSB3YXksIGlPUyAoaVBhZCwgaVBob25lLCAuLi4pIHNlZW1zIHRvIG5vdCBleGVjdXRlLCBvciBhdCBsZWFzdCBkZWxheXNcbiAgICAgIC8vIGludGVydmFscyB3aGlsZSB0aGUgdXNlciBzY3JvbGxzLiBUaGVyZWZvcmUgdGhlIGludmlldyBldmVudCBtaWdodCBmaXJlIGEgYml0IGxhdGUgdGhlcmVcbiAgICAgIC8vXG4gICAgICAvLyBEb24ndCB3YXN0ZSBjeWNsZXMgd2l0aCBhbiBpbnRlcnZhbCB1bnRpbCB3ZSBnZXQgYXQgbGVhc3Qgb25lIGVsZW1lbnQgdGhhdFxuICAgICAgLy8gaGFzIGJvdW5kIHRvIHRoZSBpbnZpZXcgZXZlbnQuXG4gICAgICBpZiAoIXRpbWVyICYmIGludmlld09iamVjdHMubGVuZ3RoKSB7XG4gICAgICAgICB0aW1lciA9IHNldEludGVydmFsKGNoZWNrSW5WaWV3LCAyNTApO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGZvciAodmFyIGk9MDsgaTxpbnZpZXdPYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpbnZpZXdPYmplY3QgPSBpbnZpZXdPYmplY3RzW2ldO1xuICAgICAgICBpZiAoaW52aWV3T2JqZWN0LmVsZW1lbnQgPT09IHRoaXMgJiYgaW52aWV3T2JqZWN0LmRhdGEuZ3VpZCA9PT0gZGF0YS5ndWlkKSB7XG4gICAgICAgICAgaW52aWV3T2JqZWN0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYXIgaW50ZXJ2YWwgd2hlbiB3ZSBubyBsb25nZXIgaGF2ZSBhbnkgZWxlbWVudHMgbGlzdGVuaW5nXG4gICAgICBpZiAoIWludmlld09iamVjdHMubGVuZ3RoKSB7XG4gICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0Vmlld3BvcnRTaXplKCkge1xuICAgIHZhciBtb2RlLCBkb21PYmplY3QsIHNpemUgPSB7IGhlaWdodDogdy5pbm5lckhlaWdodCwgd2lkdGg6IHcuaW5uZXJXaWR0aCB9O1xuXG4gICAgLy8gaWYgdGhpcyBpcyBjb3JyZWN0IHRoZW4gcmV0dXJuIGl0LiBpUGFkIGhhcyBjb21wYXQgTW9kZSwgc28gd2lsbFxuICAgIC8vIGdvIGludG8gY2hlY2sgY2xpZW50SGVpZ2h0L2NsaWVudFdpZHRoICh3aGljaCBoYXMgdGhlIHdyb25nIHZhbHVlKS5cbiAgICBpZiAoIXNpemUuaGVpZ2h0KSB7XG4gICAgICBtb2RlID0gZC5jb21wYXRNb2RlO1xuICAgICAgaWYgKG1vZGUgfHwgISQuc3VwcG9ydC5ib3hNb2RlbCkgeyAvLyBJRSwgR2Vja29cbiAgICAgICAgZG9tT2JqZWN0ID0gbW9kZSA9PT0gJ0NTUzFDb21wYXQnID9cbiAgICAgICAgICBkb2N1bWVudEVsZW1lbnQgOiAvLyBTdGFuZGFyZHNcbiAgICAgICAgICBkLmJvZHk7IC8vIFF1aXJrc1xuICAgICAgICBzaXplID0ge1xuICAgICAgICAgIGhlaWdodDogZG9tT2JqZWN0LmNsaWVudEhlaWdodCxcbiAgICAgICAgICB3aWR0aDogIGRvbU9iamVjdC5jbGllbnRXaWR0aFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaXplO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogIHcucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCAgIHx8IGQuYm9keS5zY3JvbGxUb3AsXG4gICAgICBsZWZ0OiB3LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0ICB8fCBkLmJvZHkuc2Nyb2xsTGVmdFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0luVmlldygpIHtcbiAgICBpZiAoIWludmlld09iamVjdHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGkgPSAwLCAkZWxlbWVudHMgPSAkLm1hcChpbnZpZXdPYmplY3RzLCBmdW5jdGlvbihpbnZpZXdPYmplY3QpIHtcbiAgICAgIHZhciBzZWxlY3RvciAgPSBpbnZpZXdPYmplY3QuZGF0YS5zZWxlY3RvcixcbiAgICAgICAgICAkZWxlbWVudCAgPSBpbnZpZXdPYmplY3QuJGVsZW1lbnQ7XG4gICAgICByZXR1cm4gc2VsZWN0b3IgPyAkZWxlbWVudC5maW5kKHNlbGVjdG9yKSA6ICRlbGVtZW50O1xuICAgIH0pO1xuXG4gICAgdmlld3BvcnRTaXplICAgPSB2aWV3cG9ydFNpemUgICB8fCBnZXRWaWV3cG9ydFNpemUoKTtcbiAgICB2aWV3cG9ydE9mZnNldCA9IHZpZXdwb3J0T2Zmc2V0IHx8IGdldFZpZXdwb3J0T2Zmc2V0KCk7XG5cbiAgICBmb3IgKDsgaTxpbnZpZXdPYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBJZ25vcmUgZWxlbWVudHMgdGhhdCBhcmUgbm90IGluIHRoZSBET00gdHJlZVxuICAgICAgaWYgKCEkLmNvbnRhaW5zKGRvY3VtZW50RWxlbWVudCwgJGVsZW1lbnRzW2ldWzBdKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyICRlbGVtZW50ICAgICAgPSAkKCRlbGVtZW50c1tpXSksXG4gICAgICAgICAgZWxlbWVudFNpemUgICA9IHsgaGVpZ2h0OiAkZWxlbWVudFswXS5vZmZzZXRIZWlnaHQsIHdpZHRoOiAkZWxlbWVudFswXS5vZmZzZXRXaWR0aCB9LFxuICAgICAgICAgIGVsZW1lbnRPZmZzZXQgPSAkZWxlbWVudC5vZmZzZXQoKSxcbiAgICAgICAgICBpblZpZXcgICAgICAgID0gJGVsZW1lbnQuZGF0YSgnaW52aWV3Jyk7XG5cbiAgICAgIC8vIERvbid0IGFzayBtZSB3aHkgYmVjYXVzZSBJIGhhdmVuJ3QgZmlndXJlZCBvdXQgeWV0OlxuICAgICAgLy8gdmlld3BvcnRPZmZzZXQgYW5kIHZpZXdwb3J0U2l6ZSBhcmUgc29tZXRpbWVzIHN1ZGRlbmx5IG51bGwgaW4gRmlyZWZveCA1LlxuICAgICAgLy8gRXZlbiB0aG91Z2ggaXQgc291bmRzIHdlaXJkOlxuICAgICAgLy8gSXQgc2VlbXMgdGhhdCB0aGUgZXhlY3V0aW9uIG9mIHRoaXMgZnVuY3Rpb24gaXMgaW50ZXJmZXJyZWQgYnkgdGhlIG9ucmVzaXplL29uc2Nyb2xsIGV2ZW50XG4gICAgICAvLyB3aGVyZSB2aWV3cG9ydE9mZnNldCBhbmQgdmlld3BvcnRTaXplIGFyZSB1bnNldFxuICAgICAgaWYgKCF2aWV3cG9ydE9mZnNldCB8fCAhdmlld3BvcnRTaXplKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnRPZmZzZXQudG9wICsgZWxlbWVudFNpemUuaGVpZ2h0ID4gdmlld3BvcnRPZmZzZXQudG9wICYmXG4gICAgICAgICAgZWxlbWVudE9mZnNldC50b3AgPCB2aWV3cG9ydE9mZnNldC50b3AgKyB2aWV3cG9ydFNpemUuaGVpZ2h0KjIgJiZcbiAgICAgICAgICBlbGVtZW50T2Zmc2V0LmxlZnQgKyBlbGVtZW50U2l6ZS53aWR0aCA+IHZpZXdwb3J0T2Zmc2V0LmxlZnQgJiZcbiAgICAgICAgICBlbGVtZW50T2Zmc2V0LmxlZnQgPCB2aWV3cG9ydE9mZnNldC5sZWZ0ICsgdmlld3BvcnRTaXplLndpZHRoKSB7XG4gICAgICAgIGlmICghaW5WaWV3KSB7XG4gICAgICAgICAgJGVsZW1lbnQuZGF0YSgnaW52aWV3JywgdHJ1ZSkudHJpZ2dlcignaW52aWV3JywgW3RydWVdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpblZpZXcpIHtcbiAgICAgICAgJGVsZW1lbnQuZGF0YSgnaW52aWV3JywgZmFsc2UpLnRyaWdnZXIoJ2ludmlldycsIFtmYWxzZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICQodykub24oXCJzY3JvbGwgcmVzaXplIHNjcm9sbHN0b3BcIiwgZnVuY3Rpb24oKSB7XG4gICAgdmlld3BvcnRTaXplID0gdmlld3BvcnRPZmZzZXQgPSBudWxsO1xuICB9KTtcblxuICAvLyBJRSA8IDkgc2Nyb2xscyB0byBmb2N1c2VkIGVsZW1lbnRzIHdpdGhvdXQgZmlyaW5nIHRoZSBcInNjcm9sbFwiIGV2ZW50XG4gIGlmICghZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIgJiYgZG9jdW1lbnRFbGVtZW50LmF0dGFjaEV2ZW50KSB7XG4gICAgZG9jdW1lbnRFbGVtZW50LmF0dGFjaEV2ZW50KFwib25mb2N1c2luXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgdmlld3BvcnRPZmZzZXQgPSBudWxsO1xuICAgIH0pO1xuICB9XG59KSk7IiwiLyohIE1hZ25pZmljIFBvcHVwIC0gdjEuMS4wIC0gMjAxNi0wMi0yMFxuKiBodHRwOi8vZGltc2VtZW5vdi5jb20vcGx1Z2lucy9tYWduaWZpYy1wb3B1cC9cbiogQ29weXJpZ2h0IChjKSAyMDE2IERtaXRyeSBTZW1lbm92OyAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkgeyBcbmlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHsgXG4gLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLiBcbiBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7IFxuIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7IFxuIC8vIE5vZGUvQ29tbW9uSlMgXG4gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7IFxuIH0gZWxzZSB7IFxuIC8vIEJyb3dzZXIgZ2xvYmFscyBcbiBmYWN0b3J5KHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvKTsgXG4gfSBcbiB9KGZ1bmN0aW9uKCQpIHsgXG5cbi8qPj5jb3JlKi9cbi8qKlxuICogXG4gKiBNYWduaWZpYyBQb3B1cCBDb3JlIEpTIGZpbGVcbiAqIFxuICovXG5cblxuLyoqXG4gKiBQcml2YXRlIHN0YXRpYyBjb25zdGFudHNcbiAqL1xudmFyIENMT1NFX0VWRU5UID0gJ0Nsb3NlJyxcblx0QkVGT1JFX0NMT1NFX0VWRU5UID0gJ0JlZm9yZUNsb3NlJyxcblx0QUZURVJfQ0xPU0VfRVZFTlQgPSAnQWZ0ZXJDbG9zZScsXG5cdEJFRk9SRV9BUFBFTkRfRVZFTlQgPSAnQmVmb3JlQXBwZW5kJyxcblx0TUFSS1VQX1BBUlNFX0VWRU5UID0gJ01hcmt1cFBhcnNlJyxcblx0T1BFTl9FVkVOVCA9ICdPcGVuJyxcblx0Q0hBTkdFX0VWRU5UID0gJ0NoYW5nZScsXG5cdE5TID0gJ21mcCcsXG5cdEVWRU5UX05TID0gJy4nICsgTlMsXG5cdFJFQURZX0NMQVNTID0gJ21mcC1yZWFkeScsXG5cdFJFTU9WSU5HX0NMQVNTID0gJ21mcC1yZW1vdmluZycsXG5cdFBSRVZFTlRfQ0xPU0VfQ0xBU1MgPSAnbWZwLXByZXZlbnQtY2xvc2UnO1xuXG5cbi8qKlxuICogUHJpdmF0ZSB2YXJzIFxuICovXG4vKmpzaGludCAtVzA3OSAqL1xudmFyIG1mcCwgLy8gQXMgd2UgaGF2ZSBvbmx5IG9uZSBpbnN0YW5jZSBvZiBNYWduaWZpY1BvcHVwIG9iamVjdCwgd2UgZGVmaW5lIGl0IGxvY2FsbHkgdG8gbm90IHRvIHVzZSAndGhpcydcblx0TWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKCl7fSxcblx0X2lzSlEgPSAhISh3aW5kb3cualF1ZXJ5KSxcblx0X3ByZXZTdGF0dXMsXG5cdF93aW5kb3cgPSAkKHdpbmRvdyksXG5cdF9kb2N1bWVudCxcblx0X3ByZXZDb250ZW50VHlwZSxcblx0X3dyYXBDbGFzc2VzLFxuXHRfY3VyclBvcHVwVHlwZTtcblxuXG4vKipcbiAqIFByaXZhdGUgZnVuY3Rpb25zXG4gKi9cbnZhciBfbWZwT24gPSBmdW5jdGlvbihuYW1lLCBmKSB7XG5cdFx0bWZwLmV2Lm9uKE5TICsgbmFtZSArIEVWRU5UX05TLCBmKTtcblx0fSxcblx0X2dldEVsID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBhcHBlbmRUbywgaHRtbCwgcmF3KSB7XG5cdFx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0ZWwuY2xhc3NOYW1lID0gJ21mcC0nK2NsYXNzTmFtZTtcblx0XHRpZihodG1sKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBodG1sO1xuXHRcdH1cblx0XHRpZighcmF3KSB7XG5cdFx0XHRlbCA9ICQoZWwpO1xuXHRcdFx0aWYoYXBwZW5kVG8pIHtcblx0XHRcdFx0ZWwuYXBwZW5kVG8oYXBwZW5kVG8pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZihhcHBlbmRUbykge1xuXHRcdFx0YXBwZW5kVG8uYXBwZW5kQ2hpbGQoZWwpO1xuXHRcdH1cblx0XHRyZXR1cm4gZWw7XG5cdH0sXG5cdF9tZnBUcmlnZ2VyID0gZnVuY3Rpb24oZSwgZGF0YSkge1xuXHRcdG1mcC5ldi50cmlnZ2VySGFuZGxlcihOUyArIGUsIGRhdGEpO1xuXG5cdFx0aWYobWZwLnN0LmNhbGxiYWNrcykge1xuXHRcdFx0Ly8gY29udmVydHMgXCJtZnBFdmVudE5hbWVcIiB0byBcImV2ZW50TmFtZVwiIGNhbGxiYWNrIGFuZCB0cmlnZ2VycyBpdCBpZiBpdCdzIHByZXNlbnRcblx0XHRcdGUgPSBlLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgZS5zbGljZSgxKTtcblx0XHRcdGlmKG1mcC5zdC5jYWxsYmFja3NbZV0pIHtcblx0XHRcdFx0bWZwLnN0LmNhbGxiYWNrc1tlXS5hcHBseShtZnAsICQuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0X2dldENsb3NlQnRuID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdGlmKHR5cGUgIT09IF9jdXJyUG9wdXBUeXBlIHx8ICFtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKSB7XG5cdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuID0gJCggbWZwLnN0LmNsb3NlTWFya3VwLnJlcGxhY2UoJyV0aXRsZSUnLCBtZnAuc3QudENsb3NlICkgKTtcblx0XHRcdF9jdXJyUG9wdXBUeXBlID0gdHlwZTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5jdXJyVGVtcGxhdGUuY2xvc2VCdG47XG5cdH0sXG5cdC8vIEluaXRpYWxpemUgTWFnbmlmaWMgUG9wdXAgb25seSB3aGVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdF9jaGVja0luc3RhbmNlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoISQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSkge1xuXHRcdFx0Lypqc2hpbnQgLVcwMjAgKi9cblx0XHRcdG1mcCA9IG5ldyBNYWduaWZpY1BvcHVwKCk7XG5cdFx0XHRtZnAuaW5pdCgpO1xuXHRcdFx0JC5tYWduaWZpY1BvcHVwLmluc3RhbmNlID0gbWZwO1xuXHRcdH1cblx0fSxcblx0Ly8gQ1NTIHRyYW5zaXRpb24gZGV0ZWN0aW9uLCBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzcyNjQ4OTkvZGV0ZWN0LWNzcy10cmFuc2l0aW9ucy11c2luZy1qYXZhc2NyaXB0LWFuZC13aXRob3V0LW1vZGVybml6clxuXHRzdXBwb3J0c1RyYW5zaXRpb25zID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGUsIC8vICdzJyBmb3Igc3R5bGUuIGJldHRlciB0byBjcmVhdGUgYW4gZWxlbWVudCBpZiBib2R5IHlldCB0byBleGlzdFxuXHRcdFx0diA9IFsnbXMnLCdPJywnTW96JywnV2Via2l0J107IC8vICd2JyBmb3IgdmVuZG9yXG5cblx0XHRpZiggc1sndHJhbnNpdGlvbiddICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTsgXG5cdFx0fVxuXHRcdFx0XG5cdFx0d2hpbGUoIHYubGVuZ3RoICkge1xuXHRcdFx0aWYoIHYucG9wKCkgKyAnVHJhbnNpdGlvbicgaW4gcyApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFx0XHRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblxuXG4vKipcbiAqIFB1YmxpYyBmdW5jdGlvbnNcbiAqL1xuTWFnbmlmaWNQb3B1cC5wcm90b3R5cGUgPSB7XG5cblx0Y29uc3RydWN0b3I6IE1hZ25pZmljUG9wdXAsXG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIE1hZ25pZmljIFBvcHVwIHBsdWdpbi4gXG5cdCAqIFRoaXMgZnVuY3Rpb24gaXMgdHJpZ2dlcmVkIG9ubHkgb25jZSB3aGVuICQuZm4ubWFnbmlmaWNQb3B1cCBvciAkLm1hZ25pZmljUG9wdXAgaXMgZXhlY3V0ZWRcblx0ICovXG5cdGluaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBhcHBWZXJzaW9uID0gbmF2aWdhdG9yLmFwcFZlcnNpb247XG5cdFx0bWZwLmlzTG93SUUgPSBtZnAuaXNJRTggPSBkb2N1bWVudC5hbGwgJiYgIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7XG5cdFx0bWZwLmlzQW5kcm9pZCA9ICgvYW5kcm9pZC9naSkudGVzdChhcHBWZXJzaW9uKTtcblx0XHRtZnAuaXNJT1MgPSAoL2lwaG9uZXxpcGFkfGlwb2QvZ2kpLnRlc3QoYXBwVmVyc2lvbik7XG5cdFx0bWZwLnN1cHBvcnRzVHJhbnNpdGlvbiA9IHN1cHBvcnRzVHJhbnNpdGlvbnMoKTtcblxuXHRcdC8vIFdlIGRpc2FibGUgZml4ZWQgcG9zaXRpb25lZCBsaWdodGJveCBvbiBkZXZpY2VzIHRoYXQgZG9uJ3QgaGFuZGxlIGl0IG5pY2VseS5cblx0XHQvLyBJZiB5b3Uga25vdyBhIGJldHRlciB3YXkgb2YgZGV0ZWN0aW5nIHRoaXMgLSBsZXQgbWUga25vdy5cblx0XHRtZnAucHJvYmFibHlNb2JpbGUgPSAobWZwLmlzQW5kcm9pZCB8fCBtZnAuaXNJT1MgfHwgLyhPcGVyYSBNaW5pKXxLaW5kbGV8d2ViT1N8QmxhY2tCZXJyeXwoT3BlcmEgTW9iaSl8KFdpbmRvd3MgUGhvbmUpfElFTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSApO1xuXHRcdF9kb2N1bWVudCA9ICQoZG9jdW1lbnQpO1xuXG5cdFx0bWZwLnBvcHVwc0NhY2hlID0ge307XG5cdH0sXG5cblx0LyoqXG5cdCAqIE9wZW5zIHBvcHVwXG5cdCAqIEBwYXJhbSAgZGF0YSBbZGVzY3JpcHRpb25dXG5cdCAqL1xuXHRvcGVuOiBmdW5jdGlvbihkYXRhKSB7XG5cblx0XHR2YXIgaTtcblxuXHRcdGlmKGRhdGEuaXNPYmogPT09IGZhbHNlKSB7IFxuXHRcdFx0Ly8gY29udmVydCBqUXVlcnkgY29sbGVjdGlvbiB0byBhcnJheSB0byBhdm9pZCBjb25mbGljdHMgbGF0ZXJcblx0XHRcdG1mcC5pdGVtcyA9IGRhdGEuaXRlbXMudG9BcnJheSgpO1xuXG5cdFx0XHRtZnAuaW5kZXggPSAwO1xuXHRcdFx0dmFyIGl0ZW1zID0gZGF0YS5pdGVtcyxcblx0XHRcdFx0aXRlbTtcblx0XHRcdGZvcihpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRcdFx0aWYoaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0XHRpdGVtID0gaXRlbS5lbFswXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihpdGVtID09PSBkYXRhLmVsWzBdKSB7XG5cdFx0XHRcdFx0bWZwLmluZGV4ID0gaTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuaXRlbXMgPSAkLmlzQXJyYXkoZGF0YS5pdGVtcykgPyBkYXRhLml0ZW1zIDogW2RhdGEuaXRlbXNdO1xuXHRcdFx0bWZwLmluZGV4ID0gZGF0YS5pbmRleCB8fCAwO1xuXHRcdH1cblxuXHRcdC8vIGlmIHBvcHVwIGlzIGFscmVhZHkgb3BlbmVkIC0gd2UganVzdCB1cGRhdGUgdGhlIGNvbnRlbnRcblx0XHRpZihtZnAuaXNPcGVuKSB7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0bWZwLnR5cGVzID0gW107IFxuXHRcdF93cmFwQ2xhc3NlcyA9ICcnO1xuXHRcdGlmKGRhdGEubWFpbkVsICYmIGRhdGEubWFpbkVsLmxlbmd0aCkge1xuXHRcdFx0bWZwLmV2ID0gZGF0YS5tYWluRWwuZXEoMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5ldiA9IF9kb2N1bWVudDtcblx0XHR9XG5cblx0XHRpZihkYXRhLmtleSkge1xuXHRcdFx0aWYoIW1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV0pIHtcblx0XHRcdFx0bWZwLnBvcHVwc0NhY2hlW2RhdGEua2V5XSA9IHt9O1xuXHRcdFx0fVxuXHRcdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5jdXJyVGVtcGxhdGUgPSB7fTtcblx0XHR9XG5cblxuXG5cdFx0bWZwLnN0ID0gJC5leHRlbmQodHJ1ZSwge30sICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cywgZGF0YSApOyBcblx0XHRtZnAuZml4ZWRDb250ZW50UG9zID0gbWZwLnN0LmZpeGVkQ29udGVudFBvcyA9PT0gJ2F1dG8nID8gIW1mcC5wcm9iYWJseU1vYmlsZSA6IG1mcC5zdC5maXhlZENvbnRlbnRQb3M7XG5cblx0XHRpZihtZnAuc3QubW9kYWwpIHtcblx0XHRcdG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrID0gZmFsc2U7XG5cdFx0XHRtZnAuc3QuY2xvc2VPbkJnQ2xpY2sgPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5zaG93Q2xvc2VCdG4gPSBmYWxzZTtcblx0XHRcdG1mcC5zdC5lbmFibGVFc2NhcGVLZXkgPSBmYWxzZTtcblx0XHR9XG5cdFx0XG5cblx0XHQvLyBCdWlsZGluZyBtYXJrdXBcblx0XHQvLyBtYWluIGNvbnRhaW5lcnMgYXJlIGNyZWF0ZWQgb25seSBvbmNlXG5cdFx0aWYoIW1mcC5iZ092ZXJsYXkpIHtcblxuXHRcdFx0Ly8gRGFyayBvdmVybGF5XG5cdFx0XHRtZnAuYmdPdmVybGF5ID0gX2dldEVsKCdiZycpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuY2xvc2UoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAud3JhcCA9IF9nZXRFbCgnd3JhcCcpLmF0dHIoJ3RhYmluZGV4JywgLTEpLm9uKCdjbGljaycrRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYobWZwLl9jaGVja0lmQ2xvc2UoZS50YXJnZXQpKSB7XG5cdFx0XHRcdFx0bWZwLmNsb3NlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyID0gX2dldEVsKCdjb250YWluZXInLCBtZnAud3JhcCk7XG5cdFx0fVxuXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIgPSBfZ2V0RWwoJ2NvbnRlbnQnKTtcblx0XHRpZihtZnAuc3QucHJlbG9hZGVyKSB7XG5cdFx0XHRtZnAucHJlbG9hZGVyID0gX2dldEVsKCdwcmVsb2FkZXInLCBtZnAuY29udGFpbmVyLCBtZnAuc3QudExvYWRpbmcpO1xuXHRcdH1cblxuXG5cdFx0Ly8gSW5pdGlhbGl6aW5nIG1vZHVsZXNcblx0XHR2YXIgbW9kdWxlcyA9ICQubWFnbmlmaWNQb3B1cC5tb2R1bGVzO1xuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBuID0gbW9kdWxlc1tpXTtcblx0XHRcdG4gPSBuLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbi5zbGljZSgxKTtcblx0XHRcdG1mcFsnaW5pdCcrbl0uY2FsbChtZnApO1xuXHRcdH1cblx0XHRfbWZwVHJpZ2dlcignQmVmb3JlT3BlbicpO1xuXG5cblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuKSB7XG5cdFx0XHQvLyBDbG9zZSBidXR0b25cblx0XHRcdGlmKCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUpIHtcblx0XHRcdFx0bWZwLndyYXAuYXBwZW5kKCBfZ2V0Q2xvc2VCdG4oKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X21mcE9uKE1BUktVUF9QQVJTRV9FVkVOVCwgZnVuY3Rpb24oZSwgdGVtcGxhdGUsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHRcdHZhbHVlcy5jbG9zZV9yZXBsYWNlV2l0aCA9IF9nZXRDbG9zZUJ0bihpdGVtLnR5cGUpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWNsb3NlLWJ0bi1pbic7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYobWZwLnN0LmFsaWduVG9wKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYWxpZ24tdG9wJztcblx0XHR9XG5cblx0XG5cblx0XHRpZihtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHRtZnAud3JhcC5jc3Moe1xuXHRcdFx0XHRvdmVyZmxvdzogbWZwLnN0Lm92ZXJmbG93WSxcblx0XHRcdFx0b3ZlcmZsb3dYOiAnaGlkZGVuJyxcblx0XHRcdFx0b3ZlcmZsb3dZOiBtZnAuc3Qub3ZlcmZsb3dZXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndyYXAuY3NzKHsgXG5cdFx0XHRcdHRvcDogX3dpbmRvdy5zY3JvbGxUb3AoKSxcblx0XHRcdFx0cG9zaXRpb246ICdhYnNvbHV0ZSdcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiggbWZwLnN0LmZpeGVkQmdQb3MgPT09IGZhbHNlIHx8IChtZnAuc3QuZml4ZWRCZ1BvcyA9PT0gJ2F1dG8nICYmICFtZnAuZml4ZWRDb250ZW50UG9zKSApIHtcblx0XHRcdG1mcC5iZ092ZXJsYXkuY3NzKHtcblx0XHRcdFx0aGVpZ2h0OiBfZG9jdW1lbnQuaGVpZ2h0KCksXG5cdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRcblxuXHRcdGlmKG1mcC5zdC5lbmFibGVFc2NhcGVLZXkpIHtcblx0XHRcdC8vIENsb3NlIG9uIEVTQyBrZXlcblx0XHRcdF9kb2N1bWVudC5vbigna2V5dXAnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYoZS5rZXlDb2RlID09PSAyNykge1xuXHRcdFx0XHRcdG1mcC5jbG9zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRfd2luZG93Lm9uKCdyZXNpemUnICsgRVZFTlRfTlMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnVwZGF0ZVNpemUoKTtcblx0XHR9KTtcblxuXG5cdFx0aWYoIW1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrKSB7XG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtYXV0by1jdXJzb3InO1xuXHRcdH1cblx0XHRcblx0XHRpZihfd3JhcENsYXNzZXMpXG5cdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhfd3JhcENsYXNzZXMpO1xuXG5cblx0XHQvLyB0aGlzIHRyaWdnZXJzIHJlY2FsY3VsYXRpb24gb2YgbGF5b3V0LCBzbyB3ZSBnZXQgaXQgb25jZSB0byBub3QgdG8gdHJpZ2dlciB0d2ljZVxuXHRcdHZhciB3aW5kb3dIZWlnaHQgPSBtZnAud0ggPSBfd2luZG93LmhlaWdodCgpO1xuXG5cdFx0XG5cdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHt9O1xuXG5cdFx0aWYoIG1mcC5maXhlZENvbnRlbnRQb3MgKSB7XG4gICAgICAgICAgICBpZihtZnAuX2hhc1Njcm9sbEJhcih3aW5kb3dIZWlnaHQpKXtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG1mcC5fZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgICAgICAgICAgIGlmKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93U3R5bGVzLm1hcmdpblJpZ2h0ID0gcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHRcdGlmKG1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdGlmKCFtZnAuaXNJRTcpIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZTcgZG91YmxlLXNjcm9sbCBidWdcblx0XHRcdFx0JCgnYm9keSwgaHRtbCcpLmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0XG5cdFx0XG5cdFx0dmFyIGNsYXNzZXNUb2FkZCA9IG1mcC5zdC5tYWluQ2xhc3M7XG5cdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRjbGFzc2VzVG9hZGQgKz0gJyBtZnAtaWU3Jztcblx0XHR9XG5cdFx0aWYoY2xhc3Nlc1RvYWRkKSB7XG5cdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoIGNsYXNzZXNUb2FkZCApO1xuXHRcdH1cblxuXHRcdC8vIGFkZCBjb250ZW50XG5cdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cblx0XHRfbWZwVHJpZ2dlcignQnVpbGRDb250cm9scycpO1xuXG5cdFx0Ly8gcmVtb3ZlIHNjcm9sbGJhciwgYWRkIG1hcmdpbiBlLnQuY1xuXHRcdCQoJ2h0bWwnKS5jc3Mod2luZG93U3R5bGVzKTtcblx0XHRcblx0XHQvLyBhZGQgZXZlcnl0aGluZyB0byBET01cblx0XHRtZnAuYmdPdmVybGF5LmFkZChtZnAud3JhcCkucHJlcGVuZFRvKCBtZnAuc3QucHJlcGVuZFRvIHx8ICQoZG9jdW1lbnQuYm9keSkgKTtcblxuXHRcdC8vIFNhdmUgbGFzdCBmb2N1c2VkIGVsZW1lbnRcblx0XHRtZnAuX2xhc3RGb2N1c2VkRWwgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHRcdFxuXHRcdC8vIFdhaXQgZm9yIG5leHQgY3ljbGUgdG8gYWxsb3cgQ1NTIHRyYW5zaXRpb25cblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XG5cdFx0XHRpZihtZnAuY29udGVudCkge1xuXHRcdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0XHRtZnAuX3NldEZvY3VzKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiBjb250ZW50IGlzIG5vdCBkZWZpbmVkIChub3QgbG9hZGVkIGUudC5jKSB3ZSBhZGQgY2xhc3Mgb25seSBmb3IgQkdcblx0XHRcdFx0bWZwLmJnT3ZlcmxheS5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFRyYXAgdGhlIGZvY3VzIGluIHBvcHVwXG5cdFx0XHRfZG9jdW1lbnQub24oJ2ZvY3VzaW4nICsgRVZFTlRfTlMsIG1mcC5fb25Gb2N1c0luKTtcblxuXHRcdH0sIDE2KTtcblxuXHRcdG1mcC5pc09wZW4gPSB0cnVlO1xuXHRcdG1mcC51cGRhdGVTaXplKHdpbmRvd0hlaWdodCk7XG5cdFx0X21mcFRyaWdnZXIoT1BFTl9FVkVOVCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvKipcblx0ICogQ2xvc2VzIHRoZSBwb3B1cFxuXHQgKi9cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCFtZnAuaXNPcGVuKSByZXR1cm47XG5cdFx0X21mcFRyaWdnZXIoQkVGT1JFX0NMT1NFX0VWRU5UKTtcblxuXHRcdG1mcC5pc09wZW4gPSBmYWxzZTtcblx0XHQvLyBmb3IgQ1NTMyBhbmltYXRpb25cblx0XHRpZihtZnAuc3QucmVtb3ZhbERlbGF5ICYmICFtZnAuaXNMb3dJRSAmJiBtZnAuc3VwcG9ydHNUcmFuc2l0aW9uICkgIHtcblx0XHRcdG1mcC5fYWRkQ2xhc3NUb01GUChSRU1PVklOR19DTEFTUyk7XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZnAuX2Nsb3NlKCk7XG5cdFx0XHR9LCBtZnAuc3QucmVtb3ZhbERlbGF5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLl9jbG9zZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogSGVscGVyIGZvciBjbG9zZSgpIGZ1bmN0aW9uXG5cdCAqL1xuXHRfY2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdF9tZnBUcmlnZ2VyKENMT1NFX0VWRU5UKTtcblxuXHRcdHZhciBjbGFzc2VzVG9SZW1vdmUgPSBSRU1PVklOR19DTEFTUyArICcgJyArIFJFQURZX0NMQVNTICsgJyAnO1xuXG5cdFx0bWZwLmJnT3ZlcmxheS5kZXRhY2goKTtcblx0XHRtZnAud3JhcC5kZXRhY2goKTtcblx0XHRtZnAuY29udGFpbmVyLmVtcHR5KCk7XG5cblx0XHRpZihtZnAuc3QubWFpbkNsYXNzKSB7XG5cdFx0XHRjbGFzc2VzVG9SZW1vdmUgKz0gbWZwLnN0Lm1haW5DbGFzcyArICcgJztcblx0XHR9XG5cblx0XHRtZnAuX3JlbW92ZUNsYXNzRnJvbU1GUChjbGFzc2VzVG9SZW1vdmUpO1xuXG5cdFx0aWYobWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0dmFyIHdpbmRvd1N0eWxlcyA9IHttYXJnaW5SaWdodDogJyd9O1xuXHRcdFx0aWYobWZwLmlzSUU3KSB7XG5cdFx0XHRcdCQoJ2JvZHksIGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93U3R5bGVzLm92ZXJmbG93ID0gJyc7XG5cdFx0XHR9XG5cdFx0XHQkKCdodG1sJykuY3NzKHdpbmRvd1N0eWxlcyk7XG5cdFx0fVxuXHRcdFxuXHRcdF9kb2N1bWVudC5vZmYoJ2tleXVwJyArIEVWRU5UX05TICsgJyBmb2N1c2luJyArIEVWRU5UX05TKTtcblx0XHRtZnAuZXYub2ZmKEVWRU5UX05TKTtcblxuXHRcdC8vIGNsZWFuIHVwIERPTSBlbGVtZW50cyB0aGF0IGFyZW4ndCByZW1vdmVkXG5cdFx0bWZwLndyYXAuYXR0cignY2xhc3MnLCAnbWZwLXdyYXAnKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xuXHRcdG1mcC5iZ092ZXJsYXkuYXR0cignY2xhc3MnLCAnbWZwLWJnJyk7XG5cdFx0bWZwLmNvbnRhaW5lci5hdHRyKCdjbGFzcycsICdtZnAtY29udGFpbmVyJyk7XG5cblx0XHQvLyByZW1vdmUgY2xvc2UgYnV0dG9uIGZyb20gdGFyZ2V0IGVsZW1lbnRcblx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmXG5cdFx0KCFtZnAuc3QuY2xvc2VCdG5JbnNpZGUgfHwgbWZwLmN1cnJUZW1wbGF0ZVttZnAuY3Vyckl0ZW0udHlwZV0gPT09IHRydWUpKSB7XG5cdFx0XHRpZihtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuKVxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuLmRldGFjaCgpO1xuXHRcdH1cblxuXG5cdFx0aWYobWZwLnN0LmF1dG9Gb2N1c0xhc3QgJiYgbWZwLl9sYXN0Rm9jdXNlZEVsKSB7XG5cdFx0XHQkKG1mcC5fbGFzdEZvY3VzZWRFbCkuZm9jdXMoKTsgLy8gcHV0IHRhYiBmb2N1cyBiYWNrXG5cdFx0fVxuXHRcdG1mcC5jdXJySXRlbSA9IG51bGw7XHRcblx0XHRtZnAuY29udGVudCA9IG51bGw7XG5cdFx0bWZwLmN1cnJUZW1wbGF0ZSA9IG51bGw7XG5cdFx0bWZwLnByZXZIZWlnaHQgPSAwO1xuXG5cdFx0X21mcFRyaWdnZXIoQUZURVJfQ0xPU0VfRVZFTlQpO1xuXHR9LFxuXHRcblx0dXBkYXRlU2l6ZTogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cblx0XHRpZihtZnAuaXNJT1MpIHtcblx0XHRcdC8vIGZpeGVzIGlPUyBuYXYgYmFycyBodHRwczovL2dpdGh1Yi5jb20vZGltc2VtZW5vdi9NYWduaWZpYy1Qb3B1cC9pc3N1ZXMvMlxuXHRcdFx0dmFyIHpvb21MZXZlbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAvIHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdFx0dmFyIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAqIHpvb21MZXZlbDtcblx0XHRcdG1mcC53cmFwLmNzcygnaGVpZ2h0JywgaGVpZ2h0KTtcblx0XHRcdG1mcC53SCA9IGhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLndIID0gd2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCk7XG5cdFx0fVxuXHRcdC8vIEZpeGVzICM4NDogcG9wdXAgaW5jb3JyZWN0bHkgcG9zaXRpb25lZCB3aXRoIHBvc2l0aW9uOnJlbGF0aXZlIG9uIGJvZHlcblx0XHRpZighbWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0bWZwLndyYXAuY3NzKCdoZWlnaHQnLCBtZnAud0gpO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKCdSZXNpemUnKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXQgY29udGVudCBvZiBwb3B1cCBiYXNlZCBvbiBjdXJyZW50IGluZGV4XG5cdCAqL1xuXHR1cGRhdGVJdGVtSFRNTDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbbWZwLmluZGV4XTtcblxuXHRcdC8vIERldGFjaCBhbmQgcGVyZm9ybSBtb2RpZmljYXRpb25zXG5cdFx0bWZwLmNvbnRlbnRDb250YWluZXIuZGV0YWNoKCk7XG5cblx0XHRpZihtZnAuY29udGVudClcblx0XHRcdG1mcC5jb250ZW50LmRldGFjaCgpO1xuXG5cdFx0aWYoIWl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRpdGVtID0gbWZwLnBhcnNlRWwoIG1mcC5pbmRleCApO1xuXHRcdH1cblxuXHRcdHZhciB0eXBlID0gaXRlbS50eXBlO1xuXG5cdFx0X21mcFRyaWdnZXIoJ0JlZm9yZUNoYW5nZScsIFttZnAuY3Vyckl0ZW0gPyBtZnAuY3Vyckl0ZW0udHlwZSA6ICcnLCB0eXBlXSk7XG5cdFx0Ly8gQmVmb3JlQ2hhbmdlIGV2ZW50IHdvcmtzIGxpa2Ugc286XG5cdFx0Ly8gX21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkgeyB9KTtcblxuXHRcdG1mcC5jdXJySXRlbSA9IGl0ZW07XG5cblx0XHRpZighbWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSkge1xuXHRcdFx0dmFyIG1hcmt1cCA9IG1mcC5zdFt0eXBlXSA/IG1mcC5zdFt0eXBlXS5tYXJrdXAgOiBmYWxzZTtcblxuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBtYXJrdXBcblx0XHRcdF9tZnBUcmlnZ2VyKCdGaXJzdE1hcmt1cFBhcnNlJywgbWFya3VwKTtcblxuXHRcdFx0aWYobWFya3VwKSB7XG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0gPSAkKG1hcmt1cCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBtYXJrdXAgZm91bmQgd2UganVzdCBkZWZpbmUgdGhhdCB0ZW1wbGF0ZSBpcyBwYXJzZWRcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoX3ByZXZDb250ZW50VHlwZSAmJiBfcHJldkNvbnRlbnRUeXBlICE9PSBpdGVtLnR5cGUpIHtcblx0XHRcdG1mcC5jb250YWluZXIucmVtb3ZlQ2xhc3MoJ21mcC0nK19wcmV2Q29udGVudFR5cGUrJy1ob2xkZXInKTtcblx0XHR9XG5cblx0XHR2YXIgbmV3Q29udGVudCA9IG1mcFsnZ2V0JyArIHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpXShpdGVtLCBtZnAuY3VyclRlbXBsYXRlW3R5cGVdKTtcblx0XHRtZnAuYXBwZW5kQ29udGVudChuZXdDb250ZW50LCB0eXBlKTtcblxuXHRcdGl0ZW0ucHJlbG9hZGVkID0gdHJ1ZTtcblxuXHRcdF9tZnBUcmlnZ2VyKENIQU5HRV9FVkVOVCwgaXRlbSk7XG5cdFx0X3ByZXZDb250ZW50VHlwZSA9IGl0ZW0udHlwZTtcblxuXHRcdC8vIEFwcGVuZCBjb250YWluZXIgYmFjayBhZnRlciBpdHMgY29udGVudCBjaGFuZ2VkXG5cdFx0bWZwLmNvbnRhaW5lci5wcmVwZW5kKG1mcC5jb250ZW50Q29udGFpbmVyKTtcblxuXHRcdF9tZnBUcmlnZ2VyKCdBZnRlckNoYW5nZScpO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIFNldCBIVE1MIGNvbnRlbnQgb2YgcG9wdXBcblx0ICovXG5cdGFwcGVuZENvbnRlbnQ6IGZ1bmN0aW9uKG5ld0NvbnRlbnQsIHR5cGUpIHtcblx0XHRtZnAuY29udGVudCA9IG5ld0NvbnRlbnQ7XG5cblx0XHRpZihuZXdDb250ZW50KSB7XG5cdFx0XHRpZihtZnAuc3Quc2hvd0Nsb3NlQnRuICYmIG1mcC5zdC5jbG9zZUJ0bkluc2lkZSAmJlxuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlW3R5cGVdID09PSB0cnVlKSB7XG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIG1hcmt1cCwgd2UganVzdCBhcHBlbmQgY2xvc2UgYnV0dG9uIGVsZW1lbnQgaW5zaWRlXG5cdFx0XHRcdGlmKCFtZnAuY29udGVudC5maW5kKCcubWZwLWNsb3NlJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuYXBwZW5kKF9nZXRDbG9zZUJ0bigpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWZwLmNvbnRlbnQgPSBuZXdDb250ZW50O1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuY29udGVudCA9ICcnO1xuXHRcdH1cblxuXHRcdF9tZnBUcmlnZ2VyKEJFRk9SRV9BUFBFTkRfRVZFTlQpO1xuXHRcdG1mcC5jb250YWluZXIuYWRkQ2xhc3MoJ21mcC0nK3R5cGUrJy1ob2xkZXInKTtcblxuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyLmFwcGVuZChtZnAuY29udGVudCk7XG5cdH0sXG5cblxuXHQvKipcblx0ICogQ3JlYXRlcyBNYWduaWZpYyBQb3B1cCBkYXRhIG9iamVjdCBiYXNlZCBvbiBnaXZlbiBkYXRhXG5cdCAqIEBwYXJhbSAge2ludH0gaW5kZXggSW5kZXggb2YgaXRlbSB0byBwYXJzZVxuXHQgKi9cblx0cGFyc2VFbDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF0sXG5cdFx0XHR0eXBlO1xuXG5cdFx0aWYoaXRlbS50YWdOYW1lKSB7XG5cdFx0XHRpdGVtID0geyBlbDogJChpdGVtKSB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0eXBlID0gaXRlbS50eXBlO1xuXHRcdFx0aXRlbSA9IHsgZGF0YTogaXRlbSwgc3JjOiBpdGVtLnNyYyB9O1xuXHRcdH1cblxuXHRcdGlmKGl0ZW0uZWwpIHtcblx0XHRcdHZhciB0eXBlcyA9IG1mcC50eXBlcztcblxuXHRcdFx0Ly8gY2hlY2sgZm9yICdtZnAtVFlQRScgY2xhc3Ncblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiggaXRlbS5lbC5oYXNDbGFzcygnbWZwLScrdHlwZXNbaV0pICkge1xuXHRcdFx0XHRcdHR5cGUgPSB0eXBlc1tpXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpdGVtLnNyYyA9IGl0ZW0uZWwuYXR0cignZGF0YS1tZnAtc3JjJyk7XG5cdFx0XHRpZighaXRlbS5zcmMpIHtcblx0XHRcdFx0aXRlbS5zcmMgPSBpdGVtLmVsLmF0dHIoJ2hyZWYnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpdGVtLnR5cGUgPSB0eXBlIHx8IG1mcC5zdC50eXBlIHx8ICdpbmxpbmUnO1xuXHRcdGl0ZW0uaW5kZXggPSBpbmRleDtcblx0XHRpdGVtLnBhcnNlZCA9IHRydWU7XG5cdFx0bWZwLml0ZW1zW2luZGV4XSA9IGl0ZW07XG5cdFx0X21mcFRyaWdnZXIoJ0VsZW1lbnRQYXJzZScsIGl0ZW0pO1xuXG5cdFx0cmV0dXJuIG1mcC5pdGVtc1tpbmRleF07XG5cdH0sXG5cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgc2luZ2xlIHBvcHVwIG9yIGEgZ3JvdXAgb2YgcG9wdXBzXG5cdCAqL1xuXHRhZGRHcm91cDogZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcblx0XHR2YXIgZUhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRlLm1mcEVsID0gdGhpcztcblx0XHRcdG1mcC5fb3BlbkNsaWNrKGUsIGVsLCBvcHRpb25zKTtcblx0XHR9O1xuXG5cdFx0aWYoIW9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHR9XG5cblx0XHR2YXIgZU5hbWUgPSAnY2xpY2subWFnbmlmaWNQb3B1cCc7XG5cdFx0b3B0aW9ucy5tYWluRWwgPSBlbDtcblxuXHRcdGlmKG9wdGlvbnMuaXRlbXMpIHtcblx0XHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdFx0ZWwub2ZmKGVOYW1lKS5vbihlTmFtZSwgZUhhbmRsZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zLmlzT2JqID0gZmFsc2U7XG5cdFx0XHRpZihvcHRpb25zLmRlbGVnYXRlKSB7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIG9wdGlvbnMuZGVsZWdhdGUgLCBlSGFuZGxlcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHRpb25zLml0ZW1zID0gZWw7XG5cdFx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIGVIYW5kbGVyKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdF9vcGVuQ2xpY2s6IGZ1bmN0aW9uKGUsIGVsLCBvcHRpb25zKSB7XG5cdFx0dmFyIG1pZENsaWNrID0gb3B0aW9ucy5taWRDbGljayAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5taWRDbGljayA6ICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cy5taWRDbGljaztcblxuXG5cdFx0aWYoIW1pZENsaWNrICYmICggZS53aGljaCA9PT0gMiB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuc2hpZnRLZXkgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZGlzYWJsZU9uID0gb3B0aW9ucy5kaXNhYmxlT24gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGlzYWJsZU9uIDogJC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzLmRpc2FibGVPbjtcblxuXHRcdGlmKGRpc2FibGVPbikge1xuXHRcdFx0aWYoJC5pc0Z1bmN0aW9uKGRpc2FibGVPbikpIHtcblx0XHRcdFx0aWYoICFkaXNhYmxlT24uY2FsbChtZnApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgeyAvLyBlbHNlIGl0J3MgbnVtYmVyXG5cdFx0XHRcdGlmKCBfd2luZG93LndpZHRoKCkgPCBkaXNhYmxlT24gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihlLnR5cGUpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0Ly8gVGhpcyB3aWxsIHByZXZlbnQgcG9wdXAgZnJvbSBjbG9zaW5nIGlmIGVsZW1lbnQgaXMgaW5zaWRlIGFuZCBwb3B1cCBpcyBhbHJlYWR5IG9wZW5lZFxuXHRcdFx0aWYobWZwLmlzT3Blbikge1xuXHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG9wdGlvbnMuZWwgPSAkKGUubWZwRWwpO1xuXHRcdGlmKG9wdGlvbnMuZGVsZWdhdGUpIHtcblx0XHRcdG9wdGlvbnMuaXRlbXMgPSBlbC5maW5kKG9wdGlvbnMuZGVsZWdhdGUpO1xuXHRcdH1cblx0XHRtZnAub3BlbihvcHRpb25zKTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRleHQgb24gcHJlbG9hZGVyXG5cdCAqL1xuXHR1cGRhdGVTdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuXG5cdFx0aWYobWZwLnByZWxvYWRlcikge1xuXHRcdFx0aWYoX3ByZXZTdGF0dXMgIT09IHN0YXR1cykge1xuXHRcdFx0XHRtZnAuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdtZnAtcy0nK19wcmV2U3RhdHVzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIXRleHQgJiYgc3RhdHVzID09PSAnbG9hZGluZycpIHtcblx0XHRcdFx0dGV4dCA9IG1mcC5zdC50TG9hZGluZztcblx0XHRcdH1cblxuXHRcdFx0dmFyIGRhdGEgPSB7XG5cdFx0XHRcdHN0YXR1czogc3RhdHVzLFxuXHRcdFx0XHR0ZXh0OiB0ZXh0XG5cdFx0XHR9O1xuXHRcdFx0Ly8gYWxsb3dzIHRvIG1vZGlmeSBzdGF0dXNcblx0XHRcdF9tZnBUcmlnZ2VyKCdVcGRhdGVTdGF0dXMnLCBkYXRhKTtcblxuXHRcdFx0c3RhdHVzID0gZGF0YS5zdGF0dXM7XG5cdFx0XHR0ZXh0ID0gZGF0YS50ZXh0O1xuXG5cdFx0XHRtZnAucHJlbG9hZGVyLmh0bWwodGV4dCk7XG5cblx0XHRcdG1mcC5wcmVsb2FkZXIuZmluZCgnYScpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRtZnAuY29udGFpbmVyLmFkZENsYXNzKCdtZnAtcy0nK3N0YXR1cyk7XG5cdFx0XHRfcHJldlN0YXR1cyA9IHN0YXR1cztcblx0XHR9XG5cdH0sXG5cblxuXHQvKlxuXHRcdFwiUHJpdmF0ZVwiIGhlbHBlcnMgdGhhdCBhcmVuJ3QgcHJpdmF0ZSBhdCBhbGxcblx0ICovXG5cdC8vIENoZWNrIHRvIGNsb3NlIHBvcHVwIG9yIG5vdFxuXHQvLyBcInRhcmdldFwiIGlzIGFuIGVsZW1lbnQgdGhhdCB3YXMgY2xpY2tlZFxuXHRfY2hlY2tJZkNsb3NlOiBmdW5jdGlvbih0YXJnZXQpIHtcblxuXHRcdGlmKCQodGFyZ2V0KS5oYXNDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjbG9zZU9uQ29udGVudCA9IG1mcC5zdC5jbG9zZU9uQ29udGVudENsaWNrO1xuXHRcdHZhciBjbG9zZU9uQmcgPSBtZnAuc3QuY2xvc2VPbkJnQ2xpY2s7XG5cblx0XHRpZihjbG9zZU9uQ29udGVudCAmJiBjbG9zZU9uQmcpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFdlIGNsb3NlIHRoZSBwb3B1cCBpZiBjbGljayBpcyBvbiBjbG9zZSBidXR0b24gb3Igb24gcHJlbG9hZGVyLiBPciBpZiB0aGVyZSBpcyBubyBjb250ZW50LlxuXHRcdFx0aWYoIW1mcC5jb250ZW50IHx8ICQodGFyZ2V0KS5oYXNDbGFzcygnbWZwLWNsb3NlJykgfHwgKG1mcC5wcmVsb2FkZXIgJiYgdGFyZ2V0ID09PSBtZnAucHJlbG9hZGVyWzBdKSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIGNsaWNrIGlzIG91dHNpZGUgdGhlIGNvbnRlbnRcblx0XHRcdGlmKCAgKHRhcmdldCAhPT0gbWZwLmNvbnRlbnRbMF0gJiYgISQuY29udGFpbnMobWZwLmNvbnRlbnRbMF0sIHRhcmdldCkpICApIHtcblx0XHRcdFx0aWYoY2xvc2VPbkJnKSB7XG5cdFx0XHRcdFx0Ly8gbGFzdCBjaGVjaywgaWYgdGhlIGNsaWNrZWQgZWxlbWVudCBpcyBpbiBET00sIChpbiBjYXNlIGl0J3MgcmVtb3ZlZCBvbmNsaWNrKVxuXHRcdFx0XHRcdGlmKCAkLmNvbnRhaW5zKGRvY3VtZW50LCB0YXJnZXQpICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYoY2xvc2VPbkNvbnRlbnQpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXHRfYWRkQ2xhc3NUb01GUDogZnVuY3Rpb24oY05hbWUpIHtcblx0XHRtZnAuYmdPdmVybGF5LmFkZENsYXNzKGNOYW1lKTtcblx0XHRtZnAud3JhcC5hZGRDbGFzcyhjTmFtZSk7XG5cdH0sXG5cdF9yZW1vdmVDbGFzc0Zyb21NRlA6IGZ1bmN0aW9uKGNOYW1lKSB7XG5cdFx0dGhpcy5iZ092ZXJsYXkucmVtb3ZlQ2xhc3MoY05hbWUpO1xuXHRcdG1mcC53cmFwLnJlbW92ZUNsYXNzKGNOYW1lKTtcblx0fSxcblx0X2hhc1Njcm9sbEJhcjogZnVuY3Rpb24od2luSGVpZ2h0KSB7XG5cdFx0cmV0dXJuICggIChtZnAuaXNJRTcgPyBfZG9jdW1lbnQuaGVpZ2h0KCkgOiBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCkgPiAod2luSGVpZ2h0IHx8IF93aW5kb3cuaGVpZ2h0KCkpICk7XG5cdH0sXG5cdF9zZXRGb2N1czogZnVuY3Rpb24oKSB7XG5cdFx0KG1mcC5zdC5mb2N1cyA/IG1mcC5jb250ZW50LmZpbmQobWZwLnN0LmZvY3VzKS5lcSgwKSA6IG1mcC53cmFwKS5mb2N1cygpO1xuXHR9LFxuXHRfb25Gb2N1c0luOiBmdW5jdGlvbihlKSB7XG5cdFx0aWYoIGUudGFyZ2V0ICE9PSBtZnAud3JhcFswXSAmJiAhJC5jb250YWlucyhtZnAud3JhcFswXSwgZS50YXJnZXQpICkge1xuXHRcdFx0bWZwLl9zZXRGb2N1cygpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0X3BhcnNlTWFya3VwOiBmdW5jdGlvbih0ZW1wbGF0ZSwgdmFsdWVzLCBpdGVtKSB7XG5cdFx0dmFyIGFycjtcblx0XHRpZihpdGVtLmRhdGEpIHtcblx0XHRcdHZhbHVlcyA9ICQuZXh0ZW5kKGl0ZW0uZGF0YSwgdmFsdWVzKTtcblx0XHR9XG5cdFx0X21mcFRyaWdnZXIoTUFSS1VQX1BBUlNFX0VWRU5ULCBbdGVtcGxhdGUsIHZhbHVlcywgaXRlbV0gKTtcblxuXHRcdCQuZWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0YXJyID0ga2V5LnNwbGl0KCdfJyk7XG5cdFx0XHRpZihhcnIubGVuZ3RoID4gMSkge1xuXHRcdFx0XHR2YXIgZWwgPSB0ZW1wbGF0ZS5maW5kKEVWRU5UX05TICsgJy0nK2FyclswXSk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHZhciBhdHRyID0gYXJyWzFdO1xuXHRcdFx0XHRcdGlmKGF0dHIgPT09ICdyZXBsYWNlV2l0aCcpIHtcblx0XHRcdFx0XHRcdGlmKGVsWzBdICE9PSB2YWx1ZVswXSkge1xuXHRcdFx0XHRcdFx0XHRlbC5yZXBsYWNlV2l0aCh2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmKGF0dHIgPT09ICdpbWcnKSB7XG5cdFx0XHRcdFx0XHRpZihlbC5pcygnaW1nJykpIHtcblx0XHRcdFx0XHRcdFx0ZWwuYXR0cignc3JjJywgdmFsdWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZWwucmVwbGFjZVdpdGgoICQoJzxpbWc+JykuYXR0cignc3JjJywgdmFsdWUpLmF0dHIoJ2NsYXNzJywgZWwuYXR0cignY2xhc3MnKSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZWwuYXR0cihhcnJbMV0sIHZhbHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGVtcGxhdGUuZmluZChFVkVOVF9OUyArICctJytrZXkpLmh0bWwodmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdF9nZXRTY3JvbGxiYXJTaXplOiBmdW5jdGlvbigpIHtcblx0XHQvLyB0aHggRGF2aWRcblx0XHRpZihtZnAuc2Nyb2xsYmFyU2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0XHRcdHNjcm9sbERpdi5zdHlsZS5jc3NUZXh0ID0gJ3dpZHRoOiA5OXB4OyBoZWlnaHQ6IDk5cHg7IG92ZXJmbG93OiBzY3JvbGw7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAtOTk5OXB4Oyc7XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG5cdFx0XHRtZnAuc2Nyb2xsYmFyU2l6ZSA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcblx0XHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcblx0XHR9XG5cdFx0cmV0dXJuIG1mcC5zY3JvbGxiYXJTaXplO1xuXHR9XG5cbn07IC8qIE1hZ25pZmljUG9wdXAgY29yZSBwcm90b3R5cGUgZW5kICovXG5cblxuXG5cbi8qKlxuICogUHVibGljIHN0YXRpYyBmdW5jdGlvbnNcbiAqL1xuJC5tYWduaWZpY1BvcHVwID0ge1xuXHRpbnN0YW5jZTogbnVsbCxcblx0cHJvdG86IE1hZ25pZmljUG9wdXAucHJvdG90eXBlLFxuXHRtb2R1bGVzOiBbXSxcblxuXHRvcGVuOiBmdW5jdGlvbihvcHRpb25zLCBpbmRleCkge1xuXHRcdF9jaGVja0luc3RhbmNlKCk7XG5cblx0XHRpZighb3B0aW9ucykge1xuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdG9wdGlvbnMuaXNPYmogPSB0cnVlO1xuXHRcdG9wdGlvbnMuaW5kZXggPSBpbmRleCB8fCAwO1xuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlLm9wZW4ob3B0aW9ucyk7XG5cdH0sXG5cblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UgJiYgJC5tYWduaWZpY1BvcHVwLmluc3RhbmNlLmNsb3NlKCk7XG5cdH0sXG5cblx0cmVnaXN0ZXJNb2R1bGU6IGZ1bmN0aW9uKG5hbWUsIG1vZHVsZSkge1xuXHRcdGlmKG1vZHVsZS5vcHRpb25zKSB7XG5cdFx0XHQkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHNbbmFtZV0gPSBtb2R1bGUub3B0aW9ucztcblx0XHR9XG5cdFx0JC5leHRlbmQodGhpcy5wcm90bywgbW9kdWxlLnByb3RvKTtcblx0XHR0aGlzLm1vZHVsZXMucHVzaChuYW1lKTtcblx0fSxcblxuXHRkZWZhdWx0czoge1xuXG5cdFx0Ly8gSW5mbyBhYm91dCBvcHRpb25zIGlzIGluIGRvY3M6XG5cdFx0Ly8gaHR0cDovL2RpbXNlbWVub3YuY29tL3BsdWdpbnMvbWFnbmlmaWMtcG9wdXAvZG9jdW1lbnRhdGlvbi5odG1sI29wdGlvbnNcblxuXHRcdGRpc2FibGVPbjogMCxcblxuXHRcdGtleTogbnVsbCxcblxuXHRcdG1pZENsaWNrOiBmYWxzZSxcblxuXHRcdG1haW5DbGFzczogJycsXG5cblx0XHRwcmVsb2FkZXI6IHRydWUsXG5cblx0XHRmb2N1czogJycsIC8vIENTUyBzZWxlY3RvciBvZiBpbnB1dCB0byBmb2N1cyBhZnRlciBwb3B1cCBpcyBvcGVuZWRcblxuXHRcdGNsb3NlT25Db250ZW50Q2xpY2s6IGZhbHNlLFxuXG5cdFx0Y2xvc2VPbkJnQ2xpY2s6IHRydWUsXG5cblx0XHRjbG9zZUJ0bkluc2lkZTogdHJ1ZSxcblxuXHRcdHNob3dDbG9zZUJ0bjogdHJ1ZSxcblxuXHRcdGVuYWJsZUVzY2FwZUtleTogdHJ1ZSxcblxuXHRcdG1vZGFsOiBmYWxzZSxcblxuXHRcdGFsaWduVG9wOiBmYWxzZSxcblxuXHRcdHJlbW92YWxEZWxheTogMCxcblxuXHRcdHByZXBlbmRUbzogbnVsbCxcblxuXHRcdGZpeGVkQ29udGVudFBvczogJ2F1dG8nLFxuXG5cdFx0Zml4ZWRCZ1BvczogJ2F1dG8nLFxuXG5cdFx0b3ZlcmZsb3dZOiAnYXV0bycsXG5cblx0XHRjbG9zZU1hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWNsb3NlXCI+JiMyMTU7PC9idXR0b24+JyxcblxuXHRcdHRDbG9zZTogJ0Nsb3NlIChFc2MpJyxcblxuXHRcdHRMb2FkaW5nOiAnTG9hZGluZy4uLicsXG5cblx0XHRhdXRvRm9jdXNMYXN0OiB0cnVlXG5cblx0fVxufTtcblxuXG5cbiQuZm4ubWFnbmlmaWNQb3B1cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0X2NoZWNrSW5zdGFuY2UoKTtcblxuXHR2YXIganFFbCA9ICQodGhpcyk7XG5cblx0Ly8gV2UgY2FsbCBzb21lIEFQSSBtZXRob2Qgb2YgZmlyc3QgcGFyYW0gaXMgYSBzdHJpbmdcblx0aWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0aWYob3B0aW9ucyA9PT0gJ29wZW4nKSB7XG5cdFx0XHR2YXIgaXRlbXMsXG5cdFx0XHRcdGl0ZW1PcHRzID0gX2lzSlEgPyBqcUVsLmRhdGEoJ21hZ25pZmljUG9wdXAnKSA6IGpxRWxbMF0ubWFnbmlmaWNQb3B1cCxcblx0XHRcdFx0aW5kZXggPSBwYXJzZUludChhcmd1bWVudHNbMV0sIDEwKSB8fCAwO1xuXG5cdFx0XHRpZihpdGVtT3B0cy5pdGVtcykge1xuXHRcdFx0XHRpdGVtcyA9IGl0ZW1PcHRzLml0ZW1zW2luZGV4XTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW1zID0ganFFbDtcblx0XHRcdFx0aWYoaXRlbU9wdHMuZGVsZWdhdGUpIHtcblx0XHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmZpbmQoaXRlbU9wdHMuZGVsZWdhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGl0ZW1zID0gaXRlbXMuZXEoIGluZGV4ICk7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX29wZW5DbGljayh7bWZwRWw6aXRlbXN9LCBqcUVsLCBpdGVtT3B0cyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKG1mcC5pc09wZW4pXG5cdFx0XHRcdG1mcFtvcHRpb25zXS5hcHBseShtZnAsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIGNsb25lIG9wdGlvbnMgb2JqXG5cdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcblxuXHRcdC8qXG5cdFx0ICogQXMgWmVwdG8gZG9lc24ndCBzdXBwb3J0IC5kYXRhKCkgbWV0aG9kIGZvciBvYmplY3RzXG5cdFx0ICogYW5kIGl0IHdvcmtzIG9ubHkgaW4gbm9ybWFsIGJyb3dzZXJzXG5cdFx0ICogd2UgYXNzaWduIFwib3B0aW9uc1wiIG9iamVjdCBkaXJlY3RseSB0byB0aGUgRE9NIGVsZW1lbnQuIEZUVyFcblx0XHQgKi9cblx0XHRpZihfaXNKUSkge1xuXHRcdFx0anFFbC5kYXRhKCdtYWduaWZpY1BvcHVwJywgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxRWxbMF0ubWFnbmlmaWNQb3B1cCA9IG9wdGlvbnM7XG5cdFx0fVxuXG5cdFx0bWZwLmFkZEdyb3VwKGpxRWwsIG9wdGlvbnMpO1xuXG5cdH1cblx0cmV0dXJuIGpxRWw7XG59O1xuXG4vKj4+Y29yZSovXG5cbi8qPj5pbmxpbmUqL1xuXG52YXIgSU5MSU5FX05TID0gJ2lubGluZScsXG5cdF9oaWRkZW5DbGFzcyxcblx0X2lubGluZVBsYWNlaG9sZGVyLFxuXHRfbGFzdElubGluZUVsZW1lbnQsXG5cdF9wdXRJbmxpbmVFbGVtZW50c0JhY2sgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfbGFzdElubGluZUVsZW1lbnQpIHtcblx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlci5hZnRlciggX2xhc3RJbmxpbmVFbGVtZW50LmFkZENsYXNzKF9oaWRkZW5DbGFzcykgKS5kZXRhY2goKTtcblx0XHRcdF9sYXN0SW5saW5lRWxlbWVudCA9IG51bGw7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoSU5MSU5FX05TLCB7XG5cdG9wdGlvbnM6IHtcblx0XHRoaWRkZW5DbGFzczogJ2hpZGUnLCAvLyB3aWxsIGJlIGFwcGVuZGVkIHdpdGggYG1mcC1gIHByZWZpeFxuXHRcdG1hcmt1cDogJycsXG5cdFx0dE5vdEZvdW5kOiAnQ29udGVudCBub3QgZm91bmQnXG5cdH0sXG5cdHByb3RvOiB7XG5cblx0XHRpbml0SW5saW5lOiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKElOTElORV9OUyk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrSU5MSU5FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGdldElubGluZTogZnVuY3Rpb24oaXRlbSwgdGVtcGxhdGUpIHtcblxuXHRcdFx0X3B1dElubGluZUVsZW1lbnRzQmFjaygpO1xuXG5cdFx0XHRpZihpdGVtLnNyYykge1xuXHRcdFx0XHR2YXIgaW5saW5lU3QgPSBtZnAuc3QuaW5saW5lLFxuXHRcdFx0XHRcdGVsID0gJChpdGVtLnNyYyk7XG5cblx0XHRcdFx0aWYoZWwubGVuZ3RoKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB0YXJnZXQgZWxlbWVudCBoYXMgcGFyZW50IC0gd2UgcmVwbGFjZSBpdCB3aXRoIHBsYWNlaG9sZGVyIGFuZCBwdXQgaXQgYmFjayBhZnRlciBwb3B1cCBpcyBjbG9zZWRcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gZWxbMF0ucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRpZihwYXJlbnQgJiYgcGFyZW50LnRhZ05hbWUpIHtcblx0XHRcdFx0XHRcdGlmKCFfaW5saW5lUGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRcdFx0X2hpZGRlbkNsYXNzID0gaW5saW5lU3QuaGlkZGVuQ2xhc3M7XG5cdFx0XHRcdFx0XHRcdF9pbmxpbmVQbGFjZWhvbGRlciA9IF9nZXRFbChfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdFx0XHRfaGlkZGVuQ2xhc3MgPSAnbWZwLScrX2hpZGRlbkNsYXNzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gcmVwbGFjZSB0YXJnZXQgaW5saW5lIGVsZW1lbnQgd2l0aCBwbGFjZWhvbGRlclxuXHRcdFx0XHRcdFx0X2xhc3RJbmxpbmVFbGVtZW50ID0gZWwuYWZ0ZXIoX2lubGluZVBsYWNlaG9sZGVyKS5kZXRhY2goKS5yZW1vdmVDbGFzcyhfaGlkZGVuQ2xhc3MpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBpbmxpbmVTdC50Tm90Rm91bmQpO1xuXHRcdFx0XHRcdGVsID0gJCgnPGRpdj4nKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGl0ZW0uaW5saW5lRWxlbWVudCA9IGVsO1xuXHRcdFx0XHRyZXR1cm4gZWw7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCB7fSwgaXRlbSk7XG5cdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmlubGluZSovXG5cbi8qPj5hamF4Ki9cbnZhciBBSkFYX05TID0gJ2FqYXgnLFxuXHRfYWpheEN1cixcblx0X3JlbW92ZUFqYXhDdXJzb3IgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfYWpheEN1cikge1xuXHRcdFx0JChkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhfYWpheEN1cik7XG5cdFx0fVxuXHR9LFxuXHRfZGVzdHJveUFqYXhSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblx0XHRpZihtZnAucmVxKSB7XG5cdFx0XHRtZnAucmVxLmFib3J0KCk7XG5cdFx0fVxuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoQUpBWF9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRzZXR0aW5nczogbnVsbCxcblx0XHRjdXJzb3I6ICdtZnAtYWpheC1jdXInLFxuXHRcdHRFcnJvcjogJzxhIGhyZWY9XCIldXJsJVwiPlRoZSBjb250ZW50PC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRBamF4OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKEFKQVhfTlMpO1xuXHRcdFx0X2FqYXhDdXIgPSBtZnAuc3QuYWpheC5jdXJzb3I7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCsnLicrQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0XHRfbWZwT24oJ0JlZm9yZUNoYW5nZS4nICsgQUpBWF9OUywgX2Rlc3Ryb3lBamF4UmVxdWVzdCk7XG5cdFx0fSxcblx0XHRnZXRBamF4OiBmdW5jdGlvbihpdGVtKSB7XG5cblx0XHRcdGlmKF9hamF4Q3VyKSB7XG5cdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoX2FqYXhDdXIpO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdsb2FkaW5nJyk7XG5cblx0XHRcdHZhciBvcHRzID0gJC5leHRlbmQoe1xuXHRcdFx0XHR1cmw6IGl0ZW0uc3JjLFxuXHRcdFx0XHRzdWNjZXNzOiBmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikge1xuXHRcdFx0XHRcdHZhciB0ZW1wID0ge1xuXHRcdFx0XHRcdFx0ZGF0YTpkYXRhLFxuXHRcdFx0XHRcdFx0eGhyOmpxWEhSXG5cdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdQYXJzZUFqYXgnLCB0ZW1wKTtcblxuXHRcdFx0XHRcdG1mcC5hcHBlbmRDb250ZW50KCAkKHRlbXAuZGF0YSksIEFKQVhfTlMgKTtcblxuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblxuXHRcdFx0XHRcdG1mcC5fc2V0Rm9jdXMoKTtcblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRtZnAud3JhcC5hZGRDbGFzcyhSRUFEWV9DTEFTUyk7XG5cdFx0XHRcdFx0fSwgMTYpO1xuXG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdBamF4Q29udGVudEFkZGVkJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRfcmVtb3ZlQWpheEN1cnNvcigpO1xuXHRcdFx0XHRcdGl0ZW0uZmluaXNoZWQgPSBpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBtZnAuc3QuYWpheC50RXJyb3IucmVwbGFjZSgnJXVybCUnLCBpdGVtLnNyYykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZnAuc3QuYWpheC5zZXR0aW5ncyk7XG5cblx0XHRcdG1mcC5yZXEgPSAkLmFqYXgob3B0cyk7XG5cblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+YWpheCovXG5cbi8qPj5pbWFnZSovXG52YXIgX2ltZ0ludGVydmFsLFxuXHRfZ2V0VGl0bGUgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0aWYoaXRlbS5kYXRhICYmIGl0ZW0uZGF0YS50aXRsZSAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0cmV0dXJuIGl0ZW0uZGF0YS50aXRsZTtcblxuXHRcdHZhciBzcmMgPSBtZnAuc3QuaW1hZ2UudGl0bGVTcmM7XG5cblx0XHRpZihzcmMpIHtcblx0XHRcdGlmKCQuaXNGdW5jdGlvbihzcmMpKSB7XG5cdFx0XHRcdHJldHVybiBzcmMuY2FsbChtZnAsIGl0ZW0pO1xuXHRcdFx0fSBlbHNlIGlmKGl0ZW0uZWwpIHtcblx0XHRcdFx0cmV0dXJuIGl0ZW0uZWwuYXR0cihzcmMpIHx8ICcnO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gJyc7XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZSgnaW1hZ2UnLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdG1hcmt1cDogJzxkaXYgY2xhc3M9XCJtZnAtZmlndXJlXCI+Jytcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jbG9zZVwiPjwvZGl2PicrXG5cdFx0XHRcdFx0JzxmaWd1cmU+Jytcblx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWltZ1wiPjwvZGl2PicrXG5cdFx0XHRcdFx0XHQnPGZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtYm90dG9tLWJhclwiPicrXG5cdFx0XHRcdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtdGl0bGVcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNvdW50ZXJcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0XHQnPC9kaXY+Jytcblx0XHRcdFx0XHRcdCc8L2ZpZ2NhcHRpb24+Jytcblx0XHRcdFx0XHQnPC9maWd1cmU+Jytcblx0XHRcdFx0JzwvZGl2PicsXG5cdFx0Y3Vyc29yOiAnbWZwLXpvb20tb3V0LWN1cicsXG5cdFx0dGl0bGVTcmM6ICd0aXRsZScsXG5cdFx0dmVydGljYWxGaXQ6IHRydWUsXG5cdFx0dEVycm9yOiAnPGEgaHJlZj1cIiV1cmwlXCI+VGhlIGltYWdlPC9hPiBjb3VsZCBub3QgYmUgbG9hZGVkLidcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW1nU3QgPSBtZnAuc3QuaW1hZ2UsXG5cdFx0XHRcdG5zID0gJy5pbWFnZSc7XG5cblx0XHRcdG1mcC50eXBlcy5wdXNoKCdpbWFnZScpO1xuXG5cdFx0XHRfbWZwT24oT1BFTl9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5jdXJySXRlbS50eXBlID09PSAnaW1hZ2UnICYmIGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGltZ1N0LmN1cnNvcikge1xuXHRcdFx0XHRcdCQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoaW1nU3QuY3Vyc29yKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfd2luZG93Lm9mZigncmVzaXplJyArIEVWRU5UX05TKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oJ1Jlc2l6ZScrbnMsIG1mcC5yZXNpemVJbWFnZSk7XG5cdFx0XHRpZihtZnAuaXNMb3dJRSkge1xuXHRcdFx0XHRfbWZwT24oJ0FmdGVyQ2hhbmdlJywgbWZwLnJlc2l6ZUltYWdlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlc2l6ZUltYWdlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpdGVtID0gbWZwLmN1cnJJdGVtO1xuXHRcdFx0aWYoIWl0ZW0gfHwgIWl0ZW0uaW1nKSByZXR1cm47XG5cblx0XHRcdGlmKG1mcC5zdC5pbWFnZS52ZXJ0aWNhbEZpdCkge1xuXHRcdFx0XHR2YXIgZGVjciA9IDA7XG5cdFx0XHRcdC8vIGZpeCBib3gtc2l6aW5nIGluIGllNy84XG5cdFx0XHRcdGlmKG1mcC5pc0xvd0lFKSB7XG5cdFx0XHRcdFx0ZGVjciA9IHBhcnNlSW50KGl0ZW0uaW1nLmNzcygncGFkZGluZy10b3AnKSwgMTApICsgcGFyc2VJbnQoaXRlbS5pbWcuY3NzKCdwYWRkaW5nLWJvdHRvbScpLDEwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZy5jc3MoJ21heC1oZWlnaHQnLCBtZnAud0gtZGVjcik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfb25JbWFnZUhhc1NpemU6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdGlmKGl0ZW0uaW1nKSB7XG5cblx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblxuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtLmlzQ2hlY2tpbmdJbWdTaXplID0gZmFsc2U7XG5cblx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlSGFzU2l6ZScsIGl0ZW0pO1xuXG5cdFx0XHRcdGlmKGl0ZW0uaW1nSGlkZGVuKSB7XG5cdFx0XHRcdFx0aWYobWZwLmNvbnRlbnQpXG5cdFx0XHRcdFx0XHRtZnAuY29udGVudC5yZW1vdmVDbGFzcygnbWZwLWxvYWRpbmcnKTtcblxuXHRcdFx0XHRcdGl0ZW0uaW1nSGlkZGVuID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGdW5jdGlvbiB0aGF0IGxvb3BzIHVudGlsIHRoZSBpbWFnZSBoYXMgc2l6ZSB0byBkaXNwbGF5IGVsZW1lbnRzIHRoYXQgcmVseSBvbiBpdCBhc2FwXG5cdFx0ICovXG5cdFx0ZmluZEltYWdlU2l6ZTogZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHR2YXIgY291bnRlciA9IDAsXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdLFxuXHRcdFx0XHRtZnBTZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKGRlbGF5KSB7XG5cblx0XHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIHtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZGVjZWxlcmF0aW5nIGludGVydmFsIHRoYXQgY2hlY2tzIGZvciBzaXplIG9mIGFuIGltYWdlXG5cdFx0XHRcdFx0X2ltZ0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmKGNvdW50ZXIgPiAyMDApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb3VudGVyKys7XG5cdFx0XHRcdFx0XHRpZihjb3VudGVyID09PSAzKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDEwKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZihjb3VudGVyID09PSA0MCkge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCg1MCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY291bnRlciA9PT0gMTAwKSB7XG5cdFx0XHRcdFx0XHRcdG1mcFNldEludGVydmFsKDUwMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgZGVsYXkpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRtZnBTZXRJbnRlcnZhbCgxKTtcblx0XHR9LFxuXG5cdFx0Z2V0SW1hZ2U6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cblx0XHRcdHZhciBndWFyZCA9IDAsXG5cblx0XHRcdFx0Ly8gaW1hZ2UgbG9hZCBjb21wbGV0ZSBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZENvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aWYgKGl0ZW0uaW1nWzBdLmNvbXBsZXRlKSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uaW1nLm9mZignLm1mcGxvYWRlcicpO1xuXG5cdFx0XHRcdFx0XHRcdGlmKGl0ZW0gPT09IG1mcC5jdXJySXRlbSl7XG5cdFx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblxuXHRcdFx0XHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRpdGVtLmxvYWRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdFx0X21mcFRyaWdnZXIoJ0ltYWdlTG9hZENvbXBsZXRlJyk7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBpZiBpbWFnZSBjb21wbGV0ZSBjaGVjayBmYWlscyAyMDAgdGltZXMgKDIwIHNlYyksIHdlIGFzc3VtZSB0aGF0IHRoZXJlIHdhcyBhbiBlcnJvci5cblx0XHRcdFx0XHRcdFx0Z3VhcmQrKztcblx0XHRcdFx0XHRcdFx0aWYoZ3VhcmQgPCAyMDApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KG9uTG9hZENvbXBsZXRlLDEwMCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0b25Mb2FkRXJyb3IoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBpbWFnZSBlcnJvciBoYW5kbGVyXG5cdFx0XHRcdG9uTG9hZEVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcub2ZmKCcubWZwbG9hZGVyJyk7XG5cdFx0XHRcdFx0XHRpZihpdGVtID09PSBtZnAuY3Vyckl0ZW0pe1xuXHRcdFx0XHRcdFx0XHRtZnAuX29uSW1hZ2VIYXNTaXplKGl0ZW0pO1xuXHRcdFx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIGltZ1N0LnRFcnJvci5yZXBsYWNlKCcldXJsJScsIGl0ZW0uc3JjKSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0aW1nU3QgPSBtZnAuc3QuaW1hZ2U7XG5cblxuXHRcdFx0dmFyIGVsID0gdGVtcGxhdGUuZmluZCgnLm1mcC1pbWcnKTtcblx0XHRcdGlmKGVsLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cdFx0XHRcdGltZy5jbGFzc05hbWUgPSAnbWZwLWltZyc7XG5cdFx0XHRcdGlmKGl0ZW0uZWwgJiYgaXRlbS5lbC5maW5kKCdpbWcnKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRpbWcuYWx0ID0gaXRlbS5lbC5maW5kKCdpbWcnKS5hdHRyKCdhbHQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtLmltZyA9ICQoaW1nKS5vbignbG9hZC5tZnBsb2FkZXInLCBvbkxvYWRDb21wbGV0ZSkub24oJ2Vycm9yLm1mcGxvYWRlcicsIG9uTG9hZEVycm9yKTtcblx0XHRcdFx0aW1nLnNyYyA9IGl0ZW0uc3JjO1xuXG5cdFx0XHRcdC8vIHdpdGhvdXQgY2xvbmUoKSBcImVycm9yXCIgZXZlbnQgaXMgbm90IGZpcmluZyB3aGVuIElNRyBpcyByZXBsYWNlZCBieSBuZXcgSU1HXG5cdFx0XHRcdC8vIFRPRE86IGZpbmQgYSB3YXkgdG8gYXZvaWQgc3VjaCBjbG9uaW5nXG5cdFx0XHRcdGlmKGVsLmlzKCdpbWcnKSkge1xuXHRcdFx0XHRcdGl0ZW0uaW1nID0gaXRlbS5pbWcuY2xvbmUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGltZyA9IGl0ZW0uaW1nWzBdO1xuXHRcdFx0XHRpZihpbWcubmF0dXJhbFdpZHRoID4gMCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZighaW1nLndpZHRoKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwge1xuXHRcdFx0XHR0aXRsZTogX2dldFRpdGxlKGl0ZW0pLFxuXHRcdFx0XHRpbWdfcmVwbGFjZVdpdGg6IGl0ZW0uaW1nXG5cdFx0XHR9LCBpdGVtKTtcblxuXHRcdFx0bWZwLnJlc2l6ZUltYWdlKCk7XG5cblx0XHRcdGlmKGl0ZW0uaGFzU2l6ZSkge1xuXHRcdFx0XHRpZihfaW1nSW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblxuXHRcdFx0XHRpZihpdGVtLmxvYWRFcnJvcikge1xuXHRcdFx0XHRcdHRlbXBsYXRlLmFkZENsYXNzKCdtZnAtbG9hZGluZycpO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgaW1nU3QudEVycm9yLnJlcGxhY2UoJyV1cmwlJywgaXRlbS5zcmMpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGVtcGxhdGUucmVtb3ZlQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0XHR9XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2xvYWRpbmcnKTtcblx0XHRcdGl0ZW0ubG9hZGluZyA9IHRydWU7XG5cblx0XHRcdGlmKCFpdGVtLmhhc1NpemUpIHtcblx0XHRcdFx0aXRlbS5pbWdIaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR0ZW1wbGF0ZS5hZGRDbGFzcygnbWZwLWxvYWRpbmcnKTtcblx0XHRcdFx0bWZwLmZpbmRJbWFnZVNpemUoaXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+aW1hZ2UqL1xuXG4vKj4+em9vbSovXG52YXIgaGFzTW96VHJhbnNmb3JtLFxuXHRnZXRIYXNNb3pUcmFuc2Zvcm0gPSBmdW5jdGlvbigpIHtcblx0XHRpZihoYXNNb3pUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0aGFzTW96VHJhbnNmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRyZXR1cm4gaGFzTW96VHJhbnNmb3JtO1xuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoJ3pvb20nLCB7XG5cblx0b3B0aW9uczoge1xuXHRcdGVuYWJsZWQ6IGZhbHNlLFxuXHRcdGVhc2luZzogJ2Vhc2UtaW4tb3V0Jyxcblx0XHRkdXJhdGlvbjogMzAwLFxuXHRcdG9wZW5lcjogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIGVsZW1lbnQuaXMoJ2ltZycpID8gZWxlbWVudCA6IGVsZW1lbnQuZmluZCgnaW1nJyk7XG5cdFx0fVxuXHR9LFxuXG5cdHByb3RvOiB7XG5cblx0XHRpbml0Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgem9vbVN0ID0gbWZwLnN0Lnpvb20sXG5cdFx0XHRcdG5zID0gJy56b29tJyxcblx0XHRcdFx0aW1hZ2U7XG5cblx0XHRcdGlmKCF6b29tU3QuZW5hYmxlZCB8fCAhbWZwLnN1cHBvcnRzVHJhbnNpdGlvbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkdXJhdGlvbiA9IHpvb21TdC5kdXJhdGlvbixcblx0XHRcdFx0Z2V0RWxUb0FuaW1hdGUgPSBmdW5jdGlvbihpbWFnZSkge1xuXHRcdFx0XHRcdHZhciBuZXdJbWcgPSBpbWFnZS5jbG9uZSgpLnJlbW92ZUF0dHIoJ3N0eWxlJykucmVtb3ZlQXR0cignY2xhc3MnKS5hZGRDbGFzcygnbWZwLWFuaW1hdGVkLWltYWdlJyksXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uID0gJ2FsbCAnKyh6b29tU3QuZHVyYXRpb24vMTAwMCkrJ3MgJyArIHpvb21TdC5lYXNpbmcsXG5cdFx0XHRcdFx0XHRjc3NPYmogPSB7XG5cdFx0XHRcdFx0XHRcdHBvc2l0aW9uOiAnZml4ZWQnLFxuXHRcdFx0XHRcdFx0XHR6SW5kZXg6IDk5OTksXG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0XHRcdFx0Jy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSc6ICdoaWRkZW4nXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0dCA9ICd0cmFuc2l0aW9uJztcblxuXHRcdFx0XHRcdGNzc09ialsnLXdlYmtpdC0nK3RdID0gY3NzT2JqWyctbW96LScrdF0gPSBjc3NPYmpbJy1vLScrdF0gPSBjc3NPYmpbdF0gPSB0cmFuc2l0aW9uO1xuXG5cdFx0XHRcdFx0bmV3SW1nLmNzcyhjc3NPYmopO1xuXHRcdFx0XHRcdHJldHVybiBuZXdJbWc7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNob3dNYWluQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9wZW5UaW1lb3V0LFxuXHRcdFx0XHRhbmltYXRlZEltZztcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJytucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0Ly8gQmFzaWNhbGx5LCBhbGwgY29kZSBiZWxvdyBkb2VzIGlzIGNsb25lcyBleGlzdGluZyBpbWFnZSwgcHV0cyBpbiBvbiB0b3Agb2YgdGhlIGN1cnJlbnQgb25lIGFuZCBhbmltYXRlZCBpdFxuXG5cdFx0XHRcdFx0aW1hZ2UgPSBtZnAuX2dldEl0ZW1Ub1pvb20oKTtcblxuXHRcdFx0XHRcdGlmKCFpbWFnZSkge1xuXHRcdFx0XHRcdFx0c2hvd01haW5Db250ZW50KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cblx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCkgKTtcblxuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cblx0XHRcdFx0XHRvcGVuVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCB0cnVlICkgKTtcblx0XHRcdFx0XHRcdG9wZW5UaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0XHRzaG93TWFpbkNvbnRlbnQoKTtcblxuXHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0XHRcdGltYWdlID0gYW5pbWF0ZWRJbWcgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdab29tQW5pbWF0aW9uRW5kZWQnKTtcblx0XHRcdFx0XHRcdFx0fSwgMTYpOyAvLyBhdm9pZCBibGluayB3aGVuIHN3aXRjaGluZyBpbWFnZXNcblxuXHRcdFx0XHRcdFx0fSwgZHVyYXRpb24pOyAvLyB0aGlzIHRpbWVvdXQgZXF1YWxzIGFuaW1hdGlvbiBkdXJhdGlvblxuXG5cdFx0XHRcdFx0fSwgMTYpOyAvLyBieSBhZGRpbmcgdGhpcyB0aW1lb3V0IHdlIGF2b2lkIHNob3J0IGdsaXRjaCBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvblxuXG5cblx0XHRcdFx0XHQvLyBMb3RzIG9mIHRpbWVvdXRzLi4uXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0X21mcE9uKEJFRk9SRV9DTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChvcGVuVGltZW91dCk7XG5cblx0XHRcdFx0XHRtZnAuc3QucmVtb3ZhbERlbGF5ID0gZHVyYXRpb247XG5cblx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdGltYWdlID0gbWZwLl9nZXRJdGVtVG9ab29tKCk7XG5cdFx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcgPSBnZXRFbFRvQW5pbWF0ZShpbWFnZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCh0cnVlKSApO1xuXHRcdFx0XHRcdG1mcC53cmFwLmFwcGVuZChhbmltYXRlZEltZyk7XG5cdFx0XHRcdFx0bWZwLmNvbnRlbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQoKSApO1xuXHRcdFx0XHRcdH0sIDE2KTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLl9hbGxvd1pvb20oKSkge1xuXHRcdFx0XHRcdHNob3dNYWluQ29udGVudCgpO1xuXHRcdFx0XHRcdGlmKGFuaW1hdGVkSW1nKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5yZW1vdmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aW1hZ2UgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0X2FsbG93Wm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gbWZwLmN1cnJJdGVtLnR5cGUgPT09ICdpbWFnZSc7XG5cdFx0fSxcblxuXHRcdF9nZXRJdGVtVG9ab29tOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKG1mcC5jdXJySXRlbS5oYXNTaXplKSB7XG5cdFx0XHRcdHJldHVybiBtZnAuY3Vyckl0ZW0uaW1nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBHZXQgZWxlbWVudCBwb3N0aW9uIHJlbGF0aXZlIHRvIHZpZXdwb3J0XG5cdFx0X2dldE9mZnNldDogZnVuY3Rpb24oaXNMYXJnZSkge1xuXHRcdFx0dmFyIGVsO1xuXHRcdFx0aWYoaXNMYXJnZSkge1xuXHRcdFx0XHRlbCA9IG1mcC5jdXJySXRlbS5pbWc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbCA9IG1mcC5zdC56b29tLm9wZW5lcihtZnAuY3Vyckl0ZW0uZWwgfHwgbWZwLmN1cnJJdGVtKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG9mZnNldCA9IGVsLm9mZnNldCgpO1xuXHRcdFx0dmFyIHBhZGRpbmdUb3AgPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctdG9wJyksMTApO1xuXHRcdFx0dmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUludChlbC5jc3MoJ3BhZGRpbmctYm90dG9tJyksMTApO1xuXHRcdFx0b2Zmc2V0LnRvcCAtPSAoICQod2luZG93KS5zY3JvbGxUb3AoKSAtIHBhZGRpbmdUb3AgKTtcblxuXG5cdFx0XHQvKlxuXG5cdFx0XHRBbmltYXRpbmcgbGVmdCArIHRvcCArIHdpZHRoL2hlaWdodCBsb29rcyBnbGl0Y2h5IGluIEZpcmVmb3gsIGJ1dCBwZXJmZWN0IGluIENocm9tZS4gQW5kIHZpY2UtdmVyc2EuXG5cblx0XHRcdCAqL1xuXHRcdFx0dmFyIG9iaiA9IHtcblx0XHRcdFx0d2lkdGg6IGVsLndpZHRoKCksXG5cdFx0XHRcdC8vIGZpeCBaZXB0byBoZWlnaHQrcGFkZGluZyBpc3N1ZVxuXHRcdFx0XHRoZWlnaHQ6IChfaXNKUSA/IGVsLmlubmVySGVpZ2h0KCkgOiBlbFswXS5vZmZzZXRIZWlnaHQpIC0gcGFkZGluZ0JvdHRvbSAtIHBhZGRpbmdUb3Bcblx0XHRcdH07XG5cblx0XHRcdC8vIEkgaGF0ZSB0byBkbyB0aGlzLCBidXQgdGhlcmUgaXMgbm8gYW5vdGhlciBvcHRpb25cblx0XHRcdGlmKCBnZXRIYXNNb3pUcmFuc2Zvcm0oKSApIHtcblx0XHRcdFx0b2JqWyctbW96LXRyYW5zZm9ybSddID0gb2JqWyd0cmFuc2Zvcm0nXSA9ICd0cmFuc2xhdGUoJyArIG9mZnNldC5sZWZ0ICsgJ3B4LCcgKyBvZmZzZXQudG9wICsgJ3B4KSc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvYmoubGVmdCA9IG9mZnNldC5sZWZ0O1xuXHRcdFx0XHRvYmoudG9wID0gb2Zmc2V0LnRvcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmo7XG5cdFx0fVxuXG5cdH1cbn0pO1xuXG5cblxuLyo+Pnpvb20qL1xuXG4vKj4+aWZyYW1lKi9cblxudmFyIElGUkFNRV9OUyA9ICdpZnJhbWUnLFxuXHRfZW1wdHlQYWdlID0gJy8vYWJvdXQ6YmxhbmsnLFxuXG5cdF9maXhJZnJhbWVCdWdzID0gZnVuY3Rpb24oaXNTaG93aW5nKSB7XG5cdFx0aWYobWZwLmN1cnJUZW1wbGF0ZVtJRlJBTUVfTlNdKSB7XG5cdFx0XHR2YXIgZWwgPSBtZnAuY3VyclRlbXBsYXRlW0lGUkFNRV9OU10uZmluZCgnaWZyYW1lJyk7XG5cdFx0XHRpZihlbC5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gcmVzZXQgc3JjIGFmdGVyIHRoZSBwb3B1cCBpcyBjbG9zZWQgdG8gYXZvaWQgXCJ2aWRlbyBrZWVwcyBwbGF5aW5nIGFmdGVyIHBvcHVwIGlzIGNsb3NlZFwiIGJ1Z1xuXHRcdFx0XHRpZighaXNTaG93aW5nKSB7XG5cdFx0XHRcdFx0ZWxbMF0uc3JjID0gX2VtcHR5UGFnZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElFOCBibGFjayBzY3JlZW4gYnVnIGZpeFxuXHRcdFx0XHRpZihtZnAuaXNJRTgpIHtcblx0XHRcdFx0XHRlbC5jc3MoJ2Rpc3BsYXknLCBpc1Nob3dpbmcgPyAnYmxvY2snIDogJ25vbmUnKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKElGUkFNRV9OUywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRtYXJrdXA6ICc8ZGl2IGNsYXNzPVwibWZwLWlmcmFtZS1zY2FsZXJcIj4nK1xuXHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWNsb3NlXCI+PC9kaXY+Jytcblx0XHRcdFx0XHQnPGlmcmFtZSBjbGFzcz1cIm1mcC1pZnJhbWVcIiBzcmM9XCIvL2Fib3V0OmJsYW5rXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPicrXG5cdFx0XHRcdCc8L2Rpdj4nLFxuXG5cdFx0c3JjQWN0aW9uOiAnaWZyYW1lX3NyYycsXG5cblx0XHQvLyB3ZSBkb24ndCBjYXJlIGFuZCBzdXBwb3J0IG9ubHkgb25lIGRlZmF1bHQgdHlwZSBvZiBVUkwgYnkgZGVmYXVsdFxuXHRcdHBhdHRlcm5zOiB7XG5cdFx0XHR5b3V0dWJlOiB7XG5cdFx0XHRcdGluZGV4OiAneW91dHViZS5jb20nLFxuXHRcdFx0XHRpZDogJ3Y9Jyxcblx0XHRcdFx0c3JjOiAnLy93d3cueW91dHViZS5jb20vZW1iZWQvJWlkJT9hdXRvcGxheT0xJ1xuXHRcdFx0fSxcblx0XHRcdHZpbWVvOiB7XG5cdFx0XHRcdGluZGV4OiAndmltZW8uY29tLycsXG5cdFx0XHRcdGlkOiAnLycsXG5cdFx0XHRcdHNyYzogJy8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8laWQlP2F1dG9wbGF5PTEnXG5cdFx0XHR9LFxuXHRcdFx0Z21hcHM6IHtcblx0XHRcdFx0aW5kZXg6ICcvL21hcHMuZ29vZ2xlLicsXG5cdFx0XHRcdHNyYzogJyVpZCUmb3V0cHV0PWVtYmVkJ1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRJZnJhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLnR5cGVzLnB1c2goSUZSQU1FX05TKTtcblxuXHRcdFx0X21mcE9uKCdCZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbihlLCBwcmV2VHlwZSwgbmV3VHlwZSkge1xuXHRcdFx0XHRpZihwcmV2VHlwZSAhPT0gbmV3VHlwZSkge1xuXHRcdFx0XHRcdGlmKHByZXZUeXBlID09PSBJRlJBTUVfTlMpIHtcblx0XHRcdFx0XHRcdF9maXhJZnJhbWVCdWdzKCk7IC8vIGlmcmFtZSBpZiByZW1vdmVkXG5cdFx0XHRcdFx0fSBlbHNlIGlmKG5ld1R5cGUgPT09IElGUkFNRV9OUykge1xuXHRcdFx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3ModHJ1ZSk7IC8vIGlmcmFtZSBpcyBzaG93aW5nXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9Ly8gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gaWZyYW1lIHNvdXJjZSBpcyBzd2l0Y2hlZCwgZG9uJ3QgZG8gYW55dGhpbmdcblx0XHRcdFx0Ly99XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UICsgJy4nICsgSUZSQU1FX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2ZpeElmcmFtZUJ1Z3MoKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRnZXRJZnJhbWU6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cdFx0XHR2YXIgZW1iZWRTcmMgPSBpdGVtLnNyYztcblx0XHRcdHZhciBpZnJhbWVTdCA9IG1mcC5zdC5pZnJhbWU7XG5cblx0XHRcdCQuZWFjaChpZnJhbWVTdC5wYXR0ZXJucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVtYmVkU3JjLmluZGV4T2YoIHRoaXMuaW5kZXggKSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYodGhpcy5pZCkge1xuXHRcdFx0XHRcdFx0aWYodHlwZW9mIHRoaXMuaWQgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0XHRcdGVtYmVkU3JjID0gZW1iZWRTcmMuc3Vic3RyKGVtYmVkU3JjLmxhc3RJbmRleE9mKHRoaXMuaWQpK3RoaXMuaWQubGVuZ3RoLCBlbWJlZFNyYy5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZW1iZWRTcmMgPSB0aGlzLmlkLmNhbGwoIHRoaXMsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVtYmVkU3JjID0gdGhpcy5zcmMucmVwbGFjZSgnJWlkJScsIGVtYmVkU3JjICk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBkYXRhT2JqID0ge307XG5cdFx0XHRpZihpZnJhbWVTdC5zcmNBY3Rpb24pIHtcblx0XHRcdFx0ZGF0YU9ialtpZnJhbWVTdC5zcmNBY3Rpb25dID0gZW1iZWRTcmM7XG5cdFx0XHR9XG5cdFx0XHRtZnAuX3BhcnNlTWFya3VwKHRlbXBsYXRlLCBkYXRhT2JqLCBpdGVtKTtcblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygncmVhZHknKTtcblxuXHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdH1cblx0fVxufSk7XG5cblxuXG4vKj4+aWZyYW1lKi9cblxuLyo+PmdhbGxlcnkqL1xuLyoqXG4gKiBHZXQgbG9vcGVkIGluZGV4IGRlcGVuZGluZyBvbiBudW1iZXIgb2Ygc2xpZGVzXG4gKi9cbnZhciBfZ2V0TG9vcGVkSWQgPSBmdW5jdGlvbihpbmRleCkge1xuXHRcdHZhciBudW1TbGlkZXMgPSBtZnAuaXRlbXMubGVuZ3RoO1xuXHRcdGlmKGluZGV4ID4gbnVtU2xpZGVzIC0gMSkge1xuXHRcdFx0cmV0dXJuIGluZGV4IC0gbnVtU2xpZGVzO1xuXHRcdH0gZWxzZSAgaWYoaW5kZXggPCAwKSB7XG5cdFx0XHRyZXR1cm4gbnVtU2xpZGVzICsgaW5kZXg7XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleDtcblx0fSxcblx0X3JlcGxhY2VDdXJyVG90YWwgPSBmdW5jdGlvbih0ZXh0LCBjdXJyLCB0b3RhbCkge1xuXHRcdHJldHVybiB0ZXh0LnJlcGxhY2UoLyVjdXJyJS9naSwgY3VyciArIDEpLnJlcGxhY2UoLyV0b3RhbCUvZ2ksIHRvdGFsKTtcblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKCdnYWxsZXJ5Jywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRhcnJvd01hcmt1cDogJzxidXR0b24gdGl0bGU9XCIldGl0bGUlXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwibWZwLWFycm93IG1mcC1hcnJvdy0lZGlyJVwiPjwvYnV0dG9uPicsXG5cdFx0cHJlbG9hZDogWzAsMl0sXG5cdFx0bmF2aWdhdGVCeUltZ0NsaWNrOiB0cnVlLFxuXHRcdGFycm93czogdHJ1ZSxcblxuXHRcdHRQcmV2OiAnUHJldmlvdXMgKExlZnQgYXJyb3cga2V5KScsXG5cdFx0dE5leHQ6ICdOZXh0IChSaWdodCBhcnJvdyBrZXkpJyxcblx0XHR0Q291bnRlcjogJyVjdXJyJSBvZiAldG90YWwlJ1xuXHR9LFxuXG5cdHByb3RvOiB7XG5cdFx0aW5pdEdhbGxlcnk6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgZ1N0ID0gbWZwLnN0LmdhbGxlcnksXG5cdFx0XHRcdG5zID0gJy5tZnAtZ2FsbGVyeSc7XG5cblx0XHRcdG1mcC5kaXJlY3Rpb24gPSB0cnVlOyAvLyB0cnVlIC0gbmV4dCwgZmFsc2UgLSBwcmV2XG5cblx0XHRcdGlmKCFnU3QgfHwgIWdTdC5lbmFibGVkICkgcmV0dXJuIGZhbHNlO1xuXG5cdFx0XHRfd3JhcENsYXNzZXMgKz0gJyBtZnAtZ2FsbGVyeSc7XG5cblx0XHRcdF9tZnBPbihPUEVOX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRpZihnU3QubmF2aWdhdGVCeUltZ0NsaWNrKSB7XG5cdFx0XHRcdFx0bWZwLndyYXAub24oJ2NsaWNrJytucywgJy5tZnAtaW1nJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZihtZnAuaXRlbXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfZG9jdW1lbnQub24oJ2tleWRvd24nK25zLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0aWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcblx0XHRcdFx0XHRcdG1mcC5wcmV2KCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XG5cdFx0XHRcdFx0XHRtZnAubmV4dCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdVcGRhdGVTdGF0dXMnK25zLCBmdW5jdGlvbihlLCBkYXRhKSB7XG5cdFx0XHRcdGlmKGRhdGEudGV4dCkge1xuXHRcdFx0XHRcdGRhdGEudGV4dCA9IF9yZXBsYWNlQ3VyclRvdGFsKGRhdGEudGV4dCwgbWZwLmN1cnJJdGVtLmluZGV4LCBtZnAuaXRlbXMubGVuZ3RoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihNQVJLVVBfUEFSU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKGUsIGVsZW1lbnQsIHZhbHVlcywgaXRlbSkge1xuXHRcdFx0XHR2YXIgbCA9IG1mcC5pdGVtcy5sZW5ndGg7XG5cdFx0XHRcdHZhbHVlcy5jb3VudGVyID0gbCA+IDEgPyBfcmVwbGFjZUN1cnJUb3RhbChnU3QudENvdW50ZXIsIGl0ZW0uaW5kZXgsIGwpIDogJyc7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdCdWlsZENvbnRyb2xzJyArIG5zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYobWZwLml0ZW1zLmxlbmd0aCA+IDEgJiYgZ1N0LmFycm93cyAmJiAhbWZwLmFycm93TGVmdCkge1xuXHRcdFx0XHRcdHZhciBtYXJrdXAgPSBnU3QuYXJyb3dNYXJrdXAsXG5cdFx0XHRcdFx0XHRhcnJvd0xlZnQgPSBtZnAuYXJyb3dMZWZ0ID0gJCggbWFya3VwLnJlcGxhY2UoLyV0aXRsZSUvZ2ksIGdTdC50UHJldikucmVwbGFjZSgvJWRpciUvZ2ksICdsZWZ0JykgKS5hZGRDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKSxcblx0XHRcdFx0XHRcdGFycm93UmlnaHQgPSBtZnAuYXJyb3dSaWdodCA9ICQoIG1hcmt1cC5yZXBsYWNlKC8ldGl0bGUlL2dpLCBnU3QudE5leHQpLnJlcGxhY2UoLyVkaXIlL2dpLCAncmlnaHQnKSApLmFkZENsYXNzKFBSRVZFTlRfQ0xPU0VfQ0xBU1MpO1xuXG5cdFx0XHRcdFx0YXJyb3dMZWZ0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLnByZXYoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRhcnJvd1JpZ2h0LmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdG1mcC5jb250YWluZXIuYXBwZW5kKGFycm93TGVmdC5hZGQoYXJyb3dSaWdodCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKENIQU5HRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fcHJlbG9hZFRpbWVvdXQpIGNsZWFyVGltZW91dChtZnAuX3ByZWxvYWRUaW1lb3V0KTtcblxuXHRcdFx0XHRtZnAuX3ByZWxvYWRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZnAucHJlbG9hZE5lYXJieUltYWdlcygpO1xuXHRcdFx0XHRcdG1mcC5fcHJlbG9hZFRpbWVvdXQgPSBudWxsO1xuXHRcdFx0XHR9LCAxNik7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfZG9jdW1lbnQub2ZmKG5zKTtcblx0XHRcdFx0bWZwLndyYXAub2ZmKCdjbGljaycrbnMpO1xuXHRcdFx0XHRtZnAuYXJyb3dSaWdodCA9IG1mcC5hcnJvd0xlZnQgPSBudWxsO1xuXHRcdFx0fSk7XG5cblx0XHR9LFxuXHRcdG5leHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IHRydWU7XG5cdFx0XHRtZnAuaW5kZXggPSBfZ2V0TG9vcGVkSWQobWZwLmluZGV4ICsgMSk7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZXY6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IGZhbHNlO1xuXHRcdFx0bWZwLmluZGV4ID0gX2dldExvb3BlZElkKG1mcC5pbmRleCAtIDEpO1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRnb1RvOiBmdW5jdGlvbihuZXdJbmRleCkge1xuXHRcdFx0bWZwLmRpcmVjdGlvbiA9IChuZXdJbmRleCA+PSBtZnAuaW5kZXgpO1xuXHRcdFx0bWZwLmluZGV4ID0gbmV3SW5kZXg7XG5cdFx0XHRtZnAudXBkYXRlSXRlbUhUTUwoKTtcblx0XHR9LFxuXHRcdHByZWxvYWROZWFyYnlJbWFnZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHAgPSBtZnAuc3QuZ2FsbGVyeS5wcmVsb2FkLFxuXHRcdFx0XHRwcmVsb2FkQmVmb3JlID0gTWF0aC5taW4ocFswXSwgbWZwLml0ZW1zLmxlbmd0aCksXG5cdFx0XHRcdHByZWxvYWRBZnRlciA9IE1hdGgubWluKHBbMV0sIG1mcC5pdGVtcy5sZW5ndGgpLFxuXHRcdFx0XHRpO1xuXG5cdFx0XHRmb3IoaSA9IDE7IGkgPD0gKG1mcC5kaXJlY3Rpb24gPyBwcmVsb2FkQWZ0ZXIgOiBwcmVsb2FkQmVmb3JlKTsgaSsrKSB7XG5cdFx0XHRcdG1mcC5fcHJlbG9hZEl0ZW0obWZwLmluZGV4K2kpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChtZnAuZGlyZWN0aW9uID8gcHJlbG9hZEJlZm9yZSA6IHByZWxvYWRBZnRlcik7IGkrKykge1xuXHRcdFx0XHRtZnAuX3ByZWxvYWRJdGVtKG1mcC5pbmRleC1pKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9wcmVsb2FkSXRlbTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdGluZGV4ID0gX2dldExvb3BlZElkKGluZGV4KTtcblxuXHRcdFx0aWYobWZwLml0ZW1zW2luZGV4XS5wcmVsb2FkZWQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaXRlbSA9IG1mcC5pdGVtc1tpbmRleF07XG5cdFx0XHRpZighaXRlbS5wYXJzZWQpIHtcblx0XHRcdFx0aXRlbSA9IG1mcC5wYXJzZUVsKCBpbmRleCApO1xuXHRcdFx0fVxuXG5cdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWQnLCBpdGVtKTtcblxuXHRcdFx0aWYoaXRlbS50eXBlID09PSAnaW1hZ2UnKSB7XG5cdFx0XHRcdGl0ZW0uaW1nID0gJCgnPGltZyBjbGFzcz1cIm1mcC1pbWdcIiAvPicpLm9uKCdsb2FkLm1mcGxvYWRlcicsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cdFx0XHRcdH0pLm9uKCdlcnJvci5tZnBsb2FkZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHRcdGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignTGF6eUxvYWRFcnJvcicsIGl0ZW0pO1xuXHRcdFx0XHR9KS5hdHRyKCdzcmMnLCBpdGVtLnNyYyk7XG5cdFx0XHR9XG5cblxuXHRcdFx0aXRlbS5wcmVsb2FkZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5nYWxsZXJ5Ki9cblxuLyo+PnJldGluYSovXG5cbnZhciBSRVRJTkFfTlMgPSAncmV0aW5hJztcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKFJFVElOQV9OUywge1xuXHRvcHRpb25zOiB7XG5cdFx0cmVwbGFjZVNyYzogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0cmV0dXJuIGl0ZW0uc3JjLnJlcGxhY2UoL1xcLlxcdyskLywgZnVuY3Rpb24obSkgeyByZXR1cm4gJ0AyeCcgKyBtOyB9KTtcblx0XHR9LFxuXHRcdHJhdGlvOiAxIC8vIEZ1bmN0aW9uIG9yIG51bWJlci4gIFNldCB0byAxIHRvIGRpc2FibGUuXG5cdH0sXG5cdHByb3RvOiB7XG5cdFx0aW5pdFJldGluYTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA+IDEpIHtcblxuXHRcdFx0XHR2YXIgc3QgPSBtZnAuc3QucmV0aW5hLFxuXHRcdFx0XHRcdHJhdGlvID0gc3QucmF0aW87XG5cblx0XHRcdFx0cmF0aW8gPSAhaXNOYU4ocmF0aW8pID8gcmF0aW8gOiByYXRpbygpO1xuXG5cdFx0XHRcdGlmKHJhdGlvID4gMSkge1xuXHRcdFx0XHRcdF9tZnBPbignSW1hZ2VIYXNTaXplJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5pbWcuY3NzKHtcblx0XHRcdFx0XHRcdFx0J21heC13aWR0aCc6IGl0ZW0uaW1nWzBdLm5hdHVyYWxXaWR0aCAvIHJhdGlvLFxuXHRcdFx0XHRcdFx0XHQnd2lkdGgnOiAnMTAwJSdcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdF9tZnBPbignRWxlbWVudFBhcnNlJyArICcuJyArIFJFVElOQV9OUywgZnVuY3Rpb24oZSwgaXRlbSkge1xuXHRcdFx0XHRcdFx0aXRlbS5zcmMgPSBzdC5yZXBsYWNlU3JjKGl0ZW0sIHJhdGlvKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PnJldGluYSovXG4gX2NoZWNrSW5zdGFuY2UoKTsgfSkpOyIsIi8qIVxuV2F5cG9pbnRzIC0gNC4wLjFcbkNvcHlyaWdodCDCqSAyMDExLTIwMTYgQ2FsZWIgVHJvdWdodG9uXG5MaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5odHRwczovL2dpdGh1Yi5jb20vaW1ha2V3ZWJ0aGluZ3Mvd2F5cG9pbnRzL2Jsb2IvbWFzdGVyL2xpY2Vuc2VzLnR4dFxuKi9cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgdmFyIGtleUNvdW50ZXIgPSAwXG4gIHZhciBhbGxXYXlwb2ludHMgPSB7fVxuXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS93YXlwb2ludCAqL1xuICBmdW5jdGlvbiBXYXlwb2ludChvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG9wdGlvbnMgcGFzc2VkIHRvIFdheXBvaW50IGNvbnN0cnVjdG9yJylcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmVsZW1lbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZWxlbWVudCBvcHRpb24gcGFzc2VkIHRvIFdheXBvaW50IGNvbnN0cnVjdG9yJylcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmhhbmRsZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaGFuZGxlciBvcHRpb24gcGFzc2VkIHRvIFdheXBvaW50IGNvbnN0cnVjdG9yJylcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9ICd3YXlwb2ludC0nICsga2V5Q291bnRlclxuICAgIHRoaXMub3B0aW9ucyA9IFdheXBvaW50LkFkYXB0ZXIuZXh0ZW5kKHt9LCBXYXlwb2ludC5kZWZhdWx0cywgb3B0aW9ucylcbiAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLm9wdGlvbnMuZWxlbWVudFxuICAgIHRoaXMuYWRhcHRlciA9IG5ldyBXYXlwb2ludC5BZGFwdGVyKHRoaXMuZWxlbWVudClcbiAgICB0aGlzLmNhbGxiYWNrID0gb3B0aW9ucy5oYW5kbGVyXG4gICAgdGhpcy5heGlzID0gdGhpcy5vcHRpb25zLmhvcml6b250YWwgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnXG4gICAgdGhpcy5lbmFibGVkID0gdGhpcy5vcHRpb25zLmVuYWJsZWRcbiAgICB0aGlzLnRyaWdnZXJQb2ludCA9IG51bGxcbiAgICB0aGlzLmdyb3VwID0gV2F5cG9pbnQuR3JvdXAuZmluZE9yQ3JlYXRlKHtcbiAgICAgIG5hbWU6IHRoaXMub3B0aW9ucy5ncm91cCxcbiAgICAgIGF4aXM6IHRoaXMuYXhpc1xuICAgIH0pXG4gICAgdGhpcy5jb250ZXh0ID0gV2F5cG9pbnQuQ29udGV4dC5maW5kT3JDcmVhdGVCeUVsZW1lbnQodGhpcy5vcHRpb25zLmNvbnRleHQpXG5cbiAgICBpZiAoV2F5cG9pbnQub2Zmc2V0QWxpYXNlc1t0aGlzLm9wdGlvbnMub2Zmc2V0XSkge1xuICAgICAgdGhpcy5vcHRpb25zLm9mZnNldCA9IFdheXBvaW50Lm9mZnNldEFsaWFzZXNbdGhpcy5vcHRpb25zLm9mZnNldF1cbiAgICB9XG4gICAgdGhpcy5ncm91cC5hZGQodGhpcylcbiAgICB0aGlzLmNvbnRleHQuYWRkKHRoaXMpXG4gICAgYWxsV2F5cG9pbnRzW3RoaXMua2V5XSA9IHRoaXNcbiAgICBrZXlDb3VudGVyICs9IDFcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgV2F5cG9pbnQucHJvdG90eXBlLnF1ZXVlVHJpZ2dlciA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgIHRoaXMuZ3JvdXAucXVldWVUcmlnZ2VyKHRoaXMsIGRpcmVjdGlvbilcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgV2F5cG9pbnQucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAodGhpcy5jYWxsYmFjaykge1xuICAgICAgdGhpcy5jYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKVxuICAgIH1cbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZGVzdHJveSAqL1xuICBXYXlwb2ludC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY29udGV4dC5yZW1vdmUodGhpcylcbiAgICB0aGlzLmdyb3VwLnJlbW92ZSh0aGlzKVxuICAgIGRlbGV0ZSBhbGxXYXlwb2ludHNbdGhpcy5rZXldXG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2Rpc2FibGUgKi9cbiAgV2F5cG9pbnQucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2VuYWJsZSAqL1xuICBXYXlwb2ludC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jb250ZXh0LnJlZnJlc2goKVxuICAgIHRoaXMuZW5hYmxlZCA9IHRydWVcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9uZXh0ICovXG4gIFdheXBvaW50LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ3JvdXAubmV4dCh0aGlzKVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9wcmV2aW91cyAqL1xuICBXYXlwb2ludC5wcm90b3R5cGUucHJldmlvdXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5ncm91cC5wcmV2aW91cyh0aGlzKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBXYXlwb2ludC5pbnZva2VBbGwgPSBmdW5jdGlvbihtZXRob2QpIHtcbiAgICB2YXIgYWxsV2F5cG9pbnRzQXJyYXkgPSBbXVxuICAgIGZvciAodmFyIHdheXBvaW50S2V5IGluIGFsbFdheXBvaW50cykge1xuICAgICAgYWxsV2F5cG9pbnRzQXJyYXkucHVzaChhbGxXYXlwb2ludHNbd2F5cG9pbnRLZXldKVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgZW5kID0gYWxsV2F5cG9pbnRzQXJyYXkubGVuZ3RoOyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIGFsbFdheXBvaW50c0FycmF5W2ldW21ldGhvZF0oKVxuICAgIH1cbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZGVzdHJveS1hbGwgKi9cbiAgV2F5cG9pbnQuZGVzdHJveUFsbCA9IGZ1bmN0aW9uKCkge1xuICAgIFdheXBvaW50Lmludm9rZUFsbCgnZGVzdHJveScpXG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2Rpc2FibGUtYWxsICovXG4gIFdheXBvaW50LmRpc2FibGVBbGwgPSBmdW5jdGlvbigpIHtcbiAgICBXYXlwb2ludC5pbnZva2VBbGwoJ2Rpc2FibGUnKVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9lbmFibGUtYWxsICovXG4gIFdheXBvaW50LmVuYWJsZUFsbCA9IGZ1bmN0aW9uKCkge1xuICAgIFdheXBvaW50LkNvbnRleHQucmVmcmVzaEFsbCgpXG4gICAgZm9yICh2YXIgd2F5cG9pbnRLZXkgaW4gYWxsV2F5cG9pbnRzKSB7XG4gICAgICBhbGxXYXlwb2ludHNbd2F5cG9pbnRLZXldLmVuYWJsZWQgPSB0cnVlXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL3JlZnJlc2gtYWxsICovXG4gIFdheXBvaW50LnJlZnJlc2hBbGwgPSBmdW5jdGlvbigpIHtcbiAgICBXYXlwb2ludC5Db250ZXh0LnJlZnJlc2hBbGwoKVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS92aWV3cG9ydC1oZWlnaHQgKi9cbiAgV2F5cG9pbnQudmlld3BvcnRIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvdmlld3BvcnQtd2lkdGggKi9cbiAgV2F5cG9pbnQudmlld3BvcnRXaWR0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGhcbiAgfVxuXG4gIFdheXBvaW50LmFkYXB0ZXJzID0gW11cblxuICBXYXlwb2ludC5kZWZhdWx0cyA9IHtcbiAgICBjb250ZXh0OiB3aW5kb3csXG4gICAgY29udGludW91czogdHJ1ZSxcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGdyb3VwOiAnZGVmYXVsdCcsXG4gICAgaG9yaXpvbnRhbDogZmFsc2UsXG4gICAgb2Zmc2V0OiAwXG4gIH1cblxuICBXYXlwb2ludC5vZmZzZXRBbGlhc2VzID0ge1xuICAgICdib3R0b20taW4tdmlldyc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5pbm5lckhlaWdodCgpIC0gdGhpcy5hZGFwdGVyLm91dGVySGVpZ2h0KClcbiAgICB9LFxuICAgICdyaWdodC1pbi12aWV3JzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmlubmVyV2lkdGgoKSAtIHRoaXMuYWRhcHRlci5vdXRlcldpZHRoKClcbiAgICB9XG4gIH1cblxuICB3aW5kb3cuV2F5cG9pbnQgPSBXYXlwb2ludFxufSgpKVxuOyhmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvbkZyYW1lU2hpbShjYWxsYmFjaykge1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApXG4gIH1cblxuICB2YXIga2V5Q291bnRlciA9IDBcbiAgdmFyIGNvbnRleHRzID0ge31cbiAgdmFyIFdheXBvaW50ID0gd2luZG93LldheXBvaW50XG4gIHZhciBvbGRXaW5kb3dMb2FkID0gd2luZG93Lm9ubG9hZFxuXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9jb250ZXh0ICovXG4gIGZ1bmN0aW9uIENvbnRleHQoZWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRcbiAgICB0aGlzLkFkYXB0ZXIgPSBXYXlwb2ludC5BZGFwdGVyXG4gICAgdGhpcy5hZGFwdGVyID0gbmV3IHRoaXMuQWRhcHRlcihlbGVtZW50KVxuICAgIHRoaXMua2V5ID0gJ3dheXBvaW50LWNvbnRleHQtJyArIGtleUNvdW50ZXJcbiAgICB0aGlzLmRpZFNjcm9sbCA9IGZhbHNlXG4gICAgdGhpcy5kaWRSZXNpemUgPSBmYWxzZVxuICAgIHRoaXMub2xkU2Nyb2xsID0ge1xuICAgICAgeDogdGhpcy5hZGFwdGVyLnNjcm9sbExlZnQoKSxcbiAgICAgIHk6IHRoaXMuYWRhcHRlci5zY3JvbGxUb3AoKVxuICAgIH1cbiAgICB0aGlzLndheXBvaW50cyA9IHtcbiAgICAgIHZlcnRpY2FsOiB7fSxcbiAgICAgIGhvcml6b250YWw6IHt9XG4gICAgfVxuXG4gICAgZWxlbWVudC53YXlwb2ludENvbnRleHRLZXkgPSB0aGlzLmtleVxuICAgIGNvbnRleHRzW2VsZW1lbnQud2F5cG9pbnRDb250ZXh0S2V5XSA9IHRoaXNcbiAgICBrZXlDb3VudGVyICs9IDFcbiAgICBpZiAoIVdheXBvaW50LndpbmRvd0NvbnRleHQpIHtcbiAgICAgIFdheXBvaW50LndpbmRvd0NvbnRleHQgPSB0cnVlXG4gICAgICBXYXlwb2ludC53aW5kb3dDb250ZXh0ID0gbmV3IENvbnRleHQod2luZG93KVxuICAgIH1cblxuICAgIHRoaXMuY3JlYXRlVGhyb3R0bGVkU2Nyb2xsSGFuZGxlcigpXG4gICAgdGhpcy5jcmVhdGVUaHJvdHRsZWRSZXNpemVIYW5kbGVyKClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24od2F5cG9pbnQpIHtcbiAgICB2YXIgYXhpcyA9IHdheXBvaW50Lm9wdGlvbnMuaG9yaXpvbnRhbCA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCdcbiAgICB0aGlzLndheXBvaW50c1theGlzXVt3YXlwb2ludC5rZXldID0gd2F5cG9pbnRcbiAgICB0aGlzLnJlZnJlc2goKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5jaGVja0VtcHR5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhvcml6b250YWxFbXB0eSA9IHRoaXMuQWRhcHRlci5pc0VtcHR5T2JqZWN0KHRoaXMud2F5cG9pbnRzLmhvcml6b250YWwpXG4gICAgdmFyIHZlcnRpY2FsRW1wdHkgPSB0aGlzLkFkYXB0ZXIuaXNFbXB0eU9iamVjdCh0aGlzLndheXBvaW50cy52ZXJ0aWNhbClcbiAgICB2YXIgaXNXaW5kb3cgPSB0aGlzLmVsZW1lbnQgPT0gdGhpcy5lbGVtZW50LndpbmRvd1xuICAgIGlmIChob3Jpem9udGFsRW1wdHkgJiYgdmVydGljYWxFbXB0eSAmJiAhaXNXaW5kb3cpIHtcbiAgICAgIHRoaXMuYWRhcHRlci5vZmYoJy53YXlwb2ludHMnKVxuICAgICAgZGVsZXRlIGNvbnRleHRzW3RoaXMua2V5XVxuICAgIH1cbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5wcm90b3R5cGUuY3JlYXRlVGhyb3R0bGVkUmVzaXplSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxmID0gdGhpc1xuXG4gICAgZnVuY3Rpb24gcmVzaXplSGFuZGxlcigpIHtcbiAgICAgIHNlbGYuaGFuZGxlUmVzaXplKClcbiAgICAgIHNlbGYuZGlkUmVzaXplID0gZmFsc2VcbiAgICB9XG5cbiAgICB0aGlzLmFkYXB0ZXIub24oJ3Jlc2l6ZS53YXlwb2ludHMnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghc2VsZi5kaWRSZXNpemUpIHtcbiAgICAgICAgc2VsZi5kaWRSZXNpemUgPSB0cnVlXG4gICAgICAgIFdheXBvaW50LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZXNpemVIYW5kbGVyKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucHJvdG90eXBlLmNyZWF0ZVRocm90dGxlZFNjcm9sbEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICBmdW5jdGlvbiBzY3JvbGxIYW5kbGVyKCkge1xuICAgICAgc2VsZi5oYW5kbGVTY3JvbGwoKVxuICAgICAgc2VsZi5kaWRTY3JvbGwgPSBmYWxzZVxuICAgIH1cblxuICAgIHRoaXMuYWRhcHRlci5vbignc2Nyb2xsLndheXBvaW50cycsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFzZWxmLmRpZFNjcm9sbCB8fCBXYXlwb2ludC5pc1RvdWNoKSB7XG4gICAgICAgIHNlbGYuZGlkU2Nyb2xsID0gdHJ1ZVxuICAgICAgICBXYXlwb2ludC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc2Nyb2xsSGFuZGxlcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5oYW5kbGVSZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgICBXYXlwb2ludC5Db250ZXh0LnJlZnJlc2hBbGwoKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5oYW5kbGVTY3JvbGwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHJpZ2dlcmVkR3JvdXBzID0ge31cbiAgICB2YXIgYXhlcyA9IHtcbiAgICAgIGhvcml6b250YWw6IHtcbiAgICAgICAgbmV3U2Nyb2xsOiB0aGlzLmFkYXB0ZXIuc2Nyb2xsTGVmdCgpLFxuICAgICAgICBvbGRTY3JvbGw6IHRoaXMub2xkU2Nyb2xsLngsXG4gICAgICAgIGZvcndhcmQ6ICdyaWdodCcsXG4gICAgICAgIGJhY2t3YXJkOiAnbGVmdCdcbiAgICAgIH0sXG4gICAgICB2ZXJ0aWNhbDoge1xuICAgICAgICBuZXdTY3JvbGw6IHRoaXMuYWRhcHRlci5zY3JvbGxUb3AoKSxcbiAgICAgICAgb2xkU2Nyb2xsOiB0aGlzLm9sZFNjcm9sbC55LFxuICAgICAgICBmb3J3YXJkOiAnZG93bicsXG4gICAgICAgIGJhY2t3YXJkOiAndXAnXG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgYXhpc0tleSBpbiBheGVzKSB7XG4gICAgICB2YXIgYXhpcyA9IGF4ZXNbYXhpc0tleV1cbiAgICAgIHZhciBpc0ZvcndhcmQgPSBheGlzLm5ld1Njcm9sbCA+IGF4aXMub2xkU2Nyb2xsXG4gICAgICB2YXIgZGlyZWN0aW9uID0gaXNGb3J3YXJkID8gYXhpcy5mb3J3YXJkIDogYXhpcy5iYWNrd2FyZFxuXG4gICAgICBmb3IgKHZhciB3YXlwb2ludEtleSBpbiB0aGlzLndheXBvaW50c1theGlzS2V5XSkge1xuICAgICAgICB2YXIgd2F5cG9pbnQgPSB0aGlzLndheXBvaW50c1theGlzS2V5XVt3YXlwb2ludEtleV1cbiAgICAgICAgaWYgKHdheXBvaW50LnRyaWdnZXJQb2ludCA9PT0gbnVsbCkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdhc0JlZm9yZVRyaWdnZXJQb2ludCA9IGF4aXMub2xkU2Nyb2xsIDwgd2F5cG9pbnQudHJpZ2dlclBvaW50XG4gICAgICAgIHZhciBub3dBZnRlclRyaWdnZXJQb2ludCA9IGF4aXMubmV3U2Nyb2xsID49IHdheXBvaW50LnRyaWdnZXJQb2ludFxuICAgICAgICB2YXIgY3Jvc3NlZEZvcndhcmQgPSB3YXNCZWZvcmVUcmlnZ2VyUG9pbnQgJiYgbm93QWZ0ZXJUcmlnZ2VyUG9pbnRcbiAgICAgICAgdmFyIGNyb3NzZWRCYWNrd2FyZCA9ICF3YXNCZWZvcmVUcmlnZ2VyUG9pbnQgJiYgIW5vd0FmdGVyVHJpZ2dlclBvaW50XG4gICAgICAgIGlmIChjcm9zc2VkRm9yd2FyZCB8fCBjcm9zc2VkQmFja3dhcmQpIHtcbiAgICAgICAgICB3YXlwb2ludC5xdWV1ZVRyaWdnZXIoZGlyZWN0aW9uKVxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgZ3JvdXBLZXkgaW4gdHJpZ2dlcmVkR3JvdXBzKSB7XG4gICAgICB0cmlnZ2VyZWRHcm91cHNbZ3JvdXBLZXldLmZsdXNoVHJpZ2dlcnMoKVxuICAgIH1cblxuICAgIHRoaXMub2xkU2Nyb2xsID0ge1xuICAgICAgeDogYXhlcy5ob3Jpem9udGFsLm5ld1Njcm9sbCxcbiAgICAgIHk6IGF4ZXMudmVydGljYWwubmV3U2Nyb2xsXG4gICAgfVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5pbm5lckhlaWdodCA9IGZ1bmN0aW9uKCkge1xuICAgIC8qZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG4gICAgaWYgKHRoaXMuZWxlbWVudCA9PSB0aGlzLmVsZW1lbnQud2luZG93KSB7XG4gICAgICByZXR1cm4gV2F5cG9pbnQudmlld3BvcnRIZWlnaHQoKVxuICAgIH1cbiAgICAvKmVzbGludC1lbmFibGUgZXFlcWVxICovXG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5pbm5lckhlaWdodCgpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XG4gICAgZGVsZXRlIHRoaXMud2F5cG9pbnRzW3dheXBvaW50LmF4aXNdW3dheXBvaW50LmtleV1cbiAgICB0aGlzLmNoZWNrRW1wdHkoKVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5pbm5lcldpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgLyplc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cbiAgICBpZiAodGhpcy5lbGVtZW50ID09IHRoaXMuZWxlbWVudC53aW5kb3cpIHtcbiAgICAgIHJldHVybiBXYXlwb2ludC52aWV3cG9ydFdpZHRoKClcbiAgICB9XG4gICAgLyplc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuaW5uZXJXaWR0aCgpXG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2NvbnRleHQtZGVzdHJveSAqL1xuICBDb250ZXh0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFsbFdheXBvaW50cyA9IFtdXG4gICAgZm9yICh2YXIgYXhpcyBpbiB0aGlzLndheXBvaW50cykge1xuICAgICAgZm9yICh2YXIgd2F5cG9pbnRLZXkgaW4gdGhpcy53YXlwb2ludHNbYXhpc10pIHtcbiAgICAgICAgYWxsV2F5cG9pbnRzLnB1c2godGhpcy53YXlwb2ludHNbYXhpc11bd2F5cG9pbnRLZXldKVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgZW5kID0gYWxsV2F5cG9pbnRzLmxlbmd0aDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICBhbGxXYXlwb2ludHNbaV0uZGVzdHJveSgpXG4gICAgfVxuICB9XG5cbiAgLyogUHVibGljICovXG4gIC8qIGh0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2FwaS9jb250ZXh0LXJlZnJlc2ggKi9cbiAgQ29udGV4dC5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIC8qZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG4gICAgdmFyIGlzV2luZG93ID0gdGhpcy5lbGVtZW50ID09IHRoaXMuZWxlbWVudC53aW5kb3dcbiAgICAvKmVzbGludC1lbmFibGUgZXFlcWVxICovXG4gICAgdmFyIGNvbnRleHRPZmZzZXQgPSBpc1dpbmRvdyA/IHVuZGVmaW5lZCA6IHRoaXMuYWRhcHRlci5vZmZzZXQoKVxuICAgIHZhciB0cmlnZ2VyZWRHcm91cHMgPSB7fVxuICAgIHZhciBheGVzXG5cbiAgICB0aGlzLmhhbmRsZVNjcm9sbCgpXG4gICAgYXhlcyA9IHtcbiAgICAgIGhvcml6b250YWw6IHtcbiAgICAgICAgY29udGV4dE9mZnNldDogaXNXaW5kb3cgPyAwIDogY29udGV4dE9mZnNldC5sZWZ0LFxuICAgICAgICBjb250ZXh0U2Nyb2xsOiBpc1dpbmRvdyA/IDAgOiB0aGlzLm9sZFNjcm9sbC54LFxuICAgICAgICBjb250ZXh0RGltZW5zaW9uOiB0aGlzLmlubmVyV2lkdGgoKSxcbiAgICAgICAgb2xkU2Nyb2xsOiB0aGlzLm9sZFNjcm9sbC54LFxuICAgICAgICBmb3J3YXJkOiAncmlnaHQnLFxuICAgICAgICBiYWNrd2FyZDogJ2xlZnQnLFxuICAgICAgICBvZmZzZXRQcm9wOiAnbGVmdCdcbiAgICAgIH0sXG4gICAgICB2ZXJ0aWNhbDoge1xuICAgICAgICBjb250ZXh0T2Zmc2V0OiBpc1dpbmRvdyA/IDAgOiBjb250ZXh0T2Zmc2V0LnRvcCxcbiAgICAgICAgY29udGV4dFNjcm9sbDogaXNXaW5kb3cgPyAwIDogdGhpcy5vbGRTY3JvbGwueSxcbiAgICAgICAgY29udGV4dERpbWVuc2lvbjogdGhpcy5pbm5lckhlaWdodCgpLFxuICAgICAgICBvbGRTY3JvbGw6IHRoaXMub2xkU2Nyb2xsLnksXG4gICAgICAgIGZvcndhcmQ6ICdkb3duJyxcbiAgICAgICAgYmFja3dhcmQ6ICd1cCcsXG4gICAgICAgIG9mZnNldFByb3A6ICd0b3AnXG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgYXhpc0tleSBpbiBheGVzKSB7XG4gICAgICB2YXIgYXhpcyA9IGF4ZXNbYXhpc0tleV1cbiAgICAgIGZvciAodmFyIHdheXBvaW50S2V5IGluIHRoaXMud2F5cG9pbnRzW2F4aXNLZXldKSB7XG4gICAgICAgIHZhciB3YXlwb2ludCA9IHRoaXMud2F5cG9pbnRzW2F4aXNLZXldW3dheXBvaW50S2V5XVxuICAgICAgICB2YXIgYWRqdXN0bWVudCA9IHdheXBvaW50Lm9wdGlvbnMub2Zmc2V0XG4gICAgICAgIHZhciBvbGRUcmlnZ2VyUG9pbnQgPSB3YXlwb2ludC50cmlnZ2VyUG9pbnRcbiAgICAgICAgdmFyIGVsZW1lbnRPZmZzZXQgPSAwXG4gICAgICAgIHZhciBmcmVzaFdheXBvaW50ID0gb2xkVHJpZ2dlclBvaW50ID09IG51bGxcbiAgICAgICAgdmFyIGNvbnRleHRNb2RpZmllciwgd2FzQmVmb3JlU2Nyb2xsLCBub3dBZnRlclNjcm9sbFxuICAgICAgICB2YXIgdHJpZ2dlcmVkQmFja3dhcmQsIHRyaWdnZXJlZEZvcndhcmRcblxuICAgICAgICBpZiAod2F5cG9pbnQuZWxlbWVudCAhPT0gd2F5cG9pbnQuZWxlbWVudC53aW5kb3cpIHtcbiAgICAgICAgICBlbGVtZW50T2Zmc2V0ID0gd2F5cG9pbnQuYWRhcHRlci5vZmZzZXQoKVtheGlzLm9mZnNldFByb3BdXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGFkanVzdG1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBhZGp1c3RtZW50ID0gYWRqdXN0bWVudC5hcHBseSh3YXlwb2ludClcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgYWRqdXN0bWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBhZGp1c3RtZW50ID0gcGFyc2VGbG9hdChhZGp1c3RtZW50KVxuICAgICAgICAgIGlmICh3YXlwb2ludC5vcHRpb25zLm9mZnNldC5pbmRleE9mKCclJykgPiAtIDEpIHtcbiAgICAgICAgICAgIGFkanVzdG1lbnQgPSBNYXRoLmNlaWwoYXhpcy5jb250ZXh0RGltZW5zaW9uICogYWRqdXN0bWVudCAvIDEwMClcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0TW9kaWZpZXIgPSBheGlzLmNvbnRleHRTY3JvbGwgLSBheGlzLmNvbnRleHRPZmZzZXRcbiAgICAgICAgd2F5cG9pbnQudHJpZ2dlclBvaW50ID0gTWF0aC5mbG9vcihlbGVtZW50T2Zmc2V0ICsgY29udGV4dE1vZGlmaWVyIC0gYWRqdXN0bWVudClcbiAgICAgICAgd2FzQmVmb3JlU2Nyb2xsID0gb2xkVHJpZ2dlclBvaW50IDwgYXhpcy5vbGRTY3JvbGxcbiAgICAgICAgbm93QWZ0ZXJTY3JvbGwgPSB3YXlwb2ludC50cmlnZ2VyUG9pbnQgPj0gYXhpcy5vbGRTY3JvbGxcbiAgICAgICAgdHJpZ2dlcmVkQmFja3dhcmQgPSB3YXNCZWZvcmVTY3JvbGwgJiYgbm93QWZ0ZXJTY3JvbGxcbiAgICAgICAgdHJpZ2dlcmVkRm9yd2FyZCA9ICF3YXNCZWZvcmVTY3JvbGwgJiYgIW5vd0FmdGVyU2Nyb2xsXG5cbiAgICAgICAgaWYgKCFmcmVzaFdheXBvaW50ICYmIHRyaWdnZXJlZEJhY2t3YXJkKSB7XG4gICAgICAgICAgd2F5cG9pbnQucXVldWVUcmlnZ2VyKGF4aXMuYmFja3dhcmQpXG4gICAgICAgICAgdHJpZ2dlcmVkR3JvdXBzW3dheXBvaW50Lmdyb3VwLmlkXSA9IHdheXBvaW50Lmdyb3VwXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWZyZXNoV2F5cG9pbnQgJiYgdHJpZ2dlcmVkRm9yd2FyZCkge1xuICAgICAgICAgIHdheXBvaW50LnF1ZXVlVHJpZ2dlcihheGlzLmZvcndhcmQpXG4gICAgICAgICAgdHJpZ2dlcmVkR3JvdXBzW3dheXBvaW50Lmdyb3VwLmlkXSA9IHdheXBvaW50Lmdyb3VwXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZnJlc2hXYXlwb2ludCAmJiBheGlzLm9sZFNjcm9sbCA+PSB3YXlwb2ludC50cmlnZ2VyUG9pbnQpIHtcbiAgICAgICAgICB3YXlwb2ludC5xdWV1ZVRyaWdnZXIoYXhpcy5mb3J3YXJkKVxuICAgICAgICAgIHRyaWdnZXJlZEdyb3Vwc1t3YXlwb2ludC5ncm91cC5pZF0gPSB3YXlwb2ludC5ncm91cFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgV2F5cG9pbnQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgZ3JvdXBLZXkgaW4gdHJpZ2dlcmVkR3JvdXBzKSB7XG4gICAgICAgIHRyaWdnZXJlZEdyb3Vwc1tncm91cEtleV0uZmx1c2hUcmlnZ2VycygpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIENvbnRleHQuZmluZE9yQ3JlYXRlQnlFbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBDb250ZXh0LmZpbmRCeUVsZW1lbnQoZWxlbWVudCkgfHwgbmV3IENvbnRleHQoZWxlbWVudClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgQ29udGV4dC5yZWZyZXNoQWxsID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yICh2YXIgY29udGV4dElkIGluIGNvbnRleHRzKSB7XG4gICAgICBjb250ZXh0c1tjb250ZXh0SWRdLnJlZnJlc2goKVxuICAgIH1cbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvY29udGV4dC1maW5kLWJ5LWVsZW1lbnQgKi9cbiAgQ29udGV4dC5maW5kQnlFbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBjb250ZXh0c1tlbGVtZW50LndheXBvaW50Q29udGV4dEtleV1cbiAgfVxuXG4gIHdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAob2xkV2luZG93TG9hZCkge1xuICAgICAgb2xkV2luZG93TG9hZCgpXG4gICAgfVxuICAgIENvbnRleHQucmVmcmVzaEFsbCgpXG4gIH1cblxuXG4gIFdheXBvaW50LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHJlcXVlc3RGbiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZVNoaW1cbiAgICByZXF1ZXN0Rm4uY2FsbCh3aW5kb3csIGNhbGxiYWNrKVxuICB9XG4gIFdheXBvaW50LkNvbnRleHQgPSBDb250ZXh0XG59KCkpXG47KGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCdcblxuICBmdW5jdGlvbiBieVRyaWdnZXJQb2ludChhLCBiKSB7XG4gICAgcmV0dXJuIGEudHJpZ2dlclBvaW50IC0gYi50cmlnZ2VyUG9pbnRcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ5UmV2ZXJzZVRyaWdnZXJQb2ludChhLCBiKSB7XG4gICAgcmV0dXJuIGIudHJpZ2dlclBvaW50IC0gYS50cmlnZ2VyUG9pbnRcbiAgfVxuXG4gIHZhciBncm91cHMgPSB7XG4gICAgdmVydGljYWw6IHt9LFxuICAgIGhvcml6b250YWw6IHt9XG4gIH1cbiAgdmFyIFdheXBvaW50ID0gd2luZG93LldheXBvaW50XG5cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2dyb3VwICovXG4gIGZ1bmN0aW9uIEdyb3VwKG9wdGlvbnMpIHtcbiAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWVcbiAgICB0aGlzLmF4aXMgPSBvcHRpb25zLmF4aXNcbiAgICB0aGlzLmlkID0gdGhpcy5uYW1lICsgJy0nICsgdGhpcy5heGlzXG4gICAgdGhpcy53YXlwb2ludHMgPSBbXVxuICAgIHRoaXMuY2xlYXJUcmlnZ2VyUXVldWVzKClcbiAgICBncm91cHNbdGhpcy5heGlzXVt0aGlzLm5hbWVdID0gdGhpc1xuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24od2F5cG9pbnQpIHtcbiAgICB0aGlzLndheXBvaW50cy5wdXNoKHdheXBvaW50KVxuICB9XG5cbiAgLyogUHJpdmF0ZSAqL1xuICBHcm91cC5wcm90b3R5cGUuY2xlYXJUcmlnZ2VyUXVldWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50cmlnZ2VyUXVldWVzID0ge1xuICAgICAgdXA6IFtdLFxuICAgICAgZG93bjogW10sXG4gICAgICBsZWZ0OiBbXSxcbiAgICAgIHJpZ2h0OiBbXVxuICAgIH1cbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgR3JvdXAucHJvdG90eXBlLmZsdXNoVHJpZ2dlcnMgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBkaXJlY3Rpb24gaW4gdGhpcy50cmlnZ2VyUXVldWVzKSB7XG4gICAgICB2YXIgd2F5cG9pbnRzID0gdGhpcy50cmlnZ2VyUXVldWVzW2RpcmVjdGlvbl1cbiAgICAgIHZhciByZXZlcnNlID0gZGlyZWN0aW9uID09PSAndXAnIHx8IGRpcmVjdGlvbiA9PT0gJ2xlZnQnXG4gICAgICB3YXlwb2ludHMuc29ydChyZXZlcnNlID8gYnlSZXZlcnNlVHJpZ2dlclBvaW50IDogYnlUcmlnZ2VyUG9pbnQpXG4gICAgICBmb3IgKHZhciBpID0gMCwgZW5kID0gd2F5cG9pbnRzLmxlbmd0aDsgaSA8IGVuZDsgaSArPSAxKSB7XG4gICAgICAgIHZhciB3YXlwb2ludCA9IHdheXBvaW50c1tpXVxuICAgICAgICBpZiAod2F5cG9pbnQub3B0aW9ucy5jb250aW51b3VzIHx8IGkgPT09IHdheXBvaW50cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgd2F5cG9pbnQudHJpZ2dlcihbZGlyZWN0aW9uXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNsZWFyVHJpZ2dlclF1ZXVlcygpXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24od2F5cG9pbnQpIHtcbiAgICB0aGlzLndheXBvaW50cy5zb3J0KGJ5VHJpZ2dlclBvaW50KVxuICAgIHZhciBpbmRleCA9IFdheXBvaW50LkFkYXB0ZXIuaW5BcnJheSh3YXlwb2ludCwgdGhpcy53YXlwb2ludHMpXG4gICAgdmFyIGlzTGFzdCA9IGluZGV4ID09PSB0aGlzLndheXBvaW50cy5sZW5ndGggLSAxXG4gICAgcmV0dXJuIGlzTGFzdCA/IG51bGwgOiB0aGlzLndheXBvaW50c1tpbmRleCArIDFdXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLnByb3RvdHlwZS5wcmV2aW91cyA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XG4gICAgdGhpcy53YXlwb2ludHMuc29ydChieVRyaWdnZXJQb2ludClcbiAgICB2YXIgaW5kZXggPSBXYXlwb2ludC5BZGFwdGVyLmluQXJyYXkod2F5cG9pbnQsIHRoaXMud2F5cG9pbnRzKVxuICAgIHJldHVybiBpbmRleCA/IHRoaXMud2F5cG9pbnRzW2luZGV4IC0gMV0gOiBudWxsXG4gIH1cblxuICAvKiBQcml2YXRlICovXG4gIEdyb3VwLnByb3RvdHlwZS5xdWV1ZVRyaWdnZXIgPSBmdW5jdGlvbih3YXlwb2ludCwgZGlyZWN0aW9uKSB7XG4gICAgdGhpcy50cmlnZ2VyUXVldWVzW2RpcmVjdGlvbl0ucHVzaCh3YXlwb2ludClcbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgR3JvdXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHdheXBvaW50KSB7XG4gICAgdmFyIGluZGV4ID0gV2F5cG9pbnQuQWRhcHRlci5pbkFycmF5KHdheXBvaW50LCB0aGlzLndheXBvaW50cylcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgdGhpcy53YXlwb2ludHMuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxuXG4gIC8qIFB1YmxpYyAqL1xuICAvKiBodHRwOi8vaW1ha2V3ZWJ0aGluZ3MuY29tL3dheXBvaW50cy9hcGkvZmlyc3QgKi9cbiAgR3JvdXAucHJvdG90eXBlLmZpcnN0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMud2F5cG9pbnRzWzBdXG4gIH1cblxuICAvKiBQdWJsaWMgKi9cbiAgLyogaHR0cDovL2ltYWtld2VidGhpbmdzLmNvbS93YXlwb2ludHMvYXBpL2xhc3QgKi9cbiAgR3JvdXAucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy53YXlwb2ludHNbdGhpcy53YXlwb2ludHMubGVuZ3RoIC0gMV1cbiAgfVxuXG4gIC8qIFByaXZhdGUgKi9cbiAgR3JvdXAuZmluZE9yQ3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBncm91cHNbb3B0aW9ucy5heGlzXVtvcHRpb25zLm5hbWVdIHx8IG5ldyBHcm91cChvcHRpb25zKVxuICB9XG5cbiAgV2F5cG9pbnQuR3JvdXAgPSBHcm91cFxufSgpKVxuOyhmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgdmFyICQgPSB3aW5kb3cualF1ZXJ5XG4gIHZhciBXYXlwb2ludCA9IHdpbmRvdy5XYXlwb2ludFxuXG4gIGZ1bmN0aW9uIEpRdWVyeUFkYXB0ZXIoZWxlbWVudCkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gIH1cblxuICAkLmVhY2goW1xuICAgICdpbm5lckhlaWdodCcsXG4gICAgJ2lubmVyV2lkdGgnLFxuICAgICdvZmYnLFxuICAgICdvZmZzZXQnLFxuICAgICdvbicsXG4gICAgJ291dGVySGVpZ2h0JyxcbiAgICAnb3V0ZXJXaWR0aCcsXG4gICAgJ3Njcm9sbExlZnQnLFxuICAgICdzY3JvbGxUb3AnXG4gIF0sIGZ1bmN0aW9uKGksIG1ldGhvZCkge1xuICAgIEpRdWVyeUFkYXB0ZXIucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAgICAgcmV0dXJuIHRoaXMuJGVsZW1lbnRbbWV0aG9kXS5hcHBseSh0aGlzLiRlbGVtZW50LCBhcmdzKVxuICAgIH1cbiAgfSlcblxuICAkLmVhY2goW1xuICAgICdleHRlbmQnLFxuICAgICdpbkFycmF5JyxcbiAgICAnaXNFbXB0eU9iamVjdCdcbiAgXSwgZnVuY3Rpb24oaSwgbWV0aG9kKSB7XG4gICAgSlF1ZXJ5QWRhcHRlclttZXRob2RdID0gJFttZXRob2RdXG4gIH0pXG5cbiAgV2F5cG9pbnQuYWRhcHRlcnMucHVzaCh7XG4gICAgbmFtZTogJ2pxdWVyeScsXG4gICAgQWRhcHRlcjogSlF1ZXJ5QWRhcHRlclxuICB9KVxuICBXYXlwb2ludC5BZGFwdGVyID0gSlF1ZXJ5QWRhcHRlclxufSgpKVxuOyhmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgdmFyIFdheXBvaW50ID0gd2luZG93LldheXBvaW50XG5cbiAgZnVuY3Rpb24gY3JlYXRlRXh0ZW5zaW9uKGZyYW1ld29yaykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB3YXlwb2ludHMgPSBbXVxuICAgICAgdmFyIG92ZXJyaWRlcyA9IGFyZ3VtZW50c1swXVxuXG4gICAgICBpZiAoZnJhbWV3b3JrLmlzRnVuY3Rpb24oYXJndW1lbnRzWzBdKSkge1xuICAgICAgICBvdmVycmlkZXMgPSBmcmFtZXdvcmsuZXh0ZW5kKHt9LCBhcmd1bWVudHNbMV0pXG4gICAgICAgIG92ZXJyaWRlcy5oYW5kbGVyID0gYXJndW1lbnRzWzBdXG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBmcmFtZXdvcmsuZXh0ZW5kKHt9LCBvdmVycmlkZXMsIHtcbiAgICAgICAgICBlbGVtZW50OiB0aGlzXG4gICAgICAgIH0pXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jb250ZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIG9wdGlvbnMuY29udGV4dCA9IGZyYW1ld29yayh0aGlzKS5jbG9zZXN0KG9wdGlvbnMuY29udGV4dClbMF1cbiAgICAgICAgfVxuICAgICAgICB3YXlwb2ludHMucHVzaChuZXcgV2F5cG9pbnQob3B0aW9ucykpXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gd2F5cG9pbnRzXG4gICAgfVxuICB9XG5cbiAgaWYgKHdpbmRvdy5qUXVlcnkpIHtcbiAgICB3aW5kb3cualF1ZXJ5LmZuLndheXBvaW50ID0gY3JlYXRlRXh0ZW5zaW9uKHdpbmRvdy5qUXVlcnkpXG4gIH1cbiAgaWYgKHdpbmRvdy5aZXB0bykge1xuICAgIHdpbmRvdy5aZXB0by5mbi53YXlwb2ludCA9IGNyZWF0ZUV4dGVuc2lvbih3aW5kb3cuWmVwdG8pXG4gIH1cbn0oKSlcbjsiLCIiLCIvKiEgUGhvdG9Td2lwZSBEZWZhdWx0IFVJIC0gNC4xLjEgLSAyMDE1LTEyLTI0XG4qIGh0dHA6Ly9waG90b3N3aXBlLmNvbVxuKiBDb3B5cmlnaHQgKGMpIDIwMTUgRG1pdHJ5IFNlbWVub3Y7ICovXG4vKipcbipcbiogVUkgb24gdG9wIG9mIG1haW4gc2xpZGluZyBhcmVhIChjYXB0aW9uLCBhcnJvd3MsIGNsb3NlIGJ1dHRvbiwgZXRjLikuXG4qIEJ1aWx0IGp1c3QgdXNpbmcgcHVibGljIG1ldGhvZHMvcHJvcGVydGllcyBvZiBQaG90b1N3aXBlLlxuKiBcbiovXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsgXG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZmFjdG9yeSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdH0gZWxzZSB7XG5cdFx0cm9vdC5QaG90b1N3aXBlVUlfRGVmYXVsdCA9IGZhY3RvcnkoKTtcblx0fVxufSkodGhpcywgZnVuY3Rpb24gKCkge1xuXG5cdCd1c2Ugc3RyaWN0JztcblxuXG5cbnZhciBQaG90b1N3aXBlVUlfRGVmYXVsdCA9XG4gZnVuY3Rpb24ocHN3cCwgZnJhbWV3b3JrKSB7XG5cblx0dmFyIHVpID0gdGhpcztcblx0dmFyIF9vdmVybGF5VUlVcGRhdGVkID0gZmFsc2UsXG5cdFx0X2NvbnRyb2xzVmlzaWJsZSA9IHRydWUsXG5cdFx0X2Z1bGxzY3JlbkFQSSxcblx0XHRfY29udHJvbHMsXG5cdFx0X2NhcHRpb25Db250YWluZXIsXG5cdFx0X2Zha2VDYXB0aW9uQ29udGFpbmVyLFxuXHRcdF9pbmRleEluZGljYXRvcixcblx0XHRfc2hhcmVCdXR0b24sXG5cdFx0X3NoYXJlTW9kYWwsXG5cdFx0X3NoYXJlTW9kYWxIaWRkZW4gPSB0cnVlLFxuXHRcdF9pbml0YWxDbG9zZU9uU2Nyb2xsVmFsdWUsXG5cdFx0X2lzSWRsZSxcblx0XHRfbGlzdGVuLFxuXG5cdFx0X2xvYWRpbmdJbmRpY2F0b3IsXG5cdFx0X2xvYWRpbmdJbmRpY2F0b3JIaWRkZW4sXG5cdFx0X2xvYWRpbmdJbmRpY2F0b3JUaW1lb3V0LFxuXG5cdFx0X2dhbGxlcnlIYXNPbmVTbGlkZSxcblxuXHRcdF9vcHRpb25zLFxuXHRcdF9kZWZhdWx0VUlPcHRpb25zID0ge1xuXHRcdFx0YmFyc1NpemU6IHt0b3A6NDQsIGJvdHRvbTonYXV0byd9LFxuXHRcdFx0Y2xvc2VFbENsYXNzZXM6IFsnaXRlbScsICdjYXB0aW9uJywgJ3pvb20td3JhcCcsICd1aScsICd0b3AtYmFyJ10sIFxuXHRcdFx0dGltZVRvSWRsZTogNDAwMCwgXG5cdFx0XHR0aW1lVG9JZGxlT3V0c2lkZTogMTAwMCxcblx0XHRcdGxvYWRpbmdJbmRpY2F0b3JEZWxheTogMTAwMCwgLy8gMnNcblx0XHRcdFxuXHRcdFx0YWRkQ2FwdGlvbkhUTUxGbjogZnVuY3Rpb24oaXRlbSwgY2FwdGlvbkVsIC8qLCBpc0Zha2UgKi8pIHtcblx0XHRcdFx0aWYoIWl0ZW0udGl0bGUpIHtcblx0XHRcdFx0XHRjYXB0aW9uRWwuY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gJyc7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNhcHRpb25FbC5jaGlsZHJlblswXS5pbm5lckhUTUwgPSBpdGVtLnRpdGxlO1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdGNsb3NlRWw6dHJ1ZSxcblx0XHRcdGNhcHRpb25FbDogdHJ1ZSxcblx0XHRcdGZ1bGxzY3JlZW5FbDogdHJ1ZSxcblx0XHRcdHpvb21FbDogdHJ1ZSxcblx0XHRcdHNoYXJlRWw6IHRydWUsXG5cdFx0XHRjb3VudGVyRWw6IHRydWUsXG5cdFx0XHRhcnJvd0VsOiB0cnVlLFxuXHRcdFx0cHJlbG9hZGVyRWw6IHRydWUsXG5cblx0XHRcdHRhcFRvQ2xvc2U6IGZhbHNlLFxuXHRcdFx0dGFwVG9Ub2dnbGVDb250cm9sczogdHJ1ZSxcblxuXHRcdFx0Y2xpY2tUb0Nsb3NlTm9uWm9vbWFibGU6IHRydWUsXG5cblx0XHRcdHNoYXJlQnV0dG9uczogW1xuXHRcdFx0XHR7aWQ6J2ZhY2Vib29rJywgbGFiZWw6J1NoYXJlIG9uIEZhY2Vib29rJywgdXJsOidodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/dT17e3VybH19J30sXG5cdFx0XHRcdHtpZDondHdpdHRlcicsIGxhYmVsOidUd2VldCcsIHVybDonaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/dGV4dD17e3RleHR9fSZ1cmw9e3t1cmx9fSd9LFxuXHRcdFx0XHR7aWQ6J3BpbnRlcmVzdCcsIGxhYmVsOidQaW4gaXQnLCB1cmw6J2h0dHA6Ly93d3cucGludGVyZXN0LmNvbS9waW4vY3JlYXRlL2J1dHRvbi8nK1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQnP3VybD17e3VybH19Jm1lZGlhPXt7aW1hZ2VfdXJsfX0mZGVzY3JpcHRpb249e3t0ZXh0fX0nfSxcblx0XHRcdFx0e2lkOidkb3dubG9hZCcsIGxhYmVsOidEb3dubG9hZCBpbWFnZScsIHVybDone3tyYXdfaW1hZ2VfdXJsfX0nLCBkb3dubG9hZDp0cnVlfVxuXHRcdFx0XSxcblx0XHRcdGdldEltYWdlVVJMRm9yU2hhcmU6IGZ1bmN0aW9uKCAvKiBzaGFyZUJ1dHRvbkRhdGEgKi8gKSB7XG5cdFx0XHRcdHJldHVybiBwc3dwLmN1cnJJdGVtLnNyYyB8fCAnJztcblx0XHRcdH0sXG5cdFx0XHRnZXRQYWdlVVJMRm9yU2hhcmU6IGZ1bmN0aW9uKCAvKiBzaGFyZUJ1dHRvbkRhdGEgKi8gKSB7XG5cdFx0XHRcdHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjtcblx0XHRcdH0sXG5cdFx0XHRnZXRUZXh0Rm9yU2hhcmU6IGZ1bmN0aW9uKCAvKiBzaGFyZUJ1dHRvbkRhdGEgKi8gKSB7XG5cdFx0XHRcdHJldHVybiBwc3dwLmN1cnJJdGVtLnRpdGxlIHx8ICcnO1xuXHRcdFx0fSxcblx0XHRcdFx0XG5cdFx0XHRpbmRleEluZGljYXRvclNlcDogJyAvICcsXG5cdFx0XHRmaXRDb250cm9sc1dpZHRoOiAxMjAwXG5cblx0XHR9LFxuXHRcdF9ibG9ja0NvbnRyb2xzVGFwLFxuXHRcdF9ibG9ja0NvbnRyb2xzVGFwVGltZW91dDtcblxuXG5cblx0dmFyIF9vbkNvbnRyb2xzVGFwID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYoX2Jsb2NrQ29udHJvbHNUYXApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblxuXHRcdFx0ZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXG5cdFx0XHRpZihfb3B0aW9ucy50aW1lVG9JZGxlICYmIF9vcHRpb25zLm1vdXNlVXNlZCAmJiAhX2lzSWRsZSkge1xuXHRcdFx0XHQvLyByZXNldCBpZGxlIHRpbWVyXG5cdFx0XHRcdF9vbklkbGVNb3VzZU1vdmUoKTtcblx0XHRcdH1cblxuXG5cdFx0XHR2YXIgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50LFxuXHRcdFx0XHR1aUVsZW1lbnQsXG5cdFx0XHRcdGNsaWNrZWRDbGFzcyA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycsXG5cdFx0XHRcdGZvdW5kO1xuXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgX3VpRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dWlFbGVtZW50ID0gX3VpRWxlbWVudHNbaV07XG5cdFx0XHRcdGlmKHVpRWxlbWVudC5vblRhcCAmJiBjbGlja2VkQ2xhc3MuaW5kZXhPZigncHN3cF9fJyArIHVpRWxlbWVudC5uYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHR1aUVsZW1lbnQub25UYXAoKTtcblx0XHRcdFx0XHRmb3VuZCA9IHRydWU7XG5cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZihmb3VuZCkge1xuXHRcdFx0XHRpZihlLnN0b3BQcm9wYWdhdGlvbikge1xuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X2Jsb2NrQ29udHJvbHNUYXAgPSB0cnVlO1xuXG5cdFx0XHRcdC8vIFNvbWUgdmVyc2lvbnMgb2YgQW5kcm9pZCBkb24ndCBwcmV2ZW50IGdob3N0IGNsaWNrIGV2ZW50IFxuXHRcdFx0XHQvLyB3aGVuIHByZXZlbnREZWZhdWx0KCkgd2FzIGNhbGxlZCBvbiB0b3VjaHN0YXJ0IGFuZC9vciB0b3VjaGVuZC5cblx0XHRcdFx0Ly8gXG5cdFx0XHRcdC8vIFRoaXMgaGFwcGVucyBvbiB2NC4zLCA0LjIsIDQuMSwgXG5cdFx0XHRcdC8vIG9sZGVyIHZlcnNpb25zIHN0cmFuZ2VseSB3b3JrIGNvcnJlY3RseSwgXG5cdFx0XHRcdC8vIGJ1dCBqdXN0IGluIGNhc2Ugd2UgYWRkIGRlbGF5IG9uIGFsbCBvZiB0aGVtKVx0XG5cdFx0XHRcdHZhciB0YXBEZWxheSA9IGZyYW1ld29yay5mZWF0dXJlcy5pc09sZEFuZHJvaWQgPyA2MDAgOiAzMDtcblx0XHRcdFx0X2Jsb2NrQ29udHJvbHNUYXBUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRfYmxvY2tDb250cm9sc1RhcCA9IGZhbHNlO1xuXHRcdFx0XHR9LCB0YXBEZWxheSk7XG5cdFx0XHR9XG5cblx0XHR9LFxuXHRcdF9maXRDb250cm9sc0luVmlld3BvcnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAhcHN3cC5saWtlbHlUb3VjaERldmljZSB8fCBfb3B0aW9ucy5tb3VzZVVzZWQgfHwgc2NyZWVuLndpZHRoID4gX29wdGlvbnMuZml0Q29udHJvbHNXaWR0aDtcblx0XHR9LFxuXHRcdF90b2dnbGVQc3dwQ2xhc3MgPSBmdW5jdGlvbihlbCwgY05hbWUsIGFkZCkge1xuXHRcdFx0ZnJhbWV3b3JrWyAoYWRkID8gJ2FkZCcgOiAncmVtb3ZlJykgKyAnQ2xhc3MnIF0oZWwsICdwc3dwX18nICsgY05hbWUpO1xuXHRcdH0sXG5cblx0XHQvLyBhZGQgY2xhc3Mgd2hlbiB0aGVyZSBpcyBqdXN0IG9uZSBpdGVtIGluIHRoZSBnYWxsZXJ5XG5cdFx0Ly8gKGJ5IGRlZmF1bHQgaXQgaGlkZXMgbGVmdC9yaWdodCBhcnJvd3MgYW5kIDFvZlggY291bnRlcilcblx0XHRfY291bnROdW1JdGVtcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGhhc09uZVNsaWRlID0gKF9vcHRpb25zLmdldE51bUl0ZW1zRm4oKSA9PT0gMSk7XG5cblx0XHRcdGlmKGhhc09uZVNsaWRlICE9PSBfZ2FsbGVyeUhhc09uZVNsaWRlKSB7XG5cdFx0XHRcdF90b2dnbGVQc3dwQ2xhc3MoX2NvbnRyb2xzLCAndWktLW9uZS1zbGlkZScsIGhhc09uZVNsaWRlKTtcblx0XHRcdFx0X2dhbGxlcnlIYXNPbmVTbGlkZSA9IGhhc09uZVNsaWRlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3RvZ2dsZVNoYXJlTW9kYWxDbGFzcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0X3RvZ2dsZVBzd3BDbGFzcyhfc2hhcmVNb2RhbCwgJ3NoYXJlLW1vZGFsLS1oaWRkZW4nLCBfc2hhcmVNb2RhbEhpZGRlbik7XG5cdFx0fSxcblx0XHRfdG9nZ2xlU2hhcmVNb2RhbCA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRfc2hhcmVNb2RhbEhpZGRlbiA9ICFfc2hhcmVNb2RhbEhpZGRlbjtcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRpZighX3NoYXJlTW9kYWxIaWRkZW4pIHtcblx0XHRcdFx0X3RvZ2dsZVNoYXJlTW9kYWxDbGFzcygpO1xuXHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKCFfc2hhcmVNb2RhbEhpZGRlbikge1xuXHRcdFx0XHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKF9zaGFyZU1vZGFsLCAncHN3cF9fc2hhcmUtbW9kYWwtLWZhZGUtaW4nKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIDMwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyhfc2hhcmVNb2RhbCwgJ3Bzd3BfX3NoYXJlLW1vZGFsLS1mYWRlLWluJyk7XG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoX3NoYXJlTW9kYWxIaWRkZW4pIHtcblx0XHRcdFx0XHRcdF90b2dnbGVTaGFyZU1vZGFsQ2xhc3MoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sIDMwMCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKCFfc2hhcmVNb2RhbEhpZGRlbikge1xuXHRcdFx0XHRfdXBkYXRlU2hhcmVVUkxzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblxuXHRcdF9vcGVuV2luZG93UG9wdXAgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG5cdFx0XHR2YXIgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuXG5cdFx0XHRwc3dwLnNob3V0KCdzaGFyZUxpbmtDbGljaycsIGUsIHRhcmdldCk7XG5cblx0XHRcdGlmKCF0YXJnZXQuaHJlZikge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCB0YXJnZXQuaGFzQXR0cmlidXRlKCdkb3dubG9hZCcpICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0d2luZG93Lm9wZW4odGFyZ2V0LmhyZWYsICdwc3dwX3NoYXJlJywgJ3Njcm9sbGJhcnM9eWVzLHJlc2l6YWJsZT15ZXMsdG9vbGJhcj1ubywnK1xuXHRcdFx0XHRcdFx0XHRcdFx0XHQnbG9jYXRpb249eWVzLHdpZHRoPTU1MCxoZWlnaHQ9NDIwLHRvcD0xMDAsbGVmdD0nICsgXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCh3aW5kb3cuc2NyZWVuID8gTWF0aC5yb3VuZChzY3JlZW4ud2lkdGggLyAyIC0gMjc1KSA6IDEwMCkgICk7XG5cblx0XHRcdGlmKCFfc2hhcmVNb2RhbEhpZGRlbikge1xuXHRcdFx0XHRfdG9nZ2xlU2hhcmVNb2RhbCgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRfdXBkYXRlU2hhcmVVUkxzID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2hhcmVCdXR0b25PdXQgPSAnJyxcblx0XHRcdFx0c2hhcmVCdXR0b25EYXRhLFxuXHRcdFx0XHRzaGFyZVVSTCxcblx0XHRcdFx0aW1hZ2VfdXJsLFxuXHRcdFx0XHRwYWdlX3VybCxcblx0XHRcdFx0c2hhcmVfdGV4dDtcblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IF9vcHRpb25zLnNoYXJlQnV0dG9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRzaGFyZUJ1dHRvbkRhdGEgPSBfb3B0aW9ucy5zaGFyZUJ1dHRvbnNbaV07XG5cblx0XHRcdFx0aW1hZ2VfdXJsID0gX29wdGlvbnMuZ2V0SW1hZ2VVUkxGb3JTaGFyZShzaGFyZUJ1dHRvbkRhdGEpO1xuXHRcdFx0XHRwYWdlX3VybCA9IF9vcHRpb25zLmdldFBhZ2VVUkxGb3JTaGFyZShzaGFyZUJ1dHRvbkRhdGEpO1xuXHRcdFx0XHRzaGFyZV90ZXh0ID0gX29wdGlvbnMuZ2V0VGV4dEZvclNoYXJlKHNoYXJlQnV0dG9uRGF0YSk7XG5cblx0XHRcdFx0c2hhcmVVUkwgPSBzaGFyZUJ1dHRvbkRhdGEudXJsLnJlcGxhY2UoJ3t7dXJsfX0nLCBlbmNvZGVVUklDb21wb25lbnQocGFnZV91cmwpIClcblx0XHRcdFx0XHRcdFx0XHRcdC5yZXBsYWNlKCd7e2ltYWdlX3VybH19JywgZW5jb2RlVVJJQ29tcG9uZW50KGltYWdlX3VybCkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0LnJlcGxhY2UoJ3t7cmF3X2ltYWdlX3VybH19JywgaW1hZ2VfdXJsIClcblx0XHRcdFx0XHRcdFx0XHRcdC5yZXBsYWNlKCd7e3RleHR9fScsIGVuY29kZVVSSUNvbXBvbmVudChzaGFyZV90ZXh0KSApO1xuXG5cdFx0XHRcdHNoYXJlQnV0dG9uT3V0ICs9ICc8YSBocmVmPVwiJyArIHNoYXJlVVJMICsgJ1wiIHRhcmdldD1cIl9ibGFua1wiICcrXG5cdFx0XHRcdFx0XHRcdFx0XHQnY2xhc3M9XCJwc3dwX19zaGFyZS0tJyArIHNoYXJlQnV0dG9uRGF0YS5pZCArICdcIicgK1xuXHRcdFx0XHRcdFx0XHRcdFx0KHNoYXJlQnV0dG9uRGF0YS5kb3dubG9hZCA/ICdkb3dubG9hZCcgOiAnJykgKyAnPicgKyBcblx0XHRcdFx0XHRcdFx0XHRcdHNoYXJlQnV0dG9uRGF0YS5sYWJlbCArICc8L2E+JztcblxuXHRcdFx0XHRpZihfb3B0aW9ucy5wYXJzZVNoYXJlQnV0dG9uT3V0KSB7XG5cdFx0XHRcdFx0c2hhcmVCdXR0b25PdXQgPSBfb3B0aW9ucy5wYXJzZVNoYXJlQnV0dG9uT3V0KHNoYXJlQnV0dG9uRGF0YSwgc2hhcmVCdXR0b25PdXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRfc2hhcmVNb2RhbC5jaGlsZHJlblswXS5pbm5lckhUTUwgPSBzaGFyZUJ1dHRvbk91dDtcblx0XHRcdF9zaGFyZU1vZGFsLmNoaWxkcmVuWzBdLm9uY2xpY2sgPSBfb3BlbldpbmRvd1BvcHVwO1xuXG5cdFx0fSxcblx0XHRfaGFzQ2xvc2VDbGFzcyA9IGZ1bmN0aW9uKHRhcmdldCkge1xuXHRcdFx0Zm9yKHZhciAgaSA9IDA7IGkgPCBfb3B0aW9ucy5jbG9zZUVsQ2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiggZnJhbWV3b3JrLmhhc0NsYXNzKHRhcmdldCwgJ3Bzd3BfXycgKyBfb3B0aW9ucy5jbG9zZUVsQ2xhc3Nlc1tpXSkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdF9pZGxlSW50ZXJ2YWwsXG5cdFx0X2lkbGVUaW1lcixcblx0XHRfaWRsZUluY3JlbWVudCA9IDAsXG5cdFx0X29uSWRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KF9pZGxlVGltZXIpO1xuXHRcdFx0X2lkbGVJbmNyZW1lbnQgPSAwO1xuXHRcdFx0aWYoX2lzSWRsZSkge1xuXHRcdFx0XHR1aS5zZXRJZGxlKGZhbHNlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9vbk1vdXNlTGVhdmVXaW5kb3cgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRlID0gZSA/IGUgOiB3aW5kb3cuZXZlbnQ7XG5cdFx0XHR2YXIgZnJvbSA9IGUucmVsYXRlZFRhcmdldCB8fCBlLnRvRWxlbWVudDtcblx0XHRcdGlmICghZnJvbSB8fCBmcm9tLm5vZGVOYW1lID09PSAnSFRNTCcpIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KF9pZGxlVGltZXIpO1xuXHRcdFx0XHRfaWRsZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR1aS5zZXRJZGxlKHRydWUpO1xuXHRcdFx0XHR9LCBfb3B0aW9ucy50aW1lVG9JZGxlT3V0c2lkZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfc2V0dXBGdWxsc2NyZWVuQVBJID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihfb3B0aW9ucy5mdWxsc2NyZWVuRWwgJiYgIWZyYW1ld29yay5mZWF0dXJlcy5pc09sZEFuZHJvaWQpIHtcblx0XHRcdFx0aWYoIV9mdWxsc2NyZW5BUEkpIHtcblx0XHRcdFx0XHRfZnVsbHNjcmVuQVBJID0gdWkuZ2V0RnVsbHNjcmVlbkFQSSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKF9mdWxsc2NyZW5BUEkpIHtcblx0XHRcdFx0XHRmcmFtZXdvcmsuYmluZChkb2N1bWVudCwgX2Z1bGxzY3JlbkFQSS5ldmVudEssIHVpLnVwZGF0ZUZ1bGxzY3JlZW4pO1xuXHRcdFx0XHRcdHVpLnVwZGF0ZUZ1bGxzY3JlZW4oKTtcblx0XHRcdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3MocHN3cC50ZW1wbGF0ZSwgJ3Bzd3AtLXN1cHBvcnRzLWZzJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKHBzd3AudGVtcGxhdGUsICdwc3dwLS1zdXBwb3J0cy1mcycpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfc2V0dXBMb2FkaW5nSW5kaWNhdG9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBTZXR1cCBsb2FkaW5nIGluZGljYXRvclxuXHRcdFx0aWYoX29wdGlvbnMucHJlbG9hZGVyRWwpIHtcblx0XHRcdFxuXHRcdFx0XHRfdG9nZ2xlTG9hZGluZ0luZGljYXRvcih0cnVlKTtcblxuXHRcdFx0XHRfbGlzdGVuKCdiZWZvcmVDaGFuZ2UnLCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdGNsZWFyVGltZW91dChfbG9hZGluZ0luZGljYXRvclRpbWVvdXQpO1xuXG5cdFx0XHRcdFx0Ly8gZGlzcGxheSBsb2FkaW5nIGluZGljYXRvciB3aXRoIGRlbGF5XG5cdFx0XHRcdFx0X2xvYWRpbmdJbmRpY2F0b3JUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0aWYocHN3cC5jdXJySXRlbSAmJiBwc3dwLmN1cnJJdGVtLmxvYWRpbmcpIHtcblxuXHRcdFx0XHRcdFx0XHRpZiggIXBzd3AuYWxsb3dQcm9ncmVzc2l2ZUltZygpIHx8IChwc3dwLmN1cnJJdGVtLmltZyAmJiAhcHN3cC5jdXJySXRlbS5pbWcubmF0dXJhbFdpZHRoKSAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2hvdyBwcmVsb2FkZXIgaWYgcHJvZ3Jlc3NpdmUgbG9hZGluZyBpcyBub3QgZW5hYmxlZCwgXG5cdFx0XHRcdFx0XHRcdFx0Ly8gb3IgaW1hZ2Ugd2lkdGggaXMgbm90IGRlZmluZWQgeWV0IChiZWNhdXNlIG9mIHNsb3cgY29ubmVjdGlvbilcblx0XHRcdFx0XHRcdFx0XHRfdG9nZ2xlTG9hZGluZ0luZGljYXRvcihmYWxzZSk7IFxuXHRcdFx0XHRcdFx0XHRcdC8vIGl0ZW1zLWNvbnRyb2xsZXIuanMgZnVuY3Rpb24gYWxsb3dQcm9ncmVzc2l2ZUltZ1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0X3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodHJ1ZSk7IC8vIGhpZGUgcHJlbG9hZGVyXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9LCBfb3B0aW9ucy5sb2FkaW5nSW5kaWNhdG9yRGVsYXkpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0X2xpc3RlbignaW1hZ2VMb2FkQ29tcGxldGUnLCBmdW5jdGlvbihpbmRleCwgaXRlbSkge1xuXHRcdFx0XHRcdGlmKHBzd3AuY3Vyckl0ZW0gPT09IGl0ZW0pIHtcblx0XHRcdFx0XHRcdF90b2dnbGVMb2FkaW5nSW5kaWNhdG9yKHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdH1cblx0XHR9LFxuXHRcdF90b2dnbGVMb2FkaW5nSW5kaWNhdG9yID0gZnVuY3Rpb24oaGlkZSkge1xuXHRcdFx0aWYoIF9sb2FkaW5nSW5kaWNhdG9ySGlkZGVuICE9PSBoaWRlICkge1xuXHRcdFx0XHRfdG9nZ2xlUHN3cENsYXNzKF9sb2FkaW5nSW5kaWNhdG9yLCAncHJlbG9hZGVyLS1hY3RpdmUnLCAhaGlkZSk7XG5cdFx0XHRcdF9sb2FkaW5nSW5kaWNhdG9ySGlkZGVuID0gaGlkZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9hcHBseU5hdkJhckdhcHMgPSBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHR2YXIgZ2FwID0gaXRlbS52R2FwO1xuXG5cdFx0XHRpZiggX2ZpdENvbnRyb2xzSW5WaWV3cG9ydCgpICkge1xuXHRcdFx0XHRcblx0XHRcdFx0dmFyIGJhcnMgPSBfb3B0aW9ucy5iYXJzU2l6ZTsgXG5cdFx0XHRcdGlmKF9vcHRpb25zLmNhcHRpb25FbCAmJiBiYXJzLmJvdHRvbSA9PT0gJ2F1dG8nKSB7XG5cdFx0XHRcdFx0aWYoIV9mYWtlQ2FwdGlvbkNvbnRhaW5lcikge1xuXHRcdFx0XHRcdFx0X2Zha2VDYXB0aW9uQ29udGFpbmVyID0gZnJhbWV3b3JrLmNyZWF0ZUVsKCdwc3dwX19jYXB0aW9uIHBzd3BfX2NhcHRpb24tLWZha2UnKTtcblx0XHRcdFx0XHRcdF9mYWtlQ2FwdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZCggZnJhbWV3b3JrLmNyZWF0ZUVsKCdwc3dwX19jYXB0aW9uX19jZW50ZXInKSApO1xuXHRcdFx0XHRcdFx0X2NvbnRyb2xzLmluc2VydEJlZm9yZShfZmFrZUNhcHRpb25Db250YWluZXIsIF9jYXB0aW9uQ29udGFpbmVyKTtcblx0XHRcdFx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyhfY29udHJvbHMsICdwc3dwX191aS0tZml0Jyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKCBfb3B0aW9ucy5hZGRDYXB0aW9uSFRNTEZuKGl0ZW0sIF9mYWtlQ2FwdGlvbkNvbnRhaW5lciwgdHJ1ZSkgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBjYXB0aW9uU2l6ZSA9IF9mYWtlQ2FwdGlvbkNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG5cdFx0XHRcdFx0XHRnYXAuYm90dG9tID0gcGFyc2VJbnQoY2FwdGlvblNpemUsMTApIHx8IDQ0O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRnYXAuYm90dG9tID0gYmFycy50b3A7IC8vIGlmIG5vIGNhcHRpb24sIHNldCBzaXplIG9mIGJvdHRvbSBnYXAgdG8gc2l6ZSBvZiB0b3Bcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Z2FwLmJvdHRvbSA9IGJhcnMuYm90dG9tID09PSAnYXV0bycgPyAwIDogYmFycy5ib3R0b207XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdC8vIGhlaWdodCBvZiB0b3AgYmFyIGlzIHN0YXRpYywgbm8gbmVlZCB0byBjYWxjdWxhdGUgaXRcblx0XHRcdFx0Z2FwLnRvcCA9IGJhcnMudG9wO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Z2FwLnRvcCA9IGdhcC5ib3R0b20gPSAwO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3NldHVwSWRsZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gSGlkZSBjb250cm9scyB3aGVuIG1vdXNlIGlzIHVzZWRcblx0XHRcdGlmKF9vcHRpb25zLnRpbWVUb0lkbGUpIHtcblx0XHRcdFx0X2xpc3RlbignbW91c2VVc2VkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0ZnJhbWV3b3JrLmJpbmQoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfb25JZGxlTW91c2VNb3ZlKTtcblx0XHRcdFx0XHRmcmFtZXdvcmsuYmluZChkb2N1bWVudCwgJ21vdXNlb3V0JywgX29uTW91c2VMZWF2ZVdpbmRvdyk7XG5cblx0XHRcdFx0XHRfaWRsZUludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRfaWRsZUluY3JlbWVudCsrO1xuXHRcdFx0XHRcdFx0aWYoX2lkbGVJbmNyZW1lbnQgPT09IDIpIHtcblx0XHRcdFx0XHRcdFx0dWkuc2V0SWRsZSh0cnVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LCBfb3B0aW9ucy50aW1lVG9JZGxlIC8gMik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3NldHVwSGlkaW5nQ29udHJvbHNEdXJpbmdHZXN0dXJlcyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBIaWRlIGNvbnRyb2xzIG9uIHZlcnRpY2FsIGRyYWdcblx0XHRcdF9saXN0ZW4oJ29uVmVydGljYWxEcmFnJywgZnVuY3Rpb24obm93KSB7XG5cdFx0XHRcdGlmKF9jb250cm9sc1Zpc2libGUgJiYgbm93IDwgMC45NSkge1xuXHRcdFx0XHRcdHVpLmhpZGVDb250cm9scygpO1xuXHRcdFx0XHR9IGVsc2UgaWYoIV9jb250cm9sc1Zpc2libGUgJiYgbm93ID49IDAuOTUpIHtcblx0XHRcdFx0XHR1aS5zaG93Q29udHJvbHMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEhpZGUgY29udHJvbHMgd2hlbiBwaW5jaGluZyB0byBjbG9zZVxuXHRcdFx0dmFyIHBpbmNoQ29udHJvbHNIaWRkZW47XG5cdFx0XHRfbGlzdGVuKCdvblBpbmNoQ2xvc2UnICwgZnVuY3Rpb24obm93KSB7XG5cdFx0XHRcdGlmKF9jb250cm9sc1Zpc2libGUgJiYgbm93IDwgMC45KSB7XG5cdFx0XHRcdFx0dWkuaGlkZUNvbnRyb2xzKCk7XG5cdFx0XHRcdFx0cGluY2hDb250cm9sc0hpZGRlbiA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSBpZihwaW5jaENvbnRyb2xzSGlkZGVuICYmICFfY29udHJvbHNWaXNpYmxlICYmIG5vdyA+IDAuOSkge1xuXHRcdFx0XHRcdHVpLnNob3dDb250cm9scygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0X2xpc3Rlbignem9vbUdlc3R1cmVFbmRlZCcsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRwaW5jaENvbnRyb2xzSGlkZGVuID0gZmFsc2U7XG5cdFx0XHRcdGlmKHBpbmNoQ29udHJvbHNIaWRkZW4gJiYgIV9jb250cm9sc1Zpc2libGUpIHtcblx0XHRcdFx0XHR1aS5zaG93Q29udHJvbHMoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHR9O1xuXG5cblxuXHR2YXIgX3VpRWxlbWVudHMgPSBbXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdjYXB0aW9uJywgXG5cdFx0XHRvcHRpb246ICdjYXB0aW9uRWwnLFxuXHRcdFx0b25Jbml0OiBmdW5jdGlvbihlbCkgeyAgXG5cdFx0XHRcdF9jYXB0aW9uQ29udGFpbmVyID0gZWw7IFxuXHRcdFx0fSBcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnc2hhcmUtbW9kYWwnLCBcblx0XHRcdG9wdGlvbjogJ3NoYXJlRWwnLFxuXHRcdFx0b25Jbml0OiBmdW5jdGlvbihlbCkgeyAgXG5cdFx0XHRcdF9zaGFyZU1vZGFsID0gZWw7XG5cdFx0XHR9LFxuXHRcdFx0b25UYXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfdG9nZ2xlU2hhcmVNb2RhbCgpO1xuXHRcdFx0fSBcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnYnV0dG9uLS1zaGFyZScsIFxuXHRcdFx0b3B0aW9uOiAnc2hhcmVFbCcsXG5cdFx0XHRvbkluaXQ6IGZ1bmN0aW9uKGVsKSB7IFxuXHRcdFx0XHRfc2hhcmVCdXR0b24gPSBlbDtcblx0XHRcdH0sXG5cdFx0XHRvblRhcDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF90b2dnbGVTaGFyZU1vZGFsKCk7XG5cdFx0XHR9IFxuXHRcdH0sXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdidXR0b24tLXpvb20nLCBcblx0XHRcdG9wdGlvbjogJ3pvb21FbCcsXG5cdFx0XHRvblRhcDogcHN3cC50b2dnbGVEZXNrdG9wWm9vbVxuXHRcdH0sXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdjb3VudGVyJywgXG5cdFx0XHRvcHRpb246ICdjb3VudGVyRWwnLFxuXHRcdFx0b25Jbml0OiBmdW5jdGlvbihlbCkgeyAgXG5cdFx0XHRcdF9pbmRleEluZGljYXRvciA9IGVsO1xuXHRcdFx0fSBcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnYnV0dG9uLS1jbG9zZScsIFxuXHRcdFx0b3B0aW9uOiAnY2xvc2VFbCcsXG5cdFx0XHRvblRhcDogcHN3cC5jbG9zZVxuXHRcdH0sXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdidXR0b24tLWFycm93LS1sZWZ0JywgXG5cdFx0XHRvcHRpb246ICdhcnJvd0VsJyxcblx0XHRcdG9uVGFwOiBwc3dwLnByZXZcblx0XHR9LFxuXHRcdHsgXG5cdFx0XHRuYW1lOiAnYnV0dG9uLS1hcnJvdy0tcmlnaHQnLCBcblx0XHRcdG9wdGlvbjogJ2Fycm93RWwnLFxuXHRcdFx0b25UYXA6IHBzd3AubmV4dFxuXHRcdH0sXG5cdFx0eyBcblx0XHRcdG5hbWU6ICdidXR0b24tLWZzJywgXG5cdFx0XHRvcHRpb246ICdmdWxsc2NyZWVuRWwnLFxuXHRcdFx0b25UYXA6IGZ1bmN0aW9uKCkgeyAgXG5cdFx0XHRcdGlmKF9mdWxsc2NyZW5BUEkuaXNGdWxsc2NyZWVuKCkpIHtcblx0XHRcdFx0XHRfZnVsbHNjcmVuQVBJLmV4aXQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfZnVsbHNjcmVuQVBJLmVudGVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gXG5cdFx0fSxcblx0XHR7IFxuXHRcdFx0bmFtZTogJ3ByZWxvYWRlcicsIFxuXHRcdFx0b3B0aW9uOiAncHJlbG9hZGVyRWwnLFxuXHRcdFx0b25Jbml0OiBmdW5jdGlvbihlbCkgeyAgXG5cdFx0XHRcdF9sb2FkaW5nSW5kaWNhdG9yID0gZWw7XG5cdFx0XHR9IFxuXHRcdH1cblxuXHRdO1xuXG5cdHZhciBfc2V0dXBVSUVsZW1lbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGl0ZW0sXG5cdFx0XHRjbGFzc0F0dHIsXG5cdFx0XHR1aUVsZW1lbnQ7XG5cblx0XHR2YXIgbG9vcFRocm91Z2hDaGlsZEVsZW1lbnRzID0gZnVuY3Rpb24oc0NoaWxkcmVuKSB7XG5cdFx0XHRpZighc0NoaWxkcmVuKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGwgPSBzQ2hpbGRyZW4ubGVuZ3RoO1xuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRpdGVtID0gc0NoaWxkcmVuW2ldO1xuXHRcdFx0XHRjbGFzc0F0dHIgPSBpdGVtLmNsYXNzTmFtZTtcblxuXHRcdFx0XHRmb3IodmFyIGEgPSAwOyBhIDwgX3VpRWxlbWVudHMubGVuZ3RoOyBhKyspIHtcblx0XHRcdFx0XHR1aUVsZW1lbnQgPSBfdWlFbGVtZW50c1thXTtcblxuXHRcdFx0XHRcdGlmKGNsYXNzQXR0ci5pbmRleE9mKCdwc3dwX18nICsgdWlFbGVtZW50Lm5hbWUpID4gLTEgICkge1xuXG5cdFx0XHRcdFx0XHRpZiggX29wdGlvbnNbdWlFbGVtZW50Lm9wdGlvbl0gKSB7IC8vIGlmIGVsZW1lbnQgaXMgbm90IGRpc2FibGVkIGZyb20gb3B0aW9uc1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKGl0ZW0sICdwc3dwX19lbGVtZW50LS1kaXNhYmxlZCcpO1xuXHRcdFx0XHRcdFx0XHRpZih1aUVsZW1lbnQub25Jbml0KSB7XG5cdFx0XHRcdFx0XHRcdFx0dWlFbGVtZW50Lm9uSW5pdChpdGVtKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0Ly9pdGVtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKGl0ZW0sICdwc3dwX19lbGVtZW50LS1kaXNhYmxlZCcpO1xuXHRcdFx0XHRcdFx0XHQvL2l0ZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHRcdGxvb3BUaHJvdWdoQ2hpbGRFbGVtZW50cyhfY29udHJvbHMuY2hpbGRyZW4pO1xuXG5cdFx0dmFyIHRvcEJhciA9ICBmcmFtZXdvcmsuZ2V0Q2hpbGRCeUNsYXNzKF9jb250cm9scywgJ3Bzd3BfX3RvcC1iYXInKTtcblx0XHRpZih0b3BCYXIpIHtcblx0XHRcdGxvb3BUaHJvdWdoQ2hpbGRFbGVtZW50cyggdG9wQmFyLmNoaWxkcmVuICk7XG5cdFx0fVxuXHR9O1xuXG5cblx0XG5cblx0dWkuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0Ly8gZXh0ZW5kIG9wdGlvbnNcblx0XHRmcmFtZXdvcmsuZXh0ZW5kKHBzd3Aub3B0aW9ucywgX2RlZmF1bHRVSU9wdGlvbnMsIHRydWUpO1xuXG5cdFx0Ly8gY3JlYXRlIGxvY2FsIGxpbmsgZm9yIGZhc3QgYWNjZXNzXG5cdFx0X29wdGlvbnMgPSBwc3dwLm9wdGlvbnM7XG5cblx0XHQvLyBmaW5kIHBzd3BfX3VpIGVsZW1lbnRcblx0XHRfY29udHJvbHMgPSBmcmFtZXdvcmsuZ2V0Q2hpbGRCeUNsYXNzKHBzd3Auc2Nyb2xsV3JhcCwgJ3Bzd3BfX3VpJyk7XG5cblx0XHQvLyBjcmVhdGUgbG9jYWwgbGlua1xuXHRcdF9saXN0ZW4gPSBwc3dwLmxpc3RlbjtcblxuXG5cdFx0X3NldHVwSGlkaW5nQ29udHJvbHNEdXJpbmdHZXN0dXJlcygpO1xuXG5cdFx0Ly8gdXBkYXRlIGNvbnRyb2xzIHdoZW4gc2xpZGVzIGNoYW5nZVxuXHRcdF9saXN0ZW4oJ2JlZm9yZUNoYW5nZScsIHVpLnVwZGF0ZSk7XG5cblx0XHQvLyB0b2dnbGUgem9vbSBvbiBkb3VibGUtdGFwXG5cdFx0X2xpc3RlbignZG91YmxlVGFwJywgZnVuY3Rpb24ocG9pbnQpIHtcblx0XHRcdHZhciBpbml0aWFsWm9vbUxldmVsID0gcHN3cC5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsO1xuXHRcdFx0aWYocHN3cC5nZXRab29tTGV2ZWwoKSAhPT0gaW5pdGlhbFpvb21MZXZlbCkge1xuXHRcdFx0XHRwc3dwLnpvb21Ubyhpbml0aWFsWm9vbUxldmVsLCBwb2ludCwgMzMzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHBzd3Auem9vbVRvKF9vcHRpb25zLmdldERvdWJsZVRhcFpvb20oZmFsc2UsIHBzd3AuY3Vyckl0ZW0pLCBwb2ludCwgMzMzKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEFsbG93IHRleHQgc2VsZWN0aW9uIGluIGNhcHRpb25cblx0XHRfbGlzdGVuKCdwcmV2ZW50RHJhZ0V2ZW50JywgZnVuY3Rpb24oZSwgaXNEb3duLCBwcmV2ZW50T2JqKSB7XG5cdFx0XHR2YXIgdCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcblx0XHRcdGlmKFxuXHRcdFx0XHR0ICYmIFxuXHRcdFx0XHR0LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSAmJiBlLnR5cGUuaW5kZXhPZignbW91c2UnKSA+IC0xICYmIFxuXHRcdFx0XHQoIHQuZ2V0QXR0cmlidXRlKCdjbGFzcycpLmluZGV4T2YoJ19fY2FwdGlvbicpID4gMCB8fCAoLyhTTUFMTHxTVFJPTkd8RU0pL2kpLnRlc3QodC50YWdOYW1lKSApIFxuXHRcdFx0KSB7XG5cdFx0XHRcdHByZXZlbnRPYmoucHJldmVudCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gYmluZCBldmVudHMgZm9yIFVJXG5cdFx0X2xpc3RlbignYmluZEV2ZW50cycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZnJhbWV3b3JrLmJpbmQoX2NvbnRyb2xzLCAncHN3cFRhcCBjbGljaycsIF9vbkNvbnRyb2xzVGFwKTtcblx0XHRcdGZyYW1ld29yay5iaW5kKHBzd3Auc2Nyb2xsV3JhcCwgJ3Bzd3BUYXAnLCB1aS5vbkdsb2JhbFRhcCk7XG5cblx0XHRcdGlmKCFwc3dwLmxpa2VseVRvdWNoRGV2aWNlKSB7XG5cdFx0XHRcdGZyYW1ld29yay5iaW5kKHBzd3Auc2Nyb2xsV3JhcCwgJ21vdXNlb3ZlcicsIHVpLm9uTW91c2VPdmVyKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIHVuYmluZCBldmVudHMgZm9yIFVJXG5cdFx0X2xpc3RlbigndW5iaW5kRXZlbnRzJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRpZighX3NoYXJlTW9kYWxIaWRkZW4pIHtcblx0XHRcdFx0X3RvZ2dsZVNoYXJlTW9kYWwoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoX2lkbGVJbnRlcnZhbCkge1xuXHRcdFx0XHRjbGVhckludGVydmFsKF9pZGxlSW50ZXJ2YWwpO1xuXHRcdFx0fVxuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChkb2N1bWVudCwgJ21vdXNlb3V0JywgX29uTW91c2VMZWF2ZVdpbmRvdyk7XG5cdFx0XHRmcmFtZXdvcmsudW5iaW5kKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgX29uSWRsZU1vdXNlTW92ZSk7XG5cdFx0XHRmcmFtZXdvcmsudW5iaW5kKF9jb250cm9scywgJ3Bzd3BUYXAgY2xpY2snLCBfb25Db250cm9sc1RhcCk7XG5cdFx0XHRmcmFtZXdvcmsudW5iaW5kKHBzd3Auc2Nyb2xsV3JhcCwgJ3Bzd3BUYXAnLCB1aS5vbkdsb2JhbFRhcCk7XG5cdFx0XHRmcmFtZXdvcmsudW5iaW5kKHBzd3Auc2Nyb2xsV3JhcCwgJ21vdXNlb3ZlcicsIHVpLm9uTW91c2VPdmVyKTtcblxuXHRcdFx0aWYoX2Z1bGxzY3JlbkFQSSkge1xuXHRcdFx0XHRmcmFtZXdvcmsudW5iaW5kKGRvY3VtZW50LCBfZnVsbHNjcmVuQVBJLmV2ZW50SywgdWkudXBkYXRlRnVsbHNjcmVlbik7XG5cdFx0XHRcdGlmKF9mdWxsc2NyZW5BUEkuaXNGdWxsc2NyZWVuKCkpIHtcblx0XHRcdFx0XHRfb3B0aW9ucy5oaWRlQW5pbWF0aW9uRHVyYXRpb24gPSAwO1xuXHRcdFx0XHRcdF9mdWxsc2NyZW5BUEkuZXhpdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9mdWxsc2NyZW5BUEkgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cblx0XHQvLyBjbGVhbiB1cCB0aGluZ3Mgd2hlbiBnYWxsZXJ5IGlzIGRlc3Ryb3llZFxuXHRcdF9saXN0ZW4oJ2Rlc3Ryb3knLCBmdW5jdGlvbigpIHtcblx0XHRcdGlmKF9vcHRpb25zLmNhcHRpb25FbCkge1xuXHRcdFx0XHRpZihfZmFrZUNhcHRpb25Db250YWluZXIpIHtcblx0XHRcdFx0XHRfY29udHJvbHMucmVtb3ZlQ2hpbGQoX2Zha2VDYXB0aW9uQ29udGFpbmVyKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3MoX2NhcHRpb25Db250YWluZXIsICdwc3dwX19jYXB0aW9uLS1lbXB0eScpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihfc2hhcmVNb2RhbCkge1xuXHRcdFx0XHRfc2hhcmVNb2RhbC5jaGlsZHJlblswXS5vbmNsaWNrID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyhfY29udHJvbHMsICdwc3dwX191aS0tb3Zlci1jbG9zZScpO1xuXHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKCBfY29udHJvbHMsICdwc3dwX191aS0taGlkZGVuJyk7XG5cdFx0XHR1aS5zZXRJZGxlKGZhbHNlKTtcblx0XHR9KTtcblx0XHRcblxuXHRcdGlmKCFfb3B0aW9ucy5zaG93QW5pbWF0aW9uRHVyYXRpb24pIHtcblx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyggX2NvbnRyb2xzLCAncHN3cF9fdWktLWhpZGRlbicpO1xuXHRcdH1cblx0XHRfbGlzdGVuKCdpbml0aWFsWm9vbUluJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihfb3B0aW9ucy5zaG93QW5pbWF0aW9uRHVyYXRpb24pIHtcblx0XHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKCBfY29udHJvbHMsICdwc3dwX191aS0taGlkZGVuJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0X2xpc3RlbignaW5pdGlhbFpvb21PdXQnLCBmdW5jdGlvbigpIHtcblx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyggX2NvbnRyb2xzLCAncHN3cF9fdWktLWhpZGRlbicpO1xuXHRcdH0pO1xuXG5cdFx0X2xpc3RlbigncGFyc2VWZXJ0aWNhbE1hcmdpbicsIF9hcHBseU5hdkJhckdhcHMpO1xuXHRcdFxuXHRcdF9zZXR1cFVJRWxlbWVudHMoKTtcblxuXHRcdGlmKF9vcHRpb25zLnNoYXJlRWwgJiYgX3NoYXJlQnV0dG9uICYmIF9zaGFyZU1vZGFsKSB7XG5cdFx0XHRfc2hhcmVNb2RhbEhpZGRlbiA9IHRydWU7XG5cdFx0fVxuXG5cdFx0X2NvdW50TnVtSXRlbXMoKTtcblxuXHRcdF9zZXR1cElkbGUoKTtcblxuXHRcdF9zZXR1cEZ1bGxzY3JlZW5BUEkoKTtcblxuXHRcdF9zZXR1cExvYWRpbmdJbmRpY2F0b3IoKTtcblx0fTtcblxuXHR1aS5zZXRJZGxlID0gZnVuY3Rpb24oaXNJZGxlKSB7XG5cdFx0X2lzSWRsZSA9IGlzSWRsZTtcblx0XHRfdG9nZ2xlUHN3cENsYXNzKF9jb250cm9scywgJ3VpLS1pZGxlJywgaXNJZGxlKTtcblx0fTtcblxuXHR1aS51cGRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBEb24ndCB1cGRhdGUgVUkgaWYgaXQncyBoaWRkZW5cblx0XHRpZihfY29udHJvbHNWaXNpYmxlICYmIHBzd3AuY3Vyckl0ZW0pIHtcblx0XHRcdFxuXHRcdFx0dWkudXBkYXRlSW5kZXhJbmRpY2F0b3IoKTtcblxuXHRcdFx0aWYoX29wdGlvbnMuY2FwdGlvbkVsKSB7XG5cdFx0XHRcdF9vcHRpb25zLmFkZENhcHRpb25IVE1MRm4ocHN3cC5jdXJySXRlbSwgX2NhcHRpb25Db250YWluZXIpO1xuXG5cdFx0XHRcdF90b2dnbGVQc3dwQ2xhc3MoX2NhcHRpb25Db250YWluZXIsICdjYXB0aW9uLS1lbXB0eScsICFwc3dwLmN1cnJJdGVtLnRpdGxlKTtcblx0XHRcdH1cblxuXHRcdFx0X292ZXJsYXlVSVVwZGF0ZWQgPSB0cnVlO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdF9vdmVybGF5VUlVcGRhdGVkID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYoIV9zaGFyZU1vZGFsSGlkZGVuKSB7XG5cdFx0XHRfdG9nZ2xlU2hhcmVNb2RhbCgpO1xuXHRcdH1cblxuXHRcdF9jb3VudE51bUl0ZW1zKCk7XG5cdH07XG5cblx0dWkudXBkYXRlRnVsbHNjcmVlbiA9IGZ1bmN0aW9uKGUpIHtcblxuXHRcdGlmKGUpIHtcblx0XHRcdC8vIHNvbWUgYnJvd3NlcnMgY2hhbmdlIHdpbmRvdyBzY3JvbGwgcG9zaXRpb24gZHVyaW5nIHRoZSBmdWxsc2NyZWVuXG5cdFx0XHQvLyBzbyBQaG90b1N3aXBlIHVwZGF0ZXMgaXQganVzdCBpbiBjYXNlXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRwc3dwLnNldFNjcm9sbE9mZnNldCggMCwgZnJhbWV3b3JrLmdldFNjcm9sbFkoKSApO1xuXHRcdFx0fSwgNTApO1xuXHRcdH1cblx0XHRcblx0XHQvLyB0b29nbGUgcHN3cC0tZnMgY2xhc3Mgb24gcm9vdCBlbGVtZW50XG5cdFx0ZnJhbWV3b3JrWyAoX2Z1bGxzY3JlbkFQSS5pc0Z1bGxzY3JlZW4oKSA/ICdhZGQnIDogJ3JlbW92ZScpICsgJ0NsYXNzJyBdKHBzd3AudGVtcGxhdGUsICdwc3dwLS1mcycpO1xuXHR9O1xuXG5cdHVpLnVwZGF0ZUluZGV4SW5kaWNhdG9yID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoX29wdGlvbnMuY291bnRlckVsKSB7XG5cdFx0XHRfaW5kZXhJbmRpY2F0b3IuaW5uZXJIVE1MID0gKHBzd3AuZ2V0Q3VycmVudEluZGV4KCkrMSkgKyBcblx0XHRcdFx0XHRcdFx0XHRcdFx0X29wdGlvbnMuaW5kZXhJbmRpY2F0b3JTZXAgKyBcblx0XHRcdFx0XHRcdFx0XHRcdFx0X29wdGlvbnMuZ2V0TnVtSXRlbXNGbigpO1xuXHRcdH1cblx0fTtcblx0XG5cdHVpLm9uR2xvYmFsVGFwID0gZnVuY3Rpb24oZSkge1xuXHRcdGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcblx0XHR2YXIgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuXG5cdFx0aWYoX2Jsb2NrQ29udHJvbHNUYXApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZihlLmRldGFpbCAmJiBlLmRldGFpbC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykge1xuXG5cdFx0XHQvLyBjbG9zZSBnYWxsZXJ5IGlmIGNsaWNrZWQgb3V0c2lkZSBvZiB0aGUgaW1hZ2Vcblx0XHRcdGlmKF9oYXNDbG9zZUNsYXNzKHRhcmdldCkpIHtcblx0XHRcdFx0cHN3cC5jbG9zZSgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmKGZyYW1ld29yay5oYXNDbGFzcyh0YXJnZXQsICdwc3dwX19pbWcnKSkge1xuXHRcdFx0XHRpZihwc3dwLmdldFpvb21MZXZlbCgpID09PSAxICYmIHBzd3AuZ2V0Wm9vbUxldmVsKCkgPD0gcHN3cC5jdXJySXRlbS5maXRSYXRpbykge1xuXHRcdFx0XHRcdGlmKF9vcHRpb25zLmNsaWNrVG9DbG9zZU5vblpvb21hYmxlKSB7XG5cdFx0XHRcdFx0XHRwc3dwLmNsb3NlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHBzd3AudG9nZ2xlRGVza3RvcFpvb20oZS5kZXRhaWwucmVsZWFzZVBvaW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gdGFwIGFueXdoZXJlIChleGNlcHQgYnV0dG9ucykgdG8gdG9nZ2xlIHZpc2liaWxpdHkgb2YgY29udHJvbHNcblx0XHRcdGlmKF9vcHRpb25zLnRhcFRvVG9nZ2xlQ29udHJvbHMpIHtcblx0XHRcdFx0aWYoX2NvbnRyb2xzVmlzaWJsZSkge1xuXHRcdFx0XHRcdHVpLmhpZGVDb250cm9scygpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHVpLnNob3dDb250cm9scygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHRhcCB0byBjbG9zZSBnYWxsZXJ5XG5cdFx0XHRpZihfb3B0aW9ucy50YXBUb0Nsb3NlICYmIChmcmFtZXdvcmsuaGFzQ2xhc3ModGFyZ2V0LCAncHN3cF9faW1nJykgfHwgX2hhc0Nsb3NlQ2xhc3ModGFyZ2V0KSkgKSB7XG5cdFx0XHRcdHBzd3AuY2xvc2UoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fVxuXHR9O1xuXHR1aS5vbk1vdXNlT3ZlciA9IGZ1bmN0aW9uKGUpIHtcblx0XHRlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG5cdFx0dmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcblxuXHRcdC8vIGFkZCBjbGFzcyB3aGVuIG1vdXNlIGlzIG92ZXIgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBjbG9zZSB0aGUgZ2FsbGVyeVxuXHRcdF90b2dnbGVQc3dwQ2xhc3MoX2NvbnRyb2xzLCAndWktLW92ZXItY2xvc2UnLCBfaGFzQ2xvc2VDbGFzcyh0YXJnZXQpKTtcblx0fTtcblxuXHR1aS5oaWRlQ29udHJvbHMgPSBmdW5jdGlvbigpIHtcblx0XHRmcmFtZXdvcmsuYWRkQ2xhc3MoX2NvbnRyb2xzLCdwc3dwX191aS0taGlkZGVuJyk7XG5cdFx0X2NvbnRyb2xzVmlzaWJsZSA9IGZhbHNlO1xuXHR9O1xuXG5cdHVpLnNob3dDb250cm9scyA9IGZ1bmN0aW9uKCkge1xuXHRcdF9jb250cm9sc1Zpc2libGUgPSB0cnVlO1xuXHRcdGlmKCFfb3ZlcmxheVVJVXBkYXRlZCkge1xuXHRcdFx0dWkudXBkYXRlKCk7XG5cdFx0fVxuXHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyhfY29udHJvbHMsJ3Bzd3BfX3VpLS1oaWRkZW4nKTtcblx0fTtcblxuXHR1aS5zdXBwb3J0c0Z1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZCA9IGRvY3VtZW50O1xuXHRcdHJldHVybiAhIShkLmV4aXRGdWxsc2NyZWVuIHx8IGQubW96Q2FuY2VsRnVsbFNjcmVlbiB8fCBkLndlYmtpdEV4aXRGdWxsc2NyZWVuIHx8IGQubXNFeGl0RnVsbHNjcmVlbik7XG5cdH07XG5cblx0dWkuZ2V0RnVsbHNjcmVlbkFQSSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBkRSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcblx0XHRcdGFwaSxcblx0XHRcdHRGID0gJ2Z1bGxzY3JlZW5jaGFuZ2UnO1xuXG5cdFx0aWYgKGRFLnJlcXVlc3RGdWxsc2NyZWVuKSB7XG5cdFx0XHRhcGkgPSB7XG5cdFx0XHRcdGVudGVySzogJ3JlcXVlc3RGdWxsc2NyZWVuJyxcblx0XHRcdFx0ZXhpdEs6ICdleGl0RnVsbHNjcmVlbicsXG5cdFx0XHRcdGVsZW1lbnRLOiAnZnVsbHNjcmVlbkVsZW1lbnQnLFxuXHRcdFx0XHRldmVudEs6IHRGXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIGlmKGRFLm1velJlcXVlc3RGdWxsU2NyZWVuICkge1xuXHRcdFx0YXBpID0ge1xuXHRcdFx0XHRlbnRlcks6ICdtb3pSZXF1ZXN0RnVsbFNjcmVlbicsXG5cdFx0XHRcdGV4aXRLOiAnbW96Q2FuY2VsRnVsbFNjcmVlbicsXG5cdFx0XHRcdGVsZW1lbnRLOiAnbW96RnVsbFNjcmVlbkVsZW1lbnQnLFxuXHRcdFx0XHRldmVudEs6ICdtb3onICsgdEZcblx0XHRcdH07XG5cblx0XHRcdFxuXG5cdFx0fSBlbHNlIGlmKGRFLndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuKSB7XG5cdFx0XHRhcGkgPSB7XG5cdFx0XHRcdGVudGVySzogJ3dlYmtpdFJlcXVlc3RGdWxsc2NyZWVuJyxcblx0XHRcdFx0ZXhpdEs6ICd3ZWJraXRFeGl0RnVsbHNjcmVlbicsXG5cdFx0XHRcdGVsZW1lbnRLOiAnd2Via2l0RnVsbHNjcmVlbkVsZW1lbnQnLFxuXHRcdFx0XHRldmVudEs6ICd3ZWJraXQnICsgdEZcblx0XHRcdH07XG5cblx0XHR9IGVsc2UgaWYoZEUubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuXHRcdFx0YXBpID0ge1xuXHRcdFx0XHRlbnRlcks6ICdtc1JlcXVlc3RGdWxsc2NyZWVuJyxcblx0XHRcdFx0ZXhpdEs6ICdtc0V4aXRGdWxsc2NyZWVuJyxcblx0XHRcdFx0ZWxlbWVudEs6ICdtc0Z1bGxzY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0ZXZlbnRLOiAnTVNGdWxsc2NyZWVuQ2hhbmdlJ1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpZihhcGkpIHtcblx0XHRcdGFwaS5lbnRlciA9IGZ1bmN0aW9uKCkgeyBcblx0XHRcdFx0Ly8gZGlzYWJsZSBjbG9zZS1vbi1zY3JvbGwgaW4gZnVsbHNjcmVlblxuXHRcdFx0XHRfaW5pdGFsQ2xvc2VPblNjcm9sbFZhbHVlID0gX29wdGlvbnMuY2xvc2VPblNjcm9sbDsgXG5cdFx0XHRcdF9vcHRpb25zLmNsb3NlT25TY3JvbGwgPSBmYWxzZTsgXG5cblx0XHRcdFx0aWYodGhpcy5lbnRlcksgPT09ICd3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbicpIHtcblx0XHRcdFx0XHRwc3dwLnRlbXBsYXRlW3RoaXMuZW50ZXJLXSggRWxlbWVudC5BTExPV19LRVlCT0FSRF9JTlBVVCApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBwc3dwLnRlbXBsYXRlW3RoaXMuZW50ZXJLXSgpOyBcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGFwaS5leGl0ID0gZnVuY3Rpb24oKSB7IFxuXHRcdFx0XHRfb3B0aW9ucy5jbG9zZU9uU2Nyb2xsID0gX2luaXRhbENsb3NlT25TY3JvbGxWYWx1ZTtcblxuXHRcdFx0XHRyZXR1cm4gZG9jdW1lbnRbdGhpcy5leGl0S10oKTsgXG5cblx0XHRcdH07XG5cdFx0XHRhcGkuaXNGdWxsc2NyZWVuID0gZnVuY3Rpb24oKSB7IHJldHVybiBkb2N1bWVudFt0aGlzLmVsZW1lbnRLXTsgfTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYXBpO1xuXHR9O1xuXG5cblxufTtcbnJldHVybiBQaG90b1N3aXBlVUlfRGVmYXVsdDtcblxuXG59KTtcbiIsIi8qISBQaG90b1N3aXBlIC0gdjQuMS4xIC0gMjAxNS0xMi0yNFxuKiBodHRwOi8vcGhvdG9zd2lwZS5jb21cbiogQ29weXJpZ2h0IChjKSAyMDE1IERtaXRyeSBTZW1lbm92OyAqL1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7IFxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9IGVsc2Uge1xuXHRcdHJvb3QuUGhvdG9Td2lwZSA9IGZhY3RvcnkoKTtcblx0fVxufSkodGhpcywgZnVuY3Rpb24gKCkge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIFBob3RvU3dpcGUgPSBmdW5jdGlvbih0ZW1wbGF0ZSwgVWlDbGFzcywgaXRlbXMsIG9wdGlvbnMpe1xuXG4vKj4+ZnJhbWV3b3JrLWJyaWRnZSovXG4vKipcbiAqXG4gKiBTZXQgb2YgZ2VuZXJpYyBmdW5jdGlvbnMgdXNlZCBieSBnYWxsZXJ5LlxuICogXG4gKiBZb3UncmUgZnJlZSB0byBtb2RpZnkgYW55dGhpbmcgaGVyZSBhcyBsb25nIGFzIGZ1bmN0aW9uYWxpdHkgaXMga2VwdC5cbiAqIFxuICovXG52YXIgZnJhbWV3b3JrID0ge1xuXHRmZWF0dXJlczogbnVsbCxcblx0YmluZDogZnVuY3Rpb24odGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgdW5iaW5kKSB7XG5cdFx0dmFyIG1ldGhvZE5hbWUgPSAodW5iaW5kID8gJ3JlbW92ZScgOiAnYWRkJykgKyAnRXZlbnRMaXN0ZW5lcic7XG5cdFx0dHlwZSA9IHR5cGUuc3BsaXQoJyAnKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYodHlwZVtpXSkge1xuXHRcdFx0XHR0YXJnZXRbbWV0aG9kTmFtZV0oIHR5cGVbaV0sIGxpc3RlbmVyLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRpc0FycmF5OiBmdW5jdGlvbihvYmopIHtcblx0XHRyZXR1cm4gKG9iaiBpbnN0YW5jZW9mIEFycmF5KTtcblx0fSxcblx0Y3JlYXRlRWw6IGZ1bmN0aW9uKGNsYXNzZXMsIHRhZykge1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnIHx8ICdkaXYnKTtcblx0XHRpZihjbGFzc2VzKSB7XG5cdFx0XHRlbC5jbGFzc05hbWUgPSBjbGFzc2VzO1xuXHRcdH1cblx0XHRyZXR1cm4gZWw7XG5cdH0sXG5cdGdldFNjcm9sbFk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB5T2Zmc2V0ID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHRcdHJldHVybiB5T2Zmc2V0ICE9PSB1bmRlZmluZWQgPyB5T2Zmc2V0IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG5cdFx0ZnJhbWV3b3JrLmJpbmQodGFyZ2V0LHR5cGUsbGlzdGVuZXIsdHJ1ZSk7XG5cdH0sXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbCwgY2xhc3NOYW1lKSB7XG5cdFx0dmFyIHJlZyA9IG5ldyBSZWdFeHAoJyhcXFxcc3xeKScgKyBjbGFzc05hbWUgKyAnKFxcXFxzfCQpJyk7XG5cdFx0ZWwuY2xhc3NOYW1lID0gZWwuY2xhc3NOYW1lLnJlcGxhY2UocmVnLCAnICcpLnJlcGxhY2UoL15cXHNcXHMqLywgJycpLnJlcGxhY2UoL1xcc1xccyokLywgJycpOyBcblx0fSxcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKGVsLCBjbGFzc05hbWUpIHtcblx0XHRpZiggIWZyYW1ld29yay5oYXNDbGFzcyhlbCxjbGFzc05hbWUpICkge1xuXHRcdFx0ZWwuY2xhc3NOYW1lICs9IChlbC5jbGFzc05hbWUgPyAnICcgOiAnJykgKyBjbGFzc05hbWU7XG5cdFx0fVxuXHR9LFxuXHRoYXNDbGFzczogZnVuY3Rpb24oZWwsIGNsYXNzTmFtZSkge1xuXHRcdHJldHVybiBlbC5jbGFzc05hbWUgJiYgbmV3IFJlZ0V4cCgnKF58XFxcXHMpJyArIGNsYXNzTmFtZSArICcoXFxcXHN8JCknKS50ZXN0KGVsLmNsYXNzTmFtZSk7XG5cdH0sXG5cdGdldENoaWxkQnlDbGFzczogZnVuY3Rpb24ocGFyZW50RWwsIGNoaWxkQ2xhc3NOYW1lKSB7XG5cdFx0dmFyIG5vZGUgPSBwYXJlbnRFbC5maXJzdENoaWxkO1xuXHRcdHdoaWxlKG5vZGUpIHtcblx0XHRcdGlmKCBmcmFtZXdvcmsuaGFzQ2xhc3Mobm9kZSwgY2hpbGRDbGFzc05hbWUpICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZTtcblx0XHRcdH1cblx0XHRcdG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuXHRcdH1cblx0fSxcblx0YXJyYXlTZWFyY2g6IGZ1bmN0aW9uKGFycmF5LCB2YWx1ZSwga2V5KSB7XG5cdFx0dmFyIGkgPSBhcnJheS5sZW5ndGg7XG5cdFx0d2hpbGUoaS0tKSB7XG5cdFx0XHRpZihhcnJheVtpXVtrZXldID09PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH0gXG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblx0ZXh0ZW5kOiBmdW5jdGlvbihvMSwgbzIsIHByZXZlbnRPdmVyd3JpdGUpIHtcblx0XHRmb3IgKHZhciBwcm9wIGluIG8yKSB7XG5cdFx0XHRpZiAobzIuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcblx0XHRcdFx0aWYocHJldmVudE92ZXJ3cml0ZSAmJiBvMS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG8xW3Byb3BdID0gbzJbcHJvcF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRlYXNpbmc6IHtcblx0XHRzaW5lOiB7XG5cdFx0XHRvdXQ6IGZ1bmN0aW9uKGspIHtcblx0XHRcdFx0cmV0dXJuIE1hdGguc2luKGsgKiAoTWF0aC5QSSAvIDIpKTtcblx0XHRcdH0sXG5cdFx0XHRpbk91dDogZnVuY3Rpb24oaykge1xuXHRcdFx0XHRyZXR1cm4gLSAoTWF0aC5jb3MoTWF0aC5QSSAqIGspIC0gMSkgLyAyO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y3ViaWM6IHtcblx0XHRcdG91dDogZnVuY3Rpb24oaykge1xuXHRcdFx0XHRyZXR1cm4gLS1rICogayAqIGsgKyAxO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvKlxuXHRcdFx0ZWxhc3RpYzoge1xuXHRcdFx0XHRvdXQ6IGZ1bmN0aW9uICggayApIHtcblxuXHRcdFx0XHRcdHZhciBzLCBhID0gMC4xLCBwID0gMC40O1xuXHRcdFx0XHRcdGlmICggayA9PT0gMCApIHJldHVybiAwO1xuXHRcdFx0XHRcdGlmICggayA9PT0gMSApIHJldHVybiAxO1xuXHRcdFx0XHRcdGlmICggIWEgfHwgYSA8IDEgKSB7IGEgPSAxOyBzID0gcCAvIDQ7IH1cblx0XHRcdFx0XHRlbHNlIHMgPSBwICogTWF0aC5hc2luKCAxIC8gYSApIC8gKCAyICogTWF0aC5QSSApO1xuXHRcdFx0XHRcdHJldHVybiAoIGEgKiBNYXRoLnBvdyggMiwgLSAxMCAqIGspICogTWF0aC5zaW4oICggayAtIHMgKSAqICggMiAqIE1hdGguUEkgKSAvIHAgKSArIDEgKTtcblxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdGJhY2s6IHtcblx0XHRcdFx0b3V0OiBmdW5jdGlvbiAoIGsgKSB7XG5cdFx0XHRcdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdFx0XHRcdHJldHVybiAtLWsgKiBrICogKCAoIHMgKyAxICkgKiBrICsgcyApICsgMTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdCovXG5cdH0sXG5cblx0LyoqXG5cdCAqIFxuXHQgKiBAcmV0dXJuIHtvYmplY3R9XG5cdCAqIFxuXHQgKiB7XG5cdCAqICByYWYgOiByZXF1ZXN0IGFuaW1hdGlvbiBmcmFtZSBmdW5jdGlvblxuXHQgKiAgY2FmIDogY2FuY2VsIGFuaW1hdGlvbiBmcmFtZSBmdW5jdGlvblxuXHQgKiAgdHJhbnNmcm9tIDogdHJhbnNmb3JtIHByb3BlcnR5IGtleSAod2l0aCB2ZW5kb3IpLCBvciBudWxsIGlmIG5vdCBzdXBwb3J0ZWRcblx0ICogIG9sZElFIDogSUU4IG9yIGJlbG93XG5cdCAqIH1cblx0ICogXG5cdCAqL1xuXHRkZXRlY3RGZWF0dXJlczogZnVuY3Rpb24oKSB7XG5cdFx0aWYoZnJhbWV3b3JrLmZlYXR1cmVzKSB7XG5cdFx0XHRyZXR1cm4gZnJhbWV3b3JrLmZlYXR1cmVzO1xuXHRcdH1cblx0XHR2YXIgaGVscGVyRWwgPSBmcmFtZXdvcmsuY3JlYXRlRWwoKSxcblx0XHRcdGhlbHBlclN0eWxlID0gaGVscGVyRWwuc3R5bGUsXG5cdFx0XHR2ZW5kb3IgPSAnJyxcblx0XHRcdGZlYXR1cmVzID0ge307XG5cblx0XHQvLyBJRTggYW5kIGJlbG93XG5cdFx0ZmVhdHVyZXMub2xkSUUgPSBkb2N1bWVudC5hbGwgJiYgIWRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXI7XG5cblx0XHRmZWF0dXJlcy50b3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdztcblxuXHRcdGlmKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcblx0XHRcdGZlYXR1cmVzLnJhZiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cdFx0XHRmZWF0dXJlcy5jYWYgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XG5cdFx0fVxuXG5cdFx0ZmVhdHVyZXMucG9pbnRlckV2ZW50ID0gbmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkIHx8IG5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkO1xuXG5cdFx0Ly8gZml4IGZhbHNlLXBvc2l0aXZlIGRldGVjdGlvbiBvZiBvbGQgQW5kcm9pZCBpbiBuZXcgSUVcblx0XHQvLyAoSUUxMSB1YSBzdHJpbmcgY29udGFpbnMgXCJBbmRyb2lkIDQuMFwiKVxuXHRcdFxuXHRcdGlmKCFmZWF0dXJlcy5wb2ludGVyRXZlbnQpIHsgXG5cblx0XHRcdHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG5cblx0XHRcdC8vIERldGVjdCBpZiBkZXZpY2UgaXMgaVBob25lIG9yIGlQb2QgYW5kIGlmIGl0J3Mgb2xkZXIgdGhhbiBpT1MgOFxuXHRcdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTQyMjM5MjBcblx0XHRcdC8vIFxuXHRcdFx0Ly8gVGhpcyBkZXRlY3Rpb24gaXMgbWFkZSBiZWNhdXNlIG9mIGJ1Z2d5IHRvcC9ib3R0b20gdG9vbGJhcnNcblx0XHRcdC8vIHRoYXQgZG9uJ3QgdHJpZ2dlciB3aW5kb3cucmVzaXplIGV2ZW50LlxuXHRcdFx0Ly8gRm9yIG1vcmUgaW5mbyByZWZlciB0byBfaXNGaXhlZFBvc2l0aW9uIHZhcmlhYmxlIGluIGNvcmUuanNcblxuXHRcdFx0aWYgKC9pUChob25lfG9kKS8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pKSB7XG5cdFx0XHRcdHZhciB2ID0gKG5hdmlnYXRvci5hcHBWZXJzaW9uKS5tYXRjaCgvT1MgKFxcZCspXyhcXGQrKV8/KFxcZCspPy8pO1xuXHRcdFx0XHRpZih2ICYmIHYubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHYgPSBwYXJzZUludCh2WzFdLCAxMCk7XG5cdFx0XHRcdFx0aWYodiA+PSAxICYmIHYgPCA4ICkge1xuXHRcdFx0XHRcdFx0ZmVhdHVyZXMuaXNPbGRJT1NQaG9uZSA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIERldGVjdCBvbGQgQW5kcm9pZCAoYmVmb3JlIEtpdEthdClcblx0XHRcdC8vIGR1ZSB0byBidWdzIHJlbGF0ZWQgdG8gcG9zaXRpb246Zml4ZWRcblx0XHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzE4NDU3My9waWNrLXVwLXRoZS1hbmRyb2lkLXZlcnNpb24taW4tdGhlLWJyb3dzZXItYnktamF2YXNjcmlwdFxuXHRcdFx0XG5cdFx0XHR2YXIgbWF0Y2ggPSB1YS5tYXRjaCgvQW5kcm9pZFxccyhbMC05XFwuXSopLyk7XG5cdFx0XHR2YXIgYW5kcm9pZHZlcnNpb24gPSAgbWF0Y2ggPyBtYXRjaFsxXSA6IDA7XG5cdFx0XHRhbmRyb2lkdmVyc2lvbiA9IHBhcnNlRmxvYXQoYW5kcm9pZHZlcnNpb24pO1xuXHRcdFx0aWYoYW5kcm9pZHZlcnNpb24gPj0gMSApIHtcblx0XHRcdFx0aWYoYW5kcm9pZHZlcnNpb24gPCA0LjQpIHtcblx0XHRcdFx0XHRmZWF0dXJlcy5pc09sZEFuZHJvaWQgPSB0cnVlOyAvLyBmb3IgZml4ZWQgcG9zaXRpb24gYnVnICYgcGVyZm9ybWFuY2Vcblx0XHRcdFx0fVxuXHRcdFx0XHRmZWF0dXJlcy5hbmRyb2lkVmVyc2lvbiA9IGFuZHJvaWR2ZXJzaW9uOyAvLyBmb3IgdG91Y2hlbmQgYnVnXG5cdFx0XHR9XHRcblx0XHRcdGZlYXR1cmVzLmlzTW9iaWxlT3BlcmEgPSAvb3BlcmEgbWluaXxvcGVyYSBtb2JpL2kudGVzdCh1YSk7XG5cblx0XHRcdC8vIHAucy4geWVzLCB5ZXMsIFVBIHNuaWZmaW5nIGlzIGJhZCwgcHJvcG9zZSB5b3VyIHNvbHV0aW9uIGZvciBhYm92ZSBidWdzLlxuXHRcdH1cblx0XHRcblx0XHR2YXIgc3R5bGVDaGVja3MgPSBbJ3RyYW5zZm9ybScsICdwZXJzcGVjdGl2ZScsICdhbmltYXRpb25OYW1lJ10sXG5cdFx0XHR2ZW5kb3JzID0gWycnLCAnd2Via2l0JywnTW96JywnbXMnLCdPJ10sXG5cdFx0XHRzdHlsZUNoZWNrSXRlbSxcblx0XHRcdHN0eWxlTmFtZTtcblxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0XHRcdHZlbmRvciA9IHZlbmRvcnNbaV07XG5cblx0XHRcdGZvcih2YXIgYSA9IDA7IGEgPCAzOyBhKyspIHtcblx0XHRcdFx0c3R5bGVDaGVja0l0ZW0gPSBzdHlsZUNoZWNrc1thXTtcblxuXHRcdFx0XHQvLyB1cHBlcmNhc2UgZmlyc3QgbGV0dGVyIG9mIHByb3BlcnR5IG5hbWUsIGlmIHZlbmRvciBpcyBwcmVzZW50XG5cdFx0XHRcdHN0eWxlTmFtZSA9IHZlbmRvciArICh2ZW5kb3IgPyBcblx0XHRcdFx0XHRcdFx0XHRcdFx0c3R5bGVDaGVja0l0ZW0uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHlsZUNoZWNrSXRlbS5zbGljZSgxKSA6IFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzdHlsZUNoZWNrSXRlbSk7XG5cdFx0XHRcblx0XHRcdFx0aWYoIWZlYXR1cmVzW3N0eWxlQ2hlY2tJdGVtXSAmJiBzdHlsZU5hbWUgaW4gaGVscGVyU3R5bGUgKSB7XG5cdFx0XHRcdFx0ZmVhdHVyZXNbc3R5bGVDaGVja0l0ZW1dID0gc3R5bGVOYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKHZlbmRvciAmJiAhZmVhdHVyZXMucmFmKSB7XG5cdFx0XHRcdHZlbmRvciA9IHZlbmRvci50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRmZWF0dXJlcy5yYWYgPSB3aW5kb3dbdmVuZG9yKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcblx0XHRcdFx0aWYoZmVhdHVyZXMucmFmKSB7XG5cdFx0XHRcdFx0ZmVhdHVyZXMuY2FmID0gd2luZG93W3ZlbmRvcisnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXSB8fCBcblx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvd1t2ZW5kb3IrJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFx0XG5cdFx0aWYoIWZlYXR1cmVzLnJhZikge1xuXHRcdFx0dmFyIGxhc3RUaW1lID0gMDtcblx0XHRcdGZlYXR1cmVzLnJhZiA9IGZ1bmN0aW9uKGZuKSB7XG5cdFx0XHRcdHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRcdFx0XHR2YXIgdGltZVRvQ2FsbCA9IE1hdGgubWF4KDAsIDE2IC0gKGN1cnJUaW1lIC0gbGFzdFRpbWUpKTtcblx0XHRcdFx0dmFyIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZuKGN1cnJUaW1lICsgdGltZVRvQ2FsbCk7IH0sIHRpbWVUb0NhbGwpO1xuXHRcdFx0XHRsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDtcblx0XHRcdFx0cmV0dXJuIGlkO1xuXHRcdFx0fTtcblx0XHRcdGZlYXR1cmVzLmNhZiA9IGZ1bmN0aW9uKGlkKSB7IGNsZWFyVGltZW91dChpZCk7IH07XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IFNWRyBzdXBwb3J0XG5cdFx0ZmVhdHVyZXMuc3ZnID0gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMgJiYgXG5cdFx0XHRcdFx0XHQhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJykuY3JlYXRlU1ZHUmVjdDtcblxuXHRcdGZyYW1ld29yay5mZWF0dXJlcyA9IGZlYXR1cmVzO1xuXG5cdFx0cmV0dXJuIGZlYXR1cmVzO1xuXHR9XG59O1xuXG5mcmFtZXdvcmsuZGV0ZWN0RmVhdHVyZXMoKTtcblxuLy8gT3ZlcnJpZGUgYWRkRXZlbnRMaXN0ZW5lciBmb3Igb2xkIHZlcnNpb25zIG9mIElFXG5pZihmcmFtZXdvcmsuZmVhdHVyZXMub2xkSUUpIHtcblxuXHRmcmFtZXdvcmsuYmluZCA9IGZ1bmN0aW9uKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHVuYmluZCkge1xuXHRcdFxuXHRcdHR5cGUgPSB0eXBlLnNwbGl0KCcgJyk7XG5cblx0XHR2YXIgbWV0aG9kTmFtZSA9ICh1bmJpbmQgPyAnZGV0YWNoJyA6ICdhdHRhY2gnKSArICdFdmVudCcsXG5cdFx0XHRldk5hbWUsXG5cdFx0XHRfaGFuZGxlRXYgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGlzdGVuZXIuaGFuZGxlRXZlbnQuY2FsbChsaXN0ZW5lcik7XG5cdFx0XHR9O1xuXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoOyBpKyspIHtcblx0XHRcdGV2TmFtZSA9IHR5cGVbaV07XG5cdFx0XHRpZihldk5hbWUpIHtcblxuXHRcdFx0XHRpZih0eXBlb2YgbGlzdGVuZXIgPT09ICdvYmplY3QnICYmIGxpc3RlbmVyLmhhbmRsZUV2ZW50KSB7XG5cdFx0XHRcdFx0aWYoIXVuYmluZCkge1xuXHRcdFx0XHRcdFx0bGlzdGVuZXJbJ29sZElFJyArIGV2TmFtZV0gPSBfaGFuZGxlRXY7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmKCFsaXN0ZW5lclsnb2xkSUUnICsgZXZOYW1lXSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGFyZ2V0W21ldGhvZE5hbWVdKCAnb24nICsgZXZOYW1lLCBsaXN0ZW5lclsnb2xkSUUnICsgZXZOYW1lXSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGFyZ2V0W21ldGhvZE5hbWVdKCAnb24nICsgZXZOYW1lLCBsaXN0ZW5lcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0XG59XG5cbi8qPj5mcmFtZXdvcmstYnJpZGdlKi9cblxuLyo+PmNvcmUqL1xuLy9mdW5jdGlvbih0ZW1wbGF0ZSwgVWlDbGFzcywgaXRlbXMsIG9wdGlvbnMpXG5cbnZhciBzZWxmID0gdGhpcztcblxuLyoqXG4gKiBTdGF0aWMgdmFycywgZG9uJ3QgY2hhbmdlIHVubGVzcyB5b3Uga25vdyB3aGF0IHlvdSdyZSBkb2luZy5cbiAqL1xudmFyIERPVUJMRV9UQVBfUkFESVVTID0gMjUsIFxuXHROVU1fSE9MREVSUyA9IDM7XG5cbi8qKlxuICogT3B0aW9uc1xuICovXG52YXIgX29wdGlvbnMgPSB7XG5cdGFsbG93UGFuVG9OZXh0OnRydWUsXG5cdHNwYWNpbmc6IDAuMTIsXG5cdGJnT3BhY2l0eTogMSxcblx0bW91c2VVc2VkOiBmYWxzZSxcblx0bG9vcDogdHJ1ZSxcblx0cGluY2hUb0Nsb3NlOiB0cnVlLFxuXHRjbG9zZU9uU2Nyb2xsOiB0cnVlLFxuXHRjbG9zZU9uVmVydGljYWxEcmFnOiB0cnVlLFxuXHR2ZXJ0aWNhbERyYWdSYW5nZTogMC43NSxcblx0aGlkZUFuaW1hdGlvbkR1cmF0aW9uOiAzMzMsXG5cdHNob3dBbmltYXRpb25EdXJhdGlvbjogMzMzLFxuXHRzaG93SGlkZU9wYWNpdHk6IGZhbHNlLFxuXHRmb2N1czogdHJ1ZSxcblx0ZXNjS2V5OiB0cnVlLFxuXHRhcnJvd0tleXM6IHRydWUsXG5cdG1haW5TY3JvbGxFbmRGcmljdGlvbjogMC4zNSxcblx0cGFuRW5kRnJpY3Rpb246IDAuMzUsXG5cdGlzQ2xpY2thYmxlRWxlbWVudDogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgcmV0dXJuIGVsLnRhZ05hbWUgPT09ICdBJztcbiAgICB9LFxuICAgIGdldERvdWJsZVRhcFpvb206IGZ1bmN0aW9uKGlzTW91c2VDbGljaywgaXRlbSkge1xuICAgIFx0aWYoaXNNb3VzZUNsaWNrKSB7XG4gICAgXHRcdHJldHVybiAxO1xuICAgIFx0fSBlbHNlIHtcbiAgICBcdFx0cmV0dXJuIGl0ZW0uaW5pdGlhbFpvb21MZXZlbCA8IDAuNyA/IDEgOiAxLjMzO1xuICAgIFx0fVxuICAgIH0sXG4gICAgbWF4U3ByZWFkWm9vbTogMS4zMyxcblx0bW9kYWw6IHRydWUsXG5cblx0Ly8gbm90IGZ1bGx5IGltcGxlbWVudGVkIHlldFxuXHRzY2FsZU1vZGU6ICdmaXQnIC8vIFRPRE9cbn07XG5mcmFtZXdvcmsuZXh0ZW5kKF9vcHRpb25zLCBvcHRpb25zKTtcblxuXG4vKipcbiAqIFByaXZhdGUgaGVscGVyIHZhcmlhYmxlcyAmIGZ1bmN0aW9uc1xuICovXG5cbnZhciBfZ2V0RW1wdHlQb2ludCA9IGZ1bmN0aW9uKCkgeyBcblx0XHRyZXR1cm4ge3g6MCx5OjB9OyBcblx0fTtcblxudmFyIF9pc09wZW4sXG5cdF9pc0Rlc3Ryb3lpbmcsXG5cdF9jbG9zZWRCeVNjcm9sbCxcblx0X2N1cnJlbnRJdGVtSW5kZXgsXG5cdF9jb250YWluZXJTdHlsZSxcblx0X2NvbnRhaW5lclNoaWZ0SW5kZXgsXG5cdF9jdXJyUGFuRGlzdCA9IF9nZXRFbXB0eVBvaW50KCksXG5cdF9zdGFydFBhbk9mZnNldCA9IF9nZXRFbXB0eVBvaW50KCksXG5cdF9wYW5PZmZzZXQgPSBfZ2V0RW1wdHlQb2ludCgpLFxuXHRfdXBNb3ZlRXZlbnRzLCAvLyBkcmFnIG1vdmUsIGRyYWcgZW5kICYgZHJhZyBjYW5jZWwgZXZlbnRzIGFycmF5XG5cdF9kb3duRXZlbnRzLCAvLyBkcmFnIHN0YXJ0IGV2ZW50cyBhcnJheVxuXHRfZ2xvYmFsRXZlbnRIYW5kbGVycyxcblx0X3ZpZXdwb3J0U2l6ZSA9IHt9LFxuXHRfY3Vyclpvb21MZXZlbCxcblx0X3N0YXJ0Wm9vbUxldmVsLFxuXHRfdHJhbnNsYXRlUHJlZml4LFxuXHRfdHJhbnNsYXRlU3VmaXgsXG5cdF91cGRhdGVTaXplSW50ZXJ2YWwsXG5cdF9pdGVtc05lZWRVcGRhdGUsXG5cdF9jdXJyUG9zaXRpb25JbmRleCA9IDAsXG5cdF9vZmZzZXQgPSB7fSxcblx0X3NsaWRlU2l6ZSA9IF9nZXRFbXB0eVBvaW50KCksIC8vIHNpemUgb2Ygc2xpZGUgYXJlYSwgaW5jbHVkaW5nIHNwYWNpbmdcblx0X2l0ZW1Ib2xkZXJzLFxuXHRfcHJldkl0ZW1JbmRleCxcblx0X2luZGV4RGlmZiA9IDAsIC8vIGRpZmZlcmVuY2Ugb2YgaW5kZXhlcyBzaW5jZSBsYXN0IGNvbnRlbnQgdXBkYXRlXG5cdF9kcmFnU3RhcnRFdmVudCxcblx0X2RyYWdNb3ZlRXZlbnQsXG5cdF9kcmFnRW5kRXZlbnQsXG5cdF9kcmFnQ2FuY2VsRXZlbnQsXG5cdF90cmFuc2Zvcm1LZXksXG5cdF9wb2ludGVyRXZlbnRFbmFibGVkLFxuXHRfaXNGaXhlZFBvc2l0aW9uID0gdHJ1ZSxcblx0X2xpa2VseVRvdWNoRGV2aWNlLFxuXHRfbW9kdWxlcyA9IFtdLFxuXHRfcmVxdWVzdEFGLFxuXHRfY2FuY2VsQUYsXG5cdF9pbml0YWxDbGFzc05hbWUsXG5cdF9pbml0YWxXaW5kb3dTY3JvbGxZLFxuXHRfb2xkSUUsXG5cdF9jdXJyZW50V2luZG93U2Nyb2xsWSxcblx0X2ZlYXR1cmVzLFxuXHRfd2luZG93VmlzaWJsZVNpemUgPSB7fSxcblx0X3JlbmRlck1heFJlc29sdXRpb24gPSBmYWxzZSxcblxuXHQvLyBSZWdpc3RlcnMgUGhvdG9TV2lwZSBtb2R1bGUgKEhpc3RvcnksIENvbnRyb2xsZXIgLi4uKVxuXHRfcmVnaXN0ZXJNb2R1bGUgPSBmdW5jdGlvbihuYW1lLCBtb2R1bGUpIHtcblx0XHRmcmFtZXdvcmsuZXh0ZW5kKHNlbGYsIG1vZHVsZS5wdWJsaWNNZXRob2RzKTtcblx0XHRfbW9kdWxlcy5wdXNoKG5hbWUpO1xuXHR9LFxuXG5cdF9nZXRMb29wZWRJZCA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIG51bVNsaWRlcyA9IF9nZXROdW1JdGVtcygpO1xuXHRcdGlmKGluZGV4ID4gbnVtU2xpZGVzIC0gMSkge1xuXHRcdFx0cmV0dXJuIGluZGV4IC0gbnVtU2xpZGVzO1xuXHRcdH0gZWxzZSAgaWYoaW5kZXggPCAwKSB7XG5cdFx0XHRyZXR1cm4gbnVtU2xpZGVzICsgaW5kZXg7XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleDtcblx0fSxcblx0XG5cdC8vIE1pY3JvIGJpbmQvdHJpZ2dlclxuXHRfbGlzdGVuZXJzID0ge30sXG5cdF9saXN0ZW4gPSBmdW5jdGlvbihuYW1lLCBmbikge1xuXHRcdGlmKCFfbGlzdGVuZXJzW25hbWVdKSB7XG5cdFx0XHRfbGlzdGVuZXJzW25hbWVdID0gW107XG5cdFx0fVxuXHRcdHJldHVybiBfbGlzdGVuZXJzW25hbWVdLnB1c2goZm4pO1xuXHR9LFxuXHRfc2hvdXQgPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0dmFyIGxpc3RlbmVycyA9IF9saXN0ZW5lcnNbbmFtZV07XG5cblx0XHRpZihsaXN0ZW5lcnMpIHtcblx0XHRcdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHRcdGFyZ3Muc2hpZnQoKTtcblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRsaXN0ZW5lcnNbaV0uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdF9nZXRDdXJyZW50VGltZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblx0fSxcblx0X2FwcGx5QmdPcGFjaXR5ID0gZnVuY3Rpb24ob3BhY2l0eSkge1xuXHRcdF9iZ09wYWNpdHkgPSBvcGFjaXR5O1xuXHRcdHNlbGYuYmcuc3R5bGUub3BhY2l0eSA9IG9wYWNpdHkgKiBfb3B0aW9ucy5iZ09wYWNpdHk7XG5cdH0sXG5cblx0X2FwcGx5Wm9vbVRyYW5zZm9ybSA9IGZ1bmN0aW9uKHN0eWxlT2JqLHgseSx6b29tLGl0ZW0pIHtcblx0XHRpZighX3JlbmRlck1heFJlc29sdXRpb24gfHwgKGl0ZW0gJiYgaXRlbSAhPT0gc2VsZi5jdXJySXRlbSkgKSB7XG5cdFx0XHR6b29tID0gem9vbSAvIChpdGVtID8gaXRlbS5maXRSYXRpbyA6IHNlbGYuY3Vyckl0ZW0uZml0UmF0aW8pO1x0XG5cdFx0fVxuXHRcdFx0XG5cdFx0c3R5bGVPYmpbX3RyYW5zZm9ybUtleV0gPSBfdHJhbnNsYXRlUHJlZml4ICsgeCArICdweCwgJyArIHkgKyAncHgnICsgX3RyYW5zbGF0ZVN1Zml4ICsgJyBzY2FsZSgnICsgem9vbSArICcpJztcblx0fSxcblx0X2FwcGx5Q3VycmVudFpvb21QYW4gPSBmdW5jdGlvbiggYWxsb3dSZW5kZXJSZXNvbHV0aW9uICkge1xuXHRcdGlmKF9jdXJyWm9vbUVsZW1lbnRTdHlsZSkge1xuXG5cdFx0XHRpZihhbGxvd1JlbmRlclJlc29sdXRpb24pIHtcblx0XHRcdFx0aWYoX2N1cnJab29tTGV2ZWwgPiBzZWxmLmN1cnJJdGVtLmZpdFJhdGlvKSB7XG5cdFx0XHRcdFx0aWYoIV9yZW5kZXJNYXhSZXNvbHV0aW9uKSB7XG5cdFx0XHRcdFx0XHRfc2V0SW1hZ2VTaXplKHNlbGYuY3Vyckl0ZW0sIGZhbHNlLCB0cnVlKTtcblx0XHRcdFx0XHRcdF9yZW5kZXJNYXhSZXNvbHV0aW9uID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYoX3JlbmRlck1heFJlc29sdXRpb24pIHtcblx0XHRcdFx0XHRcdF9zZXRJbWFnZVNpemUoc2VsZi5jdXJySXRlbSk7XG5cdFx0XHRcdFx0XHRfcmVuZGVyTWF4UmVzb2x1dGlvbiA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cblx0XHRcdF9hcHBseVpvb21UcmFuc2Zvcm0oX2N1cnJab29tRWxlbWVudFN0eWxlLCBfcGFuT2Zmc2V0LngsIF9wYW5PZmZzZXQueSwgX2N1cnJab29tTGV2ZWwpO1xuXHRcdH1cblx0fSxcblx0X2FwcGx5Wm9vbVBhblRvSXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRpZihpdGVtLmNvbnRhaW5lcikge1xuXG5cdFx0XHRfYXBwbHlab29tVHJhbnNmb3JtKGl0ZW0uY29udGFpbmVyLnN0eWxlLCBcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmluaXRpYWxQb3NpdGlvbi54LCBcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmluaXRpYWxQb3NpdGlvbi55LCBcblx0XHRcdFx0XHRcdFx0XHRpdGVtLmluaXRpYWxab29tTGV2ZWwsXG5cdFx0XHRcdFx0XHRcdFx0aXRlbSk7XG5cdFx0fVxuXHR9LFxuXHRfc2V0VHJhbnNsYXRlWCA9IGZ1bmN0aW9uKHgsIGVsU3R5bGUpIHtcblx0XHRlbFN0eWxlW190cmFuc2Zvcm1LZXldID0gX3RyYW5zbGF0ZVByZWZpeCArIHggKyAncHgsIDBweCcgKyBfdHJhbnNsYXRlU3VmaXg7XG5cdH0sXG5cdF9tb3ZlTWFpblNjcm9sbCA9IGZ1bmN0aW9uKHgsIGRyYWdnaW5nKSB7XG5cblx0XHRpZighX29wdGlvbnMubG9vcCAmJiBkcmFnZ2luZykge1xuXHRcdFx0dmFyIG5ld1NsaWRlSW5kZXhPZmZzZXQgPSBfY3VycmVudEl0ZW1JbmRleCArIChfc2xpZGVTaXplLnggKiBfY3VyclBvc2l0aW9uSW5kZXggLSB4KSAvIF9zbGlkZVNpemUueCxcblx0XHRcdFx0ZGVsdGEgPSBNYXRoLnJvdW5kKHggLSBfbWFpblNjcm9sbFBvcy54KTtcblxuXHRcdFx0aWYoIChuZXdTbGlkZUluZGV4T2Zmc2V0IDwgMCAmJiBkZWx0YSA+IDApIHx8IFxuXHRcdFx0XHQobmV3U2xpZGVJbmRleE9mZnNldCA+PSBfZ2V0TnVtSXRlbXMoKSAtIDEgJiYgZGVsdGEgPCAwKSApIHtcblx0XHRcdFx0eCA9IF9tYWluU2Nyb2xsUG9zLnggKyBkZWx0YSAqIF9vcHRpb25zLm1haW5TY3JvbGxFbmRGcmljdGlvbjtcblx0XHRcdH0gXG5cdFx0fVxuXHRcdFxuXHRcdF9tYWluU2Nyb2xsUG9zLnggPSB4O1xuXHRcdF9zZXRUcmFuc2xhdGVYKHgsIF9jb250YWluZXJTdHlsZSk7XG5cdH0sXG5cdF9jYWxjdWxhdGVQYW5PZmZzZXQgPSBmdW5jdGlvbihheGlzLCB6b29tTGV2ZWwpIHtcblx0XHR2YXIgbSA9IF9taWRab29tUG9pbnRbYXhpc10gLSBfb2Zmc2V0W2F4aXNdO1xuXHRcdHJldHVybiBfc3RhcnRQYW5PZmZzZXRbYXhpc10gKyBfY3VyclBhbkRpc3RbYXhpc10gKyBtIC0gbSAqICggem9vbUxldmVsIC8gX3N0YXJ0Wm9vbUxldmVsICk7XG5cdH0sXG5cdFxuXHRfZXF1YWxpemVQb2ludHMgPSBmdW5jdGlvbihwMSwgcDIpIHtcblx0XHRwMS54ID0gcDIueDtcblx0XHRwMS55ID0gcDIueTtcblx0XHRpZihwMi5pZCkge1xuXHRcdFx0cDEuaWQgPSBwMi5pZDtcblx0XHR9XG5cdH0sXG5cdF9yb3VuZFBvaW50ID0gZnVuY3Rpb24ocCkge1xuXHRcdHAueCA9IE1hdGgucm91bmQocC54KTtcblx0XHRwLnkgPSBNYXRoLnJvdW5kKHAueSk7XG5cdH0sXG5cblx0X21vdXNlTW92ZVRpbWVvdXQgPSBudWxsLFxuXHRfb25GaXJzdE1vdXNlTW92ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIFdhaXQgdW50aWwgbW91c2UgbW92ZSBldmVudCBpcyBmaXJlZCBhdCBsZWFzdCB0d2ljZSBkdXJpbmcgMTAwbXNcblx0XHQvLyBXZSBkbyB0aGlzLCBiZWNhdXNlIHNvbWUgbW9iaWxlIGJyb3dzZXJzIHRyaWdnZXIgaXQgb24gdG91Y2hzdGFydFxuXHRcdGlmKF9tb3VzZU1vdmVUaW1lb3V0ICkgeyBcblx0XHRcdGZyYW1ld29yay51bmJpbmQoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCBfb25GaXJzdE1vdXNlTW92ZSk7XG5cdFx0XHRmcmFtZXdvcmsuYWRkQ2xhc3ModGVtcGxhdGUsICdwc3dwLS1oYXNfbW91c2UnKTtcblx0XHRcdF9vcHRpb25zLm1vdXNlVXNlZCA9IHRydWU7XG5cdFx0XHRfc2hvdXQoJ21vdXNlVXNlZCcpO1xuXHRcdH1cblx0XHRfbW91c2VNb3ZlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRfbW91c2VNb3ZlVGltZW91dCA9IG51bGw7XG5cdFx0fSwgMTAwKTtcblx0fSxcblxuXHRfYmluZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXHRcdGZyYW1ld29yay5iaW5kKGRvY3VtZW50LCAna2V5ZG93bicsIHNlbGYpO1xuXG5cdFx0aWYoX2ZlYXR1cmVzLnRyYW5zZm9ybSkge1xuXHRcdFx0Ly8gZG9uJ3QgYmluZCBjbGljayBldmVudCBpbiBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgdHJhbnNmb3JtIChtb3N0bHkgSUU4KVxuXHRcdFx0ZnJhbWV3b3JrLmJpbmQoc2VsZi5zY3JvbGxXcmFwLCAnY2xpY2snLCBzZWxmKTtcblx0XHR9XG5cdFx0XG5cblx0XHRpZighX29wdGlvbnMubW91c2VVc2VkKSB7XG5cdFx0XHRmcmFtZXdvcmsuYmluZChkb2N1bWVudCwgJ21vdXNlbW92ZScsIF9vbkZpcnN0TW91c2VNb3ZlKTtcblx0XHR9XG5cblx0XHRmcmFtZXdvcmsuYmluZCh3aW5kb3csICdyZXNpemUgc2Nyb2xsJywgc2VsZik7XG5cblx0XHRfc2hvdXQoJ2JpbmRFdmVudHMnKTtcblx0fSxcblxuXHRfdW5iaW5kRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0ZnJhbWV3b3JrLnVuYmluZCh3aW5kb3csICdyZXNpemUnLCBzZWxmKTtcblx0XHRmcmFtZXdvcmsudW5iaW5kKHdpbmRvdywgJ3Njcm9sbCcsIF9nbG9iYWxFdmVudEhhbmRsZXJzLnNjcm9sbCk7XG5cdFx0ZnJhbWV3b3JrLnVuYmluZChkb2N1bWVudCwgJ2tleWRvd24nLCBzZWxmKTtcblx0XHRmcmFtZXdvcmsudW5iaW5kKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgX29uRmlyc3RNb3VzZU1vdmUpO1xuXG5cdFx0aWYoX2ZlYXR1cmVzLnRyYW5zZm9ybSkge1xuXHRcdFx0ZnJhbWV3b3JrLnVuYmluZChzZWxmLnNjcm9sbFdyYXAsICdjbGljaycsIHNlbGYpO1xuXHRcdH1cblxuXHRcdGlmKF9pc0RyYWdnaW5nKSB7XG5cdFx0XHRmcmFtZXdvcmsudW5iaW5kKHdpbmRvdywgX3VwTW92ZUV2ZW50cywgc2VsZik7XG5cdFx0fVxuXG5cdFx0X3Nob3V0KCd1bmJpbmRFdmVudHMnKTtcblx0fSxcblx0XG5cdF9jYWxjdWxhdGVQYW5Cb3VuZHMgPSBmdW5jdGlvbih6b29tTGV2ZWwsIHVwZGF0ZSkge1xuXHRcdHZhciBib3VuZHMgPSBfY2FsY3VsYXRlSXRlbVNpemUoIHNlbGYuY3Vyckl0ZW0sIF92aWV3cG9ydFNpemUsIHpvb21MZXZlbCApO1xuXHRcdGlmKHVwZGF0ZSkge1xuXHRcdFx0X2N1cnJQYW5Cb3VuZHMgPSBib3VuZHM7XG5cdFx0fVxuXHRcdHJldHVybiBib3VuZHM7XG5cdH0sXG5cdFxuXHRfZ2V0TWluWm9vbUxldmVsID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdGlmKCFpdGVtKSB7XG5cdFx0XHRpdGVtID0gc2VsZi5jdXJySXRlbTtcblx0XHR9XG5cdFx0cmV0dXJuIGl0ZW0uaW5pdGlhbFpvb21MZXZlbDtcblx0fSxcblx0X2dldE1heFpvb21MZXZlbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRpZighaXRlbSkge1xuXHRcdFx0aXRlbSA9IHNlbGYuY3Vyckl0ZW07XG5cdFx0fVxuXHRcdHJldHVybiBpdGVtLncgPiAwID8gX29wdGlvbnMubWF4U3ByZWFkWm9vbSA6IDE7XG5cdH0sXG5cblx0Ly8gUmV0dXJuIHRydWUgaWYgb2Zmc2V0IGlzIG91dCBvZiB0aGUgYm91bmRzXG5cdF9tb2RpZnlEZXN0UGFuT2Zmc2V0ID0gZnVuY3Rpb24oYXhpcywgZGVzdFBhbkJvdW5kcywgZGVzdFBhbk9mZnNldCwgZGVzdFpvb21MZXZlbCkge1xuXHRcdGlmKGRlc3Rab29tTGV2ZWwgPT09IHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbCkge1xuXHRcdFx0ZGVzdFBhbk9mZnNldFtheGlzXSA9IHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFBvc2l0aW9uW2F4aXNdO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RQYW5PZmZzZXRbYXhpc10gPSBfY2FsY3VsYXRlUGFuT2Zmc2V0KGF4aXMsIGRlc3Rab29tTGV2ZWwpOyBcblxuXHRcdFx0aWYoZGVzdFBhbk9mZnNldFtheGlzXSA+IGRlc3RQYW5Cb3VuZHMubWluW2F4aXNdKSB7XG5cdFx0XHRcdGRlc3RQYW5PZmZzZXRbYXhpc10gPSBkZXN0UGFuQm91bmRzLm1pbltheGlzXTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9IGVsc2UgaWYoZGVzdFBhbk9mZnNldFtheGlzXSA8IGRlc3RQYW5Cb3VuZHMubWF4W2F4aXNdICkge1xuXHRcdFx0XHRkZXN0UGFuT2Zmc2V0W2F4aXNdID0gZGVzdFBhbkJvdW5kcy5tYXhbYXhpc107XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0X3NldHVwVHJhbnNmb3JtcyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYoX3RyYW5zZm9ybUtleSkge1xuXHRcdFx0Ly8gc2V0dXAgM2QgdHJhbnNmb3Jtc1xuXHRcdFx0dmFyIGFsbG93M2RUcmFuc2Zvcm0gPSBfZmVhdHVyZXMucGVyc3BlY3RpdmUgJiYgIV9saWtlbHlUb3VjaERldmljZTtcblx0XHRcdF90cmFuc2xhdGVQcmVmaXggPSAndHJhbnNsYXRlJyArIChhbGxvdzNkVHJhbnNmb3JtID8gJzNkKCcgOiAnKCcpO1xuXHRcdFx0X3RyYW5zbGF0ZVN1Zml4ID0gX2ZlYXR1cmVzLnBlcnNwZWN0aXZlID8gJywgMHB4KScgOiAnKSc7XHRcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPdmVycmlkZSB6b29tL3Bhbi9tb3ZlIGZ1bmN0aW9ucyBpbiBjYXNlIG9sZCBicm93c2VyIGlzIHVzZWQgKG1vc3QgbGlrZWx5IElFKVxuXHRcdC8vIChzbyB0aGV5IHVzZSBsZWZ0L3RvcC93aWR0aC9oZWlnaHQsIGluc3RlYWQgb2YgQ1NTIHRyYW5zZm9ybSlcblx0XG5cdFx0X3RyYW5zZm9ybUtleSA9ICdsZWZ0Jztcblx0XHRmcmFtZXdvcmsuYWRkQ2xhc3ModGVtcGxhdGUsICdwc3dwLS1pZScpO1xuXG5cdFx0X3NldFRyYW5zbGF0ZVggPSBmdW5jdGlvbih4LCBlbFN0eWxlKSB7XG5cdFx0XHRlbFN0eWxlLmxlZnQgPSB4ICsgJ3B4Jztcblx0XHR9O1xuXHRcdF9hcHBseVpvb21QYW5Ub0l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG5cblx0XHRcdHZhciB6b29tUmF0aW8gPSBpdGVtLmZpdFJhdGlvID4gMSA/IDEgOiBpdGVtLmZpdFJhdGlvLFxuXHRcdFx0XHRzID0gaXRlbS5jb250YWluZXIuc3R5bGUsXG5cdFx0XHRcdHcgPSB6b29tUmF0aW8gKiBpdGVtLncsXG5cdFx0XHRcdGggPSB6b29tUmF0aW8gKiBpdGVtLmg7XG5cblx0XHRcdHMud2lkdGggPSB3ICsgJ3B4Jztcblx0XHRcdHMuaGVpZ2h0ID0gaCArICdweCc7XG5cdFx0XHRzLmxlZnQgPSBpdGVtLmluaXRpYWxQb3NpdGlvbi54ICsgJ3B4Jztcblx0XHRcdHMudG9wID0gaXRlbS5pbml0aWFsUG9zaXRpb24ueSArICdweCc7XG5cblx0XHR9O1xuXHRcdF9hcHBseUN1cnJlbnRab29tUGFuID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihfY3Vyclpvb21FbGVtZW50U3R5bGUpIHtcblxuXHRcdFx0XHR2YXIgcyA9IF9jdXJyWm9vbUVsZW1lbnRTdHlsZSxcblx0XHRcdFx0XHRpdGVtID0gc2VsZi5jdXJySXRlbSxcblx0XHRcdFx0XHR6b29tUmF0aW8gPSBpdGVtLmZpdFJhdGlvID4gMSA/IDEgOiBpdGVtLmZpdFJhdGlvLFxuXHRcdFx0XHRcdHcgPSB6b29tUmF0aW8gKiBpdGVtLncsXG5cdFx0XHRcdFx0aCA9IHpvb21SYXRpbyAqIGl0ZW0uaDtcblxuXHRcdFx0XHRzLndpZHRoID0gdyArICdweCc7XG5cdFx0XHRcdHMuaGVpZ2h0ID0gaCArICdweCc7XG5cblxuXHRcdFx0XHRzLmxlZnQgPSBfcGFuT2Zmc2V0LnggKyAncHgnO1xuXHRcdFx0XHRzLnRvcCA9IF9wYW5PZmZzZXQueSArICdweCc7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9O1xuXHR9LFxuXG5cdF9vbktleURvd24gPSBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIGtleWRvd25BY3Rpb24gPSAnJztcblx0XHRpZihfb3B0aW9ucy5lc2NLZXkgJiYgZS5rZXlDb2RlID09PSAyNykgeyBcblx0XHRcdGtleWRvd25BY3Rpb24gPSAnY2xvc2UnO1xuXHRcdH0gZWxzZSBpZihfb3B0aW9ucy5hcnJvd0tleXMpIHtcblx0XHRcdGlmKGUua2V5Q29kZSA9PT0gMzcpIHtcblx0XHRcdFx0a2V5ZG93bkFjdGlvbiA9ICdwcmV2Jztcblx0XHRcdH0gZWxzZSBpZihlLmtleUNvZGUgPT09IDM5KSB7IFxuXHRcdFx0XHRrZXlkb3duQWN0aW9uID0gJ25leHQnO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKGtleWRvd25BY3Rpb24pIHtcblx0XHRcdC8vIGRvbid0IGRvIGFueXRoaW5nIGlmIHNwZWNpYWwga2V5IHByZXNzZWQgdG8gcHJldmVudCBmcm9tIG92ZXJyaWRpbmcgZGVmYXVsdCBicm93c2VyIGFjdGlvbnNcblx0XHRcdC8vIGUuZy4gaW4gQ2hyb21lIG9uIE1hYyBjbWQrYXJyb3ctbGVmdCByZXR1cm5zIHRvIHByZXZpb3VzIHBhZ2Vcblx0XHRcdGlmKCAhZS5jdHJsS2V5ICYmICFlLmFsdEtleSAmJiAhZS5zaGlmdEtleSAmJiAhZS5tZXRhS2V5ICkge1xuXHRcdFx0XHRpZihlLnByZXZlbnREZWZhdWx0KSB7XG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcblx0XHRcdFx0fSBcblx0XHRcdFx0c2VsZltrZXlkb3duQWN0aW9uXSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRfb25HbG9iYWxDbGljayA9IGZ1bmN0aW9uKGUpIHtcblx0XHRpZighZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGRvbid0IGFsbG93IGNsaWNrIGV2ZW50IHRvIHBhc3MgdGhyb3VnaCB3aGVuIHRyaWdnZXJpbmcgYWZ0ZXIgZHJhZyBvciBzb21lIG90aGVyIGdlc3R1cmVcblx0XHRpZihfbW92ZWQgfHwgX3pvb21TdGFydGVkIHx8IF9tYWluU2Nyb2xsQW5pbWF0aW5nIHx8IF92ZXJ0aWNhbERyYWdJbml0aWF0ZWQpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXG5cdF91cGRhdGVQYWdlU2Nyb2xsT2Zmc2V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0c2VsZi5zZXRTY3JvbGxPZmZzZXQoMCwgZnJhbWV3b3JrLmdldFNjcm9sbFkoKSk7XHRcdFxuXHR9O1xuXHRcblxuXG5cdFxuXG5cblxuLy8gTWljcm8gYW5pbWF0aW9uIGVuZ2luZVxudmFyIF9hbmltYXRpb25zID0ge30sXG5cdF9udW1BbmltYXRpb25zID0gMCxcblx0X3N0b3BBbmltYXRpb24gPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0aWYoX2FuaW1hdGlvbnNbbmFtZV0pIHtcblx0XHRcdGlmKF9hbmltYXRpb25zW25hbWVdLnJhZikge1xuXHRcdFx0XHRfY2FuY2VsQUYoIF9hbmltYXRpb25zW25hbWVdLnJhZiApO1xuXHRcdFx0fVxuXHRcdFx0X251bUFuaW1hdGlvbnMtLTtcblx0XHRcdGRlbGV0ZSBfYW5pbWF0aW9uc1tuYW1lXTtcblx0XHR9XG5cdH0sXG5cdF9yZWdpc3RlclN0YXJ0QW5pbWF0aW9uID0gZnVuY3Rpb24obmFtZSkge1xuXHRcdGlmKF9hbmltYXRpb25zW25hbWVdKSB7XG5cdFx0XHRfc3RvcEFuaW1hdGlvbihuYW1lKTtcblx0XHR9XG5cdFx0aWYoIV9hbmltYXRpb25zW25hbWVdKSB7XG5cdFx0XHRfbnVtQW5pbWF0aW9ucysrO1xuXHRcdFx0X2FuaW1hdGlvbnNbbmFtZV0gPSB7fTtcblx0XHR9XG5cdH0sXG5cdF9zdG9wQWxsQW5pbWF0aW9ucyA9IGZ1bmN0aW9uKCkge1xuXHRcdGZvciAodmFyIHByb3AgaW4gX2FuaW1hdGlvbnMpIHtcblxuXHRcdFx0aWYoIF9hbmltYXRpb25zLmhhc093blByb3BlcnR5KCBwcm9wICkgKSB7XG5cdFx0XHRcdF9zdG9wQW5pbWF0aW9uKHByb3ApO1xuXHRcdFx0fSBcblx0XHRcdFxuXHRcdH1cblx0fSxcblx0X2FuaW1hdGVQcm9wID0gZnVuY3Rpb24obmFtZSwgYiwgZW5kUHJvcCwgZCwgZWFzaW5nRm4sIG9uVXBkYXRlLCBvbkNvbXBsZXRlKSB7XG5cdFx0dmFyIHN0YXJ0QW5pbVRpbWUgPSBfZ2V0Q3VycmVudFRpbWUoKSwgdDtcblx0XHRfcmVnaXN0ZXJTdGFydEFuaW1hdGlvbihuYW1lKTtcblxuXHRcdHZhciBhbmltbG9vcCA9IGZ1bmN0aW9uKCl7XG5cdFx0XHRpZiAoIF9hbmltYXRpb25zW25hbWVdICkge1xuXHRcdFx0XHRcblx0XHRcdFx0dCA9IF9nZXRDdXJyZW50VGltZSgpIC0gc3RhcnRBbmltVGltZTsgLy8gdGltZSBkaWZmXG5cdFx0XHRcdC8vYiAtIGJlZ2lubmluZyAoc3RhcnQgcHJvcClcblx0XHRcdFx0Ly9kIC0gYW5pbSBkdXJhdGlvblxuXG5cdFx0XHRcdGlmICggdCA+PSBkICkge1xuXHRcdFx0XHRcdF9zdG9wQW5pbWF0aW9uKG5hbWUpO1xuXHRcdFx0XHRcdG9uVXBkYXRlKGVuZFByb3ApO1xuXHRcdFx0XHRcdGlmKG9uQ29tcGxldGUpIHtcblx0XHRcdFx0XHRcdG9uQ29tcGxldGUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9uVXBkYXRlKCAoZW5kUHJvcCAtIGIpICogZWFzaW5nRm4odC9kKSArIGIgKTtcblxuXHRcdFx0XHRfYW5pbWF0aW9uc1tuYW1lXS5yYWYgPSBfcmVxdWVzdEFGKGFuaW1sb29wKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGFuaW1sb29wKCk7XG5cdH07XG5cdFxuXG5cbnZhciBwdWJsaWNNZXRob2RzID0ge1xuXG5cdC8vIG1ha2UgYSBmZXcgbG9jYWwgdmFyaWFibGVzIGFuZCBmdW5jdGlvbnMgcHVibGljXG5cdHNob3V0OiBfc2hvdXQsXG5cdGxpc3RlbjogX2xpc3Rlbixcblx0dmlld3BvcnRTaXplOiBfdmlld3BvcnRTaXplLFxuXHRvcHRpb25zOiBfb3B0aW9ucyxcblxuXHRpc01haW5TY3JvbGxBbmltYXRpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBfbWFpblNjcm9sbEFuaW1hdGluZztcblx0fSxcblx0Z2V0Wm9vbUxldmVsOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gX2N1cnJab29tTGV2ZWw7XG5cdH0sXG5cdGdldEN1cnJlbnRJbmRleDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIF9jdXJyZW50SXRlbUluZGV4O1xuXHR9LFxuXHRpc0RyYWdnaW5nOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gX2lzRHJhZ2dpbmc7XG5cdH0sXHRcblx0aXNab29taW5nOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gX2lzWm9vbWluZztcblx0fSxcblx0c2V0U2Nyb2xsT2Zmc2V0OiBmdW5jdGlvbih4LHkpIHtcblx0XHRfb2Zmc2V0LnggPSB4O1xuXHRcdF9jdXJyZW50V2luZG93U2Nyb2xsWSA9IF9vZmZzZXQueSA9IHk7XG5cdFx0X3Nob3V0KCd1cGRhdGVTY3JvbGxPZmZzZXQnLCBfb2Zmc2V0KTtcblx0fSxcblx0YXBwbHlab29tUGFuOiBmdW5jdGlvbih6b29tTGV2ZWwscGFuWCxwYW5ZLGFsbG93UmVuZGVyUmVzb2x1dGlvbikge1xuXHRcdF9wYW5PZmZzZXQueCA9IHBhblg7XG5cdFx0X3Bhbk9mZnNldC55ID0gcGFuWTtcblx0XHRfY3Vyclpvb21MZXZlbCA9IHpvb21MZXZlbDtcblx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbiggYWxsb3dSZW5kZXJSZXNvbHV0aW9uICk7XG5cdH0sXG5cblx0aW5pdDogZnVuY3Rpb24oKSB7XG5cblx0XHRpZihfaXNPcGVuIHx8IF9pc0Rlc3Ryb3lpbmcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgaTtcblxuXHRcdHNlbGYuZnJhbWV3b3JrID0gZnJhbWV3b3JrOyAvLyBiYXNpYyBmdW5jdGlvbmFsaXR5XG5cdFx0c2VsZi50ZW1wbGF0ZSA9IHRlbXBsYXRlOyAvLyByb290IERPTSBlbGVtZW50IG9mIFBob3RvU3dpcGVcblx0XHRzZWxmLmJnID0gZnJhbWV3b3JrLmdldENoaWxkQnlDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3BfX2JnJyk7XG5cblx0XHRfaW5pdGFsQ2xhc3NOYW1lID0gdGVtcGxhdGUuY2xhc3NOYW1lO1xuXHRcdF9pc09wZW4gPSB0cnVlO1xuXHRcdFx0XHRcblx0XHRfZmVhdHVyZXMgPSBmcmFtZXdvcmsuZGV0ZWN0RmVhdHVyZXMoKTtcblx0XHRfcmVxdWVzdEFGID0gX2ZlYXR1cmVzLnJhZjtcblx0XHRfY2FuY2VsQUYgPSBfZmVhdHVyZXMuY2FmO1xuXHRcdF90cmFuc2Zvcm1LZXkgPSBfZmVhdHVyZXMudHJhbnNmb3JtO1xuXHRcdF9vbGRJRSA9IF9mZWF0dXJlcy5vbGRJRTtcblx0XHRcblx0XHRzZWxmLnNjcm9sbFdyYXAgPSBmcmFtZXdvcmsuZ2V0Q2hpbGRCeUNsYXNzKHRlbXBsYXRlLCAncHN3cF9fc2Nyb2xsLXdyYXAnKTtcblx0XHRzZWxmLmNvbnRhaW5lciA9IGZyYW1ld29yay5nZXRDaGlsZEJ5Q2xhc3Moc2VsZi5zY3JvbGxXcmFwLCAncHN3cF9fY29udGFpbmVyJyk7XG5cblx0XHRfY29udGFpbmVyU3R5bGUgPSBzZWxmLmNvbnRhaW5lci5zdHlsZTsgLy8gZm9yIGZhc3QgYWNjZXNzXG5cblx0XHQvLyBPYmplY3RzIHRoYXQgaG9sZCBzbGlkZXMgKHRoZXJlIGFyZSBvbmx5IDMgaW4gRE9NKVxuXHRcdHNlbGYuaXRlbUhvbGRlcnMgPSBfaXRlbUhvbGRlcnMgPSBbXG5cdFx0XHR7ZWw6c2VsZi5jb250YWluZXIuY2hpbGRyZW5bMF0gLCB3cmFwOjAsIGluZGV4OiAtMX0sXG5cdFx0XHR7ZWw6c2VsZi5jb250YWluZXIuY2hpbGRyZW5bMV0gLCB3cmFwOjAsIGluZGV4OiAtMX0sXG5cdFx0XHR7ZWw6c2VsZi5jb250YWluZXIuY2hpbGRyZW5bMl0gLCB3cmFwOjAsIGluZGV4OiAtMX1cblx0XHRdO1xuXG5cdFx0Ly8gaGlkZSBuZWFyYnkgaXRlbSBob2xkZXJzIHVudGlsIGluaXRpYWwgem9vbSBhbmltYXRpb24gZmluaXNoZXMgKHRvIGF2b2lkIGV4dHJhIFBhaW50cylcblx0XHRfaXRlbUhvbGRlcnNbMF0uZWwuc3R5bGUuZGlzcGxheSA9IF9pdGVtSG9sZGVyc1syXS5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG5cdFx0X3NldHVwVHJhbnNmb3JtcygpO1xuXG5cdFx0Ly8gU2V0dXAgZ2xvYmFsIGV2ZW50c1xuXHRcdF9nbG9iYWxFdmVudEhhbmRsZXJzID0ge1xuXHRcdFx0cmVzaXplOiBzZWxmLnVwZGF0ZVNpemUsXG5cdFx0XHRzY3JvbGw6IF91cGRhdGVQYWdlU2Nyb2xsT2Zmc2V0LFxuXHRcdFx0a2V5ZG93bjogX29uS2V5RG93bixcblx0XHRcdGNsaWNrOiBfb25HbG9iYWxDbGlja1xuXHRcdH07XG5cblx0XHQvLyBkaXNhYmxlIHNob3cvaGlkZSBlZmZlY3RzIG9uIG9sZCBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgQ1NTIGFuaW1hdGlvbnMgb3IgdHJhbnNmb3JtcywgXG5cdFx0Ly8gb2xkIElPUywgQW5kcm9pZCBhbmQgT3BlcmEgbW9iaWxlLiBCbGFja2JlcnJ5IHNlZW1zIHRvIHdvcmsgZmluZSwgZXZlbiBvbGRlciBtb2RlbHMuXG5cdFx0dmFyIG9sZFBob25lID0gX2ZlYXR1cmVzLmlzT2xkSU9TUGhvbmUgfHwgX2ZlYXR1cmVzLmlzT2xkQW5kcm9pZCB8fCBfZmVhdHVyZXMuaXNNb2JpbGVPcGVyYTtcblx0XHRpZighX2ZlYXR1cmVzLmFuaW1hdGlvbk5hbWUgfHwgIV9mZWF0dXJlcy50cmFuc2Zvcm0gfHwgb2xkUGhvbmUpIHtcblx0XHRcdF9vcHRpb25zLnNob3dBbmltYXRpb25EdXJhdGlvbiA9IF9vcHRpb25zLmhpZGVBbmltYXRpb25EdXJhdGlvbiA9IDA7XG5cdFx0fVxuXG5cdFx0Ly8gaW5pdCBtb2R1bGVzXG5cdFx0Zm9yKGkgPSAwOyBpIDwgX21vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHNlbGZbJ2luaXQnICsgX21vZHVsZXNbaV1dKCk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIGluaXRcblx0XHRpZihVaUNsYXNzKSB7XG5cdFx0XHR2YXIgdWkgPSBzZWxmLnVpID0gbmV3IFVpQ2xhc3Moc2VsZiwgZnJhbWV3b3JrKTtcblx0XHRcdHVpLmluaXQoKTtcblx0XHR9XG5cblx0XHRfc2hvdXQoJ2ZpcnN0VXBkYXRlJyk7XG5cdFx0X2N1cnJlbnRJdGVtSW5kZXggPSBfY3VycmVudEl0ZW1JbmRleCB8fCBfb3B0aW9ucy5pbmRleCB8fCAwO1xuXHRcdC8vIHZhbGlkYXRlIGluZGV4XG5cdFx0aWYoIGlzTmFOKF9jdXJyZW50SXRlbUluZGV4KSB8fCBfY3VycmVudEl0ZW1JbmRleCA8IDAgfHwgX2N1cnJlbnRJdGVtSW5kZXggPj0gX2dldE51bUl0ZW1zKCkgKSB7XG5cdFx0XHRfY3VycmVudEl0ZW1JbmRleCA9IDA7XG5cdFx0fVxuXHRcdHNlbGYuY3Vyckl0ZW0gPSBfZ2V0SXRlbUF0KCBfY3VycmVudEl0ZW1JbmRleCApO1xuXG5cdFx0XG5cdFx0aWYoX2ZlYXR1cmVzLmlzT2xkSU9TUGhvbmUgfHwgX2ZlYXR1cmVzLmlzT2xkQW5kcm9pZCkge1xuXHRcdFx0X2lzRml4ZWRQb3NpdGlvbiA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0XHR0ZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cdFx0aWYoX29wdGlvbnMubW9kYWwpIHtcblx0XHRcdGlmKCFfaXNGaXhlZFBvc2l0aW9uKSB7XG5cdFx0XHRcdHRlbXBsYXRlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcblx0XHRcdFx0dGVtcGxhdGUuc3R5bGUudG9wID0gZnJhbWV3b3JrLmdldFNjcm9sbFkoKSArICdweCc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0ZW1wbGF0ZS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoX2N1cnJlbnRXaW5kb3dTY3JvbGxZID09PSB1bmRlZmluZWQpIHtcblx0XHRcdF9zaG91dCgnaW5pdGlhbExheW91dCcpO1xuXHRcdFx0X2N1cnJlbnRXaW5kb3dTY3JvbGxZID0gX2luaXRhbFdpbmRvd1Njcm9sbFkgPSBmcmFtZXdvcmsuZ2V0U2Nyb2xsWSgpO1xuXHRcdH1cblx0XHRcblx0XHQvLyBhZGQgY2xhc3NlcyB0byByb290IGVsZW1lbnQgb2YgUGhvdG9Td2lwZVxuXHRcdHZhciByb290Q2xhc3NlcyA9ICdwc3dwLS1vcGVuICc7XG5cdFx0aWYoX29wdGlvbnMubWFpbkNsYXNzKSB7XG5cdFx0XHRyb290Q2xhc3NlcyArPSBfb3B0aW9ucy5tYWluQ2xhc3MgKyAnICc7XG5cdFx0fVxuXHRcdGlmKF9vcHRpb25zLnNob3dIaWRlT3BhY2l0eSkge1xuXHRcdFx0cm9vdENsYXNzZXMgKz0gJ3Bzd3AtLWFuaW1hdGVfb3BhY2l0eSAnO1xuXHRcdH1cblx0XHRyb290Q2xhc3NlcyArPSBfbGlrZWx5VG91Y2hEZXZpY2UgPyAncHN3cC0tdG91Y2gnIDogJ3Bzd3AtLW5vdG91Y2gnO1xuXHRcdHJvb3RDbGFzc2VzICs9IF9mZWF0dXJlcy5hbmltYXRpb25OYW1lID8gJyBwc3dwLS1jc3NfYW5pbWF0aW9uJyA6ICcnO1xuXHRcdHJvb3RDbGFzc2VzICs9IF9mZWF0dXJlcy5zdmcgPyAnIHBzd3AtLXN2ZycgOiAnJztcblx0XHRmcmFtZXdvcmsuYWRkQ2xhc3ModGVtcGxhdGUsIHJvb3RDbGFzc2VzKTtcblxuXHRcdHNlbGYudXBkYXRlU2l6ZSgpO1xuXG5cdFx0Ly8gaW5pdGlhbCB1cGRhdGVcblx0XHRfY29udGFpbmVyU2hpZnRJbmRleCA9IC0xO1xuXHRcdF9pbmRleERpZmYgPSBudWxsO1xuXHRcdGZvcihpID0gMDsgaSA8IE5VTV9IT0xERVJTOyBpKyspIHtcblx0XHRcdF9zZXRUcmFuc2xhdGVYKCAoaStfY29udGFpbmVyU2hpZnRJbmRleCkgKiBfc2xpZGVTaXplLngsIF9pdGVtSG9sZGVyc1tpXS5lbC5zdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYoIV9vbGRJRSkge1xuXHRcdFx0ZnJhbWV3b3JrLmJpbmQoc2VsZi5zY3JvbGxXcmFwLCBfZG93bkV2ZW50cywgc2VsZik7IC8vIG5vIGRyYWdnaW5nIGZvciBvbGQgSUVcblx0XHR9XHRcblxuXHRcdF9saXN0ZW4oJ2luaXRpYWxab29tSW5FbmQnLCBmdW5jdGlvbigpIHtcblx0XHRcdHNlbGYuc2V0Q29udGVudChfaXRlbUhvbGRlcnNbMF0sIF9jdXJyZW50SXRlbUluZGV4LTEpO1xuXHRcdFx0c2VsZi5zZXRDb250ZW50KF9pdGVtSG9sZGVyc1syXSwgX2N1cnJlbnRJdGVtSW5kZXgrMSk7XG5cblx0XHRcdF9pdGVtSG9sZGVyc1swXS5lbC5zdHlsZS5kaXNwbGF5ID0gX2l0ZW1Ib2xkZXJzWzJdLmVsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG5cdFx0XHRpZihfb3B0aW9ucy5mb2N1cykge1xuXHRcdFx0XHQvLyBmb2N1cyBjYXVzZXMgbGF5b3V0LCBcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGxhZyBkdXJpbmcgdGhlIGFuaW1hdGlvbiwgXG5cdFx0XHRcdC8vIHRoYXQncyB3aHkgd2UgZGVsYXkgaXQgdW50aWxsIHRoZSBpbml0aWFsIHpvb20gdHJhbnNpdGlvbiBlbmRzXG5cdFx0XHRcdHRlbXBsYXRlLmZvY3VzKCk7XG5cdFx0XHR9XG5cdFx0XHQgXG5cblx0XHRcdF9iaW5kRXZlbnRzKCk7XG5cdFx0fSk7XG5cblx0XHQvLyBzZXQgY29udGVudCBmb3IgY2VudGVyIHNsaWRlIChmaXJzdCB0aW1lKVxuXHRcdHNlbGYuc2V0Q29udGVudChfaXRlbUhvbGRlcnNbMV0sIF9jdXJyZW50SXRlbUluZGV4KTtcblx0XHRcblx0XHRzZWxmLnVwZGF0ZUN1cnJJdGVtKCk7XG5cblx0XHRfc2hvdXQoJ2FmdGVySW5pdCcpO1xuXG5cdFx0aWYoIV9pc0ZpeGVkUG9zaXRpb24pIHtcblxuXHRcdFx0Ly8gT24gYWxsIHZlcnNpb25zIG9mIGlPUyBsb3dlciB0aGFuIDguMCwgd2UgY2hlY2sgc2l6ZSBvZiB2aWV3cG9ydCBldmVyeSBzZWNvbmQuXG5cdFx0XHQvLyBcblx0XHRcdC8vIFRoaXMgaXMgZG9uZSB0byBkZXRlY3Qgd2hlbiBTYWZhcmkgdG9wICYgYm90dG9tIGJhcnMgYXBwZWFyLCBcblx0XHRcdC8vIGFzIHRoaXMgYWN0aW9uIGRvZXNuJ3QgdHJpZ2dlciBhbnkgZXZlbnRzIChsaWtlIHJlc2l6ZSkuIFxuXHRcdFx0Ly8gXG5cdFx0XHQvLyBPbiBpT1M4IHRoZXkgZml4ZWQgdGhpcy5cblx0XHRcdC8vIFxuXHRcdFx0Ly8gMTAgTm92IDIwMTQ6IGlPUyA3IHVzYWdlIH40MCUuIGlPUyA4IHVzYWdlIDU2JS5cblx0XHRcdFxuXHRcdFx0X3VwZGF0ZVNpemVJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZighX251bUFuaW1hdGlvbnMgJiYgIV9pc0RyYWdnaW5nICYmICFfaXNab29taW5nICYmIChfY3Vyclpvb21MZXZlbCA9PT0gc2VsZi5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsKSAgKSB7XG5cdFx0XHRcdFx0c2VsZi51cGRhdGVTaXplKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIDEwMDApO1xuXHRcdH1cblxuXHRcdGZyYW1ld29yay5hZGRDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLXZpc2libGUnKTtcblx0fSxcblxuXHQvLyBDbG9zZSB0aGUgZ2FsbGVyeSwgdGhlbiBkZXN0cm95IGl0XG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRpZighX2lzT3Blbikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdF9pc09wZW4gPSBmYWxzZTtcblx0XHRfaXNEZXN0cm95aW5nID0gdHJ1ZTtcblx0XHRfc2hvdXQoJ2Nsb3NlJyk7XG5cdFx0X3VuYmluZEV2ZW50cygpO1xuXG5cdFx0X3Nob3dPckhpZGUoc2VsZi5jdXJySXRlbSwgbnVsbCwgdHJ1ZSwgc2VsZi5kZXN0cm95KTtcblx0fSxcblxuXHQvLyBkZXN0cm95cyB0aGUgZ2FsbGVyeSAodW5iaW5kcyBldmVudHMsIGNsZWFucyB1cCBpbnRlcnZhbHMgYW5kIHRpbWVvdXRzIHRvIGF2b2lkIG1lbW9yeSBsZWFrcylcblx0ZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0X3Nob3V0KCdkZXN0cm95Jyk7XG5cblx0XHRpZihfc2hvd09ySGlkZVRpbWVvdXQpIHtcblx0XHRcdGNsZWFyVGltZW91dChfc2hvd09ySGlkZVRpbWVvdXQpO1xuXHRcdH1cblx0XHRcblx0XHR0ZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblx0XHR0ZW1wbGF0ZS5jbGFzc05hbWUgPSBfaW5pdGFsQ2xhc3NOYW1lO1xuXG5cdFx0aWYoX3VwZGF0ZVNpemVJbnRlcnZhbCkge1xuXHRcdFx0Y2xlYXJJbnRlcnZhbChfdXBkYXRlU2l6ZUludGVydmFsKTtcblx0XHR9XG5cblx0XHRmcmFtZXdvcmsudW5iaW5kKHNlbGYuc2Nyb2xsV3JhcCwgX2Rvd25FdmVudHMsIHNlbGYpO1xuXG5cdFx0Ly8gd2UgdW5iaW5kIHNjcm9sbCBldmVudCBhdCB0aGUgZW5kLCBhcyBjbG9zaW5nIGFuaW1hdGlvbiBtYXkgZGVwZW5kIG9uIGl0XG5cdFx0ZnJhbWV3b3JrLnVuYmluZCh3aW5kb3csICdzY3JvbGwnLCBzZWxmKTtcblxuXHRcdF9zdG9wRHJhZ1VwZGF0ZUxvb3AoKTtcblxuXHRcdF9zdG9wQWxsQW5pbWF0aW9ucygpO1xuXG5cdFx0X2xpc3RlbmVycyA9IG51bGw7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFBhbiBpbWFnZSB0byBwb3NpdGlvblxuXHQgKiBAcGFyYW0ge051bWJlcn0geCAgICAgXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB5ICAgICBcblx0ICogQHBhcmFtIHtCb29sZWFufSBmb3JjZSBXaWxsIGlnbm9yZSBib3VuZHMgaWYgc2V0IHRvIHRydWUuXG5cdCAqL1xuXHRwYW5UbzogZnVuY3Rpb24oeCx5LGZvcmNlKSB7XG5cdFx0aWYoIWZvcmNlKSB7XG5cdFx0XHRpZih4ID4gX2N1cnJQYW5Cb3VuZHMubWluLngpIHtcblx0XHRcdFx0eCA9IF9jdXJyUGFuQm91bmRzLm1pbi54O1xuXHRcdFx0fSBlbHNlIGlmKHggPCBfY3VyclBhbkJvdW5kcy5tYXgueCkge1xuXHRcdFx0XHR4ID0gX2N1cnJQYW5Cb3VuZHMubWF4Lng7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHkgPiBfY3VyclBhbkJvdW5kcy5taW4ueSkge1xuXHRcdFx0XHR5ID0gX2N1cnJQYW5Cb3VuZHMubWluLnk7XG5cdFx0XHR9IGVsc2UgaWYoeSA8IF9jdXJyUGFuQm91bmRzLm1heC55KSB7XG5cdFx0XHRcdHkgPSBfY3VyclBhbkJvdW5kcy5tYXgueTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0X3Bhbk9mZnNldC54ID0geDtcblx0XHRfcGFuT2Zmc2V0LnkgPSB5O1xuXHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cdH0sXG5cdFxuXHRoYW5kbGVFdmVudDogZnVuY3Rpb24gKGUpIHtcblx0XHRlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG5cdFx0aWYoX2dsb2JhbEV2ZW50SGFuZGxlcnNbZS50eXBlXSkge1xuXHRcdFx0X2dsb2JhbEV2ZW50SGFuZGxlcnNbZS50eXBlXShlKTtcblx0XHR9XG5cdH0sXG5cblxuXHRnb1RvOiBmdW5jdGlvbihpbmRleCkge1xuXG5cdFx0aW5kZXggPSBfZ2V0TG9vcGVkSWQoaW5kZXgpO1xuXG5cdFx0dmFyIGRpZmYgPSBpbmRleCAtIF9jdXJyZW50SXRlbUluZGV4O1xuXHRcdF9pbmRleERpZmYgPSBkaWZmO1xuXG5cdFx0X2N1cnJlbnRJdGVtSW5kZXggPSBpbmRleDtcblx0XHRzZWxmLmN1cnJJdGVtID0gX2dldEl0ZW1BdCggX2N1cnJlbnRJdGVtSW5kZXggKTtcblx0XHRfY3VyclBvc2l0aW9uSW5kZXggLT0gZGlmZjtcblx0XHRcblx0XHRfbW92ZU1haW5TY3JvbGwoX3NsaWRlU2l6ZS54ICogX2N1cnJQb3NpdGlvbkluZGV4KTtcblx0XHRcblxuXHRcdF9zdG9wQWxsQW5pbWF0aW9ucygpO1xuXHRcdF9tYWluU2Nyb2xsQW5pbWF0aW5nID0gZmFsc2U7XG5cblx0XHRzZWxmLnVwZGF0ZUN1cnJJdGVtKCk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHNlbGYuZ29UbyggX2N1cnJlbnRJdGVtSW5kZXggKyAxKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oKSB7XG5cdFx0c2VsZi5nb1RvKCBfY3VycmVudEl0ZW1JbmRleCAtIDEpO1xuXHR9LFxuXG5cdC8vIHVwZGF0ZSBjdXJyZW50IHpvb20vcGFuIG9iamVjdHNcblx0dXBkYXRlQ3Vyclpvb21JdGVtOiBmdW5jdGlvbihlbXVsYXRlU2V0Q29udGVudCkge1xuXHRcdGlmKGVtdWxhdGVTZXRDb250ZW50KSB7XG5cdFx0XHRfc2hvdXQoJ2JlZm9yZUNoYW5nZScsIDApO1xuXHRcdH1cblxuXHRcdC8vIGl0ZW1Ib2xkZXJbMV0gaXMgbWlkZGxlIChjdXJyZW50KSBpdGVtXG5cdFx0aWYoX2l0ZW1Ib2xkZXJzWzFdLmVsLmNoaWxkcmVuLmxlbmd0aCkge1xuXHRcdFx0dmFyIHpvb21FbGVtZW50ID0gX2l0ZW1Ib2xkZXJzWzFdLmVsLmNoaWxkcmVuWzBdO1xuXHRcdFx0aWYoIGZyYW1ld29yay5oYXNDbGFzcyh6b29tRWxlbWVudCwgJ3Bzd3BfX3pvb20td3JhcCcpICkge1xuXHRcdFx0XHRfY3Vyclpvb21FbGVtZW50U3R5bGUgPSB6b29tRWxlbWVudC5zdHlsZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9jdXJyWm9vbUVsZW1lbnRTdHlsZSA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdF9jdXJyWm9vbUVsZW1lbnRTdHlsZSA9IG51bGw7XG5cdFx0fVxuXHRcdFxuXHRcdF9jdXJyUGFuQm91bmRzID0gc2VsZi5jdXJySXRlbS5ib3VuZHM7XHRcblx0XHRfc3RhcnRab29tTGV2ZWwgPSBfY3Vyclpvb21MZXZlbCA9IHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbDtcblxuXHRcdF9wYW5PZmZzZXQueCA9IF9jdXJyUGFuQm91bmRzLmNlbnRlci54O1xuXHRcdF9wYW5PZmZzZXQueSA9IF9jdXJyUGFuQm91bmRzLmNlbnRlci55O1xuXG5cdFx0aWYoZW11bGF0ZVNldENvbnRlbnQpIHtcblx0XHRcdF9zaG91dCgnYWZ0ZXJDaGFuZ2UnKTtcblx0XHR9XG5cdH0sXG5cblxuXHRpbnZhbGlkYXRlQ3Vyckl0ZW1zOiBmdW5jdGlvbigpIHtcblx0XHRfaXRlbXNOZWVkVXBkYXRlID0gdHJ1ZTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgTlVNX0hPTERFUlM7IGkrKykge1xuXHRcdFx0aWYoIF9pdGVtSG9sZGVyc1tpXS5pdGVtICkge1xuXHRcdFx0XHRfaXRlbUhvbGRlcnNbaV0uaXRlbS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHVwZGF0ZUN1cnJJdGVtOiBmdW5jdGlvbihiZWZvcmVBbmltYXRpb24pIHtcblxuXHRcdGlmKF9pbmRleERpZmYgPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZGlmZkFicyA9IE1hdGguYWJzKF9pbmRleERpZmYpLFxuXHRcdFx0dGVtcEhvbGRlcjtcblxuXHRcdGlmKGJlZm9yZUFuaW1hdGlvbiAmJiBkaWZmQWJzIDwgMikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXG5cdFx0c2VsZi5jdXJySXRlbSA9IF9nZXRJdGVtQXQoIF9jdXJyZW50SXRlbUluZGV4ICk7XG5cdFx0X3JlbmRlck1heFJlc29sdXRpb24gPSBmYWxzZTtcblx0XHRcblx0XHRfc2hvdXQoJ2JlZm9yZUNoYW5nZScsIF9pbmRleERpZmYpO1xuXG5cdFx0aWYoZGlmZkFicyA+PSBOVU1fSE9MREVSUykge1xuXHRcdFx0X2NvbnRhaW5lclNoaWZ0SW5kZXggKz0gX2luZGV4RGlmZiArIChfaW5kZXhEaWZmID4gMCA/IC1OVU1fSE9MREVSUyA6IE5VTV9IT0xERVJTKTtcblx0XHRcdGRpZmZBYnMgPSBOVU1fSE9MREVSUztcblx0XHR9XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRpZmZBYnM7IGkrKykge1xuXHRcdFx0aWYoX2luZGV4RGlmZiA+IDApIHtcblx0XHRcdFx0dGVtcEhvbGRlciA9IF9pdGVtSG9sZGVycy5zaGlmdCgpO1xuXHRcdFx0XHRfaXRlbUhvbGRlcnNbTlVNX0hPTERFUlMtMV0gPSB0ZW1wSG9sZGVyOyAvLyBtb3ZlIGZpcnN0IHRvIGxhc3RcblxuXHRcdFx0XHRfY29udGFpbmVyU2hpZnRJbmRleCsrO1xuXHRcdFx0XHRfc2V0VHJhbnNsYXRlWCggKF9jb250YWluZXJTaGlmdEluZGV4KzIpICogX3NsaWRlU2l6ZS54LCB0ZW1wSG9sZGVyLmVsLnN0eWxlKTtcblx0XHRcdFx0c2VsZi5zZXRDb250ZW50KHRlbXBIb2xkZXIsIF9jdXJyZW50SXRlbUluZGV4IC0gZGlmZkFicyArIGkgKyAxICsgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0ZW1wSG9sZGVyID0gX2l0ZW1Ib2xkZXJzLnBvcCgpO1xuXHRcdFx0XHRfaXRlbUhvbGRlcnMudW5zaGlmdCggdGVtcEhvbGRlciApOyAvLyBtb3ZlIGxhc3QgdG8gZmlyc3RcblxuXHRcdFx0XHRfY29udGFpbmVyU2hpZnRJbmRleC0tO1xuXHRcdFx0XHRfc2V0VHJhbnNsYXRlWCggX2NvbnRhaW5lclNoaWZ0SW5kZXggKiBfc2xpZGVTaXplLngsIHRlbXBIb2xkZXIuZWwuc3R5bGUpO1xuXHRcdFx0XHRzZWxmLnNldENvbnRlbnQodGVtcEhvbGRlciwgX2N1cnJlbnRJdGVtSW5kZXggKyBkaWZmQWJzIC0gaSAtIDEgLSAxKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdH1cblxuXHRcdC8vIHJlc2V0IHpvb20vcGFuIG9uIHByZXZpb3VzIGl0ZW1cblx0XHRpZihfY3Vyclpvb21FbGVtZW50U3R5bGUgJiYgTWF0aC5hYnMoX2luZGV4RGlmZikgPT09IDEpIHtcblxuXHRcdFx0dmFyIHByZXZJdGVtID0gX2dldEl0ZW1BdChfcHJldkl0ZW1JbmRleCk7XG5cdFx0XHRpZihwcmV2SXRlbS5pbml0aWFsWm9vbUxldmVsICE9PSBfY3Vyclpvb21MZXZlbCkge1xuXHRcdFx0XHRfY2FsY3VsYXRlSXRlbVNpemUocHJldkl0ZW0gLCBfdmlld3BvcnRTaXplICk7XG5cdFx0XHRcdF9zZXRJbWFnZVNpemUocHJldkl0ZW0pO1xuXHRcdFx0XHRfYXBwbHlab29tUGFuVG9JdGVtKCBwcmV2SXRlbSApOyBcdFx0XHRcdFxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gcmVzZXQgZGlmZiBhZnRlciB1cGRhdGVcblx0XHRfaW5kZXhEaWZmID0gMDtcblxuXHRcdHNlbGYudXBkYXRlQ3Vyclpvb21JdGVtKCk7XG5cblx0XHRfcHJldkl0ZW1JbmRleCA9IF9jdXJyZW50SXRlbUluZGV4O1xuXG5cdFx0X3Nob3V0KCdhZnRlckNoYW5nZScpO1xuXHRcdFxuXHR9LFxuXG5cblxuXHR1cGRhdGVTaXplOiBmdW5jdGlvbihmb3JjZSkge1xuXHRcdFxuXHRcdGlmKCFfaXNGaXhlZFBvc2l0aW9uICYmIF9vcHRpb25zLm1vZGFsKSB7XG5cdFx0XHR2YXIgd2luZG93U2Nyb2xsWSA9IGZyYW1ld29yay5nZXRTY3JvbGxZKCk7XG5cdFx0XHRpZihfY3VycmVudFdpbmRvd1Njcm9sbFkgIT09IHdpbmRvd1Njcm9sbFkpIHtcblx0XHRcdFx0dGVtcGxhdGUuc3R5bGUudG9wID0gd2luZG93U2Nyb2xsWSArICdweCc7XG5cdFx0XHRcdF9jdXJyZW50V2luZG93U2Nyb2xsWSA9IHdpbmRvd1Njcm9sbFk7XG5cdFx0XHR9XG5cdFx0XHRpZighZm9yY2UgJiYgX3dpbmRvd1Zpc2libGVTaXplLnggPT09IHdpbmRvdy5pbm5lcldpZHRoICYmIF93aW5kb3dWaXNpYmxlU2l6ZS55ID09PSB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0X3dpbmRvd1Zpc2libGVTaXplLnggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblx0XHRcdF93aW5kb3dWaXNpYmxlU2l6ZS55ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG5cdFx0XHQvL3RlbXBsYXRlLnN0eWxlLndpZHRoID0gX3dpbmRvd1Zpc2libGVTaXplLnggKyAncHgnO1xuXHRcdFx0dGVtcGxhdGUuc3R5bGUuaGVpZ2h0ID0gX3dpbmRvd1Zpc2libGVTaXplLnkgKyAncHgnO1xuXHRcdH1cblxuXG5cblx0XHRfdmlld3BvcnRTaXplLnggPSBzZWxmLnNjcm9sbFdyYXAuY2xpZW50V2lkdGg7XG5cdFx0X3ZpZXdwb3J0U2l6ZS55ID0gc2VsZi5zY3JvbGxXcmFwLmNsaWVudEhlaWdodDtcblxuXHRcdF91cGRhdGVQYWdlU2Nyb2xsT2Zmc2V0KCk7XG5cblx0XHRfc2xpZGVTaXplLnggPSBfdmlld3BvcnRTaXplLnggKyBNYXRoLnJvdW5kKF92aWV3cG9ydFNpemUueCAqIF9vcHRpb25zLnNwYWNpbmcpO1xuXHRcdF9zbGlkZVNpemUueSA9IF92aWV3cG9ydFNpemUueTtcblxuXHRcdF9tb3ZlTWFpblNjcm9sbChfc2xpZGVTaXplLnggKiBfY3VyclBvc2l0aW9uSW5kZXgpO1xuXG5cdFx0X3Nob3V0KCdiZWZvcmVSZXNpemUnKTsgLy8gZXZlbiBtYXkgYmUgdXNlZCBmb3IgZXhhbXBsZSB0byBzd2l0Y2ggaW1hZ2Ugc291cmNlc1xuXG5cblx0XHQvLyBkb24ndCByZS1jYWxjdWxhdGUgc2l6ZSBvbiBpbml0YWwgc2l6ZSB1cGRhdGVcblx0XHRpZihfY29udGFpbmVyU2hpZnRJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG5cblx0XHRcdHZhciBob2xkZXIsXG5cdFx0XHRcdGl0ZW0sXG5cdFx0XHRcdGhJbmRleDtcblxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IE5VTV9IT0xERVJTOyBpKyspIHtcblx0XHRcdFx0aG9sZGVyID0gX2l0ZW1Ib2xkZXJzW2ldO1xuXHRcdFx0XHRfc2V0VHJhbnNsYXRlWCggKGkrX2NvbnRhaW5lclNoaWZ0SW5kZXgpICogX3NsaWRlU2l6ZS54LCBob2xkZXIuZWwuc3R5bGUpO1xuXG5cdFx0XHRcdGhJbmRleCA9IF9jdXJyZW50SXRlbUluZGV4K2ktMTtcblxuXHRcdFx0XHRpZihfb3B0aW9ucy5sb29wICYmIF9nZXROdW1JdGVtcygpID4gMikge1xuXHRcdFx0XHRcdGhJbmRleCA9IF9nZXRMb29wZWRJZChoSW5kZXgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gdXBkYXRlIHpvb20gbGV2ZWwgb24gaXRlbXMgYW5kIHJlZnJlc2ggc291cmNlIChpZiBuZWVkc1VwZGF0ZSlcblx0XHRcdFx0aXRlbSA9IF9nZXRJdGVtQXQoIGhJbmRleCApO1xuXG5cdFx0XHRcdC8vIHJlLXJlbmRlciBnYWxsZXJ5IGl0ZW0gaWYgYG5lZWRzVXBkYXRlYCxcblx0XHRcdFx0Ly8gb3IgZG9lc24ndCBoYXZlIGBib3VuZHNgIChlbnRpcmVseSBuZXcgc2xpZGUgb2JqZWN0KVxuXHRcdFx0XHRpZiggaXRlbSAmJiAoX2l0ZW1zTmVlZFVwZGF0ZSB8fCBpdGVtLm5lZWRzVXBkYXRlIHx8ICFpdGVtLmJvdW5kcykgKSB7XG5cblx0XHRcdFx0XHRzZWxmLmNsZWFuU2xpZGUoIGl0ZW0gKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRzZWxmLnNldENvbnRlbnQoIGhvbGRlciwgaEluZGV4ICk7XG5cblx0XHRcdFx0XHQvLyBpZiBcImNlbnRlclwiIHNsaWRlXG5cdFx0XHRcdFx0aWYoaSA9PT0gMSkge1xuXHRcdFx0XHRcdFx0c2VsZi5jdXJySXRlbSA9IGl0ZW07XG5cdFx0XHRcdFx0XHRzZWxmLnVwZGF0ZUN1cnJab29tSXRlbSh0cnVlKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpdGVtLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdFx0fSBlbHNlIGlmKGhvbGRlci5pbmRleCA9PT0gLTEgJiYgaEluZGV4ID49IDApIHtcblx0XHRcdFx0XHQvLyBhZGQgY29udGVudCBmaXJzdCB0aW1lXG5cdFx0XHRcdFx0c2VsZi5zZXRDb250ZW50KCBob2xkZXIsIGhJbmRleCApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGl0ZW0gJiYgaXRlbS5jb250YWluZXIpIHtcblx0XHRcdFx0XHRfY2FsY3VsYXRlSXRlbVNpemUoaXRlbSwgX3ZpZXdwb3J0U2l6ZSk7XG5cdFx0XHRcdFx0X3NldEltYWdlU2l6ZShpdGVtKTtcblx0XHRcdFx0XHRfYXBwbHlab29tUGFuVG9JdGVtKCBpdGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHR9XG5cdFx0XHRfaXRlbXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdFx0fVx0XG5cblx0XHRfc3RhcnRab29tTGV2ZWwgPSBfY3Vyclpvb21MZXZlbCA9IHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFpvb21MZXZlbDtcblx0XHRfY3VyclBhbkJvdW5kcyA9IHNlbGYuY3Vyckl0ZW0uYm91bmRzO1xuXG5cdFx0aWYoX2N1cnJQYW5Cb3VuZHMpIHtcblx0XHRcdF9wYW5PZmZzZXQueCA9IF9jdXJyUGFuQm91bmRzLmNlbnRlci54O1xuXHRcdFx0X3Bhbk9mZnNldC55ID0gX2N1cnJQYW5Cb3VuZHMuY2VudGVyLnk7XG5cdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbiggdHJ1ZSApO1xuXHRcdH1cblx0XHRcblx0XHRfc2hvdXQoJ3Jlc2l6ZScpO1xuXHR9LFxuXHRcblx0Ly8gWm9vbSBjdXJyZW50IGl0ZW0gdG9cblx0em9vbVRvOiBmdW5jdGlvbihkZXN0Wm9vbUxldmVsLCBjZW50ZXJQb2ludCwgc3BlZWQsIGVhc2luZ0ZuLCB1cGRhdGVGbikge1xuXHRcdC8qXG5cdFx0XHRpZihkZXN0Wm9vbUxldmVsID09PSAnZml0Jykge1xuXHRcdFx0XHRkZXN0Wm9vbUxldmVsID0gc2VsZi5jdXJySXRlbS5maXRSYXRpbztcblx0XHRcdH0gZWxzZSBpZihkZXN0Wm9vbUxldmVsID09PSAnZmlsbCcpIHtcblx0XHRcdFx0ZGVzdFpvb21MZXZlbCA9IHNlbGYuY3Vyckl0ZW0uZmlsbFJhdGlvO1xuXHRcdFx0fVxuXHRcdCovXG5cblx0XHRpZihjZW50ZXJQb2ludCkge1xuXHRcdFx0X3N0YXJ0Wm9vbUxldmVsID0gX2N1cnJab29tTGV2ZWw7XG5cdFx0XHRfbWlkWm9vbVBvaW50LnggPSBNYXRoLmFicyhjZW50ZXJQb2ludC54KSAtIF9wYW5PZmZzZXQueCA7XG5cdFx0XHRfbWlkWm9vbVBvaW50LnkgPSBNYXRoLmFicyhjZW50ZXJQb2ludC55KSAtIF9wYW5PZmZzZXQueSA7XG5cdFx0XHRfZXF1YWxpemVQb2ludHMoX3N0YXJ0UGFuT2Zmc2V0LCBfcGFuT2Zmc2V0KTtcblx0XHR9XG5cblx0XHR2YXIgZGVzdFBhbkJvdW5kcyA9IF9jYWxjdWxhdGVQYW5Cb3VuZHMoZGVzdFpvb21MZXZlbCwgZmFsc2UpLFxuXHRcdFx0ZGVzdFBhbk9mZnNldCA9IHt9O1xuXG5cdFx0X21vZGlmeURlc3RQYW5PZmZzZXQoJ3gnLCBkZXN0UGFuQm91bmRzLCBkZXN0UGFuT2Zmc2V0LCBkZXN0Wm9vbUxldmVsKTtcblx0XHRfbW9kaWZ5RGVzdFBhbk9mZnNldCgneScsIGRlc3RQYW5Cb3VuZHMsIGRlc3RQYW5PZmZzZXQsIGRlc3Rab29tTGV2ZWwpO1xuXG5cdFx0dmFyIGluaXRpYWxab29tTGV2ZWwgPSBfY3Vyclpvb21MZXZlbDtcblx0XHR2YXIgaW5pdGlhbFBhbk9mZnNldCA9IHtcblx0XHRcdHg6IF9wYW5PZmZzZXQueCxcblx0XHRcdHk6IF9wYW5PZmZzZXQueVxuXHRcdH07XG5cblx0XHRfcm91bmRQb2ludChkZXN0UGFuT2Zmc2V0KTtcblxuXHRcdHZhciBvblVwZGF0ZSA9IGZ1bmN0aW9uKG5vdykge1xuXHRcdFx0aWYobm93ID09PSAxKSB7XG5cdFx0XHRcdF9jdXJyWm9vbUxldmVsID0gZGVzdFpvb21MZXZlbDtcblx0XHRcdFx0X3Bhbk9mZnNldC54ID0gZGVzdFBhbk9mZnNldC54O1xuXHRcdFx0XHRfcGFuT2Zmc2V0LnkgPSBkZXN0UGFuT2Zmc2V0Lnk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfY3Vyclpvb21MZXZlbCA9IChkZXN0Wm9vbUxldmVsIC0gaW5pdGlhbFpvb21MZXZlbCkgKiBub3cgKyBpbml0aWFsWm9vbUxldmVsO1xuXHRcdFx0XHRfcGFuT2Zmc2V0LnggPSAoZGVzdFBhbk9mZnNldC54IC0gaW5pdGlhbFBhbk9mZnNldC54KSAqIG5vdyArIGluaXRpYWxQYW5PZmZzZXQueDtcblx0XHRcdFx0X3Bhbk9mZnNldC55ID0gKGRlc3RQYW5PZmZzZXQueSAtIGluaXRpYWxQYW5PZmZzZXQueSkgKiBub3cgKyBpbml0aWFsUGFuT2Zmc2V0Lnk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKHVwZGF0ZUZuKSB7XG5cdFx0XHRcdHVwZGF0ZUZuKG5vdyk7XG5cdFx0XHR9XG5cblx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCBub3cgPT09IDEgKTtcblx0XHR9O1xuXG5cdFx0aWYoc3BlZWQpIHtcblx0XHRcdF9hbmltYXRlUHJvcCgnY3VzdG9tWm9vbVRvJywgMCwgMSwgc3BlZWQsIGVhc2luZ0ZuIHx8IGZyYW1ld29yay5lYXNpbmcuc2luZS5pbk91dCwgb25VcGRhdGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRvblVwZGF0ZSgxKTtcblx0XHR9XG5cdH1cblxuXG59O1xuXG5cbi8qPj5jb3JlKi9cblxuLyo+Pmdlc3R1cmVzKi9cbi8qKlxuICogTW91c2UvdG91Y2gvcG9pbnRlciBldmVudCBoYW5kbGVycy5cbiAqIFxuICogc2VwYXJhdGVkIGZyb20gQGNvcmUuanMgZm9yIHJlYWRhYmlsaXR5XG4gKi9cblxudmFyIE1JTl9TV0lQRV9ESVNUQU5DRSA9IDMwLFxuXHRESVJFQ1RJT05fQ0hFQ0tfT0ZGU0VUID0gMTA7IC8vIGFtb3VudCBvZiBwaXhlbHMgdG8gZHJhZyB0byBkZXRlcm1pbmUgZGlyZWN0aW9uIG9mIHN3aXBlXG5cbnZhciBfZ2VzdHVyZVN0YXJ0VGltZSxcblx0X2dlc3R1cmVDaGVja1NwZWVkVGltZSxcblxuXHQvLyBwb29sIG9mIG9iamVjdHMgdGhhdCBhcmUgdXNlZCBkdXJpbmcgZHJhZ2dpbmcgb2Ygem9vbWluZ1xuXHRwID0ge30sIC8vIGZpcnN0IHBvaW50XG5cdHAyID0ge30sIC8vIHNlY29uZCBwb2ludCAoZm9yIHpvb20gZ2VzdHVyZSlcblx0ZGVsdGEgPSB7fSxcblx0X2N1cnJQb2ludCA9IHt9LFxuXHRfc3RhcnRQb2ludCA9IHt9LFxuXHRfY3VyclBvaW50ZXJzID0gW10sXG5cdF9zdGFydE1haW5TY3JvbGxQb3MgPSB7fSxcblx0X3JlbGVhc2VBbmltRGF0YSxcblx0X3Bvc1BvaW50cyA9IFtdLCAvLyBhcnJheSBvZiBwb2ludHMgZHVyaW5nIGRyYWdnaW5nLCB1c2VkIHRvIGRldGVybWluZSB0eXBlIG9mIGdlc3R1cmVcblx0X3RlbXBQb2ludCA9IHt9LFxuXG5cdF9pc1pvb21pbmdJbixcblx0X3ZlcnRpY2FsRHJhZ0luaXRpYXRlZCxcblx0X29sZEFuZHJvaWRUb3VjaEVuZFRpbWVvdXQsXG5cdF9jdXJyWm9vbWVkSXRlbUluZGV4ID0gMCxcblx0X2NlbnRlclBvaW50ID0gX2dldEVtcHR5UG9pbnQoKSxcblx0X2xhc3RSZWxlYXNlVGltZSA9IDAsXG5cdF9pc0RyYWdnaW5nLCAvLyBhdCBsZWFzdCBvbmUgcG9pbnRlciBpcyBkb3duXG5cdF9pc011bHRpdG91Y2gsIC8vIGF0IGxlYXN0IHR3byBfcG9pbnRlcnMgYXJlIGRvd25cblx0X3pvb21TdGFydGVkLCAvLyB6b29tIGxldmVsIGNoYW5nZWQgZHVyaW5nIHpvb20gZ2VzdHVyZVxuXHRfbW92ZWQsXG5cdF9kcmFnQW5pbUZyYW1lLFxuXHRfbWFpblNjcm9sbFNoaWZ0ZWQsXG5cdF9jdXJyZW50UG9pbnRzLCAvLyBhcnJheSBvZiBjdXJyZW50IHRvdWNoIHBvaW50c1xuXHRfaXNab29taW5nLFxuXHRfY3VyclBvaW50c0Rpc3RhbmNlLFxuXHRfc3RhcnRQb2ludHNEaXN0YW5jZSxcblx0X2N1cnJQYW5Cb3VuZHMsXG5cdF9tYWluU2Nyb2xsUG9zID0gX2dldEVtcHR5UG9pbnQoKSxcblx0X2N1cnJab29tRWxlbWVudFN0eWxlLFxuXHRfbWFpblNjcm9sbEFuaW1hdGluZywgLy8gdHJ1ZSwgaWYgYW5pbWF0aW9uIGFmdGVyIHN3aXBlIGdlc3R1cmUgaXMgcnVubmluZ1xuXHRfbWlkWm9vbVBvaW50ID0gX2dldEVtcHR5UG9pbnQoKSxcblx0X2N1cnJDZW50ZXJQb2ludCA9IF9nZXRFbXB0eVBvaW50KCksXG5cdF9kaXJlY3Rpb24sXG5cdF9pc0ZpcnN0TW92ZSxcblx0X29wYWNpdHlDaGFuZ2VkLFxuXHRfYmdPcGFjaXR5LFxuXHRfd2FzT3ZlckluaXRpYWxab29tLFxuXG5cdF9pc0VxdWFsUG9pbnRzID0gZnVuY3Rpb24ocDEsIHAyKSB7XG5cdFx0cmV0dXJuIHAxLnggPT09IHAyLnggJiYgcDEueSA9PT0gcDIueTtcblx0fSxcblx0X2lzTmVhcmJ5UG9pbnRzID0gZnVuY3Rpb24odG91Y2gwLCB0b3VjaDEpIHtcblx0XHRyZXR1cm4gTWF0aC5hYnModG91Y2gwLnggLSB0b3VjaDEueCkgPCBET1VCTEVfVEFQX1JBRElVUyAmJiBNYXRoLmFicyh0b3VjaDAueSAtIHRvdWNoMS55KSA8IERPVUJMRV9UQVBfUkFESVVTO1xuXHR9LFxuXHRfY2FsY3VsYXRlUG9pbnRzRGlzdGFuY2UgPSBmdW5jdGlvbihwMSwgcDIpIHtcblx0XHRfdGVtcFBvaW50LnggPSBNYXRoLmFicyggcDEueCAtIHAyLnggKTtcblx0XHRfdGVtcFBvaW50LnkgPSBNYXRoLmFicyggcDEueSAtIHAyLnkgKTtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KF90ZW1wUG9pbnQueCAqIF90ZW1wUG9pbnQueCArIF90ZW1wUG9pbnQueSAqIF90ZW1wUG9pbnQueSk7XG5cdH0sXG5cdF9zdG9wRHJhZ1VwZGF0ZUxvb3AgPSBmdW5jdGlvbigpIHtcblx0XHRpZihfZHJhZ0FuaW1GcmFtZSkge1xuXHRcdFx0X2NhbmNlbEFGKF9kcmFnQW5pbUZyYW1lKTtcblx0XHRcdF9kcmFnQW5pbUZyYW1lID0gbnVsbDtcblx0XHR9XG5cdH0sXG5cdF9kcmFnVXBkYXRlTG9vcCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKF9pc0RyYWdnaW5nKSB7XG5cdFx0XHRfZHJhZ0FuaW1GcmFtZSA9IF9yZXF1ZXN0QUYoX2RyYWdVcGRhdGVMb29wKTtcblx0XHRcdF9yZW5kZXJNb3ZlbWVudCgpO1xuXHRcdH1cblx0fSxcblx0X2NhblBhbiA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAhKF9vcHRpb25zLnNjYWxlTW9kZSA9PT0gJ2ZpdCcgJiYgX2N1cnJab29tTGV2ZWwgPT09ICBzZWxmLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWwpO1xuXHR9LFxuXHRcblx0Ly8gZmluZCB0aGUgY2xvc2VzdCBwYXJlbnQgRE9NIGVsZW1lbnRcblx0X2Nsb3Nlc3RFbGVtZW50ID0gZnVuY3Rpb24oZWwsIGZuKSB7XG5cdCAgXHRpZighZWwgfHwgZWwgPT09IGRvY3VtZW50KSB7XG5cdCAgXHRcdHJldHVybiBmYWxzZTtcblx0ICBcdH1cblxuXHQgIFx0Ly8gZG9uJ3Qgc2VhcmNoIGVsZW1lbnRzIGFib3ZlIHBzd3BfX3Njcm9sbC13cmFwXG5cdCAgXHRpZihlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgJiYgZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpLmluZGV4T2YoJ3Bzd3BfX3Njcm9sbC13cmFwJykgPiAtMSApIHtcblx0ICBcdFx0cmV0dXJuIGZhbHNlO1xuXHQgIFx0fVxuXG5cdCAgXHRpZiggZm4oZWwpICkge1xuXHQgIFx0XHRyZXR1cm4gZWw7XG5cdCAgXHR9XG5cblx0ICBcdHJldHVybiBfY2xvc2VzdEVsZW1lbnQoZWwucGFyZW50Tm9kZSwgZm4pO1xuXHR9LFxuXG5cdF9wcmV2ZW50T2JqID0ge30sXG5cdF9wcmV2ZW50RGVmYXVsdEV2ZW50QmVoYXZpb3VyID0gZnVuY3Rpb24oZSwgaXNEb3duKSB7XG5cdCAgICBfcHJldmVudE9iai5wcmV2ZW50ID0gIV9jbG9zZXN0RWxlbWVudChlLnRhcmdldCwgX29wdGlvbnMuaXNDbGlja2FibGVFbGVtZW50KTtcblxuXHRcdF9zaG91dCgncHJldmVudERyYWdFdmVudCcsIGUsIGlzRG93biwgX3ByZXZlbnRPYmopO1xuXHRcdHJldHVybiBfcHJldmVudE9iai5wcmV2ZW50O1xuXG5cdH0sXG5cdF9jb252ZXJ0VG91Y2hUb1BvaW50ID0gZnVuY3Rpb24odG91Y2gsIHApIHtcblx0XHRwLnggPSB0b3VjaC5wYWdlWDtcblx0XHRwLnkgPSB0b3VjaC5wYWdlWTtcblx0XHRwLmlkID0gdG91Y2guaWRlbnRpZmllcjtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0X2ZpbmRDZW50ZXJPZlBvaW50cyA9IGZ1bmN0aW9uKHAxLCBwMiwgcENlbnRlcikge1xuXHRcdHBDZW50ZXIueCA9IChwMS54ICsgcDIueCkgKiAwLjU7XG5cdFx0cENlbnRlci55ID0gKHAxLnkgKyBwMi55KSAqIDAuNTtcblx0fSxcblx0X3B1c2hQb3NQb2ludCA9IGZ1bmN0aW9uKHRpbWUsIHgsIHkpIHtcblx0XHRpZih0aW1lIC0gX2dlc3R1cmVDaGVja1NwZWVkVGltZSA+IDUwKSB7XG5cdFx0XHR2YXIgbyA9IF9wb3NQb2ludHMubGVuZ3RoID4gMiA/IF9wb3NQb2ludHMuc2hpZnQoKSA6IHt9O1xuXHRcdFx0by54ID0geDtcblx0XHRcdG8ueSA9IHk7IFxuXHRcdFx0X3Bvc1BvaW50cy5wdXNoKG8pO1xuXHRcdFx0X2dlc3R1cmVDaGVja1NwZWVkVGltZSA9IHRpbWU7XG5cdFx0fVxuXHR9LFxuXG5cdF9jYWxjdWxhdGVWZXJ0aWNhbERyYWdPcGFjaXR5UmF0aW8gPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgeU9mZnNldCA9IF9wYW5PZmZzZXQueSAtIHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFBvc2l0aW9uLnk7IC8vIGRpZmZlcmVuY2UgYmV0d2VlbiBpbml0aWFsIGFuZCBjdXJyZW50IHBvc2l0aW9uXG5cdFx0cmV0dXJuIDEgLSAgTWF0aC5hYnMoIHlPZmZzZXQgLyAoX3ZpZXdwb3J0U2l6ZS55IC8gMikgICk7XG5cdH0sXG5cblx0XG5cdC8vIHBvaW50cyBwb29sLCByZXVzZWQgZHVyaW5nIHRvdWNoIGV2ZW50c1xuXHRfZVBvaW50MSA9IHt9LFxuXHRfZVBvaW50MiA9IHt9LFxuXHRfdGVtcFBvaW50c0FyciA9IFtdLFxuXHRfdGVtcENvdW50ZXIsXG5cdF9nZXRUb3VjaFBvaW50cyA9IGZ1bmN0aW9uKGUpIHtcblx0XHQvLyBjbGVhbiB1cCBwcmV2aW91cyBwb2ludHMsIHdpdGhvdXQgcmVjcmVhdGluZyBhcnJheVxuXHRcdHdoaWxlKF90ZW1wUG9pbnRzQXJyLmxlbmd0aCA+IDApIHtcblx0XHRcdF90ZW1wUG9pbnRzQXJyLnBvcCgpO1xuXHRcdH1cblxuXHRcdGlmKCFfcG9pbnRlckV2ZW50RW5hYmxlZCkge1xuXHRcdFx0aWYoZS50eXBlLmluZGV4T2YoJ3RvdWNoJykgPiAtMSkge1xuXG5cdFx0XHRcdGlmKGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdF90ZW1wUG9pbnRzQXJyWzBdID0gX2NvbnZlcnRUb3VjaFRvUG9pbnQoZS50b3VjaGVzWzBdLCBfZVBvaW50MSk7XG5cdFx0XHRcdFx0aWYoZS50b3VjaGVzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdF90ZW1wUG9pbnRzQXJyWzFdID0gX2NvbnZlcnRUb3VjaFRvUG9pbnQoZS50b3VjaGVzWzFdLCBfZVBvaW50Mik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X2VQb2ludDEueCA9IGUucGFnZVg7XG5cdFx0XHRcdF9lUG9pbnQxLnkgPSBlLnBhZ2VZO1xuXHRcdFx0XHRfZVBvaW50MS5pZCA9ICcnO1xuXHRcdFx0XHRfdGVtcFBvaW50c0FyclswXSA9IF9lUG9pbnQxOy8vX2VQb2ludDE7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdF90ZW1wQ291bnRlciA9IDA7XG5cdFx0XHQvLyB3ZSBjYW4gdXNlIGZvckVhY2gsIGFzIHBvaW50ZXIgZXZlbnRzIGFyZSBzdXBwb3J0ZWQgb25seSBpbiBtb2Rlcm4gYnJvd3NlcnNcblx0XHRcdF9jdXJyUG9pbnRlcnMuZm9yRWFjaChmdW5jdGlvbihwKSB7XG5cdFx0XHRcdGlmKF90ZW1wQ291bnRlciA9PT0gMCkge1xuXHRcdFx0XHRcdF90ZW1wUG9pbnRzQXJyWzBdID0gcDtcblx0XHRcdFx0fSBlbHNlIGlmKF90ZW1wQ291bnRlciA9PT0gMSkge1xuXHRcdFx0XHRcdF90ZW1wUG9pbnRzQXJyWzFdID0gcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRfdGVtcENvdW50ZXIrKztcblxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJldHVybiBfdGVtcFBvaW50c0Fycjtcblx0fSxcblxuXHRfcGFuT3JNb3ZlTWFpblNjcm9sbCA9IGZ1bmN0aW9uKGF4aXMsIGRlbHRhKSB7XG5cblx0XHR2YXIgcGFuRnJpY3Rpb24sXG5cdFx0XHRvdmVyRGlmZiA9IDAsXG5cdFx0XHRuZXdPZmZzZXQgPSBfcGFuT2Zmc2V0W2F4aXNdICsgZGVsdGFbYXhpc10sXG5cdFx0XHRzdGFydE92ZXJEaWZmLFxuXHRcdFx0ZGlyID0gZGVsdGFbYXhpc10gPiAwLFxuXHRcdFx0bmV3TWFpblNjcm9sbFBvc2l0aW9uID0gX21haW5TY3JvbGxQb3MueCArIGRlbHRhLngsXG5cdFx0XHRtYWluU2Nyb2xsRGlmZiA9IF9tYWluU2Nyb2xsUG9zLnggLSBfc3RhcnRNYWluU2Nyb2xsUG9zLngsXG5cdFx0XHRuZXdQYW5Qb3MsXG5cdFx0XHRuZXdNYWluU2Nyb2xsUG9zO1xuXG5cdFx0Ly8gY2FsY3VsYXRlIGZkaXN0YW5jZSBvdmVyIHRoZSBib3VuZHMgYW5kIGZyaWN0aW9uXG5cdFx0aWYobmV3T2Zmc2V0ID4gX2N1cnJQYW5Cb3VuZHMubWluW2F4aXNdIHx8IG5ld09mZnNldCA8IF9jdXJyUGFuQm91bmRzLm1heFtheGlzXSkge1xuXHRcdFx0cGFuRnJpY3Rpb24gPSBfb3B0aW9ucy5wYW5FbmRGcmljdGlvbjtcblx0XHRcdC8vIExpbmVhciBpbmNyZWFzaW5nIG9mIGZyaWN0aW9uLCBzbyBhdCAxLzQgb2Ygdmlld3BvcnQgaXQncyBhdCBtYXggdmFsdWUuIFxuXHRcdFx0Ly8gTG9va3Mgbm90IGFzIG5pY2UgYXMgd2FzIGV4cGVjdGVkLiBMZWZ0IGZvciBoaXN0b3J5LlxuXHRcdFx0Ly8gcGFuRnJpY3Rpb24gPSAoMSAtIChfcGFuT2Zmc2V0W2F4aXNdICsgZGVsdGFbYXhpc10gKyBwYW5Cb3VuZHMubWluW2F4aXNdKSAvIChfdmlld3BvcnRTaXplW2F4aXNdIC8gNCkgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGFuRnJpY3Rpb24gPSAxO1xuXHRcdH1cblx0XHRcblx0XHRuZXdPZmZzZXQgPSBfcGFuT2Zmc2V0W2F4aXNdICsgZGVsdGFbYXhpc10gKiBwYW5GcmljdGlvbjtcblxuXHRcdC8vIG1vdmUgbWFpbiBzY3JvbGwgb3Igc3RhcnQgcGFubmluZ1xuXHRcdGlmKF9vcHRpb25zLmFsbG93UGFuVG9OZXh0IHx8IF9jdXJyWm9vbUxldmVsID09PSBzZWxmLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWwpIHtcblxuXG5cdFx0XHRpZighX2N1cnJab29tRWxlbWVudFN0eWxlKSB7XG5cdFx0XHRcdFxuXHRcdFx0XHRuZXdNYWluU2Nyb2xsUG9zID0gbmV3TWFpblNjcm9sbFBvc2l0aW9uO1xuXG5cdFx0XHR9IGVsc2UgaWYoX2RpcmVjdGlvbiA9PT0gJ2gnICYmIGF4aXMgPT09ICd4JyAmJiAhX3pvb21TdGFydGVkICkge1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoZGlyKSB7XG5cdFx0XHRcdFx0aWYobmV3T2Zmc2V0ID4gX2N1cnJQYW5Cb3VuZHMubWluW2F4aXNdKSB7XG5cdFx0XHRcdFx0XHRwYW5GcmljdGlvbiA9IF9vcHRpb25zLnBhbkVuZEZyaWN0aW9uO1xuXHRcdFx0XHRcdFx0b3ZlckRpZmYgPSBfY3VyclBhbkJvdW5kcy5taW5bYXhpc10gLSBuZXdPZmZzZXQ7XG5cdFx0XHRcdFx0XHRzdGFydE92ZXJEaWZmID0gX2N1cnJQYW5Cb3VuZHMubWluW2F4aXNdIC0gX3N0YXJ0UGFuT2Zmc2V0W2F4aXNdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBkcmFnIHJpZ2h0XG5cdFx0XHRcdFx0aWYoIChzdGFydE92ZXJEaWZmIDw9IDAgfHwgbWFpblNjcm9sbERpZmYgPCAwKSAmJiBfZ2V0TnVtSXRlbXMoKSA+IDEgKSB7XG5cdFx0XHRcdFx0XHRuZXdNYWluU2Nyb2xsUG9zID0gbmV3TWFpblNjcm9sbFBvc2l0aW9uO1xuXHRcdFx0XHRcdFx0aWYobWFpblNjcm9sbERpZmYgPCAwICYmIG5ld01haW5TY3JvbGxQb3NpdGlvbiA+IF9zdGFydE1haW5TY3JvbGxQb3MueCkge1xuXHRcdFx0XHRcdFx0XHRuZXdNYWluU2Nyb2xsUG9zID0gX3N0YXJ0TWFpblNjcm9sbFBvcy54O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZihfY3VyclBhbkJvdW5kcy5taW4ueCAhPT0gX2N1cnJQYW5Cb3VuZHMubWF4LngpIHtcblx0XHRcdFx0XHRcdFx0bmV3UGFuUG9zID0gbmV3T2Zmc2V0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZihuZXdPZmZzZXQgPCBfY3VyclBhbkJvdW5kcy5tYXhbYXhpc10gKSB7XG5cdFx0XHRcdFx0XHRwYW5GcmljdGlvbiA9X29wdGlvbnMucGFuRW5kRnJpY3Rpb247XG5cdFx0XHRcdFx0XHRvdmVyRGlmZiA9IG5ld09mZnNldCAtIF9jdXJyUGFuQm91bmRzLm1heFtheGlzXTtcblx0XHRcdFx0XHRcdHN0YXJ0T3ZlckRpZmYgPSBfc3RhcnRQYW5PZmZzZXRbYXhpc10gLSBfY3VyclBhbkJvdW5kcy5tYXhbYXhpc107XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYoIChzdGFydE92ZXJEaWZmIDw9IDAgfHwgbWFpblNjcm9sbERpZmYgPiAwKSAmJiBfZ2V0TnVtSXRlbXMoKSA+IDEgKSB7XG5cdFx0XHRcdFx0XHRuZXdNYWluU2Nyb2xsUG9zID0gbmV3TWFpblNjcm9sbFBvc2l0aW9uO1xuXG5cdFx0XHRcdFx0XHRpZihtYWluU2Nyb2xsRGlmZiA+IDAgJiYgbmV3TWFpblNjcm9sbFBvc2l0aW9uIDwgX3N0YXJ0TWFpblNjcm9sbFBvcy54KSB7XG5cdFx0XHRcdFx0XHRcdG5ld01haW5TY3JvbGxQb3MgPSBfc3RhcnRNYWluU2Nyb2xsUG9zLng7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYoX2N1cnJQYW5Cb3VuZHMubWluLnggIT09IF9jdXJyUGFuQm91bmRzLm1heC54KSB7XG5cdFx0XHRcdFx0XHRcdG5ld1BhblBvcyA9IG5ld09mZnNldDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0Ly9cblx0XHRcdH1cblxuXHRcdFx0aWYoYXhpcyA9PT0gJ3gnKSB7XG5cblx0XHRcdFx0aWYobmV3TWFpblNjcm9sbFBvcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0X21vdmVNYWluU2Nyb2xsKG5ld01haW5TY3JvbGxQb3MsIHRydWUpO1xuXHRcdFx0XHRcdGlmKG5ld01haW5TY3JvbGxQb3MgPT09IF9zdGFydE1haW5TY3JvbGxQb3MueCkge1xuXHRcdFx0XHRcdFx0X21haW5TY3JvbGxTaGlmdGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdF9tYWluU2Nyb2xsU2hpZnRlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoX2N1cnJQYW5Cb3VuZHMubWluLnggIT09IF9jdXJyUGFuQm91bmRzLm1heC54KSB7XG5cdFx0XHRcdFx0aWYobmV3UGFuUG9zICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdF9wYW5PZmZzZXQueCA9IG5ld1BhblBvcztcblx0XHRcdFx0XHR9IGVsc2UgaWYoIV9tYWluU2Nyb2xsU2hpZnRlZCkge1xuXHRcdFx0XHRcdFx0X3Bhbk9mZnNldC54ICs9IGRlbHRhLnggKiBwYW5GcmljdGlvbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbmV3TWFpblNjcm9sbFBvcyAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYoIV9tYWluU2Nyb2xsQW5pbWF0aW5nKSB7XG5cdFx0XHRcblx0XHRcdGlmKCFfbWFpblNjcm9sbFNoaWZ0ZWQpIHtcblx0XHRcdFx0aWYoX2N1cnJab29tTGV2ZWwgPiBzZWxmLmN1cnJJdGVtLmZpdFJhdGlvKSB7XG5cdFx0XHRcdFx0X3Bhbk9mZnNldFtheGlzXSArPSBkZWx0YVtheGlzXSAqIHBhbkZyaWN0aW9uO1xuXHRcdFx0XHRcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRcblx0XHR9XG5cdFx0XG5cdH0sXG5cblx0Ly8gUG9pbnRlcmRvd24vdG91Y2hzdGFydC9tb3VzZWRvd24gaGFuZGxlclxuXHRfb25EcmFnU3RhcnQgPSBmdW5jdGlvbihlKSB7XG5cblx0XHQvLyBBbGxvdyBkcmFnZ2luZyBvbmx5IHZpYSBsZWZ0IG1vdXNlIGJ1dHRvbi5cblx0XHQvLyBBcyB0aGlzIGhhbmRsZXIgaXMgbm90IGFkZGVkIGluIElFOCAtIHdlIGlnbm9yZSBlLndoaWNoXG5cdFx0Ly8gXG5cdFx0Ly8gaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG5cdFx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL2V2ZW50LmJ1dHRvblxuXHRcdGlmKGUudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZS5idXR0b24gPiAwICApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZihfaW5pdGlhbFpvb21SdW5uaW5nKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYoX29sZEFuZHJvaWRUb3VjaEVuZFRpbWVvdXQgJiYgZS50eXBlID09PSAnbW91c2Vkb3duJykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmKF9wcmV2ZW50RGVmYXVsdEV2ZW50QmVoYXZpb3VyKGUsIHRydWUpKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXG5cblxuXHRcdF9zaG91dCgncG9pbnRlckRvd24nKTtcblxuXHRcdGlmKF9wb2ludGVyRXZlbnRFbmFibGVkKSB7XG5cdFx0XHR2YXIgcG9pbnRlckluZGV4ID0gZnJhbWV3b3JrLmFycmF5U2VhcmNoKF9jdXJyUG9pbnRlcnMsIGUucG9pbnRlcklkLCAnaWQnKTtcblx0XHRcdGlmKHBvaW50ZXJJbmRleCA8IDApIHtcblx0XHRcdFx0cG9pbnRlckluZGV4ID0gX2N1cnJQb2ludGVycy5sZW5ndGg7XG5cdFx0XHR9XG5cdFx0XHRfY3VyclBvaW50ZXJzW3BvaW50ZXJJbmRleF0gPSB7eDplLnBhZ2VYLCB5OmUucGFnZVksIGlkOiBlLnBvaW50ZXJJZH07XG5cdFx0fVxuXHRcdFxuXG5cblx0XHR2YXIgc3RhcnRQb2ludHNMaXN0ID0gX2dldFRvdWNoUG9pbnRzKGUpLFxuXHRcdFx0bnVtUG9pbnRzID0gc3RhcnRQb2ludHNMaXN0Lmxlbmd0aDtcblxuXHRcdF9jdXJyZW50UG9pbnRzID0gbnVsbDtcblxuXHRcdF9zdG9wQWxsQW5pbWF0aW9ucygpO1xuXG5cdFx0Ly8gaW5pdCBkcmFnXG5cdFx0aWYoIV9pc0RyYWdnaW5nIHx8IG51bVBvaW50cyA9PT0gMSkge1xuXG5cdFx0XHRcblxuXHRcdFx0X2lzRHJhZ2dpbmcgPSBfaXNGaXJzdE1vdmUgPSB0cnVlO1xuXHRcdFx0ZnJhbWV3b3JrLmJpbmQod2luZG93LCBfdXBNb3ZlRXZlbnRzLCBzZWxmKTtcblxuXHRcdFx0X2lzWm9vbWluZ0luID0gXG5cdFx0XHRcdF93YXNPdmVySW5pdGlhbFpvb20gPSBcblx0XHRcdFx0X29wYWNpdHlDaGFuZ2VkID0gXG5cdFx0XHRcdF92ZXJ0aWNhbERyYWdJbml0aWF0ZWQgPSBcblx0XHRcdFx0X21haW5TY3JvbGxTaGlmdGVkID0gXG5cdFx0XHRcdF9tb3ZlZCA9IFxuXHRcdFx0XHRfaXNNdWx0aXRvdWNoID0gXG5cdFx0XHRcdF96b29tU3RhcnRlZCA9IGZhbHNlO1xuXG5cdFx0XHRfZGlyZWN0aW9uID0gbnVsbDtcblxuXHRcdFx0X3Nob3V0KCdmaXJzdFRvdWNoU3RhcnQnLCBzdGFydFBvaW50c0xpc3QpO1xuXG5cdFx0XHRfZXF1YWxpemVQb2ludHMoX3N0YXJ0UGFuT2Zmc2V0LCBfcGFuT2Zmc2V0KTtcblxuXHRcdFx0X2N1cnJQYW5EaXN0LnggPSBfY3VyclBhbkRpc3QueSA9IDA7XG5cdFx0XHRfZXF1YWxpemVQb2ludHMoX2N1cnJQb2ludCwgc3RhcnRQb2ludHNMaXN0WzBdKTtcblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhfc3RhcnRQb2ludCwgX2N1cnJQb2ludCk7XG5cblx0XHRcdC8vX2VxdWFsaXplUG9pbnRzKF9zdGFydE1haW5TY3JvbGxQb3MsIF9tYWluU2Nyb2xsUG9zKTtcblx0XHRcdF9zdGFydE1haW5TY3JvbGxQb3MueCA9IF9zbGlkZVNpemUueCAqIF9jdXJyUG9zaXRpb25JbmRleDtcblxuXHRcdFx0X3Bvc1BvaW50cyA9IFt7XG5cdFx0XHRcdHg6IF9jdXJyUG9pbnQueCxcblx0XHRcdFx0eTogX2N1cnJQb2ludC55XG5cdFx0XHR9XTtcblxuXHRcdFx0X2dlc3R1cmVDaGVja1NwZWVkVGltZSA9IF9nZXN0dXJlU3RhcnRUaW1lID0gX2dldEN1cnJlbnRUaW1lKCk7XG5cblx0XHRcdC8vX21haW5TY3JvbGxBbmltYXRpb25FbmQodHJ1ZSk7XG5cdFx0XHRfY2FsY3VsYXRlUGFuQm91bmRzKCBfY3Vyclpvb21MZXZlbCwgdHJ1ZSApO1xuXHRcdFx0XG5cdFx0XHQvLyBTdGFydCByZW5kZXJpbmdcblx0XHRcdF9zdG9wRHJhZ1VwZGF0ZUxvb3AoKTtcblx0XHRcdF9kcmFnVXBkYXRlTG9vcCgpO1xuXHRcdFx0XG5cdFx0fVxuXG5cdFx0Ly8gaW5pdCB6b29tXG5cdFx0aWYoIV9pc1pvb21pbmcgJiYgbnVtUG9pbnRzID4gMSAmJiAhX21haW5TY3JvbGxBbmltYXRpbmcgJiYgIV9tYWluU2Nyb2xsU2hpZnRlZCkge1xuXHRcdFx0X3N0YXJ0Wm9vbUxldmVsID0gX2N1cnJab29tTGV2ZWw7XG5cdFx0XHRfem9vbVN0YXJ0ZWQgPSBmYWxzZTsgLy8gdHJ1ZSBpZiB6b29tIGNoYW5nZWQgYXQgbGVhc3Qgb25jZVxuXG5cdFx0XHRfaXNab29taW5nID0gX2lzTXVsdGl0b3VjaCA9IHRydWU7XG5cdFx0XHRfY3VyclBhbkRpc3QueSA9IF9jdXJyUGFuRGlzdC54ID0gMDtcblxuXHRcdFx0X2VxdWFsaXplUG9pbnRzKF9zdGFydFBhbk9mZnNldCwgX3Bhbk9mZnNldCk7XG5cblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhwLCBzdGFydFBvaW50c0xpc3RbMF0pO1xuXHRcdFx0X2VxdWFsaXplUG9pbnRzKHAyLCBzdGFydFBvaW50c0xpc3RbMV0pO1xuXG5cdFx0XHRfZmluZENlbnRlck9mUG9pbnRzKHAsIHAyLCBfY3VyckNlbnRlclBvaW50KTtcblxuXHRcdFx0X21pZFpvb21Qb2ludC54ID0gTWF0aC5hYnMoX2N1cnJDZW50ZXJQb2ludC54KSAtIF9wYW5PZmZzZXQueDtcblx0XHRcdF9taWRab29tUG9pbnQueSA9IE1hdGguYWJzKF9jdXJyQ2VudGVyUG9pbnQueSkgLSBfcGFuT2Zmc2V0Lnk7XG5cdFx0XHRfY3VyclBvaW50c0Rpc3RhbmNlID0gX3N0YXJ0UG9pbnRzRGlzdGFuY2UgPSBfY2FsY3VsYXRlUG9pbnRzRGlzdGFuY2UocCwgcDIpO1xuXHRcdH1cblxuXG5cdH0sXG5cblx0Ly8gUG9pbnRlcm1vdmUvdG91Y2htb3ZlL21vdXNlbW92ZSBoYW5kbGVyXG5cdF9vbkRyYWdNb3ZlID0gZnVuY3Rpb24oZSkge1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0aWYoX3BvaW50ZXJFdmVudEVuYWJsZWQpIHtcblx0XHRcdHZhciBwb2ludGVySW5kZXggPSBmcmFtZXdvcmsuYXJyYXlTZWFyY2goX2N1cnJQb2ludGVycywgZS5wb2ludGVySWQsICdpZCcpO1xuXHRcdFx0aWYocG9pbnRlckluZGV4ID4gLTEpIHtcblx0XHRcdFx0dmFyIHAgPSBfY3VyclBvaW50ZXJzW3BvaW50ZXJJbmRleF07XG5cdFx0XHRcdHAueCA9IGUucGFnZVg7XG5cdFx0XHRcdHAueSA9IGUucGFnZVk7IFxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKF9pc0RyYWdnaW5nKSB7XG5cdFx0XHR2YXIgdG91Y2hlc0xpc3QgPSBfZ2V0VG91Y2hQb2ludHMoZSk7XG5cdFx0XHRpZighX2RpcmVjdGlvbiAmJiAhX21vdmVkICYmICFfaXNab29taW5nKSB7XG5cblx0XHRcdFx0aWYoX21haW5TY3JvbGxQb3MueCAhPT0gX3NsaWRlU2l6ZS54ICogX2N1cnJQb3NpdGlvbkluZGV4KSB7XG5cdFx0XHRcdFx0Ly8gaWYgbWFpbiBzY3JvbGwgcG9zaXRpb24gaXMgc2hpZnRlZCDigJMgZGlyZWN0aW9uIGlzIGFsd2F5cyBob3Jpem9udGFsXG5cdFx0XHRcdFx0X2RpcmVjdGlvbiA9ICdoJztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgZGlmZiA9IE1hdGguYWJzKHRvdWNoZXNMaXN0WzBdLnggLSBfY3VyclBvaW50LngpIC0gTWF0aC5hYnModG91Y2hlc0xpc3RbMF0ueSAtIF9jdXJyUG9pbnQueSk7XG5cdFx0XHRcdFx0Ly8gY2hlY2sgdGhlIGRpcmVjdGlvbiBvZiBtb3ZlbWVudFxuXHRcdFx0XHRcdGlmKE1hdGguYWJzKGRpZmYpID49IERJUkVDVElPTl9DSEVDS19PRkZTRVQpIHtcblx0XHRcdFx0XHRcdF9kaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdoJyA6ICd2Jztcblx0XHRcdFx0XHRcdF9jdXJyZW50UG9pbnRzID0gdG91Y2hlc0xpc3Q7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X2N1cnJlbnRQb2ludHMgPSB0b3VjaGVzTGlzdDtcblx0XHRcdH1cblx0XHR9XHRcblx0fSxcblx0Ly8gXG5cdF9yZW5kZXJNb3ZlbWVudCA9ICBmdW5jdGlvbigpIHtcblxuXHRcdGlmKCFfY3VycmVudFBvaW50cykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBudW1Qb2ludHMgPSBfY3VycmVudFBvaW50cy5sZW5ndGg7XG5cblx0XHRpZihudW1Qb2ludHMgPT09IDApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRfZXF1YWxpemVQb2ludHMocCwgX2N1cnJlbnRQb2ludHNbMF0pO1xuXG5cdFx0ZGVsdGEueCA9IHAueCAtIF9jdXJyUG9pbnQueDtcblx0XHRkZWx0YS55ID0gcC55IC0gX2N1cnJQb2ludC55O1xuXG5cdFx0aWYoX2lzWm9vbWluZyAmJiBudW1Qb2ludHMgPiAxKSB7XG5cdFx0XHQvLyBIYW5kbGUgYmVoYXZpb3VyIGZvciBtb3JlIHRoYW4gMSBwb2ludFxuXG5cdFx0XHRfY3VyclBvaW50LnggPSBwLng7XG5cdFx0XHRfY3VyclBvaW50LnkgPSBwLnk7XG5cdFx0XG5cdFx0XHQvLyBjaGVjayBpZiBvbmUgb2YgdHdvIHBvaW50cyBjaGFuZ2VkXG5cdFx0XHRpZiggIWRlbHRhLnggJiYgIWRlbHRhLnkgJiYgX2lzRXF1YWxQb2ludHMoX2N1cnJlbnRQb2ludHNbMV0sIHAyKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRfZXF1YWxpemVQb2ludHMocDIsIF9jdXJyZW50UG9pbnRzWzFdKTtcblxuXG5cdFx0XHRpZighX3pvb21TdGFydGVkKSB7XG5cdFx0XHRcdF96b29tU3RhcnRlZCA9IHRydWU7XG5cdFx0XHRcdF9zaG91dCgnem9vbUdlc3R1cmVTdGFydGVkJyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIERpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50c1xuXHRcdFx0dmFyIHBvaW50c0Rpc3RhbmNlID0gX2NhbGN1bGF0ZVBvaW50c0Rpc3RhbmNlKHAscDIpO1xuXG5cdFx0XHR2YXIgem9vbUxldmVsID0gX2NhbGN1bGF0ZVpvb21MZXZlbChwb2ludHNEaXN0YW5jZSk7XG5cblx0XHRcdC8vIHNsaWdodGx5IG92ZXIgdGhlIG9mIGluaXRpYWwgem9vbSBsZXZlbFxuXHRcdFx0aWYoem9vbUxldmVsID4gc2VsZi5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsICsgc2VsZi5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsIC8gMTUpIHtcblx0XHRcdFx0X3dhc092ZXJJbml0aWFsWm9vbSA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IHRoZSBmcmljdGlvbiBpZiB6b29tIGxldmVsIGlzIG91dCBvZiB0aGUgYm91bmRzXG5cdFx0XHR2YXIgem9vbUZyaWN0aW9uID0gMSxcblx0XHRcdFx0bWluWm9vbUxldmVsID0gX2dldE1pblpvb21MZXZlbCgpLFxuXHRcdFx0XHRtYXhab29tTGV2ZWwgPSBfZ2V0TWF4Wm9vbUxldmVsKCk7XG5cblx0XHRcdGlmICggem9vbUxldmVsIDwgbWluWm9vbUxldmVsICkge1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoX29wdGlvbnMucGluY2hUb0Nsb3NlICYmICFfd2FzT3ZlckluaXRpYWxab29tICYmIF9zdGFydFpvb21MZXZlbCA8PSBzZWxmLmN1cnJJdGVtLmluaXRpYWxab29tTGV2ZWwpIHtcblx0XHRcdFx0XHQvLyBmYWRlIG91dCBiYWNrZ3JvdW5kIGlmIHpvb21pbmcgb3V0XG5cdFx0XHRcdFx0dmFyIG1pbnVzRGlmZiA9IG1pblpvb21MZXZlbCAtIHpvb21MZXZlbDtcblx0XHRcdFx0XHR2YXIgcGVyY2VudCA9IDEgLSBtaW51c0RpZmYgLyAobWluWm9vbUxldmVsIC8gMS4yKTtcblxuXHRcdFx0XHRcdF9hcHBseUJnT3BhY2l0eShwZXJjZW50KTtcblx0XHRcdFx0XHRfc2hvdXQoJ29uUGluY2hDbG9zZScsIHBlcmNlbnQpO1xuXHRcdFx0XHRcdF9vcGFjaXR5Q2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0em9vbUZyaWN0aW9uID0gKG1pblpvb21MZXZlbCAtIHpvb21MZXZlbCkgLyBtaW5ab29tTGV2ZWw7XG5cdFx0XHRcdFx0aWYoem9vbUZyaWN0aW9uID4gMSkge1xuXHRcdFx0XHRcdFx0em9vbUZyaWN0aW9uID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0em9vbUxldmVsID0gbWluWm9vbUxldmVsIC0gem9vbUZyaWN0aW9uICogKG1pblpvb21MZXZlbCAvIDMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fSBlbHNlIGlmICggem9vbUxldmVsID4gbWF4Wm9vbUxldmVsICkge1xuXHRcdFx0XHQvLyAxLjUgLSBleHRyYSB6b29tIGxldmVsIGFib3ZlIHRoZSBtYXguIEUuZy4gaWYgbWF4IGlzIHg2LCByZWFsIG1heCA2ICsgMS41ID0gNy41XG5cdFx0XHRcdHpvb21GcmljdGlvbiA9ICh6b29tTGV2ZWwgLSBtYXhab29tTGV2ZWwpIC8gKCBtaW5ab29tTGV2ZWwgKiA2ICk7XG5cdFx0XHRcdGlmKHpvb21GcmljdGlvbiA+IDEpIHtcblx0XHRcdFx0XHR6b29tRnJpY3Rpb24gPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHpvb21MZXZlbCA9IG1heFpvb21MZXZlbCArIHpvb21GcmljdGlvbiAqIG1pblpvb21MZXZlbDtcblx0XHRcdH1cblxuXHRcdFx0aWYoem9vbUZyaWN0aW9uIDwgMCkge1xuXHRcdFx0XHR6b29tRnJpY3Rpb24gPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBkaXN0YW5jZSBiZXR3ZWVuIHRvdWNoIHBvaW50cyBhZnRlciBmcmljdGlvbiBpcyBhcHBsaWVkXG5cdFx0XHRfY3VyclBvaW50c0Rpc3RhbmNlID0gcG9pbnRzRGlzdGFuY2U7XG5cblx0XHRcdC8vIF9jZW50ZXJQb2ludCAtIFRoZSBwb2ludCBpbiB0aGUgbWlkZGxlIG9mIHR3byBwb2ludGVyc1xuXHRcdFx0X2ZpbmRDZW50ZXJPZlBvaW50cyhwLCBwMiwgX2NlbnRlclBvaW50KTtcblx0XHRcblx0XHRcdC8vIHBhbmluZyB3aXRoIHR3byBwb2ludGVycyBwcmVzc2VkXG5cdFx0XHRfY3VyclBhbkRpc3QueCArPSBfY2VudGVyUG9pbnQueCAtIF9jdXJyQ2VudGVyUG9pbnQueDtcblx0XHRcdF9jdXJyUGFuRGlzdC55ICs9IF9jZW50ZXJQb2ludC55IC0gX2N1cnJDZW50ZXJQb2ludC55O1xuXHRcdFx0X2VxdWFsaXplUG9pbnRzKF9jdXJyQ2VudGVyUG9pbnQsIF9jZW50ZXJQb2ludCk7XG5cblx0XHRcdF9wYW5PZmZzZXQueCA9IF9jYWxjdWxhdGVQYW5PZmZzZXQoJ3gnLCB6b29tTGV2ZWwpO1xuXHRcdFx0X3Bhbk9mZnNldC55ID0gX2NhbGN1bGF0ZVBhbk9mZnNldCgneScsIHpvb21MZXZlbCk7XG5cblx0XHRcdF9pc1pvb21pbmdJbiA9IHpvb21MZXZlbCA+IF9jdXJyWm9vbUxldmVsO1xuXHRcdFx0X2N1cnJab29tTGV2ZWwgPSB6b29tTGV2ZWw7XG5cdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gaGFuZGxlIGJlaGF2aW91ciBmb3Igb25lIHBvaW50IChkcmFnZ2luZyBvciBwYW5uaW5nKVxuXG5cdFx0XHRpZighX2RpcmVjdGlvbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmKF9pc0ZpcnN0TW92ZSkge1xuXHRcdFx0XHRfaXNGaXJzdE1vdmUgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyBzdWJ0cmFjdCBkcmFnIGRpc3RhbmNlIHRoYXQgd2FzIHVzZWQgZHVyaW5nIHRoZSBkZXRlY3Rpb24gZGlyZWN0aW9uICBcblxuXHRcdFx0XHRpZiggTWF0aC5hYnMoZGVsdGEueCkgPj0gRElSRUNUSU9OX0NIRUNLX09GRlNFVCkge1xuXHRcdFx0XHRcdGRlbHRhLnggLT0gX2N1cnJlbnRQb2ludHNbMF0ueCAtIF9zdGFydFBvaW50Lng7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmKCBNYXRoLmFicyhkZWx0YS55KSA+PSBESVJFQ1RJT05fQ0hFQ0tfT0ZGU0VUKSB7XG5cdFx0XHRcdFx0ZGVsdGEueSAtPSBfY3VycmVudFBvaW50c1swXS55IC0gX3N0YXJ0UG9pbnQueTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRfY3VyclBvaW50LnggPSBwLng7XG5cdFx0XHRfY3VyclBvaW50LnkgPSBwLnk7XG5cblx0XHRcdC8vIGRvIG5vdGhpbmcgaWYgcG9pbnRlcnMgcG9zaXRpb24gaGFzbid0IGNoYW5nZWRcblx0XHRcdGlmKGRlbHRhLnggPT09IDAgJiYgZGVsdGEueSA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmKF9kaXJlY3Rpb24gPT09ICd2JyAmJiBfb3B0aW9ucy5jbG9zZU9uVmVydGljYWxEcmFnKSB7XG5cdFx0XHRcdGlmKCFfY2FuUGFuKCkpIHtcblx0XHRcdFx0XHRfY3VyclBhbkRpc3QueSArPSBkZWx0YS55O1xuXHRcdFx0XHRcdF9wYW5PZmZzZXQueSArPSBkZWx0YS55O1xuXG5cdFx0XHRcdFx0dmFyIG9wYWNpdHlSYXRpbyA9IF9jYWxjdWxhdGVWZXJ0aWNhbERyYWdPcGFjaXR5UmF0aW8oKTtcblxuXHRcdFx0XHRcdF92ZXJ0aWNhbERyYWdJbml0aWF0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdF9zaG91dCgnb25WZXJ0aWNhbERyYWcnLCBvcGFjaXR5UmF0aW8pO1xuXG5cdFx0XHRcdFx0X2FwcGx5QmdPcGFjaXR5KG9wYWNpdHlSYXRpbyk7XG5cdFx0XHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblx0XHRcdFx0XHRyZXR1cm4gO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdF9wdXNoUG9zUG9pbnQoX2dldEN1cnJlbnRUaW1lKCksIHAueCwgcC55KTtcblxuXHRcdFx0X21vdmVkID0gdHJ1ZTtcblx0XHRcdF9jdXJyUGFuQm91bmRzID0gc2VsZi5jdXJySXRlbS5ib3VuZHM7XG5cdFx0XHRcblx0XHRcdHZhciBtYWluU2Nyb2xsQ2hhbmdlZCA9IF9wYW5Pck1vdmVNYWluU2Nyb2xsKCd4JywgZGVsdGEpO1xuXHRcdFx0aWYoIW1haW5TY3JvbGxDaGFuZ2VkKSB7XG5cdFx0XHRcdF9wYW5Pck1vdmVNYWluU2Nyb2xsKCd5JywgZGVsdGEpO1xuXG5cdFx0XHRcdF9yb3VuZFBvaW50KF9wYW5PZmZzZXQpO1xuXHRcdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0sXG5cdFxuXHQvLyBQb2ludGVydXAvcG9pbnRlcmNhbmNlbC90b3VjaGVuZC90b3VjaGNhbmNlbC9tb3VzZXVwIGV2ZW50IGhhbmRsZXJcblx0X29uRHJhZ1JlbGVhc2UgPSBmdW5jdGlvbihlKSB7XG5cblx0XHRpZihfZmVhdHVyZXMuaXNPbGRBbmRyb2lkICkge1xuXG5cdFx0XHRpZihfb2xkQW5kcm9pZFRvdWNoRW5kVGltZW91dCAmJiBlLnR5cGUgPT09ICdtb3VzZXVwJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIG9uIEFuZHJvaWQgKHY0LjEsIDQuMiwgNC4zICYgcG9zc2libHkgb2xkZXIpIFxuXHRcdFx0Ly8gZ2hvc3QgbW91c2Vkb3duL3VwIGV2ZW50IGlzbid0IHByZXZlbnRhYmxlIHZpYSBlLnByZXZlbnREZWZhdWx0LFxuXHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGZha2UgbW91c2Vkb3duIGV2ZW50XG5cdFx0XHQvLyBzbyB3ZSBibG9jayBtb3VzZWRvd24vdXAgZm9yIDYwMG1zXG5cdFx0XHRpZiggZS50eXBlLmluZGV4T2YoJ3RvdWNoJykgPiAtMSApIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KF9vbGRBbmRyb2lkVG91Y2hFbmRUaW1lb3V0KTtcblx0XHRcdFx0X29sZEFuZHJvaWRUb3VjaEVuZFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdF9vbGRBbmRyb2lkVG91Y2hFbmRUaW1lb3V0ID0gMDtcblx0XHRcdFx0fSwgNjAwKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdH1cblxuXHRcdF9zaG91dCgncG9pbnRlclVwJyk7XG5cblx0XHRpZihfcHJldmVudERlZmF1bHRFdmVudEJlaGF2aW91cihlLCBmYWxzZSkpIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cblx0XHR2YXIgcmVsZWFzZVBvaW50O1xuXG5cdFx0aWYoX3BvaW50ZXJFdmVudEVuYWJsZWQpIHtcblx0XHRcdHZhciBwb2ludGVySW5kZXggPSBmcmFtZXdvcmsuYXJyYXlTZWFyY2goX2N1cnJQb2ludGVycywgZS5wb2ludGVySWQsICdpZCcpO1xuXHRcdFx0XG5cdFx0XHRpZihwb2ludGVySW5kZXggPiAtMSkge1xuXHRcdFx0XHRyZWxlYXNlUG9pbnQgPSBfY3VyclBvaW50ZXJzLnNwbGljZShwb2ludGVySW5kZXgsIDEpWzBdO1xuXG5cdFx0XHRcdGlmKG5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCkge1xuXHRcdFx0XHRcdHJlbGVhc2VQb2ludC50eXBlID0gZS5wb2ludGVyVHlwZSB8fCAnbW91c2UnO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBNU1BPSU5URVJfVFlQRVMgPSB7XG5cdFx0XHRcdFx0XHQ0OiAnbW91c2UnLCAvLyBldmVudC5NU1BPSU5URVJfVFlQRV9NT1VTRVxuXHRcdFx0XHRcdFx0MjogJ3RvdWNoJywgLy8gZXZlbnQuTVNQT0lOVEVSX1RZUEVfVE9VQ0ggXG5cdFx0XHRcdFx0XHQzOiAncGVuJyAvLyBldmVudC5NU1BPSU5URVJfVFlQRV9QRU5cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHJlbGVhc2VQb2ludC50eXBlID0gTVNQT0lOVEVSX1RZUEVTW2UucG9pbnRlclR5cGVdO1xuXG5cdFx0XHRcdFx0aWYoIXJlbGVhc2VQb2ludC50eXBlKSB7XG5cdFx0XHRcdFx0XHRyZWxlYXNlUG9pbnQudHlwZSA9IGUucG9pbnRlclR5cGUgfHwgJ21vdXNlJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciB0b3VjaExpc3QgPSBfZ2V0VG91Y2hQb2ludHMoZSksXG5cdFx0XHRnZXN0dXJlVHlwZSxcblx0XHRcdG51bVBvaW50cyA9IHRvdWNoTGlzdC5sZW5ndGg7XG5cblx0XHRpZihlLnR5cGUgPT09ICdtb3VzZXVwJykge1xuXHRcdFx0bnVtUG9pbnRzID0gMDtcblx0XHR9XG5cblx0XHQvLyBEbyBub3RoaW5nIGlmIHRoZXJlIHdlcmUgMyB0b3VjaCBwb2ludHMgb3IgbW9yZVxuXHRcdGlmKG51bVBvaW50cyA9PT0gMikge1xuXHRcdFx0X2N1cnJlbnRQb2ludHMgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gaWYgc2Vjb25kIHBvaW50ZXIgcmVsZWFzZWRcblx0XHRpZihudW1Qb2ludHMgPT09IDEpIHtcblx0XHRcdF9lcXVhbGl6ZVBvaW50cyhfc3RhcnRQb2ludCwgdG91Y2hMaXN0WzBdKTtcblx0XHR9XHRcdFx0XHRcblxuXG5cdFx0Ly8gcG9pbnRlciBoYXNuJ3QgbW92ZWQsIHNlbmQgXCJ0YXAgcmVsZWFzZVwiIHBvaW50XG5cdFx0aWYobnVtUG9pbnRzID09PSAwICYmICFfZGlyZWN0aW9uICYmICFfbWFpblNjcm9sbEFuaW1hdGluZykge1xuXHRcdFx0aWYoIXJlbGVhc2VQb2ludCkge1xuXHRcdFx0XHRpZihlLnR5cGUgPT09ICdtb3VzZXVwJykge1xuXHRcdFx0XHRcdHJlbGVhc2VQb2ludCA9IHt4OiBlLnBhZ2VYLCB5OiBlLnBhZ2VZLCB0eXBlOidtb3VzZSd9O1xuXHRcdFx0XHR9IGVsc2UgaWYoZS5jaGFuZ2VkVG91Y2hlcyAmJiBlLmNoYW5nZWRUb3VjaGVzWzBdKSB7XG5cdFx0XHRcdFx0cmVsZWFzZVBvaW50ID0ge3g6IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVgsIHk6IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVksIHR5cGU6J3RvdWNoJ307XG5cdFx0XHRcdH1cdFx0XG5cdFx0XHR9XG5cblx0XHRcdF9zaG91dCgndG91Y2hSZWxlYXNlJywgZSwgcmVsZWFzZVBvaW50KTtcblx0XHR9XG5cblx0XHQvLyBEaWZmZXJlbmNlIGluIHRpbWUgYmV0d2VlbiByZWxlYXNpbmcgb2YgdHdvIGxhc3QgdG91Y2ggcG9pbnRzICh6b29tIGdlc3R1cmUpXG5cdFx0dmFyIHJlbGVhc2VUaW1lRGlmZiA9IC0xO1xuXG5cdFx0Ly8gR2VzdHVyZSBjb21wbGV0ZWQsIG5vIHBvaW50ZXJzIGxlZnRcblx0XHRpZihudW1Qb2ludHMgPT09IDApIHtcblx0XHRcdF9pc0RyYWdnaW5nID0gZmFsc2U7XG5cdFx0XHRmcmFtZXdvcmsudW5iaW5kKHdpbmRvdywgX3VwTW92ZUV2ZW50cywgc2VsZik7XG5cblx0XHRcdF9zdG9wRHJhZ1VwZGF0ZUxvb3AoKTtcblxuXHRcdFx0aWYoX2lzWm9vbWluZykge1xuXHRcdFx0XHQvLyBUd28gcG9pbnRzIHJlbGVhc2VkIGF0IHRoZSBzYW1lIHRpbWVcblx0XHRcdFx0cmVsZWFzZVRpbWVEaWZmID0gMDtcblx0XHRcdH0gZWxzZSBpZihfbGFzdFJlbGVhc2VUaW1lICE9PSAtMSkge1xuXHRcdFx0XHRyZWxlYXNlVGltZURpZmYgPSBfZ2V0Q3VycmVudFRpbWUoKSAtIF9sYXN0UmVsZWFzZVRpbWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdF9sYXN0UmVsZWFzZVRpbWUgPSBudW1Qb2ludHMgPT09IDEgPyBfZ2V0Q3VycmVudFRpbWUoKSA6IC0xO1xuXHRcdFxuXHRcdGlmKHJlbGVhc2VUaW1lRGlmZiAhPT0gLTEgJiYgcmVsZWFzZVRpbWVEaWZmIDwgMTUwKSB7XG5cdFx0XHRnZXN0dXJlVHlwZSA9ICd6b29tJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0Z2VzdHVyZVR5cGUgPSAnc3dpcGUnO1xuXHRcdH1cblxuXHRcdGlmKF9pc1pvb21pbmcgJiYgbnVtUG9pbnRzIDwgMikge1xuXHRcdFx0X2lzWm9vbWluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBPbmx5IHNlY29uZCBwb2ludCByZWxlYXNlZFxuXHRcdFx0aWYobnVtUG9pbnRzID09PSAxKSB7XG5cdFx0XHRcdGdlc3R1cmVUeXBlID0gJ3pvb21Qb2ludGVyVXAnO1xuXHRcdFx0fVxuXHRcdFx0X3Nob3V0KCd6b29tR2VzdHVyZUVuZGVkJyk7XG5cdFx0fVxuXG5cdFx0X2N1cnJlbnRQb2ludHMgPSBudWxsO1xuXHRcdGlmKCFfbW92ZWQgJiYgIV96b29tU3RhcnRlZCAmJiAhX21haW5TY3JvbGxBbmltYXRpbmcgJiYgIV92ZXJ0aWNhbERyYWdJbml0aWF0ZWQpIHtcblx0XHRcdC8vIG5vdGhpbmcgdG8gYW5pbWF0ZVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XG5cdFx0X3N0b3BBbGxBbmltYXRpb25zKCk7XG5cblx0XHRcblx0XHRpZighX3JlbGVhc2VBbmltRGF0YSkge1xuXHRcdFx0X3JlbGVhc2VBbmltRGF0YSA9IF9pbml0RHJhZ1JlbGVhc2VBbmltYXRpb25EYXRhKCk7XG5cdFx0fVxuXHRcdFxuXHRcdF9yZWxlYXNlQW5pbURhdGEuY2FsY3VsYXRlU3dpcGVTcGVlZCgneCcpO1xuXG5cblx0XHRpZihfdmVydGljYWxEcmFnSW5pdGlhdGVkKSB7XG5cblx0XHRcdHZhciBvcGFjaXR5UmF0aW8gPSBfY2FsY3VsYXRlVmVydGljYWxEcmFnT3BhY2l0eVJhdGlvKCk7XG5cblx0XHRcdGlmKG9wYWNpdHlSYXRpbyA8IF9vcHRpb25zLnZlcnRpY2FsRHJhZ1JhbmdlKSB7XG5cdFx0XHRcdHNlbGYuY2xvc2UoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBpbml0YWxQYW5ZID0gX3Bhbk9mZnNldC55LFxuXHRcdFx0XHRcdGluaXRpYWxCZ09wYWNpdHkgPSBfYmdPcGFjaXR5O1xuXG5cdFx0XHRcdF9hbmltYXRlUHJvcCgndmVydGljYWxEcmFnJywgMCwgMSwgMzAwLCBmcmFtZXdvcmsuZWFzaW5nLmN1YmljLm91dCwgZnVuY3Rpb24obm93KSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0X3Bhbk9mZnNldC55ID0gKHNlbGYuY3Vyckl0ZW0uaW5pdGlhbFBvc2l0aW9uLnkgLSBpbml0YWxQYW5ZKSAqIG5vdyArIGluaXRhbFBhblk7XG5cblx0XHRcdFx0XHRfYXBwbHlCZ09wYWNpdHkoICAoMSAtIGluaXRpYWxCZ09wYWNpdHkpICogbm93ICsgaW5pdGlhbEJnT3BhY2l0eSApO1xuXHRcdFx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdF9zaG91dCgnb25WZXJ0aWNhbERyYWcnLCAxKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXG5cdFx0Ly8gbWFpbiBzY3JvbGwgXG5cdFx0aWYoICAoX21haW5TY3JvbGxTaGlmdGVkIHx8IF9tYWluU2Nyb2xsQW5pbWF0aW5nKSAmJiBudW1Qb2ludHMgPT09IDApIHtcblx0XHRcdHZhciBpdGVtQ2hhbmdlZCA9IF9maW5pc2hTd2lwZU1haW5TY3JvbGxHZXN0dXJlKGdlc3R1cmVUeXBlLCBfcmVsZWFzZUFuaW1EYXRhKTtcblx0XHRcdGlmKGl0ZW1DaGFuZ2VkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGdlc3R1cmVUeXBlID0gJ3pvb21Qb2ludGVyVXAnO1xuXHRcdH1cblxuXHRcdC8vIHByZXZlbnQgem9vbS9wYW4gYW5pbWF0aW9uIHdoZW4gbWFpbiBzY3JvbGwgYW5pbWF0aW9uIHJ1bnNcblx0XHRpZihfbWFpblNjcm9sbEFuaW1hdGluZykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0XHQvLyBDb21wbGV0ZSBzaW1wbGUgem9vbSBnZXN0dXJlIChyZXNldCB6b29tIGxldmVsIGlmIGl0J3Mgb3V0IG9mIHRoZSBib3VuZHMpICBcblx0XHRpZihnZXN0dXJlVHlwZSAhPT0gJ3N3aXBlJykge1xuXHRcdFx0X2NvbXBsZXRlWm9vbUdlc3R1cmUoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdC8vIENvbXBsZXRlIHBhbiBnZXN0dXJlIGlmIG1haW4gc2Nyb2xsIGlzIG5vdCBzaGlmdGVkLCBhbmQgaXQncyBwb3NzaWJsZSB0byBwYW4gY3VycmVudCBpbWFnZVxuXHRcdGlmKCFfbWFpblNjcm9sbFNoaWZ0ZWQgJiYgX2N1cnJab29tTGV2ZWwgPiBzZWxmLmN1cnJJdGVtLmZpdFJhdGlvKSB7XG5cdFx0XHRfY29tcGxldGVQYW5HZXN0dXJlKF9yZWxlYXNlQW5pbURhdGEpO1xuXHRcdH1cblx0fSxcblxuXG5cdC8vIFJldHVybnMgb2JqZWN0IHdpdGggZGF0YSBhYm91dCBnZXN0dXJlXG5cdC8vIEl0J3MgY3JlYXRlZCBvbmx5IG9uY2UgYW5kIHRoZW4gcmV1c2VkXG5cdF9pbml0RHJhZ1JlbGVhc2VBbmltYXRpb25EYXRhICA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIHRlbXAgbG9jYWwgdmFyc1xuXHRcdHZhciBsYXN0RmxpY2tEdXJhdGlvbixcblx0XHRcdHRlbXBSZWxlYXNlUG9zO1xuXG5cdFx0Ly8gcyA9IHRoaXNcblx0XHR2YXIgcyA9IHtcblx0XHRcdGxhc3RGbGlja09mZnNldDoge30sXG5cdFx0XHRsYXN0RmxpY2tEaXN0OiB7fSxcblx0XHRcdGxhc3RGbGlja1NwZWVkOiB7fSxcblx0XHRcdHNsb3dEb3duUmF0aW86ICB7fSxcblx0XHRcdHNsb3dEb3duUmF0aW9SZXZlcnNlOiAge30sXG5cdFx0XHRzcGVlZERlY2VsZXJhdGlvblJhdGlvOiAge30sXG5cdFx0XHRzcGVlZERlY2VsZXJhdGlvblJhdGlvQWJzOiAge30sXG5cdFx0XHRkaXN0YW5jZU9mZnNldDogIHt9LFxuXHRcdFx0YmFja0FuaW1EZXN0aW5hdGlvbjoge30sXG5cdFx0XHRiYWNrQW5pbVN0YXJ0ZWQ6IHt9LFxuXHRcdFx0Y2FsY3VsYXRlU3dpcGVTcGVlZDogZnVuY3Rpb24oYXhpcykge1xuXHRcdFx0XHRcblxuXHRcdFx0XHRpZiggX3Bvc1BvaW50cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0bGFzdEZsaWNrRHVyYXRpb24gPSBfZ2V0Q3VycmVudFRpbWUoKSAtIF9nZXN0dXJlQ2hlY2tTcGVlZFRpbWUgKyA1MDtcblx0XHRcdFx0XHR0ZW1wUmVsZWFzZVBvcyA9IF9wb3NQb2ludHNbX3Bvc1BvaW50cy5sZW5ndGgtMl1bYXhpc107XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGFzdEZsaWNrRHVyYXRpb24gPSBfZ2V0Q3VycmVudFRpbWUoKSAtIF9nZXN0dXJlU3RhcnRUaW1lOyAvLyB0b3RhbCBnZXN0dXJlIGR1cmF0aW9uXG5cdFx0XHRcdFx0dGVtcFJlbGVhc2VQb3MgPSBfc3RhcnRQb2ludFtheGlzXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzLmxhc3RGbGlja09mZnNldFtheGlzXSA9IF9jdXJyUG9pbnRbYXhpc10gLSB0ZW1wUmVsZWFzZVBvcztcblx0XHRcdFx0cy5sYXN0RmxpY2tEaXN0W2F4aXNdID0gTWF0aC5hYnMocy5sYXN0RmxpY2tPZmZzZXRbYXhpc10pO1xuXHRcdFx0XHRpZihzLmxhc3RGbGlja0Rpc3RbYXhpc10gPiAyMCkge1xuXHRcdFx0XHRcdHMubGFzdEZsaWNrU3BlZWRbYXhpc10gPSBzLmxhc3RGbGlja09mZnNldFtheGlzXSAvIGxhc3RGbGlja0R1cmF0aW9uO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHMubGFzdEZsaWNrU3BlZWRbYXhpc10gPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKCBNYXRoLmFicyhzLmxhc3RGbGlja1NwZWVkW2F4aXNdKSA8IDAuMSApIHtcblx0XHRcdFx0XHRzLmxhc3RGbGlja1NwZWVkW2F4aXNdID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0cy5zbG93RG93blJhdGlvW2F4aXNdID0gMC45NTtcblx0XHRcdFx0cy5zbG93RG93blJhdGlvUmV2ZXJzZVtheGlzXSA9IDEgLSBzLnNsb3dEb3duUmF0aW9bYXhpc107XG5cdFx0XHRcdHMuc3BlZWREZWNlbGVyYXRpb25SYXRpb1theGlzXSA9IDE7XG5cdFx0XHR9LFxuXG5cdFx0XHRjYWxjdWxhdGVPdmVyQm91bmRzQW5pbU9mZnNldDogZnVuY3Rpb24oYXhpcywgc3BlZWQpIHtcblx0XHRcdFx0aWYoIXMuYmFja0FuaW1TdGFydGVkW2F4aXNdKSB7XG5cblx0XHRcdFx0XHRpZihfcGFuT2Zmc2V0W2F4aXNdID4gX2N1cnJQYW5Cb3VuZHMubWluW2F4aXNdKSB7XG5cdFx0XHRcdFx0XHRzLmJhY2tBbmltRGVzdGluYXRpb25bYXhpc10gPSBfY3VyclBhbkJvdW5kcy5taW5bYXhpc107XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHR9IGVsc2UgaWYoX3Bhbk9mZnNldFtheGlzXSA8IF9jdXJyUGFuQm91bmRzLm1heFtheGlzXSkge1xuXHRcdFx0XHRcdFx0cy5iYWNrQW5pbURlc3RpbmF0aW9uW2F4aXNdID0gX2N1cnJQYW5Cb3VuZHMubWF4W2F4aXNdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKHMuYmFja0FuaW1EZXN0aW5hdGlvbltheGlzXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRzLnNsb3dEb3duUmF0aW9bYXhpc10gPSAwLjc7XG5cdFx0XHRcdFx0XHRzLnNsb3dEb3duUmF0aW9SZXZlcnNlW2F4aXNdID0gMSAtIHMuc2xvd0Rvd25SYXRpb1theGlzXTtcblx0XHRcdFx0XHRcdGlmKHMuc3BlZWREZWNlbGVyYXRpb25SYXRpb0Fic1theGlzXSA8IDAuMDUpIHtcblxuXHRcdFx0XHRcdFx0XHRzLmxhc3RGbGlja1NwZWVkW2F4aXNdID0gMDtcblx0XHRcdFx0XHRcdFx0cy5iYWNrQW5pbVN0YXJ0ZWRbYXhpc10gPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdF9hbmltYXRlUHJvcCgnYm91bmNlWm9vbVBhbicrYXhpcyxfcGFuT2Zmc2V0W2F4aXNdLCBcblx0XHRcdFx0XHRcdFx0XHRzLmJhY2tBbmltRGVzdGluYXRpb25bYXhpc10sIFxuXHRcdFx0XHRcdFx0XHRcdHNwZWVkIHx8IDMwMCwgXG5cdFx0XHRcdFx0XHRcdFx0ZnJhbWV3b3JrLmVhc2luZy5zaW5lLm91dCwgXG5cdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24ocG9zKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRfcGFuT2Zmc2V0W2F4aXNdID0gcG9zO1xuXHRcdFx0XHRcdFx0XHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlZHVjZXMgdGhlIHNwZWVkIGJ5IHNsb3dEb3duUmF0aW8gKHBlciAxMG1zKVxuXHRcdFx0Y2FsY3VsYXRlQW5pbU9mZnNldDogZnVuY3Rpb24oYXhpcykge1xuXHRcdFx0XHRpZighcy5iYWNrQW5pbVN0YXJ0ZWRbYXhpc10pIHtcblx0XHRcdFx0XHRzLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9bYXhpc10gPSBzLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9bYXhpc10gKiAocy5zbG93RG93blJhdGlvW2F4aXNdICsgXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzLnNsb3dEb3duUmF0aW9SZXZlcnNlW2F4aXNdIC0gXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzLnNsb3dEb3duUmF0aW9SZXZlcnNlW2F4aXNdICogcy50aW1lRGlmZiAvIDEwKTtcblxuXHRcdFx0XHRcdHMuc3BlZWREZWNlbGVyYXRpb25SYXRpb0Fic1theGlzXSA9IE1hdGguYWJzKHMubGFzdEZsaWNrU3BlZWRbYXhpc10gKiBzLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9bYXhpc10pO1xuXHRcdFx0XHRcdHMuZGlzdGFuY2VPZmZzZXRbYXhpc10gPSBzLmxhc3RGbGlja1NwZWVkW2F4aXNdICogcy5zcGVlZERlY2VsZXJhdGlvblJhdGlvW2F4aXNdICogcy50aW1lRGlmZjtcblx0XHRcdFx0XHRfcGFuT2Zmc2V0W2F4aXNdICs9IHMuZGlzdGFuY2VPZmZzZXRbYXhpc107XG5cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0cGFuQW5pbUxvb3A6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIF9hbmltYXRpb25zLnpvb21QYW4gKSB7XG5cdFx0XHRcdFx0X2FuaW1hdGlvbnMuem9vbVBhbi5yYWYgPSBfcmVxdWVzdEFGKHMucGFuQW5pbUxvb3ApO1xuXG5cdFx0XHRcdFx0cy5ub3cgPSBfZ2V0Q3VycmVudFRpbWUoKTtcblx0XHRcdFx0XHRzLnRpbWVEaWZmID0gcy5ub3cgLSBzLmxhc3ROb3c7XG5cdFx0XHRcdFx0cy5sYXN0Tm93ID0gcy5ub3c7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0cy5jYWxjdWxhdGVBbmltT2Zmc2V0KCd4Jyk7XG5cdFx0XHRcdFx0cy5jYWxjdWxhdGVBbmltT2Zmc2V0KCd5Jyk7XG5cblx0XHRcdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHMuY2FsY3VsYXRlT3ZlckJvdW5kc0FuaW1PZmZzZXQoJ3gnKTtcblx0XHRcdFx0XHRzLmNhbGN1bGF0ZU92ZXJCb3VuZHNBbmltT2Zmc2V0KCd5Jyk7XG5cblxuXHRcdFx0XHRcdGlmIChzLnNwZWVkRGVjZWxlcmF0aW9uUmF0aW9BYnMueCA8IDAuMDUgJiYgcy5zcGVlZERlY2VsZXJhdGlvblJhdGlvQWJzLnkgPCAwLjA1KSB7XG5cblx0XHRcdFx0XHRcdC8vIHJvdW5kIHBhbiBwb3NpdGlvblxuXHRcdFx0XHRcdFx0X3Bhbk9mZnNldC54ID0gTWF0aC5yb3VuZChfcGFuT2Zmc2V0LngpO1xuXHRcdFx0XHRcdFx0X3Bhbk9mZnNldC55ID0gTWF0aC5yb3VuZChfcGFuT2Zmc2V0LnkpO1xuXHRcdFx0XHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0X3N0b3BBbmltYXRpb24oJ3pvb21QYW4nKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH07XG5cdFx0cmV0dXJuIHM7XG5cdH0sXG5cblx0X2NvbXBsZXRlUGFuR2VzdHVyZSA9IGZ1bmN0aW9uKGFuaW1EYXRhKSB7XG5cdFx0Ly8gY2FsY3VsYXRlIHN3aXBlIHNwZWVkIGZvciBZIGF4aXMgKHBhYW5uaW5nKVxuXHRcdGFuaW1EYXRhLmNhbGN1bGF0ZVN3aXBlU3BlZWQoJ3knKTtcblxuXHRcdF9jdXJyUGFuQm91bmRzID0gc2VsZi5jdXJySXRlbS5ib3VuZHM7XG5cdFx0XG5cdFx0YW5pbURhdGEuYmFja0FuaW1EZXN0aW5hdGlvbiA9IHt9O1xuXHRcdGFuaW1EYXRhLmJhY2tBbmltU3RhcnRlZCA9IHt9O1xuXG5cdFx0Ly8gQXZvaWQgYWNjZWxlcmF0aW9uIGFuaW1hdGlvbiBpZiBzcGVlZCBpcyB0b28gbG93XG5cdFx0aWYoTWF0aC5hYnMoYW5pbURhdGEubGFzdEZsaWNrU3BlZWQueCkgPD0gMC4wNSAmJiBNYXRoLmFicyhhbmltRGF0YS5sYXN0RmxpY2tTcGVlZC55KSA8PSAwLjA1ICkge1xuXHRcdFx0YW5pbURhdGEuc3BlZWREZWNlbGVyYXRpb25SYXRpb0Ficy54ID0gYW5pbURhdGEuc3BlZWREZWNlbGVyYXRpb25SYXRpb0Ficy55ID0gMDtcblxuXHRcdFx0Ly8gUnVuIHBhbiBkcmFnIHJlbGVhc2UgYW5pbWF0aW9uLiBFLmcuIGlmIHlvdSBkcmFnIGltYWdlIGFuZCByZWxlYXNlIGZpbmdlciB3aXRob3V0IG1vbWVudHVtLlxuXHRcdFx0YW5pbURhdGEuY2FsY3VsYXRlT3ZlckJvdW5kc0FuaW1PZmZzZXQoJ3gnKTtcblx0XHRcdGFuaW1EYXRhLmNhbGN1bGF0ZU92ZXJCb3VuZHNBbmltT2Zmc2V0KCd5Jyk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBBbmltYXRpb24gbG9vcCB0aGF0IGNvbnRyb2xzIHRoZSBhY2NlbGVyYXRpb24gYWZ0ZXIgcGFuIGdlc3R1cmUgZW5kc1xuXHRcdF9yZWdpc3RlclN0YXJ0QW5pbWF0aW9uKCd6b29tUGFuJyk7XG5cdFx0YW5pbURhdGEubGFzdE5vdyA9IF9nZXRDdXJyZW50VGltZSgpO1xuXHRcdGFuaW1EYXRhLnBhbkFuaW1Mb29wKCk7XG5cdH0sXG5cblxuXHRfZmluaXNoU3dpcGVNYWluU2Nyb2xsR2VzdHVyZSA9IGZ1bmN0aW9uKGdlc3R1cmVUeXBlLCBfcmVsZWFzZUFuaW1EYXRhKSB7XG5cdFx0dmFyIGl0ZW1DaGFuZ2VkO1xuXHRcdGlmKCFfbWFpblNjcm9sbEFuaW1hdGluZykge1xuXHRcdFx0X2N1cnJab29tZWRJdGVtSW5kZXggPSBfY3VycmVudEl0ZW1JbmRleDtcblx0XHR9XG5cblxuXHRcdFxuXHRcdHZhciBpdGVtc0RpZmY7XG5cblx0XHRpZihnZXN0dXJlVHlwZSA9PT0gJ3N3aXBlJykge1xuXHRcdFx0dmFyIHRvdGFsU2hpZnREaXN0ID0gX2N1cnJQb2ludC54IC0gX3N0YXJ0UG9pbnQueCxcblx0XHRcdFx0aXNGYXN0TGFzdEZsaWNrID0gX3JlbGVhc2VBbmltRGF0YS5sYXN0RmxpY2tEaXN0LnggPCAxMDtcblxuXHRcdFx0Ly8gaWYgY29udGFpbmVyIGlzIHNoaWZ0ZWQgZm9yIG1vcmUgdGhhbiBNSU5fU1dJUEVfRElTVEFOQ0UsIFxuXHRcdFx0Ly8gYW5kIGxhc3QgZmxpY2sgZ2VzdHVyZSB3YXMgaW4gcmlnaHQgZGlyZWN0aW9uXG5cdFx0XHRpZih0b3RhbFNoaWZ0RGlzdCA+IE1JTl9TV0lQRV9ESVNUQU5DRSAmJiBcblx0XHRcdFx0KGlzRmFzdExhc3RGbGljayB8fCBfcmVsZWFzZUFuaW1EYXRhLmxhc3RGbGlja09mZnNldC54ID4gMjApICkge1xuXHRcdFx0XHQvLyBnbyB0byBwcmV2IGl0ZW1cblx0XHRcdFx0aXRlbXNEaWZmID0gLTE7XG5cdFx0XHR9IGVsc2UgaWYodG90YWxTaGlmdERpc3QgPCAtTUlOX1NXSVBFX0RJU1RBTkNFICYmIFxuXHRcdFx0XHQoaXNGYXN0TGFzdEZsaWNrIHx8IF9yZWxlYXNlQW5pbURhdGEubGFzdEZsaWNrT2Zmc2V0LnggPCAtMjApICkge1xuXHRcdFx0XHQvLyBnbyB0byBuZXh0IGl0ZW1cblx0XHRcdFx0aXRlbXNEaWZmID0gMTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgbmV4dENpcmNsZTtcblxuXHRcdGlmKGl0ZW1zRGlmZikge1xuXHRcdFx0XG5cdFx0XHRfY3VycmVudEl0ZW1JbmRleCArPSBpdGVtc0RpZmY7XG5cblx0XHRcdGlmKF9jdXJyZW50SXRlbUluZGV4IDwgMCkge1xuXHRcdFx0XHRfY3VycmVudEl0ZW1JbmRleCA9IF9vcHRpb25zLmxvb3AgPyBfZ2V0TnVtSXRlbXMoKS0xIDogMDtcblx0XHRcdFx0bmV4dENpcmNsZSA9IHRydWU7XG5cdFx0XHR9IGVsc2UgaWYoX2N1cnJlbnRJdGVtSW5kZXggPj0gX2dldE51bUl0ZW1zKCkpIHtcblx0XHRcdFx0X2N1cnJlbnRJdGVtSW5kZXggPSBfb3B0aW9ucy5sb29wID8gMCA6IF9nZXROdW1JdGVtcygpLTE7XG5cdFx0XHRcdG5leHRDaXJjbGUgPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighbmV4dENpcmNsZSB8fCBfb3B0aW9ucy5sb29wKSB7XG5cdFx0XHRcdF9pbmRleERpZmYgKz0gaXRlbXNEaWZmO1xuXHRcdFx0XHRfY3VyclBvc2l0aW9uSW5kZXggLT0gaXRlbXNEaWZmO1xuXHRcdFx0XHRpdGVtQ2hhbmdlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRcblxuXHRcdFx0XG5cdFx0fVxuXG5cdFx0dmFyIGFuaW1hdGVUb1ggPSBfc2xpZGVTaXplLnggKiBfY3VyclBvc2l0aW9uSW5kZXg7XG5cdFx0dmFyIGFuaW1hdGVUb0Rpc3QgPSBNYXRoLmFicyggYW5pbWF0ZVRvWCAtIF9tYWluU2Nyb2xsUG9zLnggKTtcblx0XHR2YXIgZmluaXNoQW5pbUR1cmF0aW9uO1xuXG5cblx0XHRpZighaXRlbUNoYW5nZWQgJiYgYW5pbWF0ZVRvWCA+IF9tYWluU2Nyb2xsUG9zLnggIT09IF9yZWxlYXNlQW5pbURhdGEubGFzdEZsaWNrU3BlZWQueCA+IDApIHtcblx0XHRcdC8vIFwicmV0dXJuIHRvIGN1cnJlbnRcIiBkdXJhdGlvbiwgZS5nLiB3aGVuIGRyYWdnaW5nIGZyb20gc2xpZGUgMCB0byAtMVxuXHRcdFx0ZmluaXNoQW5pbUR1cmF0aW9uID0gMzMzOyBcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZmluaXNoQW5pbUR1cmF0aW9uID0gTWF0aC5hYnMoX3JlbGVhc2VBbmltRGF0YS5sYXN0RmxpY2tTcGVlZC54KSA+IDAgPyBcblx0XHRcdFx0XHRcdFx0XHRcdGFuaW1hdGVUb0Rpc3QgLyBNYXRoLmFicyhfcmVsZWFzZUFuaW1EYXRhLmxhc3RGbGlja1NwZWVkLngpIDogXG5cdFx0XHRcdFx0XHRcdFx0XHQzMzM7XG5cblx0XHRcdGZpbmlzaEFuaW1EdXJhdGlvbiA9IE1hdGgubWluKGZpbmlzaEFuaW1EdXJhdGlvbiwgNDAwKTtcblx0XHRcdGZpbmlzaEFuaW1EdXJhdGlvbiA9IE1hdGgubWF4KGZpbmlzaEFuaW1EdXJhdGlvbiwgMjUwKTtcblx0XHR9XG5cblx0XHRpZihfY3Vyclpvb21lZEl0ZW1JbmRleCA9PT0gX2N1cnJlbnRJdGVtSW5kZXgpIHtcblx0XHRcdGl0ZW1DaGFuZ2VkID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXHRcdF9tYWluU2Nyb2xsQW5pbWF0aW5nID0gdHJ1ZTtcblx0XHRcblx0XHRfc2hvdXQoJ21haW5TY3JvbGxBbmltU3RhcnQnKTtcblxuXHRcdF9hbmltYXRlUHJvcCgnbWFpblNjcm9sbCcsIF9tYWluU2Nyb2xsUG9zLngsIGFuaW1hdGVUb1gsIGZpbmlzaEFuaW1EdXJhdGlvbiwgZnJhbWV3b3JrLmVhc2luZy5jdWJpYy5vdXQsIFxuXHRcdFx0X21vdmVNYWluU2Nyb2xsLFxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9zdG9wQWxsQW5pbWF0aW9ucygpO1xuXHRcdFx0XHRfbWFpblNjcm9sbEFuaW1hdGluZyA9IGZhbHNlO1xuXHRcdFx0XHRfY3Vyclpvb21lZEl0ZW1JbmRleCA9IC0xO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYoaXRlbUNoYW5nZWQgfHwgX2N1cnJab29tZWRJdGVtSW5kZXggIT09IF9jdXJyZW50SXRlbUluZGV4KSB7XG5cdFx0XHRcdFx0c2VsZi51cGRhdGVDdXJySXRlbSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRfc2hvdXQoJ21haW5TY3JvbGxBbmltQ29tcGxldGUnKTtcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0aWYoaXRlbUNoYW5nZWQpIHtcblx0XHRcdHNlbGYudXBkYXRlQ3Vyckl0ZW0odHJ1ZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGl0ZW1DaGFuZ2VkO1xuXHR9LFxuXG5cdF9jYWxjdWxhdGVab29tTGV2ZWwgPSBmdW5jdGlvbih0b3VjaGVzRGlzdGFuY2UpIHtcblx0XHRyZXR1cm4gIDEgLyBfc3RhcnRQb2ludHNEaXN0YW5jZSAqIHRvdWNoZXNEaXN0YW5jZSAqIF9zdGFydFpvb21MZXZlbDtcblx0fSxcblxuXHQvLyBSZXNldHMgem9vbSBpZiBpdCdzIG91dCBvZiBib3VuZHNcblx0X2NvbXBsZXRlWm9vbUdlc3R1cmUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZGVzdFpvb21MZXZlbCA9IF9jdXJyWm9vbUxldmVsLFxuXHRcdFx0bWluWm9vbUxldmVsID0gX2dldE1pblpvb21MZXZlbCgpLFxuXHRcdFx0bWF4Wm9vbUxldmVsID0gX2dldE1heFpvb21MZXZlbCgpO1xuXG5cdFx0aWYgKCBfY3Vyclpvb21MZXZlbCA8IG1pblpvb21MZXZlbCApIHtcblx0XHRcdGRlc3Rab29tTGV2ZWwgPSBtaW5ab29tTGV2ZWw7XG5cdFx0fSBlbHNlIGlmICggX2N1cnJab29tTGV2ZWwgPiBtYXhab29tTGV2ZWwgKSB7XG5cdFx0XHRkZXN0Wm9vbUxldmVsID0gbWF4Wm9vbUxldmVsO1xuXHRcdH1cblxuXHRcdHZhciBkZXN0T3BhY2l0eSA9IDEsXG5cdFx0XHRvblVwZGF0ZSxcblx0XHRcdGluaXRpYWxPcGFjaXR5ID0gX2JnT3BhY2l0eTtcblxuXHRcdGlmKF9vcGFjaXR5Q2hhbmdlZCAmJiAhX2lzWm9vbWluZ0luICYmICFfd2FzT3ZlckluaXRpYWxab29tICYmIF9jdXJyWm9vbUxldmVsIDwgbWluWm9vbUxldmVsKSB7XG5cdFx0XHQvL19jbG9zZWRCeVNjcm9sbCA9IHRydWU7XG5cdFx0XHRzZWxmLmNsb3NlKCk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZihfb3BhY2l0eUNoYW5nZWQpIHtcblx0XHRcdG9uVXBkYXRlID0gZnVuY3Rpb24obm93KSB7XG5cdFx0XHRcdF9hcHBseUJnT3BhY2l0eSggIChkZXN0T3BhY2l0eSAtIGluaXRpYWxPcGFjaXR5KSAqIG5vdyArIGluaXRpYWxPcGFjaXR5ICk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHNlbGYuem9vbVRvKGRlc3Rab29tTGV2ZWwsIDAsIDIwMCwgIGZyYW1ld29yay5lYXNpbmcuY3ViaWMub3V0LCBvblVwZGF0ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblxuX3JlZ2lzdGVyTW9kdWxlKCdHZXN0dXJlcycsIHtcblx0cHVibGljTWV0aG9kczoge1xuXG5cdFx0aW5pdEdlc3R1cmVzOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gaGVscGVyIGZ1bmN0aW9uIHRoYXQgYnVpbGRzIHRvdWNoL3BvaW50ZXIvbW91c2UgZXZlbnRzXG5cdFx0XHR2YXIgYWRkRXZlbnROYW1lcyA9IGZ1bmN0aW9uKHByZWYsIGRvd24sIG1vdmUsIHVwLCBjYW5jZWwpIHtcblx0XHRcdFx0X2RyYWdTdGFydEV2ZW50ID0gcHJlZiArIGRvd247XG5cdFx0XHRcdF9kcmFnTW92ZUV2ZW50ID0gcHJlZiArIG1vdmU7XG5cdFx0XHRcdF9kcmFnRW5kRXZlbnQgPSBwcmVmICsgdXA7XG5cdFx0XHRcdGlmKGNhbmNlbCkge1xuXHRcdFx0XHRcdF9kcmFnQ2FuY2VsRXZlbnQgPSBwcmVmICsgY2FuY2VsO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF9kcmFnQ2FuY2VsRXZlbnQgPSAnJztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0X3BvaW50ZXJFdmVudEVuYWJsZWQgPSBfZmVhdHVyZXMucG9pbnRlckV2ZW50O1xuXHRcdFx0aWYoX3BvaW50ZXJFdmVudEVuYWJsZWQgJiYgX2ZlYXR1cmVzLnRvdWNoKSB7XG5cdFx0XHRcdC8vIHdlIGRvbid0IG5lZWQgdG91Y2ggZXZlbnRzLCBpZiBicm93c2VyIHN1cHBvcnRzIHBvaW50ZXIgZXZlbnRzXG5cdFx0XHRcdF9mZWF0dXJlcy50b3VjaCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihfcG9pbnRlckV2ZW50RW5hYmxlZCkge1xuXHRcdFx0XHRpZihuYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQpIHtcblx0XHRcdFx0XHRhZGRFdmVudE5hbWVzKCdwb2ludGVyJywgJ2Rvd24nLCAnbW92ZScsICd1cCcsICdjYW5jZWwnKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBJRTEwIHBvaW50ZXIgZXZlbnRzIGFyZSBjYXNlLXNlbnNpdGl2ZVxuXHRcdFx0XHRcdGFkZEV2ZW50TmFtZXMoJ01TUG9pbnRlcicsICdEb3duJywgJ01vdmUnLCAnVXAnLCAnQ2FuY2VsJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZihfZmVhdHVyZXMudG91Y2gpIHtcblx0XHRcdFx0YWRkRXZlbnROYW1lcygndG91Y2gnLCAnc3RhcnQnLCAnbW92ZScsICdlbmQnLCAnY2FuY2VsJyk7XG5cdFx0XHRcdF9saWtlbHlUb3VjaERldmljZSA9IHRydWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhZGRFdmVudE5hbWVzKCdtb3VzZScsICdkb3duJywgJ21vdmUnLCAndXAnKTtcdFxuXHRcdFx0fVxuXG5cdFx0XHRfdXBNb3ZlRXZlbnRzID0gX2RyYWdNb3ZlRXZlbnQgKyAnICcgKyBfZHJhZ0VuZEV2ZW50ICArICcgJyArICBfZHJhZ0NhbmNlbEV2ZW50O1xuXHRcdFx0X2Rvd25FdmVudHMgPSBfZHJhZ1N0YXJ0RXZlbnQ7XG5cblx0XHRcdGlmKF9wb2ludGVyRXZlbnRFbmFibGVkICYmICFfbGlrZWx5VG91Y2hEZXZpY2UpIHtcblx0XHRcdFx0X2xpa2VseVRvdWNoRGV2aWNlID0gKG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDEpIHx8IChuYXZpZ2F0b3IubXNNYXhUb3VjaFBvaW50cyA+IDEpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gbWFrZSB2YXJpYWJsZSBwdWJsaWNcblx0XHRcdHNlbGYubGlrZWx5VG91Y2hEZXZpY2UgPSBfbGlrZWx5VG91Y2hEZXZpY2U7IFxuXHRcdFx0XG5cdFx0XHRfZ2xvYmFsRXZlbnRIYW5kbGVyc1tfZHJhZ1N0YXJ0RXZlbnRdID0gX29uRHJhZ1N0YXJ0O1xuXHRcdFx0X2dsb2JhbEV2ZW50SGFuZGxlcnNbX2RyYWdNb3ZlRXZlbnRdID0gX29uRHJhZ01vdmU7XG5cdFx0XHRfZ2xvYmFsRXZlbnRIYW5kbGVyc1tfZHJhZ0VuZEV2ZW50XSA9IF9vbkRyYWdSZWxlYXNlOyAvLyB0aGUgS3Jha2VuXG5cblx0XHRcdGlmKF9kcmFnQ2FuY2VsRXZlbnQpIHtcblx0XHRcdFx0X2dsb2JhbEV2ZW50SGFuZGxlcnNbX2RyYWdDYW5jZWxFdmVudF0gPSBfZ2xvYmFsRXZlbnRIYW5kbGVyc1tfZHJhZ0VuZEV2ZW50XTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQmluZCBtb3VzZSBldmVudHMgb24gZGV2aWNlIHdpdGggZGV0ZWN0ZWQgaGFyZHdhcmUgdG91Y2ggc3VwcG9ydCwgaW4gY2FzZSBpdCBzdXBwb3J0cyBtdWx0aXBsZSB0eXBlcyBvZiBpbnB1dC5cblx0XHRcdGlmKF9mZWF0dXJlcy50b3VjaCkge1xuXHRcdFx0XHRfZG93bkV2ZW50cyArPSAnIG1vdXNlZG93bic7XG5cdFx0XHRcdF91cE1vdmVFdmVudHMgKz0gJyBtb3VzZW1vdmUgbW91c2V1cCc7XG5cdFx0XHRcdF9nbG9iYWxFdmVudEhhbmRsZXJzLm1vdXNlZG93biA9IF9nbG9iYWxFdmVudEhhbmRsZXJzW19kcmFnU3RhcnRFdmVudF07XG5cdFx0XHRcdF9nbG9iYWxFdmVudEhhbmRsZXJzLm1vdXNlbW92ZSA9IF9nbG9iYWxFdmVudEhhbmRsZXJzW19kcmFnTW92ZUV2ZW50XTtcblx0XHRcdFx0X2dsb2JhbEV2ZW50SGFuZGxlcnMubW91c2V1cCA9IF9nbG9iYWxFdmVudEhhbmRsZXJzW19kcmFnRW5kRXZlbnRdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighX2xpa2VseVRvdWNoRGV2aWNlKSB7XG5cdFx0XHRcdC8vIGRvbid0IGFsbG93IHBhbiB0byBuZXh0IHNsaWRlIGZyb20gem9vbWVkIHN0YXRlIG9uIERlc2t0b3Bcblx0XHRcdFx0X29wdGlvbnMuYWxsb3dQYW5Ub05leHQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0fVxufSk7XG5cblxuLyo+Pmdlc3R1cmVzKi9cblxuLyo+PnNob3ctaGlkZS10cmFuc2l0aW9uKi9cbi8qKlxuICogc2hvdy1oaWRlLXRyYW5zaXRpb24uanM6XG4gKlxuICogTWFuYWdlcyBpbml0aWFsIG9wZW5pbmcgb3IgY2xvc2luZyB0cmFuc2l0aW9uLlxuICpcbiAqIElmIHlvdSdyZSBub3QgcGxhbm5pbmcgdG8gdXNlIHRyYW5zaXRpb24gZm9yIGdhbGxlcnkgYXQgYWxsLFxuICogeW91IG1heSBzZXQgb3B0aW9ucyBoaWRlQW5pbWF0aW9uRHVyYXRpb24gYW5kIHNob3dBbmltYXRpb25EdXJhdGlvbiB0byAwLFxuICogYW5kIGp1c3QgZGVsZXRlIHN0YXJ0QW5pbWF0aW9uIGZ1bmN0aW9uLlxuICogXG4gKi9cblxuXG52YXIgX3Nob3dPckhpZGVUaW1lb3V0LFxuXHRfc2hvd09ySGlkZSA9IGZ1bmN0aW9uKGl0ZW0sIGltZywgb3V0LCBjb21wbGV0ZUZuKSB7XG5cblx0XHRpZihfc2hvd09ySGlkZVRpbWVvdXQpIHtcblx0XHRcdGNsZWFyVGltZW91dChfc2hvd09ySGlkZVRpbWVvdXQpO1xuXHRcdH1cblxuXHRcdF9pbml0aWFsWm9vbVJ1bm5pbmcgPSB0cnVlO1xuXHRcdF9pbml0aWFsQ29udGVudFNldCA9IHRydWU7XG5cdFx0XG5cdFx0Ly8gZGltZW5zaW9ucyBvZiBzbWFsbCB0aHVtYm5haWwge3g6LHk6LHc6fS5cblx0XHQvLyBIZWlnaHQgaXMgb3B0aW9uYWwsIGFzIGNhbGN1bGF0ZWQgYmFzZWQgb24gbGFyZ2UgaW1hZ2UuXG5cdFx0dmFyIHRodW1iQm91bmRzOyBcblx0XHRpZihpdGVtLmluaXRpYWxMYXlvdXQpIHtcblx0XHRcdHRodW1iQm91bmRzID0gaXRlbS5pbml0aWFsTGF5b3V0O1xuXHRcdFx0aXRlbS5pbml0aWFsTGF5b3V0ID0gbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGh1bWJCb3VuZHMgPSBfb3B0aW9ucy5nZXRUaHVtYkJvdW5kc0ZuICYmIF9vcHRpb25zLmdldFRodW1iQm91bmRzRm4oX2N1cnJlbnRJdGVtSW5kZXgpO1xuXHRcdH1cblxuXHRcdHZhciBkdXJhdGlvbiA9IG91dCA/IF9vcHRpb25zLmhpZGVBbmltYXRpb25EdXJhdGlvbiA6IF9vcHRpb25zLnNob3dBbmltYXRpb25EdXJhdGlvbjtcblxuXHRcdHZhciBvbkNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRfc3RvcEFuaW1hdGlvbignaW5pdGlhbFpvb20nKTtcblx0XHRcdGlmKCFvdXQpIHtcblx0XHRcdFx0X2FwcGx5QmdPcGFjaXR5KDEpO1xuXHRcdFx0XHRpZihpbWcpIHtcblx0XHRcdFx0XHRpbWcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKHRlbXBsYXRlLCAncHN3cC0tYW5pbWF0ZWQtaW4nKTtcblx0XHRcdFx0X3Nob3V0KCdpbml0aWFsWm9vbScgKyAob3V0ID8gJ091dEVuZCcgOiAnSW5FbmQnKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLnRlbXBsYXRlLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcblx0XHRcdFx0c2VsZi5iZy5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKGNvbXBsZXRlRm4pIHtcblx0XHRcdFx0Y29tcGxldGVGbigpO1xuXHRcdFx0fVxuXHRcdFx0X2luaXRpYWxab29tUnVubmluZyA9IGZhbHNlO1xuXHRcdH07XG5cblx0XHQvLyBpZiBib3VuZHMgYXJlbid0IHByb3ZpZGVkLCBqdXN0IG9wZW4gZ2FsbGVyeSB3aXRob3V0IGFuaW1hdGlvblxuXHRcdGlmKCFkdXJhdGlvbiB8fCAhdGh1bWJCb3VuZHMgfHwgdGh1bWJCb3VuZHMueCA9PT0gdW5kZWZpbmVkKSB7XG5cblx0XHRcdF9zaG91dCgnaW5pdGlhbFpvb20nICsgKG91dCA/ICdPdXQnIDogJ0luJykgKTtcblxuXHRcdFx0X2N1cnJab29tTGV2ZWwgPSBpdGVtLmluaXRpYWxab29tTGV2ZWw7XG5cdFx0XHRfZXF1YWxpemVQb2ludHMoX3Bhbk9mZnNldCwgIGl0ZW0uaW5pdGlhbFBvc2l0aW9uICk7XG5cdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXG5cdFx0XHR0ZW1wbGF0ZS5zdHlsZS5vcGFjaXR5ID0gb3V0ID8gMCA6IDE7XG5cdFx0XHRfYXBwbHlCZ09wYWNpdHkoMSk7XG5cblx0XHRcdGlmKGR1cmF0aW9uKSB7XG5cdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0b25Db21wbGV0ZSgpO1xuXHRcdFx0XHR9LCBkdXJhdGlvbik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvbkNvbXBsZXRlKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgc3RhcnRBbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbG9zZVdpdGhSYWYgPSBfY2xvc2VkQnlTY3JvbGwsXG5cdFx0XHRcdGZhZGVFdmVyeXRoaW5nID0gIXNlbGYuY3Vyckl0ZW0uc3JjIHx8IHNlbGYuY3Vyckl0ZW0ubG9hZEVycm9yIHx8IF9vcHRpb25zLnNob3dIaWRlT3BhY2l0eTtcblx0XHRcdFxuXHRcdFx0Ly8gYXBwbHkgaHctYWNjZWxlcmF0aW9uIHRvIGltYWdlXG5cdFx0XHRpZihpdGVtLm1pbmlJbWcpIHtcblx0XHRcdFx0aXRlbS5taW5pSW1nLnN0eWxlLndlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighb3V0KSB7XG5cdFx0XHRcdF9jdXJyWm9vbUxldmVsID0gdGh1bWJCb3VuZHMudyAvIGl0ZW0udztcblx0XHRcdFx0X3Bhbk9mZnNldC54ID0gdGh1bWJCb3VuZHMueDtcblx0XHRcdFx0X3Bhbk9mZnNldC55ID0gdGh1bWJCb3VuZHMueSAtIF9pbml0YWxXaW5kb3dTY3JvbGxZO1xuXG5cdFx0XHRcdHNlbGZbZmFkZUV2ZXJ5dGhpbmcgPyAndGVtcGxhdGUnIDogJ2JnJ10uc3R5bGUub3BhY2l0eSA9IDAuMDAxO1xuXHRcdFx0XHRfYXBwbHlDdXJyZW50Wm9vbVBhbigpO1xuXHRcdFx0fVxuXG5cdFx0XHRfcmVnaXN0ZXJTdGFydEFuaW1hdGlvbignaW5pdGlhbFpvb20nKTtcblx0XHRcdFxuXHRcdFx0aWYob3V0ICYmICFjbG9zZVdpdGhSYWYpIHtcblx0XHRcdFx0ZnJhbWV3b3JrLnJlbW92ZUNsYXNzKHRlbXBsYXRlLCAncHN3cC0tYW5pbWF0ZWQtaW4nKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoZmFkZUV2ZXJ5dGhpbmcpIHtcblx0XHRcdFx0aWYob3V0KSB7XG5cdFx0XHRcdFx0ZnJhbWV3b3JrWyAoY2xvc2VXaXRoUmFmID8gJ3JlbW92ZScgOiAnYWRkJykgKyAnQ2xhc3MnIF0odGVtcGxhdGUsICdwc3dwLS1hbmltYXRlX29wYWNpdHknKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKHRlbXBsYXRlLCAncHN3cC0tYW5pbWF0ZV9vcGFjaXR5Jyk7XG5cdFx0XHRcdFx0fSwgMzApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdF9zaG93T3JIaWRlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0X3Nob3V0KCdpbml0aWFsWm9vbScgKyAob3V0ID8gJ091dCcgOiAnSW4nKSApO1xuXHRcdFx0XHRcblxuXHRcdFx0XHRpZighb3V0KSB7XG5cblx0XHRcdFx0XHQvLyBcImluXCIgYW5pbWF0aW9uIGFsd2F5cyB1c2VzIENTUyB0cmFuc2l0aW9ucyAoaW5zdGVhZCBvZiByQUYpLlxuXHRcdFx0XHRcdC8vIENTUyB0cmFuc2l0aW9uIHdvcmsgZmFzdGVyIGhlcmUsIFxuXHRcdFx0XHRcdC8vIGFzIGRldmVsb3BlciBtYXkgYWxzbyB3YW50IHRvIGFuaW1hdGUgb3RoZXIgdGhpbmdzLCBcblx0XHRcdFx0XHQvLyBsaWtlIHVpIG9uIHRvcCBvZiBzbGlkaW5nIGFyZWEsIHdoaWNoIGNhbiBiZSBhbmltYXRlZCBqdXN0IHZpYSBDU1Ncblx0XHRcdFx0XHRcblx0XHRcdFx0XHRfY3Vyclpvb21MZXZlbCA9IGl0ZW0uaW5pdGlhbFpvb21MZXZlbDtcblx0XHRcdFx0XHRfZXF1YWxpemVQb2ludHMoX3Bhbk9mZnNldCwgIGl0ZW0uaW5pdGlhbFBvc2l0aW9uICk7XG5cdFx0XHRcdFx0X2FwcGx5Q3VycmVudFpvb21QYW4oKTtcblx0XHRcdFx0XHRfYXBwbHlCZ09wYWNpdHkoMSk7XG5cblx0XHRcdFx0XHRpZihmYWRlRXZlcnl0aGluZykge1xuXHRcdFx0XHRcdFx0dGVtcGxhdGUuc3R5bGUub3BhY2l0eSA9IDE7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdF9hcHBseUJnT3BhY2l0eSgxKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRfc2hvd09ySGlkZVRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uQ29tcGxldGUsIGR1cmF0aW9uICsgMjApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gXCJvdXRcIiBhbmltYXRpb24gdXNlcyByQUYgb25seSB3aGVuIFBob3RvU3dpcGUgaXMgY2xvc2VkIGJ5IGJyb3dzZXIgc2Nyb2xsLCB0byByZWNhbGN1bGF0ZSBwb3NpdGlvblxuXHRcdFx0XHRcdHZhciBkZXN0Wm9vbUxldmVsID0gdGh1bWJCb3VuZHMudyAvIGl0ZW0udyxcblx0XHRcdFx0XHRcdGluaXRpYWxQYW5PZmZzZXQgPSB7XG5cdFx0XHRcdFx0XHRcdHg6IF9wYW5PZmZzZXQueCxcblx0XHRcdFx0XHRcdFx0eTogX3Bhbk9mZnNldC55XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0aW5pdGlhbFpvb21MZXZlbCA9IF9jdXJyWm9vbUxldmVsLFxuXHRcdFx0XHRcdFx0aW5pdGFsQmdPcGFjaXR5ID0gX2JnT3BhY2l0eSxcblx0XHRcdFx0XHRcdG9uVXBkYXRlID0gZnVuY3Rpb24obm93KSB7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZihub3cgPT09IDEpIHtcblx0XHRcdFx0XHRcdFx0XHRfY3Vyclpvb21MZXZlbCA9IGRlc3Rab29tTGV2ZWw7XG5cdFx0XHRcdFx0XHRcdFx0X3Bhbk9mZnNldC54ID0gdGh1bWJCb3VuZHMueDtcblx0XHRcdFx0XHRcdFx0XHRfcGFuT2Zmc2V0LnkgPSB0aHVtYkJvdW5kcy55ICAtIF9jdXJyZW50V2luZG93U2Nyb2xsWTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRfY3Vyclpvb21MZXZlbCA9IChkZXN0Wm9vbUxldmVsIC0gaW5pdGlhbFpvb21MZXZlbCkgKiBub3cgKyBpbml0aWFsWm9vbUxldmVsO1xuXHRcdFx0XHRcdFx0XHRcdF9wYW5PZmZzZXQueCA9ICh0aHVtYkJvdW5kcy54IC0gaW5pdGlhbFBhbk9mZnNldC54KSAqIG5vdyArIGluaXRpYWxQYW5PZmZzZXQueDtcblx0XHRcdFx0XHRcdFx0XHRfcGFuT2Zmc2V0LnkgPSAodGh1bWJCb3VuZHMueSAtIF9jdXJyZW50V2luZG93U2Nyb2xsWSAtIGluaXRpYWxQYW5PZmZzZXQueSkgKiBub3cgKyBpbml0aWFsUGFuT2Zmc2V0Lnk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdF9hcHBseUN1cnJlbnRab29tUGFuKCk7XG5cdFx0XHRcdFx0XHRcdGlmKGZhZGVFdmVyeXRoaW5nKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGVtcGxhdGUuc3R5bGUub3BhY2l0eSA9IDEgLSBub3c7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0X2FwcGx5QmdPcGFjaXR5KCBpbml0YWxCZ09wYWNpdHkgLSBub3cgKiBpbml0YWxCZ09wYWNpdHkgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdGlmKGNsb3NlV2l0aFJhZikge1xuXHRcdFx0XHRcdFx0X2FuaW1hdGVQcm9wKCdpbml0aWFsWm9vbScsIDAsIDEsIGR1cmF0aW9uLCBmcmFtZXdvcmsuZWFzaW5nLmN1YmljLm91dCwgb25VcGRhdGUsIG9uQ29tcGxldGUpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRvblVwZGF0ZSgxKTtcblx0XHRcdFx0XHRcdF9zaG93T3JIaWRlVGltZW91dCA9IHNldFRpbWVvdXQob25Db21wbGV0ZSwgZHVyYXRpb24gKyAyMCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcblx0XHRcdH0sIG91dCA/IDI1IDogOTApOyAvLyBNYWluIHB1cnBvc2Ugb2YgdGhpcyBkZWxheSBpcyB0byBnaXZlIGJyb3dzZXIgdGltZSB0byBwYWludCBhbmRcblx0XHRcdFx0XHQvLyBjcmVhdGUgY29tcG9zaXRlIGxheWVycyBvZiBQaG90b1N3aXBlIFVJIHBhcnRzIChiYWNrZ3JvdW5kLCBjb250cm9scywgY2FwdGlvbiwgYXJyb3dzKS5cblx0XHRcdFx0XHQvLyBXaGljaCBhdm9pZHMgbGFnIGF0IHRoZSBiZWdpbm5pbmcgb2Ygc2NhbGUgdHJhbnNpdGlvbi5cblx0XHR9O1xuXHRcdHN0YXJ0QW5pbWF0aW9uKCk7XG5cblx0XHRcblx0fTtcblxuLyo+PnNob3ctaGlkZS10cmFuc2l0aW9uKi9cblxuLyo+Pml0ZW1zLWNvbnRyb2xsZXIqL1xuLyoqXG4qXG4qIENvbnRyb2xsZXIgbWFuYWdlcyBnYWxsZXJ5IGl0ZW1zLCB0aGVpciBkaW1lbnNpb25zLCBhbmQgdGhlaXIgY29udGVudC5cbiogXG4qL1xuXG52YXIgX2l0ZW1zLFxuXHRfdGVtcFBhbkFyZWFTaXplID0ge30sXG5cdF9pbWFnZXNUb0FwcGVuZFBvb2wgPSBbXSxcblx0X2luaXRpYWxDb250ZW50U2V0LFxuXHRfaW5pdGlhbFpvb21SdW5uaW5nLFxuXHRfY29udHJvbGxlckRlZmF1bHRPcHRpb25zID0ge1xuXHRcdGluZGV4OiAwLFxuXHRcdGVycm9yTXNnOiAnPGRpdiBjbGFzcz1cInBzd3BfX2Vycm9yLW1zZ1wiPjxhIGhyZWY9XCIldXJsJVwiIHRhcmdldD1cIl9ibGFua1wiPlRoZSBpbWFnZTwvYT4gY291bGQgbm90IGJlIGxvYWRlZC48L2Rpdj4nLFxuXHRcdGZvcmNlUHJvZ3Jlc3NpdmVMb2FkaW5nOiBmYWxzZSwgLy8gVE9ET1xuXHRcdHByZWxvYWQ6IFsxLDFdLFxuXHRcdGdldE51bUl0ZW1zRm46IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIF9pdGVtcy5sZW5ndGg7XG5cdFx0fVxuXHR9O1xuXG5cbnZhciBfZ2V0SXRlbUF0LFxuXHRfZ2V0TnVtSXRlbXMsXG5cdF9pbml0aWFsSXNMb29wLFxuXHRfZ2V0WmVyb0JvdW5kcyA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjZW50ZXI6e3g6MCx5OjB9LCBcblx0XHRcdG1heDp7eDowLHk6MH0sIFxuXHRcdFx0bWluOnt4OjAseTowfVxuXHRcdH07XG5cdH0sXG5cdF9jYWxjdWxhdGVTaW5nbGVJdGVtUGFuQm91bmRzID0gZnVuY3Rpb24oaXRlbSwgcmVhbFBhbkVsZW1lbnRXLCByZWFsUGFuRWxlbWVudEggKSB7XG5cdFx0dmFyIGJvdW5kcyA9IGl0ZW0uYm91bmRzO1xuXG5cdFx0Ly8gcG9zaXRpb24gb2YgZWxlbWVudCB3aGVuIGl0J3MgY2VudGVyZWRcblx0XHRib3VuZHMuY2VudGVyLnggPSBNYXRoLnJvdW5kKChfdGVtcFBhbkFyZWFTaXplLnggLSByZWFsUGFuRWxlbWVudFcpIC8gMik7XG5cdFx0Ym91bmRzLmNlbnRlci55ID0gTWF0aC5yb3VuZCgoX3RlbXBQYW5BcmVhU2l6ZS55IC0gcmVhbFBhbkVsZW1lbnRIKSAvIDIpICsgaXRlbS52R2FwLnRvcDtcblxuXHRcdC8vIG1heGltdW0gcGFuIHBvc2l0aW9uXG5cdFx0Ym91bmRzLm1heC54ID0gKHJlYWxQYW5FbGVtZW50VyA+IF90ZW1wUGFuQXJlYVNpemUueCkgPyBcblx0XHRcdFx0XHRcdFx0TWF0aC5yb3VuZChfdGVtcFBhbkFyZWFTaXplLnggLSByZWFsUGFuRWxlbWVudFcpIDogXG5cdFx0XHRcdFx0XHRcdGJvdW5kcy5jZW50ZXIueDtcblx0XHRcblx0XHRib3VuZHMubWF4LnkgPSAocmVhbFBhbkVsZW1lbnRIID4gX3RlbXBQYW5BcmVhU2l6ZS55KSA/IFxuXHRcdFx0XHRcdFx0XHRNYXRoLnJvdW5kKF90ZW1wUGFuQXJlYVNpemUueSAtIHJlYWxQYW5FbGVtZW50SCkgKyBpdGVtLnZHYXAudG9wIDogXG5cdFx0XHRcdFx0XHRcdGJvdW5kcy5jZW50ZXIueTtcblx0XHRcblx0XHQvLyBtaW5pbXVtIHBhbiBwb3NpdGlvblxuXHRcdGJvdW5kcy5taW4ueCA9IChyZWFsUGFuRWxlbWVudFcgPiBfdGVtcFBhbkFyZWFTaXplLngpID8gMCA6IGJvdW5kcy5jZW50ZXIueDtcblx0XHRib3VuZHMubWluLnkgPSAocmVhbFBhbkVsZW1lbnRIID4gX3RlbXBQYW5BcmVhU2l6ZS55KSA/IGl0ZW0udkdhcC50b3AgOiBib3VuZHMuY2VudGVyLnk7XG5cdH0sXG5cdF9jYWxjdWxhdGVJdGVtU2l6ZSA9IGZ1bmN0aW9uKGl0ZW0sIHZpZXdwb3J0U2l6ZSwgem9vbUxldmVsKSB7XG5cblx0XHRpZiAoaXRlbS5zcmMgJiYgIWl0ZW0ubG9hZEVycm9yKSB7XG5cdFx0XHR2YXIgaXNJbml0aWFsID0gIXpvb21MZXZlbDtcblx0XHRcdFxuXHRcdFx0aWYoaXNJbml0aWFsKSB7XG5cdFx0XHRcdGlmKCFpdGVtLnZHYXApIHtcblx0XHRcdFx0XHRpdGVtLnZHYXAgPSB7dG9wOjAsYm90dG9tOjB9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGFsbG93cyBvdmVycmlkaW5nIHZlcnRpY2FsIG1hcmdpbiBmb3IgaW5kaXZpZHVhbCBpdGVtc1xuXHRcdFx0XHRfc2hvdXQoJ3BhcnNlVmVydGljYWxNYXJnaW4nLCBpdGVtKTtcblx0XHRcdH1cblxuXG5cdFx0XHRfdGVtcFBhbkFyZWFTaXplLnggPSB2aWV3cG9ydFNpemUueDtcblx0XHRcdF90ZW1wUGFuQXJlYVNpemUueSA9IHZpZXdwb3J0U2l6ZS55IC0gaXRlbS52R2FwLnRvcCAtIGl0ZW0udkdhcC5ib3R0b207XG5cblx0XHRcdGlmIChpc0luaXRpYWwpIHtcblx0XHRcdFx0dmFyIGhSYXRpbyA9IF90ZW1wUGFuQXJlYVNpemUueCAvIGl0ZW0udztcblx0XHRcdFx0dmFyIHZSYXRpbyA9IF90ZW1wUGFuQXJlYVNpemUueSAvIGl0ZW0uaDtcblxuXHRcdFx0XHRpdGVtLmZpdFJhdGlvID0gaFJhdGlvIDwgdlJhdGlvID8gaFJhdGlvIDogdlJhdGlvO1xuXHRcdFx0XHQvL2l0ZW0uZmlsbFJhdGlvID0gaFJhdGlvID4gdlJhdGlvID8gaFJhdGlvIDogdlJhdGlvO1xuXG5cdFx0XHRcdHZhciBzY2FsZU1vZGUgPSBfb3B0aW9ucy5zY2FsZU1vZGU7XG5cblx0XHRcdFx0aWYgKHNjYWxlTW9kZSA9PT0gJ29yaWcnKSB7XG5cdFx0XHRcdFx0em9vbUxldmVsID0gMTtcblx0XHRcdFx0fSBlbHNlIGlmIChzY2FsZU1vZGUgPT09ICdmaXQnKSB7XG5cdFx0XHRcdFx0em9vbUxldmVsID0gaXRlbS5maXRSYXRpbztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh6b29tTGV2ZWwgPiAxKSB7XG5cdFx0XHRcdFx0em9vbUxldmVsID0gMTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGl0ZW0uaW5pdGlhbFpvb21MZXZlbCA9IHpvb21MZXZlbDtcblx0XHRcdFx0XG5cdFx0XHRcdGlmKCFpdGVtLmJvdW5kcykge1xuXHRcdFx0XHRcdC8vIHJldXNlIGJvdW5kcyBvYmplY3Rcblx0XHRcdFx0XHRpdGVtLmJvdW5kcyA9IF9nZXRaZXJvQm91bmRzKCk7IFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKCF6b29tTGV2ZWwpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRfY2FsY3VsYXRlU2luZ2xlSXRlbVBhbkJvdW5kcyhpdGVtLCBpdGVtLncgKiB6b29tTGV2ZWwsIGl0ZW0uaCAqIHpvb21MZXZlbCk7XG5cblx0XHRcdGlmIChpc0luaXRpYWwgJiYgem9vbUxldmVsID09PSBpdGVtLmluaXRpYWxab29tTGV2ZWwpIHtcblx0XHRcdFx0aXRlbS5pbml0aWFsUG9zaXRpb24gPSBpdGVtLmJvdW5kcy5jZW50ZXI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpdGVtLmJvdW5kcztcblx0XHR9IGVsc2Uge1xuXHRcdFx0aXRlbS53ID0gaXRlbS5oID0gMDtcblx0XHRcdGl0ZW0uaW5pdGlhbFpvb21MZXZlbCA9IGl0ZW0uZml0UmF0aW8gPSAxO1xuXHRcdFx0aXRlbS5ib3VuZHMgPSBfZ2V0WmVyb0JvdW5kcygpO1xuXHRcdFx0aXRlbS5pbml0aWFsUG9zaXRpb24gPSBpdGVtLmJvdW5kcy5jZW50ZXI7XG5cblx0XHRcdC8vIGlmIGl0J3Mgbm90IGltYWdlLCB3ZSByZXR1cm4gemVybyBib3VuZHMgKGNvbnRlbnQgaXMgbm90IHpvb21hYmxlKVxuXHRcdFx0cmV0dXJuIGl0ZW0uYm91bmRzO1xuXHRcdH1cblx0XHRcblx0fSxcblxuXHRcblxuXG5cdF9hcHBlbmRJbWFnZSA9IGZ1bmN0aW9uKGluZGV4LCBpdGVtLCBiYXNlRGl2LCBpbWcsIHByZXZlbnRBbmltYXRpb24sIGtlZXBQbGFjZWhvbGRlcikge1xuXHRcdFxuXG5cdFx0aWYoaXRlbS5sb2FkRXJyb3IpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZihpbWcpIHtcblxuXHRcdFx0aXRlbS5pbWFnZUFwcGVuZGVkID0gdHJ1ZTtcblx0XHRcdF9zZXRJbWFnZVNpemUoaXRlbSwgaW1nLCAoaXRlbSA9PT0gc2VsZi5jdXJySXRlbSAmJiBfcmVuZGVyTWF4UmVzb2x1dGlvbikgKTtcblx0XHRcdFxuXHRcdFx0YmFzZURpdi5hcHBlbmRDaGlsZChpbWcpO1xuXG5cdFx0XHRpZihrZWVwUGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZihpdGVtICYmIGl0ZW0ubG9hZGVkICYmIGl0ZW0ucGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRcdGl0ZW0ucGxhY2Vob2xkZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdFx0XHRcdGl0ZW0ucGxhY2Vob2xkZXIgPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgNTAwKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdFxuXG5cblx0X3ByZWxvYWRJbWFnZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRpdGVtLmxvYWRpbmcgPSB0cnVlO1xuXHRcdGl0ZW0ubG9hZGVkID0gZmFsc2U7XG5cdFx0dmFyIGltZyA9IGl0ZW0uaW1nID0gZnJhbWV3b3JrLmNyZWF0ZUVsKCdwc3dwX19pbWcnLCAnaW1nJyk7XG5cdFx0dmFyIG9uQ29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdGl0ZW0ubG9hZGluZyA9IGZhbHNlO1xuXHRcdFx0aXRlbS5sb2FkZWQgPSB0cnVlO1xuXG5cdFx0XHRpZihpdGVtLmxvYWRDb21wbGV0ZSkge1xuXHRcdFx0XHRpdGVtLmxvYWRDb21wbGV0ZShpdGVtKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW0uaW1nID0gbnVsbDsgLy8gbm8gbmVlZCB0byBzdG9yZSBpbWFnZSBvYmplY3Rcblx0XHRcdH1cblx0XHRcdGltZy5vbmxvYWQgPSBpbWcub25lcnJvciA9IG51bGw7XG5cdFx0XHRpbWcgPSBudWxsO1xuXHRcdH07XG5cdFx0aW1nLm9ubG9hZCA9IG9uQ29tcGxldGU7XG5cdFx0aW1nLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0XHRcdGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdG9uQ29tcGxldGUoKTtcblx0XHR9O1x0XHRcblxuXHRcdGltZy5zcmMgPSBpdGVtLnNyYzsvLyArICc/YT0nICsgTWF0aC5yYW5kb20oKTtcblxuXHRcdHJldHVybiBpbWc7XG5cdH0sXG5cdF9jaGVja0ZvckVycm9yID0gZnVuY3Rpb24oaXRlbSwgY2xlYW5VcCkge1xuXHRcdGlmKGl0ZW0uc3JjICYmIGl0ZW0ubG9hZEVycm9yICYmIGl0ZW0uY29udGFpbmVyKSB7XG5cblx0XHRcdGlmKGNsZWFuVXApIHtcblx0XHRcdFx0aXRlbS5jb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cdFx0XHR9XG5cblx0XHRcdGl0ZW0uY29udGFpbmVyLmlubmVySFRNTCA9IF9vcHRpb25zLmVycm9yTXNnLnJlcGxhY2UoJyV1cmwlJywgIGl0ZW0uc3JjICk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFxuXHRcdH1cblx0fSxcblx0X3NldEltYWdlU2l6ZSA9IGZ1bmN0aW9uKGl0ZW0sIGltZywgbWF4UmVzKSB7XG5cdFx0aWYoIWl0ZW0uc3JjKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYoIWltZykge1xuXHRcdFx0aW1nID0gaXRlbS5jb250YWluZXIubGFzdENoaWxkO1xuXHRcdH1cblxuXHRcdHZhciB3ID0gbWF4UmVzID8gaXRlbS53IDogTWF0aC5yb3VuZChpdGVtLncgKiBpdGVtLmZpdFJhdGlvKSxcblx0XHRcdGggPSBtYXhSZXMgPyBpdGVtLmggOiBNYXRoLnJvdW5kKGl0ZW0uaCAqIGl0ZW0uZml0UmF0aW8pO1xuXHRcdFxuXHRcdGlmKGl0ZW0ucGxhY2Vob2xkZXIgJiYgIWl0ZW0ubG9hZGVkKSB7XG5cdFx0XHRpdGVtLnBsYWNlaG9sZGVyLnN0eWxlLndpZHRoID0gdyArICdweCc7XG5cdFx0XHRpdGVtLnBsYWNlaG9sZGVyLnN0eWxlLmhlaWdodCA9IGggKyAncHgnO1xuXHRcdH1cblxuXHRcdGltZy5zdHlsZS53aWR0aCA9IHcgKyAncHgnO1xuXHRcdGltZy5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4Jztcblx0fSxcblx0X2FwcGVuZEltYWdlc1Bvb2wgPSBmdW5jdGlvbigpIHtcblxuXHRcdGlmKF9pbWFnZXNUb0FwcGVuZFBvb2wubGVuZ3RoKSB7XG5cdFx0XHR2YXIgcG9vbEl0ZW07XG5cblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBfaW1hZ2VzVG9BcHBlbmRQb29sLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHBvb2xJdGVtID0gX2ltYWdlc1RvQXBwZW5kUG9vbFtpXTtcblx0XHRcdFx0aWYoIHBvb2xJdGVtLmhvbGRlci5pbmRleCA9PT0gcG9vbEl0ZW0uaW5kZXggKSB7XG5cdFx0XHRcdFx0X2FwcGVuZEltYWdlKHBvb2xJdGVtLmluZGV4LCBwb29sSXRlbS5pdGVtLCBwb29sSXRlbS5iYXNlRGl2LCBwb29sSXRlbS5pbWcsIGZhbHNlLCBwb29sSXRlbS5jbGVhclBsYWNlaG9sZGVyKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0X2ltYWdlc1RvQXBwZW5kUG9vbCA9IFtdO1xuXHRcdH1cblx0fTtcblx0XG5cblxuX3JlZ2lzdGVyTW9kdWxlKCdDb250cm9sbGVyJywge1xuXG5cdHB1YmxpY01ldGhvZHM6IHtcblxuXHRcdGxhenlMb2FkSXRlbTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdGluZGV4ID0gX2dldExvb3BlZElkKGluZGV4KTtcblx0XHRcdHZhciBpdGVtID0gX2dldEl0ZW1BdChpbmRleCk7XG5cblx0XHRcdGlmKCFpdGVtIHx8ICgoaXRlbS5sb2FkZWQgfHwgaXRlbS5sb2FkaW5nKSAmJiAhX2l0ZW1zTmVlZFVwZGF0ZSkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRfc2hvdXQoJ2dldHRpbmdEYXRhJywgaW5kZXgsIGl0ZW0pO1xuXG5cdFx0XHRpZiAoIWl0ZW0uc3JjKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0X3ByZWxvYWRJbWFnZShpdGVtKTtcblx0XHR9LFxuXHRcdGluaXRDb250cm9sbGVyOiBmdW5jdGlvbigpIHtcblx0XHRcdGZyYW1ld29yay5leHRlbmQoX29wdGlvbnMsIF9jb250cm9sbGVyRGVmYXVsdE9wdGlvbnMsIHRydWUpO1xuXHRcdFx0c2VsZi5pdGVtcyA9IF9pdGVtcyA9IGl0ZW1zO1xuXHRcdFx0X2dldEl0ZW1BdCA9IHNlbGYuZ2V0SXRlbUF0O1xuXHRcdFx0X2dldE51bUl0ZW1zID0gX29wdGlvbnMuZ2V0TnVtSXRlbXNGbjsgLy9zZWxmLmdldE51bUl0ZW1zO1xuXG5cblxuXHRcdFx0X2luaXRpYWxJc0xvb3AgPSBfb3B0aW9ucy5sb29wO1xuXHRcdFx0aWYoX2dldE51bUl0ZW1zKCkgPCAzKSB7XG5cdFx0XHRcdF9vcHRpb25zLmxvb3AgPSBmYWxzZTsgLy8gZGlzYWJsZSBsb29wIGlmIGxlc3MgdGhlbiAzIGl0ZW1zXG5cdFx0XHR9XG5cblx0XHRcdF9saXN0ZW4oJ2JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uKGRpZmYpIHtcblxuXHRcdFx0XHR2YXIgcCA9IF9vcHRpb25zLnByZWxvYWQsXG5cdFx0XHRcdFx0aXNOZXh0ID0gZGlmZiA9PT0gbnVsbCA/IHRydWUgOiAoZGlmZiA+PSAwKSxcblx0XHRcdFx0XHRwcmVsb2FkQmVmb3JlID0gTWF0aC5taW4ocFswXSwgX2dldE51bUl0ZW1zKCkgKSxcblx0XHRcdFx0XHRwcmVsb2FkQWZ0ZXIgPSBNYXRoLm1pbihwWzFdLCBfZ2V0TnVtSXRlbXMoKSApLFxuXHRcdFx0XHRcdGk7XG5cblxuXHRcdFx0XHRmb3IoaSA9IDE7IGkgPD0gKGlzTmV4dCA/IHByZWxvYWRBZnRlciA6IHByZWxvYWRCZWZvcmUpOyBpKyspIHtcblx0XHRcdFx0XHRzZWxmLmxhenlMb2FkSXRlbShfY3VycmVudEl0ZW1JbmRleCtpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IoaSA9IDE7IGkgPD0gKGlzTmV4dCA/IHByZWxvYWRCZWZvcmUgOiBwcmVsb2FkQWZ0ZXIpOyBpKyspIHtcblx0XHRcdFx0XHRzZWxmLmxhenlMb2FkSXRlbShfY3VycmVudEl0ZW1JbmRleC1pKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9saXN0ZW4oJ2luaXRpYWxMYXlvdXQnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5jdXJySXRlbS5pbml0aWFsTGF5b3V0ID0gX29wdGlvbnMuZ2V0VGh1bWJCb3VuZHNGbiAmJiBfb3B0aW9ucy5nZXRUaHVtYkJvdW5kc0ZuKF9jdXJyZW50SXRlbUluZGV4KTtcblx0XHRcdH0pO1xuXG5cdFx0XHRfbGlzdGVuKCdtYWluU2Nyb2xsQW5pbUNvbXBsZXRlJywgX2FwcGVuZEltYWdlc1Bvb2wpO1xuXHRcdFx0X2xpc3RlbignaW5pdGlhbFpvb21JbkVuZCcsIF9hcHBlbmRJbWFnZXNQb29sKTtcblxuXG5cblx0XHRcdF9saXN0ZW4oJ2Rlc3Ryb3knLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGl0ZW07XG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBfaXRlbXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRpdGVtID0gX2l0ZW1zW2ldO1xuXHRcdFx0XHRcdC8vIHJlbW92ZSByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnRzLCBmb3IgR0Ncblx0XHRcdFx0XHRpZihpdGVtLmNvbnRhaW5lcikge1xuXHRcdFx0XHRcdFx0aXRlbS5jb250YWluZXIgPSBudWxsOyBcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoaXRlbS5wbGFjZWhvbGRlcikge1xuXHRcdFx0XHRcdFx0aXRlbS5wbGFjZWhvbGRlciA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGl0ZW0uaW1nKSB7XG5cdFx0XHRcdFx0XHRpdGVtLmltZyA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGl0ZW0ucHJlbG9hZGVyKSB7XG5cdFx0XHRcdFx0XHRpdGVtLnByZWxvYWRlciA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKGl0ZW0ubG9hZEVycm9yKSB7XG5cdFx0XHRcdFx0XHRpdGVtLmxvYWRlZCA9IGl0ZW0ubG9hZEVycm9yID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdF9pbWFnZXNUb0FwcGVuZFBvb2wgPSBudWxsO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXG5cdFx0Z2V0SXRlbUF0OiBmdW5jdGlvbihpbmRleCkge1xuXHRcdFx0aWYgKGluZGV4ID49IDApIHtcblx0XHRcdFx0cmV0dXJuIF9pdGVtc1tpbmRleF0gIT09IHVuZGVmaW5lZCA/IF9pdGVtc1tpbmRleF0gOiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXG5cdFx0YWxsb3dQcm9ncmVzc2l2ZUltZzogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyAxLiBQcm9ncmVzc2l2ZSBpbWFnZSBsb2FkaW5nIGlzbid0IHdvcmtpbmcgb24gd2Via2l0L2JsaW5rIFxuXHRcdFx0Ly8gICAgd2hlbiBody1hY2NlbGVyYXRpb24gKGUuZy4gdHJhbnNsYXRlWikgaXMgYXBwbGllZCB0byBJTUcgZWxlbWVudC5cblx0XHRcdC8vICAgIFRoYXQncyB3aHkgaW4gUGhvdG9Td2lwZSBwYXJlbnQgZWxlbWVudCBnZXRzIHpvb20gdHJhbnNmb3JtLCBub3QgaW1hZ2UgaXRzZWxmLlxuXHRcdFx0Ly8gICAgXG5cdFx0XHQvLyAyLiBQcm9ncmVzc2l2ZSBpbWFnZSBsb2FkaW5nIHNvbWV0aW1lcyBibGlua3MgaW4gd2Via2l0L2JsaW5rIHdoZW4gYXBwbHlpbmcgYW5pbWF0aW9uIHRvIHBhcmVudCBlbGVtZW50LlxuXHRcdFx0Ly8gICAgVGhhdCdzIHdoeSBpdCdzIGRpc2FibGVkIG9uIHRvdWNoIGRldmljZXMgKG1haW5seSBiZWNhdXNlIG9mIHN3aXBlIHRyYW5zaXRpb24pXG5cdFx0XHQvLyAgICBcblx0XHRcdC8vIDMuIFByb2dyZXNzaXZlIGltYWdlIGxvYWRpbmcgc29tZXRpbWVzIGRvZXNuJ3Qgd29yayBpbiBJRSAodXAgdG8gMTEpLlxuXG5cdFx0XHQvLyBEb24ndCBhbGxvdyBwcm9ncmVzc2l2ZSBsb2FkaW5nIG9uIG5vbi1sYXJnZSB0b3VjaCBkZXZpY2VzXG5cdFx0XHRyZXR1cm4gX29wdGlvbnMuZm9yY2VQcm9ncmVzc2l2ZUxvYWRpbmcgfHwgIV9saWtlbHlUb3VjaERldmljZSB8fCBfb3B0aW9ucy5tb3VzZVVzZWQgfHwgc2NyZWVuLndpZHRoID4gMTIwMDsgXG5cdFx0XHQvLyAxMjAwIC0gdG8gZWxpbWluYXRlIHRvdWNoIGRldmljZXMgd2l0aCBsYXJnZSBzY3JlZW4gKGxpa2UgQ2hyb21lYm9vayBQaXhlbClcblx0XHR9LFxuXG5cdFx0c2V0Q29udGVudDogZnVuY3Rpb24oaG9sZGVyLCBpbmRleCkge1xuXG5cdFx0XHRpZihfb3B0aW9ucy5sb29wKSB7XG5cdFx0XHRcdGluZGV4ID0gX2dldExvb3BlZElkKGluZGV4KTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHByZXZJdGVtID0gc2VsZi5nZXRJdGVtQXQoaG9sZGVyLmluZGV4KTtcblx0XHRcdGlmKHByZXZJdGVtKSB7XG5cdFx0XHRcdHByZXZJdGVtLmNvbnRhaW5lciA9IG51bGw7XG5cdFx0XHR9XG5cdFxuXHRcdFx0dmFyIGl0ZW0gPSBzZWxmLmdldEl0ZW1BdChpbmRleCksXG5cdFx0XHRcdGltZztcblx0XHRcdFxuXHRcdFx0aWYoIWl0ZW0pIHtcblx0XHRcdFx0aG9sZGVyLmVsLmlubmVySFRNTCA9ICcnO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIGFsbG93IHRvIG92ZXJyaWRlIGRhdGFcblx0XHRcdF9zaG91dCgnZ2V0dGluZ0RhdGEnLCBpbmRleCwgaXRlbSk7XG5cblx0XHRcdGhvbGRlci5pbmRleCA9IGluZGV4O1xuXHRcdFx0aG9sZGVyLml0ZW0gPSBpdGVtO1xuXG5cdFx0XHQvLyBiYXNlIGNvbnRhaW5lciBESVYgaXMgY3JlYXRlZCBvbmx5IG9uY2UgZm9yIGVhY2ggb2YgMyBob2xkZXJzXG5cdFx0XHR2YXIgYmFzZURpdiA9IGl0ZW0uY29udGFpbmVyID0gZnJhbWV3b3JrLmNyZWF0ZUVsKCdwc3dwX196b29tLXdyYXAnKTsgXG5cblx0XHRcdFxuXG5cdFx0XHRpZighaXRlbS5zcmMgJiYgaXRlbS5odG1sKSB7XG5cdFx0XHRcdGlmKGl0ZW0uaHRtbC50YWdOYW1lKSB7XG5cdFx0XHRcdFx0YmFzZURpdi5hcHBlbmRDaGlsZChpdGVtLmh0bWwpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGJhc2VEaXYuaW5uZXJIVE1MID0gaXRlbS5odG1sO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdF9jaGVja0ZvckVycm9yKGl0ZW0pO1xuXG5cdFx0XHRfY2FsY3VsYXRlSXRlbVNpemUoaXRlbSwgX3ZpZXdwb3J0U2l6ZSk7XG5cdFx0XHRcblx0XHRcdGlmKGl0ZW0uc3JjICYmICFpdGVtLmxvYWRFcnJvciAmJiAhaXRlbS5sb2FkZWQpIHtcblxuXHRcdFx0XHRpdGVtLmxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcblxuXHRcdFx0XHRcdC8vIGdhbGxlcnkgY2xvc2VkIGJlZm9yZSBpbWFnZSBmaW5pc2hlZCBsb2FkaW5nXG5cdFx0XHRcdFx0aWYoIV9pc09wZW4pIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBjaGVjayBpZiBob2xkZXIgaGFzbid0IGNoYW5nZWQgd2hpbGUgaW1hZ2Ugd2FzIGxvYWRpbmdcblx0XHRcdFx0XHRpZihob2xkZXIgJiYgaG9sZGVyLmluZGV4ID09PSBpbmRleCApIHtcblx0XHRcdFx0XHRcdGlmKCBfY2hlY2tGb3JFcnJvcihpdGVtLCB0cnVlKSApIHtcblx0XHRcdFx0XHRcdFx0aXRlbS5sb2FkQ29tcGxldGUgPSBpdGVtLmltZyA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdF9jYWxjdWxhdGVJdGVtU2l6ZShpdGVtLCBfdmlld3BvcnRTaXplKTtcblx0XHRcdFx0XHRcdFx0X2FwcGx5Wm9vbVBhblRvSXRlbShpdGVtKTtcblxuXHRcdFx0XHRcdFx0XHRpZihob2xkZXIuaW5kZXggPT09IF9jdXJyZW50SXRlbUluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gcmVjYWxjdWxhdGUgZGltZW5zaW9uc1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYudXBkYXRlQ3Vyclpvb21JdGVtKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYoICFpdGVtLmltYWdlQXBwZW5kZWQgKSB7XG5cdFx0XHRcdFx0XHRcdGlmKF9mZWF0dXJlcy50cmFuc2Zvcm0gJiYgKF9tYWluU2Nyb2xsQW5pbWF0aW5nIHx8IF9pbml0aWFsWm9vbVJ1bm5pbmcpICkge1xuXHRcdFx0XHRcdFx0XHRcdF9pbWFnZXNUb0FwcGVuZFBvb2wucHVzaCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRpdGVtOml0ZW0sXG5cdFx0XHRcdFx0XHRcdFx0XHRiYXNlRGl2OmJhc2VEaXYsXG5cdFx0XHRcdFx0XHRcdFx0XHRpbWc6aXRlbS5pbWcsXG5cdFx0XHRcdFx0XHRcdFx0XHRpbmRleDppbmRleCxcblx0XHRcdFx0XHRcdFx0XHRcdGhvbGRlcjpob2xkZXIsXG5cdFx0XHRcdFx0XHRcdFx0XHRjbGVhclBsYWNlaG9sZGVyOnRydWVcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRfYXBwZW5kSW1hZ2UoaW5kZXgsIGl0ZW0sIGJhc2VEaXYsIGl0ZW0uaW1nLCBfbWFpblNjcm9sbEFuaW1hdGluZyB8fCBfaW5pdGlhbFpvb21SdW5uaW5nLCB0cnVlKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gcmVtb3ZlIHByZWxvYWRlciAmIG1pbmktaW1nXG5cdFx0XHRcdFx0XHRcdGlmKCFfaW5pdGlhbFpvb21SdW5uaW5nICYmIGl0ZW0ucGxhY2Vob2xkZXIpIHtcblx0XHRcdFx0XHRcdFx0XHRpdGVtLnBsYWNlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHRcdFx0XHRcdFx0aXRlbS5wbGFjZWhvbGRlciA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpdGVtLmxvYWRDb21wbGV0ZSA9IG51bGw7XG5cdFx0XHRcdFx0aXRlbS5pbWcgPSBudWxsOyAvLyBubyBuZWVkIHRvIHN0b3JlIGltYWdlIGVsZW1lbnQgYWZ0ZXIgaXQncyBhZGRlZFxuXG5cdFx0XHRcdFx0X3Nob3V0KCdpbWFnZUxvYWRDb21wbGV0ZScsIGluZGV4LCBpdGVtKTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRpZihmcmFtZXdvcmsuZmVhdHVyZXMudHJhbnNmb3JtKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0dmFyIHBsYWNlaG9sZGVyQ2xhc3NOYW1lID0gJ3Bzd3BfX2ltZyBwc3dwX19pbWctLXBsYWNlaG9sZGVyJzsgXG5cdFx0XHRcdFx0cGxhY2Vob2xkZXJDbGFzc05hbWUgKz0gKGl0ZW0ubXNyYyA/ICcnIDogJyBwc3dwX19pbWctLXBsYWNlaG9sZGVyLS1ibGFuaycpO1xuXG5cdFx0XHRcdFx0dmFyIHBsYWNlaG9sZGVyID0gZnJhbWV3b3JrLmNyZWF0ZUVsKHBsYWNlaG9sZGVyQ2xhc3NOYW1lLCBpdGVtLm1zcmMgPyAnaW1nJyA6ICcnKTtcblx0XHRcdFx0XHRpZihpdGVtLm1zcmMpIHtcblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyLnNyYyA9IGl0ZW0ubXNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0X3NldEltYWdlU2l6ZShpdGVtLCBwbGFjZWhvbGRlcik7XG5cblx0XHRcdFx0XHRiYXNlRGl2LmFwcGVuZENoaWxkKHBsYWNlaG9sZGVyKTtcblx0XHRcdFx0XHRpdGVtLnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG5cblx0XHRcdFx0fVxuXHRcdFx0XHRcblxuXHRcdFx0XHRcblxuXHRcdFx0XHRpZighaXRlbS5sb2FkaW5nKSB7XG5cdFx0XHRcdFx0X3ByZWxvYWRJbWFnZShpdGVtKTtcblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0aWYoIHNlbGYuYWxsb3dQcm9ncmVzc2l2ZUltZygpICkge1xuXHRcdFx0XHRcdC8vIGp1c3QgYXBwZW5kIGltYWdlXG5cdFx0XHRcdFx0aWYoIV9pbml0aWFsQ29udGVudFNldCAmJiBfZmVhdHVyZXMudHJhbnNmb3JtKSB7XG5cdFx0XHRcdFx0XHRfaW1hZ2VzVG9BcHBlbmRQb29sLnB1c2goe1xuXHRcdFx0XHRcdFx0XHRpdGVtOml0ZW0sIFxuXHRcdFx0XHRcdFx0XHRiYXNlRGl2OmJhc2VEaXYsIFxuXHRcdFx0XHRcdFx0XHRpbWc6aXRlbS5pbWcsIFxuXHRcdFx0XHRcdFx0XHRpbmRleDppbmRleCwgXG5cdFx0XHRcdFx0XHRcdGhvbGRlcjpob2xkZXJcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRfYXBwZW5kSW1hZ2UoaW5kZXgsIGl0ZW0sIGJhc2VEaXYsIGl0ZW0uaW1nLCB0cnVlLCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHR9IGVsc2UgaWYoaXRlbS5zcmMgJiYgIWl0ZW0ubG9hZEVycm9yKSB7XG5cdFx0XHRcdC8vIGltYWdlIG9iamVjdCBpcyBjcmVhdGVkIGV2ZXJ5IHRpbWUsIGR1ZSB0byBidWdzIG9mIGltYWdlIGxvYWRpbmcgJiBkZWxheSB3aGVuIHN3aXRjaGluZyBpbWFnZXNcblx0XHRcdFx0aW1nID0gZnJhbWV3b3JrLmNyZWF0ZUVsKCdwc3dwX19pbWcnLCAnaW1nJyk7XG5cdFx0XHRcdGltZy5zdHlsZS5vcGFjaXR5ID0gMTtcblx0XHRcdFx0aW1nLnNyYyA9IGl0ZW0uc3JjO1xuXHRcdFx0XHRfc2V0SW1hZ2VTaXplKGl0ZW0sIGltZyk7XG5cdFx0XHRcdF9hcHBlbmRJbWFnZShpbmRleCwgaXRlbSwgYmFzZURpdiwgaW1nLCB0cnVlKTtcblx0XHRcdH1cblx0XHRcdFxuXG5cdFx0XHRpZighX2luaXRpYWxDb250ZW50U2V0ICYmIGluZGV4ID09PSBfY3VycmVudEl0ZW1JbmRleCkge1xuXHRcdFx0XHRfY3Vyclpvb21FbGVtZW50U3R5bGUgPSBiYXNlRGl2LnN0eWxlO1xuXHRcdFx0XHRfc2hvd09ySGlkZShpdGVtLCAoaW1nIHx8aXRlbS5pbWcpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRfYXBwbHlab29tUGFuVG9JdGVtKGl0ZW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRob2xkZXIuZWwuaW5uZXJIVE1MID0gJyc7XG5cdFx0XHRob2xkZXIuZWwuYXBwZW5kQ2hpbGQoYmFzZURpdik7XG5cdFx0fSxcblxuXHRcdGNsZWFuU2xpZGU6IGZ1bmN0aW9uKCBpdGVtICkge1xuXHRcdFx0aWYoaXRlbS5pbWcgKSB7XG5cdFx0XHRcdGl0ZW0uaW1nLm9ubG9hZCA9IGl0ZW0uaW1nLm9uZXJyb3IgPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0aXRlbS5sb2FkZWQgPSBpdGVtLmxvYWRpbmcgPSBpdGVtLmltZyA9IGl0ZW0uaW1hZ2VBcHBlbmRlZCA9IGZhbHNlO1xuXHRcdH1cblxuXHR9XG59KTtcblxuLyo+Pml0ZW1zLWNvbnRyb2xsZXIqL1xuXG4vKj4+dGFwKi9cbi8qKlxuICogdGFwLmpzOlxuICpcbiAqIERpc3BsYXRjaGVzIHRhcCBhbmQgZG91YmxlLXRhcCBldmVudHMuXG4gKiBcbiAqL1xuXG52YXIgdGFwVGltZXIsXG5cdHRhcFJlbGVhc2VQb2ludCA9IHt9LFxuXHRfZGlzcGF0Y2hUYXBFdmVudCA9IGZ1bmN0aW9uKG9yaWdFdmVudCwgcmVsZWFzZVBvaW50LCBwb2ludGVyVHlwZSkge1x0XHRcblx0XHR2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCAnQ3VzdG9tRXZlbnQnICksXG5cdFx0XHRlRGV0YWlsID0ge1xuXHRcdFx0XHRvcmlnRXZlbnQ6b3JpZ0V2ZW50LCBcblx0XHRcdFx0dGFyZ2V0Om9yaWdFdmVudC50YXJnZXQsIFxuXHRcdFx0XHRyZWxlYXNlUG9pbnQ6IHJlbGVhc2VQb2ludCwgXG5cdFx0XHRcdHBvaW50ZXJUeXBlOnBvaW50ZXJUeXBlIHx8ICd0b3VjaCdcblx0XHRcdH07XG5cblx0XHRlLmluaXRDdXN0b21FdmVudCggJ3Bzd3BUYXAnLCB0cnVlLCB0cnVlLCBlRGV0YWlsICk7XG5cdFx0b3JpZ0V2ZW50LnRhcmdldC5kaXNwYXRjaEV2ZW50KGUpO1xuXHR9O1xuXG5fcmVnaXN0ZXJNb2R1bGUoJ1RhcCcsIHtcblx0cHVibGljTWV0aG9kczoge1xuXHRcdGluaXRUYXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0X2xpc3RlbignZmlyc3RUb3VjaFN0YXJ0Jywgc2VsZi5vblRhcFN0YXJ0KTtcblx0XHRcdF9saXN0ZW4oJ3RvdWNoUmVsZWFzZScsIHNlbGYub25UYXBSZWxlYXNlKTtcblx0XHRcdF9saXN0ZW4oJ2Rlc3Ryb3knLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dGFwUmVsZWFzZVBvaW50ID0ge307XG5cdFx0XHRcdHRhcFRpbWVyID0gbnVsbDtcblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0b25UYXBTdGFydDogZnVuY3Rpb24odG91Y2hMaXN0KSB7XG5cdFx0XHRpZih0b3VjaExpc3QubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQodGFwVGltZXIpO1xuXHRcdFx0XHR0YXBUaW1lciA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvblRhcFJlbGVhc2U6IGZ1bmN0aW9uKGUsIHJlbGVhc2VQb2ludCkge1xuXHRcdFx0aWYoIXJlbGVhc2VQb2ludCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFfbW92ZWQgJiYgIV9pc011bHRpdG91Y2ggJiYgIV9udW1BbmltYXRpb25zKSB7XG5cdFx0XHRcdHZhciBwMCA9IHJlbGVhc2VQb2ludDtcblx0XHRcdFx0aWYodGFwVGltZXIpIHtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQodGFwVGltZXIpO1xuXHRcdFx0XHRcdHRhcFRpbWVyID0gbnVsbDtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGlmIHRhcGVkIG9uIHRoZSBzYW1lIHBsYWNlXG5cdFx0XHRcdFx0aWYgKCBfaXNOZWFyYnlQb2ludHMocDAsIHRhcFJlbGVhc2VQb2ludCkgKSB7XG5cdFx0XHRcdFx0XHRfc2hvdXQoJ2RvdWJsZVRhcCcsIHAwKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihyZWxlYXNlUG9pbnQudHlwZSA9PT0gJ21vdXNlJykge1xuXHRcdFx0XHRcdF9kaXNwYXRjaFRhcEV2ZW50KGUsIHJlbGVhc2VQb2ludCwgJ21vdXNlJyk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGNsaWNrZWRUYWdOYW1lID0gZS50YXJnZXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xuXHRcdFx0XHQvLyBhdm9pZCBkb3VibGUgdGFwIGRlbGF5IG9uIGJ1dHRvbnMgYW5kIGVsZW1lbnRzIHRoYXQgaGF2ZSBjbGFzcyBwc3dwX19zaW5nbGUtdGFwXG5cdFx0XHRcdGlmKGNsaWNrZWRUYWdOYW1lID09PSAnQlVUVE9OJyB8fCBmcmFtZXdvcmsuaGFzQ2xhc3MoZS50YXJnZXQsICdwc3dwX19zaW5nbGUtdGFwJykgKSB7XG5cdFx0XHRcdFx0X2Rpc3BhdGNoVGFwRXZlbnQoZSwgcmVsZWFzZVBvaW50KTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfZXF1YWxpemVQb2ludHModGFwUmVsZWFzZVBvaW50LCBwMCk7XG5cblx0XHRcdFx0dGFwVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdF9kaXNwYXRjaFRhcEV2ZW50KGUsIHJlbGVhc2VQb2ludCk7XG5cdFx0XHRcdFx0dGFwVGltZXIgPSBudWxsO1xuXHRcdFx0XHR9LCAzMDApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbi8qPj50YXAqL1xuXG4vKj4+ZGVza3RvcC16b29tKi9cbi8qKlxuICpcbiAqIGRlc2t0b3Atem9vbS5qczpcbiAqXG4gKiAtIEJpbmRzIG1vdXNld2hlZWwgZXZlbnQgZm9yIHBhbmluZyB6b29tZWQgaW1hZ2UuXG4gKiAtIE1hbmFnZXMgXCJkcmFnZ2luZ1wiLCBcInpvb21lZC1pblwiLCBcInpvb20tb3V0XCIgY2xhc3Nlcy5cbiAqICAgKHdoaWNoIGFyZSB1c2VkIGZvciBjdXJzb3JzIGFuZCB6b29tIGljb24pXG4gKiAtIEFkZHMgdG9nZ2xlRGVza3RvcFpvb20gZnVuY3Rpb24uXG4gKiBcbiAqL1xuXG52YXIgX3doZWVsRGVsdGE7XG5cdFxuX3JlZ2lzdGVyTW9kdWxlKCdEZXNrdG9wWm9vbScsIHtcblxuXHRwdWJsaWNNZXRob2RzOiB7XG5cblx0XHRpbml0RGVza3RvcFpvb206IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZihfb2xkSUUpIHtcblx0XHRcdFx0Ly8gbm8gem9vbSBmb3Igb2xkIElFICg8PTgpXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYoX2xpa2VseVRvdWNoRGV2aWNlKSB7XG5cdFx0XHRcdC8vIGlmIGRldGVjdGVkIGhhcmR3YXJlIHRvdWNoIHN1cHBvcnQsIHdlIHdhaXQgdW50aWwgbW91c2UgaXMgdXNlZCxcblx0XHRcdFx0Ly8gYW5kIG9ubHkgdGhlbiBhcHBseSBkZXNrdG9wLXpvb20gZmVhdHVyZXNcblx0XHRcdFx0X2xpc3RlbignbW91c2VVc2VkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0c2VsZi5zZXR1cERlc2t0b3Bab29tKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5zZXR1cERlc2t0b3Bab29tKHRydWUpO1xuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdHNldHVwRGVza3RvcFpvb206IGZ1bmN0aW9uKG9uSW5pdCkge1xuXG5cdFx0XHRfd2hlZWxEZWx0YSA9IHt9O1xuXG5cdFx0XHR2YXIgZXZlbnRzID0gJ3doZWVsIG1vdXNld2hlZWwgRE9NTW91c2VTY3JvbGwnO1xuXHRcdFx0XG5cdFx0XHRfbGlzdGVuKCdiaW5kRXZlbnRzJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZyYW1ld29yay5iaW5kKHRlbXBsYXRlLCBldmVudHMsICBzZWxmLmhhbmRsZU1vdXNlV2hlZWwpO1xuXHRcdFx0fSk7XG5cblx0XHRcdF9saXN0ZW4oJ3VuYmluZEV2ZW50cycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihfd2hlZWxEZWx0YSkge1xuXHRcdFx0XHRcdGZyYW1ld29yay51bmJpbmQodGVtcGxhdGUsIGV2ZW50cywgc2VsZi5oYW5kbGVNb3VzZVdoZWVsKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHNlbGYubW91c2Vab29tZWRJbiA9IGZhbHNlO1xuXG5cdFx0XHR2YXIgaGFzRHJhZ2dpbmdDbGFzcyxcblx0XHRcdFx0dXBkYXRlWm9vbWFibGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZihzZWxmLm1vdXNlWm9vbWVkSW4pIHtcblx0XHRcdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLXpvb21lZC1pbicpO1xuXHRcdFx0XHRcdFx0c2VsZi5tb3VzZVpvb21lZEluID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKF9jdXJyWm9vbUxldmVsIDwgMSkge1xuXHRcdFx0XHRcdFx0ZnJhbWV3b3JrLmFkZENsYXNzKHRlbXBsYXRlLCAncHN3cC0tem9vbS1hbGxvd2VkJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZyYW1ld29yay5yZW1vdmVDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLXpvb20tYWxsb3dlZCcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZW1vdmVEcmFnZ2luZ0NsYXNzKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJlbW92ZURyYWdnaW5nQ2xhc3MgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZihoYXNEcmFnZ2luZ0NsYXNzKSB7XG5cdFx0XHRcdFx0XHRmcmFtZXdvcmsucmVtb3ZlQ2xhc3ModGVtcGxhdGUsICdwc3dwLS1kcmFnZ2luZycpO1xuXHRcdFx0XHRcdFx0aGFzRHJhZ2dpbmdDbGFzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0X2xpc3RlbigncmVzaXplJyAsIHVwZGF0ZVpvb21hYmxlKTtcblx0XHRcdF9saXN0ZW4oJ2FmdGVyQ2hhbmdlJyAsIHVwZGF0ZVpvb21hYmxlKTtcblx0XHRcdF9saXN0ZW4oJ3BvaW50ZXJEb3duJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKHNlbGYubW91c2Vab29tZWRJbikge1xuXHRcdFx0XHRcdGhhc0RyYWdnaW5nQ2xhc3MgPSB0cnVlO1xuXHRcdFx0XHRcdGZyYW1ld29yay5hZGRDbGFzcyh0ZW1wbGF0ZSwgJ3Bzd3AtLWRyYWdnaW5nJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0X2xpc3RlbigncG9pbnRlclVwJywgcmVtb3ZlRHJhZ2dpbmdDbGFzcyk7XG5cblx0XHRcdGlmKCFvbkluaXQpIHtcblx0XHRcdFx0dXBkYXRlWm9vbWFibGUoKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdH0sXG5cblx0XHRoYW5kbGVNb3VzZVdoZWVsOiBmdW5jdGlvbihlKSB7XG5cblx0XHRcdGlmKF9jdXJyWm9vbUxldmVsIDw9IHNlbGYuY3Vyckl0ZW0uZml0UmF0aW8pIHtcblx0XHRcdFx0aWYoIF9vcHRpb25zLm1vZGFsICkge1xuXG5cdFx0XHRcdFx0aWYgKCFfb3B0aW9ucy5jbG9zZU9uU2Nyb2xsIHx8IF9udW1BbmltYXRpb25zIHx8IF9pc0RyYWdnaW5nKSB7XG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmKF90cmFuc2Zvcm1LZXkgJiYgTWF0aC5hYnMoZS5kZWx0YVkpID4gMikge1xuXHRcdFx0XHRcdFx0Ly8gY2xvc2UgUGhvdG9Td2lwZVxuXHRcdFx0XHRcdFx0Ly8gaWYgYnJvd3NlciBzdXBwb3J0cyB0cmFuc2Zvcm1zICYgc2Nyb2xsIGNoYW5nZWQgZW5vdWdoXG5cdFx0XHRcdFx0XHRfY2xvc2VkQnlTY3JvbGwgPSB0cnVlO1xuXHRcdFx0XHRcdFx0c2VsZi5jbG9zZSgpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBhbGxvdyBqdXN0IG9uZSBldmVudCB0byBmaXJlXG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG5cdFx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvd2hlZWxcblx0XHRcdF93aGVlbERlbHRhLnggPSAwO1xuXG5cdFx0XHRpZignZGVsdGFYJyBpbiBlKSB7XG5cdFx0XHRcdGlmKGUuZGVsdGFNb2RlID09PSAxIC8qIERPTV9ERUxUQV9MSU5FICovKSB7XG5cdFx0XHRcdFx0Ly8gMTggLSBhdmVyYWdlIGxpbmUgaGVpZ2h0XG5cdFx0XHRcdFx0X3doZWVsRGVsdGEueCA9IGUuZGVsdGFYICogMTg7XG5cdFx0XHRcdFx0X3doZWVsRGVsdGEueSA9IGUuZGVsdGFZICogMTg7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X3doZWVsRGVsdGEueCA9IGUuZGVsdGFYO1xuXHRcdFx0XHRcdF93aGVlbERlbHRhLnkgPSBlLmRlbHRhWTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmKCd3aGVlbERlbHRhJyBpbiBlKSB7XG5cdFx0XHRcdGlmKGUud2hlZWxEZWx0YVgpIHtcblx0XHRcdFx0XHRfd2hlZWxEZWx0YS54ID0gLTAuMTYgKiBlLndoZWVsRGVsdGFYO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGUud2hlZWxEZWx0YVkpIHtcblx0XHRcdFx0XHRfd2hlZWxEZWx0YS55ID0gLTAuMTYgKiBlLndoZWVsRGVsdGFZO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF93aGVlbERlbHRhLnkgPSAtMC4xNiAqIGUud2hlZWxEZWx0YTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmKCdkZXRhaWwnIGluIGUpIHtcblx0XHRcdFx0X3doZWVsRGVsdGEueSA9IGUuZGV0YWlsO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRfY2FsY3VsYXRlUGFuQm91bmRzKF9jdXJyWm9vbUxldmVsLCB0cnVlKTtcblxuXHRcdFx0dmFyIG5ld1BhblggPSBfcGFuT2Zmc2V0LnggLSBfd2hlZWxEZWx0YS54LFxuXHRcdFx0XHRuZXdQYW5ZID0gX3Bhbk9mZnNldC55IC0gX3doZWVsRGVsdGEueTtcblxuXHRcdFx0Ly8gb25seSBwcmV2ZW50IHNjcm9sbGluZyBpbiBub25tb2RhbCBtb2RlIHdoZW4gbm90IGF0IGVkZ2VzXG5cdFx0XHRpZiAoX29wdGlvbnMubW9kYWwgfHxcblx0XHRcdFx0KFxuXHRcdFx0XHRuZXdQYW5YIDw9IF9jdXJyUGFuQm91bmRzLm1pbi54ICYmIG5ld1BhblggPj0gX2N1cnJQYW5Cb3VuZHMubWF4LnggJiZcblx0XHRcdFx0bmV3UGFuWSA8PSBfY3VyclBhbkJvdW5kcy5taW4ueSAmJiBuZXdQYW5ZID49IF9jdXJyUGFuQm91bmRzLm1heC55XG5cdFx0XHRcdCkgKSB7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVE9ETzogdXNlIHJBRiBpbnN0ZWFkIG9mIG1vdXNld2hlZWw/XG5cdFx0XHRzZWxmLnBhblRvKG5ld1BhblgsIG5ld1BhblkpO1xuXHRcdH0sXG5cblx0XHR0b2dnbGVEZXNrdG9wWm9vbTogZnVuY3Rpb24oY2VudGVyUG9pbnQpIHtcblx0XHRcdGNlbnRlclBvaW50ID0gY2VudGVyUG9pbnQgfHwge3g6X3ZpZXdwb3J0U2l6ZS54LzIgKyBfb2Zmc2V0LngsIHk6X3ZpZXdwb3J0U2l6ZS55LzIgKyBfb2Zmc2V0LnkgfTtcblxuXHRcdFx0dmFyIGRvdWJsZVRhcFpvb21MZXZlbCA9IF9vcHRpb25zLmdldERvdWJsZVRhcFpvb20odHJ1ZSwgc2VsZi5jdXJySXRlbSk7XG5cdFx0XHR2YXIgem9vbU91dCA9IF9jdXJyWm9vbUxldmVsID09PSBkb3VibGVUYXBab29tTGV2ZWw7XG5cdFx0XHRcblx0XHRcdHNlbGYubW91c2Vab29tZWRJbiA9ICF6b29tT3V0O1xuXG5cdFx0XHRzZWxmLnpvb21Ubyh6b29tT3V0ID8gc2VsZi5jdXJySXRlbS5pbml0aWFsWm9vbUxldmVsIDogZG91YmxlVGFwWm9vbUxldmVsLCBjZW50ZXJQb2ludCwgMzMzKTtcblx0XHRcdGZyYW1ld29ya1sgKCF6b29tT3V0ID8gJ2FkZCcgOiAncmVtb3ZlJykgKyAnQ2xhc3MnXSh0ZW1wbGF0ZSwgJ3Bzd3AtLXpvb21lZC1pbicpO1xuXHRcdH1cblxuXHR9XG59KTtcblxuXG4vKj4+ZGVza3RvcC16b29tKi9cblxuLyo+Pmhpc3RvcnkqL1xuLyoqXG4gKlxuICogaGlzdG9yeS5qczpcbiAqXG4gKiAtIEJhY2sgYnV0dG9uIHRvIGNsb3NlIGdhbGxlcnkuXG4gKiBcbiAqIC0gVW5pcXVlIFVSTCBmb3IgZWFjaCBzbGlkZTogZXhhbXBsZS5jb20vJnBpZD0xJmdpZD0zXG4gKiAgICh3aGVyZSBQSUQgaXMgcGljdHVyZSBpbmRleCwgYW5kIEdJRCBhbmQgZ2FsbGVyeSBpbmRleClcbiAqICAgXG4gKiAtIFN3aXRjaCBVUkwgd2hlbiBzbGlkZXMgY2hhbmdlLlxuICogXG4gKi9cblxuXG52YXIgX2hpc3RvcnlEZWZhdWx0T3B0aW9ucyA9IHtcblx0aGlzdG9yeTogdHJ1ZSxcblx0Z2FsbGVyeVVJRDogMVxufTtcblxudmFyIF9oaXN0b3J5VXBkYXRlVGltZW91dCxcblx0X2hhc2hDaGFuZ2VUaW1lb3V0LFxuXHRfaGFzaEFuaW1DaGVja1RpbWVvdXQsXG5cdF9oYXNoQ2hhbmdlZEJ5U2NyaXB0LFxuXHRfaGFzaENoYW5nZWRCeUhpc3RvcnksXG5cdF9oYXNoUmVzZXRlZCxcblx0X2luaXRpYWxIYXNoLFxuXHRfaGlzdG9yeUNoYW5nZWQsXG5cdF9jbG9zZWRGcm9tVVJMLFxuXHRfdXJsQ2hhbmdlZE9uY2UsXG5cdF93aW5kb3dMb2MsXG5cblx0X3N1cHBvcnRzUHVzaFN0YXRlLFxuXG5cdF9nZXRIYXNoID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIF93aW5kb3dMb2MuaGFzaC5zdWJzdHJpbmcoMSk7XG5cdH0sXG5cdF9jbGVhbkhpc3RvcnlUaW1lb3V0cyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYoX2hpc3RvcnlVcGRhdGVUaW1lb3V0KSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoX2hpc3RvcnlVcGRhdGVUaW1lb3V0KTtcblx0XHR9XG5cblx0XHRpZihfaGFzaEFuaW1DaGVja1RpbWVvdXQpIHtcblx0XHRcdGNsZWFyVGltZW91dChfaGFzaEFuaW1DaGVja1RpbWVvdXQpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBwaWQgLSBQaWN0dXJlIGluZGV4XG5cdC8vIGdpZCAtIEdhbGxlcnkgaW5kZXhcblx0X3BhcnNlSXRlbUluZGV4RnJvbVVSTCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBoYXNoID0gX2dldEhhc2goKSxcblx0XHRcdHBhcmFtcyA9IHt9O1xuXG5cdFx0aWYoaGFzaC5sZW5ndGggPCA1KSB7IC8vIHBpZD0xXG5cdFx0XHRyZXR1cm4gcGFyYW1zO1xuXHRcdH1cblxuXHRcdHZhciBpLCB2YXJzID0gaGFzaC5zcGxpdCgnJicpO1xuXHRcdGZvciAoaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZighdmFyc1tpXSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdHZhciBwYWlyID0gdmFyc1tpXS5zcGxpdCgnPScpO1x0XG5cdFx0XHRpZihwYWlyLmxlbmd0aCA8IDIpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cdFx0XHRwYXJhbXNbcGFpclswXV0gPSBwYWlyWzFdO1xuXHRcdH1cblx0XHRpZihfb3B0aW9ucy5nYWxsZXJ5UElEcykge1xuXHRcdFx0Ly8gZGV0ZWN0IGN1c3RvbSBwaWQgaW4gaGFzaCBhbmQgc2VhcmNoIGZvciBpdCBhbW9uZyB0aGUgaXRlbXMgY29sbGVjdGlvblxuXHRcdFx0dmFyIHNlYXJjaGZvciA9IHBhcmFtcy5waWQ7XG5cdFx0XHRwYXJhbXMucGlkID0gMDsgLy8gaWYgY3VzdG9tIHBpZCBjYW5ub3QgYmUgZm91bmQsIGZhbGxiYWNrIHRvIHRoZSBmaXJzdCBpdGVtXG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBfaXRlbXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYoX2l0ZW1zW2ldLnBpZCA9PT0gc2VhcmNoZm9yKSB7XG5cdFx0XHRcdFx0cGFyYW1zLnBpZCA9IGk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0cGFyYW1zLnBpZCA9IHBhcnNlSW50KHBhcmFtcy5waWQsMTApLTE7XG5cdFx0fVxuXHRcdGlmKCBwYXJhbXMucGlkIDwgMCApIHtcblx0XHRcdHBhcmFtcy5waWQgPSAwO1xuXHRcdH1cblx0XHRyZXR1cm4gcGFyYW1zO1xuXHR9LFxuXHRfdXBkYXRlSGFzaCA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYoX2hhc2hBbmltQ2hlY2tUaW1lb3V0KSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoX2hhc2hBbmltQ2hlY2tUaW1lb3V0KTtcblx0XHR9XG5cblxuXHRcdGlmKF9udW1BbmltYXRpb25zIHx8IF9pc0RyYWdnaW5nKSB7XG5cdFx0XHQvLyBjaGFuZ2luZyBicm93c2VyIFVSTCBmb3JjZXMgbGF5b3V0L3BhaW50IGluIHNvbWUgYnJvd3NlcnMsIHdoaWNoIGNhdXNlcyBub3RpY2FibGUgbGFnIGR1cmluZyBhbmltYXRpb25cblx0XHRcdC8vIHRoYXQncyB3aHkgd2UgdXBkYXRlIGhhc2ggb25seSB3aGVuIG5vIGFuaW1hdGlvbnMgcnVubmluZ1xuXHRcdFx0X2hhc2hBbmltQ2hlY2tUaW1lb3V0ID0gc2V0VGltZW91dChfdXBkYXRlSGFzaCwgNTAwKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0aWYoX2hhc2hDaGFuZ2VkQnlTY3JpcHQpIHtcblx0XHRcdGNsZWFyVGltZW91dChfaGFzaENoYW5nZVRpbWVvdXQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRfaGFzaENoYW5nZWRCeVNjcmlwdCA9IHRydWU7XG5cdFx0fVxuXG5cblx0XHR2YXIgcGlkID0gKF9jdXJyZW50SXRlbUluZGV4ICsgMSk7XG5cdFx0dmFyIGl0ZW0gPSBfZ2V0SXRlbUF0KCBfY3VycmVudEl0ZW1JbmRleCApO1xuXHRcdGlmKGl0ZW0uaGFzT3duUHJvcGVydHkoJ3BpZCcpKSB7XG5cdFx0XHQvLyBjYXJyeSBmb3J3YXJkIGFueSBjdXN0b20gcGlkIGFzc2lnbmVkIHRvIHRoZSBpdGVtXG5cdFx0XHRwaWQgPSBpdGVtLnBpZDtcblx0XHR9XG5cdFx0dmFyIG5ld0hhc2ggPSBfaW5pdGlhbEhhc2ggKyAnJicgICsgICdnaWQ9JyArIF9vcHRpb25zLmdhbGxlcnlVSUQgKyAnJicgKyAncGlkPScgKyBwaWQ7XG5cblx0XHRpZighX2hpc3RvcnlDaGFuZ2VkKSB7XG5cdFx0XHRpZihfd2luZG93TG9jLmhhc2guaW5kZXhPZihuZXdIYXNoKSA9PT0gLTEpIHtcblx0XHRcdFx0X3VybENoYW5nZWRPbmNlID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdC8vIGZpcnN0IHRpbWUgLSBhZGQgbmV3IGhpc29yeSByZWNvcmQsIHRoZW4ganVzdCByZXBsYWNlXG5cdFx0fVxuXG5cdFx0dmFyIG5ld1VSTCA9IF93aW5kb3dMb2MuaHJlZi5zcGxpdCgnIycpWzBdICsgJyMnICsgIG5ld0hhc2g7XG5cblx0XHRpZiggX3N1cHBvcnRzUHVzaFN0YXRlICkge1xuXG5cdFx0XHRpZignIycgKyBuZXdIYXNoICE9PSB3aW5kb3cubG9jYXRpb24uaGFzaCkge1xuXHRcdFx0XHRoaXN0b3J5W19oaXN0b3J5Q2hhbmdlZCA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKCcnLCBkb2N1bWVudC50aXRsZSwgbmV3VVJMKTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZihfaGlzdG9yeUNoYW5nZWQpIHtcblx0XHRcdFx0X3dpbmRvd0xvYy5yZXBsYWNlKCBuZXdVUkwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF93aW5kb3dMb2MuaGFzaCA9IG5ld0hhc2g7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdFxuXG5cdFx0X2hpc3RvcnlDaGFuZ2VkID0gdHJ1ZTtcblx0XHRfaGFzaENoYW5nZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0X2hhc2hDaGFuZ2VkQnlTY3JpcHQgPSBmYWxzZTtcblx0XHR9LCA2MCk7XG5cdH07XG5cblxuXG5cdFxuXG5fcmVnaXN0ZXJNb2R1bGUoJ0hpc3RvcnknLCB7XG5cblx0XG5cblx0cHVibGljTWV0aG9kczoge1xuXHRcdGluaXRIaXN0b3J5OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0ZnJhbWV3b3JrLmV4dGVuZChfb3B0aW9ucywgX2hpc3RvcnlEZWZhdWx0T3B0aW9ucywgdHJ1ZSk7XG5cblx0XHRcdGlmKCAhX29wdGlvbnMuaGlzdG9yeSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cblx0XHRcdF93aW5kb3dMb2MgPSB3aW5kb3cubG9jYXRpb247XG5cdFx0XHRfdXJsQ2hhbmdlZE9uY2UgPSBmYWxzZTtcblx0XHRcdF9jbG9zZWRGcm9tVVJMID0gZmFsc2U7XG5cdFx0XHRfaGlzdG9yeUNoYW5nZWQgPSBmYWxzZTtcblx0XHRcdF9pbml0aWFsSGFzaCA9IF9nZXRIYXNoKCk7XG5cdFx0XHRfc3VwcG9ydHNQdXNoU3RhdGUgPSAoJ3B1c2hTdGF0ZScgaW4gaGlzdG9yeSk7XG5cblxuXHRcdFx0aWYoX2luaXRpYWxIYXNoLmluZGV4T2YoJ2dpZD0nKSA+IC0xKSB7XG5cdFx0XHRcdF9pbml0aWFsSGFzaCA9IF9pbml0aWFsSGFzaC5zcGxpdCgnJmdpZD0nKVswXTtcblx0XHRcdFx0X2luaXRpYWxIYXNoID0gX2luaXRpYWxIYXNoLnNwbGl0KCc/Z2lkPScpWzBdO1xuXHRcdFx0fVxuXHRcdFx0XG5cblx0XHRcdF9saXN0ZW4oJ2FmdGVyQ2hhbmdlJywgc2VsZi51cGRhdGVVUkwpO1xuXHRcdFx0X2xpc3RlbigndW5iaW5kRXZlbnRzJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZyYW1ld29yay51bmJpbmQod2luZG93LCAnaGFzaGNoYW5nZScsIHNlbGYub25IYXNoQ2hhbmdlKTtcblx0XHRcdH0pO1xuXG5cblx0XHRcdHZhciByZXR1cm5Ub09yaWdpbmFsID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9oYXNoUmVzZXRlZCA9IHRydWU7XG5cdFx0XHRcdGlmKCFfY2xvc2VkRnJvbVVSTCkge1xuXG5cdFx0XHRcdFx0aWYoX3VybENoYW5nZWRPbmNlKSB7XG5cdFx0XHRcdFx0XHRoaXN0b3J5LmJhY2soKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpZihfaW5pdGlhbEhhc2gpIHtcblx0XHRcdFx0XHRcdFx0X3dpbmRvd0xvYy5oYXNoID0gX2luaXRpYWxIYXNoO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0aWYgKF9zdXBwb3J0c1B1c2hTdGF0ZSkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gcmVtb3ZlIGhhc2ggZnJvbSB1cmwgd2l0aG91dCByZWZyZXNoaW5nIGl0IG9yIHNjcm9sbGluZyB0byB0b3Bcblx0XHRcdFx0XHRcdFx0XHRoaXN0b3J5LnB1c2hTdGF0ZSgnJywgZG9jdW1lbnQudGl0bGUsICBfd2luZG93TG9jLnBhdGhuYW1lICsgX3dpbmRvd0xvYy5zZWFyY2ggKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRfd2luZG93TG9jLmhhc2ggPSAnJztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcblx0XHRcdFx0fVxuXG5cdFx0XHRcdF9jbGVhbkhpc3RvcnlUaW1lb3V0cygpO1xuXHRcdFx0fTtcblxuXG5cdFx0XHRfbGlzdGVuKCd1bmJpbmRFdmVudHMnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoX2Nsb3NlZEJ5U2Nyb2xsKSB7XG5cdFx0XHRcdFx0Ly8gaWYgUGhvdG9Td2lwZSBpcyBjbG9zZWQgYnkgc2Nyb2xsLCB3ZSBnbyBcImJhY2tcIiBiZWZvcmUgdGhlIGNsb3NpbmcgYW5pbWF0aW9uIHN0YXJ0c1xuXHRcdFx0XHRcdC8vIHRoaXMgaXMgZG9uZSB0byBrZWVwIHRoZSBzY3JvbGwgcG9zaXRpb25cblx0XHRcdFx0XHRyZXR1cm5Ub09yaWdpbmFsKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0X2xpc3RlbignZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZighX2hhc2hSZXNldGVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuVG9PcmlnaW5hbCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdF9saXN0ZW4oJ2ZpcnN0VXBkYXRlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9jdXJyZW50SXRlbUluZGV4ID0gX3BhcnNlSXRlbUluZGV4RnJvbVVSTCgpLnBpZDtcblx0XHRcdH0pO1xuXG5cdFx0XHRcblxuXHRcdFx0XG5cdFx0XHR2YXIgaW5kZXggPSBfaW5pdGlhbEhhc2guaW5kZXhPZigncGlkPScpO1xuXHRcdFx0aWYoaW5kZXggPiAtMSkge1xuXHRcdFx0XHRfaW5pdGlhbEhhc2ggPSBfaW5pdGlhbEhhc2guc3Vic3RyaW5nKDAsIGluZGV4KTtcblx0XHRcdFx0aWYoX2luaXRpYWxIYXNoLnNsaWNlKC0xKSA9PT0gJyYnKSB7XG5cdFx0XHRcdFx0X2luaXRpYWxIYXNoID0gX2luaXRpYWxIYXNoLnNsaWNlKDAsIC0xKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cblx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKF9pc09wZW4pIHsgLy8gaGFzbid0IGRlc3Ryb3llZCB5ZXRcblx0XHRcdFx0XHRmcmFtZXdvcmsuYmluZCh3aW5kb3csICdoYXNoY2hhbmdlJywgc2VsZi5vbkhhc2hDaGFuZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCA0MCk7XG5cdFx0XHRcblx0XHR9LFxuXHRcdG9uSGFzaENoYW5nZTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdGlmKF9nZXRIYXNoKCkgPT09IF9pbml0aWFsSGFzaCkge1xuXG5cdFx0XHRcdF9jbG9zZWRGcm9tVVJMID0gdHJ1ZTtcblx0XHRcdFx0c2VsZi5jbG9zZSgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZighX2hhc2hDaGFuZ2VkQnlTY3JpcHQpIHtcblxuXHRcdFx0XHRfaGFzaENoYW5nZWRCeUhpc3RvcnkgPSB0cnVlO1xuXHRcdFx0XHRzZWxmLmdvVG8oIF9wYXJzZUl0ZW1JbmRleEZyb21VUkwoKS5waWQgKTtcblx0XHRcdFx0X2hhc2hDaGFuZ2VkQnlIaXN0b3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9LFxuXHRcdHVwZGF0ZVVSTDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERlbGF5IHRoZSB1cGRhdGUgb2YgVVJMLCB0byBhdm9pZCBsYWcgZHVyaW5nIHRyYW5zaXRpb24sIFxuXHRcdFx0Ly8gYW5kIHRvIG5vdCB0byB0cmlnZ2VyIGFjdGlvbnMgbGlrZSBcInJlZnJlc2ggcGFnZSBzb3VuZFwiIG9yIFwiYmxpbmtpbmcgZmF2aWNvblwiIHRvIG9mdGVuXG5cdFx0XHRcblx0XHRcdF9jbGVhbkhpc3RvcnlUaW1lb3V0cygpO1xuXHRcdFx0XG5cblx0XHRcdGlmKF9oYXNoQ2hhbmdlZEJ5SGlzdG9yeSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFfaGlzdG9yeUNoYW5nZWQpIHtcblx0XHRcdFx0X3VwZGF0ZUhhc2goKTsgLy8gZmlyc3QgdGltZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0X2hpc3RvcnlVcGRhdGVUaW1lb3V0ID0gc2V0VGltZW91dChfdXBkYXRlSGFzaCwgODAwKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHR9XG59KTtcblxuXG4vKj4+aGlzdG9yeSovXG5cdGZyYW1ld29yay5leHRlbmQoc2VsZiwgcHVibGljTWV0aG9kcyk7IH07XG5cdHJldHVybiBQaG90b1N3aXBlO1xufSk7IiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFBseXJcbi8vIHBseXIuanMgdjIuMC4xMFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlbHovcGx5clxuLy8gTGljZW5zZTogVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQ3JlZGl0czogaHR0cDovL3BheXBhbC5naXRodWIuaW8vYWNjZXNzaWJsZS1odG1sNS12aWRlby1wbGF5ZXIvXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG47KGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgLypnbG9iYWwgZGVmaW5lLG1vZHVsZSovXG5cbiAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBOb2RlLCBDb21tb25KUy1saWtlXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyb290LCBkb2N1bWVudCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1EXG4gICAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFjdG9yeShyb290LCBkb2N1bWVudCk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgICAgIHJvb3QucGx5ciA9IGZhY3Rvcnkocm9vdCwgZG9jdW1lbnQpO1xuICAgIH1cbn0odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gR2xvYmFsc1xuICAgIHZhciBmdWxsc2NyZWVuLFxuICAgIHNjcm9sbCA9IHsgeDogMCwgeTogMCB9LFxuXG4gICAgLy8gRGVmYXVsdCBjb25maWdcbiAgICBkZWZhdWx0cyA9IHtcbiAgICAgICAgZW5hYmxlZDogICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgZGVidWc6ICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgIGF1dG9wbGF5OiAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICBsb29wOiAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgc2Vla1RpbWU6ICAgICAgICAgICAgICAgMTAsXG4gICAgICAgIHZvbHVtZTogICAgICAgICAgICAgICAgIDEwLFxuICAgICAgICB2b2x1bWVNaW46ICAgICAgICAgICAgICAwLFxuICAgICAgICB2b2x1bWVNYXg6ICAgICAgICAgICAgICAxMCxcbiAgICAgICAgdm9sdW1lU3RlcDogICAgICAgICAgICAgMSxcbiAgICAgICAgZHVyYXRpb246ICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgZGlzcGxheUR1cmF0aW9uOiAgICAgICAgdHJ1ZSxcbiAgICAgICAgbG9hZFNwcml0ZTogICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgaWNvblByZWZpeDogICAgICAgICAgICAgJ3BseXInLFxuICAgICAgICBpY29uVXJsOiAgICAgICAgICAgICAgICAnaHR0cHM6Ly9jZG4ucGx5ci5pby8yLjAuMTAvcGx5ci5zdmcnLFxuICAgICAgICBjbGlja1RvUGxheTogICAgICAgICAgICB0cnVlLFxuICAgICAgICBoaWRlQ29udHJvbHM6ICAgICAgICAgICB0cnVlLFxuICAgICAgICBzaG93UG9zdGVyT25FbmQ6ICAgICAgICBmYWxzZSxcbiAgICAgICAgZGlzYWJsZUNvbnRleHRNZW51OiAgICAgdHJ1ZSxcbiAgICAgICAga2V5Ym9hcmRTaG9yY3V0czogICAgICAge1xuICAgICAgICAgICAgZm9jdXNlZDogICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZ2xvYmFsOiAgICAgICAgICAgICBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwczoge1xuICAgICAgICAgICAgY29udHJvbHM6ICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHNlZWs6ICAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBzZWxlY3RvcnM6IHtcbiAgICAgICAgICAgIGh0bWw1OiAgICAgICAgICAgICAgJ3ZpZGVvLCBhdWRpbycsXG4gICAgICAgICAgICBlbWJlZDogICAgICAgICAgICAgICdbZGF0YS10eXBlXScsXG4gICAgICAgICAgICBlZGl0YWJsZTogICAgICAgICAgICdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCwgW2NvbnRlbnRlZGl0YWJsZV0nLFxuICAgICAgICAgICAgY29udGFpbmVyOiAgICAgICAgICAnLnBseXInLFxuICAgICAgICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgICAgICAgICBjb250YWluZXI6ICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3cmFwcGVyOiAgICAgICAgJy5wbHlyX19jb250cm9scydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYWJlbHM6ICAgICAgICAgICAgICdbZGF0YS1wbHlyXScsXG4gICAgICAgICAgICBidXR0b25zOiB7XG4gICAgICAgICAgICAgICAgc2VlazogICAgICAgICAgICdbZGF0YS1wbHlyPVwic2Vla1wiXScsXG4gICAgICAgICAgICAgICAgcGxheTogICAgICAgICAgICdbZGF0YS1wbHlyPVwicGxheVwiXScsXG4gICAgICAgICAgICAgICAgcGF1c2U6ICAgICAgICAgICdbZGF0YS1wbHlyPVwicGF1c2VcIl0nLFxuICAgICAgICAgICAgICAgIHJlc3RhcnQ6ICAgICAgICAnW2RhdGEtcGx5cj1cInJlc3RhcnRcIl0nLFxuICAgICAgICAgICAgICAgIHJld2luZDogICAgICAgICAnW2RhdGEtcGx5cj1cInJld2luZFwiXScsXG4gICAgICAgICAgICAgICAgZm9yd2FyZDogICAgICAgICdbZGF0YS1wbHlyPVwiZmFzdC1mb3J3YXJkXCJdJyxcbiAgICAgICAgICAgICAgICBtdXRlOiAgICAgICAgICAgJ1tkYXRhLXBseXI9XCJtdXRlXCJdJyxcbiAgICAgICAgICAgICAgICBjYXB0aW9uczogICAgICAgJ1tkYXRhLXBseXI9XCJjYXB0aW9uc1wiXScsXG4gICAgICAgICAgICAgICAgZnVsbHNjcmVlbjogICAgICdbZGF0YS1wbHlyPVwiZnVsbHNjcmVlblwiXSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2b2x1bWU6IHtcbiAgICAgICAgICAgICAgICBpbnB1dDogICAgICAgICAgJ1tkYXRhLXBseXI9XCJ2b2x1bWVcIl0nLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICAgICAgICAnLnBseXJfX3ZvbHVtZS0tZGlzcGxheSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9ncmVzczoge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogICAgICAnLnBseXJfX3Byb2dyZXNzJyxcbiAgICAgICAgICAgICAgICBidWZmZXI6ICAgICAgICAgJy5wbHlyX19wcm9ncmVzcy0tYnVmZmVyJyxcbiAgICAgICAgICAgICAgICBwbGF5ZWQ6ICAgICAgICAgJy5wbHlyX19wcm9ncmVzcy0tcGxheWVkJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhcHRpb25zOiAgICAgICAgICAgJy5wbHlyX19jYXB0aW9ucycsXG4gICAgICAgICAgICBjdXJyZW50VGltZTogICAgICAgICcucGx5cl9fdGltZS0tY3VycmVudCcsXG4gICAgICAgICAgICBkdXJhdGlvbjogICAgICAgICAgICcucGx5cl9fdGltZS0tZHVyYXRpb24nXG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzZXM6IHtcbiAgICAgICAgICAgIHNldHVwOiAgICAgICAgICAgICAgJ3BseXItLXNldHVwJyxcbiAgICAgICAgICAgIHJlYWR5OiAgICAgICAgICAgICAgJ3BseXItLXJlYWR5JyxcbiAgICAgICAgICAgIHZpZGVvV3JhcHBlcjogICAgICAgJ3BseXJfX3ZpZGVvLXdyYXBwZXInLFxuICAgICAgICAgICAgZW1iZWRXcmFwcGVyOiAgICAgICAncGx5cl9fdmlkZW8tZW1iZWQnLFxuICAgICAgICAgICAgdHlwZTogICAgICAgICAgICAgICAncGx5ci0tezB9JyxcbiAgICAgICAgICAgIHN0b3BwZWQ6ICAgICAgICAgICAgJ3BseXItLXN0b3BwZWQnLFxuICAgICAgICAgICAgcGxheWluZzogICAgICAgICAgICAncGx5ci0tcGxheWluZycsXG4gICAgICAgICAgICBtdXRlZDogICAgICAgICAgICAgICdwbHlyLS1tdXRlZCcsXG4gICAgICAgICAgICBsb2FkaW5nOiAgICAgICAgICAgICdwbHlyLS1sb2FkaW5nJyxcbiAgICAgICAgICAgIGhvdmVyOiAgICAgICAgICAgICAgJ3BseXItLWhvdmVyJyxcbiAgICAgICAgICAgIHRvb2x0aXA6ICAgICAgICAgICAgJ3BseXJfX3Rvb2x0aXAnLFxuICAgICAgICAgICAgaGlkZGVuOiAgICAgICAgICAgICAncGx5cl9fc3Itb25seScsXG4gICAgICAgICAgICBoaWRlQ29udHJvbHM6ICAgICAgICdwbHlyLS1oaWRlLWNvbnRyb2xzJyxcbiAgICAgICAgICAgIGlzSW9zOiAgICAgICAgICAgICAgJ3BseXItLWlzLWlvcycsXG4gICAgICAgICAgICBpc1RvdWNoOiAgICAgICAgICAgICdwbHlyLS1pcy10b3VjaCcsXG4gICAgICAgICAgICBjYXB0aW9uczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6ICAgICAgICAncGx5ci0tY2FwdGlvbnMtZW5hYmxlZCcsXG4gICAgICAgICAgICAgICAgYWN0aXZlOiAgICAgICAgICdwbHlyLS1jYXB0aW9ucy1hY3RpdmUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVsbHNjcmVlbjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6ICAgICAgICAncGx5ci0tZnVsbHNjcmVlbi1lbmFibGVkJyxcbiAgICAgICAgICAgICAgICBhY3RpdmU6ICAgICAgICAgJ3BseXItLWZ1bGxzY3JlZW4tYWN0aXZlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRhYkZvY3VzOiAgICAgICAgICAgJ3RhYi1mb2N1cydcbiAgICAgICAgfSxcbiAgICAgICAgY2FwdGlvbnM6IHtcbiAgICAgICAgICAgIGRlZmF1bHRBY3RpdmU6ICAgICAgZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgZnVsbHNjcmVlbjoge1xuICAgICAgICAgICAgZW5hYmxlZDogICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgZmFsbGJhY2s6ICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgYWxsb3dBdWRpbzogICAgICAgICBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBzdG9yYWdlOiB7XG4gICAgICAgICAgICBlbmFibGVkOiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICBrZXk6ICAgICAgICAgICAgICAgICdwbHlyJ1xuICAgICAgICB9LFxuICAgICAgICBjb250cm9sczogICAgICAgICAgICAgICBbJ3BsYXktbGFyZ2UnLCAncGxheScsICdwcm9ncmVzcycsICdjdXJyZW50LXRpbWUnLCAnbXV0ZScsICd2b2x1bWUnLCAnY2FwdGlvbnMnLCAnZnVsbHNjcmVlbiddLFxuICAgICAgICBpMThuOiB7XG4gICAgICAgICAgICByZXN0YXJ0OiAgICAgICAgICAgICdSZXN0YXJ0JyxcbiAgICAgICAgICAgIHJld2luZDogICAgICAgICAgICAgJ1Jld2luZCB7c2Vla3RpbWV9IHNlY3MnLFxuICAgICAgICAgICAgcGxheTogICAgICAgICAgICAgICAnUGxheScsXG4gICAgICAgICAgICBwYXVzZTogICAgICAgICAgICAgICdQYXVzZScsXG4gICAgICAgICAgICBmb3J3YXJkOiAgICAgICAgICAgICdGb3J3YXJkIHtzZWVrdGltZX0gc2VjcycsXG4gICAgICAgICAgICBwbGF5ZWQ6ICAgICAgICAgICAgICdwbGF5ZWQnLFxuICAgICAgICAgICAgYnVmZmVyZWQ6ICAgICAgICAgICAnYnVmZmVyZWQnLFxuICAgICAgICAgICAgY3VycmVudFRpbWU6ICAgICAgICAnQ3VycmVudCB0aW1lJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiAgICAgICAgICAgJ0R1cmF0aW9uJyxcbiAgICAgICAgICAgIHZvbHVtZTogICAgICAgICAgICAgJ1ZvbHVtZScsXG4gICAgICAgICAgICB0b2dnbGVNdXRlOiAgICAgICAgICdUb2dnbGUgTXV0ZScsXG4gICAgICAgICAgICB0b2dnbGVDYXB0aW9uczogICAgICdUb2dnbGUgQ2FwdGlvbnMnLFxuICAgICAgICAgICAgdG9nZ2xlRnVsbHNjcmVlbjogICAnVG9nZ2xlIEZ1bGxzY3JlZW4nLFxuICAgICAgICAgICAgZnJhbWVUaXRsZTogICAgICAgICAnUGxheWVyIGZvciB7dGl0bGV9J1xuICAgICAgICB9LFxuICAgICAgICB0eXBlczoge1xuICAgICAgICAgICAgZW1iZWQ6ICAgICAgICAgICAgICBbJ3lvdXR1YmUnLCAndmltZW8nLCAnc291bmRjbG91ZCddLFxuICAgICAgICAgICAgaHRtbDU6ICAgICAgICAgICAgICBbJ3ZpZGVvJywgJ2F1ZGlvJ11cbiAgICAgICAgfSxcbiAgICAgICAgLy8gVVJMc1xuICAgICAgICB1cmxzOiB7XG4gICAgICAgICAgICB2aW1lbzoge1xuICAgICAgICAgICAgICAgIGFwaTogICAgICAgICAgICAnaHR0cHM6Ly9wbGF5ZXIudmltZW8uY29tL2FwaS9wbGF5ZXIuanMnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlvdXR1YmU6IHtcbiAgICAgICAgICAgICAgICBhcGk6ICAgICAgICAgICAgJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc291bmRjbG91ZDoge1xuICAgICAgICAgICAgICAgIGFwaTogICAgICAgICAgICAnaHR0cHM6Ly93LnNvdW5kY2xvdWQuY29tL3BsYXllci9hcGkuanMnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEN1c3RvbSBjb250cm9sIGxpc3RlbmVyc1xuICAgICAgICBsaXN0ZW5lcnM6IHtcbiAgICAgICAgICAgIHNlZWs6ICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHBsYXk6ICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHBhdXNlOiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHJlc3RhcnQ6ICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHJld2luZDogICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGZvcndhcmQ6ICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG11dGU6ICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHZvbHVtZTogICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGNhcHRpb25zOiAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGZ1bGxzY3JlZW46ICAgICAgICAgbnVsbFxuICAgICAgICB9LFxuICAgICAgICAvLyBFdmVudHMgdG8gd2F0Y2ggb24gSFRNTDUgbWVkaWEgZWxlbWVudHNcbiAgICAgICAgZXZlbnRzOiAgICAgICAgICAgICAgICAgWydyZWFkeScsICdlbmRlZCcsICdwcm9ncmVzcycsICdzdGFsbGVkJywgJ3BsYXlpbmcnLCAnd2FpdGluZycsICdjYW5wbGF5JywgJ2NhbnBsYXl0aHJvdWdoJywgJ2xvYWRzdGFydCcsICdsb2FkZWRkYXRhJywgJ2xvYWRlZG1ldGFkYXRhJywgJ3RpbWV1cGRhdGUnLCAndm9sdW1lY2hhbmdlJywgJ3BsYXknLCAncGF1c2UnLCAnZXJyb3InLCAnc2Vla2luZycsICdzZWVrZWQnLCAnZW1wdGllZCddLFxuICAgICAgICAvLyBMb2dnaW5nXG4gICAgICAgIGxvZ1ByZWZpeDogICAgICAgICAgICAgICdbUGx5cl0nXG4gICAgfTtcblxuICAgIC8vIENyZWRpdHM6IGh0dHA6Ly9wYXlwYWwuZ2l0aHViLmlvL2FjY2Vzc2libGUtaHRtbDUtdmlkZW8tcGxheWVyL1xuICAgIC8vIFVuZm9ydHVuYXRlbHksIGR1ZSB0byBtaXhlZCBzdXBwb3J0LCBVQSBzbmlmZmluZyBpcyByZXF1aXJlZFxuICAgIGZ1bmN0aW9uIF9icm93c2VyU25pZmYoKSB7XG4gICAgICAgIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICAgICBuYW1lID0gbmF2aWdhdG9yLmFwcE5hbWUsXG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9ICcnICsgcGFyc2VGbG9hdChuYXZpZ2F0b3IuYXBwVmVyc2lvbiksXG4gICAgICAgICAgICBtYWpvclZlcnNpb24gPSBwYXJzZUludChuYXZpZ2F0b3IuYXBwVmVyc2lvbiwgMTApLFxuICAgICAgICAgICAgbmFtZU9mZnNldCxcbiAgICAgICAgICAgIHZlck9mZnNldCxcbiAgICAgICAgICAgIGl4LFxuICAgICAgICAgICAgaXNJRSA9IGZhbHNlLFxuICAgICAgICAgICAgaXNGaXJlZm94ID0gZmFsc2UsXG4gICAgICAgICAgICBpc0Nocm9tZSA9IGZhbHNlLFxuICAgICAgICAgICAgaXNTYWZhcmkgPSBmYWxzZTtcblxuICAgICAgICBpZiAoKG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoJ1dpbmRvd3MgTlQnKSAhPT0gLTEpICYmIChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKCdydjoxMScpICE9PSAtMSkpIHtcbiAgICAgICAgICAgIC8vIE1TSUUgMTFcbiAgICAgICAgICAgIGlzSUUgPSB0cnVlO1xuICAgICAgICAgICAgbmFtZSA9ICdJRSc7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9ICcxMSc7XG4gICAgICAgIH0gZWxzZSBpZiAoKHZlck9mZnNldCA9IHVhLmluZGV4T2YoJ01TSUUnKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBNU0lFXG4gICAgICAgICAgICBpc0lFID0gdHJ1ZTtcbiAgICAgICAgICAgIG5hbWUgPSAnSUUnO1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSB1YS5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgNSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKHZlck9mZnNldCA9IHVhLmluZGV4T2YoJ0Nocm9tZScpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIENocm9tZVxuICAgICAgICAgICAgaXNDaHJvbWUgPSB0cnVlO1xuICAgICAgICAgICAgbmFtZSA9ICdDaHJvbWUnO1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSB1YS5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgNyk7XG4gICAgICAgIH0gZWxzZSBpZiAoKHZlck9mZnNldCA9IHVhLmluZGV4T2YoJ1NhZmFyaScpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFNhZmFyaVxuICAgICAgICAgICAgaXNTYWZhcmkgPSB0cnVlO1xuICAgICAgICAgICAgbmFtZSA9ICdTYWZhcmknO1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSB1YS5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgNyk7XG4gICAgICAgICAgICBpZiAoKHZlck9mZnNldCA9IHVhLmluZGV4T2YoJ1ZlcnNpb24nKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgZnVsbFZlcnNpb24gPSB1YS5zdWJzdHJpbmcodmVyT2Zmc2V0ICsgOCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoKHZlck9mZnNldCA9IHVhLmluZGV4T2YoJ0ZpcmVmb3gnKSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBGaXJlZm94XG4gICAgICAgICAgICBpc0ZpcmVmb3ggPSB0cnVlO1xuICAgICAgICAgICAgbmFtZSA9ICdGaXJlZm94JztcbiAgICAgICAgICAgIGZ1bGxWZXJzaW9uID0gdWEuc3Vic3RyaW5nKHZlck9mZnNldCArIDgpO1xuICAgICAgICB9IGVsc2UgaWYgKChuYW1lT2Zmc2V0ID0gdWEubGFzdEluZGV4T2YoJyAnKSArIDEpIDwgKHZlck9mZnNldCA9IHVhLmxhc3RJbmRleE9mKCcvJykpKSB7XG4gICAgICAgICAgICAvLyBJbiBtb3N0IG90aGVyIGJyb3dzZXJzLCAnbmFtZS92ZXJzaW9uJyBpcyBhdCB0aGUgZW5kIG9mIHVzZXJBZ2VudFxuICAgICAgICAgICAgbmFtZSA9IHVhLnN1YnN0cmluZyhuYW1lT2Zmc2V0LHZlck9mZnNldCk7XG4gICAgICAgICAgICBmdWxsVmVyc2lvbiA9IHVhLnN1YnN0cmluZyh2ZXJPZmZzZXQgKyAxKTtcblxuICAgICAgICAgICAgaWYgKG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hdmlnYXRvci5hcHBOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVHJpbSB0aGUgZnVsbFZlcnNpb24gc3RyaW5nIGF0IHNlbWljb2xvbi9zcGFjZSBpZiBwcmVzZW50XG4gICAgICAgIGlmICgoaXggPSBmdWxsVmVyc2lvbi5pbmRleE9mKCc7JykpICE9PSAtMSkge1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSBmdWxsVmVyc2lvbi5zdWJzdHJpbmcoMCwgaXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoaXggPSBmdWxsVmVyc2lvbi5pbmRleE9mKCcgJykpICE9PSAtMSkge1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSBmdWxsVmVyc2lvbi5zdWJzdHJpbmcoMCwgaXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IG1ham9yIHZlcnNpb25cbiAgICAgICAgbWFqb3JWZXJzaW9uID0gcGFyc2VJbnQoJycgKyBmdWxsVmVyc2lvbiwgMTApO1xuICAgICAgICBpZiAoaXNOYU4obWFqb3JWZXJzaW9uKSkge1xuICAgICAgICAgICAgZnVsbFZlcnNpb24gPSAnJyArIHBhcnNlRmxvYXQobmF2aWdhdG9yLmFwcFZlcnNpb24pO1xuICAgICAgICAgICAgbWFqb3JWZXJzaW9uID0gcGFyc2VJbnQobmF2aWdhdG9yLmFwcFZlcnNpb24sIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJldHVybiBkYXRhXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiAgICAgICBuYW1lLFxuICAgICAgICAgICAgdmVyc2lvbjogICAgbWFqb3JWZXJzaW9uLFxuICAgICAgICAgICAgaXNJRTogICAgICAgaXNJRSxcbiAgICAgICAgICAgIGlzRmlyZWZveDogIGlzRmlyZWZveCxcbiAgICAgICAgICAgIGlzQ2hyb21lOiAgIGlzQ2hyb21lLFxuICAgICAgICAgICAgaXNTYWZhcmk6ICAgaXNTYWZhcmksXG4gICAgICAgICAgICBpc0lvczogICAgICAvKGlQYWR8aVBob25lfGlQb2QpL2cudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pLFxuICAgICAgICAgICAgaXNUb3VjaDogICAgJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIG1pbWUgdHlwZSBzdXBwb3J0IGFnYWluc3QgYSBwbGF5ZXIgaW5zdGFuY2VcbiAgICAvLyBDcmVkaXRzOiBodHRwOi8vZGl2ZWludG9odG1sNS5pbmZvL2V2ZXJ5dGhpbmcuaHRtbFxuICAgIC8vIFJlbGF0ZWQ6IGh0dHA6Ly93d3cubGVhbmJhY2twbHlyLmNvbS90ZXN0L2g1bXQuaHRtbFxuICAgIGZ1bmN0aW9uIF9zdXBwb3J0TWltZShwbHlyLCBtaW1lVHlwZSkge1xuICAgICAgICB2YXIgbWVkaWEgPSBwbHlyLm1lZGlhO1xuXG4gICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIHR5cGVcbiAgICAgICAgICAgIHN3aXRjaCAobWltZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd2aWRlby93ZWJtJzogICByZXR1cm4gISEobWVkaWEuY2FuUGxheVR5cGUgJiYgbWVkaWEuY2FuUGxheVR5cGUoJ3ZpZGVvL3dlYm07IGNvZGVjcz1cInZwOCwgdm9yYmlzXCInKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAndmlkZW8vbXA0JzogICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCd2aWRlby9tcDQ7IGNvZGVjcz1cImF2YzEuNDJFMDFFLCBtcDRhLjQwLjJcIicpLnJlcGxhY2UoL25vLywgJycpKTtcbiAgICAgICAgICAgICAgICBjYXNlICd2aWRlby9vZ2cnOiAgICByZXR1cm4gISEobWVkaWEuY2FuUGxheVR5cGUgJiYgbWVkaWEuY2FuUGxheVR5cGUoJ3ZpZGVvL29nZzsgY29kZWNzPVwidGhlb3JhXCInKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGx5ci50eXBlID09PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICAvLyBDaGVjayB0eXBlXG4gICAgICAgICAgICBzd2l0Y2ggKG1pbWVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXVkaW8vbXBlZyc6ICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCdhdWRpby9tcGVnOycpLnJlcGxhY2UoL25vLywgJycpKTtcbiAgICAgICAgICAgICAgICBjYXNlICdhdWRpby9vZ2cnOiAgICByZXR1cm4gISEobWVkaWEuY2FuUGxheVR5cGUgJiYgbWVkaWEuY2FuUGxheVR5cGUoJ2F1ZGlvL29nZzsgY29kZWNzPVwidm9yYmlzXCInKS5yZXBsYWNlKC9uby8sICcnKSk7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXVkaW8vd2F2JzogICAgcmV0dXJuICEhKG1lZGlhLmNhblBsYXlUeXBlICYmIG1lZGlhLmNhblBsYXlUeXBlKCdhdWRpby93YXY7IGNvZGVjcz1cIjFcIicpLnJlcGxhY2UoL25vLywgJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIGdvdCB0aGlzIGZhciwgd2UncmUgc3R1ZmZlZFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSW5qZWN0IGEgc2NyaXB0XG4gICAgZnVuY3Rpb24gX2luamVjdFNjcmlwdChzb3VyY2UpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdFtzcmM9XCInICsgc291cmNlICsgJ1wiXScpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICB0YWcuc3JjID0gc291cmNlO1xuICAgICAgICB2YXIgZmlyc3RTY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG4gICAgICAgIGZpcnN0U2NyaXB0VGFnLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRhZywgZmlyc3RTY3JpcHRUYWcpO1xuICAgIH1cblxuICAgIC8vIEVsZW1lbnQgZXhpc3RzIGluIGFuIGFycmF5XG4gICAgZnVuY3Rpb24gX2luQXJyYXkoaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YgJiYgKGhheXN0YWNrLmluZGV4T2YobmVlZGxlKSAhPT0gLTEpO1xuICAgIH1cblxuICAgIC8vIFJlcGxhY2UgYWxsXG4gICAgZnVuY3Rpb24gX3JlcGxhY2VBbGwoc3RyaW5nLCBmaW5kLCByZXBsYWNlKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKGZpbmQucmVwbGFjZSgvKFsuKis/XFxePSE6JHt9KCl8XFxbXFxdXFwvXFxcXF0pL2csICdcXFxcJDEnKSwgJ2cnKSwgcmVwbGFjZSk7XG4gICAgfVxuXG4gICAgLy8gV3JhcCBhbiBlbGVtZW50XG4gICAgZnVuY3Rpb24gX3dyYXAoZWxlbWVudHMsIHdyYXBwZXIpIHtcbiAgICAgICAgLy8gQ29udmVydCBgZWxlbWVudHNgIHRvIGFuIGFycmF5LCBpZiBuZWNlc3NhcnkuXG4gICAgICAgIGlmICghZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbGVtZW50cyA9IFtlbGVtZW50c107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMb29wcyBiYWNrd2FyZHMgdG8gcHJldmVudCBoYXZpbmcgdG8gY2xvbmUgdGhlIHdyYXBwZXIgb24gdGhlXG4gICAgICAgIC8vIGZpcnN0IGVsZW1lbnQgKHNlZSBgY2hpbGRgIGJlbG93KS5cbiAgICAgICAgZm9yICh2YXIgaSA9IGVsZW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGQgICA9IChpID4gMCkgPyB3cmFwcGVyLmNsb25lTm9kZSh0cnVlKSA6IHdyYXBwZXI7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuXG4gICAgICAgICAgICAvLyBDYWNoZSB0aGUgY3VycmVudCBwYXJlbnQgYW5kIHNpYmxpbmcuXG4gICAgICAgICAgICB2YXIgcGFyZW50ICA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIHZhciBzaWJsaW5nID0gZWxlbWVudC5uZXh0U2libGluZztcblxuICAgICAgICAgICAgLy8gV3JhcCB0aGUgZWxlbWVudCAoaXMgYXV0b21hdGljYWxseSByZW1vdmVkIGZyb20gaXRzIGN1cnJlbnRcbiAgICAgICAgICAgIC8vIHBhcmVudCkuXG4gICAgICAgICAgICBjaGlsZC5hcHBlbmRDaGlsZChlbGVtZW50KTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgaGFkIGEgc2libGluZywgaW5zZXJ0IHRoZSB3cmFwcGVyIGJlZm9yZVxuICAgICAgICAgICAgLy8gdGhlIHNpYmxpbmcgdG8gbWFpbnRhaW4gdGhlIEhUTUwgc3RydWN0dXJlOyBvdGhlcndpc2UsIGp1c3RcbiAgICAgICAgICAgIC8vIGFwcGVuZCBpdCB0byB0aGUgcGFyZW50LlxuICAgICAgICAgICAgaWYgKHNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBzaWJsaW5nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVW53cmFwIGFuIGVsZW1lbnRcbiAgICAvLyBodHRwOi8vcGxhaW5qcy5jb20vamF2YXNjcmlwdC9tYW5pcHVsYXRpb24vdW53cmFwLWEtZG9tLWVsZW1lbnQtMzUvXG4gICAgLypmdW5jdGlvbiBfdW53cmFwKHdyYXBwZXIpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBlbGVtZW50J3MgcGFyZW50IG5vZGVcbiAgICAgICAgdmFyIHBhcmVudCA9IHdyYXBwZXIucGFyZW50Tm9kZTtcblxuICAgICAgICAvLyBNb3ZlIGFsbCBjaGlsZHJlbiBvdXQgb2YgdGhlIGVsZW1lbnRcbiAgICAgICAgd2hpbGUgKHdyYXBwZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZSh3cmFwcGVyLmZpcnN0Q2hpbGQsIHdyYXBwZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBlbXB0eSBlbGVtZW50XG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZCh3cmFwcGVyKTtcbiAgICB9Ki9cblxuICAgIC8vIFJlbW92ZSBhbiBlbGVtZW50XG4gICAgZnVuY3Rpb24gX3JlbW92ZShlbGVtZW50KSB7XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICB9XG5cbiAgICAvLyBQcmVwZW5kIGNoaWxkXG4gICAgZnVuY3Rpb24gX3ByZXBlbmRDaGlsZChwYXJlbnQsIGVsZW1lbnQpIHtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCBwYXJlbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgLy8gU2V0IGF0dHJpYnV0ZXNcbiAgICBmdW5jdGlvbiBfc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIChfaXMuYm9vbGVhbihhdHRyaWJ1dGVzW2tleV0pICYmIGF0dHJpYnV0ZXNba2V5XSkgPyAnJyA6IGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbnNlcnQgYSBIVE1MIGVsZW1lbnRcbiAgICBmdW5jdGlvbiBfaW5zZXJ0RWxlbWVudCh0eXBlLCBwYXJlbnQsIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IDxlbGVtZW50PlxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG5cbiAgICAgICAgLy8gU2V0IGFsbCBwYXNzZWQgYXR0cmlidXRlc1xuICAgICAgICBfc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKTtcblxuICAgICAgICAvLyBJbmplY3QgdGhlIG5ldyBlbGVtZW50XG4gICAgICAgIF9wcmVwZW5kQ2hpbGQocGFyZW50LCBlbGVtZW50KTtcbiAgICB9XG5cbiAgICAvLyBHZXQgYSBjbGFzc25hbWUgZnJvbSBzZWxlY3RvclxuICAgIGZ1bmN0aW9uIF9nZXRDbGFzc25hbWUoc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yLnJlcGxhY2UoJy4nLCAnJyk7XG4gICAgfVxuXG4gICAgLy8gVG9nZ2xlIGNsYXNzIG9uIGFuIGVsZW1lbnRcbiAgICBmdW5jdGlvbiBfdG9nZ2xlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lLCBzdGF0ZSkge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3Rbc3RhdGUgPyAnYWRkJyA6ICdyZW1vdmUnXShjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9ICgnICcgKyBlbGVtZW50LmNsYXNzTmFtZSArICcgJykucmVwbGFjZSgvXFxzKy9nLCAnICcpLnJlcGxhY2UoJyAnICsgY2xhc3NOYW1lICsgJyAnLCAnJyk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBuYW1lICsgKHN0YXRlID8gJyAnICsgY2xhc3NOYW1lIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFzIGNsYXNzIG5hbWVcbiAgICBmdW5jdGlvbiBfaGFzQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJyhcXFxcc3xeKScgKyBjbGFzc05hbWUgKyAnKFxcXFxzfCQpJykudGVzdChlbGVtZW50LmNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEVsZW1lbnQgbWF0Y2hlcyBzZWxlY3RvclxuICAgIGZ1bmN0aW9uIF9tYXRjaGVzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBwID0gRWxlbWVudC5wcm90b3R5cGU7XG5cbiAgICAgICAgdmFyIGYgPSBwLm1hdGNoZXMgfHwgcC53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgcC5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgcC5tc01hdGNoZXNTZWxlY3RvciB8fCBmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICByZXR1cm4gW10uaW5kZXhPZi5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocyksIHRoaXMpICE9PSAtMTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZi5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICAvLyBCaW5kIGFsb25nIHdpdGggY3VzdG9tIGhhbmRsZXJcbiAgICBmdW5jdGlvbiBfcHJveHlMaXN0ZW5lcihlbGVtZW50LCBldmVudE5hbWUsIHVzZXJMaXN0ZW5lciwgZGVmYXVsdExpc3RlbmVyLCB1c2VDYXB0dXJlKSB7XG4gICAgICAgIF9vbihlbGVtZW50LCBldmVudE5hbWUsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAodXNlckxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgdXNlckxpc3RlbmVyLmFwcGx5KGVsZW1lbnQsIFtldmVudF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdExpc3RlbmVyLmFwcGx5KGVsZW1lbnQsIFtldmVudF0pO1xuICAgICAgICB9LCB1c2VDYXB0dXJlKTtcbiAgICB9XG5cbiAgICAvLyBUb2dnbGUgZXZlbnQgbGlzdGVuZXJcbiAgICBmdW5jdGlvbiBfdG9nZ2xlTGlzdGVuZXIoZWxlbWVudCwgZXZlbnRzLCBjYWxsYmFjaywgdG9nZ2xlLCB1c2VDYXB0dXJlKSB7XG4gICAgICAgIHZhciBldmVudExpc3QgPSBldmVudHMuc3BsaXQoJyAnKTtcblxuICAgICAgICAvLyBXaGV0aGVyIHRoZSBsaXN0ZW5lciBpcyBhIGNhcHR1cmluZyBsaXN0ZW5lciBvciBub3RcbiAgICAgICAgLy8gRGVmYXVsdCB0byBmYWxzZVxuICAgICAgICBpZiAoIV9pcy5ib29sZWFuKHVzZUNhcHR1cmUpKSB7XG4gICAgICAgICAgICB1c2VDYXB0dXJlID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBhIG5vZGVsaXN0IGlzIHBhc3NlZCwgY2FsbCBpdHNlbGYgb24gZWFjaCBub2RlXG4gICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgZWxlbWVudC5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50W3hdIGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlTGlzdGVuZXIoZWxlbWVudFt4XSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYSBzaW5nbGUgbm9kZSBpcyBwYXNzZWQsIGJpbmQgdGhlIGV2ZW50IGxpc3RlbmVyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBlbGVtZW50W3RvZ2dsZSA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJ10oZXZlbnRMaXN0W2ldLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBCaW5kIGV2ZW50XG4gICAgZnVuY3Rpb24gX29uKGVsZW1lbnQsIGV2ZW50cywgY2FsbGJhY2ssIHVzZUNhcHR1cmUpIHtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIF90b2dnbGVMaXN0ZW5lcihlbGVtZW50LCBldmVudHMsIGNhbGxiYWNrLCB0cnVlLCB1c2VDYXB0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVuYmluZCBldmVudFxuICAgIC8qZnVuY3Rpb24gX29mZihlbGVtZW50LCBldmVudHMsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKSB7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBfdG9nZ2xlTGlzdGVuZXIoZWxlbWVudCwgZXZlbnRzLCBjYWxsYmFjaywgZmFsc2UsIHVzZUNhcHR1cmUpO1xuICAgICAgICB9XG4gICAgfSovXG5cbiAgICAvLyBUcmlnZ2VyIGV2ZW50XG4gICAgZnVuY3Rpb24gX2V2ZW50KGVsZW1lbnQsIHR5cGUsIGJ1YmJsZXMsIHByb3BlcnRpZXMpIHtcbiAgICAgICAgLy8gQmFpbCBpZiBubyBlbGVtZW50XG4gICAgICAgIGlmICghZWxlbWVudCB8fCAhdHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmYXVsdCBidWJibGVzIHRvIGZhbHNlXG4gICAgICAgIGlmICghX2lzLmJvb2xlYW4oYnViYmxlcykpIHtcbiAgICAgICAgICAgIGJ1YmJsZXMgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhbmQgZGlzcGF0Y2ggdGhlIGV2ZW50XG4gICAgICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCh0eXBlLCB7XG4gICAgICAgICAgICBidWJibGVzOiAgICBidWJibGVzLFxuICAgICAgICAgICAgZGV0YWlsOiAgICAgcHJvcGVydGllc1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXZlbnRcbiAgICAgICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBUb2dnbGUgYXJpYS1wcmVzc2VkIHN0YXRlIG9uIGEgdG9nZ2xlIGJ1dHRvblxuICAgIC8vIGh0dHA6Ly93d3cuc3NiYmFydGdyb3VwLmNvbS9ibG9nL2hvdy1ub3QtdG8tbWlzdXNlLWFyaWEtc3RhdGVzLXByb3BlcnRpZXMtYW5kLXJvbGVzXG4gICAgZnVuY3Rpb24gX3RvZ2dsZVN0YXRlKHRhcmdldCwgc3RhdGUpIHtcbiAgICAgICAgLy8gQmFpbCBpZiBubyB0YXJnZXRcbiAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBzdGF0ZVxuICAgICAgICBzdGF0ZSA9IChfaXMuYm9vbGVhbihzdGF0ZSkgPyBzdGF0ZSA6ICF0YXJnZXQuZ2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnKSk7XG5cbiAgICAgICAgLy8gU2V0IHRoZSBhdHRyaWJ1dGUgb24gdGFyZ2V0XG4gICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsIHN0YXRlKTtcblxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgLy8gR2V0IHBlcmNlbnRhZ2VcbiAgICBmdW5jdGlvbiBfZ2V0UGVyY2VudGFnZShjdXJyZW50LCBtYXgpIHtcbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IDAgfHwgbWF4ID09PSAwIHx8IGlzTmFOKGN1cnJlbnQpIHx8IGlzTmFOKG1heCkpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKGN1cnJlbnQgLyBtYXgpICogMTAwKS50b0ZpeGVkKDIpO1xuICAgIH1cblxuICAgIC8vIERlZXAgZXh0ZW5kL21lcmdlIGRlc3RpbmF0aW9uIG9iamVjdCB3aXRoIE4gbW9yZSBvYmplY3RzXG4gICAgLy8gaHR0cDovL2FuZHJld2R1cG9udC5uZXQvMjAwOS8wOC8yOC9kZWVwLWV4dGVuZGluZy1vYmplY3RzLWluLWphdmFzY3JpcHQvXG4gICAgLy8gUmVtb3ZlZCBjYWxsIHRvIGFyZ3VtZW50cy5jYWxsZWUgKHVzZWQgZXhwbGljaXQgZnVuY3Rpb24gbmFtZSBpbnN0ZWFkKVxuICAgIGZ1bmN0aW9uIF9leHRlbmQoKSB7XG4gICAgICAgIC8vIEdldCBhcmd1bWVudHNcbiAgICAgICAgdmFyIG9iamVjdHMgPSBhcmd1bWVudHM7XG5cbiAgICAgICAgLy8gQmFpbCBpZiBub3RoaW5nIHRvIG1lcmdlXG4gICAgICAgIGlmICghb2JqZWN0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJldHVybiBmaXJzdCBpZiBzcGVjaWZpZWQgYnV0IG5vdGhpbmcgdG8gbWVyZ2VcbiAgICAgICAgaWYgKG9iamVjdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0c1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcnN0IG9iamVjdCBpcyB0aGUgZGVzdGluYXRpb25cbiAgICAgICAgdmFyIGRlc3RpbmF0aW9uID0gQXJyYXkucHJvdG90eXBlLnNoaWZ0LmNhbGwob2JqZWN0cyksXG4gICAgICAgICAgICBsZW5ndGggICAgICA9IG9iamVjdHMubGVuZ3RoO1xuXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgb2JqZWN0cyB0byBtZXJnZVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gb2JqZWN0c1tpXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZVtwcm9wZXJ0eV0gJiYgc291cmNlW3Byb3BlcnR5XS5jb25zdHJ1Y3RvciAmJiBzb3VyY2VbcHJvcGVydHldLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25bcHJvcGVydHldID0gZGVzdGluYXRpb25bcHJvcGVydHldIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICBfZXh0ZW5kKGRlc3RpbmF0aW9uW3Byb3BlcnR5XSwgc291cmNlW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25bcHJvcGVydHldID0gc291cmNlW3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVzdGluYXRpb247XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdmFyaWFibGUgdHlwZXNcbiAgICB2YXIgX2lzID0ge1xuICAgICAgICBvYmplY3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mKGlucHV0KSA9PT0gJ29iamVjdCc7XG4gICAgICAgIH0sXG4gICAgICAgIGFycmF5OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmICh0eXBlb2YoaW5wdXQpID09PSAnb2JqZWN0JyAmJiBpbnB1dC5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpO1xuICAgICAgICB9LFxuICAgICAgICBudW1iZXI6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgKHR5cGVvZihpbnB1dCkgPT09ICdudW1iZXInICYmICFpc05hTihpbnB1dCAtIDApIHx8ICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0LmNvbnN0cnVjdG9yID09PSBOdW1iZXIpKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3RyaW5nOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9PSBudWxsICYmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8ICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0LmNvbnN0cnVjdG9yID09PSBTdHJpbmcpKTtcbiAgICAgICAgfSxcbiAgICAgICAgYm9vbGVhbjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPT0gbnVsbCAmJiB0eXBlb2YgaW5wdXQgPT09ICdib29sZWFuJztcbiAgICAgICAgfSxcbiAgICAgICAgbm9kZUxpc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgaW5wdXQgaW5zdGFuY2VvZiBOb2RlTGlzdDtcbiAgICAgICAgfSxcbiAgICAgICAgaHRtbEVsZW1lbnQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgaW5wdXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb246IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nO1xuICAgICAgICB9LFxuICAgICAgICB1bmRlZmluZWQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAndW5kZWZpbmVkJztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBQYXJzZSBZb3VUdWJlIElEIGZyb20gdXJsXG4gICAgZnVuY3Rpb24gX3BhcnNlWW91VHViZUlkKHVybCkge1xuICAgICAgICB2YXIgcmVnZXggPSAvXi4qKHlvdXR1LmJlXFwvfHZcXC98dVxcL1xcd1xcL3xlbWJlZFxcL3x3YXRjaFxcP3Y9fFxcJnY9KShbXiNcXCZcXD9dKikuKi87XG4gICAgICAgIHJldHVybiAodXJsLm1hdGNoKHJlZ2V4KSkgPyBSZWdFeHAuJDIgOiB1cmw7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgVmltZW8gSUQgZnJvbSB1cmxcbiAgICBmdW5jdGlvbiBfcGFyc2VWaW1lb0lkKHVybCkge1xuICAgICAgICB2YXIgcmVnZXggPSAvXi4qKHZpbWVvLmNvbVxcL3x2aWRlb1xcLykoXFxkKykuKi87XG4gICAgICAgIHJldHVybiAodXJsLm1hdGNoKHJlZ2V4KSkgPyBSZWdFeHAuJDIgOiB1cmw7XG4gICAgfVxuXG4gICAgLy8gRnVsbHNjcmVlbiBBUElcbiAgICBmdW5jdGlvbiBfZnVsbHNjcmVlbigpIHtcbiAgICAgICAgdmFyIGZ1bGxzY3JlZW4gPSB7XG4gICAgICAgICAgICAgICAgc3VwcG9ydHNGdWxsU2NyZWVuOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc0Z1bGxTY3JlZW46IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgcmVxdWVzdEZ1bGxTY3JlZW46IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgICAgICAgY2FuY2VsRnVsbFNjcmVlbjogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgICAgICBmdWxsU2NyZWVuRXZlbnROYW1lOiAnJyxcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHByZWZpeDogJydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBicm93c2VyUHJlZml4ZXMgPSAnd2Via2l0IG8gbW96IG1zIGtodG1sJy5zcGxpdCgnICcpO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBuYXRpdmUgc3VwcG9ydFxuICAgICAgICBpZiAoIV9pcy51bmRlZmluZWQoZG9jdW1lbnQuY2FuY2VsRnVsbFNjcmVlbikpIHtcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBmdWxsc2NyZWVuIHN1cHBvcnQgYnkgdmVuZG9yIHByZWZpeFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlsID0gYnJvd3NlclByZWZpeGVzLmxlbmd0aDsgaSA8IGlsOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5wcmVmaXggPSBicm93c2VyUHJlZml4ZXNbaV07XG5cbiAgICAgICAgICAgICAgICBpZiAoIV9pcy51bmRlZmluZWQoZG9jdW1lbnRbZnVsbHNjcmVlbi5wcmVmaXggKyAnQ2FuY2VsRnVsbFNjcmVlbiddKSkge1xuICAgICAgICAgICAgICAgICAgICBmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIV9pcy51bmRlZmluZWQoZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbikgJiYgZG9jdW1lbnQubXNGdWxsc2NyZWVuRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIE1TICh3aGVuIGlzbid0IGl0PylcbiAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5wcmVmaXggPSAnbXMnO1xuICAgICAgICAgICAgICAgICAgICBmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBtZXRob2RzIHRvIGRvIHNvbWV0aGluZyB1c2VmdWxcbiAgICAgICAgaWYgKGZ1bGxzY3JlZW4uc3VwcG9ydHNGdWxsU2NyZWVuKSB7XG4gICAgICAgICAgICAvLyBZZXQgYWdhaW4gTWljcm9zb2Z0IGF3ZXNvbWVuZXNzLFxuICAgICAgICAgICAgLy8gU29tZXRpbWVzIHRoZSBwcmVmaXggaXMgJ21zJywgc29tZXRpbWVzICdNUycgdG8ga2VlcCB5b3Ugb24geW91ciB0b2VzXG4gICAgICAgICAgICBmdWxsc2NyZWVuLmZ1bGxTY3JlZW5FdmVudE5hbWUgPSAoZnVsbHNjcmVlbi5wcmVmaXggPT09ICdtcycgPyAnTVNGdWxsc2NyZWVuQ2hhbmdlJyA6IGZ1bGxzY3JlZW4ucHJlZml4ICsgJ2Z1bGxzY3JlZW5jaGFuZ2UnKTtcblxuICAgICAgICAgICAgZnVsbHNjcmVlbi5pc0Z1bGxTY3JlZW4gPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKF9pcy51bmRlZmluZWQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5wcmVmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCA9PT0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW96JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCA9PT0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudFt0aGlzLnByZWZpeCArICdGdWxsc2NyZWVuRWxlbWVudCddID09PSBlbGVtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmdWxsc2NyZWVuLnJlcXVlc3RGdWxsU2NyZWVuID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMucHJlZml4ID09PSAnJykgPyBlbGVtZW50LnJlcXVlc3RGdWxsU2NyZWVuKCkgOiBlbGVtZW50W3RoaXMucHJlZml4ICsgKHRoaXMucHJlZml4ID09PSAnbXMnID8gJ1JlcXVlc3RGdWxsc2NyZWVuJyA6ICdSZXF1ZXN0RnVsbFNjcmVlbicpXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uY2FuY2VsRnVsbFNjcmVlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5wcmVmaXggPT09ICcnKSA/IGRvY3VtZW50LmNhbmNlbEZ1bGxTY3JlZW4oKSA6IGRvY3VtZW50W3RoaXMucHJlZml4ICsgKHRoaXMucHJlZml4ID09PSAnbXMnID8gJ0V4aXRGdWxsc2NyZWVuJyA6ICdDYW5jZWxGdWxsU2NyZWVuJyldKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZnVsbHNjcmVlbi5lbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLnByZWZpeCA9PT0gJycpID8gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgOiBkb2N1bWVudFt0aGlzLnByZWZpeCArICdGdWxsc2NyZWVuRWxlbWVudCddO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdWxsc2NyZWVuO1xuICAgIH1cblxuICAgIC8vIExvY2FsIHN0b3JhZ2VcbiAgICB2YXIgX3N0b3JhZ2UgPSB7XG4gICAgICAgIHN1cHBvcnRlZDogKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCEoJ2xvY2FsU3RvcmFnZScgaW4gd2luZG93KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVHJ5IHRvIHVzZSBpdCAoaXQgbWlnaHQgYmUgZGlzYWJsZWQsIGUuZy4gdXNlciBpcyBpbiBwcml2YXRlL3Bvcm4gbW9kZSlcbiAgICAgICAgICAgIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9pc3N1ZXMvMTMxXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEFkZCB0ZXN0IGl0ZW1cbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ19fX3Rlc3QnLCAnT0snKTtcblxuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgdGVzdCBpdGVtXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnX19fdGVzdCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ19fX3Rlc3QnKTtcblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHZhbHVlIG1hdGNoZXNcbiAgICAgICAgICAgICAgICByZXR1cm4gKHJlc3VsdCA9PT0gJ09LJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KSgpXG4gICAgfTtcblxuICAgIC8vIFBsYXllciBpbnN0YW5jZVxuICAgIGZ1bmN0aW9uIFBseXIobWVkaWEsIGNvbmZpZykge1xuICAgICAgICB2YXIgcGx5ciA9IHRoaXMsXG4gICAgICAgIHRpbWVycyA9IHt9LFxuICAgICAgICBhcGk7XG5cbiAgICAgICAgLy8gU2V0IG1lZGlhXG4gICAgICAgIHBseXIubWVkaWEgPSBtZWRpYTtcbiAgICAgICAgdmFyIG9yaWdpbmFsID0gbWVkaWEuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgICAgIC8vIFRyaWdnZXIgZXZlbnRzLCB3aXRoIHBseXIgaW5zdGFuY2UgcGFzc2VkXG4gICAgICAgIGZ1bmN0aW9uIF90cmlnZ2VyRXZlbnQoZWxlbWVudCwgdHlwZSwgYnViYmxlcywgcHJvcGVydGllcykge1xuICAgICAgICAgICAgX2V2ZW50KGVsZW1lbnQsIHR5cGUsIGJ1YmJsZXMsIF9leHRlbmQoe30sIHByb3BlcnRpZXMsIHtcbiAgICAgICAgICAgICAgICBwbHlyOiBhcGlcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlYnVnZ2luZ1xuICAgICAgICBmdW5jdGlvbiBfY29uc29sZSh0eXBlLCBhcmdzKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF9pcy5zdHJpbmcoY29uZmlnLmxvZ1ByZWZpeCkgJiYgY29uZmlnLmxvZ1ByZWZpeC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJncy51bnNoaWZ0KGNvbmZpZy5sb2dQcmVmaXgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnNvbGVbdHlwZV0uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9sb2cgPSBmdW5jdGlvbigpIHsgX2NvbnNvbGUoJ2xvZycsIGFyZ3VtZW50cykgfSxcbiAgICAgICAgICAgIF93YXJuID0gZnVuY3Rpb24oKSB7IF9jb25zb2xlKCd3YXJuJywgYXJndW1lbnRzKSB9O1xuXG4gICAgICAgIC8vIExvZyBjb25maWcgb3B0aW9uc1xuICAgICAgICBfbG9nKCdDb25maWcnLCBjb25maWcpO1xuXG4gICAgICAgIC8vIEdldCBpY29uIFVSTFxuICAgICAgICBmdW5jdGlvbiBfZ2V0SWNvblVybCgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiAgICAgICAgY29uZmlnLmljb25VcmwsXG4gICAgICAgICAgICAgICAgYWJzb2x1dGU6ICAgKGNvbmZpZy5pY29uVXJsLmluZGV4T2YoXCJodHRwXCIpID09PSAwKSB8fCBwbHlyLmJyb3dzZXIuaXNJRVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJ1aWxkIHRoZSBkZWZhdWx0IEhUTUxcbiAgICAgICAgZnVuY3Rpb24gX2J1aWxkQ29udHJvbHMoKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgaHRtbCBhcnJheVxuICAgICAgICAgICAgdmFyIGh0bWwgICAgICAgID0gW10sXG4gICAgICAgICAgICAgICAgaWNvblVybCAgICAgPSBfZ2V0SWNvblVybCgpLFxuICAgICAgICAgICAgICAgIGljb25QYXRoICAgID0gKCFpY29uVXJsLmFic29sdXRlID8gaWNvblVybC51cmwgOiAnJykgKyAnIycgKyBjb25maWcuaWNvblByZWZpeDtcblxuICAgICAgICAgICAgLy8gTGFyZ2VyIG92ZXJsYWlkIHBsYXkgYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncGxheS1sYXJnZScpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwicGxheVwiIGNsYXNzPVwicGx5cl9fcGxheS1sYXJnZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLXBsYXlcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnBsYXkgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaHRtbC5wdXNoKCc8ZGl2IGNsYXNzPVwicGx5cl9fY29udHJvbHNcIj4nKTtcblxuICAgICAgICAgICAgLy8gUmVzdGFydCBidXR0b25cbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdyZXN0YXJ0JykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJyZXN0YXJ0XCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctcmVzdGFydFwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4ucmVzdGFydCArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXdpbmQgYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAncmV3aW5kJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJyZXdpbmRcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1yZXdpbmRcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnJld2luZCArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQbGF5IFBhdXNlIGJ1dHRvblxuICAgICAgICAgICAgLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgYSB0b2dnbGUgYnV0dG9uIHJlYWxseT9cbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdwbGF5JykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJwbGF5XCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctcGxheVwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4ucGxheSArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJwYXVzZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2Zz48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLXBhdXNlXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5wYXVzZSArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGYXN0IGZvcndhcmQgYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAnZmFzdC1mb3J3YXJkJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJmYXN0LWZvcndhcmRcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1mYXN0LWZvcndhcmRcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLmZvcndhcmQgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUHJvZ3Jlc3NcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdwcm9ncmVzcycpKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8c3BhbiBjbGFzcz1cInBseXJfX3Byb2dyZXNzXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBmb3I9XCJzZWVre2lkfVwiIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPlNlZWs8L2xhYmVsPicsXG4gICAgICAgICAgICAgICAgICAgICc8aW5wdXQgaWQ9XCJzZWVre2lkfVwiIGNsYXNzPVwicGx5cl9fcHJvZ3Jlc3MtLXNlZWtcIiB0eXBlPVwicmFuZ2VcIiBtaW49XCIwXCIgbWF4PVwiMTAwXCIgc3RlcD1cIjAuMVwiIHZhbHVlPVwiMFwiIGRhdGEtcGx5cj1cInNlZWtcIj4nLFxuICAgICAgICAgICAgICAgICAgICAnPHByb2dyZXNzIGNsYXNzPVwicGx5cl9fcHJvZ3Jlc3MtLXBsYXllZFwiIG1heD1cIjEwMFwiIHZhbHVlPVwiMFwiIHJvbGU9XCJwcmVzZW50YXRpb25cIj48L3Byb2dyZXNzPicsXG4gICAgICAgICAgICAgICAgICAgICc8cHJvZ3Jlc3MgY2xhc3M9XCJwbHlyX19wcm9ncmVzcy0tYnVmZmVyXCIgbWF4PVwiMTAwXCIgdmFsdWU9XCIwXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3Bhbj4wPC9zcGFuPiUgJyArIGNvbmZpZy5pMThuLmJ1ZmZlcmVkLFxuICAgICAgICAgICAgICAgICAgICAnPC9wcm9ncmVzcz4nKTtcblxuICAgICAgICAgICAgICAgIC8vIFNlZWsgdG9vbHRpcFxuICAgICAgICAgICAgICAgIGlmIChjb25maWcudG9vbHRpcHMuc2Vlaykge1xuICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2goJzxzcGFuIGNsYXNzPVwicGx5cl9fdG9vbHRpcFwiPjAwOjAwPC9zcGFuPicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENsb3NlXG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8L3NwYW4+Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1lZGlhIGN1cnJlbnQgdGltZSBkaXNwbGF5XG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAnY3VycmVudC10aW1lJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3RpbWVcIj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi5jdXJyZW50VGltZSArICc8L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3RpbWUtLWN1cnJlbnRcIj4wMDowMDwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNZWRpYSBkdXJhdGlvbiBkaXNwbGF5XG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAnZHVyYXRpb24nKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fdGltZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLmR1cmF0aW9uICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fdGltZS0tZHVyYXRpb25cIj4wMDowMDwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUb2dnbGUgbXV0ZSBidXR0b25cbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICdtdXRlJykpIHtcbiAgICAgICAgICAgICAgICBodG1sLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXBseXI9XCJtdXRlXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnIGNsYXNzPVwiaWNvbi0tbXV0ZWRcIj48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLW11dGVkXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy12b2x1bWVcIiAvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJwbHlyX19zci1vbmx5XCI+JyArIGNvbmZpZy5pMThuLnRvZ2dsZU11dGUgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVm9sdW1lIHJhbmdlIGNvbnRyb2xcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcuY29udHJvbHMsICd2b2x1bWUnKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fdm9sdW1lXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWwgZm9yPVwidm9sdW1le2lkfVwiIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi52b2x1bWUgKyAnPC9sYWJlbD4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCBpZD1cInZvbHVtZXtpZH1cIiBjbGFzcz1cInBseXJfX3ZvbHVtZS0taW5wdXRcIiB0eXBlPVwicmFuZ2VcIiBtaW49XCInICsgY29uZmlnLnZvbHVtZU1pbiArICdcIiBtYXg9XCInICsgY29uZmlnLnZvbHVtZU1heCArICdcIiB2YWx1ZT1cIicgKyBjb25maWcudm9sdW1lICsgJ1wiIGRhdGEtcGx5cj1cInZvbHVtZVwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHByb2dyZXNzIGNsYXNzPVwicGx5cl9fdm9sdW1lLS1kaXNwbGF5XCIgbWF4PVwiJyArIGNvbmZpZy52b2x1bWVNYXggKyAnXCIgdmFsdWU9XCInICsgY29uZmlnLnZvbHVtZU1pbiArICdcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+PC9wcm9ncmVzcz4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUb2dnbGUgY2FwdGlvbnMgYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAnY2FwdGlvbnMnKSkge1xuICAgICAgICAgICAgICAgIGh0bWwucHVzaChcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtcGx5cj1cImNhcHRpb25zXCI+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnIGNsYXNzPVwiaWNvbi0tY2FwdGlvbnMtb25cIj48dXNlIHhsaW5rOmhyZWY9XCInICsgaWNvblBhdGggKyAnLWNhcHRpb25zLW9uXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoKyAnLWNhcHRpb25zLW9mZlwiIC8+PC9zdmc+JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cInBseXJfX3NyLW9ubHlcIj4nICsgY29uZmlnLmkxOG4udG9nZ2xlQ2FwdGlvbnMgKyAnPC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVG9nZ2xlIGZ1bGxzY3JlZW4gYnV0dG9uXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLmNvbnRyb2xzLCAnZnVsbHNjcmVlbicpKSB7XG4gICAgICAgICAgICAgICAgaHRtbC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1wbHlyPVwiZnVsbHNjcmVlblwiPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyBjbGFzcz1cImljb24tLWV4aXQtZnVsbHNjcmVlblwiPjx1c2UgeGxpbms6aHJlZj1cIicgKyBpY29uUGF0aCArICctZXhpdC1mdWxsc2NyZWVuXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmc+PHVzZSB4bGluazpocmVmPVwiJyArIGljb25QYXRoICsgJy1lbnRlci1mdWxsc2NyZWVuXCIgLz48L3N2Zz4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwicGx5cl9fc3Itb25seVwiPicgKyBjb25maWcuaTE4bi50b2dnbGVGdWxsc2NyZWVuICsgJzwvc3Bhbj4nLFxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENsb3NlIGV2ZXJ5dGhpbmdcbiAgICAgICAgICAgIGh0bWwucHVzaCgnPC9kaXY+Jyk7XG5cbiAgICAgICAgICAgIHJldHVybiBodG1sLmpvaW4oJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgZnVsbHNjcmVlblxuICAgICAgICBmdW5jdGlvbiBfc2V0dXBGdWxsc2NyZWVuKCkge1xuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoKHBseXIudHlwZSAhPT0gJ2F1ZGlvJyB8fCBjb25maWcuZnVsbHNjcmVlbi5hbGxvd0F1ZGlvKSAmJiBjb25maWcuZnVsbHNjcmVlbi5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIG5hdGl2ZSBzdXBwb3J0XG4gICAgICAgICAgICAgICAgdmFyIG5hdGl2ZVN1cHBvcnQgPSBmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbjtcblxuICAgICAgICAgICAgICAgIGlmIChuYXRpdmVTdXBwb3J0IHx8IChjb25maWcuZnVsbHNjcmVlbi5mYWxsYmFjayAmJiAhX2luRnJhbWUoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvZygobmF0aXZlU3VwcG9ydCA/ICdOYXRpdmUnIDogJ0ZhbGxiYWNrJykgKyAnIGZ1bGxzY3JlZW4gZW5hYmxlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBzdHlsaW5nIGhvb2tcbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5mdWxsc2NyZWVuLmVuYWJsZWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb2coJ0Z1bGxzY3JlZW4gbm90IHN1cHBvcnRlZCBhbmQgZmFsbGJhY2sgZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUb2dnbGUgc3RhdGVcbiAgICAgICAgICAgICAgICBpZiAocGx5ci5idXR0b25zICYmIHBseXIuYnV0dG9ucy5mdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVTdGF0ZShwbHlyLmJ1dHRvbnMuZnVsbHNjcmVlbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldHVwIGZvY3VzIHRyYXBcbiAgICAgICAgICAgICAgICBfZm9jdXNUcmFwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXR1cCBjYXB0aW9uc1xuICAgICAgICBmdW5jdGlvbiBfc2V0dXBDYXB0aW9ucygpIHtcbiAgICAgICAgICAgIC8vIEJhaWwgaWYgbm90IEhUTUw1IHZpZGVvXG4gICAgICAgICAgICBpZiAocGx5ci50eXBlICE9PSAndmlkZW8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbmplY3QgdGhlIGNvbnRhaW5lclxuICAgICAgICAgICAgaWYgKCFfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmNhcHRpb25zKSkge1xuICAgICAgICAgICAgICAgIHBseXIudmlkZW9Db250YWluZXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgJzxkaXYgY2xhc3M9XCInICsgX2dldENsYXNzbmFtZShjb25maWcuc2VsZWN0b3JzLmNhcHRpb25zKSArICdcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIEhUTUw1IHRleHRUcmFja3MgaXMgc3VwcG9ydGVkXG4gICAgICAgICAgICBwbHlyLnVzaW5nVGV4dFRyYWNrcyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHBseXIubWVkaWEudGV4dFRyYWNrcykge1xuICAgICAgICAgICAgICAgIHBseXIudXNpbmdUZXh0VHJhY2tzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IFVSTCBvZiBjYXB0aW9uIGZpbGUgaWYgZXhpc3RzXG4gICAgICAgICAgICB2YXIgY2FwdGlvblNyYyA9ICcnLFxuICAgICAgICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBwbHlyLm1lZGlhLmNoaWxkTm9kZXM7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5baV0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RyYWNrJykge1xuICAgICAgICAgICAgICAgICAgICBraW5kID0gY2hpbGRyZW5baV0ua2luZDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtpbmQgPT09ICdjYXB0aW9ucycgfHwga2luZCA9PT0gJ3N1YnRpdGxlcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcHRpb25TcmMgPSBjaGlsZHJlbltpXS5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZWNvcmQgaWYgY2FwdGlvbiBmaWxlIGV4aXN0cyBvciBub3RcbiAgICAgICAgICAgIHBseXIuY2FwdGlvbkV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICBpZiAoY2FwdGlvblNyYyA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBwbHlyLmNhcHRpb25FeGlzdHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfbG9nKCdObyBjYXB0aW9uIHRyYWNrIGZvdW5kJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9sb2coJ0NhcHRpb24gdHJhY2sgZm91bmQ7IFVSSTogJyArIGNhcHRpb25TcmMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBubyBjYXB0aW9uIGZpbGUgZXhpc3RzLCBoaWRlIGNvbnRhaW5lciBmb3IgY2FwdGlvbiB0ZXh0XG4gICAgICAgICAgICBpZiAoIXBseXIuY2FwdGlvbkV4aXN0cykge1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuY2FwdGlvbnMuZW5hYmxlZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFR1cm4gb2ZmIG5hdGl2ZSBjYXB0aW9uIHJlbmRlcmluZyB0byBhdm9pZCBkb3VibGUgY2FwdGlvbnNcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGRvZXNuJ3Qgc2VlbSB0byB3b3JrIGluIFNhZmFyaSA3Kywgc28gdGhlIDx0cmFjaz4gZWxlbWVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgZG9tIGJlbG93XG4gICAgICAgICAgICAgICAgdmFyIHRyYWNrcyA9IHBseXIubWVkaWEudGV4dFRyYWNrcztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRyYWNrcy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgICAgICAgICB0cmFja3NbeF0ubW9kZSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEVuYWJsZSBVSVxuICAgICAgICAgICAgICAgIF9zaG93Q2FwdGlvbnMocGx5cik7XG5cbiAgICAgICAgICAgICAgICAvLyBEaXNhYmxlIHVuc3VwcG9ydGVkIGJyb3dzZXJzIHRoYW4gcmVwb3J0IGZhbHNlIHBvc2l0aXZlXG4gICAgICAgICAgICAgICAgLy8gRmlyZWZveCBidWc6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEwMzMxNDRcbiAgICAgICAgICAgICAgICBpZiAoKHBseXIuYnJvd3Nlci5pc0lFICYmIHBseXIuYnJvd3Nlci52ZXJzaW9uID49IDEwKSB8fFxuICAgICAgICAgICAgICAgICAgICAocGx5ci5icm93c2VyLmlzRmlyZWZveCAmJiBwbHlyLmJyb3dzZXIudmVyc2lvbiA+PSAzMSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEZWJ1Z2dpbmdcbiAgICAgICAgICAgICAgICAgICAgX2xvZygnRGV0ZWN0ZWQgYnJvd3NlciB3aXRoIGtub3duIFRleHRUcmFjayBpc3N1ZXMgLSB1c2luZyBtYW51YWwgZmFsbGJhY2snKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgdG8gZmFsc2Ugc28gc2tpcHMgdG8gJ21hbnVhbCcgY2FwdGlvbmluZ1xuICAgICAgICAgICAgICAgICAgICBwbHlyLnVzaW5nVGV4dFRyYWNrcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlbmRlcmluZyBjYXB0aW9uIHRyYWNrc1xuICAgICAgICAgICAgICAgIC8vIE5hdGl2ZSBzdXBwb3J0IHJlcXVpcmVkIC0gaHR0cDovL2Nhbml1c2UuY29tL3dlYnZ0dFxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnVzaW5nVGV4dFRyYWNrcykge1xuICAgICAgICAgICAgICAgICAgICBfbG9nKCdUZXh0VHJhY2tzIHN1cHBvcnRlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgdHJhY2tzLmxlbmd0aDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhY2sgPSB0cmFja3NbeV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFjay5raW5kID09PSAnY2FwdGlvbnMnIHx8IHRyYWNrLmtpbmQgPT09ICdzdWJ0aXRsZXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX29uKHRyYWNrLCAnY3VlY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgYSBjdWUsIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVDdWVzWzBdICYmICd0ZXh0JyBpbiB0aGlzLmFjdGl2ZUN1ZXNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRDYXB0aW9uKHRoaXMuYWN0aXZlQ3Vlc1swXS5nZXRDdWVBc0hUTUwoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYXB0aW9uIHRyYWNrcyBub3QgbmF0aXZlbHkgc3VwcG9ydGVkXG4gICAgICAgICAgICAgICAgICAgIF9sb2coJ1RleHRUcmFja3Mgbm90IHN1cHBvcnRlZCBzbyByZW5kZXJpbmcgY2FwdGlvbnMgbWFudWFsbHknKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZW5kZXIgY2FwdGlvbnMgZnJvbSBhcnJheSBhdCBhcHByb3ByaWF0ZSB0aW1lXG4gICAgICAgICAgICAgICAgICAgIHBseXIuY3VycmVudENhcHRpb24gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5jYXB0aW9ucyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXB0aW9uU3JjICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIFhNTEh0dHBSZXF1ZXN0IE9iamVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXB0aW9ucyA9IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxID0geGhyLnJlc3BvbnNlVGV4dDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9BY2NvcmRpbmcgdG8gd2VidnR0IHNwZWMsIGxpbmUgdGVybWluYXRvciBjb25zaXN0cyBvZiBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ1JMRiAoVSswMDBEIFUrMDAwQSksIExGIChVKzAwMEEpIG9yIENSIChVKzAwMEQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGluZVNlcGFyYXRvciA9ICdcXHJcXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocmVxLmluZGV4T2YobGluZVNlcGFyYXRvcitsaW5lU2VwYXJhdG9yKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihyZXEuaW5kZXhPZignXFxyXFxyJykgIT09IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVNlcGFyYXRvciA9ICdcXHInO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTZXBhcmF0b3IgPSAnXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHRpb25zID0gcmVxLnNwbGl0KGxpbmVTZXBhcmF0b3IrbGluZVNlcGFyYXRvcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgY2FwdGlvbnMubGVuZ3RoOyByKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uID0gY2FwdGlvbnNbcl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5jYXB0aW9uc1tyXSA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBwYXJ0cyBvZiB0aGUgY2FwdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSBjYXB0aW9uLnNwbGl0KGxpbmVTZXBhcmF0b3IpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmNhc2UgY2FwdGlvbiBudW1iZXJzIGFyZSBhZGRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0c1tpbmRleF0uaW5kZXhPZihcIjpcIikgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmNhcHRpb25zW3JdID0gW3BhcnRzW2luZGV4XSwgcGFydHNbaW5kZXggKyAxXV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBmaXJzdCBlbGVtZW50ICgnVlRUJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuY2FwdGlvbnMuc2hpZnQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvZygnU3VjY2Vzc2Z1bGx5IGxvYWRlZCB0aGUgY2FwdGlvbiBmaWxlIHZpYSBBSkFYJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfd2Fybihjb25maWcubG9nUHJlZml4ICsgJ1RoZXJlIHdhcyBhIHByb2JsZW0gbG9hZGluZyB0aGUgY2FwdGlvbiBmaWxlIHZpYSBBSkFYJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIub3BlbignZ2V0JywgY2FwdGlvblNyYywgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIGN1cnJlbnQgY2FwdGlvblxuICAgICAgICBmdW5jdGlvbiBfc2V0Q2FwdGlvbihjYXB0aW9uKSB7XG4gICAgICAgICAgICAvKiBqc2hpbnQgdW51c2VkOmZhbHNlICovXG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5jYXB0aW9ucyksXG4gICAgICAgICAgICAgICAgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblxuICAgICAgICAgICAgLy8gRW1wdHkgdGhlIGNvbnRhaW5lclxuICAgICAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGVtcHR5XG4gICAgICAgICAgICBpZiAoX2lzLnVuZGVmaW5lZChjYXB0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNhcHRpb24gPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBzcGFuIGNvbnRlbnRcbiAgICAgICAgICAgIGlmIChfaXMuc3RyaW5nKGNhcHRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29udGVudC5pbm5lckhUTUwgPSBjYXB0aW9uLnRyaW0oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChjYXB0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IG5ldyBjYXB0aW9uIHRleHRcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250ZW50KTtcblxuICAgICAgICAgICAgLy8gRm9yY2UgcmVkcmF3IChmb3IgU2FmYXJpKVxuICAgICAgICAgICAgdmFyIHJlZHJhdyA9IGNvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXB0aW9ucyBmdW5jdGlvbnNcbiAgICAgICAgLy8gU2VlayB0aGUgbWFudWFsIGNhcHRpb24gdGltZSBhbmQgdXBkYXRlIFVJXG4gICAgICAgIGZ1bmN0aW9uIF9zZWVrTWFudWFsQ2FwdGlvbnModGltZSkge1xuICAgICAgICAgICAgLy8gVXRpbGl0aWVzIGZvciBjYXB0aW9uIHRpbWUgY29kZXNcbiAgICAgICAgICAgIGZ1bmN0aW9uIF90aW1lY29kZUNvbW1vbih0YywgcG9zKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRjcGFpciA9IFtdO1xuICAgICAgICAgICAgICAgIHRjcGFpciA9IHRjLnNwbGl0KCcgLS0+ICcpO1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0Y3BhaXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2ViVlRUIGFsbG93cyBmb3IgZXh0cmEgbWV0YSBkYXRhIGFmdGVyIHRoZSB0aW1lc3RhbXAgbGluZVxuICAgICAgICAgICAgICAgICAgICAvLyBTbyBnZXQgcmlkIG9mIHRoaXMgaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgIHRjcGFpcltpXSA9IHRjcGFpcltpXS5yZXBsYWNlKC8oXFxkKzpcXGQrOlxcZCtcXC5cXGQrKS4qLywgXCIkMVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zdWJUY1NlY3ModGNwYWlyW3Bvc10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gX3RpbWVjb2RlTWluKHRjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aW1lY29kZUNvbW1vbih0YywgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBfdGltZWNvZGVNYXgodGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RpbWVjb2RlQ29tbW9uKHRjLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9zdWJUY1NlY3ModGMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGMgPT09IG51bGwgfHwgdGMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGMxID0gW10sXG4gICAgICAgICAgICAgICAgICAgICAgICB0YzIgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZHM7XG4gICAgICAgICAgICAgICAgICAgIHRjMSA9IHRjLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgICAgIHRjMiA9IHRjMVswXS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gTWF0aC5mbG9vcih0YzJbMF0qNjAqNjApICsgTWF0aC5mbG9vcih0YzJbMV0qNjApICsgTWF0aC5mbG9vcih0YzJbMl0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Vjb25kcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGl0J3Mgbm90IHZpZGVvLCBvciB3ZSdyZSB1c2luZyB0ZXh0VHJhY2tzLCBiYWlsLlxuICAgICAgICAgICAgaWYgKHBseXIudXNpbmdUZXh0VHJhY2tzIHx8IHBseXIudHlwZSAhPT0gJ3ZpZGVvJyB8fCAhcGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVzZXQgc3ViY291bnRcbiAgICAgICAgICAgIHBseXIuc3ViY291bnQgPSAwO1xuXG4gICAgICAgICAgICAvLyBDaGVjayB0aW1lIGlzIGEgbnVtYmVyLCBpZiBub3QgdXNlIGN1cnJlbnRUaW1lXG4gICAgICAgICAgICAvLyBJRSBoYXMgYSBidWcgd2hlcmUgY3VycmVudFRpbWUgZG9lc24ndCBnbyB0byAwXG4gICAgICAgICAgICAvLyBodHRwczovL3R3aXR0ZXIuY29tL1NhbV9Qb3R0cy9zdGF0dXMvNTczNzE1NzQ2NTA2NzMxNTIxXG4gICAgICAgICAgICB0aW1lID0gX2lzLm51bWJlcih0aW1lKSA/IHRpbWUgOiBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIHN1YnMgYXZhaWxhYmxlLCBiYWlsXG4gICAgICAgICAgICBpZiAoIXBseXIuY2FwdGlvbnNbcGx5ci5zdWJjb3VudF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoaWxlIChfdGltZWNvZGVNYXgocGx5ci5jYXB0aW9uc1twbHlyLnN1YmNvdW50XVswXSkgPCB0aW1lLnRvRml4ZWQoMSkpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnN1YmNvdW50Kys7XG4gICAgICAgICAgICAgICAgaWYgKHBseXIuc3ViY291bnQgPiBwbHlyLmNhcHRpb25zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5zdWJjb3VudCA9IHBseXIuY2FwdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgbmV4dCBjYXB0aW9uIGlzIGluIHRoZSBjdXJyZW50IHRpbWUgcmFuZ2VcbiAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLmN1cnJlbnRUaW1lLnRvRml4ZWQoMSkgPj0gX3RpbWVjb2RlTWluKHBseXIuY2FwdGlvbnNbcGx5ci5zdWJjb3VudF1bMF0pICYmXG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZS50b0ZpeGVkKDEpIDw9IF90aW1lY29kZU1heChwbHlyLmNhcHRpb25zW3BseXIuc3ViY291bnRdWzBdKSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmN1cnJlbnRDYXB0aW9uID0gcGx5ci5jYXB0aW9uc1twbHlyLnN1YmNvdW50XVsxXTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbmRlciB0aGUgY2FwdGlvblxuICAgICAgICAgICAgICAgIF9zZXRDYXB0aW9uKHBseXIuY3VycmVudENhcHRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfc2V0Q2FwdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlzcGxheSBjYXB0aW9ucyBjb250YWluZXIgYW5kIGJ1dHRvbiAoZm9yIGluaXRpYWxpemF0aW9uKVxuICAgICAgICBmdW5jdGlvbiBfc2hvd0NhcHRpb25zKCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBjYXB0aW9uIHRvZ2dsZSwgYmFpbFxuICAgICAgICAgICAgaWYgKCFwbHlyLmJ1dHRvbnMuY2FwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuY2FwdGlvbnMuZW5hYmxlZCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIFRyeSB0byBsb2FkIHRoZSB2YWx1ZSBmcm9tIHN0b3JhZ2VcbiAgICAgICAgICAgIHZhciBhY3RpdmUgPSBwbHlyLnN0b3JhZ2UuY2FwdGlvbnNFbmFibGVkO1xuXG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgZmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IGNvbmZpZ1xuICAgICAgICAgICAgaWYgKCFfaXMuYm9vbGVhbihhY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlID0gY29uZmlnLmNhcHRpb25zLmRlZmF1bHRBY3RpdmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmNhcHRpb25zLmFjdGl2ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZVN0YXRlKHBseXIuYnV0dG9ucy5jYXB0aW9ucywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5kIGFsbCBlbGVtZW50c1xuICAgICAgICBmdW5jdGlvbiBfZ2V0RWxlbWVudHMoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBwbHlyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmQgYSBzaW5nbGUgZWxlbWVudFxuICAgICAgICBmdW5jdGlvbiBfZ2V0RWxlbWVudChzZWxlY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIF9nZXRFbGVtZW50cyhzZWxlY3RvcilbMF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXRlcm1pbmUgaWYgd2UncmUgaW4gYW4gaWZyYW1lXG4gICAgICAgIGZ1bmN0aW9uIF9pbkZyYW1lKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnNlbGYgIT09IHdpbmRvdy50b3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVHJhcCBmb2N1cyBpbnNpZGUgY29udGFpbmVyXG4gICAgICAgIGZ1bmN0aW9uIF9mb2N1c1RyYXAoKSB7XG4gICAgICAgICAgICB2YXIgdGFiYmFibGVzICAgPSBfZ2V0RWxlbWVudHMoJ2lucHV0Om5vdChbZGlzYWJsZWRdKSwgYnV0dG9uOm5vdChbZGlzYWJsZWRdKScpLFxuICAgICAgICAgICAgICAgIGZpcnN0ICAgICAgID0gdGFiYmFibGVzWzBdLFxuICAgICAgICAgICAgICAgIGxhc3QgICAgICAgID0gdGFiYmFibGVzW3RhYmJhYmxlcy5sZW5ndGggLSAxXTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gX2NoZWNrRm9jdXMoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBpdCBpcyBUQUJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDkgJiYgcGx5ci5pc0Z1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbGFzdCAmJiAhZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgZm9jdXMgdG8gZmlyc3QgZWxlbWVudCB0aGF0IGNhbiBiZSB0YWJiZWQgaWYgU2hpZnQgaXNuJ3QgdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0ID09PSBmaXJzdCAmJiBldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW92ZSBmb2N1cyB0byBsYXN0IGVsZW1lbnQgdGhhdCBjYW4gYmUgdGFiYmVkIGlmIFNoaWZ0IGlzIHVzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEJpbmQgdGhlIGhhbmRsZXJcbiAgICAgICAgICAgIF9vbihwbHlyLmNvbnRhaW5lciwgJ2tleWRvd24nLCBfY2hlY2tGb2N1cyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgZWxlbWVudHMgdG8gSFRNTDUgbWVkaWEgKHNvdXJjZSwgdHJhY2tzLCBldGMpXG4gICAgICAgIGZ1bmN0aW9uIF9pbnNlcnRDaGlsZEVsZW1lbnRzKHR5cGUsIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGlmIChfaXMuc3RyaW5nKGF0dHJpYnV0ZXMpKSB7XG4gICAgICAgICAgICAgICBfaW5zZXJ0RWxlbWVudCh0eXBlLCBwbHlyLm1lZGlhLCB7IHNyYzogYXR0cmlidXRlcyB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0cmlidXRlcy5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gYXR0cmlidXRlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICBfaW5zZXJ0RWxlbWVudCh0eXBlLCBwbHlyLm1lZGlhLCBhdHRyaWJ1dGVzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnNlcnQgY29udHJvbHNcbiAgICAgICAgZnVuY3Rpb24gX2luamVjdENvbnRyb2xzKCkge1xuICAgICAgICAgICAgLy8gU3ByaXRlXG4gICAgICAgICAgICBpZiAoY29uZmlnLmxvYWRTcHJpdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWNvblVybCA9IF9nZXRJY29uVXJsKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBPbmx5IGxvYWQgZXh0ZXJuYWwgc3ByaXRlIHVzaW5nIEFKQVhcbiAgICAgICAgICAgICAgICBpZiAoaWNvblVybC5hYnNvbHV0ZSkge1xuICAgICAgICAgICAgICAgICAgICBfbG9nKCdBSkFYIGxvYWRpbmcgYWJzb2x1dGUgU1ZHIHNwcml0ZScgKyAocGx5ci5icm93c2VyLmlzSUUgPyAnIChkdWUgdG8gSUUpJyA6ICcnKSk7XG4gICAgICAgICAgICAgICAgICAgIGxvYWRTcHJpdGUoaWNvblVybC51cmwsIFwic3ByaXRlLXBseXJcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvZygnU3ByaXRlIHdpbGwgYmUgdXNlZCBhcyBleHRlcm5hbCByZXNvdXJjZSBkaXJlY3RseScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWFrZSBhIGNvcHkgb2YgdGhlIGh0bWxcbiAgICAgICAgICAgIHZhciBodG1sID0gY29uZmlnLmh0bWw7XG5cbiAgICAgICAgICAgIC8vIEluc2VydCBjdXN0b20gdmlkZW8gY29udHJvbHNcbiAgICAgICAgICAgIF9sb2coJ0luamVjdGluZyBjdXN0b20gY29udHJvbHMnKTtcblxuICAgICAgICAgICAgLy8gSWYgbm8gY29udHJvbHMgYXJlIHNwZWNpZmllZCwgY3JlYXRlIGRlZmF1bHRcbiAgICAgICAgICAgIGlmICghaHRtbCkge1xuICAgICAgICAgICAgICAgIGh0bWwgPSBfYnVpbGRDb250cm9scygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXBsYWNlIHNlZWsgdGltZSBpbnN0YW5jZXNcbiAgICAgICAgICAgIGh0bWwgPSBfcmVwbGFjZUFsbChodG1sLCAne3NlZWt0aW1lfScsIGNvbmZpZy5zZWVrVGltZSk7XG5cbiAgICAgICAgICAgIC8vIFJlcGxhY2UgYWxsIGlkIHJlZmVyZW5jZXMgd2l0aCByYW5kb20gbnVtYmVyc1xuICAgICAgICAgICAgaHRtbCA9IF9yZXBsYWNlQWxsKGh0bWwsICd7aWR9JywgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEwMDAwKSkpO1xuXG4gICAgICAgICAgICAvLyBDb250cm9scyBjb250YWluZXJcbiAgICAgICAgICAgIHZhciB0YXJnZXQ7XG5cbiAgICAgICAgICAgIC8vIEluamVjdCB0byBjdXN0b20gbG9jYXRpb25cbiAgICAgICAgICAgIGlmIChfaXMuc3RyaW5nKGNvbmZpZy5zZWxlY3RvcnMuY29udHJvbHMuY29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgIHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29uZmlnLnNlbGVjdG9ycy5jb250cm9scy5jb250YWluZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbmplY3QgaW50byB0aGUgY29udGFpbmVyIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIGlmICghX2lzLmh0bWxFbGVtZW50KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBwbHlyLmNvbnRhaW5lclxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbmplY3QgY29udHJvbHMgSFRNTFxuICAgICAgICAgICAgdGFyZ2V0Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgaHRtbCk7XG5cbiAgICAgICAgICAgIC8vIFNldHVwIHRvb2x0aXBzXG4gICAgICAgICAgICBpZiAoY29uZmlnLnRvb2x0aXBzLmNvbnRyb2xzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhYmVscyA9IF9nZXRFbGVtZW50cyhbY29uZmlnLnNlbGVjdG9ycy5jb250cm9scy53cmFwcGVyLCAnICcsIGNvbmZpZy5zZWxlY3RvcnMubGFiZWxzLCAnIC4nLCBjb25maWcuY2xhc3Nlcy5oaWRkZW5dLmpvaW4oJycpKTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBsYWJlbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gbGFiZWxzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhsYWJlbCwgY29uZmlnLmNsYXNzZXMuaGlkZGVuLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhsYWJlbCwgY29uZmlnLmNsYXNzZXMudG9vbHRpcCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZCB0aGUgVUkgY29udHJvbHMgYW5kIHN0b3JlIHJlZmVyZW5jZXNcbiAgICAgICAgZnVuY3Rpb24gX2ZpbmRFbGVtZW50cygpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGx5ci5jb250cm9scyAgICAgICAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmNvbnRyb2xzLndyYXBwZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gQnV0dG9uc1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucyA9IHt9O1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5zZWVrICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLnNlZWspO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5wbGF5ICAgICAgICAgICAgID0gX2dldEVsZW1lbnRzKGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5wbGF5KTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMucGF1c2UgICAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5wYXVzZSk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnJlc3RhcnQgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucmVzdGFydCk7XG4gICAgICAgICAgICAgICAgcGx5ci5idXR0b25zLnJld2luZCAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmJ1dHRvbnMucmV3aW5kKTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuZm9yd2FyZCAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5mb3J3YXJkKTtcbiAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuZnVsbHNjcmVlbiAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5mdWxsc2NyZWVuKTtcblxuICAgICAgICAgICAgICAgIC8vIElucHV0c1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5tdXRlICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLm11dGUpO1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5jYXB0aW9ucyAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5idXR0b25zLmNhcHRpb25zKTtcblxuICAgICAgICAgICAgICAgIC8vIFByb2dyZXNzXG4gICAgICAgICAgICAgICAgcGx5ci5wcm9ncmVzcyA9IHt9O1xuICAgICAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MuY29udGFpbmVyICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5wcm9ncmVzcy5jb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gUHJvZ3Jlc3MgLSBCdWZmZXJpbmdcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLmJ1ZmZlciAgICAgICAgICA9IHt9O1xuICAgICAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MuYnVmZmVyLmJhciAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5wcm9ncmVzcy5idWZmZXIpO1xuICAgICAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MuYnVmZmVyLnRleHQgICAgID0gcGx5ci5wcm9ncmVzcy5idWZmZXIuYmFyICYmIHBseXIucHJvZ3Jlc3MuYnVmZmVyLmJhci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc3BhbicpWzBdO1xuXG4gICAgICAgICAgICAgICAgLy8gUHJvZ3Jlc3MgLSBQbGF5ZWRcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLnBsYXllZCAgICAgICAgICA9IF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMucHJvZ3Jlc3MucGxheWVkKTtcblxuICAgICAgICAgICAgICAgIC8vIFNlZWsgdG9vbHRpcFxuICAgICAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MudG9vbHRpcCAgICAgICAgID0gcGx5ci5wcm9ncmVzcy5jb250YWluZXIgJiYgcGx5ci5wcm9ncmVzcy5jb250YWluZXIucXVlcnlTZWxlY3RvcignLicgKyBjb25maWcuY2xhc3Nlcy50b29sdGlwKTtcblxuICAgICAgICAgICAgICAgIC8vIFZvbHVtZVxuICAgICAgICAgICAgICAgIHBseXIudm9sdW1lICAgICAgICAgICAgICAgICAgID0ge307XG4gICAgICAgICAgICAgICAgcGx5ci52b2x1bWUuaW5wdXQgICAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLnZvbHVtZS5pbnB1dCk7XG4gICAgICAgICAgICAgICAgcGx5ci52b2x1bWUuZGlzcGxheSAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLnZvbHVtZS5kaXNwbGF5KTtcblxuICAgICAgICAgICAgICAgIC8vIFRpbWluZ1xuICAgICAgICAgICAgICAgIHBseXIuZHVyYXRpb24gICAgICAgICAgICAgICAgID0gX2dldEVsZW1lbnQoY29uZmlnLnNlbGVjdG9ycy5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgcGx5ci5jdXJyZW50VGltZSAgICAgICAgICAgICAgPSBfZ2V0RWxlbWVudChjb25maWcuc2VsZWN0b3JzLmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgICBwbHlyLnNlZWtUaW1lICAgICAgICAgICAgICAgICA9IF9nZXRFbGVtZW50cyhjb25maWcuc2VsZWN0b3JzLnNlZWtUaW1lKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2goZSkge1xuICAgICAgICAgICAgICAgIF93YXJuKCdJdCBsb29rcyBsaWtlIHRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHlvdXIgY29udHJvbHMgSFRNTCcpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBuYXRpdmUgdmlkZW8gY29udHJvbHNcbiAgICAgICAgICAgICAgICBfdG9nZ2xlTmF0aXZlQ29udHJvbHModHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUb2dnbGUgc3R5bGUgaG9va1xuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlU3R5bGVIb29rKCkge1xuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuc2VsZWN0b3JzLmNvbnRhaW5lci5yZXBsYWNlKCcuJywgJycpLCBwbHlyLnN1cHBvcnRlZC5mdWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvZ2dsZSBuYXRpdmUgY29udHJvbHNcbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZU5hdGl2ZUNvbnRyb2xzKHRvZ2dsZSkge1xuICAgICAgICAgICAgaWYgKHRvZ2dsZSAmJiBfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgnY29udHJvbHMnLCAnJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucmVtb3ZlQXR0cmlidXRlKCdjb250cm9scycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgYXJpYSBhdHRyaWJ1dGUgZm9yIHBsYXkgYW5kIGlmcmFtZSB0aXRsZVxuICAgICAgICBmdW5jdGlvbiBfc2V0VGl0bGUoaWZyYW1lKSB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBjdXJyZW50IHRleHRcbiAgICAgICAgICAgIHZhciBsYWJlbCA9IGNvbmZpZy5pMThuLnBsYXk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBtZWRpYSB0aXRsZSBzZXQsIHVzZSB0aGF0IGZvciB0aGUgbGFiZWxcbiAgICAgICAgICAgIGlmIChfaXMuc3RyaW5nKGNvbmZpZy50aXRsZSkgJiYgY29uZmlnLnRpdGxlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxhYmVsICs9ICcsICcgKyBjb25maWcudGl0bGU7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgY29udGFpbmVyIGxhYmVsXG4gICAgICAgICAgICAgICAgcGx5ci5jb250YWluZXIuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgY29uZmlnLnRpdGxlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBhIHBsYXkgYnV0dG9uLCBzZXQgbGFiZWxcbiAgICAgICAgICAgIGlmIChwbHlyLnN1cHBvcnRlZC5mdWxsICYmIHBseXIuYnV0dG9ucy5wbGF5KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHBseXIuYnV0dG9ucy5wbGF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5wbGF5W2ldLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGxhYmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBpZnJhbWUgdGl0bGVcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzEyNFxuICAgICAgICAgICAgaWYgKF9pcy5odG1sRWxlbWVudChpZnJhbWUpKSB7XG4gICAgICAgICAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgndGl0bGUnLCBjb25maWcuaTE4bi5mcmFtZVRpdGxlLnJlcGxhY2UoJ3t0aXRsZX0nLCBjb25maWcudGl0bGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGxvY2FsU3RvcmFnZVxuICAgICAgICBmdW5jdGlvbiBfc2V0dXBTdG9yYWdlKCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHBseXIuc3RvcmFnZSA9IHt9O1xuXG4gICAgICAgICAgICAvLyBCYWlsIGlmIHdlIGRvbid0IGhhdmUgbG9jYWxTdG9yYWdlIHN1cHBvcnQgb3IgaXQncyBkaXNhYmxlZFxuICAgICAgICAgICAgaWYgKCFfc3RvcmFnZS5zdXBwb3J0ZWQgfHwgIWNvbmZpZy5zdG9yYWdlLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENsZWFuIHVwIG9sZCB2b2x1bWVcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzE3MVxuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdwbHlyLXZvbHVtZScpO1xuXG4gICAgICAgICAgICAvLyBsb2FkIHZhbHVlIGZyb20gdGhlIGN1cnJlbnQga2V5XG4gICAgICAgICAgICB2YWx1ZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShjb25maWcuc3RvcmFnZS5rZXkpO1xuXG4gICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gS2V5IHdhc24ndCBzZXQgKG9yIGhhZCBiZWVuIGNsZWFyZWQpLCBtb3ZlIGFsb25nXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvXlxcZCsoXFwuXFxkKyk/JC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB2YWx1ZSBpcyBhIG51bWJlciwgaXQncyBwcm9iYWJseSB2b2x1bWUgZnJvbSBhbiBvbGRlclxuICAgICAgICAgICAgICAgIC8vIHZlcnNpb24gb2YgcGx5ci4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL3B1bGwvMzEzXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBrZXkgdG8gYmUgSlNPTlxuICAgICAgICAgICAgICAgIF91cGRhdGVTdG9yYWdlKHt2b2x1bWU6IHBhcnNlRmxvYXQodmFsdWUpfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFzc3VtZSBpdCdzIEpTT04gZnJvbSB0aGlzIG9yIGEgbGF0ZXIgdmVyc2lvbiBvZiBwbHlyXG4gICAgICAgICAgICAgICAgcGx5ci5zdG9yYWdlID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTYXZlIGEgdmFsdWUgYmFjayB0byBsb2NhbCBzdG9yYWdlXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVTdG9yYWdlKHZhbHVlKSB7XG4gICAgICAgICAgICAvLyBCYWlsIGlmIHdlIGRvbid0IGhhdmUgbG9jYWxTdG9yYWdlIHN1cHBvcnQgb3IgaXQncyBkaXNhYmxlZFxuICAgICAgICAgICAgaWYgKCFfc3RvcmFnZS5zdXBwb3J0ZWQgfHwgIWNvbmZpZy5zdG9yYWdlLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgd29ya2luZyBjb3B5IG9mIHRoZSB2YWx1ZXNcbiAgICAgICAgICAgIF9leHRlbmQocGx5ci5zdG9yYWdlLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBzdG9yYWdlXG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oY29uZmlnLnN0b3JhZ2Uua2V5LCBKU09OLnN0cmluZ2lmeShwbHlyLnN0b3JhZ2UpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIG1lZGlhXG4gICAgICAgIGZ1bmN0aW9uIF9zZXR1cE1lZGlhKCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBtZWRpYSwgYmFpbFxuICAgICAgICAgICAgaWYgKCFwbHlyLm1lZGlhKSB7XG4gICAgICAgICAgICAgICAgX3dhcm4oJ05vIG1lZGlhIGVsZW1lbnQgZm91bmQhJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIEFkZCB0eXBlIGNsYXNzXG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy50eXBlLnJlcGxhY2UoJ3swfScsIHBseXIudHlwZSksIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgLy8gQWRkIHZpZGVvIGNsYXNzIGZvciBlbWJlZHNcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgcmVxdWlyZSBjaGFuZ2VzIGlmIGF1ZGlvIGVtYmVkcyBhcmUgYWRkZWRcbiAgICAgICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmVtYmVkLCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMudHlwZS5yZXBsYWNlKCd7MH0nLCAndmlkZW8nKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBubyBhdXRvcGxheSBhdHRyaWJ1dGUsIGFzc3VtZSB0aGUgdmlkZW8gaXMgc3RvcHBlZCBhbmQgYWRkIHN0YXRlIGNsYXNzXG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5zdG9wcGVkLCBjb25maWcuYXV0b3BsYXkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQWRkIGlPUyBjbGFzc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLm9udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5pc0lvcywgcGx5ci5icm93c2VyLmlzSW9zKTtcblxuICAgICAgICAgICAgICAgIC8vIEFkZCB0b3VjaCBjbGFzc1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuaXNUb3VjaCwgcGx5ci5icm93c2VyLmlzVG91Y2gpO1xuXG4gICAgICAgICAgICAgICAgLy8gSW5qZWN0IHRoZSBwbGF5ZXIgd3JhcHBlclxuICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSB3cmFwcGVyIGRpdlxuICAgICAgICAgICAgICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjb25maWcuY2xhc3Nlcy52aWRlb1dyYXBwZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdyYXAgdGhlIHZpZGVvIGluIGEgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIF93cmFwKHBseXIubWVkaWEsIHdyYXBwZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhY2hlIHRoZSBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgcGx5ci52aWRlb0NvbnRhaW5lciA9IHdyYXBwZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFbWJlZHNcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuZW1iZWQsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBfc2V0dXBFbWJlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgWW91VHViZS9WaW1lb1xuICAgICAgICBmdW5jdGlvbiBfc2V0dXBFbWJlZCgpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgICAgICBtZWRpYUlkLFxuICAgICAgICAgICAgICAgIGlkID0gcGx5ci50eXBlICsgJy0nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEwMDAwKSk7XG5cbiAgICAgICAgICAgIC8vIFBhcnNlIElEcyBmcm9tIFVSTHMgaWYgc3VwcGxpZWRcbiAgICAgICAgICAgIHN3aXRjaCAocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhSWQgPSBfcGFyc2VZb3VUdWJlSWQocGx5ci5lbWJlZElkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIG1lZGlhSWQgPSBfcGFyc2VWaW1lb0lkKHBseXIuZW1iZWRJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgbWVkaWFJZCA9IHBseXIuZW1iZWRJZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVtb3ZlIG9sZCBjb250YWluZXJzXG4gICAgICAgICAgICB2YXIgY29udGFpbmVycyA9IF9nZXRFbGVtZW50cygnW2lkXj1cIicgKyBwbHlyLnR5cGUgKyAnLVwiXScpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGNvbnRhaW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBfcmVtb3ZlKGNvbnRhaW5lcnNbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgZW1iZWQgY2xhc3MgZm9yIHJlc3BvbnNpdmVcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLm1lZGlhLCBjb25maWcuY2xhc3Nlcy52aWRlb1dyYXBwZXIsIHRydWUpO1xuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIubWVkaWEsIGNvbmZpZy5jbGFzc2VzLmVtYmVkV3JhcHBlciwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd5b3V0dWJlJykge1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgWW91VHViZSBjb250YWluZXJcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgSURcbiAgICAgICAgICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldHVwIEFQSVxuICAgICAgICAgICAgICAgIGlmIChfaXMub2JqZWN0KHdpbmRvdy5ZVCkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3lvdVR1YmVSZWFkeShtZWRpYUlkLCBjb250YWluZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIExvYWQgdGhlIEFQSVxuICAgICAgICAgICAgICAgICAgICBfaW5qZWN0U2NyaXB0KGNvbmZpZy51cmxzLnlvdXR1YmUuYXBpKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBTZXR1cCBjYWxsYmFjayBmb3IgdGhlIEFQSVxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25Zb3VUdWJlUmVhZHlDYWxsYmFja3MgPSB3aW5kb3cub25Zb3VUdWJlUmVhZHlDYWxsYmFja3MgfHwgW107XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRvIHF1ZXVlXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vbllvdVR1YmVSZWFkeUNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uKCkgeyBfeW91VHViZVJlYWR5KG1lZGlhSWQsIGNvbnRhaW5lcik7IH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldCBjYWxsYmFjayB0byBwcm9jZXNzIHF1ZXVlXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vbllvdVR1YmVJZnJhbWVBUElSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5vbllvdVR1YmVSZWFkeUNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKSB7IGNhbGxiYWNrKCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGx5ci50eXBlID09PSAndmltZW8nKSB7XG4gICAgICAgICAgICAgICAgLy8gVmltZW8gbmVlZHMgYW4gZXh0cmEgZGl2IHRvIGhpZGUgY29udHJvbHMgb24gZGVza3RvcCAod2hpY2ggaGFzIGZ1bGwgc3VwcG9ydClcbiAgICAgICAgICAgICAgICBpZiAocGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gcGx5ci5tZWRpYTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgSURcbiAgICAgICAgICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcblxuICAgICAgICAgICAgICAgIC8vIExvYWQgdGhlIEFQSSBpZiBub3QgYWxyZWFkeVxuICAgICAgICAgICAgICAgIGlmICghX2lzLm9iamVjdCh3aW5kb3cuVmltZW8pKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pbmplY3RTY3JpcHQoY29uZmlnLnVybHMudmltZW8uYXBpKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXYWl0IGZvciBmcmFnYWxvb3AgbG9hZFxuICAgICAgICAgICAgICAgICAgICB2YXIgdmltZW9UaW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXMub2JqZWN0KHdpbmRvdy5WaW1lbykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh2aW1lb1RpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdmltZW9SZWFkeShtZWRpYUlkLCBjb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3ZpbWVvUmVhZHkobWVkaWFJZCwgY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBseXIudHlwZSA9PT0gJ3NvdW5kY2xvdWQnKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQ3VycmVudGx5IHVuc3VwcG9ydGVkIGFuZCB1bmRvY3VtZW50ZWRcbiAgICAgICAgICAgICAgICAvLyBJbmplY3QgdGhlIGlmcmFtZVxuICAgICAgICAgICAgICAgIHZhciBzb3VuZENsb3VkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXYXRjaCBmb3IgaWZyYW1lIGxvYWRcbiAgICAgICAgICAgICAgICBzb3VuZENsb3VkLmxvYWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF9vbihzb3VuZENsb3VkLCAnbG9hZCcsIGZ1bmN0aW9uKCkgeyBzb3VuZENsb3VkLmxvYWRlZCA9IHRydWU7IH0pO1xuXG4gICAgICAgICAgICAgICAgX3NldEF0dHJpYnV0ZXMoc291bmRDbG91ZCwge1xuICAgICAgICAgICAgICAgICAgICAnc3JjJzogICdodHRwczovL3cuc291bmRjbG91ZC5jb20vcGxheWVyLz91cmw9aHR0cHM6Ly9hcGkuc291bmRjbG91ZC5jb20vdHJhY2tzLycgKyBtZWRpYUlkLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAgIGlkXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoc291bmRDbG91ZCk7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gTG9hZCB0aGUgQVBJIGlmIG5vdCBhbHJlYWR5XG4gICAgICAgICAgICAgICAgaWYgKCF3aW5kb3cuU0MpIHtcbiAgICAgICAgICAgICAgICAgICAgX2luamVjdFNjcmlwdChjb25maWcudXJscy5zb3VuZGNsb3VkLmFwaSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gV2FpdCBmb3IgU0MgbG9hZFxuICAgICAgICAgICAgICAgIHZhciBzb3VuZENsb3VkVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuU0MgJiYgc291bmRDbG91ZC5sb2FkZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHNvdW5kQ2xvdWRUaW1lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc291bmRjbG91ZFJlYWR5LmNhbGwoc291bmRDbG91ZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCA1MCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIGVtYmVkcyBhcmUgcmVhZHlcbiAgICAgICAgZnVuY3Rpb24gX2VtYmVkUmVhZHkoKSB7XG4gICAgICAgICAgICAvLyBTZXR1cCB0aGUgVUkgYW5kIGNhbGwgcmVhZHkgaWYgZnVsbCBzdXBwb3J0XG4gICAgICAgICAgICBpZiAocGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIF9zZXR1cEludGVyZmFjZSgpO1xuICAgICAgICAgICAgICAgIF9yZWFkeSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdGl0bGVcbiAgICAgICAgICAgIF9zZXRUaXRsZShfZ2V0RWxlbWVudCgnaWZyYW1lJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIFlvdVR1YmUgQVBJIHJlYWR5XG4gICAgICAgIGZ1bmN0aW9uIF95b3VUdWJlUmVhZHkodmlkZW9JZCwgY29udGFpbmVyKSB7XG4gICAgICAgICAgICAvLyBTZXR1cCBpbnN0YW5jZVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20veW91dHViZS9pZnJhbWVfYXBpX3JlZmVyZW5jZVxuICAgICAgICAgICAgcGx5ci5lbWJlZCA9IG5ldyB3aW5kb3cuWVQuUGxheWVyKGNvbnRhaW5lci5pZCwge1xuICAgICAgICAgICAgICAgIHZpZGVvSWQ6IHZpZGVvSWQsXG4gICAgICAgICAgICAgICAgcGxheWVyVmFyczoge1xuICAgICAgICAgICAgICAgICAgICBhdXRvcGxheTogICAgICAgKGNvbmZpZy5hdXRvcGxheSA/IDEgOiAwKSxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbHM6ICAgICAgIChwbHlyLnN1cHBvcnRlZC5mdWxsID8gMCA6IDEpLFxuICAgICAgICAgICAgICAgICAgICByZWw6ICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgc2hvd2luZm86ICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIGl2X2xvYWRfcG9saWN5OiAzLFxuICAgICAgICAgICAgICAgICAgICBjY19sb2FkX3BvbGljeTogKGNvbmZpZy5jYXB0aW9ucy5kZWZhdWx0QWN0aXZlID8gMSA6IDApLFxuICAgICAgICAgICAgICAgICAgICBjY19sYW5nX3ByZWY6ICAgJ2VuJyxcbiAgICAgICAgICAgICAgICAgICAgd21vZGU6ICAgICAgICAgICd0cmFuc3BhcmVudCcsXG4gICAgICAgICAgICAgICAgICAgIG1vZGVzdGJyYW5kaW5nOiAxLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxla2I6ICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiAgICAgICAgICcqJyAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2dkYXRhLWlzc3Vlcy9pc3N1ZXMvZGV0YWlsP2lkPTU3ODgjYzQ1XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgJ29uRXJyb3InOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLmNvbnRhaW5lciwgJ2Vycm9yJywgdHJ1ZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICAgZXZlbnQuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWJlZDogIGV2ZW50LnRhcmdldFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdvblJlYWR5JzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgZmF1eCBIVE1MNSBBUEkgdXNpbmcgdGhlIFlvdVR1YmUgQVBJXG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5wbGF5VmlkZW8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYXVzZVZpZGVvKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnN0b3BWaWRlbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmR1cmF0aW9uID0gaW5zdGFuY2UuZ2V0RHVyYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5tdXRlZCA9IGluc3RhbmNlLmlzTXV0ZWQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcudGl0bGUgPSBpbnN0YW5jZS5nZXRWaWRlb0RhdGEoKS50aXRsZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSB0YWJpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIFVJXG4gICAgICAgICAgICAgICAgICAgICAgICBfZW1iZWRSZWFkeSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRpbWV1cGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdkdXJhdGlvbmNoYW5nZScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCB0aW1lclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXJzLmJ1ZmZlcmluZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldHVwIGJ1ZmZlcmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXJzLmJ1ZmZlcmluZyA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgbG9hZGVkICUgZnJvbSBZb3VUdWJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5idWZmZXJlZCA9IGluc3RhbmNlLmdldFZpZGVvTG9hZGVkRnJhY3Rpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgcHJvZ3Jlc3Mgb25seSB3aGVuIHdlIGFjdHVhbGx5IGJ1ZmZlciBzb21ldGhpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5sYXN0QnVmZmVyZWQgPT09IG51bGwgfHwgcGx5ci5tZWRpYS5sYXN0QnVmZmVyZWQgPCBwbHlyLm1lZGlhLmJ1ZmZlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3Byb2dyZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGxhc3QgYnVmZmVyIHBvaW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5sYXN0QnVmZmVyZWQgPSBwbHlyLm1lZGlhLmJ1ZmZlcmVkO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQmFpbCBpZiB3ZSdyZSBhdCAxMDAlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIubWVkaWEuYnVmZmVyZWQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXJzLmJ1ZmZlcmluZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdjYW5wbGF5dGhyb3VnaCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdvblN0YXRlQ2hhbmdlJzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgdGltZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVycy5wbGF5aW5nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLTEgICBVbnN0YXJ0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgRW5kZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDEgICAgUGxheWluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMiAgICBQYXVzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDMgICAgQnVmZmVyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA1ICAgIFZpZGVvIGN1ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdlbmRlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSB3ZXJlIHNlZWtpbmcsIGZpcmUgc2Vla2VkIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnNlZWtpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3NlZWtlZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheWluZycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvbGwgdG8gZ2V0IHBsYXliYWNrIHByb2dyZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVycy5wbGF5aW5nID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSBpbnN0YW5jZS5nZXRDdXJyZW50VGltZSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRpbWV1cGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBkdXJhdGlvbiBhZ2FpbiBkdWUgdG8gWW91VHViZSBidWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9pc3N1ZXMvMzc0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvZ2RhdGEtaXNzdWVzL2lzc3Vlcy9kZXRhaWw/aWQ9ODY5MFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5tZWRpYS5kdXJhdGlvbiAhPT0gaW5zdGFuY2UuZ2V0RHVyYXRpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5kdXJhdGlvbiA9IGluc3RhbmNlLmdldER1cmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdkdXJhdGlvbmNoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGF1c2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5jb250YWluZXIsICdzdGF0ZWNoYW5nZScsIGZhbHNlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogZXZlbnQuZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZpbWVvIHJlYWR5XG4gICAgICAgIGZ1bmN0aW9uIF92aW1lb1JlYWR5KG1lZGlhSWQsIGNvbnRhaW5lcikge1xuICAgICAgICAgICAgLy8gU2V0dXAgaW5zdGFuY2VcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92aW1lby9wbGF5ZXIuanNcbiAgICAgICAgICAgIHBseXIuZW1iZWQgPSBuZXcgd2luZG93LlZpbWVvLlBsYXllcihjb250YWluZXIsIHtcbiAgICAgICAgICAgICAgICBpZDogICAgICAgICBwYXJzZUludChtZWRpYUlkKSxcbiAgICAgICAgICAgICAgICBsb29wOiAgICAgICBjb25maWcubG9vcCxcbiAgICAgICAgICAgICAgICBhdXRvcGxheTogICBjb25maWcuYXV0b3BsYXksXG4gICAgICAgICAgICAgICAgYnlsaW5lOiAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgcG9ydHJhaXQ6ICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICAgICAgZmFsc2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBmYXV4IEhUTUw1IEFQSSB1c2luZyB0aGUgVmltZW8gQVBJXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnBsYXkoKTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHBseXIubWVkaWEuc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc3RvcCgpO1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHBseXIubWVkaWEuY3VycmVudFRpbWUgPSAwO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgVUlcbiAgICAgICAgICAgIF9lbWJlZFJlYWR5KCk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQuZ2V0Q3VycmVudFRpbWUoKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndGltZXVwZGF0ZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQuZ2V0RHVyYXRpb24oKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5kdXJhdGlvbiA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZHVyYXRpb25jaGFuZ2UnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBDYXB0aW9uc1xuICAgICAgICAgICAgLyppZiAoY29uZmlnLmNhcHRpb25zLmRlZmF1bHRBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmVuYWJsZVRleHRUcmFjaygnZW4nKTtcbiAgICAgICAgICAgIH0qL1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLm9uKCdsb2FkZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBGaXgga2V5Ym9hcmQgZm9jdXMgaXNzdWVzXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1NlbHovcGx5ci9pc3N1ZXMvMzE3XG4gICAgICAgICAgICAgICAgaWYgKF9pcy5odG1sRWxlbWVudChwbHlyLmVtYmVkLmVsZW1lbnQpICYmIHBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbigncGxheScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheScpO1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BsYXlpbmcnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLm9uKCdwYXVzZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwYXVzZScpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBseXIuZW1iZWQub24oJ3RpbWV1cGRhdGUnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZWVraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IGRhdGEuc2Vjb25kcztcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd0aW1ldXBkYXRlJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbigncHJvZ3Jlc3MnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5idWZmZXJlZCA9IGRhdGEucGVyY2VudDtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwcm9ncmVzcycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KGRhdGEucGVyY2VudCkgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBldmVudFxuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdjYW5wbGF5dGhyb3VnaCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwbHlyLmVtYmVkLm9uKCdzZWVrZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNlZWtpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdzZWVrZWQnKTtcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5Jyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGx5ci5lbWJlZC5vbignZW5kZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnZW5kZWQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU291bmRjbG91ZCByZWFkeVxuICAgICAgICBmdW5jdGlvbiBfc291bmRjbG91ZFJlYWR5KCkge1xuICAgICAgICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgICAgICAgcGx5ci5lbWJlZCA9IHdpbmRvdy5TQy5XaWRnZXQodGhpcyk7XG5cbiAgICAgICAgICAgIC8vIFNldHVwIG9uIHJlYWR5XG4gICAgICAgICAgICBwbHlyLmVtYmVkLmJpbmQod2luZG93LlNDLldpZGdldC5FdmVudHMuUkVBRFksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGZhdXggSFRNTDUgQVBJIHVzaW5nIHRoZSBTb3VuZGNsb3VkIEFQSVxuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGxheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnBsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5wYXVzZSgpO1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZWVrVG8oMCk7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQucGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IDA7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmdldER1cmF0aW9uKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuZHVyYXRpb24gPSB2YWx1ZS8xMDAwO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBVSVxuICAgICAgICAgICAgICAgICAgICBfZW1iZWRSZWFkeSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5nZXRQb3NpdGlvbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lID0gdmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aW1ldXBkYXRlXG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuYmluZCh3aW5kb3cuU0MuV2lkZ2V0LkV2ZW50cy5QTEFZLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncGxheScpO1xuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdwbGF5aW5nJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmJpbmQod2luZG93LlNDLldpZGdldC5FdmVudHMuUEFVU0UsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3BhdXNlJyk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmJpbmQod2luZG93LlNDLldpZGdldC5FdmVudHMuUExBWV9QUk9HUkVTUywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNlZWtpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IGRhdGEuY3VycmVudFBvc2l0aW9uLzEwMDA7XG4gICAgICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuYmluZCh3aW5kb3cuU0MuV2lkZ2V0LkV2ZW50cy5MT0FEX1BST0dSRVNTLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuYnVmZmVyZWQgPSBkYXRhLmxvYWRQcm9ncmVzcztcbiAgICAgICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAncHJvZ3Jlc3MnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoZGF0YS5sb2FkUHJvZ3Jlc3MpID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdjYW5wbGF5dGhyb3VnaCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmJpbmQod2luZG93LlNDLldpZGdldC5FdmVudHMuRklOSVNILCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICdlbmRlZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQbGF5IG1lZGlhXG4gICAgICAgIGZ1bmN0aW9uIF9wbGF5KCkge1xuICAgICAgICAgICAgaWYgKCdwbGF5JyBpbiBwbHlyLm1lZGlhKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wbGF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQYXVzZSBtZWRpYVxuICAgICAgICBmdW5jdGlvbiBfcGF1c2UoKSB7XG4gICAgICAgICAgICBpZiAoJ3BhdXNlJyBpbiBwbHlyLm1lZGlhKSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5wYXVzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG9nZ2xlIHBsYXliYWNrXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVQbGF5KHRvZ2dsZSkge1xuICAgICAgICAgICAgLy8gVHJ1ZSB0b2dnbGVcbiAgICAgICAgICAgIGlmICghX2lzLmJvb2xlYW4odG9nZ2xlKSkge1xuICAgICAgICAgICAgICAgIHRvZ2dsZSA9IHBseXIubWVkaWEucGF1c2VkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodG9nZ2xlKSB7XG4gICAgICAgICAgICAgICAgX3BsYXkoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3BhdXNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0b2dnbGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXdpbmRcbiAgICAgICAgZnVuY3Rpb24gX3Jld2luZChzZWVrVGltZSkge1xuICAgICAgICAgICAgLy8gVXNlIGRlZmF1bHQgaWYgbmVlZGVkXG4gICAgICAgICAgICBpZiAoIV9pcy5udW1iZXIoc2Vla1RpbWUpKSB7XG4gICAgICAgICAgICAgICAgc2Vla1RpbWUgPSBjb25maWcuc2Vla1RpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfc2VlayhwbHlyLm1lZGlhLmN1cnJlbnRUaW1lIC0gc2Vla1RpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmFzdCBmb3J3YXJkXG4gICAgICAgIGZ1bmN0aW9uIF9mb3J3YXJkKHNlZWtUaW1lKSB7XG4gICAgICAgICAgICAvLyBVc2UgZGVmYXVsdCBpZiBuZWVkZWRcbiAgICAgICAgICAgIGlmICghX2lzLm51bWJlcihzZWVrVGltZSkpIHtcbiAgICAgICAgICAgICAgICBzZWVrVGltZSA9IGNvbmZpZy5zZWVrVGltZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9zZWVrKHBseXIubWVkaWEuY3VycmVudFRpbWUgKyBzZWVrVGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZWVrIHRvIHRpbWVcbiAgICAgICAgLy8gVGhlIGlucHV0IHBhcmFtZXRlciBjYW4gYmUgYW4gZXZlbnQgb3IgYSBudW1iZXJcbiAgICAgICAgZnVuY3Rpb24gX3NlZWsoaW5wdXQpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRUaW1lICA9IDAsXG4gICAgICAgICAgICAgICAgcGF1c2VkICAgICAgPSBwbHlyLm1lZGlhLnBhdXNlZCxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiAgICA9IF9nZXREdXJhdGlvbigpO1xuXG4gICAgICAgICAgICBpZiAoX2lzLm51bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRUaW1lID0gaW5wdXQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF9pcy5vYmplY3QoaW5wdXQpICYmIF9pbkFycmF5KFsnaW5wdXQnLCAnY2hhbmdlJ10sIGlucHV0LnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyB0aGUgc2VlayBzbGlkZXJcbiAgICAgICAgICAgICAgICAvLyBTZWVrIHRvIHRoZSBzZWxlY3RlZCB0aW1lXG4gICAgICAgICAgICAgICAgdGFyZ2V0VGltZSA9ICgoaW5wdXQudGFyZ2V0LnZhbHVlIC8gaW5wdXQudGFyZ2V0Lm1heCkgKiBkdXJhdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5vcm1hbGlzZSB0YXJnZXRUaW1lXG4gICAgICAgICAgICBpZiAodGFyZ2V0VGltZSA8IDApIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRUaW1lID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0VGltZSA+IGR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0VGltZSA9IGR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgc2VlayByYW5nZSBhbmQgcHJvZ3Jlc3NcbiAgICAgICAgICAgIF91cGRhdGVTZWVrRGlzcGxheSh0YXJnZXRUaW1lKTtcblxuICAgICAgICAgICAgLy8gU2V0IHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgICAgIC8vIFRyeS9jYXRjaCBpbmNhc2UgdGhlIG1lZGlhIGlzbid0IHNldCBhbmQgd2UncmUgY2FsbGluZyBzZWVrKCkgZnJvbSBzb3VyY2UoKSBhbmQgSUUgbW9hbnNcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5jdXJyZW50VGltZSA9IHRhcmdldFRpbWUudG9GaXhlZCg0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoKGUpIHt9XG5cbiAgICAgICAgICAgIC8vIEVtYmVkc1xuICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaChwbHlyLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnNlZWtUbyh0YXJnZXRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZpbWVvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRvIG5lYXJlc3Qgc2Vjb25kIGZvciB2aW1lb1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5zZXRDdXJyZW50VGltZSh0YXJnZXRUaW1lLnRvRml4ZWQoMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc291bmRjbG91ZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnNlZWtUbyh0YXJnZXRUaW1lICogMTAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIF9wYXVzZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdGltZXVwZGF0ZVxuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3RpbWV1cGRhdGUnKTtcblxuICAgICAgICAgICAgICAgIC8vIFNldCBzZWVraW5nIGZsYWdcbiAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNlZWtpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBzZWVraW5nXG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAnc2Vla2luZycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMb2dnaW5nXG4gICAgICAgICAgICBfbG9nKCdTZWVraW5nIHRvICcgKyBwbHlyLm1lZGlhLmN1cnJlbnRUaW1lICsgJyBzZWNvbmRzJyk7XG5cbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yICdtYW51YWwnIGNhcHRpb25zXG4gICAgICAgICAgICBfc2Vla01hbnVhbENhcHRpb25zKHRhcmdldFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBkdXJhdGlvbiAob3IgY3VzdG9tIGlmIHNldClcbiAgICAgICAgZnVuY3Rpb24gX2dldER1cmF0aW9uKCkge1xuICAgICAgICAgICAgLy8gSXQgc2hvdWxkIGJlIGEgbnVtYmVyLCBidXQgcGFyc2UgaXQganVzdCBpbmNhc2VcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHBhcnNlSW50KGNvbmZpZy5kdXJhdGlvbiksXG5cbiAgICAgICAgICAgIC8vIFRydWUgZHVyYXRpb25cbiAgICAgICAgICAgIG1lZGlhRHVyYXRpb24gPSAwO1xuXG4gICAgICAgICAgICAvLyBPbmx5IGlmIGR1cmF0aW9uIGF2YWlsYWJsZVxuICAgICAgICAgICAgaWYgKHBseXIubWVkaWEuZHVyYXRpb24gIT09IG51bGwgJiYgIWlzTmFOKHBseXIubWVkaWEuZHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgbWVkaWFEdXJhdGlvbiA9IHBseXIubWVkaWEuZHVyYXRpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGN1c3RvbSBkdXJhdGlvbiBpcyBmdW5reSwgdXNlIHJlZ3VsYXIgZHVyYXRpb25cbiAgICAgICAgICAgIHJldHVybiAoaXNOYU4oZHVyYXRpb24pID8gbWVkaWFEdXJhdGlvbiA6IGR1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIHBsYXlpbmcgc3RhdGVcbiAgICAgICAgZnVuY3Rpb24gX2NoZWNrUGxheWluZygpIHtcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMucGxheWluZywgIXBseXIubWVkaWEucGF1c2VkKTtcblxuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5zdG9wcGVkLCBwbHlyLm1lZGlhLnBhdXNlZCk7XG5cbiAgICAgICAgICAgIF90b2dnbGVDb250cm9scyhwbHlyLm1lZGlhLnBhdXNlZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTYXZlIHNjcm9sbCBwb3NpdGlvblxuICAgICAgICBmdW5jdGlvbiBfc2F2ZVNjcm9sbFBvc2l0aW9uKCkge1xuICAgICAgICAgICAgc2Nyb2xsID0ge1xuICAgICAgICAgICAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCB8fCAwLFxuICAgICAgICAgICAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldCB8fCAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzdG9yZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgICAgZnVuY3Rpb24gX3Jlc3RvcmVTY3JvbGxQb3NpdGlvbigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGwueCwgc2Nyb2xsLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG9nZ2xlIGZ1bGxzY3JlZW5cbiAgICAgICAgZnVuY3Rpb24gX3RvZ2dsZUZ1bGxzY3JlZW4oZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGZvciBuYXRpdmUgc3VwcG9ydFxuICAgICAgICAgICAgdmFyIG5hdGl2ZVN1cHBvcnQgPSBmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbjtcblxuICAgICAgICAgICAgaWYgKG5hdGl2ZVN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBpdCdzIGEgZnVsbHNjcmVlbiBjaGFuZ2UgZXZlbnQsIHVwZGF0ZSB0aGUgVUlcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gZnVsbHNjcmVlbi5mdWxsU2NyZWVuRXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHBseXIuaXNGdWxsc2NyZWVuID0gZnVsbHNjcmVlbi5pc0Z1bGxTY3JlZW4ocGx5ci5jb250YWluZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVsc2UgaXQncyBhIHVzZXIgcmVxdWVzdCB0byBlbnRlciBvciBleGl0XG4gICAgICAgICAgICAgICAgICAgIGlmICghZnVsbHNjcmVlbi5pc0Z1bGxTY3JlZW4ocGx5ci5jb250YWluZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXZlIHNjcm9sbCBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgX3NhdmVTY3JvbGxQb3NpdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXF1ZXN0IGZ1bGwgc2NyZWVuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsc2NyZWVuLnJlcXVlc3RGdWxsU2NyZWVuKHBseXIuY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhaWwgZnJvbSBmdWxsc2NyZWVuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsc2NyZWVuLmNhbmNlbEZ1bGxTY3JlZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IGZ1bGwgc2NyZWVuIChpdCBjb3VsZCBmYWlsKVxuICAgICAgICAgICAgICAgICAgICBwbHlyLmlzRnVsbHNjcmVlbiA9IGZ1bGxzY3JlZW4uaXNGdWxsU2NyZWVuKHBseXIuY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIGl0J3MgYSBzaW1wbGUgdG9nZ2xlXG4gICAgICAgICAgICAgICAgcGx5ci5pc0Z1bGxzY3JlZW4gPSAhcGx5ci5pc0Z1bGxzY3JlZW47XG5cbiAgICAgICAgICAgICAgICAvLyBCaW5kL3VuYmluZCBlc2NhcGUga2V5XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IHBseXIuaXNGdWxsc2NyZWVuID8gJ2hpZGRlbicgOiAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IGNsYXNzIGhvb2tcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuZnVsbHNjcmVlbi5hY3RpdmUsIHBseXIuaXNGdWxsc2NyZWVuKTtcblxuICAgICAgICAgICAgLy8gVHJhcCBmb2N1c1xuICAgICAgICAgICAgX2ZvY3VzVHJhcChwbHlyLmlzRnVsbHNjcmVlbik7XG5cbiAgICAgICAgICAgIC8vIFNldCBidXR0b24gc3RhdGVcbiAgICAgICAgICAgIGlmIChwbHlyLmJ1dHRvbnMgJiYgcGx5ci5idXR0b25zLmZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlU3RhdGUocGx5ci5idXR0b25zLmZ1bGxzY3JlZW4sIHBseXIuaXNGdWxsc2NyZWVuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVHJpZ2dlciBhbiBldmVudFxuICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLmNvbnRhaW5lciwgcGx5ci5pc0Z1bGxzY3JlZW4gPyAnZW50ZXJmdWxsc2NyZWVuJyA6ICdleGl0ZnVsbHNjcmVlbicsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBSZXN0b3JlIHNjcm9sbCBwb3NpdGlvblxuICAgICAgICAgICAgaWYgKCFwbHlyLmlzRnVsbHNjcmVlbiAmJiBuYXRpdmVTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgX3Jlc3RvcmVTY3JvbGxQb3NpdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTXV0ZVxuICAgICAgICBmdW5jdGlvbiBfdG9nZ2xlTXV0ZShtdXRlZCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIG1ldGhvZCBpcyBjYWxsZWQgd2l0aG91dCBwYXJhbWV0ZXIsIHRvZ2dsZSBiYXNlZCBvbiBjdXJyZW50IHZhbHVlXG4gICAgICAgICAgICBpZiAoIV9pcy5ib29sZWFuKG11dGVkKSkge1xuICAgICAgICAgICAgICAgIG11dGVkID0gIXBseXIubWVkaWEubXV0ZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBidXR0b24gc3RhdGVcbiAgICAgICAgICAgIF90b2dnbGVTdGF0ZShwbHlyLmJ1dHRvbnMubXV0ZSwgbXV0ZWQpO1xuXG4gICAgICAgICAgICAvLyBTZXQgbXV0ZSBvbiB0aGUgcGxheWVyXG4gICAgICAgICAgICBwbHlyLm1lZGlhLm11dGVkID0gbXV0ZWQ7XG5cbiAgICAgICAgICAgIC8vIElmIHZvbHVtZSBpcyAwIGFmdGVyIHVubXV0aW5nLCBzZXQgdG8gZGVmYXVsdFxuICAgICAgICAgICAgaWYgKHBseXIubWVkaWEudm9sdW1lID09PSAwKSB7XG4gICAgICAgICAgICAgICAgX3NldFZvbHVtZShjb25maWcudm9sdW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW1iZWRzXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmVtYmVkLCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgLy8gWW91VHViZVxuICAgICAgICAgICAgICAgIHN3aXRjaChwbHlyLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkW3BseXIubWVkaWEubXV0ZWQgPyAnbXV0ZScgOiAndW5NdXRlJ10oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZpbWVvJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc291bmRjbG91ZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnNldFZvbHVtZShwbHlyLm1lZGlhLm11dGVkID8gMCA6IHBhcnNlRmxvYXQoY29uZmlnLnZvbHVtZSAvIGNvbmZpZy52b2x1bWVNYXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgdm9sdW1lY2hhbmdlIGZvciBlbWJlZHNcbiAgICAgICAgICAgICAgICBfdHJpZ2dlckV2ZW50KHBseXIubWVkaWEsICd2b2x1bWVjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB2b2x1bWVcbiAgICAgICAgZnVuY3Rpb24gX3NldFZvbHVtZSh2b2x1bWUpIHtcbiAgICAgICAgICAgIHZhciBtYXggPSBjb25maWcudm9sdW1lTWF4LFxuICAgICAgICAgICAgICAgIG1pbiA9IGNvbmZpZy52b2x1bWVNaW47XG5cbiAgICAgICAgICAgIC8vIExvYWQgdm9sdW1lIGZyb20gc3RvcmFnZSBpZiBubyB2YWx1ZSBzcGVjaWZpZWRcbiAgICAgICAgICAgIGlmIChfaXMudW5kZWZpbmVkKHZvbHVtZSkpIHtcbiAgICAgICAgICAgICAgICB2b2x1bWUgPSBwbHlyLnN0b3JhZ2Uudm9sdW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVc2UgY29uZmlnIGlmIGFsbCBlbHNlIGZhaWxzXG4gICAgICAgICAgICBpZiAodm9sdW1lID09PSBudWxsIHx8IGlzTmFOKHZvbHVtZSkpIHtcbiAgICAgICAgICAgICAgICB2b2x1bWUgPSBjb25maWcudm9sdW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNYXhpbXVtIGlzIHZvbHVtZU1heFxuICAgICAgICAgICAgaWYgKHZvbHVtZSA+IG1heCkge1xuICAgICAgICAgICAgICAgIHZvbHVtZSA9IG1heDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1pbmltdW0gaXMgdm9sdW1lTWluXG4gICAgICAgICAgICBpZiAodm9sdW1lIDwgbWluKSB7XG4gICAgICAgICAgICAgICAgdm9sdW1lID0gbWluO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIHBsYXllciB2b2x1bWVcbiAgICAgICAgICAgIHBseXIubWVkaWEudm9sdW1lID0gcGFyc2VGbG9hdCh2b2x1bWUgLyBtYXgpO1xuXG4gICAgICAgICAgICAvLyBTZXQgdGhlIGRpc3BsYXlcbiAgICAgICAgICAgIGlmIChwbHlyLnZvbHVtZS5kaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgcGx5ci52b2x1bWUuZGlzcGxheS52YWx1ZSA9IHZvbHVtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRW1iZWRzXG4gICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmVtYmVkLCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHBseXIudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIuZW1iZWQuc2V0Vm9sdW1lKHBseXIubWVkaWEudm9sdW1lICogMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ZpbWVvJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc291bmRjbG91ZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLnNldFZvbHVtZShwbHlyLm1lZGlhLnZvbHVtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHZvbHVtZWNoYW5nZSBmb3IgZW1iZWRzXG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLm1lZGlhLCAndm9sdW1lY2hhbmdlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRvZ2dsZSBtdXRlZCBzdGF0ZVxuICAgICAgICAgICAgaWYgKHZvbHVtZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEubXV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwbHlyLm1lZGlhLm11dGVkICYmIHZvbHVtZSA+IDApIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlTXV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5jcmVhc2Ugdm9sdW1lXG4gICAgICAgIGZ1bmN0aW9uIF9pbmNyZWFzZVZvbHVtZShzdGVwKSB7XG4gICAgICAgICAgICB2YXIgdm9sdW1lID0gcGx5ci5tZWRpYS5tdXRlZCA/IDAgOiAocGx5ci5tZWRpYS52b2x1bWUgKiBjb25maWcudm9sdW1lTWF4KTtcblxuICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKHN0ZXApKSB7XG4gICAgICAgICAgICAgICAgc3RlcCA9IGNvbmZpZy52b2x1bWVTdGVwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfc2V0Vm9sdW1lKHZvbHVtZSArIHN0ZXApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVjcmVhc2Ugdm9sdW1lXG4gICAgICAgIGZ1bmN0aW9uIF9kZWNyZWFzZVZvbHVtZShzdGVwKSB7XG4gICAgICAgICAgICB2YXIgdm9sdW1lID0gcGx5ci5tZWRpYS5tdXRlZCA/IDAgOiAocGx5ci5tZWRpYS52b2x1bWUgKiBjb25maWcudm9sdW1lTWF4KTtcblxuICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKHN0ZXApKSB7XG4gICAgICAgICAgICAgICAgc3RlcCA9IGNvbmZpZy52b2x1bWVTdGVwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfc2V0Vm9sdW1lKHZvbHVtZSAtIHN0ZXApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHZvbHVtZSBVSSBhbmQgc3RvcmFnZVxuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlVm9sdW1lKCkge1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHZvbHVtZVxuICAgICAgICAgICAgdmFyIHZvbHVtZSA9IHBseXIubWVkaWEubXV0ZWQgPyAwIDogKHBseXIubWVkaWEudm9sdW1lICogY29uZmlnLnZvbHVtZU1heCk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgPGlucHV0IHR5cGU9XCJyYW5nZVwiPiBpZiBwcmVzZW50XG4gICAgICAgICAgICBpZiAocGx5ci5zdXBwb3J0ZWQuZnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChwbHlyLnZvbHVtZS5pbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLnZvbHVtZS5pbnB1dC52YWx1ZSA9IHZvbHVtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBseXIudm9sdW1lLmRpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci52b2x1bWUuZGlzcGxheS52YWx1ZSA9IHZvbHVtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgdm9sdW1lIGluIHN0b3JhZ2VcbiAgICAgICAgICAgIF91cGRhdGVTdG9yYWdlKHt2b2x1bWU6IHZvbHVtZX0pO1xuXG4gICAgICAgICAgICAvLyBUb2dnbGUgY2xhc3MgaWYgbXV0ZWRcbiAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMubXV0ZWQsICh2b2x1bWUgPT09IDApKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIGNoZWNrYm94IGZvciBtdXRlIHN0YXRlXG4gICAgICAgICAgICBpZiAocGx5ci5zdXBwb3J0ZWQuZnVsbCAmJiBwbHlyLmJ1dHRvbnMubXV0ZSkge1xuICAgICAgICAgICAgICAgIF90b2dnbGVTdGF0ZShwbHlyLmJ1dHRvbnMubXV0ZSwgKHZvbHVtZSA9PT0gMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVG9nZ2xlIGNhcHRpb25zXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVDYXB0aW9ucyhzaG93KSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGZ1bGwgc3VwcG9ydCwgb3IgdGhlcmUncyBubyBjYXB0aW9uIHRvZ2dsZVxuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsIHx8ICFwbHlyLmJ1dHRvbnMuY2FwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBtZXRob2QgaXMgY2FsbGVkIHdpdGhvdXQgcGFyYW1ldGVyLCB0b2dnbGUgYmFzZWQgb24gY3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgaWYgKCFfaXMuYm9vbGVhbihzaG93KSkge1xuICAgICAgICAgICAgICAgIHNob3cgPSAocGx5ci5jb250YWluZXIuY2xhc3NOYW1lLmluZGV4T2YoY29uZmlnLmNsYXNzZXMuY2FwdGlvbnMuYWN0aXZlKSA9PT0gLTEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgZ2xvYmFsXG4gICAgICAgICAgICBwbHlyLmNhcHRpb25zRW5hYmxlZCA9IHNob3c7XG5cbiAgICAgICAgICAgIC8vIFRvZ2dsZSBzdGF0ZVxuICAgICAgICAgICAgX3RvZ2dsZVN0YXRlKHBseXIuYnV0dG9ucy5jYXB0aW9ucywgcGx5ci5jYXB0aW9uc0VuYWJsZWQpO1xuXG4gICAgICAgICAgICAvLyBBZGQgY2xhc3MgaG9va1xuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5jYXB0aW9ucy5hY3RpdmUsIHBseXIuY2FwdGlvbnNFbmFibGVkKTtcblxuICAgICAgICAgICAgLy8gVHJpZ2dlciBhbiBldmVudFxuICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLmNvbnRhaW5lciwgcGx5ci5jYXB0aW9uc0VuYWJsZWQgPyAnY2FwdGlvbnNlbmFibGVkJyA6ICdjYXB0aW9uc2Rpc2FibGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIFNhdmUgY2FwdGlvbnMgc3RhdGUgdG8gbG9jYWxTdG9yYWdlXG4gICAgICAgICAgICBfdXBkYXRlU3RvcmFnZSh7Y2FwdGlvbnNFbmFibGVkOiBwbHlyLmNhcHRpb25zRW5hYmxlZH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgbWVkaWEgaXMgbG9hZGluZ1xuICAgICAgICBmdW5jdGlvbiBfY2hlY2tMb2FkaW5nKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgbG9hZGluZyA9IChldmVudC50eXBlID09PSAnd2FpdGluZycpO1xuXG4gICAgICAgICAgICAvLyBDbGVhciB0aW1lclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVycy5sb2FkaW5nKTtcblxuICAgICAgICAgICAgLy8gVGltZXIgdG8gcHJldmVudCBmbGlja2VyIHdoZW4gc2Vla2luZ1xuICAgICAgICAgICAgdGltZXJzLmxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIFRvZ2dsZSBjb250YWluZXIgY2xhc3MgaG9va1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMubG9hZGluZywgbG9hZGluZyk7XG5cbiAgICAgICAgICAgICAgICAvLyBTaG93IGNvbnRyb2xzIGlmIGxvYWRpbmcsIGhpZGUgaWYgZG9uZVxuICAgICAgICAgICAgICAgIF90b2dnbGVDb250cm9scyhsb2FkaW5nKTtcbiAgICAgICAgICAgIH0sIChsb2FkaW5nID8gMjUwIDogMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIDxwcm9ncmVzcz4gZWxlbWVudHNcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVByb2dyZXNzKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoIXBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwcm9ncmVzcyAgICA9IHBseXIucHJvZ3Jlc3MucGxheWVkLFxuICAgICAgICAgICAgICAgIHZhbHVlICAgICAgID0gMCxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiAgICA9IF9nZXREdXJhdGlvbigpO1xuXG4gICAgICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVmlkZW8gcGxheWluZ1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd0aW1ldXBkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2Vla2luZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGx5ci5jb250cm9scy5wcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IF9nZXRQZXJjZW50YWdlKHBseXIubWVkaWEuY3VycmVudFRpbWUsIGR1cmF0aW9uKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IHNlZWsgcmFuZ2UgdmFsdWUgb25seSBpZiBpdCdzIGEgJ25hdHVyYWwnIHRpbWUgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAndGltZXVwZGF0ZScgJiYgcGx5ci5idXR0b25zLnNlZWspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHlyLmJ1dHRvbnMuc2Vlay52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBidWZmZXIgc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BsYXlpbmcnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdwcm9ncmVzcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcyAgICA9IHBseXIucHJvZ3Jlc3MuYnVmZmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgICAgICAgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlcmVkID0gcGx5ci5tZWRpYS5idWZmZXJlZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJlZCAmJiBidWZmZXJlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSFRNTDVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9nZXRQZXJjZW50YWdlKGJ1ZmZlcmVkLmVuZCgwKSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX2lzLm51bWJlcihidWZmZXJlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gWW91VHViZSByZXR1cm5zIGJldHdlZW4gMCBhbmQgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGJ1ZmZlcmVkICogMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0IHZhbHVlc1xuICAgICAgICAgICAgX3NldFByb2dyZXNzKHByb2dyZXNzLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgPHByb2dyZXNzPiB2YWx1ZVxuICAgICAgICBmdW5jdGlvbiBfc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gMFxuICAgICAgICAgICAgaWYgKF9pcy51bmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBidWZmZXIgb3IgYmFpbFxuICAgICAgICAgICAgaWYgKF9pcy51bmRlZmluZWQocHJvZ3Jlc3MpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBseXIucHJvZ3Jlc3MgJiYgcGx5ci5wcm9ncmVzcy5idWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MgPSBwbHlyLnByb2dyZXNzLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPbmUgcHJvZ3Jlc3MgZWxlbWVudCBwYXNzZWRcbiAgICAgICAgICAgIGlmIChfaXMuaHRtbEVsZW1lbnQocHJvZ3Jlc3MpKSB7XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAvLyBPYmplY3Qgb2YgcHJvZ3Jlc3MgKyB0ZXh0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MuYmFyKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzLmJhci52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MudGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzcy50ZXh0LmlubmVySFRNTCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgZGlzcGxheWVkIHRpbWVcbiAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZVRpbWVEaXNwbGF5KHRpbWUsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEJhaWwgaWYgdGhlcmUncyBubyBkdXJhdGlvbiBkaXNwbGF5XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIDBcbiAgICAgICAgICAgIGlmIChpc05hTih0aW1lKSkge1xuICAgICAgICAgICAgICAgIHRpbWUgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwbHlyLnNlY3MgPSBwYXJzZUludCh0aW1lICUgNjApO1xuICAgICAgICAgICAgcGx5ci5taW5zID0gcGFyc2VJbnQoKHRpbWUgLyA2MCkgJSA2MCk7XG4gICAgICAgICAgICBwbHlyLmhvdXJzID0gcGFyc2VJbnQoKCh0aW1lIC8gNjApIC8gNjApICUgNjApO1xuXG4gICAgICAgICAgICAvLyBEbyB3ZSBuZWVkIHRvIGRpc3BsYXkgaG91cnM/XG4gICAgICAgICAgICB2YXIgZGlzcGxheUhvdXJzID0gKHBhcnNlSW50KCgoX2dldER1cmF0aW9uKCkgLyA2MCkgLyA2MCkgJSA2MCkgPiAwKTtcblxuICAgICAgICAgICAgLy8gRW5zdXJlIGl0J3MgdHdvIGRpZ2l0cy4gRm9yIGV4YW1wbGUsIDAzIHJhdGhlciB0aGFuIDMuXG4gICAgICAgICAgICBwbHlyLnNlY3MgPSAoJzAnICsgcGx5ci5zZWNzKS5zbGljZSgtMik7XG4gICAgICAgICAgICBwbHlyLm1pbnMgPSAoJzAnICsgcGx5ci5taW5zKS5zbGljZSgtMik7XG5cbiAgICAgICAgICAgIC8vIFJlbmRlclxuICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAoZGlzcGxheUhvdXJzID8gcGx5ci5ob3VycyArICc6JyA6ICcnKSArIHBseXIubWlucyArICc6JyArIHBseXIuc2VjcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cgdGhlIGR1cmF0aW9uIG9uIG1ldGFkYXRhbG9hZGVkXG4gICAgICAgIGZ1bmN0aW9uIF9kaXNwbGF5RHVyYXRpb24oKSB7XG4gICAgICAgICAgICBpZiAoIXBseXIuc3VwcG9ydGVkLmZ1bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERldGVybWluZSBkdXJhdGlvblxuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gX2dldER1cmF0aW9uKCkgfHwgMDtcblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBvbmx5IG9uZSB0aW1lIGRpc3BsYXksIGRpc3BsYXkgZHVyYXRpb24gdGhlcmVcbiAgICAgICAgICAgIGlmICghcGx5ci5kdXJhdGlvbiAmJiBjb25maWcuZGlzcGxheUR1cmF0aW9uICYmIHBseXIubWVkaWEucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgX3VwZGF0ZVRpbWVEaXNwbGF5KGR1cmF0aW9uLCBwbHlyLmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBhIGR1cmF0aW9uIGVsZW1lbnQsIHVwZGF0ZSBjb250ZW50XG4gICAgICAgICAgICBpZiAocGx5ci5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIF91cGRhdGVUaW1lRGlzcGxheShkdXJhdGlvbiwgcGx5ci5kdXJhdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgdG9vbHRpcCAoaWYgdmlzaWJsZSlcbiAgICAgICAgICAgIF91cGRhdGVTZWVrVG9vbHRpcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIHRpbWUgY2hhbmdlIGV2ZW50XG4gICAgICAgIGZ1bmN0aW9uIF90aW1lVXBkYXRlKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBEdXJhdGlvblxuICAgICAgICAgICAgX3VwZGF0ZVRpbWVEaXNwbGF5KHBseXIubWVkaWEuY3VycmVudFRpbWUsIHBseXIuY3VycmVudFRpbWUpO1xuXG4gICAgICAgICAgICAvLyBJZ25vcmUgdXBkYXRlcyB3aGlsZSBzZWVraW5nXG4gICAgICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gJ3RpbWV1cGRhdGUnICYmIHBseXIubWVkaWEuc2Vla2luZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUGxheWluZyBwcm9ncmVzc1xuICAgICAgICAgICAgX3VwZGF0ZVByb2dyZXNzKGV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBzZWVrIHJhbmdlIGFuZCBwcm9ncmVzc1xuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlU2Vla0Rpc3BsYXkodGltZSkge1xuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byAwXG4gICAgICAgICAgICBpZiAoIV9pcy5udW1iZXIodGltZSkpIHtcbiAgICAgICAgICAgICAgICB0aW1lID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGR1cmF0aW9uICAgID0gX2dldER1cmF0aW9uKCksXG4gICAgICAgICAgICAgICAgdmFsdWUgICAgICAgPSBfZ2V0UGVyY2VudGFnZSh0aW1lLCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKHBseXIucHJvZ3Jlc3MgJiYgcGx5ci5wcm9ncmVzcy5wbGF5ZWQpIHtcbiAgICAgICAgICAgICAgICBwbHlyLnByb2dyZXNzLnBsYXllZC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgc2VlayByYW5nZSBpbnB1dFxuICAgICAgICAgICAgaWYgKHBseXIuYnV0dG9ucyAmJiBwbHlyLmJ1dHRvbnMuc2Vlaykge1xuICAgICAgICAgICAgICAgIHBseXIuYnV0dG9ucy5zZWVrLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgaG92ZXIgdG9vbHRpcCBmb3Igc2Vla2luZ1xuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlU2Vla1Rvb2x0aXAoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IF9nZXREdXJhdGlvbigpO1xuXG4gICAgICAgICAgICAvLyBCYWlsIGlmIHNldHRpbmcgbm90IHRydWVcbiAgICAgICAgICAgIGlmICghY29uZmlnLnRvb2x0aXBzLnNlZWsgfHwgIXBseXIucHJvZ3Jlc3MuY29udGFpbmVyIHx8IGR1cmF0aW9uID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgcGVyY2VudGFnZVxuICAgICAgICAgICAgdmFyIGNsaWVudFJlY3QgID0gcGx5ci5wcm9ncmVzcy5jb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICAgICAgcGVyY2VudCAgICAgPSAwLFxuICAgICAgICAgICAgICAgIHZpc2libGUgICAgID0gY29uZmlnLmNsYXNzZXMudG9vbHRpcCArICctLXZpc2libGUnO1xuXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgcGVyY2VudGFnZSwgaWYgYWxyZWFkeSB2aXNpYmxlXG4gICAgICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKF9oYXNDbGFzcyhwbHlyLnByb2dyZXNzLnRvb2x0aXAsIHZpc2libGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlcmNlbnQgPSBwbHlyLnByb2dyZXNzLnRvb2x0aXAuc3R5bGUubGVmdC5yZXBsYWNlKCclJywgJycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAoKDEwMCAvIGNsaWVudFJlY3Qud2lkdGgpICogKGV2ZW50LnBhZ2VYIC0gY2xpZW50UmVjdC5sZWZ0KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBib3VuZHNcbiAgICAgICAgICAgIGlmIChwZXJjZW50IDwgMCkge1xuICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwZXJjZW50ID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudCA9IDEwMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGlzcGxheSB0aGUgdGltZSBhIGNsaWNrIHdvdWxkIHNlZWsgdG9cbiAgICAgICAgICAgIF91cGRhdGVUaW1lRGlzcGxheSgoKGR1cmF0aW9uIC8gMTAwKSAqIHBlcmNlbnQpLCBwbHlyLnByb2dyZXNzLnRvb2x0aXApO1xuXG4gICAgICAgICAgICAvLyBTZXQgcG9zaXRpb25cbiAgICAgICAgICAgIHBseXIucHJvZ3Jlc3MudG9vbHRpcC5zdHlsZS5sZWZ0ID0gcGVyY2VudCArIFwiJVwiO1xuXG4gICAgICAgICAgICAvLyBTaG93L2hpZGUgdGhlIHRvb2x0aXBcbiAgICAgICAgICAgIC8vIElmIHRoZSBldmVudCBpcyBhIG1vdWVzIGluL291dCBhbmQgcGVyY2VudGFnZSBpcyBpbnNpZGUgYm91bmRzXG4gICAgICAgICAgICBpZiAoZXZlbnQgJiYgX2luQXJyYXkoWydtb3VzZWVudGVyJywgJ21vdXNlbGVhdmUnXSwgZXZlbnQudHlwZSkpIHtcbiAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5wcm9ncmVzcy50b29sdGlwLCB2aXNpYmxlLCAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZW50ZXInKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTaG93IHRoZSBwbGF5ZXIgY29udHJvbHMgaW4gZnVsbHNjcmVlbiBtb2RlXG4gICAgICAgIGZ1bmN0aW9uIF90b2dnbGVDb250cm9scyh0b2dnbGUpIHtcbiAgICAgICAgICAgIC8vIERvbid0IGhpZGUgaWYgY29uZmlnIHNheXMgbm90IHRvLCBpdCdzIGF1ZGlvLCBvciBub3QgcmVhZHkgb3IgbG9hZGluZ1xuICAgICAgICAgICAgaWYgKCFjb25maWcuaGlkZUNvbnRyb2xzIHx8IHBseXIudHlwZSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGRlbGF5ID0gMCxcbiAgICAgICAgICAgICAgICBpc0VudGVyRnVsbHNjcmVlbiA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3cgPSB0b2dnbGUsXG4gICAgICAgICAgICAgICAgbG9hZGluZyA9IF9oYXNDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMubG9hZGluZyk7XG5cbiAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gZmFsc2UgaWYgbm8gYm9vbGVhblxuICAgICAgICAgICAgaWYgKCFfaXMuYm9vbGVhbih0b2dnbGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvZ2dsZSAmJiB0b2dnbGUudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJcyB0aGUgZW50ZXIgZnVsbHNjcmVlbiBldmVudFxuICAgICAgICAgICAgICAgICAgICBpc0VudGVyRnVsbHNjcmVlbiA9ICh0b2dnbGUudHlwZSA9PT0gJ2VudGVyZnVsbHNjcmVlbicpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZXRoZXIgdG8gc2hvdyBjb250cm9sc1xuICAgICAgICAgICAgICAgICAgICBzaG93ID0gX2luQXJyYXkoWydtb3VzZW1vdmUnLCAndG91Y2hzdGFydCcsICdtb3VzZWVudGVyJywgJ2ZvY3VzJ10sIHRvZ2dsZS50eXBlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEZWxheSBoaWRpbmcgb24gbW92ZSBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KFsnbW91c2Vtb3ZlJywgJ3RvdWNobW92ZSddLCB0b2dnbGUudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMjAwMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERlbGF5IGEgbGl0dGxlIG1vcmUgZm9yIGtleWJvYXJkIHVzZXJzXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2dnbGUudHlwZSA9PT0gJ2ZvY3VzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXkgPSAzMDAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdyA9IF9oYXNDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuaGlkZUNvbnRyb2xzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENsZWFyIHRpbWVyIGV2ZXJ5IG1vdmVtZW50XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVycy5ob3Zlcik7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBtb3VzZSBpcyBub3Qgb3ZlciB0aGUgY29udHJvbHMsIHNldCBhIHRpbWVvdXQgdG8gaGlkZSB0aGVtXG4gICAgICAgICAgICBpZiAoc2hvdyB8fCBwbHlyLm1lZGlhLnBhdXNlZCB8fCBsb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5oaWRlQ29udHJvbHMsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIC8vIEFsd2F5cyBzaG93IGNvbnRyb2xzIHdoZW4gcGF1c2VkIG9yIGlmIHRvdWNoXG4gICAgICAgICAgICAgICAgaWYgKHBseXIubWVkaWEucGF1c2VkIHx8IGxvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERlbGF5IGZvciBoaWRpbmcgb24gdG91Y2hcbiAgICAgICAgICAgICAgICBpZiAocGx5ci5icm93c2VyLmlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsYXkgPSAzMDAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdG9nZ2xlIGlzIGZhbHNlIG9yIGlmIHdlJ3JlIHBsYXlpbmcgKHJlZ2FyZGxlc3Mgb2YgdG9nZ2xlKSxcbiAgICAgICAgICAgIC8vIHRoZW4gc2V0IHRoZSB0aW1lciB0byBoaWRlIHRoZSBjb250cm9sc1xuICAgICAgICAgICAgaWYgKCFzaG93IHx8ICFwbHlyLm1lZGlhLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgIHRpbWVycy5ob3ZlciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbW91c2UgaXMgb3ZlciB0aGUgY29udHJvbHMgKGFuZCBub3QgZW50ZXJpbmcgZnVsbHNjcmVlbiksIGJhaWxcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwbHlyLmNvbnRyb2xzLnByZXNzZWQgfHwgcGx5ci5jb250cm9scy5ob3ZlcikgJiYgIWlzRW50ZXJGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfdG9nZ2xlQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmhpZGVDb250cm9scywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGNvbW1vbiBmdW5jdGlvbiB0byByZXRyaWV2ZSBtZWRpYSBzb3VyY2VcbiAgICAgICAgZnVuY3Rpb24gX3NvdXJjZShzb3VyY2UpIHtcbiAgICAgICAgICAgIC8vIElmIG5vdCBudWxsIG9yIHVuZGVmaW5lZCwgcGFyc2UgaXRcbiAgICAgICAgICAgIGlmICghX2lzLnVuZGVmaW5lZChzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgX3VwZGF0ZVNvdXJjZShzb3VyY2UpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSBjdXJyZW50IHNvdXJjZVxuICAgICAgICAgICAgdmFyIHVybDtcbiAgICAgICAgICAgIHN3aXRjaChwbHlyLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgICAgICAgICAgdXJsID0gcGx5ci5lbWJlZC5nZXRWaWRlb1VybCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZpbWVvJzpcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5nZXRWaWRlb1VybC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICBwbHlyLmVtYmVkLmdldEN1cnJlbnRTb3VuZChmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IG9iamVjdC5wZXJtYWxpbmtfdXJsO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBwbHlyLm1lZGlhLmN1cnJlbnRTcmM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdXJsIHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHNvdXJjZVxuICAgICAgICAvLyBTb3VyY2VzIGFyZSBub3QgY2hlY2tlZCBmb3Igc3VwcG9ydCBzbyBiZSBjYXJlZnVsXG4gICAgICAgIGZ1bmN0aW9uIF91cGRhdGVTb3VyY2Uoc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoIV9pcy5vYmplY3Qoc291cmNlKSB8fCAhKCdzb3VyY2VzJyBpbiBzb3VyY2UpIHx8ICFzb3VyY2Uuc291cmNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBfd2FybignSW52YWxpZCBzb3VyY2UgZm9ybWF0Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZW1vdmUgcmVhZHkgY2xhc3MgaG9va1xuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5yZWFkeSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAvLyBQYXVzZSBwbGF5YmFja1xuICAgICAgICAgICAgX3BhdXNlKCk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBzZWVrIHJhbmdlIGFuZCBwcm9ncmVzc1xuICAgICAgICAgICAgX3VwZGF0ZVNlZWtEaXNwbGF5KCk7XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IGJ1ZmZlciBwcm9ncmVzc1xuICAgICAgICAgICAgX3NldFByb2dyZXNzKCk7XG5cbiAgICAgICAgICAgIC8vIENhbmNlbCBjdXJyZW50IG5ldHdvcmsgcmVxdWVzdHNcbiAgICAgICAgICAgIF9jYW5jZWxSZXF1ZXN0cygpO1xuXG4gICAgICAgICAgICAvLyBTZXR1cCBuZXcgc291cmNlXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXR1cCgpIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZW1iZWQgb2JqZWN0XG4gICAgICAgICAgICAgICAgcGx5ci5lbWJlZCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIG9sZCBtZWRpYVxuICAgICAgICAgICAgICAgIF9yZW1vdmUocGx5ci5tZWRpYSk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdmlkZW8gY29udGFpbmVyXG4gICAgICAgICAgICAgICAgaWYgKHBseXIudHlwZSA9PT0gJ3ZpZGVvJyAmJiBwbHlyLnZpZGVvQ29udGFpbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF9yZW1vdmUocGx5ci52aWRlb0NvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgY2xhc3MgbmFtZVxuICAgICAgICAgICAgICAgIGlmIChwbHlyLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICBwbHlyLmNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IHRoZSB0eXBlXG4gICAgICAgICAgICAgICAgaWYgKCd0eXBlJyBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci50eXBlID0gc291cmNlLnR5cGU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IGNoaWxkIHR5cGUgZm9yIHZpZGVvIChpdCBtaWdodCBiZSBhbiBlbWJlZClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBseXIudHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0U291cmNlID0gc291cmNlLnNvdXJjZXNbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgndHlwZScgaW4gZmlyc3RTb3VyY2UgJiYgX2luQXJyYXkoY29uZmlnLnR5cGVzLmVtYmVkLCBmaXJzdFNvdXJjZS50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBseXIudHlwZSA9IGZpcnN0U291cmNlLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3Igc3VwcG9ydFxuICAgICAgICAgICAgICAgIHBseXIuc3VwcG9ydGVkID0gc3VwcG9ydGVkKHBseXIudHlwZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgbmV3IG1hcmt1cFxuICAgICAgICAgICAgICAgIHN3aXRjaChwbHlyLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndmlkZW8nOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3lvdXR1YmUnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZElkID0gc291cmNlLnNvdXJjZXNbMF0uc3JjO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSW5qZWN0IHRoZSBuZXcgZWxlbWVudFxuICAgICAgICAgICAgICAgIF9wcmVwZW5kQ2hpbGQocGx5ci5jb250YWluZXIsIHBseXIubWVkaWEpO1xuXG4gICAgICAgICAgICAgICAgLy8gQXV0b3BsYXkgdGhlIG5ldyBzb3VyY2U/XG4gICAgICAgICAgICAgICAgaWYgKF9pcy5ib29sZWFuKHNvdXJjZS5hdXRvcGxheSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLmF1dG9wbGF5ID0gc291cmNlLmF1dG9wbGF5O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNldCBhdHRyaWJ1dGVzIGZvciBhdWRpbyBhbmQgdmlkZW9cbiAgICAgICAgICAgICAgICBpZiAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmh0bWw1LCBwbHlyLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcuY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdjcm9zc29yaWdpbicsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmF1dG9wbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgnYXV0b3BsYXknLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCdwb3N0ZXInIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ3Bvc3RlcicsIHNvdXJjZS5wb3N0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25maWcubG9vcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGx5ci5tZWRpYS5zZXRBdHRyaWJ1dGUoJ2xvb3AnLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZXN0b3JlIGNsYXNzIGhvb2tzXG4gICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5mdWxsc2NyZWVuLmFjdGl2ZSwgcGx5ci5pc0Z1bGxzY3JlZW4pO1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhwbHlyLmNvbnRhaW5lciwgY29uZmlnLmNsYXNzZXMuY2FwdGlvbnMuYWN0aXZlLCBwbHlyLmNhcHRpb25zRW5hYmxlZCk7XG4gICAgICAgICAgICAgICAgX3RvZ2dsZVN0eWxlSG9vaygpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0IG5ldyBzb3VyY2VzIGZvciBodG1sNVxuICAgICAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgX2luc2VydENoaWxkRWxlbWVudHMoJ3NvdXJjZScsIHNvdXJjZS5zb3VyY2VzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgdXAgZnJvbSBzY3JhdGNoXG4gICAgICAgICAgICAgICAgX3NldHVwTWVkaWEoKTtcblxuICAgICAgICAgICAgICAgIC8vIEhUTUw1IHN0dWZmXG4gICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5odG1sNSwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZXR1cCBjYXB0aW9uc1xuICAgICAgICAgICAgICAgICAgICBpZiAoJ3RyYWNrcycgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5zZXJ0Q2hpbGRFbGVtZW50cygndHJhY2snLCBzb3VyY2UudHJhY2tzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIExvYWQgSFRNTDUgc291cmNlc1xuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmxvYWQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZiBIVE1MNSBvciBlbWJlZCBidXQgbm90IGZ1bGx5IHN1cHBvcnRlZCwgc2V0dXBJbnRlcmZhY2UgYW5kIGNhbGwgcmVhZHkgbm93XG4gICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5odG1sNSwgcGx5ci50eXBlKSB8fCAoX2luQXJyYXkoY29uZmlnLnR5cGVzLmVtYmVkLCBwbHlyLnR5cGUpICYmICFwbHlyLnN1cHBvcnRlZC5mdWxsKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTZXR1cCBpbnRlcmZhY2VcbiAgICAgICAgICAgICAgICAgICAgX3NldHVwSW50ZXJmYWNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsbCByZWFkeVxuICAgICAgICAgICAgICAgICAgICBfcmVhZHkoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTZXQgYXJpYSB0aXRsZSBhbmQgaWZyYW1lIHRpdGxlXG4gICAgICAgICAgICAgICAgY29uZmlnLnRpdGxlID0gc291cmNlLnRpdGxlO1xuICAgICAgICAgICAgICAgIF9zZXRUaXRsZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXN0cm95IGluc3RhbmNlIGFkbiB3YWl0IGZvciBjYWxsYmFja1xuICAgICAgICAgICAgLy8gVmltZW8gdGhyb3dzIGEgd29iYmx5IGlmIHlvdSBkb24ndCB3YWl0XG4gICAgICAgICAgICBfZGVzdHJveShzZXR1cCwgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHBvc3RlclxuICAgICAgICBmdW5jdGlvbiBfdXBkYXRlUG9zdGVyKHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKHBseXIudHlwZSA9PT0gJ3ZpZGVvJykge1xuICAgICAgICAgICAgICAgIHBseXIubWVkaWEuc2V0QXR0cmlidXRlKCdwb3N0ZXInLCBzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTGlzdGVuIGZvciBjb250cm9sIGV2ZW50c1xuICAgICAgICBmdW5jdGlvbiBfY29udHJvbExpc3RlbmVycygpIHtcbiAgICAgICAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbnB1dCBldmVudCwgc28gd2UgZmFsbGJhY2sgdG8gY2hhbmdlXG4gICAgICAgICAgICB2YXIgaW5wdXRFdmVudCA9IChwbHlyLmJyb3dzZXIuaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0Jyk7XG5cbiAgICAgICAgICAgIC8vIENsaWNrIHBsYXkvcGF1c2UgaGVscGVyXG4gICAgICAgICAgICBmdW5jdGlvbiB0b2dnbGVQbGF5KCkge1xuICAgICAgICAgICAgICAgIHZhciBwbGF5ID0gX3RvZ2dsZVBsYXkoKTtcblxuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSB3aGljaCBidXR0b25zXG4gICAgICAgICAgICAgICAgdmFyIHRyaWdnZXIgPSBwbHlyLmJ1dHRvbnNbcGxheSA/ICdwbGF5JyA6ICdwYXVzZSddLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBwbHlyLmJ1dHRvbnNbcGxheSA/ICdwYXVzZScgOiAncGxheSddO1xuXG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBsYXN0IHBsYXkgYnV0dG9uIHRvIGFjY291bnQgZm9yIHRoZSBsYXJnZSBwbGF5IGJ1dHRvblxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0W3RhcmdldC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXRbMF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0dXAgZm9jdXMgYW5kIHRhYiBmb2N1c1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhZFRhYkZvY3VzID0gX2hhc0NsYXNzKHRyaWdnZXIsIGNvbmZpZy5jbGFzc2VzLnRhYkZvY3VzKTtcblxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmZvY3VzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYWRUYWJGb2N1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyh0cmlnZ2VyLCBjb25maWcuY2xhc3Nlcy50YWJGb2N1cywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyh0YXJnZXQsIGNvbmZpZy5jbGFzc2VzLnRhYkZvY3VzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgZm9jdXNlZCBlbGVtZW50XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRGb2N1c0VsZW1lbnQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvY3VzZWQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gICAgICAgICAgICAgICAgaWYgKCFmb2N1c2VkIHx8IGZvY3VzZWQgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJzpmb2N1cycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmb2N1c2VkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGtleSBjb2RlIGZvciBhbiBldmVudFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0S2V5Q29kZShldmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5rZXlDb2RlID8gZXZlbnQua2V5Q29kZSA6IGV2ZW50LndoaWNoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEZXRlY3QgdGFiIGZvY3VzXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVja1RhYkZvY3VzKGZvY3VzZWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBidXR0b24gaW4gcGx5ci5idXR0b25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gcGx5ci5idXR0b25zW2J1dHRvbl07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF9pcy5ub2RlTGlzdChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKGVsZW1lbnRbaV0sIGNvbmZpZy5jbGFzc2VzLnRhYkZvY3VzLCAoZWxlbWVudFtpXSA9PT0gZm9jdXNlZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKGVsZW1lbnQsIGNvbmZpZy5jbGFzc2VzLnRhYkZvY3VzLCAoZWxlbWVudCA9PT0gZm9jdXNlZCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBLZXlib2FyZCBzaG9ydGN1dHNcbiAgICAgICAgICAgIGlmIChjb25maWcua2V5Ym9hcmRTaG9yY3V0cy5mb2N1c2VkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3QgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIGdsb2JhbCBwcmVzc2VzXG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5rZXlib2FyZFNob3JjdXRzLmdsb2JhbCkge1xuICAgICAgICAgICAgICAgICAgICBfb24od2luZG93LCAna2V5ZG93biBrZXl1cCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29kZSA9IGdldEtleUNvZGUoZXZlbnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNlZCA9IGdldEZvY3VzRWxlbWVudCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZCA9IFs0OCw0OSw1MCw1MSw1Miw1Myw1NCw1Niw1Nyw3NSw3Nyw3MCw2N10sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCAgID0gZ2V0KCkubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IGhhbmRsZSBnbG9iYWwga2V5IHByZXNzIGlmIHRoZXJlJ3Mgb25seSBvbmUgcGxheWVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgdGhlIGtleSBpcyBpbiB0aGUgYWxsb3dlZCBrZXlzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaWYgdGhlIGZvY3VzZWQgZWxlbWVudCBpcyBub3QgZWRpdGFibGUgKGUuZy4gdGV4dCBpbnB1dClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCBhbnkgdGhhdCBhY2NlcHQga2V5IGlucHV0IGh0dHA6Ly93ZWJhaW0ub3JnL3RlY2huaXF1ZXMva2V5Ym9hcmQvXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnQgPT09IDEgJiYgX2luQXJyYXkoYWxsb3dlZCwgY29kZSkgJiYgKCFfaXMuaHRtbEVsZW1lbnQoZm9jdXNlZCkgfHwgIV9tYXRjaGVzKGZvY3VzZWQsIGNvbmZpZy5zZWxlY3RvcnMuZWRpdGFibGUpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUtleShldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBwcmVzc2VzIG9uIGZvY3VzZWRcbiAgICAgICAgICAgICAgICBfb24ocGx5ci5jb250YWluZXIsICdrZXlkb3duIGtleXVwJywgaGFuZGxlS2V5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlS2V5KGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBnZXRLZXlDb2RlKGV2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgcHJlc3NlZCA9IGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyxcbiAgICAgICAgICAgICAgICAgICAgaGVsZCA9IHByZXNzZWQgJiYgY29kZSA9PT0gbGFzdDtcblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBldmVudCBpcyBidWJibGVkIGZyb20gdGhlIG1lZGlhIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IGRvZXNuJ3QgZ2V0IHRoZSBrZXljb2RlIGZvciB3aGF0ZXZlciByZWFzb25cbiAgICAgICAgICAgICAgICBpZiAoIV9pcy5udW1iZXIoY29kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNlZWsgYnkgdGhlIG51bWJlciBrZXlzXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2Vla0J5S2V5KCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgY3VycmVudCBkdXJhdGlvblxuICAgICAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBwbHlyLm1lZGlhLmR1cmF0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEJhaWwgaWYgd2UgaGF2ZSBubyBkdXJhdGlvbiBzZXRcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXMubnVtYmVyKGR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGl2aWRlIHRoZSBtYXggZHVyYXRpb24gaW50byAxMHRoJ3MgYW5kIHRpbWVzIGJ5IHRoZSBudW1iZXIgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgX3NlZWsoKGR1cmF0aW9uIC8gMTApICogKGNvZGUgLSA0OCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUga2V5IG9uIGtleWRvd25cbiAgICAgICAgICAgICAgICAvLyBSZXNldCBvbiBrZXl1cFxuICAgICAgICAgICAgICAgIGlmIChwcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdoaWNoIGtleWNvZGVzIHNob3VsZCB3ZSBwcmV2ZW50IGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZlbnREZWZhdWx0ID0gWzQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU2LDU3LDMyLDc1LDM4LDQwLDc3LDM5LDM3LDcwLDY3XTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgY29kZSBpcyBmb3VuZCBwcmV2ZW50IGRlZmF1bHQgKGUuZy4gcHJldmVudCBzY3JvbGxpbmcgZm9yIGFycm93cylcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9pbkFycmF5KHByZXZlbnREZWZhdWx0LCBjb2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAtOVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0ODpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDk6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDUwOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1MTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDUzOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1NDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTU6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU2OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1NzogaWYgKCFoZWxkKSB7IHNlZWtCeUtleSgpOyB9IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3BhY2UgYW5kIEsga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3NTogaWYgKCFoZWxkKSB7IF90b2dnbGVQbGF5KCk7IH0gYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcnJvdyB1cFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzODogX2luY3JlYXNlVm9sdW1lKCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJyb3cgZG93blxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDogX2RlY3JlYXNlVm9sdW1lKCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTSBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzc6IGlmICghaGVsZCkgeyBfdG9nZ2xlTXV0ZSgpIH0gYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcnJvdyBmb3J3YXJkXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM5OiBfZm9yd2FyZCgpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFycm93IGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzc6IF9yZXdpbmQoKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGIGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA3MDogX3RvZ2dsZUZ1bGxzY3JlZW4oKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDIGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2NzogaWYgKCFoZWxkKSB7IF90b2dnbGVDYXB0aW9ucygpOyB9IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRXNjYXBlIGlzIGhhbmRsZSBuYXRpdmVseSB3aGVuIGluIGZ1bGwgc2NyZWVuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNvIHdlIG9ubHkgbmVlZCB0byB3b3JyeSBhYm91dCBub24gbmF0aXZlXG4gICAgICAgICAgICAgICAgICAgIGlmICghZnVsbHNjcmVlbi5zdXBwb3J0c0Z1bGxTY3JlZW4gJiYgcGx5ci5pc0Z1bGxzY3JlZW4gJiYgY29kZSA9PT0gMjcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90b2dnbGVGdWxsc2NyZWVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSBsYXN0IGNvZGUgZm9yIG5leHQgY3ljbGVcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGNvZGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGb2N1cy90YWIgbWFuYWdlbWVudFxuICAgICAgICAgICAgX29uKHdpbmRvdywgJ2tleXVwJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IGdldEtleUNvZGUoZXZlbnQpLFxuICAgICAgICAgICAgICAgICAgICBmb2N1c2VkID0gZ2V0Rm9jdXNFbGVtZW50KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29kZSA9PT0gOSkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja1RhYkZvY3VzKGZvY3VzZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX29uKGRvY3VtZW50LmJvZHksICdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhfZ2V0RWxlbWVudCgnLicgKyBjb25maWcuY2xhc3Nlcy50YWJGb2N1cyksIGNvbmZpZy5jbGFzc2VzLnRhYkZvY3VzLCBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZvciAodmFyIGJ1dHRvbiBpbiBwbHlyLmJ1dHRvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHBseXIuYnV0dG9uc1tidXR0b25dO1xuXG4gICAgICAgICAgICAgICAgX29uKGVsZW1lbnQsICdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF90b2dnbGVDbGFzcyhlbGVtZW50LCAndGFiLWZvY3VzJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQbGF5XG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMucGxheSwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5wbGF5LCB0b2dnbGVQbGF5KTtcblxuICAgICAgICAgICAgLy8gUGF1c2VcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5wYXVzZSwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5wYXVzZSwgdG9nZ2xlUGxheSk7XG5cbiAgICAgICAgICAgIC8vIFJlc3RhcnRcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIuYnV0dG9ucy5yZXN0YXJ0LCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLnJlc3RhcnQsIF9zZWVrKTtcblxuICAgICAgICAgICAgLy8gUmV3aW5kXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMucmV3aW5kLCAnY2xpY2snLCBjb25maWcubGlzdGVuZXJzLnJld2luZCwgX3Jld2luZCk7XG5cbiAgICAgICAgICAgIC8vIEZhc3QgZm9yd2FyZFxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLmZvcndhcmQsICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMuZm9yd2FyZCwgX2ZvcndhcmQpO1xuXG4gICAgICAgICAgICAvLyBTZWVrXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMuc2VlaywgaW5wdXRFdmVudCwgY29uZmlnLmxpc3RlbmVycy5zZWVrLCBfc2Vlayk7XG5cbiAgICAgICAgICAgIC8vIFNldCB2b2x1bWVcbiAgICAgICAgICAgIF9wcm94eUxpc3RlbmVyKHBseXIudm9sdW1lLmlucHV0LCBpbnB1dEV2ZW50LCBjb25maWcubGlzdGVuZXJzLnZvbHVtZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3NldFZvbHVtZShwbHlyLnZvbHVtZS5pbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gTXV0ZVxuICAgICAgICAgICAgX3Byb3h5TGlzdGVuZXIocGx5ci5idXR0b25zLm11dGUsICdjbGljaycsIGNvbmZpZy5saXN0ZW5lcnMubXV0ZSwgX3RvZ2dsZU11dGUpO1xuXG4gICAgICAgICAgICAvLyBGdWxsc2NyZWVuXG4gICAgICAgICAgICBfcHJveHlMaXN0ZW5lcihwbHlyLmJ1dHRvbnMuZnVsbHNjcmVlbiwgJ2NsaWNrJywgY29uZmlnLmxpc3RlbmVycy5mdWxsc2NyZWVuLCBfdG9nZ2xlRnVsbHNjcmVlbik7XG5cbiAgICAgICAgICAgIC8vIEhhbmRsZSB1c2VyIGV4aXRpbmcgZnVsbHNjcmVlbiBieSBlc2NhcGluZyBldGNcbiAgICAgICAgICAgIGlmIChmdWxsc2NyZWVuLnN1cHBvcnRzRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgIF9vbihkb2N1bWVudCwgZnVsbHNjcmVlbi5mdWxsU2NyZWVuRXZlbnROYW1lLCBfdG9nZ2xlRnVsbHNjcmVlbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENhcHRpb25zXG4gICAgICAgICAgICBfb24ocGx5ci5idXR0b25zLmNhcHRpb25zLCAnY2xpY2snLCBfdG9nZ2xlQ2FwdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBTZWVrIHRvb2x0aXBcbiAgICAgICAgICAgIF9vbihwbHlyLnByb2dyZXNzLmNvbnRhaW5lciwgJ21vdXNlZW50ZXIgbW91c2VsZWF2ZSBtb3VzZW1vdmUnLCBfdXBkYXRlU2Vla1Rvb2x0aXApO1xuXG4gICAgICAgICAgICAvLyBUb2dnbGUgY29udHJvbHMgdmlzaWJpbGl0eSBiYXNlZCBvbiBtb3VzZSBtb3ZlbWVudFxuICAgICAgICAgICAgaWYgKGNvbmZpZy5oaWRlQ29udHJvbHMpIHtcbiAgICAgICAgICAgICAgICAvLyBUb2dnbGUgY29udHJvbHMgb24gbW91c2UgZXZlbnRzIGFuZCBlbnRlcmluZyBmdWxsc2NyZWVuXG4gICAgICAgICAgICAgICAgX29uKHBseXIuY29udGFpbmVyLCAnbW91c2VlbnRlciBtb3VzZWxlYXZlIG1vdXNlbW92ZSB0b3VjaHN0YXJ0IHRvdWNoZW5kIHRvdWNoY2FuY2VsIHRvdWNobW92ZSBlbnRlcmZ1bGxzY3JlZW4nLCBfdG9nZ2xlQ29udHJvbHMpO1xuXG4gICAgICAgICAgICAgICAgLy8gV2F0Y2ggZm9yIGN1cnNvciBvdmVyIGNvbnRyb2xzIHNvIHRoZXkgZG9uJ3QgaGlkZSB3aGVuIHRyeWluZyB0byBpbnRlcmFjdFxuICAgICAgICAgICAgICAgIF9vbihwbHlyLmNvbnRyb2xzLCAnbW91c2VlbnRlciBtb3VzZWxlYXZlJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5jb250cm9scy5ob3ZlciA9IGV2ZW50LnR5cGUgPT09ICdtb3VzZWVudGVyJztcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAvLyBXYXRjaCBmb3IgY3Vyc29yIG92ZXIgY29udHJvbHMgc28gdGhleSBkb24ndCBoaWRlIHdoZW4gdHJ5aW5nIHRvIGludGVyYWN0XG4gICAgICAgICAgICAgICAgX29uKHBseXIuY29udHJvbHMsICdtb3VzZWRvd24gbW91c2V1cCB0b3VjaHN0YXJ0IHRvdWNoZW5kIHRvdWNoY2FuY2VsJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5jb250cm9scy5wcmVzc2VkID0gX2luQXJyYXkoWydtb3VzZWRvd24nLCAndG91Y2hzdGFydCddLCBldmVudC50eXBlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIEZvY3VzIGluL291dCBvbiBjb250cm9sc1xuICAgICAgICAgICAgICAgIF9vbihwbHlyLmNvbnRyb2xzLCAnZm9jdXMgYmx1cicsIF90b2dnbGVDb250cm9scywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFkanVzdCB2b2x1bWUgb24gc2Nyb2xsXG4gICAgICAgICAgICBfb24ocGx5ci52b2x1bWUuaW5wdXQsICd3aGVlbCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIC8vIERldGVjdCBcIm5hdHVyYWxcIiBzY3JvbGwgLSBzdXBwb3JlZCBvbiBPUyBYIFNhZmFyaSBvbmx5XG4gICAgICAgICAgICAgICAgLy8gT3RoZXIgYnJvd3NlcnMgb24gT1MgWCB3aWxsIGJlIGludmVydGVkIHVudGlsIHN1cHBvcnQgaW1wcm92ZXNcbiAgICAgICAgICAgICAgICB2YXIgaW52ZXJ0ZWQgPSBldmVudC53ZWJraXREaXJlY3Rpb25JbnZlcnRlZEZyb21EZXZpY2UsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSAoY29uZmlnLnZvbHVtZVN0ZXAgLyA1KTtcblxuICAgICAgICAgICAgICAgIC8vIFNjcm9sbCBkb3duIChvciB1cCBvbiBuYXR1cmFsKSB0byBkZWNyZWFzZVxuICAgICAgICAgICAgICAgIGlmIChldmVudC5kZWx0YVkgPCAwIHx8IGV2ZW50LmRlbHRhWCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGludmVydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZGVjcmVhc2VWb2x1bWUoc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaW5jcmVhc2VWb2x1bWUoc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBTY3JvbGwgdXAgKG9yIGRvd24gb24gbmF0dXJhbCkgdG8gaW5jcmVhc2VcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZGVsdGFZID4gMCB8fCBldmVudC5kZWx0YVggPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnZlcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2luY3JlYXNlVm9sdW1lKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RlY3JlYXNlVm9sdW1lKHN0ZXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMaXN0ZW4gZm9yIG1lZGlhIGV2ZW50c1xuICAgICAgICBmdW5jdGlvbiBfbWVkaWFMaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICAvLyBUaW1lIGNoYW5nZSBvbiBtZWRpYVxuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICd0aW1ldXBkYXRlIHNlZWtpbmcnLCBfdGltZVVwZGF0ZSk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBtYW51YWwgY2FwdGlvbnNcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAndGltZXVwZGF0ZScsIF9zZWVrTWFudWFsQ2FwdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBEaXNwbGF5IGR1cmF0aW9uXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ2R1cmF0aW9uY2hhbmdlIGxvYWRlZG1ldGFkYXRhJywgX2Rpc3BsYXlEdXJhdGlvbik7XG5cbiAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgbWVkaWEgZmluaXNoaW5nXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ2VuZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gU2hvdyBwb3N0ZXIgb24gZW5kXG4gICAgICAgICAgICAgICAgaWYgKHBseXIudHlwZSA9PT0gJ3ZpZGVvJyAmJiBjb25maWcuc2hvd1Bvc3Rlck9uRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLnR5cGUgPT09ICd2aWRlbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zZXRDYXB0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXN0YXJ0XG4gICAgICAgICAgICAgICAgICAgIF9zZWVrKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmUtbG9hZCBtZWRpYVxuICAgICAgICAgICAgICAgICAgICBwbHlyLm1lZGlhLmxvYWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGJ1ZmZlciBwcm9ncmVzc1xuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICdwcm9ncmVzcyBwbGF5aW5nJywgX3VwZGF0ZVByb2dyZXNzKTtcblxuICAgICAgICAgICAgLy8gSGFuZGxlIG5hdGl2ZSBtdXRlXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ3ZvbHVtZWNoYW5nZScsIF91cGRhdGVWb2x1bWUpO1xuXG4gICAgICAgICAgICAvLyBIYW5kbGUgbmF0aXZlIHBsYXkvcGF1c2VcbiAgICAgICAgICAgIF9vbihwbHlyLm1lZGlhLCAncGxheSBwYXVzZSBlbmRlZCcsIF9jaGVja1BsYXlpbmcpO1xuXG4gICAgICAgICAgICAvLyBMb2FkaW5nXG4gICAgICAgICAgICBfb24ocGx5ci5tZWRpYSwgJ3dhaXRpbmcgY2FucGxheSBzZWVrZWQnLCBfY2hlY2tMb2FkaW5nKTtcblxuICAgICAgICAgICAgLy8gQ2xpY2sgdmlkZW9cbiAgICAgICAgICAgIGlmIChjb25maWcuY2xpY2tUb1BsYXkgJiYgcGx5ci50eXBlICE9PSAnYXVkaW8nKSB7XG4gICAgICAgICAgICAgICAgLy8gUmUtZmV0Y2ggdGhlIHdyYXBwZXJcbiAgICAgICAgICAgICAgICB2YXIgd3JhcHBlciA9IF9nZXRFbGVtZW50KCcuJyArIGNvbmZpZy5jbGFzc2VzLnZpZGVvV3JhcHBlcik7XG5cbiAgICAgICAgICAgICAgICAvLyBCYWlsIGlmIHRoZXJlJ3Mgbm8gd3JhcHBlciAodGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuKVxuICAgICAgICAgICAgICAgIGlmICghd3JhcHBlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2V0IGN1cnNvclxuICAgICAgICAgICAgICAgIHdyYXBwZXIuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG5cbiAgICAgICAgICAgICAgICAvLyBPbiBjbGljayBwbGF5LCBwYXVzZSBvcmUgcmVzdGFydFxuICAgICAgICAgICAgICAgIF9vbih3cmFwcGVyLCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVG91Y2ggZGV2aWNlcyB3aWxsIGp1c3Qgc2hvdyBjb250cm9scyAoaWYgd2UncmUgaGlkaW5nIGNvbnRyb2xzKVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnLmhpZGVDb250cm9scyAmJiBwbHlyLmJyb3dzZXIuaXNUb3VjaCAmJiAhcGx5ci5tZWRpYS5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHlyLm1lZGlhLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwbHlyLm1lZGlhLmVuZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfc2VlaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9wYXVzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERpc2FibGUgcmlnaHQgY2xpY2tcbiAgICAgICAgICAgIGlmIChjb25maWcuZGlzYWJsZUNvbnRleHRNZW51KSB7XG4gICAgICAgICAgICAgICAgX29uKHBseXIubWVkaWEsICdjb250ZXh0bWVudScsIGZ1bmN0aW9uKGV2ZW50KSB7IGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBQcm94eSBldmVudHMgdG8gY29udGFpbmVyXG4gICAgICAgICAgICAvLyBCdWJibGUgdXAga2V5IGV2ZW50cyBmb3IgRWRnZVxuICAgICAgICAgICAgX29uKHBseXIubWVkaWEsIGNvbmZpZy5ldmVudHMuY29uY2F0KFsna2V5dXAnLCAna2V5ZG93biddKS5qb2luKCcgJyksIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChwbHlyLmNvbnRhaW5lciwgZXZlbnQudHlwZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhbmNlbCBjdXJyZW50IG5ldHdvcmsgcmVxdWVzdHNcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9TZWx6L3BseXIvaXNzdWVzLzE3NFxuICAgICAgICBmdW5jdGlvbiBfY2FuY2VsUmVxdWVzdHMoKSB7XG4gICAgICAgICAgICBpZiAoIV9pbkFycmF5KGNvbmZpZy50eXBlcy5odG1sNSwgcGx5ci50eXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVtb3ZlIGNoaWxkIHNvdXJjZXNcbiAgICAgICAgICAgIHZhciBzb3VyY2VzID0gcGx5ci5tZWRpYS5xdWVyeVNlbGVjdG9yQWxsKCdzb3VyY2UnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIF9yZW1vdmUoc291cmNlc1tpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldCBibGFuayB2aWRlbyBzcmMgYXR0cmlidXRlXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHRvIHByZXZlbnQgYSBNRURJQV9FUlJfU1JDX05PVF9TVVBQT1JURUQgZXJyb3JcbiAgICAgICAgICAgIC8vIEluZm86IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzIyMzE1NzkvaG93LXRvLXByb3Blcmx5LWRpc3Bvc2Utb2YtYW4taHRtbDUtdmlkZW8tYW5kLWNsb3NlLXNvY2tldC1vci1jb25uZWN0aW9uXG4gICAgICAgICAgICBwbHlyLm1lZGlhLnNldEF0dHJpYnV0ZSgnc3JjJywgJ2h0dHBzOi8vY2RuLnNlbHouY29tL3BseXIvYmxhbmsubXA0Jyk7XG5cbiAgICAgICAgICAgIC8vIExvYWQgdGhlIG5ldyBlbXB0eSBzb3VyY2VcbiAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBjYW5jZWwgZXhpc3RpbmcgcmVxdWVzdHNcbiAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vU2Vsei9wbHlyL2lzc3Vlcy8xNzRcbiAgICAgICAgICAgIHBseXIubWVkaWEubG9hZCgpO1xuXG4gICAgICAgICAgICAvLyBEZWJ1Z2dpbmdcbiAgICAgICAgICAgIF9sb2coJ0NhbmNlbGxlZCBuZXR3b3JrIHJlcXVlc3RzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXN0cm95IGFuIGluc3RhbmNlXG4gICAgICAgIC8vIEV2ZW50IGxpc3RlbmVycyBhcmUgcmVtb3ZlZCB3aGVuIGVsZW1lbnRzIGFyZSByZW1vdmVkXG4gICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTI1MjgwNDkvaWYtYS1kb20tZWxlbWVudC1pcy1yZW1vdmVkLWFyZS1pdHMtbGlzdGVuZXJzLWFsc28tcmVtb3ZlZC1mcm9tLW1lbW9yeVxuICAgICAgICBmdW5jdGlvbiBfZGVzdHJveShjYWxsYmFjaywgcmVzdG9yZSkge1xuICAgICAgICAgICAgLy8gQmFpbCBpZiB0aGUgZWxlbWVudCBpcyBub3QgaW5pdGlhbGl6ZWRcbiAgICAgICAgICAgIGlmICghcGx5ci5pbml0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFR5cGUgc3BlY2lmaWMgc3R1ZmZcbiAgICAgICAgICAgIHN3aXRjaCAocGx5ci50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAneW91dHViZSc6XG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIHRpbWVyc1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aW1lcnMuYnVmZmVyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXJzLnBsYXlpbmcpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIERlc3Ryb3kgWW91VHViZSBBUElcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC5kZXN0cm95KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXBcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5VcCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAndmltZW8nOlxuICAgICAgICAgICAgICAgICAgICAvLyBEZXN0cm95IFZpbWVvIEFQSVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGVuIGNsZWFuIHVwICh3YWl0LCB0byBwcmV2ZW50IHBvc3RtZXNzYWdlIGVycm9ycylcbiAgICAgICAgICAgICAgICAgICAgcGx5ci5lbWJlZC51bmxvYWQoKS50aGVuKGNsZWFuVXApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFZpbWVvIGRvZXMgbm90IGFsd2F5cyByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgdGltZXJzLmNsZWFuVXAgPSB3aW5kb3cuc2V0VGltZW91dChjbGVhblVwLCAyMDApO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAndmlkZW8nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBuYXRpdmUgdmlkZW8gY29udHJvbHNcbiAgICAgICAgICAgICAgICAgICAgX3RvZ2dsZU5hdGl2ZUNvbnRyb2xzKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuVXAoKTtcblxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2xlYW5VcCgpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJzLmNsZWFuVXApO1xuXG4gICAgICAgICAgICAgICAgLy8gRGVmYXVsdCB0byByZXN0b3JlIG9yaWdpbmFsIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBpZiAoIV9pcy5ib29sZWFuKHJlc3RvcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3RvcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENhbGxiYWNrXG4gICAgICAgICAgICAgICAgaWYgKF9pcy5mdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChvcmlnaW5hbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQmFpbCBpZiB3ZSBkb24ndCBuZWVkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3RvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBpbml0IGZsYWdcbiAgICAgICAgICAgICAgICBwbHlyLmluaXQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIFJlcGxhY2UgdGhlIGNvbnRhaW5lciB3aXRoIHRoZSBvcmlnaW5hbCBlbGVtZW50IHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgcGx5ci5jb250YWluZXIucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQob3JpZ2luYWwsIHBseXIuY29udGFpbmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIEV2ZW50XG4gICAgICAgICAgICAgICAgX3RyaWdnZXJFdmVudChvcmlnaW5hbCwgJ2Rlc3Ryb3llZCcsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgYSBwbGF5ZXJcbiAgICAgICAgZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgICAgICAgICAvLyBCYWlsIGlmIHRoZSBlbGVtZW50IGlzIGluaXRpYWxpemVkXG4gICAgICAgICAgICBpZiAocGx5ci5pbml0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNldHVwIHRoZSBmdWxsc2NyZWVuIGFwaVxuICAgICAgICAgICAgZnVsbHNjcmVlbiA9IF9mdWxsc2NyZWVuKCk7XG5cbiAgICAgICAgICAgIC8vIFNuaWZmIG91dCB0aGUgYnJvd3NlclxuICAgICAgICAgICAgcGx5ci5icm93c2VyID0gX2Jyb3dzZXJTbmlmZigpO1xuXG4gICAgICAgICAgICAvLyBCYWlsIGlmIG5vdGhpbmcgdG8gc2V0dXBcbiAgICAgICAgICAgIGlmICghX2lzLmh0bWxFbGVtZW50KHBseXIubWVkaWEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMb2FkIHNhdmVkIHNldHRpbmdzIGZyb20gbG9jYWxTdG9yYWdlXG4gICAgICAgICAgICBfc2V0dXBTdG9yYWdlKCk7XG5cbiAgICAgICAgICAgIC8vIFNldCBtZWRpYSB0eXBlIGJhc2VkIG9uIHRhZyBvciBkYXRhIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy8gU3VwcG9ydGVkOiB2aWRlbywgYXVkaW8sIHZpbWVvLCB5b3V0dWJlXG4gICAgICAgICAgICB2YXIgdGFnTmFtZSA9IG1lZGlhLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmICh0YWdOYW1lID09PSAnZGl2Jykge1xuICAgICAgICAgICAgICAgIHBseXIudHlwZSAgICAgPSBtZWRpYS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdHlwZScpO1xuICAgICAgICAgICAgICAgIHBseXIuZW1iZWRJZCAgPSBtZWRpYS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdmlkZW8taWQnKTtcblxuICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwXG4gICAgICAgICAgICAgICAgbWVkaWEucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXR5cGUnKTtcbiAgICAgICAgICAgICAgICBtZWRpYS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtdmlkZW8taWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGx5ci50eXBlICAgICAgICAgICA9IHRhZ05hbWU7XG4gICAgICAgICAgICAgICAgY29uZmlnLmNyb3Nzb3JpZ2luICA9IChtZWRpYS5nZXRBdHRyaWJ1dGUoJ2Nyb3Nzb3JpZ2luJykgIT09IG51bGwpO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5hdXRvcGxheSAgICAgPSAoY29uZmlnLmF1dG9wbGF5IHx8IChtZWRpYS5nZXRBdHRyaWJ1dGUoJ2F1dG9wbGF5JykgIT09IG51bGwpKTtcbiAgICAgICAgICAgICAgICBjb25maWcubG9vcCAgICAgICAgID0gKGNvbmZpZy5sb29wIHx8IChtZWRpYS5nZXRBdHRyaWJ1dGUoJ2xvb3AnKSAhPT0gbnVsbCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayBmb3Igc3VwcG9ydFxuICAgICAgICAgICAgcGx5ci5zdXBwb3J0ZWQgPSBzdXBwb3J0ZWQocGx5ci50eXBlKTtcblxuICAgICAgICAgICAgLy8gSWYgbm8gbmF0aXZlIHN1cHBvcnQsIGJhaWxcbiAgICAgICAgICAgIGlmICghcGx5ci5zdXBwb3J0ZWQuYmFzaWMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdyYXAgbWVkaWFcbiAgICAgICAgICAgIHBseXIuY29udGFpbmVyID0gX3dyYXAobWVkaWEsIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcblxuICAgICAgICAgICAgLy8gQWxsb3cgZm9jdXMgdG8gYmUgY2FwdHVyZWRcbiAgICAgICAgICAgIHBseXIuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAwKTtcblxuICAgICAgICAgICAgLy8gQWRkIHN0eWxlIGhvb2tcbiAgICAgICAgICAgIF90b2dnbGVTdHlsZUhvb2soKTtcblxuICAgICAgICAgICAgLy8gRGVidWcgaW5mb1xuICAgICAgICAgICAgX2xvZygnJyArIHBseXIuYnJvd3Nlci5uYW1lICsgJyAnICsgcGx5ci5icm93c2VyLnZlcnNpb24pO1xuXG4gICAgICAgICAgICAvLyBTZXR1cCBtZWRpYVxuICAgICAgICAgICAgX3NldHVwTWVkaWEoKTtcblxuICAgICAgICAgICAgLy8gU2V0dXAgaW50ZXJmYWNlXG4gICAgICAgICAgICAvLyBJZiBlbWJlZCBidXQgbm90IGZ1bGx5IHN1cHBvcnRlZCwgc2V0dXBJbnRlcmZhY2UgKHRvIGF2b2lkIGZsYXNoIG9mIGNvbnRyb2xzKSBhbmQgY2FsbCByZWFkeSBub3dcbiAgICAgICAgICAgIGlmIChfaW5BcnJheShjb25maWcudHlwZXMuaHRtbDUsIHBseXIudHlwZSkgfHwgKF9pbkFycmF5KGNvbmZpZy50eXBlcy5lbWJlZCwgcGx5ci50eXBlKSAmJiAhcGx5ci5zdXBwb3J0ZWQuZnVsbCkpIHtcbiAgICAgICAgICAgICAgICAvLyBTZXR1cCBVSVxuICAgICAgICAgICAgICAgIF9zZXR1cEludGVyZmFjZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ2FsbCByZWFkeVxuICAgICAgICAgICAgICAgIF9yZWFkeSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2V0IHRpdGxlIG9uIGJ1dHRvbiBhbmQgZnJhbWVcbiAgICAgICAgICAgICAgICBfc2V0VGl0bGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3VjY2Vzc2Z1bCBzZXR1cFxuICAgICAgICAgICAgcGx5ci5pbml0ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIHRoZSBVSVxuICAgICAgICBmdW5jdGlvbiBfc2V0dXBJbnRlcmZhY2UoKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBzZXR1cCBpbnRlcmZhY2UgaWYgbm8gc3VwcG9ydFxuICAgICAgICAgICAgaWYgKCFwbHlyLnN1cHBvcnRlZC5mdWxsKSB7XG4gICAgICAgICAgICAgICAgX3dhcm4oJ0Jhc2ljIHN1cHBvcnQgb25seScsIHBseXIudHlwZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY29udHJvbHNcbiAgICAgICAgICAgICAgICBfcmVtb3ZlKF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuY29udHJvbHMud3JhcHBlcikpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGxhcmdlIHBsYXlcbiAgICAgICAgICAgICAgICBfcmVtb3ZlKF9nZXRFbGVtZW50KGNvbmZpZy5zZWxlY3RvcnMuYnV0dG9ucy5wbGF5KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZXN0b3JlIG5hdGl2ZSBjb250cm9sc1xuICAgICAgICAgICAgICAgIF90b2dnbGVOYXRpdmVDb250cm9scyh0cnVlKTtcblxuICAgICAgICAgICAgICAgIC8vIEJhaWxcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluamVjdCBjdXN0b20gY29udHJvbHMgaWYgbm90IHByZXNlbnRcbiAgICAgICAgICAgIHZhciBjb250cm9sc01pc3NpbmcgPSAhX2dldEVsZW1lbnRzKGNvbmZpZy5zZWxlY3RvcnMuY29udHJvbHMud3JhcHBlcikubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xzTWlzc2luZykge1xuICAgICAgICAgICAgICAgIC8vIEluamVjdCBjdXN0b20gY29udHJvbHNcbiAgICAgICAgICAgICAgICBfaW5qZWN0Q29udHJvbHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmluZCB0aGUgZWxlbWVudHNcbiAgICAgICAgICAgIGlmICghX2ZpbmRFbGVtZW50cygpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgY29udHJvbHMgYXJlIGluamVjdGVkLCByZS1iaW5kIGxpc3RlbmVycyBmb3IgY29udHJvbHNcbiAgICAgICAgICAgIGlmIChjb250cm9sc01pc3NpbmcpIHtcbiAgICAgICAgICAgICAgICBfY29udHJvbExpc3RlbmVycygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNZWRpYSBlbGVtZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgX21lZGlhTGlzdGVuZXJzKCk7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBuYXRpdmUgY29udHJvbHNcbiAgICAgICAgICAgIF90b2dnbGVOYXRpdmVDb250cm9scygpO1xuXG4gICAgICAgICAgICAvLyBTZXR1cCBmdWxsc2NyZWVuXG4gICAgICAgICAgICBfc2V0dXBGdWxsc2NyZWVuKCk7XG5cbiAgICAgICAgICAgIC8vIENhcHRpb25zXG4gICAgICAgICAgICBfc2V0dXBDYXB0aW9ucygpO1xuXG4gICAgICAgICAgICAvLyBTZXQgdm9sdW1lXG4gICAgICAgICAgICBfc2V0Vm9sdW1lKCk7XG4gICAgICAgICAgICBfdXBkYXRlVm9sdW1lKCk7XG5cbiAgICAgICAgICAgIC8vIFJlc2V0IHRpbWUgZGlzcGxheVxuICAgICAgICAgICAgX3RpbWVVcGRhdGUoKTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBVSVxuICAgICAgICAgICAgX2NoZWNrUGxheWluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXBpID0ge1xuICAgICAgICAgICAgZ2V0T3JpZ2luYWw6ICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIG9yaWdpbmFsOyB9LFxuICAgICAgICAgICAgZ2V0Q29udGFpbmVyOiAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIuY29udGFpbmVyIH0sXG4gICAgICAgICAgICBnZXRFbWJlZDogICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5lbWJlZDsgfSxcbiAgICAgICAgICAgIGdldE1lZGlhOiAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLm1lZGlhOyB9LFxuICAgICAgICAgICAgZ2V0VHlwZTogICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIudHlwZTsgfSxcbiAgICAgICAgICAgIGdldER1cmF0aW9uOiAgICAgICAgX2dldER1cmF0aW9uLFxuICAgICAgICAgICAgZ2V0Q3VycmVudFRpbWU6ICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIubWVkaWEuY3VycmVudFRpbWU7IH0sXG4gICAgICAgICAgICBnZXRWb2x1bWU6ICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5tZWRpYS52b2x1bWU7IH0sXG4gICAgICAgICAgICBpc011dGVkOiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gcGx5ci5tZWRpYS5tdXRlZDsgfSxcbiAgICAgICAgICAgIGlzUmVhZHk6ICAgICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBfaGFzQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLnJlYWR5KTsgfSxcbiAgICAgICAgICAgIGlzTG9hZGluZzogICAgICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBfaGFzQ2xhc3MocGx5ci5jb250YWluZXIsIGNvbmZpZy5jbGFzc2VzLmxvYWRpbmcpOyB9LFxuICAgICAgICAgICAgaXNQYXVzZWQ6ICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHBseXIubWVkaWEucGF1c2VkOyB9LFxuICAgICAgICAgICAgb246ICAgICAgICAgICAgICAgICBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spIHsgX29uKHBseXIuY29udGFpbmVyLCBldmVudCwgY2FsbGJhY2spOyByZXR1cm4gdGhpczsgfSxcbiAgICAgICAgICAgIHBsYXk6ICAgICAgICAgICAgICAgX3BsYXksXG4gICAgICAgICAgICBwYXVzZTogICAgICAgICAgICAgIF9wYXVzZSxcbiAgICAgICAgICAgIHN0b3A6ICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7IF9wYXVzZSgpOyBfc2VlaygpOyB9LFxuICAgICAgICAgICAgcmVzdGFydDogICAgICAgICAgICBfc2VlayxcbiAgICAgICAgICAgIHJld2luZDogICAgICAgICAgICAgX3Jld2luZCxcbiAgICAgICAgICAgIGZvcndhcmQ6ICAgICAgICAgICAgX2ZvcndhcmQsXG4gICAgICAgICAgICBzZWVrOiAgICAgICAgICAgICAgIF9zZWVrLFxuICAgICAgICAgICAgc291cmNlOiAgICAgICAgICAgICBfc291cmNlLFxuICAgICAgICAgICAgcG9zdGVyOiAgICAgICAgICAgICBfdXBkYXRlUG9zdGVyLFxuICAgICAgICAgICAgc2V0Vm9sdW1lOiAgICAgICAgICBfc2V0Vm9sdW1lLFxuICAgICAgICAgICAgdG9nZ2xlUGxheTogICAgICAgICBfdG9nZ2xlUGxheSxcbiAgICAgICAgICAgIHRvZ2dsZU11dGU6ICAgICAgICAgX3RvZ2dsZU11dGUsXG4gICAgICAgICAgICB0b2dnbGVDYXB0aW9uczogICAgIF90b2dnbGVDYXB0aW9ucyxcbiAgICAgICAgICAgIHRvZ2dsZUZ1bGxzY3JlZW46ICAgX3RvZ2dsZUZ1bGxzY3JlZW4sXG4gICAgICAgICAgICB0b2dnbGVDb250cm9sczogICAgIF90b2dnbGVDb250cm9scyxcbiAgICAgICAgICAgIGlzRnVsbHNjcmVlbjogICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBwbHlyLmlzRnVsbHNjcmVlbiB8fCBmYWxzZTsgfSxcbiAgICAgICAgICAgIHN1cHBvcnQ6ICAgICAgICAgICAgZnVuY3Rpb24obWltZVR5cGUpIHsgcmV0dXJuIF9zdXBwb3J0TWltZShwbHlyLCBtaW1lVHlwZSk7IH0sXG4gICAgICAgICAgICBkZXN0cm95OiAgICAgICAgICAgIF9kZXN0cm95XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gRXZlcnl0aGluZyBkb25lXG4gICAgICAgIGZ1bmN0aW9uIF9yZWFkeSgpIHtcbiAgICAgICAgICAgIC8vIFJlYWR5IGV2ZW50IGF0IGVuZCBvZiBleGVjdXRpb24gc3RhY2tcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF90cmlnZ2VyRXZlbnQocGx5ci5tZWRpYSwgJ3JlYWR5Jyk7XG4gICAgICAgICAgICB9LCAwKTtcblxuICAgICAgICAgICAgLy8gU2V0IGNsYXNzIGhvb2sgb24gbWVkaWEgZWxlbWVudFxuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIubWVkaWEsIGRlZmF1bHRzLmNsYXNzZXMuc2V0dXAsIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBTZXQgY29udGFpbmVyIGNsYXNzIGZvciByZWFkeVxuICAgICAgICAgICAgX3RvZ2dsZUNsYXNzKHBseXIuY29udGFpbmVyLCBjb25maWcuY2xhc3Nlcy5yZWFkeSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIC8vIFN0b3JlIGEgcmVmZXJuY2UgdG8gaW5zdGFuY2VcbiAgICAgICAgICAgIHBseXIubWVkaWEucGx5ciA9IGFwaTtcblxuICAgICAgICAgICAgLy8gQXV0b3BsYXlcbiAgICAgICAgICAgIGlmIChjb25maWcuYXV0b3BsYXkpIHtcbiAgICAgICAgICAgICAgICBfcGxheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBpbnN0YW5jZVxuICAgICAgICBfaW5pdCgpO1xuXG4gICAgICAgIC8vIElmIGluaXQgZmFpbGVkLCByZXR1cm4gbnVsbFxuICAgICAgICBpZiAoIXBseXIuaW5pdCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXBpO1xuICAgIH1cblxuICAgIC8vIExvYWQgYSBzcHJpdGVcbiAgICBmdW5jdGlvbiBsb2FkU3ByaXRlKHVybCwgaWQpIHtcbiAgICAgICAgdmFyIHggPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAvLyBJZiB0aGUgaWQgaXMgc2V0IGFuZCBzcHJpdGUgZXhpc3RzLCBiYWlsXG4gICAgICAgIGlmIChfaXMuc3RyaW5nKGlkKSAmJiBfaXMuaHRtbEVsZW1lbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignIycgKyBpZCkpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgcGxhY2Vob2xkZXIgKHRvIHByZXZlbnQgbG9hZGluZyB0d2ljZSlcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKCdoaWRkZW4nLCAnJyk7XG4gICAgICAgIGlmIChfaXMuc3RyaW5nKGlkKSkge1xuICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUoY29udGFpbmVyLCBkb2N1bWVudC5ib2R5LmNoaWxkTm9kZXNbMF0pO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBDT1JTIHN1cHBvcnRcbiAgICAgICAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHgpIHtcbiAgICAgICAgICAgIHgub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluamVjdCBoaWRkZW4gZGl2IHdpdGggc3ByaXRlIG9uIGxvYWRcbiAgICAgICAgeC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSB4LnJlc3BvbnNlVGV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHguc2VuZCgpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBzdXBwb3J0XG4gICAgZnVuY3Rpb24gc3VwcG9ydGVkKHR5cGUpIHtcbiAgICAgICAgdmFyIGJyb3dzZXIgICAgID0gX2Jyb3dzZXJTbmlmZigpLFxuICAgICAgICAgICAgaXNPbGRJRSAgICAgPSAoYnJvd3Nlci5pc0lFICYmIGJyb3dzZXIudmVyc2lvbiA8PSA5KSxcbiAgICAgICAgICAgIGlzSW9zICAgICAgID0gYnJvd3Nlci5pc0lvcyxcbiAgICAgICAgICAgIGlzSXBob25lICAgID0gL2lQaG9uZXxpUG9kL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxcbiAgICAgICAgICAgIGF1ZGlvICAgICAgID0gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpLmNhblBsYXlUeXBlLFxuICAgICAgICAgICAgdmlkZW8gICAgICAgPSAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJykuY2FuUGxheVR5cGUsXG4gICAgICAgICAgICBiYXNpYywgZnVsbDtcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICAgICAgICBiYXNpYyA9IHZpZGVvO1xuICAgICAgICAgICAgICAgIGZ1bGwgID0gKGJhc2ljICYmICghaXNPbGRJRSAmJiAhaXNJcGhvbmUpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgICAgICAgICAgIGJhc2ljID0gYXVkaW87XG4gICAgICAgICAgICAgICAgZnVsbCAgPSAoYmFzaWMgJiYgIWlzT2xkSUUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICd2aW1lbyc6XG4gICAgICAgICAgICBjYXNlICd5b3V0dWJlJzpcbiAgICAgICAgICAgIGNhc2UgJ3NvdW5kY2xvdWQnOlxuICAgICAgICAgICAgICAgIGJhc2ljID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmdWxsICA9ICghaXNPbGRJRSAmJiAhaXNJb3MpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJhc2ljID0gKGF1ZGlvICYmIHZpZGVvKTtcbiAgICAgICAgICAgICAgICBmdWxsICA9IChiYXNpYyAmJiAhaXNPbGRJRSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmFzaWM6ICBiYXNpYyxcbiAgICAgICAgICAgIGZ1bGw6ICAgZnVsbFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFNldHVwIGZ1bmN0aW9uXG4gICAgZnVuY3Rpb24gc2V0dXAodGFyZ2V0cywgb3B0aW9ucykge1xuICAgICAgICAvLyBHZXQgdGhlIHBsYXllcnNcbiAgICAgICAgdmFyIHBsYXllcnMgICAgID0gW10sXG4gICAgICAgICAgICBpbnN0YW5jZXMgICA9IFtdLFxuICAgICAgICAgICAgc2VsZWN0b3IgICAgPSBbZGVmYXVsdHMuc2VsZWN0b3JzLmh0bWw1LCBkZWZhdWx0cy5zZWxlY3RvcnMuZW1iZWRdLmpvaW4oJywnKTtcblxuICAgICAgICAvLyBTZWxlY3QgdGhlIGVsZW1lbnRzXG4gICAgICAgIGlmIChfaXMuc3RyaW5nKHRhcmdldHMpKSB7XG4gICAgICAgICAgICAvLyBTdHJpbmcgc2VsZWN0b3IgcGFzc2VkXG4gICAgICAgICAgICB0YXJnZXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXRzKTtcbiAgICAgICAgfSAgZWxzZSBpZiAoX2lzLmh0bWxFbGVtZW50KHRhcmdldHMpKSB7XG4gICAgICAgICAgICAvLyBTaW5nbGUgSFRNTEVsZW1lbnQgcGFzc2VkXG4gICAgICAgICAgICB0YXJnZXRzID0gW3RhcmdldHNdO1xuICAgICAgICB9ICBlbHNlIGlmICghX2lzLm5vZGVMaXN0KHRhcmdldHMpICYmICFfaXMuYXJyYXkodGFyZ2V0cykgJiYgIV9pcy5zdHJpbmcodGFyZ2V0cykpICB7XG4gICAgICAgICAgICAvLyBObyBzZWxlY3RvciBwYXNzZWQsIHBvc3NpYmx5IG9wdGlvbnMgYXMgZmlyc3QgYXJndW1lbnRcbiAgICAgICAgICAgIC8vIElmIG9wdGlvbnMgYXJlIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAgICAgICAgaWYgKF9pcy51bmRlZmluZWQob3B0aW9ucykgJiYgX2lzLm9iamVjdCh0YXJnZXRzKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB0YXJnZXRzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVc2UgZGVmYXVsdCBzZWxlY3RvclxuICAgICAgICAgICAgdGFyZ2V0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29udmVydCBOb2RlTGlzdCB0byBhcnJheVxuICAgICAgICBpZiAoX2lzLm5vZGVMaXN0KHRhcmdldHMpKSB7XG4gICAgICAgICAgICB0YXJnZXRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGFyZ2V0cyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCYWlsIGlmIGRpc2FibGVkIG9yIG5vIGJhc2ljIHN1cHBvcnRcbiAgICAgICAgLy8gWW91IG1heSB3YW50IHRvIGRpc2FibGUgY2VydGFpbiBVQXMgZXRjXG4gICAgICAgIGlmICghc3VwcG9ydGVkKCkuYmFzaWMgfHwgIXRhcmdldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgdG8gY29udGFpbmVyIGxpc3RcbiAgICAgICAgZnVuY3Rpb24gYWRkKHRhcmdldCwgbWVkaWEpIHtcbiAgICAgICAgICAgIGlmICghX2hhc0NsYXNzKG1lZGlhLCBkZWZhdWx0cy5jbGFzc2VzLmhvb2spKSB7XG4gICAgICAgICAgICAgICAgcGxheWVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWx3YXlzIHdyYXAgaW4gYSA8ZGl2PiBmb3Igc3R5bGluZ1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnRhaW5lcjogIF93cmFwKG1lZGlhLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSksXG4gICAgICAgICAgICAgICAgICAgIC8vIENvdWxkIGJlIGEgY29udGFpbmVyIG9yIHRoZSBtZWRpYSBpdHNlbGZcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSB0aGUgPHZpZGVvPiwgPGF1ZGlvPiBvciA8ZGl2PiAoWW91VHViZS9WaW1lbylcbiAgICAgICAgICAgICAgICAgICAgbWVkaWE6ICAgICAgbWVkaWFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSB0YXJnZXRzIGhhdmUgbXVsdGlwbGUgbWVkaWEgZWxlbWVudHNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGFyZ2V0c1tpXTtcblxuICAgICAgICAgICAgLy8gR2V0IGNoaWxkcmVuXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0YXJnZXQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgbW9yZSB0aGFuIG9uZSBtZWRpYSBlbGVtZW50IGNoaWxkLCB3cmFwIHRoZW1cbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGNoaWxkcmVuLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZCh0YXJnZXQsIGNoaWxkcmVuW3hdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKF9tYXRjaGVzKHRhcmdldCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgLy8gVGFyZ2V0IGlzIG1lZGlhIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBhZGQodGFyZ2V0LCB0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgcGxheWVyIGluc3RhbmNlIGZvciBlYWNoIGVsZW1lbnRcbiAgICAgICAgcGxheWVycy5mb3JFYWNoKGZ1bmN0aW9uKHBsYXllcikge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgICAgID0gcGxheWVyLnRhcmdldCxcbiAgICAgICAgICAgICAgICBtZWRpYSAgICAgICA9IHBsYXllci5tZWRpYSxcbiAgICAgICAgICAgICAgICBtYXRjaCAgICAgICA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBUaGUgdGFyZ2V0IGVsZW1lbnQgY2FuIGFsc28gYmUgdGhlIG1lZGlhIGVsZW1lbnRcbiAgICAgICAgICAgIGlmIChtZWRpYSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIG1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0dXAgYSBwbGF5ZXIgaW5zdGFuY2UgYW5kIGFkZCB0byB0aGUgZWxlbWVudFxuICAgICAgICAgICAgLy8gQ3JlYXRlIGluc3RhbmNlLXNwZWNpZmljIGNvbmZpZ1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcblxuICAgICAgICAgICAgLy8gVHJ5IHBhcnNpbmcgZGF0YSBhdHRyaWJ1dGUgY29uZmlnXG4gICAgICAgICAgICB0cnkgeyBkYXRhID0gSlNPTi5wYXJzZShlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1wbHlyJykpOyB9XG4gICAgICAgICAgICBjYXRjaChlKSB7IH1cblxuICAgICAgICAgICAgdmFyIGNvbmZpZyA9IF9leHRlbmQoe30sIGRlZmF1bHRzLCBvcHRpb25zLCBkYXRhKTtcblxuICAgICAgICAgICAgLy8gQmFpbCBpZiBub3QgZW5hYmxlZFxuICAgICAgICAgICAgaWYgKCFjb25maWcuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDcmVhdGUgbmV3IGluc3RhbmNlXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgUGx5cihtZWRpYSwgY29uZmlnKTtcblxuICAgICAgICAgICAgLy8gR28gdG8gbmV4dCBpZiBzZXR1cCBmYWlsZWRcbiAgICAgICAgICAgIGlmICghX2lzLm9iamVjdChpbnN0YW5jZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgZXZlbnRzIGlmIGRlYnVnZ2luZ1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIHZhciBldmVudHMgPSBjb25maWcuZXZlbnRzLmNvbmNhdChbJ3NldHVwJywgJ3N0YXRlY2hhbmdlJywgJ2VudGVyZnVsbHNjcmVlbicsICdleGl0ZnVsbHNjcmVlbicsICdjYXB0aW9uc2VuYWJsZWQnLCAnY2FwdGlvbnNkaXNhYmxlZCddKTtcblxuICAgICAgICAgICAgICAgIF9vbihpbnN0YW5jZS5nZXRDb250YWluZXIoKSwgZXZlbnRzLmpvaW4oJyAnKSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coW2NvbmZpZy5sb2dQcmVmaXgsICdldmVudDonLCBldmVudC50eXBlXS5qb2luKCcgJyksIGV2ZW50LmRldGFpbC5wbHlyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2FsbGJhY2tcbiAgICAgICAgICAgIF9ldmVudChpbnN0YW5jZS5nZXRDb250YWluZXIoKSwgJ3NldHVwJywgdHJ1ZSwge1xuICAgICAgICAgICAgICAgIHBseXI6IGluc3RhbmNlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gQWRkIHRvIHJldHVybiBhcnJheSBldmVuIGlmIGl0J3MgYWxyZWFkeSBzZXR1cFxuICAgICAgICAgICAgaW5zdGFuY2VzLnB1c2goaW5zdGFuY2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaW5zdGFuY2VzO1xuICAgIH1cblxuICAgIC8vIEdldCBhbGwgaW5zdGFuY2VzIHdpdGhpbiBhIHByb3ZpZGVkIGNvbnRhaW5lclxuICAgIGZ1bmN0aW9uIGdldChjb250YWluZXIpIHtcbiAgICAgICAgaWYgKF9pcy5zdHJpbmcoY29udGFpbmVyKSkge1xuICAgICAgICAgICAgLy8gR2V0IHNlbGVjdG9yIGlmIHN0cmluZyBwYXNzZWRcbiAgICAgICAgICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIGlmIChfaXMudW5kZWZpbmVkKGNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgIC8vIFVzZSBib2R5IGJ5IGRlZmF1bHQgdG8gZ2V0IGFsbCBvbiBwYWdlXG4gICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIEhUTUwgZWxlbWVudFxuICAgICAgICBpZiAoX2lzLmh0bWxFbGVtZW50KGNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGRlZmF1bHRzLmNsYXNzZXMuc2V0dXApLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlcyA9IFtdO1xuXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKF9pcy5vYmplY3QoZWxlbWVudC5wbHlyKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZXMucHVzaChlbGVtZW50LnBseXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHNldHVwOiAgICAgIHNldHVwLFxuICAgICAgICBzdXBwb3J0ZWQ6ICBzdXBwb3J0ZWQsXG4gICAgICAgIGxvYWRTcHJpdGU6IGxvYWRTcHJpdGUsXG4gICAgICAgIGdldDogICAgICAgIGdldFxuICAgIH07XG59KSk7XG5cbi8vIEN1c3RvbSBldmVudCBwb2x5ZmlsbFxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50L0N1c3RvbUV2ZW50XG4oZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7XG4gICAgICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7IGJ1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSwgZGV0YWlsOiB1bmRlZmluZWQgfTtcbiAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICAgICAgICByZXR1cm4gZXZ0O1xuICAgIH1cblxuICAgIEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG5cbiAgICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudDtcbn0pKCk7XG4iLCIvKlxuICAgICBfIF8gICAgICBfICAgICAgIF9cbiBfX198IChfKSBfX198IHwgX18gIChfKV9fX1xuLyBfX3wgfCB8LyBfX3wgfC8gLyAgfCAvIF9ffFxuXFxfXyBcXCB8IHwgKF9ffCAgIDwgXyB8IFxcX18gXFxcbnxfX18vX3xffFxcX19ffF98XFxfKF8pLyB8X19fL1xuICAgICAgICAgICAgICAgICAgIHxfXy9cblxuIFZlcnNpb246IDEuNi4wXG4gIEF1dGhvcjogS2VuIFdoZWVsZXJcbiBXZWJzaXRlOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW9cbiAgICBEb2NzOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW8vc2xpY2tcbiAgICBSZXBvOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrXG4gIElzc3VlczogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGljay9pc3N1ZXNcblxuICovXG4vKiBnbG9iYWwgd2luZG93LCBkb2N1bWVudCwgZGVmaW5lLCBqUXVlcnksIHNldEludGVydmFsLCBjbGVhckludGVydmFsICovXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgICB9XG5cbn0oZnVuY3Rpb24oJCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgU2xpY2sgPSB3aW5kb3cuU2xpY2sgfHwge307XG5cbiAgICBTbGljayA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgaW5zdGFuY2VVaWQgPSAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIFNsaWNrKGVsZW1lbnQsIHNldHRpbmdzKSB7XG5cbiAgICAgICAgICAgIHZhciBfID0gdGhpcywgZGF0YVNldHRpbmdzO1xuXG4gICAgICAgICAgICBfLmRlZmF1bHRzID0ge1xuICAgICAgICAgICAgICAgIGFjY2Vzc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgICAgICAgYWRhcHRpdmVIZWlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFwcGVuZEFycm93czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcHBlbmREb3RzOiAkKGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGFycm93czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhc05hdkZvcjogbnVsbCxcbiAgICAgICAgICAgICAgICBwcmV2QXJyb3c6ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXJvbGU9XCJub25lXCIgY2xhc3M9XCJzbGljay1wcmV2XCIgYXJpYS1sYWJlbD1cIlByZXZpb3VzXCIgdGFiaW5kZXg9XCIwXCIgcm9sZT1cImJ1dHRvblwiPlByZXZpb3VzPC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICBuZXh0QXJyb3c6ICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLXJvbGU9XCJub25lXCIgY2xhc3M9XCJzbGljay1uZXh0XCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0YWJpbmRleD1cIjBcIiByb2xlPVwiYnV0dG9uXCI+TmV4dDwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDMwMDAsXG4gICAgICAgICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJzUwcHgnLFxuICAgICAgICAgICAgICAgIGNzc0Vhc2U6ICdlYXNlJyxcbiAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uKHNsaWRlciwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1yb2xlPVwibm9uZVwiIHJvbGU9XCJidXR0b25cIiB0YWJpbmRleD1cIjBcIiAvPicpLnRleHQoaSArIDEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZG90czogZmFsc2UsXG4gICAgICAgICAgICAgICAgZG90c0NsYXNzOiAnc2xpY2stZG90cycsXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgZWRnZUZyaWN0aW9uOiAwLjM1LFxuICAgICAgICAgICAgICAgIGZhZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGZvY3VzT25TZWxlY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGluaXRpYWxTbGlkZTogMCxcbiAgICAgICAgICAgICAgICBsYXp5TG9hZDogJ29uZGVtYW5kJyxcbiAgICAgICAgICAgICAgICBtb2JpbGVGaXJzdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkhvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Gb2N1czogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRG90c0hvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZXNwb25kVG86ICd3aW5kb3cnLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IG51bGwsXG4gICAgICAgICAgICAgICAgcm93czogMSxcbiAgICAgICAgICAgICAgICBydGw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNsaWRlOiAnJyxcbiAgICAgICAgICAgICAgICBzbGlkZXNQZXJSb3c6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgICAgIHNwZWVkOiA1MDAsXG4gICAgICAgICAgICAgICAgc3dpcGU6IHRydWUsXG4gICAgICAgICAgICAgICAgc3dpcGVUb1NsaWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0b3VjaE1vdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgdG91Y2hUaHJlc2hvbGQ6IDUsXG4gICAgICAgICAgICAgICAgdXNlQ1NTOiB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZVRyYW5zZm9ybTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YXJpYWJsZVdpZHRoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWxTd2lwaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB3YWl0Rm9yQW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IDEwMDBcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF8uaW5pdGlhbHMgPSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkcmFnZ2luZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXV0b1BsYXlUaW1lcjogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50RGlyZWN0aW9uOiAwLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTbGlkZTogMCxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IDEsXG4gICAgICAgICAgICAgICAgJGRvdHM6IG51bGwsXG4gICAgICAgICAgICAgICAgbGlzdFdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgbG9hZEluZGV4OiAwLFxuICAgICAgICAgICAgICAgICRuZXh0QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgJHByZXZBcnJvdzogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRlV2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlVHJhY2s6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlczogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldDogMCxcbiAgICAgICAgICAgICAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgJGxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgdG91Y2hPYmplY3Q6IHt9LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybXNFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bnNsaWNrZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzKTtcblxuICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzID0gW107XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5ncyA9IFtdO1xuICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgXy5mb2N1c3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5oaWRkZW4gPSAnaGlkZGVuJztcbiAgICAgICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIF8ucG9zaXRpb25Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gbnVsbDtcbiAgICAgICAgICAgIF8ucm93Q291bnQgPSAxO1xuICAgICAgICAgICAgXy5zaG91bGRDbGljayA9IHRydWU7XG4gICAgICAgICAgICBfLiRzbGlkZXIgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9IDA7XG4gICAgICAgICAgICBfLndpbmRvd1RpbWVyID0gbnVsbDtcblxuICAgICAgICAgICAgZGF0YVNldHRpbmdzID0gJChlbGVtZW50KS5kYXRhKCdzbGljaycpIHx8IHt9O1xuXG4gICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5kZWZhdWx0cywgc2V0dGluZ3MsIGRhdGFTZXR0aW5ncyk7XG5cbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcblxuICAgICAgICAgICAgXy5vcmlnaW5hbFNldHRpbmdzID0gXy5vcHRpb25zO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICdtb3pIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5hdXRvUGxheSA9ICQucHJveHkoXy5hdXRvUGxheSwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5Q2xlYXIgPSAkLnByb3h5KF8uYXV0b1BsYXlDbGVhciwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5SXRlcmF0b3IgPSAkLnByb3h5KF8uYXV0b1BsYXlJdGVyYXRvciwgXyk7XG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlID0gJC5wcm94eShfLmNoYW5nZVNsaWRlLCBfKTtcbiAgICAgICAgICAgIF8uY2xpY2tIYW5kbGVyID0gJC5wcm94eShfLmNsaWNrSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNlbGVjdEhhbmRsZXIgPSAkLnByb3h5KF8uc2VsZWN0SGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNldFBvc2l0aW9uID0gJC5wcm94eShfLnNldFBvc2l0aW9uLCBfKTtcbiAgICAgICAgICAgIF8uc3dpcGVIYW5kbGVyID0gJC5wcm94eShfLnN3aXBlSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmRyYWdIYW5kbGVyID0gJC5wcm94eShfLmRyYWdIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8ua2V5SGFuZGxlciA9ICQucHJveHkoXy5rZXlIYW5kbGVyLCBfKTtcblxuICAgICAgICAgICAgXy5pbnN0YW5jZVVpZCA9IGluc3RhbmNlVWlkKys7XG5cbiAgICAgICAgICAgIC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG4gICAgICAgICAgICAvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAobXVzdCBzdGFydCB3aXRoIDwpXG4gICAgICAgICAgICAvLyBFeHRyYWN0ZWQgZnJvbSBqUXVlcnkgdjEuMTEgc291cmNlXG4gICAgICAgICAgICBfLmh0bWxFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qKSQvO1xuXG5cbiAgICAgICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xuICAgICAgICAgICAgXy5pbml0KHRydWUpO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gU2xpY2s7XG5cbiAgICB9KCkpO1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFjdGl2YXRlQURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1hY3RpdmUnKS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICdmYWxzZSdcbiAgICAgICAgfSkuZmluZCgnYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0JykuYXR0cih7XG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFkZFNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQWRkID0gZnVuY3Rpb24obWFya3VwLCBpbmRleCwgYWRkQmVmb3JlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGFkZEJlZm9yZSA9IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCB8fCAoaW5kZXggPj0gXy5zbGlkZUNvdW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBfLiRzbGlkZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhZGRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QmVmb3JlKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QWZ0ZXIoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWRkQmVmb3JlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFuaW1hdGVIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0XG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlU2xpZGUgPSBmdW5jdGlvbih0YXJnZXRMZWZ0LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBhbmltUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAtdGFyZ2V0TGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gLShfLmN1cnJlbnRMZWZ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJCh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogXy5jdXJyZW50TGVmdFxuICAgICAgICAgICAgICAgIH0pLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBfLm9wdGlvbnMuc3BlZWQsXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXy5vcHRpb25zLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24obm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBNYXRoLmNlaWwobm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4LCAwcHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKDBweCwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSBNYXRoLmNlaWwodGFyZ2V0TGVmdCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHRhcmdldExlZnQgKyAncHgsIDBweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKDBweCwnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZUYXJnZXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8ub3B0aW9ucy5hc05hdkZvcjtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICYmIGFzTmF2Rm9yICE9PSBudWxsICkge1xuICAgICAgICAgICAgYXNOYXZGb3IgPSAkKGFzTmF2Rm9yKS5ub3QoXy4kc2xpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc05hdkZvcjtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXNOYXZGb3IgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5nZXROYXZUYXJnZXQoKTtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICE9PSBudWxsICYmIHR5cGVvZiBhc05hdkZvciA9PT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICBhc05hdkZvci5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLnNsaWNrKCdnZXRTbGljaycpO1xuICAgICAgICAgICAgICAgIGlmKCF0YXJnZXQudW5zbGlja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5zbGlkZUhhbmRsZXIoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSBfLnRyYW5zZm9ybVR5cGUgKyAnICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICdvcGFjaXR5ICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBpZiAoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5VGltZXIgPSBzZXRJbnRlcnZhbCggXy5hdXRvUGxheUl0ZXJhdG9yLCBfLm9wdGlvbnMuYXV0b3BsYXlTcGVlZCApO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5Q2xlYXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uYXV0b1BsYXlUaW1lcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgaWYgKCAhXy5wYXVzZWQgJiYgIV8uaW50ZXJydXB0ZWQgJiYgIV8uZm9jdXNzZWQgKSB7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSApIHtcblxuICAgICAgICAgICAgICAgIGlmICggXy5kaXJlY3Rpb24gPT09IDEgJiYgKCBfLmN1cnJlbnRTbGlkZSArIDEgKSA9PT0gKCBfLnNsaWRlQ291bnQgLSAxICkpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBfLmN1cnJlbnRTbGlkZSAtIDEgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVUbyApO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyA9ICQoXy5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgPSAkKF8ub3B0aW9ucy5uZXh0QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuXG4gICAgICAgICAgICBpZiggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5wcmVwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGQoIF8uJG5leHRBcnJvdyApXG5cbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kaXNhYmxlZCc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkRG90cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIGRvdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgICAgICBkb3QgPSAkKCc8dWwgLz4nKS5hZGRDbGFzcyhfLm9wdGlvbnMuZG90c0NsYXNzKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8PSBfLmdldERvdENvdW50KCk7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGRvdC5hcHBlbmQoJCgnPGxpIC8+JykuYXBwZW5kKF8ub3B0aW9ucy5jdXN0b21QYWdpbmcuY2FsbCh0aGlzLCBfLCBpKSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRkb3RzID0gZG90LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmREb3RzKTtcblxuICAgICAgICAgICAgXy4kZG90cy5maW5kKCdsaScpLmZpcnN0KCkuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZE91dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCBfLm9wdGlvbnMuc2xpZGUgKyAnOm5vdCguc2xpY2stY2xvbmVkKScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KVxuICAgICAgICAgICAgICAgIC5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnLCAkKGVsZW1lbnQpLmF0dHIoJ3N0eWxlJykgfHwgJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2sgPSAoXy5zbGlkZUNvdW50ID09PSAwKSA/XG4gICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykuYXBwZW5kVG8oXy4kc2xpZGVyKSA6XG4gICAgICAgICAgICBfLiRzbGlkZXMud3JhcEFsbCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLnBhcmVudCgpO1xuXG4gICAgICAgIF8uJGxpc3QgPSBfLiRzbGlkZVRyYWNrLndyYXAoXG4gICAgICAgICAgICAnPGRpdiBhcmlhLWxpdmU9XCJwb2xpdGVcIiBjbGFzcz1cInNsaWNrLWxpc3RcIi8+JykucGFyZW50KCk7XG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKCdvcGFjaXR5JywgMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlIHx8IF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlcikubm90KCdbc3JjXScpLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XG5cbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuXG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG5cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5hZGRDbGFzcygnZHJhZ2dhYmxlJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBhLCBiLCBjLCBuZXdTbGlkZXMsIG51bU9mU2xpZGVzLCBvcmlnaW5hbFNsaWRlcyxzbGlkZXNQZXJTZWN0aW9uO1xuXG4gICAgICAgIG5ld1NsaWRlcyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXIuY2hpbGRyZW4oKTtcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDEpIHtcblxuICAgICAgICAgICAgc2xpZGVzUGVyU2VjdGlvbiA9IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cgKiBfLm9wdGlvbnMucm93cztcbiAgICAgICAgICAgIG51bU9mU2xpZGVzID0gTWF0aC5jZWlsKFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLmxlbmd0aCAvIHNsaWRlc1BlclNlY3Rpb25cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvcihhID0gMDsgYSA8IG51bU9mU2xpZGVzOyBhKyspe1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGZvcihiID0gMDsgYiA8IF8ub3B0aW9ucy5yb3dzOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBmb3IoYyA9IDA7IGMgPCBfLm9wdGlvbnMuc2xpZGVzUGVyUm93OyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAoYSAqIHNsaWRlc1BlclNlY3Rpb24gKyAoKGIgKiBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArIGMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2xpZGVzLmFwcGVuZENoaWxkKHNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG5ld1NsaWRlcyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzooMTAwIC8gXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyAnJScsXG4gICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaydcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZSA9IGZ1bmN0aW9uKGluaXRpYWwsIGZvcmNlVXBkYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtwb2ludCwgdGFyZ2V0QnJlYWtwb2ludCwgcmVzcG9uZFRvV2lkdGgsIHRyaWdnZXJCcmVha3BvaW50ID0gZmFsc2U7XG4gICAgICAgIHZhciBzbGlkZXJXaWR0aCA9IF8uJHNsaWRlci53aWR0aCgpO1xuICAgICAgICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCAkKHdpbmRvdykud2lkdGgoKTtcblxuICAgICAgICBpZiAoXy5yZXNwb25kVG8gPT09ICd3aW5kb3cnKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHdpbmRvd1dpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnc2xpZGVyJykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSBzbGlkZXJXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ21pbicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gTWF0aC5taW4od2luZG93V2lkdGgsIHNsaWRlcldpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnJlc3BvbnNpdmUgJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aCAmJlxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAoYnJlYWtwb2ludCBpbiBfLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludHMuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3JpZ2luYWxTZXR0aW5ncy5tb2JpbGVGaXJzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA8IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA+IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBfLmFjdGl2ZUJyZWFrcG9pbnQgfHwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnVuc2xpY2sodGFyZ2V0QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9IF8ub3JpZ2luYWxTZXR0aW5ncztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG9ubHkgdHJpZ2dlciBicmVha3BvaW50cyBkdXJpbmcgYW4gYWN0dWFsIGJyZWFrLiBub3Qgb24gaW5pdGlhbGl6ZS5cbiAgICAgICAgICAgIGlmKCAhaW5pdGlhbCAmJiB0cmlnZ2VyQnJlYWtwb2ludCAhPT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JyZWFrcG9pbnQnLCBbXywgdHJpZ2dlckJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGFuZ2VTbGlkZSA9IGZ1bmN0aW9uKGV2ZW50LCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICR0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLFxuICAgICAgICAgICAgaW5kZXhPZmZzZXQsIHNsaWRlT2Zmc2V0LCB1bmV2ZW5PZmZzZXQ7XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIGEgbGluaywgcHJldmVudCBkZWZhdWx0IGFjdGlvbi5cbiAgICAgICAgaWYoJHRhcmdldC5pcygnYScpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIG5vdCB0aGUgPGxpPiBlbGVtZW50IChpZTogYSBjaGlsZCksIGZpbmQgdGhlIDxsaT4uXG4gICAgICAgIGlmKCEkdGFyZ2V0LmlzKCdsaScpKSB7XG4gICAgICAgICAgICAkdGFyZ2V0ID0gJHRhcmdldC5jbG9zZXN0KCdsaScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdW5ldmVuT2Zmc2V0ID0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCk7XG4gICAgICAgIGluZGV4T2Zmc2V0ID0gdW5ldmVuT2Zmc2V0ID8gMCA6IChfLnNsaWRlQ291bnQgLSBfLmN1cnJlbnRTbGlkZSkgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLm1lc3NhZ2UpIHtcblxuICAgICAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSArIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnaW5kZXgnOlxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50LmRhdGEuaW5kZXggPT09IDAgPyAwIDpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleCB8fCAkdGFyZ2V0LmluZGV4KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmNoZWNrTmF2aWdhYmxlKGluZGV4KSwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LmNoaWxkcmVuKCkudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tOYXZpZ2FibGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG5hdmlnYWJsZXMsIHByZXZOYXZpZ2FibGU7XG5cbiAgICAgICAgbmF2aWdhYmxlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpO1xuICAgICAgICBwcmV2TmF2aWdhYmxlID0gMDtcbiAgICAgICAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBpbmRleCA9IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gbmF2aWdhYmxlcykge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IG5hdmlnYWJsZXNbbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwcmV2TmF2aWdhYmxlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldk5hdmlnYWJsZSA9IG5hdmlnYWJsZXNbbl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyAmJiBfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9mZignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub2ZmKF8udmlzaWJpbGl0eUNoYW5nZSwgXy52aXNpYmlsaXR5KTtcblxuICAgICAgICBfLmNsZWFuVXBTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5vcmllbnRhdGlvbkNoYW5nZSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnJlc2l6ZSk7XG5cbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vZmYoJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuICAgICAgICAkKGRvY3VtZW50KS5vZmYoJ3JlYWR5LnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBvcmlnaW5hbFNsaWRlcztcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDEpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQob3JpZ2luYWxTbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLnNob3VsZENsaWNrID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKHJlZnJlc2gpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuXG4gICAgICAgIF8uY2xlYW5VcEV2ZW50cygpO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLmRldGFjaCgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5wcmV2QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xuXG4gICAgICAgICAgICBpZiAoIF8uaHRtbEV4cHIudGVzdCggXy5vcHRpb25zLm5leHRBcnJvdyApKSB7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChfLiRzbGlkZXMpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZSBzbGljay1hY3RpdmUgc2xpY2stY2VudGVyIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zbGljay1pbmRleCcpXG4gICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKCdzdHlsZScsICQodGhpcykuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJGxpc3QuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hcHBlbmQoXy4kc2xpZGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uY2xlYW5VcFJvd3MoKTtcblxuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJyk7XG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgXy51bnNsaWNrZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmKCFyZWZyZXNoKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignZGVzdHJveScsIFtfXSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGlzYWJsZVRyYW5zaXRpb24gPSBmdW5jdGlvbihzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gJyc7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGUgPSBmdW5jdGlvbihzbGlkZUluZGV4LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZU91dCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5maWx0ZXJTbGlkZXMgPSBTbGljay5wcm90b3R5cGUuc2xpY2tGaWx0ZXIgPSBmdW5jdGlvbihmaWx0ZXIpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKGZpbHRlciAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZS5maWx0ZXIoZmlsdGVyKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcblxuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZvY3VzSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXJcbiAgICAgICAgICAgIC5vZmYoJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snKVxuICAgICAgICAgICAgLm9uKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJyxcbiAgICAgICAgICAgICAgICAnKjpub3QoLnNsaWNrLWFycm93KScsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdmFyICRzZiA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnBhdXNlT25Gb2N1cyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb2N1c3NlZCA9ICRzZi5pcygnOmZvY3VzJyk7XG4gICAgICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0Q3VycmVudCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgcmV0dXJuIF8uY3VycmVudFNsaWRlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXREb3RDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgYnJlYWtQb2ludCA9IDA7XG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgICAgdmFyIHBhZ2VyUXR5ID0gMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2UgaWYoIV8ub3B0aW9ucy5hc05hdkZvcikge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSAxICsgTWF0aC5jZWlsKChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAvIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgICAgICBjb3VudGVyICs9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYWdlclF0eSAtIDE7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldExlZnQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgIHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwLFxuICAgICAgICAgICAgdGFyZ2V0U2xpZGU7XG5cbiAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgIHZlcnRpY2FsSGVpZ2h0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKF8uc2xpZGVXaWR0aCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogLTE7XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAodmVydGljYWxIZWlnaHQgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAqIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID4gXy5zbGlkZUNvdW50ICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiBfLnNsaWRlV2lkdGg7XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiB2ZXJ0aWNhbEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIC0gXy5zbGlkZVdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIF8uc2xpZGVXaWR0aCkgKiAtMSkgKyBfLnNsaWRlT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xKSArIHZlcnRpY2FsT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ICs9IChfLiRsaXN0LndpZHRoKCkgLSB0YXJnZXRTbGlkZS5vdXRlcldpZHRoKCkpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRMZWZ0O1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRPcHRpb24gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHZXRPcHRpb24gPSBmdW5jdGlvbihvcHRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIF8ub3B0aW9uc1tvcHRpb25dO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZpZ2FibGVJbmRleGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtQb2ludCA9IDAsXG4gICAgICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICAgIG1heDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgY291bnRlciA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50ICogMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgbWF4KSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goYnJlYWtQb2ludCk7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWNrID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWRlQ291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQsIHN3aXBlZFNsaWRlLCBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgPyBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSA6IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLXNsaWRlJykuZWFjaChmdW5jdGlvbihpbmRleCwgc2xpZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGUub2Zmc2V0TGVmdCAtIGNlbnRlck9mZnNldCArICgkKHNsaWRlKS5vdXRlcldpZHRoKCkgLyAyKSA+IChfLnN3aXBlTGVmdCAqIC0xKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2lwZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCA9IE1hdGguYWJzKCQoc3dpcGVkU2xpZGUpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSAtIF8uY3VycmVudFNsaWRlKSB8fCAxO1xuXG4gICAgICAgICAgICByZXR1cm4gc2xpZGVzVHJhdmVyc2VkO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdvVG8gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHb1RvID0gZnVuY3Rpb24oc2xpZGUsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHBhcnNlSW50KHNsaWRlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkb250QW5pbWF0ZSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbihjcmVhdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoISQoXy4kc2xpZGVyKS5oYXNDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKSkge1xuXG4gICAgICAgICAgICAkKF8uJHNsaWRlcikuYWRkQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJyk7XG5cbiAgICAgICAgICAgIF8uYnVpbGRSb3dzKCk7XG4gICAgICAgICAgICBfLmJ1aWxkT3V0KCk7XG4gICAgICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgICAgICBfLnN0YXJ0TG9hZCgpO1xuICAgICAgICAgICAgXy5sb2FkU2xpZGVyKCk7XG4gICAgICAgICAgICBfLmluaXRpYWxpemVFdmVudHMoKTtcbiAgICAgICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKHRydWUpO1xuICAgICAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyZWF0aW9uKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignaW5pdCcsIFtfXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgXy4kc2xpZGVzLmFkZChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmF0dHIoJ3JvbGUnLCAnbGlzdGJveCcpO1xuXG4gICAgICAgIF8uJHNsaWRlcy5ub3QoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAncm9sZSc6ICdvcHRpb24nLFxuICAgICAgICAgICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBpICsgJydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgXy4kZG90cy5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKS5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3ByZXNlbnRhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogJ2ZhbHNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiAnbmF2aWdhdGlvbicgKyBfLmluc3RhbmNlVWlkICsgaSArICcnLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIGkgKyAnJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZmlyc3QoKS5hdHRyKCdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKS5lbmQoKVxuICAgICAgICAgICAgICAgIC5maW5kKCdidXR0b24nKS5hdHRyKCdyb2xlJywgJ2J1dHRvbicpLmVuZCgpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJ2RpdicpLmF0dHIoJ3JvbGUnLCAndG9vbGJhcicpO1xuICAgICAgICB9XG4gICAgICAgIF8uYWN0aXZhdGVBREEoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFycm93RXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICduZXh0J1xuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdERvdEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKS5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4J1xuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8ub3B0aW9ucy5wYXVzZU9uRG90c0hvdmVyID09PSB0cnVlICkge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgLm9uKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRTbGlkZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5wYXVzZU9uSG92ZXIgKSB7XG5cbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRpYWxpemVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5pbml0QXJyb3dFdmVudHMoKTtcblxuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ3N0YXJ0J1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdtb3ZlJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoZW5kLnNsaWNrIG1vdXNldXAuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9uKF8udmlzaWJpbGl0eUNoYW5nZSwgJC5wcm94eShfLnZpc2liaWxpdHksIF8pKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQod2luZG93KS5vbignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5vcmllbnRhdGlvbkNoYW5nZSwgXykpO1xuXG4gICAgICAgICQod2luZG93KS5vbigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ucmVzaXplLCBfKSk7XG5cbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vbignZHJhZ3N0YXJ0JywgXy5wcmV2ZW50RGVmYXVsdCk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcbiAgICAgICAgJChkb2N1bWVudCkub24oJ3JlYWR5LnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFVJID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnNob3coKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5zaG93KCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUua2V5SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICAgLy9Eb250IHNsaWRlIGlmIHRoZSBjdXJzb3IgaXMgaW5zaWRlIHRoZSBmb3JtIGZpZWxkcyBhbmQgYXJyb3cga2V5cyBhcmUgcHJlc3NlZFxuICAgICAgICBpZighZXZlbnQudGFyZ2V0LnRhZ05hbWUubWF0Y2goJ1RFWFRBUkVBfElOUFVUfFNFTEVDVCcpKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzcgJiYgXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSA/ICduZXh0JyA6ICAncHJldmlvdXMnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzkgJiYgXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSA/ICdwcmV2aW91cycgOiAnbmV4dCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxhenlMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgbG9hZFJhbmdlLCBjbG9uZVJhbmdlLCByYW5nZVN0YXJ0LCByYW5nZUVuZDtcblxuICAgICAgICBmdW5jdGlvbiBsb2FkSW1hZ2VzKGltYWdlc1Njb3BlKSB7XG5cbiAgICAgICAgICAgICQoJ2ltZ1tkYXRhLWxhenldJywgaW1hZ2VzU2NvcGUpLmVhY2goZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2UgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNvdXJjZSA9ICQodGhpcykuYXR0cignZGF0YS1sYXp5JyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFuaW1hdGUoeyBvcGFjaXR5OiAwIH0sIDEwMCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIGltYWdlU291cmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDEgfSwgMjAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZGVkJywgW18sIGltYWdlLCBpbWFnZVNvdXJjZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5zcmMgPSBpbWFnZVNvdXJjZTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLmN1cnJlbnRTbGlkZSArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gcmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gTWF0aC5tYXgoMCwgXy5jdXJyZW50U2xpZGUgLSAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSAyICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkgKyBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgXy5jdXJyZW50U2xpZGUgOiBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgIHJhbmdlRW5kID0gTWF0aC5jZWlsKHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZVN0YXJ0ID4gMCkgcmFuZ2VTdGFydC0tO1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZUVuZCA8PSBfLnNsaWRlQ291bnQpIHJhbmdlRW5kKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJykuc2xpY2UocmFuZ2VTdGFydCwgcmFuZ2VFbmQpO1xuICAgICAgICBsb2FkSW1hZ2VzKGxvYWRSYW5nZSk7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZSgwLCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKiAtMSk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxvYWRTbGlkZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5pbml0VUkoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAncHJvZ3Jlc3NpdmUnKSB7XG4gICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5uZXh0ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrTmV4dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGF1c2UgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQYXVzZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcbiAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wbGF5ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIF8ub3B0aW9ucy5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wb3N0U2xpZGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIV8udW5zbGlja2VkICkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWZ0ZXJDaGFuZ2UnLCBbXywgaW5kZXhdKTtcblxuICAgICAgICAgICAgXy5hbmltYXRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5pbml0QURBKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUHJldiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJvZ3Jlc3NpdmVMYXp5TG9hZCA9IGZ1bmN0aW9uKCB0cnlDb3VudCApIHtcblxuICAgICAgICB0cnlDb3VudCA9IHRyeUNvdW50IHx8IDE7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgJGltZ3NUb0xvYWQgPSAkKCAnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIgKSxcbiAgICAgICAgICAgIGltYWdlLFxuICAgICAgICAgICAgaW1hZ2VTb3VyY2UsXG4gICAgICAgICAgICBpbWFnZVRvTG9hZDtcblxuICAgICAgICBpZiAoICRpbWdzVG9Mb2FkLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgaW1hZ2UgPSAkaW1nc1RvTG9hZC5maXJzdCgpO1xuICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSBpbWFnZS5hdHRyKCdkYXRhLWxhenknKTtcbiAgICAgICAgICAgIGltYWdlVG9Mb2FkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoICdzcmMnLCBpbWFnZVNvdXJjZSApXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLWxhenknKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcbiAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0cnlDb3VudCA8IDMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIHRyeSB0byBsb2FkIHRoZSBpbWFnZSAzIHRpbWVzLFxuICAgICAgICAgICAgICAgICAgICAgKiBsZWF2ZSBhIHNsaWdodCBkZWxheSBzbyB3ZSBkb24ndCBnZXRcbiAgICAgICAgICAgICAgICAgICAgICogc2VydmVycyBibG9ja2luZyB0aGUgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCB0cnlDb3VudCArIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwICk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FsbEltYWdlc0xvYWRlZCcsIFsgXyBdKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiggaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgY3VycmVudFNsaWRlLCBsYXN0VmlzaWJsZUluZGV4O1xuXG4gICAgICAgIGxhc3RWaXNpYmxlSW5kZXggPSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuXG4gICAgICAgIC8vIGluIG5vbi1pbmZpbml0ZSBzbGlkZXJzLCB3ZSBkb24ndCB3YW50IHRvIGdvIHBhc3QgdGhlXG4gICAgICAgIC8vIGxhc3QgdmlzaWJsZSBpbmRleC5cbiAgICAgICAgaWYoICFfLm9wdGlvbnMuaW5maW5pdGUgJiYgKCBfLmN1cnJlbnRTbGlkZSA+IGxhc3RWaXNpYmxlSW5kZXggKSkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBsYXN0VmlzaWJsZUluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbGVzcyBzbGlkZXMgdGhhbiB0byBzaG93LCBnbyB0byBzdGFydC5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcblxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG5cbiAgICAgICAgXy5kZXN0cm95KHRydWUpO1xuXG4gICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMsIHsgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUgfSk7XG5cbiAgICAgICAgXy5pbml0KCk7XG5cbiAgICAgICAgaWYoICFpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRTbGlkZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZ2lzdGVyQnJlYWtwb2ludHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGJyZWFrcG9pbnQsIGN1cnJlbnRCcmVha3BvaW50LCBsLFxuICAgICAgICAgICAgcmVzcG9uc2l2ZVNldHRpbmdzID0gXy5vcHRpb25zLnJlc3BvbnNpdmUgfHwgbnVsbDtcblxuICAgICAgICBpZiAoICQudHlwZShyZXNwb25zaXZlU2V0dGluZ3MpID09PSAnYXJyYXknICYmIHJlc3BvbnNpdmVTZXR0aW5ncy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gXy5vcHRpb25zLnJlc3BvbmRUbyB8fCAnd2luZG93JztcblxuICAgICAgICAgICAgZm9yICggYnJlYWtwb2ludCBpbiByZXNwb25zaXZlU2V0dGluZ3MgKSB7XG5cbiAgICAgICAgICAgICAgICBsID0gXy5icmVha3BvaW50cy5sZW5ndGgtMTtcbiAgICAgICAgICAgICAgICBjdXJyZW50QnJlYWtwb2ludCA9IHJlc3BvbnNpdmVTZXR0aW5nc1ticmVha3BvaW50XS5icmVha3BvaW50O1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNpdmVTZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShicmVha3BvaW50KSkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgYnJlYWtwb2ludHMgYW5kIGN1dCBvdXQgYW55IGV4aXN0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIG9uZXMgd2l0aCB0aGUgc2FtZSBicmVha3BvaW50IG51bWJlciwgd2UgZG9uJ3Qgd2FudCBkdXBlcy5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoIGwgPj0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLmJyZWFrcG9pbnRzW2xdICYmIF8uYnJlYWtwb2ludHNbbF0gPT09IGN1cnJlbnRCcmVha3BvaW50ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc3BsaWNlKGwsMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsLS07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnB1c2goY3VycmVudEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tjdXJyZW50QnJlYWtwb2ludF0gPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uc2V0dGluZ3M7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5icmVha3BvaW50cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCBfLm9wdGlvbnMubW9iaWxlRmlyc3QgKSA/IGEtYiA6IGItYTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVpbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlcyA9XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKF8ub3B0aW9ucy5zbGlkZSlcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgXy5zbGlkZUNvdW50ID0gXy4kc2xpZGVzLmxlbmd0aDtcblxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50ICYmIF8uY3VycmVudFNsaWRlICE9PSAwKSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcblxuICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuICAgICAgICBfLmJ1aWxkQXJyb3dzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICBfLmluaXREb3RFdmVudHMoKTtcbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcbiAgICAgICAgXy5pbml0U2xpZGVFdmVudHMoKTtcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZShmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub24oJ2NsaWNrLnNsaWNrJywgXy5zZWxlY3RIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2V0U2xpZGVDbGFzc2VzKHR5cGVvZiBfLmN1cnJlbnRTbGlkZSA9PT0gJ251bWJlcicgPyBfLmN1cnJlbnRTbGlkZSA6IDApO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcbiAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICBfLnBhdXNlZCA9ICFfLm9wdGlvbnMuYXV0b3BsYXk7XG4gICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigncmVJbml0JywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSAhPT0gXy53aW5kb3dXaWR0aCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF8ud2luZG93RGVsYXkpO1xuICAgICAgICAgICAgXy53aW5kb3dEZWxheSA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICAgICAgICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICAgICAgICAgIGlmKCAhXy51bnNsaWNrZWQgKSB7IF8uc2V0UG9zaXRpb24oKTsgfVxuICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5yZW1vdmVTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1JlbW92ZSA9IGZ1bmN0aW9uKGluZGV4LCByZW1vdmVCZWZvcmUsIHJlbW92ZUFsbCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICByZW1vdmVCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gcmVtb3ZlQmVmb3JlID09PSB0cnVlID8gMCA6IF8uc2xpZGVDb3VudCAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IC0taW5kZXggOiBpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPCAxIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+IF8uc2xpZGVDb3VudCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHJlbW92ZUFsbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbigpLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmVxKGluZGV4KS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRDU1MgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIHgsIHk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gLXBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHggPSBfLnBvc2l0aW9uUHJvcCA9PSAnbGVmdCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xuICAgICAgICB5ID0gXy5wb3NpdGlvblByb3AgPT0gJ3RvcCcgPyBNYXRoLmNlaWwocG9zaXRpb24pICsgJ3B4JyA6ICcwcHgnO1xuXG4gICAgICAgIHBvc2l0aW9uUHJvcHNbXy5wb3NpdGlvblByb3BdID0gcG9zaXRpb247XG5cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvc2l0aW9uUHJvcHMgPSB7fTtcbiAgICAgICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKCcgKyB4ICsgJywgJyArIHkgKyAnKSc7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHggKyAnLCAnICsgeSArICcsIDBweCknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldERpbWVuc2lvbnMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKCcwcHggJyArIF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kbGlzdC5oZWlnaHQoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGxpc3QuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogKF8ub3B0aW9ucy5jZW50ZXJQYWRkaW5nICsgJyAwcHgnKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy5saXN0V2lkdGggPSBfLiRsaXN0LndpZHRoKCk7XG4gICAgICAgIF8ubGlzdEhlaWdodCA9IF8uJGxpc3QuaGVpZ2h0KCk7XG5cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSAmJiBfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCAvIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aChNYXRoLmNlaWwoKF8uc2xpZGVXaWR0aCAqIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmxlbmd0aCkpKTtcblxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLndpZHRoKDUwMDAgKiBfLnNsaWRlQ291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zbGlkZVdpZHRoID0gTWF0aC5jZWlsKF8ubGlzdFdpZHRoKTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suaGVpZ2h0KE1hdGguY2VpbCgoXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSkgKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2Zmc2V0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJXaWR0aCh0cnVlKSAtIF8uJHNsaWRlcy5maXJzdCgpLndpZHRoKCk7XG4gICAgICAgIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gZmFsc2UpIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLndpZHRoKF8uc2xpZGVXaWR0aCAtIG9mZnNldCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEZhZGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRMZWZ0O1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uc2xpZGVXaWR0aCAqIGluZGV4KSAqIC0xO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogdGFyZ2V0TGVmdCxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLmNzcyh7XG4gICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAxLFxuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxICYmIF8ub3B0aW9ucy5hZGFwdGl2ZUhlaWdodCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgICAgIF8uJGxpc3QuY3NzKCdoZWlnaHQnLCB0YXJnZXRIZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldE9wdGlvbiA9XG4gICAgU2xpY2sucHJvdG90eXBlLnNsaWNrU2V0T3B0aW9uID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFjY2VwdHMgYXJndW1lbnRzIGluIGZvcm1hdCBvZjpcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2luZ2xlIG9wdGlvbidzIHZhbHVlOlxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsIG9wdGlvbiwgdmFsdWUsIHJlZnJlc2ggKVxuICAgICAgICAgKlxuICAgICAgICAgKiAgLSBmb3IgY2hhbmdpbmcgYSBzZXQgb2YgcmVzcG9uc2l2ZSBvcHRpb25zOlxuICAgICAgICAgKiAgICAgLnNsaWNrKFwic2V0T3B0aW9uXCIsICdyZXNwb25zaXZlJywgW3t9LCAuLi5dLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIHVwZGF0aW5nIG11bHRpcGxlIHZhbHVlcyBhdCBvbmNlIChub3QgcmVzcG9uc2l2ZSlcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCB7ICdvcHRpb24nOiB2YWx1ZSwgLi4uIH0sIHJlZnJlc2ggKVxuICAgICAgICAgKi9cblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGwsIGl0ZW0sIG9wdGlvbiwgdmFsdWUsIHJlZnJlc2ggPSBmYWxzZSwgdHlwZTtcblxuICAgICAgICBpZiggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ29iamVjdCcgKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9ICBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgdHlwZSA9ICdtdWx0aXBsZSc7XG5cbiAgICAgICAgfSBlbHNlIGlmICggJC50eXBlKCBhcmd1bWVudHNbMF0gKSA9PT0gJ3N0cmluZycgKSB7XG5cbiAgICAgICAgICAgIG9wdGlvbiA9ICBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICB2YWx1ZSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHJlZnJlc2ggPSBhcmd1bWVudHNbMl07XG5cbiAgICAgICAgICAgIGlmICggYXJndW1lbnRzWzBdID09PSAncmVzcG9uc2l2ZScgJiYgJC50eXBlKCBhcmd1bWVudHNbMV0gKSA9PT0gJ2FycmF5JyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAncmVzcG9uc2l2ZSc7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHR5cGVvZiBhcmd1bWVudHNbMV0gIT09ICd1bmRlZmluZWQnICkge1xuXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdzaW5nbGUnO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggdHlwZSA9PT0gJ3NpbmdsZScgKSB7XG5cbiAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRpb25dID0gdmFsdWU7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAnbXVsdGlwbGUnICkge1xuXG4gICAgICAgICAgICAkLmVhY2goIG9wdGlvbiAsIGZ1bmN0aW9uKCBvcHQsIHZhbCApIHtcblxuICAgICAgICAgICAgICAgIF8ub3B0aW9uc1tvcHRdID0gdmFsO1xuXG4gICAgICAgICAgICB9KTtcblxuXG4gICAgICAgIH0gZWxzZSBpZiAoIHR5cGUgPT09ICdyZXNwb25zaXZlJyApIHtcblxuICAgICAgICAgICAgZm9yICggaXRlbSBpbiB2YWx1ZSApIHtcblxuICAgICAgICAgICAgICAgIGlmKCAkLnR5cGUoIF8ub3B0aW9ucy5yZXNwb25zaXZlICkgIT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgPSBbIHZhbHVlW2l0ZW1dIF07XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGwgPSBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGgtMTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIHJlc3BvbnNpdmUgb2JqZWN0IGFuZCBzcGxpY2Ugb3V0IGR1cGxpY2F0ZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMucmVzcG9uc2l2ZVtsXS5icmVha3BvaW50ID09PSB2YWx1ZVtpdGVtXS5icmVha3BvaW50ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUuc3BsaWNlKGwsMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5wdXNoKCB2YWx1ZVtpdGVtXSApO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggcmVmcmVzaCApIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLnNldERpbWVuc2lvbnMoKTtcblxuICAgICAgICBfLnNldEhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc2V0Q1NTKF8uZ2V0TGVmdChfLmN1cnJlbnRTbGlkZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zZXRGYWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignc2V0UG9zaXRpb24nLCBbX10pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRQcm9wcyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XG5cbiAgICAgICAgXy5wb3NpdGlvblByb3AgPSBfLm9wdGlvbnMudmVydGljYWwgPT09IHRydWUgPyAndG9wJyA6ICdsZWZ0JztcblxuICAgICAgICBpZiAoXy5wb3NpdGlvblByb3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLXZlcnRpY2FsJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLldlYmtpdFRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYm9keVN0eWxlLk1velRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgYm9keVN0eWxlLm1zVHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnVzZUNTUyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuZmFkZSApIHtcbiAgICAgICAgICAgIGlmICggdHlwZW9mIF8ub3B0aW9ucy56SW5kZXggPT09ICdudW1iZXInICkge1xuICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMuekluZGV4IDwgMyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLm9wdGlvbnMuekluZGV4ID0gXy5kZWZhdWx0cy56SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keVN0eWxlLk9UcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdPVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctby10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdPVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUuTW96VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnTW96VHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbW96LXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ01velRyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLk1velBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLndlYmtpdFRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3dlYmtpdFRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLXdlYmtpdC10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd3ZWJraXRUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ21zVHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICctbXMtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnbXNUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUudHJhbnNmb3JtICE9PSB1bmRlZmluZWQgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICd0cmFuc2l0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBfLnRyYW5zZm9ybXNFbmFibGVkID0gXy5vcHRpb25zLnVzZVRyYW5zZm9ybSAmJiAoXy5hbmltVHlwZSAhPT0gbnVsbCAmJiBfLmFuaW1UeXBlICE9PSBmYWxzZSk7XG4gICAgfTtcblxuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldFNsaWRlQ2xhc3NlcyA9IGZ1bmN0aW9uKGluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0LCBhbGxTbGlkZXMsIGluZGV4T2Zmc2V0LCByZW1haW5kZXI7XG5cbiAgICAgICAgYWxsU2xpZGVzID0gXy4kc2xpZGVyXG4gICAgICAgICAgICAuZmluZCgnLnNsaWNrLXNsaWRlJylcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAuZXEoaW5kZXgpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWN1cnJlbnQnKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0ID0gTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBjZW50ZXJPZmZzZXQgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIDEpIC0gY2VudGVyT2Zmc2V0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXggLSBjZW50ZXJPZmZzZXQsIGluZGV4ICsgY2VudGVyT2Zmc2V0ICsgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBpbmRleE9mZnNldCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBpbmRleDtcbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoaW5kZXhPZmZzZXQgLSBjZW50ZXJPZmZzZXQgKyAxLCBpbmRleE9mZnNldCArIGNlbnRlck9mZnNldCArIDIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKGFsbFNsaWRlcy5sZW5ndGggLSAxIC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBfLnNsaWRlQ291bnQgLSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4LCBpbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsU2xpZGVzLmxlbmd0aCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHJlbWFpbmRlciA9IF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXggOiBpbmRleDtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAmJiAoXy5zbGlkZUNvdW50IC0gaW5kZXgpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSByZW1haW5kZXIpLCBpbmRleE9mZnNldCArIHJlbWFpbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCwgaW5kZXhPZmZzZXQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ29uZGVtYW5kJykge1xuICAgICAgICAgICAgXy5sYXp5TG9hZCgpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldHVwSW5maW5pdGUgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBpLCBzbGlkZUluZGV4LCBpbmZpbml0ZUNvdW50O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5vcHRpb25zLmNlbnRlck1vZGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIHNsaWRlSW5kZXggPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbmZpbml0ZUNvdW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBfLnNsaWRlQ291bnQ7IGkgPiAoXy5zbGlkZUNvdW50IC1cbiAgICAgICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQpOyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVJbmRleCA9IGkgLSAxO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjaykuYWRkQ2xhc3MoJ3NsaWNrLWNsb25lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5maW5pdGVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpLmZpbmQoJ1tpZF0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ2lkJywgJycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBmdW5jdGlvbiggdG9nZ2xlICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIXRvZ2dsZSApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBfLmludGVycnVwdGVkID0gdG9nZ2xlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZWxlY3RIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPVxuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLmlzKCcuc2xpY2stc2xpZGUnKSA/XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpIDpcbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodGFyZ2V0RWxlbWVudC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykpO1xuXG4gICAgICAgIGlmICghaW5kZXgpIGluZGV4ID0gMDtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoaW5kZXgpO1xuICAgICAgICAgICAgXy5hc05hdkZvcihpbmRleCk7XG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgfVxuXG4gICAgICAgIF8uc2xpZGVIYW5kbGVyKGluZGV4KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2xpZGVIYW5kbGVyID0gZnVuY3Rpb24oaW5kZXgsIHN5bmMsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIHRhcmdldFNsaWRlLCBhbmltU2xpZGUsIG9sZFNsaWRlLCBzbGlkZUxlZnQsIHRhcmdldExlZnQgPSBudWxsLFxuICAgICAgICAgICAgXyA9IHRoaXMsIG5hdlRhcmdldDtcblxuICAgICAgICBzeW5jID0gc3luYyB8fCBmYWxzZTtcblxuICAgICAgICBpZiAoXy5hbmltYXRpbmcgPT09IHRydWUgJiYgXy5vcHRpb25zLndhaXRGb3JBbmltYXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUgJiYgXy5jdXJyZW50U2xpZGUgPT09IGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hc05hdkZvcihpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRTbGlkZSA9IGluZGV4O1xuICAgICAgICB0YXJnZXRMZWZ0ID0gXy5nZXRMZWZ0KHRhcmdldFNsaWRlKTtcbiAgICAgICAgc2xpZGVMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gXy5zd2lwZUxlZnQgPT09IG51bGwgPyBzbGlkZUxlZnQgOiBfLnN3aXBlTGVmdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IF8uZ2V0RG90Q291bnQoKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRTbGlkZSA8IDApIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgLSAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50ICsgdGFyZ2V0U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2xpZGUgPj0gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGUgLSBfLnNsaWRlQ291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYmVmb3JlQ2hhbmdlJywgW18sIF8uY3VycmVudFNsaWRlLCBhbmltU2xpZGVdKTtcblxuICAgICAgICBvbGRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGFuaW1TbGlkZTtcblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXNOYXZGb3IgKSB7XG5cbiAgICAgICAgICAgIG5hdlRhcmdldCA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBuYXZUYXJnZXQuc2xpY2soJ2dldFNsaWNrJyk7XG5cbiAgICAgICAgICAgIGlmICggbmF2VGFyZ2V0LnNsaWRlQ291bnQgPD0gbmF2VGFyZ2V0Lm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgICAgIG5hdlRhcmdldC5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGVPdXQob2xkU2xpZGUpO1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGUoYW5pbVNsaWRlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHRhcmdldExlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3RhcnRMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LmhpZGUoKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVEaXJlY3Rpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgeERpc3QsIHlEaXN0LCByLCBzd2lwZUFuZ2xlLCBfID0gdGhpcztcblxuICAgICAgICB4RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRYIC0gXy50b3VjaE9iamVjdC5jdXJYO1xuICAgICAgICB5RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRZIC0gXy50b3VjaE9iamVjdC5jdXJZO1xuICAgICAgICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xuXG4gICAgICAgIHN3aXBlQW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgaWYgKHN3aXBlQW5nbGUgPCAwKSB7XG4gICAgICAgICAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gNDUpICYmIChzd2lwZUFuZ2xlID49IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDM2MCkgJiYgKHN3aXBlQW5nbGUgPj0gMzE1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAxMzUpICYmIChzd2lwZUFuZ2xlIDw9IDIyNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAncmlnaHQnIDogJ2xlZnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDM1KSAmJiAoc3dpcGVBbmdsZSA8PSAxMzUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ3ZlcnRpY2FsJztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVFbmQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlQ291bnQsXG4gICAgICAgICAgICBkaXJlY3Rpb247XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgIF8uc2hvdWxkQ2xpY2sgPSAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiAxMCApID8gZmFsc2UgOiB0cnVlO1xuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5jdXJYID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdlZGdlJywgW18sIF8uc3dpcGVEaXJlY3Rpb24oKSBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+PSBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlICkge1xuXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoIGRpcmVjdGlvbiApIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rvd24nOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndXAnOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiAhPSAndmVydGljYWwnICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlQ291bnQgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3N3aXBlJywgW18sIGRpcmVjdGlvbiBdKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zdGFydFggIT09IF8udG91Y2hPYmplY3QuY3VyWCApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBfLmN1cnJlbnRTbGlkZSApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKChfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSB8fCAoJ29udG91Y2hlbmQnIGluIGRvY3VtZW50ICYmIF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gZmFsc2UgJiYgZXZlbnQudHlwZS5pbmRleE9mKCdtb3VzZScpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zXG4gICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RIZWlnaHQgLyBfLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEuYWN0aW9uKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlU3RhcnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlTW92ZShldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZUVuZChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZU1vdmUgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGVkZ2VXYXNIaXQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1ckxlZnQsIHN3aXBlRGlyZWN0aW9uLCBzd2lwZUxlbmd0aCwgcG9zaXRpb25PZmZzZXQsIHRvdWNoZXM7XG5cbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCA/IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFfLmRyYWdnaW5nIHx8IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1ckxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clggLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCwgMikpKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICAgIE1hdGgucG93KF8udG91Y2hPYmplY3QuY3VyWSAtIF8udG91Y2hPYmplY3Quc3RhcnRZLCAyKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVEaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKHN3aXBlRGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiA0KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9zaXRpb25PZmZzZXQgPSAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAxIDogLTEpICogKF8udG91Y2hPYmplY3QuY3VyWCA+IF8udG91Y2hPYmplY3Quc3RhcnRYID8gMSA6IC0xKTtcbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uT2Zmc2V0ID0gXy50b3VjaE9iamVjdC5jdXJZID4gXy50b3VjaE9iamVjdC5zdGFydFkgPyAxIDogLTE7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aDtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKChfLmN1cnJlbnRTbGlkZSA9PT0gMCAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgfHwgKF8uY3VycmVudFNsaWRlID49IF8uZ2V0RG90Q291bnQoKSAmJiBzd2lwZURpcmVjdGlvbiA9PT0gJ2xlZnQnKSkge1xuICAgICAgICAgICAgICAgIHN3aXBlTGVuZ3RoID0gXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCAqIF8ub3B0aW9ucy5lZGdlRnJpY3Rpb247XG4gICAgICAgICAgICAgICAgXy50b3VjaE9iamVjdC5lZGdlSGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyBzd2lwZUxlbmd0aCAqIHBvc2l0aW9uT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgKHN3aXBlTGVuZ3RoICogKF8uJGxpc3QuaGVpZ2h0KCkgLyBfLmxpc3RXaWR0aCkpICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUgfHwgXy5vcHRpb25zLnRvdWNoTW92ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5zZXRDU1MoXy5zd2lwZUxlZnQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZVN0YXJ0ID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0b3VjaGVzO1xuXG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChfLnRvdWNoT2JqZWN0LmZpbmdlckNvdW50ICE9PSAxIHx8IF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFggPSBfLnRvdWNoT2JqZWN0LmN1clggPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VYIDogZXZlbnQuY2xpZW50WDtcbiAgICAgICAgXy50b3VjaE9iamVjdC5zdGFydFkgPSBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLmRyYWdnaW5nID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5maWx0ZXJTbGlkZXMgPSBTbGljay5wcm90b3R5cGUuc2xpY2tVbmZpbHRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy4kc2xpZGVzQ2FjaGUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNDYWNoZS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcblxuICAgICAgICAgICAgXy5yZWluaXQoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICAkKCcuc2xpY2stY2xvbmVkJywgXy4kc2xpZGVyKS5yZW1vdmUoKTtcblxuICAgICAgICBpZiAoXy4kZG90cykge1xuICAgICAgICAgICAgXy4kZG90cy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRwcmV2QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy4kbmV4dEFycm93ICYmIF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxuICAgICAgICAgICAgLmNzcygnd2lkdGgnLCAnJyk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVuc2xpY2sgPSBmdW5jdGlvbihmcm9tQnJlYWtwb2ludCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3Vuc2xpY2snLCBbXywgZnJvbUJyZWFrcG9pbnRdKTtcbiAgICAgICAgXy5kZXN0cm95KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnVwZGF0ZUFycm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiZcbiAgICAgICAgICAgIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJiZcbiAgICAgICAgICAgICFfLm9wdGlvbnMuaW5maW5pdGUgKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSAxICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlRG90cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLiRkb3RzXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2xpJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLmVxKE1hdGguZmxvb3IoXy5jdXJyZW50U2xpZGUgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIGlmICggZG9jdW1lbnRbXy5oaWRkZW5dICkge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgJC5mbi5zbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBvcHQgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGwgPSBfLmxlbmd0aCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICByZXQ7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0ID09ICdvYmplY3QnIHx8IHR5cGVvZiBvcHQgPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICAgICAgX1tpXS5zbGljayA9IG5ldyBTbGljayhfW2ldLCBvcHQpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldCA9IF9baV0uc2xpY2tbb3B0XS5hcHBseShfW2ldLnNsaWNrLCBhcmdzKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmV0ICE9ICd1bmRlZmluZWQnKSByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfO1xuICAgIH07XG5cbn0pKTtcbiIsIlxuJCh3aW5kb3cpLmJpbmQoJyBsb2FkIHJlc2l6ZSBvcmllbnRhdGlvbkNoYW5nZSAnLCBmdW5jdGlvbiAoKSB7XG4gICB2YXIgZm9vdGVyID0gJChcIiNmb290ZXItY29udGFpbmVyXCIpO1xuICAgdmFyIHBvcyA9IGZvb3Rlci5wb3NpdGlvbigpO1xuICAgdmFyIGhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcbiAgIGhlaWdodCA9IGhlaWdodCAtIHBvcy50b3A7XG4gICBoZWlnaHQgPSBoZWlnaHQgLSBmb290ZXIuaGVpZ2h0KCkgLTE7XG5cbiAgIGZ1bmN0aW9uIHN0aWNreUZvb3RlcigpIHtcbiAgICAgZm9vdGVyLmNzcyh7XG4gICAgICAgICAnbWFyZ2luLXRvcCc6IGhlaWdodCArICdweCdcbiAgICAgfSk7XG4gICB9XG5cbiAgIGlmIChoZWlnaHQgPiAwKSB7XG4gICAgIHN0aWNreUZvb3RlcigpO1xuICAgfVxufSk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0J1xuXG4gIHZhciBkaXNwbGF5Tm9uZU1lc3NhZ2UgPSBbXG4gICAgJ1lvdSBoYXZlIGEgV2F5cG9pbnQgZWxlbWVudCB3aXRoIGRpc3BsYXkgbm9uZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gJyxcbiAgICAnd2h5IHRoaXMgaXMgYSBiYWQgaWRlYSByZWFkICcsXG4gICAgJ2h0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2d1aWRlcy9kZWJ1Z2dpbmcvI2Rpc3BsYXktbm9uZSdcbiAgXS5qb2luKCcnKVxuICB2YXIgZml4ZWRNZXNzYWdlID0gW1xuICAgICdZb3UgaGF2ZSBhIFdheXBvaW50IGVsZW1lbnQgd2l0aCBmaXhlZCBwb3NpdGlvbmluZy4gRm9yIG1vcmUgJyxcbiAgICAnaW5mb3JtYXRpb24gb24gd2h5IHRoaXMgaXMgYSBiYWQgaWRlYSByZWFkICcsXG4gICAgJ2h0dHA6Ly9pbWFrZXdlYnRoaW5ncy5jb20vd2F5cG9pbnRzL2d1aWRlcy9kZWJ1Z2dpbmcvI2ZpeGVkLXBvc2l0aW9uJ1xuICBdLmpvaW4oJycpXG5cbiAgZnVuY3Rpb24gY2hlY2tXYXlwb2ludFN0eWxlcygpIHtcbiAgICB2YXIgb3JpZ2luYWxSZWZyZXNoID0gd2luZG93LldheXBvaW50LkNvbnRleHQucHJvdG90eXBlLnJlZnJlc2hcblxuICAgIHdpbmRvdy5XYXlwb2ludC5Db250ZXh0LnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBheGlzIGluIHRoaXMud2F5cG9pbnRzKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLndheXBvaW50c1theGlzXSkge1xuICAgICAgICAgIHZhciB3YXlwb2ludCA9IHRoaXMud2F5cG9pbnRzW2F4aXNdW2tleV1cbiAgICAgICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh3YXlwb2ludC5lbGVtZW50KVxuICAgICAgICAgIGlmICghd2F5cG9pbnQuZW5hYmxlZCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0eWxlICYmIHN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihkaXNwbGF5Tm9uZU1lc3NhZ2UpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdHlsZSAmJiBzdHlsZS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmaXhlZE1lc3NhZ2UpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ2luYWxSZWZyZXNoLmNhbGwodGhpcylcbiAgICB9XG4gIH1cblxuICBjaGVja1dheXBvaW50U3R5bGVzKClcbn0oKSlcbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogd2lhd1VuaXZlcnNhbEFqYXguanMgdjEuMFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbiFmdW5jdGlvbigkKSB7XG5cblx0JChmdW5jdGlvbigpe1xuXG5cblx0XHQvLyBDbGljayB0aGUgYnV0dG9uIVxuXHRcdCQoXCIuYXJjaGl2ZV9fbG9hZC1tb3JlIGFcIikuY2xpY2soIGZ1bmN0aW9uKCl7XG5cblx0XHRcdC8vIGFsZXJ0KCdzYXkgd2hhYWE/Jyk7XG5cblx0XHRcdHZhciB1cmwgPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKSxcblx0XHRcdFx0c3BsaXRfdXJsID0gdXJsLnNsaWNlKDAsIC0xKS5zcGxpdCgnLycpLFxuXHRcdFx0XHRwYWdlX251bSA9IHNwbGl0X3VybFsgc3BsaXRfdXJsLmxlbmd0aC0xXSxcblx0XHRcdFx0dmFycyA9IHt9O1xuXG5cblx0XHRcdGlmICggaXNOYU4ocGFnZV9udW0pICl7XG5cdFx0XHRcdHBhZ2VfbnVtID0gc3BsaXRfdXJsWyBzcGxpdF91cmwubGVuZ3RoLTJdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdXAgdGhlIGNvcnJlY3QgdmFyc1xuXHRcdFx0aWYgKCAkKFwiI3dpYXdfdGF4b25vbXlcIikubGVuZ3RoID49IDEpIHtcblx0XHRcdFx0dmFycy50YXhvbm9teSBcdD0gJChcIiN3aWF3X3RheG9ub215XCIpLnZhbCgpO1xuXHRcdFx0XHR2YXJzLnRlcm1faWQgXHQ9ICQoXCIjd2lhd190ZXJtX2lkXCIpLnZhbCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFycy5wb3N0X3R5cGUgXHQ9ICQoXCIjd2lhd19wb3N0X3R5cGVcIikudmFsKCk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnNvbGUubG9nKHNwbGl0X3VybCk7XG5cdFx0XHRjb25zb2xlLmxvZyh2YXJzKTtcblx0XHRcdGNvbnNvbGUubG9nKHBhZ2VfbnVtKTtcblxuXHRcdFx0d2lhd19nZXRfbW9yZV9wb3N0cyggcGFnZV9udW0sIHZhcnMpO1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSk7XG5cblxuXG5cdFx0Ly8gR2V0IFBvc3RzIEFKQVggQ2FsbFxuXHRcdGZ1bmN0aW9uIHdpYXdfZ2V0X21vcmVfcG9zdHMoIHBhZ2VfbnVtLCB2YXJzICkge1xuXG5cdFx0XHQvLyBTaG93IHRoZSBhamF4IGxvYWRlclxuXHRcdFx0JChcIi5hamF4LXNwaW5uZXJcIikuc2hvdygpO1xuXHRcdFx0Ly8gaGlkZSB0aGUgbmV4dCBidXR0b25cblx0XHRcdCQoXCIuYXJjaGl2ZV9fbG9hZC1tb3JlXCIpLmhpZGUoKTtcblxuXHRcdFx0Ly8gbWFrZSBzdXJlIHBhZ2VfbnVtIGlzIGJlaW5nIHJlYWQgYXMgYW4gSU5UXG5cdFx0XHR2YXIgcGFnZV9udW0gPSBwYXJzZUludCggcGFnZV9udW0pO1xuXG5cdFx0XHQvLyBEbyB0aGUgQUpBWCBjYWxsXG5cdFx0XHQkLmFqYXgoe1xuXHRcdFx0XHR1cmw6IGpzX3ZhcnMuYWpheHVybCxcblx0XHRcdFx0dHlwZTogJ3Bvc3QnLFxuXHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0YWN0aW9uOiAnYXJjaGl2ZV9sb2FkX21vcmUnLFxuXHRcdFx0XHRcdHBhZ2U6IFx0cGFnZV9udW0sXG5cdFx0XHRcdFx0ZGF0YTpcdHZhcnNcblx0XHRcdFx0fSxcblx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKGV4Y2VwdGlvbil7XG5cdFx0XHRcdFx0YWxlcnQoJ0V4ZXB0aW9uOicrZXhjZXB0aW9uKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oIGh0bWwgKSB7XG5cblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhodG1sKTtcblxuXHRcdFx0XHRcdC8vIElmIHRoZXJlIHdlcmUgYW55IHJlc3VsdHNcblx0XHRcdFx0XHRpZiAoIGh0bWwgIT0gJycpIHtcblxuXG5cdFx0XHRcdFx0XHQvLyBVcGRhdGUgdGhlIG5leHQgcGFnZSBVUkxcblx0XHRcdFx0XHRcdHZhciBidG4gXHRcdFx0XHRcdD0gJChcIi5hcmNoaXZlX19sb2FkLW1vcmUgYVwiKSxcblx0XHRcdFx0XHRcdFx0YnRuX3VybCBcdFx0XHRcdD0gYnRuLmF0dHIoJ2hyZWYnKTtcblxuXHRcdFx0XHRcdFx0YnRuX3VybCBcdFx0XHRcdFx0PSBidG5fdXJsLnNsaWNlKDAsIC0xKS5zcGxpdCgnLycpLFxuXHRcdFx0XHRcdFx0YnRuX3VybFsgYnRuX3VybC5sZW5ndGgtMV0gXHQ9IChwYWdlX251bSArIDEpLFxuXHRcdFx0XHRcdFx0YnRuX3VybCBcdFx0XHRcdFx0PSBidG5fdXJsLmpvaW4oJy8nKSArICcvJztcblxuXHRcdFx0XHRcdFx0YnRuLmF0dHIoJ2hyZWYnLCBidG5fdXJsKTtcblxuXG5cdFx0XHRcdFx0XHQvLyBJbnNlcnQgdGhlIEhUTUxcblx0XHRcdFx0XHRcdCQoXCIjYWpheC1iZWZvcmUtbWVcIikuYmVmb3JlKCBodG1sKTtcblxuXHRcdFx0XHRcdFx0Ly8gc2hvdyB0aGUgbmV4dCBidXR0b25cblx0XHRcdFx0XHRcdCQoXCIuYXJjaGl2ZV9fbG9hZC1tb3JlXCIpLnNob3coKTtcblxuXHRcdFx0XHRcdFx0UXVpY2tMb29rSW5pdCgpOyAvLyBhZGRlZCB0aGlzIHNvIHRoYXQgdGhlIHF1aWNrbG9vayB3b3JrcyBhZnRlciBsb2FkIG1vcmUuIFNlZSBhcHAuanMgZnVuY3Rpb24gY2FsbGVkIFF1aWNrTG9va0luaXRcblxuXHRcdFx0XHRcdC8vIE5vIHJlc3VsdHNcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBzYXkgbm8gcG9zdHNcblx0XHRcdFx0XHRcdC8vICQoXCIjYWpheC1iZWZvcmUtbWVcIikuYmVmb3JlKCAnPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj48cD5ObyBmdXJ0aGVyIHJlc3VsdHMuPC9wPjwvZGl2PicpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gSGlkZSB0aGUgYWpheCBsb2FkZXJcblx0XHRcdFx0XHQkKFwiLmFqYXgtc3Bpbm5lclwiKS5oaWRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH07XG5cdH0pO1xuXG5cblxufSh3aW5kb3cualF1ZXJ5KTtcbiJdfQ==
